package ky0h;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0H ****
// ************************************************************
// 
//                   CYCLE COUNT
//              CYCLE COUNT DATA CREATE
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/12/88  j. brady    created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 00  10/08/80  mmoreh      tbl changes
// 00  07/30/91  scleme      convert CY0H KY0H
// 00  01/15/92  jwood       initialized all w/s recs, maps
// 00  06/19/92  RYONKE      Chaged due to table structure
//                           changes.
// 00  11/16/92  JCAMPB      Chaged due to table structure
// 00  01/22/93  JCAMPB      Chaged close message
// 
// ************************************************************
// *********************
Program KY0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY1REC CY1REC; // record
  CY2REC CY2REC; // record
  CY3REC CY3REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0HW01 KY0HW01; // record
  KY0HW02 KY0HW02; // record
  KY0HWX1 KY0HWX1; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use YDNTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSLTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use KY0HM.KY0HM110,  // forms
      KY0HM.KY0HM999
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0H110: KY0H110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "120 "; /* error id location id*/
    goto KY0H120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0H120: KY0H120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0H120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0H110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf14)
      goto KY0H110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0H120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0H140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0H120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0H140: KY0H140();

     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0H140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0H110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf14)
      goto KY0H110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0H120; /* <=== re-display key screen*/
      end
      goto KY0H140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      CYWREC.XXXLOCID = "140 ";
      goto KY0H140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf12
     && CYWREC.CYWMSGNO == 0020)
      CYWREC.XXXLOCID = "120 ";
      goto KY0H120; /* <=== setup for new input*/
    end
     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "120 ";
      goto KY0H120; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0H140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0H

// one time initializations
Function KY0H110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented transaction id setting           ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0HM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CY1REC empty; /* doc. hdr/loc record*/
  set CY2REC empty; /* doc. item/prod record*/
  set CY3REC empty; /* doc. case/size record*/
  set CYVREC empty; /* IO mod working storage fields*/
  set CYWREC empty; /* common working storage fields*/
  set CYXREC empty; /* pass working storage fields*/
  set KY0HW01 empty; /* appl. working storage area*/
  set KY0HWX1 empty; /* appl. work stg area for prod. cnt*/
  set PC2REC empty; /**/
  set SL5REC empty; /* stock loc loc record*/
  set SL6REC empty; /* stock loc prod/loc record*/
  set PKNREC empty; /* product color2 record*/
  set SYPREC empty; /* product's valid sizes record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set SQLCA empty; /* SQL returned data record*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/06/88    unknown     created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0HM110";
  CYWREC.XXXTITLE = " CYCLE COUNT DATA CREATE ";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0H"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0H110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0HM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0HM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0HM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0HM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0HM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0HM110.XGPCD = "02";
  KY0HM110.SY2CLRID = "00 ";
  KY0HM110.XDMCD = "00";
  KY0HM110.XQACD = "01";
  KY0HM110.PC2INSEG = "000";
  KY0HM110.XSLCD = "000";
  KY0HM110.XPGCD = "00";
  KY0HM110.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0HM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0HM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0H110

// converse & control key entry
Function KY0H120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** protect all data fields                             ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= 40)
    set KY0HM110.SY4IDDSC[CYWIDX01] skip, invisible;
    set KY0HM110.CY3COUNT[CYWIDX01] skip, invisible;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end



   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0HM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0HM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0HM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0HM110.CATOAP;
    COMMAREA.CAITEM = KY0HM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0HM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0HM110.VAGen_EZEMSG = " ";
  set KY0HM110.CATOAP initialAttributes;
  set KY0HM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset map input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0HM110.XWHCD initialAttributes;
  set KY0HM110.IN5TRDCD initialAttributes;
  set KY0HM110.IN5TRDOC initialAttributes;
  set KY0HM110.IN5TRSUB initialAttributes;
  set KY0HM110.YDNCD initialAttributes;
  set KY0HM110.CY2CNTBY initialAttributes;
  set KY0HM110.XARCD initialAttributes;
  set KY0HM110.SL4ZONE initialAttributes;
  set KY0HM110.SL5LOCTN initialAttributes;
  set KY0HM110.SL2CASE initialAttributes;
  set KY0HM110.XGPCD initialAttributes;
  set KY0HM110.SY1STNBR initialAttributes;
  set KY0HM110.SY2CLRID initialAttributes;
  set KY0HM110.XDMCD initialAttributes;
  set KY0HM110.XQACD initialAttributes;
  set KY0HM110.PC2INSEG initialAttributes;
  set KY0HM110.XSLCD initialAttributes;
  set KY0HM110.XPGCD initialAttributes;
  set KY0HM110.XUMCD initialAttributes;
  set KY0HM110.XOWCD initialAttributes;

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= 40)
    set KY0HM110.SY4IDDSC[CYWIDX01] initialAttributes;
    set KY0HM110.CY3COUNT[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0HM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0HM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0HSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120I";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120J";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120K";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120L";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0H120

// converse & control data entry
Function KY0H140()
   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    set KY0HM110.CY3COUNT[1] cursor;
  end

  if (CY1REC.YDUCD != "  "
   && CY2REC.YDUCD != "  ")
    if (CY1REC.YDUCD != "01"
     || CY2REC.YDUCD != "01")
      CYWREC.CYWMSGNO = 86;
      set KY0HM110.IN5TRDOC cursor;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/
  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0HM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0HM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO STOCK LOCATE MAIN MENU                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0HM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0HM110.CATOAP;
    COMMAREA.CAITEM = KY0HM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0HM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0HM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0HM110.CATOAP initialAttributes;
  set KY0HM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0HM110.XWHCD initialAttributes;
  set KY0HM110.IN5TRDCD initialAttributes;
  set KY0HM110.IN5TRDOC initialAttributes;
  set KY0HM110.IN5TRSUB initialAttributes;
  set KY0HM110.YDNCD initialAttributes;
  set KY0HM110.CY2CNTBY initialAttributes;
  set KY0HM110.XARCD initialAttributes;
  set KY0HM110.SL4ZONE initialAttributes;
  set KY0HM110.SL5LOCTN initialAttributes;
  set KY0HM110.SL2CASE initialAttributes;
  set KY0HM110.XGPCD initialAttributes;
  set KY0HM110.SY1STNBR initialAttributes;
  set KY0HM110.SY2CLRID initialAttributes;
  set KY0HM110.XDMCD initialAttributes;
  set KY0HM110.XQACD initialAttributes;
  set KY0HM110.PC2INSEG initialAttributes;
  set KY0HM110.XSLCD initialAttributes;
  set KY0HM110.XPGCD initialAttributes;
  set KY0HM110.XUMCD initialAttributes;
  set KY0HM110.XOWCD initialAttributes;

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= KY0HW01.KY0HWNSZ)
    set KY0HM110.CY3COUNT[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0HM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0HM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0HSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0HSF1(); /* <=== save key values*/
      KY0HST1(); /* <=== reset screen (empty)*/
      KY0HSH1(); /* <=== enter processing*/
      exit stack;
    end
    if (CY1REC.YDUCD != "  "
     && CY2REC.YDUCD != "  ")
      if (CY1REC.YDUCD != "01"
       || CY2REC.YDUCD != "01")
        KY0HSQ1(); /* reset  screen for next transaction*/
        CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
        exit stack;
      end
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0HSU1(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* 'y' = stay on 1st pass*/
        KY0HST1(); /* <=== reset screen (empty)*/
      end
      exit stack;
    end
    if (CY1REC.XARCD == "01")
      KY0HW02.KY0HW-CLOSE-COMPLETE-FLAG = "N";
      while (KY0HW02.KY0HW-CLOSE-COMPLETE-FLAG == "N")
        KY0H150();
      end
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    set CY1REC empty;
    set CY2REC empty;
    set CY3REC empty;
    KY0HSQ1(); /* reset  screen for next transaction*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140H";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0H140

// Close confermation screen
Function KY0H150()
   /* ************************************************************/
   /* *** PROCESS CLOSE CONFERMATION SCREEN*/
   /* ************************************************************/

  set KY0HM999 initial;
  KY0HW02.KY0HW-CLOSE-COMPLETE-FLAG = "Y";

  if (KY0HW02.KY0HW-CLOSE-FLAG == "Y")
    KY0HM999.KY0HMLIT[1] = "       BULK LOCATION AUTO CLOSE       ";
    KY0HM999.KY0HMLIT[2] = "       ------------------------       ";
    KY0HM999.KY0HMLIT[3] = "     COUNTS ENTERED ARE IN BALANCE    ";
    KY0HM999.KY0HMLIT[4] = "                                      ";
    KY0HM999.KY0HMLIT[5] = " PRESS: PF12   TO CLOSE COUNT DOCUMENT";
    KY0HM999.KY0HMLIT[6] = "        ENTER  TO CONTINUE WITHOUT    ";
    KY0HM999.KY0HMLIT[7] = "                  CLOSING DOCUMENT    ";
  else
    KY0HM999.KY0HMLIT[1] = "*** VARIANCE * VARIANCE * VARIANCE ***";
    KY0HM999.KY0HMLIT[2] = "*** -------- * -------- * -------- ***";
    KY0HM999.KY0HMLIT[3] = "* COUNTS ENTERED ARE NOT IN BALANCE  *";
    KY0HM999.KY0HMLIT[4] = "* PLEASE ENTER ADDITIONAL DATA, OR   *";
    KY0HM999.KY0HMLIT[5] = "* RECONCILE COUNTS WITH OUTSTANDING  *";
    KY0HM999.KY0HMLIT[6] = "* WORK ORDERS                        *";
    KY0HM999.KY0HMLIT[7] = "*  *** PRESS ENTER TO CONTINUE ***   *";
    set KY0HM999 alarm;
  end


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0HM110.XXXERRID = CYWREC.XXXERRID;



  converse KY0HM999 ;

   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    return;
  end

   /* ************************************************************/
   /* *** if pf12 : do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    if (KY0HW02.KY0HW-CLOSE-FLAG == "Y")
   /* *********************************************************************/
   /* ** SET THE ITEM CLOSED*/
   /* *********************************************************************/

      XSCY2I0();
      if (SQLCA.VAGen_SQLCODE == 0) /* ;if found*/
        CY2REC.YDUCD = "02";
        XSCY2R0();
        KY0HS3I();
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  KY0HW02.KY0HW-CLOSE-COMPLETE-FLAG = "N";
  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "150H";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/
end // end KY0H150

// inquiry : dpick.vpksty01
Function KY0HS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0HS-CALL-IO1810";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HS-SEL-VPKSTY01

// get internal and external size
Function KY0HS-SIZE-CONVERT()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call SY1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HS-SIZE-CONVERT

// verify style/color
Function KY0HS1A()
   /* ************************************************************/
   /* ***                verify style/color                   ****/
   /* ************************************************************/


  TA1REC.TA1LOCAT[2] = "KY0HS1A ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set PKNREC empty;

  PKNREC.XGPCD = KY0HM110.XGPCD;
  PKNREC.SY1STNBR = KY0HM110.SY1STNBR;
  PKNREC.SY2CLRID = KY0HM110.SY2CLRID;
  PKNREC.XDMCD = KY0HM110.XDMCD;

  KY0HS-SEL-VPKSTY01(); /* <=== style/color retrieve*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AA";
    CYWREC.CYWMSGNO = 0056; /* <--- not on db msg*/
    set KY0HM110.SY1STNBR cursor, bold;
    set KY0HM110.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AB";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1AC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1A

// verify area,zone,location
Function KY0HS1B()
   /* ************************************************************/
   /* ***             verify area,zone,location               ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1B ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set SL5REC empty;

  SL5REC.XWHCD = KY0HM110.XWHCD;
  SL5REC.XARCD = KY0HM110.XARCD;
  SL5REC.SL4ZONE = KY0HM110.SL4ZONE;
  SL5REC.SL5LOCTN = KY0HM110.SL5LOCTN;

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1BA";
    CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
    set KY0HM110.XARCD cursor, bold;
    set KY0HM110.SL4ZONE bold;
    set KY0HM110.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1BB";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1BC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1B

// obtain doc hdr record
Function KY0HS1C()
   /* ************************************************************/
   /* *** obtain cc document header record                    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1C ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY1REC empty;

  CY1REC.XWHCD = KY0HM110.XWHCD;
  CY1REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0HM110.IN5TRDOC;

  XSCY1I0(); /* select location document record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    if (KY0HM110.IN5TRDCD != "M")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1CA";
      CYWREC.CYWMSGNO = 0047; /* <--- invalid value*/
      set KY0HM110.IN5TRDCD cursor, bold;
      return;
    else
      if (KY0HM110.SY1STNBR == "  ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1CC";
        CYWREC.CYWMSGNO = 0009; /* <--- required field*/
        set KY0HM110.SY1STNBR cursor, bold;
      end

      if (KY0HM110.XARCD == "  ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1CD";
        CYWREC.CYWMSGNO = 0009; /* <--- required field*/
        set KY0HM110.XARCD cursor, bold;
        set KY0HM110.SL4ZONE bold;
        set KY0HM110.SL5LOCTN bold;
      end

      if (KY0HM110.CY2CNTBY == "   ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1CG";
        CYWREC.CYWMSGNO = 0009; /* <--- required field*/
        set KY0HM110.CY2CNTBY cursor, bold;
      end

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0HW01.KY0HWHDR = "N"; /* no header found*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1CE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1CF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1C

// obtain doc item record
Function KY0HS1D()

   /* ************************************************************/
   /* *** obtain cc document item record                      ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1D ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY2REC empty;

  CY2REC.XWHCD = KY0HM110.XWHCD;
  CY2REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0HM110.IN5TRDOC;
  CY2REC.IN5TRSUB = KY0HM110.IN5TRSUB;

  XSCY2I0(); /* select document item record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    if (KY0HM110.SY1STNBR == "  ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1DB";
      CYWREC.CYWMSGNO = 0009; /* <--- required field*/
      set KY0HM110.SY1STNBR cursor, bold;
      return;
    end

    if (KY0HM110.CY2CNTBY == "   ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1DE";
      CYWREC.CYWMSGNO = 0009; /* <--- required field*/
      set KY0HM110.CY2CNTBY cursor, bold;
      return;
    end

    KY0HW01.KY0HWITM = "N"; /* set add doc item record sw*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1DC";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1DD";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1D

// obtain valid sizes
Function KY0HS1E()
   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* *** note: use compressed mode to detect blank size and  ****/
   /* ***       reduce loop searches                          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1E ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set SYPREC empty;

  SYPREC.XGPCD = KY0HM110.XGPCD;
  SYPREC.SY1STNBR = KY0HM110.SY1STNBR;
  SYPREC.SY2CLRID = KY0HM110.SY2CLRID;
  SYPREC.XDMCD = KY0HM110.XDMCD;
  SYPREC.XQACD = "**";

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "C";

  KY0HS-SIZE-CONVERT(); /* <=== get size xlations*/

  if (SYPREC.SYPRC <= 5)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1EA";
      CYWREC.CYWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SYPREC.SYPRC == +09)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1E

// obtain doc size rec
Function KY0HS1F()

   /* ************************************************************/
   /* *** obtain cc document size record                      ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1F ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  CY3REC.SY5SZID = SYPREC.SY5SZID[CYWIDX01];
  KY0HW02.KY0HWIX1 = SYPREC.SY5SZID[CYWIDX01];

  XSCY3I0(); /* select document size record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    return; /* no count data for this size*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1FA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    else
      if (SQLCA.VAGen_SQLCODE != +0)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1FB";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

   /* ************************************************************/
   /* *** if document size record found...                    ****/
   /* ************************************************************/

  if (SQLCA.VAGen_SQLCODE == +0)
    KY0HM110.CY3COUNT[CYWIDX01] = CY3REC.CY3COUNT;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1F

// add doc hdr record
Function KY0HS1G()
   /* ************************************************************/
   /* ***  add a cc document header record                    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1G ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY1REC empty;

   /* *** format cy1rec for insert ****/

  CY1REC.XWHCD = KY0HM110.XWHCD;
  CY1REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0HM110.IN5TRDOC;
  KY0HW01.KY0HWDOC = KY0HM110.IN5TRDOC;
  CY1REC.IN5TRPRT = KY0HW01.KY0HWPRT;
  CY1REC.XARCD = KY0HM110.XARCD;
  CY1REC.SL4ZONE = KY0HM110.SL4ZONE;
  CY1REC.SL5LOCTN = KY0HM110.SL5LOCTN;
  CY1REC.YLTCD = SL5REC.YLTCD;
  CY1REC.YDUCD = "01";
  CY1REC.YDNCD = "08"; /* manual will be treated = loc req*/

  XSCY1A0(); /* add location document record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.CYWERRSW = "Y";
    CYWREC.CYWSKYSW = "N";
    CYWREC.XXXLOCID = "S1GA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -803)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1GB";
    CYWREC.CYWMSGNO = 0045; /* <--- record exists msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1GC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1G

// add doc item record
Function KY0HS1H()
   /* ************************************************************/
   /* ***  add a cc document item record                      ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1H ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY2REC empty;

   /* *** format cy2rec for insert ****/

  CY2REC.XWHCD = KY0HM110.XWHCD;
  CY2REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0HM110.IN5TRDOC;
  KY0HW01.KY0HWDOC = KY0HM110.IN5TRDOC;
  CY2REC.IN5TRPRT = KY0HW01.KY0HWPRT;
  CY2REC.IN5TRSUB = KY0HM110.IN5TRSUB;
  CY2REC.XGPCD = KY0HM110.XGPCD;
  CY2REC.SY1STNBR = KY0HM110.SY1STNBR;
  CY2REC.SY2CLRID = KY0HM110.SY2CLRID;
  CY2REC.XDMCD = KY0HM110.XDMCD;
  CY2REC.XQACD = KY0HM110.XQACD;
  CY2REC.PC2INSEG = KY0HM110.PC2INSEG;
  CY2REC.XSLCD = KY0HM110.XSLCD;
  CY2REC.XPGCD = KY0HM110.XPGCD;
  CY2REC.XUMCD = KY0HM110.XUMCD;
  CY2REC.XOWCD = KY0HM110.XOWCD;
  CY2REC.XEGCD = "000";
  CY2REC.YDUCD = "01";
  CY2REC.CY2CNTBY = KY0HM110.CY2CNTBY;

  XSCY2A0(); /* add item record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1HA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -803) /* <=== for add*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1HB";
    CYWREC.CYWMSGNO = 0045; /* <--- record exists msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1HC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1H

// add doc size record
Function KY0HS1I()
   /* ************************************************************/
   /* ***  add a cc document size record                      ****/
   /* ***  note: constant fields setup once prev.ly           ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1I ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* ** format cy3rec for insert ***/

  CY3REC.SY5SZID = SYPREC.SY5SZID[CYWIDX01];
  CY3REC.CY3COUNT = KY0HM110.CY3COUNT[CYWIDX01];
  CY3REC.SL6ONHND = +0;

  KY0HW02.KY0HWIX1 = CY3REC.SY5SZID;
  if (CY1REC.XARCD == "01"
   && KY0HW02.KY0HW-SL6ONHND[KY0HWIX1] != CY3REC.CY3COUNT)
    KY0HW02.KY0HW-CLOSE-FLAG = "N";
  end

  XSCY3A0(); /* select location document record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -803) /* <=== for add*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IB";
    CYWREC.CYWMSGNO = 0045; /* <--- record exists msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1I

// delete size records
Function KY0HS1K()
   /* ************************************************************/
   /* *** delete cc document size records                     ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1K ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  XSCY3D0(); /* delete all document size records*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    return; /* no count data for this size*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1FA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    else
      if (SQLCA.VAGen_SQLCODE != +0)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1FB";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1K

// save prod. values
Function KY0HS1S()
  if (KY0HWX1.XWHCD == SL6REC.XWHCD
   && KY0HWX1.XARCD == SL6REC.XARCD
   && KY0HWX1.SL4ZONE == SL6REC.SL4ZONE
   && KY0HWX1.SL5LOCTN == SL6REC.SL5LOCTN
   && KY0HWX1.XGPCD == SL6REC.XGPCD
   && KY0HWX1.SY1STNBR == SL6REC.SY1STNBR
   && KY0HWX1.SY2CLRID == SL6REC.SY2CLRID
   && KY0HWX1.XDMCD == SL6REC.XDMCD
   && KY0HWX1.XQACD == SL6REC.XQACD
   && KY0HWX1.XOWCD == SL6REC.XOWCD
   && KY0HWX1.PC2INSEG == SL6REC.PC2INSEG
   && KY0HWX1.XEGCD == SL6REC.XEGCD
   && KY0HWX1.XPGCD == SL6REC.XPGCD
   && KY0HWX1.XUMCD == SL6REC.XUMCD
   && KY0HWX1.XSLCD == SL6REC.XSLCD
   && CYWREC.CYWERRSW == "N")
       /* next sentence               /* <=== fetch next row*/
  else
    CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
       /* ************************************************************/
       /* *** save all product fld values                         ****/
       /* ************************************************************/

    KY0HWX1.XWHCD = SL6REC.XWHCD;
    KY0HWX1.XARCD = SL6REC.XARCD;
    KY0HWX1.SL4ZONE = SL6REC.SL4ZONE;
    KY0HWX1.SL5LOCTN = SL6REC.SL5LOCTN;
    KY0HWX1.XGPCD = SL6REC.XGPCD;
    KY0HWX1.SY1STNBR = SL6REC.SY1STNBR;
    KY0HWX1.SY2CLRID = SL6REC.SY2CLRID;
    KY0HWX1.XDMCD = SL6REC.XDMCD;
    KY0HWX1.XQACD = SL6REC.XQACD;
    KY0HWX1.XOWCD = SL6REC.XOWCD;
    KY0HWX1.PC2INSEG = SL6REC.PC2INSEG;
    KY0HWX1.XEGCD = SL6REC.XEGCD;
    KY0HWX1.XPGCD = SL6REC.XPGCD;
    KY0HWX1.XUMCD = SL6REC.XUMCD;
    KY0HWX1.XSLCD = SL6REC.XSLCD;
  end

  if (SL6REC.XWHCD == KY0HM110.XWHCD
   && SL6REC.XARCD == KY0HM110.XARCD
   && SL6REC.SL4ZONE == KY0HM110.SL4ZONE
   && SL6REC.SL5LOCTN == KY0HM110.SL5LOCTN
   && SL6REC.XGPCD == KY0HM110.XGPCD
   && SL6REC.SY1STNBR == KY0HM110.SY1STNBR
   && SL6REC.SY2CLRID == KY0HM110.SY2CLRID
   && SL6REC.XDMCD == KY0HM110.XDMCD
   && SL6REC.XQACD == KY0HM110.XQACD
   && SL6REC.XOWCD == KY0HM110.XOWCD
   && SL6REC.PC2INSEG == KY0HM110.PC2INSEG
   && SL6REC.XPGCD == KY0HM110.XPGCD
   && SL6REC.XUMCD == KY0HM110.XUMCD
   && SL6REC.XSLCD == KY0HM110.XSLCD)
    if (KY0HM110.SL2CASE > " "
     && KY0HM110.SL2CASE != SL6REC.SL2CASE)
       /* next sentence*/
    else
      KY0HW02.KY0HWIX1 = SL6REC.SY5SZID;
      KY0HW02.KY0HW-SL6ONHND[KY0HWIX1] = SL6REC.SL6ONHND;
    end
  end
  if (KY0HW01.XUMCD != SL6REC.XUMCD)
    KY0HW01.XUMCD = SL6REC.XUMCD;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HS1S

// cnt/setup # prod.s/loc
Function KY0HS1T()


   /* ************************************************************/
   /* *** obtain all size data for the specific case entered  ****/
   /* *** or for all cases if '*' used                        ****/
   /* *** count only the nbr of products invloved             ****/
   /* ************************************************************/

  move +0 to KY0HW02.KY0HW-SL6ONHND[1] for 40;
  SL6REC.XWHCD = KY0HM110.XWHCD;
  SL6REC.XARCD = KY0HM110.XARCD;
  SL6REC.SL4ZONE = KY0HM110.SL4ZONE;
  SL6REC.SL5LOCTN = KY0HM110.SL5LOCTN;
  SL6REC.SL2CASE = "********";
  SL6REC.SL2PALET = "*****";

  XSSL6S4(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* +100 is not an error*/
      return;
    end
    CYWREC.CYWERRSW = "Y";
    set KY0HM110.IN5TRDCD bold;
    set KY0HM110.IN5TRDOC cursor, bold;
    set KY0HM110.IN5TRSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1TA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1TB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save prod. values and cnt nbr of prod.s             ****/
   /* *** note: new case is NOT a new prod.                   ****/
   /* ************************************************************/

  CYWREC.CYWCTR01 = 0;

  while (SQLCA.VAGen_SQLCODE == 0
   && CYWREC.CYWERRSW == "N")
    while (SQLCA.VAGen_SQLCODE == 0
     && CYWREC.CYWERRSW == "N")
      KY0HS1S(); /* save prod. values*/
      XSSL6F4(); /* <=== fetch next row*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "S1TC";
  CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HS1T

// upd doc hdr # crt.d
Function KY0HS1U()


   /* ************************************************************/
   /* ***  increment document header record's # created       ****/
   /* ***  note: cy1 prev.ly obtained for data display        ****/
   /* ***        (want to detect if updated since read)       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HS1U ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  CY1REC.XWHCD = KY0HM110.XWHCD;
  CY1REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0HM110.IN5TRDOC;

  XSCY1U0(); /* get for upd w/out data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1UA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1UB";
    else
      CYWREC.XXXLOCID = "S1UC";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  XSCY1R0(); /* replace loc doc rec*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911) /* <--- leave only if u0 used*/
      CYWREC.XXXLOCID = "S1UC";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      if (CY1REC.CY1DATA > " ") /* <--- returned data has any changes*/
        CYWREC.XXXLOCID = "S1UD";
        CYWREC.CYWMSGNO = 0032; /* <--- row updated since last read*/
      else
        CYWREC.CYWSKYSW = "N";
        CYWREC.XXXLOCID = "S1UE";
        CYWREC.CYWMSGNO = 0033; /* <--- row deleted since last read*/
      end
      return;
    end
    CYWREC.XXXLOCID = "S1UF";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS1U

// add doc/size records
Function KY0HS1X()

   /* ************************************************************/
   /* *** This statement group initializes the case/size      ****/
   /* *** layout & sets up the constant value fields before   ****/
   /* *** looping thru all size data.                         ****/
   /* ************************************************************/

  set CY3REC empty;

  if (CY1REC.XARCD == "01")
    KY0HW02.KY0HW-CLOSE-FLAG = "Y";
  else
    KY0HW02.KY0HW-CLOSE-FLAG = "N";
  end
  CY3REC.XWHCD = KY0HM110.XWHCD;
  CY3REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY3REC.IN5TRDOC = KY0HM110.IN5TRDOC;
  CY3REC.IN5TRSUB = KY0HM110.IN5TRSUB;
  CY3REC.SL2CASE = KY0HM110.SL2CASE;
  KY0HW01.KY0HWDOC = KY0HM110.IN5TRDOC;
  CY3REC.IN5TRPRT = KY0HW01.KY0HWPRT;

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0HW01.KY0HWNSZ)

    KY0HS1I(); /* add doc size rec*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end

    CYWIDX01 = CYWIDX01 + 1;

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HS1X

// update to closed
Function KY0HS3I()
  set CY3REC empty;
  CY3REC.XWHCD = KY0HM110.XWHCD;
  CY3REC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CY3REC.IN5TRDOC = KY0HM110.IN5TRDOC;
  CY3REC.IN5TRSUB = KY0HM110.IN5TRSUB;
  CY3REC.SL2CASE = KY0HM110.SL2CASE;
  if (CY3REC.SL2CASE == " ")
    CY3REC.SL2CASE = "********";
  end

  XSCY3S1(); /* <=== get row with data*/
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    set KY0HM110.SY4IDDSC[CYWIDX01] bold;
    set KY0HM110.CY3COUNT[CYWIDX02] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SXXA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SXXB";
    else
      CYWREC.XXXLOCID = "SXXC";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

         /* ************************************************************/
         /* *** setup the approriate record fields for the update   ****/
         /* *** and TA1REC.TA1LOCAT(2) = what executes the io sgrp  ****/
         /* *** note: TA1REC.TA1MAP is setup in level init.         ****/
         /* ***       zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
         /* ************************************************************/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (CY3REC.CY3COUNT != 0)
      KY0HW02.KY0HWIX1 = CY3REC.SY5SZID;
      CY3REC.SL6ONHND = KY0HW-SL6ONHND[KY0HWIX1];
      TA1REC.TA1LOCAT[2] = "KY0HSXX ";
      XSCY3R0(); /* <=== update*/
      if (SQLCA.VAGen_SQLCODE != 0)
        CYWREC.CYWERRSW = "Y";
        set KY0HM110.SY4IDDSC[CYWIDX01] bold;
        set KY0HM110.CY3COUNT[CYWIDX02] cursor, bold;
        if (SQLCA.VAGen_SQLCODE == +100)
          CYWREC.XXXLOCID = "SXXD";
          CYWREC.CYWMSGNO = 0032;
          return;
        end
        CYWREC.XXXLOCID = "SXXF";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    XSCY3F1(); /* <=== fetch*/
  end
  XSCY3C1();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HS3I

// edit for missing fields
Function KY0HSA1()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0HM110.IN5TRSUB == 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0HM110.IN5TRSUB cursor, bold;
  end

  if (KY0HM110.IN5TRDOC == 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0HM110.IN5TRDOC cursor, bold;
  end

  if (KY0HM110.IN5TRDCD == "  ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0HM110.IN5TRDCD cursor, bold;
  end

  if (KY0HM110.XWHCD == "  ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0HM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSA1

// same key edit
Function KY0HSB1()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0HM110.XWHCD != KY0HW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.IN5TRDCD != KY0HW01.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.IN5TRDOC != KY0HW01.IN5TRDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.IN5TRSUB != KY0HW01.IN5TRSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.CY2CNTBY != KY0HW01.CY2CNTBY)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XARCD != KY0HW01.XARCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.SL4ZONE != KY0HW01.SL4ZONE)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.SL5LOCTN != KY0HW01.SL5LOCTN)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.SL2CASE != KY0HW01.SL2CASE)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XGPCD != KY0HW01.XGPCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.SY1STNBR != KY0HW01.SY1STNBR)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.SY2CLRID != KY0HW01.SY2CLRID)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XDMCD != KY0HW01.XDMCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XQACD != KY0HW01.XQACD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.PC2INSEG != KY0HW01.PC2INSEG)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XSLCD != KY0HW01.XSLCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XPGCD != KY0HW01.XPGCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XUMCD != KY0HW01.XUMCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0HM110.XOWCD != KY0HW01.XOWCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSB1

// key edits
Function KY0HSC1()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0HM110.SY1STNBR != "      ")
    if (KY0HM110.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KY0HM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        CYWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      end
    end

     /* ************************************************************/
     /* *** if owner code in tbl & active: continue             ****/
     /* *** note: whse owner grp flag already saved             ****/
     /* ***       if flag = n, ow must = 00                     ****/
     /* *** note: owner tbl key = whse + owner                  ****/
     /* ************************************************************/

    if (CYWREC.XWHOWNGF == "Y")
      CYWREC.XWHCD = KY0HM110.XWHCD;
      CYWREC.CYWTBLCD = KY0HM110.XOWCD;
      if (CYWREC.CYWTBLKY in XOWTBL.XOWKEY)
        if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* ** next sentence ***/
        else
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "SC1C";
          CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
          set KY0HM110.XOWCD cursor, bold;
        end
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1D";
        CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
        set KY0HM110.XOWCD cursor, bold;
      end
    else
      if (KY0HM110.XOWCD != "00")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1E";
        CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
        set KY0HM110.XOWCD cursor, bold;
      end
    end

     /* ************************************************************/
     /* *** if unit of measure code in tbl & active: continue   ****/
     /* *** note: non-required fld re: may want default value   ****/
     /* ************************************************************/

    if (KY0HM110.XUMCD > " ")
      if (KY0HM110.XUMCD in XUMTBL.XUMCD)
        if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* ** next sentence ***/
        else
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "SC1F";
          CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
          set KY0HM110.XUMCD cursor, bold;
        end
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1G";
        CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
        set KY0HM110.XUMCD cursor, bold;
      end
    end

     /* ************************************************************/
     /* *** if package type code in tbl & active: continue      ****/
     /* ************************************************************/

    if (KY0HM110.XPGCD in XPGTBL.XPGCD)
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1H";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.XPGCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1I";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.XPGCD cursor, bold;
    end

     /* ************************************************************/
     /* *** if sl class code in tbl & active: continue          ****/
     /* ************************************************************/

    if (KY0HM110.XSLCD in XSLTBL.XSLCD)
      if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1J";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.XSLCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1K";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.XSLCD cursor, bold;
    end

     /* ************************************************************/
     /* *** if spec diff code in tbl & active: continue         ****/
     /* ************************************************************/

    set PC2REC empty; /* clear row storage area*/

    PC2REC.XGPCD = KY0HM110.XGPCD;
    PC2REC.PC2INSEG = KY0HM110.PC2INSEG;
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      if (PC2REC.XXXSTAT == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1L";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.PC2INSEG cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1M";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.PC2INSEG cursor, bold;
    end

     /* ************************************************************/
     /* *** if quality code in tbl & active: continue           ****/
     /* ************************************************************/

    if (KY0HM110.XQACD in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1N";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.XQACD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1O";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.XQACD cursor, bold;
    end

     /* ************************************************************/
     /* *** if dimension code in tbl & active: continue         ****/
     /* ************************************************************/

    if (KY0HM110.XDMCD in XDMTBL.XDMCD)
      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1P";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.XDMCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1Q";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.XDMCD cursor, bold;
    end

     /* ************************************************************/
     /* *** if gpc code in tbl & active: continue               ****/
     /* ************************************************************/

    if (KY0HM110.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1R";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0HM110.XGPCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1S";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0HM110.XGPCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** verify warehouse entered (abbr. moved above)        ****/
   /* ************************************************************/

  if (KY0HM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      KY0HM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0HM110.XWHCD cursor, bold;
      return; /* <--- exception*/
    end
  else
    KY0HM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1B";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0HM110.XWHCD cursor, bold;
    return; /* <--- exception*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HSC1

// 1st pass table lookups
Function KY0HSE1()



   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0HSE1 ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* ************************************************************/
   /* *** set hdr and itm found switches                      ****/
   /* ************************************************************/

  KY0HW01.KY0HWHDR = "Y"; /* initialize to record found*/
  KY0HW01.KY0HWITM = "Y"; /* initialize to record found*/

   /* ************************************************************/
   /* *** if style entered then verify style/color            ****/
   /* ************************************************************/

  if (KY0HM110.SY1STNBR != "      ")

    KY0HS1A(); /* verify style/color*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end

    KY0HM110.SY1SSTNM = PKNREC.SY1SSTNM;
    KY0HM110.SY2CLRAB = PKNREC.SY2CLRAB;

  end

   /* ************************************************************/
   /* *** if entered, verify area,zone,location               ****/
   /* ************************************************************/

  if (KY0HM110.XARCD != "  "
   || KY0HM110.SL4ZONE != "  "
   || KY0HM110.SL5LOCTN != "      ")

    KY0HS1B(); /* verify area,zone,location*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end

  end

   /* ************************************************************/
   /* *** obtain cc document header record                    ****/
   /* ************************************************************/

  KY0HS1C(); /* obtain cc doc hdr record*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end


   /* ************************************************************/
   /* *** if document header record found....                 ****/
   /* ************************************************************/

  if (KY0HW01.KY0HWHDR == "Y") /* if header found*/
    KY0HM110.YDNCD = CY1REC.YDNCD;

    if (KY0HM110.YDNCD in YDNTBL.YDNCD)
      if (YDNTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KY0HM110.YDNABRV = YDNTBL.YDNABRV[sysVar.arrayIndex];
      else
        KY0HM110.YDNABRV = "******";
      end
    else
      KY0HM110.YDNABRV = "******";
    end

    if (KY0HM110.XARCD == "  ")
      KY0HM110.XARCD = CY1REC.XARCD;
      KY0HM110.SL4ZONE = CY1REC.SL4ZONE;
      KY0HM110.SL5LOCTN = CY1REC.SL5LOCTN;
    else
      if (CY1REC.SL5LOCTN != KY0HM110.SL5LOCTN)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1A";
        CYWREC.CYWMSGNO = 0044; /* <--- invalid value*/
        set KY0HM110.IN5TRDOC cursor, bold;
      end
      if (CY1REC.SL4ZONE != KY0HM110.SL4ZONE)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1B";
        CYWREC.CYWMSGNO = 0044; /* <--- invalid value*/
        set KY0HM110.IN5TRDOC cursor, bold;
      end
      if (CY1REC.XARCD != KY0HM110.XARCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1C";
        CYWREC.CYWMSGNO = 0044; /* <--- invalid value*/
        set KY0HM110.IN5TRDOC cursor, bold;
      end

      if (CYWREC.CYWERRSW == "Y")
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** obtain cc document item record                      ****/
   /* ************************************************************/

  if (KY0HW01.KY0HWHDR == "Y") /* if header found*/
    KY0HS1D(); /* obtain document item record*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** if document item record found....                   ****/
   /* ************************************************************/

  if (KY0HW01.KY0HWHDR == "Y" /* if header found*/
   && KY0HW01.KY0HWITM == "Y") /* and item found*/
    if (KY0HM110.SY1STNBR == "  ")
      KY0HM110.XGPCD = CY2REC.XGPCD;
      KY0HM110.SY1STNBR = CY2REC.SY1STNBR;
      KY0HM110.SY2CLRID = CY2REC.SY2CLRID;
      KY0HM110.XDMCD = CY2REC.XDMCD;
      KY0HM110.XQACD = CY2REC.XQACD;
      KY0HM110.XSLCD = CY2REC.XSLCD;
      KY0HM110.PC2INSEG = CY2REC.PC2INSEG;
      KY0HM110.XPGCD = CY2REC.XPGCD;
      KY0HM110.XUMCD = CY2REC.XUMCD;
      KY0HM110.XOWCD = CY2REC.XOWCD;
    else
      if (CY2REC.XOWCD != KY0HM110.XOWCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1D";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XUMCD != KY0HM110.XUMCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1E";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XPGCD != KY0HM110.XPGCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1F";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XSLCD != KY0HM110.XSLCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1G";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.PC2INSEG != KY0HM110.PC2INSEG)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1H";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XQACD != KY0HM110.XQACD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1I";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XDMCD != KY0HM110.XDMCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1J";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.SY2CLRID != KY0HM110.SY2CLRID)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1K";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.SY1STNBR != KY0HM110.SY1STNBR)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1L";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end
      if (CY2REC.XGPCD != KY0HM110.XGPCD)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1M";
        CYWREC.CYWMSGNO = 0042; /* <--- invalid value*/
        set KY0HM110.IN5TRSUB cursor, bold;
      end

    end

    if (KY0HM110.CY2CNTBY == "   ")
      KY0HM110.CY2CNTBY = CY2REC.CY2CNTBY;
    else
      if (CY2REC.CY2CNTBY != KY0HM110.CY2CNTBY)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "SE1N";
        CYWREC.CYWMSGNO = 0046; /* <--- invalid value*/
        set KY0HM110.CY2CNTBY cursor, bold;
      end
    end

    if (CYWREC.CYWERRSW == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* *** note: use compressed mode to detect blank size and  ****/
   /* ***       reduce loop searches                          ****/
   /* ************************************************************/

  KY0HS1E(); /* obtain valid sizes*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** move size descriptions to the map                   ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (SYPREC.SY4IDDSC[CYWIDX01] != "     ")
    KY0HM110.SY4IDDSC[CYWIDX01] = SYPREC.SY4IDDSC[CYWIDX01];
    CYWIDX01 = CYWIDX01 + 1;
  end

  KY0HW01.KY0HWNSZ = CYWIDX01 - 1; /* total nbr of sizes*/

   /* ************************************************************/
   /* *** darken the remaining size and count fields          ****/
   /* ************************************************************/

  while (CYWIDX01 <= 40)
    set KY0HM110.SY4IDDSC[CYWIDX01] skip, invisible;
    set KY0HM110.CY3COUNT[CYWIDX01] skip, invisible;
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** obtain cc document size records and move counts to map**/
   /* ************************************************************/

  move +0 to KY0HW02.KY0HW-SL6ONHND[1] for 40;
  if (KY0HW01.KY0HWHDR == "Y" /* if header found*/
   && KY0HW01.KY0HWITM == "Y") /* and item found*/
    set CY3REC empty;

    CY3REC.XWHCD = KY0HM110.XWHCD;
    CY3REC.IN5TRDCD = KY0HM110.IN5TRDCD;
    CY3REC.IN5TRDOC = KY0HM110.IN5TRDOC;
    CY3REC.IN5TRSUB = KY0HM110.IN5TRSUB;
    CY3REC.SL2CASE = KY0HM110.SL2CASE;

    CYWIDX01 = 1;
    while (CYWIDX01 <= KY0HW01.KY0HWNSZ)
      KY0HS1F(); /* obtain doc size rec & move counts to map*/
      CYWIDX01 = CYWIDX01 + 1;
    end

    if (CYWREC.CYWERRSW == "Y")
      return;
    end
  else
    CYWIDX01 = 1;
    while (CYWIDX01 <= KY0HW01.KY0HWNSZ)
      KY0HM110.CY3COUNT[CYWIDX01] = 0; /* move zeros to map*/
      CYWIDX01 = CYWIDX01 + 1;
    end
  end

  KY0HS1T();
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HSE1

// save key field values
Function KY0HSF1()
   /* ************************************************************/
   /* *** save all key fields to check later for possible     ****/
   /* *** key change.                                         ****/
   /* ************************************************************/

  KY0HW01.XWHCD = KY0HM110.XWHCD;
  KY0HW01.IN5TRDCD = KY0HM110.IN5TRDCD;
  KY0HW01.IN5TRDOC = KY0HM110.IN5TRDOC;
  KY0HW01.IN5TRSUB = KY0HM110.IN5TRSUB;
  KY0HW01.CY2CNTBY = KY0HM110.CY2CNTBY;
  KY0HW01.XARCD = KY0HM110.XARCD;
  KY0HW01.SL4ZONE = KY0HM110.SL4ZONE;
  KY0HW01.SL5LOCTN = KY0HM110.SL5LOCTN;
  KY0HW01.SL2CASE = KY0HM110.SL2CASE;
  KY0HW01.XGPCD = KY0HM110.XGPCD;
  KY0HW01.SY1STNBR = KY0HM110.SY1STNBR;
  KY0HW01.SY2CLRID = KY0HM110.SY2CLRID;
  KY0HW01.XDMCD = KY0HM110.XDMCD;
  KY0HW01.XQACD = KY0HM110.XQACD;
  KY0HW01.PC2INSEG = KY0HM110.PC2INSEG;
  KY0HW01.XSLCD = KY0HM110.XSLCD;
  KY0HW01.XPGCD = KY0HM110.XPGCD;
  KY0HW01.XOWCD = KY0HM110.XOWCD;
  if (KY0HM110.XUMCD == " ")
    KY0HM110.XUMCD = KY0HW01.XUMCD;
  else
    KY0HW01.XUMCD = KY0HM110.XUMCD;
  end

  KY0HSX9(); /* move doc nbr to commarea*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0HSF1

// setup map with key fields
Function KY0HSG1()

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0HM110.XWHCD = KY0HW01.XWHCD;

  KY0HM110.IN5TRDCD = KY0HW01.IN5TRDCD;
  KY0HM110.IN5TRDOC = KY0HW01.IN5TRDOC;
  KY0HM110.IN5TRSUB = KY0HW01.IN5TRSUB;
  KY0HM110.CY2CNTBY = KY0HW01.CY2CNTBY;
  KY0HM110.XARCD = KY0HW01.XARCD;
  KY0HM110.SL4ZONE = KY0HW01.SL4ZONE;
  KY0HM110.SL5LOCTN = KY0HW01.SL5LOCTN;
  KY0HM110.SL2CASE = KY0HW01.SL2CASE;
  KY0HM110.XGPCD = KY0HW01.XGPCD;
  KY0HM110.SY1STNBR = KY0HW01.SY1STNBR;
  KY0HM110.SY2CLRID = KY0HW01.SY2CLRID;
  KY0HM110.XDMCD = KY0HW01.XDMCD;
  KY0HM110.XQACD = KY0HW01.XQACD;
  KY0HM110.PC2INSEG = KY0HW01.PC2INSEG;
  KY0HM110.XSLCD = KY0HW01.XSLCD;
  KY0HM110.XPGCD = KY0HW01.XPGCD;
  KY0HM110.XUMCD = KY0HW01.XUMCD;
  KY0HM110.XOWCD = KY0HW01.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0HSG1

// 1st pass edits
Function KY0HSH1()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0HSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  KY0HSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  KY0HSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0HSF1(); /* <=== save current key value(s)*/
    KY0HST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  KY0HSF1(); /* <=== save current key value(s)*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSH1

// setup screen for next trans.
Function KY0HSQ1()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values/defaults  ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0HM110 initial; /* resets entire screen*/

  KY0HM110.XWHCD = KY0HW01.XWHCD;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0HM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0HM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0HM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0HM110.XXXCURDT = X2CREC.X2CCURSD;

  KY0HM110.XGPCD = "02";
  KY0HM110.SY2CLRID = "00 ";
  KY0HM110.XDMCD = "00";
  KY0HM110.XQACD = "01";
  KY0HM110.PC2INSEG = "000";
  KY0HM110.XSLCD = "000";
  KY0HM110.XPGCD = "00";
  KY0HM110.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0HW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSQ1

// reset screen
Function KY0HST1()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0HM110 empty; /* resets entire screen*/

  KY0HSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0HM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0HM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0HM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0HM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0HW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HST1

// perform db updates
Function KY0HSU1()

   /* ************************************************************/
   /* *** This statement group starts the actual updating     ****/
   /* *** of the document databases. If the 'add header'      ****/
   /* *** switch is on, - hdr,itm,& size records are created. ****/
   /* *** If 'add item' switch is on, - itm,and size records  ****/
   /* *** are created. In addition the header db must be      ****/
   /* *** updated. if hdr and itm already exist, all size     ****/
   /* *** records are deleted and new records are inserted.   ****/
   /* ************************************************************/

  if (KY0HW01.KY0HWHDR == "N") /* no header found ?*/

    KY0HS1G(); /* add doc hdr rec*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end

    KY0HS1H(); /* add doc itm rec*/

    if (CYWREC.CYWERRSW == "Y")
      return;
    end

    KY0HS1X(); /* add doc size records*/

  else
    if (KY0HW01.KY0HWITM == "N") /* no item rec found ?*/

      KY0HS1H(); /* add doc itm rec*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0HS1U(); /* increment doc hdr #crt.d*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0HS1X(); /* add doc size records*/

    else

      KY0HS1K(); /* delete existing doc size recs*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0HS1X(); /* add doc size records*/

    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSU1

// save cyxrec fields
Function KY0HSX9()

   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0HM110";

  COMMAREA.XWHCD = KY0HM110.XWHCD;
  CYXREC.IN5TRDCD = KY0HM110.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0HM110.IN5TRDOC;
  CYXREC.IN5TRSUB = KY0HM110.IN5TRSUB;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0HSX9

// add : doc hdr/loc : 0
Function XSCY1A0()


   /* ************************************************************/
   /* *** add unique row to:  document header/location        ****/
   /* *** using the std module:  IO2410                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSCY1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  CY1REC.ZZZSDT = X2CREC.X2CCURDT;
  CY1REC.ZZZCHGDT = X2CREC.X2CCURDT;
  CY1REC.ZZZCHGTM = X3CREC.X3CCURST;

  CYVREC.CYVFNC = "A ";

  call "IO2410" (CYVREC, SQLCA, CY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY1A0 ";
  TA1REC.TA1LOCAT[1] = "IO2410  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VDOCHD01";
  TA1REC.TA1TBLKE = CY1REC.CY1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY1A0

// replace : doc hdr/loc : 0
Function XSCY1R0()


   /* ************************************************************/
   /* *** replace unique row in:  document header/location    ****/
   /* *** using the std module:  IO2410                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  CY1REC.ZZZCHGDT = X2CREC.X2CCURDT;
  CY1REC.ZZZCHGTM = X3CREC.X3CCURST;

  CYVREC.CYVFNC = "U ";

  call "IO2410" (CYVREC, SQLCA, CY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blanks out record layout = deleted         ****/
     /* ************************************************************/
    XSCY1I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CY1REC.CY1DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY1R0 ";
  TA1REC.TA1LOCAT[1] = "IO2410  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VDOCHD01";
  TA1REC.TA1TBLKE = CY1REC.CY1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY1R0

// update : doc hdr/loc : 0
Function XSCY1U0()


   /* ************************************************************/
   /* *** get unique row for update of:  doc header/location  ****/
   /* *** using the std module:  IO2410                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY1U0

// add : doc itm/prd : 0
Function XSCY2A0()


   /* ************************************************************/
   /* *** add unique row to:  document item/product           ****/
   /* *** using the std module:  IO2420                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSCY2I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  CY2REC.ZZZSDT = X2CREC.X2CCURDT;
  CY2REC.ZZZCHGDT = X2CREC.X2CCURDT;
  CY2REC.ZZZCHGTM = X3CREC.X3CCURST;

  CYVREC.CYVFNC = "A ";

  call "IO2420" (CYVREC, SQLCA, CY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY2A0 ";
  TA1REC.TA1LOCAT[1] = "IO2420  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VDOCIT01";
  TA1REC.TA1TBLKE = CY2REC.CY2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY2A0

// delete : doc case/sz : 0
Function XSCY3D0()


   /* ************************************************************/
   /* *** delete unique row in:  document case/size           ****/
   /* *** using the std module:  IO2430                       ****/
   /* *** note: use cyxrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "D ";

  call "IO2430" (CYVREC, SQLCA, CY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY3D0 ";
  TA1REC.TA1LOCAT[1] = "IO2430  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VDOCSZ01";
  TA1REC.TA1TBLKE = CY3REC.CY3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY3D0

//*** RECORD=KY0HW01 ****
// *** working storage fields for application cy0h ***
// ***********************
Record KY0HW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 IN5TRDCD IN5TRDCD ; 
  10 IN5TRDOC IN5TRDOC ; 
  10 IN5TRSUB IN5TRSUB ; 
  10 CY2CNTBY CY2CNTBY ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2CASE SL2CASE ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 KY0HWHDR KY0HWHDR ; 
  10 KY0HWITM KY0HWITM ; 
  10 KY0HWNSZ KY0HWNSZ ; 
  10 KY0HWDOC KY0HWDOC ; 
    15 * char(7) ; 
    15 KY0HWPRT KY0HWPRT ; 
end // end KY0HW01

//*** RECORD=KY0HW02 ****
// *** work stg flds for appl cy0h's product cnt ***
// ***********************
Record KY0HW02 type basicRecord
  10 KY0HW-CLOSE-FLAG KY0HW-CLOSE-FLAG ; 
  10 KY0HW-CLOSE-COMPLETE-FLAG KY0HW-CLOSE-COMPLETE-FLAG ; 
  10 KY0HWIX1 KY0HWIX1 ; 
  10 KY0HW-SL6ONHND KY0HW-SL6ONHND [40] ; 
end // end KY0HW02

//*** RECORD=KY0HWX1 ****
// *** work stg flds for appl cy0h's product cnt ***
// ***********************
Record KY0HWX1 type basicRecord
  10 XWHCD XWHCD ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2CASE SL2CASE ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
end // end KY0HWX1

DataItem KY0HW-CLOSE-COMPLETE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0HW-CLOSE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_SY_LOC_OH_QTY
DataItem KY0HW-SL6ONHND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work document nbr
DataItem KY0HWDOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// doc header found flag
DataItem KY0HWHDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// doc item found flag
DataItem KY0HWITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0HWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of size on map
DataItem KY0HWNSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work part field of doc nbr
DataItem KY0HWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

