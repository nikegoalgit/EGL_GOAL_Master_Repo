package ky0g;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0G ****
// ************************************************************
// 
//             CYCLE COUNT
//           COUNT DATA ENTRY
//           ================
// 
// ************************************************************
// 
// OVERVIEW: This application will update the document item
//           record with the 'count by' if entered or changed.
//           It will also update or add case/size records
//           with the entered count value.
// 
//           notes:
//             1) entered count value always overlays any
//                existing value.
//             2) update or add always makes the s.l. onhand
//                value zero.
//             3) if the s.l. onhand value is greater than
//                zero when the doc. case/size record is to
//                be displayed, that value is displayed on
//                the screen and a -1 is stored in working
//                storage so that any value entered (even a
//                zero left on the map) will casue the record
//                to be updated with a zero value in the s.l.
//                onhand field.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/28/88  Ward Jones  created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  07/30/91  scleme      convert CY0G to KY0G
// 00  06/19/92  RYONKE      Changed due to table structure
//                           changes.
// 00  11/22/92  jcampb      Changed due to table structure
//                           changes and cycle count reorg.
// 00  01/22/93  jcampb      fix autoclose procedures
// 31  04/13/93  jkrmpo      change auto close to recognize
//                           variances by size.
// 00  01/26/94  jkrmpo      convert all xbc-brand-code to
//                           spaces (excluding '08') before
//                           selecting from the dcycle.vcyctl01
//                           table (io2470).
// 00  10/11/97  Kheina      Regen for tble chge. Add new
//                           column to Cy9rec.
// ************************************************************
// ************************************************************
// *********************
Program KY0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY1REC CY1REC; // record
  CY2REC CY2REC; // record
  CY3REC CY3REC; // record
  CY9REC CY9REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0GW01 KY0GW01; // record
  PKNREC PKNREC; // record
  SL6REC SL6REC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use YDNTBL {deleteAfterUse = yes}; // table
  use KY0GM.KY0GM110,  // forms
      KY0GM.KY0GM999
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0G110: KY0G110();


     /* ************************************************************/
     /* *** if error: display key screen                        ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0G120; /* <=== display key screen*/
    end

     /* ************************************************************/
     /* *** since no errors, ky0gsh1 was successful             ****/
     /* *** therefore, go directly to ky0g140 for updates       ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "140 ";
    goto KY0G140; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0G120: KY0G120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0G120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0G110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0G120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0G140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0G120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0G140: KY0G140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0G140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0G110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0G120; /* <=== re-display key screen*/
      end
      goto KY0G140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      CYWREC.XXXLOCID = "140 ";
      goto KY0G140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "120 ";
      goto KY0G120; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf12 /* if pf12 was pressed*/
     && CYWREC.CYWMSGNO == 0020)     /* and transaction complete message*/
      CYWREC.XXXLOCID = "120 ";
      goto KY0G120; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0G140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0G

// one time initializations
Function KY0G110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented transaction id setting           ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0GM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYXREC empty; /* passed working storage fields*/
  set CYWREC empty; /* common working storage fields*/
  set KY0GW01 empty; /* appl. working storage area*/
  set CY1REC empty; /* cyc cnt doc. hdr/loc record*/
  set CY2REC empty; /* cyc cnt doc. itm/prod record*/
  set CY3REC empty; /* cyc cnt doc. case/size record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/25/88  W. Jones      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0GM110";
  CYWREC.XXXTITLE = "CYCLE COUNT DATA ENTRY";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0G"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0G110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0GM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0GM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0GM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0GM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0GM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0GM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0GSE9(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 13;

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0GM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0GM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to setup screen                             ****/
   /* *** note: will detect missing whse                      ****/
   /* ************************************************************/

  KY0GSH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0G110

// converse & control key entry
Function KY0G120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  set KY0GM110.CY2CNTBY skip, invisible;

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWIDX02 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0GM110.SL2CASE[CYWIDX01] skip, invisible;
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 4)
      set KY0GM110.SY4IDDSC[CYWIDX02] skip, invisible;
      set KY0GM110.KY0GMCNT[CYWIDX02] skip, invisible;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0GM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0GM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0GM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0GM110.CATOAP;
    COMMAREA.CAITEM = KY0GM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0GM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0GM110.VAGen_EZEMSG = " ";
  set KY0GM110.CATOAP initialAttributes;
  set KY0GM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0GM110.XWHCD initialAttributes;
  set KY0GM110.IN5TRDCD initialAttributes;
  set KY0GM110.KY0GMDOC initialAttributes;
  set KY0GM110.KY0GMSUB initialAttributes;

  set KY0GM110.CY2CNTBY initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: done as part of enter processing              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0GM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0GM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0GSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120I";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120J";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120K";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120L";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "KY0N";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120N";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0G120

// converse & control data entry
Function KY0G140()

   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    set KY0GM110.KY0GMCNT[1] cursor;
  end

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

  if (CY1REC.YDUCD != " "
   && CY1REC.YDUCD != " ")
    if (CY1REC.YDUCD != "01"
     || CY2REC.YDUCD != "01")
      CYWREC.CYWMSGNO = 86;
      set KY0GM110.KY0GMDOC cursor;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0GM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0GM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO STOCK LOCATE MAIN MENU                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0GM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0GM110.CATOAP;
    COMMAREA.CAITEM = KY0GM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0GM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0GM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0GM110.CATOAP initialAttributes;
  set KY0GM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0GM110.XWHCD initialAttributes;
  set KY0GM110.IN5TRDCD initialAttributes;
  set KY0GM110.KY0GMDOC initialAttributes;
  set KY0GM110.KY0GMSUB initialAttributes;

  set KY0GM110.CY2CNTBY initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* *** note: done as part of the editing loop in 'enter'   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0GM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0GM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* *** note: reset attr.s part of edit loop                ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0GSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0GSF1(); /* <=== save key values*/
      KY0GST1(); /* <=== reset screen (empty)*/
      KY0GSH1(); /* <=== enter processing*/
      exit stack;
    end
    if (CY1REC.YDUCD != "  "
     && CY2REC.YDUCD != "  ")
      if (CY1REC.YDUCD != "01"
       || CY2REC.YDUCD != "01")
        KY0GSQ1(); /* <=== reset screen (clear)*/
        CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
        exit stack;
      end
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0GS2R(); /* <=== cnt by edits*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    KY0GW-TOTAL-COUNT-ENTERED = +0;
    CYWREC.CYWIDX01 = 1;
    CYWREC.CYWIDX02 = 1;
    while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP
     && CYWREC.CYWERRSW == "N")
      CYWREC.CYWCTR01 = 1;
      while (CYWREC.CYWCTR01 <= 4
       && CYWREC.CYWERRSW == "N")
        if (KY0GW01.SY5SZID[CYWIDX02] > 0)
            /* **********************************************************/
            /* *** note: orig. data does not need any edits          ****/
            /* **********************************************************/
          KY0GSU1(); /* <=== update database row*/
        else
          set KY0GM110.KY0GMCNT[CYWIDX02] initialAttributes;
          set KY0GM110.SY4IDDSC[CYWIDX02] initialAttributes;
          KY0GSR1(); /* <=== size & cnt entry edits*/
          if (CYWREC.CYWERRSW == "Y" /* <=== desc/cnt edit error*/
           || KY0GM110.SY4IDDSC[CYWIDX02] == " ") /* <=== no data entered*/
               /* ** next sentence ***/
          else
            KY0GS1U(); /* <=== add row to database*/
          end
        end
        CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
        CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    end
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update/del.d*/
        KY0GST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020*/
                                   /* map*/
    end
    KY0GS2U(); /* <=== update item row (if needed)*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      KY0GST1(); /* <=== reset screen (empty)*/
      exit stack; /* <=== severe error will display ta0020*/
                                   /* map*/
    end
    if (CY1REC.XARCD == "01" /* AUTOCLOSE BULK STORAGE*/
     || CY1REC.YDNCD == "06") /* autoclose empty locations*/
      KY0GW01.KY0GW-COUNTS-IN-BALANCE-FLAG = "Y";
      KY0GW01.KY0GWIX2 = 1;
      while (KY0GW01.KY0GW-COUNTS-IN-BALANCE-FLAG == "Y"
       && KY0GW01.KY0GWIX2 <= 40)
        if (KY0GW01.KY0GW-CYCOUNT[KY0GWIX2] != KY0GW01.KY0GW-SL6ONHND[KY0GWIX2])
          KY0GW01.KY0GW-COUNTS-IN-BALANCE-FLAG = "N";
        end
        KY0GW01.KY0GWIX2 = KY0GW01.KY0GWIX2 + 1;
      end
      KY0GW01.KY0GW-CLOSE-COMPLETE-FLAG = "N";
      while (KY0GW01.KY0GW-CLOSE-COMPLETE-FLAG == "N")
        KY0G150();
      end
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    KY0GSQ1(); /* <=== reset screen (clear)*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
    set CY1REC empty;
    set CY2REC empty;
    set CY3REC empty;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140H";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140I";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140J";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140K";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140L";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "KY0N";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140N";
    CYWREC.CYWMSGNO = 0;
    KY0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/
end // end KY0G140

Function KY0G150()
   /* ************************************************************/
   /* *** PROCESS CLOSE CONFERMATION SCREEN*/
   /* ************************************************************/

  set KY0GM999 initial;
  KY0GW01.KY0GW-CLOSE-COMPLETE-FLAG = "Y";
  if (KY0GW01.KY0GW-COUNTS-IN-BALANCE-FLAG == "Y")
    KY0GW01.KY0GW-CLOSE-FLAG = "Y";
    KY0GM999.KY0GMLIT[1] = "       BULK LOCATION AUTO CLOSE       ";
    KY0GM999.KY0GMLIT[2] = "       ------------------------       ";
    KY0GM999.KY0GMLIT[3] = "     COUNTS ENTERED ARE IN BALANCE    ";
    KY0GM999.KY0GMLIT[4] = "                                      ";
    KY0GM999.KY0GMLIT[5] = " PRESS: PF12   TO CLOSE COUNT DOCUMENT";
    KY0GM999.KY0GMLIT[6] = "        ENTER  TO CONTINUE WITHOUT    ";
    KY0GM999.KY0GMLIT[7] = "                  CLOSING DOCUMENT    ";
  else
    KY0GM999.KY0GMLIT[1] = "*** VARIANCE * VARIANCE * VARIANCE ***";
    KY0GM999.KY0GMLIT[2] = "*** -------- * -------- * --------   *";
    KY0GM999.KY0GMLIT[3] = "* COUNTS ENTERED ARE NOT IN BALANCE  *";
    KY0GM999.KY0GMLIT[4] = "* PLEASE ENTER ADDITIONAL DATA, OR   *";
    KY0GM999.KY0GMLIT[5] = "* RECONCILE COUNTS WITH OUTSTANDING  *";
    KY0GM999.KY0GMLIT[6] = "* WORK ORDERS                        *";
    KY0GM999.KY0GMLIT[7] = "*  *** PRESS ENTER TO CONTINUE ***   *";
    set KY0GM999 alarm;
  end


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0GM110.XXXERRID = CYWREC.XXXERRID;



  converse KY0GM999 ;

   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    return;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    if (KY0GW01.KY0GW-CLOSE-FLAG == "Y")

    /* *********************************************************************/
    /* ** SET THE ITEM CLOSED*/

    /* *********************************************************************/

      XSCY2I0();
      if (SQLCA.VAGen_SQLCODE == 0) /* ;if found*/
        CY2REC.YDUCD = "02";
        XSCY2R0();
        KY0GS3I();
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  KY0GW01.KY0GW-CLOSE-COMPLETE-FLAG = "N";
  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "150H";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/
end // end KY0G150

// select dpick.vpksty01
Function KY0GS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0GS-CALL-IO1810";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS-SEL-VPKSTY01

// size translation (sy1190)
Function KY0GS-SIZE-CONVERT()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call SY1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS-SIZE-CONVERT

// setup hdr/location data
Function KY0GS1E()


   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  CY1REC.XWHCD = KY0GM110.XWHCD;
  CY1REC.IN5TRDCD = KY0GM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0GM110.KY0GMDOC;

  TA1REC.TA1LOCAT[2] = "KY0GS1E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. hdr/location data to screen           ****/
   /* ************************************************************/

  KY0GM110.XARCD = CY1REC.XARCD;
  KY0GM110.SL4ZONE = CY1REC.SL4ZONE;
  KY0GM110.SL5LOCTN = CY1REC.SL5LOCTN;

  KY0GM110.YDNCD = CY1REC.YDNCD;

   /* ************************************************************/
   /* *** if reason code in tbl: put abrv. on map             ****/
   /* *** otherwise, use all *                                ****/
   /* ************************************************************/

  if (CY1REC.YDNCD in YDNTBL.YDNCD)
    KY0GM110.YDNSABRV = YDNTBL.YDNSABRV[sysVar.arrayIndex];
  else
    KY0GM110.YDNSABRV = "******";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS1E

// add row to database
Function KY0GS1U()


   /* ************************************************************/
   /* *** setup the approriate record fields for the add      ****/
   /* *** note: cywtstno prev.ly setup in desc. edit          ****/
   /* *** note: zzzsdt/zzzchgdt/zzzchgtm are setup in io sgrp ****/
   /* ************************************************************/

  CY3REC.SL2CASE = KY0GW01.SL2CASE[CYWIDX01];
  CY3REC.SY5SZID = CYWREC.CYWTSTNO;

  CY3REC.CY3COUNT = KY0GM110.KY0GMCNT[CYWIDX02];
  CY3REC.SL6ONHND = 0;

  TA1REC.TA1LOCAT[2] = "KY0GS1U ";

  XSCY3A0(); /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.SY4IDDSC[CYWIDX02] bold;
    set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == -803)
      CYWREC.XXXLOCID = "S1UA";
      CYWREC.CYWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1UB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1UC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS1U

// setup item/product data
Function KY0GS2E()


   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  CY2REC.XWHCD = KY0GM110.XWHCD;
  CY2REC.IN5TRDCD = KY0GM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0GM110.KY0GMDOC;
  CY2REC.IN5TRSUB = KY0GM110.KY0GMSUB;

  TA1REC.TA1LOCAT[2] = "KY0GS2E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY2I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    set KY0GM110.KY0GMSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S2EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S2EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  set CY9REC empty;
  CY9REC.XWHCD = CY1REC.XWHCD;
  if (CY2REC.XBCCD == "08")
    CY9REC.XBCCD = CY2REC.XBCCD;
  else
    CY9REC.XBCCD = " ";
  end
  CY9REC.XARCD = CY1REC.XARCD;
  CY9REC.YLTCD = CY1REC.YLTCD;
  XSCY9I0();
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1ED";
    CYWREC.CYWMSGNO = 0094; /* <--- not on db msg*/
    return;
  end
   /* ************************************************************/
   /* *** move all doc. item/product data to screen           ****/
   /* *** and save count by in ws for use later to:           ****/
   /* *** 1. determine if map is diff. from ws = need to upd  ****/
   /* *** 2. be used by next doc if cnt by is blank           ****/
   /* ************************************************************/

  if (CY2REC.CY2CNTBY > " ")
    KY0GM110.CY2CNTBY = CY2REC.CY2CNTBY;
    KY0GW01.CY2CNTBY = CY2REC.CY2CNTBY;
  else
    KY0GM110.CY2CNTBY = KY0GW01.CY2CNTBY;
  end

  KY0GM110.XGPCD = CY2REC.XGPCD;
  KY0GM110.SY1STNBR = CY2REC.SY1STNBR;
  KY0GM110.SY2CLRID = CY2REC.SY2CLRID;
  KY0GM110.XDMCD = CY2REC.XDMCD;
  KY0GM110.XQACD = CY2REC.XQACD;
  KY0GM110.PC2INSEG = CY2REC.PC2INSEG;
  KY0GM110.XSLCD = CY2REC.XSLCD;
  KY0GM110.XPGCD = CY2REC.XPGCD;
  KY0GM110.XUMCD = CY2REC.XUMCD;
  KY0GM110.XOWCD = CY2REC.XOWCD;

   /* ************************************************************/
   /* *** use color 2 row to get style & color desc.s         ****/
   /* ************************************************************/

  PKNREC.XGPCD = CY2REC.XGPCD;
  PKNREC.SY1STNBR = CY2REC.SY1STNBR;
  PKNREC.SY2CLRID = CY2REC.SY2CLRID;
  PKNREC.XDMCD = CY2REC.XDMCD;

  TA1REC.TA1LOCAT[2] = "KY0GS2E ";
  KY0GS-SEL-VPKSTY01();


  if (SQLCA.VAGen_SQLCODE == 0)
    KY0GM110.SY1SSTNM = PKNREC.SY1SSTNM;
    KY0GM110.SY2CLRAB = PKNREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0GM110.SY1SSTNM = "************";
      KY0GM110.SY2CLRAB = "*************";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0GM110.XGPCD bold;
      set KY0GM110.SY1STNBR cursor, bold;
      set KY0GM110.SY2CLRID bold;
      set KY0GM110.XDMCD bold;
      CYWREC.XXXLOCID = "S2EE";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain all valid sizes for this product for display ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.XGPCD = CY2REC.XGPCD;
  SYPREC.SY1STNBR = CY2REC.SY1STNBR;
  SYPREC.SY2CLRID = CY2REC.SY2CLRID;
  SYPREC.XDMCD = CY2REC.XDMCD;
  SYPREC.XQACD = "**";

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  TA1REC.TA1LOCAT[2] = "KY0GS3E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  KY0GS-SIZE-CONVERT(); /* <=== style/color (2) inquiry*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == +10)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.XGPCD bold;
    set KY0GM110.SY1STNBR cursor, bold;
    set KY0GM110.SY2CLRID bold;
    set KY0GM110.XDMCD bold;
    if (SYPREC.SYPRC == +9)
      CYWREC.XXXLOCID = "S2EF";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EG";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** get cyctl01 table to verify blind count flag        ****/
   /* ************************************************************/

end // end KY0GS2E

// cnt by edits
Function KY0GS2R()


   /* ************************************************************/
   /* *** setup error if count by has not been entered        ****/
   /* ************************************************************/

  if (KY0GM110.CY2CNTBY > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S2RA";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.CY2CNTBY cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS2R

// item updates (if needed)
Function KY0GS2U()


   /* ************************************************************/
   /* *** obtain the row for update w/ or w/out data          ****/
   /* ************************************************************/

  CY2REC.IN5TRDCD = KY0GM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0GM110.KY0GMDOC;
  CY2REC.IN5TRSUB = KY0GM110.KY0GMSUB;

  TA1REC.TA1LOCAT[2] = "KY0GS2U ";

  XSCY2U1(); /* <=== get row with data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    set KY0GM110.KY0GMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S2UA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S2UB";
    else
      CYWREC.XXXLOCID = "S2UC";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if count by has been changed, update item row       ****/
   /* ************************************************************/

  if (KY0GM110.CY2CNTBY == CY2REC.CY2CNTBY)
    return;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the update   ****/
   /* *** and TA1REC.TA1LOCAT(2) = what executes the io sgrp  ****/
   /* *** note: TA1REC.TA1MAP is setup in level init.         ****/
   /* ***       zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
   /* ************************************************************/

  CY2REC.CY2CNTBY = KY0GM110.CY2CNTBY;
  KY0GW01.CY2CNTBY = KY0GM110.CY2CNTBY;

  TA1REC.TA1LOCAT[2] = "KY0GS2U ";

  XSCY2R0(); /* <=== update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    set KY0GM110.KY0GMSUB bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      if (CY2REC.CY2DATA > " ") /* <--- returned data has any changes*/
        CYWREC.XXXLOCID = "S2UD";
        CYWREC.CYWMSGNO = 0032; /* <--- row updated since last read*/
      else
        CYWREC.CYWSKYSW = "N";
        CYWREC.XXXLOCID = "S2UE";
        CYWREC.CYWMSGNO = 0033; /* <--- row deleted since last read*/
      end
      return;
    end
    CYWREC.XXXLOCID = "S2UF";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS2U

// setup all case/size data
Function KY0GS3E()


   /* ************************************************************/
   /* *** obtain the doc. case/size records for display       ****/
   /* ************************************************************/

  CY3REC.XWHCD = KY0GM110.XWHCD;
  CY3REC.IN5TRDCD = KY0GM110.IN5TRDCD;
  CY3REC.IN5TRDOC = KY0GM110.KY0GMDOC;
  CY3REC.IN5TRSUB = KY0GM110.KY0GMSUB;
  CY3REC.SL2CASE = "********";
  CY3REC.SY5SZID = -1;

  TA1REC.TA1LOCAT[2] = "KY0GS3E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY3S1(); /* <=== select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    set KY0GM110.KY0GMSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S3EA";
      CYWREC.CYWMSGNO = 0025; /* <--- no data to display msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S3EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S3EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** intialize the processing pointers                   ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1; /* pointer to line/case*/
  CYWREC.CYWIDX02 = 1; /* pointer to size data*/
  CYWREC.CYWIDX03 = 0; /* pointer to previous line/case*/

   /* ************************************************************/
   /* *** complete the first line as separate loop            ****/
   /* *** in order to avoid the 0 index for prev. line        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup 1st case & up to 1st 4 sizes                  ****/
   /* *** if no more records or case changes,                 ****/
   /* *** finish the sizes on this line                       ****/
   /* ************************************************************/

  set KY0GM110.SL2CASE[CYWIDX01] initialAttributes;
  KY0GM110.SL2CASE[CYWIDX01] = CY3REC.SL2CASE;
  KY0GW01.SL2CASE[CYWIDX01] = CY3REC.SL2CASE;
  CYWREC.CYWCTR01 = 1; /* ctr for proc.g line's size data*/
  while (CYWREC.CYWCTR01 <= 4)
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CY3REC.SL2CASE == KY0GW01.SL2CASE[CYWIDX01])
        KY0GW01.SY5SZID[CYWIDX02] = CY3REC.SY5SZID;
        CYWREC.CYWIX = CY3REC.SY5SZID;
        set KY0GM110.SY4IDDSC[CYWIDX02] skip;
        if (SYPREC.SY4IDDSC[CYWIX] > " ")
          KY0GM110.SY4IDDSC[CYWIDX02] = SYPREC.SY4IDDSC[CYWIX];
        else
          KY0GM110.SY4IDDSC[CYWIDX02] = "*****";
        end
        if (CY3REC.SL6ONHND > 0
         && CY9REC.CY-BLIND-CNT-FL != "N")
          KY0GM110.KY0GMCNT[CYWIDX02] = CY3REC.SL6ONHND;
          KY0GW01.KY0GWCNT[CYWIDX02] = -1;
        else
          KY0GM110.KY0GMCNT[CYWIDX02] = CY3REC.CY3COUNT;
          KY0GW01.KY0GWCNT[CYWIDX02] = CY3REC.CY3COUNT;
        end
        KY0GS3F(); /* <=== fetch next case/size row*/
        if (CYWREC.CYWERRSW == "Y")
          return;
        end
      else
        KY0GW01.SY5SZID[CYWIDX02] = 0;
        set KY0GM110.SY4IDDSC[CYWIDX02] initialAttributes;
        KY0GM110.SY4IDDSC[CYWIDX02] = " ";
        KY0GM110.KY0GMCNT[CYWIDX02] = 0;
        KY0GW01.KY0GWCNT[CYWIDX02] = 0;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        KY0GW01.SY5SZID[CYWIDX02] = 0;
        set KY0GM110.SY4IDDSC[CYWIDX02] initialAttributes;
        KY0GM110.SY4IDDSC[CYWIDX02] = " ";
        KY0GM110.KY0GMCNT[CYWIDX02] = 0;
        KY0GW01.KY0GWCNT[CYWIDX02] = 0;
      else
         /* ************************************************************/
         /* *** if this executes, an unexpected condition occurred  ****/
         /* ************************************************************/
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S3EG";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    set KY0GM110.KY0GMCNT[CYWIDX02] initialAttributes;
    CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
    CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
  end
  CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  CYWREC.CYWIDX03 = CYWREC.CYWIDX03 + 1;

   /* ************************************************************/
   /* *** move all other doc. case/size data to screen        ****/
   /* *** note: all pointers have been incremented            ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the case in ws & if different on the map      ****/
   /* *** if case changes, finish the sizes on the line       ****/
   /* *** before going to the next line                       ****/
   /* *** if no more records, use the last case on each line  ****/
   /* *** and finish all sizes on the page                    ****/
   /* ************************************************************/

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0GM110.SL2CASE[CYWIDX01] initialAttributes;
    if (CY3REC.SL2CASE == KY0GW01.SL2CASE[CYWIDX03])
      KY0GM110.SL2CASE[CYWIDX01] = " ";
    else
      KY0GM110.SL2CASE[CYWIDX01] = CY3REC.SL2CASE;
    end
    KY0GW01.SL2CASE[CYWIDX01] = CY3REC.SL2CASE;
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 4)
      if (SQLCA.VAGen_SQLCODE == 0)
        if (CY3REC.SL2CASE == KY0GW01.SL2CASE[CYWIDX01])
          KY0GW01.SY5SZID[CYWIDX02] = CY3REC.SY5SZID;
          CYWREC.CYWIX = CY3REC.SY5SZID;
          set KY0GM110.SY4IDDSC[CYWIDX02] skip;
          if (SYPREC.SY4IDDSC[CYWIX] > " ")
            KY0GM110.SY4IDDSC[CYWIDX02] = SYPREC.SY4IDDSC[CYWIX];
          else
            KY0GM110.SY4IDDSC[CYWIDX02] = "*****";
          end
          if (CY3REC.SL6ONHND > 0
           && CY9REC.CY-BLIND-CNT-FL != "N")
            KY0GM110.KY0GMCNT[CYWIDX02] = CY3REC.SL6ONHND;
            KY0GW01.KY0GWCNT[CYWIDX02] = -1;
          else
            KY0GM110.KY0GMCNT[CYWIDX02] = CY3REC.CY3COUNT;
            KY0GW01.KY0GWCNT[CYWIDX02] = CY3REC.CY3COUNT;
          end
          KY0GS3F(); /* <=== fetch next case/size row*/
          if (CYWREC.CYWERRSW == "Y")
            return;
          end
        else
          KY0GW01.SY5SZID[CYWIDX02] = 0;
          set KY0GM110.SY4IDDSC[CYWIDX02] initialAttributes;
          KY0GM110.SY4IDDSC[CYWIDX02] = " ";
          KY0GM110.KY0GMCNT[CYWIDX02] = 0;
          KY0GW01.KY0GWCNT[CYWIDX02] = 0;
        end
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          KY0GW01.SY5SZID[CYWIDX02] = 0;
          set KY0GM110.SY4IDDSC[CYWIDX02] initialAttributes;
          KY0GM110.SY4IDDSC[CYWIDX02] = " ";
          KY0GM110.KY0GMCNT[CYWIDX02] = 0;
          KY0GW01.KY0GWCNT[CYWIDX02] = 0;
        else
           /* ************************************************************/
           /* *** if this executes, an unexpected condition occurred  ****/
           /* ************************************************************/
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "S3EG";
          CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end
      set KY0GM110.KY0GMCNT[CYWIDX02] initialAttributes;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    CYWREC.CYWIDX03 = CYWREC.CYWIDX03 + 1;
  end

  if (SQLCA.VAGen_SQLCODE != +100)
     /* ** no error = warning msg only ***/
    CYWREC.XXXLOCID = "S3EG";
    CYWREC.CYWMSGNO = 0035; /* <--- more cases exist msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS3E

// fetch next case/size row
Function KY0GS3F()


   /* ************************************************************/
   /* *** fetch the next case/size row                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0US3F ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY3F1(); /* <=== fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  set KY0GM110.XWHCD bold;
  set KY0GM110.IN5TRDCD bold;
  set KY0GM110.KY0GMDOC cursor, bold;
  set KY0GM110.KY0GMSUB bold;

  CYWREC.CYWERRSW = "Y";

  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.XXXLOCID = "S3FA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  CYWREC.XXXLOCID = "S3FB";
  CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS3F

// setup current stloc on-hnd qty
Function KY0GS3G()
   /* ************************************************************/
   /* *** obtain all size data for the specific case entered  ****/
   /* *** or for all cases if '*' used                        ****/
   /* *** count only the nbr of products invloved             ****/
   /* ************************************************************/

  move +0 to KY0GW01.KY0GW-SL6ONHND[1] for 40;
  KY0GW01.KY0GW-TOTAL-SL6ONHND = +0;
  SL6REC.XWHCD = CY1REC.XWHCD;
  SL6REC.XARCD = CY1REC.XARCD;
  SL6REC.SL4ZONE = CY1REC.SL4ZONE;
  SL6REC.SL5LOCTN = CY1REC.SL5LOCTN;
  if (CY2REC.SL2CASE == " ")
    SL6REC.SL2CASE = "********";
  else
    SL6REC.SL2CASE = CY2REC.SL2CASE;
  end

  SL6REC.SL2PALET = "*****";

  XSSL6S4(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* +100 is not an error*/
      return;
    end
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.IN5TRDCD bold;
    set KY0GM110.KY0GMDOC cursor, bold;
    set KY0GM110.KY0GMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S3GA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1TB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** save prod. values and cnt nbr of prod.s             ****/
   /* *** note: new case is NOT a new prod.                   ****/
   /* ************************************************************/

  CYWREC.CYWCTR01 = 0;

  while (SQLCA.VAGen_SQLCODE == 0
   && CYWREC.CYWERRSW == "N")
    while (SQLCA.VAGen_SQLCODE == 0
     && CYWREC.CYWERRSW == "N")
      KY0GS3H(); /* save prod. values*/
      XSSL6F4(); /* <=== fetch next row*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "S1TC";
  CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS3G

// save current stloc on-hnd qty
Function KY0GS3H()

  if (SL6REC.XWHCD == KY0GM110.XWHCD
   && SL6REC.XARCD == KY0GM110.XARCD
   && SL6REC.SL4ZONE == KY0GM110.SL4ZONE
   && SL6REC.SL5LOCTN == KY0GM110.SL5LOCTN
   && SL6REC.XGPCD == KY0GM110.XGPCD
   && SL6REC.SY1STNBR == KY0GM110.SY1STNBR
   && SL6REC.SY2CLRID == KY0GM110.SY2CLRID
   && SL6REC.XDMCD == KY0GM110.XDMCD
   && SL6REC.XQACD == KY0GM110.XQACD
   && SL6REC.XOWCD == KY0GM110.XOWCD
   && SL6REC.PC2INSEG == KY0GM110.PC2INSEG
   && SL6REC.XPGCD == KY0GM110.XPGCD
   && SL6REC.XUMCD == KY0GM110.XUMCD
   && SL6REC.XSLCD == KY0GM110.XSLCD)
    if (KY0GM110.SL2CASE > " "
     && KY0GM110.SL2CASE != SL6REC.SL2CASE)
       /* next sentence*/
    else
      KY0GW01.KY0GWIX1 = SL6REC.SY5SZID;
      KY0GW01.KY0GW-SL6ONHND[KY0GWIX1] = SL6REC.SL6ONHND;
      KY0GW01.KY0GW-TOTAL-SL6ONHND = KY0GW01.KY0GW-TOTAL-SL6ONHND +            SL6REC.SL6ONHND;
    end
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS3H

Function KY0GS3I()
  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWIDX02 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP
   && CYWREC.CYWERRSW == "N")
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 4
     && CYWREC.CYWERRSW == "N")
      if (KY0GW01.SY5SZID[CYWIDX02] > 0)
         /* *** obtain the row for update w/ or w/out data*/
        CY3REC.SL2CASE = KY0GW01.SL2CASE[CYWIDX01];
        CY3REC.SY5SZID = KY0GW01.SY5SZID[CYWIDX02];
        TA1REC.TA1LOCAT[2] = "KY0GSXX ";
        XSCY3U1(); /* <=== get row with data*/
        if (SQLCA.VAGen_SQLCODE != 0)
          CYWREC.CYWERRSW = "Y";
          set KY0GM110.SY4IDDSC[CYWIDX01] bold;
          set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
          if (SQLCA.VAGen_SQLCODE == -911)
            CYWREC.XXXLOCID = "SXXA";
            CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          if (SQLCA.VAGen_SQLCODE == +100)
            CYWREC.XXXLOCID = "SXXB";
          else
            CYWREC.XXXLOCID = "SXXC";
          end
          CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end

         /* ************************************************************/
         /* *** setup the approriate record fields for the update   ****/
         /* *** and TA1REC.TA1LOCAT(2) = what executes the io sgrp  ****/
         /* *** note: TA1REC.TA1MAP is setup in level init.         ****/
         /* ***       zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
         /* ************************************************************/

        if (CY3REC.CY3COUNT != 0)
          CY3REC.CY3COUNT = KY0GM110.KY0GMCNT[CYWIDX02];
          KY0GW01.KY0GWIX1 = CY3REC.SY5SZID;
          CY3REC.SL6ONHND = KY0GW-SL6ONHND[KY0GWIX1];
          TA1REC.TA1LOCAT[2] = "KY0GSXX ";
          XSCY3R0(); /* <=== update*/
          if (SQLCA.VAGen_SQLCODE != 0)
            CYWREC.CYWERRSW = "Y";
            set KY0GM110.SY4IDDSC[CYWIDX01] bold;
            set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
            if (SQLCA.VAGen_SQLCODE == +100)
              CYWREC.XXXLOCID = "SXXD";
              CYWREC.CYWMSGNO = 0032;
              return;
            end
            CYWREC.XXXLOCID = "SXXF";
            CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
            return;
          end
        end
      end
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GS3I

// key missing input edits
Function KY0GSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0GM110.KY0GMSUB > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.KY0GMSUB cursor, bold;
  end

  if (KY0GM110.KY0GMDOC > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.KY0GMDOC cursor, bold;
  end

  if (KY0GM110.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.IN5TRDCD cursor, bold;
  end

  if (KY0GM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSA1

// same key edits
Function KY0GSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0GM110.XWHCD != KY0GW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0GM110.IN5TRDCD != KY0GW01.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0GM110.KY0GMDOC != KY0GW01.KY0GWDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0GM110.KY0GMSUB != KY0GW01.KY0GWSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSB1

// key field edits
Function KY0GSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** documnent code must be either: 'c' or 'm'           ****/
   /* ************************************************************/

  if (KY0GM110.IN5TRDCD == "C"
   || KY0GM110.IN5TRDCD == "M")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1A";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0GM110.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0GM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0GM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0GM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1B";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0GM110.XWHCD cursor, bold;
    end
  else
    KY0GM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0GM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSC1

// key relational edits
Function KY0GSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time -*/
   /* - doc nbr validated as part of obtain data*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSD1

// key obtain table data
Function KY0GSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  KY0GS1E(); /* <=== setup hdr data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  KY0GS2E(); /* <=== setup item data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. case/size records for display       ****/
   /* ************************************************************/

  KY0GS3E(); /* <=== setup all case/size data*/

   /* ************************************************************/
   /* *** obtain ALL current sl6onhnd quantities from syloc01 ****/
   /* ************************************************************/

  KY0GS3G();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSE1

// userarea entry processing
Function KY0GSE9()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0GM110"
   || CYXREC.CYXFRMAP == "KY0HM110"
   || CYXREC.CYXFRMAP == "KY0IM110"
   || CYXREC.CYXFRMAP == "KY0JM110"
   || CYXREC.CYXFRMAP == "KY0KM110"
   || CYXREC.CYXFRMAP == "KY0LM110"
   || CYXREC.CYXFRMAP == "KY0NM110")
    KY0GM110.IN5TRDCD = CYXREC.IN5TRDCD;
    KY0GM110.KY0GMDOC = CYXREC.IN5TRDOC;
    KY0GM110.KY0GMSUB = CYXREC.IN5TRSUB;
    return;
  end

  KY0GM110.IN5TRDCD = "C";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSE9

// save current key value(s)
Function KY0GSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0GM110.XWHCD;

  KY0GW01.XWHCD = KY0GM110.XWHCD;
  KY0GW01.IN5TRDCD = KY0GM110.IN5TRDCD;
  KY0GW01.KY0GWDOC = KY0GM110.KY0GMDOC;
  KY0GW01.KY0GWSUB = KY0GM110.KY0GMSUB;

  KY0GSX9(); /* <=== userarea exit processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSF1

// setup map key fields
Function KY0GSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0GM110.XWHCD = KY0GW01.XWHCD;

  KY0GM110.IN5TRDCD = KY0GW01.IN5TRDCD;
  KY0GM110.KY0GMDOC = KY0GW01.KY0GWDOC;
  KY0GM110.KY0GMSUB = KY0GW01.KY0GWSUB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSG1

// ENTER processing
Function KY0GSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0GSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  KY0GSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0GSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0GSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0GSF1(); /* <=== save current key value(s)*/
    KY0GST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0GSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSH1

// reset screen (clear)
Function KY0GSQ1()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values/defaults  ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0GM110 initial; /* resets entire screen*/

  KY0GSG1(); /* <=== setup map key fields*/

  KY0GM110.KY0GMDOC = 0;
  KY0GM110.CY2CNTBY = KY0GW01.CY2CNTBY;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0GM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0GM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0GM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0GM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0GW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** put initials back in ws for next doc, if needed     ****/
   /* ************************************************************/

  KY0GW01.CY2CNTBY = KY0GM110.CY2CNTBY;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSQ1

// desc. & cnt edits
Function KY0GSR1()


   /* ************************************************************/
   /* *** if either the desc. or count is entered,            ****/
   /* *** both must be entered (or neither)                   ****/
   /* ************************************************************/

  if (KY0GM110.SY4IDDSC[CYWIDX02] > " "
   || KY0GM110.KY0GMCNT[CYWIDX02] > 0)
     /* ** next sentence ***/
  else
    return;
  end

   /* ************************************************************/
   /* *** setup error for the missing field                   ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0GM110.KY0GMCNT[CYWIDX02] > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
    return;
  end

  if (KY0GM110.SY4IDDSC[CYWIDX02] > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0GM110.SY4IDDSC[CYWIDX02] cursor, bold;
  end

   /* ************************************************************/
   /* *** translate size desc. to size id                     ****/
   /* *** note: uncompressed syp size desc.s prev.ly obtained ****/
   /* ************************************************************/

  CYWREC.SY4IDDSC = KY0GM110.SY4IDDSC[CYWIDX02];

  XSCYSXS(); /* <=== xlate size desc. to size id*/

  if (CYWREC.CYWERRSW == "Y")
    set KY0GM110.SY4IDDSC[CYWIDX02] cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSR1

// reset screen (empty)
Function KY0GST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0GM110 empty; /* resets entire screen*/

  KY0GSG1(); /* <=== setup map key fields*/

  KY0GM110.CY2CNTBY = KY0GW01.CY2CNTBY;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0GM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0GM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0GM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0GM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0GW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** put initials back in ws for next doc, if needed     ****/
   /* ************************************************************/

  KY0GW01.CY2CNTBY = KY0GM110.CY2CNTBY;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GST1

// update database row
Function KY0GSU1()


   /* ************************************************************/
   /* *** if count has been changed, update case/size row     ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** obtain the row for update w/ or w/out data          ****/
   /* ************************************************************/

  CY3REC.SL2CASE = KY0GW01.SL2CASE[CYWIDX01];
  CY3REC.SY5SZID = KY0GW01.SY5SZID[CYWIDX02];

  TA1REC.TA1LOCAT[2] = "KY0GSU1 ";

  XSCY3U1(); /* <=== get row with data*/

  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y";
    set KY0GM110.SY4IDDSC[CYWIDX01] bold;
    set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SU1A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SU1B";
    else
      CYWREC.XXXLOCID = "SU1C";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  KY0GW01.KY0GWIX1 = CY3REC.SY5SZID;
  KY0GW01.KY0GW-CYCOUNT[KY0GWIX1] = KY0GM110.KY0GMCNT[CYWIDX02];

  if (KY0GM110.KY0GMCNT[CYWIDX02] != KY0GW01.KY0GWCNT[CYWIDX02])
    /* ************************************************************/
    /* *** if the count has changed update the record          ****/
    /* ***                                                     ****/
    /* *** setup the approriate record fields for the update   ****/
    /* *** and TA1REC.TA1LOCAT(2) = what executes the io sgrp  ****/
    /* *** note: TA1REC.TA1MAP is setup in level init.         ****/
    /* ***       zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
    /* ************************************************************/
    CY3REC.CY3COUNT = KY0GM110.KY0GMCNT[CYWIDX02];
    CY3REC.SL6ONHND = 0;
    TA1REC.TA1LOCAT[2] = "KY0GSU1 ";
    XSCY3R0(); /* <=== update*/
    if (SQLCA.VAGen_SQLCODE != 0)
      CYWREC.CYWERRSW = "Y";
      set KY0GM110.SY4IDDSC[CYWIDX01] bold;
      set KY0GM110.KY0GMCNT[CYWIDX02] cursor, bold;
      if (SQLCA.VAGen_SQLCODE == +100)
        if (CY3REC.CY3DATA > " ") /* <--- returned data has any changes*/
          CYWREC.XXXLOCID = "SU1D";
          CYWREC.CYWMSGNO = 0032; /* <--- row updated since last read*/
        else
          CYWREC.CYWSKYSW = "N";
          CYWREC.XXXLOCID = "SU1E";
          CYWREC.CYWMSGNO = 0033; /* <--- row deleted since last read*/
        end
        return;
      end
      CYWREC.XXXLOCID = "SU1F";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSU1

// userarea exit processing
Function KY0GSX9()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0GM110";

  CYXREC.IN5TRDCD = KY0GM110.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0GM110.KY0GMDOC;
  CYXREC.IN5TRSUB = KY0GM110.KY0GMSUB;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0GSX9

// update : doc itm/prd : 1
Function XSCY2U1()


   /* ************************************************************/
   /* *** get unique row for update of:  doc item/product     ****/
   /* *** using the std module:  IO2420                       ****/
   /* *** note: IO process DOES move data to record           ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       this will execute the std select unique sgrp  ****/
   /* ***       and                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  XSCY2I0(); /* <=== std select unique*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY2U1

// inquiry : cyc cnt ctl : 0
Function XSCY9I0()


   /* ************************************************************/
   /* *** select unique row from:  cyc cnt ctl                ****/
   /* *** using the std module:  IO2470                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "S ";

  call "IO2470" (CYVREC, SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY9I0 ";
  TA1REC.TA1LOCAT[1] = "IO2470  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VCYCTL01";
  TA1REC.TA1TBLKE = CY9REC.CY9KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY9I0

// xlate size desc to id no.
Function XSCYSXS()

   /* ************************************************************/
   /* *** loop thru the previously obtained (NOT compressed)  ****/
   /* *** size translations until a match                     ****/
   /* ************************************************************/

  CYWREC.CYWTSTNO = 1;

  while (CYWREC.CYWTSTNO <= 40)
    if (CYWREC.SY4IDDSC == SYPREC.SY4IDDSC[CYWTSTNO])
      return;
    end
    CYWREC.CYWTSTNO = CYWREC.CYWTSTNO + 1;
  end

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "SXSA";
  CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCYSXS

//*** RECORD=KY0GW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT DATA ENTRY
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0GW01 type basicRecord
  10 KY0GWLK1 KY0GWLK1 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 KY0GWDOC KY0GWDOC ; 
    15 KY0GWSUB KY0GWSUB ; 
  10 CY2CNTBY CY2CNTBY [13] ; 
  10 SL2CASE SL2CASE [13] ; 
  10 SY5SZID SY5SZID [52] ; 
  10 KY0GWCNT KY0GWCNT [52] ; 
  10 KY0GW-CLOSE-COMPLETE-FLAG KY0GW-CLOSE-COMPLETE-FLAG ; 
  10 KY0GW-COUNTS-IN-BALANCE-FLAG KY0GW-COUNTS-IN-BALANCE-FLAG ; 
  10 KY0GW-CLOSE-FLAG KY0GW-CLOSE-FLAG ; 
  10 KY0GWIX1 KY0GWIX1 ; 
  10 KY0GWIX2 KY0GWIX2 ; 
  10 KY0GW-SL6ONHND KY0GW-SL6ONHND [40] ; 
  10 KY0GW-CYCOUNT KY0GW-CYCOUNT [40] ; 
  10 KY0GW-TOTAL-SL6ONHND KY0GW-TOTAL-SL6ONHND ; 
  10 KY0GW-TOTAL-COUNT-ENTERED KY0GW-TOTAL-COUNT-ENTERED ; 
end // end KY0GW01

DataItem KY0GW-CLOSE-COMPLETE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0GW-CLOSE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0GW-COUNTS-IN-BALANCE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0GW-CYCOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_SY_LOC_OH_QTY
DataItem KY0GW-SL6ONHND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0GW-TOTAL-COUNT-ENTERED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0GW-TOTAL-SL6ONHND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orig. count put on map
DataItem KY0GWCNT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran doc nbr
DataItem KY0GWDOC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0GWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0GWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// complete last key
DataItem KY0GWLK1 char(15)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// audit tran doc sub
DataItem KY0GWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

