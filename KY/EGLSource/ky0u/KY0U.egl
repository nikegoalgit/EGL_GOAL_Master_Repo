package ky0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0U ****
// ************************************************************
// 
//                 CYCLE COUNT
//           CONTROL TABLE MAINTENANCE
//           =========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to update the cycle
//           count control table.
// 
//             1) On entry of the application if the warehouse
//                is passed, the first area and associated
//                location types will be displayed for the
//                warehouse.
//             2) If the warehouse is not passed then the user
//                will be required to enter the warehouse and
//                have an option to enter a specific area code.
//                If an area is entered, the location types
//                for that area will display. If area is
//                left blank, the first area/loc types for
//                the warehouse will display. In either case,
//                if the total number of loc types will not
//                fit on the screen, the remaining loc types
//                for the area will display by pressing PF8.
//                Other area/loc type combinations for the
//                warehouse may be displayed by pressing PF7
//                (backward) or PF8 (forward).
//             3) If an area is entered an enter is pressed,
//                that area and associated loc types will
//                display, thus eliminating the need to "page"
//                through an entire warehouse.
//             4) After the values are displayed the cursor
//                will be set to the daily scheduled count
//                field.
//                The user will be allowed to change any of
//                the daily counts, as well as the stock/
//                locate quantity flag.
//             5) EDITS: At least one of the fields must be
//                changed for an update to occur.  The s/l qty
//                flag must 'Y', 'N' or blank. The scheduled,
//                random and empty daily counts may not add to
//                be greater than the total number of
//                locations.
//             6) Pop-up window will display valid location
//                types and their descripitions by pressing PF6
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO2470    access cycle count control table.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  11/05/92  S MacMillan Created
// 00  10/06/93  jkrmpo      updated fiscal dates for 1994.
// 00  06/02/94  OVAZQU      updated fiscal dates for 1995.
// 00  05/29/95  PJAMES      updated fiscal dates for 1996.
// 00  05/21/97  dmays       updated fiscal dates for 1997.
// 00  08/21/97  RVEMPA      ADDED CODE TO DISPLAY FISCAL YEAR
//                           BEGIN DATE AND END DATE.
//                           REF: KY0U-1200(CONVERSE KY0UM100)
// 00  10/11/97  Kheina      Regen for tble chge. Add new
//                           column to Cy9rec.
// 
// 00  02-05-98  oricha      y2k modifications:  ky0u-1200
//     y2kproj               now uses century for year calc.
// ************************************************************
// ************************************************************
// *********************
Program KY0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY9REC CY9REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0UW00 KY0UW00; // record
  KY0UW01 KY0UW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA4REC TA4REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  X2BREC X2BREC; // record
  X2CREC X2CREC; // record
  X2EREC X2EREC; // record
  X3CREC X3CREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use YLTTBL {deleteAfterUse = yes}; // table
  use KY0UM.KY0UM100,  // forms
      KY0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0U-0000: KY0U-0000();
     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/


    goto KY0U-1000;


     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/
    KY0U-1000: KY0U-1000();
    /* ----------------------------------------------------------------*/
    /* flow to converse the main process*/
    /* ----------------------------------------------------------------*/

    goto KY0U-1000; /* flow to converse main process*/


  end // end main
end // end KY0U

// Application initialization
Function KY0U-0000()

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented trans id              ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0UM100 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYWREC empty; /* common working storage fields*/
  set KY0UW00 empty; /* appl. working storage area*/
  set KY0UW01 empty; /* screen display storage*/
  set CY9REC empty; /* cyc cnt control record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /* TA0050 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/


  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0U"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0U100 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0UM100"; /* TA0020 current map name*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0UM100.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0UM100.KY0UM-XWH-WHSE-CD = COMMAREA.XWHCD;
    if (COMMAREA.XWHCD in XWHTBL.XWHCD)
      KY0UM100.KY0UM-XWH-WHSE-ABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0) /* invalid warehouse*/
    /* next sentence*/
    else
      KY0UW00.KY0UW-FORMAT-MAP = "Y";
      KY0UW00.KY0UW-DATA-RQST = "Y";
      if (KY0UM100.KY0UM-XWH-WHSE-CD == "02") /* Greenland warehouse*/
        set KY0UM100.KY0UM-XBC-BRAND-CD-HDG normal; /* make brand code*/
        set KY0UM100.KY0UM-XBC-BRAND-CD normal; /* selection available*/
        set KY0UM100.KY0UM-XBC-BRAND-CD-DESC normal;
      end
    end
  else
    set KY0UM100.KY0UM-XWH-WHSE-CD cursor;
  end


   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/
end // end KY0U-0000

// main process
Function KY0U-1000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/

  KY0U-1100(); /* Obtain the data to display*/

  KY0U-1200(); /* Format and display the map*/

  KY0U-1300(); /* Check attention identifier*/

  KY0U-1500(); /* Verify the entered data*/

  KY0U-1600(); /* Process valid input request*/

  /* *************************************************************/
                /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1000

// obtain data to display
Function KY0U-1100()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.KY0UW-DATA-RQST != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/

  KY0UW00.XXXTSLEN = 830; /* temp storage page length*/

  /* ------------------------------------------------------------*/
  /* Don't use brand in select unless it's warehouse 02*/
  /* ------------------------------------------------------------*/

  if (KY0UM-XWH-WHSE-CD == "02")
    move KY0UM-XBC-BRAND-CD to KY0UW-XBC-BRAND-CD withV60Compat;
  else
    KY0UW-XBC-BRAND-CD = " ";
    KY0UM-XBC-BRAND-CD = " ";
  end

  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.XXXTSPAG == 0) /* no pages established*/
    KY0UW00.XXXTSPAG = 1; /* Page number to display*/
  end

  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/

  KY0U-1110(); /* Purge any temporary storage*/

  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/

  KY0U-1130(); /* Select set and open cursor*/

  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/

  KY0UW01.KY0UW-XAR-AREA-CD[1] = CY9REC.XARCD;

  KY0UW00.KY0UW-INDX = 1; /* Display line index*/
  KY0UW00.KY0UW-END-SW = "N"; /* End of cursor switch*/

  while (KY0UW00.KY0UW-END-SW == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (KY0UW00.KY0UW-END-SW == "N") /* Not end of cursor*/

      if (CY9REC.XARCD != KY0UW01.KY0UW-XAR-AREA-CD[1]
       && KY0UW-INDX > 1) /* area changed and page wasn't full*/

        KY0U-1160(); /* Add separate page*/
                                   /* to temporary storage*/
        KY0UW00.KY0UW-INDX = 1; /* reset line index*/

      end

    /* Exclude areas 03 and 04, as well as any rows which do not*/
    /* meet brand criteria*/
      if (CY9REC.XARCD == "03"
       || CY9REC.XARCD == "04"
       || KY0UM100.KY0UM-XBC-BRAND-CD != CY9REC.XBCCD)
      /* next sentence              /* skip the row*/
      else
        KY0U-1150(); /* Save data in display storage*/
      end

      KY0U-1140(); /* Fetch next row in the cursor*/

    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (KY0UW00.KY0UW-INDX > 10) /* Page is full*/

      KY0U-1160(); /* Add page to temporary storage*/

      KY0UW00.KY0UW-INDX = 1; /* reset line index*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.KY0UW-INDX > 1) /* Page was formatted*/
    KY0U-1160(); /* Add page to temporary storage*/
  end

  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/

  KY0U-1170(); /* Close the selected set cursor*/

  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.TA5TSQIX == 0) /* No pages formatted*/

    KY0UM100.XXXMODID = "1100"; /**/
    CYWREC.XXXERRID = "1100"; /* Module identification*/
    converseLib.validationFailed(25); /* No data was found to display*/
    set KY0UM100.KY0UM-XWH-WHSE-CD cursor; /* cursor*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/

  KY0UW00.KY0UW-DATA-RQST = "N"; /* Request for data switch*/


      /* *** find page that area was saved on *******/
  if (KY0UM100.KY0UM-XAR-AREA-CD != " ")
    KY0UW-INDX2 = 1;
    while (KY0UW-INDX2 <= 25)
      if (KY0UM100.KY0UM-XAR-AREA-CD
       == KY0UW00.KY0UW-REQUESTED-AREA[KY0UW-INDX2])
        KY0UW00.KY0UW-REQ-PAGE-HOLD = KY0UW00.KY0UW-REQUESTED-PAGE[KY0UW-INDX2];
        return; /* return to previous process*/
      end
      KY0UW-INDX2 = KY0UW-INDX2 + 1;
    end
  else
    KY0UW00.KY0UW-REQ-PAGE-HOLD = 0;
  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1100

// purge any temp storage
Function KY0U-1110()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  KY0UW-INDX2 = 0; /* zero area/page indx*/
  KY0UW-AREA-TABLE = 0; /* area/page table*/

  set KY0UW01 empty; /* m100 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  KY0UW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (KY0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1110"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M100"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1110

// select set and open cursor
Function KY0U-1130()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/

  /* Use values entered on map to select the data*/

  set CY9REC empty;

  CY9REC.XWHCD = KY0UM100.KY0UM-XWH-WHSE-CD;
  CY9REC.XARCD = "*"; /* wildcard area*/

                                 /* Select table set*/
  try
    call "IO2470" ("S1", SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    KY0U-1140(); /* get 1st row*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KY0UM100.XXXMODID = "1130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1130"; /* Program number*/
  TA1REC.TA1DBASE = "DCYCLE  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCYCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = CY9REC.CY9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1130

// fetch next row in cursor
Function KY0U-1140()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

                                  /* Fetch next row*/
  try
    call "IO2470" ("N1", SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      KY0UW00.KY0UW-END-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KY0UM100.XXXMODID = "1140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1140"; /* Program number*/
  TA1REC.TA1DBASE = "DCYCLE  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCYCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = CY9REC.CY9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1140

// save data in display storage
Function KY0U-1150()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  KY0UW01.KY0UW-XAR-AREA-CD[KY0UW-INDX] = CY9REC.XARCD;
  KY0UW01.KY0UW-YLT-LOC-TYP-CD[KY0UW-INDX] = CY9REC.YLTCD;
  KY0UW01.KY0UW-MAX-SCHED[KY0UW-INDX] = CY9REC.CY-MAX-SCHED-QTY;
  KY0UW01.KY0UW-MAX-RNDM[KY0UW-INDX] = CY9REC.CY-MAX-RNDM-QTY;
  KY0UW01.KY0UW-MAX-EMP[KY0UW-INDX] = CY9REC.CY-MAX-EMP-QTY;
  KY0UW01.KY0UW-TOT-SCHED[KY0UW-INDX] = CY9REC.CY-SCHED-TOT-QTY;
  KY0UW01.KY0UW-TOT-RNDM[KY0UW-INDX] = CY9REC.CY-RNDMLOC-TOT-QTY;
  KY0UW01.KY0UW-TOT-EMP[KY0UW-INDX] = CY9REC.CY-EMP-LOC-TOT-QTY;
  KY0UW01.KY0UW-TOT-RQT[KY0UW-INDX] = CY9REC.CY-RQT-TOT-QTY;
  KY0UW01.KY0UW-TOT-LOCS[KY0UW-INDX] = CY9REC.CY-LOC-TOT-QTY;
  KY0UW01.KY0UW-SL-QTY-ON-DOC[KY0UW-INDX] = CY9REC.CY-BLIND-CNT-FL;
  KY0UW01.KY0UW-LIMIT-RANDOM[KY0UW-INDX] = CY9REC.SLLMTRDM;

  KY0UW00.KY0UW-INDX = KY0UW00.KY0UW-INDX + 1; /* Increment line index*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1150

// add page to temp storage
Function KY0U-1160()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  KY0UW01.XXXTSLEN = KY0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (KY0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

            /* save area and page it's on*/
    KY0UW00.KY0UW-INDX2 = KY0UW-INDX2 + 1;
    KY0UW00.KY0UW-REQUESTED-AREA[KY0UW-INDX2] = KY0UW01.KY0UW-XAR-AREA-CD[1];
    KY0UW00.KY0UW-REQUESTED-PAGE[KY0UW-INDX2] = TA5REC.TA5TSQIX;

    set KY0UW01 empty; /* m100 display storage*/

    KY0UW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1160"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M100"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1160

// close cursor
Function KY0U-1170()
  /* ------------------------------------------------------------*/
  /* Close the selected set of table rows.*/
  /* ------------------------------------------------------------*/

                                   /* Close table set*/
  try
    call "IO2470" ("C1", SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1170"; /* Program number*/
  TA1REC.TA1DBASE = "DCYCLE  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCYCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = CY9REC.CY9KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1170

// format and converse the map
Function KY0U-1200()
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.KY0UW-DATA-RQST == "Y"    /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || converseVar.validationMsgNum == 91) /* or successful update*/

    if (KY0UW00.KY0UW-FORMAT-MAP == "Y") /* Map must be formatted*/
  /* Save header info in working storage*/
   /* save whse*/
      KY0UW00.KY0UW-XWH-WHSE-CD = KY0UM100.KY0UM-XWH-WHSE-CD;

      KY0U-1210(); /* Format the data on the map*/

    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  KY0UM100.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  KY0UM100.CATOAP = COMMAREA.CATOAP; /* TO application*/
  KY0UM100.CAITEM = COMMAREA.CAITEM; /* Application data*/


  /* -------------------------------------------------------------*/
  /* Added code begin: to display fiscal year begin/end dates.*/
  /* -------------------------------------------------------------*/

   /* ------- y2k out begin --------*/
   /* IF (X2CREC.X2CCURMM >= 6 AND X2CREC.X2CCURDD >= 1);*/
      /* MOVE X2CREC.X2CCURYY TO X2BREC.X2BBEGYY;*/
      /* X2EREC.X2EENDYY = X2CREC.X2CCURYY + 1;*/
   /* ELSE;*/
      /* X2BREC.X2BBEGYY = X2CREC.X2CCURYY - 1;*/
      /* X2EREC.X2EENDYY = X2CREC.X2CCURYY;*/
   /* END;*/
   /* ------- y2k out end ----------*/
   /* ------- y2k in  begin --------*/
  KY0UW00.KY0UW-XDATE = X2CREC.X2CCURDT;
  if ((X2CREC.X2CCURMM >= 6 && X2CREC.X2CCURDD >= 1))
    X2BREC.X2BBEGYY = X2CREC.X2CCURYY;
    KY0UW00.KY0UW-XCCYY = KY0UW00.KY0UW-XCCYY + 1;
    X2EREC.X2EENDYY = KY0UW00.KY0UW-XYY;
  else
    KY0UW00.KY0UW-XCCYY = KY0UW00.KY0UW-XCCYY - 1;
    X2BREC.X2BBEGYY = KY0UW00.KY0UW-XYY;
    X2EREC.X2EENDYY = X2CREC.X2CCURYY;
  end
   /* ------- y2k in end -----------*/

  X2BREC.X2BBEGMM = 06;
  X2BREC.X2BBEGDD = 01;

  X2EREC.X2EENDMM = 05;
  X2EREC.X2EENDDD = 31;

  KY0UM100.KY0UM-CY-MAN-STRT-NBR = X2BREC.X2BBEGSD;
  KY0UM100.KY0UM-CY-MAN-END-NBR = X2EREC.X2EENDSD;

  /* -------------------------------------------------------------*/
  /* Added code end: to display fiscal year begin date/end dates.*/
  /* -------------------------------------------------------------*/


  /* ------------------------------------------------------------*/
  /* Set attributes for add and change depending on authority*/
  /* ------------------------------------------------------------*/

  /* IF COMMAREA.CAADDFL = 'Y';       /* adds allowed*/
  /* unprotect fields*/
  /* END;*/

  /* IF COMMAREA.CACHGFL = 'Y';       /* changes allowed*/
  /* unprotect fields*/
  /* END;*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Message to display*/
   && COMMAREA.CAMSG != " ")            /* or message text*/

    KY0UM100.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    set KY0UM100 alarm; /* Indicate sound alarm*/

  end


  converse KY0UM100 ;


  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  CYWREC.XXXLOCID = " "; /* Module identification*/
  CYWREC.XXXERRID = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
   /* reset saved page*/
  KY0UW00.KY0UW-SAVE-PAGE = " ";
  COMMAREA.CATOAP = KY0UM100.CATOAP; /* TO application*/
  COMMAREA.CAITEM = KY0UM100.CAITEM; /* Application data*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1200

// format the display data
Function KY0U-1210()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set KY0UM100 initial; /* m100 input/output area*/

  KY0UW00.KY0UW-FORMAT-MAP = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* If a specific page was requested, display it*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.KY0UW-REQ-PAGE-HOLD > 0)
    KY0UW00.XXXTSPAG = KY0UW00.KY0UW-REQ-PAGE-HOLD;
    KY0UW00.KY0UW-REQ-PAGE-HOLD = 0;
  end

  /* ------------------------------------------------------------*/
  /* If the page in storage is not the page to be displayed,*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/

  if (KY0UW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (KY0UW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

        /* ------------------------------------------------------------*/
        /* If the desired page number is greater than the highest page*/
        /* in storage, default to the highest page number.*/
        /* ------------------------------------------------------------*/

      if (KY0UW00.XXXTSPAG > KY0UW00.TA5TSQIX) /* Desired greater highest*/
        KY0UW00.XXXTSPAG = KY0UW00.TA5TSQIX; /* Default to highest*/
      end

      KY0U-1220(); /* Obtain temporary storage page*/

    end


  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
                /* whse and whse description in the header*/
  KY0UM100.KY0UM-XWH-WHSE-CD = KY0UW00.KY0UW-XWH-WHSE-CD;
   /* get description*/
  if (KY0UW00.KY0UW-XWH-WHSE-CD in XWHTBL.XWHCD)
    KY0UM100.KY0UM-XWH-WHSE-ABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

                /* area and area description in the header*/
  KY0UM100.KY0UM-XAR-AREA-CD = KY0UW01.KY0UW-XAR-AREA-CD[1];
  KY0UW00.KY0UW-XAR-AREA-CD = KY0UW01.KY0UW-XAR-AREA-CD[1];
   /* get description*/
  if (KY0UW00.KY0UW-KEY in XARTBL.XARKEY)
    KY0UM100.KY0UM-XAR-AREA-DESC = XARTBL.XARDESC[sysVar.arrayIndex];
  end

                /* whse and whse description in the header*/
  if (KY0UW00.KY0UW-XWH-WHSE-CD == "02")
    KY0UM100.KY0UM-XBC-BRAND-CD = KY0UW00.KY0UW-XBC-BRAND-CD;
    KY0UM100.KY0UM-XBC-BRAND-CD-HDG = "BRAND CODE:";
    set KY0UM100.KY0UM-XBC-BRAND-CD-HDG skip;
    set KY0UM100.KY0UM-XBC-BRAND-CD normal;
    set KY0UM100.KY0UM-XBC-BRAND-CD-DESC skip;
    if (KY0UW00.KY0UW-XBC-BRAND-CD == "08")
      KY0UM100.KY0UM-XBC-BRAND-CD-DESC = "COLE-HAAN";
    end
  end

  KY0UW-INDX = 1; /* set index*/

  while (KY0UW00.KY0UW-INDX <= 10) /* Until screen is full or*/

    if (KY0UW01.KY0UW-YLT-LOC-TYP-CD[KY0UW-INDX] > " ") /* or end of data*/

   /* location type*/
      KY0UM100.KY0UM-YLT-LOC-TYP-CD[KY0UW-INDX] = KY0UW01.KY0UW-YLT-LOC-TYP-CD[KY0UW-INDX];
      set KY0UM100.KY0UM-YLT-LOC-TYP-CD[KY0UW-INDX] protect;

   /* /* daily sched*/
      KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] = KY0UW01.KY0UW-MAX-SCHED[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] normal;

   /* /* daily random*/
      KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] = KY0UW01.KY0UW-MAX-RNDM[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] normal;

   /* /* daily empty*/
      KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] = KY0UW01.KY0UW-MAX-EMP[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] normal;

   /* /* total sched*/
      KY0UM100.KY0UM-CY-TOT-NBR-SCHED[KY0UW-INDX] = KY0UW01.KY0UW-TOT-SCHED[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-TOT-NBR-SCHED[KY0UW-INDX] protect;

   /* /* total random*/
      KY0UM100.KY0UM-CY-TOT-NBR-RNDM[KY0UW-INDX] = KY0UW01.KY0UW-TOT-RNDM[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-TOT-NBR-RNDM[KY0UW-INDX] protect;

   /* /* total empty*/
      KY0UM100.KY0UM-CY-TOT-NBR-EMP-LOC[KY0UW-INDX] = KY0UW01.KY0UW-TOT-EMP[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-TOT-NBR-EMP-LOC[KY0UW-INDX] protect;

   /* /* total requested*/
      KY0UM100.KY0UM-CY-TOT-NBR-RQT[KY0UW-INDX] = KY0UW01.KY0UW-TOT-RQT[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-TOT-NBR-RQT[KY0UW-INDX] protect;

   /* /* total locations*/
      KY0UM100.KY0UM-CY-TOT-NBR-LOCS[KY0UW-INDX] = KY0UW01.KY0UW-TOT-LOCS[KY0UW-INDX];
      set KY0UM100.KY0UM-CY-TOT-NBR-LOCS[KY0UW-INDX] protect;

      if (KY0UW01.KY0UW-TOT-LOCS[KY0UW-INDX] > 0)
   /* random + scheduled*/
        KY0UW00.KY0UW-PCT-WORK-A = KY0UW01.KY0UW-TOT-RNDM[KY0UW-INDX] +         KY0UW01.KY0UW-TOT-SCHED[KY0UW-INDX];
                                   /* divided by tot locs*/
   /* equals percentage*/
        KY0UW00.KY0UW-PCT-WORK = KY0UW00.KY0UW-PCT-WORK-A /         KY0UW01.KY0UW-TOT-LOCS[KY0UW-INDX] * 100;

        KY0UM100.KY0UM-PCT-CMPLT[KY0UW-INDX] = KY0UW00.KY0UW-PCT-WORK;
      else
        KY0UM100.KY0UM-PCT-CMPLT[KY0UW-INDX] = 0;
      end
      set KY0UM100.KY0UM-PCT-CMPLT[KY0UW-INDX] protect;

   /* sl-qty*/
      KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] = KY0UW01.KY0UW-SL-QTY-ON-DOC[KY0UW-INDX];
      set KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] normal;

      if (KY0UM100.KY0UM-XWH-WHSE-CD == "51")
   /* limit random*/
        KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] = KY0UW01.KY0UW-LIMIT-RANDOM[KY0UW-INDX];
        set KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] normal;
      else
        KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] = "  ";
      end

    end

    KY0UW00.KY0UW-INDX = KY0UW00.KY0UW-INDX + 1; /* Increment map index*/

  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1210

// read temporary storage page
Function KY0U-1220()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  KY0UW01.XXXTSLEN = KY0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = KY0UW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (KY0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1220"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M100"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1220

// update temporary storage page
Function KY0U-1230()
  /* ------------------------------------------------------------*/
  /* Update the page in temporary storage.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (KY0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1230"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M100"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1230

// check attention idenifier
Function KY0U-1300()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0UM100.KY0UM-XWH-WHSE-CD; /* pass whse to app*/

  if (KY0UM100.CATOAP > " ")

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      KY0U-1110(); /* Purge temporary storage*/

      COMMAREA.CATOAP = KY0UM100.CATOAP;
      COMMAREA.CAITEM = KY0UM100.CAITEM;
      XSEXIT();
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "1300";
      CYWREC.CYWMSGNO = 0;
      KY0UM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      set KY0UM100.CATOAP cursor, bold;

    else

      set KY0UM100.CATOAP cursor, bold;
      KY0UM100.XXXMODID = "1300"; /* Module identification*/
      converseLib.validationFailed(87); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


  if (KY0UM100.CAITEM > " ")
    set KY0UM100.CAITEM cursor, bold;
    KY0UM100.XXXMODID = "1300"; /* Module identification*/
    converseLib.validationFailed(88); /* only valid with fastpath*/
    exit stack; /* Exit to display map*/
  end

   /* ************************************************************/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)

    set KY0UM100 initial; /* clear the map*/
    set KY0UW01 empty; /* m100 display storage*/
    KY0UW00.KY0UW-FORMAT-MAP = "Y"; /* Format the map switch*/
    KY0UW00.KY0UW-DATA-RQST = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    converseLib.validationFailed(93); /* enter valid warehouse*/

    exit stack; /* Exit to display map*/

  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "1300";
    CYWREC.CYWMSGNO = 0;
    KY0UM100.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0S";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "1300";
    CYWREC.CYWMSGNO = 0;
    KY0UM100.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "1300";
    CYWREC.CYWMSGNO = 0;
    KY0UM100.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "1300";
    CYWREC.CYWMSGNO = 0;
    KY0UM100.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


  if (converseVar.eventKey is pf6) /* POP-UP REQUESTED*/
    KY0U-1310(); /* Perform pop-up window*/
  end


  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/

  /* ******** warehouse or brand code changed - get new data *****/
  /* ******** or = area blanks                - get new data *****/

  if (KY0UW00.KY0UW-XWH-WHSE-CD != KY0UM100.KY0UM-XWH-WHSE-CD
   || KY0UM100.KY0UM-XAR-AREA-CD == " "
   || KY0UW00.KY0UW-XBC-BRAND-CD != KY0UM-XBC-BRAND-CD)

    if (converseVar.eventKey is enter)
      KY0UW00.KY0UW-DATA-RQST = "Y"; /* Request for data switch*/
      KY0UW00.KY0UW-FORMAT-MAP = "Y"; /* format map switch*/
      KY0UW00.XXXTSPAG = 1; /* reset temp stor page*/
      return; /* return to previous process*/

    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        converseLib.validationFailed(6); /* don't change key when scrolling*/
      else
        converseLib.validationFailed(62); /* don't change key w/o ENTER*/
      end
      KY0UM100.XXXMODID = "1300"; /* Module identification*/
      set KY0UM100.KY0UM-XWH-WHSE-CD cursor, bold;
      KY0UM100.KY0UM-XWH-WHSE-CD = KY0UW00.KY0UW-XWH-WHSE-CD;
      exit stack; /* exit to display map*/
    end
  end

  /* ******** new area requested - display that page ******/

  if (KY0UW00.KY0UW-XAR-AREA-CD != KY0UM100.KY0UM-XAR-AREA-CD)

    if (converseVar.eventKey is enter)
      /* *** find page that area was saved on *******/
      KY0UW-INDX2 = 1;
      while (KY0UW-INDX2 <= 25)
        if (KY0UM100.KY0UM-XAR-AREA-CD
         == KY0UW00.KY0UW-REQUESTED-AREA[KY0UW-INDX2])
          KY0UW00.KY0UW-REQ-PAGE-HOLD = KY0UW00.KY0UW-REQUESTED-PAGE[KY0UW-INDX2];
          return; /* return to previous process*/
        end
        KY0UW-INDX2 = KY0UW-INDX2 + 1;
      end

    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        converseLib.validationFailed(6); /* don't change key when scrolling*/
      else
        converseLib.validationFailed(62); /* don't change key w/o ENTER*/
      end
      KY0UM100.XXXMODID = "1300"; /* Module identification*/
      set KY0UM100.KY0UM-XAR-AREA-CD cursor, bold;
      KY0UM100.KY0UM-XAR-AREA-CD = KY0UW00.KY0UW-XAR-AREA-CD;
      exit stack; /* exit to display map*/
    end
  end

  if (converseVar.eventKey not enter)

    KY0UW00.KY0UW-INDX = 10; /* initialize index*/

    while (KY0UW00.KY0UW-INDX > 0) /* until end of lines*/

      if (KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] != 
      KY0UW01.KY0UW-MAX-SCHED[KY0UW-INDX]
       || KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] != 
      KY0UW01.KY0UW-MAX-RNDM[KY0UW-INDX]
       || KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] != 
      KY0UW01.KY0UW-MAX-EMP[KY0UW-INDX]
       || KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] != 
      KY0UW01.KY0UW-SL-QTY-ON-DOC[KY0UW-INDX]
       || KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] != 
      KY0UW01.KY0UW-LIMIT-RANDOM[KY0UW-INDX])
        KY0UM100.XXXMODID = "1300"; /* Module identification*/
        converseLib.validationFailed(62); /* no update w/o ENTER*/
        set KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] cursor, bold;
        set KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] bold;
        set KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] bold;
        set KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] bold;
        set KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] bold;
        exit stack; /* exit to display map*/

      end

      KY0UW00.KY0UW-INDX = KY0UW00.KY0UW-INDX - 1; /* decrement line number*/

    end
  end


   /* ************************************************************/
   /* *** if PF7 or PF8                                       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
    return; /* return to previous process*/
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  KY0UM100.XXXMODID = "1300";
  set KY0UM100.KY0UM-XWH-WHSE-CD cursor;
  converseLib.validationFailed(0004); /* <--- invalid pfkey msg*/
  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1300

// display pop-up window
Function KY0U-1310()
   /* ------------------------------------------------------------*/

              /* DISPLAY POP-UP WINDOW FOR YLTTBL*/

     /* 1) display the pop up window for that Location Type table*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  XPXX001(); /* perform pop-up window initialize*/
  XX0XW02.XX0XWHDR = "   LOCATION TYPE & DESCRIPTION        "; /* hdg*/

  while (XX0XW02.XX0XWEND == "N") /* until user hits PF3*/
    KY0U-1320(); /* perform ylt window*/
  end

  converseLib.clearScreen();
   /* restore the original map*/

  KY0UW00.KY0UW-DATA-RQST = "N"; /* no to request for data*/
  KY0UW00.KY0UW-FORMAT-MAP = "N"; /* no to format map*/

  exit stack; /* go display map*/


end // end KY0U-1310

// converse pop up window
Function KY0U-1320()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

   /* 1) If no errors, clear the map and set up for*/
   /* scrolling.  If PF7, PF8, or first time through,*/
   /* scroll the table.*/
   /* 2) Converse the map.*/
   /* 3) window is inquiry only - no selection allowed.*/
   /* 4) Check for PFkey and scroll errors.*/
   /* 5) If PF3 pressed, exit the window.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "                                      ";
    XX0XM001.XX0XMTR2 = "  PF7:BACK     PF8:FRWD     PF3:EXIT  ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YLTTBL.YLTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YLTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YLTTBL.YLTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YLTTBL.YLTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
  /* ***   SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL;/* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YLTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YLTTBL.YLTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YLTTBL.YLTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
  /* ***** SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL;/* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  /* MOVE 1 TO XX0XW02.XX0XWCT2;       /* Screen index*/
  /* WHILE XX0XW02.XX0XWCT2 LE 10;     /* Set all fields with data to normal*/
  /* AND XX0XM001.XX0XMCD(XX0XWCT2) NE ' ';*/
  /* SET XX0XM001.XX0XMSEL(XX0XWCT2) NORMAL;*/
  /* XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;*/
  /* END;*/

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YLTTBL.YLTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is pf3) /* If PF3 pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

  /* *** MOVE 1 TO XX0XW02.XX0XWCT2;        /* Screen index*/
  /* *** WHILE XX0XW02.XX0XWCT2 LE 10;      /* Until end of screen data*/
  /* ***   IF XX0XM001.XX0XMSEL(XX0XWCT2) = 'S';/* Check for selection*/
  /* ***     MOVE XX0XW02.XX0XWINX(XX0XWCT2) TO XX0XW02.XX0XWPIX;*/
  /* ***     MOVE 11 TO XX0XW02.XX0XWCT2;   /* End loop*/
  /* ***   END;*/
  /* ***   XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;*/
  /* *** END;*/
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not pf3)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end KY0U-1320

// verify data that was entered
Function KY0U-1500()
   /* ------------------------------------------------------------*/
   /* If no header data entered, ask for it.*/
   /* ------------------------------------------------------------*/

       /* ** verify warehouse*/
  if (KY0UM100.KY0UM-XWH-WHSE-CD == " ") /* whse is blank*/
    converseLib.validationFailed(89); /* whse missing or invalid*/
  else
    if (KY0UM100.KY0UM-XWH-WHSE-CD in XWHTBL.XWHCD)
      KY0UM100.KY0UM-XWH-WHSE-ABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      converseLib.validationFailed(89); /* whse missing or invalid*/
    else
      if (KY0UW-XWH-WHSE-CD != KY0UM-XWH-WHSE-CD) /* new whse requested*/
        exit stack; /* exit to display map*/
      end
    end
  end

  KY0UW00.KY0UW-XWH-WHSE-CD = KY0UM100.KY0UM-XWH-WHSE-CD;

  if (converseVar.validationMsgNum != 0) /* error found*/
    set KY0UM100 initial; /* clear the map*/
    KY0UM100.XXXMODID = "1500"; /* Module identification*/
    KY0UM100.KY0UM-XWH-WHSE-ABRV = " "; /**/
    set KY0UM100.KY0UM-XWH-WHSE-CD cursor, bold; /* cursor & hi-lite*/
    KY0UW-FORMAT-MAP = "N"; /* no new map*/
    KY0UM100.KY0UM-XWH-WHSE-CD = KY0UW00.KY0UW-XWH-WHSE-CD;
    exit stack; /* exit to display map*/
  end

       /* ** verify area*/
  if (KY0UM100.KY0UM-XAR-AREA-CD == " ")
   /* next sentence*/
  else
    if (KY0UM100.KY0UM-XAR-AREA-CD == "03" /* areas 3 & 4 not allowed*/
     || KY0UM100.KY0UM-XAR-AREA-CD == "04")
      set KY0UM100 initial; /* clear the map*/
      KY0UM100.XXXMODID = "1500"; /* Module identification*/
      KY0UM100.KY0UM-XAR-AREA-DESC = " "; /**/
      set KY0UM100.KY0UM-XWH-WHSE-CD cursor, bold; /* cursor & hi-lite*/
      set KY0UM100.KY0UM-XAR-AREA-CD bold; /* hi-lite*/
      KY0UW-FORMAT-MAP = "N"; /* ;/* no new map*/
      converseLib.validationFailed(90); /* area missing or invalid*/
      exit stack; /* exit to display map*/
    else
           /* ** area changed*/
      if (KY0UM100.KY0UM-XAR-AREA-CD != KY0UW00.KY0UW-XAR-AREA-CD)
        KY0UW00.KY0UW-XAR-AREA-CD = KY0UM100.KY0UM-XAR-AREA-CD;
        if (KY0UW00.KY0UW-KEY in XARTBL.XARKEY)
          KY0UM100.KY0UM-XAR-AREA-DESC = XARTBL.XARDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0) /* area invalid -*/
          set KY0UM100 initial; /* clear the map*/
          KY0UM100.XXXMODID = "1500"; /* Module identification*/
          KY0UM100.KY0UM-XWH-WHSE-CD = KY0UW00.KY0UW-XWH-WHSE-CD;
          KY0UM100.KY0UM-XAR-AREA-CD = KY0UW00.KY0UW-XAR-AREA-CD;
          KY0UM100.KY0UM-XAR-AREA-DESC = " "; /**/
          set KY0UM100.KY0UM-XWH-WHSE-CD cursor, bold; /* cursor & hi-lite*/
          set KY0UM100.KY0UM-XAR-AREA-CD bold; /* hi-lite*/
          KY0UW-FORMAT-MAP = "N"; /* ;/* no new map*/
          converseLib.validationFailed(90); /* area missing or invalid*/
          exit stack; /* exit to display map*/
        else
          return; /* return to previous process -*/
        end /* no more editing*/
      end
    end
  end


       /* ** verify brand*/
  if (KY0UM100.KY0UM-XWH-WHSE-CD == "02") /* Greenland?*/
    if (KY0UM100.KY0UM-XBC-BRAND-CD == "08" /* cole haan or blank only*/
     || KY0UM100.KY0UM-XBC-BRAND-CD == "  ")
    else
      move KY0UM-XBC-BRAND-CD to KY0UW-XBC-BRAND-CD withV60Compat;
      set KY0UM100 initial; /* clear the map*/
      KY0UM100.XXXMODID = "1500"; /* Module identification*/
      KY0UM100.KY0UM-XWH-WHSE-CD = KY0UW00.KY0UW-XWH-WHSE-CD;
      KY0UM100.KY0UM-XAR-AREA-CD = KY0UW00.KY0UW-XAR-AREA-CD;
      KY0UM100.KY0UM-XBC-BRAND-CD = KY0UW00.KY0UW-XBC-BRAND-CD;
      KY0UM100.KY0UM-XBC-BRAND-CD-HDG = "BRAND CODE:";
      KY0UM100.KY0UM-XBC-BRAND-CD-DESC = " ";
      set KY0UM100.KY0UM-XBC-BRAND-CD-HDG skip; /**/
      set KY0UM100.KY0UM-XBC-BRAND-CD-DESC skip; /**/
      set KY0UM100.KY0UM-XBC-BRAND-CD cursor, bold; /* cursor & hi-lite*/
      KY0UW-FORMAT-MAP = "N"; /* ;/* no new map*/
      converseLib.validationFailed(96); /* Invalid brand*/
      exit stack; /* exit to display map*/
    end
    if (KY0UW-XBC-BRAND-CD != KY0UM-XBC-BRAND-CD) /* new brand requested*/
      move KY0UM-XBC-BRAND-CD to KY0UW-XBC-BRAND-CD withV60Compat; /* save it*/
      exit stack; /* exit to display map*/
    end
  end


  /* ------------------------------------------------------------*/
  /* daily count and s/l flag edits*/
  /* ------------------------------------------------------------*/

  KY0UW00.KY0UW-INDX = 10;

  while (KY0UW00.KY0UW-INDX > 0)

    if (KY0UM100.KY0UM-YLT-LOC-TYP-CD[KY0UW-INDX] != " ") /* valid row?*/

      if (KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] == "Y" /* then y or n*/
       || KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] == "N" /* only*/
       || KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] == " ")
        /* next sentence*/
      else
        KY0UM100.XXXMODID = "1500"; /* Module identification*/
        set KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] cursor, bold; /**/
        converseLib.validationFailed(92); /* Y, N or space only*/
      end

      if (KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] == "Y" /* then y or n*/
       || KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] == "N" /* only*/
       || KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] == " ")
        /* next sentence*/
      else
        KY0UM100.XXXMODID = "1500"; /* Module identification*/
        set KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] cursor, bold; /**/
        converseLib.validationFailed(92); /* Y, N or space only*/
      end

   /* add*/
   /* empty plus*/
   /* random plus*/
      KY0UW00.KY0UW-SUM = KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] +       KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] +       KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX]; /* scheduled*/

      if (KY0UW00.KY0UW-SUM >  /* sum > total ?*/
      KY0UM100.KY0UM-CY-TOT-NBR-LOCS[KY0UW-INDX])
        KY0UM100.XXXMODID = "1500"; /* Module identification*/
        set KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] bold;
        set KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] bold;
        set KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] cursor, bold;
        converseLib.validationFailed(95); /* daily must be < total*/
      end

  /* IF KY0UM100.KY0UM-CY-MAX-EMP(KY0UW-INDX) GT/* empty > total ?*/
  /* KY0UM100.KY0UM-CY-TOT-NBR-LOCS(KY0UW-INDX);*/
  /* MOVE '1500' TO KY0UM100.XXXMODID;/* Module identification*/
  /* SET KY0UM100.KY0UM-CY-MAX-EMP(KY0UW-INDX) CURSOR,BRIGHT;*/
  /* MOVE 95 TO EZEMNO;         /* daily must be < total*/
  /* END;*/

  /* IF KY0UM100.KY0UM-CY-MAX-RNDM(KY0UW-INDX) GT/* random > total ?*/
  /* KY0UM100.KY0UM-CY-TOT-NBR-LOCS(KY0UW-INDX);*/
  /* MOVE '1500' TO KY0UM100.XXXMODID;/* Module identification*/
  /* SET KY0UM100.KY0UM-CY-MAX-RNDM(KY0UW-INDX) CURSOR,BRIGHT;*/
  /* MOVE 95 TO EZEMNO;         /* daily must be < total*/
  /* END;*/

  /* IF KY0UM100.KY0UM-CY-MAX-SCHED(KY0UW-INDX) GT/* scheduled > total ?*/
  /* KY0UM100.KY0UM-CY-TOT-NBR-LOCS(KY0UW-INDX);*/
  /* MOVE '1500' TO KY0UM100.XXXMODID;/* Module identification*/
  /* SET KY0UM100.KY0UM-CY-MAX-SCHED(KY0UW-INDX) CURSOR,BRIGHT;*/
  /* MOVE 95 TO EZEMNO;         /* daily must be < total*/
  /* END;*/

    end

    KY0UW00.KY0UW-INDX = KY0UW00.KY0UW-INDX - 1; /* Increment map index*/

  end

  if (converseVar.validationMsgNum != 0) /* error found*/
    exit stack; /* go display sreen*/
  end

  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    KY0U-1510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is enter) /* Enter was pressed*/

      XSX3CTM(); /* get current time*/

      KY0U-1520(); /* Verify data in the line*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* update was sucessful*/
   || converseVar.validationMsgNum == 91)
    /* next sentence*/
  else
    exit stack; /* Exit to display map*/
  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1500

// verify scroll request
Function KY0U-1510()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && KY0UW00.XXXTSPAG < 2)       /* and no previous pages*/

    KY0UM100.XXXMODID = "1510"; /* Module identification*/
    KY0UW00.KY0UW-FORMAT-MAP = "Y"; /* format map switch*/
    converseLib.validationFailed(7); /* No previous page to display*/
    exit stack; /* exit to display map*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && KY0UW00.XXXTSPAG >= KY0UW00.TA5TSQIX) /* and no more pages*/

    KY0UM100.XXXMODID = "1510"; /* Module identification*/
    KY0UW00.KY0UW-FORMAT-MAP = "Y"; /* format map switch*/
    converseLib.validationFailed(8); /* No more pages to display*/
    exit stack; /* exit to display map*/

  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/

end // end KY0U-1510

// verify data in the line
Function KY0U-1520()
  /* ------------------------------------------------------------*/
  /* If daily counts changed, update the row*/
  /* ------------------------------------------------------------*/

  KY0UW00.KY0UW-INDX = 10; /* initialize index*/

  while (KY0UW00.KY0UW-INDX > 0) /* until end of lines*/

    if (KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX] !=  /* counts changed?*/
    KY0UW01.KY0UW-MAX-SCHED[KY0UW-INDX]             
     || KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX] !=   
    KY0UW01.KY0UW-MAX-RNDM[KY0UW-INDX]              
     || KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX] !=    
    KY0UW01.KY0UW-MAX-EMP[KY0UW-INDX]               
     || KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX] != 
    KY0UW01.KY0UW-SL-QTY-ON-DOC[KY0UW-INDX]         
     || KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX] !=  
    KY0UW01.KY0UW-LIMIT-RANDOM[KY0UW-INDX])        

                /* update row*/
      CY9REC.XWHCD = KY0UM100.KY0UM-XWH-WHSE-CD;
      CY9REC.XARCD = KY0UM100.KY0UM-XAR-AREA-CD;
      CY9REC.YLTCD = KY0UM100.KY0UM-YLT-LOC-TYP-CD[KY0UW-INDX];
      if (KY0UM-XBC-BRAND-CD == "08") /* cole haan brand*/
        CY9REC.XBCCD = "08";
      else
        CY9REC.XBCCD = "  ";
      end

      KY0U-1530(); /* read the row*/

   /* change counts*/
      CY9REC.CY-MAX-SCHED-QTY = KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX];
      CY9REC.CY-MAX-RNDM-QTY = KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX];
      CY9REC.CY-MAX-EMP-QTY = KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX];
      CY9REC.CY-BLIND-CNT-FL = KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX];
      CY9REC.SLLMTRDM = KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX];
      CY9REC.ZZZCHGDT = X2CREC.X2CCURDT; /* date & time*/
      CY9REC.ZZZCHGTM = X3CREC.X3CCURST;

      KY0U-1540(); /* update the row*/

        /* save values in w/s*/
      KY0UW-MAX-SCHED[KY0UW-INDX] = KY0UM100.KY0UM-CY-MAX-SCHED[KY0UW-INDX];
      KY0UW-MAX-RNDM[KY0UW-INDX] = KY0UM100.KY0UM-CY-MAX-RNDM[KY0UW-INDX];
      KY0UW-MAX-EMP[KY0UW-INDX] = KY0UM100.KY0UM-CY-MAX-EMP[KY0UW-INDX];
      KY0UW-SL-QTY-ON-DOC[KY0UW-INDX] = KY0UM100.KY0UM-SL-QTY-ON-DOC[KY0UW-INDX];
      KY0UW-LIMIT-RANDOM[KY0UW-INDX] = KY0UM100.KY0UM-LIMIT-RANDOM[KY0UW-INDX];

    end

    KY0UW00.KY0UW-INDX = KY0UW00.KY0UW-INDX - 1; /* decrement line number*/

  end

  if (converseVar.validationMsgNum == 91) /* update was successful*/
    KY0U-1230(); /* update temp storage*/
  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1520

// read a unique row
Function KY0U-1530()
  /* ------------------------------------------------------------*/
  /* Read a unique row from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO2470" ("S ", SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KY0UM100.XXXMODID = "1530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ A UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1530"; /* Program number*/
  TA1REC.TA1DBASE = "DCYCLE  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCYCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = CY9REC.CY9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1530

// update a unique row
Function KY0U-1540()
  /* ------------------------------------------------------------*/
  /* update a unique row in the table*/
  /* ------------------------------------------------------------*/

  try
    call "IO2470" ("U ", SQLCA, CY9REC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    KY0UM100.XXXMODID = "1540"; /* Module identification*/
    converseLib.validationFailed(91); /* update successful*/
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  KY0UM100.XXXMODID = "1540"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "1540"; /* Program number*/
  TA1REC.TA1DBASE = "DCYCLE  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCYCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = CY9REC.CY9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1540

// process valid input request
Function KY0U-1600()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/

  KY0UW00.KY0UW-FORMAT-MAP = "Y"; /* format the map switch*/

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    KY0UW00.XXXTSPAG = KY0UW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    KY0UW00.XXXTSPAG = KY0UW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


  /* *************************************************************/
                   /* END OF STATEMENT GROUP*/
  /* *************************************************************/
end // end KY0U-1600

//*** RECORD=KY0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record KY0UW00 type basicRecord
  10 KY0UW-INDX KY0UW-INDX ; 
  10 KY0UW-INDX2 KY0UW-INDX2 ; 
  10 KY0UW-END-SW KY0UW-END-SW ; 
  10 KY0UW-FORMAT-MAP KY0UW-FORMAT-MAP ; 
  10 KY0UW-DATA-RQST KY0UW-DATA-RQST ; 
  10 KY0UW-KEY KY0UW-KEY ; 
    15 KY0UW-XWH-WHSE-CD KY0UW-XWH-WHSE-CD ; 
    15 KY0UW-XAR-AREA-CD KY0UW-XAR-AREA-CD ; 
  10 KY0UW-XBC-BRAND-CD KY0UW-XBC-BRAND-CD ; 
  10 KY0UW-SAVE-PAGE KY0UW-SAVE-PAGE ; 
  10 KY0UW-SUM KY0UW-SUM ; 
  10 KY0UW-PCT-WORK-A KY0UW-PCT-WORK-A ; 
  10 KY0UW-PCT-WORK KY0UW-PCT-WORK ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KY0UW-REQ-PAGE-HOLD KY0UW-REQ-PAGE-HOLD ; 
  10 KY0UW-AREA-TABLE KY0UW-AREA-TABLE ; 
    15 KY0UW-REQUESTED-AREA KY0UW-REQUESTED-AREA [25] ; 
    15 KY0UW-REQUESTED-PAGE KY0UW-REQUESTED-PAGE [25] ; 
  10 KY0UW-XDATE KY0UW-XDATE ; 
    15 KY0UW-XCCYY KY0UW-XCCYY ; 
      20 KY0UW-XCC KY0UW-XCC ; 
      20 KY0UW-XYY KY0UW-XYY ; 
    15 KY0UW-XMMDD KY0UW-XMMDD ; 
end // end KY0UW00

//*** RECORD=KY0UW01 ****
// /*
// /*      application working storage for ky0um100
// /*
// ***********************
Record KY0UW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(830) ; 
    10 KY0UW-XAR-AREA-CD KY0UW-XAR-AREA-CD [10] ; 
    10 KY0UW-YLT-LOC-TYP-CD KY0UW-YLT-LOC-TYP-CD [10] ; 
    10 KY0UW-MAX-SCHED KY0UW-MAX-SCHED [10] ; 
    10 KY0UW-MAX-RNDM KY0UW-MAX-RNDM [10] ; 
    10 KY0UW-MAX-EMP KY0UW-MAX-EMP [10] ; 
    10 KY0UW-TOT-SCHED KY0UW-TOT-SCHED [10] ; 
    10 KY0UW-TOT-RNDM KY0UW-TOT-RNDM [10] ; 
    10 KY0UW-TOT-EMP KY0UW-TOT-EMP [10] ; 
    10 KY0UW-TOT-RQT KY0UW-TOT-RQT [10] ; 
    10 KY0UW-TOT-LOCS KY0UW-TOT-LOCS [10] ; 
    10 KY0UW-PCT-COMPLT KY0UW-PCT-COMPLT [10] ; 
    10 KY0UW-SL-QTY-ON-DOC KY0UW-SL-QTY-ON-DOC [10] ; 
    10 KY0UW-LIMIT-RANDOM KY0UW-LIMIT-RANDOM [10] ; 
end // end KY0UW01

Record X2BREC type basicRecord
  10 X2BBEGDT X2BBEGDT ; 
    15 X2BBEGCC X2BBEGCC ; 
    15 X2BBEGSD X2BBEGSD ; 
      20 X2BBEGYY X2BBEGYY ; 
      20 X2BBEGMM X2BBEGMM ; 
      20 X2BBEGDD X2BBEGDD ; 
end // end X2BREC

Record X2EREC type basicRecord
  10 X2EENDDT X2EENDDT ; 
    15 X2EENDCC X2EENDCC ; 
    15 X2EENDSD X2EENDSD ; 
      20 X2EENDYY X2EENDYY ; 
      20 X2EENDMM X2EENDMM ; 
      20 X2EENDDD X2EENDDD ; 
end // end X2EREC

// area/page
DataItem KY0UW-AREA-TABLE char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem KY0UW-DATA-RQST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem KY0UW-END-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem KY0UW-FORMAT-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KY0UW-INDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem KY0UW-INDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// key
DataItem KY0UW-KEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// limit random locations
DataItem KY0UW-LIMIT-RANDOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// daily empty counts
DataItem KY0UW-MAX-EMP num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// daily random counts
DataItem KY0UW-MAX-RNDM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// daily sched counts
DataItem KY0UW-MAX-SCHED num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent of total complete
DataItem KY0UW-PCT-COMPLT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work
DataItem KY0UW-PCT-WORK num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work
DataItem KY0UW-PCT-WORK-A num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp stor page hold
DataItem KY0UW-REQ-PAGE-HOLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//  area
DataItem KY0UW-REQUESTED-AREA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  temp stor page
DataItem KY0UW-REQUESTED-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Page save field
DataItem KY0UW-SAVE-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sl quantity on doc
DataItem KY0UW-SL-QTY-ON-DOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work
DataItem KY0UW-SUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to date empty counts
DataItem KY0UW-TOT-EMP num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date total counts
DataItem KY0UW-TOT-LOCS num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date random counts
DataItem KY0UW-TOT-RNDM num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date requested counts
DataItem KY0UW-TOT-RQT num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date sched counts
DataItem KY0UW-TOT-SCHED num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// area code
DataItem KY0UW-XAR-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// brand code
DataItem KY0UW-XBC-BRAND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0UW-XCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0UW-XCCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date reformatter
DataItem KY0UW-XDATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0UW-XMMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse code
DataItem KY0UW-XWH-WHSE-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KY0UW-XYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// location type
DataItem KY0UW-YLT-LOC-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem X2BBEGCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2BBEGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2BBEGDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2BBEGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2BBEGSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2BBEGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem X2EENDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

