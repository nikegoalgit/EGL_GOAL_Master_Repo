package ky0x;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0X ****
// ************************************************************
// 
//           CYCLE COUNT
//           VARIANCE HISTORY REPORT REQUEST
//           ===============================
//           by LOCATION
// 
// ************************************************************
// 
// OVERVIEW: This application will submit JCL immediately for
//           execution.  The report will be routed to the
//           online selected printer.
// 
//           notes:
//             1) the online CICS userid will be used as part
//                of the job card
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/16/88  Ward Jones  created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  10/08/90  mmoreh      tbl changes
// 00  07/31/91  scleme      convert CY0X to KY0X
// 00  12/07/92  jcampb      cycle count changes
// 00  01/12/93  jcampb      fix error in ky0xs1j
// 00  10/14/96  oenfie      add a warehouse parm on the jcl
//                           which will be used as a suffix
//                           to the dsname of the files.  Each
//                           whse will now have their own
//                           unique files.
// 00  10/29/97  ovazqu      Recompile with production JCL
//                           (see KY0XS1J sgroups).
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CYUREC CYUREC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0XW01 KY0XW01; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  UT1REC UT1REC; // record
  X2CREC X2CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use KY0XM.KY0XM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0X110: KY0X110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "120 "; /* error id location id*/
    goto KY0X120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0X120: KY0X120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0X120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0X110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0X120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "120 ";
      goto KY0X120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0X120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0X

// one time initializations
Function KY0X110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented trans id              ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0XM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYVREC empty; /* common io mod pass fields*/
  set CYWREC empty; /* common working storage fields*/
  set KY0XW01 empty; /* appl. working storage area*/
  set SL4REC empty; /* s.l. area/zone record*/
  set SL5REC empty; /* s.l. location record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set UT1REC empty; /* ut0200 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/18/88  W. Jones      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0XM110";
  CYWREC.XXXTITLE = "CC VARIANCE HISTORY RPT BY LOCATION";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0X"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0X110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0XM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0XM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0XM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0XM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0XM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0XM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0XM110.KY0XMALC = "N";

  CYWREC.CYWWKDTE = X2CREC.X2CCURDT;
  XSCYSXT(); /* <=== convert date format*/
  KY0XM110.KY0XMTDT = CYWREC.CYWINDTE;

  CYWREC.CYWCTR01 = -7;
  XSCYSAD(); /* <=== add/sub days to current dt*/
  XSCYSXT(); /* <=== convert date format*/
  KY0XM110.KY0XMFDT = CYWREC.CYWINDTE;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 8;

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0XM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0XM110.XWHCD cursor;
  end

  XSCYSID(); /* get cics userid for jcl*/

  if (CYWREC.CYWERRSW == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  setup printers                     ****/
   /* ***                  save keys/whse                     ****/
   /* ************************************************************/

  if (KY0XM110.XWHCD > " ")
    KY0XS1W(); /* <=== whse edit*/
    if (CYWREC.CYWERRSW == "Y")
      CYWREC.XXXLOCID = "110A";
      exit stack;
    end
    KY0XS1P(); /* <=== setup printers*/
    if (CYWREC.CYWERRSW == "Y")
      KY0XW01.XWHCD = " ";
      CYWREC.XXXLOCID = "110B";
      exit stack;
    end
    KY0XSF1(); /* <=== save key values*/
  else
    KY0XS1M(); /* <=== missing whse edit*/
    CYWREC.XXXLOCID = "110C";
    CYWREC.CYWIDX02 = 1;
    while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
      set KY0XM110.XMCYMSEL[CYWIDX02] skip, invisible;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
    end
    set KY0XM110.KY0XMFDT skip, invisible;
    set KY0XM110.KY0XMTDT skip, invisible;
    set KY0XM110.KY0XMSPR skip, invisible;
    set KY0XM110.KY0XMOPR skip, invisible;
    set KY0XM110.KY0XMALC skip, invisible;
    set KY0XM110.XARCD skip, invisible;
    set KY0XM110.SL4ZONE skip, invisible;
    set KY0XM110.SL5LOCTN skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0X110

// converse & control key entry
Function KY0X120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0XM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0XM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0W";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0XM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0XM110.CATOAP;
    COMMAREA.CAITEM = KY0XM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0XM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0XM110.VAGen_EZEMSG = " ";
  set KY0XM110.CATOAP initialAttributes;
  set KY0XM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0XM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set KY0XM110.KY0XMFDT initialAttributes;
  set KY0XM110.KY0XMTDT initialAttributes;
  set KY0XM110.KY0XMALC initialAttributes;
  set KY0XM110.XARCD initialAttributes;
  set KY0XM110.SL4ZONE initialAttributes;
  set KY0XM110.SL5LOCTN initialAttributes;

  CYWREC.CYWIDX02 = 1;
  while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    if (KY0XM110.XROPDEST[CYWIDX02] > " ")
      set KY0XM110.XMCYMSEL[CYWIDX02] initialAttributes;
    end
    CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
  end

  set KY0XM110.KY0XMSPR initialAttributes;
  set KY0XM110.KY0XMOPR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0XM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0XM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0XSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0X";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0Y";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0XM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0X120

// use input printer dest id
Function KY0XS1I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. id are input    ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. id in table                              ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (KY0XM110.KY0XMOPR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IA";
    CYWREC.CYWMSGNO = 0009; /* <--- requiered field msg*/
    set KY0XM110.KY0XMOPR cursor, bold;
  end

  if (KY0XM110.KY0XMSPR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IB";
    CYWREC.CYWMSGNO = 0009; /* <--- requiered field msg*/
    set KY0XM110.KY0XMSPR cursor, bold;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  if (KY0XM110.KY0XMOPR in XROTBL.XROPDEST)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0XW01.KY0XWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1IC";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0XM110.KY0XMOPR cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1ID";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0XM110.KY0XMOPR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1I

// setup & submit jcl
Function KY0XS1J()
   /* ************************************************************/
   /* *** create the production jcl in the cyurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set CYUREC empty;

  CYUREC.CYUCOUNT = 1;

  KY0XW01.KY0XWLT1 = "//CY";
  KY0XW01.CYWUSRID = CYWREC.CYWUSRID;
  KY0XW01.KY0XWLT2 = " JOB  (CY,MUR2),";
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0XW01.KY0XWJOB;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         'CC VAR HIST/LOC  ',         ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         CLASS=P,                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         MSGCLASS=J                   ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//**************************************";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** THIS JOB CREATES CYCLE COUNT     **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** VARIANCE HISTORY REPORTS         **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** BY LOCATION                      **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** VIA ONLINE SUBMITTED REQUESTS    **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//**************************************";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "/*JOBPARM PROCLIB=ONETIME              ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  KY0XW01.KY0XWLT3 = "/*OUTPUT CY31 FORMS=CY31,DEST=";
   /* note: printer id has been saved in this lines printer fld*/
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0XW01.KY0XWOUT;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//JOBLIB   DD DSN=PROD.ONETIME.LOADLIB,DISP=SHR";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.COB2.LOADLIB,DISP=SHR   ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.BRDG.LOADLIB,DISP=SHR   ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.LOADLIB,DISP=SHR        ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//S0010   EXEC CY5701,                  ";
  KY0XW-PARM-LINE = "  "; /* initialize parm line*/
  KY0XW-PARM-LINE-INFO = "//             WHSE='";
  KY0XW-WHSE-PARM = KY0XM110.XWHCD;
  KY0XW-PARM-APOST = "'";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0XW-PARM-LINE;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                 ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//P0030.SYSIN   DD  *                   ";
   /* ************************************************************/
   /* *** setup the w/a/z/l; dates & all loc switch           ****/
   /* ************************************************************/

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  KY0XW01.KY0XWWH = KY0XM110.XWHCD;
  KY0XW01.KY0XWFDT = CYVREC.CYVSDT;
  KY0XW01.KY0XWTDT = CYVREC.CYVEDT;
  KY0XW01.KY0XWALC = KY0XM110.KY0XMALC;
  KY0XW01.XARCD = KY0XM110.XARCD;
  KY0XW01.SL4ZONE = KY0XM110.SL4ZONE;
  KY0XW01.SL5LOCTN = KY0XM110.SL5LOCTN;
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0XW01.KY0XWLIN;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "/*                                  ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                 ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//******* END OF JOB STREAM ********";

   /* ************************************************************/
   /* *** note: final increment of slucount leaves the        ****/
   /* *** correct value in this field for ta0070              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** submit the jcl created & saved in the slurec        ****/
   /* *** via ta0070                                          ****/
   /* ************************************************************/

  try
    call "TA0070" (CYUREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (CYUREC.CYURETRN != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1JA";
    CYWREC.CYWMSGNO = 0058; /* <--- PRINT REQUEST FAILED*/
    set KY0XM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1J

// missing whse edit
Function KY0XS1M()


   /* ************************************************************/
   /* *** setup error if whse missing                         ****/
   /* ************************************************************/

  if (KY0XM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1MA";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1M

// setup printers
Function KY0XS1P()


   /* ************************************************************/
   /* *** setup selectable printers per whse                  ****/
   /* *** note: make unused printer flds askip,dark           ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWIDX02 = 1;

  while (XROTBL.XROCD[CYWIDX01] != "9999"
   && CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    if (XROTBL.XWHCD1[CYWIDX01] == KY0XM110.XWHCD
     || XROTBL.XWHCD2[CYWIDX01] == KY0XM110.XWHCD
     || XROTBL.XWHCD3[CYWIDX01] == KY0XM110.XWHCD)
      if (XROTBL.XXXSTAT[CYWIDX01] == "A")
        KY0XM110.XROPDEST[CYWIDX02] = XROTBL.XROPDEST[CYWIDX01];
        set KY0XM110.XMCYMSEL[CYWIDX02] initialAttributes;
        CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWIDX02 == 1)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1PA";
    CYWREC.CYWMSGNO = 0054; /* <--- no printer assigned*/
  end

   /* ************************************************************/
   /* *** darken remaining printer fields                     ****/
   /* ************************************************************/

  while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    set KY0XM110.XMCYMSEL[CYWIDX02] skip, invisible;
    KY0XM110.XROPDEST[CYWIDX02] = " ";
    CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1P

// save printer destination id
Function KY0XS1S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld for jcl setup        ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWFTMSW = "Y";

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0XM110.XMCYMSEL[CYWIDX01] > " ")
      if (CYWREC.CYWFTMSW == "Y")
        CYWREC.CYWFTMSW = "N";
        KY0XW01.KY0XWPID = KY0XM110.XROPDEST[CYWIDX01];
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1SA";
        CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
        set KY0XM110.XMCYMSEL[CYWIDX01] cursor, bold;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWFTMSW == "Y")
    if (KY0XM110.KY0XMSPR > " "
     || KY0XM110.KY0XMOPR > " ")
      KY0XS1I(); /* <=== use input printer dest id*/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1SB";
      CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
      set KY0XM110.XMCYMSEL[1] cursor, bold;
    end
    return;
  end

  if (KY0XM110.KY0XMOPR > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1SC";
    CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
    set KY0XM110.KY0XMOPR cursor, bold;
  end

  if (KY0XM110.KY0XMSPR > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1SD";
    CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
    set KY0XM110.KY0XMSPR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1S

// whse edit
Function KY0XS1W()


   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0XM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0XM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0XM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1WA";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0XM110.XWHCD cursor, bold;
    end
  else
    KY0XM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1WB";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0XM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XS1W

// key missing input edits
Function KY0XSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: if print all locations switch eq 'y', exit    ****/
   /* ************************************************************/

  if (KY0XM110.KY0XMALC == "Y")
    return;
  end

  if (KY0XM110.KY0XMALC > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.KY0XMALC cursor, bold;
  end

  if (KY0XM110.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.SL5LOCTN cursor, bold;
  end

  if (KY0XM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.SL4ZONE cursor, bold;
  end

  if (KY0XM110.XARCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.XARCD cursor, bold;
  end

  if (KY0XM110.KY0XMTDT > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1E";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.KY0XMTDT cursor, bold;
  end

  if (KY0XM110.KY0XMFDT > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1E";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0XM110.KY0XMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSA1

// same key edits
Function KY0XSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0XM110.XWHCD != KY0XW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSB1

// key field edits
Function KY0XSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  CYWREC.CYWINDTE = KY0XM110.KY0XMTDT;

  XSCYSVT();
                                   /* <=== validate/xlate date to ccyymmdd*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1D";
    set KY0XM110.KY0XMTDT cursor, bold;
  else
    CYVREC.CYVEDT = CYWREC.CYWWKDTE;
  end

  CYWREC.CYWINDTE = KY0XM110.KY0XMFDT;

  XSCYSVT();
                                   /* <=== validate/xlate date to ccyymmdd*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1E";
    set KY0XM110.KY0XMFDT cursor, bold;
  else
    CYVREC.CYVSDT = CYWREC.CYWWKDTE;
  end

   /* ************************************************************/
   /* *** print all locations switch must be 'y' or 'n'       ****/
   /* *** nonte: if switch = 'y', skip the rest of the edits  ****/
   /* ************************************************************/

  if (KY0XM110.KY0XMALC == "Y")
    return;
  else
    if (KY0XM110.KY0XMALC == "N")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0XM110.KY0XMALC cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if area code in tbl & active: put abbrv. on map     ****/
   /* *** note: area tbl key = whse + area                    ****/
   /* ************************************************************/

  CYWREC.XWHCD = KY0XM110.XWHCD;
  CYWREC.CYWTBLCD = KY0XM110.XARCD;
  if (CYWREC.CYWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1B";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0XM110.XARCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0XM110.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSC1

// key relational edits
Function KY0XSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  XSCYSDC(); /* <=== compare cyvrec dates*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    set KY0XM110.KY0XMTDT bold;
    set KY0XM110.KY0XMFDT cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if print all locations switch is 'y',               ****/
   /* *** all location flds must be blank                     ****/
   /* *** note: exit after must be erased checks              ****/
   /* ************************************************************/

  if (KY0XM110.KY0XMALC == "Y")
    if (KY0XM110.SL5LOCTN > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1A";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0XM110.SL5LOCTN cursor, bold;
    end
    if (KY0XM110.SL4ZONE > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1B";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0XM110.SL4ZONE cursor, bold;
    end
    if (KY0XM110.XARCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1C";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0XM110.XARCD cursor, bold;
    end
    return;
  end

   /* ************************************************************/
   /* *** verify the area/zone combination entered are valid  ****/
   /* *** for this warehouse.                                 ****/
   /* ************************************************************/

  SL4REC.XWHCD = KY0XM110.XWHCD;
  SL4REC.XARCD = KY0XM110.XARCD;
  SL4REC.SL4ZONE = KY0XM110.SL4ZONE;

  TA1REC.TA1LOCAT[2] = "KY0XSD1 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL4I0(); /* <=== obtain zone record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0XM110.XARCD bold;
    set KY0XM110.SL4ZONE cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SD1D";
      CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SD1E";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "SD1F";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SD1G";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** verify that the area/zone/location entered is valid ****/
   /* *** for this warehouse.                                 ****/
   /* ************************************************************/

  SL5REC.XWHCD = KY0XM110.XWHCD;
  SL5REC.XARCD = KY0XM110.XARCD;
  SL5REC.SL4ZONE = KY0XM110.SL4ZONE;
  SL5REC.SL5LOCTN = KY0XM110.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "KY0XSD1 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL5I0(); /* <=== obtain location record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0XM110.XARCD bold;
    set KY0XM110.SL4ZONE bold;
    set KY0XM110.SL5LOCTN cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SD1H";
      CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SD1I";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "SD1J";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.XXXLOCID = "SD1K";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSD1

// save current key value(s)
Function KY0XSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0XM110.XWHCD;

  KY0XW01.XWHCD = KY0XM110.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSF1

// ENTER processing
Function KY0XSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0XS1M(); /* <=== missing whse edit*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ***                        re-setup printers            ****/
   /* ***                        exit for (re)select printer  ****/
   /* ************************************************************/

  KY0XSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    KY0XS1W(); /* <=== whse edit*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
    KY0XS1P(); /* <=== setup printers*/
    if (CYWREC.CYWERRSW == "Y")
      KY0XW01.XWHCD = " ";
      return;
    end
    KY0XSF1(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0XSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check field edits                        ****/
   /* ************************************************************/

  KY0XSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0XSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** save printer selection                              ****/
   /* ************************************************************/

  KY0XS1S(); /* <=== select printer*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  KY0XS1J(); /* <=== setup & submit jcl*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** do not reset the screen but display msg             ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0059; /* <--- print request ok msg*/

  if (KY0XM110.KY0XMALC == "Y")
    KY0XM110.KY0XMALC = "N";
    set KY0XM110.KY0XMALC cursor;
  else
    KY0XM110.SL5LOCTN = " ";
    set KY0XM110.SL5LOCTN cursor;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0XSH1

//*** RECORD=KY0XW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT VERIFICATION
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-09-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0XW01 type basicRecord
  10 KY0XWLK1 KY0XWLK1 ; 
    15 XWHCD XWHCD ; 
  10 KY0XWJOB KY0XWJOB ; 
    15 KY0XWLT1 KY0XWLT1 ; 
    15 CYWUSRID CYWUSRID ; 
    15 KY0XWLT2 KY0XWLT2 ; 
    15 * char(54) ; 
  10 KY0XWOUT KY0XWOUT ; 
    15 KY0XWLT3 KY0XWLT3 ; 
    15 KY0XWPID KY0XWPID ; 
    15 * char(42) ; 
  10 KY0XWINW KY0XWINW ; 
    15 KY0XWLT6 KY0XWLT6 ; 
    15 KY0XWWH6 KY0XWWH6 ; 
    15 KY0XWLT7 KY0XWLT7 ; 
    15 * char(49) ; 
  10 KY0XWIND KY0XWIND ; 
    15 KY0XWLT8 KY0XWLT8 ; 
    15 KY0XWDTE KY0XWDTE ; 
    15 KY0XWLT9 KY0XWLT9 ; 
    15 * char(40) ; 
  10 KY0XWNFY KY0XWNFY ; 
    15 KY0XWLT4 KY0XWLT4 ; 
    15 KY0XWUSR KY0XWUSR ; 
    15 * char(56) ; 
  10 KY0XWLIN KY0XWLIN ; 
    15 KY0XWWH KY0XWWH ; 
    15 KY0XWFDT KY0XWFDT ; 
    15 KY0XWTDT KY0XWTDT ; 
    15 KY0XWALC KY0XWALC ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 * char(51) ; 
  10 KY0XWDB2 KY0XWDB2 ; 
    15 KY0XWLTA KY0XWLTA ; 
    15 KY0XWLTB KY0XWLTB ; 
    15 * char(28) ; 
  10 KY0XW-NOTIFY-LINE KY0XW-NOTIFY-LINE ; 
    15 * char(11) ; 
    15 KY0XW-NOTIFY-LIT KY0XW-NOTIFY-LIT ; 
    15 KY0XW-NOTIFY-USER KY0XW-NOTIFY-USER ; 
    15 * char(54) ; 
  10 KY0XW-PARM-LINE KY0XW-PARM-LINE ; 
    15 KY0XW-PARM-LINE-INFO KY0XW-PARM-LINE-INFO ; 
    15 KY0XW-WHSE-PARM KY0XW-WHSE-PARM ; 
    15 KY0XW-PARM-APOST KY0XW-PARM-APOST ; 
    15 * char(56) ; 
end // end KY0XW01

DataItem KY0XW-NOTIFY-LINE char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-NOTIFY-LIT char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-NOTIFY-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-PARM-APOST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-PARM-LINE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-PARM-LINE-INFO char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0XW-WHSE-PARM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print all locations switch
DataItem KY0XWALC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort date include statement
DataItem KY0XWDB2 char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// work date
DataItem KY0XWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// from date
DataItem KY0XWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// sort date include statement
DataItem KY0XWIND char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sort whse include statement
DataItem KY0XWINW char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// job card jcl line
DataItem KY0XWJOB char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// instream jcl data line
DataItem KY0XWLIN char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem KY0XWLK1 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 1
DataItem KY0XWLT1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 2
DataItem KY0XWLT2 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 3
DataItem KY0XWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 4
DataItem KY0XWLT4 char(18)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 6
DataItem KY0XWLT6 char(27)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 7
DataItem KY0XWLT7 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 8
DataItem KY0XWLT8 char(31)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 9
DataItem KY0XWLT9 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal a
DataItem KY0XWLTA char(20)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal b
DataItem KY0XWLTB char(32)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// notify userid
DataItem KY0XWNFY char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// output (dest id) line
DataItem KY0XWOUT char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// remote printer id
DataItem KY0XWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem KY0XWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// user id for job name
DataItem KY0XWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work warehouse code
DataItem KY0XWWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work whse code for lit 6
DataItem KY0XWWH6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

