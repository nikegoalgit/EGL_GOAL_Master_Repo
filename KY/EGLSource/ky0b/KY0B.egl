package ky0b;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0B ****
// ************************************************************
// 
//                 CYCLE COUNT
//           CONTROL TABLE MAINTENANCE
//           =========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to update the cycle
//           count control table.
// 
//           notes:
//             1) on entry of the applicaiton if the warehouse
//                is passed then the existing values for that
//                warehouse in the table will be displayed
//                and the cursor will be set to the first field
//                on the map (min nbr days btwn cnt cmpltns)
//             2) if the warehouse is not passed then the user
//                will be required to enter the warehouse (all
//                other fields will be protected.  then the
//                existing values will be obtained from the
//                control table.
//             3) after the values are displayed the cursor
//                will be set to the first field and the
//                user will be allowed to change any or all
//                the fields on the screen.
//             4) EDITS: At least one of the fields must be
//                changed for an update to occur.  The 'bulk
//                blind counts only' field must be 'Y' or 'N'.
//                The starting manual document number must be
//                less than or equal to the ending manual
//                document number.
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/10/88  G. Amen     Created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  07/30/91  scleme      converted CY0B to KY0B
// 00  01/15/92  jwood       chgs to init all w/s recs
// 00  12/01/92  BGILDE      chgs
// 00  10/11/97  Kheina      Regen for tble chge. Add new
//                           column to Cy9rec.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO2470    access cycle count control table.
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY5REC CY5REC; // record
  CY7REC CY7REC; // record
  CY9REC CY9REC; // record
  CYRREC CYRREC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0BW01 KY0BW01; // record
  SL4REC SL4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA4REC TA4REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XARTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KY0BM.KY0BM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0B110: KY0B110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/


    if (CYWREC.CYWERRSW == "Y")
      goto KY0B120; /* <=== converse map due to error*/
    else
      CYWREC.XXXLOCID = "140 ";
      goto KY0B140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0B120: KY0B120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0B120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0B110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto KY0B110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0B120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0B140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0B120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0B140: KY0B140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      CYWREC.CYWMSGNO = 0;
      goto KY0B140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0B110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf14)
      goto KY0B110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0B120;
      end
      goto KY0B140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      CYWREC.XXXLOCID = "140 ";
      goto KY0B140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0B140; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0B140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0B

// one time initializations
Function KY0B110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segemented transaction id                  ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0BM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYVREC empty; /**/
  set CYWREC empty; /* common working storage fields*/
  set CY5REC empty; /**/
  set CY7REC empty; /**/
  set CY9REC empty; /**/
  set CYRREC empty; /**/
  set KY0BW01 empty; /* appl. working storage area*/
  set SL4REC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA4REC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/05/88  J. Brady      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0BM110";
  CYWREC.XXXTITLE = "DOCUMENT REQUEST BY LOCATION";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0B"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0B110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0BM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWSEXSW = "N"; /* special exit switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/
  KY0BW01.KY0BWTRP = 32; /* total ranges possible*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0BM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0BM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0BM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0BM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0BM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0BM110.XWHCD cursor;
  end


   /* ************************************************************/
   /* *** attempt first pass processing                       ****/
   /* *** re: load table data if valid warehouse              ****/
   /* ************************************************************/

  KY0BSH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0B110

// converse & control key entry
Function KY0B120()


   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** protect data fields on first pass                   ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0BW01.KY0BWTRP)
    set KY0BM110.XARCD[CYWIDX01] skip, invisible;
    set KY0BM110.SL4ZONE[CYWIDX01] skip, invisible;
    set KY0BM110.CY5SLOC[CYWIDX01] skip, invisible;
    set KY0BM110.CY5ELOC[CYWIDX01] skip, invisible;

    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0BM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0BM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0A";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0BM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0BM110.CATOAP;
    COMMAREA.CAITEM = KY0BM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0BM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0BM110.VAGen_EZEMSG = " ";
  set KY0BM110.CATOAP initialAttributes;
  set KY0BM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0BM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0BW01.KY0BWTRP) /* total ranges possible*/
    set KY0BM110.XARCD[CYWIDX01] initialAttributes;
    set KY0BM110.SL4ZONE[CYWIDX01] initialAttributes;
    set KY0BM110.CY5SLOC[CYWIDX01] initialAttributes;
    set KY0BM110.CY5ELOC[CYWIDX01] initialAttributes;

    CYWIDX01 = CYWIDX01 + 1;

  end
   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0BM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0BM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0BSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0C";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120H";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0B120

// converse & control data entry
Function KY0B140()


   /* ************************************************************/
   /* *** if no error cursor should be on first area field    ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    set KY0BM110.XARCD[1] cursor;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0BM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0BM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0A";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO cycle count MAIN MENU                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0BM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0BM110.CATOAP;
    COMMAREA.CAITEM = KY0BM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0BM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0BM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0BM110.CATOAP initialAttributes;
  set KY0BM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0BM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0BW01.KY0BWTRP) /* total ranges possible*/
    set KY0BM110.XARCD[CYWIDX01] initialAttributes;
    set KY0BM110.SL4ZONE[CYWIDX01] initialAttributes;
    set KY0BM110.CY5SLOC[CYWIDX01] initialAttributes;
    set KY0BM110.CY5ELOC[CYWIDX01] initialAttributes;

    CYWIDX01 = CYWIDX01 + 1;

  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0BM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0BM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0BSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0BSF1(); /* <=== save key values*/
      KY0BST1(); /* <=== reset screen (empty)*/
      KY0BSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0BSR1(); /* <=== data entry edits*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0BSU1(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      KY0BST1(); /* <=== reset screen (empty)*/
      if (CYWREC.CYWSKYSW == "N")
        KY0BSH1(); /* <=== enter processing*/
      end
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
     /* ************************************************************/
     /* *** note: ky0usq1 not used re: able to re-edit immediately**/
     /* *** note: also succesful flow will stay in the 140 level****/
     /* ************************************************************/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0C";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0BM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140H";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0B140

// verify start & end area/zones
Function KY0BS1A()

   /* ************************************************************/
   /* *** verify the starting and ending area/zones           ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0BS1A ";

  SL4REC.XWHCD = KY0BM110.XWHCD;
  SL4REC.XARCD = KY0BM110.XARCD[CYWIDX01];
  SL4REC.SL4ZONE = KY0BM110.SL4ZONE[CYWIDX01];

  XSCYSV4(); /* verify area/zone*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    set KY0BM110.XARCD[CYWIDX01] cursor, bold;
    set KY0BM110.SL4ZONE[CYWIDX01] bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BS1A

// verify starting area/zone/loc
Function KY0BS1B()

   /* ************************************************************/
   /* *** verify the starting area,zone,location data         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0BS1B ";

  CY7REC.XWHCD = KY0BM110.XWHCD;
  CYRREC.CYRFAREA = KY0BM110.XARCD[CYWIDX01];
  CYRREC.CYRLAREA = KY0BM110.XARCD[CYWIDX01];
  CYRREC.CYR-FIRST-YLTCD = "00";
  CYRREC.CYR-LAST-YLTCD = "99";
  CYRREC.CYRFZONE = KY0BM110.SL4ZONE[CYWIDX01];
  CYRREC.CYRLZONE = KY0BM110.SL4ZONE[CYWIDX01];
  CYRREC.CYRFLOC = KY0BM110.CY5SLOC[CYWIDX01];
  CYRREC.CYRLLOC = KY0BM110.CY5SLOC[CYWIDX01];

  XSCY7T1(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100
   || CYRREC.CYRRCNT == +0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1BA";
    CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
    set KY0BM110.XARCD[CYWIDX01] cursor, bold;
    set KY0BM110.SL4ZONE[CYWIDX01] bold;
    set KY0BM110.CY5SLOC[CYWIDX01] bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.XXXLOCID = "S1BB";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.XXXLOCID = "S1BC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BS1B

// verify ending area/zone/loc
Function KY0BS1C()


   /* ************************************************************/
   /* *** verify that the ending area/zone/location exists    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0BS1C ";

  CY7REC.XWHCD = KY0BM110.XWHCD;
  CYRREC.CYRFAREA = KY0BM110.XARCD[CYWIDX01];
  CYRREC.CYRLAREA = KY0BM110.XARCD[CYWIDX01];
  CYRREC.CYR-FIRST-YLTCD = "00";
  CYRREC.CYR-LAST-YLTCD = "99";
  CYRREC.CYRFZONE = KY0BM110.SL4ZONE[CYWIDX01];
  CYRREC.CYRLZONE = KY0BM110.SL4ZONE[CYWIDX01];
  CYRREC.CYRFLOC = KY0BM110.CY5ELOC[CYWIDX01];
  CYRREC.CYRLLOC = KY0BM110.CY5ELOC[CYWIDX01];

  XSCY7T1(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100
   || CYRREC.CYRRCNT == +0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1CA";
    CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
    set KY0BM110.XARCD[CYWIDX01] cursor, bold;
    set KY0BM110.SL4ZONE[CYWIDX01] bold;
    set KY0BM110.CY5ELOC[CYWIDX01] bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.XXXLOCID = "S1CB";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.XXXLOCID = "S1CC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BS1C

// obtain & verify count data
Function KY0BS1D()

   /* ***************************************************/
   /* *** obtain total number of locations involved  ****/
   /* *** in update range.                           ****/
   /* *** note: if same, cnt = 1 & skip exec of cnt  ****/
   /* ***************************************************/

  if (KY0BM110.CY5SLOC[CYWIDX01] == KY0BM110.CY5ELOC[CYWIDX01])
    CYRREC.CYRRCNT = 1;
    KY0BM110.KY0BMCNT[CYWIDX01] = 1;
  else
    set CY7REC empty;
    set CYRREC empty;
    CY7REC.XWHCD = KY0BM110.XWHCD;
    CYRREC.CYRFAREA = KY0BM110.XARCD[CYWIDX01];
    CYRREC.CYR-FIRST-YLTCD = "00";
    CYRREC.CYR-LAST-YLTCD = "99";
    CYRREC.CYRFZONE = KY0BM110.SL4ZONE[CYWIDX01];
    CYRREC.CYRFLOC = KY0BM110.CY5SLOC[CYWIDX01];
    CYRREC.CYRLAREA = KY0BM110.XARCD[CYWIDX01];
    CYRREC.CYRLZONE = KY0BM110.SL4ZONE[CYWIDX01];
    CYRREC.CYRLLOC = KY0BM110.CY5ELOC[CYWIDX01];

    XSCY7T1(); /* count locations*/

    if (SQLCA.VAGen_SQLCODE == 0)
      KY0BM110.KY0BMCNT[CYWIDX01] = CYRREC.CYRRCNT;
    else
      CYWREC.CYWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +911)
        CYWREC.XXXLOCID = "S1DA";
        CYWREC.CYWMSGNO = 0031; /* not available*/
        return;
      end
      CYWREC.XXXLOCID = "S1DB";
      CYWREC.CYWMSGNO = 0001; /* severe error*/
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BS1D

// key missing input edits
Function KY0BSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0BM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0BM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSA1

// same key edits
Function KY0BSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0BM110.XWHCD != KY0BW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end


  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSB1

// key field edits
Function KY0BSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0BM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0BM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0BM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0BM110.XWHCD cursor, bold;
    end
  else
    KY0BM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1B";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0BM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSC1

// key relational edits
Function KY0BSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSD1

// key obtain table data
Function KY0BSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain currently requested location ranges          ****/
   /* ************************************************************/

  CY5REC.XWHCD = KY0BM110.XWHCD;
  CY5REC.YDNCD = "03";

  XSCY5S1(); /* select set of all location requests*/

  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SE1D";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end
  if (SQLCA.VAGen_SQLCODE != +0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SE1E";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  CYWIDX01 = 0;
  while (SQLCA.VAGen_SQLCODE == 0)
    CYWIDX01 = CYWIDX01 + 1;
    KY0BM110.XARCD[CYWIDX01] = CY5REC.CY5SAREA;
    KY0BM110.SL4ZONE[CYWIDX01] = CY5REC.CY5SZONE;
    KY0BM110.CY5SLOC[CYWIDX01] = CY5REC.CY5SLOC;
    KY0BM110.CY5ELOC[CYWIDX01] = CY5REC.CY5ELOC;

    XSCY5F1(); /* fetch next request record*/

  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SE1F";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE != +0
   && SQLCA.VAGen_SQLCODE != +100)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SE1G";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSE1

// save current key value(s)
Function KY0BSF1()


   /* ************************************************************/
   /* *** save current map values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0BM110.XWHCD;

  KY0BW01.XWHCD = KY0BM110.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSF1

// setup map key fields
Function KY0BSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0BM110.XWHCD = KY0BW01.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSG1

// ENTER processing
Function KY0BSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0BSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  KY0BSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0BSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0BSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0BSF1(); /* <=== save current key value(s)*/
    KY0BST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0BSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSH1

// data missing fld edits
Function KY0BSN1()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: these not executed if delete                  ****/
   /* ************************************************************/

  CYWREC.CYWSEXSW = "N"; /* to chk for any input at all*/

  CYWIDX01 = KY0BW01.KY0BWTRP;

  while (CYWIDX01 >= 1)

    KY0BM110.KY0BMCNT[CYWIDX01] = 0; /* reset count field*/

    if (KY0BM110.XARCD[CYWIDX01] != "  "
     || KY0BM110.SL4ZONE[CYWIDX01] != "  "
     || KY0BM110.CY5SLOC[CYWIDX01] != "      "
     || KY0BM110.CY5ELOC[CYWIDX01] != "      ")
      if (KY0BM110.CY5SLOC[CYWIDX01] == "      ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SN1A";
        CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
        set KY0BM110.CY5SLOC[CYWIDX01] cursor, bold;
      end
      if (KY0BM110.SL4ZONE[CYWIDX01] == "  ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SN1B";
        CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
        set KY0BM110.SL4ZONE[CYWIDX01] cursor, bold;
      end
      if (KY0BM110.XARCD[CYWIDX01] == "  ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SN1C";
        CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
        set KY0BM110.XARCD[CYWIDX01] cursor, bold;
      end
      if (KY0BM110.XARCD[CYWIDX01] == "03" /* areas 3 & 4 not allowed*/
       || KY0BM110.XARCD[CYWIDX01] == "04")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SN1D";
        CYWREC.CYWMSGNO = 0097; /* <--- areas 3 & 4 not allowed msg*/
        set KY0BM110.XARCD[CYWIDX01] cursor, bold;
      end
    end

    if (KY0BM110.XARCD[CYWIDX01] != "  ")
      CYWREC.CYWSEXSW = "Y"; /* yes... there is data*/
    end

    CYWIDX01 = CYWIDX01 - 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSN1

// data fld edits
Function KY0BSO1()


   /* ************************************************************/
   /* *** edit individual fields for proper data              ****/
   /* ************************************************************/

  CYWIDX01 = KY0BW01.KY0BWTRP; /* tot ranges possible*/

  CYWREC.XWHCD = KY0BM110.XWHCD;

  while (CYWIDX01 >= 1)
    if (KY0BM110.XARCD[CYWIDX01] != "  ")

      /* *** verify area ****/

      CYWREC.CYWTBLCD = KY0BM110.XARCD[CYWIDX01];
      if (CYWREC.CYWTBLKY in XARTBL.XARKEY)
        if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          /* ** next sentence ***/
        else
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "SO1B";
          CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
          set KY0BM110.XARCD[CYWIDX01] cursor, bold;
        end
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SO1C";
        CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
        set KY0BM110.XARCD[CYWIDX01] cursor, bold;
      end
    end

    CYWIDX01 = CYWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BSO1

// data relational edits
Function KY0BSP1()


   /* ************************************************************/
   /* *** relational fld edits                                ****/
   /* *** note: exit immediately on error                     ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0BW01.KY0BWTRP)
    if (KY0BM110.XARCD[CYWIDX01] != "  ")

      if (KY0BM110.CY5ELOC[CYWIDX01] == "      ")
        KY0BM110.CY5ELOC[CYWIDX01] = KY0BM110.CY5SLOC[CYWIDX01];
      end

      if (KY0BM110.CY5SLOC[CYWIDX01] > KY0BM110.CY5ELOC[CYWIDX01])
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SP1A";
        CYWREC.CYWMSGNO = 0028; /* range error*/
        set KY0BM110.CY5SLOC[CYWIDX01] cursor, bold;
        set KY0BM110.CY5ELOC[CYWIDX01] bold;
      end

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0BS1A(); /* verify area/zones*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0BS1B(); /* verify starting area/zone/loc*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      if (KY0BM110.CY5SLOC[CYWIDX01] != KY0BM110.CY5ELOC[CYWIDX01])
        KY0BS1C(); /* verify ending area/zone/loc*/
        if (CYWREC.CYWERRSW == "Y")
          return;
        end

      end

      KY0BS1D(); /* obtain and verify range count*/

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

    end
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0BSP1

// data entry edits
Function KY0BSR1()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  KY0BSN1(); /* <=== data missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  KY0BSO1(); /* <=== data field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  KY0BSP1(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSR1

// reset screen (empty)
Function KY0BST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0BM110 empty; /* resets entire screen*/

  KY0BSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0BM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0BM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0BM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0BM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0BW01 empty; /* appl. working storage area*/

  KY0BW01.KY0BWTRP = 32;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BST1

// update database
Function KY0BSU1()


   /* ************************************************************/
   /* *** update cycle count control table                    ****/
   /* *** note: read for update w/data canNOT be used         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0BSU1 ";

   /* *** delete currently existing location requests ***/

  CY5REC.XWHCD = KY0BM110.XWHCD;
  CY5REC.YDNCD = "03";

  XSCY5D1(); /* delete all loc req tbl entries*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.CYWSKYSW = "N";
    CYWREC.XXXLOCID = "SU1A";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100) /* <=== SETINQ EOF*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SU1B";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (CYWREC.CYWSEXSW == "N") /* locations on screen*/
    return;
  end

   /* *** put new location ranges to the request db ****/

  CY5REC.XWHCD = KY0BM110.XWHCD;
  CY5REC.YDNCD = "03";

  CYWIDX01 = 1;

  while (CYWIDX01 <= KY0BW01.KY0BWTRP)
    if (KY0BM110.KY0BMCNT[CYWIDX01] > 0)
      CY5REC.CY5SAREA = KY0BM110.XARCD[CYWIDX01];
      CY5REC.CY5SZONE = KY0BM110.SL4ZONE[CYWIDX01];
      CY5REC.CY5SLOC = KY0BM110.CY5SLOC[CYWIDX01];
      CY5REC.CY5EAREA = KY0BM110.XARCD[CYWIDX01];
      CY5REC.CY5EZONE = KY0BM110.SL4ZONE[CYWIDX01];
      CY5REC.CY5ELOC = KY0BM110.CY5ELOC[CYWIDX01];

      XSCY5A0(); /* add new record*/

      if (SQLCA.VAGen_SQLCODE == -803)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SU1C";
        CYWREC.CYWMSGNO = 0045; /* <--- record exists msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SU1D";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SU1E";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0BSU1

// close : req loc.s   : 1
Function XSCY5C1()


   /* ************************************************************/
   /* *** close select set of:  requested locations           ****/
   /* *** using the std module:  IO2440                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "C1";

  call "IO2440" (CYVREC, SQLCA, CY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSCY5C1 ";
  TA1REC.TA1LOCAT[1] = "IO2440  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQLOC01";
  TA1REC.TA1TBLKE = CY5REC.CY5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY5C1

// delete : req loc.s   : 0
Function XSCY5D1()


   /* ************************************************************/
   /* *** delete set of rows in:  requested locations         ****/
   /* *** using the std module:  IO2440                       ****/
   /* *** note: use cyxrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "D ";

  call "IO2440" (CYVREC, SQLCA, CY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY5D0 ";
  TA1REC.TA1LOCAT[1] = "IO2440  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQLOC01";
  TA1REC.TA1TBLKE = CY5REC.CY5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY5D1

// fetch : req loc.s   : 1
Function XSCY5F1()


   /* ************************************************************/
   /* *** fetch next row from:  requested locations           ****/
   /* *** using the std module:  IO2440                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "N1";

  call "IO2440" (CYVREC, SQLCA, CY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSCY5C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSCY5F1 ";
  TA1REC.TA1LOCAT[1] = "IO2440  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQLOC01";
  TA1REC.TA1TBLKE = CY5REC.CY5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY5F1

// setinq : req loc.s   : 1
Function XSCY5S1()


   /* ************************************************************/
   /* *** select set of rows from:  requested locations       ****/
   /* *** using the std module:  IO2440                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "S1";

  call "IO2440" (CYVREC, SQLCA, CY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSCY5S1 ";
    TA1REC.TA1LOCAT[1] = "IO2440  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DCYCLE  ";
    TA1REC.TA1TBLVU = "VRQLOC01";
    TA1REC.TA1TBLKE = CY5REC.CY5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSCY5F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY5S1

// count : cnt cy loc.s : 1
Function XSCY7T1()


   /* ************************************************************/
   /* *** count unique rows from:  cycle count location data  ****/
   /* *** using the std module:  IO2490                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYRREC.CYRFNC = "T ";

  call "IO2490" (CYRREC, SQLCA, CY7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY7T1 ";
  TA1REC.TA1LOCAT[1] = "IO2490  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VCYLOC01";
  TA1REC.TA1TBLKE = CY7REC.CY7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY7T1

// validate area/zone
Function XSCYSV4()


   /* ************************************************************/
   /* *** since valid area, area/zone record must exist       ****/
   /* ************************************************************/

  CYWREC.CYWVERSW = "N";

  XSSL4I0(); /* <=== select area/zone*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SV4A";
      CYWREC.CYWMSGNO = 0078; /* <--- invalid a/zone msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SV4B";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "SV4C";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.XXXLOCID = "SV4D";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCYSV4

//*** RECORD=KY0BW01 ****
// ************************************************************
// 
//           CYCLE COUNT CONTROL TABLE MAINTENANCE
//           =====================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-06-88  G. Amen      created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0BW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 KY0BWTRP KY0BWTRP ; 
  10 KY0BWAFL KY0BWAFL [32] ; 
end // end KY0BW01

// bulk/processing area flag
DataItem KY0BWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot # ranges possible
DataItem KY0BWTRP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

