package ky0y;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0Y ****
// ************************************************************
// 
//           CYCLE COUNT
//           VARIANCE HISTORY REPORT REQUEST
//           ===============================
//           by PRODUCT
// 
// ************************************************************
// 
// OVERVIEW: This application will submit JCL immediately for
//           execution.  The report will be routed to the
//           online selected printer.
// 
//           notes:
//             1) the online CICS userid will be used as part
//                of the job card
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/19/88  Ward Jones  created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 00  10/08/90  mmoreh      tbl changes
// 00  07/31/91  scleme      convert CY0Y to KY0Y
// 00  12/07/92  JCAMPB      CYCLE COUNT CHANGES
// 00  01/12/93  JCAMPB      fix error in ky0ys1j
// 00  10/14/96  OENFIE      add a warehouse parm on the
//                           jcl which will be used for the
//                           suffix of the dsnames.  Each whse
//                           will now have it's own files.
// 00  12/19/96  SLEWIS      fix bug add missing app
// 00  10/30/97  ovazqu      Recompile with production JCL
//                           (see KY0YS1J sgroups).
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CYUREC CYUREC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0YW01 KY0YW01; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  UT1REC UT1REC; // record
  X2CREC X2CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSLTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use KY0YM.KY0YM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0Y110: KY0Y110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "120 "; /* error id location id*/
    goto KY0Y120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0Y120: KY0Y120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0Y120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0Y110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0Y120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "120 ";
      goto KY0Y120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0Y120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0Y

// one time initializations
Function KY0Y110()

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented trans id              ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0YM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYVREC empty; /* common io mod pass fields*/
  set CYWREC empty; /* common working storage fields*/
  set KY0YW01 empty; /* appl. working storage area*/
  set SL4REC empty; /* s.l. area/zone record*/
  set SL5REC empty; /* s.l. location record*/
  set SL6REC empty; /* s.l. prod/loc record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/19/88  W. Jones      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0YM110";
  CYWREC.XXXTITLE = "CC VARIANCE HISTORY RPT BY PRODUCT";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0Y"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0Y110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0YM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0YM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0YM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0YM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0YM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0YM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0YM110.KY0YMAPR = "N";

  CYWREC.CYWWKDTE = X2CREC.X2CCURSD;
  XSCYSXT(); /* <=== convert date format*/
  KY0YM110.KY0YMTDT = CYWREC.CYWINDTE;

  CYWREC.CYWCTR01 = -7;
  XSCYSAD(); /* <=== add/sub days to current dt*/
  XSCYSXT(); /* <=== convert date format*/
  KY0YM110.KY0YMFDT = CYWREC.CYWINDTE;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 8;

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0YM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0YM110.XWHCD cursor;
  end

  XSCYSID(); /* get cics user id*/

  if (CYWREC.CYWERRSW == "Y")
    exit stack;
  end

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  setup printers                     ****/
   /* ***                  save keys/whse                     ****/
   /* ************************************************************/

  if (KY0YM110.XWHCD > " ")
    KY0YS1W(); /* <=== whse edit*/
    if (CYWREC.CYWERRSW == "Y")
      CYWREC.XXXLOCID = "110A";
      exit stack;
    end
    KY0YS1P(); /* <=== setup printers*/
    if (CYWREC.CYWERRSW == "Y")
      KY0YW01.XWHCD = " ";
      CYWREC.XXXLOCID = "110B";
      exit stack;
    end
    KY0YSF1(); /* <=== save key values*/
  else
    KY0YS1M(); /* <=== missing whse edit*/
    CYWREC.XXXLOCID = "110C";
    CYWREC.CYWIDX02 = 1;
    while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
      set KY0YM110.XMCYMSEL[CYWIDX02] skip, invisible;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
    end
    set KY0YM110.KY0YMFDT skip, invisible;
    set KY0YM110.KY0YMTDT skip, invisible;
    set KY0YM110.KY0YMSPR skip, invisible;
    set KY0YM110.KY0YMOPR skip, invisible;
    set KY0YM110.KY0YMAPR skip, invisible;
    set KY0YM110.XGPCD skip, invisible;
    set KY0YM110.SY1STNBR skip, invisible;
    set KY0YM110.SY2CLRID skip, invisible;
    set KY0YM110.XDMCD skip, invisible;
    set KY0YM110.XQACD skip, invisible;
    set KY0YM110.XSDCD skip, invisible;
    set KY0YM110.XSLCD skip, invisible;
    set KY0YM110.XPGCD skip, invisible;
    set KY0YM110.XUMCD skip, invisible;
    set KY0YM110.XOWCD skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0Y110

// converse & control key entry
Function KY0Y120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0YM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0YM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0W";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0YM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0YM110.CATOAP;
    COMMAREA.CAITEM = KY0YM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0YM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0YM110.VAGen_EZEMSG = " ";
  set KY0YM110.CATOAP initialAttributes;
  set KY0YM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0YM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set KY0YM110.KY0YMFDT initialAttributes;
  set KY0YM110.KY0YMTDT initialAttributes;
  set KY0YM110.KY0YMAPR initialAttributes;
  set KY0YM110.XGPCD initialAttributes;
  set KY0YM110.SY1STNBR initialAttributes;
  set KY0YM110.SY2CLRID initialAttributes;
  set KY0YM110.XDMCD initialAttributes;
  set KY0YM110.XQACD initialAttributes;
  set KY0YM110.XSDCD initialAttributes;
  set KY0YM110.XSLCD initialAttributes;
  set KY0YM110.XPGCD initialAttributes;
  set KY0YM110.XUMCD initialAttributes;
  set KY0YM110.XOWCD initialAttributes;

  CYWREC.CYWIDX02 = 1;
  while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    if (KY0YM110.XROPDEST[CYWIDX02] > " ")
      set KY0YM110.XMCYMSEL[CYWIDX02] initialAttributes;
    end
    CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
  end

  set KY0YM110.KY0YMSPR initialAttributes;
  set KY0YM110.KY0YMOPR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0YM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0YM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0YSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0X";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0Y";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0YM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0Y120

// select pk-style
Function KY0YS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0YS-CALL-IO1810";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS-SEL-VPKSTY01

// use input printer dest id
Function KY0YS1I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. id are input    ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. id in table                              ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (KY0YM110.KY0YMOPR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IA";
    CYWREC.CYWMSGNO = 0009; /* <--- requiered field msg*/
    set KY0YM110.KY0YMOPR cursor, bold;
  end

  if (KY0YM110.KY0YMSPR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IB";
    CYWREC.CYWMSGNO = 0009; /* <--- requiered field msg*/
    set KY0YM110.KY0YMSPR cursor, bold;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  if (KY0YM110.KY0YMOPR in XROTBL.XROPDEST)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0YW01.KY0YWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1IC";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.KY0YMOPR cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1ID";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.KY0YMOPR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS1I

// setup & submit jcl
Function KY0YS1J()
   /* ***** test jcl only - must stay in cyjcl - do not install******/
   /* ************************************************************/
   /* THIS SHOULD NOT BE MOVED TO PRODUCTION. THIS IS USED IN*/
   /* TESTING ONLY SINCE THE LOADLIB CONCATENATION IS DIFFERENT*/
   /* and the jobparm proclib is pointing to test.  There is the*/
   /* production version with changes in the KYMSL called:*/
   /* KY0YS1JP.  This is the version to be moved to production*/
   /* after testing is done.*/
   /* ************************************************************/

   /* ************************************************************/
   /* *** create the production jcl in the cyurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set CYUREC empty;

  CYUREC.CYUCOUNT = 1;

  KY0YW01.KY0YWLT1 = "//CY";
  KY0YW01.CYWUSRID = CYWREC.CYWUSRID;
  KY0YW01.KY0YWLT2 = " JOB  (CY,MUR2),";
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0YW01.KY0YWJOB;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         'CC VAR HIST/LOC  ',         ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         CLASS=A,                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         MSGCLASS=T,                  ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         NOTIFY=OENFIE                ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//**************************************";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** THIS JOB CREATES CYCLE COUNT     **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** VARIANCE HISTORY REPORTS         **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** BY PRODUCT                       **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//** VIA ONLINE SUBMITTED REQUESTS    **";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//**************************************";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "/*JOBPARM PROCLIB=TEST                 ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
   /* CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;*/
   /* MOVE '/*OUTPUT CY32 FORMS=CY32,DEST=' TO KY0YW01.KY0YWLT3;*/
   /* note: printer id has been saved in this lines printer fld*/
   /* MOVE KY0YW01.KY0YWOUT TO CYUREC.CYUJCLIN(CYUCOUNT);*/

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//JOBLIB   DD DSN=TEST.COB2.LOADLIB,DISP=SHR";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=TEST.PSDO.COB2.LOADLIB,DISP=SHR";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.COB2.LOADLIB,DISP=SHR   ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=TEST.PSDO.BRDG.LOADLIB,DISP=SHR   ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.BRDG.LOADLIB,DISP=SHR   ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=TEST.PSDO.LOADLIB,DISP=SHR        ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=PROD.LOADLIB,DISP=SHR        ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//         DD DSN=MVS.DSNT.DSNLOAD,DISP=SHR        ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                     ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//S0005   EXEC TESTENC                  ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//S0010   EXEC CY5801,                  ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//             LEVEL='TEST.',           ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//             TYPE='T.',               ";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//             DISK=TEST,               ";
  KY0YW-PARM-LINE = "  "; /* initialize parm line*/
  KY0YW-PARM-LINE-INFO = "//             WHSE='";
  KY0YW-WHSE-PARM = KY0YM110.XWHCD;
  KY0YW-PARM-APOST = "'";
  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0YW-PARM-LINE;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                 ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//P0030.SYSIN   DD  *                   ";
   /* ************************************************************/
   /* *** setup the whse; prod; dates & all prod switch       ****/
   /* ************************************************************/

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  KY0YW01.KY0YWWH = KY0YM110.XWHCD;
  KY0YW01.KY0YWFDT = CYVREC.CYVSDT;
  KY0YW01.KY0YWTDT = CYVREC.CYVEDT;
  KY0YW01.KY0YWAPR = KY0YM110.KY0YMAPR;
  KY0YW01.XGPCD = KY0YM110.XGPCD;
  KY0YW01.SY1STNBR = KY0YM110.SY1STNBR;
  KY0YW01.SY2CLRID = KY0YM110.SY2CLRID;
  KY0YW01.XDMCD = KY0YM110.XDMCD;
  KY0YW01.XQACD = KY0YM110.XQACD;
  KY0YW01.XSDCD = KY0YM110.XSDCD;
  KY0YW01.XSLCD = KY0YM110.XSLCD;
  KY0YW01.XPGCD = KY0YM110.XPGCD;
  KY0YW01.XUMCD = KY0YM110.XUMCD;
  KY0YW01.XOWCD = KY0YM110.XOWCD;
  CYUREC.CYUJCLIN[CYUCOUNT] = KY0YW01.KY0YWLIN;

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "/*                                  ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//*                                 ";

  CYUREC.CYUCOUNT = CYUREC.CYUCOUNT + 1;
  CYUREC.CYUJCLIN[CYUCOUNT] = "//******* END OF JOB STREAM ********";

   /* ************************************************************/
   /* *** note: final increment of slucount leaves the        ****/
   /* *** correct value in this field for ta0070              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** submit the jcl created & saved in the slurec        ****/
   /* *** via ta0070                                          ****/
   /* ************************************************************/

  try
    call "TA0070" (CYUREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (CYUREC.CYURETRN != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1JA";
    CYWREC.CYWMSGNO = 0058; /* <--- PRINT REQUEST FAILED*/
    set KY0YM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end KY0YS1J

// missing whse edit
Function KY0YS1M()


   /* ************************************************************/
   /* *** setup error if whse missing                         ****/
   /* ************************************************************/

  if (KY0YM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1MA";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS1M

// setup printers
Function KY0YS1P()


   /* ************************************************************/
   /* *** setup selectable printers per whse                  ****/
   /* *** note: make unused printer flds askip,dark           ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWIDX02 = 1;

  while (XROTBL.XROCD[CYWIDX01] != "9999"
   && CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    if (XROTBL.XWHCD1[CYWIDX01] == KY0YM110.XWHCD
     || XROTBL.XWHCD2[CYWIDX01] == KY0YM110.XWHCD
     || XROTBL.XWHCD3[CYWIDX01] == KY0YM110.XWHCD)
      if (XROTBL.XXXSTAT[CYWIDX01] == "A")
        KY0YM110.XROPDEST[CYWIDX02] = XROTBL.XROPDEST[CYWIDX01];
        set KY0YM110.XMCYMSEL[CYWIDX02] initialAttributes;
        CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWIDX02 == 1)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1PA";
    CYWREC.CYWMSGNO = 0054; /* <--- no printer assigned*/
  end

   /* ************************************************************/
   /* *** darken remaining printer fields                     ****/
   /* ************************************************************/

  while (CYWREC.CYWIDX02 <= CYWREC.CYWLINPP)
    set KY0YM110.XMCYMSEL[CYWIDX02] skip, invisible;
    KY0YM110.XROPDEST[CYWIDX02] = " ";
    CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS1P

// save printer destination id
Function KY0YS1S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld for jcl setup        ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWFTMSW = "Y";

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0YM110.XMCYMSEL[CYWIDX01] > " ")
      if (CYWREC.CYWFTMSW == "Y")
        CYWREC.CYWFTMSW = "N";
        KY0YW01.KY0YWPID = KY0YM110.XROPDEST[CYWIDX01];
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1SA";
        CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
        set KY0YM110.XMCYMSEL[CYWIDX01] cursor, bold;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWFTMSW == "Y")
    if (KY0YM110.KY0YMSPR > " "
     || KY0YM110.KY0YMOPR > " ")
      KY0YS1I(); /* <=== use input printer dest id*/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1SB";
      CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
      set KY0YM110.XMCYMSEL[1] cursor, bold;
    end
    return;
  end

  if (KY0YM110.KY0YMOPR > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1SC";
    CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
    set KY0YM110.KY0YMOPR cursor, bold;
  end

  if (KY0YM110.KY0YMSPR > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1SD";
    CYWREC.CYWMSGNO = 0073; /* <--- can't be entered now*/
    set KY0YM110.KY0YMSPR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS1S

// whse edit
Function KY0YS1W()


   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0YM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0YM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      CYWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    else
      KY0YM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1WA";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XWHCD cursor, bold;
    end
  else
    KY0YM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1WB";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YS1W

// key missing input edits
Function KY0YSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: if print all products switch = 'y', exit      ****/
   /* ************************************************************/

  if (KY0YM110.KY0YMAPR == "Y")
    return;
  end

  if (KY0YM110.KY0YMAPR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.KY0YMAPR cursor, bold;
  end

  if (KY0YM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XOWCD cursor, bold;
  end

  if (KY0YM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XPGCD cursor, bold;
  end

  if (KY0YM110.XSLCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XSLCD cursor, bold;
  end

  if (KY0YM110.XSDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1E";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XSDCD cursor, bold;
  end

  if (KY0YM110.XQACD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1F";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XQACD cursor, bold;
  end

  if (KY0YM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1G";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XDMCD cursor, bold;
  end

  if (KY0YM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1H";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.SY2CLRID cursor, bold;
  end

  if (KY0YM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1I";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.SY1STNBR cursor, bold;
  end

  if (KY0YM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1J";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.XGPCD cursor, bold;
  end

  if (KY0YM110.KY0YMTDT > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1K";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.KY0YMTDT cursor, bold;
  end

  if (KY0YM110.KY0YMFDT > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1L";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0YM110.KY0YMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSA1

// same key edits
Function KY0YSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0YM110.XWHCD != KY0YW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSB1

// key field edits
Function KY0YSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  CYWREC.CYWINDTE = KY0YM110.KY0YMTDT;

  XSCYSVT();
                                   /* <=== validate/xlate date to ccyymmdd*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1S";
    set KY0YM110.KY0YMTDT cursor, bold;
  else
    CYVREC.CYVEDT = CYWREC.CYWWKDTE;
  end

  CYWREC.CYWINDTE = KY0YM110.KY0YMFDT;

  XSCYSVT();
                                   /* <=== validate/xlate date to ccyymmdd*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1T";
    set KY0YM110.KY0YMFDT cursor, bold;
  else
    CYVREC.CYVSDT = CYWREC.CYWWKDTE;
  end

   /* ************************************************************/
   /* *** print all locations switch must be 'y' or 'n'       ****/
   /* *** note: if switch = 'y', skip the rest of the edits   ****/
   /* ************************************************************/

  if (KY0YM110.KY0YMAPR == "Y")
    return;
  else
    if (KY0YM110.KY0YMAPR == "N")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0YM110.KY0YMAPR cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if owner code in tbl & active: continue             ****/
   /* *** note: whse owner grp flag already saved             ****/
   /* ***       if flag = n, ow must = 00                     ****/
   /* *** note: owner tbl key = whse + owner                  ****/
   /* ************************************************************/

  if (CYWREC.XWHOWNGF == "Y")
    CYWREC.XWHCD = KY0YM110.XWHCD;
    CYWREC.CYWTBLCD = KY0YM110.XOWCD;
    if (CYWREC.CYWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1B";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0YM110.XOWCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1C";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0YM110.XOWCD cursor, bold;
    end
  else
    if (KY0YM110.XOWCD != "00")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1D";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0YM110.XOWCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if unit of measure code in tbl & active: continue   ****/
   /* *** note: non-required fld re: may want default value   ****/
   /* ************************************************************/

  if (KY0YM110.XUMCD > " ")
    if (KY0YM110.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SC1E";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0YM110.XUMCD cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1F";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0YM110.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if package type code in tbl & active: continue      ****/
   /* ************************************************************/

  if (KY0YM110.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1G";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XPGCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1H";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if sl class code in tbl & active: continue          ****/
   /* ************************************************************/

  if (KY0YM110.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1I";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XSLCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1J";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XSLCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec diff code in tbl & active: continue         ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = KY0YM110.XGPCD;
  PC2REC.PC2INSEG = KY0YM110.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1K";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XSDCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1L";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if quality code in tbl & active: continue           ****/
   /* ************************************************************/

  if (KY0YM110.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1M";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XQACD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1N";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if dimension code in tbl & active: continue         ****/
   /* ************************************************************/

  if (KY0YM110.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1O";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XDMCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1P";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gpc code in tbl & active: continue               ****/
   /* ************************************************************/

  if (KY0YM110.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1Q";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0YM110.XGPCD cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1R";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0YM110.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSC1

// key relational edits
Function KY0YSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  XSCYSDC(); /* <=== compare cyvrec dates*/

  if (CYWREC.CYWVERSW == "Y")
    CYWREC.CYWERRSW = "Y";
    set KY0YM110.KY0YMTDT bold;
    set KY0YM110.KY0YMFDT cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if print all locations switch is 'y',               ****/
   /* *** all product flds must be blank                      ****/
   /* *** note: exit after msut be erased checks              ****/
   /* ************************************************************/

  if (KY0YM110.KY0YMAPR == "Y")
    if (KY0YM110.XOWCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1A";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XOWCD cursor, bold;
    end
    if (KY0YM110.XUMCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1B";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XUMCD cursor, bold;
    end
    if (KY0YM110.XPGCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1C";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XPGCD cursor, bold;
    end
    if (KY0YM110.XSLCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1D";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XSLCD cursor, bold;
    end
    if (KY0YM110.XSDCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1E";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XSDCD cursor, bold;
    end
    if (KY0YM110.XQACD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1F";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XQACD cursor, bold;
    end
    if (KY0YM110.XDMCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1G";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XDMCD cursor, bold;
    end
    if (KY0YM110.SY2CLRID > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1H";
      CYWREC.CYWMSGNO = 0073; /* <--- must be misssing msg*/
      set KY0YM110.SY2CLRID cursor, bold;
    end
    if (KY0YM110.SY1STNBR > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1I";
      CYWREC.CYWMSGNO = 0073; /* <--- must be misssing msg*/
      set KY0YM110.SY1STNBR cursor, bold;
    end
    if (KY0YM110.XGPCD > " ")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1J";
      CYWREC.CYWMSGNO = 0073; /* <--- must be missing msg*/
      set KY0YM110.XGPCD cursor, bold;
    end
    return;
  end

   /* ************************************************************/
   /* *** verify style/color                                  ****/
   /* ************************************************************/

  PKNREC.XGPCD = KY0YM110.XGPCD;
  PKNREC.SY1STNBR = KY0YM110.SY1STNBR;
  PKNREC.SY2CLRID = KY0YM110.SY2CLRID;
  PKNREC.XDMCD = KY0YM110.XDMCD;

  TA1REC.TA1LOCAT[2] = "KY0YSD1 ";

  KY0YS-SEL-VPKSTY01();

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0YM110.XGPCD bold;
    set KY0YM110.SY1STNBR cursor, bold;
    set KY0YM110.SY2CLRID bold;
    set KY0YM110.XDMCD bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SD1K";
      CYWREC.CYWMSGNO = 0056; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.CYWSKYSW = "N";
      CYWREC.XXXLOCID = "SD1L";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SD1M";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  KY0YM110.SY1SSTNM = PKNREC.SY1SSTNM;
  KY0YM110.SY2CLRAB = PKNREC.SY2CLRAB;
  if (KY0YM110.XUMCD == " ")
    KY0YM110.XUMCD = "01";
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSD1

// save current key value(s)
Function KY0YSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0YM110.XWHCD;

  KY0YW01.XWHCD = KY0YM110.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSF1

// ENTER processing
Function KY0YSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0YS1M(); /* <=== missing whse edit*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ***                        re-setup printers            ****/
   /* ***                        exit for (re)select printer  ****/
   /* ************************************************************/

  KY0YSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    KY0YS1W(); /* <=== whse edit*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
    KY0YS1P(); /* <=== setup printers*/
    if (CYWREC.CYWERRSW == "Y")
      KY0YW01.XWHCD = " ";
      return;
    end
    KY0YSF1(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0YSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check field edits                        ****/
   /* ************************************************************/

  KY0YSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0YSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** save printer selection                              ****/
   /* ************************************************************/

  KY0YS1S(); /* <=== select printer*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  KY0YS1J(); /* <=== setup & submit jcl*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** do not reset the screen but display msg             ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0059; /* <--- print request ok msg*/

  if (KY0YM110.KY0YMAPR == "Y")
    KY0YM110.KY0YMAPR = "N";
    set KY0YM110.KY0YMAPR cursor;
  else
    KY0YM110.SY1STNBR = " ";
    set KY0YM110.SY1STNBR cursor;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0YSH1

//*** RECORD=KY0YW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT VERIFICATION
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-09-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0YW01 type basicRecord
  10 KY0YWLK1 KY0YWLK1 ; 
    15 XWHCD XWHCD ; 
  10 KY0YWJOB KY0YWJOB ; 
    15 KY0YWLT1 KY0YWLT1 ; 
    15 CYWUSRID CYWUSRID ; 
    15 KY0YWLT2 KY0YWLT2 ; 
    15 * char(54) ; 
  10 KY0YWOUT KY0YWOUT ; 
    15 KY0YWLT3 KY0YWLT3 ; 
    15 KY0YWPID KY0YWPID ; 
    15 * char(42) ; 
  10 KY0YWINW KY0YWINW ; 
    15 KY0YWLT6 KY0YWLT6 ; 
    15 KY0YWWH6 KY0YWWH6 ; 
    15 KY0YWLT7 KY0YWLT7 ; 
    15 * char(49) ; 
  10 KY0YWIND KY0YWIND ; 
    15 KY0YWLT8 KY0YWLT8 ; 
    15 KY0YWDTE KY0YWDTE ; 
    15 KY0YWLT9 KY0YWLT9 ; 
    15 * char(40) ; 
  10 KY0YWNFY KY0YWNFY ; 
    15 KY0YWLT4 KY0YWLT4 ; 
    15 KY0YWUSR KY0YWUSR ; 
    15 * char(56) ; 
  10 KY0YWLIN KY0YWLIN ; 
    15 KY0YWWH KY0YWWH ; 
    15 KY0YWFDT KY0YWFDT ; 
    15 KY0YWTDT KY0YWTDT ; 
    15 KY0YWAPR KY0YWAPR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 * char(34) ; 
  10 XCTCD XCTCD ; 
  10 KY0YWDB2 KY0YWDB2 ; 
    15 KY0YWLTA KY0YWLTA ; 
    15 KY0YWLTB KY0YWLTB ; 
    15 * char(28) ; 
  10 KY0YW-NOTIFY-LINE KY0YW-NOTIFY-LINE ; 
    15 * char(11) ; 
    15 KY0YW-NOTIFY-LIT KY0YW-NOTIFY-LIT ; 
    15 KY0YW-NOTIFY-USER KY0YW-NOTIFY-USER ; 
    15 * char(54) ; 
  10 KY0YW-PARM-LINE KY0YW-PARM-LINE ; 
    15 KY0YW-PARM-LINE-INFO KY0YW-PARM-LINE-INFO ; 
    15 KY0YW-WHSE-PARM KY0YW-WHSE-PARM ; 
    15 KY0YW-PARM-APOST KY0YW-PARM-APOST ; 
    15 * char(56) ; 
end // end KY0YW01

DataItem KY0YW-NOTIFY-LINE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-NOTIFY-LIT char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-NOTIFY-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-PARM-APOST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-PARM-LINE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-PARM-LINE-INFO char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KY0YW-WHSE-PARM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print all products switch
DataItem KY0YWAPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort date include statement
DataItem KY0YWDB2 char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// work date
DataItem KY0YWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// from date
DataItem KY0YWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// sort date include statement
DataItem KY0YWIND char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sort whse include statement
DataItem KY0YWINW char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// job card jcl line
DataItem KY0YWJOB char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// instream jcl data line
DataItem KY0YWLIN char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem KY0YWLK1 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 1
DataItem KY0YWLT1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 2
DataItem KY0YWLT2 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 3
DataItem KY0YWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 4
DataItem KY0YWLT4 char(18)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 6
DataItem KY0YWLT6 char(27)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 7
DataItem KY0YWLT7 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 8
DataItem KY0YWLT8 char(31)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal 9
DataItem KY0YWLT9 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal a
DataItem KY0YWLTA char(20)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// literal b
DataItem KY0YWLTB char(32)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// notify userid
DataItem KY0YWNFY char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// output (dest id) line
DataItem KY0YWOUT char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// remote printer id
DataItem KY0YWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem KY0YWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// user id for job name
DataItem KY0YWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work warehouse code
DataItem KY0YWWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work whse code for lit 6
DataItem KY0YWWH6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

