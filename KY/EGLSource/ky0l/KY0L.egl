package ky0l;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0L ****
// ************************************************************
// 
//                   CYCLE COUNT
//           VARIANCE INQUIRY/COMPLETION
//           ===========================
// 
// ************************************************************
// 
// OVERVIEW: This application will display all the current doc.
//           case/size count entries (unless a specific case
//           is entered instead of the default *) and the
//           corresponding stock locate value as of the time
//           this product/location was first eneterd.
// 
//           notes:
//             1) the s.l. data is stored in working storage
//                in order to be saved in the doc. case/size
//                record if this item is closed.
//             2) the count data displayed is the net of the
//                data entry/maintenance and of all work order
//                data that has been selected for reconcilation
//                with this items case/sizes.
//             3) any case/sizes found in addition to the
//                existing doc. case/sizes will be added when
//                closing is performed.
//             4) any case/sizes without s.l. data will just
//                have zero entered for the s.l. quantity.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/01/87  Ward Jones  created
// 01  09/13/88  Ward Jones  reset scrn if fast path error
// 01  03/13/89  jwood       added noncsp option to calls
// 01  03/13/89  jwood       added xssegtr logic
//     06/01/90  kande1      change ky0ls3s to use the new
//                           pc3ponbr for wildcard select to
//                           syloc io1470.
// 00  10/08/90  mmoreh      tbl changes
// 00  02/13/91  wtate       xsdcd and xsacd change for table
//                           changes.
// 00  07/31/91  scleme      convert CY0L to KY0L
// 00  01/15/92  jwood       changes to init all w/s recs...
// 00  06/19/92  Ryonke      Changed due to table structure
//                           changes.
// 00  11/16/92  jcampb      Changed due to table structure
//                           changes.
// 00  12/21/92  jcampb      fix error in adj processing
// 00  01/12/93  jfiat       select all records regardless of
//                           case id
// ************************************************************
// ************************************************************
// *********************
Program KY0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY1REC CY1REC; // record
  CY2REC CY2REC; // record
  CY3REC CY3REC; // record
  CY4REC CY4REC; // record
  CY5REC CY5REC; // record
  CY6REC CY6REC; // record
  CY7REC CY7REC; // record
  CYRREC CYRREC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0LW01 KY0LW01; // record
  KY0LWQ1 KY0LWQ1; // record
  KY0LWX1 KY0LWX1; // record
  PKNREC PKNREC; // record
  SL6REC SL6REC; // record
  SL9REC SL9REC; // record
  SLCREC SLCREC; // record
  SQLCA SQLCA; // record
  SRBREC SRBREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use YDNTBL {deleteAfterUse = yes}; // table
  use YDUTBL {deleteAfterUse = yes}; // table
  use KY0LM.KY0LM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0L110: KY0L110();


     /* ************************************************************/
     /* *** if error: display key screen                        ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0L120; /* <=== display key screen*/
    end

     /* ************************************************************/
     /* *** since no errors, ky0lsh1 was successful             ****/
     /* *** therefore, go directly to ky0l140 for updates       ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "140 ";
    goto KY0L140; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0L120: KY0L120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0L120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0L110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0L120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0L140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0L120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0L140: KY0L140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0L140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0L110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0L120; /* <=== re-display key screen*/
      end
      goto KY0L140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      CYWREC.XXXLOCID = "140 ";
      goto KY0L140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: enter will be an error and/or new key         ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto KY0L140; /* <=== display new page*/
    end

    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf24)
      CYWREC.XXXLOCID = "120 ";
      goto KY0L120; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0L140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0L

// one time initializations
Function KY0L110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented trans id              ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0LM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYRREC empty; /* io mod function pass flds*/
  set CYVREC empty; /* io mod function pass flds*/
  set CYWREC empty; /* common working storage fields*/
  set CYXREC empty; /* passed working storage fields*/
  set KY0LW01 empty; /* appl. working storage area*/
  set KY0LWX1 empty; /* accum./adj. working storage area*/
  set KY0LWQ1 empty; /* tsq page working storage area*/
  set CY1REC empty; /* cyc cnt doc. hdr/loc record*/
  set CY2REC empty; /* cyc cnt doc. itm/prod record*/
  set CY3REC empty; /* cyc cnt doc. case/size record*/
  set CY4REC empty; /* cyc cnt selected adjustments record*/
  set CY5REC empty; /* cyc cnt*/
  set CY6REC empty; /* cyc cnt requested products record*/
  set CY7REC empty; /* cyc cnt locations record*/
  set SL6REC empty; /* stock locate product location record*/
  set SL9REC empty; /* stock locate work order current*/
                                   /* record*/
  set SLCREC empty; /* stock locate work order history*/
                                   /* record*/
  set SRBREC empty; /* ship rec item record*/
  set PKNREC empty; /**/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /* TA0050 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/01/88  W. Jones      created                ****/
   /* ***  01  09/13/88  W. Jones      reset scrn if fast     ****/
   /* ***                              path error             ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "01";

  CYWREC.XXXMAPNM = "KY0LM110";
  CYWREC.XXXTITLE = "CYCLE COUNT VARIANCE INQUIRY";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0L"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0L110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0LM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0LM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0LM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0LM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0LM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0LM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0LSE9(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 13;
  CYWREC.CYWSUMQU = "KY0L";
  KY0LWQ1.KY0LWLEN = 624;

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0LM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0LM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to setup screen                             ****/
   /* *** note: will detect missing whse                      ****/
   /* ************************************************************/

  KY0LSH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0L110

// converse & control key entry
Function KY0L120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0LM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0LM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0LM110.CATOAP > " ")
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = KY0LM110.CATOAP;
    COMMAREA.CAITEM = KY0LM110.CAITEM;
    XSEXIT();
    KY0LST1(); /* <=== reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0LM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0LM110.VAGen_EZEMSG = " ";
  set KY0LM110.CATOAP initialAttributes;
  set KY0LM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0LM110.XWHCD initialAttributes;
  set KY0LM110.IN5TRDCD initialAttributes;
  set KY0LM110.KY0LMDOC initialAttributes;
  set KY0LM110.KY0LMSUB initialAttributes;
  set KY0LM110.KY0LMCS initialAttributes;

   /* ************************************************************/
   /* *** reset pfkey instruction flds for 2nd pass display   ****/
   /* *** reset hilited variances as part of enter processing ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0LM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0LM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0LSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** the following pfkeys are valid only after the enter ****/
   /* *** key has been pressed = on the second pass = 140     ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf24)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120M";
    CYWREC.CYWMSGNO = 0040; /* <--- requires data disp. msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120I";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120J";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120K";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120L";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf19)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0N";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120N";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0L120

// converse & control data entry
Function KY0L140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0LM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0LM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO STOCK LOCATE MAIN MENU                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0LM110.CATOAP > " ")
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = KY0LM110.CATOAP;
    COMMAREA.CAITEM = KY0LM110.CAITEM;
    XSEXIT();
    KY0LST1(); /* <=== reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0LM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N"; /* <=== spec. exit = create recount*/
  CYWREC.CYWSKYSW = "Y";
  KY0LM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0LM110.CATOAP initialAttributes;
  set KY0LM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0LM110.XWHCD initialAttributes;
  set KY0LM110.IN5TRDCD initialAttributes;
  set KY0LM110.KY0LMDOC initialAttributes;
  set KY0LM110.KY0LMSUB initialAttributes;
  set KY0LM110.KY0LMCS initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* *** note: done as part of the editing loop in 'enter'   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0LM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0LM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    KY0LSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    KY0LSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: close this document's item & update all    ****/
   /* ***          size rows with the saved sl data & adj.d cnt***/
   /* *** note: if doc. size not fnd, add doc. size row       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    KY0LSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0LSF1(); /* <=== save key values*/
      KY0LST1(); /* <=== reset screen (empty)*/
      KY0LSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0LSR1(); /* <=== check case fld*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    CYWREC.CYWSUMIX = 1;
    while (CYWREC.CYWSUMIX <= CYWREC.CYWSMAXR
     && CYWREC.CYWERRSW == "N")
      KY0LS1R(); /* <=== read tsq page/record*/
      KY0LSU1(); /* <=== update using tsq data*/
      CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;
    end
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update*/
        KY0LST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    KY0LSU2(); /* <=== update doc/item row*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update*/
        KY0LST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    if (CYWREC.CYWSEXSW == "Y")
      KY0LSA6(); /* <=== add req.d loc/recnt*/
      if (CYWREC.CYWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        KY0LST1(); /* <=== reset screen (empty)*/
        exit stack; /* <=== severe error will display ta0020 map*/
      end
      CYWREC.CYWMSGNO = 0050; /* <--- close w/recnt msg*/
    else
      CYWREC.CYWMSGNO = 0048; /* <--- close complete msg*/
    end
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update*/
        KY0LST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    KY0LSQ1(); /* <=== reset screen (clear)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF24: void this document's item (no size updates)****/
   /* ************************************************************/

  if (converseVar.eventKey is pf24)
    KY0LSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0LSF1(); /* <=== save key values*/
      KY0LST1(); /* <=== reset screen (empty)*/
      KY0LSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0LSR1(); /* <=== check case fld*/
    KY0LSR9(); /* <=== prevent random void*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0LSU2(); /* <=== update doc/item row*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update*/
        KY0LST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSKYSW == "N") /* <=== concurrent update*/
        KY0LST1(); /* <=== reset screen (empty)*/
      end
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    KY0LSQ1(); /* <=== reset screen (clear)*/
    CYWREC.CYWMSGNO = 0049; /* <--- void complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* *** note: reset attr.s part of edit loop                ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0LSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0LSF1(); /* <=== save key values*/
      KY0LST1(); /* <=== reset screen (empty)*/
      KY0LSH1(); /* <=== enter processing*/
      exit stack;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Q";
    CYWREC.CYWMSGNO = 0005; /* <--- new input msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140H";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140I";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140J";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140K";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140L";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf19)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0N";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140N";
    CYWREC.CYWMSGNO = 0;
    KY0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0L140

Function KY0LS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0LS-CALL-IO1810";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS-SEL-VPKSTY01

Function KY0LS-SIZE-CONVERT()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call SY1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS-SIZE-CONVERT

// adj. cc size data
Function KY0LS1A()
   /* ************************************************************/
   /* *** 3. adjust cc size counts in ws area                 ****/
   /* ***    note: count = net of selected adjustments & count****/
   /* ***    note: adj. even if zero                          ****/
   /* ***    - for each type                                  ****/
   /* ***      select set of all related adjustments          ****/
   /* ***    - for each adjustment depending on type code     ****/
   /* ***      adjust cc size counts per wo/ps data           ****/
   /* ************************************************************/

  KY0LS4S(); /* <=== select set*/

  while (SQLCA.VAGen_SQLCODE == 0 /* <=== if none fnd, will not execute*/
   && CYWREC.CYWERRSW == "N")
    if (CY4REC.YSACD == "PS")
      CYWREC.CYWIX = CY4REC.SY5SZID;
      KY0LWX1.CY3COUNT[CYWIX] = KY0LWX1.CY3COUNT[CYWIX] + CY4REC.CY-CNT-ADJ-QTY;
    else
      /* ************************************************************/
      /* *** apply all wo data to appropriate cc size count data ****/
      /* *** note: set the data flag in case it was not set before***/
      /* ************************************************************/
      CYWREC.CYWIX = CY4REC.SY5SZID;
      KY0LWX1.KY0LWDFL[CYWIX] = "Y";
      if (CY4REC.YSACD == "CI"
       || CY4REC.YSACD == "IO")
        KY0LWX1.CY3COUNT[CYWIX] = KY0LWX1.CY3COUNT[CYWIX] + CY4REC.CY-CNT-ADJ-QTY;
      else
        if (CY4REC.YSACD == "CO"
         || CY4REC.YSACD == "II")
          KY0LWX1.CY3COUNT[CYWIX] = KY0LWX1.CY3COUNT[CYWIX] - CY4REC.CY-CNT-ADJ-QTY;
        else
          /* ************************************************************/
          /* *** if this code is executed (control drops thru),      ****/
          /* *** then an unexpected table value has been detected    ****/
          /* ************************************************************/
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "SQAC";
          CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
          set KY0LM110.XWHCD cursor, bold;
          return;
        end
      end
    end
    XSCY4F1(); /* <=== fetch next row*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1A

// add cc size data
Function KY0LS1C()


   /* ************************************************************/
   /* *** 2. setup cc size counts in ws area                  ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

  while (CY3REC.SL2CASE == KY0LW01.KY0LWCCS
   && KY0LW01.KY0LWCFL == " "
   && SQLCA.VAGen_SQLCODE == 0
   && CYWREC.CYWERRSW == "N")
    CYWREC.CYWIX = CY3REC.SY5SZID;
    KY0LWX1.KY0LWDFL[CYWIX] = "Y";
    KY0LWX1.CY3COUNT[CYWIX] = KY0LWX1.CY3COUNT[CYWIX] + CY3REC.CY3COUNT;
    XSCY3F1(); /* <=== fetch next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0LW01.KY0LWCFL = "Y";
      return;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1CA";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1C

// setup hdr/location data
Function KY0LS1E()


   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  CY1REC.XWHCD = KY0LM110.XWHCD;
  CY1REC.IN5TRDCD = KY0LM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0LM110.KY0LMDOC;

  TA1REC.TA1LOCAT[2] = "KY0LS1E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. hdr/location data to screen           ****/
   /* ************************************************************/

  KY0LM110.XARCD = CY1REC.XARCD;
  KY0LM110.SL4ZONE = CY1REC.SL4ZONE;
  KY0LM110.SL5LOCTN = CY1REC.SL5LOCTN;

  KY0LM110.YDNCD = CY1REC.YDNCD;

   /* ************************************************************/
   /* *** if reason code in tbl: put abrv. on map             ****/
   /* *** otherwise, use all *                                ****/
   /* ************************************************************/

  if (CY1REC.YDNCD in YDNTBL.YDNCD)
    KY0LM110.YDNSABRV = YDNTBL.YDNSABRV[sysVar.arrayIndex];
  else
    KY0LM110.YDNSABRV = "******";
  end

   /* ************************************************************/
   /* *** obtain cycle count location data for use later      ****/
   /* *** i.e. frequency tolerances                           ****/
   /* ************************************************************/

  CY7REC.XWHCD = CY1REC.XWHCD;
  CY7REC.XARCD = CY1REC.XARCD;
  CY7REC.YLTCD = CY1REC.YLTCD;
  CY7REC.SL4ZONE = CY1REC.SL4ZONE;
  CY7REC.SL5LOCTN = CY1REC.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "KY0LS1E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY7I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1ED";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    set KY0LM110.XARCD cursor, bold;
    set KY0LM110.SL4ZONE bold;
    set KY0LM110.SL5LOCTN bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1EE";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1EF";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1E

// write tsq page(s)
Function KY0LS1Q()


   /* ************************************************************/
   /* *** 5. write to the tsq using std tsq building methods  ****/
   /* ***    note: no. of sizes counted prev.ly in cywrem01   ****/
   /* ***          (no. of sizes+1)/2=no. lines needed        ****/
   /* ***    note: cywrem01 may be > 26 (=2 pages needed)     ****/
   /* ************************************************************/

  CYWREC.CYWLNEED = CYWREC.CYWREM01 + 1;
  CYWREC.CYWLNEED = CYWREC.CYWLNEED / 2;

  if (CYWREC.CYWLLEFT == CYWREC.CYWLINPP) /* ===> at top of new/1st pg*/
     /* ** next sentence ***/
  else
    if (CYWREC.CYWLNEED > CYWREC.CYWLLEFT)
      KY0LS2Q(); /* <=== tsq page break processing*/
      if (CYWREC.CYWERRSW == "Y")
        return;
      end
    end
  end

  KY0LS3Q(); /* <=== move data to tsq ws*/

  if (CYWREC.CYWLNEED > CYWREC.CYWLINPP) /* ===> 2nd page needed*/
    KY0LS2Q(); /* <=== tsq page break processing*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
    KY0LS4Q(); /* <=== move remaining data to tsq ws*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1Q

// read tsq page/record
Function KY0LS1R()


   /* ************************************************************/
   /* *** obtain the sum tsq record for the previously        ****/
   /* *** setup sumix/pointer                                 ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (KY0LWQ1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RA";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1R

// accumulate sl size data
Function KY0LS1S()


   /* ************************************************************/
   /* *** 1. accumulate sl size quantities in ws area         ****/
   /* ***    while the sl case is equal to the current case   ****/
   /* ***    note: zero = ok if none fnd for any/all sizes    ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

  while (SL6REC.SL2CASE == KY0LW01.KY0LWCCS
   && KY0LW01.KY0LWSFL == " "
   && SQLCA.VAGen_SQLCODE == 0
   && CYWREC.CYWERRSW == "N")
    CYWREC.CYWIX = SL6REC.SY5SZID;
    KY0LWX1.KY0LWDFL[CYWIX] = "Y";
    KY0LWX1.SL6ONHND[CYWIX] = KY0LWX1.SL6ONHND[CYWIX] + SL6REC.SL6ONHND;
    XSSL6F7(); /* <=== fetch next row*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentnece ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0LW01.KY0LWSFL = "Y";
      return;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1SA";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1S

// setup current case
Function KY0LS1T()


   /* ************************************************************/
   /* *** setup current case fld so that all sl & cy data is  ****/
   /* *** used, even if there is not related data in the other****/
   /* *** system                                              ****/
   /* *** note: check for eof flag must be done before the    ****/
   /* ***       case comparison                               ****/
   /* ************************************************************/

  if (KY0LW01.KY0LWSFL == "Y")
    KY0LW01.KY0LWCCS = CY3REC.SL2CASE; /* <--- current case*/
    return;
  end

  if (KY0LW01.KY0LWCFL == "Y")
    KY0LW01.KY0LWCCS = SL6REC.SL2CASE; /* <--- current case*/
    return;
  end

  if (SL6REC.SL2CASE <= CY3REC.SL2CASE)
    KY0LW01.KY0LWCCS = SL6REC.SL2CASE; /* <--- current case*/
  else
    KY0LW01.KY0LWCCS = CY3REC.SL2CASE; /* <--- current case*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1T

// calc. variances & cnt sizes
Function KY0LS1V()


   /* ************************************************************/
   /* *** 4. calculate & save the variance                    ****/
   /* ***    count the no. of size 'data's for use in bld tsq ****/
   /* ***    note: variance flag will be blank if w/in tol.   ****/
   /* ***          set variance = y if not w/in tolerance     ****/
   /* *** note: use "dif" fld for tolerance checks in order   ****/
   /* ***       to leave the variance signed for display      ****/
   /* ************************************************************/

  CYWREC.CYWIX = 1;
  CYWREC.CYWREM01 = 0;

  while (CYWREC.CYWIX <= 40)
    if (KY0LWX1.KY0LWDFL[CYWIX] == "Y")
      CYWREC.CYWREM01 = CYWREC.CYWREM01 + 1;
      KY0LW01.KY0LWDIF = KY0LWX1.CY3COUNT[CYWIX] - KY0LWX1.SL6ONHND[CYWIX];
      if (KY0LW01.KY0LWDIF != 0)
        KY0LWX1.KY0LWVAR[CYWIX] = KY0LW01.KY0LWDIF;
        KY0LS2V(); /* <=== check tolerances*/
      end
    end
    CYWREC.CYWIX = CYWREC.CYWIX + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS1V

// setup item/product data
Function KY0LS2E()


   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  CY2REC.XWHCD = KY0LM110.XWHCD;
  CY2REC.IN5TRDCD = KY0LM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0LM110.KY0LMDOC;
  CY2REC.IN5TRSUB = KY0LM110.KY0LMSUB;

  TA1REC.TA1LOCAT[2] = "KY0LS2E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY2I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC bold;
    set KY0LM110.KY0LMSUB cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S2EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S2EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if status is NOT open, setup not open error         ****/
   /* ************************************************************/

  if (CY2REC.YDUCD != "01")
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S2ED";
    CYWREC.CYWMSGNO = 0034; /* <--- not open msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. item/product data to screen           ****/
   /* ************************************************************/

  KY0LM110.CY2CNTBY = CY2REC.CY2CNTBY;
  KY0LM110.XGPCD = CY2REC.XGPCD;
  KY0LM110.SY1STNBR = CY2REC.SY1STNBR;
  KY0LM110.SY2CLRID = CY2REC.SY2CLRID;
  KY0LM110.XDMCD = CY2REC.XDMCD;
  KY0LM110.XQACD = CY2REC.XQACD;
  KY0LM110.PC2INSEG = CY2REC.PC2INSEG;
  KY0LM110.XSLCD = CY2REC.XSLCD;
  KY0LM110.XPGCD = CY2REC.XPGCD;
  KY0LM110.XUMCD = CY2REC.XUMCD;
  KY0LM110.XOWCD = CY2REC.XOWCD;

   /* ************************************************************/
   /* *** use color 2 row to get style & color desc.s         ****/
   /* ************************************************************/

  PKNREC.XGPCD = CY2REC.XGPCD;
  PKNREC.SY1STNBR = CY2REC.SY1STNBR;
  PKNREC.SY2CLRID = CY2REC.SY2CLRID;
  PKNREC.XDMCD = CY2REC.XDMCD;

  TA1REC.TA1LOCAT[2] = "KY0GS2E ";

  KY0LS-SEL-VPKSTY01(); /* <=== style/color (2) inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0LM110.SY1SSTNM = PKNREC.SY1SSTNM;
    KY0LM110.SY2CLRAB = PKNREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0LM110.SY1SSTNM = "************";
      KY0LM110.SY2CLRAB = "*************";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0LM110.XGPCD bold;
      set KY0LM110.SY1STNBR cursor, bold;
      set KY0LM110.SY2CLRID bold;
      set KY0LM110.XDMCD bold;
      CYWREC.XXXLOCID = "S2EE";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** if status code in tbl: put abrv. on map             ****/
   /* *** otherwise, use all *                                ****/
   /* ************************************************************/

  KY0LM110.YDUCD = CY2REC.YDUCD;

  if (CY2REC.YDUCD in YDUTBL.YDUCD)
    KY0LM110.YDUSABRV = YDUTBL.YDUSABRV[sysVar.arrayIndex];
  else
    KY0LM110.YDUSABRV = "******";
  end

   /* ************************************************************/
   /* *** obtain all valid sizes for this product for display ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.XGPCD = CY2REC.XGPCD;
  SYPREC.SY1STNBR = CY2REC.SY1STNBR;
  SYPREC.SY2CLRID = CY2REC.SY2CLRID;
  SYPREC.XDMCD = CY2REC.XDMCD;
  SYPREC.XQACD = "**";

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  TA1REC.TA1LOCAT[2] = "KY0US3E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  KY0LS-SIZE-CONVERT(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == +10)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.XGPCD bold;
    set KY0LM110.SY1STNBR cursor, bold;
    set KY0LM110.SY2CLRID bold;
    set KY0LM110.XDMCD bold;
    if (SYPREC.SYPRC == +9)
      CYWREC.XXXLOCID = "S2EF";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EG";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS2E

// tsq page break processing
Function KY0LS2Q()


   /* ************************************************************/
   /* *** write tsq ws page to tsq using ta0050               ****/
   /* *** reset the lines left & last line used pointers      ****/
   /* *** note: set entire tsq ws empty & reset its length    ****/
   /* ************************************************************/

  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (KY0LWQ1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S2QA";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
  end

  CYWREC.CYWLLEFT = CYWREC.CYWLINPP;
  CYWREC.CYWSUMLX = 0; /* used to init case index*/

  set KY0LWQ1 empty;
  KY0LWQ1.KY0LWLEN = 624; /* tsq page length*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS2Q

// check variances
Function KY0LS2V()


   /* ************************************************************/
   /* *** calculate tolerances & set var flag                 ****/
   /* *** note: leave variance flag blank if w/in tol.        ****/
   /* ***       set variance = y if not w/in tolerance        ****/
   /* *** note: if sl onhand is negative = out of tol.        ****/
   /* *** note: percentage calc. truncates result             ****/
   /* ************************************************************/

  if (KY0LWX1.SL6ONHND[CYWIX] < 0)
    KY0LWX1.KY0LWVFL[CYWIX] = "Y";
    return;
  end

  if (KY0LW01.KY0LWDIF < 0)
    KY0LW01.KY0LWDIF = KY0LW01.KY0LWDIF * -1;
  end

  if (KY0LW01.KY0LWDIF > 0)
    CYWREC.CYWWKINT = KY0LWX1.SL6ONHND[CYWIX] * CY7REC.CY7TOLPC;
    CYWREC.CYWWKINT = CYWREC.CYWWKINT / 100;
    if (KY0LW01.KY0LWDIF > CYWREC.CYWWKINT
     || KY0LW01.KY0LWDIF > CY7REC.CY7TOLNO)
      KY0LWX1.KY0LWVFL[CYWIX] = "Y";
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS2V

// obtain cc case/size data
Function KY0LS3E()


   /* ************************************************************/
   /* *** obtain the doc. case/size records to build the tsq  ****/
   /* ************************************************************/

  CY3REC.XWHCD = KY0LM110.XWHCD;
  CY3REC.IN5TRDCD = KY0LM110.IN5TRDCD;
  CY3REC.IN5TRDOC = KY0LM110.KY0LMDOC;
  CY3REC.IN5TRSUB = KY0LM110.KY0LMSUB;
  CY3REC.SL2CASE = KY0LM110.KY0LMCS;
  CY3REC.SY5SZID = -1;

  TA1REC.TA1LOCAT[2] = "KY0LS3E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY3S1(); /* <=== select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0LM110.XWHCD bold;
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC bold;
    set KY0LM110.KY0LMSUB cursor, bold;
    if (KY0LM110.KY0LMCS == "********"
     || KY0LM110.KY0LMCS == "*       "
     || KY0LM110.KY0LMCS == "       *")
       /* ** next sentence ***/
    else
      set KY0LM110.KY0LMCS bold;
    end
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S3EA";
      CYWREC.CYWMSGNO = 0025; /* <--- no data to display msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S3EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S3EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS3E

// move data to tsq ws
Function KY0LS3Q()


   /* ************************************************************/
   /* *** move case data to the tsq ws starting with the      ****/
   /* *** next case after what is stored in cywsumlx          ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWSUMLX + 1;
  CYWREC.CYWIDX02 = CYWREC.CYWIDX01 * 2;
  CYWREC.CYWIDX02 = CYWREC.CYWIDX02 - 1;

  CYWREC.CYWIDX03 = 1;
  while (CYWREC.CYWIDX03 <= 40
   && CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 2
     && CYWREC.CYWIDX03 <= 40)
      if (KY0LWX1.KY0LWDFL[CYWIDX03] == "Y")
         /* ===> case filled twice per line (redundantly)*/
        KY0LWQ1.SL2CASE[CYWIDX01] = KY0LW01.KY0LWCCS;
        KY0LWQ1.SY5SZID[CYWIDX02] = CYWREC.CYWIDX03;
        KY0LWQ1.SY4IDDSC[CYWIDX02] = SYPREC.SY4IDDSC[CYWIDX03];
        KY0LWQ1.SL6ONHND[CYWIDX02] = KY0LWX1.SL6ONHND[CYWIDX03];
        KY0LWQ1.CY3COUNT[CYWIDX02] = KY0LWX1.CY3COUNT[CYWIDX03];
        KY0LWQ1.KY0LWVAR[CYWIDX02] = KY0LWX1.KY0LWVAR[CYWIDX03];
        KY0LWQ1.KY0LWVFL[CYWIDX02] = KY0LWX1.KY0LWVFL[CYWIDX03];
        CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
        CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      end
      CYWREC.CYWIDX03 = CYWREC.CYWIDX03 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    CYWREC.CYWSUMLX = CYWREC.CYWSUMLX + 1;
    CYWREC.CYWLLEFT = CYWREC.CYWLLEFT - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS3Q

// obtain sl case/size data
Function KY0LS3S()


   /* ************************************************************/
   /* *** obtain all size data for the specific case entered  ****/
   /* *** or for all cases if '*' used                        ****/
   /* *** the build tsq will accumulate sl data for each size ****/
   /* *** note: none fnd will also be handled in bld tsq      ****/
   /* ***       i.e. for emptied or now empty loc.s           ****/
   /* ************************************************************/

  set SL6REC empty;
  SL6REC.XWHCD = CY1REC.XWHCD;
  SL6REC.XARCD = CY1REC.XARCD;
  SL6REC.SL4ZONE = CY1REC.SL4ZONE;
  SL6REC.SL5LOCTN = CY1REC.SL5LOCTN;
  SL6REC.XGPCD = CY2REC.XGPCD;
  SL6REC.SY1STNBR = CY2REC.SY1STNBR;
  SL6REC.SY2CLRID = CY2REC.SY2CLRID;
  SL6REC.XDMCD = CY2REC.XDMCD;
  SL6REC.XQACD = CY2REC.XQACD;
  SL6REC.XOWCD = CY2REC.XOWCD;
  SL6REC.PC2INSEG = CY2REC.PC2INSEG;
  SL6REC.XEGCD = CY2REC.XEGCD;
  SL6REC.XPGCD = CY2REC.XPGCD;
  SL6REC.XUMCD = CY2REC.XUMCD;
  SL6REC.XSLCD = CY2REC.XSLCD;
  SL6REC.SL2CASE = KY0LM110.KY0LMCS;
  SL6REC.SL2PALET = "*****";
  SL6REC.PC3PONBR = -1;
  SL6REC.SL1CRTDT = -1;
  SL6REC.SY5SZID = -1;

  XSSL6S7(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* +100 is not an error*/
      KY0LW01.KY0LWSFL = "Y";
      return;
    end
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S3SA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S3SB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS3S

// move remaining data to tsq ws
Function KY0LS4Q()


   /* ************************************************************/
   /* *** move doc data to the tsq ws starting with the       ****/
   /* *** already incremented to cywidx03 ky0lwx1 pointer     ****/
   /* *** note: since 26 flds, even if all 40 used,           ****/
   /* ***       can't use all lines (1pg starts at top)       ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWSUMLX + 1;
  CYWREC.CYWIDX02 = CYWREC.CYWIDX01 * 2;
  CYWREC.CYWIDX02 = CYWREC.CYWIDX02 - 1;

   /* ===> CYWREC.CYWIDX03 still setup from ky0ls3q*/

  while (CYWREC.CYWIDX03 <= 40)
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 2
     && CYWREC.CYWIDX03 <= 40)
      if (KY0LWX1.KY0LWDFL[CYWIDX03] == "Y")
         /* ===> case filled twice per line (redundantly)*/
        KY0LWQ1.SL2CASE[CYWIDX01] = KY0LW01.KY0LWCCS;
        KY0LWQ1.SY5SZID[CYWIDX02] = CYWREC.CYWIDX03;
        KY0LWQ1.SY4IDDSC[CYWIDX02] = SYPREC.SY4IDDSC[CYWIDX03];
        KY0LWQ1.SL6ONHND[CYWIDX02] = KY0LWX1.SL6ONHND[CYWIDX03];
        KY0LWQ1.CY3COUNT[CYWIDX02] = KY0LWX1.CY3COUNT[CYWIDX03];
        KY0LWQ1.KY0LWVAR[CYWIDX02] = KY0LWX1.KY0LWVAR[CYWIDX03];
        KY0LWQ1.KY0LWVFL[CYWIDX02] = KY0LWX1.KY0LWVFL[CYWIDX03];
        CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
        CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
      end
      CYWREC.CYWIDX03 = CYWREC.CYWIDX03 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    CYWREC.CYWSUMLX = CYWREC.CYWSUMLX + 1;
    CYWREC.CYWLLEFT = CYWREC.CYWLLEFT - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS4Q

// select all sel.d adj. rec.s
Function KY0LS4S()


   /* ************************************************************/
   /* *** obtain all adjustments related to this case         ****/
   /* ************************************************************/

  CY4REC.SL2CASE = "*";

  TA1REC.TA1LOCAT[2] = "KY0LS4S ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY4S1(); /* <=== select set*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
     /* ** next sentence ***/
  else
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S4SA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S4SB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LS4S

// key missing input edits
Function KY0LSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0LM110.KY0LMSUB > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0LM110.KY0LMSUB cursor, bold;
  end

  if (KY0LM110.KY0LMDOC > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0LM110.KY0LMDOC cursor, bold;
  end

  if (KY0LM110.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0LM110.IN5TRDCD cursor, bold;
  end

  if (KY0LM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1E";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0LM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSA1

// add doc/size row
Function KY0LSA3()


   /* ************************************************************/
   /* *** add the doc/size row                                ****/
   /* *** note: partion must be setup re: already read cy3    ****/
   /* *** note: zzzsdt/zzzchgdt/zzzchgtm are setup in io sgrp ****/
   /* ************************************************************/

  CY3REC.SL2CASE = KY0LWQ1.SL2CASE[CYWIDX01];
  CY3REC.SY5SZID = KY0LWQ1.SY5SZID[CYWIDX02];

  CY3REC.SL6ONHND = KY0LWQ1.SL6ONHND[CYWIDX02];
  CY3REC.CY3COUNT = KY0LWQ1.CY3COUNT[CYWIDX02];

  TA1REC.TA1LOCAT[2] = "KY0LSA3 ";

  XSCY3A0(); /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SA3A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803)
      CYWREC.XXXLOCID = "SA3B";
    else
      CYWREC.XXXLOCID = "SA3C";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSA3

// add req.d loc/recnt
Function KY0LSA6()


   /* ************************************************************/
   /* *** setup req.d loc/recount flds & add                  ****/
   /* *** note: duplicates must be prevented                  ****/
   /* ***       re: each will trigger a full location count   ****/
   /* ***           even though each is only a single product ****/
   /* ***           within that multiple product location  or ****/
   /* ***           the duplicate is from existing duplicate  ****/
   /* ***           count sheets (same loc/different nbrs)    ****/
   /* *** note: zzzsdt/zzzchgdt/zzzchgtm are setup in io sgrp ****/
   /* *** note: sa6 re: changed from prod req to loc req      ****/
   /* ************************************************************/

  CY5REC.XWHCD = CY1REC.XWHCD;
  CY5REC.YDNCD = "05";
  CY5REC.CY5SAREA = CY1REC.XARCD;
  CY5REC.CY5SZONE = CY1REC.SL4ZONE;
  CY5REC.CY5SLOC = CY1REC.SL5LOCTN;
  CY5REC.CY5EAREA = CY1REC.XARCD;
  CY5REC.CY5EZONE = CY1REC.SL4ZONE;
  CY5REC.CY5ELOC = CY1REC.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "KY0LSA6 ";

  XSCY5I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* <=== skip = duplicate*/
    end
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SA6A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SA6B";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  XSCY5A0(); /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SA6C";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SA6D";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSA6

// same key edits
Function KY0LSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0LM110.XWHCD != KY0LW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0LM110.IN5TRDCD != KY0LW01.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0LM110.KY0LMDOC != KY0LW01.KY0LWDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0LM110.KY0LMSUB != KY0LW01.KY0LWSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0LM110.KY0LMCS != KY0LW01.KY0LWCS)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSB1

// key field edits
Function KY0LSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** documnent code must be either: 'c' or 'm'           ****/
   /* ************************************************************/

  if (KY0LM110.IN5TRDCD == "C"
   || KY0LM110.IN5TRDCD == "M")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1A";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0LM110.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0LM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0LM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0LM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1B";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0LM110.XWHCD cursor, bold;
    end
  else
    KY0LM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0LM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSC1

// key relational edits
Function KY0LSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time -*/
   /* - doc nbr validated as part of obtain data*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSD1

// key obtain table data
Function KY0LSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  KY0LS1E(); /* <=== setup hdr data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  KY0LS2E(); /* <=== setup item data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. case/size records for bld tsq later ****/
   /* ************************************************************/

  KY0LS3E(); /* <=== obtain cc case/size data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the s.l. case/size records for bld tsq later ****/
   /* ************************************************************/

  KY0LS3S(); /* <=== obtain sl case/size data*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSE1

// userarea entry processing
Function KY0LSE9()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0GM110"
   || CYXREC.CYXFRMAP == "KY0HM110"
   || CYXREC.CYXFRMAP == "KY0IM110"
   || CYXREC.CYXFRMAP == "KY0JM110"
   || CYXREC.CYXFRMAP == "KY0KM110"
   || CYXREC.CYXFRMAP == "KY0LM110"
   || CYXREC.CYXFRMAP == "KY0NM110")
    KY0LM110.IN5TRDCD = CYXREC.IN5TRDCD;
    KY0LM110.KY0LMDOC = CYXREC.IN5TRDOC;
    KY0LM110.KY0LMSUB = CYXREC.IN5TRSUB;
    if (CYXREC.SL2CASE > " ")
      KY0LM110.KY0LMCS = CYXREC.SL2CASE;
    else
      KY0LM110.KY0LMCS = "********";
    end
    return;
  end

  KY0LM110.IN5TRDCD = "C";
  KY0LM110.KY0LMCS = "********";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSE9

// save current key value(s)
Function KY0LSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0LM110.XWHCD;

  KY0LW01.XWHCD = KY0LM110.XWHCD;
  KY0LW01.IN5TRDCD = KY0LM110.IN5TRDCD;
  KY0LW01.KY0LWDOC = KY0LM110.KY0LMDOC;
  KY0LW01.KY0LWSUB = KY0LM110.KY0LMSUB;
  KY0LW01.KY0LWCS = KY0LM110.KY0LMCS;

  KY0LSX9(); /* <=== userarea exit processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSF1

// setup map key fields
Function KY0LSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0LM110.XWHCD = KY0LW01.XWHCD;

  KY0LM110.IN5TRDCD = KY0LW01.IN5TRDCD;
  KY0LM110.KY0LMDOC = KY0LW01.KY0LWDOC;
  KY0LM110.KY0LMSUB = KY0LW01.KY0LWSUB;
  KY0LM110.KY0LMCS = KY0LW01.KY0LWCS;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSG1

// ENTER processing
Function KY0LSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0LSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  KY0LSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0LSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0LSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0LSF1(); /* <=== save current key value(s)*/
    KY0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0LSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** setup tsq with all cc & sl data                     ****/
   /* ************************************************************/

  KY0LSS1(); /* <=== setup tsq*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  CYWREC.CYWSUMIX = 1;

  KY0LSO1(); /* <=== display tsq data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSH1

// PF7 processing
Function KY0LSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* ************************************************************/

  KY0LSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0LSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SJ1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page                              ****/
   /* ************************************************************/

  if (CYWREC.CYWSUMIX == 1)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SJ1B";
    CYWREC.CYWMSGNO = 0007; /* <--- top of data msg*/
    return;
  end

  CYWREC.CYWSUMIX = CYWREC.CYWSUMIX - 1;

  KY0LSO1(); /* <=== setup screen*/

  CYWREC.XXXLOCID = "SJ1C";
  CYWREC.CYWMSGNO = 0014; /* <--- paged backward msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSJ1

// PF8 processing
Function KY0LSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* ************************************************************/

  KY0LSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0LSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SK1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the next page       ****/
   /* *** and setup the new page                              ****/
   /* ************************************************************/

  if (CYWREC.CYWSUMIX == CYWREC.CYWSMAXR)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SK1B";
    CYWREC.CYWMSGNO = 0008; /* <--- bottom of data msg*/
    return;
  end

  CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;

  KY0LSO1(); /* <=== setup screen*/

  CYWREC.XXXLOCID = "SK1C";
  CYWREC.CYWMSGNO = 0013; /* <--- paged foreward msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSK1

// display tsq page
Function KY0LSO1()


   /* ************************************************************/
   /* *** obtain the sum tsq record  and                      ****/
   /* *** intialize the processing pointers & current case    ****/
   /* ************************************************************/

  KY0LS1R(); /* <=== read tsq page/record*/

  CYWREC.CYWIDX01 = 1; /* pointer to line/case*/
  CYWREC.CYWIDX02 = 1; /* pointer to size data*/
  KY0LW01.KY0LWCCS = " "; /* current case*/

   /* ************************************************************/
   /* *** if line's case same as current case, use blanks     ****/
   /* *** if case changes, finish the sizes on the line       ****/
   /* *** before going to the next line                       ****/
   /* *** note: 1st case may be blanks                        ****/
   /* ************************************************************/

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0LWQ1.SL2CASE[CYWIDX01] == KY0LW01.KY0LWCCS)
      KY0LM110.SL2CASE[CYWIDX01] = " ";
    else
      KY0LM110.SL2CASE[CYWIDX01] = KY0LWQ1.SL2CASE[CYWIDX01];
      KY0LW01.KY0LWCCS = KY0LWQ1.SL2CASE[CYWIDX01];
    end
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 2)
      KY0LM110.SY4IDDSC[CYWIDX02] = KY0LWQ1.SY4IDDSC[CYWIDX02];
      KY0LM110.KY0LMHND[CYWIDX02] = KY0LWQ1.SL6ONHND[CYWIDX02];
      KY0LM110.KY0LMCNT[CYWIDX02] = KY0LWQ1.CY3COUNT[CYWIDX02];
      KY0LM110.KY0LMVAR[CYWIDX02] = KY0LWQ1.KY0LWVAR[CYWIDX02];
      if (KY0LWQ1.KY0LWVFL[CYWIDX02] == "Y")
        set KY0LM110.KY0LMVAR[CYWIDX02] skip, bold;
      else
        set KY0LM110.KY0LMVAR[CYWIDX02] initialAttributes;
      end
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSO1

// reset screen (clear)
Function KY0LSQ1()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values/defaults  ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0LM110 initial; /* resets entire screen*/

  KY0LSG1(); /* <=== setup map key fields*/

  KY0LM110.KY0LMDOC = 0;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0LM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0LM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0LM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0LM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0LW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSQ1

// check case for *
Function KY0LSR1()


   /* ************************************************************/
   /* *** case must be * if close or void                     ****/
   /* ************************************************************/

  if (KY0LM110.KY0LMCS == "********"
   || KY0LM110.KY0LMCS == "       *"
   || KY0LM110.KY0LMCS == "*       ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1A";
    CYWREC.CYWMSGNO = 0041; /* <--- must be * msg*/
    set KY0LM110.KY0LMCS cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSR1

// prevent random void
Function KY0LSR9()


   /* ************************************************************/
   /* *** setup error if doc reason code is random (=02)      ****/
   /* ************************************************************/

  if (KY0LM110.YDNCD == "02")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR9A";
    CYWREC.CYWMSGNO = 0079; /* <--- cannont void random msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSR9

// setup tsq
Function KY0LSS1()


   /* ************************************************************/
   /* *** purger tsq before starting                          ****/
   /* *** setup the tsq by performing the following per case: ****/
   /* *** 1. accumulating sl size quantities in ws area       ****/
   /* ***    note: zero = ok if none fnd for any/all sizes    ****/
   /* *** 2. setup cc size counts in ws area                  ****/
   /* *** 3. adjust cc size counts in ws area                 ****/
   /* ***    note: count = net of selected adjustments & count****/
   /* ***    note: adj. even if zero                          ****/
   /* *** 4. calculating & save the variance                  ****/
   /* ***    note: variance flag will be blank if w/in tol.   ****/
   /* ***          set variance = y if not w/in tolerance     ****/
   /* *** 5. writing to the tsq using std tsq building methods****/
   /* ***    note: no. of sizes/2=no. lines needed            ****/
   /* *** note: first cc & sl size row has been read          ****/
   /* *** note: break checks/processing done at end of loop   ****/
   /* *** note: size descriptions obtained w/ item data       ****/
   /* ************************************************************/

  XSCYSPQ(); /* <=== purge tsq*/

  CYWREC.CYWEOFSW = "N"; /* <--- both sl/cc eof switch*/
  CYWREC.CYWSUMLX = 0; /* <--- last used tsq line ptr*/
  CYWREC.CYWLLEFT = CYWREC.CYWLINPP; /* <--- lines left*/

  CY4REC.XWHCD = KY0LM110.XWHCD;
  CY4REC.IN5TRDCD = KY0LM110.IN5TRDCD;
  CY4REC.IN5TRDOC = KY0LM110.KY0LMDOC;
  CY4REC.IN5TRSUB = KY0LM110.KY0LMSUB;
  CY4REC.YSACD = "* ";

  SL9REC.XWHCD = KY0LM110.XWHCD;
  SLCREC.XWHCD = KY0LM110.XWHCD;

  SRBREC.XWHCD = KY0LM110.XWHCD;
  SRBREC.XGPCD = CY2REC.XGPCD;
  SRBREC.SY1STNBR = CY2REC.SY1STNBR;
  SRBREC.SY2CLRID = CY2REC.SY2CLRID;
  SRBREC.XDMCD = CY2REC.XDMCD;
  SRBREC.XQACD = CY2REC.XQACD;
  SRBREC.PC2INSEG = CY2REC.PC2INSEG;
  SRBREC.XEGCD = "000";
  SRBREC.XPGCD = CY2REC.XPGCD;
  SRBREC.XUMCD = CY2REC.XUMCD;
  SRBREC.XOWCD = CY2REC.XOWCD;

  set KY0LWQ1 empty;
  KY0LWQ1.KY0LWLEN = 624;

  while (CYWREC.CYWEOFSW == "N" /* <--- either cc or sl not at eof*/
   && CYWREC.CYWERRSW == "N") /* <--- no error*/
    set KY0LWX1 empty;
    KY0LS1T(); /* <=== setup current case*/
     /* ************************************************************/
     /* *** 1. accumulate sl size quantities in ws area         ****/
     /* ***    note: zero = ok if none fnd for any/all sizes    ****/
     /* ************************************************************/
    KY0LS1S(); /* <=== accumulate sl size data*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
     /* ************************************************************/
     /* *** 2. setup cc size counts in ws area                  ****/
     /* ************************************************************/
    KY0LS1C(); /* <=== setup cc size data*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
     /* ************************************************************/
     /* *** 3. adjust cc size counts in ws area                 ****/
     /* ***    note: count = net of selected adjustments & count****/
     /* ***    note: adj. even if zero count                    ****/
     /* ************************************************************/
    KY0LS1A(); /* <=== adjust cc size data*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
     /* ************************************************************/
     /* *** 4. calculate & save the variance                    ****/
     /* ***    note: variance flag will be blank if w/in tol.   ****/
     /* ***          set variance = y if not w/in tolerance     ****/
     /* ************************************************************/
    KY0LS1V(); /* <=== calc. variances*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
     /* ************************************************************/
     /* *** 5. write to the tsq using std tsq building methods  ****/
     /* ***    note: (no. of sizes+1)/2=no. lines needed        ****/
     /* ***    note: do page break at end to write last page    ****/
     /* ************************************************************/
    KY0LS1Q(); /* <=== setup tsq page(s)*/
    if (CYWREC.CYWERRSW == "Y")
      return;
    end
    if (KY0LW01.KY0LWSFL == "Y"
     && KY0LW01.KY0LWCFL == "Y")
      CYWREC.CYWEOFSW = "Y";
    end
  end

   /* ************************************************************/
   /* *** do page break to write last page                    ****/
   /* ************************************************************/

  KY0LS2Q(); /* <=== tsq page break processing*/

  CYWREC.CYWSMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSS1

// reset screen (empty)
Function KY0LST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0LM110 empty; /* resets entire screen*/

  KY0LSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0LM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0LM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0LM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0LM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0LW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LST1

// update current tsq page
Function KY0LSU1()


   /* ************************************************************/
   /* *** update all data on the current tsq page/record      ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  CYWREC.CYWIDX02 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP
   && CYWREC.CYWERRSW == "N")
    CYWREC.CYWCTR01 = 1;
    while (CYWREC.CYWCTR01 <= 2
     && CYWREC.CYWERRSW == "N")
      if (KY0LWQ1.SY5SZID[CYWIDX02] > 0)
        KY0LSU3(); /* <=== update doc/size row*/
        if (KY0LWQ1.KY0LWVFL[CYWIDX02] == "Y")
          CYWREC.CYWSEXSW = "Y"; /* <=== create recount*/
        end
      end
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
      CYWREC.CYWIDX02 = CYWREC.CYWIDX02 + 1;
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSU1

// update doc/item row
Function KY0LSU2()


   /* ************************************************************/
   /* *** obtain the doc/item row for update without data     ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0LSU2 ";

  XSCY2U0(); /* <=== get row without data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SU2A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SU1B";
    else
      CYWREC.XXXLOCID = "SU1C";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** change the status depending on which pfkey used     ****/
   /* *** note: zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    CY2REC.YDUCD = "02"; /* <--- closed status*/
  else
    CY2REC.YDUCD = "03"; /* <--- void status*/
  end

  TA1REC.TA1LOCAT[2] = "KY0LSU2 ";

  XSCY2R0(); /* <=== update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      if (CY2REC.CY2DATA > " ") /* <--- returned data has any changes*/
        CYWREC.XXXLOCID = "SU2D";
        CYWREC.CYWMSGNO = 0032; /* <--- row updated since last read*/
      else
        CYWREC.CYWSKYSW = "N";
        CYWREC.XXXLOCID = "SU2E";
        CYWREC.CYWMSGNO = 0033; /* <--- row deleted since last read*/
      end
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== leave in only if u0 used*/
      CYWREC.XXXLOCID = "SU2F";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SU2G";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSU2

// update doc/size row
Function KY0LSU3()


   /* ************************************************************/
   /* *** obtain the doc/size row for update with data        ****/
   /* ************************************************************/

  CY3REC.SL2CASE = KY0LWQ1.SL2CASE[CYWIDX01];
  CY3REC.SY5SZID = KY0LWQ1.SY5SZID[CYWIDX02];

  TA1REC.TA1LOCAT[2] = "KY0LSU3 ";

  XSCY3U1(); /* <=== get row with data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0LSA3(); /* <=== add doc/size row*/
      return;
    end
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SU3A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SU3B";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup the current sl onhand & adj.d cc count        ****/
   /* *** note: zzzchgdt/zzzchgtm/zzzchgct are setup in io sgrp***/
   /* ************************************************************/

  CY3REC.SL6ONHND = KY0LWQ1.SL6ONHND[CYWIDX02];
  CY3REC.CY3COUNT = KY0LWQ1.CY3COUNT[CYWIDX02];

  TA1REC.TA1LOCAT[2] = "KY0LSU3 ";

  XSCY3R0(); /* <=== update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0LM110.IN5TRDCD bold;
    set KY0LM110.KY0LMDOC cursor, bold;
    set KY0LM110.KY0LMSUB bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SU3C";
    else
      CYWREC.XXXLOCID = "SU3D";
    end
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSU3

// userarea exit processing
Function KY0LSX9()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0LM110";

  CYXREC.IN5TRDCD = KY0LM110.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0LM110.KY0LMDOC;
  CYXREC.IN5TRSUB = KY0LM110.KY0LMSUB;
  CYXREC.SL2CASE = KY0LM110.KY0LMCS;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0LSX9

// update : doc itm/prd : 0
Function XSCY2U0()


   /* ************************************************************/
   /* *** get unique row for update of:  doc item/product     ****/
   /* *** using the std module:  IO2420                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY2U0

// inquiry : req loc.s   : 0
Function XSCY5I0()


   /* ************************************************************/
   /* *** select unique row from:  requested location         ****/
   /* *** using the std module:  IO2440                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "S ";

  call "IO2440" (CYVREC, SQLCA, CY5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY5I0 ";
  TA1REC.TA1LOCAT[1] = "IO2440  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQLOC01";
  TA1REC.TA1TBLKE = CY5REC.CY5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY5I0

// close : prod location : 7
Function XSSL6C7()


   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1470" ("C7", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6C7 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL6C7

// fetch : prod location : 7
Function XSSL6F7()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log hdr             ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1470" ("N7", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL6C7(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6F7 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL6F7

// setinq : prod location : 7
Function XSSL6S7()


   /* ************************************************************/
   /* *** select set of rows from:  product/location          ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "IO1470" ("S7", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL6S7 ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL6F7(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL6S7

//*** RECORD=KY0LW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT VARIANCE INQUIRY
//           =====================================
// 
//           Application Working Storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0LW01 type basicRecord
  10 KY0LWLK1 KY0LWLK1 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 KY0LWDOC KY0LWDOC ; 
    15 KY0LWSUB KY0LWSUB ; 
    15 KY0LWCS KY0LWCS ; 
  10 CY4ADJNO CY4ADJNO ; 
  10 SL2CASE SL2CASE ; 
  10 KY0LWCFL KY0LWCFL [13] ; 
  10 KY0LWSFL KY0LWSFL [13] ; 
  10 KY0LWCCS KY0LWCCS [13] ; 
  10 KY0LWDIF KY0LWDIF ; 
end // end KY0LW01

//*** RECORD=KY0LWQ1 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT DATA ENTRY
//           ===============================
// 
//           Temp Storage Record Layout
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to store
//           1 page of data in a single TSQ record.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-04-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0LWQ1 type basicRecord
  10 KY0LWLEN KY0LWLEN ; 
  10 KY0LWDAT KY0LWDAT ; 
    15 SL2CASE SL2CASE [13] ; 
    15 KY0LWVFL KY0LWVFL [26] ; 
    15 SY5SZID SY5SZID [26] ; 
    15 SY4IDDSC SY4IDDSC [26] ; 
    15 SL6ONHND SL6ONHND [26] ; 
    15 CY3COUNT CY3COUNT [26] ; 
    15 KY0LWVAR KY0LWVAR [26] ; 
end // end KY0LWQ1

//*** RECORD=KY0LWX1 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT DATA ENTRY
//           ===============================
// 
//           Data Accumulation/Adjustment Working Storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to store
//           a single case's CC & SL data & the results of
//           the variance calculation.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-04-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0LWX1 type basicRecord
  10 KY0LWDFL KY0LWDFL [40] ; 
  10 KY0LWVFL KY0LWVFL [40] ; 
  10 SL6ONHND SL6ONHND [40] ; 
  10 CY3COUNT CY3COUNT [40] ; 
  10 KY0LWVAR KY0LWVAR [40] ; 
end // end KY0LWX1

// current case
DataItem KY0LWCCS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc eof flag
DataItem KY0LWCFL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// input case number
DataItem KY0LWCS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add data
DataItem KY0LWDAT char(624)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// data present flag (= y)
DataItem KY0LWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calc.d cc-sl qty
DataItem KY0LWDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran doc nbr
DataItem KY0LWDOC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// length of tsq data
DataItem KY0LWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem KY0LWLK1 char(23)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sl eof flag
DataItem KY0LWSFL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc sub
DataItem KY0LWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calc.d variance
DataItem KY0LWVAR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// out of tolerance flag (= y)
DataItem KY0LWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

