package corpcom3;
import corpcom4.*;
import corpx1.*;
import corpy2.*;
// edit non numeric characters
Function XP0A001()


   /* edit a character field for non numeric characters*/

   /* This process is used to edit a map field for non*/
   /* numeric characters when an alpha-numeric character*/
   /* field must be used in a map.  To use this process*/
   /* XP0AW01 and XP0AT01 must be included in the table and*/
   /* records section of the calling application.  Here is*/
   /* an example of how to use this process:*/

      /* 1. MOVE map.field TO XP0AWFLD*/
      /* 2. PERFORM XP0A001*/
      /* 3. IF XP0AWEFL EQ 'y'*/
      /* 4.    MOVE 'error message' TO EZEMSG*/
      /* 5.    MOVE 'Y' TO application error flag*/
      /* 6. END*/

   /* If XP0AWEFL is 'y' then a non numeric character has been*/
   /* detected.  It is up to the application to take action*/
   /* to process the error condition.  The only thing XP0A001*/
   /* does is identify an error and send back a 'y' condition*/
   /* in the XP0AWEFL field. (remember to set XP0AW01 EMPTY*/
   /* in the initialization section of the calling application)*/



  XP0AW01.XP0AWEFL = "N";
  XP0AW01.XP0AWSUB = 1;

  while (XP0AW01.XP0AWSUB <= 9)
    if (XP0AW01.XP0AWCHA[XP0AWSUB] in XP0AT01.XP0ATVAL from 1)
      /* next sentence*/
    else
      XP0AW01.XP0AWEFL = "Y";
      XP0AW01.XP0AWSUB = 9;
    end
    XP0AW01.XP0AWSUB = XP0AW01.XP0AWSUB + 1;
  end



end // end XP0A001

// trade restrictions pop-up
Function XP0C100()
   /* ************************************************************/
   /* * XP0C100  FORMAT AND DISPLAY XP0CM001                    **/
   /* *                                                         **/
   /* *  The purpose of this process is to format and display   **/
   /* *  the pop-up window with the trade restrictions given    **/
   /* *  the factory.  This process must determine:             **/
   /* *                                                         **/
   /* *  1.  The country the factory is in - DFCTY.VFCTY001     **/
   /* *  2.  A list of countries that are invalid due to        **/
   /* *      trade restrictions.                                **/
   /* *                                                         **/
   /* *  If there are no rows found, the pop-up window shows    **/
   /* *  no restrictions.  If an error occurs, the application  **/
   /* *  using this process must perform all necessary calls    **/
   /* *  to the abend routine.  This process moves all the      **/
   /* *  literal data needed to identify the location of the    **/
   /* *  error.                                                 **/
   /* *                                                         **/
   /* *  PROGRAMMING REQUIREMENTS:                              **/
   /* *                                                         **/
   /* *  1.  Set DFCTY.VFCTY001 record empty - FY1REC (IO2810)  **/
   /* *  2.  Set DFCTY.VTRDRS01 record empty - FYBREC (IO2800)  **/
   /* *  3.  Move the factory into FY1FCTYC.                    **/
   /* *                                                         **/
   /* *  After performing this process, check the sqlcode and   **/
   /* *  ezertn 8.                                              **/
   /* *                                                         **/
   /* ************************************************************/
   /* * REQUEST #   NAME     DATE    COMMENTS                   **/
   /* * ---------  ------  --------  ---------------------------**/
   /* * 000000000  MSMIT2  04/03/91  CREATED                    **/
   /* *                                                         **/
   /* ************************************************************/

  FY1REC.XGPCD = "02"; /* FOOTWEAR GPC CODE*/

   /* ------------------------------------------------------------*/
   /* Select unique factory row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(20); /* factory code missing or invalid*/
      return;
    else
      /* ------------------------------------------------------------*/
       /* If data not available, return  to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(10);
      TA1REC.TA1LOC = "SELECT UNIQUE FACTORY";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
      TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

      return; /* Exit CALLER*/

    end
  end

  XP0CW01.FY1FCTYC = FY1REC.FY1FCTYC;

  set FYBREC empty; /* initialize record*/

  FYBREC.XGPCD = "02"; /* FOOTWEAR GPC CODE*/
  FYBREC.FYBOXCC = FY1REC.XCTCD; /* orig. country code*/

  XP0C110(); /* Open cursor*/

  XP0CW01.XP0CWXX2 = 1; /* trade restriction subscript*/

  if (FY1REC.XCTCD in XCTTBL.XCTCD) /* load factory country description*/
    XP0CW01.XP0CWCTR = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    XP0C120(); /* get trade restriction rows*/
    if (SQLCA.VAGen_SQLCODE == 0)
      XP0CW01.XP0CWXCT = "Y"; /* country restriction found*/
       /* load destination country description*/
      if (FYBREC.FYBDXCC in XCTTBL.XCTCD)
        XP0CW01.XCTDESC[XP0CWXX2] = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
       /* load trade restriction reason code*/
      if (FYBREC.YTRCD in YTRTBL.YTRCD)
        XP0CW01.YTRDESC[XP0CWXX2] = YTRTBL.YTRDESC[sysVar.arrayIndex];
      end
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 + 1;
    end
  end

  if (XP0CW01.XP0CWXCT == "Y") /* restriction found*/
    XP0CW01.XP0CWCT1 = XP0CW01.XP0CWXX2 - 1; /* number of items in list*/
  else
    XP0CW01.YTRDESC[1] = "NO RESTRICTIONS";
    XP0CW01.XP0CWCT1 = 1;
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

  XP0C130(); /* CLOSE CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

end // end XP0C100

// select trade restriction set
Function XP0C110()
   /* ------------------------------------------------------------*/
   /* Open select set for DFCTY.VTRDRS01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2800" ("S2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(20); /* factory code missing or invalid*/
      return;
    else
      /* ------------------------------------------------------------*/
       /* If data not available, return  to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(10);
      TA1REC.TA1LOC = "SELECT UNIQUE TRADE RESTRICTIONS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
      TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* Table key*/

      return; /* Exit CALLER*/

    end
  end

end // end XP0C110

// FETCH COMMENT CURSOR
Function XP0C120()
   /* ***********************************************/
   /* FETCH A ROW FROM DFCTY.VTRDRS01*/
   /* ***********************************************/

  try
    call "IO2800" ("N2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
    return;
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100) /* END OF SET*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  converseLib.validationFailed(10);


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* Table key*/



end // end XP0C120

// CLOSE COMMENT CURSOR
Function XP0C130()
   /* ***********************************************/
   /* CLOSE CURSOR     DFCTY.VTRDRS01*/
   /* ***********************************************/


  try
    call "IO2800" ("C2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  converseLib.validationFailed(10);


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* Table key*/


end // end XP0C130

// trade restrictions pop-up
Function XP0C140()
   /* ************************************************************/
   /* * XP0C140  FORMAT AND DISPLAY XP0CM001                    **/
   /* *                                                         **/
   /* *  The purpose of this process is to format and display   **/
   /* *  the pop-up window with the trade restrictions given    **/
   /* *  the factory.  This process must determine:             **/
   /* *                                                         **/
   /* *  1.  The country the factory is in - DFCTY.VFCTY001     **/
   /* *  2.  A list of countries that are invalid due to        **/
   /* *      trade restrictions.                                **/
   /* *                                                         **/
   /* *  If there are no rows found, the pop-up window shows    **/
   /* *  no restrictions.  If an error occurs, the application  **/
   /* *  using this process must perform all necessary calls    **/
   /* *  to the abend routine.  This process moves all the      **/
   /* *  literal data needed to identify the location of the    **/
   /* *  error.                                                 **/
   /* *                                                         **/
   /* *  PROGRAMMING REQUIREMENTS:                              **/
   /* *                                                         **/
   /* *  1.  Set DFCTY.VFCTY001 record empty - FY1REC (IO2810)  **/
   /* *  2.  Set DFCTY.VTRDRS01 record empty - FYBREC (IO2800)  **/
   /* *  3.  Move the factory into FY1FCTYC.                    **/
   /* *                                                         **/
   /* *  After performing this process, check the sqlcode and   **/
   /* *  ezertn 8.                                              **/
   /* *                                                         **/
   /* ************************************************************/
   /* * REQUEST #   NAME     DATE    COMMENTS                   **/
   /* * ---------  ------  --------  ---------------------------**/
   /* * 000000000  MSMIT2  04/03/91  CREATED                    **/
   /* *                                                         **/
   /* ************************************************************/

  if (converseVar.eventKey is pf3) /* exit*/
    XP0CW01.XP0CWEND = "Y";
    return;
  else
    if (converseVar.eventKey is pf7) /* page backward*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 - 1; /* last position printed*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 - 11; /* subtract page length + 1*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 / 10; /* / by page len. truncated*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 + 1; /* add 1 page*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 * 10; /* find 1st spot on page*/
      XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 - 9; /* subtract (page len -1)*/
      if (XP0CW01.XP0CWXX2 >= 0)
        /* next sentence*/
      else
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf8 /* page forward*/
   || converseVar.eventKey is enter)
    if (XP0CW01.XP0CWXX2 <= XP0CW01.XP0CWCT1) /* no more pages to display*/
      set XP0CM001 initial;
    end
  else
    set XP0CM001 initial; /* clear pop-up*/
  end

   /* setup headings and footings*/

  XP0CM001.XP0CMHDR = " TRADE RESTRICTIONS FOR FACTORY";
  XP0CMHD2 = "FACTORY  COUNTRY        DESTINATION   REASON";
  XP0CM001.XP0CMTR1 = "                                      ";
  XP0CM001.XP0CMTR2 = "   PF3:EXIT   PF7:UP   PF8:DOWN       ";
  XP0CM001.XP0CMCD = XP0CW01.FY1FCTYC; /* factory code*/
  XP0CM001.XP0CMCTR = XP0CW01.XP0CWCTR; /* factory country desc*/

  while (XP0CW01.XP0CWXX2 <= XP0CW01.XP0CWCT1 /* table max*/
   && XP0CW01.XP0CWXX1 <= 10) /* page definition*/
    XP0CM001.XP0CMDSA[XP0CWXX1] = XP0CW01.XCTDESC[XP0CWXX2];
    XP0CM001.XP0CMDSB[XP0CWXX1] = XP0CW01.YTRDESC[XP0CWXX2];
    XP0CW01.XP0CWXX1 = XP0CW01.XP0CWXX1 + 1;
    XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 + 1;
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end



  converse XP0CM001 ;
end // end XP0C140

// CU-CO-ID CONVERT
Function XP0FS01()



      /* *********************************************************/
      /* * determine if cu-co-id is cole haan and convert       **/
      /* * from 80 00000 to 00 00000 format                     **/
      /* *********************************************************/



  if (XP0FW01.XBCCD == 08)
    if (XP0FW01.KUCCOID < 9000000
     && XP0FW01.KUCCOID > 7999999)
      XP0FW01.XP0FW01-EXTERNAL = XP0FW01.KUCCOID - 8000000;
      XP0FW01.XP0FW01-INTERNAL = XP0FW01.KUCCOID;
    else
      XP0FW01.XP0FW01-INTERNAL = XP0FW01.KUCCOID + 8000000;
      XP0FW01.XP0FW01-EXTERNAL = XP0FW01.KUCCOID;
    end
  else
    XP0FW01.XP0FW01-INTERNAL = XP0FW01.KUCCOID;
    XP0FW01.XP0FW01-EXTERNAL = XP0FW01.KUCCOID;
  end



   /* *************************************************************/
end // end XP0FS01

// get valid colors for a product
Function XP0G001()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* SY2REC*/
               /* XP0GW01*/
               /* XP0GW02*/
           /* ADD TO MAP GROUP:*/
               /* XP0GM001*/
   /* *************************************************************/

    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with valid colors for style.*/
    /* 2. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0G003(); /* popup window initialization*/
  XP0GW01.XP0GWHD1 = "    Color & Desc"; /* popup window heading*/
  XP0GW01.XP0GWHD2 = "Life Cycle & Desc"; /* popup window heading*/

  XP0GS01(); /* select set and load table with valid colors*/

  if (XP0GW02.XP0GWERR == "Y") /* if db2 error*/
    return;
  end

  while (XP0GW02.XP0GWEND == "N") /* until end of request*/
    XP0G002(); /* display table values on popup map*/
  end

end // end XP0G001

// converse popup valid colors
Function XP0G002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR valid style colors*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0GW02.XP0GWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XP0GW02.XP0GWFFL == "N") /* if not the first time through*/
      XP0GW02.XP0GWCT1 = XP0GW02.XP0GWINX[10] + 1; /* set up scroll pf8*/
    end

    set XP0GM001 initial; /* Clear map output area*/
    XP0GM001.XP0GMHDR = XP0GW01.XP0GWHDR; /* Place heading on map*/
    XP0GM001.XP0GMTR1 = "              Select & Enter          ";
    XP0GM001.XP0GMTR2 = "   PF7:Back                   PF8:Frwd";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0GW02.XP0GWFFL == "Y")    /* Or it is the first time thru*/
      XP0GW02.XP0GWCT2 = 1; /* Set up screen index*/
      while (XP0GW02.XP0GWCT2 <= 10 /* Until end of screen lines*/
       && XP0GW01.SY2CLRID[XP0GWCT1] != "***") /* Or end*/
        XP0GM001.SY2CLRID[XP0GWCT2] = XP0GW01.SY2CLRID[XP0GWCT1];
        XP0GM001.XDMCD[XP0GWCT2] = XP0GW01.XDMCD[XP0GWCT1];
        XP0GM001.SY2CLRAB[XP0GWCT2] = XP0GW01.SY2CLRAB[XP0GWCT1];
        XP0GM001.XLCCD[XP0GWCT2] = XP0GW01.XLCCD[XP0GWCT1];
        XP0GM001.XLCDESC[XP0GWCT2] = XP0GW01.XLCDESC[XP0GWCT1];
        XP0GW02.XP0GWINX[XP0GWCT2] = XP0GW02.XP0GWCT1; /* Save array*/
        if (XP0GW02.XP0GWFFL == "Y") /* If first time thru*/
          XP0GW02.XP0GWSIX = XP0GW02.XP0GWCT1; /* Save last index*/
        end
        set XP0GM001.XP0GMSEL[XP0GWCT2] normal; /* Set selects to normal*/
        XP0GW02.XP0GWCT2 = XP0GW02.XP0GWCT2 + 1; /* Increment screen index*/
        XP0GW02.XP0GWCT1 = XP0GW02.XP0GWCT1 + 1; /* Increment table index*/
      end
      XP0GW02.XP0GWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0GW02.XP0GWCT1 = XP0GW02.XP0GWINX[1] - 1; /* Set up table index*/
      XP0GW02.XP0GWCT2 = 10; /* Set up screen index*/
      while (XP0GW02.XP0GWCT2 >= 1) /* Load from the bottom up*/
        XP0GM001.SY2CLRID[XP0GWCT2] = XP0GW01.SY2CLRID[XP0GWCT1];
        XP0GM001.XDMCD[XP0GWCT2] = XP0GW01.XDMCD[XP0GWCT1];
        XP0GM001.SY2CLRAB[XP0GWCT2] = XP0GW01.SY2CLRAB[XP0GWCT1];
        XP0GM001.XLCCD[XP0GWCT2] = XP0GW01.XLCCD[XP0GWCT1];
        XP0GM001.XLCDESC[XP0GWCT2] = XP0GW01.XLCDESC[XP0GWCT1];
        XP0GW02.XP0GWINX[XP0GWCT2] = XP0GW02.XP0GWCT1; /* Save array*/
        set XP0GM001.XP0GMSEL[XP0GWCT2] normal; /* Set select visible*/
        XP0GW02.XP0GWCT2 = XP0GW02.XP0GWCT2 - 1; /* Decrement screen index*/
        XP0GW02.XP0GWCT1 = XP0GW02.XP0GWCT1 - 1; /* Decrement table index*/
      end
      if (XP0GW02.XP0GWCT1 < 1) /* If the table index was decremented*/
        XP0GW02.XP0GWCT1 = 1; /* to zero, set it to 1*/
      end
    end
  end

  converse XP0GM001 ;
  XP0GW02.XP0GWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XP0GW02.XP0GWCT2 = 1; /* Screen index*/
  while (XP0GW02.XP0GWCT2 <= 10 /* Set all fields with data to normal*/
   && XP0GM001.SY2CLRID[XP0GWCT2] != " ")
    set XP0GM001.XP0GMSEL[XP0GWCT2] normal;
    XP0GW02.XP0GWCT2 = XP0GW02.XP0GWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0GW01.SY2CLRID[XP0GWCT1] == "***") /* And end of table*/
    XP0GW02.XP0GWERR = "Y"; /* Set error flag*/
    XP0GM001.XP0GMTR2 = "   At End of Table";
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0GW02.XP0GWINX[1] <= XP0GW02.XP0GWSIX)
      XP0GW02.XP0GWERR = "Y"; /* Set error flag*/
      XP0GM001.XP0GMTR2 = "   At Beginning of Table";
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0GW02.XP0GWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XP0GW02.XP0GWCT2 = 1; /* Screen index*/
        while (XP0GW02.XP0GWCT2 <= 10) /* Until end of screen data*/
          if (XP0GM001.XP0GMSEL[XP0GWCT2] == "S") /* Check for selection*/
            XP0GW02.XP0GWPIX = XP0GW02.XP0GWINX[XP0GWCT2];
            XP0GW02.XP0GWCT2 = 11; /* End loop*/
          end
          XP0GW02.XP0GWCT2 = XP0GW02.XP0GWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0GW02.XP0GWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0G002

// Initialization - pop up window
Function XP0G003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0GM001 initial; /* Clear the map area*/
  set XP0GW02 empty; /* clear working storage*/
  XP0GW02.XP0GWCT1 = 1; /* Table index*/
  XP0GW02.XP0GWCT2 = 1; /* Screen index*/
  XP0GW02.XP0GWSIX = 0; /* End of first page save index*/
  XP0GW02.XP0GWPIX = 0; /* Initialize pass index to zero*/
  XP0GW02.XP0GWFFL = "Y"; /* first time thru flag*/
  XP0GW02.XP0GWERR = "N"; /* Scroll error flag to no*/
  XP0GW02.XP0GWEND = "N"; /* End of pop up window session flag*/

end // end XP0G003

// select & load valid colors
Function XP0GS01()
   /* ------------------------------------------------------------*/
    /* 1. format current date for lifecycle effective date*/
       /* compare.*/
    /* 2. initialize work table*/
    /* 3. select set of valid colors for specified product gpc,*/
       /* style and dimension.*/
    /* 4. check for valid lifecycle*/
    /* 5. load valid color codes and description to table*/
   /* ------------------------------------------------------------*/

     /* convert system date to ccyymmdd*/

  if (XP0GW01.XP0GW-XLC-EDT == 0) /* If no effective date*/
    XP0GW01.XP0GW-EDT-YMD = VGVar.currentShortGregorianDate;
    if (XP0GW01.XP0GW-EDT-YY > 70) /* if year > 1970*/
      XP0GW01.XP0GW-EDT-CC = 19; /* century is 1900*/
    else
      XP0GW01.XP0GW-EDT-CC = 20; /* century is 2000*/
    end
  end

    /* Set-up Wild-card color id*/

  if (XP0GW01.XP0GW-SEL-COLR-CD1 == " ") /* if blank*/
    XP0GW01.XP0GW-SEL-COLR-CD1 = "?"; /* any value ok*/
  end
  if (XP0GW01.XP0GW-SEL-COLR-CD2 == " ") /* if blank*/
    XP0GW01.XP0GW-SEL-COLR-CD2 = "?"; /* any value ok*/
  end
  if (XP0GW01.XP0GW-SEL-COLR-CD3 == " ") /* if blank*/
    XP0GW01.XP0GW-SEL-COLR-CD3 = "?"; /* any value ok*/
  end

  XP0GW01.XP0GWIX1 = 1; /* init table index*/
  while (XP0GWIX1 <= 200) /* init table fields*/
    XP0GW01.SY2CLRID[XP0GWIX1] = " ";
    XP0GW01.XDMCD[XP0GWIX1] = " ";
    XP0GW01.SY2CLRAB[XP0GWIX1] = " ";
    XP0GW01.XLCCD[XP0GWIX1] = " ";
    XP0GW01.XLCDESC[XP0GWIX1] = " ";
    XP0GWIX1 = XP0GWIX1 + 1; /* increment index*/
  end

  set SY2REC empty; /* Clear DPROD.VCOLOR01 record*/

  SY2REC.XGPCD = XP0GW01.XGPCD; /* load gpc code*/
  SY2REC.SY1STNBR = XP0GW01.SY1STNBR; /* load style number*/
  SY2REC.SY2CLRID = "***";
  if (XP0GW01.XP0GW-SEL-XDM == " ")
    SY2REC.XDMCD = "**";
  else
    SY2REC.XDMCD = XP0GW01.XP0GW-SEL-XDM;
  end

  XP0GS02(); /* select set of DPROD.VCOLOR01 recs*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    return; /* return*/
  end

  XP0GW01.XP0GWIX1 = 1; /* init subscript*/
  SQLCA.VAGen_SQLCODE = 0; /* init status code*/

  while (XP0GWIX1 <= 200 /* load temp table*/
   && SQLCA.VAGen_SQLCODE == 0)
    XP0GS03(); /* fetch next color record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
      XP0GS04(); /* check for selection*/
      if (XP0GW02.XP0GW-SEL-ROW-FL == "Y") /* we want it*/

         /* move color code and description to work table*/
         /* retrieve life cycle description to work table*/

        XP0GW01.SY2CLRID[XP0GWIX1] = SY2REC.SY2CLRID;
        XP0GW01.XDMCD[XP0GWIX1] = SY2REC.XDMCD;
        XP0GW01.SY2CLRAB[XP0GWIX1] = SY2REC.SY2CLRAB;
        if (XP0GW01.XLCCD[XP0GWIX1] in XLCTBL.XLCCD)
          XP0GW01.XLCDESC[XP0GWIX1] = XLCTBL.XLCDESC[sysVar.arrayIndex];
        else
          XP0GW01.XLCDESC[XP0GWIX1] = "DESCR NOT FOUND";
        end
      else
           /* Else, we don't want this row - set the index down*/
           /* by 1 because it will be increased at the end of*/
           /* the routine and we do not want to skip an entry*/
           /* in the XP0G table.*/
        XP0GWIX1 = XP0GWIX1 - 1; /* decrement table index*/
      end

    else
      if (XP0GW01.XP0GWIX1 == 1) /* if first read*/
        XP0GW02.XP0GWERR = "Y"; /* set error flag to 'Y'es*/
        XP0GW02.XP0GWENR = 1; /* set error number*/
        return;
      end
      XP0GW01.SY2CLRID[XP0GWIX1] = "***";
    end
    XP0GWIX1 = XP0GWIX1 + 1; /* increment table index*/
  end

  if (XP0GWIX1 > 200) /* table size may not be enough*/
    XP0GW01.SY2CLRID[200] = "***";
  end

  XP0GS05(); /* close DPROD.VCOLOR01 cursor*/


end // end XP0GS01

// declare cursor for ysmrec
Function XP0GS02()
   /* ------------------------------------------------------------*/
   /* declare cursor for VCOLOR01 Rows*/
   /* ------------------------------------------------------------*/


  try
    call "IO0130" ("S2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0GW02.XP0GWERR = "Y"; /* indicate db2 error has occurred*/
    XP0GW02.XP0GWENR = 2;

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XP0GS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0GW01.XP0GWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0GS02

// fetch ysmrec
Function XP0GS03()
   /* ------------------------------------------------------------*/
   /* Get the next DPROD.VCOLOR01 rec*/
   /* ------------------------------------------------------------*/


  try
    call "IO0130" ("N2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0GW02.XP0GWERR = "Y"; /* indicated db2 error has occurred*/
    XP0GW02.XP0GWENR = 2;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XP0GS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0GW01.XP0GWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0GS03

// validate color lifecycle
Function XP0GS04()
   /* **************************************************/
    /* First, determine current life cycle, then we*/
    /* can check if we're selecting by life cycle and*/
    /* get out if it doesn't match. Then we'll check*/
    /* if user wild-carded the color and check for*/
    /* a valid wild-card match.*/
   /* **************************************************/

  XP0GW02.XP0GW-SEL-ROW-FL = "Y";

  if (SY2REC.SY2CEDT1 <= XP0GW01.XP0GW-XLC-EDT)
    XP0GW01.XLCCD[XP0GWIX1] = SY2REC.XLCCD1;
  else
    if (SY2REC.SY2CEDT2 <= XP0GW01.XP0GW-XLC-EDT)
      XP0GW01.XLCCD[XP0GWIX1] = SY2REC.XLCCD2;
    else
      if (SY2REC.SY2CEDT3 <= XP0GW01.XP0GW-XLC-EDT)
        XP0GW01.XLCCD[XP0GWIX1] = SY2REC.XLCCD3;
      else
        XP0GW01.XLCCD[XP0GWIX1] = SY2REC.XLCCD4;
      end
    end
  end

  if (XP0GW01.XP0GW-SEL-XLC[1] != " ") /* select XLC codes*/
    if (XP0GW01.XLCCD[XP0GWIX1] == XP0GW01.XP0GW-SEL-XLC[1]
     || XP0GW01.XLCCD[XP0GWIX1] == XP0GW01.XP0GW-SEL-XLC[2]
     || XP0GW01.XLCCD[XP0GWIX1] == XP0GW01.XP0GW-SEL-XLC[3]
     || XP0GW01.XLCCD[XP0GWIX1] == XP0GW01.XP0GW-SEL-XLC[4])
      /* Next Sentence (We want this Row)*/
    else
      XP0GW02.XP0GW-SEL-ROW-FL = "N"; /* Don't want it*/
      return;
    end
  end

   /* Now check if user is wild-carding*/
  XP0GW02.XP0GW-WRK-COLR-CD = SY2REC.SY2CLRID;
  if (XP0GW01.XP0GW-SEL-COLR-CD1 != "?" /* Not wild-carded*/
   && XP0GW02.XP0GW-WRK-COLR-CD1 != XP0GW01.XP0GW-SEL-COLR-CD1)
    XP0GW02.XP0GW-SEL-ROW-FL = "N"; /* Don't want it*/
    return;
  end
  if (XP0GW01.XP0GW-SEL-COLR-CD2 != "?" /* Not wild-carded*/
   && XP0GW02.XP0GW-WRK-COLR-CD2 != XP0GW01.XP0GW-SEL-COLR-CD2)
    XP0GW02.XP0GW-SEL-ROW-FL = "N"; /* Don't want it*/
    return;
  end
  if (XP0GW01.XP0GW-SEL-COLR-CD3 != "?" /* Not wild-carded*/
   && XP0GW02.XP0GW-WRK-COLR-CD3 != XP0GW01.XP0GW-SEL-COLR-CD3)
    XP0GW02.XP0GW-SEL-ROW-FL = "N"; /* Don't want it*/
    return;
  end

end // end XP0GS04

// close cursor for ysmrec
Function XP0GS05()
   /* ------------------------------------------------------------*/
   /* close cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO0130" ("C2", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    XP0GW02.XP0GWERR = "Y"; /* indicate db2 error has occurred*/
    XP0GW02.XP0GWENR = 2;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XP0GS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0GW01.XP0GWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end XP0GS05

// get valid colors for a product
Function XP0H001()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* VSYREG01*/
               /* XP0HW01*/
               /* XP0HW02*/
               /* XDRTBL*/
           /* ADD TO MAP GROUP:*/
               /* XP0HM001*/
   /* *************************************************************/

    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with valid region codes.*/
    /* 2. update table with syreg info if requested.*/
    /* 3. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0H003(); /* popup window initialization*/
  XP0HW01.XP0HWHD1 = "    Region & Desc"; /* window heading*/

  XP0HS01(); /* select and load table with regions*/

  if (XP0HW02.XP0HWKEY == "Y")
    XP0HW01.XP0HWHD2 = "Exists";
  else
    XP0HW01.XP0HWHD2 = " ";
  end

  if (XP0HW02.XP0HWERR == "Y") /* if db2 error*/
    return;
  end

  if (XP0HW01.XP0HW-AUTO-SEL-FL == "Y") /* Auto Select on*/
    XP0HWCT1 = 1;
    XP0HWCT2 = 0;
    while (XP0HW01.XDR-PROD-REG-CD[XP0HWCT1] != "99")
      if (XP0HW01.XP0HW-SYREG-FL[XP0HWCT1] == "Y")
        XP0HWCT2 = XP0HWCT2 + 1;
        move XP0HWCT1 to XP0HWPIX withV60Compat;
      end
      XP0HWCT1 = XP0HWCT1 + 1;
    end
    if (XP0HWCT2 == 1) /* Only 1 syreg exists*/
      XP0HW01.XP0HWSEL[XP0HWPIX] = "S"; /* select it*/
      return;
    else
      XP0HWCT1 = 1;
      XP0HWCT2 = 1;
      XP0HWPIX = 0;
    end
  end

  while (XP0HW02.XP0HWEND == "N") /* until end of request*/
    XP0H002(); /* display table values on popup map*/
  end

end // end XP0H001

// converse popup valid colors
Function XP0H002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR VALID REGIONS*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0HW02.XP0HWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XP0HW02.XP0HWFFL == "N") /* if not the first time through*/
      XP0HW02.XP0HWCT1 = XP0HW02.XP0HWINX[10] + 1; /* set up scroll pf8*/
    end

    set XP0HM001 initial; /* Clear map output area*/
    XP0HM001.XP0HMHDR = XP0HW01.XP0HWHDR; /* Place heading on map*/
    XP0HM001.XP0HMTR1 = "              Select & Enter          ";
    XP0HM001.XP0HMTR2 = "   PF7:Back                   PF8:Frwd";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XP0HW02.XP0HWFFL == "Y")    /* Or it is the first time thru*/
      XP0HW02.XP0HWCT2 = 1; /* Set up screen index*/
      while (XP0HW02.XP0HWCT2 <= 10 /* Until end of screen lines*/
       && XP0HW01.XDR-PROD-REG-CD[XP0HWCT1] != "99") /* Or end*/
        XP0HM001.XDR-PROD-REG-CD[XP0HWCT2] = XP0HW01.XDR-PROD-REG-CD[XP0HWCT1];
        XP0HM001.XDR-PROD-REG-DESC[XP0HWCT2] = XP0HW01.XDR-PROD-REG-DESC[XP0HWCT1];
        if (XP0HW01.XP0HW-SYREG-FL[XP0HWCT1] == "Y")
          XP0HW02.XP0HW-XLC = XP0HW01.XLC-LIFE-CYC-CD[XP0HWCT1];
          XP0HM001.XP0HM-DESC[XP0HWCT2] = XP0HW02.XP0HW-DESC;
        else
          if (XP0HW01.XP0HW-SYREG-FL[XP0HWCT1] == "N")
            XP0HM001.XP0HM-DESC[XP0HWCT2] = "No ";
          else
            XP0HM001.XP0HM-DESC[XP0HWCT2] = " ";
          end
        end
        XP0HW02.XP0HWINX[XP0HWCT2] = XP0HW02.XP0HWCT1; /* Save array*/
        if (XP0HW02.XP0HWFFL == "Y") /* If first time thru*/
          XP0HW02.XP0HWSIX = XP0HW02.XP0HWCT1; /* Save last index*/
        end
        set XP0HM001.XP0HMSEL[XP0HWCT2] normal; /* Set selects to normal*/
        XP0HW02.XP0HWCT2 = XP0HW02.XP0HWCT2 + 1; /* Increment screen index*/
        XP0HW02.XP0HWCT1 = XP0HW02.XP0HWCT1 + 1; /* Increment table index*/
      end
      XP0HW02.XP0HWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0HW02.XP0HWCT1 = XP0HW02.XP0HWINX[1] - 1; /* Set up table index*/
      XP0HW02.XP0HWCT2 = 10; /* Set up screen index*/
      while (XP0HW02.XP0HWCT2 >= 1) /* Load from the bottom up*/
        XP0HM001.XDR-PROD-REG-CD[XP0HWCT2] = XP0HW01.XDR-PROD-REG-CD[XP0HWCT1];
        XP0HM001.XDR-PROD-REG-DESC[XP0HWCT2] = XP0HW01.XDR-PROD-REG-DESC[XP0HWCT1];
        if (XP0HW01.XP0HW-SYREG-FL[XP0HWCT1] == "Y")
          XP0HW02.XP0HW-XLC = XP0HW01.XLC-LIFE-CYC-CD[XP0HWCT1];
          XP0HM001.XP0HM-DESC[XP0HWCT2] = XP0HW02.XP0HW-DESC;
        else
          if (XP0HW01.XP0HW-SYREG-FL[XP0HWCT1] == "N")
            XP0HM001.XP0HM-DESC[XP0HWCT2] = "No ";
          else
            XP0HM001.XP0HM-DESC[XP0HWCT2] = " ";
          end
        end
        XP0HW02.XP0HWINX[XP0HWCT2] = XP0HW02.XP0HWCT1; /* Save array*/
        set XP0HM001.XP0HMSEL[XP0HWCT2] normal; /* Set select visible*/
        XP0HW02.XP0HWCT2 = XP0HW02.XP0HWCT2 - 1; /* Decrement screen index*/
        XP0HW02.XP0HWCT1 = XP0HW02.XP0HWCT1 - 1; /* Decrement table index*/
      end
      if (XP0HW02.XP0HWCT1 < 1) /* If the table index was decremented*/
        XP0HW02.XP0HWCT1 = 1; /* to zero, set it to 1*/
      end
    end
  end

  converse XP0HM001 ;
  XP0HW02.XP0HWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* ******  and save selections to table.             *******/
     /* *********************************************************/

  XP0HW02.XP0HWCT2 = 1; /* Screen index*/
  while (XP0HW02.XP0HWCT2 <= 10 /* Set all fields with data to normal*/
   && XP0HM001.XDR-PROD-REG-CD[XP0HWCT2] != " ")
    set XP0HM001.XP0HMSEL[XP0HWCT2] normal;
    XP0HW02.XP0HWCT1 = XP0HW02.XP0HWINX[XP0HWCT2];
    XP0HW01.XP0HWSEL[XP0HWCT1] = XP0HM001.XP0HMSEL[XP0HWCT2];
    XP0HW02.XP0HWCT2 = XP0HW02.XP0HWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XP0HW01.XDR-PROD-REG-CD[XP0HWCT1] == "99") /* End*/
    XP0HW02.XP0HWERR = "Y"; /* Set error flag*/
    XP0HM001.XP0HMTR2 = "   At End of Table";
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XP0HW02.XP0HWINX[1] <= XP0HW02.XP0HWSIX)
      XP0HW02.XP0HWERR = "Y"; /* Set error flag*/
      XP0HM001.XP0HMTR2 = "   At Beginning of Table";
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0HW02.XP0HWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        if (XP0HW01.XP0HWSEL[1] == "A") /* Select All*/
          XP0HW02.XP0HWCT1 = 1;
          while (XP0HW01.XDR-PROD-REG-CD[XP0HWCT1] != "99")
            XP0HW01.XP0HWSEL[XP0HWCT1] = "S";
            XP0HW02.XP0HWCT1 = XP0HW02.XP0HWCT1 + 1;
          end
        end
        XP0HW02.XP0HWCT1 = 1; /* Screen index*/
        while (XP0HW01.XDR-PROD-REG-CD[XP0HWCT1] != "99")
          if (XP0HW01.XP0HWSEL[XP0HWCT1] == "S" /* Check for selection*/
           && XP0HW02.XP0HWPIX == 0)           
            XP0HW02.XP0HWPIX = XP0HW02.XP0HWCT1;
          end
          XP0HW02.XP0HWCT1 = XP0HW02.XP0HWCT1 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0HW02.XP0HWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0H002

// Initialization - pop up window
Function XP0H003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0HM001 initial; /* Clear the map area*/
  set XP0HW02 empty; /* clear working storage*/
  XP0HW02.XP0HWCT1 = 1; /* Table index*/
  XP0HW02.XP0HWCT2 = 1; /* Screen index*/
  XP0HW02.XP0HWSIX = 0; /* End of first page save index*/
  XP0HW02.XP0HWPIX = 0; /* Initialize pass index to zero*/
  XP0HW02.XP0HWFFL = "Y"; /* first time thru flag*/
  XP0HW02.XP0HWRFL = "N"; /* found reg flag*/
  XP0HW02.XP0HWKEY = "N"; /* have reg key flag*/
  XP0HW02.XP0HWERR = "N"; /* Scroll error flag to no*/
  XP0HW02.XP0HWEND = "N"; /* End of pop up window session flag*/
  XP0HW02.XP0HW-LIT = "Yes LC=";

end // end XP0H003

// select & load valid colors
Function XP0HS01()
   /* ------------------------------------------------------------*/
    /* 1. initialize work table*/
    /* 2. read through xdr table and add info from syreg if*/
       /* requested.*/
    /* 3. load description to table*/
   /* ------------------------------------------------------------*/

  XP0HW01.XP0HWIX1 = 1; /* init table index*/
  while (XP0HWIX1 <= 25) /* init table fields*/
    XP0HW01.XP0HWSEL[XP0HWIX1] = " ";
    XP0HW01.XDR-PROD-REG-CD[XP0HWIX1] = " ";
    XP0HW01.XDR-PROD-REG-DESC[XP0HWIX1] = " ";
    XP0HW01.XP0HW-SYREG-FL[XP0HWIX1] = " ";
    XP0HWIX1 = XP0HWIX1 + 1; /* increment index*/
  end

  if (XP0HW01.XGPCD == " "
   || XP0HW01.SY1STNBR == " "
   || XP0HW01.SY2CLRID == " "
   || XP0HW01.XDMCD == " ")
    XP0HW01.XP0HW-ONLY-SYREG-FL = "N";
    XP0HW01.XP0HW-AUTO-SEL-FL = "N";
    XP0HW02.XP0HWKEY = "N";
    XP0HW02.XP0HWRFL = " ";
  else
    VSYREG02.XGP-GPC-CD = XP0HW01.XGPCD;
    VSYREG02.SY-STY-NBR = XP0HW01.SY1STNBR;
    VSYREG02.SY-COLR-CD-ID = XP0HW01.SY2CLRID;
    VSYREG02.XDM-DIM-CD = XP0HW01.XDMCD;
    XP0HW02.XP0HWKEY = "Y";
  end

  XP0HW01.XP0HWIX1 = 1; /* init subscript*/
  XP0HW02.XP0HWCT1 = 1; /* init subscript*/

  while (XP0HWIX1 <= 25 /* load temp table*/
   && XP0HW02.XP0HWERR == "N")
    if (XDRTBL.XDR-PROD-REG-CD[XP0HWCT1] != "99")
      if (XDRTBL.XXX-STAT[XP0HWCT1] == "I"
       || XDRTBL.XDR-PROD-REG-CD[XP0HWCT1]
       in XP0HW01.XP0HW-NOT-XDR-TBL)
         /* Next Sentence*/
      else
        XP0HS02(); /* check for syreg*/
        if (XP0HW01.XP0HW-ONLY-SYREG-FL == "Y"
         && XP0HW02.XP0HWRFL == "N")
           /* Next Sentence*/
        else
          XP0HW01.XDR-PROD-REG-CD[XP0HWIX1] = XDRTBL.XDR-PROD-REG-CD[XP0HWCT1];
          XP0HW01.XDR-PROD-REG-DESC[XP0HWIX1] = XDRTBL.XDR-PROD-REG-DESC[XP0HWCT1];
          XP0HW01.XP0HW-SYREG-FL[XP0HWIX1] = XP0HW02.XP0HWRFL;
          if (XP0HW02.XP0HWRFL == "Y")
            XP0HW01.XLC-LIFE-CYC-CD[XP0HWIX1] = VSYREG02.XLC-LIFE-CYC-CD[1];
          end
          XP0HWIX1 = XP0HWIX1 + 1; /* increment*/
        end
      end
      XP0HWCT1 = XP0HWCT1 + 1;
    else
      XP0HW01.XDR-PROD-REG-CD[XP0HWIX1] = "99"; /* End Marker*/
      XP0HWIX1 = 26; /* done loading*/
    end
  end

  XP0HW01.XP0HWIX1 = 1; /* init subscript*/
  XP0HW02.XP0HWCT1 = 1; /* init subscript*/

  if (XP0HWIX1 > 25) /* table size may not be enough*/
    XP0HW01.XDR-PROD-REG-CD[25] = "99";
  end

   /* Now check to be sure we have something in the table.*/

  if (XP0HW01.XDR-PROD-REG-CD[1] == "99") /* Table is empty*/
    XP0HW02.XP0HWERR = "Y"; /* set error flag*/
    XP0HW02.XP0HWENR = 1; /* and error nbr*/
  end

end // end XP0HS01

// fetch dprod.vsyreg01
Function XP0HS02()
   /* ------------------------------------------------------------*/
   /* Get the DPROD.VSYREG02 rec*/
   /* ------------------------------------------------------------*/

  if (XP0HW02.XP0HWKEY == "N") /* Can't get reg row*/
    return;
  end

  VSYREG02.XDR-PROD-REG-CD = XDRTBL.XDR-PROD-REG-CD[XP0HWCT1];

  try
    call "VSYREG02" ("S ", SQLCA, VSYREG02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP0HW02.XP0HWRFL = "Y";
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        XP0HW02.XP0HWRFL = "N";
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0HW02.XP0HWERR = "Y"; /* indicated db2 error has occurred*/
    XP0HW02.XP0HWENR = 2;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XP0HS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0HW01.XP0HWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0HS02

// get valid colors for a product
Function XP0P001()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* sp1rec*/
               /* xp0pw00*/
               /* xp0pw01*/
           /* ADD TO MAP GROUP:*/
               /* xp0pM001*/
   /* *************************************************************/

    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with valid sales program id's.*/
    /* 2. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0P003(); /* popup window initialization*/
  XP0PW00.XP0PWHDR = "          SALES PGM ID AND DESCRIPTION        "; /* popup window heading*/

  XP0PW00.XP0PWERR = "N"; /* set db2 error flag to no*/
  XP0PS01(); /* select set and load table with valid*/
                                   /* colors*/

  if (XP0PW00.XP0PWERR == "Y") /* if db2 error*/
    return;
  end

  while (XP0PW00.XP0PWEND == "N") /* until end of request*/
    XP0P002(); /* display table values on popup map*/
  end

end // end XP0P001

// converse popup valid colors
Function XP0P002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR valid style colors*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0PW00.XP0PWERR == "N") /* If error flag not yes*/

    set XP0PM001 initial; /* Clear map output area*/
    XP0PM001.XP0PMHDR = XP0PW00.XP0PWHDR; /* Place heading on map*/
    XP0PM001.XP0PMTR1 = "              SELECT & ENTER          ";
    XP0PM001.XP0PMTR2 = "   PF7:BACK                   PF8:FRWD";

    XP0P009(); /* retrieve temp storage*/
    XP0PW00.XP0PWCT1 = 1; /* Set up screen index*/
    while (XP0PW00.XP0PWCT1 < 11) /* Until end of screen lines*/
      XP0PM001.XP0PM-SP1ID[XP0PWCT1] = XP0PW01.XP0PW-SP1ID[XP0PWCT1];
      XP0PM001.XP0PM-SP1NM[XP0PWCT1] = XP0PW01.XP0PW-SP1NM[XP0PWCT1];
      set XP0PM001.XP0PMSEL[XP0PWCT1] normal; /* Set selects to normal*/
      XP0PW00.XP0PWCT1 = XP0PW00.XP0PWCT1 + 1; /* Increment table index*/
    end
    XP0PW00.XP0PWFFL = "N"; /* Set first time flag to no*/
  end

  converse XP0PM001 ;

  XP0PW00.XP0PWERR = "N"; /* Reset error flag*/

  XP0PW00.XP0PWCT2 = 1; /* Screen index*/
  while (XP0PW00.XP0PWCT2 < 11) /* Set all fields with data to normal*/
    set XP0PM001.XP0PMSEL[XP0PWCT2] normal;
    XP0PW00.XP0PWCT2 = XP0PW00.XP0PWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8) /* If PF8 pressed*/
    XP0PW00.XXXTSPAG = XP0PW00.XXXTSPAG + 1;
    if (XP0PW00.XXXTSPAG > XP0PW00.TA5TSQIX) /* Desired greater highest*/
      XP0PW00.XXXTSPAG = XP0PW00.TA5TSQIX; /* Default to highest*/
    end
    return;
  else
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0PW00.XXXTSPAG = XP0PW00.XXXTSPAG - 1;
      if (XP0PW00.XXXTSPAG == 0)
        XP0PW00.XXXTSPAG = 1;
      end
      return;
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0PW00.XP0PWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XP0PW00.XP0PWCT2 = 1; /* Screen index*/
        while (XP0PW00.XP0PWCT2 < 11) /* Until end of screen data*/
          if (XP0PM001.XP0PMSEL[XP0PWCT2] == "S") /* Check for selection*/
            XP0PW00.XP0PWPIX = XP0PW00.XP0PWCT2;
            XP0PW00.XP0PWCT2 = 11; /* End loop*/
          end
          XP0PW00.XP0PWCT2 = XP0PW00.XP0PWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0PW00.XP0PWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0P002

// Initialization - pop up window
Function XP0P003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0PM001 initial; /* Clear the map area*/
  set XP0PW01 empty; /* clear working storage*/
  XP0PW00.XP0PWCT1 = 1; /* Table index*/
  XP0PW00.XP0PWCT2 = 1; /* Screen index*/
  XP0PW00.XP0PWSIX = 0; /* End of first page save index*/
  XP0PW00.XP0PWPIX = 0; /* Initialize pass index to zero*/
  XP0PW00.XP0PWFFL = "Y"; /* first time thru flag*/
  XP0PW00.XP0PWERR = "N"; /* Scroll error flag to no*/
  XP0PW00.XP0PWEND = "N"; /* End of pop up window session flag*/

end // end XP0P003

// Purge any temporary storage
Function XP0P005()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  set XP0PW01 empty; /* M001 display storage*/

  XP0PW00.XP0PW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  XP0PW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "XP0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (XP0PW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P005 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0P"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0P"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0P005

// Fetch next row in the cursor
Function XP0P006()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "IO0070" ("SN", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      XP0PW00.XP0PW-SWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  OZWREC.XXXPRCNM = "P006 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = XP0PM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
  TA1REC.TA1TBLVU = "SP1REC  "; /* Table view name*/
  TA1REC.TA1TBLKE = SP1REC.SP1ID; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0P006

// Save data in display storage
Function XP0P007()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  XP0PW01.XP0PW-SP1ID[XP0PW-IXM] = SP1REC.SP1ID;
  XP0PW01.XP0PW-SP1NM[XP0PW-IXM] = SP1REC.SP1NM;

  XP0PW00.XP0PW-IXM = XP0PW00.XP0PW-IXM + 1; /* Increment index*/
end // end XP0P007

// Add page to temporary storage
Function XP0P008()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  XP0PW01.XXXTSLEN = XP0PW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "XP0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (XP0PW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set XP0PW01 empty; /* M001 display storage*/

    XP0PW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P008 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0P"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0P"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0P008

// Read temporary storage page
Function XP0P009()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  XP0PW01.XXXTSLEN = XP0PW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "XP0P"; /* Application identification*/
  TA5REC.TA5TSQIX = XP0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (XP0PW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P009 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0P"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0P"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0P009

// get valid colors for a product
Function XP0PS01()

  XX0XS01(); /* format ezedate*/

  XP0PW00.XXXTSLEN = 0400;

  if (XP0PW00.XXXTSPAG == 0)
    XP0PW00.XXXTSPAG = 1;
  end

  XP0P005(); /* purge temp storage*/

  set SP1REC empty; /* Clear dspgm.vspgm001  record*/

  XP0PS02(); /* select set of dspgm.vspgm001  recs*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    return; /* return*/
  end

  XP0PW00.XP0PW-IXM = 1;
  XP0PW00.XP0PW-SWC = "N";

  while (XP0PW00.XP0PW-SWC == "N") /* until end of cursor*/

    XP0P006(); /* fetch next row*/

    if (XP0PW00.XP0PW-SWC == "N")
      XP0P007(); /* save data in storage*/
    end

    if (XP0PW00.XP0PW-IXM > 10) /* page is full*/
      XP0P008(); /* add page to temp storage*/
      XP0PW00.XP0PW-IXM = 1;
    end
  end

  if (XP0PW00.XP0PW-IXM > 1) /* page was formatted*/
    XP0P008(); /* add page to temp storage*/
  end

  XP0PS05(); /* close dprodg.vsyclr01 cursor*/

end // end XP0PS01

// get valid colors for a product
Function XP0PS02()
   /* ------------------------------------------------------------*/
   /* declare cursor for syclr01 rec*/
   /* ------------------------------------------------------------*/


  try
    call "IO0070" ("SSAP", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0PW00.XP0PWERR = "Y"; /* indicate db2 error has occurred*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = "XP0P"; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS02"; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0PW01.XP0PW-GROUP; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0PS02

// get valid colors for a product
Function XP0PS05()
   /* ------------------------------------------------------------*/
   /* close cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "IO0070" ("CS", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    XP0PW00.XP0PWERR = "Y"; /* indicate db2 error has occurred*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = "XP0P"; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS05"; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0PW01.XP0PW-GROUP; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end XP0PS05

// OC&D comment pop up window
Function XP0Q001()
   /* *************************************************************/
   /* A. The following must be added to the Host Application*/
   /* for this module to execute successfully:*/
   /* -> Add to Records List:  XP0QW00*/
   /* -> Add to Map Group:     XP0QM001*/
   /*  */
   /* B. Populate XP0QW00.XP0QW-XOMCD before calling XP0Q001.*/
   /* The result of running this process will be stored in*/
   /* XP0QW00.XP0QW-RSN-TEXT.  This is simply a comment field.*/
   /*  */
   /* C. More Usage Notes:*/
   /* 1. It has been observed that unpredictable results*/
   /* occur when testing this, and other pop-ups, using*/
   /* the interactive trace option.  We recommend that*/
   /* you generate the application, then test the pop-up.*/
   /* 2. Ensure that the host-map change reason code has been*/
   /* populated before allowing this pop-up to show.*/
   /* Else, display an error message.  (Message #???)*/
   /*  */
   /* *************************************************************/
   /* PROCESS SYNOPSIS:*/
   /* 1. converse popup window map.*/
   /* ------------------------------------------------------------*/

  XP0Q003(); /* popup window initialization*/
  XP0QW00.XP0QWHDR = "          OC&D COMMENTS                       "; /* popup window heading*/

  while (XP0QW00.XP0QWEND == "N") /* until end of request*/
    XP0Q002(); /* display table values on popup map*/
  end


end // end XP0Q001

// converse popup valid colors
Function XP0Q002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR OC&D COMMENTS*/

      /* 1) If no errors, clear the map*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* *****************************************/
   /* ***  If no errors clear page         ****/
   /* *****************************************/

  if (XP0QW00.XP0QWERR == "N") /* If error flag not yes*/

    set XP0QM001 initial; /* Clear map output area*/
    XP0QM001.XP0QMHDR = XP0QW00.XP0QWHDR; /* Place heading on map*/
    XP0QM001.XP0QMTR1 = "    ENTER COMMENT AND PRESS ENTER     ";

    XP0QM001.XP0QM-XOMCD = XP0QW00.XP0QW-XOMCD;

    if (XP0QM001.XP0QM-XOMCD > " ") /* If chg-CD entered*/
      if (XP0QM001.XP0QM-XOMCD in XOMTBL.XOMCD) /* If code exists*/
        XP0QM001.XP0QM-XOMDESC = XOMTBL.XOMDESC[sysVar.arrayIndex];
      else
        /* next sentence*/
      end
    end

    XP0QW00.XP0QWFFL = "N"; /* Set first time flag to no*/
  end

  converse XP0QM001 ;

  XP0QW00.XP0QWERR = "N"; /* Rset error flag*/

  XP0QW00.XP0QWCT2 = 1; /* Screen index*/

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is enter) /* If enter pressed*/
    XP0QW00.XP0QW-RSN-TEXT = XP0QM001.XP0QM-RSN-TEXT;
    XP0QW00.XP0QWEND = "Y"; /* Set end flag*/

  else
    XP0QW00.XP0QWERR = "Y"; /* set error flag*/
  end


end // end XP0Q002

// Initialization - pop up window
Function XP0Q003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0QM001 initial; /* Clear the map area*/
  XP0QW00.XP0QWCT1 = 1; /* Table index*/
  XP0QW00.XP0QWCT2 = 1; /* Screen index*/
  XP0QW00.XP0QWSIX = 0; /* End of first page save index*/
  XP0QW00.XP0QWPIX = 0; /* Initialize pass index to zero*/
  XP0QW00.XP0QWFFL = "Y"; /* first time thru flag*/
  XP0QW00.XP0QWERR = "N"; /* Scroll error flag to no*/
  XP0QW00.XP0QWEND = "N"; /* End of pop up window session flag*/

end // end XP0Q003

// get valid colors for a product
Function XP0S001()
   /* *************************************************************/
    /* ***  THE FOLLOWING MUST BE ADDED TO THE HOST APPLICATION*/
    /* ***  FOR THIS MODULE TO EXECUTE SUCCESSFULLY*/
           /* ADD TO RECORDS LIST:*/
               /* voclcd01*/
               /* xp0sw00*/
               /* xp0sw01*/
           /* ADD TO MAP GROUP:*/
               /* xp0sM001*/
   /* *************************************************************/

    /* PROCESS SYNOPSIS:*/
    /* 1. select and load table with valid sales program id's.*/
    /* 2. move table values to popup window map and converse*/
       /* popup window map.*/
   /* ------------------------------------------------------------*/

  XP0S003(); /* popup window initialization*/
  XP0SW00.XP0SWHDR = " LETTER DISTRIBUTION CODE AND DESCRIPTION     "; /* popup window heading*/

  XP0SW00.XP0SWERR = "N"; /* set db2 error flag to no*/
  XP0SS01(); /* select set and load table with valid*/
                                   /* colors*/

  if (XP0SW00.XP0SWERR == "Y") /* if db2 error*/
    return;
  end

  while (XP0SW00.XP0SWEND == "N") /* until end of request*/
    XP0S002(); /* display table values on popup map*/
  end

end // end XP0S001

// converse popup valid colors
Function XP0S002()
   /* ------------------------------------------------------------*/

    /* CONVERSE POP UP WINDOW FOR valid style colors*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

      /* Note that the values for the pop-up screen will come*/
       /* from a temporary working storage table and not from*/
       /* a CSP table as normally would be.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XP0SW00.XP0SWERR == "N") /* If error flag not yes*/

    set XP0SM001 initial; /* Clear map output area*/
    XP0SM001.XP0SMHDR = XP0SW00.XP0SWHDR; /* Place heading on map*/
    XP0SM001.XP0SMTR1 = "              SELECT & ENTER          ";
    XP0SM001.XP0SMTR2 = "   PF7:BACK                   PF8:FRWD";

    XP0S009(); /* retrieve temp storage*/
    XP0SW00.XP0SWCT1 = 1; /* Set up screen index*/
    while (XP0SW00.XP0SWCT1 < 11) /* Until end of screen lines*/
      XP0SM001.XP0SM-SOCD-LTR-DIST-CD[XP0SWCT1] = XP0SW01.XP0SW-SOCD-LTR-DIST-CD[XP0SWCT1];
      XP0SM001.XP0SM-SOCD-LTR-DIST-DESC[XP0SWCT1] = XP0SW01.XP0SW-SOCD-LTR-DIST-DESC[XP0SWCT1];
      if (XP0SW01.XP0SW-SOCD-LTR-DIST-CD[XP0SWCT1] > " ")
        set XP0SM001.XP0SMSEL[XP0SWCT1] normal; /* Set selects to normal*/
      else
        set XP0SM001.XP0SMSEL[XP0SWCT1] noHighLight; /* Set selects to dark*/
      end
      XP0SW00.XP0SWCT1 = XP0SW00.XP0SWCT1 + 1; /* Increment table index*/
    end
    XP0SW00.XP0SWFFL = "N"; /* Set first time flag to no*/
  end

  converse XP0SM001 ;

  XP0SW00.XP0SWERR = "N"; /* Reset error flag*/

  XP0SW00.XP0SWCT2 = 1; /* Screen index*/
  while (XP0SW00.XP0SWCT2 < 11) /* Set all fields with data to normal*/
    set XP0SM001.XP0SMSEL[XP0SWCT2] normal;
    XP0SW00.XP0SWCT2 = XP0SW00.XP0SWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8) /* If PF8 pressed*/
    XP0SW00.XXXTSPAG = XP0SW00.XXXTSPAG + 1;
    if (XP0SW00.XXXTSPAG > XP0SW00.TA5TSQIX) /* Desired greater highest*/
      XP0SW00.XXXTSPAG = XP0SW00.TA5TSQIX; /* Default to highest*/
    end
    return;
  else
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XP0SW00.XXXTSPAG = XP0SW00.XXXTSPAG - 1;
      if (XP0SW00.XXXTSPAG == 0)
        XP0SW00.XXXTSPAG = 1;
      end
      return;
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XP0SW00.XP0SWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XP0SW00.XP0SWCT2 = 1; /* Screen index*/
        while (XP0SW00.XP0SWCT2 < 11) /* Until end of screen data*/
          if (XP0SM001.XP0SMSEL[XP0SWCT2] == "S") /* Check for selection*/
            XP0SW00.XP0SWPIX = XP0SW00.XP0SWCT2;
            XP0SW00.XP0SWCT2 = 11; /* End loop*/
          end
          XP0SW00.XP0SWCT2 = XP0SW00.XP0SWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XP0SW00.XP0SWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XP0S002

// Initialization - pop up window
Function XP0S003()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XP0SM001 initial; /* Clear the map area*/
  set XP0SW01 empty; /* clear working storage*/
  XP0SW00.XP0SWCT1 = 1; /* Table index*/
  XP0SW00.XP0SWCT2 = 1; /* Screen index*/
  XP0SW00.XP0SWSIX = 0; /* End of first page save index*/
  XP0SW00.XP0SWPIX = 0; /* Initialize pass index to zero*/
  XP0SW00.XP0SWFFL = "Y"; /* first time thru flag*/
  XP0SW00.XP0SWERR = "N"; /* Scroll error flag to no*/
  XP0SW00.XP0SWEND = "N"; /* End of pop up window session flag*/

end // end XP0S003

// Purge any temporary storage
Function XP0S005()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/

  set XP0SW01 empty; /* M001 display storage*/

  XP0SW00.XP0SW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  XP0SW00.TA5TSQIX = 0; /* Highest page number*/

  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "XP0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (XP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P005 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0S"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0S"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0S005

// Fetch next row in the cursor
Function XP0S006()
  /* ------------------------------------------------------------*/
  /* Fetch the next row to display from the table.*/
  /* ------------------------------------------------------------*/

  try
    call "VOCLCD01" ("N1", SQLCA, VOCLCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  /* ------------------------------------------------------------*/
  /* If the call was successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      XP0SW00.XP0SW-SWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  OZWREC.XXXPRCNM = "P006 "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    // VAGen Info - map = XP0SM001
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDCD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOCLCD01"; /* Table view name*/
  /* VE DORDCD.VOCLCD01-SOCD-LTR-DIST-CD TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0S006

// Save data in display storage
Function XP0S007()
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/

  XP0SW01.XP0SW-SOCD-LTR-DIST-CD[XP0SW-IXM] = VOCLCD01.SOCD-LTR-DIST-CD;
  XP0SW01.XP0SW-SOCD-LTR-DIST-DESC[XP0SW-IXM] = VOCLCD01.SOCD-LTR-DIST-DESC;

  XP0SW00.XP0SW-IXM = XP0SW00.XP0SW-IXM + 1; /* Increment index*/
end // end XP0S007

// Add page to temporary storage
Function XP0S008()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  XP0SW01.XXXTSLEN = XP0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "XP0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (XP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set XP0SW01 empty; /* M001 display storage*/

    XP0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P008 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0S"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0S"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0S008

// Read temporary storage page
Function XP0S009()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/

  XP0SW01.XXXTSLEN = XP0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "XP0S"; /* Application identification*/
  TA5REC.TA5TSQIX = XP0SW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (XP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  OZWREC.XXXPRCNM = "P009 "; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = "XP0S"; /* Program application*/
  TA1REC.TA1PGMNO = OZWREC.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = "XP0S"; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end XP0S009

// get valid colors for a product
Function XP0SS01()

  XX0XS01(); /* format ezedate*/

  XP0SW00.XXXTSLEN = 0330;

  if (XP0SW00.XXXTSPAG == 0)
    XP0SW00.XXXTSPAG = 1;
  end

  XP0S005(); /* purge temp storage*/

  set VOCLCD01 empty; /* Clear dordcd.voclcd01 record*/

  XP0SS02(); /* select set of dordcd.voclcd01 recs*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error in db2 select*/
    return; /* return*/
  end

  XP0SW00.XP0SW-IXM = 1;
  XP0SW00.XP0SW-SWC = "N";

  while (XP0SW00.XP0SW-SWC == "N") /* until end of cursor*/

    XP0S006(); /* fetch next row*/

    if (XP0SW00.XP0SW-SWC == "N")
      XP0S007(); /* save data in storage*/
    end

    if (XP0SW00.XP0SW-IXM > 10) /* page is full*/
      XP0S008(); /* add page to temp storage*/
      XP0SW00.XP0SW-IXM = 1;
    end
  end

  if (XP0SW00.XP0SW-IXM > 1) /* page was formatted*/
    XP0S008(); /* add page to temp storage*/
  end

  XP0SS05(); /* close dordcd.voclcd01 cursor*/

end // end XP0SS01

// get valid colors for a product
Function XP0SS02()
   /* ------------------------------------------------------------*/
   /* declare cursor for syclr01 rec*/
   /* ------------------------------------------------------------*/


  try
    call "VOCLCD01" ("S1", SQLCA, VOCLCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    XP0SW00.XP0SWERR = "Y"; /* indicate db2 error has occurred*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = "XP0S"; /* Program application*/
  TA1REC.TA1PGMNO = "XSPGS02"; /* Program number*/
  TA1REC.TA1DBASE = "DORDCD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOCLCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0SW01.XP0SW-GROUP; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end XP0SS02

// get valid colors for a product
Function XP0SS05()
   /* ------------------------------------------------------------*/
   /* close cursor for ysmrec*/
   /* ------------------------------------------------------------*/


  try
    call "VOCLCD01" ("C1", SQLCA, VOCLCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(75); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(76); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    XP0SW00.XP0SWERR = "Y"; /* indicate db2 error has occurred*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLSOE THE TABLE CSR";
  TA1REC.TA1PGMAP = "XP0S"; /* Program application*/
  TA1REC.TA1PGMNO = "XPOSS05"; /* Program number*/
  TA1REC.TA1DBASE = "DORDCD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOCLCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP0SW01.XP0SW-GROUP; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end XP0SS05

// Application initialization
Function XPAB001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* set segmented transaction id*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* segmented trans id setting*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set XP1REC empty;
  set SQLCA empty;

  if (COMMAREA.CAFRMSYS == "AB" /* Came from within the system*/
   || COMMAREA.CAFRMSYS == "AE") /* Came from within the system*/
    XP1REC.XP1GROUP = COMMAREA.CAUSERA; /* Restore work record*/
  else
    /* --- If transfer from outside of 'AB' assign GPC ---*/
    if (COMMAREA.XGPCD != " ") /* if GPC comes in on COMMAREA*/
      XP1REC.XGPCD = COMMAREA.XGPCD;
    else /* ELSE(COMMAREA does not contain GPC)*/
      /* *************************************************************/
      /* ***** The following code put in to insure that a valid ******/
      /* ***** GPC code is always available for all AB Appl's.  ******/
      /* ***** If AB ever needs to work on any other GPC's,     ******/
      /* ***** the following code will have to be modified.     ******/
      /* *************************************************************/
      XP1REC.XGPCD = "03"; /* assign GPC = '03' - APPAREL*/
      COMMAREA.XGPCD = "03";
      /* *************************************************************/
    end /* END of "IF" statement*/
    XP1REC.XP1SLASH = "/"; /* assign 'slash' literal in XP1REC*/
  end

   /* ------------------------------------------------------------*/
   /* Get Two Charactor Scheduler Code From DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/
  if (XP1REC.PG1SC4CD == "  ") /* If SCHEDULER CODE BLANK*/
    XP1REC.XXXUSER = COMMAREA.CAUSERID; /* Move CICS SIGNON ID*/
    XPAB010(); /* Get 2 Digit Sched Code*/
  end /* End of "IF" statement*/

   /* ------------------------------------------------------------*/
   /* initialize warehouse code to '**'*/
   /* ------------------------------------------------------------*/
  XP1REC.XWHCD = "**"; /* init warehouse cd*/

   /* ------------------------------------------------------------*/
   /* Get current season, year, and buy month if not passed*/
   /* ------------------------------------------------------------*/
  set AB3REC empty; /* Initialize AB3REC*/
  if (XP1REC.XSECD == "  " /* If SEASON CODE BLANK*/
   || XP1REC.XSNYR == 0    /* OR SEASON-YEAR is zero*/
   || XP1REC.AB3BUYMO == 0) /* OR BUY-MONTH is zero*/
    XPAB020(); /* Get Current XSE/XSN/BUY-MO*/
  end /* End of "IF" statement*/

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


   /* ----------------------------------------**/
    /* Obtain userid and system information  **/
   /* ----------------------------------------**/

  set TA3REC empty; /* Initialize subroutine params*/
  TA3REC.TA3OPTN = "ALLFLDS"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user info*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || TA3REC.TA3RTNCD != 0)          /* or non-zero return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Post error to diagnosis fcty*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine params*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Error type*/
    TA1REC.TA1LOC = "UNABLE TO OBTAIN USER INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = "XPAB001"; /* Program name*/
    TA1REC.TA1PGMNO = "001"; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    COMMAREA.CATOAP = "AB0A"; /* Application menu*/

    XSABS01(); /* Exit to application*/

    exit program; /* Severe error return to cics*/

  end


  /* restored from prodmsl on 08/27/1998*/
end // end XPAB001

// Get SCHEDULER CODE For Sched.
Function XPAB010()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  X P A B 0 1 0                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on a valid CICS SIGNON ID. In order to  ****/
   /* ***** use this process the APPLICATION must use the      ****/
   /* ***** following CSP records:                             ****/
   /* *****           AFWREC...AB, AF COMMON RECORD            ****/
   /* *****           PG1REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** To use this process move the SIGNON in question to ****/
   /* ***** XP1REC.XXXUSER and PERFORM XPAB010. This process   ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* Indicate 'GET SCHEDULER CODE'*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/
  PG1REC.XXXUSER = XP1REC.XXXUSER; /* CICS USER SIGNON ID*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Move Value to XP1REC.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end XPAB010

// Get Current XSE/XSN/BUY-MONTH
Function XPAB020()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  X P A B 0 2 0                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the current XSE_SESN_CD ****/
   /* ***** XSN_SESN_YR_RNG and AB_BUY_MO from the             ****/
   /* ***** DABUY.VSCTL001(APPAREL BUY CONTROL TABLE) This     ****/
   /* ***** PROCESS needs the following CSP records:           ****/
   /* *****           ABWREC...AB COMMON RECORD                ****/
   /* *****           AB3REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** To use this process move the be sure that XP1REC   ****/
   /* ***** contains the correct SCHEDULER CODE(PG1SC4CD)      ****/
   /* ***** RETURN CODES ARE:                                  ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The current SEASON/SEASON-YEAR/BUY-MONTH will be   ****/
   /* ***** returned in XP1REC.XSECD, XSNYR, AB3BUYMO          ****/
   /* ***** This process executes all error handling required. ****/
   /* Y2KFIX    12/11/97  KSUMME   Y2K MODIFICATIONS TO:*/
   /* IO3600 changed to vsctl002 due to*/
   /* table change.*/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set AB3REC empty; /* Clear row storage area*/

  AB3REC.PG1SC4CD = XP1REC.PG1SC4CD; /* SCHEDULER CODE*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DABUY.VSCTL001*/
   /* ------------------------------------------------------------*/

   /* ----------- Y2K OUT BEGIN -----------------------------------*/
   /*  */
   /* CALL IO3600 'S ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /*  */
   /* ----------- Y2K OUT END -------------------------------------*/
   /* ----------- Y2K IN BEGIN ------------------------------------*/
   /*  */
  try
    call "VSCTL002" ("S ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /*  */
   /* ----------- Y2K IN END --------------------------------------*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.XSECD = AB3REC.XSECD; /* Move Value to XP1REC.*/
          XP1REC.XSNYR = AB3REC.XSNYR; /* Move Value to XP1REC.*/
          XP1REC.XP1XSNYR = AB3REC.XSNYR; /* Move Value to XP1REC.*/
          XP1REC.AB3BUYMO = AB3REC.AB3BUYMO; /* Move Value to XP1REC.*/

          /* *************************************************************/
          /* *****    Reformat Buy-Month to format MM/YY for map    ******/
          /* *************************************************************/
          XP1REC.XP1BUYMO = XP1REC.AB3BUYMO;
          XP1REC.XP1CBYYY = XP1REC.XP1BUYYY;
          XP1REC.XP1CBYMM = XP1REC.XP1BUYMM;
          /* *************************************************************/

          XSABSSE(); /* EDIT XSECD and get season*/
                                 /* ;           NAME and ABRV.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE IF CALL WAS OKAY ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB020"; /* Process name*/
  TA1REC.TA1LOC = "SELECT FROM CONTROL TABLE";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCNT001"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.PG1SC4CD; /* MOVE SCHED-CD to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end XPAB020

// Application initialization
Function XPAF001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Set CICS "start transaction id"*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set start transaction id*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set XP1REC empty;

  if (COMMAREA.CAFRMSYS == "AF") /* Came from within the system*/
    XP1REC.XP1GROUP = COMMAREA.CAUSERA; /* Restore work record*/
  else
    /* NEXT SENTENCE*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPAF001

// Get FORECASTER for APRL FCST.
Function XPAF010()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  X P A F 0 1 0                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit FORECASTER****/
   /* ***** CODE based on a valid CICS SIGNON ID. In order to  ****/
   /* ***** use this process the APPLICATION must use the      ****/
   /* ***** following CSP records:                             ****/
   /* *****           AFWREC...AB, AF COMMON RECORD            ****/
   /* *****           PG1REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** To use this process move the SIGNON in question to ****/
   /* ***** XP1REC.XXXUSER and PERFORM XPAF010. This process   ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit forecaster code, if found, will be   ****/
   /* ***** returned in XP1REC.PG1FCTCD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* SCHEDULER CODE must be blank*/
  PG1REC.PG1FCTCD = "**"; /* Indicate 'Get FORECASTER CODE'*/
  PG1REC.XXXUSER = XP1REC.XXXUSER; /* CICS USER SIGNON ID*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move Value to XP1REC.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAF010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1FCTCD FROM SIGNON";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end XPAF010

// Get Current XSE/XSN/BUY-MONTH
Function XPAF020()
   /* *************************************************************/
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  X P A F 0 2 0                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the current             ****/
   /* ***** XSN_SESN_CD and XSN_SESN_YR_RNG from the           ****/
   /* ***** DACAST.VAFCTL01 (Apparel forecast systen table).   ****/
   /* ***** PROCESS needs the following CSP records:           ****/
   /* *****           AFWREC...AF COMMON RECORD                ****/
   /* *****           AF34EC...DACAST.VAFCTL01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** RETURN CODES ARE:                                  ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The current SEASON-CODE SEASON-YEAR will be        ****/
   /* ***** returned in XP1REC.XSECD, XSNYR                    ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* SET AF4REC EMPTY;                /* Clear row storage area*/
   /* CALL IO0920 'S ',SQLCA,AF4REC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* ;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set VAFCTL02 empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DACAST.VAFCTL03*/
   /* ------------------------------------------------------------*/

  try
    call "VAFCTL03" ("S ", SQLCA, VAFCTL02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.XSECD = VAFCTL02.AF4CSNCD; /* Move Value to XP1REC.*/
          XP1REC.XSNYR = VAFCTL02.AF4CSNYR; /* Move Value to XP1REC.*/


          XP1REC.XXXSTAT = " ";
          XP1REC.XSEABRV = " ";
          XP1REC.XSEDESC = " ";

          if (XP1REC.XSECD in XSETBL.XSECD) /* EDIT XSECD and get season*/
            XP1REC.XSECD = XSETBL.XSECD[sysVar.arrayIndex]; /* name and abrv*/
            XP1REC.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
            XP1REC.XSEABRV = XSETBL.XSEABRV[sysVar.arrayIndex];
            XP1REC.XXXSTAT = XSETBL.XXXSTAT[sysVar.arrayIndex];
          else
            XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
          end
          if (XP1REC.XXXSTAT != "A") /* If not active status*/
            XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
          end

          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE IF CALL WAS OKAY ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAF020"; /* Process name*/
  TA1REC.TA1LOC = "SELECT FROM CONTROL TABLE";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCTL03"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end XPAF020

// Get nxt typ,g/a,lin,cat & silh
Function XPAF100()
   /* ------------------------------------------------------------*/
   /* *************************************************************/
   /* ------------------------------------------------------------*/
         /* GET NEXT PRODUCT TYPE, GENDER/AGE, PRODUCT LINE,*/
                  /* CATEGORY AND SILHOUETTE*/

     /* This process is designed to return the next typ, g/a,*/
   /* line, cat and silh code combination in sequence given a*/
   /* passed set of codes.*/

    /* 1. AF9REC is required to be included in the application*/
        /* when using this process.  It must be set clear prior*/
        /* to the first perform of this process whenever new*/
        /* start keys are specified by the user.*/

    /* 2. AF9REC.AF9FSTID will have to be initialized to 'y'*/
        /* after each converse of the map.*/

    /* 3. The user must move the current keys to AF9REC fields;*/

          /* MOVE "TYP" TO AF9REC.XPRCD*/
          /* MOVE "G/A" TO AF9REC.XGACD*/
          /* MOVE "LIN" TO AF9REC.XPLCD*/
          /* MOVE "CAT" TO AF9REC.XPCCD*/
          /* MOVE "SIL" TO AF9REC.XSUCD*/
          /* PERFORM XPAF100*/

    /* 4. The process will return the index positions in the*/
        /* tables of the next typ, g/a, lin, cat, and silh*/
        /* codes within AF9REC fields and also 'y'-'n'*/
        /* indicators telling if any tables have started over.*/
        /* (i.e., A code of 99 has been encountered.)*/

          /* AF9TPIXM   -   PRODUCT TYPE TABLE INDEX*/
          /* AF9GAIXM   -   GENDER/AGE TABLE INDEX*/
          /* AF9LNIXM   -   PRODUCT LINE TABLE INDEX*/
          /* AF9PCIXM   -   CATEGORY TABLE INDEX*/
          /* AF9SUIXM   -   SILHOUETTE TABLE INDEX*/

          /* AF9TYP99   -   LAST PRODUCT TYPE ENCOUNTERED SWITCH*/
          /* AF9GAG99   -   LAST GENDER/AGE ENCOUNTERED SWITCH*/
          /* AF9LIN99   -   LAST PRODUCT LINE ENCOUNTERED SWITCH*/
          /* AF9CAT99   -   LAST CATEGORY ENCOUNTERED SWITCH*/
          /* AF9SIL99   -   LAST SILHOUETTE ENCOUNTERED SWITCH*/

   /* ------------------------------------------------------------*/
   /* *************************************************************/
   /* ------------------------------------------------------------*/


   /* *******************************************/
    /* Reset last encountered switches.       **/
   /* *******************************************/

  AF9REC.AF9TYP99 = "N"; /* Reset last typ encountered switch*/
  AF9REC.AF9GAG99 = "N"; /* Reset last g/a encountered switch*/
  AF9REC.AF9LIN99 = "N"; /* Reset last lin encountered switch*/
  AF9REC.AF9CAT99 = "N"; /* Reset last cat encountered switch*/
  AF9REC.AF9SIL99 = "N"; /* Reset last sil encountered switch*/


   /* *******************************************/
    /* If first call to process for new keys, **/
    /* then return indexes for current user   **/
    /* entered codes.                         **/
   /* *******************************************/
  if (AF9REC.AF9TPIXM <= 0 /* If indexes are initialized*/
   && AF9REC.AF9GAIXM <= 0 
   && AF9REC.AF9LNIXM <= 0 
   && AF9REC.AF9PCIXM <= 0 
   && AF9REC.AF9SUIXM <= 0)

    if (AF9REC.XPRCD == "  ") /* If typ code was not passed*/
      AF9REC.AF9TPIXM = 1;
      AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
      XSAFS10();
    else
      if (AF9REC.XPRCD in XPRTBL.XPRCD) /* If typ code was passed*/
        AF9REC.AF9TPIXM = sysVar.arrayIndex;
        AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
        XSAFS10();
      end
    end

    if (AF9REC.XGACD == "  ") /* If g/a code was not passed*/
      AF9REC.AF9GAIXM = 1;
      AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
      XSAFS10();
    else
      if (AF9REC.XGACD in XGATBL.XGACD) /* If g/a code was passed*/
        AF9REC.AF9GAIXM = sysVar.arrayIndex;
        AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
        XSAFS10();
      end
    end

    if (AF9REC.XPLCD == "  ") /* If lin code was not passed*/
      AF9REC.AF9LNIXM = 1;
      AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
      XSAFS10();
    else
      if (AF9REC.XPLCD in XPLTBL.XPLCD) /* If lin code was passed*/
        AF9REC.AF9LNIXM = sysVar.arrayIndex;
        AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
        XSAFS10();
      end
    end

    if (AF9REC.XPCCD == "  ") /* If category code was not passed*/
      AF9REC.AF9PCIXM = 1;
      AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
      XSAFS10();
    else
      if (AF9REC.XPCCD in XPCTBL.XPCCD) /* If category code was passed*/
        AF9REC.AF9PCIXM = sysVar.arrayIndex;
        AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
        XSAFS10();
      end
    end

    if (AF9REC.XSUCD == "  ") /* If silh code was not passed*/
      AF9REC.AF9SUIXM = 1;
      AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
      XSAFS10();
    else
      AF9REC.XGPCD = "03";
      AF9REC.AF9TBCD = AF9REC.XSUCD;

      if (AF9REC.AF9TBKEY in XSUTBL.XSUKEY) /* If silh code was passed*/
        AF9REC.AF9SUIXM = sysVar.arrayIndex;
        AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
        XSAFS10();
      end
    end

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If PF15 pressed to indicate next typ,  **/
    /* then process for next typ.             **/
   /* *******************************************/
  if (converseVar.eventKey is pf15
   && AF9REC.AF9FSTID == "Y") /* and first call to process*/

    AF9REC.AF9TPIXM = AF9REC.AF9TPIXM + 1; /* Increment typ index*/
    AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
    XSAFS10();

    if (XPRTBL.XPRCD[AF9TPIXM] == "99") /* If EOT then start over*/
      AF9REC.AF9TYP99 = "Y"; /* Set last typ switch*/
      AF9REC.AF9TPIXM = 1;
      AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
      XSAFS10();
    end

    AF9REC.AF9GAIXM = 1; /* Reset g/a index*/
    AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9LNIXM = 1; /* Reset pr lin index*/
    AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9PCIXM = 1; /* Reset pr cat index*/
    AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9SUIXM = 1; /* Reset silh index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If PF16 pressed to indicate next g/a,  **/
    /* then process for next g/a.             **/
   /* *******************************************/
  if (converseVar.eventKey is pf16
   && AF9REC.AF9FSTID == "Y") /* and  first call to process*/

    AF9REC.AF9GAIXM = AF9REC.AF9GAIXM + 1; /* Increment g/a index*/
    AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
    XSAFS10();

    if (XGATBL.XGACD[AF9GAIXM] == "99") /* If EOT then start over*/
      AF9REC.AF9GAG99 = "Y"; /* Set last g/a  switch*/
      AF9REC.AF9GAIXM = 1;
      AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
      XSAFS10();
    end

    AF9REC.AF9LNIXM = 1; /* Reset pr lin index*/
    AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9PCIXM = 1; /* Reset pr cat index*/
    AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9SUIXM = 1; /* Reset silh index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If PF17 pressed to indicate next lin,  **/
    /* then process for next lin.             **/
   /* *******************************************/
  if (converseVar.eventKey is pf17
   && AF9REC.AF9FSTID == "Y") /* and first call to process*/

    AF9REC.AF9LNIXM = AF9REC.AF9LNIXM + 1; /* Increment lin index*/
    AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
    XSAFS10();

    if (XPLTBL.XPLCD[AF9LNIXM] == "99") /* If EOT then start over*/
      AF9REC.AF9LIN99 = "Y"; /* Set last lin switch*/
      AF9REC.AF9TPIXM = 1;
      AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
      XSAFS10();
    end

    AF9REC.AF9PCIXM = 1; /* Reset pr cat index*/
    AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
    XSAFS10();

    AF9REC.AF9SUIXM = 1; /* Reset silh index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If PF18 pressed to indicate next cat,  **/
    /* then process for next cat.             **/
   /* *******************************************/
  if (converseVar.eventKey is pf18
   && AF9REC.AF9FSTID == "Y") /* and  first call to process*/

    AF9REC.AF9PCIXM = AF9REC.AF9PCIXM + 1; /* Increment cat index*/
    AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
    XSAFS10();

    if (XPCTBL.XPCCD[AF9PCIXM] == "99") /* If EOT then start over*/
      AF9REC.AF9CAT99 = "Y"; /* Set last cat switch*/
      AF9REC.AF9PCIXM = 1;
      AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
      XSAFS10();
    end

    AF9REC.AF9SUIXM = 1; /* Reset silh index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If PF19 pressed to indicate next sil,  **/
    /* then process for next sil.             **/
   /* *******************************************/
  if (converseVar.eventKey is pf19
   && AF9REC.AF9FSTID == "Y") /* and first call to process*/

    AF9REC.AF9SUIXM = AF9REC.AF9SUIXM + 1; /* Increment sil index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    if (XSUTBL.XSUCD[AF9SUIXM] == "99") /* If EOT then start over*/
      AF9REC.AF9SIL99 = "Y"; /* Set last silh switch*/
      AF9REC.AF9SUIXM = 1;
      AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
      XSAFS10();
    end

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

    return;
  end


   /* *******************************************/
    /* If ENTER pressed to indicate next      **/
    /* logical sequence codes, then process   **/
    /* for next combination of codes.         **/
   /* *******************************************/
  if (converseVar.eventKey is enter
   || AF9REC.AF9FSTID == "N") /* and first call to process*/

    AF9REC.AF9SUIXM = AF9REC.AF9SUIXM + 1; /* Increment sil index*/
    AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
    XSAFS10();

    if (XSUTBL.XSUCD[AF9SUIXM] == "99") /* If EOT then start silh over*/
      AF9REC.AF9SIL99 = "Y"; /* Set last silh switch*/
      AF9REC.AF9SUIXM = 1;
      AF9REC.AF9TBLID = "S"; /* Process for first valid code*/
      XSAFS10();

      AF9REC.AF9PCIXM = AF9REC.AF9PCIXM + 1; /* Increment cat index*/
      AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
      XSAFS10();

      if (XPCTBL.XPCCD[AF9PCIXM] == "99") /* If EOT then start cat over*/
        AF9REC.AF9CAT99 = "Y"; /* Set last cat switch*/
        AF9REC.AF9PCIXM = 1;
        AF9REC.AF9TBLID = "C"; /* Process for first valid code*/
        XSAFS10();

        AF9REC.AF9LNIXM = AF9REC.AF9LNIXM + 1; /* Increment lin index*/
        AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
        XSAFS10();

        if (XPLTBL.XPLCD[AF9LNIXM] == "99") /* If EOT then start lin over*/
          AF9REC.AF9LIN99 = "Y"; /* Set last lin switch*/
          AF9REC.AF9LNIXM = 1;
          AF9REC.AF9TBLID = "L"; /* Process for first valid code*/
          XSAFS10();

          AF9REC.AF9GAIXM = AF9REC.AF9GAIXM + 1; /* Increment g/a index*/
          AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
          XSAFS10();

          if (XGATBL.XGACD[AF9GAIXM] == "99") /* If EOT then start g/a over*/
            AF9REC.AF9GAG99 = "Y"; /* Set last g/a switch*/
            AF9REC.AF9GAIXM = 1;
            AF9REC.AF9TBLID = "G"; /* Process for first valid code*/
            XSAFS10();

            AF9REC.AF9TPIXM = AF9REC.AF9TPIXM + 1; /* Increment typ index*/
            AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
            XSAFS10();

            if (XPRTBL.XPRCD[AF9TPIXM] == "99")
                                   /* If EOT then start typ over*/
              AF9REC.AF9TYP99 = "Y"; /* Set last typ switch*/
              AF9REC.AF9TPIXM = 1;
              AF9REC.AF9TBLID = "T"; /* Process for first valid code*/
              XSAFS10();

            end
          end
        end
      end
    end

    /* *******************************************/
      /* Reset first time thru indicator to     **/
      /* 'no'.                                  **/
    /* *******************************************/

    AF9REC.AF9FSTID = "N"; /* Reset to no*/

  end


end // end XPAF100

// Initial entry into program
Function XPAS-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* set segmented transaction id*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* segmented trans id setting*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACURRAP == "AS0E")
    if (COMMAREA.CAFROMAP != "AS0B"
     && COMMAREA.CAFROMAP != "AS0C"
     && COMMAREA.CAFROMAP != "AS0D")
      COMMAREA.CATOAP = "AS0A";
      XPAS-39999();
    end
  end


  set AS1REC empty;
  set SQLCA empty;

  if (COMMAREA.CAFRMSYS == "AS")
    AS1REC.AS1-CAUSERA = COMMAREA.CAUSERA;
  end

  if (COMMAREA.XGPCD != " ")
    AS1REC.XGPCD = COMMAREA.XGPCD;
  else
    AS1REC.XGPCD = "03";
    COMMAREA.XGPCD = "03";
  end

  ASWREC.ASW-SLASH1 = "/";
  ASWREC.ASW-SLASH2 = "/";
  ASWREC.ASW-PCT-PCT = "%";
  AS1REC.XDMCD = "00";
  AS1REC.XWHCD = "51";
  AS1REC.AS1-MSG-NO = 0;


   /* ------------------------------------------------------------*/
   /* Get Two Charactor Scheduler Code From DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACURRAP != "AS0E")
    if (AS1REC.PG1SC4CD == "  ") /* No sched code*/
      AS1REC.XXXUSRID = COMMAREA.CAUSERID; /* CICS SIGNON ID*/
      XPAS-51100(); /* Get Sched Code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


   /* ----------------------------------------**/
    /* Obtain userid and system information  **/
   /* ----------------------------------------**/

  ASWREC.ASW-EZEDTE = VGVar.currentShortGregorianDate; /* move system date to aswrec*/

  set TA3REC empty; /* Initialize subroutine params*/
  TA3REC.TA3OPTN = "ALLFLDS"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user info*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || TA3REC.TA3RTNCD != 0)          /* or non-zero return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Post error to diagnosis fcty*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine params*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Error type*/
    TA1REC.TA1LOC = "UNABLE TO OBTAIN USER INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = "XPAS010"; /* Program name*/
    TA1REC.TA1PGMNO = "001"; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    COMMAREA.CATOAP = "AB0A"; /* Application menu*/

    XPAS-39999(); /* Exit to application*/

    exit program; /* Severe error return to cics*/

  end


end // end XPAS-00000

// exit to another application
Function XPAS-39999()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AS0E")
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        else
          if (COMMAREA.CACURRAP == "AS0A") /* and main application menu*/
            COMMAREA.CATOAP = "AB0A"; /* Indicate Master Menu*/
          else
            if (COMMAREA.CACURRAP == "AS0N") /* color inquiry*/
              COMMAREA.CATOAP = "AS0S"; /* style inquiry*/
            else
              COMMAREA.CATOAP = "AS0A";
            end
          end
        end
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AS") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = AS1REC.AS1-CAUSERA;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  if (AS1REC.AS1-MSG-NO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(AS1REC.AS1-MSG-NO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XPAS-39999

// Valid SCHED
Function XPAS-51100()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****          X P A S - S C H E D - C D                 ****/
   /* *****                                                    ****/
   /* ***** This PROCESS retrieves the two digit SCHEDULER     ****/
   /* ***** CODE and uses the following CSP records:           ****/
   /* *****           AS1REC...AS COMMON RECORD                ****/
   /* *****           PG1REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* ***** Move the USERID to AS1REC.AS1-XXX-USER and PERFORM ****/
   /* ***** XPAS-02010.                                        ****/
   /* ***** The process will return one of the following       ****/
   /* ***** RETURN CODES:                                      ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, will be returned in  ****/
   /* ***** AS1REC.AS1-PG-SCHED-SPCLT-CD.                      ****/
   /* ***** This process performs all required error handling. ****/
   /* *************************************************************/

  AS1REC.AS1-VALID-FL = "0";


  if (AS1REC.XXXUSRID == " ")
    AS1REC.AS1-VALID-FL = "1";
    return;
  end
  set PG1REC empty;

  PG1REC.XGPCD = "03";
  PG1REC.PG1SC4CD = "**"; /* Indicate 'GET SCHEDULER CODE'*/
  PG1REC.PG1FCTCD = " ";
  PG1REC.XXXUSER = AS1REC.XXXUSRID;


  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000")
    AS1REC.AS1-VALID-FL = "3";
    TA1REC.TA1FUNC = "RETN";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      AS1REC.AS1-VALID-FL = "1";
      return; /* Return to 'CALLING' Process*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        AS1REC.AS1-VALID-FL = "2";
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          AS1REC.AS1-VALID-FL = "4";
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else
          AS1REC.PG1SC4CD = PG1REC.PG1SC4CD;
          return; /* Return to 'CALLING' Process*/
        end

      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAS5110"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = AS1REC.AS1-XXX-MAP-NM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AS1REC.XXXUSRID;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/


   /* ***                                                      ***//*;*/
   /* ******************* END OF XPAS-SCHED-CD *******************//*;*/
end // end XPAS-51100

// Valid SESN/YR
Function XPAS-51200()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****               X P A S - X S E - X S N              ****/
   /* *****                                                    ****/
   /* ***** This PROCESS validates that the SESN & YR combo    ****/
   /* ***** exists on YSNTBL:                                  ****/
   /* *****                                                    ****/
   /* *************************************************************/


   /* -----------------------------------------------------------*/
   /* Check for Valid Season Year*/
   /* -----------------------------------------------------------*/

  if (AS1REC.AS1-XSN-YY < 70)
    AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 2000;
  else
    AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 1900;
  end

  AS1REC.AS1-XSN-SESN-YR = AS1REC.AS1-XSN-YY; /* -----------------------------------------------------------*/
   /* Check for Valid Season-Year Combination*/
   /* ------/----------------------------------------------------*/

  ASWREC.ASW-IDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (ASWREC.ASW-IDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[ASW-IDX5]
     == AS1REC.AS1-XSE-XSN
     && YSNTBL.XGPCD[ASW-IDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ASW-IDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[ASW-IDX5] != "99")
        ASWREC.ASW-IDX5 = ASWREC.ASW-IDX5 + 1;
      else
        ASWREC.ASW-IDX5 = 9999; /* END OF TABLE*/
        AS1REC.AS1-VALID-XSE-XSN-FL = "1";
        AS1REC.XSECD = " ";
        AS1REC.AS1-XSN-SESN-YR = 0;
        AS1REC.AS1-XSN-CC-YY = 0;
      end
    end
  end
   /* ***                                                      ****/
   /* ****************** END OF XPAS-XSE-XSN **********************/
end // end XPAS-51200

// Application initialization
Function XPAV001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    AVWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

    /* 09/13/93: CSP V4.1 REQUIREMENT*/

    if (COMMAREA.CAUSERA == " ")
      set AVWREC empty;
    end

  else
    set AVWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPAV001

// exit logic
Function XPAV002()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "AV0M"; /* Indicate availability menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AV") /* Transfer within same system*/

    COMMAREA.CAUSERA = AVWREC.CAUSERA; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(285); /* Indicate not allowed*/
  else
    converseLib.validationFailed(76); /* Indicate system error*/

  end


   /* ------------------------------------------------------------*/
end // end XPAV002

// Common AV system exit routine
Function XPAV003()
   /* ------------------------------------------------------------*/
   /* If modified data exists, return a message to the user*/
   /* asking if the modified data is to be saved before exiting.*/
   /* ------------------------------------------------------------*/

  if (AVWREC.AVWMODSW == "Y") /* Modified data exists*/

    AVWREC.AVWMODSW = "N"; /* Modified data exit switch*/

    AVWREC.XXXMODID = "X01"; /* Module identification*/
    converseLib.validationFailed(290); /* Indicate lost of changes*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, set application to be invoked for PF1 or PF4.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Indicate Production Menu*/
    end

    /* ------------------------------------------------------------*/
     /* Save the application user area in the COMMAREA.*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CATOSYS == "AV") /* Same system*/

      COMMAREA.CAUSERA = AVWREC.CAUSERA; /* Save user area*/
    else
      COMMAREA.CAUSERA = " "; /* Clear user area*/

    end

    /* ------------------------------------------------------------*/
     /* Transfer control to the specified application.*/
    /* ------------------------------------------------------------*/

    XSEXIT(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, return an error to the calling process.*/
    /* ------------------------------------------------------------*/

    AVWREC.XXXMODID = "X01"; /* Module identification*/

    if (COMMAREA.CASECRC == 3 /* Application not found*/
     || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

      converseLib.validationFailed(285); /* Indicate not allowed*/
    else
      converseLib.validationFailed(76); /* Indicate system error*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* CURR application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end

  end


   /* ------------------------------------------------------------*/
end // end XPAV003

// common exit from claims appls.
Function XPCL002()
   /* ************************************************************/
   /* *    this process will handle all normal exits from       **/
   /* *           claims applications...note that the exception **/
   /* *           is where an abend has occurred and the        **/
   /* *           application is exited in xpcl003.             **/
   /* *    YATTBL checked for basic application/claim-type con- **/
   /* *      trol, plus hard-coded exceptions for situations    **/
   /* *      prior to capture of claim-type.                    **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *     DATE    PGMR  DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* *    9-11-88  SRY  remove obsolete and redundant code     **/
   /* *    9-12-88  SRY  add for CL0T as currap                 **/
   /* *   8-07-91 wjohns change application names and any other **/
   /* *             fields requiring changes for renaming of    **/
   /* *             claims applications.                        **/
   /* *   3-05-92 GDECKE   ADD KL06 APPLICATION TO EXIT LOGIC   **/
   /* *   3-19-92 TWATSO   ADD KL05 APPLICATION TO EXIT LOGIC   **/
   /* *   8-11-97 pperk1   ADD KL07 APPLICATION TO EXIT LOGIC   **/
   /* *   4-12-99 GDECKE   ADD KL08 APPLICATION TO EXIT LOGIC   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "XPCL002"; /* set current process name*/

  CLXREC.YCTCD = " ";

  if (COMMAREA.CATOSYS != "KL") /* if transferring outside of claims*/
    CLXREC.YCTCD = "NO"; /* dont do check*/
  else
    if (COMMAREA.CATOAP == "KL0A" /* can always xfer to claim menu*/
     || COMMAREA.CATOAP == "KL0B" /* or claims inquiry menu*/
     || COMMAREA.CATOAP == "KL0S" /* or xcep maint*/
     || COMMAREA.CATOAP == "KL04" /* or sample return*/
     || COMMAREA.CATOAP == "KL06" /* RPS STATUS UPDATE*/
     || COMMAREA.CATOAP == "KL07" /* claims in suspens*/
     || COMMAREA.CATOAP == "KL08") /* claims TC250 SCREEN*/
      CLXREC.YCTCD = "NO"; /* dont do check*/
    else
      if (COMMAREA.CACURRAP == "KL0A") /* menu doesn't have a claim hdr*/
        if (COMMAREA.CATOAP == "KL0E" /* go to are hard coded*/
         || COMMAREA.CATOAP == "KL0T" 
         || COMMAREA.CATOAP == "KL01" /* AUTHORIZATION ID MAINT*/
         || COMMAREA.CATOAP == "KL02" 
         || COMMAREA.CATOAP == "KL03" /* SALES SAMPLE PARM ENTRY*/
         || COMMAREA.CATOAP == "KL05" /* CONSUMER DEFECTIVES*/
         || COMMAREA.CATOAP == "KL06" /* RPS STATUS UPDATE*/
         || COMMAREA.CATOAP == "KL07" /* claims in suspense*/
         || COMMAREA.CATOAP == "KL08") /* claims TC250 SCREEN*/
          CLXREC.YCTCD = "NO"; /* dont do check*/
        end
      else
        if (COMMAREA.CACURRAP == "KL0B" /* inq menu has no claim hdr*/
         || COMMAREA.CACURRAP == "KL0C") /* inq list has no claim hdr*/
          if (COMMAREA.CATOAP == "KL0C" 
           /* yet, so valid appplications to*/
           || COMMAREA.CATOAP == "KL0D" /* go to are hard coded*/
           || COMMAREA.CATOAP == "KL0E")
            CLXREC.YCTCD = "NO"; /* dont do check*/
          end
        else
          if (COMMAREA.CACURRAP == "KL0E" /* claim header must be able*/
           && COMMAREA.CATOAP == "KL0E")  /* to transfer to itself with*/
            CLXREC.YCTCD = "NO"; /* dont do check*/
          else
            if (COMMAREA.CACURRAP == "KL05" /* CONSUMER DEFECTIVE APPL MUST*/
             && COMMAREA.CATOAP == "KL05")  /* BE ABLE TO TRANSFER TO ITSELF*/
              CLXREC.YCTCD = "NO"; /* DO NOT CHECK CLAIM TYPE*/
            else
              if (COMMAREA.CACURRAP == "KL0T")
                                   /* log screen may have no clm nbr*/
                if (COMMAREA.CATOAP == "KL0E" /* but can transfer to header or*/
                 || COMMAREA.CATOAP == "KL0M" /* memo with*/
                 || COMMAREA.CATOAP == "KL02" /* memo with*/
                 || COMMAREA.CATOAP == "KL06") /* memo with*/
                  CLXREC.YCTCD = "NO"; /* dont do check*/
                end
              else
                if (COMMAREA.CACURRAP == "KL07") /* deduct in susp has*/
                                   /* no clm header*/
                  if (COMMAREA.CATOAP == "KL08" /**/
                   || COMMAREA.CATOAP == "KL0E" 
                   || COMMAREA.CATOAP == "KL0B")
                    CLXREC.YCTCD = "NO"; /* dont do check*/
                  end
                else
                  if (COMMAREA.CACURRAP == "KL08") /* tc250 has*/
                                   /* no clm header*/
                    if (COMMAREA.CATOAP == "KL07" /**/
                     || COMMAREA.CATOAP == "KL0E" 
                     || COMMAREA.CATOAP == "KL0B")
                      CLXREC.YCTCD = "NO"; /* dont do check*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


  if (CLXREC.YCTCD == " ")
    if (COMMAREA.CACURRAP == "KL06") /* allow return from kl06 to*/
      if (COMMAREA.CATOAP == "KL0T" /* to the 'from' application*/
       || COMMAREA.CATOAP == "KL0E")
        CLXREC.YCTCD = "NO"; /* dont do check*/
      end
    end
  end

  if (CLXREC.YCTCD == "NO")
    /* next sentence...dont have to do check*/
  else
    if (CLAREC.CLACLMNB == 0 /* if no claim*/
     || CLAREC.YCTCD == " ") /* or no claim type*/
      converseLib.validationFailed(530); /* must have claim to transfer*/
      CLXREC.CLXERRF = "Y";
      return;
    else
      CLXREC.CATOAP = COMMAREA.CATOAP;
      CLXREC.YCTCD = CLAREC.YCTCD;
      if (CLXREC.YATKEY in YATTBL.YATKEY)
        if (COMMAREA.CATOAP == "KL0Y" /* if transfer to y*/
         || COMMAREA.CATOAP == "KL0Z") /* or z*/
          if (CLAREC.CLAWSENF == "Y") /* if worksheet entered, bad news*/
            converseLib.validationFailed(25); /* invalid claim 'type'*/
            CLXREC.CLXERRF = "Y";
            return;
          end
        end

        if (COMMAREA.CATOAP == "KL0U" /* if transfer to u*/
         || COMMAREA.CATOAP == "KL0V") /* or v*/
          if (CLAREC.CLAWSENF != "Y") /* if NOT worksheet entered, bad news*/
            converseLib.validationFailed(25); /* invalid claim 'type'*/
            CLXREC.CLXERRF = "Y";
            return;
          end
        end

      else
        converseLib.validationFailed(25); /* cant xfer due to invalid claim type*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end

  if (COMMAREA.CATOSYS != "KL") /* if transferring outside of claims*/
    COMMAREA.CAUSERA = " ";
  else
    CLWREC.CLAGROUP = CLAREC.CLAGROUP; /* pass claim header record*/
    COMMAREA.CAUSERA = CLWREC.CLWGROUP; /* pass the inter-application*/
  end
                                  /* ; communication area*/

  XSEXIT(); /* standard exit, will set commarea*/
                                   /* security flags*/


     /* if std exit fails,*/

  converseLib.validationFailed(356); /* cannot transfer*/
  CLXREC.CLXERRF = "Y";
end // end XPCL002

// common date edit routine
Function XPCL004()
   /* ************************************************************/
   /* *      this process edits a date                          **/
   /* *                                                         **/
   /* *   !!  NOTE    NOTE   NOTE   NOTE   NOTE  NOTE !!        **/
   /* *   !!                                          !!        **/
   /* *   !!  This routine will only process dates in !!        **/
   /* *   !!  month, day and year format. Prior to    !!        **/
   /* *   !!  the y2k changes this routine used the   !!        **/
   /* *   !!  year to determine the format of the date!!        **/
   /* *   !!  being passed.  This process is no longer!!        **/
   /* *   !!  valid. The "if entered year le current  !!        **/
   /* *   !!  year" logic has been moved into the     !!        **/
   /* *   !!  calling proc/stat.                      !!        **/
   /* *   !!                                          !!        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *   the date is passed in the field clwrec.xxxedfld       **/
   /* *   if the date has dashes ('-') in it, then it can be    **/
   /* *      in the formats                                     **/
   /* *                  mm-dd-yy                               **/
   /* *                  mm-d-yy                                **/
   /* *                  m-dd-yy                                **/
   /* *                  m-d-yy                                 **/
   /* *                  yy-mm-dd                               **/
   /* *                  yy-m-dd                                **/
   /* *                  yy-mm-d                                **/
   /* *                  yy-m-d                                 **/
   /* *   if the date has no dashes (defined to be no dashes    **/
   /* *      in the 2nd or 3rd characters) then the 1st six     **/
   /* *      characters of the edit field are used as the date  **/
   /* *      to be edited and must be in the format             **/
   /* *                  mmddyy                                 **/
   /* *                  yymmdd                                 **/
   /* *   if the edit is valid, the the formatted date is       **/
   /* *      returned in the field clxrec.xxxfldt.              **/
   /* *      note that the returned date is always in the       **/
   /* *      format mm-dd-yy regardless of the input date.      **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "XPCL004"; /* set current process name*/


  CLXREC.XXXFSDT = 0; /* initialize working date*/

  set TA2REC empty; /* initialize utility parameter record*/

   /* now scan the input date for valid characters*/
   /* only 0 -> 9, space, and '-' are valid*/

  CLXREC.CLXWFLDC = CLXREC.XXXED8C; /* move date to work array*/
  CLXREC.CLXWLTRX = 1; /* initialize index*/
  CLXREC.CLXLTRX1 = 0; /* and counter for '-'*/
  while (CLXREC.CLXWLTRX <= 10)
    if (CLXREC.CLXWLTR[CLXWLTRX] >= "0"
     && CLXREC.CLXWLTR[CLXWLTRX] <= "9")
        /* next sentence - these digits are ok*/
    else
      if (CLXREC.CLXWLTR[CLXWLTRX] == "-")
        CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1; /* add 1 to dash count*/
      else
        if (CLXREC.CLXWLTR[CLXWLTRX] == " ")
            /* next sentence - these are ok, too*/
        else
          CLXREC.CLXVALDT = "N"; /* invalid digits in date*/
          return;
        end
      end
    end
    CLXREC.CLXWLTRX = CLXREC.CLXWLTRX + 1;
  end
  if (CLXREC.CLXLTRX1 == 0) /* we can have no dashes*/
    if (CLXREC.XXXEDC7 == " "
     && CLXREC.XXXEDC8 == " ")
      /* next sentence (this are ok)*/
    else
      CLXREC.XXXEDC7 = " ";
      CLXREC.XXXEDC8 = " ";
      /* ELSE ;*/
      /* MOVE 'N' TO CLXREC.CLXVALDT      ; invalid digits in date*/
      /* EZERTN;*/
      /* END ;*/
    end
  else
    if (CLXREC.CLXLTRX1 == 2) /* 2 dashes are ok*/
      if (CLXREC.XXXEDC2 == "-"
       || CLXREC.XXXEDC3 == "-")
          /* next sentence (dashes seem to be in the proper place)*/
      else
        CLXREC.CLXVALDT = "N"; /* not a valid date*/
        return; /* so exit*/
      end
    else
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
      return; /* so exit*/
    end
  end


  if (CLXREC.XXXEDC2 != "-" /* if the 2nd and the third characters*/
   /* in*/
   && CLXREC.XXXEDC3 != "-") /* the date are not '-' then we can*/
    if (CLXREC.XXXEDC5 == " "
     || CLXREC.XXXEDC6 == " ")
      CLXREC.CLXVALDT = "N"; /* invalid date not enough digits*/
      return;
    else
      CLXREC.XXXFSDT = CLXREC.XXXED6C; /* edit the date as is*/
    end
  else
     /* otherwise we first get the month*/
    if (CLXREC.XXXEDC2 == "-")
      CLXREC.XXXFSMM = CLXREC.XXXEDN1;
    else
      if (CLXREC.XXXEDC3 == "-")
        CLXREC.XXXFSM1 = CLXREC.XXXEDN1;
        CLXREC.XXXFSM2 = CLXREC.XXXEDN2;
      end
    end
     /* then we get the day*/
    if (CLXREC.XXXEDC2 == "-"
     && CLXREC.XXXEDC5 == "-")
      CLXREC.XXXFSD1 = CLXREC.XXXEDN3;
      CLXREC.XXXFSD2 = CLXREC.XXXEDN4;
    else
      if (CLXREC.XXXEDC3 == "-"
       && CLXREC.XXXEDC6 == "-")
        CLXREC.XXXFSD1 = CLXREC.XXXEDN4;
        CLXREC.XXXFSD2 = CLXREC.XXXEDN5;
      else
        if (CLXREC.XXXEDC2 == "-"
         && CLXREC.XXXEDC4 == "-")
          CLXREC.XXXFSDD = CLXREC.XXXEDN3;
        else
          if (CLXREC.XXXEDC3 == "-"
           && CLXREC.XXXEDC5 == "-")
            CLXREC.XXXFSDD = CLXREC.XXXEDN4;
          else
            CLXREC.CLXVALDT = "N"; /* set valid-date-flag to 'no'*/
          end
        end
      end
    end
     /* then we get the year*/
    if (CLXREC.XXXEDC5 == "-"
     && CLXREC.XXXEDC7 == " ")
      CLXREC.XXXFSYY = CLXREC.XXXEDN6;
    else
      if (CLXREC.XXXEDC5 == "-"
       && CLXREC.XXXEDC8 == " ")
        CLXREC.XXXFSY1 = CLXREC.XXXEDN6;
        CLXREC.XXXFSY2 = CLXREC.XXXEDN7;
      else
        if (CLXREC.XXXEDC6 == "-"
         && CLXREC.XXXEDC8 == " ")
          CLXREC.XXXFSYY = CLXREC.XXXEDN7;
        else
          if (CLXREC.XXXEDC6 == "-"
           && CLXREC.XXXEDC9 == " ")
            CLXREC.XXXFSY1 = CLXREC.XXXEDN7;
            CLXREC.XXXFSY2 = CLXREC.XXXEDN8;
          else
            if (CLXREC.XXXEDC4 == "-"
             && CLXREC.XXXEDC7 == " ")
              CLXREC.XXXFSY1 = CLXREC.XXXEDN5;
              CLXREC.XXXFSY2 = CLXREC.XXXEDN6;
            else
              CLXREC.CLXVALDT = "N"; /* set valid-date-flag to 'no'*/
            end
          end
        end
      end
    end
  end

   /* ---------------------- y2k out begin---------------------------*/

   /* IF CLXREC.XXXFSYY > 70*/
    /* AND CLXREC.XXXFSYY LE CLXREC.XXXCYY;*/
    /* MOVE CLXREC.XXXFSDT TO TA2REC.TA2GRGAN;*/
    /* MOVE 'A' TO TA2REC.TA2GRTYP;    /* format is mmddyy*/
   /* ELSE;*/
    /* IF CLXREC.XXXFSDD < 13;*/
      /* MOVE CLXREC.XXXFSDT TO TA2REC.TA2GRGEN;*/
      /* MOVE 'E' TO TA2REC.TA2GRTYP;  /* format is yymmdd*/
    /* ELSE;*/
      /* MOVE 'N' TO CLXREC.CLXVALDT;  /* set valid-date-flag to 'no'*/
    /* END;*/
   /* END;*/


   /* ---------------------- y2k out end  ---------------------------*/

   /* ---------------------- y2k in begin ---------------------------*/
  TA2REC.TA2GRGAN = CLXREC.XXXFSDT;
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
   /* ---------------------- y2k in end   ---------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    CLXREC.CLXVALDT = "N"; /* set valid-date-flag to 'no'*/
  else
    CLXREC.CLXVALDT = "Y"; /* set valid-date-flag to 'yes'*/
    CLXREC.XXXFLDT = TA2REC.TA2GRGB;
    /* ---------------------- y2k out begin --------------------------*/
    /* IF TA2REC.TA2GRTYP EQ 'E';      /* format is yymmdd*/
      /* IF CLXREC.XXXFSMM > 70*/
        /* AND CLXREC.XXXFSMM LE CLXREC.XXXCYY;*/
        /* MOVE 'Y' TO CLXREC.CLXVALDT;*/
      /* ELSE;*/
                                  /* MOVE 'N' TO CLXREC.CLXVALDT;       /**/
                                   /* set valid-date-flag to 'no'*/
     /* END;*/
    /* eLSE;*/
      /* IF CLXREC.XXXFSYY > 70*/
        /* AND CLXREC.XXXFSYY LE CLXREC.XXXCYY;*/
        /* MOVE 'Y' TO CLXREC.CLXVALDT;*/
      /* ELSE;*/
                                  /* MOVE 'N' TO CLXREC.CLXVALDT;       /**/
                                   /* set valid-date-flag to 'no'*/
      /* END;*/
    /* END;*/
    /* ---------------------- y2k out end   --------------------------*/
  end


   /* *************************************************************/
end // end XPCL004

// handle entry of fast-path item
Function XPCL006()
   /* ************************************************************/
   /* *      edit fast-path item                                **/
   /* *                                                         **/
   /* *   this process is set up to be performed from xpcl002.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* *   before performing this process...                     **/
   /* *      1. the application you are going to next should    **/
   /* *            already be in commarea.catoap                **/
   /* *      2. the screen item field should be in              **/
   /* *            commarea.caitem                              **/
   /* *      3. the application index (clxrec.clxappx) should   **/
   /* *            already be set to the yuatbl application.    **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXVITMF = "Y"; /* set valid-item-flag to 'yes'*/

  if (COMMAREA.CATOAP in YUATBL.XXXAPPID)
    CLXREC.CLXAPPX = sysVar.arrayIndex;
  else
    return;
  end

  if (YUATBL.YUAICNT[CLXAPPX] > 0) /* if application expects items*/
    /* next sentence...go on with edit*/
  else
    if (COMMAREA.CAITEM != " ") /* if we have an item*/
      CLXREC.CLXVITMF = "N"; /* set valid-item-flag to 'no'*/
      CLXREC.CLXMSG = "ITEMS NOT ALLOWED GOING TO THIS APPLICATION";
    end
    return; /* and go back*/
  end


  CLWREC.CLWITM1N = 0;
  CLWREC.CLWITM2N = 0;
  CLWREC.CLWITM3N = 0;
  CLWREC.CLWITM4N = 0;

  CLXREC.CLXITMCT = 0; /* zero count of items passed*/
  CLXREC.CLXILTH[1] = 0; /* zero length of 1st item*/
  CLXREC.CLXILTH[2] = 0; /* zero length of 2nd item*/
  CLXREC.CLXILTH[3] = 0; /* zero length of 3rd item*/
  CLXREC.CLXILTH[4] = 0; /* zero length of 4th item*/


  CLXREC.CLXITMX = 1; /* set item index to 1st item*/
  CLXREC.CLXLTRX1 = 0; /* set commarea-item letter index to 1*/
  CLXREC.CLXLTRX2 = 0; /* set letter-index to 1st letter*/
  CLXREC.CLXILOC[1] = 1; /* set location of first item*/

  CLXREC.CLXCNF[1] = YUATBL.YUACNF1[CLXAPPX];
  CLXREC.CLXCNF[2] = YUATBL.YUACNF2[CLXAPPX];
  CLXREC.CLXCNF[3] = YUATBL.YUACNF3[CLXAPPX];
  CLXREC.CLXCNF[4] = YUATBL.YUACNF4[CLXAPPX];




  while (CLXREC.CLXLTRX1 <= 20) /* repeat for each letter in caitem*/
    CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
    CLXREC.CLXLTRX2 = CLXREC.CLXLTRX2 + 1;
    if (COMMAREA.CAITMLTR[CLXLTRX1] == "."
     || COMMAREA.CAITMLTR[CLXLTRX1] == " ") /* blank is end of items*/
      CLXREC.CLXILTH[CLXITMX] = CLXREC.CLXLTRX2 - 1;
      CLXREC.CLXLTRX2 = 0;
      if (COMMAREA.CAITMLTR[CLXLTRX1] == " ") /* blank is end of items*/
        CLXREC.CLXLTRX1 = 99; /* so force end of while loop*/
      else
        CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
        CLXREC.CLXILOC[CLXITMX] = CLXREC.CLXLTRX1 + 1;
      end
    else
      if (CLXREC.CLXCNF[CLXITMX] == "N")
        if (COMMAREA.CAITMLTR[CLXLTRX1] >= "0"
         && COMMAREA.CAITMLTR[CLXLTRX1] <= "9")
          /* next sentence*/
        else
          CLXREC.CLXVITMF = "N"; /* set valid-item-flag to 'no'*/
          CLXREC.CLXLTRX1 = 99; /* force exit from while loop*/
        end
      end
    end
  end


  if (CLXREC.CLXVITMF == "N") /* if item not valid*/
    if (CLXREC.CLXITMX == 1)
      CLXREC.CLXMSG = "FIRST ITEM MUST BE NUMERIC";
      CLXREC.CLXERRF = "Y";
      return;
    else
      if (CLXREC.CLXITMX == 2)
        CLXREC.CLXMSG = "SECOND ITEM MUST BE NUMERIC";
        CLXREC.CLXERRF = "Y";
        return;
      else
        if (CLXREC.CLXITMX == 3)
          CLXREC.CLXMSG = "THIRD ITEM MUST BE NUMERIC";
          CLXREC.CLXERRF = "Y";
          return;
        else
          if (CLXREC.CLXITMX == 4)
            CLXREC.CLXMSG = "FOURTH ITEM MUST BE NUMERIC";
            CLXREC.CLXERRF = "Y";
            return;
          end
        end
      end
    end
  end



  if (CLXREC.CLXITMX <= YUATBL.YUAICNT[CLXAPPX])
    CLXREC.CLXITMCT = CLXREC.CLXITMX;
  else
    CLXREC.CLXMSG = "TOO MANY ITEMS FOR THIS APPLICATION";
    return;
  end





  if (CLXREC.CLXILTH[1] <= YUATBL.YUALCNT1[CLXAPPX])
    /* NEXT SENTENCE*/
  else
    CLXREC.CLXMSG = "FIRST ITEM PASSED IS TOO LONG";
    return;
  end

  if (CLXREC.CLXILTH[2] <= YUATBL.YUALCNT2[CLXAPPX])
    /* NEXT SENTENCE*/
  else
    CLXREC.CLXMSG = "SECOND ITEM PASSED IS TOO LONG";
    return;
  end

  if (CLXREC.CLXILTH[3] <= YUATBL.YUALCNT3[CLXAPPX])
    /* NEXT SENTENCE*/
  else
    CLXREC.CLXMSG = "THIRD ITEM PASSED IS TOO LONG";
    return;
  end

  if (CLXREC.CLXILTH[4] <= YUATBL.YUALCNT4[CLXAPPX])
    /* NEXT SENTENCE*/
  else
    CLXREC.CLXMSG = "FOURTH ITEM PASSED IS TOO LONG";
    return;
  end


  CLXREC.CLXITMX = 1;

  while (CLXREC.CLXITMX <= CLXREC.CLXITMCT) /* for each item*/
     /* set the location of if this item within the array*/
    CLXREC.CLXLTRX1 = CLXREC.CLXILOC[CLXITMX];

    if (CLXREC.CLXCNF[CLXITMX] == "C") /* if the item should be char*/
      CLXREC.CLXWFLDC = " "; /* format, then move spaces to the*/
      CLXREC.CLXWLTRX = 1; /* working field & start with the*/
    else /* first letter...otherwise the item*/
      CLXREC.CLXWFLDN = 0; /* is numeric and needs to be*/
      CLXREC.CLXWLTRX = 11 - CLXREC.CLXILTH[CLXITMX]; /* right justified*/
    end /* in the working field*/

    CLXREC.CLXLTRX2 = 1; /* set count of letters item to 1*/
    while (CLXREC.CLXLTRX2 <= CLXREC.CLXILTH[CLXITMX])
      CLXREC.CLXWLTR[CLXWLTRX] = COMMAREA.CAITMLTR[CLXLTRX1];
      CLXREC.CLXWLTRX = CLXREC.CLXWLTRX + 1;
      CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
      CLXREC.CLXLTRX2 = CLXREC.CLXLTRX2 + 1;
    end

    if (CLXREC.CLXITMX == 1) /* if this is the 1st item*/
      CLWREC.CLWITM1C = CLXREC.CLXWFLDC; /* set 1st item passed*/
    else
      if (CLXREC.CLXITMX == 2) /* if this is the 2nd item*/
        CLWREC.CLWITM2C = CLXREC.CLXWFLDC; /* set 2nd item passed*/
      else
        if (CLXREC.CLXITMX == 3) /* if this is the 3rd item*/
          CLWREC.CLWITM3C = CLXREC.CLXWFLDC; /* set 3rd item passed*/
        else
          if (CLXREC.CLXITMX == 4) /* if this is the 4th item*/
            CLWREC.CLWITM4C = CLXREC.CLXWFLDC; /* set 4th item passed*/
          end
        end
      end
    end
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1; /* set up for next item*/
  end

  CLWREC.CLWITMCT = CLXREC.CLXITMCT;

  CLXREC.CLXVITMF = "Y"; /* if we got here, then the item(s) are*/
                                   /* valid*/



end // end XPCL006

// Reset CLWACTIV based on Option
Function XPCL008()
   /* *********************************************************/
   /* maintenance log:*/
   /* 05-05-93 BCOURT Add menu option 19 = 09.*/
   /* *********************************************************/

    /* -------------  before stage cl0a005  --------------*/

     /* no processing*/


  if (CLWREC.CLWMNOPT == 1
   || CLWREC.CLWMNOPT == 2
   || CLWREC.CLWMNOPT == 3
   || CLWREC.CLWMNOPT == 10)
    CLWREC.CLWACTIV = "A";
  else
    if (CLWREC.CLWMNOPT == 4
     || CLWREC.CLWMNOPT == 14)
      CLWREC.CLWACTIV = "I";
    else
      if (CLWREC.CLWMNOPT == 5  
       || CLWREC.CLWMNOPT == 6  
       || CLWREC.CLWMNOPT == 7  
       || CLWREC.CLWMNOPT == 16 
       || CLWREC.CLWMNOPT == 8  
       || CLWREC.CLWMNOPT == 9  
       || CLWREC.CLWMNOPT == 17 
       || CLWREC.CLWMNOPT == 19 /* 5-5-93*/
       || CLWREC.CLWMNOPT == 11 
       || CLWREC.CLWMNOPT == 12 
       || CLWREC.CLWMNOPT == 13)
        CLWREC.CLWACTIV = "C";
      end
    end
  end

end // end XPCL008

// abend routine for claims
Function XPCL010()
   /* ************************************************************/
   /* *   this routine aborts the current application.          **/
   /* *                                                         **/
   /* ************************************************************/

  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = CLXREC.CLXCPROC; /* aborting process*/
  if (TA1REC.TA1TBLKE == " ") /* if key is spaces*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to a num field*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
  end
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* abend module*/


     /* call failed, terminate session*/

  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/


end // end XPCL010

// ensure proper entry to cl apps
Function XPCL011()
   /* ************************************************************/
   /* *   this process ensures this is proper entry into        **/
   /* *               this application                          **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "XPCL011"; /* set current process name*/

  if (COMMAREA.CAFRMSYS == "KL") /* if from within claims*/
     /* next sentence*/
  else
    set CLWREC empty; /* initialize clwrec to prevent abend in kl0a*/
    COMMAREA.CATOAP = "KL0A"; /* can only fast-path into*/
    COMMAREA.CAITEM = " "; /* claims menu from outside of*/
    XPCL002(); /* claims*/
  end


  CLWREC.CLWGROUP = COMMAREA.CAUSERA; /* restore clwrec from commarea*/
  CLAREC.CLAGROUP = CLWREC.CLAGROUP; /* restore clarec from clwrec*/


  if (CLWREC.CLWITM1N != 0) /* if fastpath item 1 is numeric*/
    set CLAREC empty; /* hold claim number*/
    CLAREC.CLACLMNB = CLWREC.CLWITM1N;
  end


  if (CLAREC.CLACLMNB == 0) /* if no claim number*/
     /* next sentence*/
  else
    if (CLAREC.YCTCD == " ") /* if record is blank*/
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get the claim header*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLWREC.CLAGROUP = CLAREC.CLAGROUP;
      else
        COMMAREA.CATOAP = "KL0A"; /* claims menu*/
        XPCL002(); /* go back*/
      end /* if application not in table*/
    end
  end


end // end XPCL011

// Application initialization
Function XPDV-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    DVWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set DVWREC empty; /* Initialize work record*/
    DVWREC.XGP-GPC-CD = COMMAREA.XGPCD; /* GPC code*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPDV-00000

// Application initialization
Function XPEP-00000()
   /* ------------------------------------------------------------*/
   /* XPEP001*/
   /*  */
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.*/
   /*  */
   /* NOTE - THIS PROCEDURE IS SPECIFIC TO EP APPLICATIONS.  PUT*/
   /* LOGIC FOR NON-EP 'FROM' SYTEMS IN THE FLOW OF XPEP.*/
    /*  */
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/


  XSSEGTR(); /* SET SEGMENTD TRANS ID*/


  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Appl has changed*/

    if (COMMAREA.CAFRMSYS == "EP") /* From EP system*/
      /* MOVE COMMAREA.CAUSERA TO EPWREC.EPWUSERA; /* Restore work record*/
      EPWREC.EPW-GROUP = COMMAREA.CAUSERA; /* Restore work*/
    else
      set EPWREC empty; /* Clear work record*/
    end

  end

  VGVar.handleHardIOErrors = 1; /* Return file errors*/
  converseVar.commitOnConverse = 1; /* Commit on converse*/


end // end XPEP-00000

// Application initialization
Function XPFB001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR();

  if (COMMAREA.CAFRMSYS == "FB") /* Came from within the system*/

    FBWREC.FBWGROUP = COMMAREA.CAUSERA; /* Restore work area*/
  else
    set FBWREC empty; /* Clear work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize csp special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPFB001

// Application initialization
Function XPFD001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "FD") /* Came from within the system*/

    FDWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set FDWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPFD001

// application initialization
Function XPFF001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "FF" /* Same system*/
   || COMMAREA.CAFRMSYS == "FE" /* or alternate system*/
   || COMMAREA.CAFRMSYS == "FG") /* or alternate system*/

    FFWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set FFWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function and exit switch data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/

  FFWREC.FFWMODSW = "N"; /* Modified data exit switch*/

   /* ------------------------------------------------------------*/
   /* Establish default values for GPC and division group codes.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = "02"; /* GPC code*/

  if (FFWREC.YSMXDV == " ") /* No division group code*/
    FFWREC.YSMXDV = "10"; /* Default value*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Abbreviation*/
  end


end // end XPFF001

// Application initialization
Function XPFH-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    FHWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set FHWREC empty; /* Initialize work record*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPFH-00000

// Application initialization
Function XPFK001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "FK" /* FK system*/
   || COMMAREA.CAFRMSYS == "FM") /* FM system*/

    FKWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set FKWREC empty; /* Initialize work record area*/
    FKWREC.FKW-UPDATE-FUNCTION = COMMAREA.CAITEM; /* requested map*/
    COMMAREA.CAITEM = " "; /* reset item*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPFK001

// Application initialization
Function XPFL001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR();

  if (COMMAREA.CAFRMSYS == "FL") /* Came from within the fl system*/

    FLWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work area*/
  else
    set FLWREC empty; /* Clear work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize csp special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPFL001

// Application initialization
Function XPFQ001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "FQ") /* Came from within the system*/

    FQWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set FQWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  converseVar.segmentedMode = 1; /* Force transaction segmented*/

   /* ------------------------------------------------------------*/
   /* Default values for GPC, division, color, and dimension.*/
   /* ------------------------------------------------------------*/

  FQWREC.XGPCD = "02"; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* If division is missing, default to '*' wildcard.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.XDVCD == " " /* If division missing*/
   || FQWREC.XDVCD == "**") /* or division equal '**'*/
    FQWREC.XDVCD = "* "; /* Default to single '*'*/
  end

   /* ------------------------------------------------------------*/
   /* If style is wildcarded, default to spaces.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.SY1STNBR == "******") /* If style wildcarded*/
    FQWREC.SY1STNBR = "  "; /* Default to space*/
  end

   /* ------------------------------------------------------------*/
   /* If color is missing or wildcarded, default to '00'.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.SY2CLRID == " " /* If color missing*/
   || FQWREC.SY2CLRID == "***") /* or color wildcarded*/
    FQWREC.SY2CLRID = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
   /* If dimension is missing or wildcarded, default to '00'.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.XDMCD == " " /* If dimension missing*/
   || FQWREC.XDMCD == "**") /* or dimension wildcarded*/
    FQWREC.XDMCD = "00"; /* Default to '00'*/
  end


end // end XPFQ001

// Application initialization
Function XPFY001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* changes CICS start tran id on*/
                                   /* converse*/

  if (COMMAREA.CAFRMSYS == "FY") /* Came from within the system*/
    if (COMMAREA.CAUSERA > " ") /* Data entered*/
      FYWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
    else
      set FYWREC empty; /* Clear work record area*/
    end
  else
    set FYWREC empty; /* Clear work record area*/
  end

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  converseVar.segmentedMode = 1; /* Force transaction segmented*/

end // end XPFY001

// Application initialization
Function XPIN-00000()
   /* -------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* -------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* -------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* -------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* -------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* -------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    INWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

    if (INWREC.CAUSERA == " ") /* If no data passed*/
      set INWREC empty;
    end

  else
    set INWREC empty; /* Initialize work record*/

  end

   /* -------------------------------------------------------------*/
   /* Call IN8000 to get the theater of operation*/
   /* -------------------------------------------------------------*/

  XSINS-THEATEROPR();


   /* -------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* -------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPIN-00000

// Application initialization
Function XPIN001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    INWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set INWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPIN001

// add temp storage
Function XPIV001()

   /* add temp storage*/

  IVGREC.IVGLNGTH = 3000; /* temp storage length*/
  TA5REC.TA5APPID = "IVG"; /* APPL IDENTIFICATION*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWGQIX;


  call "TA0050" (IVGREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
     /* MOVE TA5REC.TA5TSQIX TO IV0DW01.TA5TSQIX; highest page nbr*/
     /* SET IVGREC EMPTY;*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IPIVATS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
     /* MOVE 'IV0DM030' TO TA1REC.TA1MAP     ; map name*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA;
    TAEREC.TAEDESC2 = "ADD PAGE TO TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end



end // end XPIV001

// read temp storage
Function XPIV002()


   /* read temp storage*/

   /* OVE IVXREC.IVXTSLNG TO IVGREC.IVGLNGTH; temp storage length*/
  IVGREC.IVGLNGTH = 3000; /* temp storage length*/
  TA5REC.TA5APPID = "IVG"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWGQIX; /* index number*/


  call "TA0050" (IVGREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
     /* MOVE 'IV0DM030' TO TA1REC.TA1MAP     ; map name*/
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IPIVRTS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TAEREC.TAEDESC1 = "READ PAGE TO TEMP STORAGE";
     /* MOVE IV0DW01.OSHRQTID TO TAEREC.TAEDESC2;*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end



end // end XPIV002

// purge temp storeage
Function XPIV003()


   /* purge temp storage*/

  IVXREC.IVXWGQIX = 0; /* reset temp storage index*/

  TA5REC.TA5APPID = "IVG"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (IVGREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
     /* MOVE 'IV0DM030' TO TA1REC.TA1MAP     ; map name*/
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IPIVPTS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TAEREC.TAEDESC1 = "PURGE TEMP STORAGE FAILED";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end



end // end XPIV003

// update temp storage
Function XPIV004()


   /* update temp storage*/

  IVGREC.IVGLNGTH = 3000; /* temp storage length*/
  TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
  TA5REC.TA5APPID = "IVG"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWGQIX;

  call "TA0050" (IVGREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IPIVUTS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
     /* MOVE 'IV0DM030' TO TA1REC.TA1MAP     ; map name*/
    TAEREC.TAEDESC1 = "UPDATE TO TEMP STORAGE FAILED";
     /* MOVE IVGREC.OSHRQTID TO TAEDESC2;*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end

end // end XPIV004

// purge 'iv0d' temp storage
Function XPIV005()


   /* purge temp storage*/

  IVXREC.IVXWFQIX = 0; /* reset temp storage index*/

  TA5REC.TA5APPID = "IV0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (IVFREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1MAP = "IV0DM001"; /* map name*/
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "XPIV005";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TAEREC.TAEDESC1 = "PURGE TEMP STORAGE FAILED";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end



end // end XPIV005

// COMMAREA KBWREC
Function XPKB002()


  set KBWREC empty; /* ; initialize kbwrec*/

  if (COMMAREA.CAFRMSYS == "KB") /* ; from buyer system*/
    KBWREC.KBWGROUP = COMMAREA.CAUSERA; /* ; move commarea to kbwrec*/
    KBWREC.XXXMAPNM = " "; /* ; reset current map*/
    KBWREC.KBWPFKEY[1] = " "; /* ; reset last used pfkeys*/
    KBWREC.KBWPFKEY[2] = " ";
    if (KBWREC.KBABUYID > 9999999) /* buyer id not initialized*/
      KBWREC.KBABUYID = 0; /* ; overlay garbage*/
    end
  end


end // end XPKB002

// READ KBAREC
Function XPKB010()


  set SQLCA empty;
  set KBAREC empty;

  KBAREC.KBABUYID = KBWREC.KBABUYID;

  call "IO4310" ("S ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KBWREC.KBWBFND = "Y"; /* ; set buyer found flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; record not found*/
      KBWREC.KBWBFND = "N"; /* ; reset buyer found flag*/
    else
      KBWREC.KBWBIDKE = KBAREC.KBABUYID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB010";
      TA1REC.TA1LOCAT[2] = "IO4310";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

      XPKB900();
    end
  end


end // end XPKB010

// READ KBBREC
Function XPKB012()


  set SQLCA empty;
  set KBBREC empty;
  KBWREC.KBWAFND = "N"; /* ; set found flag off*/

  KBBREC.KBABUYID = KBWREC.KBABUYID;

  call "IO4320" ("S ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; address found*/
    KBWREC.KBWAFND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; bad address return*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1PGMNM = "XPKB012";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBADDR01";
      TA1REC.TA1LOCAT[1] = "IO4320";
      TA1REC.TA1LOCAT[2] = "S";
      KBWREC.KBWBIDKE = KBWREC.KBABUYID;
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
      XPKB900();
    end
  end


end // end XPKB012

// SELECT KUEREC
Function XPKB014()


  set SQLCA empty;
  set KUEREC empty;

  KUEREC.KUECMTID = KBWREC.KBABUYID;
  KUEREC.KUECTYP = "B";

  call "IO0250" ("SS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
  /* next sentence*/
  else
    KBWREC.KBWCMTID = KUEREC.KUECMTID;
    KBWREC.KBWCMTTP = KUEREC.KUECTYP;
    KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "XPKB014";
    TA1REC.TA1LOCAT[2] = "IO0250";
    TA1REC.TA1LOCAT[3] = "SS";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;

    XPKB900();
  end


end // end XPKB014

// FETCH KUEREC
Function XPKB015()


  set SQLCA empty; /* ; reset sql comm area*/

  call "IO0250" ("SN", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
  /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; at end of recs*/
      KBWREC.KBWEOF = "Y"; /* ; set eof flag*/
    else
      KBWREC.KBWCMTID = KUEREC.KUECMTID;
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB015";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "SN";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;

      XPKB900();
    end
  end

end // end XPKB015

// CALL IO4330 - KBXREC
Function XPKB018()


  set SQLCA empty;

  call "IO4330" (KBIREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0 /* ; bad return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = 0;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "XPKB018";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = KBIREC.KBIGROUP;
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end XPKB018

// read store database
Function XPKB020()
  KBWREC.KBWSFND = "N"; /* ; no errors*/
  set SQLCA empty; /* ; get store name*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KBWREC.KBWSFND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; store rec not found*/
      /* NEXT SENTENCE*/
    else
      KBWREC.KBWXIDCO = KUMREC.KUCCOID;
      KBWREC.KBWXIDST = KUMREC.KUMSTRID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB020";
      TA1REC.TA1LOCAT[2] = "IO0340";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1TBLKE = KBWREC.KBWSTRKE;

      XPKB900();
    end
  end
end // end XPKB020

// READ CUST DATABASE
Function XPKB021()


  KBWREC.KBWCFND = "N"; /* ; reset cust found flag*/

  set SQLCA empty; /* ; reset sqlca*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KBWREC.KBWCFND = "Y"; /* ; set cust found flag*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; bad d/b return*/
      KBWREC.KBWXIDCO = KUCREC.KUCCOID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB021";
      TA1REC.TA1LOCAT[2] = "IO0240";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1TBLKE = KBWREC.KBWXIDCO;

      XPKB900();
    end
  end


end // end XPKB021

// Close Comment Cursor
Function XPKB022()


  set SQLCA empty; /* ; reset sql comm area*/

  call "IO0250" ("CS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful close*/
  /* next sentence*/
  else
    KBWREC.KBWCMTID = KUEREC.KUECMTID;
    KBWREC.KBWCMTTP = KUEREC.KUECTYP;
    KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "XPKB022";
    TA1REC.TA1LOCAT[2] = "IO0250";
    TA1REC.TA1LOCAT[3] = "CS";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;

    XPKB900();
  end

end // end XPKB022

// Read Temp Storage - KBC
Function XPKB025()


  set KBCREC empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "KBC"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KBWREC.KBWPAGE; /* current page*/
  KBCREC.KBC-TS-LENGTH = 874; /* length of record*/

  call "TA0050" (KBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB025";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBCREC.KBC-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end
end // end XPKB025

// Add Temp Storage - KBC
Function XPKB026()

  set TA5REC empty;

  TA5REC.TA5APPID = "KBC"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KBCREC.KBC-TS-LENGTH = 874; /* length of record*/

  call "TA0050" (KBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    KBWREC.KBWTOTPG = TA5REC.TA5TSQIX; /* max page number*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB026";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBCREC.KBC-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end

end // end XPKB026

// Purge Temp Storage - KBC
Function XPKB028()

  set TA5REC empty;

  TA5REC.TA5APPID = "KBC"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB028";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBCREC.KBC-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end

end // end XPKB028

// PURGE WORK FROM THIS SESSION
Function XPKB030()


  XPKB031(); /* ; get current date/time*/

  XPKB032(); /* ; delete x-ref recs*/
  XPKB034(); /* ; delete comment recs*/
  XPKB036(); /* ; delete buyer addr recs*/
  XPKB038(); /* ; delete buyer genrl info*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
                                   /* ; ezecomit database changes*/


end // end XPKB030

// GET CURRENT DATE/TIME
Function XPKB031()


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};


end // end XPKB031

// DELETE KBXREC (X-REF)
Function XPKB032()


  set SQLCA empty;
  set KBXREC empty;

  KBIREC.KBIOTASK = "D ";
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* SET TO TODAYS DATE*/
  KBXREC.YSBCD = "**"; /* SET YSBCD UP AS A WILD CARD*/

  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = -1; /* ; cust = all*/
  KBXREC.KUMSTRID = -1; /* ; store = all*/
  KBXREC.XNXCD = -1; /* ; dept = all*/

  call "IO4330" (KBIREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    XPKB033(); /* ; add KUZREC (for kbxrec)*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; delete was unsuccessful*/
      KBWREC.KBWXIDBY = KBXREC.KBABUYID;
      KBWREC.KBWXIDCO = KBXREC.KUCCOID;
      KBWREC.KBWXIDST = KBXREC.KUMSTRID;
      KBWREC.KBWXIDDP = KBXREC.XNXCD;
      KBWREC.KBWXIDDT = 0;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB032";
      TA1REC.TA1LOCAT[2] = "IO4330";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBXREF01";
      TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

      XPKB900();
    end
  end


end // end XPKB032

// audit rec of purge (BXREF)
Function XPKB033()


  set SQLCA empty;
  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/

  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.KUZBFCD = "P";
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBWREC.KBABUYID;

  XPKB099();


end // end XPKB033

// DELETE KUEREC (COMMENTS)
Function XPKB034()


  set SQLCA empty;
  set KUEREC empty;

  KUEREC.KUECMTID = KBWREC.KBABUYID; /* ; set COMMENT ID*/
  KUEREC.KUECTYP = "B"; /* ; system = buyer*/
  KUEREC.XNDCD = " "; /* ; dept = user's dept*/
  KUEREC.KUECSEQ = -1; /* ; group delete*/

  call "IO0250" ("D ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    XPKB035(); /* ; add KUZREC (for KUEREC)*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; unsuccessful delete*/
      KBWREC.KBWCMTID = KUEREC.KUECMTID;
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB034";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;

      XPKB900();
    end
  end


end // end XPKB034

// Audit rec of purge (COMNT)
Function XPKB035()


  set SQLCA empty;
  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = kbxrec*/

  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.KUZBFCD = "P";
  KUZREC.XXXTBLNM = "VCOMNTB1";
  KUZREC.KUCCOID = KBWREC.KBABUYID;

  XPKB099();


end // end XPKB035

// DELETE KBBREC (BUYER ADDR)
Function XPKB036()


  set SQLCA empty;
  set KBBREC empty;

  KBBREC.KBABUYID = KBWREC.KBABUYID;

  call "IO4320" ("D ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    XPKB037(); /* ; add KUZREC (for KBBREC)*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      KBWREC.KBWBIDKE = KBBREC.KBABUYID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB036";
      TA1REC.TA1LOCAT[2] = "IO4320";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBADDR01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

      XPKB900();
    end
  end


end // end XPKB036

// Audit rec of purge (BADDR)
Function XPKB037()


  set SQLCA empty;
  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KB3REC.KB3DATA = KBBREC.KBBGRP; /* ; data = KBBREC*/

  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.KUZBFCD = "P";
  KUZREC.XXXTBLNM = "VBADDR01";
  KUZREC.KUCCOID = KBWREC.KBABUYID;

  XPKB099();


end // end XPKB037

// DELETE KBAREC (GENRL INFO)
Function XPKB038()


  set SQLCA empty;
  set KBAREC empty;

  KBAREC.KBABUYID = KBWREC.KBABUYID;

  call "IO4310" ("D ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    XPKB039(); /* ; add KUZREC (for KBAREC)*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ;unsuccessful delete*/
      KBWREC.KBWBIDKE = KBAREC.KBABUYID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "XPKB038";
      TA1REC.TA1LOCAT[2] = "IO4310";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

      XPKB900();
    end
  end


end // end XPKB038

// Audit rec of purge (BUYER)
Function XPKB039()


  set SQLCA empty;
  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KB3REC.KB3DATA = KBAREC.KBAGRP; /* ; data = KBAREC*/

  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.KUZBFCD = "P";
  KUZREC.XXXTBLNM = "VBUYER01";
  KUZREC.KUCCOID = KBWREC.KBABUYID;

  XPKB099();


end // end XPKB039

// EDIT FAST PATH USAGE
Function XPKB040()


  COMMAREA.CAMSG = " "; /* ; reset commarea mssg*/

  if (converseVar.eventKey not enter) /* ; user didn't press enter*/
    converseLib.validationFailed(97); /* ; 'NO FASTPATH & PF KEYS'*/
  else
    if (COMMAREA.CATOSYS != "KB") /* ; xfer out of buyer sys*/
      XSEXIT(); /* ; xfer to requested appl*/
    else
      if (COMMAREA.CATOAP == "KB0M" /* ; xfer to buyer menu*/
       || COMMAREA.CATOAP == "KB0A" /* ; xfer to buyer add*/
       || COMMAREA.CATOAP == "KB0C" /* ; xfer to buyer update*/
       || COMMAREA.CATOAP == "KB0I" /* ; xfer to buyer inquiry*/
       || COMMAREA.CATOAP == "KB0B" /* ; xfer to buyer browse*/
       || COMMAREA.CATOAP == "KB0F" /* ; xfer to update rank/mail cd*/
       || COMMAREA.CATOAP == "KB0X") /* ; xfer to ysb add*/
        if (COMMAREA.CATOAP == "KB0A"
         || COMMAREA.CATOAP == "KB0M"
         || COMMAREA.CATOAP == "KB0F"
         || COMMAREA.CATOAP == "KB0X")
          set KBWREC empty;
        end
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        XSEXIT(); /* ; xfer to requested appl*/
      else
        converseLib.validationFailed(98); /* ;  'CAN'T TRANS TO APPL'*/
      end
    end
  end

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";


end // end XPKB040

// CALL KB1000 - KBXREC/KUGREC
Function XPKB050()

  set SQLCA empty;

  call "KB1000" (KBKREC, SQLCA, KBXREC, KUGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0 /* ; bad return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = 0;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "XPKB050";
    TA1REC.TA1LOCAT[2] = "KB1000";
    TA1REC.TA1LOCAT[3] = KBKREC.KBK-GROUP;
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end XPKB050

// create short last name
Function XPKB060()
  KBWREC.XXXLSTSN = " ";

  KBWREC.KBWORK1 = 1;
  KBWREC.KBWORK2 = 1;

  while (KBWREC.KBWORK1 <= 25
   && KBWREC.KBWORK2 <= 10)

    if (KBWREC.KBWLNCHR[KBWORK1] != "A"
     && KBWREC.KBWLNCHR[KBWORK1] != "E"
     && KBWREC.KBWLNCHR[KBWORK1] != "I"
     && KBWREC.KBWLNCHR[KBWORK1] != "O"
     && KBWREC.KBWLNCHR[KBWORK1] != "U"
     && KBWREC.KBWLNCHR[KBWORK1] != "'"
     && KBWREC.KBWLNCHR[KBWORK1] != "-"
     && KBWREC.KBWLNCHR[KBWORK1] != " ")
      KBWREC.KBWSNCHR[KBWORK2] = KBWREC.KBWLNCHR[KBWORK1];
      KBWREC.KBWORK2 = KBWREC.KBWORK2 + 1;
    else
      if (KBWREC.KBWORK1 == 1)
        KBWREC.KBWSNCHR[KBWORK2] = KBWREC.KBWLNCHR[KBWORK1];
        KBWREC.KBWORK2 = KBWREC.KBWORK2 + 1;
      end
    end

    KBWREC.KBWORK1 = KBWREC.KBWORK1 + 1;

  end


end // end XPKB060

// Remove buyer info from KBWREC
Function XPKB090()
  KBWREC.KBABUYID = 0;
  KBWREC.XXXLSTNM = " ";
  KBWREC.XXXFSTNM = " ";
  KBWREC.XXXMDINT = " ";
  KBWREC.XXXGNTNM = " ";
  KBWREC.XXXPHN = " ";
  KBWREC.XXXAPHN = " ";
  KBWREC.YBTCD = " ";
  KBWREC.KBABUYFL = " ";
  KBWREC.YMLCD = " ";
  KBWREC.KUCCOID = 0;
  KBWREC.KBW-KUMSTRID = 0;
  KBWREC.XAD-ADDR-TYP-CD = " ";
  KBWREC.KULAAID = 0;
  KBWREC.XXXUSID1 = " ";
  KBWREC.XXXUSID2 = " ";
  move " " to KBWREC.YBBCD[1] for all;
  KBWREC.XXXSTAT = " ";
  KBWREC.ZZZSDT = 0;
  KBWREC.ZZZCHGDT = 0;
  KBWREC.ZZZCHGTM = 0;
  KBWREC.ZZZCHGCT = 0;
  KBWREC.KBWBUYID = 0;
  KBWREC.KBWFSTNM = " ";
  KBWREC.KBWLSTNM = " ";
  KBWREC.KBASTAT = " ";
  KBWREC.KUMSTRNM = " ";
  KBWREC.KUMSTRID = 0;
  KBWREC.KBWSTRID = 0;
  KBWREC.XNXCD = 0;
  KBWREC.KBWDPTID = 0;
  KBWREC.KBWANBR = 0;
  move " " to KBWREC.KBWASEL[1] for all;
  move 0 to KBWREC.KBWACNBR[1] for all;
  move 0 to KBWREC.KBWASNBR[1] for all;
  KBWREC.XXXADDR1 = " ";
  KBWREC.XXXADDR2 = " ";
  KBWREC.XXXADDR3 = " ";
  KBWREC.XXXCITY = " ";
  KBWREC.XSTCD = " ";
  KBWREC.XXXZIP = " ";
  KBWREC.XCTCD = " ";
  KBWREC.KBWPAGE = 0;
  KBWREC.KBXXEDT = 0;
  KBWREC.KBXXXDT = 0;
end // end XPKB090

// set-up audit record (address)
Function XPKB099()
  XPKB031(); /* ; get date and time*/
  KUZREC.ZZZSDT = TA2REC.TA2GRGGN;
  KUZREC.ZZHHMMSS = TA2REC.TA2TIMEN;
  KUZREC.KUZDATA = KB3REC.KB3GRP; /* ; move row*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* ; user id*/
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
                                   /* ; get seq and length of row*/
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "XPKB099 "; /* ; abend, can't write audit*/
    TA1REC.TA1LOCAT[2] = "KIZTBL ";
    TA1REC.TA1LOCAT[3] = "NTFND";
    TA1REC.TA1TBLVU = KUZREC.XXXTBLNM;
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900();
  end

  set SQLCA empty;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* ; not able to add record*/
    TA1REC.TA1LOCAT[1] = "XPKB099 ";
    TA1REC.TA1LOCAT[2] = "IO0500 ";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900(); /* ; abend*/
  end
end // end XPKB099

// PURGE TEMPORARY STORAGE
Function XPKB230()

  set TA5REC empty;

  TA5REC.TA5APPID = "KBY"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KBYREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBYREC.KBY-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end

end // end XPKB230

// DATABASE ABEND ROUTINE
Function XPKB900()


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP;
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  COMMAREA.CATOAP = "KB0M";
  XSEXIT();
  exit program;


end // end XPKB900

// APPLICATION ERROR ROUTINE
Function XPKB990()
       /* Application Error Routine*/

   /* The following fields will be filled in by the*/
   /* calling routine before entering this routine:*/
     /* ta1tblke    = key to file being accessed*/
     /* ta1locat(1) = process name*/
     /* ta1locat(2) = optional add'l location info*/
     /* ta1locat(3) = optional add'l location info*/
     /* ta1locat(4) = optional add'l location info*/
     /* taerec.taedesc1 = a description of the problem*/
     /* taerec.taedesc2 = more problem description*/
     /* ta1map = appl's mapname*/

   /* Return code processing will also be handled by the*/
   /* calling routine.*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "RETN"; /* diags*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  COMMAREA.CATOAP = "KB0M";
  XSEXIT();
  exit program;

end // end XPKB990

// Application initialization
Function XPKS-00001()
  /* ------------------------------------------------------------*/
  /* Ensure that the COMMAREA has been properly formatted.*/
  /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  /* ------------------------------------------------------------*/
  /* Initialize the segmented transaction identification.*/
  /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

  /* ------------------------------------------------------------*/
  /* If control was passed to this transaction from another*/
  /* within the same application system, restore the work record*/
  /* from the COMMAREA.  Otherwise, initialize the work record.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    KSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set KSWREC empty; /* Initialize work record area*/

  end

  /* ------------------------------------------------------------*/
  /* Initialize CSP special function data items.*/
  /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPKS-00001

// initial process
Function XPNB100()

   /* ***********************************************************/
         /* purpose:  date reformatting*/
   /* ***********************************************************/

   /* this will take an 8 char. field (nbwrec.nbwdate),*/
   /* strip out the numeric portion and return all of the*/
   /* formats shown below.  if an alphabetical character (a to z)*/
   /* is found, nbwrec.nbwnumfl flag byte will be set to 'n', the*/
   /* returning num. fields set to zero and char fields to blank.*/
   /* all other non-numeric characters will be ignored.*/


   /* field name       type   length     contents*/

   /* nbwch8            cha      8       mm-dd-yy*/
   /* nbwch6            cha      6       mmddyy*/
   /* nbwnu6            num      6       mmddyy*/
   /* nbwnu8            num      8       ccyymmdd*/

   /* ***********************************************************/



  NBWNUMFL = "Y"; /* ; numeric flag*/
  NBWREC.NBWSUB1 = 8; /* ; sub. incomming date*/
  NBWREC.NBWSUB2 = 6; /* ; sub. refor. date*/
  NBWREC.NBWNU6 = 0; /* ; mmddyy   numeric*/
  NBWREC.NBWNU8 = 0; /* ; ccyymmdd numeric*/
  NBWREC.NBWCH6 = "000000"; /* ; mmddyy   char.*/
  NBWREC.NBWCH8 = "00-00-00"; /* ; mm-dd-yy char.*/



  while (NBWREC.NBWSUB1 >= 1
   && NBWREC.NBWSUB2 >= 1)

    if (NBWREC.NBWCH8S[NBWSUB1] >= "0"
     && NBWREC.NBWCH8S[NBWSUB1] <= "9")

      NBWREC.NBWCH6S[NBWSUB2] = NBWREC.NBWCH8S[NBWSUB1];
      NBWREC.NBWSUB2 = NBWREC.NBWSUB2 - 1; /* set down sub2*/
    else
      if (NBWREC.NBWCH8S[NBWSUB1] >= "A"
       && NBWREC.NBWCH8S[NBWSUB1] <= "Z")
        NBWREC.NBWNUMFL = "N"; /* set num flag to 'no'*/
        NBWREC.NBWNU6 = 0; /* mmddyy   numeric*/
        NBWREC.NBWNU8 = 0; /* ccyymmdd numeric*/
        NBWREC.NBWCH6 = " "; /* mmddyy   char.*/
        NBWREC.NBWCH8 = " "; /* mm-dd-yy char.*/
        NBWREC.NBWSUB1 = 1; /* stop 'while loop'*/
        NBWREC.NBWSUB2 = 1; /* stop 'while loop'*/
      end
    end
    NBWREC.NBWSUB1 = NBWREC.NBWSUB1 - 1; /* set down sub1*/
  end

  if (NBWREC.NBWNUMFL == "Y") /* all numbers...*/


    /* ----------------------------------------------------------*/
       /* move mmddyy in cha format...to...mmddyy in num format*/
    /* ----------------------------------------------------------*/
    NBWREC.NBWNU6 = NBWREC.NBWCH6;


    /* ----------------------------------------------------------*/
       /* move mmddyy in cha format...to...mm-dd-yy in cha format*/
    /* ----------------------------------------------------------*/
    NBWREC.NBWCH8M = NBWREC.NBWNU6M; /* month*/
    NBWREC.NBWCH8D1 = "-"; /* dash 1*/
    NBWREC.NBWCH8D = NBWREC.NBWNU6D; /* day*/
    NBWREC.NBWCH8D2 = "-"; /* dash 2*/
    NBWREC.NBWCH8Y = NBWREC.NBWNU6Y; /* year*/


    /* ----------------------------------------------------------*/
       /* move mmddyy in num format...to...ccyymmdd in num format*/
    /* ----------------------------------------------------------*/
    NBWREC.NBWNU8M = NBWREC.NBWNU6M; /* month*/
    NBWREC.NBWNU8D = NBWREC.NBWNU6D; /* day*/
    NBWREC.NBWNU8Y = NBWREC.NBWNU6Y; /* year*/

    if (NBWREC.NBWNU6Y <= 51)
      NBWREC.NBWNU8C = 20; /* century*/
    else
      NBWREC.NBWNU8C = 19; /* century*/
    end
  end



   /* -------------  end process xpnb100  --------------------*/
end // end XPNB100

// initial process
Function XPNB200()

   /* ***********************************************************/
         /* purpose:  date reformatting*/
   /* ***********************************************************/

   /* this will take a date from nbwrec.nbwnu8 (format ccyymmdd)*/
   /* and return all of the formats shown below.*/

   /* field name       type   length     contents*/

   /* nbwch8            cha      8       mm-dd-yy*/
   /* nbwch6            cha      6       mmddyy*/
   /* nbwnu6            num      6       mmddyy*/

   /* ***********************************************************/



  NBWNUMFL = "Y"; /* ; numeric flag*/
  NBWREC.NBWNU6 = 0; /* ; mmddyy   numeric*/
  NBWREC.NBWCH6 = " "; /* ; mmddyy   char.*/
  NBWREC.NBWCH8 = " "; /* ; mm-dd-yy char.*/



   /* ----------------------------------------------------------*/
     /* move ccyymmdd  num format...to...mmddyy   in num format*/
   /* ----------------------------------------------------------*/
  NBWREC.NBWNU6M = NBWREC.NBWNU8M; /* month*/
  NBWREC.NBWNU6D = NBWREC.NBWNU8D; /* day*/
  NBWREC.NBWNU6Y = NBWREC.NBWNU8Y; /* year*/


   /* ----------------------------------------------------------*/
     /* move   mmddyy  num format...to...mmddyy   in cha format*/
   /* ----------------------------------------------------------*/
  NBWREC.NBWCH6 = NBWREC.NBWNU6;


   /* ----------------------------------------------------------*/
     /* move ccyymmdd  num format...to...mm-dd-yy in cha format*/
   /* ----------------------------------------------------------*/
  NBWREC.NBWCH8M = NBWREC.NBWNU8M; /* month*/
  NBWREC.NBWCH8D1 = "-"; /* ; dash-1*/
  NBWREC.NBWCH8D = NBWREC.NBWNU8D; /* day*/
  NBWREC.NBWCH8D2 = "-"; /* dash-2*/
  NBWREC.NBWCH8Y = NBWREC.NBWNU8Y; /* year*/



   /* -------------  end process xpnb200  --------------------*/
end // end XPNB200

// Get inquiry screen hdr fields
Function XPNI001()
   /* ************************************************************/
   /* *      This process gets the screen header fields common  **/
   /* *   to the product summary, addresses, and miscellaneous  **/
   /* *   charges applications.                                 **/
   /* *                                                         **/
   /* *   NOTE: It assumes a value in nierec.nidivcid           **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "XPNI001"; /* set current process name*/

   /* ***************************************/
   /* Get the Product Invoice Header record*/
   /* ***************************************/

   /* ************************/
   /* NIEREC - Select Unique*/
   /* ************************/

  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)

    NIWREC.OP1CUOID = VPIHDR01.OP1CUOID;
    NIWREC.OP1NORID = VPIHDR01.OP1NORID;
    NIWREC.KUCCOID = VPIHDR01.KUCCOID;
    NIWREC.KUMSTRID = VPIHDR01.KUMSTRID;

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If record not found*/
      NIWREC.NIWMSGNR = 37; /* No Invoice(s) found...*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
      return;
    end
  end

   /* ***************************************/
   /* Get the Customer Name & country code*/
   /* ***************************************/

  KUCREC.KUCCOID = VPIHDR01.KUCCOID;

   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
    NIWREC.KUCCONM = KUCREC.KUCCONM; /* Load W/S fields*/
    if (KUCREC.XCTCD in XCTTBL.XCTCD)
      NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

  else /* Record not found*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

   /* ***************************************/
   /* Get the Invoice Status abbreviation*/
   /* ***************************************/

  if (VPIHDR01.ZISCD in ZISTBL.ZISCD)
    NIWREC.NIWSTAB = ZISTBL.ZISABRV[sysVar.arrayIndex];
  end

   /* ************************************/
   /* Get the Document Type abbreviation*/
   /* ************************************/

  NIWREC.NIWZDTCD = VPIHDR01.ZDTCD;
  if (VPIHDR01.ZDTCD in ZDTTBL.ZDTCD)
    NIWREC.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end

   /* **************************/
   /* Get the Remit To Address*/
   /* **************************/

  if (VPIHDR01.XLBCD in XLATBL.XLBCD)
    NIWREC.XXXADR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
  end

   /* ************************/
   /* Get the Sales G/L Code*/
   /* ************************/

  NLXREC.GLAENT = VPIHDR01.NIEENT2;
  NLXREC.GLARCID = VPIHDR01.NIERCID2;
  NLXREC.GLANTAC = VPIHDR01.NIENTAC2;
  NLXREC.GLASUB = VPIHDR01.NIESUB2;
  NLXREC.GLAPRJ = VPIHDR01.NIEPRJ2;
  NIWREC.NIWSLSGL = NLXREC.GLAGRP;

   /* ***************************************/
   /* Get the Foreign Currency abbreviation*/
   /* ***************************************/
   /* RETR NIEREC.ZFCCD ZFCTBL NIWREC.ZFCDESC ZFCDESC;*/

  set VZFC0001 empty;

  if (VPIHDR01.ZFCCD > "   ")
    XSNLS-S-VZFC0001(); /* Select Unique Using DC0060*/
  end

   /* ***********************/
   /* Get the Exchange Rate*/
   /* ***********************/

   /* RETR NIEREC.ZFCCD ZFCTBL NIWREC.ZFCABRV ZFCABRV;*/

   /* *****************************************/
   /* Get GPC Code for display purposes*/
   /* *****************************************/

   /* MOVE NIEREC.NIDIVCID TO NIHREC.NIDIVCID; Build P/I item key*/

   /* MOVE '**' TO NIHREC.XGPCD       ; Set 'wildcard'*/
   /* MOVE '******' TO NIHREC.SY1STNBR       ; Set 'wildcard'*/
   /* MOVE '***' TO NIHREC.SY2CLRID;*/
   /* MOVE '**' TO NIHREC.XDMCD;*/
   /* MOVE '**' TO NIHREC.XQACD;*/

   /* ************************/
   /* NIHREC - Open cursor 1*/
   /* ************************/

   /* ALL IO4480 'S1',SQLCA,NIHREC (NOMAPS,NONCSP; Open P/I curs*/

   /* iF SQLCA.SQLCODE NE 0;*/
   /* MOVE 'S1     ' TO TA1REC.TA1LOCAT(2) ;  database action*/
   /* MOVE 'IO4480 ' TO TA1REC.TA1LOCAT(3) ;  io module*/
   /* MOVE 'DNILO' TO TA1REC.TA1DBASE      ;  database*/
   /* MOVE 'VPIITM01' TO TA1REC.TA1TBLVU   ;  table view*/
   /* PERFORM XPNL005               ; abend routine*/
   /* ELSE ;*/

   /* ************************/
   /* NIHREC - Load Cursor 1*/
   /* ************************/

    /* CALL IO4480 'N1',SQLCA,NIHREC (NOMAPS,NONCSP; Load P/I itm*/
    /* ;*/
    /* IF SQLCA.SQLCODE NE 0         ; No Line items found*/
      /* ;*/
      /* CALL IO4480 'C1',SQLCA,NIHREC (NOMAPS,NONCSP; Close curs*/
      /* ;*/
      /* MOVE 'N1     ' TO TA1REC.TA1LOCAT(2);  database action*/
      /* MOVE 'IO4480 ' TO TA1REC.TA1LOCAT(3);  io module*/
      /* MOVE 'DNILO' TO TA1REC.TA1DBASE    ;  database*/
      /* MOVE 'VPIITM01' TO TA1REC.TA1TBLVU ;  table view*/
      /* PERFORM XPNL005             ; abend routine*/
    /* ELSE ;*/
      /* MOVE NIHREC.NIDIVCID TO NIWREC.NIWIAIVC(1); Load*/
      /* MOVE NIEREC.ZDTCD TO NIWREC.NIWZDTCD(1); array*/
      /* MOVE NIHREC.XGPCD TO NIWREC.NIWIAGPC(1); fields...*/

      /* CALL IO4480 'C1',SQLCA,NIHREC (NOMAPS,NONCSP; Close curs*/
      /* ;*/
      /* IF SQLCA.SQLCODE NE 0;*/
        /* MOVE 'C1     ' TO TA1REC.TA1LOCAT(2);  database action*/
        /* MOVE 'IO4480 ' TO TA1REC.TA1LOCAT(3);  io module*/
        /* MOVE 'DNILO' TO TA1REC.TA1DBASE  ;  database*/
        /* MOVE 'VPIITM01' TO TA1REC.TA1TBLVU;  table view*/
        /* PERFORM XPNL005           ; abend routine*/
      /* END ;*/
    /* END ;*/
   /* END ;*/

end // end XPNI001

// Load wrorking storage
Function XPNK-001()
   /* ************************************************************/
   /* *   This process will load the NKWREC working storage     **/
   /* *   fields for a fast path entry.                         **/
   /* *                                                         **/
   /* *   NOTE: It assumes a value in claim id in NKWREC        **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "XPNK-001"; /* set current process name*/

   /* ***************************************/
   /* Get the claim header record*/
   /* ***************************************/
  if (NKWREC.NL-CLM-ID > 0)
    VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
   /* ***************************************/
    /* VNCHDR01 - Select Unique*/
   /* ***************************************/

    call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

    if (SQLCA.VAGen_SQLCODE == 0)
      NKWREC.NL-CLM-ID = VNCHDR01.NL-CLM-ID;
      NKWREC.KUCCOID = VNCHDR01.KUCCOID;
      NKWREC.KUMSTRID = VNCHDR01.KUMSTRID;
      NKWREC.ZCR-CLM-RSN-CD = VNCHDR01.ZCR-CLM-RSN-CD;
      NKWREC.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
      NKWREC.XXX-SUM-ZCR-CD = VNCHDR01.XXX-SUM-ZCR-CD;
      NKW-REC-GLAENT = VNCHDR01.GLAENT;
      NKW-REC-GLARCID = VNCHDR01.GLARCID;
      NKW-REC-GLANTAC = VNCHDR01.GLANTAC;
      NKW-REC-GLASUB = VNCHDR01.GLASUB;
      NKW-REC-GLAPRJ = VNCHDR01.GLAPRJ;
      NKWREC.OP1CMPNB = VNCHDR01.OP1CMPNB;
      if (VNCHDR01.GLAENT > " ")
        if (VNCHDR01.GLAENT in XLATBL.GLAENT)
          NKWREC.XLBCD = XLATBL.XLBCD[sysVar.arrayIndex];
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100 /* Not found*/
       && SQLCA.VAGen_SQLCODE != -911) /* Database busy*/
        TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
        TA1REC.TA1LOCAT[3] = "IO6460 "; /* IO module*/
        TA1REC.TA1DBASE = "DNILO"; /* Database*/
        TA1REC.TA1TBLVU = "VNCHDR01"; /* Table view*/
        XPNL005(); /* Abend routine*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          NKWREC.NKW-MSG-NBR = 289; /* Not valid claim message*/
        else
          NKWREC.NKW-MSG-NBR = 4; /* Data base was busy message*/
        end
        COMMAREA.CATOAP = "NK0A";
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        XPNL002();
        return;
      end
    end
  end

   /* ***************************************/
   /* Get the Customer Name & country code*/
   /* ***************************************/

  if (NKWREC.KUCCOID > 0)
    KUCREC.KUCCOID = NKWREC.KUCCOID;

   /* ************************/
    /* KUCREC - Select Unique*/
   /* ************************/

    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      NKWREC.KUCCONM = KUCREC.KUCCONM; /* Load W/S fields*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NKWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
      if (NKWREC.XLBCD == " ")
        NKWREC.XLBCD = KUCREC.XLBCD;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Database busy*/
        NKWREC.NKW-MSG-NBR = 4; /* Data base was busy ...*/
        COMMAREA.CATOAP = "NK0A";
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        XPNL002();
        return;
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
        TA1REC.TA1DBASE = "DCUST"; /* database*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end

   /* ***************************************/
   /* Get the Invoice Status abbreviation*/
   /* ***************************************/

  if (NKWREC.ZCS-CLM-STAT-CD == " ")
    NKWREC.ZCS-CLM-STAT-CD = "IP";
  end
  if (NKWREC.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
    NKWREC.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
  end


   /* ***************************************/
   /* Get the claim reason abbreviation*/
   /* ***************************************/

  if (NKWREC.ZCR-CLM-RSN-CD > " ")
    if (NKWREC.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD)
      NKWREC.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
    end
  end

   /* ************************************/
   /* Get the Claim Type*/
   /* ************************************/

  XSNKS-SEL-VSUMCD01();

   /* ******************************/
   /* Get the receivable G/L Code*/
   /* ******************************/

  NLXREC.GLAENT = VNCHDR01.GLAENT;
  NLXREC.GLARCID = VNCHDR01.GLARCID;
  NLXREC.GLANTAC = VNCHDR01.GLANTAC;
  NLXREC.GLASUB = VNCHDR01.GLASUB;
  NLXREC.GLAPRJ = VNCHDR01.GLAPRJ;
  NKWREC.NKW-REC-GL-CD = NLXREC.GLAGRP;


end // end XPNK-001

// Restatus a claim
Function XPNK-002()
   /* ************************************************************/
   /* *   This process will re-status an claim.  It used ezeaid **/
   /* *   PF5 to approve and ezeaid PF17 to dis-approve.        **/
   /* *                                                         **/
   /* *   NOTE: It assumes the claim id is in VNCHDR01          **/
   /* *                                                         **/
   /* *   Note: The change level fields 2, 3, 4 are used to     **/
   /* *         indicate the user's departmental approval       **/
   /* *         level.  The users are not limited to one        **/
   /* *         approval level, that is some users will have    **/
   /* *         1, 2 or all three approval levels.              **/
   /* *                                                         **/
   /* *         CACLVL(2) = A supervisor.                       **/
   /* *         CACLVL(3) = The credit department.              **/
   /* *         CACLVL(4) = The accounting department.          **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "XPNK-002"; /* set current process name*/

   /* ***************************************/
   /* Get the claim header record*/
   /* ***************************************/
  converseLib.validationFailed(0);
  if (VNCHDR01.NL-CLM-ID > 0)

   /* ***************************************/
    /* VNCHDR01 - Select Unique*/
   /* ***************************************/

    call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        NKWREC.NKW-MSG-NBR = 276; /* Not valid claim message*/
        COMMAREA.CATOAP = "NK0A";
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        XPNL002();
      else
        converseLib.validationFailed(4);
      end
      return;
    end
  else
    NKWREC.NKW-MSG-NBR = 276; /* Not valid claim message*/
    COMMAREA.CATOAP = "NK0A";
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
  end

   /* Dis-allow approval of a claim in a final status*/

  if (VNCHDR01.ZCS-CLM-STAT-CD == "AP") /* claim in approved status*/
    if (converseVar.eventKey is pf17) /* disapprove*/
      if (CACLVL[3] == "N") /* credit user/not allowed*/
        converseLib.validationFailed(309);
        return;
      end
    else
      converseLib.validationFailed(340);
      return;
    end
  end
  if (VNCHDR01.ZCS-CLM-STAT-CD == "AC" /* claim in final status*/
   || VNCHDR01.ZCS-CLM-STAT-CD == "RP" /* can not approve*/
   || VNCHDR01.ZCS-CLM-STAT-CD == "IP" /* can not approve*/
   || VNCHDR01.ZCS-CLM-STAT-CD == "VD") /* can not approve*/
    if (VNCHDR01.ZCS-CLM-STAT-CD == "VD")
      converseLib.validationFailed(390);
    else
      if (VNCHDR01.ZCS-CLM-STAT-CD == "IP") /* can not approve*/
        if (converseVar.eventKey is pf17)
          converseLib.validationFailed(298);
        else
          converseLib.validationFailed(292);
        end
      else
        converseLib.validationFailed(293);
      end
    end
    return;
  end

   /* Update account approvals.  The CACLVL(4) will be equal to 'y'*/
   /* The statuses which accounting my not approve are IP, AC, RP.*/

  if (CACLVL[4] == "Y")
    VNCHDR01.XXX-USER-ID4 = COMMAREA.CAUSERID;
    if (CACLVL[3] == "Y"
     || VNCHDR01.XXX-USER-ID3 == " ")
      VNCHDR01.XXX-USER-ID3 = COMMAREA.CAUSERID;
    end
    if (VNCHDR01.ZCS-CLM-STAT-CD == "CD")
      VNCHDR01.XXX-USER-ID3 = COMMAREA.CAUSERID;
    end
    if (VNCHDR01.ZCS-CLM-STAT-CD == "CA")
      VNCHDR01.ZCS-CLM-STAT-CD = "AP";
      XSNKS-SET-VNCHDR01();
      return;
    end
  end

   /* Update supers'approvals.  The CACLVL(2) will be equal to 'y'*/
   /* The statuses which credit my not approve are IP, AC, RC, CA, CD*/

  if (CACLVL[2] == "Y")
    if (converseVar.eventKey is pf5)
      if (VNCHDR01.ZCS-CLM-STAT-CD == "CA"
       || VNCHDR01.ZCS-CLM-STAT-CD == "CD"
       || VNCHDR01.ZCS-CLM-STAT-CD == "SA"
       || VNCHDR01.ZCS-CLM-STAT-CD == "AP")
        if (CACLVL[3] == "N")
          if (VNCHDR01.ZCS-CLM-STAT-CD == "SA")
            converseLib.validationFailed(340);
          else
            converseLib.validationFailed(293);
          end
          return;
        end
      else
        VNCHDR01.ZCS-CLM-STAT-CD = "SA";
        VNCHDR01.XXXUSID2 = COMMAREA.CAUSERID;
      end
    end
    if (converseVar.eventKey is pf17)
      if (VNCHDR01.ZCS-CLM-STAT-CD == "CD"
       || VNCHDR01.ZCS-CLM-STAT-CD == "CA"
       || VNCHDR01.ZCS-CLM-STAT-CD == "SD")
        if (CACLVL[3] == "N")
          if (VNCHDR01.ZCS-CLM-STAT-CD == "SD")
            converseLib.validationFailed(340);
          else
            converseLib.validationFailed(293);
          end
          return;
        end
      else
        VNCHDR01.ZCS-CLM-STAT-CD = "SD";
        VNCHDR01.XXXUSID2 = COMMAREA.CAUSERID;
      end
    end
  end

   /* Update credit approvals.  The CACLVL(3) will be equal to 'y'*/
   /* The statuses which credit my not approve are IP, AC, rc.*/

  if (CACLVL[3] == "Y")
    if (CACLVL[2] == "N"
     && VNCHDR01.XXXUSID2 == " ")
      converseLib.validationFailed(374);
      return;
    end
    if (converseVar.eventKey is pf5)
      if (VNCHDR01.ZCS-CLM-STAT-CD == "CA")
        converseLib.validationFailed(340);
        return;
      else
        if (VNCHDR01.XXX-USER-ID4 == " ")
          VNCHDR01.ZCS-CLM-STAT-CD = "CA";
        else
          VNCHDR01.ZCS-CLM-STAT-CD = "AP";
        end
        VNCHDR01.XXX-USER-ID3 = COMMAREA.CAUSERID;
        if (VNCHDR01.XXXUSID2 == " ")
          VNCHDR01.XXXUSID2 = COMMAREA.CAUSERID;
        end
      end
    end
    if (converseVar.eventKey is pf17)
      if (VNCHDR01.ZCS-CLM-STAT-CD == "CD")
        converseLib.validationFailed(340);
        return;
      else
        VNCHDR01.ZCS-CLM-STAT-CD = "CD";
        VNCHDR01.XXX-USER-ID3 = COMMAREA.CAUSERID;
      end
    end
  end

  XSNKS-SET-VNCHDR01();
end // end XPNK-002

// temp storage abend routine
Function XPNL-006()

       /* abend for bad temp storage access*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOC = NLXREC.NLXCPROC; /* aborting process*/
  TAEREC.TAEDESC1 = sysVar.errorCode;
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end /* abend module*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/

end // end XPNL-006

// common date edit routine
Function XPNL001()
   /* ************************************************************/
   /* *      this process edits a date                          **/
   /* *                                                         **/
   /* *   the date is passed in the field nlxrec.xxxed8c        **/
   /* *   if the date has dashes ('-') in it, it must be        **/
   /* *                  mm-dd-yy                               **/
   /* *   if the date has no dashes it must be                  **/
   /* *                  mmddyy                                 **/
   /* *   if the edit is valid, the formatted date is           **/
   /* *      returned in the field nlxrec.xxxfldt as mm-dd-yy   **/
   /* *      and in the field nlxrec.xxxwcymd as cccyymmdd      **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "XPNL001"; /* set current process name*/

  NLXREC.XXXFSDT = 0; /* initialize working date*/
  set TA2REC empty; /* initialize utility parameter record*/

   /* now scan the input date for valid characters*/
   /* only 0 -> 9, space, and '-' are valid*/

  NLXREC.NLXWFLDC = NLXREC.XXXED8C; /* move date to work array*/
  NLXREC.NLXWLTRX = 1; /* initialize index*/
  NLXREC.NLXLTRX1 = 0; /* and counter for '-'*/
  while (NLXREC.NLXWLTRX <= 8)
    if (NLXREC.NLXWLTR[NLXWLTRX] >= "0"
     && NLXREC.NLXWLTR[NLXWLTRX] <= "9")
        /* next sentence - these digits are ok*/
    else
      if (NLXREC.NLXWLTR[NLXWLTRX] == "-")
        NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 + 1; /* add 1 to dash count*/
      else
        if (NLXREC.NLXWLTR[NLXWLTRX] == " ")
            /* next sentence - these are ok, too*/
        else
          NLXREC.NLXVALDT = "N"; /* invalid digits in date*/
          return;
        end
      end
    end
    NLXREC.NLXWLTRX = NLXREC.NLXWLTRX + 1;
  end

  if (NLXREC.NLXLTRX1 == 0) /* we can have no dashes*/
    if (NLXREC.XXXEDC7 == " "
     && NLXREC.XXXEDC8 == " ")
      /* next sentence (this are ok)*/
    else
      NLXREC.XXXEDC7 = " "; /* clear out left over values*/
      NLXREC.XXXEDC8 = " "; /* user entered mmddyy over mm-dd-yy*/
    end
  else
    if (NLXREC.NLXLTRX1 == 2) /* 2 dashes are ok*/
      if (NLXREC.XXXEDC3 == "-"
       && NLXREC.XXXEDC6 == "-")
          /* next sentence (dashes seem to be in the proper place)*/
      else
        NLXREC.NLXVALDT = "N"; /* not a valid date*/
        return; /* so exit*/
      end
    else
      NLXREC.NLXVALDT = "N"; /* not a valid date*/
      return; /* so exit*/
    end
  end

   /* first get the month*/
  NLXREC.XXXFSM1 = NLXREC.XXXEDN1;
  NLXREC.XXXFSM2 = NLXREC.XXXEDN2;
   /* then we get the day and year*/
  if (NLXREC.XXXEDC3 == "-"
   && NLXREC.XXXEDC6 == "-")
    NLXREC.XXXFSD1 = NLXREC.XXXEDN4;
    NLXREC.XXXFSD2 = NLXREC.XXXEDN5;
    NLXREC.XXXFSY1 = NLXREC.XXXEDN7;
    NLXREC.XXXFSY2 = NLXREC.XXXEDN8;
  else
    NLXREC.XXXFSD1 = NLXREC.XXXEDN3;
    NLXREC.XXXFSD2 = NLXREC.XXXEDN4;
    NLXREC.XXXFSY1 = NLXREC.XXXEDN5;
    NLXREC.XXXFSY2 = NLXREC.XXXEDN6;
  end

  TA2REC.TA2GRGAN = NLXREC.XXXFSDT;
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    NLXREC.NLXVALDT = "N"; /* set valid-date-flag to 'no'*/
  else
    NLXREC.XXXFLDT = TA2REC.TA2GRGB;
    NLXREC.XXXWCYMD = TA2REC.TA2GRGGN;
  end

end // end XPNL001

// common exit routine
Function XPNL002()
   /* ************************************************************/
   /* common exit routine*/

  NLXREC.NLXCPROC = "XPNL002"; /* set current process name*/

  XSEXIT();

   /* if xsexit failed*/

  NLXREC.NLXERRF = "Y";
  converseLib.validationFailed(150); /* security error*/

end // end XPNL002

// common date format routine
Function XPNL003()
   /* ************************************************************/
   /* *   this process formats a db2 date for screen display    **/
   /* *                                                         **/
   /* *   the date is passed in the field nlxrec.xxxwcymd       **/
   /* *   in format:  cccyymmdd                                 **/
   /* *                                                         **/
   /* *   the date is returned in the field nlxrec.xxxfldt      **/
   /* *   in format:  mm-dd-yy                                  **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "XPNL003"; /* set current process name*/

  NLXREC.XXXFLMM = NLXREC.XXXWMM; /* move month*/
  NLXREC.XXXSEP5 = "-"; /* fill char*/
  NLXREC.XXXFLDD = NLXREC.XXXWDD; /* move month*/
  NLXREC.XXXSEP6 = "-"; /* fill char*/
  NLXREC.XXXFLYY = NLXREC.XXXWYY; /* move month*/

end // end XPNL003

// validate caitem as 8 numeric
Function XPNL004()
  NLXREC.NLXCPROC = "XPNL004"; /* set current process name*/

   /* *************************************************************/
   /* ****  V A L I D A T E     C A I T E M     N U M E R I C *****/
   /* ****  F O R  A N  8  D I G I T  F I E L D               *****/
   /* ****                                                    *****/
   /* **** loop thru all digits in COMMAREA.CAITEM field and  *****/
   /* **** check that each one is ( GE 0 ) and ( LE 9 ). also *****/
   /* **** make sure there are no imbedded blanks. leading    *****/
   /* **** and trailing blanks are okay.                      *****/
   /* ****                                                    *****/
   /* **** numeric item of length 8 will be returned in       *****/
   /* **** NLXREC.NLXNUM8A if valid                           *****/
   /* ****                                                    *****/
   /* *************************************************************/

   /* Back thru first 8 bytes of caitem*/

  NLXREC.NLXNUM8A = 0; /* Set output field to 0*/
  NLXREC.NLXITMX = 8; /* Set Order # subscript to 8 (max)*/
  NLXREC.NLXLTRX1 = 8; /* Set working subscript to 8*/
  while (NLXREC.NLXLTRX1 > 0 /* Loop thru character array*/
   && COMMAREA.CAITMLTR[NLXLTRX1] == " ") /* trailing blanks okay*/
    NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 - 1; /* decrement subscript*/
  end /* end of "while" loop*/

   /* *************************************************************/
   /* **** at this point, if nlxltrx1 gt 0, the first no-blank*****/
   /* **** character has been found                           *****/
   /* *************************************************************/
   /* **** but if nlxltrx1 eq 0,  then entire caitem is blank. ****/
   /* *************************************************************/

  if (NLXREC.NLXLTRX1 == 0) /* entire field is blank*/
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(98); /* blank order # invalid*/
    return;
  end

   /* check each digit for numeric, load out if valid*/

  while (NLXREC.NLXLTRX1 > 0
   && COMMAREA.CAITMLTR[NLXLTRX1] != " ")
    if (COMMAREA.CAITMLTR[NLXLTRX1] >= "0"
     && COMMAREA.CAITMLTR[NLXLTRX1] <= "9")
      NLXREC.NLXBYTE[NLXITMX] = COMMAREA.CAITMLTR[NLXLTRX1];
      NLXREC.NLXITMX = NLXREC.NLXITMX - 1;
    else
      converseLib.validationFailed(98);
      NLXREC.NLXERRF = "Y";
      return;
    end
    NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 - 1;
  end

   /* *************************************************************/
   /* **** at this point the first blank has been encountered *****/
   /* **** following 1 or more numeric charaters -or- the end *****/
   /* **** of the character array has been reached. now make  *****/
   /* **** sure that any remaining characters in the array    *****/
   /* **** are blanks.                                        *****/
   /* *************************************************************/

  while (NLXREC.NLXLTRX1 > 0)
    if (COMMAREA.CAITMLTR[NLXLTRX1] != " ")
      converseLib.validationFailed(98);
      NLXREC.NLXERRF = "Y";
      return;
    else
      NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 - 1;
    end
  end

end // end XPNL004

// abend routine
Function XPNL005()

       /* abend with negative sqlcode*/

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOC = NLXREC.NLXCPROC; /* aborting process*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(4);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* synpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

end // end XPNL005

// check night time inq mode
Function XPOM100()
   /* ***********************************************************/
         /* purpose:  check for night time inquire mode*/
   /* ***********************************************************/

   /* this statement group, when performed, will put a value in*/
   /* osirec.osimode to indicate if the performing module will*/
   /* allow updates or just read only processes.  this flag*/
   /* will either contain 'i' for inquiry only or 'u' for*/
   /* updates allowed.  this is based on the current time where*/
   /* the mode will be 'u' between 4:01 a.m. and 6:59 p.m.; and*/
   /* 'i' between 7:00 p.m. and 4:00 a.m.*/


   /* record used:  osirec*/

   /* ***********************************************************/


  set OSIREC empty;
  OSIREC.OSICUTM = VGVar.currentFormattedTime; /* current time*/
  OSIHHMM = OSICUHH * 100;
  OSIHHMM = OSIHHMM + OSICUMM;


  if (OSIHHMM > 400 /* after  4:00 a.m.*/
   && OSIHHMM < 1900) /* before 7:00 p.m.*/
    OSIMODE = "U"; /* update mode (daytime)*/
  else
    OSIMODE = "I"; /* inquire only mode (night time)*/
  end


   /* -------------  end process xpop300  --------------------*/
end // end XPOM100

// initial process
Function XPOP100()


   /* ***********************************************************/
         /* purpose:  date reformatting*/
   /* ***********************************************************/

   /* this will take an 8 char. field (osarec.osadate),*/
   /* strip out the numeric portion and return all of the*/
   /* formats shown below.  if an alphabetical character (a to z)*/
   /* is found, osarec.osanumfl flag byte will be set to 'n', the*/
   /* returning num. fields set to zero and char fields to blank.*/
   /* all other non-numeric characters will be ignored.*/


   /* field name       type   length     contents*/

   /* osach8            cha      8       mm-dd-yy*/
   /* osach6            cha      6       mmddyy*/
   /* osanu6            num      6       mmddyy*/
   /* osanu8            num      8       ccyymmdd*/

   /* ***********************************************************/



  OSAREC.OSANUMFL = "Y"; /* ; numeric flag*/
  OSAREC.OSASUB1 = 8; /* ; sub. incomming date*/
  OSAREC.OSASUB2 = 6; /* ; sub. refor. date*/
  OSAREC.OSANU6 = 0; /* ; mmddyy   numeric*/
  OSAREC.OSANU8 = 0; /* ; ccyymmdd numeric*/
  OSAREC.OSACH6 = "000000"; /* ; mmddyy   char.*/
  OSAREC.OSACH8 = "00-00-00"; /* ; mm-dd-yy char.*/



  while (OSAREC.OSASUB1 >= 1
   && OSAREC.OSASUB2 >= 1)

    if (OSAREC.OSACH8S[OSASUB1] >= "0"
     && OSAREC.OSACH8S[OSASUB1] <= "9")

      OSAREC.OSACH6S[OSASUB2] = OSAREC.OSACH8S[OSASUB1];
      OSAREC.OSASUB2 = OSAREC.OSASUB2 - 1; /* set down sub2*/
    else
      if (OSAREC.OSACH8S[OSASUB1] >= "A"
       && OSAREC.OSACH8S[OSASUB1] <= "Z")
        OSAREC.OSANUMFL = "N"; /* set num flag to 'no'*/
        OSAREC.OSANU6 = 0; /* mmddyy   numeric*/
        OSAREC.OSANU8 = 0; /* ccyymmdd numeric*/
        OSAREC.OSACH6 = " "; /* mmddyy   char.*/
        OSAREC.OSACH8 = " "; /* mm-dd-yy char.*/
        OSAREC.OSASUB1 = 1; /* stop 'while loop'*/
        OSAREC.OSASUB2 = 1; /* stop 'while loop'*/
      end
    end
    OSAREC.OSASUB1 = OSAREC.OSASUB1 - 1; /* set down sub1*/
  end

  if (OSAREC.OSANUMFL == "Y") /* all numbers...*/


    /* ----------------------------------------------------------*/
       /* move mmddyy in cha format...to...mmddyy in num format*/
    /* ----------------------------------------------------------*/
    OSAREC.OSANU6 = OSAREC.OSACH6;


    /* ----------------------------------------------------------*/
       /* move mmddyy in cha format...to...mm-dd-yy in cha format*/
    /* ----------------------------------------------------------*/
    OSAREC.OSACH8M = OSAREC.OSANU6M; /* month*/
    OSAREC.OSACH8D1 = "-"; /* dash 1*/
    OSAREC.OSACH8D = OSAREC.OSANU6D; /* day*/
    OSAREC.OSACH8D2 = "-"; /* dash 2*/
    OSAREC.OSACH8Y = OSAREC.OSANU6Y; /* year*/


    /* ----------------------------------------------------------*/
       /* move mmddyy in num format...to...ccyymmdd in num format*/
    /* ----------------------------------------------------------*/
    OSAREC.OSANU8M = OSAREC.OSANU6M; /* month*/
    OSAREC.OSANU8D = OSAREC.OSANU6D; /* day*/
    OSAREC.OSANU8Y = OSAREC.OSANU6Y; /* year*/

    if (OSAREC.OSANU6Y <= 51)
      OSAREC.OSANU8C = 20; /* century*/
    else
      OSAREC.OSANU8C = 19; /* century*/
    end
  end



   /* -------------  end process xsop100  --------------------*/
end // end XPOP100

// initial process
Function XPOP200()


   /* ***********************************************************/
         /* purpose:  date reformatting*/
   /* ***********************************************************/

   /* this will take a date from osarec.osanu8 (format ccyymmdd)*/
   /* and return all of the formats shown below.*/

   /* field name       type   length     contents*/

   /* osach8            cha      8       mm-dd-yy*/
   /* osach6            cha      6       mmddyy*/
   /* osanu6            num      6       mmddyy*/

   /* ***********************************************************/



  OSAREC.OSANUMFL = "Y"; /* ; numeric flag*/
  OSAREC.OSANU6 = 0; /* ; mmddyy   numeric*/
  OSAREC.OSACH6 = " "; /* ; mmddyy   char.*/
  OSAREC.OSACH8 = " "; /* ; mm-dd-yy char.*/



   /* ----------------------------------------------------------*/
     /* move ccyymmdd  num format...to...mmddyy   in num format*/
   /* ----------------------------------------------------------*/
  OSAREC.OSANU6M = OSAREC.OSANU8M; /* month*/
  OSAREC.OSANU6D = OSAREC.OSANU8D; /* day*/
  OSAREC.OSANU6Y = OSAREC.OSANU8Y; /* year*/


   /* ----------------------------------------------------------*/
     /* move   mmddyy  num format...to...mmddyy   in cha format*/
   /* ----------------------------------------------------------*/
  OSAREC.OSACH6 = OSAREC.OSANU6;


   /* ----------------------------------------------------------*/
     /* move ccyymmdd  num format...to...mm-dd-yy in cha format*/
   /* ----------------------------------------------------------*/
  OSAREC.OSACH8M = OSAREC.OSANU8M; /* month*/
  OSAREC.OSACH8D1 = "-"; /* ; dash-1*/
  OSAREC.OSACH8D = OSAREC.OSANU8D; /* day*/
  OSAREC.OSACH8D2 = "-"; /* dash-2*/
  OSAREC.OSACH8Y = OSAREC.OSANU8Y; /* year*/



   /* -------------  end process xpnb200  --------------------*/
end // end XPOP200

// Program Initialization
Function XPOS-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPOS-00000

// Application initialization
Function XPOZ-00001()
  /* ------------------------------------------------------------*/
  /* Ensure that the COMMAREA has been properly formatted.*/
  /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  /* ------------------------------------------------------------*/
  /* Initialize the segmented transaction identification.*/
  /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

  /* ------------------------------------------------------------*/
  /* If control was passed to this transaction from another*/
  /* within the same application system, restore the work record*/
  /* from the COMMAREA.  Otherwise, initialize the work record.*/
  /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    OZWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set OZWREC empty; /* Initialize work record area*/

  end

  /* ------------------------------------------------------------*/
  /* Initialize CSP special function data items.*/
  /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPOZ-00001

// Application initialization
Function XPPA001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* changes CICS start tran id on*/
                                   /* converse*/

  if (COMMAREA.CAFRMSYS == "PA") /* Came from within the system*/

    PAWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

    PAWREC.PAWBUYDT = 0;
    PAWREC.PAWCOFDT = 0;
    PAWREC.FB9COFTM = 0;

  else
    set PAWREC empty; /* Clear work record area*/

  end

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  converseVar.segmentedMode = 1; /* Force transaction segmented*/

   /* ---------------- end of process xppa001 --------------------*/

end // end XPPA001

// Get dates from dfbuy.vfmctl01
Function XPPA020()
   /* -----------------------------------------------------------*/
   /* the calling program will need to check if ezemno equals*/
   /* 10, if it does then the following statment will need to*/
   /* be included in the calling program:*/
     /* Set pa0?m001 page*/
   /* -----------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* If pawrec contains the current buy date, the cutoff date,*/
   /* and the cutoff time*/
     /* return to the calling process*/
   /* else*/
     /* obtain them from dfbuy.vfmctl01*/
     /* save in pawrec if successful*/
   /* -----------------------------------------------------------*/

  if (PAWREC.PAWBUYDT > 0 /* curr buy date present*/
   && PAWREC.PAWCOFDT > 0 /* and cutoff date present*/
   && PAWREC.FB9COFTM > 0) /* and cutoff time present*/

    return;

  else

    /* -----------------------------------------------------------*/
     /* select the table row from dfbuy.vfmctl01*/
    /* -----------------------------------------------------------*/

    set FB9REC empty; /* clear record storage area*/

    try
      call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
    end /* select row*/

    /* -----------------------------------------------------------*/
     /* if successful, return to the previous process*/
    /* -----------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/

      PAWREC.PAWBUYDT = FB9REC.FB8BUYDT; /* current buy date*/
      PAWREC.PAWCOFDT = FB9REC.FB9COFDT; /* cutoff date*/
      PAWREC.FB9COFTM = FB9REC.FB9COFTM; /* cutoff time*/

      return; /* return to previous process*/

    end

    TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

    PAWREC.XXXMODID = "X20"; /* module identification*/

    if (sysVar.errorCode == "00000000" /* call successfut*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/

    else

      converseLib.validationFailed(10); /* indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
    TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* data base name*/
    TA1REC.TA1TBLVU = "VFMCTL01"; /* table view name*/
    TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

    exit stack; /* exit to display map*/

  end


end // end XPPA020

// COMMENT POPUP
Function XPPA100()
   /* ************************************************************/
   /* * XPAX100  FORMAT AND DISPLAY XMPAM001*/
   /* **/
   /* *  THE PURPOSE OF THIS PROCESS IS TO FORMAT AND DISPLAY*/
   /* * DATA BASED ON AN O/A NUMBER.*/
   /* * THE PROCESS WILL PERFORM THE DB2 SELECTS FOR THE HEADER*/
   /* * AND FORMAT AND DISPLAY THE MAP. IF THERE ARE NO ROWS*/
   /* * FOUND, OR ANY OTHER ERROR OCCURS,  THE APPLICATION*/
   /* * USING THIS PROCESS MUST PERFORM ALL NECESSARY CALLS*/
   /* * TO ABEND ROUTINE.  THE PROCESS WILL MOVE ALL LITERAL*/
   /* * DATA NEEDED TO IDENTIFY THE LOCATION OF THE ERROR.*/
   /* **/
   /* ************************************************************/
   /* * USER REQUIREMENTS:*/
   /* *  BEFORE PERFORMING THIS PROCESS:*/
   /* *     SET PA9REC EMPTY*/
   /* *     MOVE 'REQUESTED O/A NUMBER' TO PA9REC.PA1OANBR*/
   /* *  AFTER PERFORMING THIS PROCESS:*/
   /* *     CHECK SQLCODE AND EZERTN 8*/
   /* *  IF NO COMMENT FOUND, AN EZEMNO WILL BE MOVED FOR YOU.*/
   /* ************************************************************/
   /* *NAME          DATE          COMMENTS*/
   /* *------------- --------   ---------------------------------*/
   /* *SCOCHR        10/30/89   CREATED*/
   /* **/
   /* ************************************************************/


  PA9REC.PA9COMTY = "H";
  PA9REC.YESCD = "00";

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4820" ("S1", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end


  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(42);
      XPPA120();
      return;
    else
      /* ------------------------------------------------------------*/
       /* If data not available, return  to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/


      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Table key*/

      return; /* Exit CALLER*/

    end
  end


  XPPA110(); /* FETCH A RECORD*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  XMPAM001.PA9COM[1] = PA9REC.PA9COM[1];
  XMPAM001.PA9COM[2] = PA9REC.PA9COM[2];
  XMPAM001.PA9COM[3] = PA9REC.PA9COM[3];


  XPPA120(); /* CLOSE CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  converse XMPAM001 ;
end // end XPPA100

// FETCH COMMENT CURSOR
Function XPPA110()
   /* ***********************************************/
   /* FETCH A ROW FROM DPRODA.VPACMT01*/
   /* ***********************************************/


  try
    call "IO4820" ("N1", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

    return;
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100) /* END OF SET*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  converseLib.validationFailed(10);


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Table key*/



end // end XPPA110

// CLOSE COMMENT CURSOR
Function XPPA120()
   /* ***********************************************/
   /* CLOSE CURSOR     DPRODA.VPACMT01*/
   /* ***********************************************/


  try
    call "IO4820" ("C1", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  converseLib.validationFailed(10);


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Table key*/



end // end XPPA120

// GET PAR VALID SIZE/ BOTTOM LIN
Function XPPA210()
   /* ***********************************************************/
   /* THE PURPOSE OF THIS PROCESS IS TO OBTAIN AND STORE IN*/
   /* WORKING STORAGE THE VALID SIZES AND BOTTOM LINE QUANTITIES*/
   /* FOUND IN PAR FOR A PARTICULAR SIZE QUANTITY*/
   /* -----------------------------------------------------------*/
   /* THE PROCESS WILL USE THE STYLE COLOR DIMENSION INFORMATION*/
   /* IN PA1REC.  IT WILL BE NECESSARY FOR THE CURRENT OA NUMBER*/
   /* TO HAVE HAD ITS HEADER FETCHED AND THAT DATA TO BE SITTING*/
   /* IN PA1REC.*/
   /* -----------------------------------------------------------*/
    /* THE FOLLOWING MUST BE IN THE APPLICATION IN ORDER TO*/
    /* SUPPORT THIS PROCESS:*/

    /* 1. PT5REC   USED TO SELECT SET FROM PAR*/
    /* 2. PAJREC   OUTPUT WILL BE STORED HERE*/
    /* 3. PAKREC   PARM LIST FOR PAR CALL*/
    /* 4. MOVE BOTTOMLINE DATE TO PAJREC.PT3YYMM*/
       /* DEFAULT TO CURRENT YYMM FOR VALID SIZE ONLY CALLS.*/
   /* -----------------------------------------------------------*/
    /* 1. CHECK TO SEE THAT PA1REC CONTAINS STYLE/COLOR/DIMENSION*/
       /* CODES > 'SPACES'.*/
    /* 2. CHECK TO SEE IF DATE PLACED IN PAJREC.PA3YYMM > 0.*/
       /* (USER MUST PREFILL WITH ALL NINES TO WILDCARD)*/
    /* 3. OPEN CURSOR ON PAR DATABASE FOR WAREHOUSE 2,4,7*/
    /* 4. FETCH CURSOR FOR PAR*/
       /* IF FIRST FETCH AND NO RECORDS FOUND*/
          /* SETUP ERROR MESSAGE AND EZERTN.*/
    /* 5. DETERMINE WAREHOUSE CODE AND MOVE INDICATOR AND*/
       /* QUANTITY TO WORKING STORAGE.*/
    /* 6. FETCH NEXT RECORD AND PROCESS THRU (5) UNTIL DONE*/
    /* 7. EZERTN*/
   /* *************************************************************/

  set PT5REC empty; /* CLEAR RECORD FOR PAR DATABASE*/

  PT5REC.SY1STNBR = PA1REC.SY1STNBR; /* STYLE NUMBER*/
  PT5REC.SY2CLRID = PA1REC.SY2CLRID; /* COLOR CODE*/
  PT5REC.XDMCD = PA1REC.XDMCD; /* DIMENSION*/

  PT5REC.PT3YYMM = PAJREC.PT3YYMM; /* bottom line date*/
  PT5REC.PC2INSEG = "000"; /* renamed from xsdcd*/
  PT5REC.XPGCD = "00"; /* PACKAGE TYPE*/
  PT5REC.XUMCD = "01"; /* UNIT OF MEASURE*/
  PT5REC.XQACD = "01"; /* QUALITY*/
  PT5REC.XGPCD = "02"; /* gpc code*/
  PAKREC.PAK1WFUN = "S1"; /* FUNCTION*/

   /* GET FIRST WAREHOUSE FOR REGION FROM DCORP.VSUMCD01 TABLE*/

  PAKREC.PAK1WHL = PAJREC.PAJ1W-REGION-WHSE[1]; /* LOW WHSE CODE*/
  PAKREC.PAK1WHH = PAJREC.PAJ1W-REGION-WHSE[1]; /* HIGH WHSE CODE*/

  sysVar.arrayIndex = 2;
  while (sysVar.arrayIndex <= 3)
    if (PAJREC.PAJ1W-REGION-WHSE[sysVar.arrayIndex] != " ")
      PAKREC.PAK1WHH = PAJREC.PAJ1W-REGION-WHSE[sysVar.arrayIndex]; /* HIGH WHSE*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  XSPAS06(); /* SELECT SET FROM PAR DATA BASE*/

  XSPAS07(); /* FETCH A RECORD FROM PAR DATABASE*/

  if (SQLCA.VAGen_SQLCODE == 100) /* NO RECORDS FOR THAT BUY MONTH*/
    PAWREC.XXXMSGNO = 85;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      return;

    end
  end

  while (SQLCA.VAGen_SQLCODE == 0)

    XPPA211(); /* MOVE DATA TO WORKING STORAGE*/

    XSPAS07(); /* FETCH PAR DATABASE RECORD*/

  end

  XSPAS08(); /* CLOSE SET FROM PAR DATABASE*/

  return;

end // end XPPA210

// SET UP QUANTITIES IN WORKING S
Function XPPA211()
   /* *****************************************************/
    /* THIS PROCESS WILL SETUP THE SWITCHES IN XPAXW01*/
    /* FOR VALID SIZES, IN ADDITION IT WILL PLACE THE*/
    /* SELECTED PAR BOTTOM LINE QUANTITIES IN THE SAME*/
    /* WORKING STORAGE AREA*/
   /* ---------------------------------------------------*/
   /* 1. SET INDEXES TO 1*/
   /* 2. DO THE FOLLOWING TEN TIMES*/
      /* A. MOVE THE SIZE ID TO AN INDEX FOR QUANTITY*/
         /* AND VALID SIZE INDICATOR MOVE*/
      /* B. MOVE INDICATOR AND QUANTITY TO WORKING STORAGE*/
   /* 3. EZERTN*/
   /* ******************************************************/

  PAJ1WX1 = 1;

  while (PAJ1WX1 <= 10)

    if (PT5REC.SY5SZID[PAJ1WX1] > 0)
      PAJ1WX2 = PT5REC.SY5SZID[PAJ1WX1];
      PAJREC.PAJ1WVSZ[PAJ1WX2] = "Y";
      if (PT5REC.XWHCD != " ")
        if (PT5REC.XWHCD == PAJREC.PAJ1W-REGION-WHSE[1])
          PAJREC.PAJ1WBL2[PAJ1WX2] = PT5REC.PT3AVQT[PAJ1WX1];
        else
          if (PT5REC.XWHCD == PAJREC.PAJ1W-REGION-WHSE[2])
            PAJREC.PAJ1WBL4[PAJ1WX2] = PT5REC.PT3AVQT[PAJ1WX1];
          else
            if (PT5REC.XWHCD == PAJREC.PAJ1W-REGION-WHSE[3])
              PAJREC.PAJ1WBL7[PAJ1WX2] = PT5REC.PT3AVQT[PAJ1WX1];
            end
          end
        end
      end
    end
    PAJ1WX1 = PAJ1WX1 + 1;
  end
end // end XPPA211

// application initialization
Function XPPC001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* setting segmented trans id*/

  if (COMMAREA.CAFRMSYS == "PC"   /* Came from within the system*/
   || COMMAREA.CAFRMSYS == "PB"   /* Came from within the system*/
   || COMMAREA.CAFROMAP == "TS0P" /* Came from 'TS0P'*/
   || COMMAREA.CAFROMAP == "NY0P" /* Came from 'NY0P'*/
   || COMMAREA.CAFRMSYS == "PT")  /* Came from wip system*/

    if (COMMAREA.CAUSERA == " ")
      set PCWREC empty; /* Clear work record area*/
    else
      PCWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
    end

  else
    set PCWREC empty; /* Clear work record area*/
  end

  if (COMMAREA.XGPCD > " ")
    PCWREC.XGPCD = COMMAREA.XGPCD; /* save gpc code*/
  end
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPPC001

// Do P.O. Header "Status" Update
Function XPPC010()
   /* ------------------------------------------------------------*/

                        /* X P P C 0 1 0*/
                       /* ---------------*/

       /* This process group will be called to select all*/
    /* items within a certain P.O. Number and do necessary*/
    /* processing to set the Status of the P.O. Header row*/
    /* accordingly. It is only designed for GPC = "01" & "02",*/
                                  /* and GPC = "03" & "07"*/

    /* If successful, the P.O. Header will be updated and an*/
    /* audit will be written if needed.*/

   /* ***                                                     ****/
   /* ******************* REQUIRED PASS DATA *********************/
   /* ***                                                     ****/

   /* ** The following records must be added to your*/
      /* application record list:*/

    /* VPOHDR02, PC8REC, VPOAHD02 and xx0xw01*/

   /* ** You must call xx0xs01 prior to calling this routine -*/
      /* this routine will move the date/time from xx0xw01 to*/
      /* the VPOHDR02.*/

   /* ** The following fields must be moved to the PC8REC:*/
      /* use a "%GET" command to get/copy these fields.*/


   /* SET PC8REC EMPTY    ;===>initialize record*/

   /* MOVE PC??W??.XGPCD TO PC8REC.XGPCD     ;===>GPC Code*/
   /* MOVE PC??W??.PC3PONBR TO PC8REC.PC3PONBR;===>P.O. Number*/
   /* --->if  Audit comment entered on screen*/
   /* MOVE PC??W??.YACCD TO PC8REC.YACCD;===>audit comment*/

    /* Any bad DB2 return codes will be handled by the*/
    /* executed statement groups.*/

    /* Note: This process group will not do a CALL EZECOMIT*/
          /* command.  It will have to be done by the calling*/
          /* program.  It will however do a CALL EZEROLLB in*/
          /* the cases where a Data Base error was detected.*/

        /* - If a  negative SQL Code is incountered, an EZEFLO*/
            /* be performed and the process name where it*/
            /* occurred will be placed in PC8REC.XXXPRCNM.*/

                        /* X P P C 0 1 0*/
                       /* ---------------*/
   /* ------------------------------------------------------------*/

  if (PC8REC.XGPCD == "01" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "03" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "07") /* ===> valid GPC Code*/

    XPPC011(); /* ===> set appropriate status flags*/

    XPPC012(); /* ===> Load appropriate status code*/

    set VPOHDR02 empty; /* ===>initialize D.B. Call record*/

    VPOHDR02.PO-REG-CD = PC8REC.PO-REG-CD; /* Region*/
    VPOHDR02.XGPCD = PC8REC.XGPCD;
    VPOHDR02.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. Number*/

    XSPCS14(); /* ===> Get P.O. Header row*/

    /* ------------------------------------------------------------*/
      /* If the Current Header Status in the D.B. is not the same*/
      /* as the status calculated in this process, then:*/
        /* 1. Update the P.O. Header row.*/
        /* 2. Insert a P.O. Header Audit row.*/
    /* ------------------------------------------------------------*/

    if (VPOHDR02.YPUCD != PC8REC.YPUCD)

      set VPOAHD02 empty; /* ===> intialize Header Audit record*/
      VPOAHD02.PCIBFRA = VPOHDR02.YPUCD; /* ===> Status before*/
      VPOAHD02.PCIAFTA = PC8REC.YPUCD; /* ===> Status after*/

      VPOHDR02.YPUCD = PC8REC.YPUCD; /* ===> Load D.B. Call record*/
      VPOHDR02.PC3STADT = XX0XW01.XX0XWDAT; /* ===> update status dt*/
      VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ===> update change dt*/
      VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> update change time*/

      XSPCS15(); /* ===> Update P.O. Header row*/

      if (PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
       || PC8REC.XGPCD == "03") /* ===> valid GPC Code*/

        XSPCS16(); /* ===> insert P.O. Header audit row*/

      end

    end


  end /* ===>Valid GPC Code check*/

   /* **                                                        ***/
   /* ********************** End of XPPC010 ***********************/
end // end XPPC010

// Set appropriate status flags
Function XPPC011()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  set of all items*/
   /* within the  pass data. (ie. GPC, P.O. Number.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC8REC.PC8WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/
  PC8FLOP = "N";
  PC8FLCL = "N";
  PC8FLNC = "N";
  PC8FLFC = "N";
  PC8FLCX = "N";
  PC8FLTN = "N";

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/


  VPOITM05.PO-REG-CD = PC8REC.PO-REG-CD; /* Region*/
  VPOITM05.XGPCD = PC8REC.XGPCD;
  VPOITM05.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. number*/

  XSPCS11(); /* ========> select set and open cursor*/

  XSPCS12(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and set status flags  until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC8REC.PC8WSWT == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.XGPCD == "02"
     || VPOITM05.XGPCD == "01"
     || VPOITM05.XGPCD == "07")
      if (VPOITM05.PC6STAT == "OP")
        PC8FLOP = "Y";
      else /* ===> item status code check*/
        if (VPOITM05.PC6STAT == "NC")
          PC8FLNC = "Y";
        else /* ===> item status code check*/
          if (VPOITM05.PC6STAT == "CL")
            PC8FLCL = "Y";
          else /* ===> item status code check*/
            if (VPOITM05.PC6STAT == "CX")
              PC8FLCX = "Y";
            else /* ===> item status code check*/
              if (VPOITM05.PC6STAT == "TN")
                PC8FLTN = "Y";
              end /* ===> item status code check*/
            end /* ===> item status code check*/
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> GPC Code check*/

    if (VPOITM05.XGPCD == "03")
      if (VPOITM05.PC6STAT == "OP")
        PC8FLOP = "Y";
      else /* ===> item status code check*/
        if (VPOITM05.PC6STAT == "FC")
          PC8FLFC = "Y";
        else /* ===> item status code check*/
          if (VPOITM05.PC6STAT == "NC")
            PC8FLNC = "Y";
          else /* ===> item status code check*/
            if (VPOITM05.PC6STAT == "CX")
              PC8FLCX = "Y";
            end /* ===> item status code check*/
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> GPC Code check*/

    if (PC8REC.PC8FLOP == "Y" /* ===> no further D.B. reads necessary*/
     || PC8REC.PC8FLTN == "Y") /* ===> no further D.B. reads necessary*/
      PC8REC.PC8WSWT = "Y"; /* ===> set EOF cursor*/
    else
      XSPCS12(); /* ==========> Fetch selected rows*/
      /* ========================================> driving read*/
    end /* ===> Status Flag 'OP' set*/

  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS13(); /* Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC011 ***********************/
end // end XPPC011

// Load appropriate Status Code
Function XPPC012()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/


  if (PC8REC.XGPCD == "02"
   || PC8REC.XGPCD == "01"
   || PC8REC.XGPCD == "07")

    if (PC8REC.PC8FLOP == "Y")
      PC8REC.YPUCD = "OP";
    else /* ===> item status code check*/
      if (PC8REC.PC8FLTN == "Y")
        PC8REC.YPUCD = "TN";
      else /* ===> item status code check*/
        if (PC8REC.PC8FLNC == "Y")
          PC8REC.YPUCD = "NC";
        else /* ===> item status code check*/
          if (PC8REC.PC8FLCL == "Y")
            PC8REC.YPUCD = "CL";
          else /* ===> item status code check*/
            if (PC8REC.PC8FLCX == "Y")
              PC8REC.YPUCD = "CX";
            end /* ===> item status code check*/
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> item status code check*/

  end /* ===> GPC Code check*/


  if (PC8REC.XGPCD == "03")

    if (PC8REC.PC8FLOP == "Y")
      PC8REC.YPUCD = "OP";
    else /* ===> item status code check*/
      if (PC8REC.PC8FLFC == "Y")
        PC8REC.YPUCD = "FC";
      else /* ===> item status code check*/
        if (PC8REC.PC8FLNC == "Y")
          PC8REC.YPUCD = "NC";
        else /* ===> item status code check*/
          if (PC8REC.PC8FLCX == "Y")
            PC8REC.YPUCD = "CX";
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> item status code check*/

  end /* ===> GPC Code check*/


   /* **                                                        ***/
   /* ********************** End of XPPC012 ***********************/
end // end XPPC012

// Get Shipped QTYs   (Prod/Dest)
Function XPPC021()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the QTYs to be summed*/
   /* which have been shipped. To get the QTYS shipped use the*/
   /* a Transportation System key:*/
   /* ---->  ( GPC, P.O. Number, PO item seq number )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "CPLHD"*/

  set VCPLHDJ4 empty; /* ===> initialize record*/

  VCPLHDJ4.XGP-GPC-CD = PC5REC.XGPCD;
  VCPLHDJ4.PC-PO-NBR = PC5REC.PC3PONBR; /* ==>P.O. number*/
  VCPLHDJ4.PC-ITM-SEQ-NBR = PC5REC.PC-ITM-SEQ-NBR;
  VCPLHDJ4.TS-ORIG-LOC-CD = "*";
  VCPLHDJ4.TS-DSCHG-LOC-CD = "*";
  VCPLHDJ4.TS-DEST-LOC-CD = "*";


  XSPCS-VCPLHDJ4-S7(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Shipped QTYs" until EOF*/
   /* ------------------------------------------------------------*/

  XSPCS-VCPLHDJ4-N7(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC5REC.PC5WSWT == "N") /* ===>Until end of temp. cursor "CPLHD"*/

    if (PC5REC.PC5ERFL == "Y") /* ===> you want errors included*/
      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT" /* ===> In transit*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "ER" /* ===> hard error*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC" /* ===> customs cleared*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CR" /* ===> customs cleared er*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "RC") /* ===> Received*/

        XSPCS30(); /* ===> Fetch asso. container rows*/

      end
    else /* ===> errors not included*/
      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT" /* ===> In transit*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC" /* ===> customs cleared*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CR" /* ===> customs cleared er*/
      )                                  
        XSPCS30(); /* ===> Fetch asso. container rows*/

      end
    end

    /* ------------------------------===> Driving read*/
    XSPCS-VCPLHDJ4-N7(); /* ===> Fetch next selected row*/

  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VCPLHDJ4-C7(); /* ===> Fetch next selected row*/


   /* **                                                        ***/
   /* ********************** End of XPPC021 ***********************/
end // end XPPC021

// Get Received QTYs  (Prod/Dest)
Function XPPC022()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  PC5REC.PC5WSWT = "N"; /* Set EOF Temp cursor flag to no*/

  set VFYPO002 empty;

  VFYPO002.XGPCD = PC5REC.XGPCD;
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD; /* ==>P.O. region*/
  VFYPO002.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VFYPO002.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VFYPO002.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VFYPO002.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VFYPO002.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VFYPO002.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VFYPO002.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VFYPO002.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VFYPO002.YMTCD = PC5REC.YMTCD; /* ==> mode of transportation*/

   /* ============> set owner group*/
   /* ============>-----------------*/
  VFYPO002.XOWCD = "*"; /* ==> Owner group code*/
  if (VFYPO002.XWHCD == "09") /* check for promo warehouse*/
         /* leave OG = '*'*/
  else
    if (VFYPO002.XGPCD == "03") /* check for finished good*/
      set PG2REC empty;
      PG2REC.XGPCD = PC5REC.XGPCD;
      PG2REC.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
      PG2REC.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
      PG2REC.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
      XSPG202(); /* read the style color rec*/
      if (PG2REC.XFMCD == "21" /* if this is a t-shirt*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
      end
    end
  end

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VFYPO002.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VFYPO002.PC2CUXID = PC5REC.PC2CUXID; /* ==> cust xref*/


  XSPCS71(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  XSPCS72(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC5REC.PC5WSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* accumulate them  by size position.*/
     /* ---> Three size arrays and totals are calc. in this loop*/
          /* 1. for both receiving status codes of (10,11,13)*/
          /* 2. for      receiving status code  of (10)*/
          /* 3. for      receiving status code  of (12)*/
    /* ------------------------------------------------------------*/

    if (VFYPO002.YRSCD == "10" /* ===> receiving status code*/
     || VFYPO002.YRSCD == "11" 
     || VFYPO002.YRSCD == "12" 
     || VFYPO002.YRSCD == "13")

      if (VFYPO002.PC2CUXID == " ")

        XSPCS74(); /* ===> accumulate the size QTYs*/

      else

        if (VFYPO002.PC2CUXID == PC5REC.PC2CUXID)

          XSPCS74(); /* ===> accumulate the size QTYs*/

        end /* ===> cust xref match check*/

      end /* ===> cust xref check*/

    end /* ===> receiving status code check*/

    XSPCS72(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS73(); /* ===> Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC022 ***********************/
end // end XPPC022

// Get On Order QTYs  (Prod/Dest)
Function XPPC023()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ---->  Note: Because PC0M uses both select (S7) & (S8)*/
                /* this select set uses (S7) & (S8), which*/
                /* ever one is not being used by PC0M.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/
  set PCYREC empty; /* ===>initialize record before loading*/
                                   /* it*/


  VPOITM05.XGPCD = PC5REC.XGPCD;
  VPOITM05.PO-REG-CD = PC5REC.PO-REG-CD; /* ==>P.O. region*/
  VPOITM05.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VPOITM05.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VPOITM05.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VPOITM05.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VPOITM05.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VPOITM05.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
  VPOITM05.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VPOITM05.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VPOITM05.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VPOITM05.YMTCD = PC5REC.YMTCD; /* ==> Mode of Transportation*/

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VPOITM05.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VPOITM05.PC2CUXID = PC5REC.PC2CUXID; /* ==> Customer Xref id*/


   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";


  XSPCS81(); /* ========> select set and open cursor*/

  XSPCS82(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and sum the on order QTYs until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC5REC.PC5WSWT == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.PC6STAT == "OP"
     || VPOITM05.PC6STAT == "CL"
     || VPOITM05.PC6STAT == "FC"
     || VPOITM05.PC6STAT == "NC")

      XSPCS83(); /* ==========> Fetch asso. size row*/

      PC5REC.PC5WIXT = 1; /* ===> initialize temp. index*/

      while (PC5REC.PC5WIXT <= 40) /* ===> Until all sizes processed*/
        /* -----------------------------;===> load on order QTYs*/

        PC5REC.PC5WORD = VPOSIZ02.PC7ORDEQ[PC5WIXT];
        PC5REC.PC5ORDR[PC5WIXT] = PC5REC.PC5ORDR[PC5WIXT] + PC5REC.PC5WORD;
        PC5REC.PC5TORDR = PC5REC.PC5TORDR + PC5REC.PC5WORD; /* ===> total*/

        PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1; /* ===> incr. temp. index*/

      end /* ===> Until all sizes processed*/

    end /* ===> item status code check*/

    XSPCS82(); /* ==========> Fetch selected rows*/
    /* ========================================> driving read*/

  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS84(); /* Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC023 ***********************/
end // end XPPC023

// Calc. "Balance To Ship"
Function XPPC030()
   /* ------------------------------------------------------------*/

                        /* X P P C 0 3 0*/
                       /* ---------------*/

       /* This process group will be called to obtain the*/
    /* remaining balance to ship for a given item.  The*/
    /* values returned to the calling program will contain*/
    /* accumulated values down to a size array level, in PC5REC.*/
    /* ----->(ie: Size( 1 - 40 ).*/

    /* NOTE:   10/15/91*/
    /* This routine has been modified to include the Sales*/
    /* Order fields in retrieving balance to ship data.*/

      /* The Balance To Ship array fields are calculated from*/
   /* three accummulated size(i) array totals by accessing the*/
   /* Transportation and Product Order D.B. systems.*/

    /* If successful, the PC5REC will contain 7 array and 7 total*/
    /* fields which are related to " Balance to Ship "*/

    /* Note: 1. Each array field has an occurance of 40.*/
    /* Note: 2. The "Balance To Ship" will never be negative.*/
             /* This subroutine forces zeros in negative cases.*/

   /* **** ---------------   --------   -------------------- *****/
   /* **** Balance to Ship = On Order - (Shipped + Received) *****/
   /* **** ---------------   --------   -------------------- *****/

    /* PC5REC.PC5TBALC      =  Total "Balance to Ship"*/
    /* PC5REC.PC5BALC array =  "Balance to Ship"*/

    /* PC5REC.PC5TORDR      =  Total "On Order QTYs"*/
    /* PC5REC.PC5ORDR array =  "On Order QTYs"*/
                            /* w/ status in ("OP","CL","FC","NC")*/

    /* PC5REC.PC5TSHIP      =  Total "Shipped QTYs"*/
    /* PC5REC.PC5SHIP array =  "Shipped QTYs"*/
                            /* w/ status in ("IT","CC")*/
                            /* -- includes 'er' & 'cr' if*/
                               /* pc5erfl set to 'y'*/
    /* PC5REC.PC5erfl       =  move a 'y' if you want  the*/
                            /* shipment total to include*/
                            /* status of ('er','cr')*/
    /* PC5REC.PC5yerfl      =  set to 'y' if shipments found*/
                            /* w/ status in ("er","cr")*/

    /* PC5REC.PC5TRV10      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV10 array=  "Received QTYs"*/
                            /* w/ status in ("10")*/

   /* **** ------------------------------------------------- *****/
   /* **** the following fields are also available for use:*****/
   /* **** ------------------------------------------------- *****/

    /* PC5REC.PC5TSRCV      =  Total "Shipped and Recieved QTYs"*/
    /* PC5REC.PC5SRCV array =  "Shipped and received QTYs"*/
                            /* w/ status in ("RC")*/

    /* PC5REC.PC5TRECV      =  Total "Received QTYs"*/
    /* PC5REC.PC5RECV array =  "Received QTYs"*/
                            /* w/ status in ("10","11","13")*/

    /* PC5REC.PC5TRV12      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV12 array=  "Received QTYs"*/
                            /* w/ status in ("12")*/
                                          /* --> receiving error*/

   /* ***                                                     ****/
   /* ******************* REQUIRED PASS DATA *********************/
   /* ***                                                     ****/

   /* ** The following records must be added to your*/
      /* application record list:*/

    /* PC5REC, PC6REC, PC7REC, PCMREC, VCPLHDJ4, TSOREC, and TSHREC*/
    /* and ts5rec*/

   /* ** The following fields must be moved to the PC5REC:*/
      /* use a "%GET" command to get/copy these fields.*/


   /* SET PC5REC EMPTY    ;===>initialize record*/

   /* MOVE PC??W??.XGPCD TO PC5REC.XGPCD     ;===>GPC Code*/
   /* MOVE PC??W??.PC3PONBR TO PC5REC.PC3PONBR;===>P.O. Number*/
   /* MOVE PC??W??.PC-ITM-SEQ-NBR TO PC5REC.PC-ITM-SEQ-NBR;==> Seq number*/
   /* MOVE 'y'           TO PC5REC.pc5erfl    ;==> incl. hard errs*/
                                           /* ==> default to 'n'*/
   /* ----------------------------------------------------------*/
   /* PERFORM XPPC030;===> subroutine to calc. "Balance to Ship"*/
   /* ----------------------------------------------------------*/

    /* Any bad DB2 return codes will be handled by the*/
    /* executed statement groups.*/

    /* - If a  negative SQL Code is incountered, an EZEFLO*/
        /* will be performed and the process name where*/
        /* it occurred will be placed in PC5REC.XXXPRCNM.*/


                        /* X P P C 0 3 0*/
                       /* ---------------*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5TSHIP = 0; /* ===> Init Shipped  QTYs Total*/
  PC5REC.PC5TSRCV = 0; /* ===> Init Shipped & Received QTY*/
                                   /* Total*/
  PC5REC.PC5TRECV = 0; /* ===> Init Receipt Total status 10,12*/
  PC5REC.PC5TRV10 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 10*/
  PC5REC.PC5TRV12 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 12*/
  PC5REC.PC5TORDR = 0; /* ===> Init On-order QTYs Total*/
  PC5REC.PC5TBALC = 0; /* ===> Init Balance to Ship QTY Total*/

  move 0 to PC5REC.PC5SHIP[1] for all; /* ===> Init Shipped QTYs array*/
  move 0 to PC5REC.PC5SRCV[1] for all; /* ===> Init Shipped & Received QTYs*/
                                   /* array*/
  move 0 to PC5REC.PC5RECV[1] for all; /* ===> Init Receipt QTYs array status 10,12*/
  move 0 to PC5REC.PC5RCV10[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 10*/
  move 0 to PC5REC.PC5RCV12[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 12*/
  move 0 to PC5REC.PC5ORDR[1] for all; /* ===> Init On-order QTYs array*/
  move 0 to PC5REC.PC5BALC[1] for all; /* ===> Init Balance to Ship QTY array*/

  PC5REC.PC5YERFL = "N"; /* ===> init hard ship error flag*/

   /* ------------------------------------------------------------*/
   /* Set up to calculate all the quantities necessary to*/
   /* Calculate the remaining balance of QTYs still left to ship.*/
   /* These three calls will use the Transportation access key*/
   /* of (GPC, Product Key, and Destination Key) and accumulate*/
   /* QTY totals on a size level.*/
   /* ------------------------------------------------------------*/

  XPPC031(); /* ===> get Shipment QTYs from VCPLIT01*/

  XPPC032(); /* ===> get Receipt QTYs  from VFYPO002*/

  XPPC033(); /* ===> get On Order QTYs from VPOSIZ02*/


   /* ------------------------------------------------------------*/
   /* Calc. the remaining balance of QTYs still left to ship*/
   /* on a size level.*/

   /* Note:  Balance To Ship = On Order - (Shipped + Received)*/

   /* ------------------------------------------------------------*/

  PC5REC.PC5WIXT = 1;

  while (PC5REC.PC5WIXT <= 40)


    /* ------------------------------------------------------------*/
    /* ==> On Order  size QTYs  (on size level w/ status "OP")*/
    /* ==> Shipped   size QTYs  (on size level w/ status "IT","CC")*/
    /* ==> Received size QTYs  (on size level w/ status "10")*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5WORD = PC5REC.PC5ORDR[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WSHP = PC5REC.PC5SHIP[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WRCV = PC5REC.PC5RCV10[PC5WIXT]; /* ==> W.S*/

    PC5REC.PC5WSUM = PC5REC.PC5WSHP + PC5REC.PC5WRCV;

    /* ------------------------------------------------------------*/
    /* ===> Balance To Ship = On Order - (Shipped + Received)*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5BALC[PC5WIXT] = PC5REC.PC5WORD - PC5REC.PC5WSUM;

    if (PC5REC.PC5BALC[PC5WIXT] < 0) /* ==> balance is negative*/
      PC5REC.PC5BALC[PC5WIXT] = 0; /* ===> force to zero*/
    end

    PC5REC.PC5TBALC = PC5REC.PC5TBALC + PC5REC.PC5BALC[PC5WIXT];

    PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1;

  end

   /* **                                                        ***/
   /* ********************** End of XPPC030 ***********************/
end // end XPPC030

// Get Shipped QTYs   (Prod/Dest)
Function XPPC031()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the QTYs to be summed*/
   /* which have been shipped. To get the QTYS shipped use the*/
   /* a Transportation System key:*/
   /* ---->  ( GPC, P.O. Number, P.O. item sequence number)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "CPLHD"*/

  set VCPLHDJ4 empty; /* ===> initialize record*/

  VCPLHDJ4.XGP-GPC-CD = PC5REC.XGPCD;
  VCPLHDJ4.PC-PO-NBR = PC5REC.PC3PONBR;
  VCPLHDJ4.PC-ITM-SEQ-NBR = PC5REC.PC-ITM-SEQ-NBR;
  VCPLHDJ4.TS-ORIG-LOC-CD = "*";
  VCPLHDJ4.TS-DSCHG-LOC-CD = "*";
  VCPLHDJ4.TS-DEST-LOC-CD = "*";


   /* ===>Select set and open cursor*/
  XSPCS-VCPLHDJ4-S7();

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Shipped QTYs" until EOF*/
   /* ------------------------------------------------------------*/

   /* ===> Fetch next selected row*/
  XSPCS-VCPLHDJ4-N7(); /* ------------------------------===> Prime read*/

  while (PC5REC.PC5WSWT == "N") /* ===>Until end of temp. cursor "CPLHD"*/

    if (PC5REC.PC5ERFL == "Y") /* ===> you want errors included*/
      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT" /* ===> In transit*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "ER" /* ===> hard error*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC" /* ===> customs cleared*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CR" /* ===> customs cleared error*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "RC") /* ===> Received*/

        XSPCS30(); /* ===> Fetch asso. container rows*/

      end
    else /* ===> errors not included*/
      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT" /* ===> In transit*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC" /* ===> customs cleared*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "RC") /* ===> Received*/

        XSPCS30(); /* ===> Fetch asso. container rows*/

      end
    end

    /* ------------------------------===> Driving read*/
    XSPCS-VCPLHDJ4-N7(); /* ===> Fetch next selected row*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VCPLHDJ4-C7(); /* ===> Close the selected set cursor*/



   /* **                                                        ***/
   /* ********************** End of XPPC031 ***********************/
end // end XPPC031

// Get Received QTYs  (Prod/Dest)
Function XPPC032()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  PC5REC.PC5WSWT = "N"; /* Set EOF Temp cursor flag to no*/

  set VFYPO002 empty;

  VFYPO002.XGPCD = PC5REC.XGPCD;
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD;
  VFYPO002.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VFYPO002.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VFYPO002.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VFYPO002.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VFYPO002.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VFYPO002.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VFYPO002.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VFYPO002.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VFYPO002.YMTCD = PC5REC.YMTCD; /* ==> Mode of Transportation*/

   /* ============> set owner group*/
   /* ============>-----------------*/
  VFYPO002.XOWCD = "*"; /* ==> Owner group code*/
  if (VFYPO002.XWHCD == "09") /* check for promo warehouse*/
         /* leave OG = '*'*/
  else
    if (VFYPO002.XGPCD == "03") /* check for finished good*/
      set PG2REC empty;
      PG2REC.XGPCD = PC5REC.XGPCD;
      PG2REC.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
      PG2REC.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
      PG2REC.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
      XSPG202(); /* read the style color rec*/
      if (PG2REC.XFMCD == "21" /* if this is a t-shirt*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
      end
    end
  end

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VFYPO002.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VFYPO002.PC2CUXID = PC5REC.PC2CUXID; /* ==> cust xref*/

   /* ============>SALES ORDER FIELD*/
   /* ============>-----------------*/
  VFYPO002.OP1PARTN = PC5REC.OP1PARTN; /**/
  VFYPO002.OP1CUOID = PC5REC.OP1CUOID; /**/
  VFYPO002.OP1NORID = PC5REC.OP1NORID; /**/

   /* Region*/
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD;
  XSPCS-VFYPO002-S8(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-N8(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC5REC.PC5WSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* accumulate them  by size position.*/
     /* ---> Three size arrays and totals are calc. in this loop*/
          /* 1. for both receiving status codes of (10,11,13)*/
          /* 2. for      receiving status code  of (10)*/
          /* 3. for      receiving status code  of (12)*/
    /* ------------------------------------------------------------*/

    if (VFYPO002.YRSCD == "10" /* ===> receiving status code*/
     || VFYPO002.YRSCD == "11" 
     || VFYPO002.YRSCD == "12" 
     || VFYPO002.YRSCD == "13")

      if (VFYPO002.PC2CUXID == " ")

        XSPCS74(); /* ===> accumulate the size QTYs*/

      else

        if (VFYPO002.PC2CUXID == PC5REC.PC2CUXID)

          XSPCS74(); /* ===> accumulate the size QTYs*/

        end /* ===> cust xref match check*/

      end /* ===> cust xref check*/

    end /* ===> receiving status code check*/

    XSPCS-VFYPO002-N8(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-C8(); /* ===> Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC032 ***********************/
end // end XPPC032

// Get On Order QTYs  (Prod/Dest)
Function XPPC033()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/
  set PCYREC empty; /* ===>initialize record before loading*/
                                   /* it*/


  VPOITM05.XGPCD = PC5REC.XGPCD;
  VPOITM05.PO-REG-CD = PC5REC.PO-REG-CD;
  VPOITM05.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VPOITM05.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VPOITM05.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VPOITM05.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VPOITM05.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VPOITM05.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
  VPOITM05.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VPOITM05.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VPOITM05.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VPOITM05.YMTCD = PC5REC.YMTCD; /* ==> Mode of Transportation*/

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VPOITM05.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VPOITM05.PC2CUXID = PC5REC.PC2CUXID; /* ==> Customer Xref id*/

   /* ============>SALES ORDER FIELD*/
   /* ============>-----------------*/
  VPOITM05.OP1PARTN = PC5REC.OP1PARTN; /**/
  VPOITM05.OP1CUOID = PC5REC.OP1CUOID; /**/
  VPOITM05.OP1NORID = PC5REC.OP1NORID; /**/


   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";

  VPOITM05.PO-REG-CD = PC5REC.PO-REG-CD; /* Region*/

  XSPCS-VPOITM05-SH(); /* ========> select set and open cursor*/

  XSPCS-VPOITM05-NH(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and sum the on order QTYs until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC5REC.PC5WSWT == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.PC6STAT == "OP"
     || VPOITM05.PC6STAT == "CL"
     || VPOITM05.PC6STAT == "FC"
     || VPOITM05.PC6STAT == "NC")


      XSPCS83(); /* ==========> Select asso. size row*/

      PC5REC.PC5WIXT = 1; /* ===> initialize temp. index*/

      while (PC5REC.PC5WIXT <= 40) /* ===> Until all sizes processed*/
        /* -----------------------------;===> load on order QTYs*/

        PC5REC.PC5WORD = VPOSIZ02.PC7ORDEQ[PC5WIXT];
        PC5REC.PC5ORDR[PC5WIXT] = PC5REC.PC5ORDR[PC5WIXT] + PC5REC.PC5WORD;
        PC5REC.PC5TORDR = PC5REC.PC5TORDR + PC5REC.PC5WORD; /* ===> total*/

        PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1; /* ===> incr. temp. index*/

      end /* ===> Until all sizes processed*/

    end /* ===> item status code check*/

    XSPCS-VPOITM05-NH(); /* ==========> Fetch selected rows*/
    /* ========================================> driving read*/

  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VPOITM05-CH(); /* Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC033 ***********************/
end // end XPPC033

// converse pop up window
Function XPPC040()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PC0CTBL.PC-PRDCU-APAO-FL[XX0XWCT1] != "9") /* Or end of data*/
        if (PC0CTBL.XXX-STAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PC0CTBL.PC0CTBL-PRDCU-PROC-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PC0CTBL.XXX-STAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PC0CTBL.PC0CTBL-PRDCU-PROC-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PC0CTBL.PC-PRDCU-APAO-FL[XX0XWCT1] == "9") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPPC040

// pf common exit routine
Function XPPF002()
    /* **********************************************/
    /* *   xppf002 - common exit routine           **/
    /* **********************************************/

  PFWREC.PFWCPROC = "XPPF002";

  if (COMMAREA.CATOSYS != "PF") /* if xfer outside profit*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
  end

  XSEXIT();

  PFWREC.PFWMSG = COMMAREA.CAMSG; /* accept failed xfer msg*/
  PFWREC.PFWERRF = "Y"; /* set error flag*/
  PFWREC.PFWEOAF = "N"; /* signal appl still active*/

    /* **********************************************/
    /* *   end of xppf002 process                  **/
    /* **********************************************/
end // end XPPF002

// Profitability abend routine
Function XPPF010()
   /* ************************************************************/
   /* *   this routine aborts the current application.          **/
   /* ************************************************************/

  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = PFWREC.PFWCPROC; /* aborting process*/
  if (TA1REC.TA1TBLKE == " ") /* if key is spaces*/
    TA1REC.TA1TBLKE = PFWREC.PFWHKEY; /* move hold prod key to field*/
  end
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* abend module*/


     /* call failed, terminate session*/

  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/


end // end XPPF010

// edit prod. for field validity
Function XPPF020()
   /* ***********************************************************/
   /* **               product edit routine                   ***/
   /* **  before accessing data base, make sure entered data  ***/
   /* **  is a valid entry in csp table. then call i/o mod    ***/
   /* **  io0120 when gpc/style is entered or i/o mod io0560  ***/
   /* **  when gpc/style/color/dimension is entered.          ***/
   /* ***********************************************************/

  PFWREC.PFWHGPCF = "N"; /* clear error flags*/
  PFWREC.PFWHSTYF = "N";
  PFWREC.PFWHCOLF = "N";
  PFWREC.PFWHDIMF = "N";
  PFWREC.PFWHQUAF = "N";
  PFWREC.PFWHLFCF = "N";

   /* This is valid for 42 only now. 0194/mjk.*/
  if (PFWREC.PFWPRDAT == "42") /* if product attr. is g/s/q/lc*/
    /* OR PFWREC.PFWPRDAT EQ '45';    /* or*/
                                   /* product attr. is g/s/c/d*/
    if (PFWREC.XLCCD == " ") /* if life cycle not entered*/
      PFWERRF = "Y"; /* mark entry as an error*/
      PFWHLFCF = "Y"; /* set flag for field highlight*/
      converseLib.validationFailed(233); /* life cycle must be entered*/
    else /* else;*/
      if (PFWREC.XLCCD in XLCTBL.XLCCD) /* if entered data is in table*/
        /* next sentence                    ok*/
      else /* else*/
        PFWERRF = "Y"; /* mark entry as an error*/
        PFWHLFCF = "Y"; /* set flag for field highlight*/
        converseLib.validationFailed(112); /* life cycle not valid*/
      end
    end
  end

   /* This is valid for 42 only now. 0194/mjk.*/
  if (PFWREC.PFWPRDAT == "42") /* if product attr. is g/s/q/lc*/
    /* OR PFWREC.PFWPRDAT EQ '45';    /* or product attr. is g/s/c/d*/
    if (PFWREC.XQACD == " ") /* if quality not entered*/
      PFWERRF = "Y"; /* mark entry as an error*/
      PFWHQUAF = "Y"; /* set flag for field highlight*/
      converseLib.validationFailed(234); /* quality must be entered*/
    else /* else*/
      if (PFWREC.XQACD in XQATBL.XQACD) /* if entered data is in table*/
        /* next sentence                    ok*/
      else /* else*/
        PFWERRF = "Y"; /* mark entry as an error*/
        PFWHQUAF = "Y"; /* set flag for field highlight*/
        converseLib.validationFailed(111); /* quality not valid*/
      end
    end
  end


   /* ***********************************************************/
   /* **  Ideally we would have a lookup on the dummy product ***/
   /* **  table (dproft.vpfsya01) in this code.  Then we      ***/
   /* **  would only flag an error if the entered product     ***/
   /* **  was not found on BOTH the real product tables       ***/
   /* **  (dprod.vstyle01 or dprod.vcolor01) AND the dummy    ***/
   /* **  product table.                                      ***/
   /* **    Because we don't have a dummy product table lookup***/
   /* **  coded and we want to allow the user to enter dummy  ***/
   /* **  products, we will NOT flag an error if the product  ***/
   /* **  is not found on the real product tables.            ***/
   /* ***********************************************************/

  if (PFWREC.PFWPRDAT == "39" /* if product attr. is g/s*/
   || PFWREC.PFWPRDAT == "42") /* or product attr. is g/s/q/lc*/
    set SY1REC empty; /* call 'IO0120' product style table*/
    SY1REC.XGPCD = PFWREC.XGPCD;
    SY1REC.SY1STNBR = PFWREC.SY1STNBR;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* if record on data base*/
      PFWREC.PFWDESC[PFWIDX] = SY1REC.SY1SSTNM;
      PFWREC.SY2CLRAB = " ";
      PFWREC.PFWABRV[PFWIDX] = SY1REC.SY1SSTNM;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if record not found,*/
        /* ** see comment above ****/
        /* ** MOVE 'Y' TO PFWERRF;*/
        /* ** MOVE 'Y' TO PFWERRF;*/
        /* ** MOVE 'Y' TO PFWHGPCF;*/
        /* ** MOVE 'Y' TO PFWHSTYF;*/
        /* ** MOVE 107 TO EZEMNO;         /* gpc, style not on file*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* if data base page busy,*/
          PFWERRF = "Y"; /* notify user*/
          converseLib.validationFailed(114); /* data base was busy, please retry*/
          return;
        else
          TA1REC.TA1LOCAT[2] = PFWREC.PFWHPROD; /* DB2 error*/
          PFWREC.PFWHKEY = PFWREC.PFWHPROD;
          TA1REC.TA1LOCAT[4] = "IO0120"; /* transfer to ta0020*/
          TA1REC.TA1DBASE = "DPROD";
          TA1REC.TA1TBLVU = "VSTYLE01";
          XPPF010(); /* profitability DB2 abend routine*/
        end
      end
    end
  end


  if (PFWREC.PFWPRDAT == "45") /* if product attr. is g/s/c/d*/
    set SYCREC empty; /* call 'IO0560' product color table*/
    SYCREC.XGPCD = PFWREC.XGPCD;
    SYCREC.SY1STNBR = PFWREC.SY1STNBR;
    SYCREC.SY2CLRID = PFWREC.SY2CLRID;
    SYCREC.XDMCD = PFWREC.XDMCD;
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0) /* if record on data base, return*/
      PFWREC.PFWDESC[PFWIDX] = SYCREC.SY1SSTNM;
      PFWREC.SY2CLRAB = SYCREC.SY2CLRAB;
      PFWREC.PFWABRV[PFWIDX] = SYCREC.SY1SSTNM;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if record not found*/
        /* ** see comment above ****/
        /* ** MOVE 'Y' TO PFWERRF;*/
        /* ** MOVE 'Y' TO PFWHGPCF;*/
        /* ** MOVE 'Y' TO PFWHSTYF;*/
        /* ** MOVE 'Y' TO PFWHCOLF;*/
        /* ** MOVE 'Y' TO PFWHDIMF;*/
        /* ** MOVE 110 TO EZEMNO;  /* gpc, style, color, dimension not*/
        /* **                      /*   on file*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* if data base page busy,*/
          PFWERRF = "Y"; /* notify user*/
          converseLib.validationFailed(114);
          return;
        else
          TA1REC.TA1LOCAT[2] = PFWREC.PFWHPROD; /* DB2 error*/
          PFWREC.PFWHKEY = PFWREC.PFWHPROD;
          TA1REC.TA1LOCAT[4] = "IO0560"; /* transfer to ta0020*/
          TA1REC.TA1DBASE = "DPROD";
          TA1REC.TA1TBLVU = "VCOLOR02";
          XPPF010(); /* profitability DB2 abend routine*/
        end
      end
    end
  end

  if (PFWREC.PFWPRDAT == "45" /* if product attr. is g/s/c/d*/
   && PFWREC.XDMCD == " ")    /* and dimension not entered*/
    PFWERRF = "Y"; /* flag it as an error*/
    PFWHDIMF = "Y"; /* set flag for field highlight*/
    PFWREC.PFWHGPCF = "N"; /* reset flag possibly set by db call*/
    PFWREC.PFWHSTYF = "N"; /* reset flag possibly set by db call*/
    PFWREC.PFWHCOLF = "N"; /* reset flag possibly set by db call*/
    converseLib.validationFailed(236); /* dimension must be entered*/
  end

  if (PFWREC.PFWPRDAT == "45" /* if product attr. is g/s/c/d*/
   && PFWREC.SY2CLRID == " ") /* and color not entered*/
    PFWERRF = "Y"; /* flag it as an error*/
    PFWHCOLF = "Y"; /* set flag for field highlight*/
    PFWREC.PFWHGPCF = "N"; /* reset flag possibly set by db call*/
    PFWREC.PFWHSTYF = "N"; /* reset flag possibly set by db call*/
    converseLib.validationFailed(237); /* color must be entered*/
  end

  if (PFWREC.SY1STNBR == " ") /* if style not entered*/
    PFWERRF = "Y"; /* flag it as an error*/
    PFWHSTYF = "Y"; /* set flag for field highlight*/
    PFWREC.PFWHGPCF = "N"; /* reset flag possibly set by db call*/
    converseLib.validationFailed(108); /* style must be entered*/
  end

  if (PFWREC.XGPCD == " ") /* if gpc not entered*/
    PFWERRF = "Y"; /* flag it as an error*/
    PFWHGPCF = "Y"; /* set flag for field highlight*/
    converseLib.validationFailed(235); /* gpc must be entered*/
  else /* else*/
    if (PFWREC.XGPCD in XGPTBL.XGPCD)
                                   /* if entered gpc is in CSP table*/
      /* next sentence                    ok*/
    else /* else*/
      PFWERRF = "Y"; /* mark entry as an error*/
      PFWHGPCF = "Y"; /* set flag for field highlight*/
      converseLib.validationFailed(106); /* not a valid gpc*/
    end
  end
end // end XPPF020

// ta0040 date/time call routine
Function XPPF030()
   /* -----------------------------------------------------------;*/
    /* this profitablity common routine calls ta0040 for the    ;*/
    /* system date and time.  upon return TA2REC.TA2GRGGN       ;*/
    /* contains the system date and TA2REC.TA2TIMHM contains    ;*/
    /* the system time.                                         ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCPROC = "XPPF030"; /* pass calling process*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD != 0) /* error*/
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = "TA0040";
    set SQLCA empty;
    XPPF010(); /* abort program*/
  end
end // end XPPF030

// pf14,15,16,17 bridge routine
Function XPPF200()
   /* -----------------------------------------------------------;*/
                                                             /* ;*/
   /* XPPF200 - Common routine for transfering FROM applica-    ;*/
             /* tions PF0C (Summary Directory), PF0G (Summary   ;*/
             /* Parameters), PF0H (Print Parameters) and        ;*/
             /* PF0p (Print request directory) to               ;*/
             /* other PF applications :                         ;*/
               /* PF 14 goes to PF0E (Format) and back.         ;*/
               /* PF 15 goes to PF0F (Report Attr) and back.    ;*/
               /* PF 16 goes to PF0D (I/S Group) and back.      ;*/
                                                             /* ;*/
               /* PF 17 goes from PF0C (Summary Directory)      ;*/
                     /* to PF0B (Summary View) and back.        ;*/
               /* PF 17 also goes from PF0p (prnt req dir)      ;*/
                     /* to PF0h.                                ;*/
                                                             /* ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
                    /* Handle PF key 14                         ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf14) /* if bridge to/from PF0E*/
    if (PF1REC.PF1CURR == "PF0C" /* if we are going*/
     || PF1REC.PF1CURR == "PF0G" 
     || PF1REC.PF1CURR == "PF0H" 
     || PF1REC.PF1CURR == "PF0P")
      XPPF210(); /* vrptfm01 table select*/
      if (SQLCA.VAGen_SQLCODE == +0) /* if format in table*/
        COMMAREA.CATOAP = "PF0E"; /* head for PF0E*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (format not in table)*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
          converseLib.validationFailed(9); /* format ref # not on file*/
          PFWREC.PFWERRF = "Y";
        end
        return;
                                   /* row not found or -911 table page busy*/
      end
    else /* else (we are not going)*/
      if (PF1REC.PF1ORIG == "PF0C" /* if we are returning (we are in PF0E)*/
       || PF1REC.PF1ORIG == "PF0G" 
       || PF1REC.PF1ORIG == "PF0H" 
       || PF1REC.PF1ORIG == "PF0P")
        COMMAREA.CATOAP = PF1REC.PF1ORIG; /* head for orig appl*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (we are confused)*/
        converseLib.validationFailed(1); /* invalid PF key*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end

   /* -----------------------------------------------------------;*/
                    /* Handle PF key 15                         ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf15) /* if bridge to/from PF0F*/
    if (PF1REC.PF1CURR == "PF0C" /* if we are going*/
     || PF1REC.PF1CURR == "PF0G" 
     || PF1REC.PF1CURR == "PF0B" 
     || PF1REC.PF1CURR == "PF0H" 
     || PF1REC.PF1CURR == "PF0P")
      XPPF220(); /* vrptat01 table select*/
      if (SQLCA.VAGen_SQLCODE == +0) /* if attribute in table*/
        COMMAREA.CATOAP = "PF0F"; /* head for PF0F*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (attrib not in table)*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
          converseLib.validationFailed(39); /* invalid attrib ref #*/
          PFWREC.PFWERRF = "Y";
        end
        return;
                                   /* row not found or -911 table page busy*/
      end
    else /* else (we are not going)*/
      if (PF1REC.PF1ORIG == "PF0C" /* if we are returning*/
       || PF1REC.PF1ORIG == "PF0G" 
       || PF1REC.PF1ORIG == "PF0B" 
       || PF1REC.PF1ORIG == "PF0H" 
       || PF1REC.PF1ORIG == "PF0P")
        COMMAREA.CATOAP = PF1REC.PF1ORIG; /* head for orig appl*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (we are confused)*/
        converseLib.validationFailed(1); /* invalid PF key*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end

   /* -----------------------------------------------------------;*/
                    /* Handle PF key 16                         ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf16) /* if bridge to/from PF0D*/
    if (PF1REC.PF1CURR == "PF0C" /* if we are going*/
     || PF1REC.PF1CURR == "PF0G" 
     || PF1REC.PF1CURR == "PF0H" 
     || PF1REC.PF1CURR == "PF0P")
      XPPF230(); /* visgrp01 table select/scan*/
      if (SQLCA.VAGen_SQLCODE == +0) /* if select/scan successful*/
        if (PFBREC.PFBREF == PF1REC.PF1ISG) /* if i/s grp returned in cursor*/
          COMMAREA.CATOAP = "PF0D"; /* head for PF0D*/
          COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
          XSEXIT();
          PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
          PFWREC.PFWERRF = "Y";
          return;
        else /* else (i/s grp not in cursor)*/
          converseLib.validationFailed(38); /* invalid i/s grp ref #*/
          PFWREC.PFWERRF = "Y";
        end
      else /* else (select/scan returned an error)*/
        if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
          converseLib.validationFailed(38); /* invalid i/s grp ref #*/
          PFWREC.PFWERRF = "Y";
        end
        return;
                                   /* row not found or -911 table page busy*/
      end
    else /* else (we are not going)*/
      if (PF1REC.PF1ORIG == "PF0C" /* if we are returning*/
       || PF1REC.PF1ORIG == "PF0G" 
       || PF1REC.PF1ORIG == "PF0H" 
       || PF1REC.PF1ORIG == "PF0P")
        COMMAREA.CATOAP = PF1REC.PF1ORIG; /* head for orig appl*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (we are confused)*/
        converseLib.validationFailed(1); /* invalid PF key*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end

   /* -----------------------------------------------------------;*/
                    /* Handle PF key 17                         ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf17) /* if bridge to/from PF0B*/
    if (PF1REC.PF1CURR == "PF0C") /* if we are going from PF0C*/
       /* At this point we know the summary exists because a*/
       /* VSUMAT01 row with a non-zero create date exists for it.*/
       /* There is no need to look in the table for it again.*/
      COMMAREA.CATOAP = "PF0B"; /* head for PF0B*/
      COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
      XSEXIT();
      PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
      PFWREC.PFWERRF = "Y";
      return;
    else
      if (PF1REC.PF1CURR == "PF0P") /* if we are going from PF0p*/
        COMMAREA.CATOAP = "PF0H"; /* head for PF0h*/
        COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
        XSEXIT();
        PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
        PFWREC.PFWERRF = "Y";
        return;
      else /* else (we are not going)*/
        if (PF1REC.PF1ORIG == "PF0C" /* if we are returning*/
         || PF1REC.PF1ORIG == "PF0P")
          COMMAREA.CATOAP = PF1REC.PF1ORIG; /* head for orig appl*/
          COMMAREA.CAUSERA = PF1REC.PF1PASS; /* pass record*/
          XSEXIT();
          PFWREC.PFWMSG = COMMAREA.CAMSG; /* handle bad pass*/
          PFWREC.PFWERRF = "Y";
          return;
        else /* else (we are confused)*/
          converseLib.validationFailed(1); /* invalid PF key*/
          PFWREC.PFWERRF = "Y";
          return;
        end
      end
    end
  end
end // end XPPF200

// vrptfm01 table select
Function XPPF210()
   /* -----------------------------------------------------------;*/
   /* XPPF210 - Common routine called by XPPF200 to access the  ;*/
             /* Report Format DB2 table.                        ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCPROC = "XPPF210"; /* save current process*/

  PFCREC.PFCREF = PF1REC.PF1FMT; /* move table key*/

  call "IO2730" ("S ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF1REC.PF1FMT;
        PFWREC.PFWCPROC = "XPPF210"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end XPPF210

// vrptat01 table select
Function XPPF220()
   /* -----------------------------------------------------------;*/
   /* XPPF220 - Common routine called by XPPF200 to access the  ;*/
             /* Report Attribute DB2 table.                     ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCPROC = "XPPF220"; /* save current process*/

  PFDREC.PFDREF = PF1REC.PF1ATT; /* move table key*/

  call "IO2740" ("S ", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* table select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF1REC.PF1ATT;
        PFWREC.PFWCPROC = "XPPF220"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2740"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTAT01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end XPPF220

// visgrp01 table select/scan
Function XPPF230()
   /* -----------------------------------------------------------;*/
   /* XPPF230 - Common routine called by XPPF200 to access the  ;*/
             /* Income Statement Group DB2 table.               ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCPROC = "XPPF230"; /* save current process*/

  PFBREC.PFBREF = PF1REC.PF1ISG; /* move table key*/

  call "IO2710" ("SS", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* table select scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = PF1REC.PF1ISG;
    PFWREC.PFWCPROC = "XPPF230A"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VISGRP01";
    XPPF010(); /* abend routine*/
  end


  call "IO2710" ("SN", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* table select next*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
    PFWREC.PFWSUB = SQLCA.VAGen_SQLCODE; /* save return code*/
     /* handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      PFWREC.PFWSUB = SQLCA.VAGen_SQLCODE; /* save return code*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        PFWREC.PFWSUB = SQLCA.VAGen_SQLCODE; /* save return code*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF1REC.PF1ISG;
        PFWREC.PFWCPROC = "XPPF230B"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VISGRP01";
        XPPF010(); /* abend routine*/
      end
    end
  end


  call "IO2710" ("CS", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* table close scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = PF1REC.PF1ISG;
    PFWREC.PFWCPROC = "XPPF230C"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VISGRP01";
    XPPF010(); /* abend routine*/
  end

    /* reset return code to value from the select next db access*/
  SQLCA.VAGen_SQLCODE = PFWREC.PFWSUB;
end // end XPPF230

// window report attribute values
Function XPPF300()
   /* -----------------------------------------------------------;*/
    /* This common routine creates windows for reporting        ;*/
    /* attributes.  It uses PFWREC working storage record       ;*/
    /* to access input and store output from this routine.      ;*/
    /* After processing windows for the seven attributes,       ;*/
    /* this routine edits the product fields to insure that     ;*/
    /* windows were not requested for these fields.             ;*/
    /* The PFWREC fields used to pass information in or out     ;*/
    /* of this common routine are:                              ;*/
      /* PFDCDVAL - input/output                                ;*/
      /* PFWDESC  - output                                      ;*/
      /* PFISDESC - output                                      ;*/
      /* PFWVALER - output                                      ;*/
      /* PFWHFLGS - output                                      ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7) /* for seven attributes*/
    if (PFWREC.PFDCDVAL[PFWSUB] == "?") /* if window requested*/
      if (PFDREC.PFDVALFL[PFWSUB] != "Y") /* if specific values not sel*/

        XPPF310(); /* process attribute window*/

        if (PFWREC.PFWERRF == "Y") /* if errors occured*/
          return; /* only severe system errors are flagged in wind.*/
        end
      end
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end


    /* edit product fields*/

  if (PFWREC.XGPCD == "?") /* general product code*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHGPCF = "Y"; /* general product code error flag*/
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.SY1STNBR == "?") /* style number*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHSTYF = "Y"; /* style number error flag*/
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.SY2CLRID == "?") /* identifying color*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHCOLF = "Y"; /* identifying color error flag*/
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.XDMCD == "?") /* dimension code*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHDIMF = "Y"; /* dimension code error flag*/
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.XQACD == "?") /* quality code*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHQUAF = "Y"; /* quality code error flag*/
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.XLCCD == "?") /* life cycle code*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWHLFCF = "Y"; /* life cycle code error flag*/
    PFWREC.PFWERRF = "Y";
  end
end // end XPPF300

// Process attribute window
Function XPPF310()
   /* -----------------------------------------------------------;*/
    /* This common routine takes the PFDREC.PFICD reporting     ;*/
    /* attribute field code as input and executes the           ;*/
    /* appropriate window routine based on the value of this    ;*/
    /* code.                                                    ;*/
   /* -----------------------------------------------------------;*/

  XPXX001(); /* initialize for window rtn*/

   /* -----------------------------------------------------------;*/
    /* Process sales group code attribute field                 ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "01") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "       SALES GROUP CODE       ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYGR01(); /* converse ygrtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YGRTBL.YGRCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS CODE SECTION FOR OLD ATTRIBUTE 2 IS COMMENTED OUT.   ;*/
   /* SEE BELOW FOR NEW ATTRIBUTE 2: XDR.  0394/MJK.            ;*/
   /* -----------------------------------------------------------;*/
    /* Process sales rep attribute field                        ;*/
    /* Windowing is not allowed for this attribute              ;*/
    /* Error message is generated later in the edit routine     ;*/
   /* -----------------------------------------------------------;*/
   /* IF PFDREC.PFICD(PFWSUB) EQ '02';  /* window attempted for this attr.*/
   /* EZERTN;*/
   /* END;*/

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process development region attribute field               ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "02") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "          DEVELOPMENT REGION  ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXDR01(); /* converse xdrtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process gender age attribute field                       ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "03") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "          GENDER AGE          ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXGA01(); /* converse xgatbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XGATBL.XGACD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end


   /* -----------------------------------------------------------;*/
    /* Process sales agency attribute field                     ;*/
    /* Windowing is not allowed for this attribute              ;*/
    /* Error message is generated later in the edit routine     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "04") /* window attempted for this attribute*/
    return;
  end


   /* -----------------------------------------------------------;*/
    /* Process account class attribute field                    ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "05") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        ACCOUNT CLASS         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXAU01(); /* converse xautbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XAUTBL.XAUCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process general product class attribute field            ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "06") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "    GENERAL PRODUCT CLASS     ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXGP01(); /* converse xgptbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XGPTBL.XGPCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process account type attribute field                     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "07") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "         ACCOUNT TYPE         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXAT01(); /* converse xattbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XATTBL.XATCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process base order type attribute field                  ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "08") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "       BASE ORDER TYPE        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXOB01(); /* converse xobtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XOBTBL.XOBCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process summary product type attribute field.            ;*/
    /* This attribute uses the summary code database table to   ;*/
    /* to summarize the reporting attribute values into a       ;*/
    /* smaller group of more general values for the window.     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "09") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "     SUMMARY PRODUCT TYPE     ";
    PFWREC.PFWTBLID = "XPR"; /* product tbl is partial db key*/

    XPPF311(); /* process summary window*/

    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process owning division attribute field                  ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "10") /* owning division attribute field*/
    XX0XW02.XX0XWHDR = "       OWNING DIVISION        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXDV01(); /* converse xdvtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XDVTBL.XDVCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process inventory account code attribute field           ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "11") /* inventory acct code attribute field*/
    XX0XW02.XX0XWHDR = "    INVENTORY ACCOUNT CODE    ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYIC01(); /* converse yictbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      XX0XW02.XX0XWNUM = YICTBL.YICCD[XX0XWPIX]; /* bin-to-num*/
      PFWREC.PFDCDVAL[PFWSUB] = XX0XW02.XX0XWCHA; /* num-to-char*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process product type attribute field                     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "12") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "         PRODUCT TYPE         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXPR01(); /* converse xprtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XPRTBL.XPRCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process summary general product class attribute field.   ;*/
    /* This attribute uses the summary code database table to   ;*/
    /* to summarize the reporting attribute values into a       ;*/
    /* smaller group of more general values for the window.     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "13") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "  SUMMARY GENERAL PROD CLASS  ";
    PFWREC.PFWTBLID = "XGP";
                                   /* general product tbl is partial db key*/

    XPPF311(); /* process summary window*/

    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process warehouse number attribute field                 ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "14") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "         WAREHOUSE #          ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXWH01(); /* converse xwhtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XWHTBL.XWHCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process family attribute field                           ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "15") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "            FAMILY            ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXFM01(); /* converse xfmtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XFMTBL.XFMCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process financial level 1 attribute field                ;*/
   /* This attribute has been renamed to 'business unit'. 0394/mjk.;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "16") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "           BUSINESS UNIT      ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYFA01(); /* converse yfatbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YFATBL.YFACD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS CODE SECTION FOR OLD ATTRIBUTE 17 IS COMMENTED OUT.   ;*/
   /* SEE BELOW FOR NEW ATTRIBUTE 17: XCN.  0394/MJK.            ;*/
   /* -----------------------------------------------------------;*/
    /* Process summary sales program attribute field.           ;*/
    /* This attribute uses the summary code database table to   ;*/
    /* to summarize the reporting attribute values into a       ;*/
    /* smaller group of more general values for the window.     ;*/
   /* -----------------------------------------------------------;*/
   /* IF PFDREC.PFICD(PFWSUB) EQ '17';  /* for this attribute field*/
   /* MOVE ' ' TO PFWREC.PFDCDVAL(PFWSUB);   /* pass back spaces*/
   /* MOVE '    SUMMARY SALES PROGRAM     ' TO XX0XW02.XX0XWHDR;*/
   /* MOVE 'SP1' TO PFWREC.PFWTBLID;  /* summary sales tbl db key*/
   /* ;*/
   /* PERFORM XPPF311;                /* process summary window*/
   /* ;*/
   /* EZERTN;*/
   /* END;*/

   /* -----------------------------------------------------------;*/
    /* Process construction code attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "17") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "          CONSTRUCTION        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXCN01(); /* converse xcntbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XCNTBL.XCNCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process body type attribute field                        ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "18") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "          BODY TYPE           ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXBT01(); /* converse xbttbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XBTTBL.XBTCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS CODE SECTION FOR OLD ATTRIBUTE 19 IS COMMENTED OUT.   ;*/
   /* SEE BELOW FOR NEW ATTRIBUTE 19: XPL.  0394/MJK.            ;*/
   /* -----------------------------------------------------------;*/
    /* Process financial level 2 attribute field                ;*/
   /* -----------------------------------------------------------;*/
   /* IF PFDREC.PFICD(PFWSUB) EQ '19';  /* for this attribute field*/
   /* MOVE '      FINANCIAL LEVEL 2       ' TO XX0XW02.XX0XWHDR;*/
   /* WHILE XX0XW02.XX0XWEND EQ 'N';  /* while pop up active*/
   /* ;*/
   /* PERFORM XPYFB01;                /* converse yfbtbl pop up window*/
   /* ;*/
   /* END;*/
   /* IF XX0XW02.XX0XWPIX GT 0;       /* if the user selected a code*/
   /* MOVE YFBTBL.YFBCD(XX0XWPIX) TO PFWREC.PFDCDVAL(PFWSUB); /* save it*/
   /* ELSE;                           /* else*/
   /* MOVE ' ' TO PFWREC.PFDCDVAL(PFWSUB); /* pass back spaces*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/

   /* -----------------------------------------------------------;*/
   /* this is a new attribute.  0394/mjk.*/
    /* Process product line      attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "19") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "         PRODUCT LINE         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXPL01(); /* converse xpltbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XPLTBL.XPLCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process royalty code attribute field                     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "20") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "         ROYALTY CODE         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXRY01(); /* converse xrytbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XRYTBL.XRYCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process silhouette attribute field                       ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "21") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "          SILHOUETTE          ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXSU01(); /* converse xsutbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XSUTBL.XSUCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* This attribute has been renamed 'marketing division'.0394/mjk.;*/
    /* Process marketing level 1 attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "22") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "      MARKETING DIVISION      ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYMA01(); /* converse ymatbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YMATBL.YMACD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process source system attribute field                    ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "23") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        SOURCE SYSTEM         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYSY01(); /* converse ysytbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YSYTBL.YSYCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process special feature attribute field                  ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "24") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "       SPECIAL FEATURE        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXFC01(); /* converse xfctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XFCTBL.XFCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* This attribute has been renamed 'marketing category'. 0394/mjk.;*/
    /* Process marketing level 2 attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "25") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "      MARKETING CATEGORY      ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYMB01(); /* converse ymbtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YMBTBL.YMBCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end


   /* -----------------------------------------------------------;*/
    /* Process ordering division attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "26") /* ordering division attribute field*/
    XX0XW02.XX0XWHDR = "      ORDERING DIVISION       ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXDV01(); /* converse xdvtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XDVTBL.XDVCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process product category attribute field                 ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "27") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "       PRODUCT CATEGORY       ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXPC01(); /* converse xpctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XPCTBL.XPCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* This attribute has been renamed 'mkt detail category'. 0394/mjk.;*/
    /* Process marketing level 3 attribute field                ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "28") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "      MKT DETAIL CATEGORY     ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYMC01(); /* converse ymctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YMCTBL.YMCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process reporting division field                         ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "29") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        REPORTING DIVISION    ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXRD01(); /* converse xrdtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XRDTBL.XRD-RPT-DIV-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process quality attribute field                          ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "30") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "           QUALITY            ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXQA01(); /* converse xqatbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XQATBL.XQACD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process sales category attribute field                   ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "31") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        SALES CATEGORY        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYSC01(); /* converse ysctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YSCTBL.YSCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process   sales category 1   attribute field             ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "32") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        SALES CATEGORY 1      ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYSE01(); /* converse ysetbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YSETBL.YSE-SLS-CAT1-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS CODE SECTION FOR OLD ATTRIBUTE 33 HAS BEEN COMMENTED OUT. ;*/
   /* PLEASE SEE BELOW FOR THE NEW ATTRIBUTE 33, XMC.  0394/MJK. ;*/
    /* Process life cycle per prod data base attribute field    ;*/
   /* -----------------------------------------------------------;*/
   /* IF PFDREC.PFICD(PFWSUB) EQ '33';  /* life cycle per prod attr. field*/
   /* MOVE 'LIFE CYCLE, PER PROD DATA BASE' TO XX0XW02.XX0XWHDR;*/
   /* WHILE XX0XW02.XX0XWEND EQ 'N';  /* while pop up active*/
   /* ;*/
   /* PERFORM XPXLC01;                /* converse xlctbl pop up window*/
   /* ;*/
   /* END;*/
   /* IF XX0XW02.XX0XWPIX GT 0;       /* if the user selected a code*/
   /* MOVE XLCTBL.XLCCD(XX0XWPIX) TO PFWREC.PFDCDVAL(PFWSUB); /* save it*/
   /* ELSE;                           /* else*/
   /* MOVE ' ' TO PFWREC.PFDCDVAL(PFWSUB); /* pass back spaces*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/
   /* ;*/
   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process    material content           attribute field    ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "33") /* material content    attr. field*/
    XX0XW02.XX0XWHDR = "             MATERIAL CONTENT ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXMC01(); /* converse xmctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XMCTBL.XMCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process summary product group attribute field.           ;*/
    /* This attribute uses the summary code database table to   ;*/
    /* to summarize the reporting attribute values into a       ;*/
    /* smaller group of more general values for the window.     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "34") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "    SUMMARY PRODUCT GROUP     ";
    PFWREC.PFWTBLID = "XGS"; /* product group tbl is partial db key*/

    XPPF311(); /* process summary window*/

    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process   sales category 2   attribute field             ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "35") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        SALES CATEGORY 2      ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYSF01(); /* converse ysftbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YSFTBL.YSF-SLS-CAT2-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process life cycle per record attribute field            ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "36") /* life cycle per rec attribute field*/
    XX0XW02.XX0XWHDR = "    LIFE CYCLE, PER RECORD    ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXLC01(); /* converse xlctbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XLCTBL.XLCCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process product group attribute field                    ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "37") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        PRODUCT GROUP         ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXGS01(); /* converse xgstbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XGSTBL.XGSCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process  financial level 3   attribute field             ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "38") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        FINANCIAL LEVEL 3     ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYFE01(); /* converse yfetbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YFETBL.YFE-FIN-LVL3-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process sports activity attribute field                  ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "40") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "       SPORTS ACTIVITY        ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPXSP01(); /* converse xsptbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = XSPTBL.XSPCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process  financial level 4   attribute field             ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "41") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        FINANCIAL LEVEL 4     ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYFF01(); /* converse yfftbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YFFTBL.YFF-FIN-LVL4-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end

   /* -----------------------------------------------------------;*/
    /* Process summary gender age attribute field.              ;*/
    /* This attribute uses the summary code database table to   ;*/
    /* to summarize the reporting attribute values into a       ;*/
    /* smaller group of more general values for the window.     ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "43") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "      SUMMARY GENDER AGE      ";
    PFWREC.PFWTBLID = "XGA"; /* gender age tbl is partial db key*/

    XPPF311(); /* process summary window*/

    return;
  end

   /* -----------------------------------------------------------;*/
   /* THIS IS A NEW ATTRIBUTE AS OF 0394/MJK.                    ;*/
    /* Process  financial level 5   attribute field             ;*/
   /* -----------------------------------------------------------;*/
  if (PFDREC.PFICD[PFWSUB] == "44") /* for this attribute field*/
    XX0XW02.XX0XWHDR = "        FINANCIAL LEVEL 5     ";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPYFG01(); /* converse yfgtbl pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = YFGTBL.YFG-FIN-LVL5-CD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
    return;
  end


   /* -----------------------------------------------------------;*/
    /* Fall through error                                       ;*/
    /* If the attribute does not match any of the above then    ;*/
    /* a severe system error has occured.  The attributes       ;*/
    /* passed to this routine should be on the DPROFT.VFIELD01  ;*/
    /* table and this routine should have an 'IF' statement     ;*/
    /* for every attribute on the table.                        ;*/
   /* -----------------------------------------------------------;*/

  converseLib.validationFailed(086); /* not a valid value*/
  PFWREC.PFWVALER[PFWSUB] = "Y";
  PFWREC.PFWERRF = "Y";
end // end XPPF310

// Process summary window
Function XPPF311()
   /* -----------------------------------------------------------;*/
    /* This common routine processes the summary reporting      ;*/
    /* attribute fields.  The table name for the particular     ;*/
    /* summary attribute (eg: XOT for summary order type) is    ;*/
    /* moved to PFWREC.PFWTBLID prior to executing this         ;*/
    /* process.  It and the remainder of the key determine      ;*/
    /* which rows are selected from the vsumcd01 database       ;*/
    /* table and loaded into the PF2REC CSP table.  The         ;*/
    /* routine then windows the values in this table to the     ;*/
    /* screen.                                                  ;*/
   /* -----------------------------------------------------------;*/

   /* set up remainder of table key*/

  PFWREC.PFWSYSID = "PF"; /* summary system id*/
  PFWREC.PFWSUMID = 0001; /* summary summary id*/
  PFWREC.PFWSUMCD = "**"; /* wildcard summary code*/
  PFWREC.PFWSUMVL = "****"; /* wildcard summary source value*/

  XPPF500();
                                   /* read sel vsumcd01 values into csp tbl*/

  if (PFWREC.PFWCOUNT == 0) /* if no summary tbl rows with this key*/
     /* This is a severe system error.  The table should have*/
     /* entries for every attribute that is passed to it.*/
    converseLib.validationFailed(105); /* window not available for field*/
    PFWREC.PFWVALER[PFWSUB] = "Y";
    PFWREC.PFWERRF = "Y";
  else
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/

      XPPF510(); /* converse summary pop up window*/

    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PFWREC.PFDCDVAL[PFWSUB] = PF2REC.YSMSUMCD[XX0XWPIX]; /* save it*/
    else /* else*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* pass back spaces*/
    end
  end
end // end XPPF311

// edit entered attribute values
Function XPPF400()
   /* ********************************************************/
   /* *   this "common" process will edit values entered    **/
   /* *   in the attribute fields in applications pf0b and  **/
   /* *   pf0h. if data has been entered into one of the    **/
   /* *   attribute fields, this proccess will determine    **/
   /* *   one of two possible actions. if the attribute     **/
   /* *   has "selected" code values stored in              **/
   /* *   dproft.vrptat01, the entered value must match     **/
   /* *   one of those "selected" values. if the attribute  **/
   /* *   has no "selected" values, the entered value must  **/
   /* *   be a valid entry in a csp table or db2 table      **/
   /* *   which ever the case might be.                     **/
   /* ********************************************************/

  if (PFWREC.PFWPROD > " ") /* if a product value has been entered,*/
    if (PFDREC.PFDVALFL[8] == "Y") /* if there are selected code values*/
      XPPF410(); /* check the selected products*/
    end
    if (PFWREC.PFWERRF != "Y") /* if no errors have been found*/
      PFWREC.PFWIDX = 8;
                                   /* initialize index for product desc*/
      XPPF020(); /* check product data base*/
    end
  end

  PFWIDX = 7;
                                   /* initialize index for bottom of screen*/

  while (PFWIDX > 0)
    if (PFWREC.PFDCDVAL[PFWIDX] > " ") /* if an attribute is entered*/
      if (PFDREC.PFDVALFL[PFWIDX] == "Y") /* if there are selected values*/
        XPPF420(); /* check the selected attributes*/
      end
      if (PFWREC.PFWVALER[PFWIDX] == "N") /* if no errors for this att val*/
        XPPF430(); /* perform process to check csp or db2 tables*/
      end
    end
    PFWIDX = PFWIDX - 1; /* decrement the index*/
  end
end // end XPPF400

// compare prod. value with attr.
Function XPPF410()
   /* *********************************************************/
   /* *   this process has been performed because the user   **/
   /* *   entered a value for product and pfdrec.pfdvalfl(8) **/
   /* *   is 's' which indicates that specific values exist. **/
   /* *   this process will compare a product value entered  **/
   /* *   on the screen with the selected values in pfdrec.  **/
   /* *   if the value entered is not in pfdrec, it's an     **/
   /* *   error.                                             **/
   /* *********************************************************/

  PFWREC.PFWHPROD = PFWREC.PFWPROD; /* save prod. info. to compare*/

  PFWSUB2 = 1; /* initialize index*/

  while (PFWSUB2 < 10) /* scroll thru all 9 product values*/
    if (PFDREC.XGPCD[PFWSUB2] > " ") /* if a product exists,*/
      PFWREC.XGPCD = PFDREC.XGPCD[PFWSUB2]; /* move pfdrec vals to*/
      PFWREC.SY1STNBR = PFDREC.SY1STNBR[PFWSUB2]; /* hold area*/
      PFWREC.SY2CLRID = PFDREC.SY2CLRID[PFWSUB2];
      PFWREC.XDMCD = PFDREC.XDMCD[PFWSUB2];
      PFWREC.XQACD = PFDREC.XQACD[PFWSUB2];
      PFWREC.XLCCD = PFDREC.XLCCD[PFWSUB2];
      if (PFWREC.PFWHPROD == PFWREC.PFWPROD) /* if pfdrec vals = entered vals*/
        PFWREC.PFWPROD = PFWREC.PFWHPROD; /* return entered vals*/
        return; /* exit the routine*/
      end
    end
    PFWSUB2 = PFWSUB2 + 1; /* increment index*/
  end
  PFWREC.PFWPROD = PFWREC.PFWHPROD; /* return entered vals*/

  if (PFWSUB2 > 9) /* doesn't match a selected product*/
    PFWREC.PFWHGPCF = "Y"; /* set error flags*/
    PFWREC.PFWHSTYF = "Y";
    PFWREC.PFWHCOLF = "Y";
    PFWREC.PFWHDIMF = "Y";
    PFWREC.PFWHQUAF = "Y";
    PFWREC.PFWHLFCF = "Y";
    PFWREC.PFWERRF = "Y";
    converseLib.validationFailed(201);
  end
end // end XPPF410

// check attr. rec. for values
Function XPPF420()
   /* ***********************************************************/
   /* *   this process has been performed because the user   **/
   /* *   entered a value for attribute value(pfwidx).       **/
   /* *   the value for pfdrec.pfdvalfl(pfwidx)              **/
   /* *   is 's' which indicates that specific values exist. **/
   /* *   this process will compare an attr.  value entered  **/
   /* *   on the screen with the selected values in pfdrec.  **/
   /* *   if the value entered is not in pfdrec, it's an     **/
   /* *   error.                                             **/
   /* *********************************************************/

  if (PFWREC.PFDCDVAL[PFWIDX] == "?")
                                   /* if user requested a window for*/
    converseLib.validationFailed(202); /* an attr. that has selected values.*/
    PFWREC.PFWERRF = "Y"; /* that's not allowed.*/
    PFWREC.PFWVALER[PFWIDX] = "Y";
    return;
  end

  PFWSUB1 = 1; /* initialize index*/

  if (PFWIDX == 1) /* determine starting value for specific values*/
    PFWSUB2 = 1;
  else
    if (PFWIDX == 2)
      PFWSUB2 = 9;
    else
      if (PFWIDX == 3)
        PFWSUB2 = 17;
      else
        if (PFWIDX == 4)
          PFWSUB2 = 25;
        else
          if (PFWIDX == 5)
            PFWSUB2 = 33;
          else
            if (PFWIDX == 6)
              PFWSUB2 = 41;
            else
              if (PFWIDX == 7)
                PFWSUB2 = 49;
              end
            end
          end
        end
      end
    end
  end

  while (PFWSUB1 < 9) /* scroll thru all 8 attribute values*/
    if (PFWREC.PFDCDVAL[PFWIDX] > " ") /* if a code value exists,*/
      if (PFDREC.PFDCDVAL[PFWSUB2] == PFWREC.PFDCDVAL[PFWIDX]) /* if pfdrec*/
        return; /* val equal to entered value, exit the routine*/
      end
    end
    PFWSUB1 = PFWSUB1 + 1; /* increment index*/
    PFWSUB2 = PFWSUB2 + 1; /* increment index*/
  end

  if (PFWSUB1 > 8) /* went thru entire attr. values and didn't*/
    PFWREC.PFWVALER[PFWIDX] = "Y"; /* find what was entered*/
    PFWREC.PFWERRF = "Y";
    converseLib.validationFailed(201);
  end
end // end XPPF420

// edit entered attribute value
Function XPPF430()
   /* ***********************************************************/
   /* *  this process will edit the entered attribute values.  **/
   /* *  values will be validated by accessing a csp table or  **/
   /* *  db2 table. error flags will be set for invalid        **/
   /* *  entries; an attribute value description will be       **/
   /* *  passed for valid values.                              **/
   /* * 11-11-02 dsinha TT#17242 - divest DSLSMN.  **/
  /* *   commented code for IO0050 **/
   /* ***********************************************************/

  if (PFDREC.PFICD[PFWIDX] == "01")
                                   /* if the entered value is for pficd #1*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in YGRTBL.YGRCD /* check ygrtbl csp table.*/
       && YGRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YGRTBL.YGRDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YGRTBL.YGRABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error*/
        converseLib.validationFailed(138); /* entered sales group invalid*/
        return;
      end
    end
  end

   /* ----------------------------------------------------------------------*/
   /* the following section of code for old attribute 2 has been commented*/
   /* out.  see the following section for new attribute 2: xdr. 0394/mjk.*/
   /* ----------------------------------------------------------------------*/
   /* IF PFDREC.PFICD(PFWIDX) EQ '02';*/
   /* IF PFWREC.PFDCDVAL(PFWIDX) EQ '? ';*/
   /* MOVE 105 TO EZEMNO;           /* window not available for field*/
   /* MOVE 'Y' TO PFWREC.PFWERRF;*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);*/
   /* EZERTN;*/
   /* ELSE;*/
   /* MOVE 'N' TO PFWREC.PFWEDTF;   /* initialize edit flag*/
   /* MOVE PFWREC.PFWCDNUM(PFWIDX) TO PFWREC.PFWCH4; /* check fiel*/
   /* MOVE 4 TO PFWSUB2;            /* make sure it's numeric*/
   /* WHILE PFWSUB2 GT 0;*/
   /* IF PFWREC.PFWCH1(PFWSUB2) GT ' ';*/
   /* IF PFWREC.PFWCH1(PFWSUB2) GE '0'*/
   /* AND PFWREC.PFWCH1(PFWSUB2) LE '9';*/
   /* MOVE 'Y' TO PFWREC.PFWEDTF;*/
   /* ELSE;*/
   /* MOVE 'Y' TO PFWREC.PFWERRF;*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);*/
   /* MOVE 150 TO EZEMNO;     /* entered sales rep. id invalid*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
   /* IF PFWREC.PFWCH1(PFWSUB2) EQ ' '  /* search for embedded blanks*/
   /* AND PFWREC.PFWEDTF EQ 'Y';*/
   /* MOVE 'Y' TO PFWREC.PFWERRF;*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);*/
   /* MOVE 150 TO EZEMNO;       /* entered sales rep. id invalid*/
   /* EZERTN;*/
   /* END;*/
   /* PFWSUB2 = PFWSUB2 - 1;*/
   /* END;*/
   /* MOVE PFWREC.PFDCDVAL(PFWIDX) TO PFWREC.PFWSLSRP;*/
   /* MOVE PFWREC.PFWSLSRP TO PFWREC.PFDCDVAL(PFWIDX); /* redisplay*/
   /* SET SM4REC EMPTY;             /* 'IO0020' slsmn data base*/
   /* MOVE PFWREC.PFWSLSRP TO SM4REC.SM4REPID;*/
   /* ;*/
   /* CALL IO0020 'S ',SQLCA,SM4REC (NOMAPS,NONCSP; /* sel dslsmn.vreps001*/
   /* ;*/
   /* IF SQLCA.SQLCODE = +0;       /* if record on data base*/
   /* MOVE SM4REC.XXXLSTNM TO PFWREC.PFWDESC(PFWIDX); /* save last name*/
   /* MOVE SM4REC.XXXLSTNM TO PFWREC.PFIDESC(PFWIDX);*/
   /* EZERTN;*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE = +100;   /* if record not found,*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);/* flag error position*/
   /* MOVE 'Y' TO PFWERRF;     /* take appropriate measures*/
   /* MOVE 150 TO EZEMNO;       /* entered sales rep. id invalid*/
   /* EZERTN;*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE = -911; /* if data base page busy,*/
   /* MOVE 'Y' TO PFWERRF;   /* notify user*/
   /* MOVE 114 TO EZEMNO;     /* data base was busy; please retry*/
   /* EZERTN;*/
   /* ELSE;*/
   /* MOVE PFWREC.PFDCDVAL(PFWIDX) TO TA1REC.TA1LOCAT(2);/* fatal db2*/
   /* MOVE 'IO0020' TO TA1REC.TA1LOCAT(4);/* transfer to ta*/
   /* MOVE 'DSLSMN' TO TA1REC.TA1DBASE;*/
   /* MOVE 'VREPS001' TO TA1REC.TA1TBLVU;*/
   /* PERFORM XPPF010;*/
   /* END;*/
   /* END;*/
   /* END;*/
   /* END;*/
   /* END;*/

   /* This is a new attribute: development region. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "02")
                                   /* if the entered value is for pficd #2*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XDRTBL.XDR-PROD-REG-CD
       /* check xdrtbl csp table.*/
       && XDRTBL.XXX-STAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XDRTBL.XDR-PROD-REG-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error*/
        converseLib.validationFailed(150); /* entered dev. region invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "03")
                                   /* if the entered value is for pficd #3*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XGATBL.XGACD /* check xgatbl csp table.*/
       && XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XGATBL.XGADESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XGATBL.XGAABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error*/
        converseLib.validationFailed(159); /* entered gender/age invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "04")
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFDCDVAL[PFWIDX] == "? ")
        converseLib.validationFailed(105); /* window not available for field*/
        PFWREC.PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
        return;
      else
         /* TT#17242 Change begin - 11/12/2002*/
         /* SET SM1REC EMPTY;          /* call 'IO0050' to access agency data*/
         /* /* base*/
         /* MOVE PFWREC.PFDCDVAL[PFWIDX] TO SM1REC.SM1AGYID;*/
         /*  */
         /* CALL IO0050 'S ',SQLCA,SM1REC (NOMAPS,NONCSP;*/
         /* /* sel dslsmn.vsagcy01*/
         /*  */
         /* IF SQLCA.SQLCODE = +0;     /* if record on data base, return*/
         /* MOVE SM1REC.SM1AGYNM TO PFWREC.PFWDESC[PFWIDX]; /* agency name*/
         /* MOVE SM1REC.SM1AGYNM TO PFWREC.PFWABRV[PFWIDX];*/
        PFWREC.PFWDESC[PFWIDX] = "  "; /* agency name*/
        PFWREC.PFWABRV[PFWIDX] = "  ";
        return;
         /* ELSE;*/
         /* IF SQLCA.SQLCODE = +100; /* if record not found,*/
         /* MOVE 'Y' TO PFWERRF;   /* take appropriate measures*/
         /* MOVE 'Y' TO PFWREC.PFWVALER[PFWIDX];*/
         /* MOVE 139 TO EZEMNO;    /* entered agency invalid*/
         /* EZERTN();*/
         /* ELSE;*/
         /* IF SQLCA.SQLCODE = -911; /* if data base page busy,*/
         /* MOVE 'Y' TO PFWERRF; /* notify user*/
         /* MOVE 114 TO EZEMNO;  /* data base was busy; please retry*/
         /* EZERTN();*/
         /* ELSE;*/
         /* MOVE PFWREC.PFDCDVAL[PFWIDX] TO TA1REC.TA1LOCAT[2];*/
         /* MOVE 'IO0050' TO TA1REC.TA1LOCAT[4]; /* transfer to ta*/
         /* MOVE 'DSLSMN' TO TA1REC.TA1DBASE;*/
         /* MOVE 'VSAGCY01' TO TA1REC.TA1TBLVU;*/
         /* XPPF010();*/
         /* END;*/
         /* END;*/
         /* END;*/
         /* TT#17242 change end - 11/12/2002*/
      end
    end
  end


  if (PFDREC.PFICD[PFWIDX] == "05")
                                   /* if the entered value is for pficd #5*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XAUTBL.XAUCD /* check xautbl csp table.*/
       && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XAUTBL.XAUABRV[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XAUTBL.XAUABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(151); /* entered account class invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "06")
                                   /* if the entered value is for pficd #6*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XGPTBL.XGPCD /* check xgptbl csp table.*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XGPTBL.XGPDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(160); /* entered gpc code invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "07")
                                   /* if the entered value is for pficd #7*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XATTBL.XATCD /* check xattbl csp table.*/
       && XATTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XATTBL.XATDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XATTBL.XATABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(140); /* entered account type invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "08")
                                   /* if the entered value is for pficd #8*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XOBTBL.XOBCD /* check xobtbl csp table.*/
       && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XOBTBL.XOBDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XOBTBL.XOBABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        converseLib.validationFailed(152); /* entered base order type invalid*/
        PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "09") /* access summary table*/
    PFWREC.PFWTBLID = "XPR";
    PFWREC.PFWSYSID = "PF";
    PFWREC.PFWSUMID = 0001;
    PFWREC.PFWSUMCD = PFWREC.PFDCDVAL[PFWIDX];
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWSUMCD; /* redisplay*/
    if (PFWREC.PFWSUMCD == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
    else
      PFWREC.PFWSUMVL = "****";
      /**/
      XPPF500(); /* perform data base access*/
      /**/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(161); /* entered summary product type invalid*/
        PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
      else
        PFWREC.PFWDESC[PFWIDX] = YSMREC.YSMSMDSC;
        PFWREC.PFWABRV[PFWIDX] = YSMREC.YSMSMDSC;
      end
      return;
    end
  end


  if (PFDREC.PFICD[PFWIDX] == "10")
                                   /* if the entered value is for pficd #10*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XDVTBL.XDVCD /* check xdvtbl csp table.*/
       && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XDVTBL.XDVDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XDVTBL.XDVABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(224); /* entered owning division invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "11")
                                   /* if the entered value is for pficd #11*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      PFWREC.PFWEDTF = "N"; /* initialize edit flag*/
      PFWREC.PFWCH4 = PFWREC.PFWCDNUM[PFWIDX]; /* check fiel*/
      PFWSUB2 = 4; /* make sure it's numeric*/
      while (PFWSUB2 > 0)
        if (PFWREC.PFWCH1[PFWSUB2] > " ")
          if (PFWREC.PFWCH1[PFWSUB2] >= "0"
           && PFWREC.PFWCH1[PFWSUB2] <= "9")
            PFWREC.PFWEDTF = "Y";
          else
            PFWREC.PFWERRF = "Y";
            PFWREC.PFWVALER[PFWIDX] = "Y";
            converseLib.validationFailed(153); /* entered inventory account code*/
                                   /* invalid*/
            return;
          end
        end
        if (PFWREC.PFWCH1[PFWSUB2] == " " /* search for embedded blanks*/
         && PFWREC.PFWEDTF == "Y")       
          PFWREC.PFWERRF = "Y";
          PFWREC.PFWVALER[PFWIDX] = "Y";
          converseLib.validationFailed(153); /* entered inventory account code*/
                                   /* invalid*/
          return;
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
      if (PFWREC.PFWCDNUM[PFWIDX] in YICTBL.YICCD /* check yictbl csp table.*/
       && YICTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YICTBL.YICSDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YICTBL.YICSDESC[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(153); /* entered inventory account code*/
                                   /* invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "12")
                                   /* if the entered value is for pficd #12*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XPRTBL.XPRCD /* check xprtbl csp table.*/
       && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XPRTBL.XPRDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XPRTBL.XPRABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(162); /* entered product type invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "13") /* access summary table*/
    PFWREC.PFWTBLID = "XGP";
    PFWREC.PFWSYSID = "PF";
    PFWREC.PFWSUMID = 0001;
    PFWREC.PFWSUMCD = PFWREC.PFDCDVAL[PFWIDX];
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWSUMCD; /* redisplay*/
    if (PFWREC.PFWSUMCD == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
    else
      PFWREC.PFWSUMVL = "****";
      /**/
      XPPF500(); /* perform data base access*/
      /**/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(077); /* entered summary gpc invalid*/
        PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
      else
        PFWREC.PFWDESC[PFWIDX] = YSMREC.YSMSMDSC;
        PFWREC.PFWABRV[PFWIDX] = YSMREC.YSMSMDSC;
      end
      return;
    end
  end


  if (PFDREC.PFICD[PFWIDX] == "14")
                                   /* if the entered value is for pficd #14*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XWHTBL.XWHCD /* check xwhtbl csp table.*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XWHTBL.XWHABRV[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(154); /* entered warehouse code invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "15")
                                   /* if the entered value is for pficd #15*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XFMTBL.XFMCD /* check xfmtbl csp table.*/
       && XFMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XFMTBL.XFMDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XFMTBL.XFMABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(163); /* entered family invalid*/
        return;
      end
    end
  end

   /* this attribute has been renamed business unit. 0394/mjk.*/
   /* (is still YFA, but desc was financial level 1).*/
  if (PFDREC.PFICD[PFWIDX] == "16")
                                   /* if the entered value is for pficd #16*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in YFATBL.YFACD /* check yfatbl csp table.*/
       && YFATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YFATBL.YFASDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YFATBL.YFAABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(141); /* entered business unit   invalid*/
        return;
      end
    end
  end

   /* ----------------------------------------------------------------------*/
   /* the following section of code for old attr. 17 has been commented*/
   /* out. see the following section for new attribute 17: xcn. 0394/mjk.*/
   /* ----------------------------------------------------------------------*/
   /* IF PFDREC.PFICD(PFWIDX) EQ '17'; /* access summary table*/
   /* MOVE 'SP1' TO PFWREC.PFWTBLID;*/
   /* MOVE 'PF' TO PFWREC.PFWSYSID;*/
   /* MOVE 0001 TO PFWREC.PFWSUMID;*/
   /* MOVE PFWREC.PFDCDVAL(PFWIDX) TO PFWREC.PFWSUMCD;*/
   /* MOVE PFWREC.PFWSUMCD TO PFWREC.PFDCDVAL(PFWIDX);/* redisplay*/
   /* IF PFWREC.PFWSUMCD EQ 'ZZ';*/
   /* MOVE 'UNDEFINED' TO PFWREC.PFWDESC(PFWIDX);*/
   /* MOVE 'UNDEFINED' TO PFWREC.PFWABRV(PFWIDX);*/
   /* ELSE;*/
   /* MOVE '****' TO PFWREC.PFWSUMVL;*/
   /* ;*/
   /* PERFORM XPPF500;             /* perform data base access*/
   /* ;*/
   /* IF PFWCOUNT = 0;*/
   /* MOVE 155 TO EZEMNO;*/
   /* /* entered summary sales program invalid*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);*/
   /* ELSE;*/
   /* MOVE YSMREC.YSMSMDSC TO PFWREC.PFWDESC(PFWIDX);*/
   /* MOVE YSMREC.YSMSMDSC TO PFWREC.PFWABRV(PFWIDX);*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
   /* ;*/

   /* this is a new attribute:  construction code. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "17")
                                   /* if the entered value is for pficd #17*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in XCNTBL.XCNCD /* check xcntbl csp table.*/
       && XCNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XCNTBL.XCNDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XCNTBL.XCNSDESC[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(155); /* entered construction code invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "18")
                                   /* if the entered value is for pficd #18*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XBTTBL.XBTCD /* check xbttbl csp table.*/
       && XBTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XBTTBL.XBTDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XBTTBL.XBTABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(164); /* entered body type invalid*/
        return;
      end
    end
  end

   /* product line/XPL replaced financial level 2/YFB.*/
   /* this is a new attribute as of 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "19")
                                   /* if the entered value is for pficd #19*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XPLTBL.XPLCD /* check xpltbl csp table.*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XPLTBL.XPLDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XPLTBL.XPLABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(142); /* entered product line invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "20")
                                   /* if the entered value is for pficd #20*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XRYTBL.XRYCD /* check xrytbl csp table.*/
       && XRYTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XRYTBL.XRYDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XRYTBL.XRYABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(156); /* entered royalty code invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "21")
                                   /* if the entered value is for pficd #21*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XSUTBL.XSUCD /* check xsutbl csp table.*/
       && XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XSUTBL.XSUDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XSUTBL.XSUABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(165); /* entered silhouette invalid*/
        return;
      end
    end
  end

   /* the description for this attribute has been changed from*/
   /* marketing level 1 to marketing division--is still YMA. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "22")
                                   /* if the entered value is for pficd #22*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YMATBL.YMACD /* check ymatbl csp table.*/
       && YMATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YMATBL.YMASDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YMATBL.YMAABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(143); /* entered marketing div   invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "23")
                                   /* if the entered value is for pficd #23*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in YSYTBL.YSYCD /* check ysytbl csp table.*/
       && YSYTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YSYTBL.YSYDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YSYTBL.YSYABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(157); /* entered source system invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "24")
                                   /* if the entered value is for pficd #24*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XFCTBL.XFCCD /* check xfctbl csp table.*/
       && XFCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XFCTBL.XFCDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XFCTBL.XFCABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(166); /* entered special feature invalid*/
        return;
      end
    end
  end

   /* the description for this attribute has been changed from*/
   /* marketing level 2 to marketing category--is still YMB. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "25")
                                   /* if the entered value is for pficd #25*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YMBTBL.YMBCD /* check ymbtbl csp table.*/
       && YMBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YMBTBL.YMBSDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YMBTBL.YMBABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(144); /* entered marketing category invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "26")
                                   /* if the entered value is for pficd #26*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XDVTBL.XDVCD /* check xdvtbl csp table.*/
       && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XDVTBL.XDVDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XDVTBL.XDVABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(158); /* entered order division invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "27")
                                   /* if the entered value is for pficd #27*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XPCTBL.XPCCD /* check xpctbl csp table.*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XPCTBL.XPCABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(167); /* entered product category invalid*/
        return;
      end
    end
  end

   /* the description for this attribute has been changed from*/
   /* marketing level 3 to mkt detail category--is still YMC. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "28")
                                   /* if the entered value is for pficd #28*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YMCTBL.YMCCD /* check ymctbl csp table.*/
       && YMCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YMCTBL.YMCSDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YMCTBL.YMCABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(145); /* entered mkt detail category invalid*/
        return;
      end
    end
  end

   /* this is a new attribute, reporting division. 0494/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "29")
                                   /* if the entered value is for pficd #29*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in XRDTBL.XRD-RPT-DIV-CD
       /* check xrdtbl csp table.*/
       && XRDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XRDTBL.XRD-RPT-DIV-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XRDTBL.XRD-RPT-DIV-ABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(353); /* entered reporting division invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "30")
                                   /* if the entered value is for pficd #30*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XQATBL.XQACD /* check xqatbl csp table.*/
       && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XQATBL.XQADESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XQATBL.XQAABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(168); /* entered quality code invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "31")
                                   /* if the entered value is for pficd #31*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in YSCTBL.YSCCD /* check ysctbl csp table.*/
       && YSCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YSCTBL.YSCDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YSCTBL.YSCABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(146); /* entered sales category invalid*/
        return;
      end
    end
  end

   /* this is a new attribute: sales category 1/YSE. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "32")
                                   /* if the entered value is for pficd #32*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YSETBL.YSE-SLS-CAT1-CD
       /* check ysetbl csp table.*/
       && YSETBL.XXX-STAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YSETBL.YSE-SLS-CAT1-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YSETBL.YSE-SLS-CAT1-ABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(354); /* entered sales category 1  invalid*/
        return;
      end
    end
  end

   /* ----------------------------------------------------------------------*/
   /* the following section of code for old attr. 33 has been commented*/
   /* out.  see the following section for new attribute 33: xdr. 0394/mjk.*/
   /* ----------------------------------------------------------------------*/
   /* IF PFDREC.PFICD(PFWIDX) EQ '33';*/
   /* /* if the entered value is for pficd #33*/
   /* MOVE PFWREC.PFWCD2(PFWIDX) TO PFWREC.PFDCDVAL(PFWIDX);/* redisplay*/
   /* IF PFWREC.PFWCD2(PFWIDX) EQ 'ZZ';/* undefined*/
   /* MOVE 'UNDEFINED' TO PFWREC.PFWDESC(PFWIDX);*/
   /* MOVE 'UNDEFINED' TO PFWREC.PFWABRV(PFWIDX);*/
   /* EZERTN;*/
   /* ELSE;*/
   /* IF PFWREC.PFWCD2(PFWIDX) IN XLCTBL.XLCCD/* check xlctbl csp table.*/
   /* AND XLCTBL.XXXSTAT(EZETST) EQ 'A';/* if in table and active*/
   /* MOVE XLCTBL.XLCDESC(EZETST) TO PFWREC.PFWDESC(PFWIDX);*/
   /* MOVE XLCTBL.XLCABRV(EZETST) TO PFWREC.PFWABRV(PFWIDX);*/
   /* EZERTN;                    /* if entered value is in table, exit*/
   /* /* routine*/
   /* ELSE;*/
   /* MOVE 'Y' TO PFWREC.PFWVALER(PFWIDX);/* flag error position*/
   /* MOVE 'Y' TO PFWREC.PFWERRF;/* flag it as an error.*/
   /* MOVE 169 TO EZEMNO;        /* entered life cycle invalid*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
   /* END;*/

   /* material content/XMC replaced life cyc per prod/XLC.*/
   /* this is a new attribute as of 0394/mjk.*/
   /* it is 3 bytes.*/
  if (PFDREC.PFICD[PFWIDX] == "33")
                                   /* if the entered value is for pficd #33*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in XMCTBL.XMCCD /* check xmctbl csp table.*/
       && XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XMCTBL.XMCDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(355); /* entered material content invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "34") /* ;  access summary table*/
    PFWREC.PFWTBLID = "XGS";
    PFWREC.PFWSYSID = "PF";
    PFWREC.PFWSUMID = 0001;
    PFWREC.PFWSUMCD = PFWREC.PFDCDVAL[PFWIDX];
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWSUMCD; /* redisplay*/
    if (PFWREC.PFWSUMCD == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
    else
      PFWREC.PFWSUMVL = "****";
      /**/
      XPPF500(); /* perform data base access*/
      /**/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(077); /* entered summary gpc invalid*/
        PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
      else
        PFWREC.PFWDESC[PFWIDX] = YSMREC.YSMSMDSC;
        PFWREC.PFWABRV[PFWIDX] = YSMREC.YSMSMDSC;
      end
      return;
    end
  end

   /* this is a new attribute: sales category 2/YSF. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "35")
                                   /* if the entered value is for pficd #35*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YSFTBL.YSF-SLS-CAT2-CD
       /* check ysftbl csp table.*/
       && YSFTBL.XXX-STAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YSFTBL.YSF-SLS-CAT2-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YSFTBL.YSF-SLS-CAT2-ABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(356); /* entered sales category 2  invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "36")
                                   /* if the entered value is for pficd #36*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XLCTBL.XLCCD /* check xlctbl csp table.*/
       && XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XLCTBL.XLCDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(169); /* entered life cycle invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "37")
                                   /* if the entered value is for pficd #37*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XGSTBL.XGSCD /* check xgstbl csp table.*/
       && XGSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XGSTBL.XGSSDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XGSTBL.XGSABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(147); /* entered product group invalid*/
        return;
      end
    end
  end

   /* this is a new attribute: financial lvl 3/YFE. 0394/mjk.*/
  if (PFDREC.PFICD[PFWIDX] == "38")
                                   /* if the entered value is for pficd #38*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in YFETBL.YFE-FIN-LVL3-CD
       /* check yfetbl csp table.*/
       && YFETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YFETBL.YFE-FIN-LVL3-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YFETBL.YFE-FIN-LVL3-ABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(357); /* entered financial lvl 3   invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "39")
                                   /* if the entered value is for pficd #39*/
     /* Should never be this because product attributes are*/
     /* only allowed in the 8th position which is handled*/
     /* seperately in xppf400.*/
    return;
  end

  if (PFDREC.PFICD[PFWIDX] == "40")
                                   /* if the entered value is for pficd #40*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD2[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD2[PFWIDX] == "ZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD2[PFWIDX] in XSPTBL.XSPCD /* check xsptbl csp table.*/
       && XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = XSPTBL.XSPDESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        return; /* if entered value is in table, exit*/
                                   /* routine*/
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(148); /* entered sport activity invalid*/
        return;
      end
    end
  end

   /* this is a new attribute: financial lvl 4/YFF. 0394/mjk.*/
   /* it is 3 bytes.*/
  if (PFDREC.PFICD[PFWIDX] == "41")
                                   /* if the entered value is for pficd #41*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YFFTBL.YFF-FIN-LVL4-CD
       /* check yfftbl csp table.*/
       && YFFTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YFFTBL.YFF-FIN-LVL4-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YFFTBL.YFF-FIN-LVL4-ABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(358); /* entered financial lvl 4   invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "42")
                                   /* if the entered value is for pficd #42*/
     /* Should never be this because product attributes are*/
     /* only allowed in the 8th position which is handled*/
     /* separately in xppf400.*/
    return;
  end

  if (PFDREC.PFICD[PFWIDX] == "43") /* access summary table*/
    PFWREC.PFWTBLID = "XGA";
    PFWREC.PFWSYSID = "PF";
    PFWREC.PFWSUMID = 0001;
    PFWREC.PFWSUMCD = PFWREC.PFDCDVAL[PFWIDX];
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWSUMCD; /* redisplay*/
    if (PFWREC.PFWSUMCD == "ZZ")
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
    else
      PFWREC.PFWSUMVL = "****";
      /**/
      XPPF500(); /* perform data base access*/
      /**/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(149); /* entered summary gender/age invalid*/
        PFWERRF = "Y";
        PFWREC.PFWVALER[PFWIDX] = "Y";
      else
        PFWREC.PFWDESC[PFWIDX] = YSMREC.YSMSMDSC;
        PFWREC.PFWABRV[PFWIDX] = YSMREC.YSMSMDSC;
      end
      return;
    end
  end

   /* this is a new attribute: financial lvl 5/YFG. 0394/mjk.*/
   /* it is 3 bytes.*/
  if (PFDREC.PFICD[PFWIDX] == "44")
                                   /* if the entered value is for pficd #44*/
    PFWREC.PFDCDVAL[PFWIDX] = PFWREC.PFWCD3[PFWIDX]; /* redisplay*/
    if (PFWREC.PFWCD3[PFWIDX] == "ZZZ") /* undefined*/
      PFWREC.PFWDESC[PFWIDX] = "UNDEFINED";
      PFWREC.PFWABRV[PFWIDX] = "UNDEFINED";
      return;
    else
      if (PFWREC.PFWCD3[PFWIDX] in YFGTBL.YFG-FIN-LVL5-CD
       /* check yfgtbl csp table.*/
       && YFGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if in table and active*/
        PFWREC.PFWDESC[PFWIDX] = YFGTBL.YFG-FIN-LVL5-DESC[sysVar.arrayIndex];
        PFWREC.PFWABRV[PFWIDX] = YFGTBL.YFG-FIN-LVL5-ABRV[sysVar.arrayIndex];
        return;
      else
        PFWREC.PFWVALER[PFWIDX] = "Y"; /* flag error position*/
        PFWREC.PFWERRF = "Y"; /* flag it as an error.*/
        converseLib.validationFailed(359); /* entered financial lvl 5   invalid*/
        return;
      end
    end
  end

  if (PFDREC.PFICD[PFWIDX] == "45")
                                   /* if the entered value is for pficd #45*/
     /* Should never be this because product attributes are*/
     /* only allowed in the 8th position which is handled*/
     /* seperately in xppf400.*/
    return;
  end

end // end XPPF430

// summary table(ysm) access rtn.
Function XPPF500()
   /* ************************************************************/
   /* ***                                                     ****/
   /* ***   use parameters passed in ysmrec to access         ****/
   /* ***   IO2640 (summary table i/o mod). if a record(s)    ****/
   /* ***   is found for the passed parameters (sqlcode = 0), ****/
   /* ***   store DB2 records in CSP record pf2rec.           ****/
   /* ***   this routine will use the i/o mod in two ways:    ****/
   /* ***   1) window routines - the fields ysmrec.xxxtblpf,  ****/
   /* ***      ysmrec.xxxsyspf, and ysmrec.xxxsumid will be   ****/
   /* ***      provided to search DB2 for all occurences of   ****/
   /* ***      a particular table and system. for example,    ****/
   /* ***      xxxtblpf = 'xgp' and xxxsyspf = 'pf' should    ****/
   /* ***      return all summaries of GPC in the profit-     ****/
   /* ***      ability system.                                ****/
   /* ***   2) editing - the same three fields as windowing   ****/
   /* ***      plus field ysmrec.xxxsumcd will be provided    ****/
   /* ***      to determine the validity of a particular      ****/
   /* ***      summary code for editing purposes.             ****/
   /* ************************************************************/

  YSMREC.YSMTBLPF = PFWREC.PFWTBLID; /* move in parameters to pass*/
  YSMREC.YSMSYSPF = PFWREC.PFWSYSID;
  YSMREC.YSMSUMID = PFWREC.PFWSUMID;
  YSMREC.YSMSUMCD = PFWREC.PFWSUMCD;
  YSMREC.YSMSRCVL = PFWREC.PFWSUMVL;

  set SQLCA empty;

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* open DB2 cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if unsuccessful, abend the program*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = PFWREC.PFWSUMKY;
    TA1REC.TA1LOCAT[3] = "XPPF500A";
    TA1REC.TA1LOCAT[4] = "IO2640";
    XPPF010();
  end

  PFWSUB3 = 1;
  PFWCOUNT = 0;

  while (SQLCA.VAGen_SQLCODE == 0) /* call i/o mod IO2640 until no more*/
    set SQLCA empty; /* DB2 records exist for passed key*/
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* if DB2 record exists, store it in*/
      PFWCOUNT = PFWCOUNT + 1; /* csp record*/
      if (YSMREC.YSMSUMCD != PFWREC.PFWSUMCD)
        PF2REC.PF2WGRP[PFWSUB3] = YSMREC.YSMGRP;
        PFWSUB3 = PFWSUB3 + 1;
        PFWREC.PFWSUMCD = YSMREC.YSMSUMCD;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* data base is busy*/
          PFWERRF = "Y";
          converseLib.validationFailed(114);
        else
          TA1REC.TA1LOCAT[2] = "XPPF500B"; /* DB2 error that requires*/
          TA1REC.TA1LOCAT[4] = "IO2640"; /* transfer to ta*/
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VSUMCD01";
        end
      end
    end
  end

  set SQLCA empty;

  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* close DB2 cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if unsuccessful, abend the program*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = PFWREC.PFWSUMKY;
    TA1REC.TA1LOCAT[3] = "XPPF500C";
    TA1REC.TA1LOCAT[4] = "IO2640";
    XPPF010();
  end
end // end XPPF500

// converse summary pop up window
Function XPPF510()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR VSUMCD01 DB TABLE DATA*/
          /* THAT HAS BEEN LOADED INTO PF2REC CSP TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PF2REC.PF2WSTK[XX0XWCT1] == PFWREC.PFWSETKY) /* Or end of data*/
        if (PF2REC.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PF2REC.YSMSUMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PF2REC.YSMSMDSC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (PF2REC.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = PF2REC.YSMSUMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = PF2REC.YSMSMDSC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PF2REC.PF2WSTK[XX0XWCT1] != PFWREC.PFWSETKY) /* Or end of data*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPPF510

// Application initialization
Function XPPG001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* set segmented transaction id*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* segmented trans id setting*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set XP1REC empty;

  if (COMMAREA.CAFRMSYS == "PG") /* Came from within the system*/
    XP1REC.XP1GROUP = COMMAREA.CAUSERA; /* Restore work record*/
  else
    /* NEXT SENTENCE*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPPG001

// Application initialization
Function XPPG002()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* set segmented transaction id*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* segmented trans id setting*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set PGXREC empty;

  if (COMMAREA.CAFRMSYS == "PG") /* Came from within the system*/
    PGXREC.PG4STNBR = COMMAREA.CAUSERA; /* Restore work record*/
  else
    /* NEXT SENTENCE*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPPG002

// application initialization
Function XPPK001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The PICKING*/
   /* work record is formatted upon initial application entry.*/
   /* Warehouse code is validated and the warehouse abbreviation*/
   /* is obtained.  SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/


  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "PK" /* Came from within the PICKING system*/
     || COMMAREA.CAFRMSYS == "PW") /* or the Wilsonville subsystem*/

      PKWREC.PKWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/

    else

      set PKWREC empty; /* Clear work record area*/
      PKWREC.XWHCD = COMMAREA.XWHCD; /* Set initial warehouse code*/

    end

    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/

  end

  XPPK002(); /* Obtain warehouse abbreviation*/


end // end XPPK001

// obtain warehouse abbreviation
Function XPPK002()
   /* ------------------------------------------------------------*/
   /* This process will validate the warehouse code passed in the*/
   /* PICKING work record and obtain the warehouse abbreviation.*/
   /* If the warehouse code is not valid, an error number is*/
   /* returned in EZEMNO and warehouse abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.XWHABRV != " " /* Current warehouse code is valid and*/
   && PKWREC.XWHCD == PKWREC.PKWXWHCD)
                                   /* warehouse code has not changed*/

    return; /* Return to caller*/

  end

  PKWREC.PKWXWHCD = PKWREC.XWHCD; /* Save current warehouse code*/
  PKWREC.XWHABRV = " "; /* Clear warehouse abbreviation*/

  if (PKWREC.XWHCD == "  ") /* Warehouse code not entered*/

    converseLib.validationFailed(4); /* Indicate warehouse code required*/
    return; /* Return to caller*/

  end

  if (PKWREC.XWHCD in XWHTBL.XWHCD)
    PKWREC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(2); /* Indicate invalid warehouse*/
    return; /* Return to caller*/

  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/

    PKWREC.XWHABRV = " "; /* Clear warehouse abbreviation*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    return; /* Return to caller*/

  end


end // end XPPK002

// validate Whse Prior To Entry
Function XPPK003()

     /* - - -  P R O C E S S    D E S C R I P T I O N  - - -*/

    /* This process is intended for us by picking applications*/
    /* allow entry using only designated warehouses.*/

    /* This process validates that the warehouse is valid for the*/
    /* calling application.  If the transferred warehouse code is*/
    /* not valid, access will be denied to the application to*/
    /* which the user was attempting transfer (the calling pgm).*/

    /* A message will be displayed to the user indicating that*/
    /* the transfer is not allowed due to an invalid specified*/
    /* warehouse.  Control will be returned to the application*/
    /* that initiated the transfer.*/

     /* - - -  P R O C E S S    D E S C R I P T I O N  - - -*/

   /* ============================================================*/

                    /* MAINTENANCE LOG*/
                    /* ---------------*/

      /* DATE    USERID  DESCRIPTION*/
    /* --------  ------  ----------------------------------------*/
    /* 02/05/91  MSMIT3  New Process Definition.*/
    /* 03/16/92  SHENDE  Add whse 02 and 04 to valid warehouses.*/
    /* 08/30/95  RYONKE  Add whse 42 to valid warehouses (Canada).*/

   /* ============================================================*/


   /* ------------------------------------------------------------*/
   /* Validate the warehouse code.  If valid, return to previous*/
   /* process; otherwise, return to application initiating the*/
   /* transfer and display error message.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.XWHCD == "51" /* warehouse code equal 51*/
   || PKWREC.XWHCD == "07" /* warehouse code equal 07*/
   || PKWREC.XWHCD == "04" /* warehouse code equal 04*/
   || PKWREC.XWHCD == "02" /* warehouse code equal 02*/
   || PKWREC.XWHCD == "42") /* warehouse code equal 42 Canada*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Initiate COMMAREA for return.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = "WAREHOUSE IS NOT VALID FOR THIS APPLICATION";
  TAEREC.TAEDESC2 = PKWREC.XWHCD; /* invalid warehouse code*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "WHSE VALIDATION"; /* location of error*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1MAP = "XPPK003"; /* subroutine name*/
  TA1REC.TA1FYICD = "FYI"; /* indicate FYI*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis*/

   /* ------------------------------------------------------------*/
   /* Exit to the application that transferrred control.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CACURRAP = "MN0M"; /* current application*/
  COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* FROM application*/

  XSEXIT(); /* exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* termination function*/
  TA1REC.TA1LOC = "VALIDATE WAREHOUSE EXIT FAILURE ";
  TA1REC.TA1FYICD = "   "; /* clear FYI indicator*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/


end // end XPPK003

// validate division code
Function XPPK004()
   /* ---------------------------------------------------------------------*/
   /* This process will validate the division code which is*/
   /* passed in the COMMAREA against the XDVTBL table.*/

   /* If the division code is invalid,*/
   /* Error number (393) is returned in EZEMNO.*/

   /* If the division code is invalid,*/
   /* Error number (394) is returned in EZEMNO.*/

   /* DIVISION CODE    DESCRIPTION*/
   /* -------------    --------------*/
   /* 01               Nike Domestic*/
   /* 02               International*/
   /* 03               Promo*/
   /* 04               Mail Order*/
   /* 05               Side 1*/
   /* 06               Relay*/
   /* 07               I.E.*/
   /* 08               Cole Haan*/
   /* ---------------------------------------------------------------------*/
   /* MAINTANENCE LOG*/
   /* ---------------*/
   /*  */
   /* DATE      USER ID   DESCRIPTION*/
   /* --------  -------   -------------------------------------------*/
   /* 10/18/91  SHENDE    New process definition.*/
   /*  */
   /* ===============================================================*/
   /* Validate division code using XDVTBL.*/
   /* ---------------------------------------------------------------*/


  if (PKWREC.XDVCD in XDVTBL.XDVCD) /* if valid division code*/

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if not active division code*/

      converseLib.validationFailed(394); /* DIVISION CODE IS INACTIVE*/
      return;
    end
  else

    converseLib.validationFailed(393); /* INVALID DIVISION CODE*/
    return;
  end


end // end XPPK004

// Determines B-Grade & Closeouts
Function XPPK005()
   /* -----------------------------------------------------------------*/
   /* -  -  -    P R O C E S S   D E S C R I P T I O N     -  -  -*/

   /* This process determines if the order is b-grade or closeout.*/
   /* The sales office number (XSOCD) and the base order code (XOBCD)*/
   /* are used to determine the type of order.  After the order type*/
   /* is found, it is passed to the PICKING work record (PKWREC).*/

   /* The fields XSOCD and XOBCD from PK4REC (DPICK.VPOOLH01) are*/
   /* compared by the base order code within that sales office.*/

   /* SALES     BASE ORDER*/
   /* OFFICE      CODE           ORDER TYPE*/
   /* ------    --------------   -----------*/
   /* 8      P1, P2           Closeout*/
   /* 8      B1, B2, D1, D2   B-grade*/
   /* 12      P1, P2           Closeout*/
   /* 12      B1, B2, D1, D2   B-grade*/
   /* 19      B1, B2           B-grade*/
   /* 19      D1, D2           Closeout*/
   /* other     B1, B2           B-grade*/
   /* other     D1, D2           Closeout*/
   /*  */
   /*  */
   /* ------------------------------------------------------------------*/
   /* MAINTENANCE LOG*/
   /* ---------------*/
   /*  */
   /* DATE    USER ID    DESCRIPTION*/
   /* --------  -------    --------------------------------------------*/
   /* 11/04/91  SHENDE     NEW PROCESS DEFINITION*/
   /*  */
   /* ==================================================================*/

  PKWREC.PKW-ORDER-TYP-IND = " "; /* initialize field.*/

   /* -----------------------------------------*/
   /* Sales Office 8 & 12*/
   /* -----------------------------------------*/
  if (PK4REC.XSOCD == "08"
   || PK4REC.XSOCD == "12")

     /* --- cloesouts ------------------------*/
    if (PK4REC.XOBCD == "P1"
     || PK4REC.XOBCD == "P2")

      PKWREC.PKW-ORDER-TYP-IND = "C";
    else
       /* --- b-grade ------------------------*/
      if (PK4REC.XOBCD == "B1"
       || PK4REC.XOBCD == "B2"
       || PK4REC.XOBCD == "D1"
       || PK4REC.XOBCD == "D2")

        PKWREC.PKW-ORDER-TYP-IND = "B";
      end
    end
  else
    /* ---------------------------------------*/
    /* Sales Office 19*/
    /* ---------------------------------------*/
    if (PK4REC.XSOCD == "19")

       /* --- cloesouts ----------------------*/
      if (PK4REC.XOBCD == "D1"
       || PK4REC.XOBCD == "D2")

        PKWREC.PKW-ORDER-TYP-IND = "C";
      else
         /* --- b-grade ----------------------*/
        if (PK4REC.XOBCD == "B1"
         || PK4REC.XOBCD == "B2")

          PKWREC.PKW-ORDER-TYP-IND = "B";
        end
      end
    else
      /* -------------------------------------*/
      /* All others*/
      /* -------------------------------------*/

      /* --- b-grade -------------------------*/
      if (PK4REC.XOBCD == "B1"
       || PK4REC.XOBCD == "B2"
      )
        PKWREC.PKW-ORDER-TYP-IND = "B";
      else
        /* --- b-grade -------------------------*/
        if (PK4REC.XOBCD == "D1"
         || PK4REC.XOBCD == "D2"
        )
          PKWREC.PKW-ORDER-TYP-IND = "C";
        end
      end
    end
  end
end // end XPPK005

// determines order group
Function XPPK006()
   /* -----------------------------------------------------------------*/
   /* -  -  -    P R O C E S S   D E S C R I P T I O N     -  -  -*/

   /* This process determines the order group type switch.*/
   /* The process will take the XOT-ORDER-TYPE-CD as the input and*/
   /* will pass back the group it belongs to.*/
   /* Included new order types for Wilsonville ( not listed in comments )*/

   /* order type   Group order type*/
   /* code*/
   /* ------       ----------------*/
   /* DA,DB,DD,DF  FT*/
   /*  */
   /* DC,DE,DG,DI  AP*/
   /*  */
   /* FA,FB,FC,FD  EQ*/
   /* FF,FG,FH,FI*/
   /* HG,HH,HI,HJ*/
   /* FQ,FR,FS,FT*/
   /*  */
   /* DN,DW,DO     AC*/
   /*  */
   /* DL           FS*/
   /*  */
   /* DM           AS*/
   /*  */
   /* FE,FJ,FU,HK  ES*/
   /* ------------------------------------------------------------------*/
   /* MAINTENANCE LOG*/
   /* ---------------*/
   /*  */
   /* DATE    USER ID    DESCRIPTION*/
   /* --------  -------    --------------------------------------------*/
   /* 08/26/97  VKAKUB     NEW PROCESS DEFINITION*/
   /*  */
   /* ==================================================================*/

  PKWREC.PKW-ORD-GRP-SW = " "; /* initialize field.*/

  if (PK4REC.XOTCD == "DA"
   || PK4REC.XOTCD == "DB"
   || PK4REC.XOTCD == "DD"
   || PK4REC.XOTCD == "DF"
   || PK4REC.XOTCD == "01"
   || PK4REC.XOTCD == "02"
   || PK4REC.XOTCD == "03"
   || PK4REC.XOTCD == "04"
   || PK4REC.XOTCD == "13"
   || PK4REC.XOTCD == "14"
   || PK4REC.XOTCD == "16"
   || PK4REC.XOTCD == "80"
   || PK4REC.XOTCD == "81"
   || PK4REC.XOTCD == "84"
   || PK4REC.XOTCD == "RP")
    PKWREC.PKW-ORD-GRP-SW = "FT";
  else
    if (PK4REC.XOTCD == "DC"
     || PK4REC.XOBCD == "DE"
     || PK4REC.XOBCD == "DG"
     || PK4REC.XOBCD == "DI")
      PKWREC.PKW-ORD-GRP-SW = "AP";
    else
      if (PK4REC.XOTCD == "FA"
       || PK4REC.XOTCD == "FB"
       || PK4REC.XOTCD == "FC"
       || PK4REC.XOTCD == "FD"
       || PK4REC.XOTCD == "FF"
       || PK4REC.XOTCD == "FG"
       || PK4REC.XOTCD == "FH"
       || PK4REC.XOTCD == "FI"
       || PK4REC.XOTCD == "HG"
       || PK4REC.XOTCD == "HH"
       || PK4REC.XOTCD == "HI"
       || PK4REC.XOTCD == "HJ"
       || PK4REC.XOTCD == "FQ"
       || PK4REC.XOTCD == "FR"
       || PK4REC.XOTCD == "FS"
       || PK4REC.XOTCD == "FT"
       || PK4REC.XOTCD == "ED"
       || PK4REC.XOTCD == "EF"
       || PK4REC.XOTCD == "EG"
       || PK4REC.XOTCD == "EK"
       || PK4REC.XOTCD == "HB"
       || PK4REC.XOTCD == "HC"
       || PK4REC.XOTCD == "HD"
       || PK4REC.XOTCD == "HE"
       || PK4REC.XOTCD == "HT"
       || PK4REC.XOTCD == "HU"
       || PK4REC.XOTCD == "HV"
       || PK4REC.XOTCD == "IH"
       || PK4REC.XOTCD == "IG"
       || PK4REC.XOTCD == "IF"
       || PK4REC.XOTCD == "HW"
       || PK4REC.XOTCD == "MR")
        PKWREC.PKW-ORD-GRP-SW = "EQ";
      else
        if (PK4REC.XOTCD == "DN"
         || PK4REC.XOTCD == "DW"
         || PK4REC.XOTCD == "DO"
         || PK4REC.XOTCD == "17"
         || PK4REC.XOTCD == "29")
          PKWREC.PKW-ORD-GRP-SW = "FC";
        else
          if (PK4REC.XOTCD == "DP"
           || PK4REC.XOTCD == "DV"
           || PK4REC.XOTCD == "DQ")
            PKWREC.PKW-ORD-GRP-SW = "AC";
          else
            if (PK4REC.XOTCD == "DL"
             || PK4REC.XOTCD == "11"
             || PK4REC.XOTCD == "30"
             || PK4REC.XOTCD == "31"
             || PK4REC.XOTCD == "34"
             || PK4REC.XOTCD == "44"
             || PK4REC.XOTCD == "48"
             || PK4REC.XOTCD == "60"
             || PK4REC.XOTCD == "63"
             || PK4REC.XOTCD == "66"
             || PK4REC.XOTCD == "AM"
             || PK4REC.XOTCD == "AZ"
             || PK4REC.XOTCD == "BS"
             || PK4REC.XOTCD == "BX"
             || PK4REC.XOTCD == "BZ"
             || PK4REC.XOTCD == "QX"
             || PK4REC.XOTCD == "RA")
              PKWREC.PKW-ORD-GRP-SW = "FS";
            else
              if (PK4REC.XOTCD == "DM")
                PKWREC.PKW-ORD-GRP-SW = "AS";
              else
                if (PK4REC.XOTCD == "FE"
                 || PK4REC.XOTCD == "FJ"
                 || PK4REC.XOTCD == "FU"
                 || PK4REC.XOTCD == "HK"
                 || PK4REC.XOTCD == "LM"
                 || PK4REC.XOTCD == "LL"
                 || PK4REC.XOTCD == "LK"
                 || PK4REC.XOTCD == "LJ"
                 || PK4REC.XOTCD == "LI"
                 || PK4REC.XOTCD == "LH"
                 || PK4REC.XOTCD == "LG"
                 || PK4REC.XOTCD == "LF"
                 || PK4REC.XOTCD == "II"
                 || PK4REC.XOTCD == "HX"
                 || PK4REC.XOTCD == "HF"
                 || PK4REC.XOTCD == "EC")
                  PKWREC.PKW-ORD-GRP-SW = "ES";
                else
                  if (PK4REC.XOTCD == "JF"
                   || PK4REC.XOTCD == "JG"
                   || PK4REC.XOTCD == "JH"
                   || PK4REC.XOTCD == "JI"
                   || PK4REC.XOTCD == "JJ"
                   || PK4REC.XOTCD == "JK"
                   || PK4REC.XOTCD == "KF"
                   || PK4REC.XOTCD == "KG"
                   || PK4REC.XOTCD == "KH"
                   || PK4REC.XOTCD == "KI"
                   || PK4REC.XOTCD == "KJ"
                   || PK4REC.XOTCD == "KK"
                   || PK4REC.XOTCD == "IC"
                   || PK4REC.XOTCD == "IB"
                   || PK4REC.XOTCD == "QM")
                    PKWREC.PKW-ORD-GRP-SW = "EC";
                  else
                    if (PK4REC.XOTCD == "85"
                     || PK4REC.XOTCD == "RC"
                     || PK4REC.XOTCD == "BB")
                      PKWREC.PKW-ORD-GRP-SW = "FB";
                    else
                      if (PK4REC.XOTCD == "IE"
                       || PK4REC.XOTCD == "ID"
                       || PK4REC.XOTCD == "QN")
                        PKWREC.PKW-ORD-GRP-SW = "EB";
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end XPPK006

// Application initialization
Function XPPT001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "PT") /* Came from within the system*/

    PTWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set PTWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPPT001

// IOMOD    DPINVC.VPVPMT01
Function XPPV-VPVPMT01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for Payment records            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;

  call "VPVPMT01" (PVYREC, SQLCA, VPVPMT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    if (PVYREC.PVYFNC == "S1"
     || PVYREC.PVYFNC == "S2"
     || PVYREC.PVYFNC == "S3"
     || PVYREC.PVYFNC == "S4"
     || PVYREC.PVYFNC == "C1"
     || PVYREC.PVYFNC == "C2"
     || PVYREC.PVYFNC == "C3"
     || PVYREC.PVYFNC == "C4"
     || PVYREC.PVYFNC == "S "
     || PVYREC.PVYFNC == "A "
     || PVYREC.PVYFNC == "D "
     || PVYREC.PVYFNC == "U ")
      /* next sentence*/
    else
      PVUREC.PVUERNBR = 199;
    end

    PVUREC.PVUERROR[PVUERVND] = " ";

  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      if (PVYREC.PVYFNC == "N1"
       || PVYREC.PVYFNC == "N2"
       || PVYREC.PVYFNC == "N3"
       || PVYREC.PVYFNC == "N4"
       || PVYREC.PVYFNC == "S "
      ) /* NEXT SENTENCE*/
      else
        PVUREC.PVUERNBR = 200;
        PVUREC.PVUERROR[PVUERVND] = "Y";
        PVUREC.PVUERROR[PVUERIVC] = "Y";
      end
    else
      PVUREC.PVUERROR[PVUERVND] = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV-VPVPMT01";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVPMT01";
          TA1REC.TA1TBLKE = VPVPMT01.PV-MSA-VEND-NBR;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV-VPVPMT01  ****/
end // end XPPV-VPVPMT01

// CHECK    PV Standard PF Keys
Function XPPV001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      CHECK PV PF Keys and Exit Requests                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
    else
      if (converseVar.eventKey is pf5)
        if (COMMAREA.CACURRAP == "PV0G")
           /* next sentence*/
        else
          XSPVS51();
        end
      else
        if (converseVar.eventKey is pf9)
          if (COMMAREA.CACURRAP == "PV0I")
             /* next sentence*/
          else
            XSPVS55();
          end
        else
          if (converseVar.eventKey is pf2
           || converseVar.eventKey is pf3
           || converseVar.eventKey is pf13
           || converseVar.eventKey is pf14)
            XSPVS60();
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV001  ****/
end // end XPPV001

// IO5400   DCORP.VCSPAD01
Function XPPV400()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            IO Module for Scratch Pad                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "IO3400" (PVYREC, SQLCA, XSRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
  else
    /* TCS CHANGE BEGIN 02/06/01*/
    /* MOVE 'Y' TO PVUREC.PVUSCRDL;    /* Set Deleted Flag to YES*/
    if (SQLCA.VAGen_SQLCODE == 100)
         /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
      PVUREC.PVUSCRDL = "Y"; /* Set Deleted Flag to YES*/
      /* TCS CHANGE END   02/06/01*/
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV400";
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VCSPAD01";
          TA1REC.TA1TBLKE = XSRREC.XSRSUBID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV400  ****/
end // end XPPV400

// IO5440   DPINVC.VFORCE01
Function XPPV440()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            IO Module for Invoice Force Errors          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "IO5440" (PVYREC, SQLCA, PVLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV440";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VFORCE01";
          TA1REC.TA1TBLKE = PVAREC.PVAIVCID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV440  ****/
end // end XPPV440

// IO5660   DPINVC.VPVHDR01
Function XPPV960()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            IO Module for Invoice Header                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "IO5660" (PVYREC, SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    XSPVS96(); /* Save keys in COMMAREA*/
    PVUREC.PVUERROR[PVUERIVC] = " ";
  else
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV960";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVHDR01";
          TA1REC.TA1TBLKE = PVAREC.PVAIVCID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV960  ****/
end // end XPPV960

// IO5670   DPINVC.VPVITM01
Function XPPV970()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **           IO Module for Invoice Line Item              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "IO5670" (PVYREC, SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    XSPVS97(); /* Save Keys in COMMAREA*/
    PVUREC.PVUERROR[PVUERIVC] = " ";
  else
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV970";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVITM01";
          TA1REC.TA1TBLKE = PVBREC.PVAIVCID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV970  ****/
end // end XPPV970

// IOMOD    DPINVC.VVENDR01
Function XPPV980()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for Vendor                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  if (PVOREC.PVOVENDR == " "
   && PVOREC.PVOVENDG == " ")
    PVOREC.PVOVNDNM = " ";
  else
    call "IO5680" (PVYREC, SQLCA, PVOREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    XSPVS98(); /* Save keys in COMMAREA*/
    PVUREC.PVUERROR[PVUERVND] = " ";
  else
    PVUREC.PVUERROR[PVUERVND] = "Y";
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 254;
      PVUREC.PVUERROR[PVUERIVC] = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV980";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VVENDR01";
          TA1REC.TA1TBLKE = PVOREC.PVOVENDR;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV980  ****/
end // end XPPV980

// IOMOD    DPINVC.VPVCTL01
Function XPPV990()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **          IO Module for Invoice Control Record          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "IO5690" (PVYREC, SQLCA, PVFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV990";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVCTL01";
          TA1REC.TA1TBLKE = "PV CONTROL";
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of XPPV990  ****/
end // end XPPV990

// Application initialization
Function XPSL-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* set segemented trans id*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA. Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "SL" /* Came from within STOCK LOCATE*/
   || COMMAREA.CAFRMSYS == "SW" /* Came from within STOCK LOCATE*/
   || COMMAREA.CAFRMSYS == "SV") /* Came from within STOCK LOCATE*/
    SLWREC.SLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set SLWREC empty; /* initialize work record area*/
  end

  if (SLWREC.XWHCD == "  ")
    SLWREC.XWHCD = COMMAREA.XWHCD; /* Set warehouse code if not there*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function and exit switch data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPSL-00000

// Application initialization
Function XPSL001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* set segemented trans id*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA. Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "SL" /* Came from within STOCK LOCATE*/
   || COMMAREA.CAFRMSYS == "SW" /* Came from within STOCK LOCATE*/
   || COMMAREA.CAFRMSYS == "SV") /* Came from within STOCK LOCATE*/
    SLWREC.SLWGROUP = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set SLWREC empty; /* initialize work record area*/
  end

  if (SLWREC.XWHCD == "  ")
    SLWREC.XWHCD = COMMAREA.XWHCD; /* Set warehouse code if not there*/
  end

  if (SLWREC.XGPCD == "  ")
    SLWREC.XGPCD = COMMAREA.XGPCD; /* Set GPC code if not there*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function and exit switch data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPSL001

// converse pop up window
Function XPSPSRC()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/


   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";


     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/

      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWCT1] != "9999") /* Or e-o-data*/

        if (SPRCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = SPRCTBL.PK-GSPRC-SRCE-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* sv arry*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Incr screen indx*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/

      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (SPRCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = SPRCTBL.PK-GSPRC-SRCE-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* sv arry*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Dcr screen indx*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1; /* to 0, et it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;


  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/

  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end


    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWCT1] == "9999") /* & end of tbl*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/

        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPSPSRC

// Application initialization
Function XPSR-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    SRWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

  else

    set SRWREC empty; /* Initialize work record*/

  end

  if (SRWREC.SRWXWHCD == " ")

    SRWREC.SRWXWHCD = COMMAREA.XWHCD;

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPSR-00000

// Multiple BOLs pop-up window
Function XPSR-100()
   /* ************************************************************/
   /* *  Multiple BOLs processing is done accordingly:          **/
   /* *    - setup the key                                      **/
   /* *    - open cursor DSHIP.VSRORD01 and DSHIP.VSRHDR01      **/
   /* *    - fetch each row and save BOL sub nbr and pick sched **/
   /* *      nbr into the array (99 occurrences)                **/
   /* *    - close cursor                                       **/
   /* *    - format and display XPSRM001 map                    **/
   /* *    - check if selection has been made before exiting    **/
   /* ************************************************************/

  set SR2REC empty; /* Initialize record area*/

  SR2REC.XWHCD = SREREC.XWHCD;
  SR2REC.PK1BLLAD = SREREC.PK1BLLAD;

  XPSR-110(); /* Open dship.vsrord01 cursor*/

  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Bol sub nbr index*/

  while (SQLCA.VAGen_SQLCODE == 0)

    XPSR-120(); /* Fetch next dship.vsrord01 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX] = SR2REC.SR2BLLSU;
                                                             /* bol sub nbr*/
      SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX] = SR2REC.PK1PKSCH;
                                                            /* pick sch nbr*/
      SREREC.SRE-TOTAL-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;
                                                       /* Total bol sub nbr*/

    end

    SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;

    if (SREREC.SRE-SUB-NBR-SCHED-IDX > 99)

      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "XPSR-100";
      TA1REC.TA1LOC = "BOL SUB TBL SIZE EXCEEDED";
      TA1REC.TA1MAP = "SR0QM002";
      TA1REC.TA1DBASE = "DSHIP   ";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1REC.TA1TBLKE = SR2REC.SR2KEYS;

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

    end

  end

  XPSR-130(); /* Close cursor*/

  set XMSRM100 initial; /* Clear pop-up window*/
  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Initialize bol sub nbr index*/

  while (SREREC.SRE-POPUP-WINDOW-DONE-FL == " ") /* Pop-up window done*/

    XPSR-140(); /* Format display pop-up window*/

  end


end // end XPSR-100

// OPEN cursor DSHIP.VSRORD01
Function XPSR-110()
   /* ------------------------------------------------------------*/
   /* Open cursor for DSHIP.VSRORD01 and DSHIP.VSRORD01*/
   /* ------------------------------------------------------------*/

  try
    call "SR1120" ("S1", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-110"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another appl*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-110"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN BOL IN SHIPREC";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/


end // end XPSR-110

// Fetch next DSHIP.VSRORD01
Function XPSR-120()
   /* ****************************************************/
   /* Fetch a row from DSHIP.VSRORD01 and DSHIP.VSRHDR01*/
   /* ****************************************************/

  try
    call "SR1120" ("N1", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-120"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-120"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT BOL IN SHIPREC";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/


end // end XPSR-120

// Close cursor DSHIP.VSRORD01
Function XPSR-130()
   /* ****************************************************/
   /* Close cursor for DSHIP.VSRORD01 and DSHIP.VSRHDR01*/
   /* ****************************************************/

  try
    call "SR1120" ("C1", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-130"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-130"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SCAN BOL IN SHIP REC";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/


end // end XPSR-130

// Format and display XPSRM001
Function XPSR-140()
   /* ************************************************************/
   /* Format and display XPSRM001 map                        **/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)

    converseLib.validationFailed(178); /* Continue or cancel*/
    SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
    SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y"; /* Pop-up window done*/
    return;

  end

  XPSR-150(); /* Check for select bol sub nbr*/

  if (converseVar.validationMsgNum == 00) /* If no error*/

    if (converseVar.eventKey is pf8) /* Forward browsing*/

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
        if (SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR < SREREC.SRE-TOTAL-SUB-NBR)
                                   /* Continue fward brws*/
          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR           + 1;
        else
          converseLib.validationFailed(98); /* Last page*/
          SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
        end
      else
        converseLib.validationFailed(177); /* Select is done, no browsing*/
        SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
      end

    else

      if (converseVar.eventKey is pf7) /* Backward browsing*/

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
          if (SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR > 10)
                                   /* Continue backward browsing*/
            SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR - 10;
          else
            converseLib.validationFailed(99); /* No scroll back past 1st page*/
            SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
          end
        else
          converseLib.validationFailed(177); /* Select is done, no browsing*/
          SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
        end

      else
        if (converseVar.eventKey is enter)

          if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
            if (SREREC.SRE-SUB-NBR-SCHED-IDX == 1 /* First time around*/
             && XMSRM100.PK1BLLAD == 0)          
               /* Next sentence*/
            else
              converseLib.validationFailed(143); /* Need to select*/
              SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/
            end
          else
            SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y";
                                   /* Pop-up window done*/
            return;
          end

        else

          converseLib.validationFailed(12); /* Invalid attention key*/
          SRWREC.XXXERRID = "XPSR-140"; /* Module identification*/

        end

      end

    end

    if (converseVar.validationMsgNum == 00) /* If no error*/

      set XMSRM100 initial; /* Clear pop-up window*/
      XMSRM100.PK1BLLAD = SREREC.PK1BLLAD;

      SREREC.SRE-POPUP-WINDOW-IDX = 1;

      while (SREREC.SRE-SUB-NBR-SCHED-IDX <= SREREC.SRE-TOTAL-SUB-NBR
       && SREREC.SRE-POPUP-WINDOW-IDX <= 10)

        XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] = SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX];
        XMSRM100.SR2BLLSU[SRE-POPUP-WINDOW-IDX] = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];
        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] normal;

        if (SREREC.SRE-POPUP-WINDOW-IDX == 1)
          SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;
        end

        SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;
        SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

      end

    end

  end

  if (SREREC.SRE-FR-TO-BOL-IND == "FR") /* FROM BOL*/
    XMSRM100.XPSRM10C = "**FR BOL: ";
  end

  if (SREREC.SRE-FR-TO-BOL-IND == "TO") /* to BOL*/
    XMSRM100.XPSRM10C = "**TO BOL: ";
  end

  XMSRM100.XXXERRID = SRWREC.XXXERRID;


  converse XMSRM100 ;
end // end XPSR-140

// Check for selected BOL sub nbr
Function XPSR-150()
   /* ************************************************************/
   /* Check for selected BOL sub nbr                         **/
   /* ************************************************************/

  SREREC.SRE-POPUP-WINDOW-IDX = 1;

  while (SREREC.SRE-POPUP-WINDOW-IDX <= 10
   && XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] > 0)

    if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] > " ")

      if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] == "S")

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")
          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR +           SREREC.SRE-POPUP-WINDOW-IDX - 1;
          if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX] == 
          SREREC.SRE-SELECTED-SUB-NBR)
            if (converseVar.eventKey is enter)
               /* Next sentence*/
            else
              converseLib.validationFailed(177); /* Select is done, no browsing*/
              set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
              SRWREC.XXXERRID = "XPSR-150"; /* Module identification*/
            end
          else
            converseLib.validationFailed(96); /* Cannot select more than one line*/
            set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
            SRWREC.XXXERRID = "XPSR-150"; /* Module identification*/
          end
        else
          SREREC.SRE-SUB-NBR-SELECTED-FL = "Y";
          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR +           SREREC.SRE-POPUP-WINDOW-IDX - 1;
          SREREC.SRE-SELECTED-SUB-NBR = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];
        end

      else

        converseLib.validationFailed(95); /* Select value must be 's'*/
        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
        SRWREC.XXXERRID = "XPSR-150"; /* Module identification*/

      end

    else

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")
        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR         +         SREREC.SRE-POPUP-WINDOW-IDX - 1;
        if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX] == 
        SREREC.SRE-SELECTED-SUB-NBR)
          SREREC.SRE-SUB-NBR-SELECTED-FL = " ";
          SREREC.SRE-SELECTED-SUB-NBR = 0;
        end
      end

    end

    SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

  end


end // end XPSR-150

// Insert into DPROD.VSYSPF01
Function XPSY001()
   /* ************************************************************/
   /* *    XPSY001 - Process to insert rows into the DB2 table  **/
   /* *              DPROD.VSYSPF01                             **/
   /* *                                                         **/
   /* *    Notes on use of this process:                        **/
   /* *          It is up to the calling program to check for   **/
   /* *          and report unexpected SQLCODE values.          **/
   /* *          This process expects the input data to be in   **/
   /* *          records SY1REC, SY2REC, & SYWREC.              **/
   /* ************************************************************/

   /* First check to be sure row does not allready exist*/
  SYVREC.XGPCD = SY1REC.XGPCD;
  SYVREC.SY1STNBR = SY1REC.SY1STNBR;
  SYVREC.SY2CLRID = SY2REC.SY2CLRID;
  SYVREC.XDMCD = SY2REC.XDMCD;
  SYVREC.XSECD = SY2REC.XSECD;
  SYVREC.XSNYR = SY2REC.XSNYR;
  call "IO5720" ("S ", SQLCA, SYVREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 100) /* if it's not this value*/
    return; /* get out of process*/
  end

   /* Now move in remaining data*/
  SYVREC.SY1STYNM = SY1REC.SY1STYNM;
  SYVREC.SY1SSTNM = SY1REC.SY1SSTNM;
  SYVREC.SY2CLRDS = SY2REC.SY2CLRDS;
  SYVREC.SY2CLRAB = SY2REC.SY2CLRAB;
  SYVREC.XSPCD = SY1REC.XSPCD;
  SYVREC.XSUCD = SY1REC.XSUCD;
  SYVREC.XFMCD = SY1REC.XFMCD;
  SYVREC.XGCCD = SY1REC.XGCCD;
  SYVREC.XGACD = SY1REC.XGACD;
  SYVREC.XFCCD[1] = SY1REC.XFCCD1;
  SYVREC.XFCCD[2] = SY1REC.XFCCD2;
  SYVREC.XFCCD[3] = SY1REC.XFCCD3;
  SYVREC.XFCCD[4] = SY1REC.XFCCD4;
  SYVREC.XFCCD[5] = SY1REC.XFCCD5;
  SYVREC.XFCCD[6] = SY1REC.XFCCD6;
  SYVREC.XPRCD = SY2REC.XPRCD;
  SYVREC.XPLCD = SY2REC.XPLCD;
  SYVREC.XPCCD = SY2REC.XPCCD;
  SYVREC.XDVCD = SY2REC.XDVCD;
  SYVREC.XOGCD = SY2REC.XOGCD;
  SYVREC.SY2POFBD = SY2REC.SY2POFBD;
  SYVREC.SY2POFXD = SY2REC.SY2POFXD;
  SYVREC.SY2FOFBD = SY2REC.SY2FOFBD;
  SYVREC.SY2FOFXD = SY2REC.SY2FOFXD;
  SYVREC.SY2NOFBD = SY2REC.SY2NOFBD;
  SYVREC.SY2NOFXD = SY2REC.SY2NOFXD;
  SYVREC.ZZZSDT = SYWREC.ZZZSDT;
  SYVREC.ZZZCHGDT = SYWREC.ZZZCHGDT;
  SYVREC.ZZZCHGTM = SYWREC.ZZZCHGTM;
  SYVREC.ZZZCHGCT = 0;
  call "IO5720" ("A ", SQLCA, SYVREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* Successful Update*/
    SYWREC.SYWINDXA = SYWREC.SYWINDXA + 1; /* This shows we inserted*/
  end

end // end XPSY001

// Check price/cost for XLC to 10
Function XPSY002()

   /* ***************************************************/
   /* * This routine will check that all proper price  **/
   /* * and cost records exist before the life cycle   **/
   /* * can be changed to active (10).                 **/
   /* MHALST 3/29/2005 Change logic to check at style level if*/
   /*  apparel, else check at color level. Also remove futures*/
   /*  price type check for footwear.*/
   /* ***************************************************/

   /* Verify 1st quality wholesale*/

  SY5REC.XGPCD = SY2REC.XGPCD;
  SY5REC.SY1STNBR = SY2REC.SY1STNBR;
  if (SY2REC.XGPCD == "03")
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
  else
    SY5REC.SY2CLRID = SY2REC.SY2CLRID;
    SY5REC.XDMCD = SY2REC.XDMCD;
  end
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = "01";
  SY5REC.XQACD = "01";
  SY5REC.XCT-CTRY-CD = "USA";
  SY5REC.ZFC-CRCY-CD = "USD";
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(25); /* no 1st quality wholesale price record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      converseLib.validationFailed(38); /* price table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "IO0380   ";
      TA1REC.TA1LOCAT[4] = "XPSY002  ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VPRICE01";
      TA1TBLKE = SY5REC.SY5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* Verify 1st quality futures (GPC 02 only)*/

  /*IF SY2REC.XGPCD EQ '02';*/
  /*  MOVE SY2REC.XGPCD TO SY5REC.XGPCD;*/
  /*  MOVE SY2REC.SY1STNBR TO SY5REC.SY1STNBR;*/
  /*  IF SY1REC.SY1PRCZS EQ 'S';*/
  /*    MOVE '***' TO SY5REC.SY2CLRID;*/
  /*    MOVE '**' TO SY5REC.XDMCD;*/
  /*  ELSE;*/
  /*    MOVE SY2REC.SY2CLRID TO SY5REC.SY2CLRID;*/
  /*    MOVE SY2REC.XDMCD TO SY5REC.XDMCD;*/
  /*  END;*/
  /*  MOVE 0 TO SY5REC.SY5SZID;*/
  /*  MOVE '08' TO SY5REC.XPYCD;*/
  /*  MOVE '01' TO SY5REC.XQACD;*/
  /*  MOVE 'USA' TO SY5REC.XCT-CTRY-CD;*/
  /*  MOVE 'USD' TO SY5REC.ZFC-CRCY-CD;*/
  /*  CALL IO0380 'S ',SQLCA,SY5REC (NOMAPS,NONCSP;*/
  /*  IF SQLCA.SQLCODE EQ +100;*/
  /*    MOVE 202 TO EZEMNO;          /* no 1st quality futures price record*/
  /*    EZERTN();*/
  /*  ELSE;*/
  /*    IF SQLCA.SQLCODE NE +0;*/
  /*      MOVE 38 TO EZEMNO;         /* price table error*/
  /*      MOVE 'DB2 ' TO TA1REC.TA1TYPE;*/
  /*      MOVE 'RETN' TO TA1REC.TA1FUNC;*/
  /*      MOVE 'IO0380   ' TO TA1REC.TA1LOCAT[3];*/
  /*      MOVE 'XPSY002  ' TO TA1REC.TA1LOCAT[4];*/
  /*      MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
  /*      MOVE 'VPRICE01' TO TA1REC.TA1TBLVU;*/
  /*      MOVE SY5REC.SY5KEY TO TA1TBLKE;*/
  /*      MOVE SQLCA TO ERRSQLCA;*/
  /*      CALL RESET;*/
  /*      CALL TA0020 TA1REC,ERRSQLCA (NONCSP;*/
  /*      EZERTN();*/
  /*    END;*/
  /*  END;*/
  /*END;*/

   /* Verify 2nd quality wholesale*/

  SY5REC.XGPCD = SY2REC.XGPCD;
  SY5REC.SY1STNBR = SY2REC.SY1STNBR;
  if (SY2REC.XGPCD == "03")
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
  else
    SY5REC.SY2CLRID = SY2REC.SY2CLRID;
    SY5REC.XDMCD = SY2REC.XDMCD;
  end
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = "01";
  SY5REC.XQACD = "02";
  SY5REC.XCT-CTRY-CD = "USA";
  SY5REC.ZFC-CRCY-CD = "USD";
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(26); /* no 2nd quality wholesale price record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      converseLib.validationFailed(38); /* price table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "IO0380   ";
      TA1REC.TA1LOCAT[4] = "XPSY002  ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VPRICE01";
      TA1TBLKE = SY5REC.SY5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* Verify 1st quality suggested retail*/

  SY5REC.XGPCD = SY2REC.XGPCD;
  SY5REC.SY1STNBR = SY2REC.SY1STNBR;
  if (SY2REC.XGPCD == "03")
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
  else
    SY5REC.SY2CLRID = SY2REC.SY2CLRID;
    SY5REC.XDMCD = SY2REC.XDMCD;
  end
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = "02";
  SY5REC.XQACD = "01";
  SY5REC.XCT-CTRY-CD = "USA";
  SY5REC.ZFC-CRCY-CD = "USD";
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(27); /* no 1st quality suggested retail price record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      converseLib.validationFailed(38); /* price table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "IO0380   ";
      TA1REC.TA1LOCAT[4] = "XPSY002  ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VPRICE01";
      TA1TBLKE = SY5REC.SY5KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* Verify 1st quality standard cost*/

  SY6REC.XGPCD = SY2REC.XGPCD;
  SY6REC.SY1STNBR = SY2REC.SY1STNBR;
  SY6REC.SY2CLRID = SY2REC.SY2CLRID;
  SY6REC.XDMCD = SY2REC.XDMCD;
  SY6REC.XCOCD = "01";
  SY6REC.XQACD = "01";
  SY6REC.XCT-CTRY-CD = "USA";
  SY6REC.ZFC-CRCY-CD = "USD";
  call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(28); /* no 1st quality suggested retail price record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      converseLib.validationFailed(72); /* cost table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "IO0360   ";
      TA1REC.TA1LOCAT[4] = "XPSY002  ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VDCOST01";
      TA1TBLKE = SY6REC.SY6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

   /* Verify 2nd quality standard cost*/

  SY6REC.XGPCD = SY2REC.XGPCD;
  SY6REC.SY1STNBR = SY2REC.SY1STNBR;
  SY6REC.SY2CLRID = SY2REC.SY2CLRID;
  SY6REC.XDMCD = SY2REC.XDMCD;
  SY6REC.XCOCD = "01";
  SY6REC.XQACD = "02";
  SY6REC.XCT-CTRY-CD = "USA";
  SY6REC.ZFC-CRCY-CD = "USD";
  call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(29); /* no 2nd quality cost record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      converseLib.validationFailed(72); /* cost table error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "IO0360   ";
      TA1REC.TA1LOCAT[4] = "XPSY002  ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VDCOST01";
      TA1TBLKE = SY6REC.SY6KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  end

end // end XPSY002

// Validate SYREG regional Row
Function XPSY003-VAL-SYREG()

   /* Validate SYREG Regional row*/

  VSYREG02.XGP-GPC-CD = SY2REC.XGPCD;
  VSYREG02.SY-STY-NBR = SY2REC.SY1STNBR;
  VSYREG02.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VSYREG02.XDM-DIM-CD = SY2REC.XDMCD;

  call "VSYREG02" ("S ", SQLCA, VSYREG02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
              /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "S              ";
    TA1REC.TA1LOCAT[2] = "XPSY003-VAL-SYREG";
    TA1REC.TA1LOCAT[3] = "VSYREG02       ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYREG02";
    TA1REC.TA1TBLKE = VSYREG02.VSYREG02-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error*/
    return;
  end


end // end XPSY003-VAL-SYREG

// Update VSYREG01 Row
Function XPSY004-UPD-SYREG()

   /* Update SYREG01 logic*/

  call "VSYREG02" ("U ", SQLCA, VSYREG02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
  ) /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "U              ";
    TA1REC.TA1LOCAT[2] = "XPSY004-UPD-SYREG";
    TA1REC.TA1LOCAT[3] = "VSYREG02       ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYREG02";
    TA1REC.TA1TBLKE = VSYREG02.VSYREG02-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* Region table error*/
    return;
  end

end // end XPSY004-UPD-SYREG

// region table audit processing
Function XPSY005-AUD-SYREG()


   /* ****************************************************/
   /* *  this statement group formats the audit record  **/
   /* *  and performs the add call to db2,              **/
   /* *  for the sy region table update.                **/
   /* ****************************************************/

  SYAREC.XXXTBLNM = "VSYREG02";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOCAT[1] = "XPSY005-AUD-SYREG";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSYREG02 ";
    TA1REC.TA1LOCAT[4] = "         ";
    TA1REC.TA1DBASE = "DPROD ";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    return;
  end

  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XGPCD = VSYREG02.XGP-GPC-CD;
  SYAREC.SY1STNBR = VSYREG02.SY-STY-NBR;
  SYAREC.SY2CLRID = VSYREG02.SY-COLR-CD-ID;
  SYAREC.XDMCD = VSYREG02.XDM-DIM-CD;
  SYAREC.SY5SZID = 0;
  SYAREC.SYATYPCD = " ";
  SYAREC.XQACD = " ";
  SYAREC.SYAAFT = VSYREG02.VSYREG02-GROUP;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -803)
    converseLib.validationFailed(37); /* unable to process update - try again*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[1] = "A        ";
      TA1REC.TA1LOCAT[2] = "XPSY005-AUD-SYREG";
      TA1REC.TA1LOCAT[3] = "IO0530   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSYAUD01";
      TA1TBLKE = SYAREC.SYAKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(44); /* audit table error - call sys devl*/
      return;
    end
  end

end // end XPSY005-AUD-SYREG

// region table tag processing
Function XPSY006-TAG-SYREG()

   /* ****************************************************/
   /* *  this statement group formats the tag record    **/
   /* *  and performs the add call to the db2 tag file  **/
   /* *  for the sy region table.                       **/
   /* ****************************************************/

  SY9REC.XGPCD = VSYREG02.XGP-GPC-CD;
  SY9REC.SY1STNBR = VSYREG02.SY-STY-NBR;
  SY9REC.SY2CLRID = VSYREG02.SY-COLR-CD-ID;
  SY9REC.XDMCD = VSYREG02.XDM-DIM-CD;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == -803)
    converseLib.validationFailed(37); /* unable to process update - try again*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[1] = "A        ";
      TA1REC.TA1LOCAT[2] = "XPSY006-TAG-SYREG";
      TA1REC.TA1LOCAT[3] = "IO0520   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSYTAG01";
      TA1TBLKE = SY9REC.SY9KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(45); /* tag table error - call sys devl*/
      return;
    end
  end


end // end XPSY006-TAG-SYREG

// Retrieve Regions for User Id
Function XPSY008()

   /* ***************************************************/
   /* * This routine will retrieve all regions valid   **/
   /* * for the User Id. It will load this info into   **/
   /* * a table in SYWREC.                             **/
   /* ***************************************************/

  SYWREC.SYW-ALL-REGIONS-FL = "N";
  SYWREC.SYW-REG-TBL-SIZE = 0;
  SYWREC.SYWREGX = 1;
  set MNVREC empty;
  MNVREC.MNV-SEL-OPT = "S ";

   /* First try for global user record*/
  MNVREC.MNV-GOAL-SCTY-TRAN-CD = "SYR0";
  XSSY008-CALL-MN0V();
  if (MNVREC.MNV-RTN-CODE == 0000) /* This user has global access*/
    SYWREC.SYW-ALL-REGIONS-FL = "Y";
    while (XDRTBL.XDR-PROD-REG-CD[SYWREGX] != "99")
      SYWREC.SYW-REG-TBL-SIZE = SYWREC.SYW-REG-TBL-SIZE + 1;
      SYWREC.XDR-PROD-REG-CD[SYWREGX] = XDRTBL.XDR-PROD-REG-CD[SYWREGX];
      SYWREC.SYW-REG-FLAG1[SYWREGX] = MNVREC.MN3ADDFL;
      SYWREC.SYW-REG-FLAG2[SYWREGX] = MNVREC.MN3ALVL[1];
      SYWREC.SYW-REG-FLAG3[SYWREGX] = MNVREC.MN3CHGFL;
      SYWREC.SYW-REG-FLAG4[SYWREGX] = MNVREC.MN3CLVL[1];
      SYWREC.SYW-REG-FLAG5[SYWREGX] = MNVREC.MN3CLVL[2];
      SYWREC.SYWREGX = SYWREC.SYWREGX + 1;
    end
    SYWREGX = 1;
    return;
  else
    if (converseVar.validationMsgNum == 215) /* Had trouble with MN0V*/
      return; /* So get out*/
    end
  end

   /* User does not have global access, so begin reading*/
   /* through the regions.*/
  SYWREC.SYWINDXA = 1;
  while (SYRGTBL.XDR-PROD-REG-CD[SYWINDXA] != "99")
    MNVREC.MNV-GOAL-SCTY-TRAN-CD = SYRGTBL.MNV-GOAL-SCTY-TRAN-CD[SYWINDXA];
    XSSY008-CALL-MN0V();
    if (MNVREC.MNV-RTN-CODE == 0000) /* Found region data, move it*/
      SYWREC.SYW-REG-TBL-SIZE = SYWREC.SYW-REG-TBL-SIZE + 1;
      SYWREC.XDR-PROD-REG-CD[SYWREGX] = SYRGTBL.XDR-PROD-REG-CD[SYWINDXA];
      SYWREC.SYW-REG-FLAG1[SYWREGX] = MNVREC.MN3ADDFL;
      SYWREC.SYW-REG-FLAG2[SYWREGX] = MNVREC.MN3ALVL[1];
      SYWREC.SYW-REG-FLAG3[SYWREGX] = MNVREC.MN3CHGFL;
      SYWREC.SYW-REG-FLAG4[SYWREGX] = MNVREC.MN3CLVL[1];
      SYWREC.SYW-REG-FLAG5[SYWREGX] = MNVREC.MN3CLVL[2];
      SYWREC.SYWREGX = SYWREC.SYWREGX + 1;
    end
    SYWINDXA = SYWINDXA + 1;
  end

  SYWREGX = 1;

end // end XPSY008

// Retrieve xct/zfc for Region
Function XPSY009()

   /* ***************************************************/
   /* * This routine will retrieve all country and     **/
   /* * currencies for a given region. This is done by **/
   /* * a call to the SY1550 program.                  **/
   /* ***************************************************/

  set WSY1550 empty;
  WSY1550-OPTION-CODE = "R";
  WSY1550.XDR-PROD-REG-CD = SYWREC.XDR-PROD-REG-CD[SYWREGX];

  try
    call "SY1550" (SQLCA, WSY1550) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (WSY1550-RETURN-CODE == 0
     || WSY1550-RETURN-CODE == 1)
      return;
    else
      converseLib.validationFailed(217); /* Unexpected error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[3] = "SY1550   ";
      TA1REC.TA1LOCAT[4] = WSY1550-RETURN-CODE;
      TA1REC.TA1DBASE = "DGLOBL";
      TA1REC.TA1TBLVU = "VARIOUS";
      TA1TBLKE = WSY1550.XDR-PROD-REG-CD;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      return;
    end
  else
    converseLib.validationFailed(217); /* Unexpected error*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSSY009 ";
    TA1REC.TA1LOCAT[1] = "SY1550  ";
    TAEREC.TAEDESC1 = "UNEXPECTED RETURN FROM SY1550 CALL";
    TAEREC.TAEDESC2 = sysVar.errorCode;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end XPSY009

// Calculate Ending Offer Dates
Function XPSY010()

   /* ***************************************************/
   /* * This routine will calculate the prop and       **/
   /* * futures ending offer dates for Apparel. The    **/
   /* * calculation can vary by region if required.    **/
   /* * This process group is currently used in SY0B,  **/
   /* * SY0D, SY02, SY04, SY08.                        **/
   /* ***************************************************/

  if (SYWREC.SYW-FUTR-OFFER-XDR == "02") /* If Europe*/
    SYWREC.SYW-FUTR-OFFER-ADJ = 02; /* Adjust 2 month*/
  else
    SYWREC.SYW-FUTR-OFFER-ADJ = 01; /* Adjust 1 month*/
  end

  if (SYWREC.SYW-FUTR-OFFER-MONTH <= SYWREC.SYW-FUTR-OFFER-ADJ)
    SYWREC.SYW-FUTR-OFFER-YEAR = SYWREC.SYW-FUTR-OFFER-YEAR - 1;
    SYWREC.SYW-FUTR-OFFER-MONTH = SYWREC.SYW-FUTR-OFFER-MONTH + 12;
  end

  SYWREC.SYW-FUTR-OFFER-MONTH = SYWREC.SYW-FUTR-OFFER-MONTH - SYWREC.SYW-FUTR-OFFER-ADJ;
  SYWREC.SYW-FUTR-OFFER-DAY = 25; /* Set day to 25*/

end // end XPSY010

// Application initialization
Function XPTA-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set TAWREC empty; /* Initialize work record*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    TAWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

  end

  TAWREC.XXX-SCRTY-USER-ID = COMMAREA.CAUSERID;

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPTA-00000

// Submit JCL for background job
Function XPTA0P()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine obtains user and report routing information*/
   /* and submits JCL to execute in the background environment.*/

   /* It will, optionally, insert a step at the end of the JCL*/
   /* that is submitted to return a completion message to the*/
   /* online user at end of job.*/

   /* It displays a map to gather/verify the user information.*/
   /* The information is obtained from available sources and*/
   /* displayed for the user to change/verify.  The information*/
   /* is returned to the calling application.*/

   /* Depending on the value of the submit switch supplied by the*/
   /* calling application, a batch job may be submitted for*/
   /* execution.  This subroutine will tailor the JCL, adding*/
   /* user identification and name, print destination and number*/
   /* of copies.  The job is submitted to the internal reader.*/
   /* The JCL format must conform to TARREC specifications.*/

   /* Map TA0PM001 must be copied to the calling application's*/
   /* map group from map group TA0PM in PRODMSL.*/

   /* See $SUBMIT in DVMSL and/or DV0D in PRODMSL for examples of*/
   /* the coding required to use this subroutine.*/

   /* Refer to TA6REC prologue for more subroutine description.*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   TA6REC.TA6SUBSW: N - Display map, but, do not     ****/
   /* ***                        submit any JCL.              ****/
   /* ***                    Y - Display map, then, tailor    ****/
   /* ***                        and submit JCL.              ****/
   /* ***                    I - Obtain information only.     ****/
   /* ***                    S - Tailor and submit JCL only.  ****/
   /* ***                                                     ****/
   /* ***   TA6REC.TA6MSGSW: N - Do not send online message   ****/
   /* ***                        to user at end of job.       ****/
   /* ***                    Y - Send online message to user  ****/
   /* ***                        at end of job.               ****/
   /* ***                    This parameter is required only  ****/
   /* ***                    if TA6SUBSW is "Y" or "S".       ****/
   /* ***                                                     ****/
   /* ***   TA6REC.TA6ROW  : Up to 400 JCL statements in job  ****/
   /* ***                    format for the subroutine to     ****/
   /* ***                    tailor and submit for execution. ****/
   /* ***                    TA6INDEX may be used to address  ****/
   /* ***                    this array for formatting.       ****/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* and the subroutine return code in TA6RTNCD.*/

   /* If a normal return, a formatted message is returned in*/
   /* COMMAREA.CAMSG for display to the user.*/

   /* The gathered information is, also, returned to the calling*/
   /* application, if a normal return.*/

   /* *** Both return codes must indicate normal return.      ****/
   /* ***                                                     ****/
   /* ***   EZERT8                                            ****/
   /* ***   ------                                            ****/
   /* ***   '00000000' = Normal return                        ****/
   /* ***   OTHER      = Unexpected error has occurred        ****/
   /* ***                                                     ****/
   /* ***   TA6REC.TA6RTNCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '0'  = Normal return                              ****/
   /* ***   '1'  = User cancelled request                     ****/
   /* ***   OTHER = Unexpected error has occurred             ****/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting using TA0020.  The calling application must check*/
   /* the return codes and take the appropriate action relating*/
   /* to its terminal output.  The calling process does not need*/
   /* to do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Call the Background Job Request Subroutine application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Subroutine return code*/

  while (TA6REC.TA6RTNCD < "0") /* Until end of subroutine*/

    try
      call "TA0P" (COMMAREA, TA6REC, TA0PM001) {isNoRefresh = yes};
    end

    /* ------------------------------------------------------------*/
     /* If successful, determine if the subroutine is completed.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (TA6REC.TA6RTNCD > "1") /* Error Diagnosis Reporting called*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

    else

      /* ------------------------------------------------------------*/
       /* Post the error information to the Error Diagnosis Facility.*/
      /* ------------------------------------------------------------*/

      TA6REC.TA6RTNCD = "8"; /* Indicate CALL not successful*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
      TAEREC.TAEDESC2 = TA6REC.TA6GROUP; /* Error information*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "SUBMIT JCL FOR BACKGROUND JOB";
      TA1REC.TA1PGMNM = "XPTA0P  "; /* Process name*/
      TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    /* ------------------------------------------------------------*/
     /* If subroutine is completed, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD >= "0") /* Subroutine completed*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* Reset any highlighted fields to normal intensity.*/
    /* ------------------------------------------------------------*/

    set TA0PM001.XURDEST initialAttributes; /* Printer*/
    set TA0PM001.XURUSRNM cursor, initialAttributes; /* Report recipient*/
    set TA0PM001.XURBLDID initialAttributes; /* Location*/
    set TA0PM001.XURCOPY initialAttributes; /* Number of copies*/

    TA6REC.TA6INDEX = 1; /* Initialize index*/

    while (TA6REC.TA6INDEX <= 10) /* Until end of lines*/

      if (TA0PM001.TA0PMCD[TA6INDEX] > " ") /* Line is formatted*/

        set TA0PM001.TA0PMSEL[TA6INDEX] normal; /* Selection field*/
      else
        set TA0PM001.TA0PMSEL[TA6INDEX] initialAttributes; /* Selection field*/

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* Protect information fields if report distribution not used.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6SUBSW == "Y" /* Submit switch Y*/
     || TA6REC.TA6SUBSW == "S") /* Submit switch S*/

      if ("R" in TA6REC.TARTYPE) /* Report distribution*/

         /* NEXT SENTENCE*/

      else

        set TA0PM001.XURUSRNM skip; /* Report recipient*/
        set TA0PM001.XURBLDID skip; /* Location*/
        set TA0PM001.TA0PMSEL[1] cursor; /* Selection field*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Check field error flags and highlight any field in error.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6INDEX = 10; /* Initialize index*/

    while (TA6REC.TA6INDEX > 0) /* Until end of lines*/

      if (TA6REC.TA6ERRFL[TA6INDEX] == "Y") /* Field error flag*/
        set TA0PM001.TA0PMSEL[TA6INDEX] cursor, bold; /* Selection flag*/
      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Decrement index*/

    end

    if (TA6REC.TA6ERRFL[11] == "Y") /* Field error flag*/
      set TA0PM001.XURCOPY cursor, bold; /* Number of copies*/
    end

    if (TA6REC.TA6ERRFL[12] == "Y") /* Field error flag*/
      set TA0PM001.XURBLDID cursor, bold; /* Location*/
    end

    if (TA6REC.TA6ERRFL[13] == "Y") /* Field error flag*/
      set TA0PM001.XURUSRNM cursor, bold; /* Report recipient*/
    end

    if (TA6REC.TA6ERRFL[14] == "Y") /* Field error flag*/
      set TA0PM001.XURDEST cursor, bold; /* Printer*/
    end

    /* ------------------------------------------------------------*/
     /* If any error was found, indicate sound the audible alarm.*/
    /* ------------------------------------------------------------*/

    if (VAGen_EZEMSG > " ") /* Error was found*/
      set TA0PM001 alarm; /* Sound audible alarm*/
    end

    /* ------------------------------------------------------------*/
     /* Converse the formatted Print Request screen.*/
    /* ------------------------------------------------------------*/

    converse TA0PM001 ;

    /* ------------------------------------------------------------*/
     /* Determine whether a valid attention identifier was pressed.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7) /* BACK was requested*/

      TA6REC.TA6RTNCD = "B"; /* Indicate BACK requested*/

    else

      if (converseVar.eventKey is pf8) /* FRWD was requested*/

        TA6REC.TA6RTNCD = "F"; /* Indicate FRWD requested*/

      else

        if (converseVar.eventKey is pa2) /* CANCEL was requested*/

          TA6REC.TA6RTNCD = "X"; /* Indicate user cancelled*/

        else

          if (converseVar.eventKey not enter) /* ENTER was not pressed*/

            TA6REC.TA6RTNCD = "?"; /* Invalid attention key*/

            if (converseVar.eventKey is pakey) /* PA key was pressed*/
              converseLib.clearScreen();
               /* Clear screen before display*/
            end

          end

        end

      end

    end

  end


end // end XPTA0P

// APPLICATION INITIALIZATION
Function XPTI-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  set TIWREC empty; /* Initialize work record*/

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
end // end XPTI-00000

// Application initialization
Function XPTP001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The PICKING*/
   /* work record is formatted upon initial application entry.*/
   /* Warehouse code is validated and the warehouse abbreviation*/
   /* is obtained.  SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/


  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* The Fast Pick menu can be accessed from the Picking Menu*/
   /* (PK0A).  All other Fast Pick applications can only be*/
   /* accessed from within the Fast Pick (TP) system.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "PK0A" /* From Picking Menu*/
   && COMMAREA.CACURRAP == "TP0A") /* To Fast Pick Menu*/
   || COMMAREA.CAFRMSYS == "TP")   /* From FAST PICK system*/

  else

   /* ------------------------------------------------------------*/
   /* Indicate invalid transfer and return to FROM application.*/
   /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSNOWAY(); /* Invalid transfer attempt*/
  end

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "TP" /* From FAST PICK system*/
     || COMMAREA.CAFROMAP == "PK0A") /* Came from Picking main menu*/

      TPWREC.TPWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/

    else

      set TPWREC empty; /* Clear work record area*/
      TPWREC.XWH-WHSE-CD = COMMAREA.XWHCD; /* Set initial warehouse*/

    end

    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/

  end


end // end XPTP001

// Application initialization
Function XPTR001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Set CICS "start transaction id"*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set start transaction id*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "TS" /* Came from within the system*/
   || COMMAREA.CAFRMSYS == "TR") /**/

    TSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set TSWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPTR001

// Application initialization
Function XPTS001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Set CICS "start transaction id"*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set start transaction id*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == "TS" /* Came from within the system*/
   || COMMAREA.CAFRMSYS == "TR") /**/

    TSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set TSWREC empty; /* Initialize work record area*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPTS001

// Application initialization
Function XPTY-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    TYWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set TYWREC empty; /* Initialize work record*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPTY-00000

// converse XATTBL pop up window
Function XPXAT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XATTBL.XATCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XATTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XATTBL.XATCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XATTBL.XATDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XATTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XATTBL.XATCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XATTBL.XATDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XATTBL.XATCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXAT01

// converse XATTBL pop up window
Function XPXAU01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XAUTBL.XAUCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XAUTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAUTBL.XAUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAUTBL.XAUDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XAUTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAUTBL.XAUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAUTBL.XAUDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XAUTBL.XAUCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXAU01

// converse xbctbl pop up window
Function XPXBC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XBCTBL.XBCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XBCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XBCTBL.XBCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XBCTBL.XBCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XBCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XBCTBL.XBCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XBCTBL.XBCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XBCTBL.XBCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXBC01

// converse xbttbl pop up window
Function XPXBT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XBTTBL.XBTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XBTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XBTTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XBTTBL.XBTCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XBTTBL.XBTDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XBTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XBTTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XBTTBL.XBTCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XBTTBL.XBTDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XBTTBL.XBTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXBT01

// converse xchtbl popup wndow
Function XPXCH01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCHTBL.XCHCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCHTBL.XCHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCHTBL.XCHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCHTBL.XCHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCHTBL.XCHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCHTBL.XCHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXCH01

// converse xcltbl pop up window
Function XPXCL01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCLTBL.XCLCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XCLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCLTBL.XCLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCLTBL.XCLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCLTBL.XCLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCLTBL.XCLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCLTBL.XCLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXCL01

// converse xcntbl pop up window
Function XPXCN01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCNTBL.XCNCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XCNTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XCNTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XCNTBL.XCNCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XCNTBL.XCNDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCNTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XCNTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XCNTBL.XCNCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XCNTBL.XCNDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCNTBL.XCNCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXCN01

// converse xcstbl popup wndow
Function XPXCS01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCSTBL.XCSCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCSTBL.XCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCSTBL.XCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCSTBL.XCSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCSTBL.XCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCSTBL.XCSCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXCS01

// converse pop up window
Function XPXCT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCTTBL.XCTCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCTTBL.XCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCTTBL.XCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCTTBL.XCTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCTTBL.XCTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCTTBL.XCTCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXCT01

// converse pop up window
Function XPXCU01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCUTBL.XCUCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XCUTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCUTBL.XCUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCUTBL.XCUNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCUTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCUTBL.XCUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCUTBL.XCUNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCUTBL.XCUCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXCU01

// converse pop up window
Function XPXDM01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDMTBL.XDMCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XDMTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDMTBL.XDMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDMTBL.XDMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XDMTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDMTBL.XDMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDMTBL.XDMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDMTBL.XDMCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDM01

// converse pop up window
Function XPXDR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDRTBL.XDR-PROD-REG-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (XDRTBL.XXX-STAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDRTBL.XDR-PROD-REG-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDRTBL.XDR-PROD-REG-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XDRTBL.XXX-STAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDRTBL.XDR-PROD-REG-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDRTBL.XDR-PROD-REG-SDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDRTBL.XDR-PROD-REG-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDR01

// Converse xdstbl pop up window
Function XPXDS01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDSTBL.XDSCD[XX0XWCT1] != "9") /* Or end of data*/
        if (XDSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDSTBL.XDSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDSTBL.XDSABRV[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XDSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDSTBL.XDSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDSTBL.XDSABRV[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDSTBL.XDSCD[XX0XWCT1] == "9") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDS01

// converse xdvtbl pop up window
Function XPXDV01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDVTBL.XDVCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XDVTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDVTBL.XDVCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDVTBL.XDVDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XDVTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDVTBL.XDVCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDVTBL.XDVDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDVTBL.XDVCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDV01

// converse xdvtbl pop up - stat
Function XPXDV02()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDVTBL.XDVCD[XX0XWCT1] != "99") /* Or end of data*/
        XX0XM001.XX0XMCD[XX0XWCT2] = XDVTBL.XDVCD[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = XDVTBL.XDVDESC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = XDVTBL.XDVCD[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = XDVTBL.XDVDESC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDVTBL.XDVCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDV02

// converse pop up window
Function XPXEG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XEGTBL.XEGCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XEGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XEGTBL.XEGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XEGTBL.XEGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XEGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XEGTBL.XEGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XEGTBL.XEGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XEGTBL.XEGCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXEG01

// converse xfctbl pop up window
Function XPXFC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XFCTBL.XFCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XFCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XFCTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XFCTBL.XFCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XFCTBL.XFCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XFCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XFCTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XFCTBL.XFCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XFCTBL.XFCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XFCTBL.XFCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXFC01

// converse xfmtbl pop up window
Function XPXFM01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XFMTBL.XFMCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XFMTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XFMTBL.XFMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XFMTBL.XFMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XFMTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XFMTBL.XFMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XFMTBL.XFMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XFMTBL.XFMCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXFM01

// converse pop up window
Function XPXFR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XFRTBL.XFRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XFRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XFRTBL.XFRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XFRTBL.XFRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XFRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XFRTBL.XFRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XFRTBL.XFRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XFRTBL.XFRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXFR01

// converse pop up window
Function XPXGA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XGATBL.XGACD[XX0XWCT1] != "99") /* Or end of data*/
        if (XGATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XGATBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XGATBL.XGACD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XGATBL.XGADESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XGATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XGATBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XGATBL.XGACD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XGATBL.XGADESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XGATBL.XGACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXGA01

// converse pop up window
Function XPXGB01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XGBTBL.XGBCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XGBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGBTBL.XGBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGBTBL.XGBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XGBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGBTBL.XGBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGBTBL.XGBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XGBTBL.XGBCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXGB01

// converse pop up window
Function XPXGP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XGPTBL.XGPCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XGPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGPTBL.XGPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGPTBL.XGPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XGPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGPTBL.XGPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGPTBL.XGPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XGPTBL.XGPCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXGP01

// converse XGSTBL pop up window
Function XPXGS01()
   /* ------------------------------------------------------------*/

        /* CONVERSE POP UP WINDOW FOR PRODUCT GROUP TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XGSTBL.XGSCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XGSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGSTBL.XGSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGSTBL.XGSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XGSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XGSTBL.XGSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XGSTBL.XGSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XGSTBL.XGSCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXGS01

// converse pop up window
Function XPXHD01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XHDTBL.XHDCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XHDTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XHDTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XHDTBL.XHDCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XHDTBL.XHDDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* SAVE ARRAY*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XHDTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XHDTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XHDTBL.XHDCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XHDTBL.XHDDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XHDTBL.XHDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXHD01

// Converse pop up window
Function XPXHR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XHRTBL.XHRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XHRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XHRTBL.XHRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XHRTBL.XHRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XHRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XHRTBL.XHRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XHRTBL.XHRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XHRTBL.XHRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXHR01

// Converse pop up window
Function XPXIF01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XIFTBL.XIFCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XIFTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIFTBL.XIFCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIFTBL.XIFDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XIFTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIFTBL.XIFCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIFTBL.XIFDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                              /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                              /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end



  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

  converse XX0XM001 ;

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XIFTBL.XIFCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXIF01

// Converse pop up window
Function XPXIR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XIRTBL.XIRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XIRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIRTBL.XIRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIRTBL.XIRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XIRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIRTBL.XIRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIRTBL.XIRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end



  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

  converse XX0XM001 ;

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XIRTBL.XIRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXIR01

// Converse pop up window
Function XPXIT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XITTBL.XITCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XITTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XITTBL.XITCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XITTBL.XITDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XITTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XITTBL.XITCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XITTBL.XITDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end



  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

  converse XX0XM001 ;

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XITTBL.XITCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXIT01

// converse pop up window
Function XPXLA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLATBL.XLBCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLATBL.XLBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLATBL.XXX-ADDR1[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLATBL.XLBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLATBL.XXX-ADDR1[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLATBL.XLBCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLA01

// converse XLCTBL pop up window
Function XPXLC01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR LIFE CYCLE TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLCTBL.XLCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLCTBL.XLCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLCTBL.XLCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLCTBL.XLCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLCTBL.XLCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLCTBL.XLCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLC01

// converse XlgTBL pop up window
Function XPXLG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLGTBL.XLGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLGTBL.XLGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLGTBL.XLGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLGTBL.XLGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLGTBL.XLGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLGTBL.XLGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLG01

// converse pop up window
Function XPXLN01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLNTBL.XLNCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLNTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLNTBL.XLNCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLNTBL.XLNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLNTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLNTBL.XLNCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLNTBL.XLNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLNTBL.XLNCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLN01

// converse pop up window
Function XPXMC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XMCTBL.XMCCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XMCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XMCTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD /**/
           || XX0XW02.XGPCD == " ")                   /**/
            XX0XM001.XX0XMCD[XX0XWCT2] = XMCTBL.XMCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XMCTBL.XMCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XMCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMCTBL.XMCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMCTBL.XMCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XMCTBL.XMCCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXMC01

// converse pop up window
Function XPXMG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XMGTBL.XMG-COLR-GRP-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (XMGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMGTBL.XMG-COLR-GRP-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMGTBL.XMG-COLR-GRP-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XMGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMGTBL.XMG-COLR-GRP-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMGTBL.XMG-COLR-GRP-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XMGTBL.XMG-COLR-GRP-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXMG01

// converse pop up window
Function XPXMU01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XMUTBL.XMU-MAT-UOM-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (XMUTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMUTBL.XMU-MAT-UOM-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMUTBL.XMU-MAT-UOM-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XMUTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMUTBL.XMU-MAT-UOM-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMUTBL.XMU-MAT-UOM-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XMUTBL.XMU-MAT-UOM-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXMU01

// converse pop up window
Function XPXND01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XNDTBL.XNDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XNDTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNDTBL.XNDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNDTBL.XNDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XNDTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNDTBL.XNDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNDTBL.XNDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XNDTBL.XNDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXND01

// converse xnxtbl popup wndow
Function XPXNX01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XNXTBL.XNXCD[XX0XWCT1] != 9999) /* Or end of data*/
        if (XNXTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNXTBL.XNXCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNXTBL.XNXDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XNXTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XNXTBL.XNXCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XNXTBL.XNXDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] skip, invisible;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XNXTBL.XNXCD[XX0XWCT1] == 9999) /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXNX01

// converse xob pop up window
Function XPXOB01()
   /* ------------------------------------------------------------*/

         /* CONVERSE POP UP WINDOW FOR BASE ORDER TYPE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOBTBL.XOBCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XOBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOBTBL.XOBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOBTBL.XOBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOBTBL.XOBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOBTBL.XOBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOBTBL.XOBCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXOB01

// converse pop up window
Function XPXOP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOPTBL.XOPCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XOPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOPTBL.XOPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOPTBL.XOPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOPTBL.XOPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOPTBL.XOPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOPTBL.XOPCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXOP01

// converse pop up window
Function XPXOT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOTTBL.XOTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XOTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOTTBL.XOTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOTTBL.XOTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOTTBL.XOTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOTTBL.XOTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOTTBL.XOTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXOT01

// converse pop up window
Function XPXOW01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOWTBL.XOWKEY[XX0XWCT1] != "9999") /* Or end of data*/
        if (XOWTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XOWTBL.XWHCD[XX0XWCT1] == XX0XW02.XWHCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = XOWTBL.XOWCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOWTBL.XOWDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOWTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XOWTBL.XWHCD[XX0XWCT1] == XX0XW02.XWHCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = XOWTBL.XOWCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOWTBL.XOWDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOWTBL.XOWKEY[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXOW01

// converse xpctbl pop up window
Function XPXPC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPCTBL.XPCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XPCTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XPCTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPCTBL.XPCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPC01

// converse pop up window
Function XPXPG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPGTBL.XPGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPGTBL.XPGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPGTBL.XPGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPGTBL.XPGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPGTBL.XPGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPGTBL.XPGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPG01

// converse pop up window
Function XPXPL01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPLTBL.XPLCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XPLTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XPLTBL.XPLCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPLTBL.XPLDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XPLTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XPLTBL.XPLCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPLTBL.XPLDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPLTBL.XPLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPL01

// converse xprtbl pop up window
Function XPXPR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPRTBL.XPRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPRTBL.XPRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPRTBL.XPRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPRTBL.XPRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPRTBL.XPRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPRTBL.XPRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPR01

// converse pop up window
Function XPXPT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPTTBL.XPTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPTTBL.XPTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPTTBL.XPTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPTTBL.XPTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPTTBL.XPTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPTTBL.XPTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPT01

// converse pop up window
Function XPXQA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XQATBL.XQACD[XX0XWCT1] != "99") /* Or end of data*/
        if (XQATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XQATBL.XQACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XQATBL.XQADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XQATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XQATBL.XQACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XQATBL.XQADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XQATBL.XQACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXQA01

// converse xqttbl pop up window
Function XPXQT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XQTTBL.XQTCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XQTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XQTTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XQTTBL.XQTCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XQTTBL.XQTDESC2[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XQTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XQTTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XQTTBL.XQTCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XQTTBL.XQTDESC2[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XQTTBL.XQTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXQT01

// converse xrdtbl pop up window
Function XPXRD01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XRDTBL.XRD-RPT-DIV-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (XRDTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRDTBL.XRD-RPT-DIV-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRDTBL.XRD-RPT-DIV-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XRDTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRDTBL.XRD-RPT-DIV-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRDTBL.XRD-RPT-DIV-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XRDTBL.XRD-RPT-DIV-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXRD01

// converse xrytbl pop up window
Function XPXRY01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XRYTBL.XRYCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XRYTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRYTBL.XRYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRYTBL.XRYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XRYTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRYTBL.XRYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRYTBL.XRYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XRYTBL.XRYCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXRY01

// converse pop up window
Function XPXSE01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSETBL.XSECD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSETBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSETBL.XSECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSETBL.XSEDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSETBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSETBL.XSECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSETBL.XSEDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSETBL.XSECD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXSE01

// converse pop up window
Function XPXSL01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSLTBL.XSLCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSLTBL.XSLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSLTBL.XSLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSLTBL.XSLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSLTBL.XSLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSLTBL.XSLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXSL01

// converse pop up window
Function XPXSN01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSNTBL.XSECD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSNTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSNTBL.XSECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSNTBL.XSNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSNTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSNTBL.XSECD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSNTBL.XSNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSNTBL.XSECD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXSN01

// converse xsotbl pop-up window
Function XPXSO01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSOTBL.XSOCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSOTBL.XSOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSOTBL.XSONM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSOTBL.XSOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXSO01

// converse xautbl popup wndow
Function XPXSP01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSPTBL.XSPCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSPTBL.XSPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSPTBL.XSPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSPTBL.XSPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSPTBL.XSPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSPTBL.XSPCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXSP01

// converse pop up window
Function XPXST01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSTTBL.XSTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSTTBL.XSTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSTTBL.XSTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XSTTBL.XSTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XSTTBL.XSTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSTTBL.XSTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXST01

// converse XSUTBL pop up window
Function XPXSU01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR SILHOUETTE CSP TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XSUTBL.XSUCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XSUTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XSUTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XSUTBL.XSUCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XSUTBL.XSUABRV[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XSUTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XSUTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XSUTBL.XSUCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XSUTBL.XSUABRV[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XSUTBL.XSUCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXSU01

// converse pop up window
Function XPXTC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XTCTBL.XTCCD[XX0XWCT1] != "999") /* Or end of data*/
        if (XTCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTCTBL.XTCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTCTBL.XTCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XTCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTCTBL.XTCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTCTBL.XTCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XTCTBL.XTCCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXTC01

// converse pop up window
Function XPXTY01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XTYTBL.XTYCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XTYTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTYTBL.XTYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTYTBL.XTYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XTYTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTYTBL.XTYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTYTBL.XTYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XTYTBL.XTYCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXTY01

// converse pop up window
Function XPXUM01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XUMTBL.XUMCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XUMTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XUMTBL.XUMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XUMTBL.XUMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XUMTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XUMTBL.XUMCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XUMTBL.XUMDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XUMTBL.XUMCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXUM01

// converse pop up window
Function XPXWH01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XWHTBL.XWHCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XWHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWHTBL.XWHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWHTBL.XWHNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XWHTBL.XWHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXWH01

// converse xwstbl pop up window
Function XPXWS01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XWSTBL.XWSCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XWSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWSTBL.XWSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWSTBL.XWSABRV[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XWSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XWSTBL.XWSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XWSTBL.XWSABRV[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XWSTBL.XWSCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXWS01

// initialization - pop up window
Function XPXX001()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set XX0XM001 initial; /* Clear the map area*/
  set XX0XW02 empty; /* clear working storage*/
  XX0XW02.XX0XWCT1 = 1; /* Table index*/
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  XX0XW02.XX0XWSIX = 0; /* End of first page save index*/
  XX0XW02.XX0XWPIX = 0; /* Initialize pass index to zero*/
  XX0XW02.XX0XWFFL = "Y"; /* first time thru flag*/
  XX0XW02.XX0XWERR = "N"; /* Scroll error flag to no*/
  XX0XW02.XX0XWEND = "N"; /* End of pop up window session flag*/

end // end XPXX001

// converse pop up window
Function XPYAC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YACTBL.YACCD[XX0XWCT1] != "99") /* And end of table*/
        if (YACTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YACTBL.YACCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YACTBL.YACDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YACTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YACTBL.YACCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YACTBL.YACDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YACTBL.YACCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYAC01

// converse pop up window
Function XPYBR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YBRTBL.YBRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YBRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YBRTBL.YBRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YBRTBL.YBRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YBRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YBRTBL.YBRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YBRTBL.YBRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YBRTBL.YBRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYBR01

// converse pop up window
Function XPYCN01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCNTBL.YCNCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YCNTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCNTBL.YCNCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCNTBL.YCNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YCNTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCNTBL.YCNCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCNTBL.YCNDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCNTBL.YCNCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYCN01

// converse ydftbl pop-up window
Function XPYDF01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YDFTBL.YDFCD[XX0XWCT1] != "999") /* Or end of data*/

        if (YDFTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YDFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD /* GPC code*/
           || XX0XW02.XGPCD == " ")                   /* If not entered, O.K.*/

            XX0XM001.XX0XMCD[XX0XWCT2] = YDFTBL.YDFCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YDFTBL.YDFDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Array*/

            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end

            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Add to screen idx*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end

      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YDFTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YDFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")

            XX0XM001.XX0XMCD[XX0XWCT2] = YDFTBL.YDFCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YDFTBL.YDFDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end

        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YDFTBL.YDFCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYDF01

// converse pop up window
Function XPYDT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YDTTBL.YDTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YDTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YDTTBL.YDTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YDTTBL.YDTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YDTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YDTTBL.YDTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YDTTBL.YDTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YDTTBL.YDTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYDT01

// Converse yettbl pop up window
Function XPYES01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YESTBL.YESCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YESTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YESTBL.YESCDIND[XX0XWCT1] == XX0XW02.YESCDIND
           || YESTBL.YESCDIND[XX0XWCT1] == "B"
           || YESTBL.YESCDIND[XX0XWCT1] == " "
           || XX0XW02.YESCDIND == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YESTBL.YESCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YESTBL.YESDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YESTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YESTBL.YESCDIND[XX0XWCT1] == XX0XW02.YESCDIND
           || YESTBL.YESCDIND[XX0XWCT1] == "B"
           || YESTBL.YESCDIND[XX0XWCT1] == " "
           || XX0XW02.YESCDIND == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YESTBL.YESCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YESTBL.YESDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YESTBL.YESCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYES01

// Converse yettbl pop up window
Function XPYET01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YETTBL.YETCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YETTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YETTBL.YETCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YETTBL.YETDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YETTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YETTBL.YETCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YETTBL.YETDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YETTBL.YETCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYET01

// converse YFATBL pop up window
Function XPYFA01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR FINANCIAL LEVEL 1 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YFATBL.YFACD[XX0XWCT1] != "99") /* Or end of data*/
        if (YFATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YFATBL.YFACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YFATBL.YFADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YFATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YFATBL.YFACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YFATBL.YFADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YFATBL.YFACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYFA01

// converse yfetbl pop up window
Function XPYFE01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR FINANCIAL LEVEL 3 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YFETBL.YFE-FIN-LVL3-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YFETBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YFETBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFETBL.YFE-FIN-LVL3-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFETBL.YFE-FIN-LVL3-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YFETBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YFETBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFETBL.YFE-FIN-LVL3-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFETBL.YFE-FIN-LVL3-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YFETBL.YFE-FIN-LVL3-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYFE01

// converse yfftbl pop up window
Function XPYFF01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR FINANCIAL LEVEL 4 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YFFTBL.YFF-FIN-LVL4-CD[XX0XWCT1] != "999") /* Or end of data*/
        if (YFFTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YFFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFFTBL.YFF-FIN-LVL4-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFFTBL.YFF-FIN-LVL4-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YFFTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YFFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFFTBL.YFF-FIN-LVL4-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFFTBL.YFF-FIN-LVL4-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YFFTBL.YFF-FIN-LVL4-CD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYFF01

// converse yfgtbl pop up window
Function XPYFG01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR FINANCIAL LEVEL 5 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YFGTBL.YFG-FIN-LVL5-CD[XX0XWCT1] != "999") /* Or end of data*/
        if (YFGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YFGTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFGTBL.YFG-FIN-LVL5-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFGTBL.YFG-FIN-LVL5-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YFGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YFGTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YFGTBL.YFG-FIN-LVL5-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YFGTBL.YFG-FIN-LVL5-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YFGTBL.YFG-FIN-LVL5-CD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYFG01

// converse ygrtbl pop-upwindow
Function XPYGR01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YGRTBL.YGRCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YGRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YGRTBL.YGRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YGRTBL.YGRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YGRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YGRTBL.YGRCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YGRTBL.YGRDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YGRTBL.YGRCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPYGR01

// converse xautbl popup wndow
Function XPYIC01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YICTBL.YICCD[XX0XWCT1] != 9999) /* Or end of data*/
        if (YICTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XW02.XX0XWNUM = YICTBL.YICCD[XX0XWCT1]; /* bin-to-num*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XX0XW02.XX0XWCHA;
                                   /* num-to-char*/
          XX0XM001.XX0XMDES[XX0XWCT2] = YICTBL.YICDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YICTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XW02.XX0XWNUM = YICTBL.YICCD[XX0XWCT1]; /* bin-to-num*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XX0XW02.XX0XWCHA;
                                   /* num-to-char*/
          XX0XM001.XX0XMDES[XX0XWCT2] = YICTBL.YICDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YICTBL.YICCD[XX0XWCT1] == 9999) /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPYIC01

// converse ykptbl pop up window
Function XPYKP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YKPTBL.YKP-PRBM-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YKPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YKPTBL.YKP-PRBM-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YKPTBL.YKP-PRBM-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YKPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YKPTBL.YKP-PRBM-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YKPTBL.YKP-PRBM-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YKPTBL.YKP-PRBM-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYKP01

// converse ykstbl pop up window
Function XPYKS01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YKSTBL.YKS-STY-TYP-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YKSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YKSTBL.YKS-STY-TYP-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YKSTBL.YKS-STY-TYP-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YKSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YKSTBL.YKS-STY-TYP-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YKSTBL.YKS-STY-TYP-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YKSTBL.YKS-STY-TYP-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYKS01

// show yla table
Function XPYLA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YLATBL.YLACD[XX0XWCT1] != "99") /* Or end of data*/
        if (YLATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YLATBL.YLACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YLATBL.YLADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YLATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YLATBL.YLACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YLATBL.YLADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YLATBL.YLACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYLA01

// converse YMATBL pop up window
Function XPYMA01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR MARKETING LEVEL 1 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YMATBL.YMACD[XX0XWCT1] != "999") /* Or end of data*/
        if (YMATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMATBL.YMACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMATBL.YMADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YMATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMATBL.YMACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMATBL.YMADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YMATBL.YMACD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYMA01

// converse YMBTBL pop up window
Function XPYMB01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR MARKETING LEVEL 2 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YMBTBL.YMBCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YMBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMBTBL.YMBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMBTBL.YMBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YMBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMBTBL.YMBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMBTBL.YMBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YMBTBL.YMBCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYMB01

// converse YMCTBL pop up window
Function XPYMC01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR MARKETING LEVEL 3 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YMCTBL.YMCCD[XX0XWCT1] != "999") /* Or end of data*/
        if (YMCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMCTBL.YMCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMCTBL.YMCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YMCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMCTBL.YMCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMCTBL.YMCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YMCTBL.YMCCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYMC01

// converse pop up window
Function XPYMT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YMTTBL.YMTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YMTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMTTBL.YMTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMTTBL.YMTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YMTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YMTTBL.YMTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YMTTBL.YMTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YMTTBL.YMTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYMT01

// converse pop up window
Function XPYNT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YNTTBL.YNTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YNTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YNTTBL.YNTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YNTTBL.YNTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YNTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YNTTBL.YNTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YNTTBL.YNTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YNTTBL.YNTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYNT01

// converse pop up window
Function XPYOH01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YOHTBL.YOHCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YOHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YOHTBL.YOHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YOHTBL.YOHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YOHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YOHTBL.YOHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YOHTBL.YOHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YOHTBL.YOHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYOH01

// converse ypctbl pop up window
Function XPYPC01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPCTBL.YPCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPCTBL.YPCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPCTBL.YPCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPCTBL.YPCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPCTBL.YPCSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPCTBL.YPCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 5; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYPC01

// converse ypgtbl pop up window
Function XPYPG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPGTBL.YPGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YPGTBL.YPGFFFL[XX0XWCT1] == XX0XW02.YPGFFFL
           || XX0XW02.YPGFFFL == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YPGTBL.YPGCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YPGTBL.YPGDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YPGTBL.YPGFFFL[XX0XWCT1] == XX0XW02.YPGFFFL
           || XX0XW02.YPGFFFL == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YPGTBL.YPGCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YPGTBL.YPGDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPGTBL.YPGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYPG01

// converse yprtbl pop up window
Function XPYPR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPRTBL.YPR-PROD-STAT-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPRTBL.YPR-PROD-STAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPRTBL.YPR-PROD-STATSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPRTBL.YPR-PROD-STAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPRTBL.YPR-PROD-STATSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPRTBL.YPR-PROD-STAT-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYPR01

// converse pop up window
Function XPYPU01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPUTBL.YPUCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPUTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPUTBL.YPUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPUTBL.YPUDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPUTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPUTBL.YPUCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPUTBL.YPUDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPUTBL.YPUCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYPU01

// converse pop up window
Function XPYPY01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPYTBL.YPYCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPYTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPYTBL.YPYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPYTBL.YPYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPYTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPYTBL.YPYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPYTBL.YPYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPYTBL.YPYCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYPY01

// converse yqttbl pop up window
Function XPYQT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YQTTBL.YQT-QOTA-CAT-CD[XX0XWCT1] != "9999999") /* Or end of data*/
        if (YQTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YQTTBL.YQT-QOTA-CAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YQTTBL.YQT-QOTA-CAT-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YQTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YQTTBL.YQT-QOTA-CAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YQTTBL.YQT-QOTA-CAT-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YQTTBL.YQT-QOTA-CAT-CD[XX0XWCT1] == "9999999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYQT01

// converse pop up window
Function XPYRG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE PO REGION POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the data.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "Y") /* if the first time through*/
      XX0XW02.XX0XWINX[10] = 0; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      PB0VW01.REGSUB = XX0XW02.XX0XWINX[10] + 1; /* set up array sub.*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PB0VW01.REGSUB <= PB0VW01.REGSUBMAX) /* or end of data*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PB0VW01.PO-REG[REGSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = PB0VW01.PO-REG-DESC[REGSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = PB0VW01.REGSUB; /* Save array sub.*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        PB0VW01.REGSUB = PB0VW01.REGSUB + 1; /* Increment array sub.*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to 'no'*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PB0VW01.REGSUB = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PB0VW01.PO-REG[REGSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = PB0VW01.PO-REG-DESC[REGSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = PB0VW01.REGSUB;
                                   /* Save array sub*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        PB0VW01.REGSUB = PB0VW01.REGSUB - 1; /* Decrement table index*/
      end
      if (PB0VW01.REGSUB < 1) /* If the table index was decremented*/
        PB0VW01.REGSUB = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PB0VW01.REGSUB > PB0VW01.REGSUBMAX) /* or end of data*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= 1)  
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYRG01

// converse ysctbl popup windw
Function XPYSC01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSCTBL.YSCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSCTBL.YSCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSCTBL.YSCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSCTBL.YSCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSCTBL.YSCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSCTBL.YSCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPYSC01

// converse ysetbl pop up window
Function XPYSE01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR SALES CATEGORY 1 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSETBL.YSE-SLS-CAT1-CD[XX0XWCT1] != "999") /* Or end of data*/
        if (YSETBL.XXX-STAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YSETBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YSETBL.YSE-SLS-CAT1-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YSETBL.YSE-SLS-CAT1-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSETBL.XXX-STAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YSETBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YSETBL.YSE-SLS-CAT1-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YSETBL.YSE-SLS-CAT1-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSETBL.YSE-SLS-CAT1-CD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSE01

// converse ysftbl pop up window
Function XPYSF01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR SALES CATEGORY 2 TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSFTBL.YSF-SLS-CAT2-CD[XX0XWCT1] != "999") /* Or end of data*/
        if (YSFTBL.XXX-STAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YSFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YSFTBL.YSF-SLS-CAT2-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YSFTBL.YSF-SLS-CAT2-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSFTBL.XXX-STAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YSFTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = YSFTBL.YSF-SLS-CAT2-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YSFTBL.YSF-SLS-CAT2-DESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSFTBL.YSF-SLS-CAT2-CD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSF01

// converse pop up window
Function XPYSH01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSHTBL.YSHCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSHTBL.YSHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSHTBL.YSHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSHTBL.YSHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSHTBL.YSHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSHTBL.YSHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSH01

// converse pop up window
Function XPYSI01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSITBL.YSICD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSITBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSITBL.YSICD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSITBL.YSISDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSITBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSITBL.YSICD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSITBL.YSISDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSITBL.YSICD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 10; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSI01

// converse pop up window
Function XPYSS01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSSTBL.YSSCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSSTBL.YSSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSSTBL.YSSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSSTBL.YSSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSSTBL.YSSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSSTBL.YSSCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSS01

// converse pop up window
Function XPYST01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSTTBL.YSTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSTTBL.YSTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSTTBL.YSTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSTTBL.YSTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSTTBL.YSTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSTTBL.YSTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYST01

// converse xdvtbl pop up window
Function XPYSY01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSYTBL.YSYCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSYTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSYTBL.YSYCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSYTBL.YSYDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSYTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDVTBL.XDVCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDVTBL.XDVDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSYTBL.YSYCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSY01

// converse pop up window
Function XPYTP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE PO TYPE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the data.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "Y") /* if the first time through*/
      XX0XW02.XX0XWINX[10] = 0; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      PB0VW01.TYPSUB = XX0XW02.XX0XWINX[10] + 1; /* set up array sub.*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && PB0VW01.TYPSUB <= PB0VW01.TYPSUBMAX) /* or end of data*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PB0VW01.PO-TYP[TYPSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = PB0VW01.PO-TYP-DESC[TYPSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = PB0VW01.TYPSUB; /* Save array sub.*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        PB0VW01.TYPSUB = PB0VW01.TYPSUB + 1; /* Increment array sub.*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to 'no'*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      PB0VW01.TYPSUB = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = PB0VW01.PO-TYP[TYPSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = PB0VW01.PO-TYP-DESC[TYPSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = PB0VW01.TYPSUB;
                                   /* Save array sub*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        PB0VW01.TYPSUB = PB0VW01.TYPSUB - 1; /* Decrement table index*/
      end
      if (PB0VW01.TYPSUB < 1) /* If the table index was decremented*/
        PB0VW01.TYPSUB = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && PB0VW01.TYPSUB > PB0VW01.TYPSUBMAX) /* or end of data*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= 1)  
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYTP01

// converse yviTBL pop up window
Function XPYVI01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YVITBL.YVICD[XX0XWCT1] != "99") /* Or end of data*/
        if (YVITBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YVITBL.YVICD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YVITBL.YVIDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YVITBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YVITBL.YVICD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YVITBL.YVIDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YVITBL.YVICD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYVI01

// converse zartbl pop up
Function XPZAR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZARTBL.ZARCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZARTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZARTBL.ZARCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZARTBL.ZARDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZARTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZARTBL.ZARCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZARTBL.ZARDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZARTBL.ZARCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZAR01

// converse pop up window
Function XPZCH01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZCHTBL.ZCHCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCHTBL.ZCHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCHTBL.ZCHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCHTBL.ZCHCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCHTBL.ZCHDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZCHTBL.ZCHCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZCH01

// converse pop up window
Function XPZCR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZCRTBL.ZCR-CLM-RSN-CD[XX0XWCT1] != "99")
        if (ZCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCRTBL.ZCR-CLM-RSN-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCRTBL.ZCR-CLM-RSN-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZCRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCRTBL.ZCR-CLM-RSN-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCRTBL.ZCR-CLM-RSN-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZCRTBL.ZCR-CLM-RSN-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZCR01

// Load ZFC into working Record
Function XPZFC-LOAD()

   /* ------------------------------------------------------------*/
    /* XPZFC01-LOAD - Load DCORP.VZFC001 into table used by*/
    /* pop-up window process XPZFC-POP.*/
    /*  */
    /* NOTE: This process will use & abuse the SQLCA record!*/
    /* Also, you must have DC0060 in your Bind plan.*/
   /* ------------------------------------------------------------*/

  set ZFCWREC empty; /* Clear DB2 array record*/
  SQLCA.VAGen_SQLCODE = 0; /* init status code*/

   /* ------------------------------------------------------------*/
   /* declare cursor for VZFC0001 Rows*/
   /* ------------------------------------------------------------*/

  call "DC0060" ("S1", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* fetch and load rows into ZFCWREC array*/
   /* ------------------------------------------------------------*/

  call "DC0060" ("N1", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes}; /* Initial fetch*/

  while (SQLCA.VAGen_SQLCODE == 0)
    ZFCWREC.ZFCW-ARRAY-SIZE = ZFCWREC.ZFCW-ARRAY-SIZE + 1;
    if (ZFCWREC.ZFCW-ARRAY-SIZE <= 200)
      ZFCWREC.ZFC-CRCY-CD[ZFCW-ARRAY-SIZE] = VZFC0001.ZFC-CRCY-CD;
      ZFCWREC.ZFC-CRCY-DESC[ZFCW-ARRAY-SIZE] = VZFC0001.ZFC-CRCY-DESC;
      call "DC0060" ("N1", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes};
    else /* Table overflow! Report to TA0020*/
      ZFCWREC.ZFCW-ARRAY-SIZE = 200; /* Set to table max*/
      SQLCA.VAGen_SQLCODE = 100; /* to break out of loop*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "OVERFLOW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
      TA1REC.TA1PGMNO = "XPZFC-L"; /* Program number*/
      TA1REC.TA1DBASE = "DCORP  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VZFC0001"; /* Table view name*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag*/
    end
  end

   /* ------------------------------------------------------------*/
   /* close cursor for VZFC0001*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100)
    call "DC0060" ("C1", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* report any unexpected DB2 errors to TA0020*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "LOAD TABLE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
    TA1REC.TA1PGMNO = "XPZFC-L"; /* Program number*/
    TA1REC.TA1DBASE = "DCORP  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VZFC0001"; /* Table view name*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag*/
  end

end // end XPZFC-LOAD

// ZFC (DB2) pop up window
Function XPZFC-POP()
   /* ------------------------------------------------------------*/

      /* CONVERSE POP UP WINDOW FOR CURRENCY CODE TABLE*/
      /* NOTE: This is the DB2 table DCORP.VZFC001*/
      /* You must have DC0060 in your bind plan for this*/
      /* process to work. Also, this process will use*/
      /* the SQLCA record.*/
      /*  */
      /* 1) If ZFCWREC has not been loaded, perform XPZFC-LOAD*/
      /* 2) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 3) Converse the map.*/
      /* 4) Reset selection fields to normal after converse.*/
      /* 5) Check for PFkey and scroll errors.*/
      /* 6) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If we don't have the zfc data, load it           ****/
   /* **********************************************************/

  if (ZFCWREC.ZFCW-ARRAY-SIZE <= 0
   || ZFCWREC.ZFCW-ARRAY-SIZE > 200)
    XPZFC-LOAD(); /* Load it*/
  end

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XX0XW02.XX0XWCT1 <= ZFCWREC.ZFCW-ARRAY-SIZE)
        XX0XM001.XX0XMCD[XX0XWCT2] = ZFCWREC.ZFC-CRCY-CD[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = ZFCWREC.ZFC-CRCY-DESC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                 /* Increment screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = ZFCWREC.ZFC-CRCY-CD[XX0XWCT1];
        XX0XM001.XX0XMDES[XX0XWCT2] = ZFCWREC.ZFC-CRCY-DESC[XX0XWCT1];
        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XX0XW02.XX0XWCT1 > ZFCWREC.ZFCW-ARRAY-SIZE)
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZFC-POP

// converse zfltbl pop up
Function XPZFL01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZFLTBL.ZFLCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZFLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZFLTBL.ZFLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZFLTBL.ZFLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZFLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZFLTBL.ZFLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZFLTBL.ZFLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZFLTBL.ZFLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZFL01

// Incoterms Pop-up window
Function XPZIT01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZITTBL.ZITCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZITTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZITTBL.ZITCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZITTBL.ZITDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZITTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZITTBL.ZITCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZITTBL.ZITDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZITTBL.ZITCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZIT01

// converse pop up window
Function XPZIV01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZIVTBL.ZIVCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZIVTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZIVTBL.ZIVCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZIVTBL.ZIVDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZIVTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZIVTBL.ZIVCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZIVTBL.ZIVDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZIVTBL.ZIVCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZIV01

// converse pop up window
Function XPZPR01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen ****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             SELECT & ENTER            ";
    XX0XM001.XX0XMTR2 = "    PF7:BACK                PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZPRTBL.XXXUSRID[XX0XWCT1] != "99999999") /* Or end of data*/
        if (ZPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZPRTBL.XXXUSRID[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZPRTBL.XXXUNTXT[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZPRTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZPRTBL.XXXUSRID[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZPRTBL.XXXUNTXT[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZPRTBL.XXXUSRID[XX0XWCT1] == "99999999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] < XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          else
            XX0XM001.XX0XMSEL[XX0XWCT2] = " ";
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end

      else
        if (converseVar.eventKey not pf7 /* If any other attention ident*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZPR01

// Converse ZRGTBL pop-up window
Function XPZRG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZRGTBL.ZRGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZRGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZRGTBL.ZRGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZRGTBL.ZRGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZRGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZRGTBL.ZRGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZRGTBL.ZRGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZRGTBL.ZRGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZRG01

// OC SYSTEM - dxfr to self
Function XS0AS00()

   /* Application will transfer to itself*/

  COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* Pass global work record*/

  CAFROMAP = COMMAREA.CACURRAP;
  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to program sysVar.transferName passing COMMAREA;

end // end XS0AS00

// check caitem for numeric
Function XS0AS02()

   /* This statement group will check the commarea.caitem*/
   /* and determine if the field is numeric and not larger than*/
   /* 9 characters.  If the field is not numeric or is larger*/
   /* than 9 characters, then ocwrec.ocwcuoid will be zeroed.*/
   /* Otherwise, if all edits are passed the commarea.caitem*/
   /* will be loaded into ocwrec.ocwcuoid.*/



  XS0AW02.XS0AWSTR = "N";
  XS0AW02.XS0AWSUB = 9;
  XS0AW02.XS0AWFLD = COMMAREA.CAITEM;

  if (XS0AW02.XS0AWCHA[10] != " ")
    OCWREC.OCWCUOID = 0; /* entered string to long*/
    COMMAREA.CAITEM = " "; /* clear item*/
    return;
  end

  while (XS0AW02.XS0AWSUB >= 1)
    if (XS0AW02.XS0AWCHA[XS0AWSUB] != " ")
      XS0AW02.XS0AWSTR = "Y"; /* end of trailing blanks*/
    end
    if (XS0AW02.XS0AWSTR == "Y") /* if into the number*/
      if (XS0AW02.XS0AWCHA[XS0AWSUB] in XS0AT02.XS0ATVAL from 1)
        /* next sentence - it's numeric*/
      else
        OCWREC.OCWCUOID = 0; /* found non numeric character*/
        COMMAREA.CAITEM = " "; /* clear item*/
        return;
      end
    end
    XS0AW02.XS0AWSUB = XS0AW02.XS0AWSUB - 1;
  end

  OCWREC.OCWCUOID = COMMAREA.CAITEM; /* passed all edits*/
  COMMAREA.CAITEM = " "; /* clear item*/
   /* *************************************************************/
end // end XS0AS02

// OC SYSTEM - HANDLE PF3
Function XS0AS03()

    /* Transfer to Order Information Menu*/



  COMMAREA.CAUSERA = OCWREC.OCWGROUP;

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;

  COMMAREA.CACURRAP = "OC0M";

  COMMAREA.CATOAP = " ";

  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to program sysVar.transferName passing COMMAREA;


end // end XS0AS03

// OC SYSTEM - HANDLE PF5
Function XS0AS05()

   /* Transfer to Order Information - Discrepancy Add*/


  COMMAREA.CAUSERA = OCWREC.OCWGROUP;

  COMMAREA.CATOAP = "OC0A";
  XSEXIT();

end // end XS0AS05

// OC SYSTEM - HANDLE PF6
Function XS0AS06()

   /* Transfer to Order Information - Discrepancy letter*/


  COMMAREA.CAUSERA = OCWREC.OCWGROUP;

  COMMAREA.CATOAP = "OC0B";
  XSEXIT();

end // end XS0AS06

// OC SYSTEM - HANDLE PF13
Function XS0AS13()

   /* Transfer to Order Information - Letter Summary*/

  COMMAREA.CAUSERA = OCWREC.OCWGROUP;

  COMMAREA.CATOAP = "OC0C";
  XSEXIT();

end // end XS0AS13

// Transfer to OC0D
Function XS0AS22()

   /* Transfer to Discrepancy Code display*/


  COMMAREA.CAUSERA = OCWREC.OCWGROUP;

  COMMAREA.CATOAP = "OC0D";
  XSEXIT();

end // end XS0AS22

// db2 retn routine no rollback
Function XS0ASDC()
    /* DB2 return no rollback - will xfer to O/I  menu*/


    /* This stmt grp will NOT rollback any updates since the last*/
    /* commit, converse or dxfr/xfer.*/

   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to table that was being accessed*/
     /* ta1locat(1) = calling stmt group name*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(4) = programmers option*/
     /* ta1rec.ta1dbase = data base name (DORDC, etc..)*/
     /* ta1rec.ta1tblvu = data base view (VDSCRP01, etc..)*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the program's init process.*/



  set ERRSQLCA empty;
  move SQLCA to ERRSQLCA withV60Compat;
  TA1REC.TA1TYPE = "DB2"; /* db2 type*/
  TA1REC.TA1FUNC = "RETN"; /* return (abend with diags)*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* to close cursors*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end
  XS0AS03(); /* OC menu*/
  exit program; /* menu failure*/


end // end XS0ASDC

// db2 post routine ta0020
Function XS0ASDL()
         /* DB2 Post routine  with ROLLBACK*/


   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to table being accessed*/
     /* ta1locat(1) = calling stmt group name*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(4) = programmer's option*/
     /* ta1rec.ta1dbase = data base name (DORDC, etc..)*/
     /* ta1rec.ta1tblvu = data base view (VDSCRP01, etc..)*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the program's init process.*/
   /* Return code processing will also be handled by the*/
   /* calling stmt group.*/

  set ERRSQLCA empty;
  move SQLCA to ERRSQLCA withV60Compat;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "POST"; /* post diags*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback routine*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end XS0ASDL

// db2 post routine ta0020
Function XS0ASDP()
         /* DB2 Post routine - No Rollback*/


   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to table being accessed*/
     /* ta1locat(1) = calling stmt group name*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(4) = programmer's option*/
     /* ta1rec.ta1dbase = data base name (DOORDC, etc..)*/
     /* ta1rec.ta1tblvu = data base view (VDSCRP01, etc..)*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the program's init process.*/
   /* Return code processing will also be handled by the*/
   /* calling stmt group.*/

  set ERRSQLCA empty;
  move SQLCA to ERRSQLCA withV60Compat;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "POST"; /* post diags*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end XS0ASDP

// db2 retn routine with rollback
Function XS0ASDR()
    /* DB2 return with rollback - will dxfr to OC  menu*/


    /* This stmt grp will rollback all updates since the last*/
    /* commit, converse or dxfr/xfer.*/

   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to table being accessed*/
     /* ta1locat(1) = calling stmt group name*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(4) = programmer's option*/
     /* ta1rec.ta1dbase = data base name (DORDC etc..)*/
     /* ta1rec.ta1tblvu = data base view (VDSCRP01, etc..)*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the program's init process.*/



  set ERRSQLCA empty;
  move SQLCA to ERRSQLCA withV60Compat;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN"; /* abend with diags*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end
  XS0AS03(); /* OC menu*/
  exit program; /* menu failure*/


end // end XS0ASDR

// non-db2 post routine ta0020
Function XS0ASNP()
       /* Non-DB2 post routine*/


   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to file being accessed*/
     /* ta1locat(1) = statement group name*/
     /* ta1locat(2) = optional add'l location info*/
     /* ta1locat(3) =optional add'l location info*/
     /* ta1locat(4) = optional add'l location info*/
     /* taerec.taedesc1 = a description of the problem*/
     /* taerec.taedesc2 = more problem description*/
     /* ta1map = appl's mapname and should be initilized*/
              /* in the program's init process.*/
   /* Return code processing will also be handled by the*/
   /* calling stmt group.*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "POST"; /* diags*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end XS0ASNP

// non db2 retn routine no rolbk
Function XS0ASNR()
    /* Non-DB2 return no rollback - will xfer to I/O  menu*/


    /* This routine to be used when there are no updates*/

   /* The following fields will be filled in by the*/
   /* calling stmt group before entering this routine:*/
     /* ta1tblke    = key to file being accessed*/
     /* ta1locat(1) = statement group name*/
     /* ta1locat(2) = optional add'l location info*/
     /* ta1locat(3) = optional add'l location info*/
     /* ta1locat(4) = optional add'l location info*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the program's init process.*/
     /* taerec.taedesc1 = a description of the problem*/
     /* taerec.taedesc2 = more problem description*/
   /* Return code processing will also be handled by the*/
   /* calling stmt group.*/



  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "RETN"; /* abend with diags*/
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* to close cursors*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end
  XS0AS03(); /* OC menu*/
  exit program; /* menu failure*/


end // end XS0ASNR

// DETERMINE IF AIRBORNE ORDER
Function XS0MS-CHK-AIRBORNE()
   /* ;DETERMINE IF THIS IS A TRANSMITTED AIRBORNE ORDER*/
   /* ;USING A SHARED WORKING STORAGE RECORD*/

  XS0MW01.XS0MWABF = "N";

  if (XS0MW01.XS0MWDIV == "03" /* DIVISION 03*/
   && XS0MW01.XS0MWORT == "66" /* SYSTEM ORDER TYPE*/
   && XS0MW01.XS0MWDIR == "1"  /* DIRECT SHIP CODE*/
   && XS0MW01.XS0MWNDT <= VOPPGM01.XXX-PGM-LST-RUN-DT)
    XS0MW01.XS0MWABF = "Y";
  else
    if (XS0MW01.XS0MWCUS == 803286
     && XS0MW01.XS0MWGPC == "02"
     && XS0MW01.XS0MWNDT <= VOPPGM01.XXX-PGM-LST-RUN-DT)
      XS0MW01.XS0MWABF = "Y";
    end
  end
end // end XS0MS-CHK-AIRBORNE

// Exit to another application
Function XSABS01()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AB0A") /* and main application menu*/
          COMMAREA.CATOAP = "FY0M"; /* Indicate Master Menu*/
        else
          COMMAREA.CATOAP = "AB0A";
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AB" /* Transfer within same system*/
   || COMMAREA.CATOSYS == "AE") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSABS01

// Exit to another application
Function XSABS02()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AB0S") /* and nil application menu*/
          COMMAREA.CATOAP = "AB0A"; /* Indicate Master Menu*/
        else
          COMMAREA.CATOAP = "AB0S";
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AB" /* Transfer within same system*/
   || COMMAREA.CATOSYS == "AE") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSABS02

// Exit to another application
Function XSABS03()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AB08") /* and nil application menu*/
          COMMAREA.CATOAP = "AB0A"; /* Indicate Master Menu*/
        else
          COMMAREA.CATOAP = "AB08";
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AB" /* Transfer within same system*/
   || COMMAREA.CATOSYS == "AE") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSABS03

// gender/age retrieval
Function XSABSGA()



                      /* GENDER/AGE RETRIEVAL*/



  XP1REC.XGAABRV = " "; /* Init abbr desc*/
  XP1REC.XGADESC = " "; /* Init Desc*/
  XP1REC.XXXSTAT = " "; /* Init status of code*/

  if (XP1REC.XGACD == "?") /* If POP-UP window requested*/
    XPXX001(); /* Init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Move code to POP-UP rec*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES";
                                 /* ;       Init POP-UP header*/
    while (XX0XW02.XX0XWEND == "N") /* Loop thru POP-UP until done*/
                                 /* ;*/
      XPXGA01(); /* Perform POP-UP routine*/
                                 /* ;*/
    end /* End of Loop*/

    if (XX0XW02.XX0XWPIX > 0) /* If Selection made in POP-UP*/
      /* -------- MOVE values from CSP Table to XP1rec -------*/
      XP1REC.XGACD = XGATBL.XGACD[XX0XWPIX];
      XP1REC.XGAABRV = XGATBL.XGAABRV[XX0XWPIX];
      XP1REC.XGADESC = XGATBL.XGADESC[XX0XWPIX];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[XX0XWPIX];
    else /* ELSE(No Selection made)*/
      XP1REC.XP1ERRFL = "1"; /* Move error code to XP1REC*/
    end /* END of 'IF' statement*/
  else /* ELSE(POP-UP not requseted)*/
    if (XP1REC.XGACD in XGATBL.XGACD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XGACD = XGATBL.XGACD[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[sysVar.arrayIndex];
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* *********  end of gender/age retrieval  **************/
end // end XSABSGA

// EDIT XSECD/XSNYR/BUY-MONTH
Function XSABSMO()
   /* *************************************************************/
   /* *****                  X S A B B M O                   ******/
   /* ***** This statement group will validate the data in   ******/
   /* ***** the BUY-MONTH field. A BUY-MONTH is defined as   ******/
   /* ***** a date(format YYMM) between the Beginning and    ******/
   /* ***** ending factory order dates on the YSNTBL.        ******/
   /* ***** NOTE: In order for this STATEMENT GROUP to work, ******/
   /* *****       XSABXSN must be have edited the XSNYR      ******/
   /* *****       FIRST !                                    ******/
   /* *************************************************************/

  XSABSSN(); /* Validate XSNYR & XSECD*/

   /* ***** if no errors with XSECD & XSNYR ******/
  if (XP1REC.XP1ERRFL == " ")

    /* ***** ABWIDX5 has correct value from XSABXSN ******/

    /* ***** reformat factory order begin date ******/
    /* ***** allow 3 months previous to buy season *******/
    /* ** temporary code only allows 1 month previous ***/

    ABWREC.ABWORKDT = YSNTBL.XSNFOBDT[ABWIDX5];
    ABWREC.ABWFOBMM = ABWREC.ABWORKMM - 1;
    if (ABWREC.ABWFOBMM <= 0)
      ABWREC.ABWFOBMM = ABWREC.ABWFOBMM + 12;
  /* *******************Y2K OUT BEGIN******************/
  /* ABWREC.ABWFOBYY = ABWREC.ABWORKYY - 1;*/
  /* *******************Y2K OUT END********************/
  /* *******************Y2K IN BEGIN*******************/
      ABWREC.ABWFOBCCYY = ABWREC.ABWORKCCYY - 1;
  /* *******************Y2K IN END*********************/
    else
  /* *******************Y2K OUT BEGIN******************/
  /* MOVE ABWREC.ABWORKYY TO ABWREC.ABWFOBYY;*/
  /* *******************Y2K OUT END********************/
  /* *******************Y2K IN BEGIN*******************/
      ABWREC.ABWFOBCCYY = ABWREC.ABWORKCCYY;
  /* *******************Y2K IN END*********************/
    end

    /* ****** reformat factory order end date *******/
    /* ****** allow 2 months after buy season *******/
    /* ** temporary code only allows 0 month previous ***/

    ABWREC.ABWORKDT = YSNTBL.XSNFOXDT[ABWIDX5];
    ABWREC.ABWFOXMM = ABWREC.ABWORKMM + 0;
    if (ABWREC.ABWFOBMM > 12)
      ABWREC.ABWFOXMM = ABWREC.ABWFOXMM - 12;
  /* *******************Y2K OUT BEGIN******************/
  /* **ABWREC.ABWFOXYY = ABWREC.ABWORKYY + 1;*/
  /* *******************Y2K OUT END********************/
  /* *******************Y2K IN BEGIN*******************/
      ABWREC.ABWFOXCCYY = ABWREC.ABWORKCCYY + 1;
  /* *******************Y2K IN END*********************/
    else
  /* *******************Y2K OUT BEGIN******************/
  /* **MOVE ABWREC.ABWORKYY TO ABWREC.ABWFOXYY;*/
  /* *******************Y2K OUT END********************/
  /* *******************Y2K IN BEGIN*******************/
      ABWREC.ABWFOXCCYY = ABWREC.ABWORKCCYY;
  /* *******************Y2K IN END*********************/
    end

    /* ***** reformat AB3BUYMO to a non-binary field ******/
    XP1REC.XP1BUYMO = XP1REC.AB3BUYMO;


    if (XP1REC.XP1BUYMM >= 1               /* IF month > January*/
     && XP1REC.XP1BUYMM <= 12              /* AND month < December*/
     && XP1REC.AB3BUYMO >= ABWREC.ABWFOBDT /* AND date > begin Dt*/
     && XP1REC.AB3BUYMO <= ABWREC.ABWFOXDT) /* AND date < End Dt*/
      /* NEXT SENTENCE              ;              Date is OKAY !*/
    else /* ELSE(Date is invalid)*/
      XP1REC.XP1ERRFL = 1; /* Invalid dt code*/
    end /* End of "IF" statement*/
  end /* END of "IF" statement*/
end // end XSABSMO

// product category retrieval
Function XSABSPC()



                    /* product category retrieval*/



  XP1REC.XPCABRV = " ";
  XP1REC.XPCDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XPCCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXPC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XPCCD = XPCTBL.XPCCD[XX0XWPIX];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (XP1REC.XPCCD in XPCTBL.XPCCD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XPCCD = XPCTBL.XPCCD[sysVar.arrayIndex];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* *********  end of product category retrieval *********/
end // end XSABSPC

// season code retrieval
Function XSABSSE()



                      /* season code retrieval*/



  XP1REC.XXXSTAT = " ";
  XP1REC.XSEABRV = " ";
  XP1REC.XSEDESC = " ";

  if (XP1REC.XSECD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "SEASON CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXSE01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XSECD = XSETBL.XSECD[XX0XWPIX];
      XP1REC.XSEABRV = XSETBL.XSEABRV[XX0XWPIX];
      XP1REC.XSEDESC = XSETBL.XSEDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XSETBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (XP1REC.XSECD in XSETBL.XSECD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XSECD = XSETBL.XSECD[sysVar.arrayIndex];
      XP1REC.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
      XP1REC.XSEABRV = XSETBL.XSEABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XSETBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "3"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/
  if (XP1REC.XXXSTAT != "A") /* If status not Active*/
    XP1REC.XP1ERRFL = "3"; /* MOVE error code to XP1REC*/
  end /* END of 'IF' statement*/


   /* *********  end of season code retrieval  **************/
end // end XSABSSE

// SEASON/YEAR retrieval
Function XSABSSN()


              /* S E A S O N / Y E A R    R E T R I E V A L*/


  XSABSSE(); /* Edit XSECD*/

  if (XP1REC.XP1ERRFL == " ") /* IF XSECD if valid*/
    /* ***** reformat BINARY XSNYR from NUMERIC SEASON-YEAR ******/
    if (XP1REC.XP1XSNYY <= 70) /* IF Year is < 70*/
      XP1REC.XP1XSNCC = 20; /* Century must be 2000*/
    else /* ELSE(Year is > 70)*/
      XP1REC.XP1XSNCC = 19; /* Century must be 1900*/
    end /* End of "IF" statement*/
    XP1REC.XSNYR = XP1REC.XP1XSNYR; /* Move NUM value to BINARY field*/

      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

    ABWREC.ABWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
    while (ABWREC.ABWIDX5 != 9999) /* end of search condition*/
      if (YSNTBL.XSECD[ABWIDX5] == XP1REC.XSECD
       && YSNTBL.XSNYR[ABWIDX5] == XP1REC.XSNYR
       && YSNTBL.XGPCD[ABWIDX5] == "03"
       && YSNTBL.XDR-PROD-REG-CD[ABWIDX5] == "01")
        XP1REC.XXXSTAT = YSNTBL.XXXSTAT[ABWIDX5]; /* Move status*/
        if (XP1REC.XXXSTAT != "A") /* IF status not Active*/
          XP1REC.XP1ERRFL = "2"; /* MOVE error code to XP1REC*/
        end /* END of "IF" statement*/
        return; /* return*/
      else
        if (YSNTBL.XGPCD[ABWIDX5] != "99")
          ABWREC.ABWIDX5 = ABWIDX5 + 1;
        else
          ABWREC.ABWIDX5 = 9999; /* END OF TABLE*/
        end
      end
    end

    XP1REC.XP1ERRFL = "2"; /* MOVE error code to XP1REC*/

  end /* END of "IF" statement*/


   /* *********  end of SEASON/YEAR retrieval  **************/
end // end XSABSSN

// silhouette retrieval
Function XSABSSU()



                    /* silhouette retrieval*/



  XP1REC.XSUABRV = " ";
  XP1REC.XSUDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XSUCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "SILHOUETTE CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXSU01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XSUCD = XSUTBL.XSUCD[XX0XWPIX];
      XP1REC.XSUABRV = XSUTBL.XSUABRV[XX0XWPIX];
      XP1REC.XSUDESC = XSUTBL.XSUDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XSUTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (XP1REC.XSUCD in XSUTBL.XSUCD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XSUCD = XSUTBL.XSUCD[sysVar.arrayIndex];
      XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex];
      XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XSUTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* ***************  end of silhouette ****************/
end // end XSABSSU

// Exit to another application
Function XSAFS01()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AF0A") /* and main application menu*/
          COMMAREA.CATOAP = "FY0M"; /* Indicate Master Menu*/
        else
          if (COMMAREA.CAFROMAP == "AF0Z")
            COMMAREA.CATOAP = "AF0Z";
          else
            if (COMMAREA.CATOAP == "AF04")
              COMMAREA.CATOAP = "AF04";
            else
              COMMAREA.CATOAP = "AF0A";
            end
          end
        end
      end
    end
  end

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4)

    if (COMMAREA.CACURRAP == "AF0E"
     || COMMAREA.CACURRAP == "AF0B")
      COMMAREA.CATOAP = "AF0M";
    end

  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AF") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSAFS01

// Srch - typ, g/a, lin, cat, sil
Function XSAFS10()
   /* ------------------------------------------------------------*/
   /* *************************************************************/
   /* ------------------------------------------------------------*/
     /* SEARCH LOOPS FOR GENDER/AGE, CATEGORY, AND SILHOUETTE*/

    /* This statement group contains common looping code used*/
   /* by the XPAF100 process( Get next typ, g/a, lin, cat, sil*/
   /* code combination).*/

    /* 1. AF9REC must be included in the application using this*/
       /* statement group.*/

    /* 2. Passed codes indicate which table to go against;*/

         /* AF9TBLID - 'T' - product type table*/
                    /* 'G' - gender/age table*/
                    /* 'L' - Product line table*/
                    /* 'C' - category table*/
                    /* 'S' - silhouette table*/

   /* ------------------------------------------------------------*/
   /* *************************************************************/
   /* ------------------------------------------------------------*/


   /* ******************************/
    /* Find first valid typ code **/
   /* ******************************/
  if (AF9REC.AF9TBLID == "T") /* If pr typ table indicated*/

    AF9REC.AF9SWEND = "N"; /* Initialze loop end switch*/
    while (AF9REC.AF9SWEND == "N")
      if (XPRTBL.XXXSTAT[AF9TPIXM] == "A") /* If 'ACTIVE' status*/
        AF9REC.AF9SWEND = "Y"; /* then end loop*/
      else
        if (XPRTBL.XPRCD[AF9TPIXM] == "99") /* Check for end of table*/
          AF9REC.AF9SWEND = "Y"; /* End loop*/
        else
          AF9REC.AF9TPIXM = AF9REC.AF9TPIXM + 1; /* Loop through*/
        end
      end
    end

  end


   /* ******************************/
    /* Find first valid g/a code **/
   /* ******************************/
  if (AF9REC.AF9TBLID == "G") /* If gender/age table indicated*/

    AF9REC.AF9SWEND = "N"; /* Initialze loop end switch*/
    while (AF9REC.AF9SWEND == "N")
      if (XGATBL.XGPCD[AF9GAIXM] == "03" /* If apparel code*/
       && XGATBL.XXXSTAT[AF9GAIXM] == "A") /* and active*/
        /* AND XGATBL.XGACD(AF9GAIXM) NE '00' ;   and not 'not appl'*/
        AF9REC.AF9SWEND = "Y"; /* then end loop*/
      else
        if (XGATBL.XGACD[AF9GAIXM] == "99") /* Check for end of table*/
          AF9REC.AF9SWEND = "Y"; /* end loop*/
        else
          AF9REC.AF9GAIXM = AF9REC.AF9GAIXM + 1; /* Loop through*/
        end
      end
    end

  end


   /* ******************************/
    /* Find first valid lin code **/
   /* ******************************/
  if (AF9REC.AF9TBLID == "L") /* If pr lin table indicated*/

    AF9REC.AF9SWEND = "N"; /* Initialze loop end switch*/
    while (AF9REC.AF9SWEND == "N")
      if (XPLTBL.XGPCD[AF9LNIXM] == "03" /* If apparel code*/
       && XPLTBL.XXXSTAT[AF9LNIXM] == "A") /* and 'ACTIVE' status*/
        AF9REC.AF9SWEND = "Y"; /* then end loop*/
      else
        if (XPLTBL.XPLCD[AF9LNIXM] == "99") /* Check for end of table*/
          AF9REC.AF9SWEND = "Y"; /* End loop*/
        else
          AF9REC.AF9LNIXM = AF9REC.AF9LNIXM + 1; /* Loop through*/
        end
      end
    end

  end


   /* ******************************/
    /* Find first valid cat code **/
   /* ******************************/
  if (AF9REC.AF9TBLID == "C") /* If category table indicated*/

    AF9REC.AF9SWEND = "N"; /* Initialize loop end switch*/
    while (AF9REC.AF9SWEND == "N")
      if (XPCTBL.XGPCD[AF9PCIXM] == "03" /* If apparel code*/
       && XPCTBL.XXXSTAT[AF9PCIXM] == "A") /* and active*/
        /* AND XPCTBL.XPCCD(AF9PCIXM) NE '00'   ;   and not 'not appl'*/
        AF9REC.AF9SWEND = "Y"; /* then end loop*/
      else
        if (XPCTBL.XPCCD[AF9PCIXM] == "99") /* Check for end of table*/
          AF9REC.AF9SWEND = "Y"; /* end loop*/
        else
          AF9REC.AF9PCIXM = AF9REC.AF9PCIXM + 1; /* Loop through*/
        end
      end
    end

  end


   /* ******************************/
    /* Find first valid sil code **/
   /* ******************************/
  if (AF9REC.AF9TBLID == "S") /* If silhouette table indicated*/

    AF9REC.AF9SWEND = "N"; /* Initialize end loop switch*/
    while (AF9REC.AF9SWEND == "N")
      if (XSUTBL.XGPCD[AF9SUIXM] == "03" /* If apparel code*/
       && XSUTBL.XXXSTAT[AF9SUIXM] == "A") /* and active*/
        /* AND XSUTBL.XSUCD(AF9SUIXM) NE '00' ;   and not 'not appl'*/
        AF9REC.AF9SWEND = "Y"; /* then end loop*/
      else
        if (XSUTBL.XSUCD[AF9SUIXM] == "99") /* Check for end of table*/
          AF9REC.AF9SWEND = "Y";
        else
          AF9REC.AF9SUIXM = AF9REC.AF9SUIXM + 1; /* Loop through*/
        end
      end
    end

  end


end // end XSAFS10

// Division Codes Pop-up window
Function XSAFSDV()



                      /* Division Codes pop-up window*/



  XP1REC.XXXSTAT = " ";

  if (XP1REC.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "DIVISION CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXDV01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
      XP1REC.XDVDESC = XDVTBL.XDVDESC[XX0XWPIX];
      XP1REC.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of Division Code retrieval  *************/
end // end XSAFSDV

// gender/age pop-up window
Function XSAFSGA()



                      /* gender/age pop-up window*/



  XP1REC.XGAABRV = " ";
  XP1REC.XGADESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XGACD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXGA01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XGACD = XGATBL.XGACD[XX0XWPIX];
      XP1REC.XGAABRV = XGATBL.XGAABRV[XX0XWPIX];
      XP1REC.XGADESC = XGATBL.XGADESC[XX0XWPIX];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[XX0XWPIX];
    else
      XP1REC.XP1ERRFL = "1";
    end
  end


   /* *********  end of gender/age retrieval  **************/
end // end XSAFSGA

// life cycle popup wndow process
Function XSAFSLC()



                      /* Life cycle pop-up window*/



  XP1REC.XXXSTAT = " ";

  if (XP1REC.XLCCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "LIFE CYCLE CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXLC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XLCCD = XLCTBL.XLCCD[XX0XWPIX];
      XP1REC.XLCABRV = XLCTBL.XLCABRV[XX0XWPIX];
      XP1REC.XLCDESC = XLCTBL.XLCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XLCTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of Product Type Code retrieval  *************/
end // end XSAFSLC

// owner group pop-up window
Function XSAFSOW()
   /* -------------------------------------------------------------------*/
                    /* owner group pop-up window*/
   /* -------------------------------------------------------------------*/


  XP1REC.XOWABRV = " ";
  XP1REC.XOWDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XOWCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XWHCD = "51";
    XX0XW02.XX0XWHDR = "OWNER GROUP CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXOW01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XOWCD = XOWTBL.XOWCD[XX0XWPIX];
      XP1REC.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
      XP1REC.XOWDESC = XOWTBL.XOWDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XOWTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *************** end of owner group ***************/
end // end XSAFSOW

// product category pop-up window
Function XSAFSPC()



                    /* product category pop-up window*/



  XP1REC.XPCABRV = " ";
  XP1REC.XPCDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XPCCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXPC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XPCCD = XPCTBL.XPCCD[XX0XWPIX];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of product category retrieval *********/
end // end XSAFSPC

// Product Line Pop-up window
Function XSAFSPL()



                      /* Product Line pop-up window*/



  XP1REC.XXXSTAT = " ";

  if (XP1REC.XPLCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXPL01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XPLCD = XPLTBL.XPLCD[XX0XWPIX];
      XP1REC.XPLDESC = XPLTBL.XPLDESC[XX0XWPIX];
      XP1REC.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XPLTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of Product Line Code retrieval  *************/
end // end XSAFSPL

// Product Type Pop-up window
Function XSAFSPR()



                      /* Product Type pop-up window*/



  XP1REC.XXXSTAT = " ";

  if (XP1REC.XPRCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT TYPE CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXPR01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XPRCD = XPRTBL.XPRCD[XX0XWPIX];
      XP1REC.XPRDESC = XPRTBL.XPRDESC[XX0XWPIX];
      XP1REC.XPRABRV = XPRTBL.XPRABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XPRTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of Product Type Code retrieval  *************/
end // end XSAFSPR

// season code pop-up window
Function XSAFSSE()



                      /* season code pop-up window*/



  XP1REC.XXXSTAT = " ";

  if (XP1REC.XSECD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "SEASON CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXSE01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XSECD = XSETBL.XSECD[XX0XWPIX];
      XP1REC.XXXSTAT = XSETBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* *********  end of season code retrieval  **************/
end // end XSAFSSE

// silhouette pop-up window
Function XSAFSSU()



                    /* silhouette pop-up window*/



  XP1REC.XSUABRV = " ";
  XP1REC.XSUDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XSUCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "SILHOUETTE CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXSU01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XSUCD = XSUTBL.XSUCD[XX0XWPIX];
      XP1REC.XSUABRV = XSUTBL.XSUABRV[XX0XWPIX];
      XP1REC.XSUDESC = XSUTBL.XSUDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XSUTBL.XXXSTAT[XX0XWPIX];
    end

  end


   /* ***************  end of silhouette ****************/
end // end XSAFSSU

// owner group retrieval
Function XSASS-XOW()
   /* -------------------------------------------------------------------*/
   /* owner group retrieval*/
   /* -------------------------------------------------------------------*/


  AS1REC.AS1-VALID-FL = "0";

  AS1REC.XOWABRV = " ";
  AS1REC.XOWDESC = " ";
  AS1REC.XXXSTAT = " ";

  XPXX001(); /* init for pop up window*/
  XX0XW02.XGPCD = AS1REC.XGPCD;
  XX0XW02.XWHCD = AS1REC.XWHCD;
  XX0XW02.XX0XWHDR = "OWNER GROUP CODE";

  while (XX0XW02.XX0XWEND == "N")

    XPXOW01(); /* perform pop up window routine*/

  end

  if (XX0XW02.XX0XWERR == "1")
    AS1REC.AS1-VALID-FL = "1";
  else
    if (XX0XW02.XX0XWPIX > 0)
      AS1REC.XOWCD = XOWTBL.XOWCD[XX0XWPIX];
      AS1REC.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
      AS1REC.XOWDESC = XOWTBL.XOWDESC[XX0XWPIX];
      AS1REC.XXXSTAT = XOWTBL.XXXSTAT[XX0XWPIX];
    end
  end


   /* ***********************  end of XSASSOW *******************************/
end // end XSASS-XOW

// season code pop-up window
Function XSASS-XSE()

                      /* season code retrieval*/


  AS1REC.XXXSTAT = " ";
  AS1REC.XSEABRV = " ";
  AS1REC.XSEDESC = " ";

  if (AS1REC.XSECD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = AS1REC.XGPCD;
    XX0XW02.XX0XWHDR = "SEASON CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXSE01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AS1REC.XSECD = XSETBL.XSECD[XX0XWPIX];
      AS1REC.XSEABRV = XSETBL.XSEABRV[XX0XWPIX];
      AS1REC.XSEDESC = XSETBL.XSEDESC[XX0XWPIX];
      AS1REC.XXXSTAT = XSETBL.XXXSTAT[XX0XWPIX];
    end

  else

    if (AS1REC.XSECD in XSETBL.XSECD)
      AS1REC.XSECD = XSETBL.XSECD[sysVar.arrayIndex];
      AS1REC.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
      AS1REC.XSEABRV = XSETBL.XSEABRV[sysVar.arrayIndex];
      AS1REC.XXXSTAT = XSETBL.XXXSTAT[sysVar.arrayIndex];
    else
      AS1REC.AS1-VALID-XSE-FL = "1";
    end
  end
  if (AS1REC.XXXSTAT != "A")
    AS1REC.AS1-VALID-XSE-FL = "1";
  end


   /* *************************  end of XSASSSE ***************************/
end // end XSASS-XSE

// Exit to another application
Function XSAVS01()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = AVWREC.CAUSERA; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* CURR application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end

  end


end // end XSAVS01

// maint availability invent D/Bs
Function XSAVS10()
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine processes parameters sent by a calling*/
   /* module.  It will update, insert, or delete a row in*/
   /* DAVAIL.VAINV001.  It will insert a row in DAVAIL.VAINVA01.*/

   /* Copybooks AVJREC, AVKREC, AVLREC, and TA1REC must be*/
   /* included in the calling module's process list in order to*/
   /* use this subroutine.  AVLREC contains the parameters*/
   /* passed between the calling module and subroutine.  There*/
   /* are also work fields in AVLREC used only by the subroutine.*/

   /* The warehouse code, owner group code, style number,*/
   /* color code, dimension code, quality code, inventory*/
   /* segment code, package type code, calling module's ID,*/
   /* user comment(optional), 40 quantity adjustments, current*/
   /* date, and current time must be passed to this subroutine.*/
   /* (AVLREC must be initialized before loading parameters.)*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XWHCD   : Warehouse code                   ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XOWCD   : Owner group code                 ****/
   /* ***                                                     ****/
   /* ***   AVLREC.SY1STNBR: Style number                     ****/
   /* ***                                                     ****/
   /* ***   AVLREC.SY2CLRID: Color identification             ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XDMCD   : Dimension code                   ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XQACD   : Quality of product               ****/
   /* ***                                                     ****/
   /* ***   AVLREC.PG2INSEG: Inventory segment code           ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XPGCD   : Packaging requirements for prods ****/
   /* ***                                                     ****/
   /* ***   AVLREC.XXXUSER : Calling module's appl ID         ****/
   /* ***                                                     ****/
   /* ***   AVLREC.AV2CMNT : User comment (optional)          ****/
   /* ***                                                     ****/
   /* ***   AVLREC.AVLADJQT: Adjustment quantities*/
   /* ***                                                     ****/
   /* ***   AVLREC.ZZZCHGDT: Current date                     ****/
   /* ***                                                     ****/
   /* ***   AVLREC.ZZZCHGTM: Current time                     ****/
   /* ***                                                     ****/
   /* ***   TA1REC.TA1PGMNM: The name of the calling process, ****/
   /* ***                    for Error Diagnosis Reporting.   ****/

   /* This subroutine will return a message code in AVLREC.*/
   /* AVLRTNCD to indicate any error condition encountered.*/
   /* The subroutine will format and display the TA0020 screen,*/
   /* whenever a DB2 or CICS error condition occurs.*/

   /* ***                                                     ****/
   /* ***   AVLREC.AVLRTNCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '0' = Normal return                               ****/
   /* ***   '1' = Calling parameters missing or invalid       ****/
   /* ***   '2' = Negative amount too large to process        ****/
   /* ***   '3' = Intervening update has occurred             ****/
   /* ***   '4' = Data base resource is unavailable           ****/
   /* ***   '5' = System error has occurred                   ****/
   /* ***                                                     ****/
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/


   /* ------------------------------------------------------------*/
   /* Verify that parameters were sent. (Blanks in warehouse are*/
   /* valid.)*/
   /* ------------------------------------------------------------*/

  if (AVLREC.XOWCD == " "    /* If owner group cd missing*/
   || AVLREC.SY1STNBR == " " /* or style number missing*/
   || AVLREC.SY2CLRID == " " /* or color missing*/
   || AVLREC.XDMCD == " "    /* or dimension cd missing*/
   || AVLREC.XQACD == " "    /* or quality cd missing*/
   || AVLREC.PC2INSEG == " " /* or inv seg cd missing*/
   || AVLREC.XPGCD == " "    /* or package requirement  missing*/
   || AVLREC.XXXUSER == " "  /* or application ID missing*/
   || AVLREC.ZZZCHGDT == 0   /* or current date missing*/
   || AVLREC.ZZZCHGTM == 0   /* or current time missing*/
   || TA1REC.TA1PGMNM == " ") /* or name of calling process missing*/

    AVLREC.AVLRTNCD = 1; /* Indicate invalid parameters*/

  else

    /* ------------------------------------------------------------*/
     /* Select DAVAIL.VAINV001.*/
    /* ------------------------------------------------------------*/
    XSAVS11(); /* Select AINV*/

    if (AVLREC.AVLRTNCD != 0) /* If error encountered*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row was found, edit, calculate quantities, and update.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      XSAVS12(); /* Edit quantities*/

      if (AVLREC.AVLRTNCD != 0) /* If error encountered*/
        return; /* Return to previous process*/
      end

      /* ------------------------------------------------------------*/
       /* If total is zero, delete row.*/
      /* ------------------------------------------------------------*/
      if (AVLREC.AVLTOTL == 0) /* If total equal zero*/
        AVLREC.AVLACTCD = "D"; /* Indicate delete was done*/
        XSAVS13(); /* Delete AINV*/

      else
        /* ------------------------------------------------------------*/
         /* If total is not zero, update row.*/
        /* ------------------------------------------------------------*/
        XSAVS14(); /* Update AINV*/

      end

    else
      /* ------------------------------------------------------------*/
       /* If row was not found, insert row.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/

        XSAVS15(); /* Insert AINV*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If no error has been encountered, write audit.*/
    /* ------------------------------------------------------------*/
    if (AVLREC.AVLRTNCD == 0) /* If no error encountered*/

      /* ------------------------------------------------------------*/
       /* Format and insert DAVAIL.VAINVA01.*/
      /* ------------------------------------------------------------*/
      XSAVS16(); /* Format AINVA*/
      XSAVS17(); /* Insert AINVA*/

      if (AVLREC.AVLACTCD == "D") /* If delete was done*/
        /* ------------------------------------------------------------*/
         /* write out second audit record, showing delete was performed*/
        /* ------------------------------------------------------------*/
        AVKREC.AV2CMNT = "ROW WAS DELETED"; /* User comment*/
        move 0 to AVKREC.AVJONQTY[1] for all; /* Amount fields*/

        XSAVS17(); /* Insert AINVA*/
      end
    end

  end


end // end XSAVS10

// Select AINV
Function XSAVS11()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format avjREC.*/
   /* ------------------------------------------------------------*/

  AVJREC.XWHCD = AVLREC.XWHCD; /* Warehouse cd*/
  AVJREC.XOWCD = AVLREC.XOWCD; /* Owner group cd*/
  AVJREC.SY1STNBR = AVLREC.SY1STNBR; /* Style number*/
  AVJREC.SY2CLRID = AVLREC.SY2CLRID; /* Color*/
  AVJREC.XDMCD = AVLREC.XDMCD; /* Dimension cd*/
  AVJREC.XQACD = AVLREC.XQACD; /* Quality cd*/
  AVJREC.PC2INSEG = AVLREC.PC2INSEG; /* Inv seg cd*/
  AVJREC.XPGCD = AVLREC.XPGCD; /* Package requirement*/

   /* ------------------------------------------------------------*/
   /* Select DAVAIL.VAINV001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5510" ("S ", SQLCA, AVJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to caller.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    AVLREC.AVLRTNCD = 4; /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    AVLREC.AVLRTNCD = 5; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUBROUTINE XSAVS11 - SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XPAV100"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINV001"; /* Table view name*/
  TA1REC.TA1TBLKE = AVJREC.AVJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end XSAVS11

// Edit adj and calc new qty
Function XSAVS12()
   /* ------------------------------------------------------------*/
   /* Verify negative adjustments.  Calculate and save adjusted*/
   /* quantities for data base updates.*/
   /* ------------------------------------------------------------*/

  AVLREC.AVLCOUNT = 1; /* Initialize counter*/

  while (AVLREC.AVLCOUNT <= 40) /* Until count is 40*/

    /* ------------------------------------------------------------*/
     /* Verify that enough quantity exists on data base to subtract*/
     /* out any negative adjustments without leaving the data base*/
     /* with a negative balance.*/
    /* ------------------------------------------------------------*/
    if (AVLREC.AVLADJQT[AVLCOUNT] < 0) /* If adjustment is negative*/

      /* ------------------------------------------------------------*/
       /* Calculate what the new D/B quantity will be.*/
      /* ------------------------------------------------------------*/
      AVLREC.AVLFLDB = AVLREC.AVLADJQT[AVLCOUNT];
      AVLREC.AVLFLDA = AVJREC.AVJONQTY[AVLCOUNT] + AVLREC.AVLFLDB;

      /* ------------------------------------------------------------*/
       /* If there is not enough quantity on D/B to subtract out the*/
       /* adjustment amount, indicate error to calling module.*/
      /* ------------------------------------------------------------*/
      if (AVLREC.AVLFLDA < 0) /* If adjustment is negative*/

        AVLREC.AVLRTNCD = 2; /* Indicate amount too large*/
        return; /* Return to previous process*/

      else
        /* ------------------------------------------------------------*/
         /* Else, load the calculated amount.*/
        /* ------------------------------------------------------------*/
        AVJREC.AVJONQTY[AVLCOUNT] = AVLREC.AVLFLDA;

      end
    end

    /* ------------------------------------------------------------*/
     /* Calculate positive amounts.  Process zero adjustments so*/
     /* that you will have loaded the original amount back to D/B.*/
    /* ------------------------------------------------------------*/
    if (AVLREC.AVLADJQT[AVLCOUNT] >= 0) /* If adjustment is GE 0*/

      /* ------------------------------------------------------------*/
       /* Calculate what the new D/B quantity will be.*/
      /* ------------------------------------------------------------*/
      AVLREC.AVLFLDB = AVLREC.AVLADJQT[AVLCOUNT];
      AVLREC.AVLFLDA = AVJREC.AVJONQTY[AVLCOUNT] + AVLREC.AVLFLDB;

      /* ------------------------------------------------------------*/
       /* Save the calculated amount.*/
      /* ------------------------------------------------------------*/
      AVJREC.AVJONQTY[AVLCOUNT] = AVLREC.AVLFLDA;

    end

    /* ------------------------------------------------------------*/
     /* Add to total on hand quantity.*/
    /* ------------------------------------------------------------*/
    AVLREC.AVLTOTL = AVLREC.AVLTOTL + AVLREC.AVLFLDA;

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    AVLREC.AVLCOUNT = AVLREC.AVLCOUNT + 1; /* Increment counter*/

  end

   /* ------------------------------------------------------------*/
   /* Check if all the adjusted quantities add up to zero.  If*/
   /* so, move 'D' to the action code, indicating that the row*/
   /* should be deleted.*/
   /* ------------------------------------------------------------*/
  if (AVLREC.AVLTOTL == 0) /* If total equal zero*/
    AVLREC.AVLACTCD = "D"; /* Action code*/

  end


end // end XSAVS12

// Delete AINV
Function XSAVS13()
   /* ------------------------------------------------------------*/
   /* Delete AINV.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5510" ("D ", SQLCA, AVJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == +0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to caller.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    AVLREC.AVLRTNCD = 4; /* Indicate resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    AVLREC.AVLRTNCD = 5; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUBROUTINE XSAVS13 - DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINV001"; /* Table view name*/
  TA1REC.TA1TBLKE = AVJREC.AVJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end XSAVS13

// Update AINV
Function XSAVS14()
   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/

  AVJREC.ZZZCHGDT = AVLREC.ZZZCHGDT; /* Setup date*/
  AVJREC.ZZZCHGTM = AVLREC.ZZZCHGTM; /* Setup time*/

   /* ------------------------------------------------------------*/
   /* Insert DAVAIL.VAINV001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5510" ("U ", SQLCA, AVJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
      AVLREC.AVLRTNCD = 3; /* Indicate intervening updt occurred*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to caller.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    AVLREC.AVLRTNCD = 4; /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    AVLREC.AVLRTNCD = 5; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUBROUTINE XSAVS14 - UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = "XPAV100"; /* Subroutine number*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINV001"; /* Table view name*/
  TA1REC.TA1TBLKE = AVJREC.AVJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end XSAVS14

// Insert AINV
Function XSAVS15()
   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/

  AVJREC.ZZZSDT = AVLREC.ZZZCHGDT; /* Setup date*/
  AVJREC.ZZZSTM = AVLREC.ZZZCHGTM; /* Setup time*/
  AVJREC.ZZZCHGDT = AVLREC.ZZZCHGDT; /* Change date*/
  AVJREC.ZZZCHGTM = AVLREC.ZZZCHGTM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Load amounts.*/
   /* ------------------------------------------------------------*/

  AVLREC.AVLCOUNT = 1; /* Initialize counter*/
  while (AVLREC.AVLCOUNT <= 40) /* Until count is 40*/

    if (AVLREC.AVLADJQT[AVLCOUNT] >= 0) /* If amount not zero*/
      AVJREC.AVJONQTY[AVLCOUNT] = AVLREC.AVLADJQT[AVLCOUNT]; /* Amounts*/
    else
      AVLREC.AVLRTNCD = 2; /* Indicate neg amt can't process*/
      return; /* Return to previous process*/
    end

    AVLREC.AVLCOUNT = AVLREC.AVLCOUNT + 1; /* Increment counter*/
  end

   /* ------------------------------------------------------------*/
   /* Insert DAVAIL.VAINV001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5510" ("A ", SQLCA, AVJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to caller.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    AVLREC.AVLRTNCD = 4; /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    AVLREC.AVLRTNCD = 5; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUBROUTINE XSAVS15 - ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XPAV100"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINV001"; /* Table view name*/
  TA1REC.TA1TBLKE = AVJREC.AVJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end XSAVS15

// Format AINVA (audit)
Function XSAVS16()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set AVKREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/

  AVKREC.XWHCD = AVLREC.XWHCD; /* Warehouse cd*/
  AVKREC.XOWCD = AVLREC.XOWCD; /* Owner group cd*/
  AVKREC.SY1STNBR = AVLREC.SY1STNBR; /* Style number*/
  AVKREC.SY2CLRID = AVLREC.SY2CLRID; /* Color*/
  AVKREC.XDMCD = AVLREC.XDMCD; /* Dimension cd*/
  AVKREC.XQACD = AVLREC.XQACD; /* Quality cd*/
  AVKREC.PC2INSEG = AVLREC.PC2INSEG; /* Inv seg cd*/
  AVKREC.XPGCD = AVLREC.XPGCD; /* Package requirement*/

  AVKREC.XXXUSER = AVLREC.XXXUSER; /* User identification*/
  AVKREC.AV2CMNT = AVLREC.AV2CMNT; /* User comment*/

  AVKREC.ZZZSDT = AVLREC.ZZZCHGDT; /* Setup date*/
  AVKREC.ZZZSTM = AVLREC.ZZZCHGTM; /* Setup time*/

   /* ------------------------------------------------------------*/
   /* Load amounts.*/
   /* ------------------------------------------------------------*/

  AVLREC.AVLCOUNT = 1; /* Initialize counter*/

  while (AVLREC.AVLCOUNT <= 40) /* Until count is 40*/

    AVKREC.AVJONQTY[AVLCOUNT] = AVLREC.AVLADJQT[AVLCOUNT]; /* Amounts*/

    AVLREC.AVLCOUNT = AVLREC.AVLCOUNT + 1; /* Increment counter*/

  end


end // end XSAVS16

// Insert AINVA (audit)
Function XSAVS17()
   /* ------------------------------------------------------------*/
   /* Insert DAVAIL.VAINVA01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5520" ("A ", SQLCA, AVKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to caller.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    AVLREC.AVLRTNCD = 4; /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    AVLREC.AVLRTNCD = 5; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUBROUTINE XSAVS17 - UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "XPAV100"; /* Program number*/
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVKREC.AVKKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end XSAVS17

// db2 to map date conversion
Function XSAZDCM()
   /* Convert db2 date to mmddyy*/

   /* the calling stmt group must move the database date*/
   /* to AZWREC.AZWDT8 before enterning this routine*/

  AZWREC.AZWDT6Y = AZWREC.AZWDT8Y;
  AZWREC.AZWDT6M = AZWREC.AZWDT8M;
  AZWREC.AZWDT6D = AZWREC.AZWDT8D;

   /* the calling stmt group needs to move*/
   /* AZWREC.AZWDT6 to the requested map field.*/

end // end XSAZDCM

// APPL post routine ta0020
Function XSAZENP()
       /* Non-DB2 post routine*/

   /* the following fields will be filled in by the*/
   /* calling stmt group before entering this routine*/
     /* ta1locat(1) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = calling stmt group name*/
     /* ta1locat(4) = programmers option(extra key data)*/
     /* taerec.taedesc1 = programmers opiton (additional key data*/
     /* taerec.taedesc2 = messages*/
     /* ta1map = appl's mapname and should be initilized*/
              /* in the programs init process.*/
   /* return code processing will also be handled by the*/
   /* calling stmt group.*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "POST";
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  TA1REC.TA1TBLKE = AZWREC.AZWSYSKE; /* move system key*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end XSAZENP

// APPL retn routine no rollback
Function XSAZENR()
    /* Non-DB2 return no rollback - will xfer to main menu*/

    /* this routine to be used when there are no updates*/

   /* the following fields will be filled in by the*/
   /* calling stmt group before entering this routine*/
     /* ta1locat(1) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = calling stmt group name*/
     /* ta1locat(4) = programmers option(extra key data)*/
     /* ta1map = appl's mapname and should be initialized*/
              /* in the programs init process.*/
     /* taerec.taedesc1 = programmers opiton (additional key data*/
     /* taerec.taedesc2 = messages*/
   /* return code processing will also be handled by the*/
   /* calling stmt group.*/


  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "RETN";
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  TA1REC.TA1TBLKE = AZWREC.AZWSYSKE; /* move key*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* to close cursors*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end
  XSAZP04(); /* master menu*/
  exit program; /* master menu failure*/


end // end XSAZENR

// AZ SYSTEM - HANDLE PF3
Function XSAZP03()

    /* Transfer to ASN Batch - ASN Select*/

  COMMAREA.CATOAP = "AZ0B";
  XSEXIT();

end // end XSAZP03

// AZ SYSTEM - HANDLE PF4
Function XSAZP04()

   /* Transfer control to the Main Menu.*/

   /* purge all temp storage first*/

  XSAZT1P(); /* purge ASNs*/
  XSAZT2P(); /* purge ORDERs*/
  XSAZT3P(); /* purge CARTONs*/

  XSPF4();



end // end XSAZP04

// purge temp storage 1 - ASNs
Function XSAZT1P()

   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "AZF1"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (AZAREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    AZWREC.AZWTSF1P = 1;
    AZWREC.AZWTSF1S = 1;
    AZWREC.AZWTSF1M = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSAZENP(); /* post,  no rollback, non db2*/

  end
end // end XSAZT1P

