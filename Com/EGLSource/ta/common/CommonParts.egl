package ta.common;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
// Obtain the working storage
Function TA0P100()
   /* ------------------------------------------------------------*/
   /* Initialize the CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/

   /* ------------------------------------------------------------*/
   /* Initialize the working storage areas and variables.*/
   /* ------------------------------------------------------------*/

  set TA0PW00 empty; /* Working storage*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA5REC empty; /* Temporary storage parameters*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TA0PW00.XXXTSLEN = 178; /* Temporary storage page length*/
  TA5REC.TA5APPID = "TA0P"; /* Application identification*/

   /* ------------------------------------------------------------*/
   /* Obtain the working storage from temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TA0PW00, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA5REC.TA5RTNCD == 0) /* Normal return*/
      return; /* Return to previous process*/
    end

    if (TA5REC.TA5RTNCD == 4 /* Queue not found*/
     && TA6REC.TA6RTNCD == " ") /* and first time through*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE WORKING STORAGE";
  TA1REC.TA1PGMNM = "TA0P100 "; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate storage error and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "6"; /* Temporary storage error*/

  exit program; /* Return to calling application*/


end // end TA0P100

// Verify the passed parameters
Function TA0P200()
   /* ------------------------------------------------------------*/
   /* Indicate an error if submit switch is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "N" /* Submit switch N*/
   || TA6REC.TA6SUBSW == "Y" /* or submit switch Y*/
   || TA6REC.TA6SUBSW == "I" /* or submit switch I*/
   || TA6REC.TA6SUBSW == "S") /* or submit switch S*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Post the error information to the Error Diagnosis Facility.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = "SUBMIT SWITCH IS MISSING OR INVALID";
    TAEREC.TAEDESC2 = TA6REC.TA6SUBSW; /* Submit switch*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY THE PASSED PARAMETERS";
    TA1REC.TA1PGMNM = "TA0P200 "; /* Process name*/
    TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Indicate parameter error and return to calling application.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

    exit program; /* Return to calling application*/

  end

   /* **************************************************************/
   /* **************************************************************/
   /* **************************************************************/
   /* ------------------------------------------------------------*/
   /* Indicate an error if max-cond-code is missing or invalid*/
   /*  */
   /* valid cond-code = 0000 thru 3999 (for programmer use only)*/
   /* valid cond-code = 4000 thru 4095 (reserved for appl support*/
   /* and are thus invalid for programmers)*/
   /* ------------------------------------------------------------*/

      /* ------------------------------------------------------------*/
       /* if ta6-max-cond-code not numeric,*/
       /* move 0000 to ta6-max-cond-code*/
      /* ------------------------------------------------------------*/
  TA0PW-TA6-MAX-CC-ALL = TA6REC.TA6-MAX-COND-CODE-ALL;
  TA0PW-TA6-MAX-CC-SS = 0;
  while (TA0PW-TA6-MAX-CC-SS < 4)
    TA0PW-TA6-MAX-CC-SS = TA0PW-TA6-MAX-CC-SS + 1;
    if (TA0PW-TA6-MAX-CC-CHAR[TA0PW-TA6-MAX-CC-SS] >= "0"
     && TA0PW-TA6-MAX-CC-CHAR[TA0PW-TA6-MAX-CC-SS] <= "9")
      TA0PW-TA6-MAX-CC-NUM-IND[TA0PW-TA6-MAX-CC-SS] = "Y";
    else
      TA0PW-TA6-MAX-CC-NUM-IND[TA0PW-TA6-MAX-CC-SS] = "N";
    end
  end


  if (TA0PW-TA6-MAX-CC-NUM-IND[1] == "N"
   || TA0PW-TA6-MAX-CC-NUM-IND[2] == "N"
   || TA0PW-TA6-MAX-CC-NUM-IND[3] == "N"
   || TA0PW-TA6-MAX-CC-NUM-IND[4] == "N")
    TA6REC.TA6-MAX-COND-CODE = 0000;
  end

      /* ------------------------------------------------------------*/
  if (TA6REC.TA6-MAX-COND-CODE < 4000) /* cond-code must be lt 4000*/
       /* NEXT SENTENCE*/

  else

      /* ------------------------------------------------------------*/
       /* Post the error information to the Error Diagnosis Facility.*/
      /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = "JCL COND-CODE IS MISSING OR INVALID";
    TAEREC.TAEDESC2 = TA6REC.TA6MSGSW; /* Submit switch*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY THE PASSED PARAMETERS";
    TA1REC.TA1PGMNM = "TA0P200 "; /* Process name*/
    TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Indicate parameter error and return to calling application.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

    exit program; /* Return to calling application*/

  end

   /* ------------------------------------------------------------*/
   /* Verify other parameters if a job is to be submitted.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "Y" /* Submit switch Y*/
   || TA6REC.TA6SUBSW == "S") /* or submit switch S*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if message switch is missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6MSGSW == "N" /* Message switch N*/
     || TA6REC.TA6MSGSW == "Y") /* or message switch Y*/

       /* NEXT SENTENCE*/

    else

      /* ------------------------------------------------------------*/
       /* Post the error information to the Error Diagnosis Facility.*/
      /* ------------------------------------------------------------*/

      TAEREC.TAEDESC1 = "MESSAGE SWITCH IS MISSING OR INVALID";
      TAEREC.TAEDESC2 = TA6REC.TA6MSGSW; /* Submit switch*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "VERIFY THE PASSED PARAMETERS";
      TA1REC.TA1PGMNM = "TA0P200 "; /* Process name*/
      TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Indicate parameter error and return to calling application.*/
      /* ------------------------------------------------------------*/

      TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

      exit program; /* Return to calling application*/

    end

    /* ------------------------------------------------------------*/
     /* Indicate an error if both OUTPUT and report distribution.*/
    /* ------------------------------------------------------------*/

    if ("O" in TA6REC.TARTYPE /* OUTPUT statement*/
     && "R" in TA6REC.TARTYPE) /* and report distribution*/

      /* ------------------------------------------------------------*/
       /* Post the error information to the Error Diagnosis Facility.*/
      /* ------------------------------------------------------------*/

      TAEREC.TAEDESC1 = "BOTH /*OUTPUT AND REPORT DISTRIBUTION FOUND";

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "VERIFY THE PASSED PARAMETERS";
      TA1REC.TA1PGMNM = "TA0P200 "; /* Process name*/
      TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Indicate parameter error and return to calling application.*/
      /* ------------------------------------------------------------*/

      TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

      exit program; /* Return to calling application*/

    end

    /* ------------------------------------------------------------*/
     /* Indicate an error if end of file statement is not found.*/
    /* ------------------------------------------------------------*/

    if ("/*EOF" in TA6REC.TARJCL) /* End of file statement*/

       /* NEXT SENTENCE*/

    else

      /* ------------------------------------------------------------*/
       /* Post the error information to the Error Diagnosis Facility.*/
      /* ------------------------------------------------------------*/

      TAEREC.TAEDESC1 = "/*EOF STATEMENT WAS NOT FOUND";

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "VERIFY THE PASSED PARAMETERS";
      TA1REC.TA1PGMNM = "TA0P200 "; /* Process name*/
      TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Indicate /*EOF error and return to calling application.*/
      /* ------------------------------------------------------------*/

      TA6REC.TA6RTNCD = "3"; /* End of file not found*/

      exit program; /* Return to calling application*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Initialize the distribution information in display storage.*/
   /* ------------------------------------------------------------*/

  TA0PW00.XURUSRNM = TA6REC.XURUSRNM; /* User name*/
  TA0PW00.XURBLDID = TA6REC.XURBLDID; /* Location*/
  TA0PW00.XURDEST = TA6REC.XURDEST; /* Report destination*/
  TA0PW00.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Obtain the user report distribution information.*/
   /* ------------------------------------------------------------*/

  TA0P210(); /* Obtain the user information*/

   /* ------------------------------------------------------------*/
   /* Merge with the distribution information in display storage.*/
   /* ------------------------------------------------------------*/

  TA0PW00.XURUSRID = TA3REC.TA3USRID; /* User identification*/

  if (TA0PW00.XURUSRNM > " ") /* Report recipient specified*/

     /* NEXT SENTENCE*/
  else
    TA0PW00.XURUSRNM = TA3REC.XURUSRNM; /* User name*/

  end

  if (TA0PW00.XURDEST > " ") /* Output destintation specified*/

     /* NEXT SENTENCE*/
  else
    TA0P220(); /* Reformat default remote printer*/
                                  /* to be compatible with XROTBL.*/
  end

  if (TA0PW00.XURDEST in XROTBL.XROPDEST /* Printer in table*/
   && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    TA0PW00.XRODESC = XROTBL.XRODESC[sysVar.arrayIndex]; /* Description*/

  else

    TA0PM001.XURDEST = TA0PW00.XURDEST; /* Output destination*/
    TA0PM001.XRODESC = " "; /* Description*/

    TA0PW00.XURDEST = " "; /* Output destination*/
    TA0PW00.XRODESC = " "; /* Description*/

    TA6REC.TA6ERRFL[14] = "Y"; /* Field error flag*/
    VAGen_EZEMSG = TA0PT01.XXXMSG[13]; /* Printer missing or invalid*/

  end

  if (TA0PW00.XURBLDID > " ") /* Location specified*/

     /* NEXT SENTENCE*/

  else

    if (TA0PW00.XURDEST in XROTBL.XROPDEST /* Printer in table*/
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      TA0PW00.TA0PWLOC = XROTBL.XROABRV[sysVar.arrayIndex]; /* Location*/
      TA0PW00.XURBLDID = TA0PW00.TA0PWLOC; /* Four-character location*/
    else
      TA0PW00.XURBLDID = " "; /* Location*/

    end

  end

  if (TA0PW00.XURCOPY < 1 /* Copies less than 1*/
   || TA0PW00.XURCOPY > 9) /* or greater than 9*/

    TA0PW00.XURCOPY = 1; /* Number of copies to print*/

  end


end // end TA0P200

// Obtain the user information
Function TA0P210()
   /* ------------------------------------------------------------*/
   /* Obtain the user report distribution information.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "RPTDIST"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE USER INFORMATION";
  TA1REC.TA1PGMNM = "TA0P210"; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate user error and return to the calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "4"; /* User information error*/

  exit program; /* Return to calling application*/


end // end TA0P210

// Reformat default remote prtr
Function TA0P220()
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  /* If default remote printer is not set, bypass this process.*/
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  if (TA3REC.TA3PRTR1 == " ")
    TA0PW00.XURDEST = " ";
    return;
  end
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  /* Reformat the TA3REC.TA3PRTR1 default remote printer to be*/
  /* compatible with format used in XROTBL.*/
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  TA0PW-RMTDEST = TA3REC.TA3PRTR1; /* Load workarea w/remote dest*/
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  /* Process a numeric test on all characters in the TA0PW-RMTDEST field*/
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  TA0PW-RMTDEST-SS = 0;
  while (TA0PW-RMTDEST-SS < 8)
    TA0PW-RMTDEST-SS = TA0PW-RMTDEST-SS + 1;
    if (TA0PW-RMTDEST-CHAR[TA0PW-RMTDEST-SS] >= "0"
     && TA0PW-RMTDEST-CHAR[TA0PW-RMTDEST-SS] <= "9")
      TA0PW-RMTDEST-NUMERIC-IND[TA0PW-RMTDEST-SS] = "Y";
    else
      TA0PW-RMTDEST-NUMERIC-IND[TA0PW-RMTDEST-SS] = "N";
    end
  end
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  /* Reformat remote printer dest*/
  /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  TA0PW-RMTDEST-FRMT-PFX = "RMT";
  if (TA0PW-RMTDEST-CHAR[1] == "R")
    if (TA0PW-RMTDEST-NUMERIC-IND[5] == "N"
     && TA0PW-RMTDEST-NUMERIC-IND[6] == "N"
     && TA0PW-RMTDEST-NUMERIC-IND[7] == "N"
     && TA0PW-RMTDEST-NUMERIC-IND[8] == "N")
      if (TA0PW-RMTDEST-NUMERIC-IND[2] == "Y"
       && TA0PW-RMTDEST-NUMERIC-IND[3] == "Y"
       && TA0PW-RMTDEST-NUMERIC-IND[4] == "Y")
        TA0PW-RMTDEST-FRMT-CHAR[1] = TA0PW-RMTDEST-CHAR[2];
        TA0PW-RMTDEST-FRMT-CHAR[2] = TA0PW-RMTDEST-CHAR[3];
        TA0PW-RMTDEST-FRMT-CHAR[3] = TA0PW-RMTDEST-CHAR[4];
      else
        if (TA0PW-RMTDEST-NUMERIC-IND[2] == "Y"
         && TA0PW-RMTDEST-NUMERIC-IND[3] == "Y")
          TA0PW-RMTDEST-FRMT-CHAR[1] = TA0PW-RMTDEST-CHAR[2];
          TA0PW-RMTDEST-FRMT-CHAR[2] = TA0PW-RMTDEST-CHAR[3];
          TA0PW-RMTDEST-FRMT-CHAR[3] = " ";
        else
          if (TA0PW-RMTDEST-NUMERIC-IND[2] == "Y")
            TA0PW-RMTDEST-FRMT-CHAR[1] = "0";
            TA0PW-RMTDEST-FRMT-CHAR[2] = TA0PW-RMTDEST-CHAR[2];
            TA0PW-RMTDEST-FRMT-CHAR[3] = " ";
          else
          /* Error Routine (not a valid remote number configuration)*/
            TA1REC.TA1TYPE = "APPL";
            TA1REC.TA1FUNC = "POST";
            TA1REC.TA1PGMNM = "TA0P220";
            TA1REC.TA1MAP = "TA0PM001";
            TA1REC.TA1LOC = "REFORMAT REMOTE PRINTER DEST";
            TAEREC.TAEDESC1 = "NOT A VALID REMOTE PRINTER NUMBER CONFIGURATION";
            TAEREC.TAEDESC2 = TA3REC.TA3PRTR1;
            call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* ERRDIAG Routine*/
            TA6REC.TA6RTNCD = "4"; /* User info error*/
            return; /* Return to Appl.*/
          end
        end
      end
    end
  else
  /* Error Routine (1st char not 'R' for remote)*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "TA0P220";
    TA1REC.TA1MAP = "TA0PM001";
    TA1REC.TA1LOC = "REFORMAT REMOTE PRINTER DEST";
    TAEREC.TAEDESC1 = "FIRST CHARACTER IN REMOTE PRINTER NUMBER IS NOT A \"R\"";
    TAEREC.TAEDESC2 = TA3REC.TA3PRTR1;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* ERRDIAG Routine*/
    TA6REC.TA6RTNCD = "4"; /* User info error*/
    return; /* Return to Appl.*/
  end
  /*  */
  TA0PW00.XURDEST = TA0PW-RMTDEST-FRMT; /* Load XURDEST with refor-*/
  /* /* matted remote printer dest*/
  /*  */
  /*  */
end // end TA0P220

// Process response from display
Function TA0P300()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) Check for PFkey and scroll errors.*/
      /* 2) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

  TA0PW00.TA0PWERR = "N"; /* Reset error flag*/
  move "N" to TA6REC.TA6ERRFL[1] for all; /* Initialize field error flags*/

  TA0PW00.XURUSRNM = TA0PM001.XURUSRNM; /* Report recipient*/
  TA0PW00.XURBLDID = TA0PM001.XURBLDID; /* Location*/
  TA0PW00.XURCOPY = TA0PM001.XURCOPY; /* Report copies*/

   /* *********************************************************/
   /* ******          Check for user selection          *******/
   /* *********************************************************/

  if (TA6REC.TA6RTNCD == "*" /* ENTER was pressed*/
   || TA6REC.TA6RTNCD == "B" /* or PF7 was pressed*/
   || TA6REC.TA6RTNCD == "F") /* or PF8 was pressed*/

    TA0P310(); /* Verify printer selection*/

  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (TA6REC.TA6RTNCD == "?") /* Invalid attention key*/
    TA0PW00.TA0PWERR = "Y"; /* Set error flag*/
    VAGen_EZEMSG = TA0PT01.XXXMSG[1]; /* Invalid key pressed*/
  else
    if (TA6REC.TA6RTNCD == "B") /* PF7 was pressed*/
      if (TA0PW00.TA0PWINX[1] <= TA0PW00.TA0PWSIX)
        TA0PW00.TA0PWERR = "Y"; /* Set error flag*/
        VAGen_EZEMSG = TA0PT01.XXXMSG[2]; /* No previous page*/
      end
    else
      if (TA6REC.TA6RTNCD == "F") /* PF8 was pressed*/
        if (XROTBL.XROCD[TA0PWCT1] == "9999") /* End of table*/
          TA0PW00.TA0PWERR = "Y"; /* Set error flag*/
          VAGen_EZEMSG = TA0PT01.XXXMSG[3]; /* No more pages*/
        end
      else
        if (TA6REC.TA6RTNCD == "X") /* PA2 was pressed*/
          TA0PW00.TA0PWEND = "Y"; /* Set end flag*/
          TA6REC.TA6RTNCD = "1"; /* User cancelled request*/
        end
      end
    end
  end


end // end TA0P300

// Verify printer selection
Function TA0P310()
   /* *********************************************************/
   /* ******          Check for user selection          *******/
   /* *********************************************************/

  TA0PW00.TA0PWCT2 = 10; /* Screen index*/

  while (TA0PW00.TA0PWCT2 > 0) /* Until end of screen data*/

    if (TA0PM001.TA0PMSEL[TA0PWCT2] > " ") /* Check for selection*/

      if (TA0PM001.TA0PMSEL[TA0PWCT2] == "S") /* Valid selection tag*/

        TA0PW00.TA0PWPIX = TA0PW00.TA0PWINX[TA0PWCT2];

      else

        TA0PW00.TA0PWERR = "Y"; /* Indicate error found*/
        TA6REC.TA6ERRFL[TA0PWCT2] = "Y"; /* Field error flag*/
        VAGen_EZEMSG = TA0PT01.XXXMSG[4]; /* Only "S" may be used*/

      end

    end

    TA0PW00.TA0PWCT2 = TA0PW00.TA0PWCT2 - 1; /* Decrement index*/

  end

  if ("S" in TA0PM001.TA0PMSEL) /* Printer was selected*/

     /* NEXT SENTENCE*/

  else

    if (TA0PM001.XURDEST != TA0PW00.XURDEST /* Printer changed*/
     && TA0PM001.XURDEST > " "              /* and printer specified*/
     && TA0PM001.XURDEST != "NONE")         /* and "NONE" not specified*/

      if (TA0PM001.XURDEST == "RMT000") /* Local printer specified*/
        TA0PM001.XURDEST = "LOCAL"; /* Change to "LOCAL"*/
      end

      if (TA0PM001.XURDEST in XROTBL.XROPDEST /* Printer in table*/
       && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        TA0PW00.TA0PWPIX = sysVar.arrayIndex; /* Save table index*/

      else

        TA0PM001.XRODESC = " "; /* Clear printer description*/

        TA0PW00.TA0PWERR = "Y"; /* Indicate error found*/
        TA6REC.TA6ERRFL[14] = "Y"; /* Field error flag*/
        VAGen_EZEMSG = TA0PT01.XXXMSG[13]; /* Printer missing or invalid*/

      end

    end

  end

  if (TA0PW00.TA0PWERR == "N") /* No error was found*/

    if (TA0PW00.TA0PWPIX > 0) /* Selection was made*/

      if (XROTBL.XROPDEST[TA0PWPIX] == TA0PW00.XURDEST) /* Same printer*/

        TA0PW00.TA0PWPIX = 0; /* Reset table index*/

        move " " to TA0PM001.TA0PMSEL[1] for all; /* Clear selection fields*/

      else

        TA0PW00.XURDEST = XROTBL.XROPDEST[TA0PWPIX]; /* Printer*/
        TA0PW00.XRODESC = XROTBL.XRODESC[TA0PWPIX]; /* Description*/

        VAGen_EZEMSG = TA0PT01.XXXMSG[5]; /* Print destination changed*/

        TA6REC.TA6RTNCD = "*"; /* Subroutine in process*/

      end

    else

      if (TA0PM001.XURDEST == " " /* No printer specified*/
       || TA0PM001.XURDEST == "NONE") /* or "NONE" specified*/

        TA0PM001.XURDEST = "NONE"; /* Printer*/
        TA0PM001.XRODESC = " "; /* Description*/

        TA0PW00.XURDEST = " "; /* Printer*/
        TA0PW00.XRODESC = " "; /* Description*/

      end

    end

  end

  if (TA6REC.TA6RTNCD == "*" /* ENTER was pressed*/
   && TA0PW00.TA0PWERR == "N") /* and no error was found*/

    TA0PW00.TA0PWEND = "Y"; /* Indicate end of request*/

  end


end // end TA0P310

// Verify routing and submit JCL
Function TA0P400()
   /* ------------------------------------------------------------*/
   /* Verify the routing information.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "N" /* No JCL to submit*/
   || "O" in TA6REC.TARTYPE  /* or OUTPUT statement*/
   || "R" in TA6REC.TARTYPE) /* or report distribution*/

    TA0P410(); /* Verify routing information*/

  end

   /* ------------------------------------------------------------*/
   /* If no JCL to submit, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "N") /* No JCL to submit*/

    TA6REC.TA6RTNCD = "0"; /* Normal completion*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether ESP scheduling control will be used.*/
   /* reference entries in TA0PT06 table*/
   /* ------------------------------------------------------------*/

  TARREC.TARJCL = TA6REC.TARJCL[1]; /* JOB statement*/
  TA0PW00.XURJOBID = TARRECJ.XURJOBID; /* Job name*/

  if (TA0PW00.XURJOBID in TA0PT06.XURJOBID) /* Job name in table*/
    TA0PW00.TA0PWSWC = "N"; /* No scheduling*/
  else
    TA0PW00.TA0PWSWC = "Y"; /* Use scheduling*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain the CICS region and terminal identifications.*/
   /* ------------------------------------------------------------*/

  TA0P420(); /* Obtain region and terminal*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if NOTIFY used in the production region.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03" /* Production region (DOMESTIC-MVSPROD)*/
   && "N" in TA6REC.TARTYPE)  /* and NOTIFY statement*/

    /* ------------------------------------------------------------*/
     /* Post the error information to the Error Diagnosis Facility.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = "NOTIFY STATEMENT FOUND IN PRODUCTION";
    TAEREC.TAEDESC2 = TA6REC.TARJCL[sysVar.arrayIndex]; /* NOTIFY statement*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY ROUTING AND SUBMIT JCL";
    TA1REC.TA1PGMNM = "TA0P400 "; /* Process name*/
    TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Indicate parameter error and return to calling application.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

    exit program; /* Return to calling application*/

  end
    /* ...CHANGE TA3REC.TA343GID '07' TO '03'  AS OF 12-05-93  VCOWAN*/

                                  /* TA3REC.TA3RGNID EQ '07'       /**/
                                   /* Production region (EUROPEAN-MVSPROD)*/

  if (TA3REC.TA3RGNID == "13" /* Production region (EUROPEAN-MVSEURD)*/
   && "N" in TA6REC.TARTYPE)  /* and NOTIFY statement*/

    /* ------------------------------------------------------------*/
     /* Post the error information to the Error Diagnosis Facility.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = "NOTIFY STATEMENT FOUND IN PRODUCTION";
    TAEREC.TAEDESC2 = TA6REC.TARJCL[sysVar.arrayIndex]; /* NOTIFY statement*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY ROUTING AND SUBMIT JCL";
    TA1REC.TA1PGMNM = "TA0P400 "; /* Process name*/
    TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Indicate parameter error and return to calling application.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

    exit program; /* Return to calling application*/

  end

  if (TA3REC.TA3RGNID == "23" /* Production region (ASIA - MVSASIA)*/
   && "N" in TA6REC.TARTYPE)  /* and NOTIFY statement*/

    /* ------------------------------------------------------------*/
     /* Post the error information to the Error Diagnosis Facility.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = "NOTIFY STATEMENT FOUND IN PRODUCTION";
    TAEREC.TAEDESC2 = TA6REC.TARJCL[sysVar.arrayIndex]; /* NOTIFY statement*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY ROUTING AND SUBMIT JCL";
    TA1REC.TA1PGMNM = "TA0P400 "; /* Process name*/
    TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Indicate parameter error and return to calling application.*/
    /* ------------------------------------------------------------*/

    TA6REC.TA6RTNCD = "2"; /* Invalid parameters*/

    exit program; /* Return to calling application*/

  end

   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* ------------------------------------------------------------*/

  TA0P430(); /* Enque the internal reader*/

   /* ------------------------------------------------------------*/
   /* Obtain the current system date and time of day.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* If the production regions, insert ESP/ENCORE cntl stmts*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03" /* Production region (DOMESTIC-MVSPROD)*/
   || TA3REC.TA3RGNID == "13" /* Production region (EUROPEAN-MVSEURD)*/
   || TA3REC.TA3RGNID == "23") /* Production region (ASIA-MVSASIA)*/
    if (TA0PW00.TA0PWSWC == "Y") /* and scheduling control*/

      TA0P440(); /* Insert CSP/ENCORE control JCL*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Submit the job control through the internal reader.*/
   /* ------------------------------------------------------------*/

  TA0PW00.TA0PWSWF = "Y"; /* First time through switch*/

  TA6REC.TA6INDEX = 1; /* JCL table index*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

      /* --------Note also:  PROC TA0P460 --------------------------*/
       /* Determine if JCL is to be sent to DEVLMVS for execution*/
       /* or JCL is to be executed on PRODMVS*/
       /*  */
       /* note: all GL jobs & test job ZT9921 execute on DEVLMVS*/
       /* all other jobs execute on PRODMVS*/
       /*  */
       /* exception: GL1253 job run on PRODMVS per Monti Buhite*/
       /*  */
      /* ------------------------------------------------------------*/


    TA0PW00.TA0PW-JOBLIB-JCL-CARD = TA6REC.TARJCL[TA6INDEX];

    if (TA0PW00.TA0PW-JOBLIB-ID == "//JOBLIB ") /* if joblib jcl stmt*/

      if (TA0PW00.XURJOBID == "ZT9921" /* if ZT test jcl*/
       || TA0PW00.TA0PW-XURJOBID-P1-2 == "GL") /* if any GL jcl*/

        TA0PT13.TARJCL[02] = "/*ROUTE XEQ N01";
                                   /* execute on DEVLMVS*/

        TA0P445(); /* add "/*ROUTE XEQ N0x" JCL stmts to*/
                                   /* "SUBMIT JCL"*/
      end

        /* ----- EXCEPTION  for GL1253 per Monti Buhite  6-16-92 ----*/
      if (TA0PW00.XURJOBID == "GL1253" /* if GL1253 jcl*/
       || TA0PW00.XURJOBID == "GL1721") /* or GL1721 jcl*/
        TA0PT13.TARJCL[02] = "/*ROUTE XEQ N03";
                                   /* execute on PRODMVS*/

        TA0P445(); /* add "/*ROUTE XEQ N0x" JCL stmts to*/
                                   /* "SUBMIT JCL"*/
      end


    end



      /* ------------------------------------------------------------*/
       /* If EOJ online message requested, insert the JCL statements.*/
      /* ------------------------------------------------------------*/
    if (TA6REC.TARJCL[TA6INDEX] == "/*EOF") /* End of file*/

      /* ------------------------------------------------------------*/
       /* If EOJ online message requested, insert the JCL statements.*/
      /* ------------------------------------------------------------*/

      if (TA6REC.TA6MSGSW == "Y") /* EOJ message requested*/
        TA0P450(); /* Insert the EOJ message step*/
      end

      /* ------------------------------------------------------------*/
       /* If the production regions, insert ESP/ENCORE cntl stmts*/
      /* ------------------------------------------------------------*/

      if (TA3REC.TA3RGNID == "03" /* Production region (DOMESTIC-MVSPROD)*/
       || TA3REC.TA3RGNID == "13" /* Production region (EUROPEAN-MVSEURD)*/
       || TA3REC.TA3RGNID == "23") /* Production region (ASIA-MVSASIA)*/
        if (TA0PW00.TA0PWSWC == "Y") /* and scheduling control*/

          TA0P460(); /* Insert the control JCL*/

        end
      end

    end

    /* ------------------------------------------------------------*/
     /* Write the passed JCL statement to the internal reader.*/
    /* ------------------------------------------------------------*/

    TA0P470(); /* Write to the internal reader*/

    /* ------------------------------------------------------------*/
     /* If first time through, insert the identification comment.*/
    /* ------------------------------------------------------------*/

    if (TA0PW00.TA0PWSWF == "Y") /* First time through*/

      TA0P480(); /* Insert identification comment*/

      TA0PW00.TA0PWSWF = "N"; /* First time through switch*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Deque the internal reader after job submission.*/
   /* ------------------------------------------------------------*/

  TA0P490(); /* Deque the internal reader*/

   /* ------------------------------------------------------------*/
   /* Format the message to indicate that the job was submitted.*/
   /* ------------------------------------------------------------*/

  TA0PW01.XXXMSG = TA0PT01.XXXMSG[10]; /* Job was submitted*/

  TA0PW01.XURJOBID = TA0PW00.XURJOBID; /* Job identification*/
  TA0PW01.XURUSRID = TA0PW00.XURUSRID; /* User identification*/
  TA0PW01.XX0XWMM = XX0XW01.XX0XWMM; /* Current month*/
  TA0PW01.XX0XWDD = XX0XW01.XX0XWDD; /* Current day*/
  TA0PW01.XX0XWYY = XX0XW01.XX0XWYY; /* Current year*/
  TA0PW01.XX0XWHR = XX0XW01.XX0XWHR; /* Current hour*/
  TA0PW01.XX0XWMIN = XX0XW01.XX0XWMIN; /* Current minute*/

  COMMAREA.CAMSG = TA0PW01.XXXMSG; /* Job was submitted*/

   /* ------------------------------------------------------------*/
   /* Indicate that the subroutine has successfully completed.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "0"; /* Normal completion*/

end // end TA0P400

// Verify the routing information
Function TA0P410()
   /* ------------------------------------------------------------*/
   /* If no printer was specified, indicate selection required.*/
   /* ------------------------------------------------------------*/

  if (TA0PW00.XURDEST <= " ") /* No printer specified*/

    if (TA6REC.TA6ERRFL[14] == "Y") /* Field already in error*/

       /* NEXT SENTENCE*/

    else

      TA6REC.TA6ERRFL[1] = "Y"; /* Field error flag*/
      VAGen_EZEMSG = TA0PT01.XXXMSG[6]; /* Destination must be selected*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If "LOCAL" specified with OUTPUT, indicate not allowed.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6SUBSW != "N" /* Submit switch not N*/
     && "O" in TA6REC.TARTYPE  /* and OUTPUT statement*/
     && TA0PW00.XURDEST == "LOCAL") /* and LOCAL printer specified*/

      TA6REC.TA6ERRFL[1] = "Y"; /* Field error flag*/
      VAGen_EZEMSG = TA0PT01.XXXMSG[12]; /* Destination not allowed*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* ------------------------------------------------------------*/

  if (TA0PW00.XURCOPY < 1 /* Copies less than 1*/
   || TA0PW00.XURCOPY > 9) /* or greater than 9*/

    TA6REC.TA6ERRFL[11] = "Y"; /* Field error flag*/
    VAGen_EZEMSG = TA0PT01.XXXMSG[7]; /* Copies missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify distribution fields if report distribution is used.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "N" /* Submit switch N*/
   || "R" in TA6REC.TARTYPE) /* or report distribution*/

    /* ------------------------------------------------------------*/
     /* If no location was specified, indicate location required.*/
    /* ------------------------------------------------------------*/

    if (TA0PW00.XURBLDID <= " ") /* No location specified*/

      TA6REC.TA6ERRFL[12] = "Y"; /* Field error flag*/
      VAGen_EZEMSG = TA0PT01.XXXMSG[8]; /* Location required*/

    end

    /* ------------------------------------------------------------*/
     /* If no user name was specified, indicate user name required.*/
    /* ------------------------------------------------------------*/

    if (TA0PW00.XURUSRNM <= " ") /* No user name specified*/

      TA6REC.TA6ERRFL[13] = "Y"; /* Field error flag*/
      VAGen_EZEMSG = TA0PT01.XXXMSG[9]; /* Output recipient required*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, exit to display the error.*/
   /* ------------------------------------------------------------*/

  if (VAGen_EZEMSG > " ") /* Error was found*/

    if (TA5REC.TA5RTNCD == 0) /* Not first time through*/

      TA0PW00.TA0PWERR = "Y"; /* Indicate error found*/
      TA0PW00.TA0PWEND = "N"; /* Reset end of request switch*/

    end

    exit stack; /* Exit to display map*/

  end


end // end TA0P410

// Obtain the region and terminal
Function TA0P420()
   /* ------------------------------------------------------------*/
   /* Obtain the CICS region and terminal identification.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "CICSNBR"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE REGION AND TERMINAL";
  TA1REC.TA1PGMNM = "TA0P420"; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate the error and return to the calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "7"; /* Region/terminal error*/

  exit program; /* Return to calling application*/


end // end TA0P420

// Enque the internal reader
Function TA0P430()
   /* ------------------------------------------------------------*/
   /* Enque the Internal Reader queue for job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Enque reader*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && UT2REC.UT2RETCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = UT2REC.UT2GRPLV; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ENQUE THE INTERNAL READER";
  TA1REC.TA1PGMNM = "TA0P430"; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate write failed and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "5"; /* Write to reader failed*/

  exit program; /* Return to calling application*/


end // end TA0P430

// Insert CA7 control (1 of 2)
Function TA0P440()
   /* ------------------------------------------------------------*/
   /* ESP/ENCORE for execution.*/
   /* ------------------------------------------------------------*/
   /* Insert the JCL to submit the job to CSP/ENCORE for execution*/
   /* ------------------------------------------------------------*/


  TA0PW00.TA0PWIDX = 1; /* Table index*/

  while (TA0PT12.TARJCL[TA0PWIDX] != "/*EOF") /* Until end of file*/

        /* ------------------------------------------------------------*/
         /* Move the JCL statement to the Internal Reader record area.*/
        /* ------------------------------------------------------------*/

    TARREC.TARJCL = TA0PT12.TARJCL[TA0PWIDX]; /* JCL statement*/

        /* ------------------------------------------------------------*/
         /* Change the J or F type JCL cards*/
        /* ------------------------------------------------------------*/

    TA0P446(); /* vcvcvcvcvcvc added 12/21/92.. vcowan*/

        /* ------------------------------------------------------------*/
         /* Write Job Control Language to the Internal Reader queue.*/
        /* ------------------------------------------------------------*/

    TA0P442(); /* Write to internal reader queue*/

        /* ------------------------------------------------------------*/
         /* Increment the table index to point to the next statement.*/
        /* ------------------------------------------------------------*/

    TA0PW00.TA0PWIDX = TA0PW00.TA0PWIDX + 1; /* Table index*/

  end


end // end TA0P440

// Write to internal reader queue
Function TA0P442()
   /* ------------------------------------------------------------*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* ------------------------------------------------------------*/

  try
    add TARREC ;
  end

   /* ------------------------------------------------------------*/
   /* If write was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Write was successful*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TARREC.TARJCL; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "WRITE TO INTERNAL READER QUEUE";
  TA1REC.TA1PGMNM = "TA0P441"; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate write failed and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "5"; /* Write to reader failed*/

  exit program; /* Return to calling application*/


end // end TA0P442

// Submit JCL to internal reader
Function TA0P445()
   /* ------------------------------------------------------------*/
   /* Move the JCL statements in TA0PT13 to internal reader record area.*/
   /* & Write Job Control Language to the Internal Reader queue.*/
   /* ------------------------------------------------------------*/

  TARREC.TARJCL = TA0PT13.TARJCL[1]; /* JCL stmt "//*"*/
  TA0P442(); /* Write to internal reader queue*/

  TARREC.TARJCL = TA0PT13.TARJCL[2]; /* JCL stmt "/*route xeq n01"*/
  TA0P442(); /* Write to internal reader queue*/

  TARREC.TARJCL = TA0PT13.TARJCL[3]; /* JCL stmt "//*"*/
  TA0P442(); /* Write to internal reader queue*/


end // end TA0P445

// Change JCL based on ta0pt08
Function TA0P446()
   /* -----------------------------------------------------------------*/
    /* for esp/encore job submit....*/
    /* .......modify jcl records with tartype of F & J*/
    /* .......fix added on 12-17-92 by vern cowan.............*/
   /* -----------------------------------------------------------------*/


   /* -----------------------------------------------------------------*/
    /* insert user's jobname in JOB card record -- tarrecj*/
   /* -----------------------------------------------------------------*/

  if (TA0PT12.TARTYPE[TA0PWIDX] == "J") /* insert xurjobid on JOB card*/
    TARRECJ.XURJOBID = TA0PW00.XURJOBID;
  end


   /* -----------------------------------------------------------------*/
    /* add "job/submittor comment record into -- tarrecf*/
   /* -----------------------------------------------------------------*/

  if (TA0PT12.TARTYPE[TA0PWIDX] == "F")

    TARRECF.XURJOBID = TA0PW00.XURJOBID; /* name of job submitted*/
    TARRECF.XURUSRID = TA0PW00.XURUSRID; /* User identification*/

    TARRECF.XX0XWMM = XX0XW01.XX0XWMM; /* Current month*/
    TARRECF.XX0XWDD = XX0XW01.XX0XWDD; /* Current day*/
    TARRECF.XX0XWYY = XX0XW01.XX0XWYY; /* Current year*/
    TARRECF.XX0XWHR = XX0XW01.XX0XWHR; /* Current hour*/
    TARRECF.XX0XWMIN = XX0XW01.XX0XWMIN; /* Current minute*/

    TARRECF.XURUSRNM = TA0PW00.XURUSRNM; /* Report recipient*/

  end
end // end TA0P446

// Insert the EOJ message step
Function TA0P450()
   /* ------------------------------------------------------------*/
   /* Insert the JCL to execute the EOJ online message step.*/
   /* ------------------------------------------------------------*/

  TA0PW00.TA0PWIDX = 1; /* Table index*/

  while (TA0PT03.TARJCL[TA0PWIDX] != "/*EOF") /* Until end of file*/

    /* ------------------------------------------------------------*/
     /* Move the JCL statement to the Internal Reader record area.*/
    /* ------------------------------------------------------------*/

    TARREC.TARJCL = TA0PT03.TARJCL[TA0PWIDX]; /* JCL statement*/

    /* ------------------------------------------------------------*/
     /* Format the variable areas of the JCL statement.*/
    /* ------------------------------------------------------------*/

    if (TA0PT03.TARTYPE[TA0PWIDX] == "E") /* EOJ message statement*/

      TARRECE.TA3MSGID = TA3REC.TA3MSGID; /* Region identification*/
      TARRECE.TA3EIBRM = TA3REC.TA3EIBRM; /* Terminal identification*/

      TARRECE.XURJOBID = TA0PW00.XURJOBID; /* Job identification*/
      TARRECE.XURUSRID = TA0PW00.XURUSRID; /* User identification*/

      TARRECE.XX0XWMM = XX0XW01.XX0XWMM; /* Current month*/
      TARRECE.XX0XWDD = XX0XW01.XX0XWDD; /* Current day*/
      TARRECE.XX0XWYY = XX0XW01.XX0XWYY; /* Current year*/
      TARRECE.XX0XWHR = XX0XW01.XX0XWHR; /* Current hour*/
      TARRECE.XX0XWMIN = XX0XW01.XX0XWMIN; /* Current minute*/

    end

    if (TA0PT03.TARTYPE[TA0PWIDX] == "A") /* cond-code statement*/

      TARRECA.TA6-MAX-COND-CODE = TA6REC.TA6-MAX-COND-CODE;

    end

    /* ------------------------------------------------------------*/
     /* Write Job Control Language to the Internal Reader queue.*/
    /* ------------------------------------------------------------*/

    TA0P442(); /* Write to internal reader queue*/

    /* ------------------------------------------------------------*/
     /* Increment the table index to point to the next statement.*/
    /* ------------------------------------------------------------*/

    TA0PW00.TA0PWIDX = TA0PW00.TA0PWIDX + 1; /* Table index*/

  end


end // end TA0P450

// Insert CA7 control (2 of 2)
Function TA0P460()
   /* ------------------------------------------------------------*/
   /* Determine if JCL is to be sent to DEVLMVS for execution*/
   /* or JCL is to be executed on PRODMVS*/
   /*  */
   /* note: all GL jobs & test job ZT9921 execute on DEVLMVS*/
   /* all other jobs execute on PRODMVS*/
   /*  */
   /* exception: GL1253 job run on PRODMVS per Monti Buhite*/
   /*  */
   /* ------------------------------------------------------------*/

  TA0PW00.TAR-MAINID = "SY3"; /* default, execute on PRODMVS*/

  if (TA0PW00.XURJOBID == "ZT9921" /* if ZT test jcl*/
   || TA0PW00.TA0PW-XURJOBID-P1-2 == "GL") /* if any GL jcl*/
    TA0PW00.TAR-MAINID = "SY2"; /* default, execute on DEVLMVS*/
  end

   /* ----- EXCEPTION  for GL1253 per Monti Buhite  6-16-92 ----*/
  if (TA0PW00.XURJOBID == "GL1253" /* if GL1253 jcl*/
   || TA0PW00.XURJOBID == "GL1721") /* if GL1721 jcl*/
    TA0PW00.TAR-MAINID = "SY3"; /* re-set to execute on PRODMVS*/
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* initialize tar-relopr & tar-condcode depending on value of*/
   /* ta6-max-cond-code*/
   /*  */
   /* ------------------------------------------------------------*/

  TA0PW00.TAR-CONDCODE = TA6REC.TA6-MAX-COND-CODE; /* cond code value*/

  if (TA6REC.TA6-MAX-COND-CODE == 0000)
    TA0PW00.TAR-RELOPR = "NE"; /* set cond-code comparand to NE*/
  else
    TA0PW00.TAR-RELOPR = "LT"; /* set cond-code comparand to LT*/

  end


   /* ------------------------------------------------------------*/
   /* Insert the JCL to submit the job to ESP/ENCORE Schedueling*/
   /* ------------------------------------------------------------*/


  TA0PW00.TA0PWIDX = 1; /* Table index*/

  while (TA0PT14.TARJCL[TA0PWIDX] != "/*EOF") /* Until end of file*/

        /* ------------------------------------------------------------*/
         /* Move the JCL statement to the Internal Reader record area.*/
        /* ------------------------------------------------------------*/

    TARREC.TARJCL = TA0PT14.TARJCL[TA0PWIDX]; /* JCL statement*/

        /* ------------------------------------------------------------*/
         /* Write Job Control Language to the Internal Reader queue.*/
        /* ------------------------------------------------------------*/

    TA0P442(); /* Write to internal reader queue*/

        /* ------------------------------------------------------------*/
         /* Increment the table index to point to the next statement.*/
        /* ------------------------------------------------------------*/

    TA0PW00.TA0PWIDX = TA0PW00.TA0PWIDX + 1; /* Table index*/

  end


end // end TA0P460

// Submit JCL to internal reader
Function TA0P470()
   /* ------------------------------------------------------------*/
   /* Move the JCL statement to the Internal Reader record area.*/
   /* ------------------------------------------------------------*/

  TARREC.TARJCL = TA6REC.TARJCL[TA6INDEX]; /* JCL statement*/

   /* ------------------------------------------------------------*/
   /* Format the variable areas of the passed JCL statement.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TARTYPE[TA6INDEX] == "N") /* NOTIFY statement*/

    TARRECN.XURUSRID = TA0PW00.XURUSRID; /* User identification*/

  end

  if (TA6REC.TARTYPE[TA6INDEX] == "O") /* OUTPUT statement*/

    TARRECO.XURCOPY = TA0PW00.XURCOPY; /* Number of copies*/
    TARRECO.XURDEST = TA0PW00.XURDEST; /* Print destination*/

  end

  if (TA6REC.TARTYPE[TA6INDEX] == "R") /* Report distribution*/

    TARRECR.XURDEST = TA0PW00.XURDEST; /* Print destination*/
    TARRECR.XXXCHAR = "1"; /* Report distribution version*/

    TA0P442(); /* Write to internal reader queue*/

    set TARRECS empty; /* Distribution information*/

    TARRECS.XURUSRNM = TA0PW00.XURUSRNM; /* Report recipient*/
    TARRECS.XURBLDID = TA0PW00.XURBLDID; /* Location*/
    TARRECS.XXXCHAR = "0"; /* Number of copies filler*/
    TARRECS.XURCOPY = TA0PW00.XURCOPY; /* Number of copies*/

  end

   /* ------------------------------------------------------------*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* ------------------------------------------------------------*/

  TA0P442(); /* Write to internal reader queue*/

   /* ------------------------------------------------------------*/
   /* Either indicate end of table or increment the table index.*/
   /* ------------------------------------------------------------*/

  if (TARREC.TARJCL == "/*EOF") /* End of file*/

    TA6REC.TA6INDEX = 0; /* Indicate end of table*/
  else
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

  end


end // end TA0P470

// Insert identification comment
Function TA0P480()
   /* ------------------------------------------------------------*/
   /* Insert the JCL to execute the EOJ online message step.*/
   /* ------------------------------------------------------------*/

  TA0PW00.TA0PWIDX = 1; /* Table index*/

  while (TA0PT05.TARJCL[TA0PWIDX] != "/*EOF") /* Until end of file*/

    /* ------------------------------------------------------------*/
     /* Move the JCL statement to the Internal Reader record area.*/
    /* ------------------------------------------------------------*/

    TARREC.TARJCL = TA0PT05.TARJCL[TA0PWIDX]; /* JCL statement*/

    /* ------------------------------------------------------------*/
     /* Format the variable areas of the JCL statement.*/
    /* ------------------------------------------------------------*/

    if (TA0PT05.TARTYPE[TA0PWIDX] == "C") /* Comment statement*/

      TARRECC.XURUSRID = TA0PW00.XURUSRID; /* User identification*/
      TARRECC.XURUSRNM = TA0PW00.XURUSRNM; /* Report recipient*/

      TARRECC.XX0XWMM = XX0XW01.XX0XWMM; /* Current month*/
      TARRECC.XX0XWDD = XX0XW01.XX0XWDD; /* Current day*/
      TARRECC.XX0XWYY = XX0XW01.XX0XWYY; /* Current year*/
      TARRECC.XX0XWHR = XX0XW01.XX0XWHR; /* Current hour*/
      TARRECC.XX0XWMIN = XX0XW01.XX0XWMIN; /* Current minute*/

      TARRECC.TA0PW-SCHED-ID = "(ESP)";
    end

    /* ------------------------------------------------------------*/
     /* Write Job Control Language to the Internal Reader queue.*/
    /* ------------------------------------------------------------*/

    TA0P442(); /* Write to internal reader queue*/

    /* ------------------------------------------------------------*/
     /* Increment the table index to point to the next statement.*/
    /* ------------------------------------------------------------*/

    TA0PW00.TA0PWIDX = TA0PW00.TA0PWIDX + 1; /* Table index*/

  end


end // end TA0P480

// Deque the internal reader
Function TA0P490()
   /* ------------------------------------------------------------*/
   /* Deque the Internal Reader queue after job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "D"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Deque reader*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && UT2REC.UT2RETCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = UT2REC.UT2GRPLV; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "DEQUE THE INTERNAL READER";
  TA1REC.TA1PGMNM = "TA0P490"; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate write failed and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "5"; /* Write to reader failed*/

  exit program; /* Return to calling application*/


end // end TA0P490

// Purge any temporary storage
Function TA0P500()
   /* ------------------------------------------------------------*/
   /* Purge the working storage from temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TA0PW00, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMNM = "TA0P500 "; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate storage error and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "6"; /* Temporary storage error*/

  exit program; /* Return to calling application*/


end // end TA0P500

// Initialize working storage
Function TA0P600()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

             /* Initialize fields in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  TA0PW00.TA0PWCT1 = 1; /* Table index*/
  TA0PW00.TA0PWCT2 = 1; /* Screen index*/
  TA0PW00.TA0PWSIX = 0; /* End of first page save index*/
  TA0PW00.TA0PWPIX = 0; /* Initialize pass index to zero*/
  TA0PW00.TA0PWFFL = "Y"; /* first time thru flag*/
  TA0PW00.TA0PWERR = "N"; /* Scroll error flag to no*/
  TA0PW00.TA0PWEND = "N"; /* End of pop up window session flag*/


end // end TA0P600

// Format the map for display
Function TA0P700()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (TA0PW00.TA0PWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (TA0PW00.TA0PWFFL == "N") /* if not the first time through*/
      TA0PW00.TA0PWCT1 = TA0PW00.TA0PWINX[10] + 1; /* set up scroll pf8*/
    end

    move " " to TA0PM001.TA0PMSEL[1] for all; /* Clear selection fields*/
    move " " to TA0PM001.TA0PMCD[1] for all; /* Clear code fields*/
    move " " to TA0PM001.TA0PMDES[1] for all; /* Clear description fields*/

    TA0PM001.XURUSRNM = TA0PW00.XURUSRNM; /* Report recipient*/
    TA0PM001.XURBLDID = TA0PW00.XURBLDID; /* Location*/
    TA0PM001.XURCOPY = TA0PW00.XURCOPY; /* Number of copies*/

    if (TA0PW00.XURDEST > " ") /* Printer specified*/

      TA0PM001.XURDEST = TA0PW00.XURDEST; /* Remote printer*/
      TA0PM001.XRODESC = TA0PW00.XRODESC; /* Printer description*/

    end

    TA0PM001.TA0PMHDR = "         OUTPUT PRINT DESTINATIONS        ";
    TA0PM001.TA0PMTR1 = "              SELECT & ENTER              ";
    TA0PM001.TA0PMTR2 = "   PF7:BACK                    PF8:FRWD   ";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (TA6REC.TA6RTNCD == "F" /* PF8 was pressed*/
     || TA0PW00.TA0PWFFL == "Y") /* Or it is the first time thru*/
      TA0PW00.TA0PWCT2 = 1; /* Set up screen index*/
      while (TA0PW00.TA0PWCT2 <= 10 /* Until end of screen lines*/
       && XROTBL.XROCD[TA0PWCT1] != "9999") /* or end of data*/
        if (XROTBL.XXXSTAT[TA0PWCT1] == "A") /* If active status on code*/
          TA0PM001.TA0PMCD[TA0PWCT2] = XROTBL.XROCD[TA0PWCT1];
          TA0PM001.TA0PMDES[TA0PWCT2] = XROTBL.XRODESC[TA0PWCT1];
          TA0PW00.TA0PWINX[TA0PWCT2] = TA0PW00.TA0PWCT1;
                                   /* Save array*/
          if (TA0PW00.TA0PWFFL == "Y") /* If first time thru*/
            TA0PW00.TA0PWSIX = TA0PW00.TA0PWCT1; /* Save last index*/
          end
          TA0PW00.TA0PWCT2 = TA0PW00.TA0PWCT2 + 1;
                                   /* Increment screen index*/
        end
        TA0PW00.TA0PWCT1 = TA0PW00.TA0PWCT1 + 1; /* Increment table index*/
      end
      TA0PW00.TA0PWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (TA6REC.TA6RTNCD == "B") /* PF7 was pressed*/
      TA0PW00.TA0PWCT1 = TA0PW00.TA0PWINX[1] - 1; /* Set up table index*/
      TA0PW00.TA0PWCT2 = 10; /* Set up screen index*/
      while (TA0PW00.TA0PWCT2 >= 1) /* Load from the bottom up*/
        if (XROTBL.XXXSTAT[TA0PWCT1] == "A") /* If the status is active*/
          TA0PM001.TA0PMCD[TA0PWCT2] = XROTBL.XROCD[TA0PWCT1];
          TA0PM001.TA0PMDES[TA0PWCT2] = XROTBL.XRODESC[TA0PWCT1];
          TA0PW00.TA0PWINX[TA0PWCT2] = TA0PW00.TA0PWCT1;
                                   /* Save array*/
          TA0PW00.TA0PWCT2 = TA0PW00.TA0PWCT2 - 1;
                                   /* Decrement screen index*/
        end
        TA0PW00.TA0PWCT1 = TA0PW00.TA0PWCT1 - 1; /* Decrement table index*/
      end
      if (TA0PW00.TA0PWCT1 < 1) /* If the table index was decremented*/
        TA0PW00.TA0PWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  TA0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TA0PM001.TA0PMTIM = VGVar.currentFormattedTime; /* Current time*/

   /* ------------------------------------------------------------*/
   /* Save the working storage in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA0P710(); /* Save the working storage*/

  TA6REC.TA6RTNCD = "*"; /* Subroutine in process*/


end // end TA0P700

// Save the working storage
Function TA0P710()
   /* ------------------------------------------------------------*/
   /* Save the working storage in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "N"; /* Function code*/

  try
    call "TA0050" (TA0PW00, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "SAVE THE WORKING STORAGE";
  TA1REC.TA1PGMNM = "TA0P710 "; /* Process name*/
  TA1REC.TA1MAP = "TA0PM001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate storage error and return to calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "6"; /* Temporary storage error*/

  exit program; /* Return to calling application*/


end // end TA0P710

//*** RECORD=TA0PW00 ****
// ---------------------------
// Application working storage
// ---------------------------
// ***********************
Record TA0PW00 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(284) ; 
    10 TA0PWLOC TA0PWLOC ; 
    10 TA0PWIDX TA0PWIDX ; 
    10 TA0PWCT1 TA0PWCT1 ; 
    10 TA0PWCT2 TA0PWCT2 ; 
    10 TA0PWSIX TA0PWSIX ; 
    10 TA0PWPIX TA0PWPIX ; 
    10 TA0PWINX TA0PWINX [10] ; 
    10 TA0PWEND TA0PWEND ; 
    10 TA0PWERR TA0PWERR ; 
    10 TA0PWFFL TA0PWFFL ; 
    10 TA0PWSWF TA0PWSWF ; 
    10 TA0PWSWC TA0PWSWC ; 
    10 TA0PWHDR TA0PWHDR ; 
    10 XURJOBID XURJOBID ; 
      15 TA0PW-XURJOBID-P1-2 TA0PW-XURJOBID-P1-2 ; 
      15 TA0PW-XURJOBID-P3-6 TA0PW-XURJOBID-P3-6 ; 
    10 XURUSRID XURUSRID ; 
    10 XURBLDID XURBLDID ; 
    10 XURUSRNM XURUSRNM ; 
    10 XURDEST XURDEST ; 
    10 XURCOPY XURCOPY ; 
    10 XRODESC XRODESC ; 
    10 TA0PW-RMTDEST TA0PW-RMTDEST ; 
      15 TA0PW-RMTDEST-CHAR TA0PW-RMTDEST-CHAR [8] ; 
    10 TA0PW-RMTDEST-NUMERIC-IND TA0PW-RMTDEST-NUMERIC-IND [8] ; 
    10 TA0PW-RMTDEST-FRMT TA0PW-RMTDEST-FRMT ; 
      15 TA0PW-RMTDEST-FRMT-PFX TA0PW-RMTDEST-FRMT-PFX ; 
      15 TA0PW-RMTDEST-FRMT-CHAR TA0PW-RMTDEST-FRMT-CHAR [3] ; 
    10 TA0PW-RMTDEST-SS TA0PW-RMTDEST-SS ; 
    10 TA0PW-SU-SUFFIX TA0PW-SU-SUFFIX ; 
    10 TA0PW-BTCH-NUM TA0PW-BTCH-NUM ; 
    10 TA0PW-TA6-MAX-CC-ALL TA0PW-TA6-MAX-CC-ALL ; 
      15 TA0PW-TA6-MAX-CC-CHAR TA0PW-TA6-MAX-CC-CHAR [4] ; 
    10 TA0PW-TA6-MAX-CC-NUM-IND TA0PW-TA6-MAX-CC-NUM-IND [4] ; 
    10 TA0PW-TA6-MAX-CC-SS TA0PW-TA6-MAX-CC-SS ; 
    10 TAR-MAINID TAR-MAINID ; 
    10 TAR-RELOPR TAR-RELOPR ; 
    10 TAR-CONDCODE TAR-CONDCODE ; 
    10 * char(1) ; // ESP/ENCORE schedueling switch
    10 TA0PW-JOBLIB-JCL-CARD TA0PW-JOBLIB-JCL-CARD ; 
      15 TA0PW-JOBLIB-ID TA0PW-JOBLIB-ID ; 
      15 * char(72) ; // filler for jcllib card
    10 TA0PW-SCHED-ID TA0PW-SCHED-ID ; 
end // end TA0PW00

//*** RECORD=TA0PW01 ****
// ------------------------------------------------------------
// Work area used to insert the variable information into the
// job submitted message from TA0PT01 (message 10).
// ------------------------------------------------------------
// ***********************
Record TA0PW01 type basicRecord
  5 XXXMSG XXXMSG ; 
    10 * char(17) ; 
    10 XURJOBID XURJOBID ; 
    10 * char(19) ; 
    10 XURUSRID XURUSRID ; 
    10 * char(4) ; 
    10 XX0XWMM XX0XWMM ; 
    10 * char(1) ; 
    10 XX0XWDD XX0XWDD ; 
    10 * char(1) ; 
    10 XX0XWYY XX0XWYY ; 
    10 * char(4) ; 
    10 XX0XWHR XX0XWHR ; 
    10 * char(1) ; 
    10 XX0XWMIN XX0XWMIN ; 
    10 * char(9) ; 
end // end TA0PW01

//*** RECORD=TA1REC ****
// this record is for use with csp to call the error diag
// module ta0020.
// 
// the call statement for ta0020 should be in the following
// format:
// 
//         CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// ta1rec is 48 bytes long and consists of the following:
// 
//    1) error type - four bytes charcater error type code
//                    'db2 ' db2 error
//                    'vsam' vsam error
//                    'appl' any other application error
// 
//    2) termination- four bytes character termination code
//                    'abnd' abend the application
//                           do not use for csp/db2
//                    'retn' log error and return to caller
//                           use for csp/db2
// 
//    3) program name - eight byter character program id.
// 
//    4) location     - 32 byte character user defined info.
//                      this field is sub-defined into four
//                      8 character fields (process/stmt group
//                      name, etc. may be placed in these
//                      fields).
// 
//    5) map          - last map name displayed/conversed.
// 
//    6) db2 view name- the view name for the data base.
//                      this field is sub-defined into two
//                      fields to separate the data base
//                      name from the table name.
// 
//    7) key value    - a/n value of key (user program should
//                      not attempt to convert any internal
//                      data fields. e.g. bin/pack to num).
// 
//  date created   :  05-07-86
// 
//  maintenance log:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05-13-86   dps    added map, data base, table view,
//                            table key, and filler columns
//          12/16/88  SPOPA   Defined subordinate fields to
//                            TA1PGMNM and TA1MAP.
//          06/08/93  jcampb  added TA1-GROUP level 03
// **********************
Record TA1REC type basicRecord
  3 TA1-GROUP TA1-GROUP ; 
    5 TA1TYPE TA1TYPE ; 
    5 TA1FUNC TA1FUNC ; 
    5 TA1PGMNM TA1PGMNM ; 
      10 TA1PGMAP TA1PGMAP ; 
      10 TA1PGMNO TA1PGMNO ; 
    5 TA1LOC TA1LOC ; 
      10 TA1LOCAT TA1LOCAT [4] ; 
    5 TA1MAP TA1MAP ; 
      10 TA1MAPAP TA1MAPAP ; 
      10 TA1MAPNO TA1MAPNO ; 
    5 TA1DBTBL TA1DBTBL ; 
      10 TA1DBASE TA1DBASE ; 
      10 TA1TBLVU TA1TBLVU ; 
    5 TA1TBLKE TA1TBLKE ; 
    5 TA1FYICD TA1FYICD ; 
    5 * char(37) ; 
end // end TA1REC

//*** RECORD=TA2REC ****
// ******************* PLEASE NOTE ****************************
// For access to the European Date formats you must include
// redefines record TA2REC01 to your application records list.
// ************************************************************
// 
// this date routine is good for any date from january 1, 1800
// to december 31, 2099.  all dates sent to this program are
// verified to be correct and an return code and written error
// message are returned to the calling program.  the time is
// verified and whenever numerics are contained in either of
// the time fields, it will be used as the time.
// when numerics are not in either time field the current time
// from the computer will be used.
// 
// the call statement for ta0040 should be in the following
// format:
// 
//         call ta0040,ta2rec
// 
// ta2rec is 200 bytes long and consists of the following:
// 
//        1) return - four bytes numeric characters
//                    return code from date routines
//                    '0000' successful (no errors)
//                    '0111' invalid julian date
//                    '0222' invalid gregorian date
//                    '0333' invalid century
//                    '0888' invalid gregorian type
//                    '0999' invalid option
//                    '1010' bad commarea -zero length received
// 
//        2) option - eight bytes alpha-numeric characters
//                    what you want the date routine to do
//                    'getdate ' get date and time
//                    'julgreg ' julian converted to all greg
//                               formats
//                    'gregjul ' greg converted to julian and
//                               all greg formats
//                    'greggreg' greg converted to julian and
//                               all greg formats
//                               (to convert dates from one
//                                format to another)
//                    'daysdiff' number of days between from
//                               and to dates not inclusive.
// 
//        3) type   - one byte character
//                    when doing a 'julgreg' or 'greggreg'
//                    where and in what format the
//                    gregorian date is.
//                    'a' mmddyy
//                    'b' mm/dd/yy
//                    'c' mmddccyy
//                    'd' mm/dd/ccyy
//                    'e' yymmdd
//                    'f' yy/mm/dd
//                    'g' ccyymmdd
//                    'h' ccyy/mm/dd
//                    'i' ddmmyy        * european date fmts
//                    'j' dd.mm.yy      * accessed through
//                    'k' ddmmccyy      * ta2rec01 (redefine
//                    'l' dd.mm.ccyy    * of ta2rec.
// 
//        4) days   - there bytes numeric characters
//                    days to add to current date or any date
//                    given.
//                    in other words dates-given = date + days
// 
//        5) days between dates
//                    date from format - ccyymmdd
//                    date to format   - ccyymmdd
//                    days difference
// 
// maint log
//   when      who     why
// --------  --------  ----------------------------------------
// 06/24/87  snoble    added date difference fields and docum
// 07/21/89  SPOPA     Defined lower level for Gregorian date
//                     fields so YYMM only could be addressed.
// 07/28/89  JJUCH     Add TA2group and adjust the levels.
// 09/20/89  JJUCH     Redefined the TA2GRGB to include subflds
//                     so dash fields can be addressed.
// **********************
Record TA2REC type basicRecord
  5 TA2GROUP TA2GROUP ; 
    10 TA2RTNCD TA2RTNCD ; 
    10 TA2DTOPT TA2DTOPT ; 
    10 TA2GRTYP TA2GRTYP ; 
    10 TA2DYAOD TA2DYAOD ; 
    10 TA2CENT TA2CENT ; 
    10 TA2DYWK TA2DYWK ; 
    10 TA2TIME TA2TIME ; 
      15 TA2TIMEN TA2TIMEN ; 
        20 TA2TIMHM TA2TIMHM ; 
        20 TA2TIMSS TA2TIMSS ; 
    10 TA2TIMED TA2TIMED ; 
    10 TA2JULN TA2JULN ; 
      15 TA2JULNN TA2JULNN ; 
    10 TA2GRGA TA2GRGA ; 
      15 TA2GRGAN TA2GRGAN ; 
    10 TA2GRGB TA2GRGB ; 
      15 TA2GRBMM TA2GRBMM ; 
      15 TA2GRBD1 TA2GRBD1 ; 
      15 TA2GRBDD TA2GRBDD ; 
      15 TA2GRBD2 TA2GRBD2 ; 
      15 TA2GRBYY TA2GRBYY ; 
    10 TA2GRGC TA2GRGC ; 
      15 TA2GRECN TA2GRECN ; 
    10 TA2GRGD TA2GRGD ; 
    10 TA2GRGE TA2GRGE ; 
      15 TA2GRGEN TA2GRGEN ; 
        20 TA2GRGYM TA2GRGYM ; 
        20 TA2GRGDD TA2GRGDD ; 
    10 TA2GROF TA2GROF ; 
    10 TA2GRGG TA2GRGG ; 
      15 TA2GRGGN TA2GRGGN ; 
        20 TA2GRCYM TA2GRCYM ; 
        20 * num(2) ; 
    10 TA2GRGH TA2GRGH ; 
    10 TA2LITDT TA2LITDT ; 
    10 TA2ERMSG TA2ERMSG ; 
    10 TA2DBDGP TA2DBDGP ; 
      15 TA2DBDF TA2DBDF ; 
        20 TA2DBDFN TA2DBDFN ; 
      15 TA2DBDT TA2DBDT ; 
        20 TA2DBDTN TA2DBDTN ; 
      15 TA2DBDD TA2DBDD ; 
        20 TA2DBDDN TA2DBDDN ; 
    10 * char(17) ; 
end // end TA2REC

Record TA2REC01 type basicRecord // VAGen Info - redefined TA2REC
  10 * char(160) ; 
  10 TA2-EUR-DATE-FORMATS TA2-EUR-DATE-FORMATS ; 
    15 TA2-GREG-DDMMYY TA2-GREG-DDMMYY ; 
      20 TA2-GREG-DDMMYY-NUM TA2-GREG-DDMMYY-NUM ; 
    15 TA2-GREG-DDMMYY-DISPLAY TA2-GREG-DDMMYY-DISPLAY ; 
    15 TA2-GREG-DDMMCCYY TA2-GREG-DDMMCCYY ; 
      20 TA2-GREG-DDMMCCYY-NUM TA2-GREG-DDMMCCYY-NUM ; 
    15 * char(1) ; 
    15 TA2-GREG-DDMMCCYY-DISPLAY TA2-GREG-DDMMCCYY-DISPLAY ; 
    15 TA2-EUR-LITERAL-DATE TA2-EUR-LITERAL-DATE ; 
end // end TA2REC01

//*** RECORD=TA3REC ****
// *************  query cics for eib information  *************
// *
// *  This record is used to pass/receive information to/from
// *  sub-program TA0230; this module allows a CSP transaction
// *  to query CICS for various information.
// *
// *   CALL OPTIONS: 'EIBINFO ' - EIB information
// *                 'ASSIGN  ' - CICS jobname and system
// *                 'USERID  ' - User identification only
// *                 'USRNAME ' - User name only
// *                 'RMTPTR  ' - Default remote printer only
// *                 'RPTDIST ' - Report distribution routing
// *                 'CICSNBR ' - CICS number (MACKINNEY)
// *                 'ALLFLDS ' - All information
// *
// *  maint log:
// * date        init    comments
// * --------    ----    -------------------------------------
// * 10/20/88    jdv     created member
// * 03/14/89    SPOPA   Add field XURUSRNM, for user name, in
// *                     filler area at the end of the record.
// * 11/18/89    SPOPA   Add field TA3MSGID, for CICS message
// *                     region identification, in the filler
// *                     area at the middle of the record.
// * 01/28/94    vcowan  Add field zfl-lang-cd ... used to get
// *                     CICS LOGON LANG CODE when TA0230 CALLS
// *                     sub-program XC0200.
// * 01/28/94    vcowan  Add field ta3db2ss ... for db2 system
// *                     id, char 4, value dsn?
// *                     ref table in pgm: TA0230
// ************************************************************
// **********************
Record TA3REC type basicRecord
  5 TA3GROUP TA3GROUP ; 
    10 TA3RTNCD TA3RTNCD ; 
    10 TA3OPTN TA3OPTN ; 
    10 TA3EIBRN TA3EIBRN ; 
    10 TA3EIBRM TA3EIBRM ; 
    10 TA3EIBPS TA3EIBPS ; 
    10 * char(12) ; 
    10 TA3APLID TA3APLID ; 
      15 * char(5) ; 
      15 TA3RGNID TA3RGNID ; 
      15 * char(1) ; 
    10 TA3SYSID TA3SYSID ; 
    10 TA3MSGID TA3MSGID ; 
    10 TA3DB2SS TA3DB2SS ; 
    10 * char(4) ; 
    10 TA3USRID TA3USRID ; 
    10 TA3PRTR1 TA3PRTR1 ; 
    10 TA3PRTR2 TA3PRTR2 ; 
    10 TA3NBMSG TA3NBMSG ; 
    10 TA3NBUTL TA3NBUTL ; 
    10 XURUSRNM XURUSRNM ; 
    10 ZFL-LANG-CD ZFL-LANG-CD ; 
    10 * char(5) ; 
end // end TA3REC

//*** RECORD=TA4REC ****
// this date routine is good for any date from january 1, 1800
// to december 31, 2099.  all dates sent to this program are
// verified to be correct and an return code and written error
// message are returned to the calling program.  the time is
// verified and whenever numerics are contained in either of
// the time fields, it will be used as the time.
// when numerics are not in either time field the current time
// from the computer will be used.
// 
// the call statement for ta0040 should be in the following
// format:
// 
//         call ta0040,ta4rec
// 
// ta2rec is 200 bytes long and consists of the following:
// 
//        1) return - four bytes numeric characters
//                    return code from date routines
//                    '0000' successful (no errors)
//                    '0111' invalid julian date
//                    '0222' invalid gregorian date
//                    '0333' invalid century
//                    '0888' invalid gregorian type
//                    '0999' invalid option
//                    '1010' bad commarea -zero length received
// 
//        2) option - eight bytes alpha-numeric characters
//                    what you want the date routine to do
//                    'getdate ' get date and time
//                    'julgreg ' julian converted to all greg
//                               formats
//                    'gregjul ' greg converted to julian and
//                               all greg formats
//                    'greggreg' greg converted to julian and
//                               all greg formats
//                               (to convert dates from one
//                                format to another)
//    can't do ====>  'daysdiff' number of days between from
//                               and to dates not inclusive.
//    can't do ====>  'weeknum ' find week number.
//                    'rdatenum' find the relative date number
//                               from date passed in work area
//                    'rnumdate' find the date for the relative
//                               number passed in the work area
// 
//        3) type   - one byte character
//                    when doing a 'julgreg' or 'greggreg'
//                    where and in what format the
//                    gregorian date is.
//                    'a' mmddyy
//                    'b' mm/dd/yy
//                    'c' mmddccyy
//                    'd' mm/dd/ccyy
//                    'e' yymmdd
//                    'f' yy/mm/dd
//                    'g' ccyymmdd
//                    'h' ccyy/mm/dd
// 
//        4) days   - there bytes numeric characters
//                    days to add to current date or any date
//                    given.
//                    in other words dates-given = date + days
// 
// maint log
//   when      who     why
// --------  --------  ----------------------------------------
// 01/29/88  W. Jones  created to use relative date number
// **********************
Record TA4REC type basicRecord
  5 TA2RTNCD TA2RTNCD ; 
  5 TA2DTOPT TA2DTOPT ; 
  5 TA2GRTYP TA2GRTYP ; 
  5 TA2DYAOD TA2DYAOD ; 
  5 TA2CENT TA2CENT ; 
  5 TA2DYWK TA2DYWK ; 
  5 TA2TIME TA2TIME ; 
    10 TA2TIMEN TA2TIMEN ; 
      15 TA2TIMHM TA2TIMHM ; 
      15 TA2TIMSS TA2TIMSS ; 
  5 TA2TIMED TA2TIMED ; 
  5 TA2JULN TA2JULN ; 
    10 TA2JULNN TA2JULNN ; 
  5 TA2GRGA TA2GRGA ; 
    10 TA2GRGAN TA2GRGAN ; 
  5 TA2GRGB TA2GRGB ; 
  5 TA2GRGC TA2GRGC ; 
    10 TA2GRECN TA2GRECN ; 
  5 TA2GRGD TA2GRGD ; 
  5 TA2GRGE TA2GRGE ; 
    10 TA2GRGEN TA2GRGEN ; 
  5 TA2GROF TA2GROF ; 
  5 TA2GRGG TA2GRGG ; 
    10 TA2GRGGN TA2GRGGN ; 
  5 TA2GRGH TA2GRGH ; 
  5 TA2LITDT TA2LITDT ; 
  5 TA2ERMSG TA2ERMSG ; 
  5 TA4DBDGP TA4DBDGP ; 
    10 TA4RNDT TA4RNDT ; 
      15 TA4RNDTN TA4RNDTN ; 
    10 TA4RDN TA4RDN ; 
      15 TA4RDNN TA4RDNN ; 
  5 * char(26) ; 
end // end TA4REC

//*** RECORD=TA5REC ****
// ************************************************************
// 
//           TA0050  PARAMTER #2:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             TA5APPID = application ID
//             TA5TSQIX = tsq record no./index
//             TA5FNCCD = function code
//             TA5RTNCD = return code
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 06-05-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// **********************
Record TA5REC type basicRecord
  5 TA5DATA TA5DATA ; 
    10 TA5APPID TA5APPID ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 TA5FNCCD TA5FNCCD ; 
    10 TA5RTNCD TA5RTNCD ; 
end // end TA5REC

//*** RECORD=TA6REC ****
// ------- BACKGROUND JOB REQUEST SUBROUTINE PARAMETERS -------
// 
// This is the parameters area that is passed with the CALL
// when invoking TA0P - Background Job Request Subroutine.
// 
// It consists of a return code, submit switch, message switch,
// table index, user identification and name, location, print
// destination identification and description, copies to print,
// multiple occurrences of JCL statements and types, and
// maximum condition code allowed...
// 
// User identification and name, location, print destination
// identification and description and copies to print are
// returned to the calling application if a normal completion.
// 
// See $SUBMIT in DVMSL and/or DV0D in PRODMSL for examples of
// the coding required to use this subroutine.
// 
// Submit switch (TA6SUBSW) values are:
// 
//      N - Display information, but, no JCL to submit
//      Y - Display information, then, tailor and submit JCL
//      I - Obtain report distribution information only
//      S - Tailor and submit JCL only ... NOTE: the remote
//         printer selection screen will be displayed if and
//         only if a default remote printed has not be provided
// 
// Message switch (TA6MSGSW) values are:
// 
//      N - Do not send online message to user at end of job
//      Y - Send online message to user at end of job
// 
// Subroutine return code (TA6RTNCD) values are:
// 
//      0 - Normal completion
//      1 - User cancelled request
//      2 - Missing or invalid parameters
//      3 - /*EOF statement not found
//      4 - Unable to obtain user information
//      5 - Write to internal reader failed
//      6 - Temporary storage error
//      7 - Unable to obtain region/terminal
//      8 - CALL was not successful
// 
// JCL statement type (TA6TYPE) values are:
// 
//      N - NOTIFY parameter (allowed only in TEST regions)
//      O - OUTPUT destination (/*OUTPUT)
//      R - Report distribution (TA0431)
// 
//   *NOTE* - The /*OUTPUT card and the TA0431 procedure are
//            mutually exclusive options.  Either can be used
//            to direct printed output, but, not both.
// 
// Maximum condition code allowed (TA6-MAX-COND-CODE):
//      This numeric field is primed with the maximum value
// allowed to result in the runstream submitted.  If the value
// is exceeded, CA7 will not continue to release jobs with the
// same name.  Normally, this field is set to "0000", to
// inhibit jobs from running when a job receives a value > 0000
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/30/88  SPOPA   New record.
// DV#0     11/20/89  SPOPA   Added TA6MSGSW field to record.
//                            Deleted JCL statement type "J".
// DV#0     01/13/90  SPOPA   Added JCL statement type "R".
// DV#0     04/11/90  JNEWMA  Increased TA6ROW occurs to 400.
// DV#0     10/05/90  SPOPA   Increased TA6ERRFL occurs to 14.
// DV#0     10/23/91  JWOOD   Added TA6-MAX-COND-CODE.
// tsup      6/10/94  vcowan  updated documentation for Option
//                            S of Submit Switch (TA6SUBSW)
// **********************
Record TA6REC type basicRecord
  5 TA6GROUP TA6GROUP ; 
    10 TA6RTNCD TA6RTNCD ; 
    10 TA6SUBSW TA6SUBSW ; 
    10 TA6MSGSW TA6MSGSW ; 
    10 XURUSRID XURUSRID ; 
    10 XURBLDID XURBLDID ; 
    10 XURUSRNM XURUSRNM ; 
    10 XURDEST XURDEST ; 
    10 XURCOPY XURCOPY ; 
    10 XRODESC XRODESC ; 
    10 TA6ERRFL TA6ERRFL [14] ; 
    10 TA6INDEX TA6INDEX ; 
    10 TA6ROW TA6ROW [400] ; 
      15 TARJCL TARJCL ; 
      15 TARTYPE TARTYPE ; 
    10 TA6-MAX-COND-CODE-ALL TA6-MAX-COND-CODE-ALL ; 
      15 TA6-MAX-COND-CODE TA6-MAX-COND-CODE ; 
end // end TA6REC

//*** RECORD=TA8REC ****
// *************  working days calculation record *************
// *
// *  this record is used to pass/receive information to/from
// *  sub-program TA0100; the INTERNATIONAL WORKING DATES
// *  sub-program.
// *      (see PANVALET copybook WTA0100 for more details)
// *  maint log:
// * date      UERID   comments
// * --------  -----   ----------------------------------------
// * 11/20/93  VCOWAN  created member (ref wta0100 on panvalet
// * 08/23/96  MESHEL  added start and end dates
// ************************************************************
// **********************
Record TA8REC type basicRecord
  5 TA8-GROUP TA8-GROUP ; 
    10 TA8-RETURN-CODE TA8-RETURN-CODE ; 
    10 TA8-OPTION TA8-OPTION ; 
    10 TA8-HOLIDAY-COUNTRY TA8-HOLIDAY-COUNTRY ; 
      15 TA8-HOLIDAY-TYPE TA8-HOLIDAY-TYPE ; 
      15 TA8-COUNTRY TA8-COUNTRY ; 
    10 TA8-WORKWEEK TA8-WORKWEEK ; 
    10 TA8-BEG-DATE TA8-BEG-DATE ; 
    10 TA8-END-DATE TA8-END-DATE ; 
    10 TA8-OFFSET TA8-OFFSET ; 
    10 TA8-RETURN-DATE TA8-RETURN-DATE ; 
    10 TA8-DAYS-DIFF TA8-DAYS-DIFF ; 
    10 TA8-LOCATION TA8-LOCATION ; 
    10 TA8-MESSAGES TA8-MESSAGES ; 
      15 TA8-MESSAGE1 TA8-MESSAGE1 ; 
      15 TA8-MESSAGE2 TA8-MESSAGE2 ; 
    10 TA8-DAY-OF-WEEK TA8-DAY-OF-WEEK ; 
      15 TA8-DOW-NUMBER TA8-DOW-NUMBER ; 
      15 TA8-DOW TA8-DOW ; 
        20 TA8-PFX3 TA8-PFX3 ; 
          25 TA8-PFX2 TA8-PFX2 ; 
          25 TA8-FILLER TA8-FILLER ; 
        20 TA8-FILLER2 TA8-FILLER2 ; 
    10 TA8-HOLIDAY-START-DATE TA8-HOLIDAY-START-DATE ; 
      15 TA8-HOLIDAY-START-CC TA8-HOLIDAY-START-CC ; 
      15 TA8-HOLIDAY-START-YYDDD TA8-HOLIDAY-START-YYDDD ; 
        20 TA8-HOLIDAY-START-YY TA8-HOLIDAY-START-YY ; 
        20 TA8-HOLIDAY-START-DDD TA8-HOLIDAY-START-DDD ; 
    10 TA8-HOLIDAY-END-DATE TA8-HOLIDAY-END-DATE ; 
      15 TA8-HOLIDAY-END-CC TA8-HOLIDAY-END-CC ; 
      15 TA8-HOLIDAY-END-YYDDD TA8-HOLIDAY-END-YYDDD ; 
        20 TA8-HOLIDAY-END-YY TA8-HOLIDAY-END-YY ; 
        20 TA8-HOLIDAY-END-DDD TA8-HOLIDAY-END-DDD ; 
    10 * char(2252) ; // filler, for future use
end // end TA8REC

//*** RECORD=TA9REC ****
// *************  working days calculation record *************
// *
// *  this record is used to pass/receive information to/from
// *  sub-program ta0190; the working-days calculation
// *  sub-program. This is also used for TA0290....
// *      (see copybook WWRKDATE)
// *  maint log:
// * date        init    comments
// * --------    ----    -------------------------------------
// * 11/20/86    lhh     created member
// ************************************************************
// **********************
Record TA9REC type basicRecord
  5 TA9GRP TA9GRP ; 
    10 TA9BEGDT TA9BEGDT ; 
      15 TA9BEGCC TA9BEGCC ; 
      15 TA9BEGYY TA9BEGYY ; 
      15 TA9BEGMM TA9BEGMM ; 
      15 TA9BEGDD TA9BEGDD ; 
    10 TA9ENDDT TA9ENDDT ; 
      15 TA9ENDCC TA9ENDCC ; 
      15 TA9ENDYY TA9ENDYY ; 
      15 TA9ENDMM TA9ENDMM ; 
      15 TA9ENDDD TA9ENDDD ; 
    10 TA9OFSET TA9OFSET ; 
    10 TA9RTNFL TA9RTNFL ; 
    10 TA9RTNDT TA9RTNDT ; 
      15 TA9RTNCC TA9RTNCC ; 
      15 TA9RTNYY TA9RTNYY ; 
      15 TA9RTNMM TA9RTNMM ; 
      15 TA9RTNDD TA9RTNDD ; 
    10 TA9DTDIF TA9DTDIF ; 
end // end TA9REC

//*** RECORD=TABREC ****
// this record is for use with csp to call the module ta0800:
// the xref for theater of operations & vxdr001 product region
// code.
// 
// Will be used by MN0M.  The COMMAREA Record will contain the
// contents of this record.
// 
// the call statement for ta0800 should be in the following
// format:
// 
//         CALL TA0800 TABREC (NOMAPS,NONCSP;
// 
// TABREC is 2048 bytes long and consists of the following:
// 
//    1) return code - four bytes numeric
//                    0000 - good return
//                    0001 - xdr-prod-reg-sdesc not found
// 
//    2) xcth-theater-runtype - 4 bytes characer
//                    'PROD' - Production CICS Regions
//                    'TEST' - TEST CICS Regions
// 
//    3) xcth-theater-location - 8 bytes character
//                    'US      ' - US LPARs
//                    'EUROPE  ' - EUROPE LPARs
//                    'ASIA    ' - ASIA LPARs
// 
//    4) xcth-theater-reserved - 38 bytes character
//                    reserved for furture use
// 
//    5) xcth-theater-parm-len -  4 bytes character
//                    value 50
// 
//    6) xdr-prod-reg-cd       -  2 bytes character
//                    from xdrtbl
// 
//    7) xdr-prod-reg-desc     - 30 bytes character
//                    from xdrtbl
// 
//    8) xdr-prod-reg-sdesc    - 12 bytes character
//                    from xdrtbl
// 
//    9) xdr-xx-stat           -  1 byte  character
//                    from xdrtbl
// 
//   10) filler                - 1945 bytes character
//                    reserved for furture use
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// tsup     06-15-95  vcowan  original definition specs
// **********************
Record TABREC type basicRecord
  3 TAB-GROUP TAB-GROUP ; 
    5 SQLCAREC SQLCAREC ; 
    5 TAB-RTN-CD TAB-RTN-CD ; 
    5 XCTHREC-GROUP XCTHREC-GROUP ; 
      10 XCTH-THEATER-RUNTYPE XCTH-THEATER-RUNTYPE ; 
      10 XCTH-THEATER-LOCATION XCTH-THEATER-LOCATION ; 
      10 XCTH-THEATER-RESERVED XCTH-THEATER-RESERVED ; 
      10 XCTH-THEATER-PARMS-LEN XCTH-THEATER-PARMS-LEN ; 
    5 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    5 XDR-PROD-REG-DESC XDR-PROD-REG-DESC ; 
    5 XDR-PROD-REG-SDESC XDR-PROD-REG-SDESC ; 
    5 XXX-STAT XXX-STAT ; 
    5 * char(1809) ; 
end // end TABREC

//*** RECORD=TAEREC ****
// ---------- ERROR DIAGNOSIS REPORTING INFORMATION -----------
// 
// This record is intended to be used as the second parameter
// of the CALL statement when invoking subroutine TA0020 -
// Error Diagnosis Reporting.
// 
// Either move SQLCA.SQLCAREC to TAEREC.SQLCAREC for DB2 errors
// or move appropriate error information to TAEREC.TAEDESC1 and
// TAEREC.TAEDESC2 for application errors before calling the
// subroutine.
// 
// DB2 error example:
//      MOVE SQLCA.SQLCAREC TO TAEREC.SQLCAREC ;
//      CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// Application error example:
//      MOVE EZERT8 TO TAEREC.TAEDESC1 ;
//      MOVE TA3REC.TA3GROUP TO TAEREC.TAEDESC2 ;
//      CALL TA0020 TA1REC,TAEREC (NONCSP ;
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/30/88  SPOPA   New record.
// **********************
Record TAEREC type basicRecord
  10 SQLCAREC SQLCAREC ; 
    15 TAEDESC1 TAEDESC1 ; 
    15 TAEDESC2 TAEDESC2 ; 
end // end TAEREC

//*** RECORD=TARREC ****
// ------------------------------------------------------
// System internal reader queue (INTR) record definition.
// ------------------------------------------------------
// **********************
Record TARREC type serialRecord  {
  fileName = "INTR"
  }
  10 TARJCL TARJCL ; 
end // end TARREC

//*** RECORD=TARRECA ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// "max condition code" into the following jcl record
// //           COND.NORMAL=(____,LT)
// ------------------------------------------------------------
// ***********************
Record TARRECA type basicRecord // VAGen Info - redefined TARREC
  10 * char(26) ; 
  10 TA6-MAX-COND-CODE TA6-MAX-COND-CODE ; 
  10 * char(50) ; 
end // end TARRECA

//*** RECORD=TARRECB ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// "max condition code" into the following jcl record
// //           COND.P0010=(____,LT)
// //           COND.P0020=(____,LT)
// ------------------------------------------------------------
// ***********************
Record TARRECB type basicRecord // VAGen Info - redefined TARREC
  10 * char(25) ; 
  10 TA6-MAX-COND-CODE TA6-MAX-COND-CODE ; 
  10 * char(51) ; 
end // end TARRECB

//*** RECORD=TARRECC ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// identification comment after the JOB statement.
// ------------------------------------------------------------
// ***********************
Record TARRECC type basicRecord // VAGen Info - redefined TARREC
  10 * char(7) ; 
  10 TA0PW-SCHED-ID TA0PW-SCHED-ID ; 
  10 * char(4) ; 
  10 XURUSRID XURUSRID ; 
  10 * char(4) ; 
  10 XX0XWMM XX0XWMM ; 
  10 * char(1) ; 
  10 XX0XWDD XX0XWDD ; 
  10 * char(1) ; 
  10 XX0XWYY XX0XWYY ; 
  10 * char(4) ; 
  10 XX0XWHR XX0XWHR ; 
  10 * char(1) ; 
  10 XX0XWMIN XX0XWMIN ; 
  10 * char(5) ; 
  10 XURUSRNM XURUSRNM ; 
  10 * char(11) ; 
end // end TARRECC

//*** RECORD=TARRECD ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// DUMMY data set name used to force uniqueness within UCC7.
// 
// ------------------- maintenance log  -----------------------
//   date     userid   comments
// 12-04-91   vcowan   added TA. high-level qualifier to DSN
//                     JCL statement....also ref: ta0pt04
// ------------------------------------------------------------
// ***********************
Record TARRECD type basicRecord // VAGen Info - redefined TARREC
  10 * char(21) ; 
  10 * char(3) ; // high-level qualifier: TA.
  10 XURJOBID XURJOBID ; 
  10 * char(1) ; 
  10 TA3EIBRM TA3EIBRM ; 
  10 * char(2) ; 
  10 XX0XWZDT XX0XWZDT ; 
  10 * char(2) ; 
  10 XX0XWHMS XX0XWHMS ; 
  10 * char(29) ; 
end // end TARRECD

//*** RECORD=TARRECE ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// EOJ online message information for JCL procedure TA9911.
// ------------------------------------------------------------
// ***********************
Record TARRECE type basicRecord // VAGen Info - redefined TARREC
  10 TA3MSGID TA3MSGID ; 
  10 TA3EIBRM TA3EIBRM ; 
  10 * char(5) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(6) ; 
  10 XURUSRID XURUSRID ; 
  10 * char(4) ; 
  10 XX0XWMM XX0XWMM ; 
  10 * char(1) ; 
  10 XX0XWDD XX0XWDD ; 
  10 * char(1) ; 
  10 XX0XWYY XX0XWYY ; 
  10 * char(4) ; 
  10 XX0XWHR XX0XWHR ; 
  10 * char(1) ; 
  10 XX0XWMIN XX0XWMIN ; 
  10 * char(24) ; 
end // end TARRECE

//*** RECORD=TARRECF ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert info
// into the following record:
// /* JOB:xxxxxx SUBMITTED BU userid ON mm-dd-yy AT hh:ss for
//    20-char userid name
// ------------------------------------------------------------
// ***********************
Record TARRECF type basicRecord // VAGen Info - redefined TARREC
  10 * char(8) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(14) ; 
  10 XURUSRID XURUSRID ; 
  10 * char(4) ; 
  10 XX0XWMM XX0XWMM ; 
  10 * char(1) ; 
  10 XX0XWDD XX0XWDD ; 
  10 * char(1) ; 
  10 XX0XWYY XX0XWYY ; 
  10 * char(4) ; 
  10 XX0XWHR XX0XWHR ; 
  10 * char(1) ; 
  10 XX0XWMIN XX0XWMIN ; 
  10 * char(5) ; 
  10 XURUSRNM XURUSRNM ; 
end // end TARRECF

//*** RECORD=TARRECH ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the dsn'D' or dsn'T' column in the
// DSN SYSTEM (DSN_) or SYSTSIN line of the TEST version
// of the JCL being submitted online.
// --------  --------  ------  --------------------------------
// CONTROL     DATE     NAME   DESCRIPTION OF CHANGE
// --------  --------  ------  --------------------------------
// 1H8400    10/19/93  hkempe  Created.
// ***********************
Record TARRECH type basicRecord // VAGen Info - redefined TARREC
  10 * char(16) ; // DSN SYSTEM  (DSN
  10 XXX-DSN-SYSTEM XXX-DSN-SYSTEM ; 
  10 * char(1) ; // )
  10 * char(62) ; 
end // end TARRECH

//*** RECORD=TARRECJ ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to obtain the
// job identification (XURJOBID) from the JOB statement.
// ------------------------------------------------------------
// TA0P changed to change the last character of the jobid
// (xurjsuff), depending upon table ta0pt07
// ***********************
Record TARRECJ type basicRecord // VAGen Info - redefined TARREC
  10 * char(2) ; 
  10 XURJOBID XURJOBID ; 
    15 * char(5) ; 
    15 XURJSUFF XURJSUFF ; 
  10 * char(72) ; 
end // end TARRECJ

//*** RECORD=TARRECN ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// NOTIFY user identification (XURUSRID).
// ------------------------------------------------------------
// ***********************
Record TARRECN type basicRecord // VAGen Info - redefined TARREC
  10 * char(22) ; 
  10 XURUSRID XURUSRID ; 
  10 * char(52) ; 
end // end TARRECN

//*** RECORD=TARRECO ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// OUTPUT report print destination (XURDEST) and the number of
// copies to print (XURCOPY).
// ------------------------------------------------------------
// ***********************
Record TARRECO type basicRecord // VAGen Info - redefined TARREC
  10 * char(33) ; 
  10 XURCOPY XURCOPY ; 
  10 * char(6) ; 
  10 XURDEST XURDEST ; 
  10 * char(34) ; 
end // end TARRECO

//*** RECORD=TARRECR ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// report information for JCL procedure TA0431.
// ------------------------------------------------------------
// ***********************
Record TARRECR type basicRecord // VAGen Info - redefined TARREC
  10 * char(71) ; 
  10 XURDEST XURDEST ; 
  10 * char(2) ; 
  10 XXXCHAR XXXCHAR ; 
end // end TARRECR

//*** RECORD=TARRECS ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// distribution information for JCL procedure TA0431.
// ------------------------------------------------------------
// ***********************
Record TARRECS type basicRecord // VAGen Info - redefined TARREC
  10 XURUSRNM XURUSRNM ; 
  10 * char(20) ; 
  10 XURBLDID XURBLDID ; 
  10 * char(20) ; 
  10 XXXCHAR XXXCHAR ; 
  10 XURCOPY XURCOPY ; 
  10 * char(3) ; 
end // end TARRECS

//*** RECORD=TARRECU ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// job identification (XURJOBID) in the UCC7 PARMLIB statement.
// ------------------------------------------------------------
// ***********************
Record TARRECU type basicRecord // VAGen Info - redefined TARREC
  10 * char(43) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(31) ; 
end // end TARRECU

//*** RECORD=TARRECV ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to change the
// num= value for CA-7 interface in the ta0pt02 JCL table.
// ------------------------------------------------------------
// TA0P changed to change the numeric value on the NUM= JCL
// line in the ta0pt02 table to the value found in the ta0pt08
// table if the jobid is in t08. Otherwise, the default is
// NUM=5..... This value is the CA-7 batch initiator number...
// ***********************
Record TARRECV type basicRecord // VAGen Info - redefined TARREC
  10 * char(19) ; 
  10 XURNSUFF XURNSUFF ; 
  10 * char(60) ; 
end // end TARRECV

//*** RECORD=TARRECW ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to place the
// xurjobid into the SAVE and REPL cards of the ta0pt04 JCL
// table used for ca-7 jobs.
// These cards have a W in col 81 of the table...
// ------------------------------------------------------------
// ***********************
Record TARRECW type basicRecord // VAGen Info - redefined TARREC
  10 * char(5) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(69) ; 
end // end TARRECW

//*** RECORD=TARRECX ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// xurjobid into the JCL for
// the  CA-7 interface in the ta0pt07 JCL table. The cards
// with the ADD and UPD  chars in pos 1-3 of the jcl in ta0pt04
// table are the cards impacted.... they have an X in col 81...
// ------------------------------------------------------------
// -------maintenance log  ------------------------------------
//  date    userid   comments
// 01/07/92 jwood    added w, x, & y cards
// 04/15/92 jwood    added JCL & DELETE parm cards and modified
//                   ADD & UPD parm cards
// ------------------------------------------------------------
// ***********************
Record TARRECX type basicRecord // VAGen Info - redefined TARREC
  10 * char(4) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(27) ; 
  10 TAR-MAINID TAR-MAINID ; 
  10 * char(8) ; 
  10 TAR-RELOPR TAR-RELOPR ; 
  10 * char(10) ; 
  10 TAR-CONDCODE TAR-CONDCODE ; 
  10 * char(16) ; 
end // end TARRECX

//*** RECORD=TARRECY ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// xurjobid  into the JCL for
// the  CA-7 interface in the ta0pt04 JCL table. The cards
// with the DEMAND       chars in pos 1-6 of the jcl in ta0pt04
// table are the cards impacted.... They have an Y in col 81...
// ------------------------------------------------------------
// ***********************
Record TARRECY type basicRecord // VAGen Info - redefined TARREC
  10 * char(11) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(63) ; 
end // end TARRECY

//*** RECORD=TARRECZ ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// xurjobid into the JCL for
// the  CA-7 interface in the ta0pt07 JCL table. The cards
// with the DELETE  chars in pos 1-6 of the jcl in ta0pt04
// table are the cards impacted.... they have an z in col 81...
// ------------------------------------------------------------
// ***********************
Record TARRECZ type basicRecord // VAGen Info - redefined TARREC
  10 * char(7) ; 
  10 XURJOBID XURJOBID ; 
  10 * char(67) ; 
end // end TARRECZ

//*** RECORD=TAWREC ****
// ************ DEVELOPMENT MODEL SYSTEM COMMAREA *************
// 
// This record contains data fields that are passed between the
// IMDS CSP System applications.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NONE     07/02/94  RMORGA  New record.
// **********************
Record TAWREC type basicRecord
  5 CAUSERA CAUSERA ; 
    10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
    10 XXX-MSG-NBR XXX-MSG-NBR ; 
    10 XXX-SCRTY-USER-ID XXX-SCRTY-USER-ID ; 
    10 * char(1682) ; 
end // end TAWREC

// CA-7 BATCH PIPE NUMBER
DataItem TA0PW-BTCH-NUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "//joblib" id compare field
DataItem TA0PW-JOBLIB-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// joblib card work, ref: ta0p400
DataItem TA0PW-JOBLIB-JCL-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remote prtr reformat workarea
DataItem TA0PW-RMTDEST char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    character table (8 byte)
DataItem TA0PW-RMTDEST-CHAR char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// remote prtr reformat workarea
DataItem TA0PW-RMTDEST-FRMT char(6)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

//    prtr number table (3 bytes)
DataItem TA0PW-RMTDEST-FRMT-CHAR char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

//    prefix (3 bytes 'RMT')
DataItem TA0PW-RMTDEST-FRMT-PFX char(3)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// remote prtr numeric indicator
DataItem TA0PW-RMTDEST-NUMERIC-IND char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// remote prtr frmt subscript
DataItem TA0PW-RMTDEST-SS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = " ", inputRequired = no
}
end

// SCHED-ID: ESP or UCC7
DataItem TA0PW-SCHED-ID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SU0001 job suffix number
DataItem TA0PW-SU-SUFFIX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remote prtr reformat workarea
DataItem TA0PW-TA6-MAX-CC-ALL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    character table (8 byte)
DataItem TA0PW-TA6-MAX-CC-CHAR char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// remote prtr numeric indicator
DataItem TA0PW-TA6-MAX-CC-NUM-IND char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// remote prtr frmt subscript
DataItem TA0PW-TA6-MAX-CC-SS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = " ", inputRequired = no
}
end

// jobid position 1-2
DataItem TA0PW-XURJOBID-P1-2 char(2)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// jobid position 4-6
DataItem TA0PW-XURJOBID-P3-6 char(4)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// table counter
DataItem TA0PWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen counter
DataItem TA0PWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem TA0PWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll error flag
DataItem TA0PWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem TA0PWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen header
DataItem TA0PWHDR char(39)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// General purpose index
DataItem TA0PWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter link screen/table
DataItem TA0PWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Four-character user location
DataItem TA0PWLOC char(4)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem TA0PWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem TA0PWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CA7 scheduling control switch
DataItem TA0PWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem TA0PWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA1-GROUP char(152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-data-base
DataItem TA1DBASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-db-tbl-group
DataItem TA1DBTBL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-termination
DataItem TA1FUNC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-fyi-code
DataItem TA1FYICD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-location
DataItem TA1LOC char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-sub-location
DataItem TA1LOCAT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-map
DataItem TA1MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map application
DataItem TA1MAPAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map number
DataItem TA1MAPNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program application
DataItem TA1PGMAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-pgm-name
DataItem TA1PGMNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program number
DataItem TA1PGMNO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-key
DataItem TA1TBLKE char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-tbl-view
DataItem TA1TBLVU char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag-error-type
DataItem TA1TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-EUR-DATE-FORMATS char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-EUR-LITERAL-DATE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-GREG-DDMMCCYY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-GREG-DDMMCCYY-DISPLAY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-GREG-DDMMCCYY-NUM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TA2-GREG-DDMMYY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-GREG-DDMMYY-DISPLAY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA2-GREG-DDMMYY-NUM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-century
DataItem TA2CENT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-days-diff
DataItem TA2DBDD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-days-diff-num
DataItem TA2DBDDN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-date-from
DataItem TA2DBDF char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-from-num
DataItem TA2DBDFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-days-between-dates
DataItem TA2DBDGP char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-to
DataItem TA2DBDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-date-to-num
DataItem TA2DBDTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-option
DataItem TA2DTOPT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-days-to-add
DataItem TA2DYAOD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-day-of-week
DataItem TA2DYWK char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-error-message
DataItem TA2ERMSG char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-dash
DataItem TA2GRBD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-dash
DataItem TA2GRBD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-dd
DataItem TA2GRBDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-mm
DataItem TA2GRBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-b-yy
DataItem TA2GRBYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-CCYYMM
DataItem TA2GRCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddccyy-num
DataItem TA2GRECN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddyy
DataItem TA2GRGA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddyy-num
DataItem TA2GRGAN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddyy-display
DataItem TA2GRGB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddccyy
DataItem TA2GRGC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-mmddccyy-display
DataItem TA2GRGD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-DD
DataItem TA2GRGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-yymmdd
DataItem TA2GRGE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-yymmdd-num
DataItem TA2GRGEN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-ccyymmdd
DataItem TA2GRGG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-greg-ccyymmdd-num
DataItem TA2GRGGN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-ccyymmdd-display
DataItem TA2GRGH char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WDATE-GREG-YYMM
DataItem TA2GRGYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-yymmdd-display
DataItem TA2GROF char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-parameters
DataItem TA2GROUP char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-type
DataItem TA2GRTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-julien
DataItem TA2JULN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-julien-num
DataItem TA2JULNN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-literal-date
DataItem TA2LITDT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-return-code
DataItem TA2RTNCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time
DataItem TA2TIME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-time-display
DataItem TA2TIMED char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-time-num
DataItem TA2TIMEN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time-hhmm
DataItem TA2TIMHM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-time-ss
DataItem TA2TIMSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wta0230-assign-applid
DataItem TA3APLID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-db2-subsys-id
DataItem TA3DB2SS char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-eibcposn
DataItem TA3EIBPS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wta0230-eibtrmid
DataItem TA3EIBRM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-eibtrnid
DataItem TA3EIBRN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-parameters
DataItem TA3GROUP char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WTA0230-MSG-REGION-ID
DataItem TA3MSGID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-cics-nbr-msg
DataItem TA3NBMSG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-cics-nbr-util
DataItem TA3NBUTL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-option
DataItem TA3OPTN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-xco100-rmtptr
DataItem TA3PRTR1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-formated-rmtptr
DataItem TA3PRTR2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cics region id number
DataItem TA3RGNID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-return-code
DataItem TA3RTNCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wta0230-assign-sysid
DataItem TA3SYSID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-uto200-userid
DataItem TA3USRID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-cal-rel-date-number
DataItem TA4DBDGP char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-relnum-number
DataItem TA4RDN char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-relnum-number-num
DataItem TA4RDNN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-relnum-date
DataItem TA4RNDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wdate-relnum-date-num
DataItem TA4RNDTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application ID
DataItem TA5APPID char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// entire ta0050 parm #2
DataItem TA5DATA char(10)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// function code
DataItem TA5FNCCD char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// return code
DataItem TA5RTNCD num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// TSQ rel rec no./index
DataItem TA5TSQIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TA5TSQIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TA5TSQIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL: max run cond-code value
DataItem TA6-MAX-COND-CODE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level: ta6-max-cond-code
DataItem TA6-MAX-COND-CODE-ALL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Field error flag
DataItem TA6ERRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TA6GROUP char(32491)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem TA6INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// EOJ online message switch
DataItem TA6MSGSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language table row
DataItem TA6ROW char(81)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subroutine return code
DataItem TA6RTNCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Submit JCL switch (N/Y/I/S)
DataItem TA6SUBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg-date, format 0ccyymmdd
DataItem TA8-BEG-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// country
DataItem TA8-COUNTRY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-DAY-OF-WEEK char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// days-diff
DataItem TA8-DAYS-DIFF num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-DOW char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-DOW-NUMBER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end-date, format 0ccyymmdd
DataItem TA8-END-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-FILLER2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta8 record group level
DataItem TA8-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// holiday-country
DataItem TA8-HOLIDAY-COUNTRY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-END-DATE num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-END-DDD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-END-YYDDD num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-START-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-START-DATE num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-START-DDD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-START-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message2
DataItem TA8-HOLIDAY-START-YYDDD num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holiday-type
DataItem TA8-HOLIDAY-TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location
DataItem TA8-LOCATION char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message1
DataItem TA8-MESSAGE1 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-MESSAGE2 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// messages
DataItem TA8-MESSAGES char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// offset
DataItem TA8-OFFSET num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// option
DataItem TA8-OPTION char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-PFX2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message2
DataItem TA8-PFX3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return-code
DataItem TA8-RETURN-CODE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// return-date, format 0ccyymmdd
DataItem TA8-RETURN-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// workweek
DataItem TA8-WORKWEEK num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// beginning date century
DataItem TA9BEGCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date day
DataItem TA9BEGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date
DataItem TA9BEGDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date month
DataItem TA9BEGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beginning date year
DataItem TA9BEGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of days difference
DataItem TA9DTDIF num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date century
DataItem TA9ENDCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date day
DataItem TA9ENDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date
DataItem TA9ENDDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date month
DataItem TA9ENDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date year
DataItem TA9ENDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta9 record group level
DataItem TA9GRP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of days to offset
DataItem TA9OFSET num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date century
DataItem TA9RTNCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date day
DataItem TA9RTNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date
DataItem TA9RTNDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return flag (0=good, 1=bad)
DataItem TA9RTNFL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date month
DataItem TA9RTNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return date year
DataItem TA9RTNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TAB-GROUP char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0800-return-code
DataItem TAB-RTN-CD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERRDIAG-APPL-ERR-DESC1
DataItem TAEDESC1 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERRDIAG-APPL-ERR-DESC2
DataItem TAEDESC2 char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value of first map index
DataItem TAM-MAP-FIRST-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// value of last map index
DataItem TAM-MAP-LAST-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Partial STALK name
DataItem TAM-PARTIAL-KEY char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up window index max
DataItem TAM-POPUP-INX-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pop-up window done flag
DataItem TAM-POPUP-WINDOW-DONE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pop-up window index
DataItem TAM-POPUP-WINDOW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selected EMP-DEVICE-ID
DataItem TAM-SELECTED-EMP-DEVICE-ID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ucc7 JCL cond code value
DataItem TAR-CONDCODE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ucc7 MVS id;SY2=devl;SY3=prod
DataItem TAR-MAINID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ucc7 JCL cond code comparand
DataItem TAR-RELOPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TARJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TARTYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Name of address being selected
DataItem TAW-ADDRESS-NAME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General error flag
DataItem TAW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Requested report or file
DataItem TAW-RPT-FIL-KEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Requested user id
DataItem TAW-SCRTY-USER-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

