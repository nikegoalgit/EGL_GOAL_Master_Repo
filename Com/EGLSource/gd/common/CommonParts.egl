package gd.common;
import corpcom7.*;
import corpx1.*;
//*** RECORD=GD2REC ****
// Menu Literal Record.  The Menu Literal File contains records
// defined in this description.  the 583 byte records contain
// a 4 byte transaction id key field, a menu heading, and up to
// 10 destination choices and their associated transaction id.
// This allows one menu program to display different menus.
// Changes may be made to menus by changing literals in this
// file rather than in a program.
// ;
// 2/10/88 - changed rec lngth from 583 to 742 chars...jbw
// ;
// ;
// **********************
Record GD2REC type indexedRecord  {
  fileName = "GD2MLF", keyItem = GD2TRAN
  }
  10 GD2TRAN GD2TRAN ; 
  10 GD2LOTR GD2LOTR ; 
    20 GD2HEAD GD2HEAD ; 
    20 GD2SEL GD2SEL [13] ; 
      25 GD2LIT GD2LIT ; 
      25 GD2DTID GD2DTID ; 
end // end GD2REC

//*** RECORD=GD3REC ****
//      Goal Documenataion system working storage contains
// data items needed by the system for its internal processing
// general purpose indicies, data items for saving the value
// of a record key during pseudo conversational mode.
// **********************
Record GD3REC type basicRecord
  10 GD3HEAD GD3HEAD ; 
    20 GD3PROC GD3PROC ; 
    20 * char(2) ; 
    20 GD3MAP GD3MAP ; 
    20 * char(2) ; 
    20 GD3TTL GD3TTL ; 
  10 GD3LINE GD3LINE ; 
    20 GD3OBJ GD3OBJ ; 
    20 GD3RTTL GD3RTTL ; 
    20 * char(13) ; 
  10 GD3BMSG0 GD3BMSG0 ; 
    20 GD3MSG1 GD3MSG1 ; 
    20 GD3MSG2 GD3MSG2 ; 
    20 GD3MSG3 GD3MSG3 ; 
  10 GD3PEND GD3PEND ; 
    20 GD3PEND1 GD3PEND1 ; 
    20 GD3PEND2 GD3PEND2 ; 
    20 GD3PEND3 GD3PEND3 ; 
  10 GD349B GD349B ; 
    20 GD304B GD304B ; 
    20 GD310B GD310B ; 
    20 GD320B GD320B ; 
    20 * char(15) ; 
end // end GD3REC

//*** RECORD=GD4REC ****
// general purpose table display record for gd appls
// - code,desc,abbrev,status format -
// **********************
Record GD4REC type basicRecord
  10 GD4RECGP GD4RECGP ; 
    15 GD4CD4 GD4CD4 ; 
      20 * char(1) ; 
      20 GD4CD GD4CD ; 
      20 * char(1) ; 
    15 GD4FILL GD4FILL ; 
      20 * char(6) ; 
      20 GD4DESC GD4DESC ; 
      20 * char(7) ; 
      20 GD4ABRV GD4ABRV ; 
        25 * char(2) ; // area field
        25 GD4AREA GD4AREA ; 
        25 * char(3) ; // area field
      20 * char(7) ; 
      20 XXXSTAT XXXSTAT ; 
      20 * char(17) ; 
end // end GD4REC

//*** RECORD=GD4REC2 ****
// general purpose table display record for gd appls
// - code,desc,sdesc,abbrv,status format -
// ***********************
Record GD4REC2 type basicRecord // VAGen Info - redefined GD4REC
  10 GD4RECGP GD4RECGP ; 
    20 * char(1) ; 
    20 GD4CD GD4CD ; 
    20 * char(3) ; 
    20 XGPCD XGPCD ; 
    20 * char(2) ; 
    20 GD4DESC GD4DESC ; 
    20 * char(4) ; 
    20 GD4SDESC GD4SDESC ; 
    20 * char(4) ; 
    20 GD4ABRV GD4ABRV ; 
    20 * char(7) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(4) ; 
end // end GD4REC2

//*** RECORD=GD4REC3 ****
// general purpose table display record for gd appls
// - code,desc,sdesc,abbrv,status format -
// ***********************
Record GD4REC3 type basicRecord // VAGen Info - redefined GD4REC
  10 GD4RECGP GD4RECGP ; 
    20 GD4CD3 GD4CD3 ; 
    20 * char(3) ; 
    20 XGPCD XGPCD ; 
    20 * char(2) ; 
    20 GD4DESC GD4DESC ; 
    20 * char(4) ; 
    20 GD4SDESC GD4SDESC ; 
    20 * char(4) ; 
    20 GD4ABRV GD4ABRV ; 
    20 * char(7) ; 
    20 XXXSTAT XXXSTAT ; 
    20 * char(4) ; 
end // end GD4REC3

Record GDTREC type basicRecord
  10 GDTTTRN GDTTTRN ; 
  10 GDTTMEB GDTTMEB ; 
  10 GDTTTID GDTTTID ; 
end // end GDTREC

//*** RECORD=GDWREC ****
//      Goal Documenataion system working storage contains
// data items needed by the system for its internal processing
// general purpose indicies, data items for saving the value
// of a record key during pseudo conversational mode.
// **********************
Record GDWREC type basicRecord
  5 GDWRECGP GDWRECGP ; 
    10 GDWINDX1 GDWINDX1 ; 
    10 GDWINDX2 GDWINDX2 ; 
    10 GDWINDX3 GDWINDX3 ; 
    10 GDWSCAN GDWSCAN ; 
    10 GDWDEL GDWDEL ; 
    10 GDWTMKEY GDWTMKEY ; 
      20 GDWALPHA GDWALPHA ; 
      20 GDWSEQ GDWSEQ ; 
    10 GDWCURR GDWCURR ; 
    10 GDWITEM GDWITEM ; 
      20 GDWITID GDWITID ; 
        30 GDWICSP GDWICSP ; 
        30 * char(1) ; 
      20 GDW-ITEM-POSN5 GDW-ITEM-POSN5 ; 
      20 GDWIFND GDWIFND ; 
      20 * char(1) ; 
      20 GDWUTID GDWUTID ; 
    10 GDWTID GDWTID ; 
      20 GDW-TID-POSN1 GDW-TID-POSN1 ; 
      20 GDW-TID-POSN2 GDW-TID-POSN2 ; 
      20 GDW-TID-POSN3 GDW-TID-POSN3 ; 
    10 GDWPTID GDWPTID ; 
    10 GDWFMAPP GDWFMAPP ; 
    10 GDWFLAGS GDWFLAGS ; 
      20 GDWMLERR GDWMLERR ; 
      20 GDWAIDS GDWAIDS ; 
      20 GDWFUNC GDWFUNC ; 
      20 GDWEOC GDWEOC ; 
      20 GDWFEOD GDWFEOD ; 
      20 GDWEDIT GDWEDIT ; 
      20 GDWZMAP GDWZMAP ; 
      20 GDWFIND GDWFIND ; 
      20 GDWRECON GDWRECON ; 
      20 GDWMLRIO GDWMLRIO ; 
      20 GDWMLREF GDWMLREF ; 
      20 GDWMLRMT GDWMLRMT ; 
      20 GDWTMRIO GDWTMRIO ; 
      20 GDWTMREF GDWTMREF ; 
      20 GDWSERR GDWSERR ; 
      20 GDWRERR GDWRERR ; 
      20 GDWACCES GDWACCES ; 
end // end GDWREC

// destination transaction id
DataItem GD2DTID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading for this tran id
DataItem GD2HEAD char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination literal
DataItem GD2LIT char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// clean out record field.
DataItem GD2LOTR char(738)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selections displayed on menu
DataItem GD2SEL char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu transaction id
DataItem GD2TRAN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare Tran ID to blanks
DataItem GD304B char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare find field to blanks
DataItem GD310B char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare item field to blanks
DataItem GD320B char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare literal to blanks
DataItem GD349B char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message breakdown
DataItem GD3BMSG0 char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen heading breakdown
DataItem GD3HEAD char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line of text
DataItem GD3LINE char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map name
DataItem GD3MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first part
DataItem GD3MSG1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// transaction id
DataItem GD3MSG2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last part
DataItem GD3MSG3 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// object of find.
DataItem GD3OBJ char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pending message field.
DataItem GD3PEND char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first 26 bytes
DataItem GD3PEND1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// middle 26 bytes
DataItem GD3PEND2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last 26 bytes
DataItem GD3PEND3 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process
DataItem GD3PROC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// title on record.
DataItem GD3RTTL char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// title of screen
DataItem GD3TTL char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// abbreviation field
DataItem GD4ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area field
DataItem GD4AREA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code field
DataItem GD4CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code field
DataItem GD4CD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code field
DataItem GD4CD4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description field
DataItem GD4DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem GD4FILL char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group field
DataItem GD4RECGP char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short description fld
DataItem GD4SDESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// member name/alpha part of key
DataItem GDTTMEB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// logically previous tran-id
DataItem GDTTTID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// target tran-id.
DataItem GDTTTRN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// csp mbr name...posn5
DataItem GDW-ITEM-POSN5 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// tran id (sys id posn1)
DataItem GDW-TID-POSN1 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// tran id (sys id posn2)
DataItem GDW-TID-POSN2 char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// tran id (gd mbr suffix)
DataItem GDW-TID-POSN3 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// (R)andom or (S)equential
DataItem GDWACCES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flow stage pf key indicator
DataItem GDWAIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alpha portion of key
DataItem GDWALPHA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved sequence during find.
DataItem GDWCURR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete confirmation flag
DataItem GDWDEL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// edit tran id (P)ass (F)ail.
DataItem GDWEDIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of chapter indicator.
DataItem GDWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of data during find.
DataItem GDWFEOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// string (F)ound or (N)ot found
DataItem GDWFIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for flags.
DataItem GDWFLAGS char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CAFMAPP from app.
DataItem GDWFMAPP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GD0Z function flag (A, U, D)
DataItem GDWFUNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item for csp table
DataItem GDWICSP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item find string for GD01
DataItem GDWIFND char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general purpose index
DataItem GDWINDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general purpose index
DataItem GDWINDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general purpose index
DataItem GDWINDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item passed to GD01.
DataItem GDWITEM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item pseudo tran id.
DataItem GDWITID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MLR NRF flag for GD00
DataItem GDWMLERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MLR EOF flag
DataItem GDWMLREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MLR I/O error flag
DataItem GDWMLRIO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MLR e(M)p(T)y file flag.
DataItem GDWMLRMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// logically previous tran id
DataItem GDWPTID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of record
DataItem GDWRECGP char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reconverse map flag.
DataItem GDWRECON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MLR random access error flag.
DataItem GDWRERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scan index for TMR.
DataItem GDWSCAN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric sequence within alpha
DataItem GDWSEQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MLR seq access error flag.
DataItem GDWSERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tran id record key
DataItem GDWTID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text Master key field.
DataItem GDWTMKEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TMR EOF flag
DataItem GDWTMREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TMR I/O error flag
DataItem GDWTMRIO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// users original application
DataItem GDWUTID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit map (P)ass (F)ail.
DataItem GDWZMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

