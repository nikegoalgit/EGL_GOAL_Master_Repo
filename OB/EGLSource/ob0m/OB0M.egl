package ob0m;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=OB0M ****
// OB0M - ORDER BATCH ORDER HOLDS
// 
// 
// OVERVIEW:
// 
// OB0M DISPLAYS A LIST OF HOLDS FOR A SELECTED SUBORDER.  THE
// ORDER MAY BE PLACED ON HOLD BY THE CREATE PROGRAM OR THE
// BATCH EDIT PROGRAM.  BOTH PROGRAMS WRITE A RECORD IN
// DORDB.VOBMSG01 FOR EACH HOLD CONDITION THAT IS FOUND.  A
// LIST OF HOLDS FOR AN ORDER IS CREATED IN TEMP STORAGE WHEN
// THE ORDER IS SELECTED IN OB0B.  WHEN A HOLD IS SELECTED
// AND THE ENTER KEY IS USED, THIS APPLICATION WILL TRANSFER
// TO THE APPLICATION WHERE THE HOLD CAN BE REVIEWED.  EACH
// HOLD MESSAGE HAS AN ORDER BATCH CSP APPLICATION ASSOCIATED
// WITH IT.  A HOLD DOES NOT HAVE TO BE SELECTED; INSTEAD THE
// USER MAY ENTER AN 'R' AND THE HOLD WILL BE RELEASED.  IF
// NOTHING IS SELECTED OR RELEASED, THIS APPLICATION WILL
// REDISPLAY THE MAP.
// 
// 
// OBJECTIVE:
// 
// THE SERVICE REP MAY SELECT OR RELEASE ONE OR MORE HOLDS
// ON A PAGE BY ENTERING AN 'S' OR 'R' AND USING THE ENTER KEY.
// SCROLLING IS PERMITTED WITH PF7/PF8 OR BY ENTERING A PAGE
// NUMBER.  THIS APPLICATION WILL UPDATE TEMP STORAGE (OBF3)
// WITH THE VALUE OF THE SELECT OPTIONS FROM THE MAP, UPDATE
// DORDB.VOBMSG01 WHEN A HOLD HAS BEEN RELEASED, AND CHANGE
// SELECTED HOLDS THAT ARE VIEWED TO 'V'.  WHEN MORE THAN ONE
// HOLD IS SELECTED, THIS APPLICATION WILL TRANSFER TO THE
// APPLICATION WHERE THE HOLD MAY BE REVIEWED, WITHOUT
// REDISPLAYING THE ORDER HOLD MAP UNTIL ALL THE SELECTED HOLDS
// HAVE BEEN PROCESSED.
// 
// 
// ************************************************************
// *                   MAINTENANCE LOG  *
// ************************************************************
// 
//   DATE     NAME   DESCRIPTION OF CHANGE
// --------  ------  ------------------------------------------
// 06/21/90  SCANTR  CREATED.
// 02/15/91  dmeier  regen for database changes
// 08/12/91  oricha  s52,s60,s61,w01. add screened product
//                     logic.
// 05/19/94  scantr  virtual airspeed project: chgd obwrec,
//                   xsobs02, xsobs03, added xsobs10
// 05/24/94  scantr  changed xsobs03
// 06/08/94  scantr  virtual airspeed - obwrec. xsobs03
// 06/15/94  dmeier  virtual airspeed - build temp storage
//                                      for holds in ob0m
// 07/12/94  craine  virtual airspeed - call relational edit
// 08/18/94  craine  changes to xsobs-limited-edit,
//                   xsobs-full-edit.
// 08/30/94 craine  changes to xsobs-full edit and block dl
//                  and ld orders from updating
// 09/06/94  craine  change to obwrec
// 10/06/94  craine  add new xsobs-add-new-oba
// 10/26/94  schase  change to obwrec
// 11/11/94  craine  add ability to apply csr hold
// 11/29/94  CBRINE  Put csr hold prompt on 12th line. Update
//                   hold flag on OBAREC (for OB0B displaying)
// 01/30/95  craine  chg to xsobs-upd-oba-edit
// 02/24/95  dcassi  reworded csr hold message in ob0m010.
// 04/10/95  craine  Add COMMIT to XSOB002 and XSOB003.
// 04/27/95  craine  allow for new yobcd 'pd' and 'lp'.
// 08/07/95  craine  DATABASE CHANGES
// 06/03/97  rgilli  YR2000 - Regen to ensure correct ver.
//                            of xx0xs01 is included.
// 09/08/97  wleong  regen for yostbl structure change
// 11/06/97  SATYAM  Modified the sgrps OB0MS-BLD-OB7REC,
//                   OB0MS-GET-HOLDS, OB0MS-OPN-OB6REC,
//                   OB0MS-CLS-OB6REC and OB0MS-NXT-OB6REC
//                   If in ob0f a product is selected and then
//                   pf19 is pressed only the hold messages
//                   for that product are shown, if no product
//                   is selected then all the hold messages
//                   are shown.
// 11/12/97  SATYAM  Modified the condition for obwrec.obwmsel
//                   to check if the value is in between 1 & 11
// *********************
Program OB0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OB0MW01 OB0MW01; // record
  OB1REC OB1REC; // record
  OB6REC OB6REC; // record
  OB7REC OB7REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFEREC OBFEREC; // record
  OBFREC OBFREC; // record
  OBKREC OBKREC; // record
  OBLEREC OBLEREC; // record
  OBWREC OBWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OBMTBL {deleteAfterUse = yes}; // table
  use YOSTBL; // table
  use OB0MM.OB0MM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0M000: OB0M000();
    goto OB0M010;
    OB0M010: OB0M010();
    goto OB0M010;
    XSOB003: XSOB003();
  end // end main
end // end OB0M

// EXECUTE PROCESS
Function OB0M000()

  XSENTRY(); /* check csp security*/

  XSOBS01(); /* check batch order security*/

  OB0MS10(); /* initialize OB0M application*/

  OBWREC.OBWER911 = "N"; /* init -911 flag*/

  XSOBS02(); /* check if batch edit is running*/

  XSOBS03(); /* read order header (OB1REC)*/

  OB0MS-GET-HOLDS(); /* get current hold messages*/

  if (OBWREC.CAMSG == " ")
    OB0MS20(); /* execute update*/
  end

  OB0MM001.CAMSG = OBWREC.CAMSG; /* format map camsg*/
  OBWREC.CAMSG = " "; /* clear OBWREC camsg*/

  OB0MS30(); /* build map*/


end // end OB0M000

// CONVERSE/ AFTER PROCESS
Function OB0M010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  if (OBWREC.OBW-CSR-HOLD-FL == "Y") /* if order already on csr*/
    set OB0MM001.CSR-HOLD-FLAG invisible, protect; /* hold, darken fields*/
    set OB0MM001.CSR-HOLD-MSG invisible, protect; /* otherwise, send message*/
  else
    if (OBWREC.OBWMSEL >= 1
     && OBWREC.OBWMSEL <= 11)
      set OB0MM001.CSR-HOLD-FLAG invisible, protect; /* hold, darken fields*/
      set OB0MM001.CSR-HOLD-MSG invisible, protect; /* otherwise, send message*/
    else
      OB0MM001.CSR-HOLD-MSG = "IF CSR HOLD IS NEEDED, ENTER \"H\" ON THIS LINE";
    end
  end


  converse OB0MM001 ;

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OB0MM001.CAMSG = " "; /* clear map camsg*/

    /* RESET FIELD ATTRIBUTES*/

  OB0MS40();


    /* EDIT MAP*/

  OB0MS50();


    /* CONVERSE UPDATE*/

  if (OBWREC.OBWERRFL == "N" /* no errors*/
   && converseVar.eventKey is enter)
    OB0MS60();
  end


    /* SET NEW PAGE NUMBER*/

  if (OBWREC.OBWERRFL == "N") /* no errors*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      OB0MS70();
    end
  end

  if (OB1REC.YOBCD != "CA" /* hasn't cleared availability*/
   || OB1REC.YOBCD != "XL" /* hasn't canceled*/
   || OB1REC.YOBCD != "LP" /* hasn't lost demand reported*/
   || OB1REC.YOBCD != "PD") /* hasn't postponed demand reported*/

    if (OBWREC.OBWERRFL == "N" /* no errors*/
     && converseVar.eventKey is enter
     && OB0MW01.OB0MWREL == "Y") /* at least one hold was released*/
      OB1REC.YOBCD = "NC";
      OB0MS63(); /* UPDATE HEADER*/
      OBWREC.OBW-EDIT-FUNCTION = "2";
      XSOBS-ONLINE-EDIT();
    end

  end

    /* EDIT PFKEYS*/

  OB0MSPF();

end // end OB0M010

// BUILD PASSING RECORD FOR DB2
Function OB0MS-BLD-OB7REC()


  set OB7REC empty;


  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB7REC.OB7MSGTP = "H"; /* only errs*/


  if (OBWREC.OBWMSEL >= 1
   && OBWREC.OBWMSEL <= 11)
    OB7REC.OP2LNINB = OBWREC.OBWLNINB;
  end


   /* *************************************************************/
end // end OB0MS-BLD-OB7REC

// BUILD TEMP STORAGE 3 - HOLDS
Function OB0MS-BLD-TMP-STRG()

   /* load and write temp storage 3 - obf2*/

  set OBCREC empty; /* init temp storage record*/

  OBWREC.OBWTSF3S = 1; /* init sub to first message*/

  while (OBWREC.OBWTSF3S <= 11
   && OB0MW01.OB0MW-EOF-FL == "N")

    /* load temp storage 3 - obf3*/

    /* screened style releases show either an 'a' or 'u', meaning*/
    /* authorized to get blank availability or unauthorized for blank*/
    /* avail because we're now past the xow program cutoff date.*/
    /* these codes are used by ob1060 to process availability properly.*/

    if (OB7REC.OB7MSGRF == "A"
     || OB7REC.OB7MSGRF == "U")
      OBCREC.OBCMSEL[OBWTSF3S] = "R";
    else
      OBCREC.OBCMSEL[OBWTSF3S] = OB7REC.OB7MSGRF;
    end

    if (OB7REC.OB6MSGNB == "281") /* csr has set a hold on*/
      OBWREC.OBW-CSR-HOLD-FL = "Y"; /* this order*/
    end

    OBCREC.OB6MSGNB[OBWTSF3S] = OB7REC.OB6MSGNB; /* message number*/
    OBCREC.OP2LNINB[OBWTSF3S] = OB7REC.OP2LNINB; /* line item nbr*/
    OBCREC.OB7MSGRF[OBWTSF3S] = OB7REC.OB7MSGRF; /* release flag*/


    OBCREC.OB6MSGDS[OBWTSF3S] = OB6REC.OB6MSGDS; /* move desc*/
    OBCREC.XXXPGMNO[OBWTSF3S] = OB6REC.XXXPGMNO; /* move pgm nbr*/

    /* lookup the program abrv from the OBMTBL table*/

    sysVar.arrayIndex = 1;
    if (OB6REC.XXXPGMNO in OBMTBL.XXXPGMNO) /* pgm nbr key*/
      OBCREC.XXXPGMAB[OBWTSF3S] = OBMTBL.XXXPGMAB[sysVar.arrayIndex];
    else
      OBCREC.XXXPGMAB[OBWTSF3S] = " ";
    end

    OB0MS-NXT-OB6REC(); /* select next message*/

    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* add 1 to sub*/

  end


   /* write temp storage 3*/

  XSOBT3W();



   /* *************************************************************/
end // end OB0MS-BLD-TMP-STRG

// CLOSE OB6REC VIA OB1240
Function OB0MS-CLS-OB6REC()

   /* close scan*/

  set SQLCA empty;
  set OB6REC empty;

  if (OBWREC.OBWMSEL >= 1
   && OBWREC.OBWMSEL <= 11)
    call "OB1240" ("C2", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  else
    call "OB1240" ("CS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "CS OB1240 H OB0MS-CLS-OB6REC";
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0MS-CLS-OB6REC

// get current hold messages
Function OB0MS-GET-HOLDS()

  if (OBWREC.OBW-GET-HOLDS-FL == "Y"
   || (OBWREC.OBWMSEL >= 1
   && OBWREC.OBWMSEL <= 11))
    /* select all order hold messages*/
    /* write a temporary storage record (obf3) for*/
    /* each map full of hold messages - 11 msgs per screen*/

     /* set end of file flag to no*/

    OB0MW01.OB0MW-EOF-FL = "N";
    OBWREC.OBW-CSR-HOLD-FL = "N";

    XSOBT3P(); /* purge temp storage 3 to start clean*/

    OB0MS-BLD-OB7REC(); /* build rec to pass to select messages*/
    OB0MS-OPN-OB6REC(); /* get all the messages for the order*/
    OB0MS-NXT-OB6REC(); /* select next mssg for temp storage 2*/

    if (OB0MW01.OB0MW-EOF-FL == "Y") /* no messages*/
      set OBCREC empty;
      XSOBT3W(); /* write one blank record*/
    else
      /* while there are messages selected*/

      while (OB0MW01.OB0MW-EOF-FL == "N")
        OB0MS-BLD-TMP-STRG(); /* load and write temp storage 3*/
      end
    end

    OBWREC.OBWTSF3P = 1; /* set page number*/
    OBWREC.OBWTSF3S = 1; /* position cursor on first message*/
    /* total number of pages was set in write statement group*/


    /* close scan*/

    OB0MS-CLS-OB6REC(); /* close OB6REC via OB1240*/

    OBWREC.OBW-GET-HOLDS-FL = "N";
  end

  XSOBT3R(); /* read temp storage 3 - holds*/

   /* *************************************************************/
end // end OB0MS-GET-HOLDS

// FETCH NEXT OB6REC VIA OB1240
Function OB0MS-NXT-OB6REC()


   /* select next message for loading temp storage 3*/
            /* obf3 - holds*/


  set SQLCA empty;
  set OB6REC empty;

  if (OBWREC.OBWMSEL >= 1
   && OBWREC.OBWMSEL <= 11)
    call "OB1240" ("N2", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  else
    call "OB1240" ("SN", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* i/o mod select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0MW01.OB0MW-EOF-FL = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOC = "SN OB1240 H OB0MS-NXT-OB6REC";
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWER911 = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0MS-NXT-OB6REC

// OPEN OB6REC VIA OB1240
Function OB0MS-OPN-OB6REC()

   /* get all the error msgs for the order*/

  set SQLCA empty;
  set OB6REC empty;

  if (OBWREC.OBWMSEL >= 1
   && OBWREC.OBWMSEL <= 11)
    call "OB1240" ("S2", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  else
    call "OB1240" ("SS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "SS OB1240 H OB0MS-OPN-OB6REC";
    if (SQLCA.VAGen_SQLCODE == -911)
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* -911 processing, no rollback*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0MS-OPN-OB6REC

// INITIALIZE OB0M APPLICATION
Function OB0MS10()

    /* SET RECORDS EMPTY*/

  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBKREC empty;
  set OB1REC empty;
  set OB7REC empty;
  set OB8REC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA5REC empty;
  set XX0XW01 empty;

  set OB0MW01 empty;
  set OB0MM001 empty;

  XX0XS01(); /* get current time and date for updates*/
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  TA1REC.TA1MAP = "OB0MM001";


end // end OB0MS10

// EXECUTE UPDATE
Function OB0MS20()

  OBWREC.OBWTSF3S = 1; /* init temp subscript*/

  while (OBWREC.OBWTSF3S <= 11) /* less than or equal to 11*/
    if (OBCREC.OBCMSEL[OBWTSF3S] == "S") /* selection found*/
      if (OBCREC.OP2LNINB[OBWTSF3S] > 0) /* if line item # > 0*/
        OB0MS22(); /* find line item number*/
        if (OB0MW01.OB0MWFND == "Y") /* line item was found*/
          OB0MS28(); /* update temp & xfer to selection*/
        else
          OB0MS24(); /* update temp for not found item*/
          OB0MS25(); /* read database hold rec*/
          OB0MS26(); /* delete database hold rec*/
        end
      else
        OB0MS28(); /* update temp & xfer to selection*/
      end
    else
      if (OBCREC.OBCMSEL[OBWTSF3S] == "?") /* selection found*/
        OB0MS29();
      end
    end
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment by +1*/
  end


end // end OB0MS20

// FIND LINE ITEM NUMBER
Function OB0MS22()

     /* LOOKING FOR THE PRODUCT IN THE PRODUCT TEMP STORAGE, OBF4*/

  OBWREC.OBWTSF4P = 1; /* init product item temp storage page*/
  OB0MW01.OB0MWFND = "N"; /* init line item found flag*/

  while (OBWREC.OBWTSF4P <= OBWREC.OBWTSF4M) /* while page <= max page*/
    XSOBT4R(); /* read OBDREC temp storage*/
    OBWREC.OBWTSF4S = 1; /* init product item temp storage sub*/
    while (OBWREC.OBWTSF4S <= 10) /* while <= total # of items on page*/
      if (OBCREC.OP2LNINB[OBWTSF3S] == OBDREC.OP2LNINB[OBWTSF4S] /* matched*/
       && OBDREC.OBDMSEL[OBWTSF4S] != "*")                       /* and hasn't been deleted*/
        OB0MW01.OB0MWFND = "Y"; /* set found flag on*/
        return;
      end
      OBWREC.OBWTSF4S = OBWREC.OBWTSF4S + 1; /* increment line subscript*/
    end
    OBWREC.OBWTSF4P = OBWREC.OBWTSF4P + 1; /* increment page subscript*/
  end

  OBWREC.OBWTSF4P = 1;
                                   /* reinit product item temp storage page*/
  OBWREC.OBWTSF4S = 1; /* reinit product item temp storage sub*/

end // end OB0MS22

// LINE ITEM NOT FOUND
Function OB0MS24()

  OBCREC.OBCMSEL[OBWTSF3S] = "*"; /* format select option on obf3*/

  OBCREC.OB6MSGDS[OBWTSF3S] = "PRODUCT LINE ITEM NO LONGER EXISTS";

  XSOBT3U(); /* update temp storage*/


end // end OB0MS24

// SELECT MESSAGE RECORD
Function OB0MS25()

  set OBKREC empty;
  set OB7REC empty;
  set SQLCA empty;

  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* format part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* format cust ord id*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* format nike ord id*/

  OB7REC.OP2LNINB = OBCREC.OP2LNINB[OBWTSF3S];
                                   /* format line item nbr*/
  OB7REC.OB6MSGNB = OBCREC.OB6MSGNB[OBWTSF3S]; /* format message number*/

  OBKREC.OBKTASK = "S ";

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB"; /* database name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0MS25"; /* statement group*/
    OB0MW01.OB0MWLIN = OB7REC.OP2LNINB; /* format rest of key*/
    OB0MW01.OB6MSGNB = OB7REC.OB6MSGNB; /* line and msg*/
    TA1REC.TA1LOCAT[4] = OB0MW01.OB0MWKEY; /* grp lvl to ta1rec*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04(); /* post and restart*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end


end // end OB0MS25

// DELETE MESSAGE RECORD
Function OB0MS26()

  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "D ";

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB"; /* database name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "D"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0MS26"; /* statement group*/
    OB0MW01.OB0MWLIN = OB7REC.OP2LNINB; /* format rest of key*/
    OB0MW01.OB6MSGNB = OB7REC.OB6MSGNB; /* line and msg*/
    TA1REC.TA1LOCAT[4] = OB0MW01.OB0MWKEY; /* grp lvl to ta1rec*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04(); /* post and restart*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end




end // end OB0MS26

// LINE ITEM FOUND
Function OB0MS28()

  OBCREC.OBCMSEL[OBWTSF3S] = "V"; /* change 's' to 'v' on obf3*/

  XSOBT3U(); /* update temp storage*/

  OBWREC.OBWLNINB = OBCREC.OP2LNINB[OBWTSF3S]; /* save line item #*/

  OB0MW01.OB0MWMNB = OBCREC.OB6MSGNB[OBWTSF3S]; /* err nbr*/
  OB0MW01.OB0MWBL2 = " "; /* filler*/
  OB0MW01.OB6MSGDS = OBCREC.OB6MSGDS[OBWTSF3S]; /* error msg*/
  OBWREC.CAMSG = OB0MW01.OB0MWMSG; /* format error msg*/

  COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* format commarea*/

  COMMAREA.CATOAP = OBCREC.XXXPGMNO[OBWTSF3S]; /* format fix pgm name*/

  XSEXIT();


end // end OB0MS28

// transfer to help screen
Function OB0MS29()



  OBWREC.OB6MSGNB = OBCREC.OB6MSGNB[OBWTSF3S];
  OBWREC.OB6MSGDS = OBCREC.OB6MSGDS[OBWTSF3S];

  OBCREC.OBCMSEL[OBWTSF3S] = " "; /* set error viewed*/

  XSOBT3U(); /* update temp storage*/

  XSOBP01();

end // end OB0MS29

// BUILD MAP
Function OB0MS30()

    /* LOAD MAP HEADINGS*/

  OB0MS32();


    /* BUILD HOLD MSG ARRAY*/

  OB0MS34();


    /* RESET FIELD ATTRIBUTES*/

  OB0MS40();


end // end OB0MS30

// LOAD MAP HEADINGS
Function OB0MS32()

    /* PROCESS NAME*/

  OB0MM001.OB0MMPRC = "OB0M010"; /* process name*/


    /* CURRENT DATE*/

  OB0MM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/


    /* ORDER NUMBER*/

  OB0MM001.OBWORDER = OBWREC.OBWORDER; /* order number*/


    /* CUSTOMER NUMBER*/

  OB0MM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/


    /* CUSTOMER PO NUMBER*/

  OB0MM001.OP1CUPO = OBWREC.OP1CUPO; /* po number*/


    /* CUSTOMER STORE NAME*/

  OB0MM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer store name*/


    /* CURRENT PAGE NUMBER*/

  OB0MM001.OBWTSF3P = OBWREC.OBWTSF3P; /* current page number*/


    /* MAXIMUM PAGE NUMBER*/

  OB0MM001.OBWTSF3M = OBWREC.OBWTSF3M; /* max page number*/


end // end OB0MS32

// BUILD hold MSG ARRAY
Function OB0MS34()

  OBWREC.OBWTSF3S = 1; /* init subscript*/

  while (OBWREC.OBWTSF3S <= 11) /* less than or equal to 11*/
    OB0MM001.OBCMSEL[OBWTSF3S] = OBCREC.OBCMSEL[OBWTSF3S];
    OB0MM001.XXXPGMAB[OBWTSF3S] = OBCREC.XXXPGMAB[OBWTSF3S];
    OB0MM001.OB6MSGDS[OBWTSF3S] = OBCREC.OB6MSGDS[OBWTSF3S];
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment by +1*/
  end

  if (OB0MM001.OB6MSGDS[1] == " ") /* no msg desc*/
    OB0MM001.CAMSG = "NO HOLDS FOR THIS ORDER";
  end


end // end OB0MS34

// RESET FIELD ATTRIBUTES
Function OB0MS40()

   /* set cursor to page in case of no enterable select codes*/

  set OB0MM001.OBWTSF3P cursor, initialAttributes; /* page number*/


  OBWREC.OBWTSF3S = 11; /* init subscript*/

  while (OBWREC.OBWTSF3S >= 1)
    if (OB0MM001.OB6MSGDS[OBWTSF3S] == " ") /* if no message*/
      set OB0MM001.XXXPGMAB[OBWTSF3S] skip, invisible; /* set fields dark*/
      set OB0MM001.OB6MSGDS[OBWTSF3S] skip, invisible;
      set OB0MM001.OBCMSEL[OBWTSF3S] skip, invisible;
    else /* otherwise when a message*/
      set OB0MM001.XXXPGMAB[OBWTSF3S] initialAttributes; /* set fields defined*/
      set OB0MM001.OB6MSGDS[OBWTSF3S] initialAttributes;
      if (OB0MM001.OBCMSEL[OBWTSF3S] == "*") /* if hold deleted*/
        set OB0MM001.OBCMSEL[OBWTSF3S] skip; /* set sel opt autoskip*/
      else
        set OB0MM001.OBCMSEL[OBWTSF3S] cursor, initialAttributes;
      end
    end
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S - 1; /* decrement by +1*/
  end


  OBWREC.OBWTSF3S = 1;

  set OB0MM001.CSR-HOLD-FLAG initialAttributes; /* csr hold flag*/
  set OB0MM001.CSR-HOLD-MSG initialAttributes; /* csr hold message*/

end // end OB0MS40

// EDIT MAP FIELDS
Function OB0MS50()

   /* EDIT SELECT CODES*/

  OB0MW01.OB0MWREL = "N"; /* init something released flag*/
  OB0MW01.OB0MWSEL = "N"; /* init something selected flag*/
  OBWREC.OBWTSF3S = 11; /* init subscript*/

  if (OB0MM001.CSR-HOLD-FLAG == "H" || 
  OB0MM001.CSR-HOLD-FLAG == " ")
  /* next sentence*/
  else
    converseLib.validationFailed(184);
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0MM001.CSR-HOLD-FLAG cursor, bold;
  end

  while (OBWREC.OBWTSF3S > 0)
    OB0MS52(); /* edit select code*/
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S - 1; /* decrement by -1*/
  end


    /* EDIT PAGE NUMBER*/

  OB0MS54();


    /* EDIT PF7/PF8 IF NO ERRORS*/

  if (OBWREC.OBWERRFL == "N") /* if no errors*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      OB0MS56();
    end
  end


end // end OB0MS50

// EDIT SELECT OPTIONS
Function OB0MS52()

   /* IF THE USER DIDN'T CHANGE THE FIELD, DON'T NEED TO EDIT IT*/

  if (OBCREC.OBCMSEL[OBWTSF3S] == OB0MM001.OBCMSEL[OBWTSF3S])
    return;
  end


    /* USER CAN ONLY ENTER 'S', 'R', 'h', '?' OR BLANK IN SELECT FIELD*/

  if (OB0MM001.OBCMSEL[OBWTSF3S] == "S" /* if select is 'S'*/
   || OB0MM001.OBCMSEL[OBWTSF3S] == "R" /* or 'R'*/
   || OB0MM001.OBCMSEL[OBWTSF3S] == "?" /* or '?'*/
   /* OR OB0MM001.OBCMSEL(OBWTSF3S) EQ 'H'/* or 'h'*/
   || OB0MM001.OBCMSEL[OBWTSF3S] == " ") /* or blank*/
  else /* else it's an error*/
    converseLib.validationFailed(094); /* select option is invalid*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0MM001.OBCMSEL[OBWTSF3S] cursor, bold;
  end

    /* CAN ONLY RELEASE AN ORDER 30 DAYS PAST THE PRODUCTION*/
    /* DEADLINE IF HAVE AUTHORITY ON THE YOSTBL TO DO IT*/

  if (OB0MM001.OBCMSEL[OBWTSF3S] == "R") /* if a release and*/
    if (OBCREC.OB6MSGNB[OBWTSF3S] == "181" /* msg 'order 30 days past'*/
     || OBCREC.OB6MSGNB[OBWTSF3S] == "206") /* or 'item 30 days past'*/
      sysVar.arrayIndex = 1;
      if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* if user in YOSTBL and*/
       && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* can book late futures*/
          /* next sentence                           ok*/
      else /* otherwise, it's an error*/
        converseLib.validationFailed(096); /* cannot release holds on late futures*/
        OBWREC.OBWERRFL = "Y"; /* unless authorized*/
        set OB0MM001.OBCMSEL[OBWTSF3S] cursor, bold;
      end
    end
  end

   /* get yos table subscript*/

   /* init flag yos table found flag*/
  OB0MW01.OB0MWYFL = "N";
  if (OB0MM001.OBCMSEL[OBWTSF3S] == "R") /* if a release*/
    if (OBCREC.OB6MSGNB[OBWTSF3S] == "233") /* msg 'screened product  '*/
      sysVar.arrayIndex = 1;
      if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* if user in YOSTBL and*/
       && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OB0MW01.OB0MWYOS = sysVar.arrayIndex; /* save subscript*/
        OB0MW01.OB0MWYFL = "Y"; /* turn on found flag*/
      end
    end
  end

    /* SET FLAGS*/

  if (OB0MM001.OBCMSEL[OBWTSF3S] == "S"
   || OB0MM001.OBCMSEL[OBWTSF3S] == "?")
  /* OR OB0MM001.OBCMSEL(OBWTSF3S) EQ 'H';*/
    OB0MW01.OB0MWSEL = "Y"; /* at least one hold was selected*/
  else
    if (OB0MM001.OBCMSEL[OBWTSF3S] == "R")
      OB0MW01.OB0MWREL = "Y";
                                   /* at lease one hold was released*/
    end
  end
end // end OB0MS52

// EDIT PAGE NUMBER
Function OB0MS54()

    /* IF AN ERROR IN THE SELECT CODES, DON'T EDIT ANY FURTHER.*/
    /* IF THE PAGE NUMBER CHANGED, SET IT BACK TO THE ORIGINAL*/
    /* AND HIGHLIGHT IT SO THE USER KNOWS THE PROGRAM CHANGED IT.*/

  if (OBWREC.OBWERRFL == "Y") /* if any errors so far*/
    if (OBWREC.OBWTSF3P != OB0MM001.OBWTSF3P) /* if pg. no. changed*/
      OB0MM001.OBWTSF3P = OBWREC.OBWTSF3P; /* reset it*/
      set OB0MM001.OBWTSF3P bold; /* set it bright*/
    end
    return;
  end


    /* DETERMINE IF CURRENT PAGE NUMBER IS WITHIN RANGE*/

  if (OB0MM001.OBWTSF3P > OB0MM001.OBWTSF3M /* page # > max page #*/
   || OB0MM001.OBWTSF3P < 1)                /* or less than 1*/
    converseLib.validationFailed(084); /* page number must be between 1 and last page #*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0MM001.OBWTSF3P cursor, bold;
    OB0MM001.OBWTSF3P = OBWREC.OBWTSF3P; /* reset page number*/
    return;
  end


    /* CANNOT PAGE AND MAKE A SELECTION OR RELEASE AT ONE TIME*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || OB0MM001.OBWTSF3P != OBWREC.OBWTSF3P) /* if page number changed*/
    if (OB0MW01.OB0MWSEL == "Y" /* if something was selected*/
     || OB0MW01.OB0MWREL == "Y") /* or requested to be released*/
      converseLib.validationFailed(097); /* cannot make selections while changing pages*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0MM001.OBWTSF3P cursor, bold;
      OB0MM001.OBWTSF3P = OBWREC.OBWTSF3P; /* reset page number*/
    end
  end


end // end OB0MS54

// EDIT PF7 AND PF8
Function OB0MS56()

    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OB0MM001.OBWTSF3P == 1) /* page 1*/
    converseLib.validationFailed(086); /* cannot scroll backward*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OB0MM001.OBWTSF3P == OB0MM001.OBWTSF3M) /* current page = last page*/
    converseLib.validationFailed(087); /* cannot scroll forward*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OB0MM001.OBWTSF3P != OBWREC.OBWTSF3P) /* current page has changed*/
    converseLib.validationFailed(085); /* cannot chg page # and pf7/pf8 at same time*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0MM001.OBWTSF3P cursor, bold;
    OB0MM001.OBWTSF3P = OBWREC.OBWTSF3P; /* reset page number*/
  end


end // end OB0MS56

// UPDATE FROM CONVERSE
Function OB0MS60()


    /* UPDATE THE HOLD RECORD, OB7REC, WITH R FOR RELEASED*/

  OBWREC.OBWTSF3S = 1; /* init subscript*/

  while (OBWREC.OBWTSF3S <= 11)
    if (OB0MM001.OBCMSEL[OBWTSF3S] == "R" /* if a release*/
     && OBCREC.OBCMSEL[OBWTSF3S] != "R")  /* that hasn't already been done*/
      OB0MS25(); /* read OB7REC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
        if (OB7REC.OB6MSGNB == "233") /* screened style msg*/
          OB0MS61(); /* check yostbl, load release*/
                                   /* accordingly*/
        else
          OB7REC.OB7MSGRF = "R"; /* set rel flag to R*/
        end
        OB7REC.ZZZCHGDT = OBWREC.ZZZCHGDT;
        OB7REC.ZZZCHGTM = OBWREC.ZZZCHGTM;
        OB0MS62(); /* update OB7REC*/
      end
    end
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment by +1*/
  end

    /* UPDATE MSG TABLE (VOBMSG01) AND HDR TABLE (VOBHDR01)*/
    /* UPDATE TEMP STORAGE (OBAREC)*/

  if (OB0MM001.CSR-HOLD-FLAG == "H") /* insert csr hold*/
    XSOBT1R(); /* get current obarec*/
    XSOB003(); /* insert csr hold*/
    OBAREC.YOBCD[OBWTSF1S] = "CK"; /* change status to match db*/
    OBAREC.OB1HLDFL[OBWTSF1S] = "Y"; /* change hold flag to match db*/
    XSOBT1U(); /* update temp storage*/
    OBWREC.OBW-GET-HOLDS-FL = "Y"; /* set flag to build temp storage*/

    OB0MW01.OB0MW-FOUND-FL = "N"; /* find first blank line to*/
    OBWREC.OBWTSF3S = 1; /* add message to temp storage*/
    while (OBWREC.OBWTSF3S <= 11
     && OB0MW01.OB0MW-FOUND-FL == "N")
      if (OB0MM001.OB6MSGDS[OBWTSF3S] == " ") /* if no message*/
        OB0MW01.OB0MW-FOUND-FL = "Y";
        OBCREC.OB6MSGDS[OBWTSF3S] = "HOLD PLACED ON ORDER BY CSR";
        OBCREC.XXXPGMAB[OBWTSF3S] = "HOLD   ";
        OBCREC.XXXPGMNO[OBWTSF3S] = "OB0M";
        OBCREC.OB6MSGNB[OBWTSF3S] = "281";
      end
      OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment by +1*/
    end
    OBWREC.OBWTSF3S = 1;
  end


    /* MOVE MAP FIELDS TO TEMP STORAGE*/

  OBWREC.OBWTSF3S = 1; /* init subscript*/

  while (OBWREC.OBWTSF3S <= 11) /* less than or equal to 11*/
    OBCREC.OBCMSEL[OBWTSF3S] = OB0MM001.OBCMSEL[OBWTSF3S];
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment by +1*/
  end


    /* UPDATE TEMP STORAGE*/

  XSOBT3U();


end // end OB0MS60

// screened sty; check yostbl
Function OB0MS61()

   /* the release flag for screened products is written differently*/
   /* than other products.  for screened products that fall within an*/
   /* owner group program and are now past the cutoff, we have to*/
   /* have a user's logon authorization to determine which kind of*/
   /* availability to process against (blank or finished). when screened*/
   /* products come into airspeed thru RepNet or EDI, they are put on*/
   /* hold in ob1050 and can't be processed further until a user goes*/
   /* into this online screen to release it--at which time we capture*/
   /* his authorization.  For products added online in ob0h that*/
   /* are past cutoff, a hold is automatically written and released*/
   /* right away because we have a logon to work with.  for more*/
   /* information, see the subroutine ob1340.*/


  if (OB0MW01.OB0MWYFL == "Y" /* yos table found flag*/
   && YOSTBL.YOSNDTFL[OB0MWYOS] == "Y") /* authorized for lateness*/
    OB7REC.OB7MSGRF = "A"; /* authorized for blank avail*/
  else
    OB7REC.OB7MSGRF = "U"; /* not auth for blank avail*/
  end

end // end OB0MS61

// UPDATE MESSAGE RECORD WITH R
Function OB0MS62()

  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "U ";

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      COMMAREA.CAMSG = "HOLD HAS BEEN MODIFIED BY ANOTHER SERVICE REP";
      XSOBP00(); /* restart OB0M*/
    else
      TA1REC.TA1DBASE = "DORDB"; /* database name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0MS62"; /* statement group*/
      OB0MW01.OB0MWLIN = OB7REC.OP2LNINB; /* format rest of key*/
      OB0MW01.OB6MSGNB = OB7REC.OB6MSGNB; /* line and msg*/
      TA1REC.TA1LOCAT[4] = OB0MW01.OB0MWKEY; /* grp lvl to ta1rec*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04(); /* post and restart*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end



end // end OB0MS62

// UPDATE HEADER
Function OB0MS63()

  OB1REC.YOBCD = "NC";

  OB1REC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OB1REC.ZZZCHGTM = OBWREC.ZZZCHGTM;

  set OBFREC empty;
  set SQLCA empty;

  OBFREC.OBFTASK = "U ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OBWREC.CAMSG = "THE ORDER HAS BEEN MODIFIED BY ANOTHER SERVICE REP";
      XSOBP00();
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/omod*/
      TA1REC.TA1LOCAT[3] = "OB0MS63 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end

end // end OB0MS63

// SET NEW PAGE NUMBER
Function OB0MS70()

  if (converseVar.eventKey is pf7)
    OBWREC.OBWTSF3P = OBWREC.OBWTSF3P - 1; /* subtract 1 from page*/
  end

  if (converseVar.eventKey is pf8)
    OBWREC.OBWTSF3P = OBWREC.OBWTSF3P + 1; /* add 1 to page*/
  end

  if (converseVar.eventKey is enter)
    OBWREC.OBWTSF3P = OB0MM001.OBWTSF3P; /* set new page number*/
  end


end // end OB0MS70

// Edit pfkeys for OB0M
Function OB0MSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf7
   && OBWREC.OBWERRFL == "N")
    XSOBP00(); /* restart the application.*/
  end

  if (converseVar.eventKey is pf8
   && OBWREC.OBWERRFL == "N")
    XSOBP00(); /* restart the application.*/
  end

  if (converseVar.eventKey is pf9)
    XSOBP09();
  end

  if (converseVar.eventKey is pf13)
    XSOBP13();
  end

  if (converseVar.eventKey is pf14)
    XSOBP14();
  end

  if (converseVar.eventKey is pf15)
    XSOBP15();
  end

  if (converseVar.eventKey is pf16)
    XSOBP16();
  end

  if (converseVar.eventKey is pf17)
    XSOBP17();
  end

  if (converseVar.eventKey is pf18)
    XSOBP18();
  end



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N")
    XSOBP00(); /* restart the application.*/
  end


end // end OB0MSPF

// read temp storage 3 - holds
Function XSOBT3R()



   /* read temporary storage 3*/

  set OBCREC empty;

  TA5REC.TA5APPID = "OBF3"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OBWREC.OBWTSF3P; /* current page*/
  OBCREC.OBCTSLEN = 884; /* length of record*/

  call "TA0050" (OBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READ TS3";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSOBENP(); /* post, no rollback, non db2 diags*/


  end
end // end XSOBT3R

// update temp storage 3 -holds
Function XSOBT3U()



   /* update temporary storage 3*/

  TA5REC.TA5APPID = "OBF3"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = OBWREC.OBWTSF3P; /* current page*/
  OBCREC.OBCTSLEN = 884; /* length of record*/

  call "TA0050" (OBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "UPD TS3";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XSOBENP(); /* post, no rollback, non db2 diags*/


  end
end // end XSOBT3U

//*** RECORD=OB0MW01 ****
//   OB0M WORK RECORD
// ***********************
Record OB0MW01 type basicRecord
  10 OB0MWSEL OB0MWSEL ; 
  10 OB0MWREL OB0MWREL ; 
  10 OB0MWFND OB0MWFND ; 
  10 OB0MWYOS OB0MWYOS ; 
  10 OB0MWYFL OB0MWYFL ; 
  10 OB0MWKEY OB0MWKEY ; 
    15 OB0MWLIN OB0MWLIN ; 
    15 OB0MWBLK OB0MWBLK ; 
    15 OB6MSGNB OB6MSGNB ; 
  10 OB0MWMSG OB0MWMSG ; 
    15 OB0MWMNB OB0MWMNB ; 
    15 OB0MWBL2 OB0MWBL2 ; 
    15 OB6MSGDS OB6MSGDS ; 
  10 OB0MW-EOF-FL OB0MW-EOF-FL ; 
  10 OB0MW-FOUND-FL OB0MW-FOUND-FL ; 
end // end OB0MW01

// end of file flag
DataItem OB0MW-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found-flag
DataItem OB0MW-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OB0MWBL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OB0MWBLK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item found flag
DataItem OB0MWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level ob7rec key
DataItem OB0MWKEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line nbr not in bin
DataItem OB0MWLIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ob-msg-nbr
DataItem OB0MWMNB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message
DataItem OB0MWMSG char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Y if user entered any Rs
DataItem OB0MWREL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select option flag
DataItem OB0MWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yos table found flag
DataItem OB0MWYFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yos table subscript
DataItem OB0MWYOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

