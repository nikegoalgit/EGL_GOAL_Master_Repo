package ob0q;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=OB0Q ****
// OB0Q - ORDER BATCH LOST DEMAND
// 
// OVERVIEW:
// 
// THIS APPLICATION IS ENTERED BY PRESSING PF23 FROM OB0F,
// PRODUCT SUMMARY, AND OB0H, PRODUCT DETAIL AVAILABILITY.
// IT WILL DISPLAY ALL THE VALID SIZES AND ANY ON ORDER
// QUANTITIES FOR THE PRODUCT BEING VIEWED WHEN THE PF KEY
// IS PRESSED.  WHEN ENTER IS PRESSED AND THERE ARE NO ERRORS,
// THE PRODUCT WILL BE DELETED FROM THE ORDER, THE ORDER HEADER
// WILL BE UPDATED WITH THE NEW TOTAL ORDER VALUE AND QUANTITY,
// A LOST DEMAND RECORD (OPTREC) WILL BE WRITTEN, AND CONTROL
// WILL BE TRANSFERRED TO OB0F, PRODUCT SUMMARY.
// 
// 
// OBJECTIVE:
// 
// THIS APPLICATION WILL DISPLAY THE ORDER NUMBER, CUSTOMER
// NUMBER, PURCHASE ORDER NUMBER, ORDER TYPE, NEED DATE, GPC,
// AND WAREHOUSE FOR THE PRODUCT BEING REPORTED AS LOST DEMAND.
// IT WILL ALSO DISPLAY THE PRODUCT'S STYLE, COLOR, DIMENSION,
// AND DESCRIPTION.  THE WAITING LIST STATUS, ORDER BY NAME
// AND PHONE NUMBER, AND THE DATE THE PRODUCT WILL BE DROPPED
// FROM THE WAITING LIST MAY BE CHANGED.  IT WILL ALSO DISPLAY
// ALL VALID SIZE DESCRIPTIONS FOR THE PRODUCT AND ALLOW THE
// USER TO ADD OR SUBTRACT FROM THE ON ORDER QUANTITIES TO BE
// REPORTED AS LOST DEMAND.
// 
// ************************************************************
// *              MAINTENANCE LOG                             *
// ************************************************************
// 
//   DATE     NAME   DESCRIPTION OF CHANGE
// --------  ------  ------------------------------------------
// 07/02/90  SCANTR  CREATED.
// 11/20/90  dflesh  added ob0qs65 (insert comment record),
//                   ob0qs6a (format ob4rec for comment).
//                   user wants comment on record to show any
//                   product reported as lost demand.
//                   bug # 419.
// 02/15/91  dmeier  regen for database changes
// 03/20/91  swatso  changed s10 & s32 to use sycrec instead
//                   of sy2rec to replace DEC product descrpt
//                   with a combined short style number and
//                   style color abbrev.  Modified s10,s32,w01.
// 03/20/92  tmorri  modified 010, s40 - updates not allowed
//                   for order status 'ca' or 'cl'.
// 05/19/94  scantr  virtual airspeed project: chgd obwrec,
//                   xsobs02, xsobs03, added xsobs10
// 05/24/94  scantr  changed xsobs03
// 06/15/94  craine  change to call relational edit
// 09/06/94  craine  change to obwrec
// 10/26/94  schase  change to obwrec
// 11/17/94  craine  change to del errors/holds for an item
// 04/27/95  craine  allow for new yobcd 'pd' and 'lp'.
// 08/07/95  craine  DATABASE CHANGES
// 06/03/97  rgilli  YR2000 - Regen to ensure correct ver.
//                            of xx0xs01 is included.
// *********************
Program OB0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUMREC KUMREC; // record
  OB0QW01 OB0QW01; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB3REC OB3REC; // record
  OB4REC OB4REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBHREC OBHREC; // record
  OBKREC OBKREC; // record
  OBSFREC OBSFREC; // record
  OBTDREC OBTDREC; // record
  OBWREC OBWREC; // record
  OPTREC OPTREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use XOBTBL; // table
  use XWHTBL; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use OB0QM.OB0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0Q000: OB0Q000();
    goto OB0Q010;
    OB0Q010: OB0Q010();
    goto OB0Q010;
  end // end main
end // end OB0Q

// EXECUTE PROCESS
Function OB0Q000()

  XSENTRY(); /* check csp security*/

  XSOBS01(); /* check batch order security*/

  OB0QS10(); /* initialize OB0Q application*/

  OBWREC.OBWER911 = "N"; /* init -911 flag*/

  XSOBS02(); /* check if batch edit is running*/

  XSOBS03(); /* read order header (OB1REC)*/

  OB0QM001.CAMSG = OBWREC.CAMSG; /* format map camsg*/
  OBWREC.CAMSG = " "; /* clear OBWREC camsg*/

  OB0QS20(); /* build map*/


end // end OB0Q000

// CONVERSE/ AFTER PROCESS
Function OB0Q010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  converse OB0QM001 ;

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OB0QM001.CAMSG = " "; /* clear map camsg*/

    /* RESET FIELD ATTRIBUTES*/

  OB0QS40();


    /* EDIT MAP*/

  if (OB1REC.YOBCD != "CA" /* not cleared availability*/
   && OB1REC.YOBCD != "LP" /* not lost demand reported*/
   && OB1REC.YOBCD != "PD") /* not postponed demand reported*/
    OB0QS50();
  end


    /* UPDATE*/

  if (OB1REC.YOBCD != "CA" /* not cleared availability*/
   && OB1REC.YOBCD != "LP" /* not lost demand reported*/
   && OB1REC.YOBCD != "PD") /* not postponed demand reported*/
    if (OBWREC.OBWERRFL == "N" /* no errors*/
     && converseVar.eventKey is enter)
      OB0QS60();
    end
  end


    /* EDIT PFKEYS*/

  OB0QSPF();

end // end OB0Q010

// UPDATE TEMP STORAGE
Function OB0QS-ADD-TS()


  OB0QWSU2 = OBWREC.OBWTSF1P; /* save current page*/

   /* Read order temp storage record*/

  OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* get last page*/
  XSOBT1R();


   /* Find available slot in last page for added order*/

  OB0QWSU1 = 1; /* init subscript*/
  while (OB0QWSU1 <= 12 /* still within the page*/
   && OBAREC.OBACUOID[OB0QWSU1] != 0) /* slot not vacant*/
    OB0QWSU1 = OB0QWSU1 + 1; /* increment subscript*/
  end


   /* If there is a no slot available in the last page,*/
   /* then you will be adding a new record, so empty the*/
   /* record, init the subscript, load the obarec, and add*/
   /* the new record.  Otherwise, just load the obarec and*/
   /* do an update.*/

  if (OB0QWSU1 == 13) /* need to add new page*/
    set OBAREC empty; /* clear for new page*/
    OB0QWSU1 = 1; /* set subscript to first line*/
    OB0QS-BUILD-OBAREC(); /* load the temp storage obarec*/
    XSOBT1W(); /* add temp storage record*/
  else /* vacant slot found on same page*/
    OB0QS-BUILD-OBAREC(); /* load the temp storage obarec*/
    XSOBT1U(); /* update temp storage record*/
  end


   /* Read order temp storage record for current order*/

  OBWREC.OBWTSF1P = OB0QWSU2; /* restore current page*/
  XSOBT1R();

  if (OBAREC.OBAMSEL[OBWTSF1S] == "*") /* orig ord deleted or loaded*/
    OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* restore last page*/
    OBWREC.OBWTSF1S = OB0QWSU1; /* and subscript for new order*/
    OB0QW01.OP1CUOID = 0; /* init - orig order not needed anymore*/
    OB0QW01.OP1NORID = 0; /* init - orig sub not needed anymore*/
    OB0QW01.OP1PARTN = " "; /* init - not needed anymore*/
    /* obwrec contains the new order*/
  else
    OBWREC.OBWTSF1P = OB0QWSU2; /* restore current page*/
    OB0QW01.OB0QW-NEW-ORD-SUB = OB0QWSU1; /* subscript for new order*/

      /* restore the original order*/

    OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* save new order*/
    OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
    OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

    OBWREC.OP1PARTN = OB0QW01.OP1PARTN; /* restore orig order*/
    OBWREC.OP1CUOID = OB0QW01.OP1CUOID; /**/
    OBWREC.OP1NORID = OB0QW01.OP1NORID; /**/

    OB0QW01.OP1PARTN = OB1REC.OP1PARTN; /* save new order*/
    OB0QW01.OP1CUOID = OB1REC.OP1CUOID; /**/
    OB0QW01.OP1NORID = OB1REC.OP1NORID; /**/

    OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* restore orig order*/
    OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
    OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

    OBWREC.OBWCUOID = OBWREC.OP1CUOID;
    OBWREC.OBWNOID = OBWREC.OP1NORID;
    OBWREC.OBWFMT = OBWREC.OBWORDER;
    XSOBS06(); /* suppress leading zeros*/
    OBWREC.OBWORDER = OBWREC.OBWFMT;

    /* ob0Qw01 contains the new order at this point*/
  end

  OBWREC.OBW-GET-ITEMS-FL = "Y"; /* reload items to temp storage*/
                                  /* in ob0f*/
end // end OB0QS-ADD-TS

// LOAD TEMP STORAGE OBAREC
Function OB0QS-BUILD-OBAREC()

  XSOBS03(); /* read the new order*/


  OBAREC.OBAORDER[OB0QWSU1] = OBWREC.OBWORDER; /* formatted order*/
  OBAREC.OBANORID[OB0QWSU1] = OB1REC.OP1NORID; /* nike order id*/
  OBAREC.OP1PARTN[OB0QWSU1] = OB1REC.OP1PARTN; /* part char*/

  OBAREC.OB1PARLF[OB0QWSU1] = OB1REC.OB1PARLF; /* partial load flag*/
  OBAREC.SP1ID[OB0QWSU1] = OB1REC.SP1ID; /* sales program*/
  OBAREC.XOBCD[OB0QWSU1] = OB1REC.XOBCD; /* base ot code*/

  OBWREC.OBWDT8 = OB1REC.OP1CUNDT; /* reformat need date*/
  XSOBDCM(); /* db2 date to map date*/
  OBAREC.OBACUNDT[OB0QWSU1] = OBWREC.OBWDT6;
                                   /* reformatted need date*/

  OBAREC.YOBCD[OB0QWSU1] = OB1REC.YOBCD; /* yob code*/

  OBAREC.OB1ERRFL[OB0QWSU1] = OB1REC.OB1ERRFL; /* error flag*/
  OBAREC.OBAFILL[OB0QWSU1] = "/"; /* slash*/
  OBAREC.OB1HLDFL[OB0QWSU1] = OB1REC.OB1HLDFL; /* hold flag*/

  OBAREC.OBACUST[OB0QWSU1] = OBWREC.OBWCUST; /* formatted cust*/

  OBAREC.KUMSTSNM[OB0QWSU1] = "NEW SUBORD"; /* short store name*/

end // end OB0QS-BUILD-OBAREC

// BUILD OB1620 PASS RECORD
Function OB0QS-BUILD-OBTD()

  set OBTDREC empty;

  OBTDREC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OBTDREC.OP1CUOID = OB1REC.OP1CUOID; /* cust order id*/
  OBTDREC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/
  OBTDREC.OP2LNINB = OB3REC.OP2LNINB; /* line item nbr*/
  OBTDREC.KUCCOID = OB1REC.KUCCOID; /* company*/
  OBTDREC.KUMSTRID = OB1REC.KUMSTRID; /* store*/
  OBTDREC.XNXCD = OB1REC.XNXCD; /* department*/
  OBTDREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBTDREC.XDVCD = OB1REC.XDVCD; /* division*/
  OBTDREC.XBCCD = OB1REC.XBCCD; /* brand*/
  OBTDREC.XSOCD = OB1REC.XSOCD; /* sales office*/
  OBTDREC.XOTCD = OB1REC.XOTCD; /* system order type*/
  OBTDREC.XOBCD = OB1REC.XOBCD; /* base order type*/
  OBTDREC.OB1ACCSF = OB1REC.OB1ACCSF; /* accessory flag*/
  OBTDREC.XOCCD = OB1REC.XOCCD; /* order class*/
  OBTDREC.SP1ID = OB1REC.SP1ID; /* sales program*/
  OBTDREC.SM1AGYID = OB1REC.SM1AGYID; /* agency*/
  OBTDREC.SM4REPID = OB1REC.SM4REPID; /* agency*/
  OBTDREC.XBDCD = OB1REC.XBDCD; /* bulk/draw code*/
  OBTDREC.XWHCD = OB1REC.XWHCD; /* warehouse code*/
  OBTDREC.OP1CUNDT = OB1REC.OP1CUNDT; /* need date*/
  OBTDREC.XDSCD = OB1REC.XDSCD; /* direct ship cd*/
  OBTDREC.OP1BLKID = OB1REC.OP1BLKID; /* bulk ord id*/

  OBTDREC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OBTDREC.ZZZCHGTM = OBWREC.ZZZCHGTM;

  if (OBWREC.OBWXLIND == "P")
    OBTDREC.OBTD-SPLIT-TO-STAT-CD = "PD";
  else
    OBTDREC.OBTD-SPLIT-TO-STAT-CD = "LP";
  end
  OBWREC.OBWXLIND = " ";

end // end OB0QS-BUILD-OBTD

// UPDATE TEMP STORAGE
Function OB0QS-GET-TS()


  OB0QWSU2 = OBWREC.OBWTSF1P; /* save current page*/
  OB0QWSU3 = OBWREC.OBWTSF1S; /* save current subscript*/


   /* Read order temp storage current record*/

  XSOBT1R();

   /* Find the existing suborder*/

   /* init temp storage subscript*/
  OBWREC.OBWTSF1S = 0;
  while (OBWREC.OBWTSF1S == 0 /* suborder not found*/
   && OBWREC.OBWTSF1P > 0) /* page not zero*/
    OB0QWSU1 = 1; /* init subscript*/
    if (OBAREC.OBACUOID[OB0QWSU1] <= OBWREC.OBWCUOID) /**/
      while (OB0QWSU1 <= 12 /* still within the page*/
       && OBWREC.OBWTSF1S == 0)
        if (OBAREC.OBACUOID[OB0QWSU1] == OBWREC.OBWCUOID
         && OBAREC.OBANORID[OB0QWSU1] == OBWREC.OBWNOID)
          OBWREC.OBWTSF1S = OB0QWSU1;
        else
          OB0QWSU1 = OB0QWSU1 + 1; /* increment subscript*/
        end
      end
      if (OBWREC.OBWTSF1S == 0)

        /* Read order temp storage current record*/

        OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* last page*/
        XSOBT1R();

        /* Find the existing suborder*/

   /* init temp storage subscript*/
        OBWREC.OBWTSF1S = 0;
        while (OBWREC.OBWTSF1S == 0 /* suborder not found*/
         && OBWREC.OBWTSF1P > 0) /* page not zero*/
          OB0QWSU1 = 12; /* init subscript*/
          while (OB0QWSU1 > 0 /* still within the page*/
           && OBWREC.OBWTSF1S == 0)
            if (OBAREC.OBACUOID[OB0QWSU1] == OBWREC.OBWCUOID
             && OBAREC.OBANORID[OB0QWSU1] == OBWREC.OBWNOID)
              OBWREC.OBWTSF1S = OB0QWSU1;
            end
            OB0QWSU1 = OB0QWSU1 - 1; /* decrement subscript*/
          end
          /* check the previous page*/
          if (OBWREC.OBWTSF1S == 0)
            OBWREC.OBWTSF1P = OBWREC.OBWTSF1P - 1;
            if (OBWREC.OBWTSF1P > 0)
              XSOBT1R();
            end
          end
        end

      end
    else
      /* check the previous page*/
      OBWREC.OBWTSF1P = OBWREC.OBWTSF1P - 1;
      if (OBWREC.OBWTSF1P > 0)
        XSOBT1R();
      end
    end
  end


   /* If we found the existing order load the record and*/
   /* do an update.*/

  if (OBWREC.OBWTSF1S != 0) /**/
    OB0QW01.OB0QWSU1 = OBWREC.OBWTSF1S; /* set subscript*/
    OB0QS-BUILD-OBAREC(); /* load the temp storage obarec*/
    XSOBT1U(); /* update temp storage record*/
  end


   /* decide which order to retunr control to*/

   /* Read order temp storage current record*/


  sysVar.arrayIndex = OBWREC.OBWTSF1P; /* save current page*/
  OBWREC.OBWTSF1P = OB0QW01.OB0QWSU2; /* save current page*/
  XSOBT1R();

  if (OBAREC.OBAMSEL[OB0QWSU3] == "*") /* order deleted or loaded*/
    OBWREC.OBWTSF1P = sysVar.arrayIndex; /* use the existing order*/
                                  /* obwtsf1s is already set*/
    OB0QW01.OP1CUOID = 0; /* init - orig order not needed anymore*/
    OB0QW01.OP1NORID = 0; /* init - orig sub not needed anymore*/
    OB0QW01.OP1PARTN = " "; /* init - not needed anymore*/
    /* obwrec contains the new order (in LP or PD status)*/
  else
    OBWREC.OBWTSF1S = OB0QW01.OB0QWSU3; /* use the orig order*/
                                  /* obwtsf1p is already set*/
      /* restore the original order*/

    OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* save new order*/
    OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
    OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

    OBWREC.OP1PARTN = OB0QW01.OP1PARTN; /* restore orig order*/
    OBWREC.OP1CUOID = OB0QW01.OP1CUOID; /**/
    OBWREC.OP1NORID = OB0QW01.OP1NORID; /**/

    OB0QW01.OP1PARTN = OB1REC.OP1PARTN; /* save new order*/
    OB0QW01.OP1CUOID = OB1REC.OP1CUOID; /**/
    OB0QW01.OP1NORID = OB1REC.OP1NORID; /**/

    OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* restore orig order*/
    OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
    OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

    OBWREC.OBWCUOID = OBWREC.OP1CUOID;
    OBWREC.OBWNOID = OBWREC.OP1NORID;
    OBWREC.OBWFMT = OBWREC.OBWORDER;
    XSOBS06(); /* suppress leading zeros*/
    OBWREC.OBWORDER = OBWREC.OBWFMT;

    /* obwrec contains the ORIG ORDER (in FA status)*/
  end

end // end OB0QS-GET-TS

Function OB0QS-GET-XOT()

  if (OB1REC.XOTCD == " ")
    OB0QW01.XOTFUTRF = " ";
  else
    sysVar.arrayIndex = 1;
    if (OB1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OB0QW01.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
    else
      OB0QW01.XOTFUTRF = " ";
    end
  end

end // end OB0QS-GET-XOT

// PROCESS OB1620 RETURN CODES
Function OB0QS-RETURN-OBTD()

  if (OBTDREC.OBTD-RETURN-CODE == 0
  )
    /* update current order in temp storage*/

    XSOBS03(); /* read the current order*/
    XSOBT1R(); /* read current temp storage page*/

    if (OB1REC.YOBCD == "DL") /* yob code*/
      OBAREC.OBAMSEL[OBWTSF1S] = "*"; /* select option*/
    else
      OBAREC.OBAMSEL[OBWTSF1S] = "U"; /* select option*/
    end

    OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD; /* yob code*/

    XSOBT1U(); /* update temp storage record*/

    /* save original order*/

    OB0QW01.OP1PARTN = OBWREC.OP1PARTN;
    OB0QW01.OP1CUOID = OBWREC.OP1CUOID;
    OB0QW01.OP1NORID = OBWREC.OP1NORID;

    /* save new nike ord id for next ob1rec read*/

    OBWREC.OP1NORID = OBTDREC.OBTD-NEW-NIKE-ORD-ID;
    OBWREC.OBWNOID = OBTDREC.OBTD-NEW-NIKE-ORD-ID;

    OB0QS-UPDATE-TS(); /* update temp storage*/

  else /* process error return codes*/
    TA1REC.TA1LOCAT[1] = "        "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OB1840  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0QS-RE"; /* statement group*/
    TAEREC.TAEDESC1 = OBTDREC.OBTD-ERRDIAG-KEY; /* error key*/
    if (OBTDREC.OBTD-RETURN-CODE == 2) /* record not found on update*/
      OBWREC.CAMSG = "ORDER UPDATED BY BATCH SYSTEM OR ANOTHER CSR - PLEASE TRY AGAIN";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      XSOBP00();
    end
    if (OBTDREC.OBTD-RETURN-CODE == 3
     || OBTDREC.OBTD-RETURN-CODE == 5
    ) /* db2 deadlock occured in ob1840*/
      OBWREC.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      XSOBP00();
      return;
    end
    if (OBTDREC.OBTD-RETURN-CODE == 4
    ) /* fatal dbr error in ob1840*/
      TAEREC.TAEDESC2 = "FATAL DB2 ERROR IN OB1840";
    else
      if (OBTDREC.OBTD-RETURN-CODE == 6
      ) /* fatal dbr error in ob1690 from ob1840*/
        TAEREC.TAEDESC2 = "FATAL DB2 ERROR IN OB1690 FROM OB1840";
      else
                                  /* unexpected return code from ob1840*/
        TAEREC.TAEDESC2 = "UNEXPECTED RETURN CODE FROM OB1840";
      end
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    XSOBENP(); /* appl post with rollback*/
    XSOBP04(); /* main menu*/
  end



end // end OB0QS-RETURN-OBTD

Function OB0QS-SPLIT-ITEM()

    /* SAVE THE ITEM IN THE AIRSPEED DATABASE ON A NEW OR*/
    /* EXISTING SUBORDER WITH THE A 'LP' LOST DEMAND PRODUCT OR*/
    /* 'PD' POSTPONED DEMAND PRODUCT STATUS*/


     /* build OB1840 pass record*/

  OB0QS-BUILD-OBTD();

  call "OB1840" (OBTDREC) {isNoRefresh = yes, isExternal = yes};

     /* process the return code*/

  OB0QS-RETURN-OBTD();

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;

end // end OB0QS-SPLIT-ITEM

// UPDATE TS WITH NEW SUBORDER
Function OB0QS-UPDATE-TS()

     /* format product*/

  OB0QW01.SY1STNBR = OB3REC.SY1STNBR; /* formatted style/color/dim*/
  OB0QW01.OB0QW001 = "-"; /* first hyphen*/
  OB0QW01.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OB0QW01.OB0QW002 = "-"; /* second hyphen*/
  OB0QW01.XDMCD = OB3REC.XDMCD; /* dimension*/

    /* format message*/

  OB0QW01.OB0QWMS2-A = "PRODUCT ";
  OB0QW01.OB0QWMS2-B = OB0QW01.OB0QWPRD; /* formatted product*/
  OB0QW01.OB0QWMS2-C = " REPORTED AS TRUE DEMAND";
  OB0QW01.OB0QWMS2-D = " ON SUBORDER ";
  OB0QW01.OB0QWMS2-E = OBWREC.OBWORDER; /* formatted order*/
  OBWREC.CAMSG = OB0QW01.OB0QWMSG-2; /* move in formatted msg*/

    /* add new suborder to selected suborders temp storage (OBAREC)*/

  if (OBTDREC.OBTD-SPLIT-TO-NEW-SUBORD-FL == "Y")
    OB0QS-ADD-TS(); /* add to temp storage*/
  else
    OB0QS-GET-TS(); /* find existing order*/
  end



end // end OB0QS-UPDATE-TS

// INITIALIZE OB0Q APPLICATION
Function OB0QS10()

  set KUMREC empty; /* set all records empty*/
  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBHREC empty;
  set OBSFREC empty;
  set OB1REC empty;
  set OB3REC empty;
  set OB8REC empty;
  set OPTREC empty;
  set SYCREC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set XX0XW01 empty;

  set OB0QW01 empty;
  set OB0QM001 empty;

  XX0XS01(); /* get current time and date for updates*/
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  TA1REC.TA1MAP = "OB0QM001";


end // end OB0QS10

// BUILD MAP
Function OB0QS20()

    /* READ ITEM/SIZE RECORD*/

  OB0QS22(); /* get OB3REC*/

  OB0QS-GET-XOT(); /* GET XOT FOR FUTR FL*/

   /* CHECK FOR TRUE DEMAND PROCESSING*/

  if (OB1REC.XGPCD == "03" /* APPAREL ORDERS ONLY*/
   && OB0QW01.XOTFUTRF == "Y") /* futures orders only*/
    OB0QS-SPLIT-ITEM(); /* SPLIT ITEM TO 'LP' OR 'PD' STATUS*/
                                  /* Set Flags to 'Yes'*/
    OBWREC.OBW-GET-ERRORS-FL = "Y";
    OBWREC.OBW-GET-HOLDS-FL = "Y";
    OBWREC.OBW-GET-ITEMS-FL = "Y";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP09(); /* TRANSFER TO PRODUCT SUMMARY*/
  else
    OB0QS24(); /* LOAD MAP HEADINGS*/
  end

  OB0QS34(); /* get valid size descriptions*/

  OB0QS36(); /* put valid sizes & qtys on map*/

  OB0QS40(); /* RESET FIELD ATTRIBUTES*/

   /* END;*/
end // end OB0QS20

// READ ITEM/SIZE RECORD
Function OB0QS22()

      /* Read OB3REC for the style/color/dimension*/
              /* and on order quantities*/

  set OBSFREC empty;
  set OB3REC empty;

  OBSFREC.OBSF-TASK = "S ";

  OB3REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB3REC.OP1CUOID = OB1REC.OP1CUOID; /* customer order id*/
  OB3REC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/
  OB3REC.OP2LNINB = OBWREC.OBWLNINB; /* line item number*/

  OBSFREC.OBSF-CALLER-LOC-1 = "OB0QS22 ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "S       ";
  OBSFREC.OBSF-CALLING-APPL = "OB0Q";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0) /* good return*/
    /* continue*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* item record not found*/
      OBWREC.CAMSG = "PRODUCT HAS BEEN DELETED. CANNOT REPORT LOST DMD.";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      if (OBSFREC.OBSF-RETURN-CD == 11) /* no sizes records found*/
        OBWREC.CAMSG = "CANNOT FIND SIZES FOR ORDER";
        XSOBP99(); /* transfer to calling application*/
      else
        TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
        TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
        TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
        TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[3] = "OB0QS22 "; /* statement group*/
        TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD;
        TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
        if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
         || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
          XSOBS04(); /* restart pgm - no rollback*/
        else
          XSOBEDC(); /* return to main menu (abend)*/
        end
      end
    end
  end

end // end OB0QS22

// LOAD MAP HEADINGS
Function OB0QS24()

  OB0QM001.OB0QMPRC = "OB0Q010"; /* process name*/

  OB0QM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/

  OB0QM001.OBWORDER = OBWREC.OBWORDER; /* order number*/

  OB0QM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/

  OB0QM001.OP1CUPO = OBWREC.OP1CUPO; /* po number*/

  OB0QM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer store name*/

  OB0QM001.OPTWAITF = "Y"; /* waiting list flag*/

  OB0QM001.OP1ORDBY = OB1REC.OP1ORDBY; /* ordered by*/

  OB0QS26();
                                   /* drop from waiting list date*/

  OB0QS28(); /* customer phone number*/

  OB0QS32(); /* product description*/


  sysVar.arrayIndex = 1; /* base order type desc.*/
  if (OB1REC.XOBCD in XOBTBL.XOBCD)
    OB0QM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  else
    OB0QM001.XOBABRV = "UNKNWN";
  end


  OBWREC.OBWDT8 = OB1REC.OP1CUNDT; /* customer need date*/
  XSOBDCM(); /* convert it to map format*/
  OB0QM001.OB0QMNDT = OBWREC.OBWDT6;


  sysVar.arrayIndex = 1; /* gpc abbreviation*/
  if (OB1REC.XGPCD in XGPTBL.XGPCD)
    OB0QM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    OB0QM001.XGPABRV = "UNKNWN";
  end


  sysVar.arrayIndex = 1; /* warehouse short abbrev.*/
  if (OB1REC.XWHCD in XWHTBL.XWHCD)
    OB0QM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  else
    OB0QM001.XWHSABRV = "UNKNWN";
  end


  OB0QW01.SY1STNBR = OB3REC.SY1STNBR; /* formatted style/color/dim*/
  OB0QW01.OB0QW001 = "-"; /* first hyphen*/
  OB0QW01.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OB0QW01.OB0QW002 = "-"; /* second hyphen*/
  OB0QW01.XDMCD = OB3REC.XDMCD; /* dimension*/
  OB0QM001.OB0QMPRD = OB0QW01.OB0QWPRD; /* formatted product*/


end // end OB0QS24

// COMPUTE DEFAULT DROP DATE
Function OB0QS26()


    /* DEFAULT THE DROP DATE TO THE NEED DATE + 60 DAYS*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2DYAOD = +60;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OB1REC.OP1CUNDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    OB0QM001.OB0QMDDT = TA2REC.TA2GRGAN; /* put it on map*/
    OB0QW01.OB0QMDDT = TA2REC.TA2GRGAN; /* save it for later*/
  else
    converseLib.validationFailed(129); /* msg: Invalid need date.  Cannot*/
    set OB0QM001.OB0QMDDT bold; /* calculate drop date.*/
  end


   /* *************************************************************/
end // end OB0QS26

// GET PHONE NUMBER
Function OB0QS28()

    /* Get store record, DCUST.VSTORE01*/

  KUMREC.KUCCOID = OB1REC.KUCCOID; /* load key - company*/
  KUMREC.KUMSTRID = OB1REC.KUMSTRID; /* load key - store*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};


    /* If record found, format the phone nbr.  Otherwise, leave*/
    /* it zero.*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good read*/
    OB0QS30(); /* format phone number*/
  end



   /* *************************************************************/
end // end OB0QS28

// FORMAT CUSTOMER PHONE NUMBER
Function OB0QS30()

     /* The phone number field in KUMREC is a 15 character*/
     /* free form field.  This routine looks at the first 12*/
     /* characters to see if it is formatted like 999-999-9999.*/
     /* The remaining characters are ignored.  If the phone*/
     /* number in KUMREC does not fit this format, the default*/
     /* phone number is left zero.*/


  OB0QW01.KUMPHN = KUMREC.KUMPHN; /* Move phone to a redefines*/
  OB0QW01.OB0QWNUM = "Y"; /* Numeric flag.*/
  OB0QW01.OB0QWSB1 = 1; /* Subscript.*/
  while (OB0QW01.OB0QWSB1 <= 12 /* Look at each character*/
   && OB0QW01.OB0QWNUM == "Y") /* while still numeric*/
    if (OB0QW01.OB0QWSB1 == 4 /* if a dash position*/
     || OB0QW01.OB0QWSB1 == 8) /* ignore it*/
       /* Next sentence - these are the dash positions*/
    else /* otherwise check for numeric*/
      if (OB0QW01.OB0QWPCH[OB0QWSB1] < 0 /* if character*/
       || OB0QW01.OB0QWPCH[OB0QWSB1] > 9)
        OB0QW01.OB0QWNUM = "N"; /* set numeric flag.*/
      end
    end
    OB0QW01.OB0QWSB1 = OB0QW01.OB0QWSB1 + 1; /* Increment subscript.*/
  end


   /* If the number is numeric move it to the screen; otherwise*/
   /* leave it zeros.*/

  if (OB0QW01.OB0QWNUM == "Y") /* Numeric flag*/
    OB0QW01.OB0QWFPH = OB0QW01.KUMPHN; /* Formatted phone number*/
    OB0QM001.XXXPHNA = OB0QW01.OB0QWPHA; /* Area code*/
    OB0QM001.XXXPHNP = OB0QW01.OB0QWPHP; /* Prefix*/
    OB0QM001.XXXPHNN = OB0QW01.OB0QWPHN; /* Last 4 digits*/
  end
end // end OB0QS30

// READ PRODUCT - SYCREC
Function OB0QS32()

    /* Read the product color record to get the product desc.*/

  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  SYCREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OB0QW01.OB0QWSSN = SYCREC.SY1SSTNM; /* short style number*/
    OB0QW01.OB0QWSPC = " ";
    OB0QW01.OB0QWSCA = SYCREC.SY2CLRAB; /* style color abbrev*/
    OB0QM001.SY2PRDES = OB0QW01.OB0QWPDS; /* move prod descrpt to map*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "CANNOT REPORT LOST DEMAND ON AN INVALID PRODUCT";
      XSOBP99(); /* transfer to calling application*/
    else
      TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0560  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0QS32 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBWREC.OBWLNINB; /* style*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* restart pgm - no rollback*/
      else
        XSOBEDC(); /* retn to main menu - no rollback*/
      end
    end
  end

end // end OB0QS32

// READ VALID SIZES
Function OB0QS34()

     /* If no system order type on the header, transfer to*/
     /* product summary*/

  if (OB1REC.XOTCD == " ") /* if no system order type*/
    OBWREC.CAMSG = "NO VALID SYSTEM ORDER TYPE - CANNOT REPORT LOST DMD.";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP09(); /* transfer to prod. summary*/
  end


     /* If a valid order type to use in the key, find valid sizes*/

  set OBHREC empty;

  OBHREC.OP1CUOID = OB1REC.OP1CUOID; /* customer*/
  OBHREC.XDVCD = OB1REC.XDVCD; /* division*/
  OBHREC.XOTCD = OB1REC.XOTCD; /* order type*/
  OBHREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBHREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OBHREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OBHREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "OB1700" (OBHREC) {isNoRefresh = yes, isExternal = yes};

  if (OBHREC.OBHRTNCD == 00) /* good return*/
     /* ok - next sentence*/
  else
    if (OBHREC.OBHRTNCD == 01) /* no valid sizes*/
      OBWREC.CAMSG = "NO VALID SIZES FOR PRODUCT";
    else
      OBWREC.CAMSG = "CANNOT DETERMINE SIZES FOR PRODUCT";
    end
    XSOBP99(); /* transfer to calling application*/
  end

end // end OB0QS34

// BUILD SIZE ARRAY
Function OB0QS36()

    /* Move the size description and on order quantity to the map*/
    /* for each valid size.*/

  OB0QW01.OB0QWSB1 = 0; /* subscript for the map*/
  OB0QW01.OB0QWSB2 = 1; /* subscript for size desc. record*/

  while (OB0QW01.OB0QWSB2 <= 40) /* while there are size descriptions*/
    if (OBHREC.OBHSZDES[OB0QWSB2] > " ") /* if this is a valid size*/
      OB0QW01.OB0QWSB1 = OB0QW01.OB0QWSB1 + 1; /* inc. map sub*/
      OB0QM001.SY4IDDSC[OB0QWSB1] = OBHREC.OBHSZDES[OB0QWSB2];
      OB0QM001.OP3ONOQT[OB0QWSB1] = OB3REC.OP3ONOQT[OB0QWSB2];
    end
    OB0QW01.OB0QWSB2 = OB0QW01.OB0QWSB2 + 1; /* inc. size rec sub*/
  end

  OB0QW01.OB0QWMAX = OB0QW01.OB0QWSB1; /* save nbr. of valid sizes*/
end // end OB0QS36

// SET FIELD ATTRIBUTES
Function OB0QS40()


  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    if (OB0QM001.CAMSG == " ")
      OB0QM001.CAMSG = "ORDERS IN THIS STATUS ARE VIEW ONLY";
      /* SET THE ATTRIBUTES FOR THE HEADING FIELDS ASKIP*/
    end
  end

  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    set OB0QM001.XXXPHNN skip;
    set OB0QM001.XXXPHNP skip;
    set OB0QM001.XXXPHNA skip;
    set OB0QM001.OP1ORDBY skip;
    set OB0QM001.OB0QMDDT skip;
    set OB0QM001.OPTWAITF skip;

    /* SET THE ATTRIBUTES FOR THE 40 ON ORDER QUANTITY FIELDS*/

    OB0QW01.OB0QWSB1 = 1;
    while (OB0QW01.OB0QWSB1 <= 40)
      if (OB0QW01.OB0QWSB1 <= OB0QW01.OB0QWMAX) /* if le no. valid sizes*/
        set OB0QM001.OP3ONOQT[OB0QWSB1] skip; /* set qty field askip*/
      else
        set OB0QM001.OP3ONOQT[OB0QWSB1] skip, invisible; /* otherwise, skip it*/
      end
      OB0QW01.OB0QWSB1 = OB0QW01.OB0QWSB1 + 1; /* increment subscript*/
    end

  else

    /* SET THE ATTRIBUTES FOR THE HEADING FIELDS*/

    set OB0QM001.XXXPHNN initialAttributes;
    set OB0QM001.XXXPHNP initialAttributes;
    set OB0QM001.XXXPHNA initialAttributes;
    set OB0QM001.OP1ORDBY initialAttributes;
    set OB0QM001.OB0QMDDT initialAttributes;
    set OB0QM001.OPTWAITF initialAttributes;


    /* SET THE ATTRIBUTES FOR THE 40 ON ORDER QUANTITY FIELDS*/

    OB0QW01.OB0QWSB1 = 1;
    while (OB0QW01.OB0QWSB1 <= 40)
      if (OB0QW01.OB0QWSB1 <= OB0QW01.OB0QWMAX) /* if LE no. valid sizes*/
        set OB0QM001.OP3ONOQT[OB0QWSB1] initialAttributes; /* set qty field defined*/
      else
        set OB0QM001.OP3ONOQT[OB0QWSB1] skip, invisible; /* otherwise, skip it*/
      end
      OB0QW01.OB0QWSB1 = OB0QW01.OB0QWSB1 + 1; /* increment subscript*/
    end
  end


    /* SET THE ATTRIBUTES FOR THE 4 SIZE:/QTY: SETS OF LITERALS*/

      /* There are four lines of 10 sizes on the map.*/
      /* The labels for each line of sizes and quantities is*/
      /* displayed only if there are valid sizes on that line.*/
      /* OB0QWMAX is the number of valid sizes displayed on the*/
      /* map.*/

  OB0QM001.OB0QMSIL[1] = "SIZE:"; /* there will always be*/
  OB0QM001.OB0QMQTL[1] = "QTY:"; /* at least 1 valid size*/

  if (OB0QW01.OB0QWMAX > 10) /* if more than 10 valid sizes*/
    OB0QM001.OB0QMSIL[2] = "SIZE:";
                                   /* set the literals for line 2*/
    OB0QM001.OB0QMQTL[2] = "QTY:";
  else /* otherwise*/
    set OB0QM001.OB0QMSIL[2] skip, invisible; /* set them dark*/
    set OB0QM001.OB0QMQTL[2] skip, invisible;
  end

  if (OB0QW01.OB0QWMAX > 20) /* if more than 20 valid sizes*/
    OB0QM001.OB0QMSIL[3] = "SIZE:";
                                   /* set the literals for line 3*/
    OB0QM001.OB0QMQTL[3] = "QTY:";
  else /* otherwise*/
    set OB0QM001.OB0QMSIL[3] skip, invisible; /* set them dark*/
    set OB0QM001.OB0QMQTL[3] skip, invisible;
  end

  if (OB0QW01.OB0QWMAX > 30) /* if more than 30 valid sizes*/
    OB0QM001.OB0QMSIL[4] = "SIZE:";
                                   /* set the literals for line 4*/
    OB0QM001.OB0QMQTL[4] = "QTY:";
  else /* otherwise*/
    set OB0QM001.OB0QMSIL[4] skip, invisible; /* set them dark*/
    set OB0QM001.OB0QMQTL[4] skip, invisible;
  end

end // end OB0QS40

// EDIT MAP
Function OB0QS50()

    /* EDIT TOTAL QUANTITY*/

  OB0QS52();


    /* EDIT DROP DATE*/

  OB0QS54();


    /* EDIT WAITING LIST FLAG*/

  OB0QS56();

end // end OB0QS50

// EDIT QUANTITIES
Function OB0QS52()

     /* Add the on order quantities on the map*/

  OB0QW01.OB0QWTOT = 0; /* init total qty to 0*/
  OB0QW01.OB0QWSB1 = 1; /* init map subscript*/
  while (OB0QW01.OB0QWSB1 <= OB0QW01.OB0QWMAX) /* while le num sizes*/
    OB0QW01.OB0QWTOT = OB0QW01.OB0QWTOT + OB0QM001.OP3ONOQT[OB0QWSB1];
    OB0QWSB1 = OB0QWSB1 + 1;
  end

     /* Total must be greater than zero*/

  if (OB0QW01.OB0QWTOT <= 0)
    converseLib.validationFailed(133); /* total quantity must be > 0*/
    set OB0QM001.OP3ONOQT[1] cursor; /* put cursor on 1st qty*/
    OBWREC.OBWERRFL = "Y";
  end

end // end OB0QS52

// EDIT DROP DATE
Function OB0QS54()

    /* If blank, default to need date plus 60 days*/

  if (OB0QM001.OB0QMDDT == 0) /* if drop date is blank*/
    if (OB0QW01.OB0QMDDT != 0) /* if default drop date is good*/
      OB0QM001.OB0QMDDT = OB0QW01.OB0QMDDT; /* use it*/
      return;
    end
  end


    /* Drop date must be a valid date*/

  OBWREC.OBWDT6 = OB0QM001.OB0QMDDT;

  XSOBDED(); /* validate the date via TA0040*/

  if (TA2REC.TA2RTNCD == 0)
    OB0QW01.OB0QWDDD = TA2REC.TA2GRGGN; /* save it in numeric fmt*/
  else
    set OB0QM001.OB0QMDDT cursor, bold;
    converseLib.validationFailed(21); /* invalid date*/
    OBWREC.OBWERRFL = "Y";
    return;
  end


    /* Drop date must be greater than the current date*/

  if (OB0QW01.OB0QWDDD <= XX0XW01.XX0XWDAT) /* drop le today*/
    set OB0QM001.OB0QMDDT cursor, bold;
    converseLib.validationFailed(132); /* drop date must be > current date*/
    OBWREC.OBWERRFL = "Y";
    return;
  end


    /* Drop date must not be more than 6 months past need date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2DYAOD = +180;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OB1REC.OP1CUNDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    if (OB0QW01.OB0QWDDD > TA2REC.TA2GRGGN)
      set OB0QM001.OB0QMDDT cursor, bold;
      converseLib.validationFailed(132); /* drop date cannot be > need date +180*/
      OBWREC.OBWERRFL = "Y";
    end
  else
    TA1REC.TA1FUNC = "POST"; /* ????*/
    TA1REC.TA1LOCAT[3] = "TA0040 "; /* ?*/
    TA1REC.TA1LOCAT[4] = TA2RTNCD; /* ?*/
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* ?*/
  end

end // end OB0QS54

// EDIT WAITING LIST FLAG
Function OB0QS56()

    /* Waiting list flag must be 'Y' or 'N'*/

  if (OB0QM001.OPTWAITF == "Y"
   || OB0QM001.OPTWAITF == "N")
     /* flag is valid*/
  else
    set OB0QM001.OPTWAITF cursor, bold;
    converseLib.validationFailed(18); /* Must be 'Y' or 'N'*/
    OBWREC.OBWERRFL = "Y";
  end

end // end OB0QS56

// READ OB2REC
Function OB0QS58()

  set OB2REC empty;
  set OBKREC empty;
  set SQLCA empty;

  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* cust order id*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/

  OBKREC.OBKTASK = "MC"; /* select existance*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
    if (OBKREC.OBKCOUNT > 0)
       /* next sentence    order has items*/
    else
      OB1REC.YOBCD = "DL"; /* no items so cancel the order*/
    end
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "MC      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0IS58 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* spaces*/
    if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
      XSOBS05(); /* 911 - rollback*/
    else
      XSOBEDR(); /* retn - rollback*/
    end
  end

end // end OB0QS58

// UPDATE DATABASE
Function OB0QS60()

    /* FORMAT LOST DEMAND RECORD, OPTREC*/

  OB0QS62();


    /* ADD LOST DEMAND RECORD, OPTREC*/

  OB0QS64();


    /* insert comment record*/

  OB0QS65();


    /* DELETE ITEM/SIZE RECORD, OB3REC*/

  OB0QS66();


    /* UPDATE TOTAL VALUE AND QUANTITY ON BATCH ORDER HEADER*/

  OB0QS68();


    /* UPDATE TEMP STORAGE WITH * FOR DELETED ITEM*/

  OB0QS70();

    /* UPDATE TEMP STORAGE WITH 'U' FOR SELECTED ORDER*/

  OB0QS71();

end // end OB0QS60

// FORMAT LOST DEMAND RECORD
Function OB0QS62()

    /* Move data to the lost demand record*/

  set OPTREC empty;

  OPTREC.OPTDMND = "XD";

  OPTREC.XDVCD = OB1REC.XDVCD;
  OPTREC.XSOCD = OB1REC.XSOCD;
  OPTREC.XOTCD = OB1REC.XOTCD;
  OPTREC.XWHCD = OB1REC.XWHCD;
  OPTREC.OP1PARTN = OB1REC.OP1PARTN;
  OPTREC.OP1CUOID = OB1REC.OP1CUOID;
  OPTREC.OP1CUNDT = OB1REC.OP1CUNDT;
  OPTREC.KUCCOID = OB1REC.KUCCOID;
  OPTREC.KUMSTRID = OB1REC.KUMSTRID;
  OPTREC.XNXCD = OB1REC.XNXCD;
  OPTREC.XGPCD = OB1REC.XGPCD;
  OPTREC.OP1TBREP = OB1REC.OP1TBREP;

  OPTREC.SY1STNBR = OB3REC.SY1STNBR;
  OPTREC.SY2CLRID = OB3REC.SY2CLRID;
  OPTREC.XDMCD = OB3REC.XDMCD;

  OPTREC.OPTWAITF = OB0QM001.OPTWAITF;
  OPTREC.OP1ORDBY = OB0QM001.OP1ORDBY;

  OPTREC.ZZZSDT = OBWREC.ZZZCHGDT;
  OPTREC.ZZZSTM = OBWREC.ZZZCHGTM;


  OPTREC.XXXPHNA = OB0QM001.XXXPHNA; /* phone nbr - area code*/
  OPTREC.XXXPHNP = OB0QM001.XXXPHNP; /* prefix*/
  OPTREC.XXXPHNN = OB0QM001.XXXPHNN; /* station*/


  OBWREC.OBWDT6 = OB0QM001.OB0QMDDT; /* format drop date*/
  XSOBDMC(); /* into db2 format*/
  OPTREC.OPTDRPDT = OBWREC.OBWDT8;


    /* Move on order quantities from the map to the record.*/
    /* The valid sizes are placed in the lost demand record in*/
    /* the same position in the 40 field array as they are in*/
    /* OBHREC (from OB1200) and in SY4REC (product size*/
    /* scale record - where OB1200 got its valid size info.).*/

  OB0QW01.OB0QWSB1 = 1; /* map subscript*/
  OB0QW01.OB0QWSB2 = 1; /* record subscript*/
  while (OB0QWSB1 <= OB0QW01.OB0QWMAX) /* while still valid szs on map*/
    if (OBHREC.OBHSZDES[OB0QWSB2] > " ")
                                   /* if a valid size in the record*/
      OPTREC.OPTDMDQT[OB0QWSB2] = OB0QM001.OP3ONOQT[OB0QWSB1];
      OB0QW01.OB0QWSB1 = OB0QW01.OB0QWSB1 + 1; /* increase map sub*/
    end
    OB0QW01.OB0QWSB2 = OB0QW01.OB0QWSB2 + 1; /* increase record sub*/
  end

end // end OB0QS62

// WRITE LOST DEMAND OPTREC
Function OB0QS64()

    /* Add lost demand record - OPTREC (DORDER.VLOST001)*/

  set SQLCA empty;

  call "IO3070" ("A ", SQLCA, OPTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* good- next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VLOST001"; /* table view*/
    TA1REC.TA1LOCAT[1] = "A       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3070  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0QS64 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = OBWREC.OBWLNINB; /* line item nb*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04(); /* restart pgm - no rollback*/
    else
      XSOBEDC(); /* transfer to main menu*/
    end
  end

end // end OB0QS64

// INSERT COMMENT RECORD
Function OB0QS65()


     /* call io5180 for max rec seq number to insert new comment*/

  set OBKREC empty;
  set OB4REC empty;
  set SQLCA empty;

  OBKREC.OBKTASK = "SM"; /* select max*/
  OB4REC.OP1PARTN = OB1REC.OP1PARTN; /* part char id*/
  OB4REC.OP1CUOID = OB1REC.OP1CUOID; /* cust ord id*/
  OB4REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB4REC.OP4TRTYP = "C"; /* comment type id*/

  call "IO5180" (OBKREC, SQLCA, OB4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OBKREC.OBKMAX = OBKREC.OBKMAX + 1;
  else
    TA1REC.TA1DBASE = "DORDB"; /* database name*/
    TA1REC.TA1TBLVU = "VBTEXT01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "SM      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5180  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0QS65 "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      XSOBS05(); /* post and rollback*/
    else
      XSOBEDR(); /* rollback*/
    end
  end


  OB0QS6A(); /* format ob4rec for comment*/

     /* call io5180 to insert text comment*/

  set OBKREC empty;
  set SQLCA empty;
  OBKREC.OBKTASK = "A "; /* select max*/

  call "IO5180" (OBKREC, SQLCA, OB4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB"; /* database name*/
    TA1REC.TA1TBLVU = "VBTEXT01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "A       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5180  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0QS65 "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      XSOBS05(); /* post and rollback*/
    else
      XSOBEDR(); /* rollback*/
    end
  end


end // end OB0QS65

// DELETE ITEM/SIZE RECORD
Function OB0QS66()
  OBWREC.OBWXLIND = "I"; /* purge item*/

   /* call Order Batch - Cancel Order/Product*/

  call "OB0R" (OBWREC) {isNoRefresh = yes};




end // end OB0QS66

// UPDATE OB1REC
Function OB0QS68()

      /* First see if there are any products left on the old*/
      /* suborder. If none exist the suborder will be cancelled.*/

  OB0QS58(); /* get item count*/

    /* Update the batch order header with the new total order*/
    /* quantity and value*/

  OB1REC.OP1OVALU = OB1REC.OP1OVALU - OB3REC.OP2LNIVL; /* new order value*/
  OB1REC.OP1OTUNT = OB1REC.OP1OTUNT - OB3REC.OP2TONOQ; /* new total units*/

  OB1REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB1REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/
   /* change count handled in I/O module*/

  set OBFREC empty;
  set SQLCA empty;

  OBFREC.OBFTASK = "U ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if good*/
   || SQLCA.VAGen_SQLCODE == 100) /* or if updated by another*/
     /* next sentence                  OK-batch edit will fix it*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0QS68 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = " "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
      XSOBS05(); /* rollback & restart pgm*/
    else
      XSOBEDR(); /* rollback & xfer to main menu*/
    end
  end

end // end OB0QS68

// FORMAT OB4REC FOR COMMENT
Function OB0QS6A()


  set OB4REC empty;

  OB4REC.OP1PARTN = OB1REC.OP1PARTN; /* part char id*/
  OB4REC.OP1CUOID = OB1REC.OP1CUOID; /* cust ord id*/
  OB4REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB4REC.OP4TRTYP = "C"; /* comment type id*/
  OB4REC.OP4TRSEQ = OBKREC.OBKMAX; /* format seq number*/
  OB4REC.XNDCD = " "; /* format nike dept code*/
  OB4REC.OP4TXTOF = "N"; /* text override flag*/
  OB0QW01.OB0QWMS1 = "PRODUCT "; /* message 1*/
  OB0QW01.OB0QWMS2 = OB3REC.SY1STNBR; /* message 2*/
  OB0QW01.OB0QWMS3 = "-"; /* message 3*/
  OB0QW01.OB0QWMS4 = OB3REC.SY2CLRID; /* message 4*/
  OB0QW01.OB0QWMS5 = " WAS REPORTED AS LOST DEMAND"; /* message 5*/
  OB4REC.OP4TXT = OB0QW01.OB0QWMSG; /* format text line*/
  OB4REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB4REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/
  OB4REC.ZZZCHGCT = 0; /* change count*/


end // end OB0QS6A

// UPDATE TEMP STORAGE
Function OB0QS70()

    /* First call temp storage for current item;*/
    /* then change select option to '*' to show the item*/
    /* was deleted.*/

  XSOBT4R(); /* read temp storage*/

  OBDREC.OBDMSEL[OBWTSF4S] = "*";

  XSOBT4U(); /* update temp*/

end // end OB0QS70

// UPDATE TEMP STORAGE - OB3REC
Function OB0QS71()

  XSOBT1R(); /* read temp storage*/

  OBAREC.OBAMSEL[OBWTSF1S] = "U"; /* selected order*/
  OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD; /* status*/

  XSOBT1U(); /* update temp storage*/

end // end OB0QS71

// PF KEYS
Function OB0QSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf9)
    XSOBP09();
  end

  if (converseVar.eventKey is pf17)
    XSOBP17();
  end

  if (converseVar.eventKey is pf19)
    XSOBP19();
  end

  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N")
    XSOBP09(); /* transfer to OB0F*/
  end

end // end OB0QSPF

//*** RECORD=OB0QW01 ****
// ;
// This is the working storage area for OB0Q.
// ;
//                     MODIFICATIONS
// ------------------------------------------------------------
// 07/01/90    scantr    initial creation
// 03/20/91    swatso    added product descrpt - OB0QWPDS
// ***********************
Record OB0QW01 type basicRecord
  10 OB0QWSB1 OB0QWSB1 ; 
  10 OB0QWSB2 OB0QWSB2 ; 
  10 OB0QWMAX OB0QWMAX ; 
  10 OB0QWTOT OB0QWTOT ; 
  10 OB0QMDDT OB0QMDDT ; 
  10 OB0QWDDD OB0QWDDD ; 
  10 * char(1) ; 
  10 OB0QWPRD OB0QWPRD ; 
    15 SY1STNBR SY1STNBR ; 
    15 OB0QW001 OB0QW001 ; 
    15 SY2CLRID SY2CLRID ; 
    15 OB0QW002 OB0QW002 ; 
    15 XDMCD XDMCD ; 
  10 * char(1) ; 
  10 OB0QWNUM OB0QWNUM ; 
  10 KUMPHN KUMPHN ; 
    15 OB0QWPCH OB0QWPCH [15] ; 
  10 OB0QWFPH OB0QWFPH ; 
    15 OB0QWPHA OB0QWPHA ; 
    15 OB0QWD1 OB0QWD1 ; 
    15 OB0QWPHP OB0QWPHP ; 
    15 OB0QWD2 OB0QWD2 ; 
    15 OB0QWPHN OB0QWPHN ; 
  10 OB0QWMSG OB0QWMSG ; 
    15 OB0QWMS1 OB0QWMS1 ; 
    15 OB0QWMS2 OB0QWMS2 ; 
    15 OB0QWMS3 OB0QWMS3 ; 
    15 OB0QWMS4 OB0QWMS4 ; 
    15 OB0QWMS5 OB0QWMS5 ; 
  10 OB0QWPDS OB0QWPDS ; 
    15 OB0QWSSN OB0QWSSN ; 
    15 OB0QWSPC OB0QWSPC ; 
    15 OB0QWSCA OB0QWSCA ; 
  10 OB0QWSU1 OB0QWSU1 ; 
  10 OB0QWSU2 OB0QWSU2 ; 
  10 OB0QWSU3 OB0QWSU3 ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 OB0QW-NEW-ORD-SUB OB0QW-NEW-ORD-SUB ; 
  10 OB0QWMSG-2 OB0QWMSG-2 ; 
    15 OB0QWMS2-A OB0QWMS2-A ; 
    15 OB0QWMS2-B OB0QWMS2-B ; 
    15 OB0QWMS2-C OB0QWMS2-C ; 
    15 OB0QWMS2-D OB0QWMS2-D ; 
    15 OB0QWMS2-E OB0QWMS2-E ; 
  10 XOTFUTRF XOTFUTRF ; 
end // end OB0QW01

//*** RECORD=OBTDREC ****
// ************************************************************
// *                  PASSING RECORD FOR OB1840
// *
// ***THIS IS A NIKEBOTH INCLUDE. RECORD LENGTH MUST BE 2500**
// *
// ***CORRESPONDING CSP RECORD FOR WOB1840 IS OBSSREC
// *
// * DESCRIPTION:
// * THIS INCLUDE CONTAINS THE ALL THE PARAMETERS FOR PASSING
// * INFORMATION TO AND FROM OB1840 (SPLIT LOST DEMAND OR
// * POSTPONED DEMAND ITEM TO A NEW OR EXISTING SUBORDER).
// *
// * ALL PASS DATA IS REQUIRED
// *
// * SET THE OB1840-SPLIT-TO-STAT-CD TO 'LP' OR 'PD'
// *
// * FIELDS ALWAYS RETURNED BY OB1840 INCLUDE:
// *    RETURN-STATUS
// *     00 - GOOD RETURN
// *     02 - NOT FOUND ON UPDATE
// *     03 - DEADLOCK
// *     04 - OTHER DB2 ERRORS
// *     05 - DEADLOCK OCCURED FROM OB1690 (ITEM/SIZE FORMA
// *     06 - OTHER ERROR OCCURRED IN OB1690
// *
// *******************************************************
// ***********************
Record OBTDREC type basicRecord
  5 OBTD-PASSING-REC OBTD-PASSING-REC ; 
    10 OBTD-PASSING-INFO OBTD-PASSING-INFO ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 XGPCD XGPCD ; 
      15 XDVCD XDVCD ; 
      15 XBCCD XBCCD ; 
      15 XSOCD XSOCD ; 
      15 XOTCD XOTCD ; 
      15 XOBCD XOBCD ; 
      15 OB1ACCSF OB1ACCSF ; 
      15 XOCCD XOCCD ; 
      15 SP1ID SP1ID ; 
      15 SM1AGYID SM1AGYID ; 
      15 SM4REPID SM4REPID ; 
      15 XBDCD XBDCD ; 
      15 XWHCD XWHCD ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 XDSCD XDSCD ; 
      15 OP1BLKID OP1BLKID ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 OBTD-SPLIT-TO-STAT-CD OBTD-SPLIT-TO-STAT-CD ; 
    10 OBTD-RETURNED-DATA OBTD-RETURNED-DATA ; 
      15 OBTD-RETURN-CODE OBTD-RETURN-CODE ; 
      15 OBTD-RETURN-MSG OBTD-RETURN-MSG ; 
      15 OBTD-NEW-NIKE-ORD-ID OBTD-NEW-NIKE-ORD-ID ; 
      15 OBTD-SPLIT-TO-NEW-SUBORD-FL OBTD-SPLIT-TO-NEW-SUBORD-FL ; 
      15 OBTD-ERRDIAG-KEY OBTD-ERRDIAG-KEY ; 
    10 OBTD-FILLER OBTD-FILLER ; 
end // end OBTDREC

// drop from waiting list date
DataItem OB0QMDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ts subscript for new ord
DataItem OB0QW-NEW-ORD-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0QW001 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0QW002 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -
DataItem OB0QWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -
DataItem OB0QWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// drop date - YYYYMMDD format
DataItem OB0QWDDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted phone nbr
DataItem OB0QWFPH char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of valid sizes
DataItem OB0QWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'product'
DataItem OB0QWMS1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem OB0QWMS2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product
DataItem OB0QWMS2-A char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted product
DataItem OB0QWMS2-B char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reported as true demand
DataItem OB0QWMS2-C char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// on suborder
DataItem OB0QWMS2-D char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted order
DataItem OB0QWMS2-E char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OB0QWMS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color id
DataItem OB0QWMS4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'reported as lost demand'
DataItem OB0QWMS5 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message group
DataItem OB0QWMSG char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted camsg
DataItem OB0QWMSG-2 char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric flag
DataItem OB0QWNUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// phone nbr digit
DataItem OB0QWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product description
DataItem OB0QWPDS char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// phone area code
DataItem OB0QWPHA num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// phone station
DataItem OB0QWPHN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// phone prefix
DataItem OB0QWPHP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted product
DataItem OB0QWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general subscript
DataItem OB0QWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general subscript
DataItem OB0QWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style color abbrev
DataItem OB0QWSCA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value ' '
DataItem OB0QWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short style number
DataItem OB0QWSSN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first work subscript
DataItem OB0QWSU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second work subscript
DataItem OB0QWSU2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third work subscript
DataItem OB0QWSU3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total on order qty
DataItem OB0QWTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OBTD-ERRDIAG-KEY char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for total length 2500
DataItem OBTD-FILLER char(2295)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new nike ord id
DataItem OBTD-NEW-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passing information
DataItem OBTD-PASSING-INFO char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OBTD-PASSING-REC char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1840 return code
DataItem OBTD-RETURN-CODE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ob1840 return message
DataItem OBTD-RETURN-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1840 return data
DataItem OBTD-RETURNED-DATA char(143)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item split to NEW suborder
DataItem OBTD-SPLIT-TO-NEW-SUBORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split to status 'lp' or 'pd'
DataItem OBTD-SPLIT-TO-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

