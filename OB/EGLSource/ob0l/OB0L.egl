package ob0l;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=OB0L ****
// ;OVERVIEW: OB0L will display a list of errors for a selected
// ;          suborder that were found by the batch edit pro-
// ;          gram.  The batch edit program writes a record to
// ;          DORDB.VOBMSG01 for each edit error that is found.
// ;          A list of these errors was created in temp stor-
// ;          age when the order was selected in OB0B.  When an
// ;          error is selected and the enter key is used, this
// ;          application will transfer to the application
// ;          where the error can be fixed.  Each error message
// ;          in DORDB.VBMSGD01 has an Order Batch CSP appli-
// ;          cation associated with it.  If nothing is sel-
// ;          ected this application will redisplay the map.
// ;          Most of the Order Batch applications access this
// ;          application with PF17.
// ;
// ; DATABASE TABLES:
// ;
// ; Temp Storage 2   OBF2               OBBREC    Input/Output
// ;
// ; PROCESS/STATEMENT GROUPS:
// ;
// ;   OB0L000     PROC    Application entry validation
// ;   OB0L010     PROC    Converse OB0LM001 map
// ;   OB0LSFD     STMT    Line item number found
// ;   OB0LSFL     STMT    Find line item number
// ;   OB0LSNF     STMT    Line item number not found
// ;   OB0LSPF     STMT    Edit PFKeys
// ;   OB0LS01     STMT    Initialization of OB0L application
// ;   OB0LS02     STMT    Build map
// ;   OB0LS05     STMT    Load map headings
// ;   OB0LS10     STMT    Build error array
// ;   OB0LS15     STMT    Reset field attributes
// ;   OB0LS16     STMT    Set fields defined
// ;   OB0LS17     STMT    Set fields autoskip,dark
// ;   OB0LS20     STMT    Update from execute
// ;   OB0LS21     STMT    Select message record (VOBMSG01)
// ;   OB0LS22     STMT    Update message record (VOBMSG01)
// ;   OB0LS25     STMT    Update from converse
// ;   OB0LS26     STMT    Move map fields to temp storage
// ;   OB0LS30     STMT    Edit map fields
// ;   OB0LS35     STMT    Edit select options
// ;   OB0LS40     STMT    Edit page number
// ;   OB0LS45     STMT    Edit PF7 and PF8
// ;
// ;***********************************************************
// ;*           M A I N T E N A N C E   L O G                 *
// ;***********************************************************
// ;
// ;    DATE     NAME   DESCRIPTION OF CHANGE
// ;  --------  ------  ---------------------------------------
// ;  06/18/90  schase  created.
// ;  02/15/91  dmeier  regen for database changes
// ;  05/19/94  scantr  virtual airspeed project: chgd obwrec,
// ;                    xsobs02, xsobs03, added xsobs10
// ;  05/24/94  scantr  changed xsobs03
// ;  06/15/94  CRAINE  CHANGE TO GET ERRORS WHEN RELATIONAL
// ;                    EDIT HAS OCCURED
// ;  09/06/94  craine  change to obwrec
// ;  10/26/94  schase  change to obwrec
// ;  11/04/94  craine  reset map sel cd to 's' when previous
// ;                    selections were made and the status is
// ;                    'fa' and temp storage is rebuilt
// :  11/19/94  craine  space out camsg when = 'item deleted'
// ;  01/03/95  craine  change to obwrec
// ;  01/30/95  craine  chg to xsobs-upd-oba-edit
// ;  06/02/95  craine  change to obwrec
// ;  08/07/95  craine  DATABASE CHANGES
// ;  06/03/97  rgilli  YR2000 - Regen to ensure correct ver.
// ;                             of xx0xs01 is included.
// *********************
Program OB0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OB0LW01 OB0LW01; // record
  OB1REC OB1REC; // record
  OB6REC OB6REC; // record
  OB7REC OB7REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBKREC OBKREC; // record
  OBWREC OBWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OBMTBL {deleteAfterUse = yes}; // table
  use OB0LM.OB0LM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0L000: OB0L000();
    goto OB0L010;
    OB0L010: OB0L010();
    goto OB0L010;
  end // end main
end // end OB0L

// EXECUTE PROCESS
Function OB0L000()

  XSENTRY(); /* check csp security*/

  XSOBS01(); /* check batch order security*/

  OB0LS01(); /* initialize ob0l application*/

  OBWREC.OBWER911 = "N"; /* init -911 flag*/

  XSOBS02(); /* check if batch edit is running*/

  XSOBS03(); /* read order header (ob1rec)*/

  OB0LS-GET-ERRS(); /* get error messages*/

  if (OBWREC.CAMSG == "ITEM DELETED")
    OBWREC.CAMSG = " ";
  end


  if (OBWREC.CAMSG == " ")
    OB0LS20(); /* execute update*/
  end

  OB0LM001.CAMSG = OBWREC.CAMSG; /* format map camsg*/
  OBWREC.CAMSG = " "; /* clear obwrec camsg*/

  OB0LS02(); /* build map*/


end // end OB0L000

// CONVERSE/ AFTER PROCESS
Function OB0L010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  converse OB0LM001 ;

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OB0LM001.CAMSG = " "; /* clear map camsg*/

    /* RESET FIELD ATTRIBUTES*/

  OB0LS15();


    /* EDIT MAP*/

  OB0LS30();


    /* CONVERSE UPDATE*/

  if (OBWREC.OBWERRFL == "N" /* no errors*/
   && converseVar.eventKey is enter)
    OB0LS25();
  end


    /* SET NEW PAGE NUMBER*/

  if (OBWREC.OBWERRFL == "N") /* no errors*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      OB0LS27();
    end
  end


    /* EDIT PFKEYS*/

  OB0LSPF();

end // end OB0L010

// build record to pass to db2
Function OB0LS-BLD-OB7REC()




  set OB7REC empty;


  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB7REC.OB7MSGTP = "E"; /* only errs*/



   /* *************************************************************/
end // end OB0LS-BLD-OB7REC

// load and write obf2 - err msgs
Function OB0LS-BLD-TMP-STRG()



   /* load and write temp storage 2 - obf2*/

  set OBBREC empty; /* init temp storage record*/

  OBWREC.OBWTSF2S = 1; /* init sub to first message*/

  while (OBWREC.OBWTSF2S <= 11
   && OB0LW01.OB0LW-EOF-FL == "N")

    /* load temp storage 2 - obf2*/

    OBBREC.OBBMSEL[OBWTSF2S] = OB7REC.OB7MSGRF;
    OBBREC.OB6MSGNB[OBWTSF2S] = OB7REC.OB6MSGNB; /* message number*/
    OBBREC.OP2LNINB[OBWTSF2S] = OB7REC.OP2LNINB; /* line item nbr*/

     /* reset previous selections if needed*/

    if (OB0LW01.OB0LW-PREV-SEL == "Y")
      OBBREC.OBBMSEL[OBWTSF2S] = "S";
    end

    /* the message desc file tells the msg desc and the appl name*/
    /* where the err can be fixed*/

    OBBREC.OB6MSGDS[OBWTSF2S] = OB6REC.OB6MSGDS; /* move desc*/
    OBBREC.XXXPGMNO[OBWTSF2S] = OB6REC.XXXPGMNO; /* move pgm nbr*/

    /* lookup the program abrv from the OBMTBL table*/

    sysVar.arrayIndex = 1;
    if (OB6REC.XXXPGMNO in OBMTBL.XXXPGMNO) /* pgm nbr key*/
      OBBREC.XXXPGMAB[OBWTSF2S] = OBMTBL.XXXPGMAB[sysVar.arrayIndex];
    else
      OBBREC.XXXPGMAB[OBWTSF2S] = " ";
    end

    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment storage sub*/

    OB0LS-NXT-OB6REC(); /* select next message*/

  end


   /* write temp storage 2*/

  XSOBT2W();



   /* *************************************************************/
end // end OB0LS-BLD-TMP-STRG

// EXECUTE UPDATE
Function OB0LS-CHK-PREV-SEL()

  OBWREC.OBWTSF2S = 1; /* init temp subscript*/

  while (OBWREC.OBWTSF2S <= 11) /* less than or equal to 11*/
    if (OBBREC.OBBMSEL[OBWTSF2S] == "S") /* selection found*/
      OB0LW01.OB0LW-PREV-SEL = "Y"; /* PREVIOUS SELECTIONS EXIST*/
    end
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment by +1*/
  end


end // end OB0LS-CHK-PREV-SEL

// close OB6REC via OB1240
Function OB0LS-CLS-OB6REC()


   /* close scan*/

  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("CS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "CS OB1240 E OB0LS-CLS-OB6REC";
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0LS-CLS-OB6REC

// get current error messages
Function OB0LS-GET-ERRS()

  OB0LW01.OB0LW-PREV-SEL = "N"; /* init flag*/

  XSOBT2R(); /* read current temp storage page*/

  if (OB1REC.YOBCD == "FA"
   && OBWREC.OBW-GET-ERRORS-FL == "Y")
    OB0LS-CHK-PREV-SEL();
  end

  if (OBWREC.OBW-GET-ERRORS-FL == "Y")
    /* select all order error messages*/
    /* write a temporary storage record (obf2) for*/
    /* each map full of error messages - 11 msgs per screen*/

    /* set end of file flag to no*/

    OB0LW01.OB0LW-EOF-FL = "N";

    XSOBT2P(); /* purge temp storage 2 to start clean*/

    OB0LS-BLD-OB7REC(); /* build rec to pass to select messages*/
    OB0LS-OPN-OB6REC(); /* get all the messages for the order*/
    OB0LS-NXT-OB6REC(); /* select next mssg for temp storage 2*/

    if (OB0LW01.OB0LW-EOF-FL == "Y") /* no messages*/
      set OBBREC empty;
      XSOBT2W(); /* write one blank record*/
    else
      /* while there are messages selected*/

      while (OB0LW01.OB0LW-EOF-FL == "N")
        OB0LS-BLD-TMP-STRG(); /* load and write temp storage 2*/
      end
    end

    OBWREC.OBWTSF2P = 1; /* set page number*/
    OBWREC.OBWTSF2S = 1; /* position cursor on first message*/
    /* total number of pages was set in write statement group*/


    /* close scan*/

    OB0LS-CLS-OB6REC(); /* close OB6REC via OB1240*/

    OBWREC.OBW-GET-ERRORS-FL = "N";
  end

  XSOBT2R(); /* read temp storage 2 - errors*/

   /* *************************************************************/
end // end OB0LS-GET-ERRS

// select next OB6REC via OB1240
Function OB0LS-NXT-OB6REC()



   /* select next message for loading temp storage 2 and 3*/
            /* obf2 - errors and  obf3 - holds*/


  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("SN", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0LW01.OB0LW-EOF-FL = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOC = "SN OB1240 E OB0LS-NXT-OB6REC";
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWER911 = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0LS-NXT-OB6REC

// open OB6REC via OB1240
Function OB0LS-OPN-OB6REC()


   /* get all the error msgs for the order*/

  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("SS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "SS OB1240 E OB0LS-OPN-OB6REC";
    if (SQLCA.VAGen_SQLCODE == -911)
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* -911 processing, no rollback*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0LS-OPN-OB6REC

// INITIALIZE OB0L APPLICATION
Function OB0LS01()

    /* SET RECORDS EMPTY*/

  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBKREC empty;
  set OB7REC empty;
  set OB8REC empty;
  set OB0LW01 empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA5REC empty;
  set XX0XW01 empty;

  XX0XS01(); /* find current date and time*/

  set OB0LM001 empty;

  TA1REC.TA1MAP = "OB0LM001";


end // end OB0LS01

// BUILD MAP
Function OB0LS02()

    /* LOAD MAP HEADINGS*/

  OB0LS05();


    /* BUILD ERROR MSG ARRAY*/

  OB0LS10();


    /* RESET FIELD ATTRIBUTES*/

  OB0LS15();


end // end OB0LS02

// LOAD MAP HEADINGS
Function OB0LS05()

    /* PROCESS NAME*/

  OB0LM001.OB0LMPRC = "OB0L010"; /* process name*/


    /* CURRENT DATE*/

  OB0LM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/


    /* ORDER NUMBER*/

  OB0LM001.OBWORDER = OBWREC.OBWORDER; /* order number*/


    /* CUSTOMER NUMBER*/

  OB0LM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/


    /* CUSTOMER PO NUMBER*/

  OB0LM001.OP1CUPO = OBWREC.OP1CUPO; /* po number*/


    /* CUSTOMER STORE NAME*/

  OB0LM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer store name*/


    /* CURRENT PAGE NUMBER*/

  OB0LM001.OBWTSF2P = OBWREC.OBWTSF2P; /* current page number*/


    /* MAXIMUM PAGE NUMBER*/

  OB0LM001.OBWTSF2M = OBWREC.OBWTSF2M; /* max page number*/


end // end OB0LS05

// BUILD ERROR MSG ARRAY
Function OB0LS10()

  OBWREC.OBWTSF2S = 1; /* init subscript*/

  while (OBWREC.OBWTSF2S <= 11) /* less than or equal to 11*/
    OB0LM001.OBBMSEL[OBWTSF2S] = OBBREC.OBBMSEL[OBWTSF2S];
    OB0LM001.XXXPGMAB[OBWTSF2S] = OBBREC.XXXPGMAB[OBWTSF2S];
    OB0LM001.OB6MSGDS[OBWTSF2S] = OBBREC.OB6MSGDS[OBWTSF2S];
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment by +1*/
  end

  if (OB0LM001.OB6MSGDS[1] == " ") /* no msg desc*/
    OB0LM001.CAMSG = "NO ERRORS FOR THIS ORDER";
  end


end // end OB0LS10

// RESET FIELD ATTRIBUTES
Function OB0LS15()

    /* set cursor to page in case of no enterable select codes*/

  set OB0LM001.OBWTSF2P cursor, initialAttributes; /* page number*/


  OBWREC.OBWTSF2S = 11; /* init subscript*/

  while (OBWREC.OBWTSF2S >= 1)
    if (OB0LM001.OB6MSGDS[OBWTSF2S] == " ")
      OB0LS17(); /* set row autoskip,dark*/
    else
      OB0LS16(); /* set row defined*/
      if (OB0LM001.OBBMSEL[OBWTSF2S] == "*")
        set OB0LM001.OBBMSEL[OBWTSF2S] skip; /* set sel opt autoskip*/
      else
        set OB0LM001.OBBMSEL[OBWTSF2S] cursor, initialAttributes;
      end
    end
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S - 1; /* decrement by +1*/
  end

end // end OB0LS15

// SET FIELDS DEFINED
Function OB0LS16()

  set OB0LM001.OBBMSEL[OBWTSF2S] initialAttributes; /* select option*/
  set OB0LM001.XXXPGMAB[OBWTSF2S] initialAttributes; /* message number*/
  set OB0LM001.OB6MSGDS[OBWTSF2S] initialAttributes; /* message description*/


end // end OB0LS16

// SET FIELDS AUTOSKIP,DARK
Function OB0LS17()

  set OB0LM001.OBBMSEL[OBWTSF2S] skip, invisible; /* select option*/
  set OB0LM001.XXXPGMAB[OBWTSF2S] skip, invisible; /* message number*/
  set OB0LM001.OB6MSGDS[OBWTSF2S] skip, invisible; /* message description*/


end // end OB0LS17

// EXECUTE UPDATE
Function OB0LS20()

  OBWREC.OBWTSF2S = 1; /* init temp subscript*/

  while (OBWREC.OBWTSF2S <= 11) /* less than or equal to 11*/
    if (OBBREC.OBBMSEL[OBWTSF2S] == "S") /* selection found*/
      if (OBBREC.OP2LNINB[OBWTSF2S] > 0) /* if line item # > 0*/
        OB0LSFL(); /* find line item number*/
        if (OB0LW01.OB0LWFND == "Y") /* line item was found*/
          OB0LSFD(); /* update temp for found item*/
        else
          OB0LSNF(); /* update temp for not found item*/
        end
      else
        OB0LSFD(); /* update temp for zero line item*/
      end
    else
      if (OBBREC.OBBMSEL[OBWTSF2S] == "?") /* selection found*/
        OB0LS29(); /* transfer to help screen*/
      end
    end
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment by +1*/
  end


end // end OB0LS20

// SELECT MESSAGE RECORD
Function OB0LS21()

  set SQLCA empty;
  set OB7REC empty;
  set OBKREC empty;

  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* format part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* format cust ord id*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* format nike ord id*/

  OB7REC.OP2LNINB = OBBREC.OP2LNINB[OBWTSF2S];
                                   /* format line item nbr*/
  OB7REC.OB6MSGNB = OBBREC.OB6MSGNB[OBWTSF2S]; /* format message number*/
  OB7REC.OB7MSGTP = "E"; /* format message type*/

  OBKREC.OBKTASK = "S"; /* format task*/

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB"; /* database name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0LS21"; /* statement group*/
    OB0LW01.OB0LWLIN = OB7REC.OP2LNINB; /* error line item nbr*/
    OB0LW01.OB6MSGNB = OB7REC.OB6MSGNB; /* error message nbr*/
    TA1REC.TA1LOCAT[4] = OB0LW01.OB0LWKEY; /* extended error key*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04(); /* post and come back*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end


end // end OB0LS21

// UPDATE FROM CONVERSE
Function OB0LS25()


    /* TURN ON ALL SELECTIONS IF USER REQUESTS "A"*/

  if (OB0LM001.OBBMSEL[1] == "A") /* select all errors*/
    OBWREC.OBWTSF2S = 1; /* init subscript*/
    while (OBWREC.OBWTSF2S <= 11) /* less than or equal to 11*/
      OB0LM001.OBBMSEL[OBWTSF2S] = "S"; /* turn on selections*/
      OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment by +1*/
    end
  end


    /* MOVE MAP FIELDS TO TEMP STORAGE*/

  OBWREC.OBWTSF2S = 1; /* init subscript*/

  while (OBWREC.OBWTSF2S <= 11) /* less than or equal to 11*/
    OBBREC.OBBMSEL[OBWTSF2S] = OB0LM001.OBBMSEL[OBWTSF2S];
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment by +1*/
  end


    /* UPDATE TEMP STORAGE*/

  XSOBT2U();


end // end OB0LS25

// UPDATE FROM CONVERSE
Function OB0LS27()

    /* CHECK FOR PAGING*/

  if (converseVar.eventKey is pf7)
    OBWREC.OBWTSF2P = OBWREC.OBWTSF2P - 1; /* subtract 1 from page*/
  end

  if (converseVar.eventKey is pf8)
    OBWREC.OBWTSF2P = OBWREC.OBWTSF2P + 1; /* add 1 to page*/
  end

  if (converseVar.eventKey is enter)
    OBWREC.OBWTSF2P = OB0LM001.OBWTSF2P; /* format new page number*/
  end


end // end OB0LS27

// transfer to help screen
Function OB0LS29()



  OBWREC.OB6MSGNB = OBBREC.OB6MSGNB[OBWTSF2S];
  OBWREC.OB6MSGDS = OBBREC.OB6MSGDS[OBWTSF2S];

  OBBREC.OBBMSEL[OBWTSF2S] = " "; /* set error viewed*/

  XSOBT2U(); /* update temp storage*/

  XSOBP01();

end // end OB0LS29

// EDIT MAP FIELDS
Function OB0LS30()

    /* EDIT SELECT OPTIONS*/

  OB0LW01.OB0LWSEL = "N"; /* init select flag*/
  OBWREC.OBWTSF2S = 11; /* init subscript*/

  while (OBWREC.OBWTSF2S > 0) /* greater than 0*/
    OB0LS35();
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S - 1; /* decrement by -1*/
  end


    /* EDIT PAGE NUMBER*/

  OB0LS40();

  if (OBWREC.OBWERRFL == "Y") /* error exists*/
    return;
  end


    /* EDIT PF7/PF8*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    OB0LS45();
  end


end // end OB0LS30

// EDIT SELECT OPTIONS
Function OB0LS35()

    /* CHECK TEMP STORAGE FOR MATCH*/

  if (OBBREC.OBBMSEL[OBWTSF2S] == OB0LM001.OBBMSEL[OBWTSF2S])
    /* next sentence*/
  else
    if (OB0LM001.OBBMSEL[OBWTSF2S] == "S"
     || OB0LM001.OBBMSEL[1] == "A"
     || OB0LM001.OBBMSEL[OBWTSF2S] == " "
     || OB0LM001.OBBMSEL[OBWTSF2S] == "?")
       /* next sentence*/
    else
      converseLib.validationFailed(083); /* select option is invalid*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0LM001.OBBMSEL[OBWTSF2S] cursor, bold;
    end
  end


  if (OB0LM001.OBBMSEL[OBWTSF2S] == "S"
   || OB0LM001.OBBMSEL[OBWTSF2S] == "?"
   || OB0LM001.OBBMSEL[1] == "A") /* select all errors*/
    OB0LW01.OB0LWSEL = "Y"; /* set selection flag on*/
  end


end // end OB0LS35

// EDIT PAGE NUMBER
Function OB0LS40()

    /* IF ANY SELECTION ERRORS, DON'T EDIT ANY FARTHER.*/
    /* IF THE PAGE NUMBER WAS CHANGED, SET IT BACK AND*/
    /* HIGHLIGHT IT TO TELL THE USER THE PROGRAM RESET IT.*/

  if (OBWREC.OBWERRFL == "Y")
    if (OBWREC.OBWTSF2P != OB0LM001.OBWTSF2P)
      OB0LM001.OBWTSF2P = OBWREC.OBWTSF2P;
      set OB0LM001.OBWTSF2P bold;
    end
    return;
  end


    /* DETERMINE IF CURRENT PAGE NUMBER IS WITHIN RANGE*/

  if (OB0LM001.OBWTSF2P > OB0LM001.OBWTSF2M /* page # > max page #*/
   || OB0LM001.OBWTSF2P < 1)                /* or less than 1*/
    converseLib.validationFailed(084); /* page number must be between 1 and last page #*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0LM001.OBWTSF2P cursor, bold;
    OB0LM001.OBWTSF2P = OBWREC.OBWTSF2P; /* reset page number*/
    return;
  end


    /* TRYING TO USE SELECTIONS WHEN CHANGING PAGE NUMBER*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || OB0LM001.OBWTSF2P != OBWREC.OBWTSF2P) /* if page number changes*/
    if (OB0LW01.OB0LWSEL == "Y") /* a selection was made*/
      converseLib.validationFailed(097); /* cannot make selections while changing pages*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0LM001.OBWTSF2P cursor, bold;
      OB0LM001.OBWTSF2P = OBWREC.OBWTSF2P; /* reset page number*/
    end
  end


end // end OB0LS40

// EDIT PF7 AND PF8
Function OB0LS45()

    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OB0LM001.OBWTSF2P == 1) /* page 1*/
    converseLib.validationFailed(086); /* cannot scroll backward*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OB0LM001.OBWTSF2P == OB0LM001.OBWTSF2M) /* current page = last page*/
    converseLib.validationFailed(087); /* cannot scroll forward*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OB0LM001.OBWTSF2P != OBWREC.OBWTSF2P) /* current page has changed*/
    converseLib.validationFailed(085); /* cannot chg page # and pf7/pf8 at same time*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0LM001.OBWTSF2P cursor, bold;
    OB0LM001.OBWTSF2P = OBWREC.OBWTSF2P; /* reset page number*/
  end


end // end OB0LS45

// LINE ITEM FOUND
Function OB0LSFD()

  OBBREC.OBBMSEL[OBWTSF2S] = "V"; /* change 's' to 'v' on obf2*/

  XSOBT2U(); /* update temp storage*/

  OB0LS21(); /* select message record (ob7rec)*/

   /* IF SQLCA.SQLCODE EQ 0;            /* good return*/
    /* MOVE 'V' TO OB7REC.OB7MSGRF;    /* change 's' to 'v' on ob7rec*/
    /* OB0LS22;                        /* update vobmsg01 with ob7rec*/
   /* END;*/

  OBWREC.OBWLNINB = OBBREC.OP2LNINB[OBWTSF2S]; /* save line item #*/

  OB0LW01.OB0LWMNB = OBBREC.OB6MSGNB[OBWTSF2S]; /* err nbr*/
  OB0LW01.OB0LWBL2 = " "; /* filler*/
  OB0LW01.OB6MSGDS = OBBREC.OB6MSGDS[OBWTSF2S]; /* error msg*/
  OBWREC.CAMSG = OB0LW01.OB0LWMSG; /* format error msg*/

  COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* format commarea*/

  COMMAREA.CATOAP = OBBREC.XXXPGMNO[OBWTSF2S]; /* format fix pgm name*/

  XSEXIT();


end // end OB0LSFD

// FIND LINE ITEM NUMBER
Function OB0LSFL()

    /* This statement group will read and evaluate*/
    /* the order line items stored already loaded in*/
    /* temp storage. (OBF4 Record)*/

  OBWREC.OBWTSF4P = 1; /* init product item temp storage page*/
  OB0LW01.OB0LWFND = "N"; /* init line item found flag*/

  while (OBWREC.OBWTSF4P <= OBWREC.OBWTSF4M) /* while page <= max page*/
    XSOBT4R(); /* read obdrec temp storage*/
    OBWREC.OBWTSF4S = 1; /* init product item temp storage sub*/
    while (OBWREC.OBWTSF4S <= 10) /* while <= total # of items on page*/
      if (OBBREC.OP2LNINB[OBWTSF2S] == OBDREC.OP2LNINB[OBWTSF4S] /* matched*/
       && OBDREC.OBDMSEL[OBWTSF4S] != "*")                       /* and hasnt been deleted*/
        OB0LW01.OB0LWFND = "Y"; /* set found flag on*/
        return;
      end
      OBWREC.OBWTSF4S = OBWREC.OBWTSF4S + 1; /* increment line by +1*/
    end
    OBWREC.OBWTSF4P = OBWREC.OBWTSF4P + 1; /* increment page by +1*/
  end

  OBWREC.OBWTSF4P = 1;
                                   /* reinit product item temp storage page*/
  OBWREC.OBWTSF4S = 1; /* init product item temp storage sub*/

end // end OB0LSFL

// LINE ITEM NOT FOUND
Function OB0LSNF()

  OBBREC.OBBMSEL[OBWTSF2S] = "*"; /* format select option on obf2*/

  OBBREC.OB6MSGDS[OBWTSF2S] = "PRODUCT LINE ITEM NO LONGER EXISTS";

  XSOBT2U(); /* update temp storage*/


end // end OB0LSNF

// Edit pfkeys for OB0L
Function OB0LSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf7
   && OBWREC.OBWERRFL == "N")
    XSOBP00();
  end

  if (converseVar.eventKey is pf8
   && OBWREC.OBWERRFL == "N")
    XSOBP00();
  end

  if (converseVar.eventKey is pf9)
    XSOBP09();
  end

  if (converseVar.eventKey is pf13)
    XSOBP13();
  end

  if (converseVar.eventKey is pf14)
    XSOBP14();
  end

  if (converseVar.eventKey is pf15)
    XSOBP15();
  end

  if (converseVar.eventKey is pf16)
    XSOBP16();
  end

  if (converseVar.eventKey is pf18)
    XSOBP18();
  end

  if (converseVar.eventKey is pf19)
    XSOBP19();
  end



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end



  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N") /* no errors*/
    XSOBP00(); /* restart ob0l*/
  end


end // end OB0LSPF

Record OB0LW01 type basicRecord
  10 OB0LWSEL OB0LWSEL ; 
  10 OB0LWFND OB0LWFND ; 
  10 OB0LWKEY OB0LWKEY ; 
    15 OB0LWLIN OB0LWLIN ; 
    15 OB0LWBLK OB0LWBLK ; 
    15 OB6MSGNB OB6MSGNB ; 
  10 OB0LWMSG OB0LWMSG ; 
    15 OB0LWMNB OB0LWMNB ; 
    15 OB0LWBL2 OB0LWBL2 ; 
    15 OB6MSGDS OB6MSGDS ; 
  10 OB0LW-EOF-FL OB0LW-EOF-FL ; 
  10 OB0LW-PREV-SEL OB0LW-PREV-SEL ; 
end // end OB0LW01

// end of file flag
DataItem OB0LW-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous selections exist fl
DataItem OB0LW-PREV-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OB0LWBL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OB0LWBLK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item found flag
DataItem OB0LWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extended error key
DataItem OB0LWKEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error line item nbr
DataItem OB0LWLIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ob-msg-nbr
DataItem OB0LWMNB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message
DataItem OB0LWMSG char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select option flag
DataItem OB0LWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

