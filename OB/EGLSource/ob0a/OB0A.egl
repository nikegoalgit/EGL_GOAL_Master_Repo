package ob0a;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=OB0A ****
// ;
// ; OVERVIEW: Online Airspeed allows the user to work with a
// ;           selection of orders, making corrections and
// ;           changes to fit the needs of the customer.  The
// ;           selection of orders takes place in OB0A.  The
// ;           user specifies criteria which can be as general
// ;           as a customer company number or as specific as
// ;           purchase order number, need date, order type,
// ;           & style number. If an order meets the selection
// ;           criteria, it is read in and loaded to a temp-
// ;           orary storage file.  The order can then be re-
// ;           viewed and updated in other order batch applic-
// ;           ations.
// ;
// ; DATABASE TABLES:
// ;
// ; Sales Agency   DSLSMN.VSAGCY01   SM1REC   IO0050   Input
// ; Agency/Rep     DSLSMN.VRAGCY01   SM5REC   IO0160   Input
// ; Company        DCUST.VCUST001    KUNREC   IO0280   Input
// ; Store          DCUST.VSTORE001   KUMREC   IO0340   Input
// ; Style          DPROD.VSTYLE01    SY1REC   IO0120   Input
// ; Style/Color    DPROD.VCOLOR02    SYCREC   IO0560   Input
// ; Sales Program  DSPGM.VSPGM001    SP1REC   IO0070   Input
// ; Order Header   DORDB.VOBHDR01    OB1REC   IO5160   Input
// ; Order Item     DORDB.VBITEM001   OB2REC   IO5170   Input
// ; Temp Storage 1 OBF1              OBAREC   TA0050   Output
// ;
// ; CORPORATE TABLES:
// ;
// ; GPC            DCORP.VXGP0001    XGPTBL            Input
// ; Base Ord Type  DCORP.VXOB0001    XOBTBL            Input
// ; Sales Office   DCORP.VXSO0001    XSOTBL            Input
// ; Division Code  DCORP.VXDV0001    XDVTBL            Input
// ; Order Class    DCORP.VXOC0001    XOCTBL            Input
// ; Batch Status   DCORP.VYOB0001    YOBTBL            Input
// ; Order Type     DCORP.VXOT0001    XOTTBL            Input
// ;
// ; PROCESSES/STATEMENT GROUPS:
// ;
// ;   OB0A000    PROC   Application entry validation
// ;   OB0A010    PROC   Converse OB0AM001 Map
// ;   OB0A015    PROC   Converse XX0XM001 Pop-up window
// ;   OB0ASB1    STMT   Load key to select orders
// ;   OB0ASB2    STMT   Build temp storage 1
// ;   OB0ASB3    STMT   Build product record
// ;   OB0ASC1    STMT   Close order scan
// ;   OB0ASL1    STMT   Load & write temp storage records
// ;   OB0ASN1    STMT   Select first order
// ;   OB0ASS1    STMT   Get all orders with criteria entered
// ;   OB0ASS2    STMT   Get short customer name
// ;   OB0ASS3    STMT   See if product exists
// ;   OB0ASEL    STMT   Selection parameter control
// ;   OB0ASPF    STMT   PF KEY edit
// ;   OB0ASVD    STMT   Validate date
// ;   OB0AS01    STMT   Initialize OB0A Application
// ;   OB0AS02    STMT   Build map
// ;   OB0AS03    STMT   Move fields to map
// ;   OB0AS05    STMT   Reset all map field attributes
// ;   OB0AS10    STMT   Edit map fields
// ;   OB0AS11    STMT   Evaluate orders for display
// ;   OB0AS12    STMT   Check order type
// ;   OB0AS14    STMT   Evaluate order selected
// ;   OB0AS15    STMT   Edit required fields
// ;   OB0AS20    STMT   Edit style, color, dimension
// ;   OB0AS25    STMT   Edit partial load flag
// ;   OB0AS30    STMT   Edit order status
// ;   OB0AS35    STMT   Edit prop only flag
// ;   OB0AS40    STMT   Edit order class
// ;   OB0AS45    STMT   Edit futures only flag
// ;   OB0AS50    STMT   Edit division code
// ;   OB0AS55    STMT   Edit sales office code
// ;   OB0AS60    STMT   Edit dont ship after date
// ;   OB0AS65    STMT   Edit sales program id
// ;   OB0AS70    STMT   Edit order written date
// ;   OB0AS75    STMT   Edit base order type
// ;   OB0AS80    STMT   Edit need date
// ;   OB0AS85    STMT   Edit GPC
// ;   OB0AS90    STMT   Select set for company, store, dept
// ;   OB0AS91    STMT   Fetch company, store, dept
// ;   OB0AS92    STMT   Select customer name
// ;   OB0AS95    STMT   Select set for sales agency/rep
// ;   OB0AS96    STMT   Fetch sales agency/rep
// ;   OB0AS97    STMT   Select sales agency name
// ;
// ;***********************************************************
// ;           M A I N T E N A N C E    L O G
// ;***********************************************************
// ;
// ;   DATE     NAME     DESCRIPTION OF CHANGE
// ; ________  ______   _______________________________________
// ; 05/23/90  SCHASE   Created.
// ; 09/25/90  SCHASE   Added cancel exclusion flag to map
// ;                    and qualified special io5160 selections
// ;                    in 010. also added s53 for editing flag
// ; 10/24/90  oricha   add spcl cust grp and prod category to
// ;                    selection criteria. m001,sb1,sb5
// ;                    sel,sxl,s05,s10,s15,s86,s87,obwrec.
// ; 02/15/91  dmeier   regen for database changes
// ; 05/09/91  CRAINE   ALWAYS MOVE STORE NAME TO TEMP STORAGE
// ;                    FOR OB0B. CHG SB2.
// ; 09/03/91  jhecke   added repnet entry field to screen.
// ;                    ob0aM,s15,sxl,sel,sb5,sb1
// ; 02/21/94  craine   db changes - remove op1rec - not used
// ;                    changes to OB1REC,OB2REC, KUMREC,
// ;                    SM1REC, OBDREC, AND COMMAREA
// ; 05/15/94  scantr   virtual airspeed project - remove check
// ;                    to see if batch edit running ob0a010;
// ;                    changed obwrec, xsobs02,03, added 10
// ; 06/08/94  scantr   virtual airspeed-update obwrec
// ; 06/15/94  craine   virtual airspeed-add relational edit
// ; 09/06/94  craine   virtual airspeed-update obwrec
// ; 10/05/94  dcassi   Put in calls to TA0020 to display
// ;                    debugging info, in ob0as11 and ob0asl1.
// ;                    Added conversion and display fields to
// ;                    ob0aw01.
// ; 10/12/94  dcassi/  removed ta0020 calls that were put in
// ;           craine   10/05.  Corrected a bug in ob0asl1 that
// ;                    was setting message 2 in error.  Added
// ;                    ob0aw-ords-qual-fl to correct this bug.
// ;                    changed ob0as11, ob0asl1, and ob0aw01.
// ; 10/13/94  dcassi   corrected the eof 'if' condition in
// ;                    ob0asl1.  was going to ob0b and not
// ;                    putting out message 2, if orders were
// ;                    selected from the database but NONE
// ;                    qualified.
// ; 10/18/94  CRAINE   add duplicate order function.  Also,
// ;                    added push availability flag logic.
// ; 11/11/94  CRAINE   Add super edit, cust defaults, csr hold
// ;                    logic OB0A040, OB0A045, XSOB001,
// ;                    XSOB002, OBCDREC
// ; 12/12/94  CRAINE   CHG OB0A030 TO GET NEXT ORDER NUUBER
// ;                    BEFORE CALLING OB1810.
// ; 12/13/94  CRAINE   CHG TO ALLOW PARTIAL DECREMENT OF BULKS
// ;                    AND DECREMENT OF ONLY RSRV QTY.
// ; 02/14/95  CBRINE   ADDED 'QUICK RELEASE' LOGIC. RELEASES
// ;                    HOLD MSGS: 001, 214, 280,& 281.
// ; 02/21/95  CRAINE   ADD msg 226, 282 to quick release logic
// ; 02/22/95  CBRINE   Allow entry of either/both sales rep
// ;                    id and agency id.
// ; 02/25/95  CRAINE   add calling pgm to obcdrec, chg xsob001
// ; 03/22/95  CRAINE   ADD msg 291 TO OB0AS-QUIK-RELEASE
// ; 04/10/95  CRAINE   Add COMMIT to XSOB002 and XSOB003.
// ; 05/19/95  CRAINE   ADD CODE TO S14 TO EXCLUDE 'XL' WHEN
// ;                    OB0AMXLF = 'Y', ADD CODE TO S15 TO EDIT
// ;                    FOR COMBINATIONS OF REQUIRED FIELDS
// ;                    REMOVED OB0ASXL - NOT NEEDED
// ; 06/02/95  CRAINE   CHG TO OBWREC
// ; 08/07/95  CRAINE   DATABASE CHANGES
// ; 11/02/95  ALUFT    ADD msg 210 to quick release logic
// ; 07/23/96  SLARSE   ADD msg 304 to quick release logic
// ; 11/23/96  SLARSE   JCP and RETAIL quick release logic
// ; 08/19/97  KRAMSE   ADD msg 017 to quick release logic
// ; 11/06/97  SATYAM   Add PRODUCT HOLD BY CSR logic in
// ;                    ob0as03, ob0as05, ob0as72, ob0as91
// ;                    ob0a010, ob0a040 and ob0a045
// ;                    Changed the map ob0am001 added the
// ;                    field prod hold by csr, and in map
// ;                    ob0am003 increased the length of the
// ;                    field ob0am-process-type from 13 to 15.
// ; 12/03/97  KLEE     added perform of xpob004 (process bulk
// ;                    assignments ob1430) to proc ob0a040.
// ; 02/12/98  JFLOR1   removed msg 017 from quick release
// ;                    logic in OB0AS-QUIK-RELEASE.
// ; 03/03/98  JFLOR1   added msg 017 to quick release logic
// ;                    in OB0AS-QUIK-RELEASE.
// ; 03/03/98  KLEE     modfied OB0A040 to perform XPOB004
// ;                    for super-edit. Installed with JFLOR1
// ;                    changes.
// ; 23/02/99  rharat   compiled to pickup new obcdrec.
// ; 09/02/99  bbahul   included rcdt in ob0asb1 bl#799.
// ; 06/30/00  pvenka   added msg 303 to quick release logic
// ;                    in OB0AS-QUIK-RELEASE.
// *********************
Program OB0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUYREC KUYREC; // record
  OB0AW01 OB0AW01; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB7REC OB7REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBAREC OBBAREC; // record
  OBBREC OBBREC; // record
  OBCDREC OBCDREC; // record
  OBCREC OBCREC; // record
  OBDPREC OBDPREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBKREC OBKREC; // record
  OBLEREC OBLEREC; // record
  OBWREC OBWREC; // record
  OP1REC OP1REC; // record
  OP7REC OP7REC; // record
  SM1REC SM1REC; // record
  SM5REC SM5REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YOBTBL; // table
  use XOBTBL; // table
  use XGPTBL; // table
  use XPCTBL; // table
  use XSGTBL; // table
  use XSOTBL; // table
  use XDVTBL; // table
  use XOCTBL; // table
  use XOTTBL; // table
  use OB0AM.OB0AM001,  // forms
      OB0AM.OB0AM002, 
      OB0AM.OB0AM003, 
      OB0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0A000: OB0A000();
         /* ***********************************************/
         /* *  flow to ob0a010.                          **/
         /* ***********************************************/

    goto OB0A010;
    OB0A010: OB0A010();
    goto OB0A010;
    OB0A015: OB0A015();
    OB0A020: OB0A020();
    OB0A025: OB0A025();
    OB0A030: OB0A030();
    OB0A040: OB0A040();
    XSOB001: XSOB001();
    XSOB002: XSOB002();
    XSOB003: XSOB003();
    OB0A045: OB0A045();
  end // end main
end // end OB0A

Function OB0A000()

  OBWREC.OBWGROUP = COMMAREA.CAUSERA; /* move in commarea*/

  if (OBWREC.OBWINIT == "OB0") /* coming from a ob0 system*/
    OB0AM001.CAMSG = OBWREC.CAMSG; /* format map camsg*/
  end

  set OBWREC empty;

  OBWREC.OBWINIT = "OB0";

  OBWREC.OBWMSEL = 0;

  XSENTRY();


     /* INITIALIZE OB0A APPLICATION*/

  OB0AS01();


     /* BUILD OB0A MAP*/

  OB0AS02();


end // end OB0A000

Function OB0A010()

  OBWREC.OBWER911 = "Y"; /* set -911 error flag on*/

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1;

  converse OB0AM001 ;

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OB0AM001.CAMSG = " "; /* init camsg*/


    /* EDIT PFKEYS*/

  OB0ASPF();


    /* RESET ALL MAP FIELD ATTRIBUTES*/

  OB0AS05();


    /* CHECK IF POP-UP WINDOW WAS SELECTED*/

  if (OB0AM001.YOBCD == "?") /* if pop-up window desired then*/
    OB0A015(); /* process batch order status window*/
    set OB0AM001.YOBCD initialAttributes;
  end


    /* EDIT ALL MAP FIELDS*/

  OB0AS10();

    /* PROCESS DUPLICATE ORDER*/

  if (OBWREC.OBWERRFL == "N"        /* no errors*/
   && converseVar.eventKey is enter /* and enter*/
   && OB0AM001.OB0AM-DUPL-ORD-ID > 0) /* dupl ord id exists*/
    if (OB0AM001.OB0AM-STORE-LIST == "Y")
      OB0A020(); /* get store list*/
    else
      OB0A030(); /* duplicate the order*/
    end
    OB0AM001.OB1XREFN = OB0AM001.OB0AM-DUPL-ORD-ID;
  end


       /* PROCESS A/O PUSH AND RSRV ONLY FLAGS*/

  if (OBWREC.OBWERRFL == "N" /* no errors*/
   && converseVar.eventKey is enter) /* and enter*/
    OBWREC.OBW-PUSH-AVAIL = OB0AM001.OB0AM-PUSH-AVAIL;
    OBWREC.OBW-RSRV-QTY-ONLY = OB0AM001.OB0AM-RSRV-ONLY;
  end


    /* UPDATE/BUILD TEMP STORAGE WITH SELECTED ORDERS*/

  if (OBWREC.OBWERRFL == "N" /* no errors*/
   && converseVar.eventKey is enter) /* and enter*/
    OB0ASEL(); /* determine selection paramet*/
    if (OBWREC.OBWERRFL == "N") /* no errors*/
      OB0AS11(); /* update/build temp storage*/
    end
  end


   /* PROCESS QUICK RELEASE, SUPER EDIT, CUST DEFAULTS,*/
   /* CSR HOLD AND/OR PROD HOLD BY CSR OPTIONS*/

  if (OB0AM001.OB0AM-QUICK-RELEASE == "Y"
   || OB0AM001.OB0AM-SUPER-EDIT == "Y"
   || OB0AM001.OB0AM-CUST-DEFAULTS == "Y"
   || OB0AM001.OB0AM-CSR-HOLD == "Y"
   || OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y"
   || OB0AM001.OB0AM-DUPL-ORD-ID > 0)
    OB0AW01.OB0AWEOF = "N";
    OB0AW01.OB0AWCNT = 0;
    OBWREC.OBWTSF1P = 1;
    while (OB0AW01.OB0AWEOF == "N")
      OB0A040();
    end
    OBWREC.OBWTSF1P = 1; /* reset to display first page*/
    OBWREC.OBWTSF1S = 1; /* and first order*/
  end



    /* IF ENTER AND NO ERRORS - TRANSFER TO OB0B APPLICATION*/

  if (converseVar.eventKey is enter /* if enter*/
   && OBWREC.OBWERRFL == "N")       /* and no errors*/
    COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* transfer data*/
    XSOBP03(); /* transfer to OB0B application*/
  end


end // end OB0A010

// YOB POP-UP WINDOW
Function OB0A015()

    /* INITIALIZE POP-UP WINDOW FIELDS*/

  XPXX001();

  XX0XW02.XX0XWHDR = "   ORDER BATCH STATUS   "; /* heading*/

  while (XX0XW02.XX0XWEND == "N")
    XPYOB01(); /* converse pop-up window*/

    if (XX0XW02.XX0XWPIX > +0)
      if (YOBTBL.XXXSTAT[XX0XWPIX] == "A")
        OB0AM001.YOBCD = YOBTBL.YOBCD[XX0XWPIX];
        OB0AM001.YOBABRV = YOBTBL.YOBABRV[XX0XWPIX];
      end
    else
      OB0AM001.YOBCD = " ";
      OB0AM001.YOBABRV = " ";
    end
  end

  converseLib.clearScreen();


end // end OB0A015

Function OB0A020()


     /* BUILD OB0A MAP*/

  OB0AS-BUILD-MAP2();

  OB0AS-MAP2-ATTR(); /* set map attributes*/

  OBWREC.OBWERRFL = "Y";

  while (OBWREC.OBWERRFL == "Y")
    OB0A025();
  end



end // end OB0A020

// CONVERSE STORE LIST
Function OB0A025()

  OBWREC.OBWER911 = "Y"; /* set -911 error flag on*/

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1;

  OB0AM002.CAMSG = OBWREC.CAMSG;
  OBWREC.CAMSG = " ";

  converse OB0AM002 ;

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error msg*/
  OB0AM002.CAMSG = " "; /* init camsg*/


    /* EDIT PFKEYS*/

  OB0AS-MAP2-PFKEYS();


    /* RESET ALL MAP FIELD ATTRIBUTES*/

  OB0AS-MAP2-ATTR();
    /* EDIT ALL MAP FIELDS*/

  OB0AS-EDIT-MAP2();
    /* process duplicate order*/

  if (OBWREC.OBWERRFL == "N" /* no errors*/
   && converseVar.eventKey is enter) /* and enter*/
    OBWREC.OBWSUB = 1;
    while (OBWREC.OBWSUB <= 24
     && OBWREC.OBWERRFL == "N")
      if (OB0AM002.KUMSTRID[OBWSUB] == 0  /* store exists*/
       && OB0AM002.OP1CUPO[OBWSUB] == " " /* cust po exists*/
      )                                   /* next sentence*/
      else
        OB0A030(); /* duplicate the order*/
      end
      OBWREC.OBWSUB = OBWREC.OBWSUB + 1;
    end
  end



end // end OB0A025

// duplicate an order
Function OB0A030()

    /* get a new order number*/

  OB0AS-GET-NEW-ID();
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  if (OP7REC.OP7CUOIN <= 0)
    OBWREC.CAMSG = "ORDERS DATABASE BUSY - PLEASE TRY AGAIN ";
    OBWREC.OBWERRFL = "Y";
  end

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  /* BUILD PASSING RECORD FOR OB1810*/
  /* CALL OB1810*/
  /* PROCESS RETURN CODES*/
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  if (OBWREC.OBWERRFL != "Y")

    set OBDPREC empty;

    OB0AW01.OB0AWOID = OB0AM001.OB0AM-DUPL-ORD-ID;
    OBDPREC.OP1PARTN = OB0AW01.OB0AWPCH;
    OBDPREC.OP1CUOID = OB0AW01.OB0AWOID;
    OBDPREC.ZZZCHGDT = OBWREC.ZZZCHGDT;
    OBDPREC.ZZZCHGTM = OBWREC.ZZZCHGTM;

    if (OB0AM001.OB0AM-STORE-LIST == "Y")
      OBDPREC.KUMSTRID = OB0AM002.KUMSTRID[OBWSUB]; /* NEW STORE*/
      OBDPREC.OP1CUPO = OB0AM002.OP1CUPO[OBWSUB]; /* NEW PO NUMBER*/
    else
      OBDPREC.KUMSTRID = 0; /* NEW STORE*/
      OBDPREC.OP1CUPO = " "; /* NEW PO NUMBER*/
    end

    OBDPREC.OBDP-OP1CUOID-NEW = OP7REC.OP7CUOIN;
    OB0AW01.OB0AWOID = OP7REC.OP7CUOIN;
    OBDPREC.OBDP-OP1PARTN-NEW = OB0AW01.OB0AWPCH;

    OBDPREC.OBDP-RETURN-CD = 99;

    call "OB1810" (OBDPREC) {isNoRefresh = yes, isExternal = yes};

    TA1REC.TA1LOCAT[2] = "OB1810";
    TA1REC.TA1LOCAT[3] = "OB0A030 ";
    TAEREC.TAEDESC1 = "OB1810 RETURN CODE IS ";
    TAEREC.TAEDESC2 = OBDPREC.OBDP-RETURN-CD;

    if (OBDPREC.OBDP-RETURN-CD == 0)
      if (OB0AM001.OB0AM-STORE-LIST == "Y")
        OB0AM002.KUMSTRID[OBWSUB] = 0;
        OB0AM002.OP1CUPO[OBWSUB] = "               ";
      end
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      if (OBDPREC.OBDP-RETURN-CD == 1)
  /* HEADER NOT FOUND - when it should have been*/
        OBWREC.CAMSG = OBDPREC.OBDP-RETURN-MSG;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback updates since last commit*/
        XSOBENR(); /* appl retn - go to main menu*/
      else
        if (OBDPREC.OBDP-RETURN-CD == 2)
  /* DEADLOCK OR TIMEOUT ON DORDER.VNXTIO01*/
          OBWREC.CAMSG = "ORDERS DATABASE BUSY - PLEASE TRY AGAIN ";
          OBWREC.OBWERRFL = "Y";
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* rollback updates to last commit*/
        else
          if (OBDPREC.OBDP-RETURN-CD == 3)
  /* OTHER DATABASE ERROR DORDER.VNXTIO01 - ABEND W/ROLLBACK*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* rollback updates to last commit*/
            XSOBENR(); /* appl retn - go to main menu*/
          else
            if (OBDPREC.OBDP-RETURN-CD == 4)
  /* DATABASE DEADLOCK - DATABASE BUSY TRY AGAIN*/
              OBWREC.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN ";
              OBWREC.OBWERRFL = "Y";
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* rollback updates to last commit*/
            else
              if (OBDPREC.OBDP-RETURN-CD == 5)
  /* OTHER DATABASE PROBLEM - ABEND W/ROLLBACK*/
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback updates to last commit*/
                XSOBENR(); /* appl retn - go to main menu*/
              else
                if (OBDPREC.OBDP-RETURN-CD == 6)
  /* SUBPROGRAM CALLED FROM OB1810 FAILED*/
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* rollback updates to last commit*/
                  XSOBENR(); /* appl retn - go to main menu*/
                else
                  if (OBDPREC.OBDP-RETURN-CD == 7)
  /* order already duplicated for this store/po*/
                    if (OB0AM001.OB0AM-STORE-LIST == "Y")
                      set OB0AM002.KUMSTRID[OBWSUB] cursor, bold;
                      set OB0AM002.OP1CUPO[OBWSUB] bold;
                    end
                    converseLib.validationFailed(186);
                    VGVar.handleSysLibraryErrors = 0;
                    sysLib.rollback(); /* rollback updates to last commit*/
                    OBWREC.OBWERRFL = "Y";
                  else
                    if (OBDPREC.OBDP-RETURN-CD == 99)
  /* CALL TO OB1810 DIDN'T WORK*/
                      VGVar.handleSysLibraryErrors = 0;
                      sysLib.rollback(); /* rollback updates to last commit*/
                      XSOBENR(); /* appl retn - go to main menu*/
                    else
  /* MAJOR PROBLEM WITH OB1810*/
                      VGVar.handleSysLibraryErrors = 0;
                      sysLib.rollback(); /* rollback updates to last commit*/
                      XSOBENR(); /* appl retn - go to main menu*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end


  end



end // end OB0A030

// APPLY DEFAULTS/EDITS/HOLDS
Function OB0A040()

  XSOBT1R(); /* READ TEMP STORAGE PAGE*/
  OB0AW01.OB0AW-DO-EDIT = "N"; /* initialize flag*/

  if (TA5REC.TA5RTNCD != 0)
    OB0AW01.OB0AWEOF = "Y";
  else
    OBWREC.OBWTSF1S = 1;

    while (OBWREC.OBWTSF1S <= 12
     && OBAREC.OBACUOID[OBWTSF1S] != 0)

      if (OBAREC.YOBCD[OBWTSF1S] == "NC"
       || OBAREC.YOBCD[OBWTSF1S] == "CK"
       || OBAREC.YOBCD[OBWTSF1S] == "CL"
      )
        if (OB0AM001.OB0AM-QUICK-RELEASE == "Y")
          OB0AS-QUIK-RELEASE(); /* RELEASE MSGS 001, 214, 280, & 281*/
          OB0AW01.OB0AW-DO-EDIT = "Y"; /* set flag*/
        end
        if (OB0AM001.OB0AM-CUST-DEFAULTS == "Y")
          XSOB001(); /* APPLY CUST DEFAULTS VIA OB1650*/
          XPOB004(); /* PROCESS BULK ASSIGNMENTS VIA OB1430*/
          OB0AW01.OB0AW-DO-EDIT = "Y"; /* set flag*/
        end
        if (OB0AM001.OB0AM-SUPER-EDIT == "Y"
         || OB0AM001.OB0AM-DUPL-ORD-ID > 0)
          OB0AW01.OB0AW-DO-EDIT = "Y"; /* set flag*/
        end
        if (OB0AW01.OB0AW-DO-EDIT == "Y")
          XSOB002(); /* EDIT ORDER VIA OB1680*/
          OB0AW01.OB0AW-DO-EDIT = "N"; /* reset flag*/
        end
        if (OB0AM001.OB0AM-CSR-HOLD == "Y")
          XSOB003(); /* APPLY CSR HOLD TO ORDER*/
        end
        if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y")
          OB0AS71(); /* get the line item nbr & in XSOB004*/
                   /* insert the product hold message for each product*/
        end
        OB0AS-UPDATE-TS(); /* UPDATE THE STATUS, AND ERROR/HOLD*/
                                   /* FLAGS*/
      end

      OB0AW01.OB0AWCNT = OB0AW01.OB0AWCNT + 1;


      OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1;

    end

    XSOBT1U(); /* UPDATE TEMP STORAGE PAGE*/


    if (OBWREC.OBWTSF1P >= OBWREC.OBWTSF1M) /* LAST PAGE*/

      OB0AW01.OB0AWEOF = "Y";
      if (OB0AM001.OB0AM-QUICK-RELEASE == "Y")
        OBWREC.CAMSG = "QUICK RELEASE HAS BEEN SUCCESSFULLY APPLIED TO ALL SELECTED ORDERS";
      else
        if (OB0AM001.OB0AM-CUST-DEFAULTS == "Y")
          OBWREC.CAMSG = "CUSTOMER DEFAULTS SUCCESSFULLY APPLIED TO ALL SELECTED ORDERS";
        else
          if (OB0AM001.OB0AM-SUPER-EDIT == "Y")
            OBWREC.CAMSG = "SUPER EDIT SUCCESSFULLY COMPLETED FOR ALL SELECTED ORDERS";
          else
            if (OB0AM001.OB0AM-CSR-HOLD == "Y")
              if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y")
                OBWREC.OBW-PROD-HOLD-FLAG = "H";
                 /* obw-prod-hold-flag is used to display the message*/
                 /* in ob0b application, when prodhold and csrhold r sel*/
              end
              OBWREC.CAMSG = "CSR HOLD SUCCESSFULLY APPLIED TO ALL SELECTED ORDERS";
            else
              if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y")
                OBWREC.CAMSG = "PRODUCT HOLD BY CSR SUCCESSFULLY APPLIED";
              else
                if (OB0AM001.OB0AM-DUPL-ORD-ID > 0)
                  OBWREC.CAMSG = "DUPLICATE ORDER SUCCESSFULLY COMPLETED ";
                end
              end
            end
          end
        end
      end

    else
      OB0A045(); /* DISPLAY PROGRESS MESSAGE*/
      OBWREC.OBWTSF1P = OBWREC.OBWTSF1P + 1;
    end

  end

end // end OB0A040

// DISPLAY PROGRESS MSG
Function OB0A045()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1;

  if (OB0AM001.OB0AM-DUPL-ORD-ID > 0)
    OB0AM-PROCESS-TYPE = "   DUPLICATE   ";
  end

  if (OB0AM001.OB0AM-CUST-DEFAULTS == "Y")
    OB0AM-PROCESS-TYPE = " CUST DEFAULTS ";
  end

  if (OB0AM001.OB0AM-CSR-HOLD == "Y")
    if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y")
      OB0AM-PROCESS-TYPE = "CSR & PROD HOLD";
    else
      OB0AM-PROCESS-TYPE = "   CSR HOLD    ";
    end
  end

  if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y")
    OB0AM-PROCESS-TYPE = "   PROD HOLD   ";
  end

  if (OB0AM001.OB0AM-SUPER-EDIT == "Y")
    OB0AM-PROCESS-TYPE = "  SUPER EDIT   ";
  end

  OB0AM003.OB0AM-COMPLETE = OB0AW01.OB0AWCNT;

  OB0AW01.OB0AWREM = OB0AW01.OB0AWTOT - OB0AW01.OB0AWCNT;

  OB0AM003.OB0AM-REMAINING = OB0AW01.OB0AWREM;


  display OB0AM003 ;
end // end OB0A045

// BUILD PASSING RECORD FOR DB2
Function OB0AS-BLD-OB7REC()


  set OB7REC empty;


  OB7REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S]; /* part char*/
  OB7REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S]; /* order nbr*/
  OB7REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S]; /* nike ord id*/
  OB7REC.OB7MSGTP = "H"; /* only holds*/


end // end OB0AS-BLD-OB7REC

Function OB0AS-BUILD-MAP2()


  OB0AM002.OB0AMPRC = "OB0A025"; /* process name*/

  OB0AM002.OBWCDATE = OBWREC.OBWCDATE; /* current date*/

  OB0AM002.OP1CUOID = OB0AM001.OB0AM-DUPL-ORD-ID;

  OB0AM002.KUCCOID = OP1REC.KUCCOID;
  OB0AM002.OB0AM-KUMSTRID = OP1REC.KUMSTRID;
  OB0AM002.OB0AM-XNXCD = OP1REC.XNXCD;
  OB0AM002.OB0AM-OP1CUPO = OP1REC.OP1CUPO;


    /* get short store name*/

  set KUMREC empty;
  set SQLCA empty;

  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  KUMREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/

   /* read dcust.vstore01*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OB0AM002.KUMSTRNM = KUMREC.KUMSTRNM; /**/
  else
    OB0AM002.KUMSTRNM = "UNKNOWN   ";
  end




end // end OB0AS-BUILD-MAP2

// READ SERVICE REP - VSVREP01
Function OB0AS-CHK-USERID()

  set SQLCA empty;
  set KUYREC empty;

  OB0AW01.OB0AW-CAN-RELEASE-IT = "N"; /* initialize flag*/

  KUYREC.XXXUSRID = COMMAREA.CAUSERID;

  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUYREC.KUYREPCD == "3") /* has authority to do quick releases*/
      OB0AW01.OB0AW-CAN-RELEASE-IT = "Y"; /* set flag*/
    end
  end

end // end OB0AS-CHK-USERID

// CLOSE OB7REC VIA OB5210
Function OB0AS-CLS-OB7REC()


   /* close scan*/


  set SQLCA empty;
  set OB7REC empty;

  call "IO5210" ("C1", SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod-close  scan*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "C1 OB5210 H OB0AS-CLS-OB7REC";
    XSOBEDC(); /* abort routine - no reset done*/
  end


end // end OB0AS-CLS-OB7REC

// edit map ob0am002
Function OB0AS-EDIT-MAP2()



  sysVar.arrayIndex = 24;

  while (sysVar.arrayIndex != 0
   && OBWREC.OBWERRFL == "N"
  )
    /* validate store id*/

    set KUMREC empty;
    set SQLCA empty;

    KUMREC.KUCCOID = OP1REC.KUCCOID;
    KUMREC.KUMSTRID = OB0AM002.KUMSTRID[sysVar.arrayIndex];
    KUMREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/

    /* read dcust.vstore01*/

    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/

    /* check db2 return code*/


    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      /* next sentence*/
    else
      OBWREC.OBWERRFL = "Y";
      converseLib.validationFailed(182);
      set OB0AM002.KUMSTRID[sysVar.arrayIndex] cursor, bold;
    end

    sysVar.arrayIndex = sysVar.arrayIndex - 1;

  end


end // end OB0AS-EDIT-MAP2

// get ord nbr and add order hdr
Function OB0AS-GET-NEW-ID()



      /* *********************************************************/
      /* * this statement group gets the next order number      **/
      /* *********************************************************/

  set SQLCA empty;
  set OP7REC empty;

      /* get next order number*/

  call "IO0510" ("SU", SQLCA, OP7REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   && OP7REC.OP7CUOIN > 0)     /* check for good next ord number*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VNXTIO01"; /* table view*/
    TA1REC.TA1TBLKE = OP7REC.OP7GROUP; /* key value*/
    TA1REC.TA1LOCAT[1] = "SU"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO0510"; /* statement group*/
    TA1REC.TA1LOCAT[3] = "OP0AS-GE"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "T-NEW-ID"; /* i/o mod name*/
    XSOBEDP();
  end


end // end OB0AS-GET-NEW-ID

// set ob0am002 attributes
Function OB0AS-MAP2-ATTR()

  OBWREC.OBWSUB = 1; /* init sub*/

  while (OBWREC.OBWSUB <= 24)

    set OB0AM002.OP1CUPO[OBWSUB] initialAttributes;
    set OB0AM002.KUMSTRID[OBWSUB] initialAttributes;
    OBWREC.OBWSUB = OBWREC.OBWSUB + 1;

  end

  set OB0AM002.KUMSTRID[1] cursor;


end // end OB0AS-MAP2-ATTR

Function OB0AS-MAP2-PFKEYS()


  COMMAREA.CAUSERA = OBWREC.OBWGROUP;

  if (converseVar.eventKey is pf2) /* order processing main menu - OP0M*/
     /* Transfer to Order Processing Master Menu*/

     /* purge all temp storage first*/

    XSOBT1P(); /* purge orders*/
    XSOBT2P(); /* purge errors*/
    XSOBT3P(); /* purge holds*/
    XSOBT4P(); /* purge items*/
    XSOBT5P(); /* purge comments*/

    COMMAREA.CATOAP = "OP0M";
    XSEXIT();

  end

  if (converseVar.eventKey is pf4) /* main selection menu - MN0M*/
    XSOBP04();
  end

  if (converseVar.eventKey is enter /* edit and select orders if ok*/
   || converseVar.eventKey is pf3)  /* edit only*/
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


end // end OB0AS-MAP2-PFKEYS

// FETCH NEXT OB7REC VIA OB5210
Function OB0AS-NXT-OB7REC()


   /* select next hold message*/


  set SQLCA empty;
  set OB7REC empty;

  call "IO5210" ("N1", SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0AW01.OB0AW-EOF-FL = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOC = "S1 OB5210 H OB0AS-NXT-OB7REC";
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWER911 = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end


end // end OB0AS-NXT-OB7REC

// OPEN OB7REC VIA OB5210
Function OB0AS-OPN-OB7REC()

   /* get all the hold messages for the order*/

  set SQLCA empty;

  call "IO5210" ("S1", SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOC = "S1 OB5210 H OB0AS-OPN-OB7REC";
    if (SQLCA.VAGen_SQLCODE == -911)
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* -911 processing, no rollback*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end


end // end OB0AS-OPN-OB7REC

// get current hold messages
Function OB0AS-QUIK-RELEASE()

   /* Read all the hold messages for this order. If any are equal to*/
   /* 001,017,210,214,226,280,281,282,291 or 304 then release them.*/

  OB0AW01.OB0AW-EOF-FL = "N"; /* set end of file flag to no*/

  OB0AS-BLD-OB7REC(); /* build rec to get all holds for order*/
  OB0AS-OPN-OB7REC(); /* get all the messages for the order*/
  OB0AS-NXT-OB7REC(); /* select next message*/

   /* while there are messages selected*/

   /* TT#6834 Wipro changes begin*/
   /* PVENKA - added message #303 to quick release below on 6/29/2000*/
   /*  */
   /* jflor1 - removed message #17 from quick release below on 2/11/98*/
   /* jflor1 - added message #17 to quick release below on 3/2/98*/
  while (OB0AW01.OB0AW-EOF-FL == "N")

    if (OB7REC.OB6MSGNB == "001"
     || OB7REC.OB6MSGNB == "017"
     || OB7REC.OB6MSGNB == "210"
     || OB7REC.OB6MSGNB == "214"
     || OB7REC.OB6MSGNB == "226"
     || OB7REC.OB6MSGNB == "280"
     || OB7REC.OB6MSGNB == "281"
     || OB7REC.OB6MSGNB == "282"
     || OB7REC.OB6MSGNB == "291"
     || OB7REC.OB6MSGNB == "303"
     || OB7REC.OB6MSGNB == "304")
      OB0AS-UPD-OB7REC(); /* release message*/
    end

   /*  */
   /* TT#6834 Wipro changes ends*/
   /*  */
    /* SLARSE BEGIN*/
    if (OB0AM001.XGPCD == "03" && 
    OB0AM001.KUCCOID == 1026147 && 
    (OB7REC.OB6MSGNB == "013" || 
    OB7REC.OB6MSGNB == "152" || 
    OB7REC.OB6MSGNB == "181" || 
    OB7REC.OB6MSGNB == "193" || 
    OB7REC.OB6MSGNB == "212" || 
    OB7REC.OB6MSGNB == "222" || 
    OB7REC.OB6MSGNB == "223"))
      OB0AS-UPD-OB7REC(); /* release message for JCP*/
    end
    /* SLARSE END*/

    OB0AS-NXT-OB7REC(); /* read next OB7REC*/
  end

   /* close scan*/

  OB0AS-CLS-OB7REC(); /* close OB7REC via OB5210*/








end // end OB0AS-QUIK-RELEASE

// UPDATE OB7REC VIA OB5210
Function OB0AS-UPD-OB7REC()

   /* update message record*/

  OB7REC.OB7MSGRF = "R"; /* set flag to 'R' for released*/

  OB7REC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OB7REC.ZZZCHGTM = OBWREC.ZZZCHGTM;

  set SQLCA empty;

  call "IO5210" ("U ", SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OBWREC.CAMSG = "THE MESSAGE HAS BEEN MODIFIED BY ANOTHER SERVICE REP";
      XSOBP00();
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5210  "; /* i/omod*/
      TA1REC.TA1LOCAT[3] = "OB0AS-UPD-OB7REC"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end




end // end OB0AS-UPD-OB7REC

// read current order header
Function OB0AS-UPDATE-TS()
   /* Read the order header.*/

  set OB1REC empty;
  set OBFREC empty;
  set SQLCA empty;


  OB1REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S];
  OB1REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S];
  OB1REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S];

  OBFREC.OBFTASK = "S ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "XSOBS03 "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end

  OBAREC.SP1ID[OBWTSF1S] = OB1REC.SP1ID; /* sales program id*/
  OBAREC.XOBCD[OBWTSF1S] = OB1REC.XOBCD; /* base ot*/
  OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD; /* order batch status*/
  OBAREC.OB1ERRFL[OBWTSF1S] = OB1REC.OB1ERRFL; /* err flag*/
  OBAREC.OB1HLDFL[OBWTSF1S] = OB1REC.OB1HLDFL; /* hold flag*/



end // end OB0AS-UPDATE-TS

// INITIALIZE OB0A APPLICATION
Function OB0AS01()

  set KUMREC empty;
  set KUNREC empty;
  set OBDPREC empty;
  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBKREC empty;
  set OB1REC empty;
  set OB2REC empty;
  set OB8REC empty;
  set SM1REC empty;
  set SM5REC empty;
  set SP1REC empty;
  set SY1REC empty;
  set SYCREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set OB0AW01 empty;

  OBWREC.OBWCDATE = VGVar.currentShortGregorianDate; /* current date*/

  set XX0XW01 empty;
  XX0XS01();
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  TA1REC.TA1MAP = "OB0AM001"; /* format ta1rec w/ map name*/


end // end OB0AS01

// BUILD OB0A MAP
Function OB0AS02()

  OB0AS-CHK-USERID(); /* check if CSR has authority to do*/
                                   /* quick release*/
  OB0AS03(); /* move fields to map*/

  OB0AS05(); /* reset field attributes*/


end // end OB0AS02

// MOVE FIELDS TO MAP
Function OB0AS03()

  OB0AM001.OB0AMPRC = "OB0A010"; /* process name*/

  OB0AM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/

  OB0AM001.OB0AMXLF = "Y"; /* default flag to y*/
  OB0AM001.OB0AM-QUIK-REL-LIT = "QUICK RELEASE"; /* set literal*/
  OB0AM001.OB0AM-QUICK-RELEASE = "N"; /* default flag to n*/
  OB0AM001.OB0AM-STORE-LIST = "N"; /* default flag to n*/
  OB0AM001.OB0AM-SUPER-EDIT = "N"; /* default flag to n*/
  OB0AM001.OB0AM-CUST-DEFAULTS = "N"; /* default flag to n*/
  OB0AM001.OB0AM-RSRV-ONLY = "N"; /* default flag to n*/
  OB0AM001.OB0AM-PUSH-AVAIL = "Y"; /* default flag to y*/
  OB0AM001.OB0AM-CSR-HOLD = "N"; /* default flag to n*/
  OB0AM001.OB0AM-PROD-HOLDBY-CSR = "N"; /* default flag to n*/

end // end OB0AS03

// RESET ALL MAP FIELD ATTRIBUTES
Function OB0AS05()

  set OB0AM001.CU-CUST-PROD-ID initialAttributes;
  set OB0AM001.SY1STNBR initialAttributes;
  set OB0AM001.SY2CLRID initialAttributes;
  set OB0AM001.XDMCD initialAttributes;
  set OB0AM001.OB1PARLF initialAttributes;
  set OB0AM001.YOBCD initialAttributes;
  set OB0AM001.XOTPROPF initialAttributes;
  set OB0AM001.XOCCD initialAttributes;
  set OB0AM001.XOTFUTRF initialAttributes;
  set OB0AM001.XDVCD initialAttributes;
  set OB0AM001.XSOCD initialAttributes;
  set OB0AM001.OB0AMSD1 initialAttributes;
  set OB0AM001.OB0AMSD2 initialAttributes;
  set OB0AM001.SP1ID initialAttributes;
  set OB0AM001.OB0AMWD1 initialAttributes;
  set OB0AM001.OB0AMWD2 initialAttributes;
  set OB0AM001.XOBCD initialAttributes;
  set OB0AM001.OB0AMND1 initialAttributes;
  set OB0AM001.OB0AMND2 initialAttributes;
  set OB0AM001.XGPCD initialAttributes;
  set OB0AM001.XSGCD initialAttributes;
  set OB0AM001.XPCCD initialAttributes;
  set OB0AM001.OB1XREFN initialAttributes;
  set OB0AM001.OP1CUOID initialAttributes;
  set OB0AM001.OP1CUPO initialAttributes;
  set OB0AM001.KUCCOID initialAttributes;
  set OB0AM001.KUMSTRID initialAttributes;
  set OB0AM001.XNXCD initialAttributes;
  set OB0AM001.SM1AGYID initialAttributes;
  set OB0AM001.SM4REPID initialAttributes;
  set OB0AM001.OB0AM-DUPL-ORD-ID initialAttributes;
  set OB0AM001.OB0AM-STORE-LIST initialAttributes;
  set OB0AM001.OB0AM-SUPER-EDIT initialAttributes;
  set OB0AM001.OB0AM-CUST-DEFAULTS initialAttributes;
  set OB0AM001.OB0AM-RSRV-ONLY initialAttributes;
  set OB0AM001.OB0AM-PUSH-AVAIL initialAttributes;
  set OB0AM001.OB0AM-CSR-HOLD initialAttributes;
  set OB0AM001.OB0AM-PROD-HOLDBY-CSR initialAttributes;

  if (OB0AW01.OB0AW-CAN-RELEASE-IT == "Y")
    set OB0AM001.OB0AM-QUIK-REL-LIT initialAttributes;
    set OB0AM001.OB0AM-QUICK-RELEASE initialAttributes;
  else
    set OB0AM001.OB0AM-QUIK-REL-LIT invisible, protect;
    set OB0AM001.OB0AM-QUICK-RELEASE invisible, protect;
  end

  OB0AM001.SY1SSTNM = " ";
  OB0AM001.SY2CLRAB = " ";
  OB0AM001.SM1AGYNM = " ";
  OB0AM001.KUMSTRNM = " ";
  OB0AM001.XGPABRV = " ";
  OB0AM001.XSGABRV = " ";
  OB0AM001.XPCABRV = " ";
  OB0AM001.XOBABRV = " ";
  OB0AM001.XSOABRV = " ";
  OB0AM001.XDVABRV = " ";
  OB0AM001.XOCABRV = " ";
  OB0AM001.YOBABRV = " ";

  set OB0AM001.SM1AGYID cursor;

end // end OB0AS05

// EDIT MAP FIELDS
Function OB0AS10()

    /* EDIT STYLE, COLOR, DIMENSION CODE*/

  OB0AS20();


    /* EDIT PARTIAL LOAD FLAG*/

  OB0AS25();


    /* EDIT ORDER STATUS*/

  OB0AS30();


    /* EDIT PROP ONLY FLAG*/

  OB0AS35();


    /* EDIT ORDER CLASS*/

  OB0AS40();


    /* EDIT FUTURES ONLY FLAG*/

  OB0AS45();


    /* EDIT DIVISION CODE*/

  OB0AS50();


    /* EDIT CANCEL EXCLUSION FLAG*/

  OB0AS53();


    /* EDIT SALES OFFICE CODE*/

  OB0AS55();


    /* EDIT DONT SHIP AFTER DATE*/

  OB0AS60();


    /* EDIT SALES PROGRAM ID*/

  OB0AS65();


    /* EDIT ORDER WRITTEN DATE*/

  OB0AS70();


    /* EDIT BASE ORDER TYPE*/

  OB0AS75();


    /* EDIT NEED DATE*/

  OB0AS80();


    /* EDIT GPC*/

  OB0AS85();


    /* EDIT CSR HOLD*/

  OB0AS91();


    /* EDIT PUSH AVAIL*/

  OB0AS81();


    /* EDIT RSRV ONLY*/

  OB0AS93();


    /* EDIT CUST DEFAULTS*/

  OB0AS82();


    /* EDIT SUPER EDIT*/

  OB0AS83();


    /* EDIT LIST STORES*/

  OB0AS84();


    /* EDIT SPECIAL CUSTOMER GROUP*/

  OB0AS86();

    /* EDIT PRODUCT CATEGORY*/

  OB0AS87();


    /* EDIT DUPLICATE ORDER*/

  OB0AS88();


    /* EDIT QUICK RELEASE*/

  OB0AS94();


    /* EDIT CUSTOMER, STORE, DEPARTMENT*/

  OB0AS90();


    /* EDIT SALES AGENCY AND REP ID*/

  OB0AS95();


    /* EDIT REQUIRED FIELDS*/

  if (OBWREC.OBWERRFL == "N") /* no errors*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12)
      OB0AS15();
    end
  end


end // end OB0AS10

// evaluate orders for display
Function OB0AS11()



   /* select all orders for criteria entered on OB0A screen.*/
   /* write a temporary storage record (temp storage 1) for*/
   /* each map full of orders*/

  XSOBT1P(); /* purge temp storage 1 to start clean*/


   /* build record to pass to select orders*/

  OB0ASB1();


   /* get all the orders for the criteria entered*/

  OB0ASS1();



  OB0AW01.OB0AWEOF = "N"; /* set end of file flag to no*/
  OB0AW01.OB0AW-ORDS-QUAL-FL = "N"; /* at least 1 order qualifed flag*/

  OB0ASN1(); /* select next for temp storage 1*/



   /* ***** MOVE 1 TO OBWREC.OBWTSF1P;       /* set page number*/

  if (OB0AW01.OB0AWEOF == "Y") /* no orders*/
    converseLib.validationFailed(002); /* no orders for selection criteria*/
    OBWREC.OBWERRFL = "Y"; /* err flag*/
  else
    while (OB0AW01.OB0AWEOF == "N") /* while there are orders selected*/
      OB0ASL1(); /* load and write temp storage 1*/
    end
    OBWREC.OBWTSF1P = 1; /* set page number*/
    OBWREC.OBWTSF1S = 1; /* position cursor on first order*/
     /* total number of pages was set in write statement group*/
  end


   /* close scan*/

  OB0ASC1();

   /* *************************************************************/
end // end OB0AS11

// evaluate order types
Function OB0AS12()


      /* ****************************************************/
      /* * xottbl lookup, check for future only or prop only*/
      /* ****************************************************/


  if (OB1REC.XOTCD in XOTTBL.XOTCD /* find order type code in table*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* order type active*/
    /* next sentence                        ; continue*/
  else
    return; /* order type invalid, will be flagged in proper appl*/
     /* include order in selection*/
  end


  if (OB0AM001.XOTFUTRF == "Y") /* future orders only requested*/
    if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* order is future*/
       /* include order in selection*/
    else
      OB0AW01.OB0AWERR = "Y"; /* order not included in selection*/
    end
  end

  if (OB0AM001.XOTPROPF == "Y") /* prop only requested*/
    if (XOTTBL.XOTPROPF[sysVar.arrayIndex] == "Y") /* order is prop*/
       /* include order in selection*/
    else
      OB0AW01.OB0AWERR = "Y"; /* order not included in selection*/
    end
  end

   /* *************************************************************/
end // end OB0AS12

// evaluate order
Function OB0AS14()

   /* evaluate order type and style selections*/

  OB0AW01.OB0AWERR = "N"; /* init order err flag*/

  if (OB1REC.YOBCD == "DL"
   || OB1REC.YOBCD == "LD")
    OB0AW01.OB0AWERR = "Y"; /* set error flag*/
    return;
  end

  if (OB1REC.YOBCD == "XL"
   && OB0AM001.OB0AMXLF == "Y")
    OB0AW01.OB0AWERR = "Y"; /* set error flag*/
    return;
  end

  if (OB0AM001.XOTFUTRF == "Y" /* future orders only requested*/
   && OB0AM001.XOTPROPF == "Y") /* prop only requested*/
    /* next sentence    ; no sense in checking - all order types*/
  else
    if (OB0AM001.XOTFUTRF == " " /* futures not specified*/
     && OB0AM001.XOTPROPF == " ") /* prop not specified*/
      /* next sentence    ; no sense in checking - all order types*/
    else
      OB0AS12(); /* check order type table*/
    end
  end



  if (OB0AW01.OB0AWERR == "N") /* order passed order type evaluations*/

      /* if product criteria was specified on map*/
      /* check if product exists on the order*/

    if (OB0AM001.SY1STNBR != " " /* style entry*/
     || OB0AM001.SY2CLRID != " " /* color entry*/
     || OB0AM001.XDMCD != " ")   /* dimension entry*/
      OB0ASB3(); /* build  style record*/
      OB0ASS3(); /* see if style exists on order*/
    end

  end



  if (OB0AW01.OB0AWERR == "N") /* order passed OT and prod evaluations*/

      /* if customer product criteria was specified on map*/
      /* check if product exists on the order*/

    if (OB0AM001.CU-CUST-PROD-ID != " ") /* customer style entry*/
      OB0ASB4(); /* build  style record*/
      OB0ASS4(); /* see if style exists on order*/
    end

  end

   /* *************************************************************/
end // end OB0AS14

// EDIT REQUIRED FIELDS
Function OB0AS15()

  if (OB0AM001.SM1AGYID == " " /* sales agency not entered*/
   && OB0AM001.SM4REPID == 0   /* and sales rep not entered*/
   && OB0AM001.KUCCOID == 0    /* company number not entered*/
   && OB0AM001.OP1CUPO == " "  /* customer po not entered*/
   && OB0AM001.OP1CUOID == 0   /* customer order number not entered*/
   && OB0AM001.XPCCD == " "    /* product category not entered*/
   && OB0AM001.XSGCD == " "    /* special cust group not entered*/
   && OB0AM001.OB1XREFN == " " /* repnet file number not entered*/
   && OB0AM001.OB0AM-DUPL-ORD-ID == 0) /* dupl ord id not entered*/
    converseLib.validationFailed(027); /* enter agency and rep, customer, or po*/
                                   /* number*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.SM1AGYID cursor, bold;
    set OB0AM001.SM4REPID bold;
    set OB0AM001.KUCCOID bold;
    set OB0AM001.KUMSTRID bold;
    set OB0AM001.XNXCD bold;
    set OB0AM001.OP1CUPO bold;
    set OB0AM001.OP1CUOID bold;
    set OB0AM001.XPCCD bold;
    set OB0AM001.XSGCD bold;
    set OB0AM001.OB1XREFN bold;
    set OB0AM001.OB0AM-DUPL-ORD-ID bold;
    return;
  end

   /* check for combinations*/

  if (OB0AM001.SM1AGYID != " ") /* sales agency entered*/
    if (OB0AM001.KUCCOID != 0   /* company number entered*/
     || OB0AM001.OP1CUPO != " " /* customer po entered*/
     || OB0AM001.OP1CUOID != 0  /* customer order number entered*/
     || OB0AM001.OB1XREFN != " ") /* repnet file number entered*/
      converseLib.validationFailed(193); /* enter only one*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0AM001.SM1AGYID cursor, bold;
      if (OB0AM001.KUCCOID != "0")
        set OB0AM001.KUCCOID bold;
      end
      if (OB0AM001.OP1CUPO != " ")
        set OB0AM001.OP1CUPO bold;
      end
      if (OB0AM001.OP1CUOID != 0)
        set OB0AM001.OP1CUOID bold;
      end
      if (OB0AM001.OB1XREFN != " ")
        set OB0AM001.OB1XREFN bold;
      end
      return;
    end
  end

  if (OB0AM001.SM4REPID != 0) /* sales rep entered*/
    if (OB0AM001.KUCCOID != 0   /* company number entered*/
     || OB0AM001.OP1CUPO != " " /* customer po entered*/
     || OB0AM001.OP1CUOID != 0  /* customer order number entered*/
     || OB0AM001.OB1XREFN != " ") /* repnet file number entered*/
      converseLib.validationFailed(193); /* enter only one*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0AM001.SM4REPID cursor, bold;
      if (OB0AM001.KUCCOID != 0)
        set OB0AM001.KUCCOID bold;
      end
      if (OB0AM001.OP1CUPO != " ")
        set OB0AM001.OP1CUPO bold;
      end
      if (OB0AM001.OP1CUOID != 0)
        set OB0AM001.OP1CUOID bold;
      end
      if (OB0AM001.OB1XREFN != " ")
        set OB0AM001.OB1XREFN bold;
      end
      return;
    end
  end


  if (OB0AM001.KUCCOID != 0) /* company number entered*/
    if (OB0AM001.OP1CUPO != " " /* customer po entered*/
     || OB0AM001.OP1CUOID != 0  /* customer order number entered*/
     || OB0AM001.OB1XREFN != " ") /* repnet file number entered*/
      converseLib.validationFailed(193); /* enter only one*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0AM001.KUCCOID bold;
      if (OB0AM001.OP1CUPO != " ")
        set OB0AM001.OP1CUPO bold;
      end
      if (OB0AM001.OP1CUOID != 0)
        set OB0AM001.OP1CUOID bold;
      end
      if (OB0AM001.OB1XREFN != " ")
        set OB0AM001.OB1XREFN bold;
      end
      return;
    end
  end


  if (OB0AM001.OP1CUPO != " ") /* customer po entered*/
    if (OB0AM001.OP1CUOID != 0 /* customer order number entered*/
     || OB0AM001.OB1XREFN != " ") /* repnet file number entered*/
      converseLib.validationFailed(193); /* enter only one*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0AM001.OP1CUPO bold;
      if (OB0AM001.OP1CUOID != 0)
        set OB0AM001.OP1CUOID bold;
      end
      if (OB0AM001.OB1XREFN != " ")
        set OB0AM001.OB1XREFN bold;
      end
      return;
    end
  end


  if (OB0AM001.OP1CUOID != 0 /* customer order number entered*/
   && OB0AM001.OB1XREFN != " ") /* repnet file number entered*/
    converseLib.validationFailed(193); /* enter only one*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OP1CUOID bold;
    set OB0AM001.OB1XREFN bold;
    return;
  end

end // end OB0AS15

// EDIT STYLE,COLOR,DIMENSION
Function OB0AS20()

  if (OB0AM001.XGPCD == " ") /* no gpc*/
    return;
  end

  if (OB0AM001.XGPCD != " " /* gpc entered*/
   && OB0AM001.SY1STNBR != " ") /* and style entered*/
    SY1REC.XGPCD = OB0AM001.XGPCD; /* format gpc key*/
    SY1REC.SY1STNBR = OB0AM001.SY1STNBR; /* format sytle key*/

    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
      OB0AM001.SY1SSTNM = SY1REC.SY1SSTNM; /* map style name*/
    else
      OB0AM001.SY1SSTNM = "UNKNOWN"; /* unknown style name*/
      OB0AM001.CAMSG = "PRODUCT IS UNKNOWN, BUT ORDERS WILL BE SEARCHED";
    end
  end

  if (OB0AM001.XGPCD != " "    /* gpc entered*/
   && OB0AM001.SY1STNBR != " " /* and style entered*/
   && OB0AM001.SY2CLRID != " ") /* and color entered*/
    SYCREC.XGPCD = OB0AM001.XGPCD; /* format gpc key*/
    SYCREC.SY1STNBR = OB0AM001.SY1STNBR; /* format sytle key*/
    SYCREC.SY2CLRID = OB0AM001.SY2CLRID; /* format color key*/
    if (OB0AM001.XDMCD != " ") /* dimension code entered*/
      SYCREC.XDMCD = OB0AM001.XDMCD; /* format dimension code key*/
    else
      SYCREC.XDMCD = "00"; /* format dimension code key*/
    end

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
      OB0AM001.SY2CLRAB = SYCREC.SY2CLRAB; /* style color abrv*/
    else
      OB0AM001.SY2CLRAB = "UNKNOWN"; /* unknown color abrev.*/
      OB0AM001.CAMSG = "PRODUCT IS UNKNOWN, BUT ORDERS WILL BE SEARCHED";
    end
  end


end // end OB0AS20

// EDIT PARTIAL LOAD FLAG
Function OB0AS25()

  if (OB0AM001.OB1PARLF == "Y"
   || OB0AM001.OB1PARLF == "N"
   || OB0AM001.OB1PARLF == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB1PARLF cursor, bold;
  end


end // end OB0AS25

// EDIT ORDER STATUS
Function OB0AS30()

  if (OB0AM001.YOBCD == " ") /* no order status code entered*/
    return;
  end

  if (OB0AM001.YOBCD in YOBTBL.YOBCD /* if order status is on tbl*/
   && YOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.YOBABRV = YOBTBL.YOBABRV[sysVar.arrayIndex]; /* format yob abrev.*/
  else
    converseLib.validationFailed(019); /* order batch status is invalid*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.YOBCD cursor, bold;
  end


end // end OB0AS30

// EDIT PROP ONLY FLAG
Function OB0AS35()

  if (OB0AM001.XOTPROPF == "Y"
   || OB0AM001.XOTPROPF == "N"
   || OB0AM001.XOTPROPF == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XOTPROPF cursor, bold;
  end


end // end OB0AS35

// EDIT ORDER CLASS CODE
Function OB0AS40()

  if (OB0AM001.XOCCD == " ") /* no order class code entered*/
    return;
  end

  if (OB0AM001.XOCCD in XOCTBL.XOCCD /* if order class is on tbl*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* format xoc abrev.*/
  else
    converseLib.validationFailed(020); /* order class is invalid or inactive*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XOCCD cursor, bold;
  end


end // end OB0AS40

// EDIT FUTURES ONLY FLAG
Function OB0AS45()

  if (OB0AM001.XOTFUTRF == "Y"
   || OB0AM001.XOTFUTRF == "N"
   || OB0AM001.XOTFUTRF == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XOTFUTRF cursor, bold;
  end


end // end OB0AS45

// EDIT DIVISION CODE
Function OB0AS50()

  if (OB0AM001.XDVCD == " ") /* no division code entered*/
    return;
  end

  if (OB0AM001.XDVCD in XDVTBL.XDVCD /* if division code is on tbl*/
   && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
                                   /* format divison abrev*/
  else
    converseLib.validationFailed(011); /* division is invalid or inactive*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XDVCD cursor, bold;
  end


end // end OB0AS50

// EDIT CANCEL EXCLUSION FLAG
Function OB0AS53()

  if (OB0AM001.OB0AMXLF == "Y"
   || OB0AM001.OB0AMXLF == "N"
   || OB0AM001.OB0AMXLF == " ")
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AMXLF cursor, bold;
  end


end // end OB0AS53

// EDIT SALES OFFICE CODE
Function OB0AS55()

  if (OB0AM001.XSOCD == " ") /* no sales office code entered*/
    return;
  end

  if (OB0AM001.XSOCD in XSOTBL.XSOCD /* if sales office is on tbl*/
   && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
                                   /* format sales off abr*/
  else
    converseLib.validationFailed(012); /* sales office is invalid*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XSOCD cursor, bold;
  end


end // end OB0AS55

// EDIT DONT SHIP AFTER DATE
Function OB0AS60()

    /* EDIT ENDING DATE*/

  if (OB0AM001.OB0AMSD2 == 0 /* no ending date entered*/
   || OB0AM001.OB0AMSD2 == "MMDDYY")
    OBFREC.OBFDDTHI = 99999999; /* format obfrec ending date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMSD2; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFDDTHI = OBWREC.OBWDT8; /* format obfrec ending date*/
    else
      set OB0AM001.OB0AMSD2 cursor, bold;
      OBFREC.OBFDDTHI = 99999999; /* format obfrec ending date*/
    end
  end


    /* EDIT BEGINNING DATE*/

  if (OB0AM001.OB0AMSD1 == 0 /* no beginning date entered*/
   || OB0AM001.OB0AMSD1 == "MMDDYY")
    OBFREC.OBFDDTLO = 0; /* format obfrec beginning date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMSD1; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFDDTLO = OBWREC.OBWDT8; /* format obfrec beginning dt*/
    else
      set OB0AM001.OB0AMSD1 cursor, bold;
      OBFREC.OBFDDTLO = 0; /* format obfrec beginning date*/
    end
  end


    /* EDIT BEGINNING AND ENDING DATE RANGES*/

  if (OBFREC.OBFDDTHI >= OBFREC.OBFDDTLO) /* ending date > beginning date*/
     /* next sentence*/
  else
    converseLib.validationFailed(022); /* ending date must be > or = beginning date*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AMSD2 cursor, bold;
  end


end // end OB0AS60

// EDIT SALES PROGRAM ID
Function OB0AS65()

  if (OB0AM001.SP1ID == " ") /* no sales program id entered*/
    return;
  end

  SP1REC.SP1ID = OB0AM001.SP1ID; /* format sp1rec key*/

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
     /* next sentence*/
  else
    converseLib.validationFailed(009); /* sales program id is invalid*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.SP1ID cursor, bold;
  end


end // end OB0AS65

// EDIT ORDER WRITTEN DATE
Function OB0AS70()

    /* EDIT ENDING DATE*/

  if (OB0AM001.OB0AMWD2 == 0 /* no ending date entered*/
   || OB0AM001.OB0AMWD2 == "MMDDYY")
    OBFREC.OBFWDTHI = 99999999; /* format obfrec ending date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMWD2; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFWDTHI = OBWREC.OBWDT8; /* format obfrec ending date*/
    else
      set OB0AM001.OB0AMWD2 cursor, bold;
      OBFREC.OBFWDTHI = 99999999; /* format obfrec ending date*/
    end
  end


    /* EDIT BEGINNING DATE*/

  if (OB0AM001.OB0AMWD1 == 0 /* no beginning date entered*/
   || OB0AM001.OB0AMWD1 == "MMDDYY")
    OBFREC.OBFWDTLO = 0; /* format obfrec beginning date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMWD1; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFWDTLO = OBWREC.OBWDT8;
                                   /* format obfrec beginning date*/
    else
      set OB0AM001.OB0AMWD1 cursor, bold;
      OBFREC.OBFWDTLO = 0; /* format obfrec beginning date*/
    end
  end


    /* EDIT BEGINNING AND ENDING DATE RANGES*/

  if (OBFREC.OBFWDTHI >= OBFREC.OBFWDTLO) /* if end date > or = begin date*/
     /* next sentence*/
  else
    converseLib.validationFailed(022); /* ending date must be > or = beginning date*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AMWD2 cursor, bold;
  end


end // end OB0AS70

// get order items to display
Function OB0AS71()

   /* get the line item nbr & insert the hold message*/


  set OBKREC empty;
  set SQLCA empty;

  if (OB0AM001.SY1STNBR == " " && 
  OB0AM001.SY2CLRID == " " && 
  OB0AM001.XDMCD == " ")
    OB2REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S];
    OB2REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S];
    OB2REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S];

    OB0ASS6(); /* select set from dordb.vbitem01*/

    OB0AW01.OB0AWEOF = "N"; /* set end of file flag to no*/

    while (OB0AW01.OB0AWEOF == "N")
      OB0ASN2(); /* select next line item nbr*/
      OB7REC.OP2LNINB = OB2REC.OP2LNINB; /* format line item nbr*/
      OB0AS73(); /* APPLY PROD HOLD BY CSR*/
    end
    OB0ASC2(); /* close cursor*/

  else
    if (OB0AM001.SY1STNBR != " " && 
    OB0AM001.SY2CLRID != " ")
      OB2REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S];
      OB2REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S];
      OB2REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S];
      OB2REC.SY1STNBR = OB0AM001.SY1STNBR;
      OB2REC.SY2CLRID = OB0AM001.SY2CLRID;
      if (OB0AM001.XDMCD == " ")
        OB2REC.XDMCD = "00";
      else
        OB2REC.XDMCD = OB0AM001.XDMCD;
      end
      OB0AS72(); /* get the line item nbr form dordb.vbitem01*/
      OB7REC.OP2LNINB = OB2REC.OP2LNINB; /* format line item nbr*/
      OB0AS73(); /* insert the product hold msg*/
    end
  end
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

end // end OB0AS71

// get order items to display
Function OB0AS72()

   /* get all the items for the order*/

  set SQLCA empty;
  set OBKREC empty; /* task record*/

  OBKREC.OBKTASK = "E2"; /* select task*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "E2      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0FS72 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0AS72

// get order items to display
Function OB0AS73()

   /* insert the product hold message*/


  set OBKREC empty;
  set SQLCA empty;

  OB7REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S]; /* format part char*/
  OB7REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S]; /* format cust ord id*/
  OB7REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S]; /* format nike ord id*/

  OB7REC.OB6MSGNB = "405"; /* format message number*/
  OB7REC.OB7MSGTP = "H"; /* format message type*/
  OB7REC.OB7MSGRF = " "; /* format message released flag*/

  OB7REC.ZZZSDT = OBWREC.ZZZCHGDT; /* setup date*/
  OB7REC.ZZZSTM = OBWREC.ZZZCHGTM; /* setup time*/

  OB7REC.ZZZCHGDT = 0; /* init change date*/
  OB7REC.ZZZCHGTM = 0; /* init change time*/
  OB7REC.ZZZCHGCT = 0; /* init change count*/


  OBKREC.OBKTASK = "A";

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* already exists*/
      OBKREC.OBKTASK = "S";
      call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};
      OB7REC.OB7MSGRF = " "; /* unrelease the hold*/
      OBKREC.OBKTASK = "U";
      call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
       || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDB"; /* database name*/
        TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
        TA1REC.TA1LOCAT[1] = "U"; /* calling option*/
        TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
        TA1REC.TA1LOCAT[3] = "OB0AS73"; /* statement group*/
        if (SQLCA.VAGen_SQLCODE == -911)
          XSOBS04(); /* post and restart*/
        else
          XSOBEDC(); /* abort routine - no reset done*/
        end
      end
    else
      TA1REC.TA1DBASE = "DORDB"; /* database name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "A"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5210"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0AS73"; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04(); /* post and restart*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end


   /* Read the current order header.*/

  set OB1REC empty;
  set OBFREC empty;
  set SQLCA empty;


  OB1REC.OP1CUOID = OBAREC.OBACUOID[OBWTSF1S];
  OB1REC.OP1NORID = OBAREC.OBANORID[OBWTSF1S];
  OB1REC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S];

  OBFREC.OBFTASK = "S ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0AS73 "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* update order header*/

  OB1REC.YOBCD = "CK";
  OB1REC.OB1HLDFL = "Y"; /* set hold flag*/

  OB1REC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OB1REC.ZZZCHGTM = OBWREC.ZZZCHGTM;

  set OBFREC empty;
  set SQLCA empty;

  OBFREC.OBFTASK = "U ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      OBWREC.CAMSG = "THE ORDER HAS BEEN MODIFIED BY ANOTHER SERVICE REP";
      XSOBP00();
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/omod*/
      TA1REC.TA1LOCAT[3] = "OB0AS73 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end




end // end OB0AS73

// EDIT BASE ORDER TYPE
Function OB0AS75()

  if (OB0AM001.XOBCD == " ") /* no base order type code entered*/
    return;
  end

  if (OB0AM001.XOBCD in XOBTBL.XOBCD /* if base order type is on tbl*/
   && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex]; /* format bse ord typ abr*/
  else
    converseLib.validationFailed(014); /* order type is invalid or inactive*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XOBCD cursor, bold;
  end


end // end OB0AS75

// EDIT NEED DATE
Function OB0AS80()

    /* EDIT ENDING DATE*/

  if (OB0AM001.OB0AMND2 == 0 /* no ending date entered*/
   || OB0AM001.OB0AMND2 == "MMDDYY")
    OBFREC.OBFNDTHI = 99999999; /* format obfrec ending date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMND2; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFNDTHI = OBWREC.OBWDT8; /* format obfrec ending date*/
    else
      set OB0AM001.OB0AMND2 cursor, bold;
      OBFREC.OBFNDTHI = 99999999; /* format obfrec ending date*/
    end
  end


    /* EDIT BEGINNING DATE*/

  if (OB0AM001.OB0AMND1 == 0 /* no beginning date entered*/
   || OB0AM001.OB0AMND1 == "MMDDYY")
    OBFREC.OBFNDTLO = 0; /* format obfrec beginning date*/
  else
    OBWREC.OBWDT6 = OB0AM001.OB0AMND1; /* format obwrec MMDDYY*/
    OB0ASVD(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0) /* good return*/
      OBFREC.OBFNDTLO = OBWREC.OBWDT8;
                                   /* format obfrec beginning date*/
    else
      set OB0AM001.OB0AMND1 cursor, bold;
      OBFREC.OBFNDTLO = 0; /* format obfrec beginning date*/
    end
  end


    /* EDIT BEGINNING AND ENDING DATE RANGES*/

  if (OBFREC.OBFNDTHI >= OBFREC.OBFNDTLO) /* if end date > or = begin date*/
     /* next sentence*/
  else
    converseLib.validationFailed(022); /* ending date must be > or = to beginning date*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AMND2 cursor, bold;
  end


end // end OB0AS80

// EDIT PUSH AVAIL FLAG
Function OB0AS81()

  if (OB0AM001.OB0AM-PUSH-AVAIL == "Y"
   || OB0AM001.OB0AM-PUSH-AVAIL == "N"
   || OB0AM001.OB0AM-PUSH-AVAIL == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-PUSH-AVAIL cursor, bold;
  end


end // end OB0AS81

// EDIT CUST DEFAULTS FLAG
Function OB0AS82()

  if (OB0AM001.OB0AM-CUST-DEFAULTS == "Y"
   || OB0AM001.OB0AM-CUST-DEFAULTS == "N"
   || OB0AM001.OB0AM-CUST-DEFAULTS == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-CUST-DEFAULTS cursor, bold;
  end


end // end OB0AS82

// EDIT SUPER EDIT FLAG
Function OB0AS83()

  if (OB0AM001.OB0AM-SUPER-EDIT == "Y"
   || OB0AM001.OB0AM-SUPER-EDIT == "N"
   || OB0AM001.OB0AM-SUPER-EDIT == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-SUPER-EDIT cursor, bold;
  end


end // end OB0AS83

// EDIT STORE LIST FLAG
Function OB0AS84()

  if (OB0AM001.OB0AM-STORE-LIST == "Y"
   || OB0AM001.OB0AM-STORE-LIST == "N"
   || OB0AM001.OB0AM-STORE-LIST == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-STORE-LIST cursor, bold;
  end


end // end OB0AS84

// EDIT GENERAL PRODUCT CODE
Function OB0AS85()

  if (OB0AM001.XGPCD == " ") /* no gpc entered*/
    return;
  end

  if (OB0AM001.XGPCD in XGPTBL.XGPCD /* if gpc is on tbl*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* format gpc abrev*/
  else
    converseLib.validationFailed(010); /* GPC code is invalid or inactive*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XGPCD cursor, bold;
  end


end // end OB0AS85

// EDIT SPECIAL CUSTOMER GROUP
Function OB0AS86()

  if (OB0AM001.XSGCD == " ") /* no gpc entered*/
    return;
  end

  if (OB0AM001.XSGCD in XSGTBL.XSGCD /* if gpc is on tbl*/
   && XSGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XSGABRV = XSGTBL.XSGABRV[sysVar.arrayIndex]; /* format gpc abrev*/
  else
    converseLib.validationFailed(140);
                                   /* SPCL CUST CODE IS INVALID OR INACTIVE*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XSGCD cursor, bold;
  end


end // end OB0AS86

// EDIT PRODUCT CATEGORY
Function OB0AS87()

  if (OB0AM001.XPCCD == " ") /* no gpc entered*/
    return;
  end

  if (OB0AM001.XPCCD in XPCTBL.XPCCD /* if gpc is on tbl*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and is a active status*/
    OB0AM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* format gpc abrev*/
  else
    converseLib.validationFailed(141); /* PRODUCT CAT CODE IS INVALID OR INACTIVE*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.XPCCD cursor, bold;
  end


end // end OB0AS87

// validate dupl order num
Function OB0AS88()


      /* *********************************************************/
      /* * this statement group validates the order to duplicate**/
      /* *********************************************************/


  if (OB0AM001.OB0AM-DUPL-ORD-ID == 0) /* check for null order number*/
    return;
  end

  set SQLCA empty;
  set OP1REC empty;

      /* issue select set to get order (if possible)*/

  OB0AW01.OB0AWOID = OB0AM001.OB0AM-DUPL-ORD-ID; /* get part char*/
  OP1REC.OP1PARTN = OB0AW01.OB0AWPCH; /* load key - partition*/
  OP1REC.OP1CUOID = OB0AW01.OB0AWOID; /* load key - order number*/

  call "IO0430" ("ST", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique try*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(155); /* order number was not found*/
      OBWREC.OBWERRFL = "Y"; /* SET ERROR FLAG*/
      set OB0AM001.OB0AM-DUPL-ORD-ID cursor, modified, bold;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* check for more than 1 suborder*/
        OB0AS89(); /* select first suborder*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
        TA1REC.TA1TBLKE = OB0AM001.OB0AM-DUPL-ORD-ID; /* key value*/
        TA1REC.TA1LOCAT[3] = "OB0AS88 "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
        if (SQLCA.VAGen_SQLCODE == -911)
          OB0AM001.CAMSG = "DATABASE BUSY - TRY AGAIN";
          OBWREC.OBWERRFL = "Y"; /* set error flag*/
        else
          XSOBEDC(); /* db2 retn routine no rollback*/
        end
      end
    end
  end


  if (OB0AM001.SM1AGYID == " " /* sales agency not entered*/
   && OB0AM001.SM4REPID == 0   /* and sales agency not entered*/
   && OB0AM001.KUCCOID == 0    /* company number not entered*/
   && OB0AM001.OP1CUPO == " "  /* customer po not entered*/
   && OB0AM001.OP1CUOID == 0   /* customer order number not entered*/
   && OB0AM001.XPCCD == " "    /* product category not entered*/
   && OB0AM001.XSGCD == " "    /* special cust group not entered*/
   && OB0AM001.OB1XREFN == " " /* repnet file number not entered*/
  )                            /* next sentence*/
  else
    converseLib.validationFailed(183); /* may not duplicate with other*/
                                   /* selections*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-DUPL-ORD-ID bold;
  end





end // end OB0AS88

// select first op1rec
Function OB0AS89()


      /* *********************************************************/
      /* * this statement group select the first suborder for   **/
      /* * the order to be duplicated                           **/
      /* *********************************************************/


      /* issue select set to get first ord rec for customer*/

  OB0AW01.OB0AWOID = OB0AM001.OB0AM-DUPL-ORD-ID; /**/
  OP1REC.OP1PARTN = OB0AW01.OB0AWPCH; /**/
  OP1REC.OP1CUOID = OB0AW01.OB0AWOID; /**/
  OP1REC.OP1NORID = 0; /* load key - sub order*/

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call mod for sel set*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OB0AW01.OB0AWOID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OB0AS89 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    if (SQLCA.VAGen_SQLCODE == -911)
      OB0AM001.CAMSG = "DATABASE BUSY - TRY AGAIN";
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
    else
      XSOBEDC(); /* db2 retn routine no rollback*/
    end
  end


      /* get first order rec for validation*/

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code (code of 100 is invalid*/
      /* since previous select unique said there were multiples)*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OB0AW01.OB0AWOID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OB0AS89 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    if (SQLCA.VAGen_SQLCODE == -911)
      OB0AM001.CAMSG = "DATABASE BUSY - TRY AGAIN";
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
    else
      XSOBEDC(); /* db2 retn routine no rollback*/
    end
  end

      /* close cursor*/

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code (code of 100 is invalid*/
      /* since previous select unique said there were multiples)*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OB0AW01.OB0AWOID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OB0AS89 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    if (SQLCA.VAGen_SQLCODE == -911)
      OB0AM001.CAMSG = "DATABASE BUSY - TRY AGAIN";
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
    else
      XSOBEDC(); /* db2 retn routine no rollback*/
    end
  end



   /* *************************************************************/
end // end OB0AS89

// EDIT CUSTOMER NUMBER
Function OB0AS90()

  if (OB0AM001.KUCCOID == 0  /* company not entered*/
   && OB0AM001.KUMSTRID == 0 /* and store not entered*/
   && OB0AM001.XNXCD == 0)   /* and dept not entered*/
    return;
  end

  if (OB0AM001.KUCCOID != 0) /* company entered*/
    KUNREC.XGPCD = "**"; /* format gpc key*/
    KUNREC.KUCCOID = OB0AM001.KUCCOID; /* format company key*/
    if (OB0AM001.KUMSTRID == 0) /* store not entered*/
      KUNREC.KUMSTRID = -1; /* format default store key*/
    else
      KUNREC.KUMSTRID = OB0AM001.KUMSTRID; /* format store key*/
    end
    if (OB0AM001.XNXCD == 0) /* dept not entered*/
      KUNREC.XNXCD = -1; /* format default dept key*/
    else
      KUNREC.XNXCD = OB0AM001.XNXCD; /* format dept key*/
    end
  else
    if (OB0AM001.KUMSTRID != 0 /* and store entered*/
     || OB0AM001.XNXCD != 0)   /* or dept entered*/
      converseLib.validationFailed(024); /* customer number is required*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0AM001.KUCCOID cursor, bold;
      set OB0AM001.KUMSTRID bold;
      set OB0AM001.XNXCD bold;
      return;
    end
  end


     /* SELECT CURSOR SET*/

   /* CALL IO0280 'SS',SQLCA,KUNREC (NOMAPS,NONCSP;*/


   /* IF SQLCA.SQLCODE EQ 0           ; good return*/
    /* OB0AS91                       ; fetch first record*/
   /* ELSE ;*/
    /* MOVE 'SS' TO TA1REC.TA1LOCAT(1)      ; transaction*/
    /* MOVE 'IO0280' TO TA1REC.TA1LOCAT(2)  ; i/o mod*/
    /* MOVE 'OB0AS90' TO TA1REC.TA1LOCAT(3) ; stmt group*/
    /* MOVE 'DCUST' TO TA1REC.TA1DBASE      ; database name*/
    /* MOVE 'VCUST001' TO TA1REC.TA1TBLVU   ; database view name*/
   /* MOVE 'OB0AM001' TO TA1REC.TA1MAP     ; map name*/
   /* IF SQLCA.SQLCODE EQ -911;*/
     /* MOVE 'DATABASE BUSY - TRY AGAIN' TO OB0AM001.CAMSG;*/
     /* MOVE 'Y' TO OBWREC.OBWERRFL ; set error flag*/
   /* ELSE ;*/
     /* XSOBEDC                   ; db2 retn routine no rollback*/
   /* END ;*/
   /* eND ;*/


     /* CLOSE CURSOR*/

   /* CALL IO0280 'CS',SQLCA,KUNREC (NOMAPS,NONCSP;*/


   /* IF SQLCA.SQLCODE EQ 0           ; good return*/
    /* ;next sentence*/
   /* ELSE ;*/
    /* MOVE 'CS' TO TA1REC.TA1LOCAT(1)      ; transaction*/
    /* MOVE 'IO0280' TO TA1REC.TA1LOCAT(2)  ; i/o mod*/
    /* MOVE 'OB0AS90' TO TA1REC.TA1LOCAT(3) ; stmt group*/
    /* MOVE 'DCUST' TO TA1REC.TA1DBASE      ; database name*/
    /* MOVE 'VCUST001' TO TA1REC.TA1TBLVU   ; database view name*/
    /* MOVE 'OB0AM001' TO TA1REC.TA1MAP     ; map name*/
    /* IF SQLCA.SQLCODE EQ -911;*/
      /* MOVE 'DATABASE BUSY - TRY AGAIN' TO OB0AM001.CAMSG;*/
      /* MOVE 'Y' TO OBWREC.OBWERRFL ; set error flag*/
    /* ELSE ;*/
      /* XSOBEDC                  ; db2 retn routine no rollback*/
    /* END ;*/
   /* END ;*/


end // end OB0AS90

// EDIT CSR HOLD FLAG
Function OB0AS91()

  if (OB0AM001.OB0AM-CSR-HOLD == "Y"
   || OB0AM001.OB0AM-CSR-HOLD == "N"
   || OB0AM001.OB0AM-CSR-HOLD == " ")
                                   /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-CSR-HOLD cursor, bold;
  end

  if (OB0AM001.OB0AM-PROD-HOLDBY-CSR == "Y"
   || OB0AM001.OB0AM-PROD-HOLDBY-CSR == "N"
   || OB0AM001.OB0AM-PROD-HOLDBY-CSR == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-PROD-HOLDBY-CSR cursor, bold;
  end


end // end OB0AS91

Function OB0AS93()

  if (OB0AM001.OB0AM-RSRV-ONLY == "Y"
   || OB0AM001.OB0AM-RSRV-ONLY == "N"
   || OB0AM001.OB0AM-RSRV-ONLY == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-RSRV-ONLY cursor, bold;
  end


end // end OB0AS93

// EDIT QUICK RELEASE FLAG
Function OB0AS94()

  if (OB0AM001.OB0AM-QUICK-RELEASE == "Y"
   || OB0AM001.OB0AM-QUICK-RELEASE == "N"
   || OB0AM001.OB0AM-QUICK-RELEASE == " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(018); /* the correct response is 'y' or 'n'*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0AM001.OB0AM-QUICK-RELEASE cursor, bold;
  end


end // end OB0AS94

// EDIT SALES AGENCY AND REP ID
Function OB0AS95()

  if (OB0AM001.SM1AGYID == " " /* if no sales agency*/
   && OB0AM001.SM4REPID == 0)  /* and no sales rep*/
    return;
  end

  if (OB0AM001.SM1AGYID == 0) /* if sales agency is missing*/
    OB0AM001.SM1AGYNM = "UNKNOWN";
  else
    OB0AS97(); /* get sales agency's name*/
  end


end // end OB0AS95

// SELECT SALES AGENCY NAME
Function OB0AS97()

  SM1REC.SM1AGYID = OB0AM001.SM1AGYID; /* format sales agency key*/


  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OB0AM001.SM1AGYNM = SM1REC.SM1AGYNM; /* format sales agency name*/
  else
    OB0AM001.SM1AGYNM = "UNKNOWN";
                                   /* format unknown for agency name*/
  end


end // end OB0AS97

// build record to pass to db2
Function OB0ASB1()


   /* build record to pass to select order*/


  set OB1REC empty;

   /* beginning/ending fields for*/
   /* call, drop and need dates*/
   /* are all moved to objrec when editted*/

   /* dates were given a 00000000 to 99999999 range if nothing*/
   /* entered in the fields*/

   /* wild card all fields that do not have data in them*/

    /* special customer group*/
  if (OB0AM001.XSGCD == " ")
    OB1REC.XSGCD = "*";
  else
    OB1REC.XSGCD = OB0AM001.XSGCD;
  end


    /* product category*/
  if (OB0AM001.XPCCD == " ")
    OB1REC.XPCCD = "*";
  else
    OB1REC.XPCCD = OB0AM001.XPCCD;
  end


           /* customer order number*/
  if (OB0AM001.OP1CUOID != 0)
    OB1REC.OP1CUOID = OB0AM001.OP1CUOID; /* customer order id*/
    OB0AW01.OB0AWOID = OB0AM001.OP1CUOID; /* format part char*/
    OB1REC.OP1PARTN = OB0AW01.OB0AWPCH; /* part char*/
  end


           /* customer number*/
  if (OB0AM001.KUCCOID == 0)
    OB1REC.KUCCOID = -1;
  else
    OB1REC.KUCCOID = OB0AM001.KUCCOID;
  end


           /* store number*/
  if (OB0AM001.KUMSTRID == 0)
    OB1REC.KUMSTRID = -1;
  else
    OB1REC.KUMSTRID = OB0AM001.KUMSTRID;
  end



           /* dept number*/
  if (OB0AM001.XNXCD == 0)
    OB1REC.XNXCD = -1;
  else
    OB1REC.XNXCD = OB0AM001.XNXCD;
  end



          /* rep number*/
  if (OB0AM001.SM4REPID == 0)
    OB1REC.SM4REPID = -1;
  else
    OB1REC.SM4REPID = OB0AM001.SM4REPID;
  end


         /* repnet number*/
  if (OB0AM001.OB1XREFN == " ")
    OB1REC.OB1XREFN = "*";
  else
    OB1REC.OB1XREFN = OB0AM001.OB1XREFN;
  end


         /* agency id*/
  if (OB0AM001.SM1AGYID == " ")
    OB1REC.SM1AGYID = "*";
  else
    OB1REC.SM1AGYID = OB0AM001.SM1AGYID;
  end


         /* purchase order*/
  if (OB0AM001.OP1CUPO == " ")
    OB1REC.OP1CUPO = "*";
  else
    OB1REC.OP1CUPO = OB0AM001.OP1CUPO;
  end


         /* purchase order*/
  if (OB0AM001.OP1CUPO == " ")
    OB1REC.OP1CUPO = "*";
  else
    OB1REC.OP1CUPO = OB0AM001.OP1CUPO;
  end



         /* xgpcd*/
  if (OB0AM001.XGPCD == " ")
    OB1REC.XGPCD = "*";
  else
    OB1REC.XGPCD = OB0AM001.XGPCD;
  end


        /* base order type*/
  if (OB0AM001.XOBCD == " ")
    OB1REC.XOBCD = "*";
  else
    OB1REC.XOBCD = OB0AM001.XOBCD;
  end


        /* partial load flag*/
  if (OB0AM001.OB1PARLF == " ")
    OB1REC.OB1PARLF = "*";
  else
    OB1REC.OB1PARLF = OB0AM001.OB1PARLF;
  end


         /* sales office*/
  if (OB0AM001.XSOCD == " ")
    OB1REC.XSOCD = "*";
  else
    OB1REC.XSOCD = OB0AM001.XSOCD;
  end


            /* division*/
  if (OB0AM001.XDVCD == " ")
    OB1REC.XDVCD = "*";
  else
    OB1REC.XDVCD = OB0AM001.XDVCD;
  end


            /* order class*/
  if (OB0AM001.XOCCD == " ")
    OB1REC.XOCCD = "*";
  else
    OB1REC.XOCCD = OB0AM001.XOCCD;
  end



            /* sales program*/
  if (OB0AM001.SP1ID == " ")
    OB1REC.SP1ID = "*";
  else
    OB1REC.SP1ID = OB0AM001.SP1ID;
  end



            /* order batch status*/
  if (OB0AM001.YOBCD == " ")
    OB1REC.YOBCD = "*";
  else
    OB1REC.YOBCD = OB0AM001.YOBCD;
  end



   /* BL#799 09/02/1999 CHANGE BEGIN*/
            /* received date*/
  OB1REC.OP1ORCDT = -1;
   /* BL#799 09/02/1999 CHANGE END*/



   /* *******************************/
end // end OB0ASB1

// build obf1 - orders
Function OB0ASB2()



   /* load temp storage 1 - obf1*/

  OBAREC.OBAMSEL[OBWTSF1S] = " ";

  OBAREC.OBACUOID[OBWTSF1S] = OB1REC.OP1CUOID; /* order number*/
  OBAREC.OBAPER1[OBWTSF1S] = "."; /* filler*/
  OBAREC.OBANORID[OBWTSF1S] = OB1REC.OP1NORID; /* nike ord id*/

  OBWREC.OBWFMT = OBAREC.OBAORDER[OBWTSF1S]; /* move to w-s*/
  XSOBS06(); /* suppress zeros*/
  OBAREC.OBAORDER[OBWTSF1S] = OBWREC.OBWFMT; /* move order number*/

  OBAREC.OP1PARTN[OBWTSF1S] = OB1REC.OP1PARTN; /* part char*/
  OBAREC.OB1PARLF[OBWTSF1S] = OB1REC.OB1PARLF; /* part ld fl*/
  OBAREC.SP1ID[OBWTSF1S] = OB1REC.SP1ID; /* sales program id*/
  OBAREC.XOBCD[OBWTSF1S] = OB1REC.XOBCD; /* base ot*/
  OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD; /* order batch status*/
  OBAREC.OB1ERRFL[OBWTSF1S] = OB1REC.OB1ERRFL; /* err flag*/
  OBAREC.OBAFILL[OBWTSF1S] = "/"; /* filler*/
  OBAREC.OB1HLDFL[OBWTSF1S] = OB1REC.OB1HLDFL; /* hold flag*/

  OBAREC.OBACOID[OBWTSF1S] = OB1REC.KUCCOID; /* customer*/
  OBAREC.OBAPER2[OBWTSF1S] = "."; /* filler*/
  OBAREC.OBASTRID[OBWTSF1S] = OB1REC.KUMSTRID; /* store*/
  OBAREC.OBAPER3[OBWTSF1S] = "."; /* filler*/
  OBAREC.OBAXNXCD[OBWTSF1S] = OB1REC.XNXCD; /* dept*/

  OBWREC.OBWFMT = OBAREC.OBACUST[OBWTSF1S]; /* move to w-s to format*/
  XSOBS06(); /* suppress zeros*/
  OBAREC.OBACUST[OBWTSF1S] = OBWREC.OBWFMT; /* move cust number*/

  OBWREC.OBWDT8 = OB1REC.OP1CUNDT; /* need date from header*/
  XSOBDCM(); /* convert need date to mmddyy format*/
  OBAREC.OBACUNDT[OBWTSF1S] = OBWREC.OBWDT6; /* need date*/

  OB0ASS2(); /* read db2 for store short name*/

   /* *************************************************************/
end // end OB0ASB2

// see if products exist on order
Function OB0ASB3()


      /* see if products exist on the order*/

  set OB2REC empty;

  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB2REC.XGPCD = OB1REC.XGPCD; /* gpc*/

  if (OB0AM001.SY1STNBR == " ") /* style entry*/
    OB2REC.SY1STNBR = "*"; /* style specified*/
  else
    OB2REC.SY1STNBR = OB0AM001.SY1STNBR; /* style specified*/
  end

  if (OB0AM001.SY2CLRID == " ") /* color entry*/
    OB2REC.SY2CLRID = "*"; /* color specified*/
  else
    OB2REC.SY2CLRID = OB0AM001.SY2CLRID; /* color specified*/
  end

  if (OB0AM001.XDMCD == " ") /* dimension entry*/
    OB2REC.XDMCD = "*"; /* dimension specified*/
  else
    OB2REC.XDMCD = OB0AM001.XDMCD; /* dimension specified*/
  end


end // end OB0ASB3

// build key for customer product
Function OB0ASB4()


      /* see if products exist on the order*/

  set OB2REC empty;

  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB2REC.XGPCD = OB1REC.XGPCD; /* gpc*/

  OB2REC.CU-CUST-PROD-ID = OB0AM001.CU-CUST-PROD-ID;



end // end OB0ASB4

// format obwrec for obob usage
Function OB0ASB5()


    /* FORMAT OBWREC FIELDS FOR OB0B USAGE ONLY*/
    /* (These fields will hold the original selection criteria*/
     /* from OB0A to be used in OB0B map headings. The unique*/
     /* criteria is needed when OB0B is used over and over.)*/

  OBWREC.SM1AGYID = OB0AM001.SM1AGYID; /* format sales agency*/

  OBWREC.SM4REPID = OB0AM001.SM4REPID; /* format rep id*/

  OBWREC.KUMSTRNM = OB0AM001.KUMSTRNM; /* format store name*/

  OBWREC.OBWSELCO = OB0AM001.KUCCOID; /* format company number*/

  OBWREC.OBWFILL4 = "."; /* period filler*/

  OBWREC.OBWSELST = OB0AM001.KUMSTRID; /* format store number*/

  OBWREC.OBWFILL5 = "."; /* period filler*/

  OBWREC.OBWSELXN = OB0AM001.XNXCD; /* format dept number*/

  OBWREC.OBWSELCN = OB0AM001.KUMSTRNM; /* customer store name*/

  OBWREC.OBWSELPO = OB0AM001.OP1CUPO; /* format po number*/

  OBWREC.XSGCD = OB0AM001.XSGCD; /* special cust group*/

  OBWREC.XPCCD = OB0AM001.XPCCD; /* product category*/

  OBWREC.OBWXREF = OB0AM001.OB1XREFN; /* repnet file number*/

end // end OB0ASB5

// close order set
Function OB0ASC1()


   /* close scan*/


  OBFREC.OBFTASK = OB0AW01.OB0AWCLO;
                                   /* move close task to pass record*/

  set SQLCA empty;


  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
    TA1REC.TA1TBLKE = " ";
    OBWREC.OBWCOID = OB1REC.KUCCOID; /* customer*/
    OBWREC.OP1CUPO = OB1REC.OP1CUPO; /* purchase order*/
    TA1REC.TA1LOCAT[4] = OB1REC.SM1AGYID; /* possible key*/
    TA1REC.TA1LOCAT[1] = "C1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0ASC1 "; /* statement group*/
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0ASC1

// close itm set
Function OB0ASC2()

   /* close scan*/

  set SQLCA empty;
  set SQLCA empty;

  OBKREC.OBKTASK = "C1"; /* close set*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "C1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0ASC2 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra space*/
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0ASC2

// SELECTION CONTROL
Function OB0ASEL()

  if (OB0AM001.KUCCOID != 0) /* company entered*/
    OB0AW01.OB0AWSEL = "S2"; /* format select set parameter*/
    OB0AW01.OB0AWNXT = "N2"; /* format select next parameter*/
    OB0AW01.OB0AWCLO = "C2"; /* format close set parameter*/
  else
    if (OB0AM001.SM1AGYID != " " /* sales agency entered*/
     && OB0AM001.SM4REPID != 0)  /* and sales rep entered*/
      OB0AW01.OB0AWSEL = "S3"; /* format select set parameter*/
      OB0AW01.OB0AWNXT = "N3"; /* format select next parameter*/
      OB0AW01.OB0AWCLO = "C3"; /* format close set parameter*/
    else
      if (OB0AM001.SM1AGYID != " ") /* sales agency entered*/
        OB0AW01.OB0AWSEL = "SF"; /* format select set parameter*/
        OB0AW01.OB0AWNXT = "NF"; /* format select next parameter*/
        OB0AW01.OB0AWCLO = "CF"; /* format close set parameter*/
      else
        if (OB0AM001.SM4REPID != 0) /* rep id entered*/
          OB0AW01.OB0AWSEL = "SH"; /* format select set parameter*/
          OB0AW01.OB0AWNXT = "NH"; /* format select next parameter*/
          OB0AW01.OB0AWCLO = "CH"; /* format close set parameter*/
        else
          if (OB0AM001.OP1CUPO != " ") /* customer po entered*/
            OB0AW01.OB0AWSEL = "S4"; /* format select set parameter*/
            OB0AW01.OB0AWNXT = "N4"; /* format select next parameter*/
            OB0AW01.OB0AWCLO = "C4"; /* format close set parameter*/
          else
            if (OB0AM001.XSGCD != " ") /* special customer group*/
              OB0AW01.OB0AWSEL = "SA"; /* format select set parameter*/
              OB0AW01.OB0AWNXT = "NA"; /* format select next parameter*/
              OB0AW01.OB0AWCLO = "CA"; /* format close set parameter*/
            else
              if (OB0AM001.XPCCD != " ") /* product category*/
                OB0AW01.OB0AWSEL = "S9"; /* format select set parm*/
                OB0AW01.OB0AWNXT = "N9"; /* format select next parm*/
                OB0AW01.OB0AWCLO = "C9"; /* format close set parm*/
              else
                if (OB0AM001.OP1CUOID != 0) /* customer order id entered*/
                  OB0AW01.OB0AWSEL = "S1"; /* format select set parm*/
                  OB0AW01.OB0AWNXT = "N1";
                                   /* format select next parameter*/
                  OB0AW01.OB0AWCLO = "C1"; /* * format close set parm*/
                else
                  if (OB0AM001.OB1XREFN != " ") /* repnet number is entered*/
                    OB0AW01.OB0AWSEL = "SD"; /* format select set parm*/
                    OB0AW01.OB0AWNXT = "ND";
                                     /* format select next parameter*/
                    OB0AW01.OB0AWCLO = "CD"; /* format close set parm*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end


  OB0ASB5(); /* format obwrec fields for obob usage only*/
end // end OB0ASEL

// load & write obf1 orders
Function OB0ASL1()




   /* load and write temp storage 1*/

  set OBAREC empty; /* init work record*/

  OBWREC.OBWTSF1S = 1;

  while (OBWREC.OBWTSF1S <= 12
   && OB0AW01.OB0AWEOF == "N")

    OB0AS14(); /* evaluate order further*/

    if (OB0AW01.OB0AWERR == "N") /* order passed evaluations*/
      OB0AW01.OB0AW-ORDS-QUAL-FL = "Y"; /* at least 1 order qualified*/
      OB0ASB2(); /* build temp storage 1*/
      OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1; /* increment storage sub*/
      OB0AW01.OB0AWTOT = OB0AW01.OB0AWTOT + 1;
    end

    OB0ASN1(); /* select next order*/

  end



   /* write temp storage 1*/

  if (OBWREC.OBWTSF1S > 1) /* at least one order qualified*/
    XSOBT1W();
  else
    /* **** IF OBWREC.OBWTSF1P EQ 1; ******/
    if (OB0AW01.OB0AWEOF == "Y" /* if end of file*/
     && OB0AW01.OB0AW-ORDS-QUAL-FL == "N") /* and no orders qualified*/
      converseLib.validationFailed(002); /* no orders found for criteria selected*/
      OBWREC.OBWERRFL = "Y"; /* converse ob0a screen*/
    end
  end



   /* *************************************************************/
end // end OB0ASL1

// select next for ts1
Function OB0ASN1()



   /* select next order for loading temp storage 1*/
              /* OBF1 orders*/

  OBFREC.OBFTASK = OB0AW01.OB0AWNXT; /* move next call to pass record*/

  set SQLCA empty;


  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0AW01.OB0AWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1TBLKE = " ";
      OBWREC.OBWCOID = OB1REC.KUCCOID; /* customer*/
      OBWREC.OP1CUPO = OB1REC.OP1CUPO; /* purchase order*/
      OBWREC.OBWCUOID = OB1REC.OP1CUOID; /* order*/
      TA1REC.TA1LOCAT[4] = OB1REC.SM1AGYID; /* possible key*/
      TA1REC.TA1LOCAT[1] = OBFREC.OBFTASK; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0ASN1 "; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        XSOBS04(); /* -911 processing, no rollback*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0ASN1

// select next for obf4 - items
Function OB0ASN2()


   /* select next item*/


  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "N1"; /* select next*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0AW01.OB0AWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0ASN2 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWERRFL = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0ASN2

// Edit pfkeys for OB0A
Function OB0ASPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf3) /* order processing main menu - OP0M*/
     /* Transfer to Order Processing Master Menu*/

     /* purge all temp storage first*/

    XSOBT1P(); /* purge orders*/
    XSOBT2P(); /* purge errors*/
    XSOBT3P(); /* purge holds*/
    XSOBT4P(); /* purge items*/
    XSOBT5P(); /* purge comments*/

    COMMAREA.CATOAP = "OP0M";
    XSEXIT();

  end

  if (converseVar.eventKey is pf4) /* main selection menu - MN0M*/
    XSOBP04();
  end

  if (converseVar.eventKey is enter /* edit and select orders if ok*/
   || converseVar.eventKey is pf12) /* edit only*/
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


end // end OB0ASPF

// get orders to display
Function OB0ASS1()



   /* get all the orders for the criteria specified*/

  set SQLCA empty;

  OBFREC.OBFTASK = OB0AW01.OB0AWSEL; /* move in select parm*/

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
    TA1REC.TA1TBLKE = " ";
    OBWREC.OBWCOID = OB0AM001.KUCCOID; /* customer*/
    OBWREC.OP1CUPO = OB0AM001.OP1CUPO; /* purchase order*/
    OBWREC.OBWCUOID = OB0AM001.OP1CUOID; /* order number*/
    TA1REC.TA1LOCAT[4] = OB0AM001.SM1AGYID; /* possible key*/
    TA1REC.TA1LOCAT[1] = OBFREC.OBFTASK; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0ASS1 "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04(); /* -911 processing, no rollback*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0ASS1

// get store name
Function OB0ASS2()



    /* get short store name*/

  set KUMREC empty;
  set SQLCA empty;

  KUMREC.KUCCOID = OB1REC.KUCCOID; /* load key - company*/
  KUMREC.KUMSTRID = OB1REC.KUMSTRID; /* load key - store*/
  KUMREC.XGPCD = OB1REC.XGPCD; /* load key - gpc*/

   /* read dcust.vstore01*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OBAREC.KUMSTSNM[OBWTSF1S] = KUMREC.KUMSTSNM; /* move to temp file*/
  else
    OBAREC.KUMSTSNM[OBWTSF1S] = "UNKNOWN   "; /* this name will be moved*/
  end




end // end OB0ASS2

// see if prod exists on order
Function OB0ASS3()


    /* check if product exists on the order*/

  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "E2";

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* get styles specified*/


   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   && OBKREC.OBKIND1 == 0)     /* indicates found some*/
    /* next sentence - this order is a keeper*/
  else
    OB0AW01.OB0AWERR = "Y"; /* order doesn't fit criteria*/
  end




end // end OB0ASS3

// see if customer prod exists
Function OB0ASS4()


    /* check if product exists on the order*/

  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "E3";

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* get cust style*/


   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    /* next sentence - this order is a keeper*/
  else
    OB0AW01.OB0AWERR = "Y"; /* order doesn't fit criteria*/
  end




end // end OB0ASS4

// get order items to display
Function OB0ASS6()

   /* get all the items for the order*/

  set SQLCA empty;
  set OBKREC empty; /* task record*/

  OBKREC.OBKTASK = "S1"; /* select task*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0ASS6 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0ASS6

// APPLY CUST DEFAULTS
Function XPOB004()
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* / BUILD PASSING RECORD FOR OB1430 FROM OBAREC (TEMP STORAGE)*/
   /* / CALL OB1430*/
   /* / PROCESS RETURN CODES*/
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

  set OBBAREC empty;

  OBBAREC.OBBAREC-OP-ORD-PART-CHAR = OBAREC.OP1PARTN[OBWTSF1S];
  OBBAREC.OBBAREC-OP-CUST-ORD-ID = OBAREC.OBACUOID[OBWTSF1S];
  OBBAREC.OBBAREC-OP-NIKE-ORD-ID = OBAREC.OBANORID[OBWTSF1S];
  OBBAREC.OBBAREC-DB2-DATE = OBWREC.ZZZCHGDT;
  OBBAREC.OBBAREC-DB2-TIME = OBWREC.ZZZCHGTM;

  OBBAREC.OBBAREC-RETURN-CODE = 99;

  call "OB1430" (OBBAREC) {isNoRefresh = yes, isExternal = yes};

  TA1REC.TA1LOCAT[2] = "OB1430";
  TA1REC.TA1LOCAT[3] = "XPOB004 ";
  TAEREC.TAEDESC1 = "OB1430 RETURN CODE IS ";
  TAEREC.TAEDESC2 = OBBAREC.OBBAREC-RETURN-CODE;

  if (OBBAREC.OBBAREC-RETURN-CODE == 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    if (OBBAREC.OBBAREC-RETURN-CODE == 1)
  /* DRAW ORDER NOT FOUND*/
      OBWREC.CAMSG = OBBAREC.OBBAREC-RETURN-MSG;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback updates since last commit*/
      XSOBENR(); /* appl retn - go to main menu*/
    else
      if (OBBAREC.OBBAREC-RETURN-CODE == 2)
  /* NOT FOUND ON UPDATE*/
        OBWREC.CAMSG = "RECORD NOT FOUND ON UPDATE IN OB1430 ";
        XSOBAPR(); /* post, rollback, restart appl*/
      else
        if (OBBAREC.OBBAREC-RETURN-CODE == 3)
   /* DATABASE DEADLOCK - DATABASE BUSY TRY AGAIN*/
          OBWREC.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN ";
          XSOBAPR(); /* post, rollback, restart appl*/
        else
          if (OBBAREC.OBBAREC-RETURN-CODE == 4)
  /* OTHER DATABASE PROBLEM - ABEND W/ROLLBACK*/
            OBWREC.CAMSG = "DB2 ERROR OCCURED IN OB1430";
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* rollback updates to last commit*/
            XSOBENR(); /* appl retn - go to main menu*/
          else
            if (OBBAREC.OBBAREC-RETURN-CODE == 5)
  /* application error      - ABEND W/ROLLBACK*/
              OBWREC.CAMSG = "DEADLOCK OCCURRED IN SUBPRGRAM CALLED IN OB1430";
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* rollback updates to last commit*/
              XSOBENR(); /* appl retn - go to main menu*/
            else
              if (OBBAREC.OBBAREC-RETURN-CODE == 99)
  /* CALL TO OB1430 DIDN'T WORK*/
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback updates to last commit*/
                XSOBENR(); /* appl retn - go to main menu*/
              else
  /* MAJOR PROBLEM WITH OB1430*/
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback updates to last commit*/
                XSOBENR(); /* appl retn - go to main menu*/
              end
            end
          end
        end
      end
    end
  end




end // end XPOB004

// Converse pop up window
Function XPYOB01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YOBTBL.YOBCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YOBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YOBTBL.YOBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YOBTBL.YOBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YOBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YOBTBL.YOBCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YOBTBL.YOBDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YOBTBL.YOBCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYOB01

//*** RECORD=OB0AW01 ****
// 
// ob0aw01
// 
// 
// 10/05/94  dcassi  Added items for conversion to alphanumeric
//                   for display purposes.  Added a display
//                   group level containing numeric (vs. Bin)
//                   and character type fields.
// 10/12/94  dcassi/ removed display items that were added
//           craine  10/05/94.  Added ob0aw-ords-qual-fl.
// ***********************
Record OB0AW01 type basicRecord
  10 OB0AWSEL OB0AWSEL ; 
  10 OB0AWNXT OB0AWNXT ; 
  10 OB0AWCLO OB0AWCLO ; 
  10 OB0AWEOF OB0AWEOF ; 
  10 OB0AWERR OB0AWERR ; 
  10 OB0AWOID OB0AWOID ; 
    15 * num(8) ; 
    15 OB0AWPCH OB0AWPCH ; 
  10 OB0AW-ORDS-QUAL-FL OB0AW-ORDS-QUAL-FL ; 
  10 OB0AWCNT OB0AWCNT ; 
  10 OB0AWREM OB0AWREM ; 
  10 OB0AWTOT OB0AWTOT ; 
  10 OB0AW-EOF-FL OB0AW-EOF-FL ; 
  10 OB0AW-DO-EDIT OB0AW-DO-EDIT ; 
  10 OB0AW-CAN-RELEASE-IT OB0AW-CAN-RELEASE-IT ; 
end // end OB0AW01

//*** RECORD=OBBAREC ****
// 
// OBBAREC
// 
// 
// 12/03/97  KLEE3   Record created
// ***********************
Record OBBAREC type basicRecord
  5 OBBAREC-PASS-RECORD OBBAREC-PASS-RECORD ; 
    10 OBBAREC-PASSING-INFO OBBAREC-PASSING-INFO ; 
      15 OBBAREC-REASSIGN-FLAG OBBAREC-REASSIGN-FLAG ; 
      15 OBBAREC-OP-ORD-PART-CHAR OBBAREC-OP-ORD-PART-CHAR ; 
      15 OBBAREC-OP-CUST-ORD-ID OBBAREC-OP-CUST-ORD-ID ; 
      15 OBBAREC-OP-NIKE-ORD-ID OBBAREC-OP-NIKE-ORD-ID ; 
      15 OBBAREC-DB2-DATE OBBAREC-DB2-DATE ; 
      15 OBBAREC-DB2-TIME OBBAREC-DB2-TIME ; 
    10 OBBAREC-RETURN-INFO OBBAREC-RETURN-INFO ; 
      15 OBBAREC-RETURN-CODE OBBAREC-RETURN-CODE ; 
      15 OBBAREC-RETURN-MSG OBBAREC-RETURN-MSG ; 
      15 OBBAREC-SPLIT-TO-NEW-SUBORD-FL OBBAREC-SPLIT-TO-NEW-SUBORD-FL ; 
      15 OBBAREC-NEW-NIKE-ORD-ID OBBAREC-NEW-NIKE-ORD-ID ; 
      15 OBBAREC-ERRDIAG-KEY OBBAREC-ERRDIAG-KEY ; 
    10 OBBAREC-FILLER OBBAREC-FILLER ; 
end // end OBBAREC

//*** RECORD=OBDPREC ****
// ************************************************************
// *                  PASSING RECORD FOR OB1810
// *
// ***THIS IS A NIKEBOTH INCLUDE. RECORD LENGTH MUST BE 2500**
// *
// ***CORRESPONDING CSP RECORD FOR WOB1810 IS OBDPREC
// *
// * DESCRIPTION:
// * THIS INCLUDE CONTAINS THE ALL THE PARAMETERS FOR PASSING
// * INFORMATION TO AND FROM OB1810 (DUPLICATE AN ORDER )
// *
// * PASS DATA: PASS THE ORDER TO BE DUPLICATED. OP1PARTN AND
// *            OP1CUOID ARE REQUIRED.
// *            PASS THE NEW VALUES FOR KUSTRID AND/OR OP1CUPO
// *            IF AVAILABLE.
// *            CURRENT DATA AND TIME ARE REQUIRED.
// *
// *  PASS AND RETURN INFO:
// *            THE NEW ORDER NUMBER WILL BE RETURNED IN
// *            OBDP-OP1CUOID-NEW, AND OBDP-OP1PARTN-NEW.
// *            SUBORDERS ARE CREATED SEQUENTIALLY. THE MAX
// *            NUMBER OF SUBORDERS CREATED IS RETURNED IN
// *            OBPD-OP1NORID-NEW
// *            THE CALLING PROGRAM MAY PASS A NEW ORDER NUMBER
// *            OR ONE WILL BE DETERMINED BY OB1810 WHEN OBDP-
// *            OP1CUOID-NEW IS ZERO.
// *
// * FIELDS ALWAYS RETURNED BY OB1810 INCLUDE:
// *    RETURN-STATUS
// *
// *  00 - GOOD RETURN
// *  01 - RECORD NOT FOUND IN DORDER DATABASE WHEN THERE
// *       SHOULD BE ONE.
// *  02 - DEADLOCK OR TIME-OUT IN DORDER.VNXTIO01 DATABASE.
// *  03 - ANY OTHER SQL RETURN CODE IN DORDER.VNXTIO01.
// *  04 - DEADLOCK OR TIME-OUT IN ANY DATABASE.
// *  05 - ANY OTHER SQL RETURN CODE IN ANY DATABASE.
// *  06 - ANY UNEXPECTED RETURN CODE FROOOM A CALLED PGM
// *
// *
// *******************************************************
// ***********************
Record OBDPREC type basicRecord
  5 OBDP-PASSING-REC OBDP-PASSING-REC ; 
    10 OBDP-PASSING-INFO OBDP-PASSING-INFO ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 KUMSTRID KUMSTRID ; 
      15 OP1CUPO OP1CUPO ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
    10 OBDP-PASS-AND-RETURN-INFO OBDP-PASS-AND-RETURN-INFO ; 
      15 OBDP-OP1PARTN-NEW OBDP-OP1PARTN-NEW ; 
      15 OBDP-OP1CUOID-NEW OBDP-OP1CUOID-NEW ; 
      15 OBDP-OP1NORID-NEW OBDP-OP1NORID-NEW ; 
    10 OBDP-RETURNED-DATA OBDP-RETURNED-DATA ; 
      15 OBDP-RETURN-CD OBDP-RETURN-CD ; 
      15 OBDP-RETURN-MSG OBDP-RETURN-MSG ; 
      15 OBDP-ERRDIAG-KEY OBDP-ERRDIAG-KEY ; 
    10 OBDP-FILLER OBDP-FILLER ; 
end // end OBDPREC

DataItem OB0AW-CAN-RELEASE-IT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0AW-DO-EDIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0AW-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// at least 1 ord qualified flag
DataItem OB0AW-ORDS-QUAL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// close set parm for OBFREC
DataItem OB0AWCLO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of orders edited
DataItem OB0AWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage eof flag
DataItem OB0AWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage error flag
DataItem OB0AWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sel next parm for OBFREC
DataItem OB0AWNXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer order id
DataItem OB0AWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part char
DataItem OB0AWPCH num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count of orders to be edited
DataItem OB0AWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sel set parm for OBFREC
DataItem OB0AWSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of orders selected
DataItem OB0AWTOT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OBBAREC-DB2-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OBBAREC-DB2-TIME smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OBBAREC-ERRDIAG-KEY char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OBBAREC-FILLER char(2342)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OBBAREC-NEW-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage error flag
DataItem OBBAREC-OP-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer order id
DataItem OBBAREC-OP-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage eof flag
DataItem OBBAREC-OP-ORD-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sel set parm for OBFREC
DataItem OBBAREC-PASS-RECORD char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sel next parm for OBFREC
DataItem OBBAREC-PASSING-INFO char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// close set parm for OBFREC
DataItem OBBAREC-REASSIGN-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of orders edited
DataItem OBBAREC-RETURN-CODE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// at least 1 ord qualified flag
DataItem OBBAREC-RETURN-INFO char(144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of orders to be edited
DataItem OBBAREC-RETURN-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of orders selected
DataItem OBBAREC-SPLIT-TO-NEW-SUBORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted error diagnostics
DataItem OBDP-ERRDIAG-KEY char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for total length 2500
DataItem OBDP-FILLER char(2313)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem OBDP-OP1CUOID-NEW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem OBDP-OP1NORID-NEW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem OBDP-OP1PARTN-NEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass/return info
DataItem OBDP-PASS-AND-RETURN-INFO char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// passing information
DataItem OBDP-PASSING-INFO char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OBDP-PASSING-REC char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1620 return code
DataItem OBDP-RETURN-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ob1620 return message
DataItem OBDP-RETURN-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1620 return data
DataItem OBDP-RETURNED-DATA char(140)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

