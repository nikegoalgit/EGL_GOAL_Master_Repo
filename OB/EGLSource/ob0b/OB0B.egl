package ob0b;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=OB0B ****
// OVERVIEW:  The order select screen lists all the orders that
//    were selected and loaded to temp storage by OB0A, the
//    Order Inquiry application.  When an order is selected
//    from the list, OB0B gathers information for the order and
//    loads it to several different temporary storage files.
//    The files are used throughout the Online Airspeed session
//    until control is returned to OB0B.  Data for the next
//    selected order is then gathered and loaded or the OB0B
//    screen is displayed to allow the user to make additional
//    selections.  OB0B keeps track of updates and inquiries
//    for each order selected.  Most Airspeed applications can
//    return to OB0B using PF3.
// 
// POSSIBLE STATEMENT GROUP MEANINGS:
//    OB0BSSx = select or select set
//    OB0BSNx = select next
//    OB0BSCx = close set
//    OB0BSBx = build record
//    OB0BSLx = load (temp storage load drivers)
//    OB0BSUx = update record
// 
// **  statement group naming is flexible and may not have
//     any meaning especially after several enhancements.
// 
// ********************************************************
// *     M A I N T E N A N C E     L O G                  *
// ********************************************************
// *
// * DATE        NAME          DESCRIPTION OF CHANGE
// *
// * 06/04/90   SKOTT      Created.
// * 10/25/90   ORICHA     ADD SPCL CUST GRP AND PROD CATEGRY
// *                       TO SCREEN. M001,
// * 02/15/91   dmeier     regen for database changes
// * 05/09/91   CRAINE     DISPLAY STORE NAME AND CUST ALWAYS
// *                       CHG S32, S35.
// * 08/27/91   oricha     sb3. screened style logic.
// * 11/15/91   craine     correct 'page' literal color on map.
// * 03/20/91   tmorri     modified OB0BSUH, OB0BS40 - updates
// *                       not allowed for order status 'cl' or
// *                       'ca'.
// * 10/12/92   bbake2    data base changes, replaced sm5rec
// *                      with vragcy02
// * 05/10/94   scantr    removed check to see if batch edit
// *                      is running (s02) in 000, chg'd s40
// *                      to format order nbr to comp one time,
// *                      removed format order nbr from xsobs03
// *                      chgd s30 to set cursor if editing;
// *                      chgd xsobs02, obwrec, added xsobs10
// * 05/24/94   scantr    changed xsobs03
// * 06/08/94   scantr    virtual airspeed - obwrec, xsobs03;
// *                      ob0bs30, 35, 40 to handle dl orders
// * 06/15/94   CRAINE    VIRTUAL AIRSPEED - CHG S40 TO NOT
// *                      UPDATE THE ORDER WITH A 'NC' STATUS
// *                      WHEN THE ORDER IS SELECTED.
// * 09/06/94   craine    change to obwrec
// * 10/25/94   craine    change to obwrec
// * 11/04/94   schase    fix PF3 looping error in S70
// * 11/11/94   CRAINE    ADD S42 TO APPLY EDIT, CUST DEFAULTS
// *                      OR CSR HOLD TO SELECTED ORDERS
// * 11/29/94   CBRINE    Set OBWREC.CSR-HOLD-FLAG in SB3 when
// *                      reading the holds for OB0M.
// * 01/03/95   craine    change to obwrec
// * 02/25/95   craine    add calling pgm to obcdrec, xsob001
// * 04/10/95   craine    Add COMMIT to XSOB002 and XSOB003.
// * 04/27/95   craine    allow for new yobcd 'pd' and 'lp'.
// * 08/07/95   craine    DATABASE CHANGES
// * 06/03/97   rgilli    YR2000 - Regen to ensure correct ver.
// *                               of xx0xs01 is included.
// * 11/06/97   SATYAM    Modified the sgrp ob0b010 to display
// *                      a message if both csr hold and prod
// *                      are selected in ob0a application.
// * 23/02/99   RHARAT    COMPILED TO PICKUP new OBCDREC.
// * 26/12/00   dfrede    To check for the availability of
// *            TT#6319   the order in the extract database
// *                      DORDER.VOBEXT01 before loading
// *                      into the DORDER database.
// *********************
Program OB0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUMREC KUMREC; // record
  OB0BW01 OB0BW01; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB6REC OB6REC; // record
  OB7REC OB7REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCDREC OBCDREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBKREC OBKREC; // record
  OBLEREC OBLEREC; // record
  OBWREC OBWREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OBMTBL; // table
  use XSGTBL; // table
  use XPCTBL; // table
  use OB0BM.OB0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0B000: OB0B000();
    goto OB0B010;
    OB0B010: OB0B010();
    goto OB0B010;
  end // end main
end // end OB0B

// main execute process
Function OB0B000()
     /* Check csp and order batch security*/

  XSENTRY();
  XSOBS01();

     /* Initialize application - init records, get zz date/time,*/
                              /* save map name for diagnostics*/
  OB0BS10();

     /* Set -911 processing flag*/

  OBWREC.OBWER911 = "N";

     /* Read current temp storage page*/

  XSOBT1R();

       /* update process for execute*/

  if (OBWREC.CAMSG == " ") /* msg is empty, no errors to display*/
    OB0BS16();
  end


     /* Display commarea message*/

  OB0BM001.CAMSG = OBWREC.CAMSG;
  OBWREC.CAMSG = " ";


     /* Build map for display*/

  OB0BS20();



end // end OB0B000

// converse/ after process
Function OB0B010()

  converseLib.clearScreen();
   /* set map to scroll properly*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  if (OBWREC.OBW-PROD-HOLD-FLAG == "H") /* flag passed from ob0a if prod hold*/
    OBWREC.OBW-PROD-HOLD-FLAG = " ";
    OB0BM001.VAGen_EZEMSG = "PRODUCT HOLD BY CSR SUCCESSFULLY APPLIED";
  end

  converse OB0BM001 ;


     /* Init error stuff*/

  OBWREC.OBWERRFL = "N";
  converseLib.validationFailed(0);
  OB0BM001.CAMSG = " ";
  OB0BM001.VAGen_EZEMSG = " "; /* re initialized the ezemsg*/


     /* Reset field attributes*/

  OB0BS30();


     /* Edit map(no matter what pfkey is used)*/

  OB0BS60();


     /* Update only if good pfkey hit*/

  if (converseVar.eventKey is pf9  /* prod summary*/
   || converseVar.eventKey is pf17 /* errs*/
   || converseVar.eventKey is pf19 /* holds*/
   || converseVar.eventKey is enter) /* customer*/
    if (OBWREC.OBWERRFL == "N")
      OB0BS70();
    end
  end

     /* Edit PF Keys*/
  if (OBWREC.OBWERRFL == "N")
    OB0BS52(); /* pf7/pf8, enter display ob0b screen*/
                                   /* again*/
  end

   /* TT#6319 Wipro Changes begin*/
  if (OBWREC.OB6MSGNB == 261
   && OBWREC.OBWERRFL == "N")
    converseLib.validationFailed(261); /* error message to denote orders loading into*/
                      /* DORDER.*/
    OBWREC.OBWERRFL = "Y";
  end
   /* TT#6319 Wipro Changes end*/

  OB0BSPF(); /* transfer to requested application.*/
end // end OB0B010

// initialize application
Function OB0BS10()

  set KUMREC empty; /* store record*/
  set OBAREC empty; /* order temp storage*/
  set OBBREC empty; /* errors temp storage*/
  set OBCREC empty; /* holds temp storage*/
  set OBDREC empty; /* items temp storage*/
  set OBEREC empty; /* comments storage*/
  set OBFREC empty; /* header parm record*/
  set OBKREC empty; /* item task record*/
  set OB1REC empty; /* header record*/
  set OB2REC empty; /* item record*/
  set OB6REC empty; /* msg desc file*/
  set OB7REC empty; /* order messages*/
  set OB8REC empty; /* obpgm file*/
  set SM1REC empty; /* agency file*/
  set VRAGCY02 empty; /* rep file*/
  set SYCREC empty; /* product file*/
  set SQLCA empty; /* return code from DB2*/
  set ERRSQLCA empty; /* return code from non-db2*/
  set TAEREC empty; /* diags for non db2*/
  set TA1REC empty; /* diagnostic record*/
  set TA5REC empty; /* temp storage io- record*/
  set OB0BW01 empty; /* working storage*/
  set XX0XW01 empty; /* working storage for date rtn*/

  set OB0BM001 empty; /* map*/

  TA1REC.TA1MAP = "OB0BM001"; /* map name for diags*/

  XX0XS01(); /* get current date, time for updates*/
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change date*/

end // end OB0BS10

// select and load obf2 - err msg
Function OB0BS11()



   /* select all order error messages*/
   /* write a temporary storage record (obf2) for*/
   /* each map full of error messages - 11 msgs per screen*/

  XSOBT2P(); /* purge temp storage 2 to start clean*/

   /* build record to pass to select messages*/

  OB0BSB1();
  OB7REC.OB7MSGTP = "E"; /* only errs*/


   /* get all the messages for the order*/

  OB0BSS1();


  OB0BW01.OB0BWEOF = "N"; /* set end of file flag to no*/

  OB0BSN1(); /* select next for temp storage 2*/


  if (OB0BW01.OB0BWEOF == "Y") /* no messages*/
    set OBBREC empty;
    XSOBT2W(); /* write one blank record*/
  else
    while (OB0BW01.OB0BWEOF == "N") /* while there are messages selected*/
      OB0BSL1(); /* load and write temp storage 2*/
    end
  end
  OBWREC.OBWTSF2P = 1; /* set page number*/
  OBWREC.OBWTSF2S = 1; /* position cursor on first message*/
   /* total number of pages was set in write statement group*/


   /* close scan*/

  OB0BSC1();

   /* *************************************************************/
end // end OB0BS11

// see if msgs exist for item
Function OB0BS15()



   /* see if error  messages exist for an item*/
   /* if at least one exists,*/
   /* set the error flag on the item list in temp storage to 'y'*/
   /* do the same for the hold messages*/

        /* build the key to message file*/

  OB0BSB1();
  OB7REC.OP2LNINB = OB2REC.OP2LNINB; /* line item nbr*/


  OB7REC.OB7MSGTP = "E"; /* only errs*/

   /* get error messages for the item*/

  OB0BSS5();

   /* check db2 return code*/

  OBDREC.OBDFILL[OBWTSF4S] = "/"; /* slash*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* or more than one found*/
    OBDREC.OB1ERRFL[OBWTSF4S] = "Y"; /* err flag*/
  else
    OBDREC.OB1ERRFL[OBWTSF4S] = "N"; /* err flag*/
  end


   /* get hold messages for the item*/

  OB7REC.OB7MSGTP = "H"; /* only errs*/

  OB0BSS5();

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* or more than one found*/
    OBDREC.OB1HLDFL[OBWTSF4S] = "Y"; /* err flag*/
  else
    OBDREC.OB1HLDFL[OBWTSF4S] = "N"; /* err flag*/
  end

   /* *************************************************************/
end // end OB0BS15

// update for execute
Function OB0BS16()

  OBWREC.OBWTSF1S = 1; /* init subscript*/

  while (OBWREC.OBWTSF1S <= 12) /* 12 orders on page*/
    if (OBAREC.OBAMSEL[OBWTSF1S] == "S" /* user selected order*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "U" /* user updated order*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "V" /* user viewed order*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "E" /* edit  order*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "D" /* apply defaults to order*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "H") /* apply csr hold to order*/
      OB0BS40(); /* main update for execute and converse*/

      if (OBAREC.OBAMSEL[OBWTSF1S] == "W") /* decrement order*/
        COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* transfer data*/
        COMMAREA.CATOAP = "OB0T"; /* xfer to on-line decrement*/
        XSEXIT();
      else
        if (OBAREC.OBAMSEL[OBWTSF1S] == "V") /* view order*/
          OBWREC.CAMSG = "NEXT ORDER";
          COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* transfer data*/
          if (OBWREC.OBWOB0B != " ") /* requested appl for selected orders*/
            COMMAREA.CATOAP = OBWREC.OBWOB0B;
            XSEXIT();
          else
            XSOBP06(); /* transfer to OB0C*/
          end
        end
      end
    end
    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1;
  end

end // end OB0BS16

// build OB0B Map
Function OB0BS20()

     /* build map headings*/

  OB0BS22();

     /* build order array on screen*/

  OBWREC.OBWTSF1S = 1; /* init subscript*/

  while (OBWREC.OBWTSF1S <= 12) /* process all 12 rows*/
    OB0BS25();
    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1;
  end

     /* reset field attributes*/

  OB0BS30();

end // end OB0BS20

// select and load obf3 - hld msg
Function OB0BS21()



   /* select all hold messages*/
   /* write a temporary storage record (obf3) for*/
   /* each map full of hold messages, map holds 11 messages*/

  XSOBT3P(); /* purge temp storage 3 to start clean*/

   /* build record to pass to select messages*/

  OB0BSB1();
  OB7REC.OB7MSGTP = "H"; /* hold only*/


   /* get all the messages for the order*/

  OB0BSS1();


  OB0BW01.OB0BWEOF = "N"; /* set end of file flag to no*/
  OBWREC.OBW-CSR-HOLD-FL = "N"; /* init flag*/

  OB0BSN1(); /* select next for temp storage 3*/


  if (OB0BW01.OB0BWEOF == "Y") /* no messages*/
    set OBCREC empty;
    XSOBT3W(); /* write one blank record*/
  else
    while (OB0BW01.OB0BWEOF == "N") /* while there are messages selected*/
      OB0BSL2(); /* load and write temp storage 3*/
    end
  end
  OBWREC.OBWTSF3P = 1; /* set page number*/
  OBWREC.OBWTSF3S = 1; /* position cursor on first message*/
   /* total number of pages was set in write statement group*/


   /* close scan*/

  OB0BSC1();

   /* *************************************************************/
end // end OB0BS21

// build map headings
Function OB0BS22()

  OB0BM001.OB0BMPRC = "OB0B010"; /* process name*/
  OB0BM001.OBWCDATE = OBWREC.OBWCDATE; /* formatted current date*/

  OB0BM001.OB0BMCSL = "CUSTOMER:"; /* move label*/
  OB0BM001.OB0BMCNL = "CUSTOMER"; /* move column label*/
  OB0BM001.OB0BMNML = "NAME"; /* move column label*/
  OB0BM001.KUMSTRNM = OBWREC.OBWSELCN; /* move store name*/

  if (OBWREC.OBWSELCO == 0) /* if customer not entered in ob0a*/
    /* next sentence*/
  else
    OBWREC.OBWFMT = OBWREC.OBWSELCU; /* move company*/
    XSOBS06(); /* remove leading zeros*/
    OB0BM001.OBWCUST = OBWREC.OBWFMT; /* move to map*/
  end

  OB0BM001.OB0BMAGL = "AGCY/REP:"; /* move agency*/
  OB0BM001.SM1AGYID = OBWREC.SM1AGYID; /* agency id*/

  if (OBWREC.SM1AGYID != " ") /* agency entered for order criteria*/
    OB0BSS7(); /* read agency name*/

    OB0BM001.SM4REPID = OBWREC.SM4REPID; /* rep id*/
    if (OBWREC.SM4REPID != 0) /* rep entered for order criteria*/
      OB0BSS8(); /* format rep name*/
    end
  end

  OB0BM001.OBWTSF1P = OBWREC.OBWTSF1P; /* current page*/
  OB0BM001.OBWTSF1M = OBWREC.OBWTSF1M; /* maximum page*/

  OB0BM001.OB0BMPOL = "PO NBR:"; /* move cust po label*/
  OB0BM001.OP1CUPO = OBWREC.OBWSELPO; /* move cust po*/

  if (OBWREC.XSGCD != " ") /* SPCL CUST GROUP ENTERED FOR CRITERIA*/
    OB0BM001.XSGCD = OBWREC.XSGCD;
    OB0BM001.OB0BMXSG = "SPCL CUST GROUP:";
    OB0BS23(); /* GET SPCL CUST GRP ABRV*/
  end

  if (OBWREC.XPCCD != " ")
                                   /* PRODUCT CATEGORY ENTERED FOR CRITERIA*/
    OB0BM001.XPCCD = OBWREC.XPCCD;
    OB0BM001.OB0BMXPC = "PRODUCT CATEGORY:";
    OB0BS24(); /* GET PROD CAT ABRV*/
  end

  if (OBWREC.OBWXREF != " ")
                                   /* repnet file number entered*/
    OB0BM001.OB1XREFN = OBWREC.OBWXREF;
    OB0BM001.OB0BMNET = "XREF NBR:";
  end


end // end OB0BS22

// GET SPECIAL CUST GROUP ABRV
Function OB0BS23()


  if (OBWREC.XSGCD in XSGTBL.XSGCD)
    OB0BM001.XSGABRV = XSGTBL.XSGABRV[sysVar.arrayIndex];
  else
    OB0BM001.XSGABRV = "UNKNWN";
  end

end // end OB0BS23

// GET PRODUCT CATEGORY ABRV
Function OB0BS24()


  if (OBWREC.XPCCD in XPCTBL.XPCCD)
    OB0BM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    OB0BM001.XPCABRV = "UNKNWN";
  end

end // end OB0BS24

// build map orders array
Function OB0BS25()

     /* move fields from obarec to screen*/

  if (OBAREC.OBAMSEL[OBWTSF1S] == "W"
   || OBAREC.OBAMSEL[OBWTSF1S] == "X")
    OB0BM001.OBAMSEL[OBWTSF1S] = "V";
  else
    OB0BM001.OBAMSEL[OBWTSF1S] = OBAREC.OBAMSEL[OBWTSF1S]; /* select code*/
  end

  OB0BM001.OBAORDER[OBWTSF1S] = OBAREC.OBAORDER[OBWTSF1S]; /* order*/
  OB0BM001.OBAPARLF[OBWTSF1S] = OBAREC.OB1PARLF[OBWTSF1S]; /* part ld*/
  OB0BM001.SP1ID[OBWTSF1S] = OBAREC.SP1ID[OBWTSF1S]; /* sls pgm*/
  OB0BM001.XOBCD[OBWTSF1S] = OBAREC.XOBCD[OBWTSF1S]; /* base ot*/
  OB0BM001.OBACUNDT[OBWTSF1S] = OBAREC.OBACUNDT[OBWTSF1S]; /* need date*/
  OB0BM001.YOBCD[OBWTSF1S] = OBAREC.YOBCD[OBWTSF1S]; /* batch status*/
  OB0BM001.OBAERHDF[OBWTSF1S] = OBAREC.OBAERHDF[OBWTSF1S];
                                   /* err/hold*/
  OB0BM001.OBACUST[OBWTSF1S] = OBAREC.OBACUST[OBWTSF1S]; /* cust nbr*/
  OB0BM001.KUMSTSNM[OBWTSF1S] = OBAREC.KUMSTSNM[OBWTSF1S]; /* cust nm*/

end // end OB0BS25

// reset field attributes
Function OB0BS30()

     /* set heading attributes*/

  OB0BS32();


     /* Set cursor to page in case of no enterable select codes*/

  set OB0BM001.OBWTSF1P cursor, initialAttributes; /* page number*/


     /* reset order array attributes*/

  OBWREC.OBWTSF1S = 12; /* init subscript*/

  while (OBWREC.OBWTSF1S >= 1) /* process all 12 rows*/
    OB0BS35(); /* set askip if '*' on select, set*/
                                   /* unused dark*/
    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S - 1;
  end

     /* override the cursor placement if the batch edit editing order*/

  OBWREC.OBWTSF1S = 12; /* init subscript*/

  while (OBWREC.OBWTSF1S >= 1) /* process all 12 rows*/
    if (OBAREC.OBAMSEL[OBWTSF1S] == "C"
     && OBAREC.YOBCD[OBWTSF1S] != "DL"
     && OBAREC.YOBCD[OBWTSF1S] != "LD")
      set OB0BM001.OBAMSEL[OBWTSF1S] cursor, initialAttributes;
    end

    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S - 1;
  end

end // end OB0BS30

// select and load obf4 - items
Function OB0BS31()



   /* select all items for the selected order*/
   /* write a temporary storage record (temp storage 4) for*/
   /* each map full of items, map holds 10 items*/

  XSOBT4P(); /* purge temp storage 4 to start clean*/

   /* build record to pass to select items*/

  OB0BSB4();


   /* get all the items for the order*/

  OB0BSS3();


  OB0BW01.OB0BWEOF = "N"; /* set end of file flag to no*/

  OB0BSN2(); /* select next for temp storage 4*/


  if (OB0BW01.OB0BWEOF == "Y") /* no items*/
    set OBDREC empty;
    XSOBT4W(); /* write one empty line*/
  else
    while (OB0BW01.OB0BWEOF == "N") /* while there are messages selected*/
      OB0BSL3(); /* load and write temp storage 4*/
    end
  end
  OBWREC.OBWTSF4P = 1; /* set page number*/
  OBWREC.OBWTSF4S = 1; /* position cursor on first message*/
   /* total number of pages was set in write statement group*/


   /* close scan*/

  OB0BSC2();

   /* *************************************************************/
end // end OB0BS31

// set heading attributes
Function OB0BS32()


  if (OBWREC.OBWSELCO == 0) /* cust nbr not entered for order*/
                                   /* criteria*/
    set OB0BM001.OB0BMCSL skip, invisible; /* customer literal*/
    set OB0BM001.OBWCUST skip, invisible; /* customer number*/
  else
    set OB0BM001.OB0BMCSL initialAttributes; /* customer literal*/
  end

  set OB0BM001.OB0BMCNL initialAttributes; /* customer column label*/
  set OB0BM001.OB0BMNML initialAttributes; /* customer name column label*/

  if (OBWREC.SM1AGYID == " ") /* agy/rep not entered for order*/
                                   /* criteria*/
    set OB0BM001.OB0BMAGL skip, invisible; /* agency literal*/
  else
    set OB0BM001.OB0BMAGL initialAttributes; /* agency literal*/
  end

  if (OBWREC.OBWSELPO == " ") /* PO not entered for order criteria*/
    set OB0BM001.OB0BMPOL skip, invisible; /* PO literal*/
  else
    set OB0BM001.OB0BMPOL initialAttributes; /* PO literal*/
  end

  if (OBWREC.XSGCD == " ") /* SPCL CUST GROUP NOT ENTERED FOR ORDER CRITERIA*/
    set OB0BM001.OB0BMXSG skip, invisible; /* SPCL CUST GROUP LITERAL*/
  else
    set OB0BM001.OB0BMXSG initialAttributes; /* SPCL CUST GROUP LITERAL*/
  end

  if (OBWREC.XPCCD == " ") /* PRODUCT CATEGORY ENTERED FOR ORDER CRITERIA*/
    set OB0BM001.OB0BMXPC skip, invisible; /* PROD CAT LITERAL*/
  else
    set OB0BM001.OB0BMXPC initialAttributes; /* PROD CAT LITERAL*/
  end

end // end OB0BS32

// set array attributes
Function OB0BS35()

     /* set select fields defined*/

  set OB0BM001.OBAMSEL[OBWTSF1S] initialAttributes; /* fields may be set dark*/
  set OB0BM001.OBACUNDT[OBWTSF1S] initialAttributes;
  set OB0BM001.OBAORDER[OBWTSF1S] initialAttributes;
  set OB0BM001.OBACUST[OBWTSF1S] initialAttributes;

     /* set select fields askip if '*' (deleted order)*/

  if (OBAREC.OBAMSEL[OBWTSF1S] == "*"
   || OBAREC.YOBCD[OBWTSF1S] == "DL"
   || OBAREC.YOBCD[OBWTSF1S] == "LD")
    set OB0BM001.OBAMSEL[OBWTSF1S] skip;
  end

     /* set select fields dark if line is empty*/

  if (OBAREC.OBACUOID[OBWTSF1S] == 0) /* no order*/
    set OB0BM001.OBAMSEL[OBWTSF1S] skip, invisible;
    set OB0BM001.OBACUNDT[OBWTSF1S] skip, invisible;
    set OB0BM001.OBAORDER[OBWTSF1S] skip, invisible;
    set OB0BM001.OBACUST[OBWTSF1S] skip, invisible;
  end

    /* Set the cursor at the first enterable select code.*/
    /* These fields are being looped from bottom to top.*/

  if (OBAREC.OBAMSEL[OBWTSF1S] != "*" /* if not **/
   && OBAREC.YOBCD[OBWTSF1S] != "DL"  /* and order not deleted*/
   && OBAREC.YOBCD[OBWTSF1S] != "LD"  /* and order not loaded*/
   && OBAREC.OBACUOID[OBWTSF1S] != 0) /* and order exists*/
    set OB0BM001.OBAMSEL[OBWTSF1S] cursor, initialAttributes;
  end


end // end OB0BS35

// main update for each selection
Function OB0BS40()


  OBWREC.OBWORDER = OBAREC.OBAORDER[OBWTSF1S]; /* formatted order*/
  OBWREC.OP1PARTN = OBAREC.OP1PARTN[OBWTSF1S]; /* part char*/

   /* Save COMP formatted order number in OBWREC to use when*/
   /* the formatted number won't work. This is the only place*/
   /* that OP1CUOID and OP1NORID are moved to OBWREC comp data elements*/
   /* in the OB system. Please leave it that way.*/


      /* format order number as numeric to use as key*/
  OBWREC.OBWFMT = OBWREC.OBWORDER; /* move to w-s*/
  XSOBS07(); /* add the leading zeros*/
  OBWREC.OBWORDER = OBWREC.OBWFMT; /* move order number*/

  OBWREC.OP1CUOID = OBWREC.OBWCUOID;
  OBWREC.OP1NORID = OBWREC.OBWNOID;

      /* suppress leading zeros to display order number*/
  OBWREC.OBWFMT = OBWREC.OBWORDER; /* move to w-s*/
  XSOBS06(); /* suppress zeros*/
  OBWREC.OBWORDER = OBWREC.OBWFMT; /* move order number*/



     /* read order header*/

  XSOBS03();

     /* if the order's status has changed to delete, don't go*/
     /* any farther, restart ob0b with a message*/

  if (OB1REC.YOBCD == "LD")
    OBWREC.CAMSG = "ORDER HAS LOADED";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP03();
  end

  if (OB1REC.YOBCD == "DL")
    OBWREC.CAMSG = "ALL ITEMS HAVE MOVED TO A NEW SUBORDER/ORDER";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP03();
  end
     /* format OBWREC fields for further use*/

  OB0BS45();

   /* apply edit, cust defaults or csr hold*/

  if (OBAREC.OBAMSEL[OBWTSF1S] == "E" /* EDIT*/
   || OBAREC.OBAMSEL[OBWTSF1S] == "D" /* APPLY CUST DEFAULTS*/
   || OBAREC.OBAMSEL[OBWTSF1S] == "H") /* write csr hold*/
    OB0BS42();
    OBAREC.OBAMSEL[OBWTSF1S] = "S"; /* set to select*/
  end

     /* call temp storage load routines*/

  OB0BS11(); /* read and load errors for order*/

  OB0BS21(); /* read and load holds for order*/

  OB0BS31(); /* read and load items for order*/

     /* save the status*/

  OBWREC.YOBCD = OB1REC.YOBCD;

     /* update order temp storage record*/


  if (OBAREC.OBAMSEL[OBWTSF1S] == "S")
    OBAREC.OBAMSEL[OBWTSF1S] = "V"; /* mark order to view*/
  else
    if (OBAREC.OBAMSEL[OBWTSF1S] == "U" /* order has been updated*/
     || OBAREC.OBAMSEL[OBWTSF1S] == "V") /* order has been viewed*/

      if (OB1REC.YOBCD == "CA"
       || OB1REC.YOBCD == "CL"
       || OB1REC.YOBCD == "DP"
       || OB1REC.YOBCD == "DW"
       || OB1REC.YOBCD == "FA")
        OBAREC.OBAMSEL[OBWTSF1S] = "W"; /* mark order to decrement*/
      else
        OBAREC.OBAMSEL[OBWTSF1S] = "X"; /* mark order to decrement*/
      end
    end
  end

  OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD;

  XSOBT1U(); /* update order temp storage record*/

end // end OB0BS40

// APPLY EDIT,DEFAULTS,HOLD
Function OB0BS42()


  if (OBAREC.YOBCD[OBWTSF1S] == "NC"
   || OBAREC.YOBCD[OBWTSF1S] == "CK"
   || OBAREC.YOBCD[OBWTSF1S] == "CL"
  )
    if (OBAREC.OBAMSEL[OBWTSF1S] == "D")
      XSOB001(); /* APPLY CUST DEFAULTS VIA OB1650*/
      XSOB002(); /* EDIT ORDER VIA OB1680*/
    end
    if (OBAREC.OBAMSEL[OBWTSF1S] == "E")
      XSOB002(); /* EDIT ORDER VIA OB1680*/
    end
    if (OBAREC.OBAMSEL[OBWTSF1S] == "H")
      XSOB003(); /* APPLY CSR HOLD TO ORDER*/
      OBAREC.OB1HLDFL[OBWTSF1S] = "Y"; /* set flag on temp storage*/
      OBAREC.YOBCD[OBWTSF1S] = "CK"; /* set status*/
    end

  end



end // end OB0BS42

// format OBWREC fields
Function OB0BS45()

     /* read customer name*/

   /* iF OBWREC.KUMSTRNM = ' ';*/
  OB0BSS6();
   /* END ;*/


      /* move fields to OBWREC*/

  OB0BS46();

end // end OB0BS45

// move fields to OBWREC
Function OB0BS46()

  OBWREC.OBWCOID = OB1REC.KUCCOID; /* cust id*/
  OBWREC.OBWFILL2 = ".";
  OBWREC.OBWSTRID = OB1REC.KUMSTRID; /* store id*/
  OBWREC.OBWFILL3 = ".";
  OBWREC.OBWXNXCD = OB1REC.XNXCD; /* dept id*/

  OBWREC.OBWFMT = OBWREC.OBWCUST; /* move to w-s*/
  XSOBS06(); /* remove leading zeros*/
  OBWREC.OBWCUST = OBWREC.OBWFMT;

  OBWREC.OP1CUPO = OB1REC.OP1CUPO; /* customer po*/

end // end OB0BS46

// Edit pf7/pf8 and enter
Function OB0BS52()

       /* edit pf7/pf8 and enter for next ob0b map display*/

  if (converseVar.eventKey is pf7)
    OBWREC.OBWTSF1P = OBWREC.OBWTSF1P - 1; /* prior page*/
  else
    if (converseVar.eventKey is pf8)
      OBWREC.OBWTSF1P = OBWREC.OBWTSF1P + 1; /* next page*/
    else
      if (converseVar.eventKey is enter
       && OB0BM001.OBWTSF1P != OBWREC.OBWTSF1P) /* page nbr changed*/
        OBWREC.OBWTSF1P = OB0BM001.OBWTSF1P; /* move map pg to record*/
        XSOBP00(); /* restart application*/
      end
    end
  end

end // end OB0BS52

// edit map
Function OB0BS60()

     /* edit map top to bottom - select codes, page nbr,*/
       /* pf7/pf8, and relational edits for screen*/


     /* edit select codes*/

  OBWREC.OBWTSF1S = 12; /* init subscript*/
  OB0BW01.OB0BWSEL = "N"; /* init selections made flag*/

  while (OBWREC.OBWTSF1S >= 1) /* process all 12 rows*/
    OB0BS61();
    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S - 1;
  end

     /* edit page number*/

  OB0BS65();

     /* edit PF7/PF8*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    OB0BS67();
  end


     /* edit selection flag*/

  if (OBWREC.OBWERRFL == "N") /* no errors found to this point*/
    OB0BS62();
  end

end // end OB0BS60

// edit select codes
Function OB0BS61()

    /* compare select codes on screen with temp storage,*/
      /* if they are equal - OK*/
    /* if user entered ' ' or 'S'  -  OK*/
      /* other select options are errors.*/

  if (OBAREC.OBAMSEL[OBWTSF1S] == OB0BM001.OBAMSEL[OBWTSF1S])
     /* next sentence*/
  else
    if (OB0BM001.OBAMSEL[OBWTSF1S] == " " /* blank*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "S" /* selection made*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "V" /* item viewed*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "U" /* item viewed*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "E" /* edit selection*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "D" /* apply cust defaults*/
     || OB0BM001.OBAMSEL[OBWTSF1S] == "H" /* insert csr hold*/
     || OB0BM001.OBAMSEL[1] == "A")       /* selection made (all)*/
                                  /* next sentence*/
    else
      OBWREC.OBWERRFL = "Y"; /* set err flag*/
      converseLib.validationFailed(083); /* select option invalid - enter 's'*/
      set OB0BM001.OBAMSEL[OBWTSF1S] cursor, bold;
    end
  end

  if (OB0BM001.OBAMSEL[OBWTSF1S] == "S" /* selection made*/
   || OB0BM001.OBAMSEL[OBWTSF1S] == "E" /* edit selection*/
   || OB0BM001.OBAMSEL[OBWTSF1S] == "D" /* apply cust defaults*/
   || OB0BM001.OBAMSEL[OBWTSF1S] == "H" /* insert csr hold*/
   || OB0BM001.OBAMSEL[1] == "A")       /* all selection made*/
    OB0BW01.OB0BWSEL = "Y"; /* set select flag*/
  end

end // end OB0BS61

// edit selection/transfer
Function OB0BS62()


     /* if nothing selected, display error*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || OB0BM001.OBWTSF1P != OBWREC.OBWTSF1P) /* page nbr chgd*/
    if (OB0BW01.OB0BWSEL == "Y") /* selections made*/
      converseLib.validationFailed(097); /* cant page and select*/
      OBWREC.OBWERRFL = "Y"; /* err flag*/
      OB0BM001.OBWTSF1P = OBWREC.OBWTSF1P; /* reset with original*/
      set OB0BM001.OBWTSF1P cursor, bold;
    end

  else
    if (OB0BW01.OB0BWSEL == "N") /* not paging and no selections made*/
      converseLib.validationFailed(090); /* pfkey requires selection, enter 'S'*/
      OBWREC.OBWERRFL = "Y"; /* err flag*/
    end
  end

end // end OB0BS62

// edit page number
Function OB0BS65()

  if (OB0BM001.OBWTSF1P < 1 /* page must be within valid range*/
   || OB0BM001.OBWTSF1P > OBWREC.OBWTSF1M)
    OBWREC.OBWERRFL = "Y"; /* set error*/
    converseLib.validationFailed(084);
                                   /* page number must be between 1 and max*/
    set OB0BM001.OBWTSF1P cursor, bold;
    OB0BM001.OBWTSF1P = OBWREC.OBWTSF1P; /* recall valid page*/
  end

end // end OB0BS65

// edit pf7/pf8
Function OB0BS67()

  if (converseVar.eventKey is pf7
   && OB0BM001.OBWTSF1P == 1) /* at first page*/
    OBWREC.OBWERRFL = "Y"; /* set error*/
    converseLib.validationFailed(086); /* cant scroll backward*/
  end


  if (converseVar.eventKey is pf8
   && OB0BM001.OBWTSF1P >= OBWREC.OBWTSF1M) /* at max page*/
    OBWREC.OBWERRFL = "Y"; /* set error*/
    converseLib.validationFailed(087); /* cant scroll forward*/
  end


  if (OB0BM001.OBWTSF1P != OBWREC.OBWTSF1P) /* pf7/pf8 and pg chg*/
    OBWREC.OBWERRFL = "Y"; /* set error*/
    converseLib.validationFailed(085); /* cant scroll and chg pg number*/
    set OB0BM001.OBWTSF1P cursor, bold;
    OB0BM001.OBWTSF1P = OBWREC.OBWTSF1P; /* reset page number*/
  end

end // end OB0BS67

// update for converse
Function OB0BS70()

      /* move all selections from map to temp storage*/
      /* then process first selection using temp storage*/


  OB0BS74(); /* check for 'all' selection*/

  OBWREC.OBWTSF1S = 1; /* init subscript*/
  while (OBWREC.OBWTSF1S <= 12) /* max orders per page*/
    if (OBAREC.OBAMSEL[OBWTSF1S] == "X"
     || OBAREC.OBAMSEL[OBWTSF1S] == "W")
      if (OB0BM001.OBAMSEL[OBWTSF1S] == "S"
       || OB0BM001.OBAMSEL[OBWTSF1S] == "E"
       || OB0BM001.OBAMSEL[OBWTSF1S] == "D"
       || OB0BM001.OBAMSEL[OBWTSF1S] == "H")
        OBAREC.OBAMSEL[OBWTSF1S] = OB0BM001.OBAMSEL[OBWTSF1S];
      end
    else
      OBAREC.OBAMSEL[OBWTSF1S] = OB0BM001.OBAMSEL[OBWTSF1S];
    end
    OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1;
  end

  XSOBT1U(); /* update temp storage with selections*/

  if (OB0BW01.OB0BWSEL == "Y") /* selection was made*/
    OBWREC.OBWTSF1S = 1; /* init subscript*/
    while (OBWREC.OBWTSF1S <= 12) /* max orders per page*/
      if (OBAREC.OBAMSEL[OBWTSF1S] == "S" /* order selected*/
       || OBAREC.OBAMSEL[OBWTSF1S] == "E" /* order selected*/
       || OBAREC.OBAMSEL[OBWTSF1S] == "D" /* order selected*/
       || OBAREC.OBAMSEL[OBWTSF1S] == "H") /* order selected*/
        OB0BS40(); /* main update*/
        OB0BS73(); /* move requested appl to obwrec*/
        return; /* get out with current subscript*/
      end
      OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1;
    end
  end

end // end OB0BS70

// move requested appl to obwrec
Function OB0BS73()

    /* if several orders were selected, and a PFkey was used,*/
    /* save the PFkey application in the OBWOB0B to continue to*/
    /* transfer to the application for each selected order.*/

  if (converseVar.eventKey is enter) /* customer screen*/
    OBWREC.OBWOB0B = "OB0C";
  else
    if (converseVar.eventKey is pf9) /* product summary*/
      OBWREC.OBWOB0B = "OB0F";
    else
      if (converseVar.eventKey is pf17) /* order errors*/
        OBWREC.OBWOB0B = "OB0L";
      else
        if (converseVar.eventKey is pf19) /* order holds*/
          OBWREC.OBWOB0B = "OB0M";
        end
      end
    end
  end
end // end OB0BS73

// set all selections = 'S'
Function OB0BS74()


    /* TURN ON ALL SELECTIONS IF USER REQUESTS "A"*/

  if (OB0BM001.OBAMSEL[1] == "A") /* select all errors*/
    OBWREC.OBWTSF1S = 1; /* init subscript*/
    while (OBWREC.OBWTSF1S <= 12) /* less than or equal to 12*/
      if (OB0BM001.OBAMSEL[OBWTSF1S] == "*"
       || OBAREC.OBACUOID[OBWTSF1S] == 0)
         /* skip it*/
      else
        OB0BM001.OBAMSEL[OBWTSF1S] = "S"; /* turn on selections*/
      end
      OBWREC.OBWTSF1S = OBWREC.OBWTSF1S + 1; /* increment by +1*/
    end
  end


end // end OB0BS74

// build record to pass to db2
Function OB0BSB1()


   /* build record to pass to select order messages*/


  set OB7REC empty;


  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/



   /* *************************************************************/
end // end OB0BSB1

// build obf2 - error msgs
Function OB0BSB2()



   /* load temp storage 2 - obf2*/

  OBBREC.OBBMSEL[OBWTSF2S] = OB7REC.OB7MSGRF;
  OBBREC.OB6MSGNB[OBWTSF2S] = OB7REC.OB6MSGNB; /* message number*/
  OBBREC.OP2LNINB[OBWTSF2S] = OB7REC.OP2LNINB; /* line item nbr*/

    /* the message desc file tells the msg desc and the appl name*/
    /* where the err can be fixed*/

  OBBREC.OB6MSGDS[OBWTSF2S] = OB6REC.OB6MSGDS; /* move desc*/
  OBBREC.XXXPGMNO[OBWTSF2S] = OB6REC.XXXPGMNO; /* move pgm nbr*/

    /* lookup the program abrv from the OBMTBL table*/

  sysVar.arrayIndex = 1;
  if (OB6REC.XXXPGMNO in OBMTBL.XXXPGMNO) /* pgm nbr key*/
    OBBREC.XXXPGMAB[OBWTSF2S] = OBMTBL.XXXPGMAB[sysVar.arrayIndex];
  else
    OBBREC.XXXPGMAB[OBWTSF2S] = " ";
  end

   /* *************************************************************/
end // end OB0BSB2

// build obf3 - hold msgs
Function OB0BSB3()



   /* load temp storage 3 - obf3*/

   /* screened style releases show either an 'a' or 'u', meaning*/
   /* authorized to get blank availability or unauthorized for blank*/
   /* avail because we're now past the xow program cutoff date.*/
   /* these codes are used by ob1060 to process availability properly.*/

  if (OB7REC.OB7MSGRF == "A"
   || OB7REC.OB7MSGRF == "U")
    OBCREC.OBCMSEL[OBWTSF3S] = "R";
  else
    OBCREC.OBCMSEL[OBWTSF3S] = OB7REC.OB7MSGRF;
  end

  if (OB7REC.OB6MSGNB == "281") /* if csr hold exists for order,*/
    OBWREC.OBW-CSR-HOLD-FL = "Y"; /* set flag*/
  end

  OBCREC.OB6MSGNB[OBWTSF3S] = OB7REC.OB6MSGNB; /* message number*/
  OBCREC.OP2LNINB[OBWTSF3S] = OB7REC.OP2LNINB; /* line item nbr*/
  OBCREC.OB7MSGRF[OBWTSF3S] = OB7REC.OB7MSGRF; /* release flag*/


  OBCREC.OB6MSGDS[OBWTSF3S] = OB6REC.OB6MSGDS; /* move desc*/
  OBCREC.XXXPGMNO[OBWTSF3S] = OB6REC.XXXPGMNO; /* move pgm nbr*/

    /* lookup the program abrv from the OBMTBL table*/

  sysVar.arrayIndex = 1;
  if (OB6REC.XXXPGMNO in OBMTBL.XXXPGMNO) /* pgm nbr key*/
    OBCREC.XXXPGMAB[OBWTSF3S] = OBMTBL.XXXPGMAB[sysVar.arrayIndex];
  else
    OBCREC.XXXPGMAB[OBWTSF3S] = " ";
  end

   /* *************************************************************/
end // end OB0BSB3

// build record to pass to db2
Function OB0BSB4()


   /* build record to pass to select order errors*/


  set OB2REC empty;


  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/


   /* *************************************************************/
end // end OB0BSB4

// build obf4 - items for order
Function OB0BSB5()



   /* load temp storage 4 - obf4*/

  OBDREC.OBDMSEL[OBWTSF4S] = " ";
  OBDREC.OP2LNINB[OBWTSF4S] = OB2REC.OP2LNINB; /* line item nbr*/
  OBDREC.OP2TONOQ[OBWTSF4S] = OB2REC.OP2TONOQ; /* total qty*/
  OBDREC.OP2AUPRC[OBWTSF4S] = OB2REC.OP2AUPRC; /* avg unit prc*/
  OBDREC.OP2CGPCD[OBWTSF4S] = OB2REC.OP2CGPCD; /* coor grp*/

     /* read style/color file for short style nm and color abrv*/

  if (OB2REC.SY1STNBR == " ") /* style nbr not translated*/
    OBDREC.OBDPRD[OBWTSF4S] = OB2REC.CU-CUST-PROD-ID; /* cust style*/
    OBDREC.OBDPRDNM[OBWTSF4S] = "UNKNOWN CUST";
    OBDREC.SY2CLRAB[OBWTSF4S] = "PRODUCT ";
  else
    OBDREC.SY1STNBR[OBWTSF4S] = OB2REC.SY1STNBR; /* style number*/
    OBDREC.OBDPER1[OBWTSF4S] = "-"; /* period*/
    OBDREC.SY2CLRID[OBWTSF4S] = OB2REC.SY2CLRID; /* color id*/
    OBDREC.OBDPER2[OBWTSF4S] = "-"; /* period*/
    OBDREC.XDMCD[OBWTSF4S] = OB2REC.XDMCD; /* dimension*/
    OB0BSS4(); /* read db2 style and color nms*/
  end

  OB0BS15();
                                   /* see if errors or holds exist for item*/

   /* *************************************************************/
end // end OB0BSB5

// close msg set
Function OB0BSC1()


   /* close scan*/

  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("CS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "CS      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OB1240  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0BSC1 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* statement group*/
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0BSC1

// close itm set
Function OB0BSC2()


   /* close scan*/

  set SQLCA empty;
  set SQLCA empty;

  OBKREC.OBKTASK = "C1"; /* close set*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close  scan*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "C1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0BSC2 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra space*/
    XSOBEDC(); /* abort routine - no reset done*/
  end



   /* *************************************************************/
end // end OB0BSC2

// load & write obf2 - err msgs
Function OB0BSL1()



   /* load and write temp storage 2 - obf2*/

  set OBBREC empty; /* init temp storage record*/

  OBWREC.OBWTSF2S = 1; /* init sub to first message*/

  while (OBWREC.OBWTSF2S <= 11
   && OB0BW01.OB0BWEOF == "N")

    OB0BSB2(); /* build temp storage 2*/
    OBWREC.OBWTSF2S = OBWREC.OBWTSF2S + 1; /* increment storage sub*/

    OB0BSN1(); /* select next message*/

  end


   /* write temp storage 2*/

  XSOBT2W();



   /* *************************************************************/
end // end OB0BSL1

// load & write obf3 - holds
Function OB0BSL2()



   /* load and write temp storage 3 - obf3*/

  set OBCREC empty; /* init temp storage record*/

  OBWREC.OBWTSF3S = 1; /* init subscript to first message*/

  while (OBWREC.OBWTSF3S <= 11
   && OB0BW01.OB0BWEOF == "N")

    OB0BSB3(); /* build temp storage 3*/
    OBWREC.OBWTSF3S = OBWREC.OBWTSF3S + 1; /* increment storage sub*/

    OB0BSN1(); /* select next message*/

  end


   /* write temp storage 3*/

  XSOBT3W();



   /* *************************************************************/
end // end OB0BSL2

// load & write obf4 - items
Function OB0BSL3()



   /* load and write temp storage 4 - obf4*/

  set OBDREC empty; /* init temp storage record*/

  OBWREC.OBWTSF4S = 1;

  while (OBWREC.OBWTSF4S <= 10
   && OB0BW01.OB0BWEOF == "N")

    OB0BSB5(); /* build temp storage 4*/
    OBWREC.OBWTSF4S = OBWREC.OBWTSF4S + 1; /* increment storage sub*/

    OB0BSN2(); /* select next item*/

  end


   /* write temp storage 4*/

  XSOBT4W();



   /* *************************************************************/
end // end OB0BSL3

// select next for obf2 - msgs
Function OB0BSN1()



   /* select next message for loading temp storage 2 and 3*/
            /* obf2 - errors and  obf3 - holds*/


  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("SN", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0BW01.OB0BWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "SN      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1240  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0BSN1 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OB7REC.OB7MSGTP; /* msg type*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWER911 = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0BSN1

// select next for obf4 - items
Function OB0BSN2()



   /* select next item for loading temp storage 4 - obf4*/


  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "N1"; /* select next*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0BW01.OB0BWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0BSN2 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWERRFL = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end





   /* *************************************************************/
end // end OB0BSN2

// Edit pfkeys for OB0B
Function OB0BSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf2)
    XSOBP02();
  end

  if (converseVar.eventKey is pf3)

    XSOBT1P(); /* purge orders*/
    XSOBT2P(); /* purge errors*/
    XSOBT3P(); /* purge holds*/
    XSOBT4P(); /* purge items*/
    XSOBT5P(); /* purge comments*/


    COMMAREA.CATOAP = "OB0A"; /* Order Inquiry parms*/
    XSEXIT();

  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (OBWREC.OBWERRFL == "N")
      XSOBP00(); /* restarts application*/
    end
  end

  if (converseVar.eventKey is pf9
   && OBWREC.OBWERRFL == "N")
    XSOBP09();
  end

  if (converseVar.eventKey is pf17
   && OBWREC.OBWERRFL == "N")
    XSOBP17();
  end

  if (converseVar.eventKey is pf19
   && OBWREC.OBWERRFL == "N")
    XSOBP19();
  end


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf19)
     /* next sentence - there may be errors*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end

  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N")
    XSOBP06();
  end


end // end OB0BSPF

// get msgs to display
Function OB0BSS1()


   /* get all the error msgs for the order*/

  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("SS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "SS      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OB1240  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0BSS1 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = OB7REC.OB7MSGTP; /* msg type*/
    if (SQLCA.VAGen_SQLCODE == -911)
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* -911 processing, no rollback*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0BSS1

// get order items to display
Function OB0BSS3()


   /* get all the items for the order*/

  set SQLCA empty;
  set OBKREC empty; /* task record*/

  OBKREC.OBKTASK = "S1"; /* select task*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0BSS3 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



   /* *************************************************************/
end // end OB0BSS3

// get style and color nms
Function OB0BSS4()



    /* get style and color names*/

  set SYCREC empty;
  set SQLCA empty;


  SYCREC.SY1STNBR = OB2REC.SY1STNBR; /* style number*/
  SYCREC.SY2CLRID = OB2REC.SY2CLRID; /* color id*/
  SYCREC.XDMCD = OB2REC.XDMCD; /* dimension*/
  SYCREC.XGPCD = OB2REC.XGPCD; /* gpc*/


   /* read dprod.vcolor02*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OBDREC.OBDPRDNM[OBWTSF4S] = SYCREC.SY1SSTNM; /* move short nm*/
    OBDREC.SY2CLRAB[OBWTSF4S] = SYCREC.SY2CLRAB; /* move colr abrv*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* product not found*/
      OBDREC.OBDPRDNM[OBWTSF4S] = "INVALID PRODUCT";
      OBDREC.SY2CLRAB[OBWTSF4S] = "     ";
    else
      TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0560  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0BSS4 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OB2REC.SY1STNBR; /* style nbr*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBDREC.OBDPRDNM[OBWTSF4S] = "PRODUCT BUSY";
        OBDREC.SY2CLRAB[OBWTSF4S] = "     ";
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end




end // end OB0BSS4

// see if msgs exist for item
Function OB0BSS5()


   /* see if error or hold messages exist for item*/

  set SQLCA empty;

  OBKREC.OBKTASK = "SE";

  call "IO5210" (OBKREC, SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code in calling stmnt group*/

   /* *************************************************************/
end // end OB0BSS5

// select store name
Function OB0BSS6()


    /* get store name*/

  set KUMREC empty;
  set SQLCA empty;

  KUMREC.KUCCOID = OB1REC.KUCCOID; /* load key - company*/
  KUMREC.KUMSTRID = OB1REC.KUMSTRID; /* load key - store*/
  KUMREC.XGPCD = OB1REC.XGPCD; /* load key - gpc*/

   /* read dcust.vstore01*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OBWREC.KUMSTRNM = KUMREC.KUMSTRNM; /* move to obwrec*/
  else
    OBWREC.KUMSTRNM = "UNKNOWN   "; /* this name will be moved*/
  end


end // end OB0BSS6

// read sales agency name
Function OB0BSS7()

    /* get agency name*/

  set SM1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OBWREC.SM1AGYID; /* load key - gpc*/

   /* read dslsmn.vsagcy01*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* check db2 return code*/


  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OB0BM001.SM1AGYNM = SM1REC.SM1AGYNM; /* move to obwrec*/
  else
    OB0BM001.SM1AGYNM = "UNKNOWN   "; /* this name will be moved*/
  end


end // end OB0BSS7

// format sales rep name
Function OB0BSS8()

    /* get sales rep name (initial and last name) and*/
    /* move to screen*/

  set VRAGCY02 empty;
  set SQLCA empty;
  VRAGCY02.SM4REPID = OB0BM001.SM4REPID;
  VRAGCY02.SM1AGYID = OB0BM001.SM1AGYID;

  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    OB0BM001.OB0BMREP = "UNKNOWN";
    return;
  end

  call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

      /* reformat repname into the map*/

    OB0BW01.OB0BWREP = VRAGCY02.XXXFSTNM;
    OB0BW01.OB0BWSPA = " "; /* put space after first name initial*/
    OB0BW01.XXXLSTNM = VRAGCY02.XXXLSTNM;
    OB0BM001.OB0BMREP = OB0BW01.OB0BWREP; /* move reformatted name to map*/

  else
    OB0BM001.OB0BMREP = "UNKNOWN";
  end

  call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};

end // end OB0BSS8

// OB SYSTEM - HANDLE PF2
Function XSOBP02()

   /* Transfer to Order Processing Master Menu*/

   /* purge all temp storage first*/

  XSOBT1P(); /* purge orders*/
  XSOBT2P(); /* purge errors*/
  XSOBT3P(); /* purge holds*/
  XSOBT4P(); /* purge items*/
  XSOBT5P(); /* purge comments*/

  COMMAREA.CATOAP = "OP0M";
  XSEXIT();

end // end XSOBP02

//*** RECORD=OB0BW01 ****
//     working storage record for OB0B.
// 
// ************************************************************
// *    MAINTENANCE LOG
// ************************************************************
// 
//   06/05/90    skott      initial creation
// ***********************
Record OB0BW01 type basicRecord
  10 OB0BWSEL OB0BWSEL ; 
  10 OB0BWERR OB0BWERR ; 
  10 OB0BWEOF OB0BWEOF ; 
  10 OB0BWREP OB0BWREP ; 
    15 * char(1) ; 
    15 OB0BWSPA OB0BWSPA ; 
    15 XXXLSTNM XXXLSTNM ; 
end // end OB0BW01

// temp storage end of file
DataItem OB0BWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage error flag
DataItem OB0BWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted rep name
DataItem OB0BWREP char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection made flag
DataItem OB0BWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// move space here
DataItem OB0BWSPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

