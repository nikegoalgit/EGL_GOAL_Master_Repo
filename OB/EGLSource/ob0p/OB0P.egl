package ob0p;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ww.common.*;
//*** PROGRAM=OB0P ****
// ;
// OVERVIEW:  This map displays the selected product, the size,
//    the quantity ordered, and the price for each size.  It is
//    not in the mainstream of the system, but is reached by
//    pressing PF22 from other product level screens.  When
//    enter is pressed, the system will flow to the Product
//    Summary Screen.
// 
// ***********************************************************
// *          M A I N T E N A N C E     L O G                *
// ***********************************************************
// *
// *  DATE       NAME              DESCRIPTION
// *
// * 06/22/90   SKOTT    initial creation
// * 02/15/91   dmeier   regen for database changes
// * 03/20/91   swatso   replaced source of product descript
// *                     on map to short style nbr + style
// *                     color abbrev.  Modified s23 and w01.
// * 03/20/92   tmorri   modified 010 and s26 - updates not
// *                     allowed for order status 'cl' or 'ca'.
// * 03/03/93   clenni   modified s26 added department edit
// *                     modified ob0pw01 record to have key
// *                     added ob0ps-spgm-dept-cd sg
// * 02/21/94   craine   db2 changes - w01 record, opdrec
// * 05/19/94   scantr   virtual airspeed project: chgd obwrec,
// *                     xsobs02, xsobs03, added xsobs10
// * 05/24/94   scantr   changed xsobs03
// * 06/15/94   craine   change to call relational edit
// * 08/18/94   craine   changes to xsobs-limited-edit,
// *                     xsobs-full-edit.
// * 08/30/94   craine   changes to xsobs-full-edit, and block
// *                     block 'dl' and 'ld' orders from update
// * 09/06/94   craine   change to obwrec
// * 09/29/94   craine   chg ob0p010 to set obw-edit-function
// *                     to '5' for the relational edit.
// * 10/06/94   craine   add new xsobs-add-new-oba
// * 10/26/94   schase   change to obwrec
// * 01/30/94   craine   chg to xsobs-upd-oba-edit
// * 04/27/95   craine   allow for new yobcd 'pd' and 'lp'.
// * 08/01/95   DLIDDL   Modified to incorporate Nike Canada
// *                     into AIRSPEED - OB0PS23.
// * 08/07/95   CRAINE   Database changes.
// * 06/03/97   rgilli   YR2000 - Regen to ensure correct ver.
// *                              of xx0xs01 is included.
// * 08/11/97   dsmit0   chgd the ob0p010 member to correct the
// *                     cursor placement if size chgd.
// *********************
Program OB0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  OB0PW01 OB0PW01; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB3REC OB3REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFEREC OBFEREC; // record
  OBFREC OBFREC; // record
  OBHREC OBHREC; // record
  OBLEREC OBLEREC; // record
  OBSFREC OBSFREC; // record
  OBWREC OBWREC; // record
  OBZREC OBZREC; // record
  SP0UW02 SP0UW02; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WOZ2090 WOZ2090; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOATBL; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use OB0PM.OB0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0P000: OB0P000();
    goto OB0P010;
    OB0P010: OB0P010();
    goto OB0P010;
  end // end main
end // end OB0P

// execute process for pricing
Function OB0P000()
     /* Check csp and order batch security*/

  XSENTRY();
  XSOBS01();

     /* Initialize application - init records, get zz date/time,*/
                              /* save map name for XSOBE## sgrp's*/
  OB0PS01();

     /* Set -911 processing flag*/

  OBWREC.OBWER911 = "N";

     /* Determine if batch edit is running*/

  XSOBS02();

     /* Read current order header*/

  XSOBS03();


     /* Display commarea message*/

  OB0PM001.CAMSG = OBWREC.CAMSG;
  OBWREC.CAMSG = " ";


     /* Build map for display*/

  OB0PS05();


end // end OB0P000

// pricing converse process
Function OB0P010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  if (COMMAREA.CAFROMAP == "OM0G")
    COMMAREA.CAFROMAP = " ";
    set OB0PM001.XOMCD cursor;
  end

  converse OB0PM001 ;

     /* Init error stuff*/

  OBWREC.OBWERRFL = "N";
  converseLib.validationFailed(0);
  OBWREC.OBWHELP = OB0PM001.CAMSG; /* save for help screen*/
  OB0PM001.CAMSG = " ";


     /* Reset field attributes*/

  OB0PS26();


     /* Edit map(no matter what pfkey is used)*/

  if (OB1REC.YOBCD != "CA" /* not cleared availability*/
   && OB1REC.YOBCD != "LP" /* not lost demand reported*/
   && OB1REC.YOBCD != "PD") /* not postponed demand reported*/
    OB0PS30(); /* edit*/

    if (OBWREC.OBWERRFL == "N")
      if (OB0PW01.OB0PWCHG == "Y" /* value was changed*/
       && converseVar.eventKey is enter)
        OB0PS50(); /* update item/header*/
        OBWREC.OBW-EDIT-FUNCTION = "5";
        XSOBS-ONLINE-EDIT(); /* relational edits*/
      end
    end
  end


     /* Edit PF Keys*/

  OB0PSPF();

end // end OB0P010

// update ocd size item
Function OB0PS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/

  set WOZ2090 empty;

  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OB1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OB1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OB1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OBWREC.OBWLNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OB0PM001.XOMCD;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OB";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = OB0PM001.SOCD-HDR-RSN-TXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;


  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};


  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(238);
  end

end // end OB0PS-CALL-OZ2090

// EDIT CHANGE RSN CODE
Function OB0PS-EDIT-CHG-RSN()

   /* check for a valid change reason code*/


  if (OB0PM001.XOMCD != "  ")
      /* test for a valid change code*/
    if (OB0PM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active maint reason*/
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" /* add product reason*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B" /* both add/decrease*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D") /* decrease product reason*/
         /* next sentence*/
      else
        OBWREC.OBWERRFL = "Y"; /* set error flg*/
        converseLib.validationFailed(234); /* rsn not valid for change*/
        set OB0PM001.XOMCD cursor, bold;
      end
    else
      OBWREC.OBWERRFL = "Y"; /* set error flg*/
      converseLib.validationFailed(234); /* rsn not valid*/
      set OB0PM001.XOMCD cursor, bold;
    end
  else
    OBWREC.OBWERRFL = "Y"; /* set error flg*/
    converseLib.validationFailed(232); /* change reason required*/
    set OB0PM001.XOMCD cursor, bold;
  end



end // end OB0PS-EDIT-CHG-RSN

// check size prices
Function OB0PS-EDIT-XOMCD()

   /* IF ANY ERROR ALREADY EXIST RETURN*/

  if (OBWREC.OBWERRFL == "Y")
    return;
  end


    /* if any price has changed require change reason*/

  if (OB0PW01.OB0PWCHG == "Y")
    OB0PS-EDIT-CHG-RSN();
  end

end // end OB0PS-EDIT-XOMCD

// move footings
Function OB0PS-LDFTG-OBZREC()

     /* move literal for second row of sizes, these may be set*/
     /* dark later*/

  OB0PM001.OB0PMSZL = "SIZE:"; /* size literal*/
  OB0PM001.OB0PMQTL = "QTY:"; /* qty literal*/
  OB0PM001.OB0PMPRL = "PRICE:"; /* price literal*/
  OB0PM001.OB0PMOVL = "OVRD:"; /* override literal*/

  OB0PM001.CAMSG = OBZREC.CAMSG;
  OB0PM001.VAGen_EZEMSG = OBZREC.ERRMSG;

   /* if there is more than one page of sizes, set the more*/
   /* sizes flag to 'y', otherwise 'n'.*/

  if (OB0PW01.SY4IDDSC[21] == " ") /* if 20 or fewer sizes*/
    OB0PM001.OB0PMMOR = "N"; /* more sizes flag*/
  else
    OB0PM001.OB0PMMOR = "Y"; /* more sizes flag*/
  end


  OB0PM001.OB0PMPAL = OBZREC.OP-AVG-UN-PRC; /* average unit price*/
  OB0PM001.OB0PMPAJ = OBZREC.OP-PRC-ADJ; /* price adjustment*/

  OB0PM001.SP1ID = OB1REC.SP1ID; /* sales pgm*/

  OB0PM001.OB2CAUPR = OB3REC.OB2CAUPR; /* customer price*/

   /* total trade discount face percent and direct ship discount percent*/
   /* to get percent discounted from NIKE price*/

  OB0PW01.OB0PW-DSCT-PCT = OB1REC.OP-DIRSHP-DSCT-PCT + OB1REC.OP1TDFCP;
  OB0PW01.OB0PW-DSCT-PCT = OB0PW01.OB0PW-DSCT-PCT / 100;
  OB0PW01.OB0PW-NET-PCT = 1 - OB0PW01.OB0PW-DSCT-PCT; /* subtract from 1*/
  OB0PW01.OB0PW-NET-PRICE = mathLib.round((OB3REC.OP2AUPRC * OB0PW01.OB0PW-NET-PCT), -mathLib.decimals(OB0PW01.OB0PW-NET-PRICE)); /* mult by avg unit prc*/
  OB0PM001.OB0PM-NET-PRICE = OB0PW01.OB0PW-NET-PRICE; /* net prc to mp*/

  OB0PM001.XOACD = OBZREC.XOACD; /* override authority*/

     /* check for invalid sizes*/
  OB0PS2A();

    /* check for unpriced sizes*/
  OB0PS2C();

end // end OB0PS-LDFTG-OBZREC

// move size data
Function OB0PS-LDPRC-OBZREC()

   /* move price, qty, override flag, decs for each size*/
  OBZREC.OBZGROUP = COMMAREA.CA-USER-WORKAREA-2K-C;
  OB0PS03(); /* determine subscripts*/

  OB0PW01.OB0PWMSU = 1;
  OB0PW01.OB0PWRSU = 1;
  while (OB0PW01.OB0PWMSU <= 20
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* no more valid sizes*/
    OB0PM001.SY4IDDSC[OB0PWMSU] = OB0PW01.SY4IDDSC[OB0PWRSU];
    OB0PM001.OP3ONOQT[OB0PWMSU] = OB0PW01.OP3ONOQT[OB0PWRSU];
    OB0PM001.SY5PRCUN[OB0PWMSU] = OBZREC.SY5PRCUN[OB0PWMSU];
    OB0PM001.OP3PRCOF[OB0PWMSU] = OB0PW01.OP3PRCOF[OB0PWRSU];
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

end // end OB0PS-LDPRC-OBZREC

// move footings
Function OB0PS-SAVMAP-FTG()

     /* move fields to obzrec*/

  OBZREC.OP-AVG-UN-PRC = OB0PM001.OB0PMPAL; /* average unit price*/
  OBZREC.OP-PRC-ADJ = OB0PM001.OB0PMPAJ; /* price adjustment*/
  OBZREC.XOACD = OB0PM001.XOACD; /* override authority*/

  OBZREC.CAMSG = OB0PM001.CAMSG;
  OBZREC.ERRMSG = OB0PM001.VAGen_EZEMSG;

  COMMAREA.CA-USER-WORKAREA-2K-C = OBZREC.OBZGROUP;

end // end OB0PS-SAVMAP-FTG

// move size data
Function OB0PS-SAVMAP-PRC()

   /* move price to obzrec*/

  set OBZREC empty; /* determine subscripts*/

  OB0PW01.OB0PWMSU = 1;
  while (OB0PW01.OB0PWMSU <= 20)
    OBZREC.SY5PRCUN[OB0PWMSU] = OB0PM001.SY5PRCUN[OB0PWMSU];
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
  end

end // end OB0PS-SAVMAP-PRC

// get sales pgm record
Function OB0PS-SPGM-DEPT-CD()


      /* *************************************************/
      /* this statement group does a call to IO0070 to*/
      /* get the nike department code*/
      /* *************************************************/

  set SQLCA empty; /* input to IO0070 iomod*/
  set SP1REC empty; /* need the department code*/

  SP1REC.SP1ID = OB1REC.SP1ID; /* key for sp1rec in io0070 call*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* obtain dept code*/

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* the sales pgm was not found*/
      OB0PW-SPGM-NOT-FOUND-FL = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(145); /* database busy, please try again*/
        exit stack;
      else
        TA1REC.TA1PGMNM = "OB0P";
        TA1REC.TA1DBASE = "DSPGM";
        TA1REC.TA1TBLVU = "VSPGM001";
        OB0PW01.OB0PW-SAY-ORDER = "ORDER # ";
        OB0PW01.OB0PW-ORDER-NUM = OB1REC.OP1CUOID;
        OB0PW01.OB0PW-SAY-PERIOD = ".";
        OB0PW01.OB0PW-SUB-ORDER = OB1REC.OP1NORID;
        OB0PW01.OB0PW-SAY-SPGM = "  SPGM ";
        OB0PW01.OB0PW-SPGM = OB1REC.SP1ID;
        TA1REC.TA1TBLKE = OB0PW-TABLE-KEY;
        TA1REC.TA1LOC = "OB0PS-SPGM-DEPT-CD";
        TA1REC.TA1LOCAT[4] = "IO0070";
        TA1REC.TA1MAPAP = "OB0P";
        TA1REC.TA1TYPE = "DB2"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        set ERRSQLCA empty; /* clear area*/
        move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* abend module*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program; /* master menu failure*/

   /* *************************************************************/
      end
    end
  end


end // end OB0PS-SPGM-DEPT-CD

// initialize everything
Function OB0PS01()

  set OBAREC empty; /* order temp storage*/
  set OBBREC empty; /* errors temp storage*/
  set OBCREC empty; /* holds temp storage*/
  set OBDREC empty; /* items temp storage*/
  set OBEREC empty; /* comments storage*/
  set OBFREC empty; /* header parm record*/
  set OBHREC empty; /* size passing record*/
  set OBFEREC empty; /* OB1670 passing record*/
  set OBLEREC empty; /* OB1680 passing record*/
  set OBSFREC empty; /* size formatter passing record*/
  set OB1REC empty; /* header record*/
  set OB2REC empty; /* item record*/
  set OB3REC empty; /* item/size  record*/
  set OB8REC empty; /* obpgm file*/
  set KUCREC empty; /* customerile*/
  set SYCREC empty; /* product file*/
  set SQLCA empty; /* return code from DB2*/
  set ERRSQLCA empty; /* return code from non-db2*/
  set TAEREC empty; /* diags for non db2*/
  set TA1REC empty; /* diagnostic record*/
  set TA5REC empty; /* temp storage io- record*/
  set OB0PW01 empty; /* working storage*/
  set XX0XW01 empty; /* working storage for date rtn*/

  set OB0PM001 empty; /* map*/

  COMMAREA.CAFROMAP = "OB0P";
  TA1REC.TA1MAP = "OB0PM001"; /* map name for diags*/

  XX0XS01(); /* get current date, time for updates*/
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change date*/

end // end OB0PS01

// set subscript
Function OB0PS03()

    /* initialize record and map subscript according to page*/
    /* number.*/

  if (OB0PW01.OB0PWPAG == 1) /* current page = 1*/
    OB0PW01.OB0PWRSU = 1; /* init record sub*/
  else
    OB0PW01.OB0PWRSU = 21; /* init record sub for page 2*/
  end

  OB0PW01.OB0PWMSU = 1; /* init map sub*/


end // end OB0PS03

// set subscript bottom to top
Function OB0PS04()

    /* initialize record and map subscript to look at map*/
    /* from the bottom up.*/

  if (OB0PW01.OB0PWPAG == 1) /* current page = 1*/
    OB0PW01.OB0PWRSU = 20; /* init record sub*/
  else
    OB0PW01.OB0PWRSU = 40; /* init record sub for page 2*/
  end

  OB0PW01.OB0PWMSU = 20; /* init map sub*/


end // end OB0PS04

// build map
Function OB0PS05()

      /* read all database records*/

  OB0PS10();


      /* load work record with ob3rec info*/

  OB0PS21();


     /* build map*/

  OB0PS22();

     /* reset field attributes*/

  OB0PS26();

end // end OB0PS05

// read database records
Function OB0PS10()

      /* read database records for later processing*/

     /* read ob3rec*/
  OB0PS11();

     /* read sycrec*/
  OB0PS12();

     /* read kucrec*/
  OB0PS13();

     /* read valid sizes for product*/
  OB0PS14();

end // end OB0PS10

// read item/size
Function OB0PS11()

      /* use OB1690 to read the OB3REC*/

  set OBSFREC empty;
  set OB3REC empty;
  set SQLCA empty;

  OB3REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB3REC.OP1CUOID = OB1REC.OP1CUOID; /* customer order id*/
  OB3REC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/
  OB3REC.OP2LNINB = OBWREC.OBWLNINB; /* line item number*/

  OBSFREC.OBSF-TASK = "S ";
  OBSFREC.OBSF-CALLER-LOC-1 = "OB0PS11 ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "S       ";
  OBSFREC.OBSF-CALLING-APPL = "OB0P";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0) /* good return*/
     /* continue*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* no item record*/
      OBWREC.CAMSG = "CANNOT FIND ITEM SELECTED";
      XSOBP99(); /* transfer to calling application*/
    else
      if (OBSFREC.OBSF-RETURN-CD == 11) /* or no sizes*/
        OBWREC.CAMSG = "CANNOT FIND SIZES FOR ITEM";
        XSOBP99(); /* transfer to calling application*/
      else
        if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
         || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
          TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
          TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
          TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
          TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
          TA1REC.TA1LOCAT[3] = "OB0PS11 "; /* statement group*/
          TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* return code*/
          TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
          XSOBS04(); /* 911 - no rollback*/
        else
          XSOBEDC(); /* retn - no rollback*/
        end
      end
    end
  end

end // end OB0PS11

// read product
Function OB0PS12()

     /* read sycrec*/

  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  SYCREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* ok - next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "PRICING CANNOT BE DONE FOR INVALID PRODUCT";
      XSOBP99(); /* transfer to calling application*/
    else
      TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0560  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0PS12 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = SYCREC.SY1STNBR; /* style nbr*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0PS12

// read customer record
Function OB0PS13()

    /* read company record KUCREC*/


  set KUCREC empty;
  set SQLCA empty;

  KUCREC.KUCCOID = OB1REC.KUCCOID; /* company number*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* ok - next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "PRICING CANNOT BE DONE FOR INVALID CUSTOMER";
      XSOBP99(); /* transfer to calling application*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0240  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0PS13 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* init to ' '*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0PS13

// read valid sizes for product
Function OB0PS14()

     /* check that system order type is present*/
  OB0PS15();

     /* use ob1700 to read valid sizes for product*/


  set OBHREC empty;

  OBHREC.OP1CUOID = OB1REC.OP1CUOID; /* customer*/
  OBHREC.XDVCD = OB1REC.XDVCD; /* division*/
  OBHREC.XOTCD = OB1REC.XOTCD; /* order type*/
  OBHREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBHREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OBHREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OBHREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "OB1700" (OBHREC) {isNoRefresh = yes, isExternal = yes};

  if (OBHREC.OBHRTNCD == 00) /* good return*/
     /* ok - next sentence*/
  else
    OBWREC.CAMSG = "CANNOT FIND SIZES FOR PRODUCT";
    XSOBP99(); /* transfer to calling application*/
  end


end // end OB0PS14

// check for system order type
Function OB0PS15()

     /* check for valid system order type before sizes are*/
       /* gathered.*/


  if (OB1REC.XOTCD == " ") /* order type is blank*/
    OBWREC.CAMSG = "NO SYSTEM ORDER TYPE - CANT GET SIZES FOR PROD";
    XSOBP99(); /* transfer to calling application*/
  end


end // end OB0PS15

// load work record from db
Function OB0PS21()

     /* this statement group loads some of the original fields to*/
   /* the working storage record.  Changes to prices are applied*/
   /* to the working storage record before updating the database.*/
   /* A subscript is kept for each size to correspond with the*/
   /* correct size on the database.*/


  OB0PWMSU = 1; /* initialize OB3/OBHREC subscript*/
  OB0PWRSU = 1; /* initialize work record subscript*/

  while (OB0PWMSU <= 40) /* only 40 sizes possible*/
    if (OB3REC.OP3ONOQT[OB0PWMSU] > 0 /* qty ordered*/
     && OBHREC.OBHSZDES[OB0PWMSU] != " ") /* valid size*/
      OB0PW01.SY4IDDSC[OB0PWRSU] = OBHREC.OBHSZDES[OB0PWMSU];
      OB0PW01.OP3ONOQT[OB0PWRSU] = OB3REC.OP3ONOQT[OB0PWMSU];
      OB0PW01.SY5PRCUN[OB0PWRSU] = OB3REC.SY5PRCUN[OB0PWMSU];
      if (OB3REC.OP3PRCOF[OB0PWMSU] == "Y") /* previously overriden*/
        OB0PW01.OP3PRCOF[OB0PWRSU] = "*";
      else
        OB0PW01.OP3PRCOF[OB0PWRSU] = " ";
      end
      OB0PW01.OB0PWSAV[OB0PWRSU] = OB0PW01.OB0PWMSU; /* save OB3 sub*/
      OB0PWRSU = OB0PWRSU + 1; /* bump up work record subscript*/
    end
    OB0PWMSU = OB0PWMSU + 1; /* bump up OB3/OBH subscript*/
  end


   /* ok, now just fill in the rest of the work record fields*/

  OB0PW01.OP2LNIVL = OB3REC.OP2LNIVL; /* save line item value*/
  OB0PW01.OP2AUPRC = OB3REC.OP2AUPRC; /* save avg unit price*/

  OB0PW01.OB0PWPAG = 1; /* set current map page to 1*/

end // end OB0PS21

// move data to map
Function OB0PS22()

    /* move headings*/
  OB0PS23();

    /* move sizes, qtys, prices*/
  if (COMMAREA.CACURRAP == "OM0G")
    OB0PS-LDPRC-OBZREC();
    COMMAREA.CACURRAP = "OBOP";
  else
    OB0PS24(); /* move elements to map*/
  end

    /* move footings*/
  if (COMMAREA.CACURRAP == "OM0G")
    OB0PS-LDFTG-OBZREC();
  else
    OB0PS25();
  end

end // end OB0PS22

// move headings
Function OB0PS23()


  OB0PM001.OB0PMPRC = "OB0P010"; /* csp process*/

   /* move the obwrec fields to the map*/

  OB0PM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/
  OB0PM001.OBWORDER = OBWREC.OBWORDER; /* order number*/
  OB0PM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/
  OB0PM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer name*/
  OB0PM001.OP1CUPO = OBWREC.OP1CUPO; /* purchase order number*/

   /* CANADA 08/01/95*/

  OB0PM001.ZFC-CRCY-CD = OB1REC.ZFC-CRCY-CD; /* CANA currency code*/

   /* format the style, color, dimension, and move to map*/

  OB0PW01.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OB0PW01.OB0PW001 = "-"; /* first hyphen*/
  OB0PW01.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OB0PW01.OB0PW002 = "-"; /* second hyphen*/
  OB0PW01.XDMCD = OB3REC.XDMCD; /* dimension*/
  OB0PM001.OB0PMPRD = OB0PW01.OB0PWPRD; /* formatted product*/

  OB0PW01.OB0PWSSN = SYCREC.SY1SSTNM; /* short style number*/
  OB0PW01.OB0PWSPC = " ";
  OB0PW01.OB0PWSCA = SYCREC.SY2CLRAB; /* style color abbrev.*/
  OB0PM001.SY2PRDES = OB0PW01.OB0PWPDS;
                                   /* formatted product description*/

  OB0PM001.OP2TONOQ = OB3REC.OP2TONOQ; /* total on ord qty*/


end // end OB0PS23

// move size data
Function OB0PS24()

   /* move price, qty, override flag, decs for each size*/

  OB0PS03(); /* determine subscripts*/

  while (OB0PW01.OB0PWMSU <= 20
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* no more valid sizes*/
    OB0PM001.SY4IDDSC[OB0PWMSU] = OB0PW01.SY4IDDSC[OB0PWRSU];
    OB0PM001.OP3ONOQT[OB0PWMSU] = OB0PW01.OP3ONOQT[OB0PWRSU];
    OB0PM001.SY5PRCUN[OB0PWMSU] = OB0PW01.SY5PRCUN[OB0PWRSU];
    OB0PM001.OP3PRCOF[OB0PWMSU] = OB0PW01.OP3PRCOF[OB0PWRSU];
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

end // end OB0PS24

// move footings
Function OB0PS25()

     /* move literal for second row of sizes, these may be set*/
     /* dark later*/

  OB0PM001.OB0PMSZL = "SIZE:"; /* size literal*/
  OB0PM001.OB0PMQTL = "QTY:"; /* qty literal*/
  OB0PM001.OB0PMPRL = "PRICE:"; /* price literal*/
  OB0PM001.OB0PMOVL = "OVRD:"; /* override literal*/

   /* if there is more than one page of sizes, set the more*/
   /* sizes flag to 'y', otherwise 'n'.*/

  if (OB0PW01.SY4IDDSC[21] == " ") /* if 20 or fewer sizes*/
    OB0PM001.OB0PMMOR = "N"; /* more sizes flag*/
  else
    OB0PM001.OB0PMMOR = "Y"; /* more sizes flag*/
  end


  OB0PM001.OB0PMPAL = 0; /* average unit price*/
  OB0PM001.OB0PMPAJ = 0; /* price adjustment*/

  OB0PM001.SP1ID = OB1REC.SP1ID; /* sales pgm*/

  OB0PM001.OB2CAUPR = OB3REC.OB2CAUPR; /* customer price*/

   /* total trade discount face percent and direct ship discount percent*/
   /* to get percent discounted from NIKE price*/

  OB0PW01.OB0PW-DSCT-PCT = OB1REC.OP-DIRSHP-DSCT-PCT + OB1REC.OP1TDFCP;
  OB0PW01.OB0PW-DSCT-PCT = OB0PW01.OB0PW-DSCT-PCT / 100;
  OB0PW01.OB0PW-NET-PCT = 1 - OB0PW01.OB0PW-DSCT-PCT; /* subtract from 1*/
  OB0PW01.OB0PW-NET-PRICE = mathLib.round((OB3REC.OP2AUPRC * OB0PW01.OB0PW-NET-PCT), -mathLib.decimals(OB0PW01.OB0PW-NET-PRICE)); /* mult by avg unit prc*/
  OB0PM001.OB0PM-NET-PRICE = OB0PW01.OB0PW-NET-PRICE; /* net prc to mp*/

  OB0PM001.XOACD = OB0PW01.XOACD; /* override authority*/

     /* check for invalid sizes*/
  OB0PS2A();

    /* check for unpriced sizes*/
  OB0PS2C();

end // end OB0PS25

// reset field attributes
Function OB0PS26()

  set OB0PM001.OB0PMPAL cursor, initialAttributes; /* price for all sizes*/
  set OB0PM001.OB0PMPAJ initialAttributes; /* price adjustment*/
  set OB0PM001.XOACD initialAttributes; /* override authority*/
  OB0PW01.OB0PW-SPGM-NOT-FOUND-FL = "N"; /* was the sales pgm found?*/
                                 /* code*/
  if (OB1REC.SP1ID != "    ") /* if there is a sales pgm then get the*/
    OB0PS-SPGM-DEPT-CD(); /* department code that is associated*/
  else /* with it.*/
    SP1REC.XNDCD = "    "; /* if no sales pgm then no nike dept*/
                                   /* code*/
  end
   /* ********************************************************/
     /* reset map array attributes*/

  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    if (OB0PM001.CAMSG == " ")
      OB0PM001.CAMSG = "ORDERS IN THIS STATUS ARE VIEW ONLY";
    end
  end


  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    OB0PS28(); /* protect all price fields*/
  else

    if (OB1REC.SP1ID == " "    /* order not on sales pgm*/
     || SP1REC.XNDCD == "ALLM" /* allocation sales program*/
     || OB0PW01.OB0PW-SPGM-NOT-FOUND-FL == "Y") /* sales pgm not found*/
      if (OB1REC.OB1PARLF == "Y") /* order is partially loaded*/
        OB0PS28(); /* protect all price fields*/
        converseLib.validationFailed(138); /* order is partially loaded - overrides*/
                                   /* in OM*/
      else
        OB0PS27(); /* set defined, askip if unpriced*/
      end

    else /* order does have sales pgm*/

      if (KUCREC.XAUCD == "64" /* in-house account*/
       || KUCREC.XAUCD == "82")
        if (SYCREC.SY1FNSHG == "2") /* raw material*/
          OB0PS27(); /* set defined, askip if unpriced*/
        else
          OB0PS28(); /* askip prices*/
          converseLib.validationFailed(135); /* cant override sales pgm prices*/
        end
      else
        OB0PS28(); /* askip prices*/
        converseLib.validationFailed(135); /* cant override sales pgm prices*/
      end
    end
  end

  OB0PS29(); /* set remaining dark, askip*/

end // end OB0PS26

// set  defined, protect unpriced
Function OB0PS27()

    /* set prices defined, set askip if not priced yet*/

  OB0PW01.OB0PWMSU = 1;

  while (OB0PW01.OB0PWMSU <= 20 /* map max*/
   && OB0PM001.SY4IDDSC[OB0PWMSU] != " ") /* still sizes*/
    OB0PS2B(); /* set defined*/
    if (OB0PM001.SY5PRCUN[OB0PWMSU] == 0 /* not priced yet*/
     && OB0PM001.OP3PRCOF[OB0PWMSU] != "*") /* not overriden*/
      set OB0PM001.SY5PRCUN[OB0PWMSU] skip; /* askip*/
      set OB0PM001.OB0PMPAJ skip; /* askip*/
    end
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
  end

end // end OB0PS27

// set all prices askip
Function OB0PS28()

   /* set price fields askip for sales pgm or partial loads*/

  OB0PWMSU = 1; /* init map subscript*/

  while (OB0PWMSU <= 20)
    set OB0PM001.SY5PRCUN[OB0PWMSU] skip;
    OB0PWMSU = OB0PWMSU + 1; /* bump up map subscript*/
  end

  set OB0PM001.OB0PMPAL skip; /* price for all sizes*/
  set OB0PM001.OB0PMPAJ skip; /* price adjustment*/

  set OB0PM001.XOACD skip; /* override auth*/

end // end OB0PS28

// set second row labels dark
Function OB0PS29()


    /* set askip,dark if not to be shown*/

  OB0PW01.OB0PWMSU = 1;

  while (OB0PW01.OB0PWMSU <= 20) /* map max*/
    if (OB0PM001.SY4IDDSC[OB0PWMSU] == " ") /* no more sizes on map*/
      set OB0PM001.OP3ONOQT[OB0PWMSU] skip, invisible;
      set OB0PM001.SY4IDDSC[OB0PWMSU] skip, invisible;
      set OB0PM001.SY5PRCUN[OB0PWMSU] skip, invisible;
      set OB0PM001.OP3PRCOF[OB0PWMSU] skip, invisible;
    end
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
  end



   /* if there are 10 or fewer sizes on a page, then the second*/
   /* map row descriptions can be darkened*/

  if (OB0PM001.SY4IDDSC[11] == " ") /* if 10 or fewer sizes on page*/
    set OB0PM001.OB0PMSZL skip, invisible; /* 2nd size label*/
    set OB0PM001.OB0PMQTL skip, invisible; /* 2nd quantity label*/
    set OB0PM001.OB0PMPRL skip, invisible; /* 2nd price label*/
    set OB0PM001.OB0PMOVL skip, invisible; /* 2nd override label*/
  else
    set OB0PM001.OB0PMSZL initialAttributes; /* 2nd size label*/
    set OB0PM001.OB0PMQTL initialAttributes; /* 2nd quantity label*/
    set OB0PM001.OB0PMPRL initialAttributes; /* 2nd price label*/
    set OB0PM001.OB0PMOVL initialAttributes; /* 2nd override label*/
  end


end // end OB0PS29

// move msgs for invalid sizes
Function OB0PS2A()

     /* move msgs to screen*/

  OB0PWRSU = 1; /* initialize OB3/OBHREC subscript*/
  OB0PW01.OB0PWINZ = "N"; /* init invalid size flag*/

  while (OB0PWRSU <= 40 /* only 40 sizes possible*/
   && OB0PW01.OB0PWINZ == "N") /* no invalid sizes found*/
    if (OB3REC.OP3ONOQT[OB0PWRSU] > 0) /* qty ordered*/
      if (OBHREC.OBHSZDES[OB0PWRSU] == " ") /* invalid size*/
        converseLib.validationFailed(121); /* invalid sizes not shown*/
        OB0PW01.OB0PWINZ = "Y"; /* invalid size*/
      end
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1; /* work subscript*/
  end


end // end OB0PS2A

// set fields defined
Function OB0PS2B()

   /* set fields defined*/

  set OB0PM001.OP3ONOQT[OB0PWMSU] initialAttributes;
  set OB0PM001.SY4IDDSC[OB0PWMSU] initialAttributes;
  set OB0PM001.SY5PRCUN[OB0PWMSU] initialAttributes;
  set OB0PM001.OP3PRCOF[OB0PWMSU] initialAttributes;



end // end OB0PS2B

// move msg for unpriced
Function OB0PS2C()

     /* move msg for unpriced size to screen*/

  OB0PWRSU = 1; /* initialize OB3/OBHREC subscript*/

  while (OB0PWRSU <= 40) /* only 40 sizes possible*/
    if (OB0PW01.OP3ONOQT[OB0PWRSU] > 0) /* qty ordered*/
      if (OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* is valid*/
        if (OB0PW01.SY5PRCUN[OB0PWRSU] == 0 /* not priced yet*/
         && OB0PW01.OP3PRCOF[OB0PWRSU] != "*") /* not overriden*/
          if (OB0PW01.OB0PWINZ == "Y") /* already an invalid size*/
            converseLib.validationFailed(122); /* priced in batch edit, invalid szs not shown*/
            return;
          else
            converseLib.validationFailed(120); /* prices figured in batch edit*/
            return;
          end
        end
      end
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1; /* work subscript*/
  end


end // end OB0PS2C

// edit map
Function OB0PS30()

    /* edit entire map no matter what key was used*/

     /* edit for one price override*/
  OB0PS31();

  if (OBWREC.OBWERRFL == "Y") /* errs found*/
    return;
  end

     /* edit price adjustment*/
  OB0PS32();

     /* edit price for all sizes*/
  OB0PS33();

    /* edit price per size*/
    /* if the price adjustment or the price for all sizes were*/
    /* changed and applied to the work record, it would show as*/
    /* a change at the size level, so we have to check these*/
    /* fields before editing the size prices.*/

  if (OB0PM001.OB0PMPAL == 0) /* price for all sizes unchanged*/
    if (OB0PM001.OB0PMPAJ == 0) /* price adjustment unchanged*/
      OB0PS3J();
    end
  end


  if (OBWREC.OBWERRFL == "N") /* no price errs*/
    if (OB0PW01.OB0PWCHG == "Y") /* new changes made*/
      OB0PS36(); /* move changed prices to map*/
    end
  else
    return;
  end

    /* compare ob3rec with work record to find new or old changes*/
  OB0PS3K();

    /* edit override authorization*/
  OB0PS37(); /* edit xoacd entered*/

  OB0PS-EDIT-XOMCD(); /* edit change reason code*/

    /* edit pf21*/
  if (OBWREC.OBWERRFL == "N") /* no price or override errs*/
    OB0PS38();
  end

end // end OB0PS30

// edit for one price change
Function OB0PS31()

    /* make sure only one price override was entered;*/
    /* either price adjustment OR price for all sizes OR*/
    /* individual size price.*/

  OB0PW01.OB0PWCHG = "N"; /* init chg flag*/

  if (OB0PM001.OB0PMPAJ == 0) /* no entry in price adjustment*/
    if (OB0PM001.OB0PMPAL == 0) /* no entry in price all*/
      OB0PS3D(); /* check for size price changes*/
    else
      OB0PW01.OB0PWCHG = "Y"; /* all price change was made*/
      OB0PS3D(); /* check for size price changes*/
      if (OBWREC.OBWERRFL == "Y") /* size prices changed too*/
        set OB0PM001.OB0PMPAL bold;
      end
    end
  else
    OB0PW01.OB0PWCHG = "Y"; /* price adjustment change was made*/
    if (OB0PM001.OB0PMPAL == 0) /* no entry in price all*/
      OB0PS3D(); /* check for size price changes*/
      if (OBWREC.OBWERRFL == "Y") /* size prices changed too*/
        set OB0PM001.OB0PMPAJ bold;
      end
    else
      set OB0PM001.OB0PMPAJ bold;
      set OB0PM001.OB0PMPAL cursor, bold;
      OB0PS3D(); /* check for size price changes to highlight*/
      converseLib.validationFailed(115); /* only one override allowed*/
      OBWREC.OBWERRFL = "Y"; /* two or more overrides were entered*/
    end
  end

end // end OB0PS31

// edit price adjustment
Function OB0PS32()

  if (OB0PM001.OB0PMPAJ == 0) /* no change made*/
    return;
  end

  if (OB0PM001.OB0PMPAJ < 0) /* check for negative*/
    OB0PS3E(); /* edit each size price*/
  end


  if (OBWREC.OBWERRFL == "N") /* no errs*/
    OB0PS3A(); /* apply adjustments to sizes*/
  else
    set OB0PM001.OB0PMPAJ cursor, bold;
  end


end // end OB0PS32

// edit price for all sizes
Function OB0PS33()

     /* price for all sizes cannot be changed to zero because it*/
     /* not be recognized as a change.  A negative sign cannot be*/
     /* entered on this map field.*/


  if (OB0PM001.OB0PMPAL == 0) /* no changes made*/
    return;
  end


  if (OBWREC.OBWERRFL == "N") /* no errs*/
    OB0PS3B(); /* apply price to all sizes*/
  else
    set OB0PM001.OB0PMPAL cursor, bold;
  end

end // end OB0PS33

// edit price per size
Function OB0PS34()

      /* *  edit price per size*/

  if (OB0PM001.SY5PRCUN[OB0PWMSU] == OB0PW01.SY5PRCUN[OB0PWRSU])
                                   /* no change*/
    return;
  end

  OB0PW01.OB0PWEFL = "N"; /* size err flag*/

  if (OB0PM001.SY5PRCUN[OB0PWMSU] == 0) /* if new price is zero*/
    OB0PS3H(); /* check raw materials*/
  end


      /* good price change for this size*/

  if (OB0PW01.OB0PWEFL == "N")
    OB0PW01.SY5PRCUN[OB0PWRSU] = OB0PM001.SY5PRCUN[OB0PWMSU];
    OB0PW01.OP3PRCOF[OB0PWRSU] = "*"; /* price override flag*/
  else
    set OB0PM001.SY5PRCUN[OB0PWMSU] cursor, bold;
  end


end // end OB0PS34

// move prices to map
Function OB0PS36()


  OB0PS03(); /* establish subscript by page number*/

  while (OB0PW01.OB0PWMSU <= 20 /* map max*/
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* still sizes*/
    OB0PM001.SY5PRCUN[OB0PWMSU] = OB0PW01.SY5PRCUN[OB0PWRSU];
    OB0PM001.OP3PRCOF[OB0PWMSU] = OB0PW01.OP3PRCOF[OB0PWRSU];
    set OB0PM001.SY5PRCUN[OB0PWMSU] initialAttributes;
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU + 1;
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

  OB0PM001.OB0PMPAL = 0; /* price for all sizes*/
  OB0PM001.OB0PMPAJ = 0; /* price adjustment*/

  set OB0PM001.OB0PMPAL initialAttributes;
  set OB0PM001.OB0PMPAJ initialAttributes;

end // end OB0PS36

// edit override authority
Function OB0PS37()


        /* override authorization reqd only if price changes*/

      /* check the users entered authorization*/
      /* code for validity. first it must exist on the table.*/
      /* second it must be active as far as the dates associated*/
      /* with this code.*/


  if (OB0PW01.OB0PWCHG == "N") /* no changes made*/
    return;
  end

  if (OB0PM001.XOACD == " ") /* no override entered*/
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(117); /* override required*/
    set OB0PM001.XOACD cursor, bold;
    return;
  end


  sysVar.arrayIndex = 1;

  if (OB0PM001.XOACD in XOATBL.XOACD) /* if match*/
    if (XX0XW01.XX0XWDAT >= XOATBL.XOABEGDT[sysVar.arrayIndex] /* today in range*/
     && XX0XW01.XX0XWDAT <= XOATBL.XOAENDDT[sysVar.arrayIndex])
      OB0PW01.OP1OSRID = XOATBL.KUYSVRID[sysVar.arrayIndex]; /* save rep*/
      OB0PW01.XOACD = OB0PM001.XOACD; /* save code*/
    else
      OBWREC.OBWERRFL = "Y";
      converseLib.validationFailed(119); /* code out of range*/
      set OB0PM001.XOACD cursor, bold;
    end
  else
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(118); /* code not valid*/
    set OB0PM001.XOACD cursor, bold;
  end



end // end OB0PS37

// edit pf21
Function OB0PS38()

     /* check pf21 to see there is a second page to toggle to*/

  if (converseVar.eventKey is pf21)
    if (OB0PM001.OB0PMMOR == "Y") /* there are two pages of data*/
      if (OB0PW01.OB0PWPAG == 1) /* first page*/
        OB0PW01.OB0PWPAG = 2;
      else
        OB0PW01.OB0PWPAG = 1;
      end
    else
      OBWREC.OBWERRFL = "Y"; /* to converse current screen*/
    end
  end

end // end OB0PS38

// apply prices to work record
Function OB0PS3A()


       /* no errors, price adjustment*/
       /* will be applied to each size price*/

       /* add price adjustment to each size price*/

  OB0PW01.OB0PWRSU = 1; /* map sub*/

  while (OB0PW01.OB0PWRSU <= 40 /* add price adjust to all sizes*/
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* end of sizes*/
    OB0PW01.SY5PRCUN[OB0PWRSU] = OB0PW01.SY5PRCUN[OB0PWRSU] + OB0PMPAJ;
    OB0PW01.OP3PRCOF[OB0PWRSU] = "*";
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

end // end OB0PS3A

// apply price to all sizes
Function OB0PS3B()

       /* no errors, move price to each size*/


  OB0PW01.OB0PWRSU = 1; /* map sub*/

  while (OB0PW01.OB0PWRSU <= 40
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* end of sizes*/
    OB0PW01.SY5PRCUN[OB0PWRSU] = OB0PM001.OB0PMPAL;
    OB0PW01.OP3PRCOF[OB0PWRSU] = "*";
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

end // end OB0PS3B

// check size prices
Function OB0PS3D()

    /* go thru each size price to see if it has changed*/

  OB0PS04(); /* bottom up set subscript*/

  while (OB0PW01.OB0PWMSU >= 1) /* top of map*/
    if (OB0PM001.SY5PRCUN[OB0PWMSU] != OB0PW01.SY5PRCUN[OB0PWRSU])
      if (OB0PW01.OB0PWCHG == "Y") /* already a change*/
        set OB0PM001.SY5PRCUN[OB0PWMSU] cursor, bold;
        OBWREC.OBWERRFL = "Y";
        converseLib.validationFailed(115); /* only one price change*/
      else
        OB0PW01.OB0PWCHG = "Y"; /* chg on price*/
        return; /* no need to check the rest*/
      end
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU - 1;
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU - 1;
  end

end // end OB0PS3D

// check for negative sizes
Function OB0PS3E()


  OB0PW01.OB0PWRSU = 1; /* init record sub*/

  while (OB0PW01.OB0PWRSU <= 40 
   && OBWREC.OBWERRFL == "N" /* stop on first negative found*/
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* no more sizes*/
    OB0PW01.OB0PWHPR = OB0PW01.SY5PRCUN[OB0PWRSU] + OB0PM001.OB0PMPAJ;
    if (OB0PW01.OB0PWHPR <= 0)
      if (OB0PW01.OB0PWHPR == 0)
        OB0PS3H(); /* check raw materials*/
      else /* negative*/
        OBWREC.OBWERRFL = "Y";
        converseLib.validationFailed(116); /* price can not be < or = zero*/
      end
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end


end // end OB0PS3E

// check if raw materials
Function OB0PS3H()


  if (SYCREC.SY1FNSHG == "2") /* and prod is raw materials*/
    if (KUCREC.XAUCD == "64" /* class is salesman samples*/
     || KUCREC.XAUCD == "82") /* or rep samples*/
        /* next sentence - price = 0 ok*/
    else
      OBWREC.OBWERRFL = "Y";
      OB0PW01.OB0PWEFL = "Y"; /* size err flag*/
      converseLib.validationFailed(116); /* price can not be < or = zero*/
    end
  else
    OBWREC.OBWERRFL = "Y";
    OB0PW01.OB0PWEFL = "Y"; /* size err flag*/
    converseLib.validationFailed(116); /* price can not be < or = zero*/
  end


end // end OB0PS3H

// edit each price
Function OB0PS3J()

  OB0PS04(); /* set subs bottom to top*/

  while (OB0PW01.OB0PWMSU >= 1)
    if (OB0PM001.SY4IDDSC[OB0PWMSU] != " ") /* size is valid*/
      OB0PS34();
    end
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWMSU - 1;
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU - 1;
  end

end // end OB0PS3J

// check for changes
Function OB0PS3K()

    /* check work record against ob3rec for changes made*/
    /* The original ob3rec subscript was saved in the work*/
    /* record (OB0PWSAV).*/

  OB0PW01.OB0PWCHG = "N"; /* init chg flag*/

  OB0PW01.OB0PWRSU = 1; /* init record sub*/

  while (OB0PW01.OB0PWRSU <= 40            
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " " /* no more sizes*/
   && OB0PW01.OB0PWCHG == "N") /* get out if a change made*/
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWSAV[OB0PWRSU]; /* move sub*/
    if (OB0PW01.SY5PRCUN[OB0PWRSU] != OB3REC.SY5PRCUN[OB0PWMSU])
      OB0PW01.OB0PWCHG = "Y"; /* change was made*/
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

end // end OB0PS3K

// update item, header, OBF4
Function OB0PS50()

     /* this statement group is the driver to all updates*/
     /* for ob0p.  Header, item/size, and OBF4 (temp storage).*/

    /* move updated fields to ob3rec.*/
  OB0PS51();

    /* update ob3rec using ob1630*/
  OB0PS52();

   /* update ocd item size using oz2090*/
  OB0PS-CALL-OZ2090();

    /* calculate header fields*/
  OB0PS53();

    /* update header*/
  OB0PS54();

    /* update temp storage*/
  OB0PS55();

end // end OB0PS50

// move changes to item/size
Function OB0PS51()

    /* original subscript from ob3rec was saved in the working*/
    /* storage record (OB0PWSAV).  this creates the link from*/
    /* working storage record price to database location price*/

  OB0PW01.OB0PWRSU = 1; /* init record sub*/

  while (OB0PW01.OB0PWRSU <= 40
   && OB0PW01.SY4IDDSC[OB0PWRSU] != " ") /* no more sizes*/
    OB0PW01.OB0PWMSU = OB0PW01.OB0PWSAV[OB0PWRSU]; /* move sub*/
    OB3REC.SY5PRCUN[OB0PWMSU] = OB0PW01.SY5PRCUN[OB0PWRSU];
    if (OB0PW01.OP3PRCOF[OB0PWRSU] == "*") /* override*/
      OB3REC.OP3PRCOF[OB0PWMSU] = "Y";
    else
      OB3REC.OP3PRCOF[OB0PWMSU] = "N";
    end
    OB0PW01.OB0PWRSU = OB0PW01.OB0PWRSU + 1;
  end

  OB3REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB3REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/


end // end OB0PS51

// update ob3rec using ob1690
Function OB0PS52()

      /* use ob1690 to update the OB3REC*/

  set OBSFREC empty;

  OBSFREC.OBSF-TASK = "U ";
  OBSFREC.OBSF-CALLER-LOC-1 = "U       ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "OB0PS52 ";
  OBSFREC.OBSF-CALLING-APPL = "OB0P";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0) /* good return*/
     /* ok - next sentence*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1 /* no item*/
     || OBSFREC.OBSF-RETURN-CD == 11) /* or no sizes*/
      OBWREC.CAMSG = "ITEM HAS BEEN UPDATED BY ANOTHER SERVICE REP";
      XSOBP00(); /* restart appl*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0PS52 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* ob1690 rtn cd*/
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
      if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
       || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
        XSOBS05(); /* 911 - rollback*/
      else
        XSOBEDR(); /* rollback*/
      end
    end
  end

end // end OB0PS52

// calculate order header fields
Function OB0PS53()

  OB1REC.OP1OSRID = OB0PW01.OP1OSRID; /* service rep*/
  OB1REC.OP1ORADT = OBWREC.ZZZCHGDT; /* override date*/

  OB1REC.OP1OVALU = OB1REC.OP1OVALU - OB0PW01.OP2LNIVL; /* old item value*/
  OB1REC.OP1OVALU = OB1REC.OP1OVALU + OB3REC.OP2LNIVL; /* new item value*/

  OB1REC.YOBCD = "NC";

  OB1REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB1REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/


end // end OB0PS53

// update order header
Function OB0PS54()


  set OBFREC empty;
  set SQLCA empty;

  OBFREC.OBFTASK = "U ";

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* somebody changed before*/
      OBWREC.CAMSG = "ORDER HAS BEEN UPDATED BY ANOTHER SERVICE REP";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      XSOBP00();
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0PS54 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* no used*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS05(); /* rollback*/
      else
        XSOBEDR(); /* abort routine - no reset done*/
      end
    end
  end


end // end OB0PS54

// update temp storage
Function OB0PS55()

    /* first call temp storage for current item*/
    /* then update with 'u'*/

  XSOBT4R(); /* read temp storage*/

  OBDREC.OBDMSEL[OBWTSF4S] = "U";
  OBDREC.OP2AUPRC[OBWTSF4S] = OB3REC.OP2AUPRC; /* new avg unit price*/

  XSOBT4U(); /* update temp*/

    /* then call temp storage for current order*/
    /* and update with 'u'*/

  XSOBT1R(); /* read temp storage*/

  OBAREC.OBAMSEL[OBWTSF1S] = "U";

  XSOBT1U(); /* update temp*/

  XSOBT2C(); /* update temp for errors*/
end // end OB0PS55

// process pf21
Function OB0PSP2()

    /* pf 21 allows pages to be toggled for two screen products*/
    /* page number was set in edit pf21 statement group*/

  set OB0PM001 empty; /* clear previous screen*/

  OB0PS03(); /* set subscript for new page*/

  OB0PS22(); /* build map*/

  OB0PS26(); /* reset attributes*/

end // end OB0PSP2

// Edit pfkeys for OB0P
Function OB0PSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf1)
    OB0PS-SAVMAP-PRC();
    OB0PS-SAVMAP-FTG();
    XSOBP01();
    OB0PM001.CAMSG = OBWREC.OBWHELP; /* redisplay if no help*/
  end

  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf5)
    XSOBP05();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf9)
    XSOBP09();
  end

  if (converseVar.eventKey is pf10)
    XSOBP10();
  end

  if (converseVar.eventKey is pf13)
    XSOBP13();
  end

  if (converseVar.eventKey is pf14)
    XSOBP14();
  end

  if (converseVar.eventKey is pf15)
    XSOBP15();
  end

  if (converseVar.eventKey is pf17)
    XSOBP17();
  end

  if (converseVar.eventKey is pf18)
    XSOBP18();
  end

  if (converseVar.eventKey is pf19)
    XSOBP19();
  end

  if (converseVar.eventKey is pf20)
    if (OB1REC.YOBCD != "PD" /* POSTPONED DEMAND REPORTED*/
     || OB1REC.YOBCD != "LP") /* LOST DEMAND REPORTED*/
      XSOBP20();
    else
      converseLib.validationFailed(164); /* status doesn't allow adds*/
      OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
    end
  end

  if (converseVar.eventKey is pf21
   && OBWREC.OBWERRFL == "N") /* no errs*/
    OB0PSP2(); /* pf21 processing*/
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N")
    if (OB0PW01.OB0PWCHG == "Y")
      XSOBP00();
    else
      XSOBP09();
    end
  end


end // end OB0PSPF

//*** RECORD=OB0PW01 ****
// ;
// This is the main working storage area for use by OB0p.
// The first part of the record will contain all of the fields
// that can be changed on the map, as well as all fields that
// occur 40 times, and thus must be paged (such as the size
// descriptions and quantities).  The saved subscript in the
// array tells you where you to return the updated prices and
// override flags on the OB3REC.
// ;
//                     MODIFICATIONS
// ------------------------------------------------------------
// 06/28/90    skott     initial creation
// 03/20/91    swatso    added ob0pwpds - style/clr prod dscrpt
// 02/21/92    craine    db2 changes - increase op2auprc,
//                       sy5prcun sizes
// ***********************
Record OB0PW01 type basicRecord
  10 OB0PWARY OB0PWARY [40] ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 OP3ONOQT OP3ONOQT ; 
    15 OP3PRCOF OP3PRCOF ; 
    15 SY5PRCUN SY5PRCUN ; 
    15 OB0PWSAV OB0PWSAV ; 
  10 OP2LNIVL OP2LNIVL ; 
  10 OP2TONOQ OP2TONOQ ; 
  10 OP2AUPRC OP2AUPRC ; 
  10 OB0PWRSU OB0PWRSU ; 
  10 OB0PWMSU OB0PWMSU ; 
  10 OP1OSRID OP1OSRID ; 
  10 XOACD XOACD ; 
  10 OB0PWPAG OB0PWPAG ; 
  10 OB0PWHPR OB0PWHPR ; 
  10 OB0PWPRD OB0PWPRD ; 
    15 SY1STNBR SY1STNBR ; 
    15 OB0PW001 OB0PW001 ; 
    15 SY2CLRID SY2CLRID ; 
    15 OB0PW002 OB0PW002 ; 
    15 XDMCD XDMCD ; 
  10 OB0PWCHG OB0PWCHG ; 
  10 OB0PWEFL OB0PWEFL ; 
  10 OB0PWINZ OB0PWINZ ; 
  10 OB0PWPDS OB0PWPDS ; 
    15 OB0PWSSN OB0PWSSN ; 
    15 OB0PWSPC OB0PWSPC ; 
    15 OB0PWSCA OB0PWSCA ; 
  10 OB0PW-TABLE-KEY OB0PW-TABLE-KEY ; 
    15 OB0PW-SAY-ORDER OB0PW-SAY-ORDER ; 
    15 OB0PW-ORDER-NUM OB0PW-ORDER-NUM ; 
    15 OB0PW-SAY-PERIOD OB0PW-SAY-PERIOD ; 
    15 OB0PW-SUB-ORDER OB0PW-SUB-ORDER ; 
    15 OB0PW-SAY-SPGM OB0PW-SAY-SPGM ; 
    15 OB0PW-SPGM OB0PW-SPGM ; 
  10 OB0PW-SPGM-NOT-FOUND-FL OB0PW-SPGM-NOT-FOUND-FL ; 
  10 OB0PW-DSCT-PCT OB0PW-DSCT-PCT ; 
  10 OB0PW-NET-PCT OB0PW-NET-PCT ; 
  10 OB0PW-NET-PRICE OB0PW-NET-PRICE ; 
end // end OB0PW01

// flag for sales pgm
DataItem OB0PW-DSCT-PCT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag for sales pgm
DataItem OB0PW-NET-PCT num(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag for sales pgm
DataItem OB0PW-NET-PRICE num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number for post
DataItem OB0PW-ORDER-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// literal
DataItem OB0PW-SAY-ORDER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OB0PW-SAY-PERIOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal
DataItem OB0PW-SAY-SPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales pgm for post
DataItem OB0PW-SPGM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for sales pgm
DataItem OB0PW-SPGM-NOT-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spgm sub order
DataItem OB0PW-SUB-ORDER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error key for sales pgm
DataItem OB0PW-TABLE-KEY char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0PW001 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0PW002 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob3rec array
DataItem OB0PWARY char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change flag
DataItem OB0PWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size err flag
DataItem OB0PWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold price for calculations
DataItem OB0PWHPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// invalid size indicator
DataItem OB0PWINZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map subscript
DataItem OB0PWMSU smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map page
DataItem OB0PWPAG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style/color product descrpt
DataItem OB0PWPDS char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted product
DataItem OB0PWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record subscript
DataItem OB0PWRSU smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved qty subscripts
DataItem OB0PWSAV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style color abbreviation
DataItem OB0PWSCA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value ' '
DataItem OB0PWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short style number
DataItem OB0PWSSN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

