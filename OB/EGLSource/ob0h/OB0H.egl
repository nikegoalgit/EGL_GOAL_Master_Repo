package ob0h;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import ni.common.*;
import nl.common.*;
import ob.common.*;
import op.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OB0H ****
//   OB0H IS THE PRODUCT DETAIL AVAILABILITY APPLICATION.
//   THIS IS WHERE A PRODUCT ON AN ORDER CAN HAVE CHANGES MADE
//   TO ITS ON-ORDER QUANTITIES, AND ALSO WHERE THE AVAILABLE
//   QUANTITY FOR THE PRODUCT IS DISPLAYED.
// 
//   SUB-PROGRAMS:  OB1200 - VALID SIZE UTILITY          - S14
//                  OB1210 - ONLINE AVAILABILITY UTILITY - S49
// 
//   I/O Modules, DB2 record, and where used in program.
//   IO0550   KUYREC   S15
//   IO5160   OB1REC   XSOBS03,S56,S61,S62,S63,S6E,S71,S7F
//   IO5170   OB2REC   S65
//   OB1230   OB3REC   S11,S54,S66,S6A,S6B,S6D
//   IO5180   OB4REC   S74,S75,S76,S77
//   IO5190   OB5REC   S79,S7A,S7B,S7C
//   IO5210   OB7REC   S6G,S6H,S6I,S6J,S6K
//   IO5220   OB8REC   XSOBS02
//   IO0430   OP1REC   S42
//   DB1000   OP3REC   S44
//   IO0450   OP6REC   S43
//   IO0560   SYCREC   S12
//   IO0240   KUCREC   OB0HS-SEL-VCMPNY01
//   CU1710   VCUCPX01,VBCPOX02,VOBXRF01
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/13/90   CGRICE   CREATED
// 9/10/90    cgrice   modified to allow bulk ord id to be
//                     changed on draw orders.
// 11/06/90   skott    database changes - ob0hs35
//                     xsdcd to pc2inseg.
// 11/13/90   cbeck    ob0hs60:  added check for headers with
//                     status = 'XL' and 'DL'
// 02/15/91   dmeier   regen for database changes
// 03/20/91   swatso   replaced source of product description
//                     in sycrec to short style nbr + style
//                     color abbrev.  Modified w02 & s22.
// 06/10/91   craine   db2 changes - added, deleted renamed
//                     fields in ob0hw03, w04 - see op1rec and
//                     ob1rec prologue for details.
// 09/16/91   ORICHA   add screened product processing. s01,
//                     s40,s46,s47,s49,w02. calls ob1340.
// 11/15/91   craine   update status to 'nc' when moving item
//                     to an existing suborder.  OB0HS6E
// 12/09/91   JLoyer   added call to ob1350 to update values
//                     defaulted from a bulk-order if the
//                     bulk-ord-id changes.
//                     Chgd: s01, s13, s21, s22, s34, s35, s50,
//                           s52, s60, s72, w01, ob0h rec list
//                     New: s16, s17, s27, s37, s38, s5a, s5b,
// 12/09/91   jjohn2   References to OBNCALCD have been removed
//                     do to a change in availability that
//                     returns quantities by need date with
//                     regard to the "lead time to screen".
//                     S49.
// 01/10/92   jwils1   added additional fields to be formatted
//                     in OBNREC. These fields will be used
//                     in OB1340 to do availability control
//                     table processing with respect to blank
//                     availability. Also added addition return
//                     code check associated with above change.
//                     Statement groups affected: S46 & S47.
// 02/12/92   JSHANN   Removed XDVCD edit in XWHCD edit for
//                     International orders.  Chgd S3A.
// 03/11/92   jwils1   db2 changes - added, deleted renamed
//                     fields in ob0hw03, w04 - see op1rec and
//                     ob1rec prologue for details.
// 03/20/92   tmorri   modified 000, 010, s25, spf --
//                     updates not allowed for order status
//                     'ca' or 'cl'.
// 04/15/92   bbake2   database changes: new field in ob1rec
//                     op-srep-ovrd-fl.  Added to ob0hw03
// 04/27/92   DLEGG    Change to OB0HS60 to restrict products
//                     from splitting to existing sub headers
//                     in 'CL' and 'CA' status.
// 06/09/92  bbake2    database changes, s34 to use xwhtbl.
//                     xdvcd1 (instead of xdvcd)
// 08/12/92  dlegg     booking season enhancement (log #774).
//                     changes to S01, S21, S22, S25, S30, S35,
//                     S37, S50, S52. New statement groups S82
//                     thru S89 added.
// 09/03/92  dharri    #893 - custom logo - s45, s47, s49
// 01/14/93  dlegg     #924 - holiday booking season - change
//                     literal message to be more generic. s83.
// 01/27/93  jather    888/920 - tshirts - handle new return
//                     codes - s47
// 03/07/93  sjob      937 - add NSG whse #25 for custom logo.
//                     (ob0hs46 & ob0hs49)
// 12/09/93  craine    expand map bulk ord id to 8 num.
// 12/27/93  gcalki    980 - add processing for b-grade of
//                     close-out screened products.  s46, cycle
// 01/10/94  dmeier    Log #971 - musical size run processing.
//                     ob0hs-edit-msr, oh0sh-msr-qtys, s22,
//                     s25, s30, s36
// 02/21/94  craine    db2 changes - w01, w02, w03, w04 records
//                     and obdrec. removed redundant line of
//                     code from ob0hs-msr-qtys (move opmsrec.
//                     op2tonoq to opmsrec.op2tonoq).
// 05/19/94  scantr    virtual airspeed project: chgd obwrec,
//                     xsobs02, xsobs03, added xsobs10
// 05/24/94  scantr    changed xsobs03
// 06/03/94  dbruih    VAS:  Removed booking season,
//                     booking month and backorder flag,
//                     coordinate group, iseg cd and sales pgm.
//                     Modified modules:  ob0hs21, s22, s25,
//                     s30, s35, s37, s38, s49, s50, s52, w01,
//                     w02.
//                     Added bulk draw code move to map and set
//                     askip in modules: ob0hs21, s22, s25,
//                     s35, s37, w01.
//                     replaced call to ob1230 with call to
//                     ob1690, call to db1000 with call to
//                     db1050 in modules: ob0hs11, s44, s54,
//                     s6a, s6b, s6d, s66
// 06/15/94   CRAINE   REWRITE TO CALL RELATIONAL EDIT
// 06/15/94   CRAINE   chg to not split when bulk-nord-id chg's
//                     s50, s52
// 08/16/94   craine   added ob0hs7i and s7j to find existing
//                     suborder in temp storage - causing 'dl'
//                     orders to be changed to 'cl' with no prd
// 08/30/94   craine   chag to xsobs-full-edit, and block 'dl'
//                     and 'ld' orders from updating
// 09/01/94   craine   move xdscd to ob0hw01 in ob0hs21
// 09/06/94   craine   change to obwrec, change to update two
//                     orders when item split to new order.
// 10/06/94   craine   add new xsobs-add-new-oba
// 10/21/94   schase   added new push availability flag. Also,
//                     fixed subscript error in s7g.
// 11/04/94   craine   remove needdate can't be before xxsdt
//                     in S32.
// 11/14/94   craine   chg ob0hspf to go to  prior appl instead
//                     of ob0f when pf24 (delete) used
// 12/13/94   craine   display resreved qtys when obw-rsrv-qty-
//                     only = 'y' or smart draw. s4a.
// 01/30/95   craine   chg to xsobs-upd-oba-edit
// 02/09/95   cbrine   allow editting of unit of measure if not
//                     same as on sy1rec.
// 02/21/95   craine   s52 - move zero to oprbnoid instead of
//                     op1norid
// 04/27/95   craine   allow for new yobcd 'pd' and 'lp'.
// 07/28/95   DLIDDL   Modified to incorporate Nike Canada into
//                     AIRSPEED - OB0HS12, OB0HS22.
// 08/07/95   CRAINE   Database changes.
// 02/07/96   CBRINE   Added edit of bulk order id, move sales
//                     program id when calling OB1620 (OB0HS61)
// 03/21/96   CBRINE   Save sales program in working storage
// 10/01/96   CBRINE   Apply changes to xref tables.
// 11/20/96   wleong   removed musical size run logic.
// 04/03/97   wleong   added prepack enhancement - delete prepk
//                     when item is deleted
// 06/23/97   joldin   When an ocd tracked field is changed
//                     write a VSOHCR01 record.
// 09/04/97   jnaemu   allow direct ship for apparel to
//                     decrement availability.
// 09/08/97   wleong   regen for yostbl structure change
// 09/10/97   wleong   restrict one product per msr order.
//                     use edit function '2' for online edit
//                     when a new msr item is added.  this is
//                     to pick up prepack edits in ob1600.
// 10/03/97   CBRINE   Delete override & companion records
//                     if item is deleted. OB0HS-DEL-VOBXRF01
//                     and OB0HS-DEL-VBCPOX02.
// 09/18/97   jnaemu   added vcutof01 for need date edit
// 10/28/97   SATYAM   Added edit in OB0HS7B, before calling
//                     iomod IO5190 to check whether any rows
//                     exist with the same key values in the
//                     dordb.vobadr01 table.
// 10/22/97   wleong   include cu pack code for msr edit.
//                     ob0hspf.  do not allow more than one itm
//                     per cu order.  delete prepacks and
//                     recalculate and recreate them if on ord
//                     quantities have been changed.
// 11/24/97   joldin   require an ocd change reason for a
//                     cancel and write a dordcd.vsoscr01
// 12/03/97   SPARTH   added 'check for new product id' so that
//                     the quantity and item value does not
//                     appear on the screen for the first time
//                     in SGRPS OB0HS-LDMAP-OBZREC and OB0HS22.
//                     look for '*TCS' for changes made.
//                     Msg#  250 is added in OB00ENU.
// 11/15/97   svargh   added the new record OBDUREC with
//                     the item obwdupl.
// 03/22/99   kramse   Modified statement group OB0HS12 to call
//                     SY2000 for GPC 03 regardless of order
//                     origin.
// 05/14/99   uanant   Modified statement group OB0HS52
//                     to consider the overridden price when a
//                     new size is added.
// *********************
Program OB0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KUYREC KUYREC; // record
  OB0HW01 OB0HW01; // record
  OB0HW02 OB0HW02; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB3REC OB3REC; // record
  OB7REC OB7REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBDUREC OBDUREC; // record
  OBEREC OBEREC; // record
  OBFEREC OBFEREC; // record
  OBFREC OBFREC; // record
  OBHREC OBHREC; // record
  OBIREC OBIREC; // record
  OBKREC OBKREC; // record
  OBLEREC OBLEREC; // record
  OBSFREC OBSFREC; // record
  OBSOREC OBSOREC; // record
  OBSREC OBSREC; // record
  OBSSREC OBSSREC; // record
  OBWREC OBWREC; // record
  OBZREC OBZREC; // record
  OP1REC OP1REC; // record
  OP3REC OP3REC; // record
  OP6REC OP6REC; // record
  OP8REC OP8REC; // record
  OPAGREC OPAGREC; // record
  OPBREC OPBREC; // record
  OPJREC OPJREC; // record
  OPLREC OPLREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY5REC SY5REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBCPOX02 VBCPOX02; // record
  VBCSPR01 VBCSPR01; // record
  VCUCPX01 VCUCPX01; // record
  VDSTRB01 VDSTRB01; // record
  VNLXPY01 VNLXPY01; // record
  VOBXRF01 VOBXRF01; // record
  VOCITM01 VOCITM01; // record
  VSOHCR01 VSOHCR01; // record
  WCU1710 WCU1710; // record
  WOZ2090 WOZ2090; // record
  WSY2000 WSY2000; // record
  XOWREC XOWREC; // record
  XSOBW01 XSOBW01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBDTBL {deleteAfterUse = yes}; // table
  use XOLTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use OB0HM.OB0HM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0H000: OB0H000();

    goto OB0H010; /* flow to converse*/

    OB0H010: OB0H010();

    goto OB0H010; /* flow back to self*/

  end // end main
end // end OB0H

// main process for OB0H
Function OB0H000()

     /* Check csp and order batch security*/

  XSENTRY();
  XSOBS01();


     /* Initialize application*/

  OB0HS01();


     /* Set -911 processing flag*/

  OBWREC.OBWER911 = "N";


     /* Determine if batch edit is running*/

  XSOBS02();


     /* Read current order header*/

  XSOBS03();
  OB0HW01.SP1ID = OB1REC.SP1ID; /* save sales program to ws*/

     /* Display commarea message*/

  OB0HM001.CAMSG = OBWREC.CAMSG;
  OBWREC.CAMSG = " ";


     /* Build map for display*/

  OB0HS05();


     /* Edit map*/

  if (OB1REC.YOBCD != "CA" /* hasn't cleared availability*/
   || OB1REC.YOBCD != "LP" /* hasn't lost demand reported*/
   || OB1REC.YOBCD != "PD") /* hasn't postponed demand reported*/
    OB0HS30();
  end



end // end OB0H000

// converse for OB0H
Function OB0H010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/
  if (COMMAREA.CAFROMAP == "OM0G")
    COMMAREA.CAFROMAP = " ";
    set OB0HM001.XOMCD cursor;
  else
    if (OBWREC.OBWERRFL == "Y")
     /* next sentence*/
    else
      set OB0HM001.OP3ONOQT[1] cursor;
    end
  end

  converse OB0HM001 ;

     /* Init error stuff*/

  OBWREC.OBWERRFL = "N"; /* init error flag*/
  converseLib.validationFailed(0); /* init error message*/
  OBWREC.OBWHELP = OB0HM001.CAMSG; /* save msg*/
  OB0HM001.CAMSG = " "; /* clear map camsg*/
  OB0HW01.OB0HWCAL = "N"; /* init call ob1350 flag*/
  OB0HW02.OB0HWFLG = "N";


     /* Reset field attributes*/

  OB0HS25();


     /* Edit map (no matter what pfkey is used)*/

  if (OB1REC.YOBCD != "CA" /* hasn't cleared availability*/
   && OB1REC.YOBCD != "LP" /* hasn't lost demand reported*/
   && OB1REC.YOBCD != "PD") /* hasn't postponed demand reported*/
    OB0HS30(); /* edit*/

    if (OBWREC.OBWERRFL == "N")
      if (converseVar.eventKey is enter
       || converseVar.eventKey is pf23)
        OB0HS50(); /* update the item and split if needed*/
        if (OB0HW02.OB0HWFLG == "Y") /* something has changed on the order*/
          XSOBS-ONLINE-EDIT();
          if (OB0HW02.OP1CUOID != OB1REC.OP1CUOID
           && OB0HW02.OP1CUOID != 0)
            OB0HS85(); /* edit new order*/
          end
        end
      end
    end
  end


     /* Process PF Keys*/

  OB0HSPF();

end // end OB0H010

// UPDATE OB7REC VIA OB5210
Function OB0HS-ADD-OB7REC()

   /* add message record*/

  set OB7REC empty;

  OB7REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB7REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB7REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OB7REC.OP2LNINB = OB3REC.OP2LNINB; /* line item nbr*/
  OB7REC.OB6MSGNB = OB0HW01.MSG-NBR; /* message nbr*/
  OB7REC.OB7MSGTP = "H"; /* message type*/

  OB7REC.ZZZSDT = OBWREC.ZZZCHGDT;
  OB7REC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OB7REC.ZZZSTM = OBWREC.ZZZCHGTM;
  OB7REC.ZZZCHGTM = OBWREC.ZZZCHGTM;
  OB7REC.ZZZCHGCT = 0;

  set SQLCA empty;

  call "IO5210" ("A ", SQLCA, OB7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -803)
      /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBMSG01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "A       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5210  "; /* i/omod*/
    TA1REC.TA1LOCAT[3] = "OB0GS-ADD-OB7REC"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

end // end OB0HS-ADD-OB7REC

// INSERT VBCPOX02
Function OB0HS-ADD-VBCPOX02()


  set SQLCA empty;
  VBCPOX02.SY5SZID = OB0HW01.OB0HWSAV[OB0HWSU1];
  VBCPOX02.CU-SZ-ID-OVRDFL = "N";
  VBCPOX02.CU-PROD-SZ-ID = " ";
  VBCPOX02.CU-SZ-NM-OVRDFL = "N";
  VBCPOX02.CU-PROD-SZ-NM = " ";

  VBCPOX02.ZZZSDT = OBWREC.ZZZCHGDT;
  VBCPOX02.ZZZSTM = OBWREC.ZZZCHGTM;
  VBCPOX02.ZZZCHGDT = OBWREC.ZZZCHGDT;
  VBCPOX02.ZZZCHGTM = OBWREC.ZZZCHGTM;
  VBCPOX02.ZZZCHGCT = 0;


  call "VBCPOX02" ("A ", SQLCA, VBCPOX02) {isNoRefresh = yes, isExternal = yes}; /**/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OB0HW01.MSG-NBR = "305";
    OB0HS-ADD-OB7REC();
    if (OB0HW01.SAME-XREF-VALUES-FL != "Y")
      OB0HW01.DELETE-SIZE-ID = OB0HW01.OB0HW-SAVE-SZ;
      OB0HS-DEL-VBCPOX02();
    end
  else
    if (SQLCA.VAGen_SQLCODE != -803) /* check for duplicate*/
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBCPOX02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "A       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "VBCPOX02"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS-AD"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "D-VBCPOX"; /* extra key*/
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        OBWREC.OBWER911 = "Y"; /* show err*/
        XSOBS04(); /* no rollback, restart appl*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end


end // end OB0HS-ADD-VBCPOX02

// INSERT VCUCPX01
Function OB0HS-ADD-VCUCPX01()

  VCUCPX01.ZZZSDT = OBWREC.ZZZCHGDT;
  VCUCPX01.ZZZSTM = OBWREC.ZZZCHGTM;
  VCUCPX01.ZZZCHGDT = OBWREC.ZZZCHGDT;
  VCUCPX01.ZZZCHGTM = OBWREC.ZZZCHGTM;
  VCUCPX01.ZZZCHGCT = 0;


  set SQLCA empty;

  call "VCUCPX01" ("A ", SQLCA, VCUCPX01) {isNoRefresh = yes, isExternal = yes}; /**/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == -803) /* record already exists*/
    OB0HW01.MSG-NBR = "306";
    OB0HS-ADD-OB7REC();
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUCPX01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "A       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "VCUCPX01"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS-AD"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "D-VCUCPX"; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end



end // end OB0HS-ADD-VCUCPX01

// DELETE/INSERT OB1REC
Function OB0HS-ADD-VSOHCR01()

  OB0HS-MAX-VSOHCR01();
  set VSOHCR01 empty;

   /* BUILD OCD ORDER CHANGE REASON FROM DORDB ORDER HEADER*/

  VSOHCR01.OP1PARTN = OB1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OB1REC.OP1CUOID;
  if (OB0HW02.OB0HW-NEW-ORD-SUB == 0)
    VSOHCR01.OP1NORID = OB1REC.OP1NORID;
  else
    VSOHCR01.OP1NORID = OB0HW02.OB0HW-NEW-ORD-SUB;
  end
  VSOHCR01.XOMCD = OB0HM001.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = OB0HW02.OB0HW-MAX-SEQ;
  VSOHCR01.SOCD-APPL-SRC-CD = "OB";
  VSOHCR01.SOCD-GLBL-MNTN-FL = "N";
  VSOHCR01.SOCD-HDR-RSN-TXT = OB0HM001.SOCD-HDR-RSN-TXT;
  if (OB0HW02.OB0HW-OCD-NDT-FL == "Y")
    VSOHCR01.OP1CUNDT = OB0HW01.OP1CUNDT;
  end
  VSOHCR01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOHCR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZSTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ADD RECORD TO VSOHCR01*/

  call "VSOHCR01" ("A ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};

end // end OB0HS-ADD-VSOHCR01

// BUILD VCUCPX01 FOR INSERT
Function OB0HS-BUILD-VCUCPX()

  set VCUCPX01 empty;

  VCUCPX01.CU-CUSKU-ID = OB0HW01.XREF-CU-CUSKU-ID[OB0HWSB1];
  VCUCPX01.XNX-DEPT-ID-XREF = 0;
  VCUCPX01.CU-PROD-XREF-EDT = OB1REC.OP1CUNDT;

  VCUCPX01.SY1STNBR = OB3REC.SY1STNBR;
  VCUCPX01.SY2CLRID = OB3REC.SY2CLRID;
  VCUCPX01.XDMCD = OB3REC.XDMCD;
  VCUCPX01.XGPCD = OB3REC.XGPCD;
  VCUCPX01.XQACD = OB3REC.XQACD;
  VCUCPX01.SY5SZID = OB0HW01.OB0HWSAV[OB0HWSU1];
  VCUCPX01.CU-CUST-PROD-ID = OB0HW01.XREF-CU-CUST-PROD-ID[OB0HWSB1];
  VCUCPX01.CU-PROD-NM = OB0HW01.XREF-CU-PROD-NM[OB0HWSB1];
  VCUCPX01.CU-PROD-COLR-NM = OB0HW01.XREF-CU-PROD-COLR-NM[OB0HWSB1];
  VCUCPX01.CU-PROD-SZ-ID = OB0HW01.SY4IDDSC[OB0HWSU1];
  VCUCPX01.CU-CUST-RTL-PRC = OB0HW01.XREF-CU-CUST-RTL-PRC[OB0HWSB1];
  VCUCPX01.CU-CUST-SPCL-PRC = OB0HW01.XREF-CU-CUST-SPCL-PRC[OB0HWSB1];
  VCUCPX01.CU-SUGG-RTL-PRC = OB0HW01.XREF-CU-SUGG-RTL-PRC[OB0HWSB1];
  VCUCPX01.CU-SPCL-PRC-EDT = OB0HW01.XREF-CU-SPCL-PRC-EDT[OB0HWSB1];
  VCUCPX01.CU-VEND-CLS-ID = OB0HW01.XREF-CU-VEND-CLS-ID[OB0HWSB1];
  VCUCPX01.CU-SKU-COMNT1 = OB0HW01.XREF-CU-SKU-COMNT1[OB0HWSB1];
  VCUCPX01.CU-SKU-COMNT2 = OB0HW01.XREF-CU-SKU-COMNT2[OB0HWSB1];
  VCUCPX01.CU-SKU-COMNT3 = OB0HW01.XREF-CU-SKU-COMNT3[OB0HWSB1];

  VCUCPX01.XXX-STAT = "A";
  VCUCPX01.XDZ-DATA-DIST-CD = OB1REC.XDZ-DATA-DIST-CD;

  VCUCPX01.ZZZSDT = OBWREC.ZZZCHGDT;
  VCUCPX01.ZZZSTM = OBWREC.ZZZCHGTM;
  VCUCPX01.ZZZCHGDT = OBWREC.ZZZCHGDT;
  VCUCPX01.ZZZCHGTM = OBWREC.ZZZCHGTM;
  VCUCPX01.ZZZCHGCT = 0;


end // end OB0HS-BUILD-VCUCPX

// update ocd size item
Function OB0HS-CALL-OZ2090()

      /* use OZ2090 to update the VOCSIZ01 record*/

  set WOZ2090 empty;

  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OB1REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OB1REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OB1REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OBWREC.OBWLNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OB0HM001.XOMCD;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OB";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = OB0HM001.SOCD-HDR-RSN-TXT;
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;


  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};


  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(238);
    OBWREC.OBWERRFL = "Y";
  end

end // end OB0HS-CALL-OZ2090

// chk # of items for this msr
Function OB0HS-CHK-MSR-ITM()

  OB0HW-MSRITM-FL = "N"; /* reset msr item flag*/

   /* build record to pass to select order errors*/


  set OB2REC empty;


  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* order nbr*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/

   /* get all the items for the order*/

  set SQLCA empty;
  set OBKREC empty; /* task record*/

  OBKREC.OBKTASK = "S1"; /* select task*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS72 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end

   /* select next item for loading temp storage 4 - obf4*/


  set SQLCA empty;
  set OBKREC empty;

  OBKREC.OBKTASK = "N1"; /* select next*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OB0HW-MSRITM-FL = "Y"; /* has at least one msr item*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence;*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS73 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        "; /* extra key*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        OBWREC.OBWERRFL = "Y"; /* show error msg*/
        XSOBS04(); /* post routine - no reset done*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end

  set SQLCA empty;
  set SQLCA empty;

  OBKREC.OBKTASK = "C1"; /* close set*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "C1      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS75 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* extra space*/
    XSOBEDC(); /* abort routine - no reset done*/
  end

end // end OB0HS-CHK-MSR-ITM

// COMPARE VCUCPX01 & WCU1710
Function OB0HS-CHK-OVERRIDE()

   /* Compare the order specific data (saved in OB0HW01) and the WCU1710*/
   /* data returned from CU1710 with option 2.*/

  if (OB0HW01.XREF-CU-CUST-PROD-ID[OB0HWSB1] == WCU1710.CU-CUST-PROD-ID
   && OB0HW01.XREF-CU-PROD-NM[OB0HWSB1] == WCU1710.CU-PROD-NM
   && OB0HW01.XREF-CU-PROD-COLR-NM[OB0HWSB1] == WCU1710.CU-PROD-COLR-NM
   && OB0HW01.XREF-CU-PROD-SZ-ID[OB0HWSB1] == WCU1710.CU-PROD-SZ-ID
   && OB0HW01.XREF-CU-PROD-SZ-NM[OB0HWSB1] == WCU1710.CU-PROD-SZ-NM
   && OB0HW01.XREF-CU-VEND-CLS-ID[OB0HWSB1] == WCU1710.CU-VEND-CLS-ID
   && OB0HW01.XREF-CU-CUST-RTL-PRC[OB0HWSB1] == WCU1710.CU-CUST-RTL-PRC
   && OB0HW01.XREF-CU-CUST-SPCL-PRC[OB0HWSB1] == WCU1710.CU-CUST-SPCL-PRC
   && OB0HW01.XREF-CU-SPCL-PRC-EDT[OB0HWSB1] == WCU1710.CU-SPCL-PRC-EDT
   && OB0HW01.XREF-CU-SUGG-RTL-PRC[OB0HWSB1] == WCU1710.CU-SUGG-RTL-PRC
   && OB0HW01.XREF-CU-SKU-COMNT1[OB0HWSB1] == WCU1710.CU-SKU-COMNT1
   && OB0HW01.XREF-CU-SKU-COMNT2[OB0HWSB1] == WCU1710.CU-SKU-COMNT2
   && OB0HW01.XREF-CU-SKU-COMNT3[OB0HWSB1] == WCU1710.CU-SKU-COMNT3)
    /* next sentence*/
  else
    OB0HS-SEL-VBCPOX02();
  end

end // end OB0HS-CHK-OVERRIDE

// CHECK FOR PREPACK
Function OB0HS-CHK-PREPACK()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set VBCSPR01 empty;
  set SQLCA empty;

  VBCSPR01.XWHCD = OB1REC.XWHCD; /* WAREHOUSE*/
  VBCSPR01.OP1PARTN = OB1REC.OP1PARTN; /* PART CHAR*/
  VBCSPR01.OP1CUOID = OB1REC.OP1CUOID; /* ORDER NUM*/
  VBCSPR01.OP1NORID = OB1REC.OP1NORID; /* NIKE ORD ID*/

  call "VBCSPR01" ("S1", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* open cursor successful*/
    /* next sentence*/
  else
    set SQLCA empty;
    TA1REC.TA1DBASE = "DORDB   ";
    TA1REC.TA1TBLVU = "VBCSPR01";
    TA1REC.TA1LOCAT[1] = "S1      ";
    TA1REC.TA1LOCAT[2] = "VBCSPR01";
    TA1REC.TA1LOCAT[3] = "OB0HS-CHK-PREPACK";
    TA1REC.TA1LOCAT[4] = VBCSPR01.VBCSPRP01-KEY;
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "VBCSPR01" ("N1", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OB0HS-DEL-PREPACK(); /* delete prepack*/
    else
      if (SQLCA.VAGen_SQLCODE == +100)
              /* next sentence*/
      else
        set SQLCA empty;
        TA1REC.TA1DBASE = "DORDB   ";
        TA1REC.TA1TBLVU = "VBCSPR01";
        TA1REC.TA1LOCAT[1] = "N1      ";
        TA1REC.TA1LOCAT[2] = "VBCSPR01";
        TA1REC.TA1LOCAT[3] = "OB0HS-CHK-PREPACK";
        TA1REC.TA1LOCAT[4] = VBCSPR01.VBCSPRP01-KEY;
        if (SQLCA.VAGen_SQLCODE == -911)
          XSOBS04();
        else
          XSOBEDC();
        end
      end
    end
  end
end // end OB0HS-CHK-PREPACK

// CHECK SIZES FROM CU1710
Function OB0HS-CHK-XREF-SZ()

   /* Go through all the sizes that were returned by CU1710 to see if*/
   /* this size was already on the order. If it was set the flag so we*/
   /* know to keep it, when we go thru the override records in*/
   /* OB0HS-CLEANUP-OVRD*/

  OB0HW02.OB0HWSB2 = 1;
  OB0HW01.XREF-SZ-FOUND-FL = "N";
  while (OB0HW02.OB0HWSB2 <= OB0HW01.XREF-COUNT)
    if (OB0HW01.OB0HWSAV[OB0HWSU1] == OB0HW01.XREF-SZ-ID[OB0HWSB2])
      OB0HW01.XREF-SZ-FOUND-FL = "Y";
      if (OB0HW01.OP3ONOQT[OB0HWSU1] > 0)
        OB0HW01.SZ-ON-ORD-FL[OB0HWSB2] = "Y";
      end
    end
    OB0HW02.OB0HWSB2 = OB0HW02.OB0HWSB2 + 1;
  end

end // end OB0HS-CHK-XREF-SZ

// CLEAN UP OVERRIDE RECORDS
Function OB0HS-CLEANUP-OVRD()


  OB0HW02.OB0HWSB2 = 1;
  while (OB0HW02.OB0HWSB2 <= OB0HW01.XREF-COUNT)
    if (OB0HW01.SZ-ON-ORD-FL[OB0HWSB2] != "Y")
      if (OB0HW01.OVRD-EXISTS-FL[OB0HWSB2] == "Y")
        OB0HW01.DELETE-SIZE-ID = OB0HW01.XREF-SZ-ID[OB0HWSB2];
        OB0HS-DEL-VBCPOX02();
      end
    end
    OB0HW02.OB0HWSB2 = OB0HW02.OB0HWSB2 + 1;
  end

end // end OB0HS-CLEANUP-OVRD

// COMPARE VCUCPX01 & VBCPOX02
Function OB0HS-COMPARE-XREF()

   /* Compare each cross reference size found on the order (via CU1710)*/
   /* with the first(populated), if aren't the same set the flag.*/

  if (WCU1710.CU-CUST-PROD-ID[OB0HWSB2]
   != WCU1710.CU-CUST-PROD-ID[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-VEND-CLS-ID[OB0HWSB2] != WCU1710.CU-VEND-CLS-ID[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-CUST-RTL-PRC[OB0HWSB2]
   != WCU1710.CU-CUST-RTL-PRC[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-CUST-SPCL-PRC[OB0HWSB2]
   != WCU1710.CU-CUST-SPCL-PRC[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-SPCL-PRC-EDT[OB0HWSB2]
   != WCU1710.CU-SPCL-PRC-EDT[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-SUGG-RTL-PRC[OB0HWSB2]
   != WCU1710.CU-SUGG-RTL-PRC[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-SKU-COMNT1[OB0HWSB2] != WCU1710.CU-SKU-COMNT1[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-SKU-COMNT2[OB0HWSB2] != WCU1710.CU-SKU-COMNT2[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end
  if (WCU1710.CU-SKU-COMNT3[OB0HWSB2] != WCU1710.CU-SKU-COMNT3[OB0HWSB1])
    OB0HW01.SAME-XREF-VALUES-FL = "N";
  end

end // end OB0HS-COMPARE-XREF

// GET CUST PROD XREF
Function OB0HS-CU1710-OPT1()

   /* build record to pass to select xref item info*/

  set WCU1710 empty;

  WCU1710-IN-DORDB-IND = "Y";
  WCU1710-INQUIRY-OPTION = 1; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OB1REC.KUCCOID;
  WCU1710-XNX-DEPT-ID-XREF = OB1REC.XNXCD;
  WCU1710-CU-PROD-XREF-EDT = OB1REC.OP1CUNDT;
  WCU1710-IN-OP-ORD-PART-CHAR = OB1REC.OP1PARTN;
  WCU1710-IN-OP-CUST-ORD-ID = OB1REC.OP1CUOID;
  WCU1710-IN-OP-NIKE-ORD-ID = OB1REC.OP1NORID;
  WCU1710-IN-OP-LINE-ITEM-NBR = OB3REC.OP2LNINB;

  if (OB3REC.XGPCD != " "
   && OB3REC.SY1STNBR != " "
   && OB3REC.SY2CLRID != " "
   && OB3REC.XDMCD != " "
   && OB3REC.XQACD != " ")
    WCU1710-IN-XGP-GPC-CD = OB3REC.XGPCD;
    WCU1710-IN-SY-STY-NBR = OB3REC.SY1STNBR;
    WCU1710-IN-SY-COLR-CD-ID = OB3REC.SY2CLRID;
    WCU1710-IN-XDM-DIM-CD = OB3REC.XDMCD;
    WCU1710-IN-XQA-QUAL-CD = OB3REC.XQACD;
    WCU1710-IN-SY-SZ-ID = 0;
  else
    WCU1710-IN-CU-CUST-PROD-ID = OB3REC.CU-CUST-PROD-ID;
    WCU1710-IN-CU-PROD-SZ-ID = " ";
  end

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (WCU1710-RETURN-CODE == 0
   || WCU1710-RETURN-CODE == 10) /* check for good rc*/
    OB0HW01.WCU1710-EXISTS-FL = "Y";
  else
    if (WCU1710-RETURN-CODE == 1) /* check for not found*/
      if (WCU1710.SY-STY-NBR[1] > " "
       || WCU1710.SY-SZ-ID[1] > 0)
        OB0HW01.WCU1710-EXISTS-FL = "Y";
      else
        OB0HW01.SAME-XREF-VALUES-FL = "N";
        OB0HW01.WCU1710-EXISTS-FL = "N";
      end
    else
      if (WCU1710-RETURN-CODE == 2 /* check for not found*/
       || WCU1710-RETURN-CODE == 6 /* check for not found*/
       || WCU1710-RETURN-CODE == 9 /* check for no cu-cusku-ind*/
       || WCU1710-RETURN-CODE == 11) /* this item has no quantity, must be new*/
        OB0HW01.SAME-XREF-VALUES-FL = "N";
        OB0HW01.WCU1710-EXISTS-FL = "N";
        return;
      else
        TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[2] = "OB0HS-CU"; /* statement group*/
        TA1REC.TA1LOCAT[3] = "1710-OPT"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "1       "; /* statement group*/
        TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
        TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
        XSOBENR(); /* application return go to main menu*/
      end
    end
  end

  OB0HS-SEL-VCMPNY01();
  if (KUCREC.CU-CUSKU-SZ-FL == "N")
    OB0HW01.SAME-XREF-VALUES-FL = "N";
    return;
  end

   /* if WCU1710 return code is 0 or 1, the first occurance in the return*/
   /* data has valid cross reference information, otherwise, we need to*/
   /* go through until we find the first occurance of valid data and save*/
   /* it in OB0HWSB1. Save size id and flags from CU1710.*/
   /* when we have a return code of 10, that can mean sizes with xref data*/
   /* and sizes with no xref data (dummy recs) OR special makeup data where*/
   /* the beging sizes have ovrd data with no xref and sizes with both xref*/
   /* and ovrd (this can happen when there are so many sizes on the order*/
   /* that the ovrd records starting at size 1 for special make-up go into*/
   /* the valid sizes for the product and find matches on the vcucpx table.*/

  OB0HW01.SAME-XREF-VALUES-FL = "Y";
  OB0HW01.XREF-COUNT = 0;
  OB0HW02.OB0HWSB2 = 1;
  OB0HW01.OB0HW-SAVE-SZ = 0;
  if (OB0HW01.WCU1710-EXISTS-FL == "Y")
    if (WCU1710-RETURN-CODE == 0
     || WCU1710-RETURN-CODE == 1)
      OB0HW02.OB0HWSB1 = 1;
    end
    while (OB0HW02.OB0HWSB2 <= 24)
      if (WCU1710-XREF-EXISTS-FL[OB0HWSB2] == "N" /* if we have no xref*/
       && WCU1710-CU-OVRD-EXISTS-FL[OB0HWSB2] == "Y") /* but have ovrd data*/
        OB0HW01.SPCL-MKUP-FL = "Y"; /* set flag indicating spcl mkup*/
      end
      if (WCU1710-CU-OVRD-EXISTS-FL[OB0HWSB2] == "Y") /* save sz with ovrd*/
        OB0HW01.OB0HW-SAVE-SZ = WCU1710.SY-SZ-ID[OB0HWSB2];
      end
      if (WCU1710-XREF-EXISTS-FL[OB0HWSB2] == "Y"
       || WCU1710-CU-OVRD-EXISTS-FL[OB0HWSB2] == "Y")
        if (OB0HW02.OB0HWSB1 == 0) /* if haven't found first valid data*/
          OB0HW02.OB0HWSB1 = OB0HW02.OB0HWSB2; /* subscript, save this*/
        end
        OB0HW01.XREF-SZ-ID[OB0HWSB2] = WCU1710.SY-SZ-ID[OB0HWSB2];
        OB0HW01.OVRD-EXISTS-FL[OB0HWSB2] = WCU1710.WCU1710-CU-OVRD-EXISTS-FL[OB0HWSB2];
        OB0HW01.XREF-EXISTS-FL[OB0HWSB2] = WCU1710.WCU1710-XREF-EXISTS-FL[OB0HWSB2];
        OB0HW01.XREF-COUNT = OB0HW01.XREF-COUNT + 1;
        OB0HS-SAVE-XREF();
        OB0HS-COMPARE-XREF();
      end
      OB0HW02.OB0HWSB2 = OB0HW02.OB0HWSB2 + 1;
    end
  else
    OB0HW01.SAME-XREF-VALUES-FL = "N";
    return;
  end

end // end OB0HS-CU1710-OPT1

// CALL CU1710 WITH OPTION 2
Function OB0HS-CU1710-OPT2()

   /* build record to pass to select xref item info*/

  set WCU1710 empty;

  WCU1710-IN-DORDB-IND = "Y";
  WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OB1REC.KUCCOID;
  WCU1710-IN-XGP-GPC-CD = OB3REC.XGPCD;
  WCU1710-IN-SY-STY-NBR = OB3REC.SY1STNBR;
  WCU1710-IN-SY-COLR-CD-ID = OB3REC.SY2CLRID;
  WCU1710-IN-XDM-DIM-CD = OB3REC.XDMCD;
  WCU1710-IN-XQA-QUAL-CD = OB3REC.XQACD;
  WCU1710-CU-PROD-XREF-EDT = OB1REC.OP1CUNDT;
  WCU1710-XNX-DEPT-ID-XREF = OB1REC.XNXCD;
  WCU1710-IN-SY-SZ-ID = OB0HW01.OB0HWSAV[OB0HWSU1];

  WCU1710-RETURN-CODE = 99;

   /* get the xref info for the one size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check db2 return code*/

  if (WCU1710-RETURN-CODE == 0)
    OB0HS-CHK-OVERRIDE();
  else
    if (WCU1710-RETURN-CODE == 1)
      OB0HS-BUILD-VCUCPX();
      OB0HS-ADD-VCUCPX01();
      if (OB0HW01.SAME-XREF-VALUES-FL != "Y")
        OB0HW01.DELETE-SIZE-ID = OB0HW02.OB0HWSB3;
        OB0HS-DEL-VBCPOX02();
      end
    else
      TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[2] = "OB0HS-CU"; /* statement group*/
      TA1REC.TA1LOCAT[3] = "1710-OPT"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "2       "; /* statement group*/
      TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
      TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
      XSOBENR(); /* application return go to main menu*/
    end
  end


end // end OB0HS-CU1710-OPT2

// DELETE OVERRIDES
Function OB0HS-DEL-OVERRIDE()

  set SQLCA empty;
  set VBCPOX02 empty;

  VBCPOX02.OP1PARTN = OB3REC.OP1PARTN;
  VBCPOX02.OP1CUOID = OB3REC.OP1CUOID;
  VBCPOX02.OP1NORID = OB3REC.OP1NORID;
  VBCPOX02.OP2LNINB = OB3REC.OP2LNINB;

  call "VBCPOX02" ("D2", SQLCA, VBCPOX02) {isNoRefresh = yes, isExternal = yes}; /**/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBCPOX02"; /* table view*/
    TA1REC.TA1LOCAT[1] = "D2  VBCP"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OX02  OB"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "0HS-DEL-"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "OVERRIDE"; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end


end // end OB0HS-DEL-OVERRIDE

// DELETE PREPACK
Function OB0HS-DEL-PREPACK()

   /* THIS STATEMENT GROUP DELETES THE PREPACK RECORD IF*/
   /* IT EXISTS*/

  call "VBCSPR01" ("D ", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDB   ";
    TA1REC.TA1TBLVU = "VBCSPR01";
    TA1REC.TA1LOCAT[1] = "DELETE  ";
    TA1REC.TA1LOCAT[2] = "VBCSPR01";
    TA1REC.TA1LOCAT[3] = "OB0HS-DEL-PREPACK";
    TA1REC.TA1LOCAT[4] = VBCSPR01.VBCSPRP01-KEY;
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

end // end OB0HS-DEL-PREPACK

// DELETE VBCPOX02
Function OB0HS-DEL-VBCPOX02()

  set SQLCA empty;
  set VBCPOX02 empty;

  VBCPOX02.OP1PARTN = OB3REC.OP1PARTN;
  VBCPOX02.OP1CUOID = OB3REC.OP1CUOID;
  VBCPOX02.OP1NORID = OB3REC.OP1NORID;
  VBCPOX02.OP2LNINB = OB3REC.OP2LNINB;
  VBCPOX02.SY5SZID = OB0HW01.DELETE-SIZE-ID;

  call "VBCPOX02" ("D1", SQLCA, VBCPOX02) {isNoRefresh = yes, isExternal = yes}; /**/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBCPOX02"; /* table view*/
    TA1REC.TA1LOCAT[1] = "D       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "VBCPOX02"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS-DE"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "L-VBCPOX"; /* extra key*/
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      OBWREC.OBWER911 = "Y"; /* show err*/
      XSOBS04(); /* no rollback, restart appl*/
    else
      XSOBEDC(); /* abort routine - no reset done*/
    end
  end


end // end OB0HS-DEL-VBCPOX02

// DELETE COMPANION RECORD
Function OB0HS-DEL-VOBXRF01()

  set VOBXRF01 empty;

  VOBXRF01.OP1PARTN = OB3REC.OP1PARTN; /* part char*/
  VOBXRF01.OP1CUOID = OB3REC.OP1CUOID; /* order number*/
  VOBXRF01.OP1NORID = OB3REC.OP1NORID; /* sub-order number*/
  VOBXRF01.OP2LNINB = OB3REC.OP2LNINB; /* line item nbr*/
  VOBXRF01.SY5SZID = 0; /* size (currently at product level)*/


  call "VOBXRF01" ("D ", SQLCA, VOBXRF01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOBXRF01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "D   VOBX"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "RF01  OB"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "0HS-DEL-"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VOBXRF01"; /* statement group*/
    TA1REC.TA1LOCAT[4] = OBWREC.OBWORDER; /* order number*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC(); /* abort routine - no reset*/
    end
  end




end // end OB0HS-DEL-VOBXRF01

// DELETE PREPACK
Function OB0HS-DELETE-PREPK()

   /* THIS STATEMENT GROUP DELETES THE PREPACK RECORD IF*/
   /* IT EXISTS*/

  call "VBCSPR01" ("D ", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDB   ";
    TA1REC.TA1TBLVU = "VBCSPR01";
    TA1REC.TA1LOCAT[1] = "DELETE  ";
    TA1REC.TA1LOCAT[2] = "VBCSPR01";
    TA1REC.TA1LOCAT[3] = "OB0HS-DELETE-PREPK";
    TA1REC.TA1LOCAT[4] = VBCSPR01.VBCSPRP01-KEY;
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

end // end OB0HS-DELETE-PREPK

// EDIT BULK ORDER ID
Function OB0HS-EDIT-BULK-ID()

  if (OB0HM001.OP1BLKID == 0)
    return;
  end

    /* CHECK FOR BULK ORD ID*/

  OB0HW01.OB0HW-END-OF-BULKS-FL = "N"; /* initialize flags*/
  OB0HW02.OB0HWFND = "N";
  set OP1REC empty;
  set SQLCA empty;
  OB0HW01.OB0HW-ORD-ID = OB0HM001.OP1BLKID; /* set upd key*/
  OP1REC.OP1PARTN = OB0HW01.OP1PARTN; /* for op1rec*/
  OP1REC.OP1CUOID = OB0HM001.OP1BLKID; /* bulk record*/
  OP1REC.OP1NORID = 0;

  TA1REC.TA1DBASE = "DORDER  ";
  TA1REC.TA1TBLVU = "VORHDR01";
  TA1REC.TA1LOCAT[2] = "IO0430  ";
  TA1REC.TA1LOCAT[3] = "OB0HS-ED";
  TA1REC.TA1LOCAT[4] = "IT-BULK-";

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "SS      ";
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

  OB0HS-NEXT-BULK(); /* get first bulk header record*/

  if (SQLCA.VAGen_SQLCODE == 100)
    set OB0HM001.OP1BLKID cursor, bold;
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(075); /* bulk not found*/
    return;
  end

  while (OB0HW01.OB0HW-END-OF-BULKS-FL == "N")

    if (OP1REC.XBDCD in XBDTBL.XBDCD
     && XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* make sure order is bulk*/

      OB0HS43(); /* check if this item is on bulk order*/

    end

    if (OB0HW02.OB0HWFND == "Y") /* if item is on bulk set flag to stop loop*/
      OB0HW01.OB0HW-END-OF-BULKS-FL = "Y";
    else
      OB0HS-NEXT-BULK(); /* item not on this bulk, read next*/
    end

  end

  if (OB0HW02.OB0HWFND == "Y")
    OB0HW01.SP1ID = OP1REC.SP1ID; /* save bulk sales program*/
  else
    set OB0HM001.OP1BLKID cursor, bold; /* item not on any bulk orders*/
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(196); /* msg 'item not on bulk entered'*/
  end

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* close bulk cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "CS      ";
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end


end // end OB0HS-EDIT-BULK-ID

// EDIT CHANGE RSN CODE
Function OB0HS-EDIT-CHG-RSN()

   /* check for a valid change reason code*/


  if (OB0HM001.XOMCD != "  ")
      /* test for a valid change code*/
    if (OB0HM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active maint reason*/
      if (OB0HW01.QTY-INCREASE-FL == "Y" /* must be both*/
       && OB0HW01.QTY-DECREASE-FL == "Y")
        if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B")
          set OB0HM001.XOMCD initialAttributes;
        else
          OBWREC.OBWERRFL = "Y"; /* set error flg*/
          converseLib.validationFailed(234); /* rsn not valid for change*/
          set OB0HM001.XOMCD cursor, bold;
        end
      else
        if (((converseVar.eventKey is pf24 ||                             /* cancel key*/
        OB0HW01.QTY-DECREASE-FL == "Y")                                   /* or decrease qty*/
         && (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" ||                 
        XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B"))                       
         || (OB0HW01.QTY-INCREASE-FL == "Y"                               /* can be add or both*/
         && (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "A" ||                 
        XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B"))                       
         || (OB0HW01.QTY-INCREASE-FL == "N" &&                            /* doesn't matter*/
        OB0HW01.QTY-DECREASE-FL == "N"))                                 
          set OB0HM001.XOMCD initialAttributes;
        else
          OBWREC.OBWERRFL = "Y"; /* set error flg*/
          converseLib.validationFailed(234); /* rsn not valid for change*/
          set OB0HM001.XOMCD cursor, bold;
        end
      end
    else
      OBWREC.OBWERRFL = "Y"; /* set error flg*/
      converseLib.validationFailed(234); /* rsn not valid*/
      set OB0HM001.XOMCD cursor, bold;
    end
  else
    OBWREC.OBWERRFL = "Y"; /* set error flg*/
    converseLib.validationFailed(232); /* change reason required*/
    set OB0HM001.XOMCD cursor, bold;
  end



end // end OB0HS-EDIT-CHG-RSN

// edit quantities
Function OB0HS-EDIT-QTYS()

   /* Check to see if any quantities increased or decreased.*/

  OB0HW01.QTY-INCREASE-FL = "N";
  OB0HW01.QTY-DECREASE-FL = "N";
  OB0HWSU1 = 1; /* init size subscript*/

  while (OB0HWSU1 <= 40) /* while not done*/
    if (OB0HW01.OB0HWSAV[OB0HWSU1] > 0) /* within range?*/
      OB0HWSU2 = OB0HW01.OB0HWSAV[OB0HWSU1]; /* obtain OB3 subscript*/
      if (OB0HW01.OP3ONOQT[OB0HWSU1] > OB3REC.OP3ONOQT[OB0HWSU2])
        OB0HW01.QTY-INCREASE-FL = "Y";
      end
      if (OB0HW01.OP3ONOQT[OB0HWSU1] < OB3REC.OP3ONOQT[OB0HWSU2])
        OB0HW01.QTY-DECREASE-FL = "Y";
      end
    else
      if (OB0HW01.OP3ONOQT[OB0HWSU1] > 0)
        OB0HW01.QTY-INCREASE-FL = "Y";
      end
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up size subscript*/
  end



end // end OB0HS-EDIT-QTYS

// EDIT CHANGE RSN CODE
Function OB0HS-EDIT-XL-RSN()

   /* check for a valid change reason code*/

  if (OB0HM001.XOMCD != "  ")
      /* test for a valid change code*/
    if (OB0HM001.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active maint reason*/
      if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B" /* both add/decrease*/
       || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D") /* decrease product reason*/
         /* next sentence*/
      else
        OBWREC.OBWERRFL = "Y"; /* set error flg*/
        converseLib.validationFailed(235); /* rsn not valid for cancel*/
        set OB0HM001.XOMCD cursor, bold;
      end
    else
      OBWREC.OBWERRFL = "Y"; /* set error flg*/
      converseLib.validationFailed(234); /* rsn not valid*/
      set OB0HM001.XOMCD cursor, bold;
    end
  else
    OBWREC.OBWERRFL = "Y"; /* set error flg*/
    converseLib.validationFailed(237); /* enter chg rsn and PF24*/
    set OB0HM001.XOMCD cursor, bold;
  end



end // end OB0HS-EDIT-XL-RSN

// EDIT CHANGE RSN CODE
Function OB0HS-EDIT-XOMCD()

   /* if any errors exist don't need to check*/
   /* change reason.*/

  if (OBWREC.OBWERRFL == "Y")
    return;
  end

   /* see if any tracked OCD fields changed. If they*/
   /* did a change reason must be entered.*/

  OB0HW02.OB0HW-UPD-OCD-FL = "N";

  if (OB0HW01.OP1CUNDT != OB1REC.OP1CUNDT)
    OB0HW02.OB0HW-UPD-OCD-FL = "Y";
  end

  OB0HWSU1 = 1;
  while (OB0HWSU1 <= 40                    /* index less than 40*/
   && OB0HW01.SY4IDDSC[OB0HWSU1] != " " /* valid size*/
   && OB0HW02.OB0HW-UPD-OCD-FL == "N") /* update ocd flag = no*/
    OB0HWSU2 = OB0HW01.OB0HWSAV[OB0HWSU1];
    if (OB0HW01.OP3ONOQT[OB0HWSU1] != OB3REC.OP3ONOQT[OB0HWSU2])
      OB0HW02.OB0HW-UPD-OCD-FL = "Y";
    end
    OB0HWSU1 = OB0HWSU1 + 1;
  end

  if (OB0HW02.OB0HW-UPD-OCD-FL == "Y")
    if (OB0HM001.XOMCD == " ")
      OBWREC.OBWERRFL = "Y";
      converseLib.validationFailed(232);
      set OB0HM001.XOMCD cursor, bold;
    else
      OB0HS-EDIT-CHG-RSN();
    end
  end
end // end OB0HS-EDIT-XOMCD

// edit push availability flag
Function OB0HS-EDT-PSH-AVIL()


  if (OB0HM001.OB0HM-PUSH-AVAIL != "N"
   && OB0HM001.OB0HM-PUSH-AVAIL != "Y"
   && OB0HM001.OB0HM-PUSH-AVAIL != " ")
    set OB0HM001.OB0HM-PUSH-AVAIL cursor, bold;
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(18); /* correct response is 'y' or 'n'*/
  end


end // end OB0HS-EDT-PSH-AVIL

// CHECK FOR PREPACK
Function OB0HS-GET-PREPK()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set VBCSPR01 empty;
  set SQLCA empty;

  VBCSPR01.XWHCD = OB1REC.XWHCD; /* WAREHOUSE*/
  VBCSPR01.OP1PARTN = OB1REC.OP1PARTN; /* PART CHAR*/
  VBCSPR01.OP1CUOID = OB1REC.OP1CUOID; /* ORDER NUM*/
  VBCSPR01.OP1NORID = OB1REC.OP1NORID; /* NIKE ORD ID*/
  VBCSPR01.OP2LNINB = OB3REC.OP2LNINB; /* LINE ITEM NBR*/

  call "VBCSPR01" ("S ", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0HS-DELETE-PREPK(); /* prepack exists*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence;              /* prepack doesn't exist*/
    else
      set SQLCA empty;
      TA1REC.TA1DBASE = "DORDB   ";
      TA1REC.TA1TBLVU = "VBCSPR01";
      TA1REC.TA1LOCAT[1] = "SE      ";
      TA1REC.TA1LOCAT[2] = "VBCSPR01";
      TA1REC.TA1LOCAT[3] = "OB0HS-GET-PREPK";
      TA1REC.TA1LOCAT[4] = VBCSPR01.VBCSPRP01-KEY;
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end

end // end OB0HS-GET-PREPK

// load map
Function OB0HS-LDMAP-OBZREC()

  OBZREC.OBZGROUP = COMMAREA.CA-USER-WORKAREA-2K-C;
  OB0HM001.OB0HMPRC = "OB0H010"; /* csp process*/

  OB0HM001.CAMSG = OBZREC.CAMSG;
  OB0HM001.VAGen_EZEMSG = OBZREC.ERRMSG;

   /* move the obwrec fields to the map*/
  OB0HM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/
  OB0HM001.OBWORDER = OBWREC.OBWORDER; /* order number*/
  OB0HM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/
  OB0HM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer name*/
  OB0HM001.OP1CUPO = OBWREC.OP1CUPO; /* purchase order number*/

   /* TCS change to comment the logic below 05/14/99*/
   /* *TCS INCLUDE BEGIN 11/06/97*/
   /* IF OB3REC.OP2AUPRC EQ 0;*/
    /* MOVE 'N' TO OBDUREC.OBWDUPL;/* to calc. avg price.*/
   /* END;*/
   /* IF OBDUREC.OBWDUPL EQ 'N ';*/
    /* MOVE 0 TO OB0HM001.OP2TONOQ;/*ADDED*/
    /* MOVE 0 TO OB0HM001.OP2LNIVL;/*ADDED*/
   /* ELSE;*/
    /* MOVE OB3REC.OP2TONOQ TO OB0HM001.OP2TONOQ;/* order quantity*/
    /* MOVE OB3REC.OP2LNIVL TO OB0HM001.OP2LNIVL;/* line item value*/
   /* END;*/
   /* *TCS INCLUDE END 11/06/97*/

   /* format the style, color, dimension, and move to map*/
  OB0HW02.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OB0HW02.OB0HW001 = "-"; /* first dash*/
  OB0HW02.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OB0HW02.OB0HW002 = "-"; /* second dash*/
  OB0HW02.XDMCD = OB3REC.XDMCD; /* dimension*/
  OB0HM001.OB0HMPRD = OB0HW02.OB0HWPRD; /* formatted product*/

  OB0HW02.OB0HWSSN = SYCREC.SY1SSTNM; /* short style number*/
  OB0HW02.OB0HWSPC = " ";
  OB0HW02.OB0HWSCA = SYCREC.SY2CLRAB; /* style color abbrev*/
  OB0HM001.SY2PRDES = OB0HW02.OB0HWPDS; /* formatted prod descrpt*/


  OB0HM001.OB0HMSZF = OBHREC.OBHSZDES[OBHFSTSZ]; /* first valid size*/
  OB0HM001.OB0HMSZL = OBHREC.OBHSZDES[OBHLSTSZ]; /* last valid size*/


   /* move the first page of size descriptions and quantities*/
   /* from the work record to the map*/

   /* *TCS INCLUDE BEGIN  11/06/97*/
  if (OBDUREC.OBWDUPL == "N") /* check for new id*/
    OB0HWSU1 = 1;
    while (OB0HWSU1 <= 20)
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU1];
      OB0HM001.OP3ONOQT[OB0HWSU1] = 0;
      OB0HWSU1 = OB0HWSU1 + 1;
    end
    OB0HS90();
    if (SQLCA.VAGen_SQLCODE == 100
     || OB0HW01.OB0HWZPR == "Y")
      converseLib.validationFailed(250);
      OBWREC.OBWERRFL = "Y";
      OB0HW01.OB0HWCLP = 0;
    else
      OB0HS91();
      if (sysVar.arrayIndex < 7)
        OB0HW01.OB0HWCLP = SY5REC.SY5PRCUN[sysVar.arrayIndex];
      end
      OB3REC.OP2AUPRC = OB0HW01.OB0HWCLP;
    end
  else
    OB0HWSU1 = 1;
    while (OB0HWSU1 <= 20)
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU1];
      OB0HM001.OP3ONOQT[OB0HWSU1] = OBZREC.OP3ONOQT[OB0HWSU1];
      OB0HWSU1 = OB0HWSU1 + 1;
    end
  end
   /* *TCS INCLUDE END 11/06/97*/

   /* if there is more than one page of sizes, set the more*/
   /* sizes flag to 'y', otherwise 'n'.*/

  if (OB0HW01.SY4IDDSC[21] == " ") /* if 20 or fewer sizes*/
    OB0HM001.OB0HMMOR = "N"; /* more sizes flag*/
  else
    OB0HM001.OB0HMMOR = "Y"; /* more sizes flag*/
  end


  OB0HM001.XBDCD = OBZREC.XBDCD; /* bulk order code*/
  OB0HM001.OP1BLKID = OBZREC.OP1BLKID; /* bulk cust order id*/
  OB0HM001.OB0HMDPR = "."; /* seperate bulk cust id and nike id*/
  OB0HM001.OPRBNOID = OBZREC.OP1NORID; /* bulk nike order id*/

   /* CANADA 07/28/95*/

  OB0HM001.ZFC-CRCY-CD = OB1REC.ZFC-CRCY-CD; /* CANA currency code*/

  OB0HM001.OP2AUPRC = OB3REC.OP2AUPRC; /* average unit price*/


  OB0HM001.XWHCD = OBZREC.XWHCD; /* warehouse code*/
  OB0HS28(); /* warehouse abreviated description*/


  OB0HM001.XOWCD = OB0HW01.XOWCD; /* owner group code*/
  OB0HS29(); /* owner group abreviated description*/


   /* need date - needs to be reformatted before moving to map*/
  OB0HM001.OB0HMNDT = OBZREC.OP1CUNDT;


   /* base order type abrev*/
  OB0HS27();


  OB0HM001.XUMCD = OBZREC.XUMCD; /* unit of measure code*/
  OB0HS3D(); /* unit of measure description*/

   /* format a/o push availability flag*/

  if (OB3REC.OB-PART-AVAL-FL == "Y") /* a/o push avail flag is on*/
    OB0HM001.OB0HM-PUSH-AVAIL = "Y";
  else
    OB0HM001.OB0HM-PUSH-AVAIL = " ";
  end


end // end OB0HS-LDMAP-OBZREC

// GET MAX SOCD-HRR-RSN-SEQ
Function OB0HS-MAX-VSOHCR01()

   /* BUILD KEY TO READ VSOHCR01*/

  set VSOHCR01 empty;

  VSOHCR01.OP1PARTN = OB1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OB1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OB1REC.OP1NORID;
  VSOHCR01.SOCD-APPL-SRC-CD = "OB";
  VSOHCR01.XOMCD = OB0HM001.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = 1;

   /* / DO A SEQLECT UNIQUE TO SEE IF THE ROW EXISTS*/

  call "VSOHCR01" ("S ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    OB0HW02.OB0HW-MAX-SEQ = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "VSOHCR01" ("SM", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        OB0HW02.OB0HW-MAX-SEQ = VSOHCR01.SOCD-HDR-RSN-SEQ + 1;
      end
    end
  end

end // end OB0HS-MAX-VSOHCR01

// EDIT BULK ORDER ID
Function OB0HS-NEXT-BULK()

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    sysVar.arrayIndex = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0HW01.OB0HW-END-OF-BULKS-FL = "Y";
    else
      TA1REC.TA1LOCAT[1] = "SN      ";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end


end // end OB0HS-NEXT-BULK

// load map
Function OB0HS-SAVE-MAP()

  set OBZREC empty;

   /* move the first page of size descriptions and quantities*/
   /* from the work record to the map*/

  OB0HWSU1 = 1;
  while (OB0HWSU1 <= 20)
    OBZREC.OP3ONOQT[OB0HWSU1] = OB0HM001.OP3ONOQT[OB0HWSU1];
    OB0HWSU1 = OB0HWSU1 + 1;
  end
  OBZREC.XBDCD = OB0HM001.XBDCD; /* bulk order code*/
  OBZREC.OP1BLKID = OB0HM001.OP1BLKID; /* bulk cust order id*/
  OBZREC.OP1NORID = OB0HM001.OPRBNOID; /* bulk nike order id*/

  OBZREC.XWHCD = OB0HM001.XWHCD; /* warehouse code*/
  OBZREC.OP1CUNDT = OB0HM001.OB0HMNDT; /* need date*/
  OBZREC.XUMCD = OB0HM001.XUMCD; /* unit of measure code*/

  OBZREC.CAMSG = OB0HM001.CAMSG;
  OBZREC.ERRMSG = OB0HM001.VAGen_EZEMSG;

  COMMAREA.CA-USER-WORKAREA-2K-C = OBZREC.OBZGROUP;
end // end OB0HS-SAVE-MAP

// SAVE WCU1710 VALUES
Function OB0HS-SAVE-XREF()

   /* Save data for use in updating the xref or override table when a new*/
   /* size is populated on the screen.*/

  OB0HW01.XREF-CU-CUSKU-ID[OB0HWSB2] = WCU1710.CU-CUSKU-ID[OB0HWSB2];
  OB0HW01.XREF-XNX-DEPT-ID-XREF[OB0HWSB2] = WCU1710.XNX-DEPT-ID-XREF[OB0HWSB2];
  OB0HW01.XREF-CU-PROD-XREF-EDT[OB0HWSB2] = WCU1710.CU-PROD-XREF-EDT[OB0HWSB2];
  OB0HW01.XREF-CU-CUST-PROD-ID[OB0HWSB2] = WCU1710.CU-CUST-PROD-ID[OB0HWSB2];
  OB0HW01.XREF-CU-PROD-NM[OB0HWSB2] = WCU1710.CU-PROD-NM[OB0HWSB2];
  OB0HW01.XREF-CU-PROD-SNM[OB0HWSB2] = WCU1710.CU-PROD-SNM[OB0HWSB2];
  OB0HW01.XREF-CU-PROD-COLR-NM[OB0HWSB2] = WCU1710.CU-PROD-COLR-NM[OB0HWSB2];
   /* MOVE WCU1710.CU-PROD-SZ-ID(OB0HWSB2)*/
                             /* TO OB0HW01.XREF-CU-PROD-SZ-ID(OB0HWSB2);*/
   /* MOVE WCU1710.CU-PROD-SZ-NM(OB0HWSB2)*/
                             /* TO OB0HW01.XREF-CU-PROD-SZ-NM(OB0HWSB2);*/
  OB0HW01.XREF-XGP-GPC-CD[OB0HWSB2] = WCU1710.XGP-GPC-CD[OB0HWSB2];
  OB0HW01.XREF-SY-STY-NBR[OB0HWSB2] = WCU1710.SY-STY-NBR[OB0HWSB2];
  OB0HW01.XREF-SY-COLR-CD-ID[OB0HWSB2] = WCU1710.SY-COLR-CD-ID[OB0HWSB2];
  OB0HW01.XREF-XDM-DIM-CD[OB0HWSB2] = WCU1710.XDM-DIM-CD[OB0HWSB2];
  OB0HW01.XREF-XQA-QUAL-CD[OB0HWSB2] = WCU1710.XQA-QUAL-CD[OB0HWSB2];
  OB0HW01.XREF-CU-CUST-RTL-PRC[OB0HWSB2] = WCU1710.CU-CUST-RTL-PRC[OB0HWSB2];
  OB0HW01.XREF-CU-CUST-SPCL-PRC[OB0HWSB2] = WCU1710.CU-CUST-SPCL-PRC[OB0HWSB2];
  OB0HW01.XREF-CU-SPCL-PRC-EDT[OB0HWSB2] = WCU1710.CU-SPCL-PRC-EDT[OB0HWSB2];
  OB0HW01.XREF-CU-SUGG-RTL-PRC[OB0HWSB2] = WCU1710.CU-SUGG-RTL-PRC[OB0HWSB2];
  OB0HW01.XREF-CU-HANG-XGP-CD[OB0HWSB2] = WCU1710.CU-HANG-XGP-CD[OB0HWSB2];
  OB0HW01.XREF-CU-HANG-STY-NBR[OB0HWSB2] = WCU1710.CU-HANG-STY-NBR[OB0HWSB2];
  OB0HW01.XREF-PK-LABL-CD1[OB0HWSB2] = WCU1710.PK-LABL-CD1[OB0HWSB2];
  OB0HW01.XREF-PK-LABL-CD2[OB0HWSB2] = WCU1710.PK-LABL-CD2[OB0HWSB2];
  OB0HW01.XREF-YLA-LABL-ATCH-CD1[OB0HWSB2] = WCU1710.YLA-LABL-ATCH-CD1[OB0HWSB2];
  OB0HW01.XREF-YLA-LABL-ATCH-CD2[OB0HWSB2] = WCU1710.YLA-LABL-ATCH-CD2[OB0HWSB2];
  OB0HW01.XREF-CU-HANG-CRTN-CLS[OB0HWSB2] = WCU1710.CU-HANG-CRTN-CLS[OB0HWSB2];
  OB0HW01.XREF-CU-VEND-CLS-ID[OB0HWSB2] = WCU1710.CU-VEND-CLS-ID[OB0HWSB2];
  OB0HW01.XREF-CU-SKU-COMNT1[OB0HWSB2] = WCU1710.CU-SKU-COMNT1[OB0HWSB2];
  OB0HW01.XREF-CU-SKU-COMNT2[OB0HWSB2] = WCU1710.CU-SKU-COMNT2[OB0HWSB2];
  OB0HW01.XREF-CU-SKU-COMNT3[OB0HWSB2] = WCU1710.CU-SKU-COMNT3[OB0HWSB2];

end // end OB0HS-SAVE-XREF

// SELECT VBCPOX02
Function OB0HS-SEL-VBCPOX02()


  set SQLCA empty;
  set VBCPOX02 empty;

  VBCPOX02.OP1PARTN = OB3REC.OP1PARTN;
  VBCPOX02.OP1CUOID = OB3REC.OP1CUOID;
  VBCPOX02.OP1NORID = OB3REC.OP1NORID;
  VBCPOX02.OP2LNINB = OB3REC.OP2LNINB;
  VBCPOX02.SY5SZID = OB0HW01.OB0HW-SAVE-SZ;

  call "VBCPOX02" ("S ", SQLCA, VBCPOX02) {isNoRefresh = yes, isExternal = yes}; /**/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0HS-ADD-VBCPOX02();
  else
    if (SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBCPOX02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "VBCPOX02"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS-SE"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "L-VBCPOX"; /* extra key*/
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        OBWREC.OBWER911 = "Y"; /* show err*/
        XSOBS04(); /* no rollback, restart appl*/
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end


end // end OB0HS-SEL-VBCPOX02

// SELECT CUSTOMER
Function OB0HS-SEL-VCMPNY01()

     /* build KUCREC key - company*/
     /* read company table to get company's cu-cusku-sz-fl*/

  set KUCREC empty;
  set SQLCA empty;
  KUCREC.KUCCOID = OB1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0HW01.CU-CUSKU-SZ-FL = KUCREC.CU-CUSKU-SZ-FL; /* save flag*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0240  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS-SE"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "L-VCMPNY"; /* statement group*/
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC(); /* abort routine - no reset*/
    end
  end

end // end OB0HS-SEL-VCMPNY01

// verify need dt in same season
Function OB0HS-VCUTOF01()

   /* *************************************************/
   /* * if the need date has been modified, find the*/
   /* * production deadline. find out if the new need*/
   /* * date is within the same season.*/
   /* **************************************************/

  set TA1REC empty;
  set TA2REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

   /* if futures non-draw, checks the production cutoff date*/

  if (XOTTBL.XOTFUTRF[OB0HWXOT] == "Y" /* futures*/
   && OB3REC.XGPCD == "03"             /* apparel*/
   && XBDTBL.XBDRWOFL[OB0HWXBD] == "N") /* and not a draw*/
    OPJREC.XOTCD = OB0HW01.XOTCD; /* order type code*/
    OPJREC.XPCCD = SYCREC.XPCCD; /* prod category*/
    OPJREC.XGACD = SYCREC.XGACD; /* gender age*/
    OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* style*/
    OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* color*/
    OPLREC.OPLSOP = "SF"; /* call type*/
    OPLREC.OPJCNDTB = OB1REC.OP1CUNDT; /* need date*/

    call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/

       /* new need date greater than prod cutof end need dt*/

      if (OB0HW01.OP1CUNDT > OPJREC.OPJCNDTX) /* need date*/
        converseLib.validationFailed(242); /* need date not in same season*/
        OBWREC.OBWERRFL = "Y";
        set OB0HM001.OB0HMNDT cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        converseLib.validationFailed(241); /* record not found; can't add*/
        OBWREC.OBWERRFL = "Y";
        set OB0HM001.OB0HMNDT cursor, modified, bold;
      else
        if (SQLCA.VAGen_SQLCODE != 0) /* any other sql*/
          TA1REC.TA1TYPE = "DB2";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OB0H";
          TA1REC.TA1LOCAT[1] = "SF";
          TA1REC.TA1LOCAT[2] = "OB0HS-VCUTOF01";
          TA1REC.TA1LOCAT[3] = "IO2560 ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1LOCAT[4] = "OB0HM001";
          TA1REC.TA1DBASE = "DORDER.";
          TA1REC.TA1TBLVU = "VCUTOF01";
          XSOPS02();
        end
      end
    end
  end

end // end OB0HS-VCUTOF01

// initialization
Function OB0HS01()

  set ERRSQLCA empty;
  set KUYREC empty;
  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBHREC empty;
  set OBIREC empty;
  set OBKREC empty;
  set OBFEREC empty;
  set OBLEREC empty;
  set OBSFREC empty;
  set OBSOREC empty;
  set OBSSREC empty;
  set OB0HW01 empty;
  set OB0HW02 empty;
  set OB1REC empty;
  set OB2REC empty;
  set OB3REC empty;
  set OB8REC empty;
  set OPAGREC empty;
  set OP1REC empty;
  set OP3REC empty;
  set OP6REC empty;
  set SQLCA empty;
  set SYCREC empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set XOWREC empty;
  set XX0XW01 empty;
   /* TCS CHANGE BEGIN 01/29/1998*/
  set YSMREC empty;
  set IVEREC empty;
  set VNLXPY01 empty;
   /* TCS CHANGE END   01/29/1998*/

  set OB0HM001 empty;
  TA1REC.TA1MAP = "OB0HM001";
  COMMAREA.CAFROMAP = "OB0H";

  OB0HW02.OB0HWAVF = "N"; /* init display avail flag*/
  OB0HW02.OB0HWSPL = "N"; /* init order split flag*/

    /* get date and time*/
  XX0XS01();
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

end // end OB0HS01

// build map
Function OB0HS05()

    /* Read all database records*/

  OB0HS10();


    /* Load work record and map*/

  OB0HS20();


    /* Get customer xref data and save in working storage*/

  OB0HS-CU1710-OPT1();


    /* Set field attributes (except avail)*/

  OB0HS25();


    /* Availability*/

  OB0HS40();


end // end OB0HS05

// read all database records
Function OB0HS10()

    /* read item/size - OB3REC*/

  OB0HS11();


    /* read product - SYCREC*/

  OB0HS12();


    /* lookup corporate tables*/

  OB0HS13();


    /* get valid sizes*/

  OB0HS14();


    /* read for service rep id - KUYREC*/

  OB0HS15();

end // end OB0HS10

// read item/size - OB3REC
Function OB0HS11()

  set OB3REC empty;
  set OBSFREC empty;
  set SQLCA empty;

  OB3REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB3REC.OP1CUOID = OB1REC.OP1CUOID; /* customer order id*/
  OB3REC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/
  OB3REC.OP2LNINB = OBWREC.OBWLNINB; /* line item number*/

  OBSFREC.OBSF-TASK = "S ";
  OBSFREC.OBSF-CALLER-LOC-1 = "S       ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "OB0HS11 ";
  OBSFREC.OBSF-CALLING-APPL = "OB0H";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0 /* good return*/
   || OBSFREC.OBSF-RETURN-CD == 11) /* or no sizes*/
     /* continue*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* not found*/
      OBWREC.CAMSG = "PRODUCT NO LONGER ON ORDER";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS11 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* return code*/
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/

      if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
       || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0HS11

// read product - SYCREC
Function OB0HS12()

  set SYCREC empty;
  set SQLCA empty;

  SYCREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  SYCREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* not found*/

      /* CANADA 07/27/95*/
      /* Added call to SY2000 for apparel GPC 03 regardless of order*/
      /* origin - kramse - 3/22/99*/

    if (OB1REC.XDZ-DATA-DIST-CD == "CA" /* This is a Canadian customer*/
     || SYCREC.XGPCD == "03")           /* or gpc code '03'*/

        /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "OB0H"; /* program name*/
      TA1REC.TA1LOC = "OB0HS12"; /* statement group name*/
      TA1REC.TA1MAP = "OB0HM001"; /* CANA map name*/

      XSOB-CALL-SY2000(); /* call SY2000 to get*/
                                   /* product/region record*/

      if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
       /* ok - next sentence*/
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
          OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INVALID PRODUCT FOR REGION";
          COMMAREA.CAUSERA = OBWREC.OBWGROUP;
          XSOBP09(); /* transfer to product summary*/
        else
          TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
          TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
          TA1REC.TA1LOCAT[2] = "SY2000  "; /* i/o mod name*/
          TA1REC.TA1LOCAT[3] = "OB0HS12 "; /* statement group*/
          TA1REC.TA1LOCAT[4] = OB3REC.SY1STNBR; /* style*/
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            XSOBS04(); /* 911 - no rollback*/
          else /* CANA DB2 fatal error*/
            XSOBEDC(); /* retn - no rollback*/
          end
        end
      end
    else /* CANA not a Canadian customer*/
      /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INVALID PRODUCT";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0560  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS12 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OB3REC.SY1STNBR; /* style*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0HS12

// lookup corporate tables
Function OB0HS13()

    /* lookup corporate tables*/

  OB0HW01.XOTCD = OB1REC.XOTCD; /* ob0hs16 uses ob0hw01.xotcd*/

  OB0HS16(); /* lookup xottbl*/
  OB0HS17(); /* lookup xbdtbl*/

end // end OB0HS13

// read valid sizes
Function OB0HS14()

  set OBHREC empty;

  OBHREC.OP1CUOID = OB1REC.OP1CUOID; /* customer*/
  OBHREC.XDVCD = OB1REC.XDVCD; /* division*/
  OBHREC.XOTCD = OB1REC.XOTCD; /* order type*/
  OBHREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBHREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OBHREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OBHREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "OB1700" (OBHREC) {isNoRefresh = yes, isExternal = yes};

  if (OBHREC.OBHRTNCD == 00) /* good return*/
     /* ok - next sentence*/
  else
    if (OBHREC.OBHRTNCD == 01) /* no valid sizes*/
      OBWREC.CAMSG = "NO VALID SIZES FOR PRODUCT";
    else
      OBWREC.CAMSG = "CANNOT FIND SIZES FOR PRODUCT";
    end
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP09(); /* transfer to product summary*/
  end

end // end OB0HS14

// read service rep id - KUYREC
Function OB0HS15()

  set KUYREC empty;
  set SQLCA empty;

  KUYREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
     /* ok - next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "SERVICE REP ID IS NOT VALID";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "SA      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0550  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS15 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = KUYREC.XXXUSRID; /* service rep*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0HS15

// lookup xottbl
Function OB0HS16()

    /* read order type table and save subscript*/

  sysVar.arrayIndex = 1;
  if (OB0HW01.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OB0HW02.OB0HWXOT = sysVar.arrayIndex; /* save xot subscript*/
    else
      OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INACTIVE SYSTEM ORDER TYPE";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    end
  else
    OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INVALID SYSTEM ORDER TYPE";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP09(); /* transfer to product summary*/
  end

end // end OB0HS16

// lookup xbdtbl
Function OB0HS17()


    /* read bulk/draw table and save subscript*/

  sysVar.arrayIndex = 1;
  if (OB1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OB0HW02.OB0HWXBD = sysVar.arrayIndex; /* save xbd subscript*/
    else
      OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INACTIVE BULK CODE";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    end
  else
    OBWREC.CAMSG = "UNABLE TO DISPLAY SIZES, INVALID BULK CODE";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    XSOBP09(); /* transfer to product summary*/
  end

end // end OB0HS17

// load work record and map
Function OB0HS20()

    /* Load work record from database records*/

  OB0HS21();


    /* Load map*/

  if (COMMAREA.CACURRAP == "OM0G")
    OB0HS-LDMAP-OBZREC();
    COMMAREA.CACURRAP = "OB0H";
  else
    OB0HS22();
  end

end // end OB0HS20

// load work rec from database
Function OB0HS21()

   /* The idea here is load the work record with data from the*/
   /* databases.  The work record will contain all fields that*/
   /* can be changed, as well as all display fields that occur*/
   /* 40 times, and can thus be paged (such as the size*/
   /* descriptions and availability).  All updates will be made*/
   /* to this work record, and if PF21 is pressed, paging*/
   /* will occur by updating the map with data from this work*/
   /* record.*/

   /* All of the work record fields will be filled in here,*/
   /* except for the availability fields, which will be filled*/
   /* in later.*/

   /* The first thing we'll do is loop thru the quantities in*/
   /* the OB3REC at the same time as we go thru the valid sizes*/
   /* in the OBHREC.  We are looking for all valid sizes, as*/
   /* well as any non-valid sizes that have quantity.  The*/
   /* first one we find will be put in occurance 1 of the work*/
   /* record, the second one found in occurance 2, etc.  That*/
   /* way the first 20 in the work record will show up on the*/
   /* first page of the map, and the next 20 on the second page.*/
   /* We also need to save the subscript of where the quantity*/
   /* came from on the OB3REC, so that we know where to move it*/
   /* back to when it is time to update.*/

  OB0HWSU1 = 1; /* initialize OB3/OBHREC subscript*/
  OB0HWSU2 = 1; /* initialize work record subscript*/

  while (OB0HWSU1 <= 40) /* only 40 sizes possible*/
    if (OBHREC.OBHSZDES[OB0HWSU1] != " " /* if valid size or*/
     || OB3REC.OP3ONOQT[OB0HWSU1] != 0)  /* non-zero quantity*/
      OB0HW01.OP3ONOQT[OB0HWSU2] = OB3REC.OP3ONOQT[OB0HWSU1];
      OB0HW01.OB0HWSAV[OB0HWSU2] = OB0HWSU1; /* save OB3 subscript*/
      if (OBHREC.OBHSZDES[OB0HWSU1] == " ") /* if invalid size*/
        OB0HW01.SY4IDDSC[OB0HWSU2] = "UNKWN"; /* unknown size*/
      else
        OB0HW01.SY4IDDSC[OB0HWSU2] = OBHREC.OBHSZDES[OB0HWSU1];
      end
      OB0HWSU2 = OB0HWSU2 + 1; /* bump up work record subscript*/
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up OB3/OBH subscript*/
  end


   /* ok, now just fill in the rest of the work record fields*/
   /* (except for availability).*/

  OB0HW01.XBDCD = OB1REC.XBDCD; /* bulk order id*/
  OB0HW01.OP1BLKID = OB1REC.OP1BLKID; /* bulk order id*/
  OB0HW01.OPRBNOID = OB3REC.OPRBNOID; /* bulk nike ord id*/

  OB0HW01.XWHCD = OB1REC.XWHCD; /* warehouse code*/
  OB0HW01.XOWCD = OB3REC.XOWCD; /* owner group code*/
  OB0HW01.XUMCD = OB3REC.XUMCD; /* unit of measure code*/
  OB0HW01.OB-PART-AVAL-FL = OB3REC.OB-PART-AVAL-FL; /* atonce push fl*/
  OB0HW01.OP1CUNDT = OB1REC.OP1CUNDT; /* need date*/
  OB0HW01.XOTCD = OB1REC.XOTCD; /* sytem order-type*/
  OB0HW01.XOBCD = OB1REC.XOBCD; /* base order type*/
  OB0HW01.XDSCD = OB1REC.XDSCD; /* direct ship code*/

  OB0HW01.OB0HWPAG = "1"; /* set current map page to 1*/

end // end OB0HS21

// load map
Function OB0HS22()

  OB0HM001.OB0HMPRC = "OB0H010"; /* csp process*/


   /* move the obwrec fields to the map*/
  OB0HM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/
  OB0HM001.OBWORDER = OBWREC.OBWORDER; /* order number*/
  OB0HM001.OBWCUST = OBWREC.OBWCUST; /* customer number*/
  OB0HM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer name*/
  OB0HM001.OP1CUPO = OBWREC.OP1CUPO; /* purchase order number*/

   /* TCS change to comment the code below 05/14/99*/
   /* *TCS INCLUDE BEGIN  11/06/97*/
   /* IF OB3REC.OP2AUPRC EQ 0;*/
    /* MOVE 'N' TO OBDUREC.OBWDUPL;/* to calc. avg price.*/
   /* END;*/
   /* IF OBDUREC.OBWDUPL EQ 'N';         /* check for new id*/
    /* MOVE 0 TO OB0HM001.OP2TONOQ;*/
    /* MOVE 0 TO OB0HM001.OP2LNIVL;*/
   /* ELSE;*/
    /* MOVE OB3REC.OP2TONOQ TO OB0HM001.OP2TONOQ;/* quanity on orde*/
    /* MOVE OB3REC.OP2LNIVL TO OB0HM001.OP2LNIVL;/* line item value*/
   /* END;*/
   /* *TCS INCLUDE END  11/06/97*/

   /* format the style, color, dimension, and move to map*/
  OB0HW02.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OB0HW02.OB0HW001 = "-"; /* first dash*/
  OB0HW02.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OB0HW02.OB0HW002 = "-"; /* second dash*/
  OB0HW02.XDMCD = OB3REC.XDMCD; /* dimension*/
  OB0HM001.OB0HMPRD = OB0HW02.OB0HWPRD; /* formatted product*/

  OB0HW02.OB0HWSSN = SYCREC.SY1SSTNM; /* short style number*/
  OB0HW02.OB0HWSPC = " ";
  OB0HW02.OB0HWSCA = SYCREC.SY2CLRAB; /* style color abbrev*/
  OB0HM001.SY2PRDES = OB0HW02.OB0HWPDS; /* formatted prod descrpt*/


  OB0HM001.OB0HMSZF = OBHREC.OBHSZDES[OBHFSTSZ]; /* first valid size*/
  OB0HM001.OB0HMSZL = OBHREC.OBHSZDES[OBHLSTSZ]; /* last valid size*/


   /* move the first page of size descriptions and quantities*/
   /* from the work record to the map*/

   /* *TCS INCLUDE BEGIN  11/06/97*/
  if (OBDUREC.OBWDUPL == "N") /* check for new id*/
    OB0HWSU1 = 1;
    while (OB0HWSU1 <= 20)
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU1];
      OB0HM001.OP3ONOQT[OB0HWSU1] = 0;
      OB0HWSU1 = OB0HWSU1 + 1;
    end
    OB0HS90();
    if (SQLCA.VAGen_SQLCODE == 100
     || OB0HW01.OB0HWZPR == "Y")
      converseLib.validationFailed(250);
      OBWREC.OBWERRFL = "Y";
      OB0HW01.OB0HWCLP = 0;
    else
      OB0HS91();
      if (sysVar.arrayIndex < 7)
        OB0HW01.OB0HWCLP = SY5REC.SY5PRCUN[sysVar.arrayIndex];
      end
      OB3REC.OP2AUPRC = OB0HW01.OB0HWCLP;
    end
  else
    OB0HWSU1 = 1;
    while (OB0HWSU1 <= 20)
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU1];
      OB0HM001.OP3ONOQT[OB0HWSU1] = OB0HW01.OP3ONOQT[OB0HWSU1];
      OB0HWSU1 = OB0HWSU1 + 1;
    end
  end
   /* *TCS INCLUDE END  11/06/97*/

   /* if there is more than one page of sizes, set the more*/
   /* sizes flag to 'y', otherwise 'n'.*/

  if (OB0HW01.SY4IDDSC[21] == " ") /* if 20 or fewer sizes*/
    OB0HM001.OB0HMMOR = "N"; /* more sizes flag*/
  else
    OB0HM001.OB0HMMOR = "Y"; /* more sizes flag*/
  end


  OB0HM001.XBDCD = OB0HW01.XBDCD; /* bulk order code*/
  OB0HM001.OP1BLKID = OB0HW01.OP1BLKID; /* bulk cust order id*/
  OB0HM001.OB0HMDPR = "."; /* seperate bulk cust id and nike id*/
  OB0HM001.OPRBNOID = OB0HW01.OPRBNOID; /* bulk nike order id*/

   /* CANADA 07/28/95*/

  OB0HM001.ZFC-CRCY-CD = OB1REC.ZFC-CRCY-CD; /* CANA currency code*/

  OB0HM001.OP2AUPRC = OB3REC.OP2AUPRC; /* average unit price*/


  OB0HM001.XWHCD = OB0HW01.XWHCD; /* warehouse code*/
  OB0HS28(); /* warehouse abreviated description*/


  OB0HM001.XOWCD = OB0HW01.XOWCD; /* owner group code*/
  OB0HS29(); /* owner group abreviated description*/


   /* need date - needs to be reformatted before moving to map*/
  OBWREC.OBWDT8 = OB0HW01.OP1CUNDT;
  XSOBDCM(); /* reformat db2 date to map date*/
  OB0HM001.OB0HMNDT = OBWREC.OBWDT6;


   /* base order type abrev*/
  OB0HS27();


  OB0HM001.XUMCD = OB0HW01.XUMCD; /* unit of measure code*/
  OB0HS3D(); /* unit of measure description*/

   /* format a/o push availability flag*/

  if (OB3REC.OB-PART-AVAL-FL == "Y") /* a/o push avail flag is on*/
    OB0HM001.OB0HM-PUSH-AVAIL = "Y";
  else
    OB0HM001.OB0HM-PUSH-AVAIL = " ";
  end

end // end OB0HS22

// set field attributes
Function OB0HS25()

   /* set size and quantity fields*/
  OB0HWSU1 = 1; /* init map subscript*/
  while (OB0HWSU1 <= 20)
    if (OB0HM001.SY4IDDSC[OB0HWSU1] != " ") /* if valid size*/
      if (OB1REC.YOBCD == "CA" /* cleared availability*/
       || OB1REC.YOBCD == "LP" /* lost demand reported*/
       || OB1REC.YOBCD == "PD") /* postponed demand reported*/
        set OB0HM001.SY4IDDSC[OB0HWSU1] skip;
        set OB0HM001.OP3ONOQT[OB0HWSU1] skip;
      else
        set OB0HM001.SY4IDDSC[OB0HWSU1] initialAttributes;
        set OB0HM001.OP3ONOQT[OB0HWSU1] initialAttributes;
      end
    else
      set OB0HM001.SY4IDDSC[OB0HWSU1] skip, invisible;
      set OB0HM001.OP3ONOQT[OB0HWSU1] skip, invisible;
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end


   /* if there are 10 or fewer sizes on a page, then the second*/
   /* map row descriptions can be darkened*/

  if (OB0HM001.SY4IDDSC[11] == " ") /* if 10 or fewer sizes on page*/
    set OB0HM001.OB0HMSIL skip, invisible; /* 2nd size label*/
    set OB0HM001.OB0HMQTL skip, invisible; /* 2nd quantity label*/
  else
    set OB0HM001.OB0HMSIL initialAttributes; /* 2nd size label*/
    OB0HM001.OB0HMSIL = "   SIZE:";
    set OB0HM001.OB0HMQTL initialAttributes; /* 2nd quantity label*/
    OB0HM001.OB0HMQTL = "    QTY:";
  end


   /* musical size run code - darken and askip if not a footwear order*/

   /* F OB1REC.XGPCD = '02'*/
   /* AND OB1REC.XPACD = 'MS';*/
   /* MOVE 'MSC:' TO OB0HM001.OB0HM-MSR-LIT;*/
   /* SET OB0HM001.OB0HM-MSR-LIT DEFINED;*/
   /* SET OB0HM001.OP-MSC-SZ-RUN-CD DEFINED;*/
   /* SET OB0HM001.OP2TONOQ NORMAL;*/
   /* LSE;*/
   /* MOVE '    ' TO OB0HM001.OB0HM-MSR-LIT;*/
   /* SET OB0HM001.OB0HM-MSR-LIT AUTOSKIP,DARK;*/
   /* SET OB0HM001.OP-MSC-SZ-RUN-CD AUTOSKIP,DARK;*/
   /* SET OB0HM001.OP2TONOQ DEFINED;*/
   /* ND;*/

   /* askip if order has cleared availability*/

  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    set OB0HM001.XBDCD skip; /* bulk draw code*/
    set OB0HM001.OP1BLKID skip; /* bulk cust order id*/
    set OB0HM001.OB0HMDPR skip; /* period*/
    set OB0HM001.OPRBNOID skip; /* bulk nike order id*/
  else
    set OB0HM001.XBDCD initialAttributes; /* bulk order id*/
    set OB0HM001.OP1BLKID initialAttributes; /* bulk cust order id*/
    set OB0HM001.OPRBNOID initialAttributes; /* bulk nike order id*/
    set OB0HM001.OB0HMDPR skip; /* period*/
    OB0HM001.OB0HMDPR = ".";
  end

   /* warehouse code - askip on a draw or if the order*/
   /* has cleared availability*/

  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y" /* if draw order*/
   || OB1REC.YOBCD == "CA"             /* cleared availability*/
   || OB1REC.YOBCD == "LP"             /* lost demand reported*/
   || OB1REC.YOBCD == "PD")            /* postponed demand reported*/
    set OB0HM001.XWHCD skip;
  else
    set OB0HM001.XWHCD initialAttributes;
  end

   /* owner group code - askip on a draw or if the order*/
   /* has cleared availability*/

  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y" /* if draw order*/
   || OB1REC.YOBCD == "CA"             /* cleared availability*/
   || OB1REC.YOBCD == "LP"             /* lost demand reported*/
   || OB1REC.YOBCD == "PD")            /* postponed demand reported*/
    set OB0HM001.XOWCD skip;
  else
    set OB0HM001.XOWCD initialAttributes;
  end

   /* need date - askip if the order has cleared availability*/

  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    set OB0HM001.OB0HMNDT skip; /* need date*/
  else
    set OB0HM001.OB0HMNDT initialAttributes; /* need date*/
  end

  if (OB1REC.YOBCD == "CA" /* cleared availability*/
   || OB1REC.YOBCD == "LP" /* lost demand reported*/
   || OB1REC.YOBCD == "PD") /* postponed demand reported*/
    if (OB0HM001.CAMSG == " ")
      OB0HM001.CAMSG = "ORDERS IN THIS STATUS ARE VIEW ONLY";
    end
  end

  if (OBWREC.OBW-PUSH-AVAIL == "Y") /* show a/o push literal and field*/
    set OB0HM001.OB0HM-PUSH-LIT initialAttributes;
    set OB0HM001.OB0HM-PUSH-AVAIL initialAttributes;
    OB0HM001.OB0HM-PUSH-LIT = "PARTIAL AVAIL";
  else
    set OB0HM001.OB0HM-PUSH-LIT skip, invisible;
    set OB0HM001.OB0HM-PUSH-AVAIL skip, invisible;
  end

end // end OB0HS25

// move xobcd abrev to map
Function OB0HS27()

   /* base order type abreviation*/

  sysVar.arrayIndex = 1;
  if (OB0HW01.XOBCD in XOBTBL.XOBCD)
    OB0HM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  else
    OB0HM001.XOBABRV = "UNKNWN";
  end

end // end OB0HS27

// find warehouse abreviation
Function OB0HS28()

   /* move warehouse abreviated description to map*/

  sysVar.arrayIndex = 1;
  if (OB0HM001.XWHCD in XWHTBL.XWHCD)
    OB0HM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  else
    OB0HM001.XWHSABRV = "UNKNWN";
  end

end // end OB0HS28

// find owner group abreviation
Function OB0HS29()

   /* move owner group abreviated description to map*/

  XOWREC.XWHCD = OB0HM001.XWHCD;
  XOWREC.XOWCD = OB0HM001.XOWCD;
  if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
    OB0HM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
     /* the table lookup is always done because there are some*/
     /* warehouses that have a description for owner group 00,*/
     /* but we don't want to display UNKNWN for the rest.*/
    if (OB0HM001.XOWCD == "00")
      OB0HM001.XOWABRV = " ";
    else
      OB0HM001.XOWABRV = "UNKNWN";
    end
  end

end // end OB0HS29

// edit map
Function OB0HS30()
   /* Edit push availability flag*/
  if (OBWREC.OBW-PUSH-AVAIL == "Y")
    OB0HS-EDT-PSH-AVIL();
  end

   /* Edit bulk order id*/
  OB0HS-EDIT-BULK-ID();

   /* Edit bulk/draw code*/
  OB0HS31();

    /* Edit need date*/
  OB0HS32();

    /* Edit owner group*/
  OB0HS33();

    /* Edit warehouse*/
  OB0HS34();

    /* Edit uom*/
  if (OB0HM001.XUMCD == " ")
    OB0HW01.XUMCD = OB0HM001.XUMCD;
  else
    OB0HS39(); /* only edit if uom not equal to spaces*/
    OB0HS3D(); /* unit of measure description*/
  end

    /* Edit bulk nike order id*/
    /* is done in ob0hs40 after*/
    /* getting the availability*/
  OB0HS35();

    /* edit musical size run code*/
   /* F OB1REC.XGPCD = '02';          /* if gpc = footwear*/
   /* OB0HS-EDIT-MSR;*/
   /* ND;*/

    /* Edit quantities*/
  OB0HS36();
  OB0HS-EDIT-QTYS();

    /* Just in case the warehouse or the owner group has*/
    /* changed, look-up the abreviated descriptions again.*/
  OB0HS28(); /* warehouse description*/
  OB0HS29(); /* owner group description*/
  OB0HS-EDIT-XOMCD(); /* change reason*/

end // end OB0HS30

// lookup xbdtbl
Function OB0HS31()


    /* read bulk/draw table and save subscript*/

  sysVar.arrayIndex = 1;
  if (OB0HM001.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OB0HW02.OB0HWXBD = sysVar.arrayIndex; /* save xbd subscript*/
      OB0HW01.XBDCD = OB0HM001.XBDCD;
    end
  end

end // end OB0HS31

// edit need date
Function OB0HS32()

   /* Need date must be a valid date*/

  OBWREC.OBWDT6 = OB0HM001.OB0HMNDT; /* move map to work date*/
  XSOBDED(); /* validate work date*/
  if (TA2REC.TA2RTNCD == 0) /* if a valid date*/
    OB0HW01.OP1CUNDT = TA2REC.TA2GRGGN; /* move to work rec*/
  else
    converseLib.validationFailed(015); /* NEED DATE IS NOT A VALID DATE*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0HM001.OB0HMNDT cursor, bold;
  end

  if (converseVar.eventKey is pf23) /* report true demand*/
    if (OB0HW01.OP1CUNDT == OB1REC.OP1CUNDT)
      OBWREC.OBWXLIND = "L"; /* lost demand*/
    else
      OBWREC.OBWXLIND = "P"; /* postponed demand*/
    end
  end

  if (OBWREC.OBWERRFL == "Y" /* errors found*/
   || converseVar.eventKey is pf23) /* report true demand*/
    /* next sentence*/
  else
    if (OB0HW01.OP1CUNDT == OB1REC.OP1CUNDT)
    /* next sentence*/
    else
      OB0HS-VCUTOF01(); /* check prod cutoff table*/
    end
  end
end // end OB0HS32

// edit owner group
Function OB0HS33()

  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y") /* if a draw order*/
    return; /* no edit needed, field is askip*/
  end


   /* if the owner group or warehouse is blank, then*/
   /* the owner group is set to 00*/

  if (OB0HM001.XOWCD == " " /* if owner group*/
   || OB0HM001.XWHCD == " ") /* or warehouse is blank*/
    OB0HM001.XOWCD = "00"; /* move 00 to map*/
    OB0HW01.XOWCD = "00"; /* and work record*/
  end


   /* Find the warehouse in the xwhtbl.  If not found,*/
   /* that's ok.  It'll be caught in the warehouse edit.*/

  sysVar.arrayIndex = 1;
  if (OB0HM001.XWHCD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* if whse requires owner group*/
      OB0HS3A(); /* validate owner group*/
    else /* whse does not require owner group*/
      if (OB0HM001.XOWCD == "00") /* if owner group is 00*/
        OB0HW01.XOWCD = OB0HM001.XOWCD; /* ok - move to work rec*/
      else
        converseLib.validationFailed(123); /* XOWCD NOT ALLOWED FOR WHSE*/
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        set OB0HM001.XOWCD cursor, bold;
      end
    end
  end


end // end OB0HS33

// edit warehouse
Function OB0HS34()

  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y") /* if a draw order*/
    return; /* no edit needed, field is askip*/
  end


   /* warehouse can only be blank when the direct*/
   /* ship code is 1.*/

  if (OB0HM001.XWHCD == " ") /* if warehouse is blank*/
    if (OB0HW01.XDSCD == "1") /* if direct ship code is 1*/
      OB0HW01.XWHCD = OB0HM001.XWHCD; /* ok - move to work rec*/
    else
      converseLib.validationFailed(124); /* WAREHOUSE IS REQUIRED*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0HM001.XWHCD cursor, bold;
    end
  else
    sysVar.arrayIndex = 1;
    if (OB0HM001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OB0HW01.XWHCD = OB0HM001.XWHCD; /* ok - move to work rec*/
    else
      converseLib.validationFailed(057); /* WAREHOUSE IS INVALID OR INACTIVE*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0HM001.XWHCD cursor, bold;
    end
  end

end // end OB0HS34

// edit bulk order ids
Function OB0HS35()




  OB0HW01.XBDCD = OB0HM001.XBDCD; /* move bulk draw code*/

  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y") /* if a draw order*/
    OB0HW01.OP1BLKID = OB0HM001.OP1BLKID; /* move bulk cust ord id*/
    OB0HW01.OPRBNOID = OB0HM001.OPRBNOID; /* move bulk nike ord id*/
  else
    OB0HW01.OP1BLKID = 0; /* move bulk cust ord id*/
    OB0HW01.OPRBNOID = 0; /* move bulk nike ord id*/
  end


end // end OB0HS35

// edit quantities
Function OB0HS36()

   /* The only quantity edit needed is to make sure the*/
   /* quantity entered is not negative, and since the map*/
   /* will handle that, there are no edits done here.*/
   /* The map quantities will be looped thru, and for each*/
   /* valid size shown, it will be moved to the work record.*/
   /* Remember, if you are on the second page, you need to*/
   /* adjust the work record subscript before you can move*/
   /* there from the map.*/

  OB0HWSU1 = 1; /* init map subscript*/

  while (OB0HWSU1 <= 20 /* while not done*/
   && OB0HM001.SY4IDDSC[OB0HWSU1] != " ") /* and valid size*/
    if (OB0HW01.OB0HWPAG == "1") /* if on page one*/
      OB0HW01.OP3ONOQT[OB0HWSU1] = OB0HM001.OP3ONOQT[OB0HWSU1];
    else
      OB0HWSU2 = OB0HWSU1 + 20; /* adjust work rec subscript*/
      OB0HW01.OP3ONOQT[OB0HWSU2] = OB0HM001.OP3ONOQT[OB0HWSU1];
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end



end // end OB0HS36

// read style - SY1REC
Function OB0HS39()

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  SY1REC.SY1STNBR = OB3REC.SY1STNBR; /* style*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    if (SY1REC.XUMCD == OB0HM001.XUMCD)
      OB0HW01.XUMCD = OB0HM001.XUMCD;
      set OB0HM001.XUMCD protect;
    else
      converseLib.validationFailed(185); /* display error message*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0HM001.XUMCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* style not found*/
      converseLib.validationFailed(103); /* display error message*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0HM001.XUMCD cursor, bold;
    else
      TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0120  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS39 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OB3REC.SY1STNBR; /* style*/
      if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0HS39

// validate owner group
Function OB0HS3A()

    /* make sure owner group is in XOW table*/

  sysVar.arrayIndex = 1;
  XOWREC.XWHCD = OB0HM001.XWHCD;
  XOWREC.XOWCD = OB0HM001.XOWCD;

  if (XOWREC.XOWKEY in XOWTBL.XOWKEY /* read xowtbl*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XOWTBL.XOWALUSR[sysVar.arrayIndex] == "Y") /* if allow all users*/
      OB0HW01.XOWCD = OB0HM001.XOWCD; /* ok*/
    else
      OB0HS3B(); /* check service rep restrictions*/
    end
  else
    converseLib.validationFailed(055); /* INVALID OWNER GROUP*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0HM001.XOWCD cursor, bold;
  end

end // end OB0HS3A

// check service rep restrictions
Function OB0HS3B()

  OB0HWSU1 = 1; /* initialize subscript*/
  OB0HW02.OB0HWFND = "N"; /* move 'n' to found flag*/

  while (OB0HW02.OB0HWFND == "N" /* while not found*/
   && XOLTBL.XSVCD[OB0HWSU1] != 9999) /* and not end of table*/

    if (XOLTBL.XSVCD[OB0HWSU1] == KUYREC.KUYSVRID /* service rep id*/
     && XOLTBL.XWHCD[OB0HWSU1] == OB0HM001.XWHCD  /* warehouse*/
     && XOLTBL.XXXSTAT[OB0HWSU1] == "A")          /* active*/

      OB0HW02.OB0HWFND = "Y"; /* move 'y' to found flag*/
      if (XOLTBL.XOLALLOF[OB0HWSU1] == "Y") /* if allow all owner groups*/
        OB0HW01.XOWCD = OB0HM001.XOWCD; /* ok - move to work rec*/
      else
        OB0HS3C(); /* match owner group code*/
      end
    end

    OB0HWSU1 = OB0HWSU1 + 1; /* bump up subscript*/

  end


  if (OB0HW02.OB0HWFND == "N") /* if XOL row not found*/
    converseLib.validationFailed(056); /* OWNER GROUP NOT AUTHORIZED*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0HM001.XOWCD cursor, bold;
  end

end // end OB0HS3B

// match owner group code
Function OB0HS3C()

  if (XOLTBL.XOWCD1[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD2[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD3[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD4[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD5[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD6[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD7[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD8[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD9[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD10[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD11[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD12[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD13[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD14[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD15[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD16[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD17[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD18[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD19[OB0HWSU1] == OB0HM001.XOWCD
   || XOLTBL.XOWCD20[OB0HWSU1] == OB0HM001.XOWCD)
    OB0HW01.XOWCD = OB0HM001.XOWCD; /* ok - move to work rec*/
  else
    converseLib.validationFailed(056); /* OWNER GROUP NOT AUTHORIZED*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0HM001.XOWCD cursor, bold;
  end

end // end OB0HS3C

// validate unit of measure
Function OB0HS3D()

    /* make sure unit of measure is in XUM table*/

  sysVar.arrayIndex = 1;

  if (OB0HM001.XUMCD in XUMTBL.XUMCD /* read xumtbl*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OB0HM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    converseLib.validationFailed(005); /* invalid unit of measure*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    set OB0HM001.XUMCD cursor, bold;
  end

end // end OB0HS3D

// availability
Function OB0HS40()

   /* Availability is found two different ways.  If the order*/
   /* is a draw, then availability is found by reading the*/
   /* bulk being drawn from, and getting the available quantities*/
   /* from it.  Otherwise, the availability database is read for*/
   /* the product to find the available quantities.  This is done*/
   /* by calling OB1210, the availability sub-module.*/
   /* After using either method, the availability quantities and*/
   /* condition codes are moved to the work record and the map.*/


  if (XBDTBL.XBDRWOFL[OB0HWXBD] == "Y") /* if a draw order*/
    OB0HS41(); /* get avail from bulk*/
  else
    OB0HS49(); /* get avail using OB1210*/
  end

end // end OB0HS40

// get availability from bulk
Function OB0HS41()

  OB0HW02.OB0HWFND = "N"; /* init found flag*/
  OB0HW02.OB0HWOP1 = "N"; /* init op1rec found flag*/
  OB0HW02.OB0HWOP3 = "N"; /* init op3rec found flag*/

  if (OB0HM001.OPRBNOID != 0) /* if the bulk sub-order is not blank*/
    OB0HS42(); /* read the bulk OP1REC*/
  end

  if (OB0HW02.OB0HWOP1 == "Y" /* if bulk OP1REC found*/
   && OP1REC.XBDCD == XBDTBL.XBDXRFCD[OB0HWXBD]) /* bulk/draw types match*/
    OB0HS43(); /* read the bulk OP6REC*/
    if (OB0HW02.OB0HWFND == "Y") /* if bulk OP6REC found*/
      OB0HS44(); /* read the bulk OP3REC*/
      if (OB0HW02.OB0HWOP3 == "Y") /* if bulk OP3REC found*/
          /* ok - next sentence*/
      end
    end
  end

  if (OB0HW02.OB0HWOP3 == "Y") /* if bulk OP3REC found*/
    OB0HW02.OB0HWAVF = "Y"; /* display availability*/
    OB0HS4A(); /* load avail work rec from bulk*/
    OB0HS4C(); /* move avail work rec to map*/
    OB0HS4D(); /* reset all avail map fields*/
  else
    OB0HW02.OB0HWAVF = "N"; /* do not display availability*/
    OB0HS4E(); /* darken all avail map fields*/
    if (OB0HM001.CAMSG == " ") /* if there isn't already a camsg*/
      OB0HM001.CAMSG = "AVAILABILITY COULD NOT BE FOUND";
    end
  end

end // end OB0HS41

// read bulk OP1REC
Function OB0HS42()

  set OP1REC empty;
  set SQLCA empty;

  OP1REC.OP1CUOID = OB0HM001.OP1BLKID; /* bulk cust order id*/
  OP1REC.OP1NORID = OB0HM001.OPRBNOID; /* bulk nike order id*/
  OB0HW02.OB0HWOID = OB0HM001.OP1BLKID; /* find part char*/
  OP1REC.OP1PARTN = OB0HW02.OB0HWPAR; /* part char*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* bulk header found*/
    OB0HW02.OB0HWOP1 = "Y"; /* set OP1REC found flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0430  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS42 "; /* statement group*/
      OB0HW02.OB0HWRK3 = OP1REC.OP1NORID; /* reformat*/
      TA1REC.TA1LOCAT[4] = OB0HW02.OB0HWRK3; /* bulk nike ord id*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end

end // end OB0HS42

// read bulk OP6REC
Function OB0HS43()

  set OP6REC empty;
  set SQLCA empty;

  OP6REC.OP1CUOID = OP1REC.OP1CUOID; /* bulk cust order id*/
  OP6REC.OP1NORID = OP1REC.OP1NORID; /* bulk nike order id*/
  OP6REC.OP1PARTN = OP1REC.OP1PARTN; /* part char*/
  OP6REC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OP6REC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  OP6REC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  OP6REC.XDMCD = OB3REC.XDMCD; /* dimension*/
  OP6REC.OP2CGPCD = OB3REC.OP2CGPCD; /* coordinate group*/

  call "IO0450" ("SA", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* OP6REC found*/
    OB0HW02.OB0HWFND = "Y"; /* set found flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VITEM002"; /* table view*/
      TA1REC.TA1LOCAT[1] = "SA      "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0450  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS43 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OP6REC.SY1STNBR; /* style*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC(); /* abort routine - no reset done*/
      end
    end
  end

end // end OB0HS43

// read bulk OP3REC
Function OB0HS44()

  set OPAGREC empty;
  set OP3REC empty;
  set SQLCA empty;

  OP3REC.OP1PARTN = OP1REC.OP1PARTN; /* part char*/
  OP3REC.OP1CUOID = OP1REC.OP1CUOID; /* customer order id*/
  OP3REC.OP1NORID = OP1REC.OP1NORID; /* nike order id*/
  OP3REC.OP2LNINB = OP6REC.OP2LNINB; /* line item number*/

  OPAGREC.OPAG-TASK = "S ";
  OPAGREC.OPAG-CALLER-LOC-1 = "S       ";
  OPAGREC.OPAG-CALLER-LOC-2 = "DB1050  ";
  OPAGREC.OPAG-CALLER-LOC-3 = "OB0HS44 ";
  OPAGREC.OPAG-CALLING-APPL = "OB0H";
  OPAGREC.OP3GROUP = OP3REC.OP3GROUP;

  call "DB1050" (OPAGREC) {isNoRefresh = yes, isExternal = yes};

  OP3REC.OP3GROUP = OPAGREC.OP3GROUP;

  if (OPAGREC.OPAG-RETURN-CODE == 0) /* if good return*/
    OB0HW02.OB0HWOP3 = "Y"; /* set OP3REC found flag*/
     /* continue*/
  else
    if (OPAGREC.OPAG-RETURN-CODE == 1 /* if not found*/
     || OPAGREC.OPAG-RETURN-CODE == 11) /* or no sizes*/
        /* ok - next sentence*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "DB1050  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS44 "; /* statement group*/
      TA1REC.TA1TBLKE = OPAGREC.OPAG-DIAG-KEY; /* table key*/
      if (OPAGREC.OPAG-RETURN-CODE == 14) /* -911*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB0HS44

// non-draw availability
Function OB0HS49()

  set OBIREC empty;
  set SQLCA empty;

  if (SYCREC.XPRCD == "22") /* screened style, use blank avail*/
    OBIREC.SY1STNBR = SYCREC.SY1BSTNB; /* blank style*/
    OBIREC.SY2CLRID = SYCREC.SY2BCLCD; /* blank color*/
  else
    OBIREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
    OBIREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  end

  OBIREC.OBIMAPDT = OB0HM001.OB0HMNDT; /* need date*/

  OBIREC.XDSCD = OB1REC.XDSCD; /* direct ship code*/
  OBIREC.XWHCD = OB0HM001.XWHCD; /* warehouse*/

    /* apparel direct ship use warehouse 51*/

  if (OB3REC.XGPCD == "03" /* apparel*/
   && OB1REC.XDSCD == "1") /* direct ship*/
    OBIREC.XWHCD = "51"; /* warehouse default to '51'*/
    OBIREC.XDSCD = " "; /* warehouse default to '51'*/
  end

  OBIREC.XOTCD = OB1REC.XOTCD; /* order type code*/
  OBIREC.XBCCD = OB1REC.XBCCD; /* brand code*/
  OBIREC.XOCCD = OB1REC.XOCCD; /* order class code*/
  OBIREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBIREC.XDMCD = OB3REC.XDMCD; /* dimension*/
  OBIREC.XQACD = OB3REC.XQACD; /* quality code*/

   /* If the map owner group is blank, then when it is editted*/
   /* in S34, it will have 00 moved to it.  By pretending that it*/
   /* is already 00 here, we will save having to do availability*/
   /* again on the next pass.*/

  if (OB0HM001.XOWCD == " ") /* if owner group code is blank*/
    OBIREC.XOWCD = "00";
  else
    OBIREC.XOWCD = OB0HM001.XOWCD;
  end

  OBIREC.PC2INSEG = OB3REC.PC2INSEG; /* iseg code*/
  OBIREC.XEGCD = OB3REC.XEGCD; /* engineering code*/
  OBIREC.XPGCD = OB3REC.XPGCD; /* package code*/
  OBIREC.XUMCD = OB3REC.XUMCD; /* unit of measure*/
  OBIREC.XLCCD = SYCREC.XLCCD1; /* life cycle code*/
  OBIREC.OP1CUNDT = OB1REC.OP1CUNDT; /* cust need date*/

  call "OB1210" (OBIREC, SQLCA) {isNoRefresh = yes, isExternal = yes};

  if (OBIREC.OBIRTNCD == 0) /* good return*/
    OB0HW02.OB0HWAVF = "Y"; /* display availability*/
    OB0HS4B(); /* load avail workrec from ob1210*/
    OB0HS4C(); /* move avail work rec to map*/
    OB0HS4D(); /* reset all avail map fields*/
  else
    OB0HW02.OB0HWAVF = "N"; /* do not display availability*/
    OB0HS4E(); /* darken all avail map fields*/
    if (OBIREC.OBIRTNCD == 1) /* no availability for order*/
        /* ok - no message*/
    else /* error calculating availability*/
      OBWREC.OBWERRFL = "Y"; /* force another pass to see no avail*/
      if (OB0HM001.CAMSG == " ") /* if there isn't already a camsg*/
        OB0HM001.CAMSG = "AVAILABILITY COULD NOT BE FOUND";
      end
    end
  end



end // end OB0HS49

// load avail work rec from bulk
Function OB0HS4A()

   /* Here we are loading the availability quantity to the work*/
   /* record from the bulk OP3REC that is being drawn from.*/
   /* Remember that the work record sizes are in the position*/
   /* that they appear on the map, not the position in which*/
   /* they appear on the OP3REC.*/

   /* So first, format the bulk need date in mm/dd format,*/
   /* because it will be used as the availability condition code.*/

  OBWREC.OBWDT8 = OP1REC.OP1CUNDT; /* need date to work date*/
  OB0HW02.OB0HWCMM = OBWREC.OBWDT8M; /* month*/
  OB0HW02.OB0HWCSS = "/"; /* slash*/
  OB0HW02.OB0HWCDD = OBWREC.OBWDT8D; /* day*/


   /* Now, loop thru the occurances in the work record to find*/
   /* valid sizes (they have the size description filled in).*/
   /* When one is found, move in the quantity from OP3REC*/
   /* that is in the position of the saved subscript*/
   /* of the OB3REC that was saved in the work record earlier.*/

  OB0HWSU1 = 1; /* init work rec subscript*/
  sysVar.arrayIndex = 1; /* init XOT  rec subscript*/

  if (OB1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex) /* Find order type code in table*/
  end

  while (OB0HWSU1 <= 40 /* only 40 sizes possible*/
   && OB0HW01.SY4IDDSC[OB0HWSU1] != " ") /* valid size*/
    OB0HWSU2 = OB0HW01.OB0HWSAV[OB0HWSU1]; /* set OP3REC subscript*/
    if (OP3REC.OP3SZAFL[OB0HWSU2] == "Y") /* if size active*/
      if (OBWREC.OBW-RSRV-QTY-ONLY == "Y" /* REQUEST RESERVED ONLY*/
       || OB1REC.XBDCD == "6"             /* smart draw*/
       || (OB1REC.XBDCD == "K"            /* nike draw and at once prop(footwear)*/
       && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y"))
        OB0HW01.OB0HWAVL[OB0HWSU1] = OP3REC.OP3OHRQT[OB0HWSU2];
      else
        OB0HW01.OB0HWAVL[OB0HWSU1] = OP3REC.OP3ONOQT[OB0HWSU2];
      end
      OB0HW01.OB0HWCON[OB0HWSU1] = OB0HW02.OB0HWCDT; /* cond cd date*/
    else
      OB0HW01.OB0HWAVL[OB0HWSU1] = 0;
      OB0HW01.OB0HWCON[OB0HWSU1] = " "; /* cond cd date*/
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up work rec subscript*/
  end

  if (OBWREC.OBW-RSRV-QTY-ONLY == "Y" /* requested reserved qtys only*/
   || OB1REC.XBDCD == "6"             /* smart draw*/
   || (OB1REC.XBDCD == "K"            /* nike draw and at once prop(footwear)*/
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y"))
    OB0HW01.AV2CMNT = "    BULK QTYS ARE RESERVED    ";
  else
    OB0HW01.AV2CMNT = " "; /* avail comment*/
  end

end // end OB0HS4A

// load avail workrec from OB1210
Function OB0HS4B()

   /* Here we are loading the availability data that was passed*/
   /* back to us from OB1210 in OBIREC to the work record.*/
   /* Remember that the work record sizes are in the position*/
   /* that they appear on the map, not the position in which*/
   /* they appear on the OB3REC and OBIREC.*/

   /* So, loop thru the occurances in the work record to find*/
   /* valid sizes (they have the size description filled in).*/
   /* When one is found, move in the availability stuff from*/
   /* OB1210 that is in the position of the saved subscript*/
   /* of the OB3REC that was saved in the work record earlier.*/

  OB0HWSU1 = 1; /* init work rec subscript*/

  while (OB0HWSU1 <= 40 /* only 40 sizes possible*/
   && OB0HW01.SY4IDDSC[OB0HWSU1] != " ") /* valid size*/
    OB0HWSU2 = OB0HW01.OB0HWSAV[OB0HWSU1]; /* set OBIREC subscript*/
    OB0HW01.OB0HWAVL[OB0HWSU1] = OBIREC.OBISZQTY[OB0HWSU2];
    OB0HW01.OB0HWCON[OB0HWSU1] = OBIREC.OBICOND[OB0HWSU2];
                                   /* cond cd*/
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up work rec subscript*/
  end


  OB0HW01.AV2CMNT = OBIREC.AV2CMNT; /* avail comment*/

end // end OB0HS4B

// move avail work rec to map
Function OB0HS4C()

   /* Here we are moving the availability fields from the work*/
   /* record to the map.  The work record and map fields are*/
   /* in the same sequence, so we only have to worry about*/
   /* which page we are on.*/

  OB0HM001.AV2CMNT = OB0HW01.AV2CMNT; /* move comment to map*/

  OB0HWSU1 = 1; /* init map subscript*/

  while (OB0HWSU1 <= 20 /* 20 sizes per page*/
   && OB0HM001.SY4IDDSC[OB0HWSU1] != " ") /* and a valid size*/
    if (OB0HW01.OB0HWPAG == "1") /* if on page one*/
      OB0HM001.OB0HMAVL[OB0HWSU1] = OB0HW01.OB0HWAVL[OB0HWSU1];
      OB0HM001.OB0HMCON[OB0HWSU1] = OB0HW01.OB0HWCON[OB0HWSU1];
    else /* on page two*/
      OB0HWSU2 = OB0HWSU1 + 20; /* adjust work rec subscript*/
      OB0HM001.OB0HMAVL[OB0HWSU1] = OB0HW01.OB0HWAVL[OB0HWSU2];
      OB0HM001.OB0HMCON[OB0HWSU1] = OB0HW01.OB0HWCON[OB0HWSU2];
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end

end // end OB0HS4C

// reset all avail map fields
Function OB0HS4D()

    /* set availability size fields*/

  OB0HWSU1 = 1; /* init map subscript*/
  while (OB0HWSU1 <= 20)
    if (OB0HM001.SY4IDDSC[OB0HWSU1] != " ") /* if valid size*/
      set OB0HM001.OB0HMAVL[OB0HWSU1] initialAttributes; /* avail*/
      set OB0HM001.OB0HMCON[OB0HWSU1] initialAttributes; /* cond cd*/
    else
      set OB0HM001.OB0HMAVL[OB0HWSU1] skip, invisible;
      set OB0HM001.OB0HMCON[OB0HWSU1] skip, invisible;
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end

  set OB0HM001.AV2CMNT initialAttributes; /* avail comment*/


  set OB0HM001.OB0HMDAV[1] initialAttributes; /* avail label 1*/
  OB0HM001.OB0HMDAV[1] = "  AVAIL:";
  set OB0HM001.OB0HMDCD[1] initialAttributes; /* cond cd label 1*/
  OB0HM001.OB0HMDCD[1] = "   COND:";

   /* if there are 10 or fewer sizes on a page, then the second*/
   /* map row descriptions can be darkened*/

  if (OB0HM001.SY4IDDSC[11] == " ") /* if 10 or fewer sizes on page*/
    set OB0HM001.OB0HMDAV[2] skip, invisible; /* 2nd avail label*/
    set OB0HM001.OB0HMDCD[2] skip, invisible; /* 2nd cond cd label*/
  else
    set OB0HM001.OB0HMDAV[2] initialAttributes; /* 2nd avail label*/
    OB0HM001.OB0HMDAV[2] = "  AVAIL:";
    set OB0HM001.OB0HMDCD[2] initialAttributes; /* 2nd cond cd label*/
    OB0HM001.OB0HMDCD[2] = "   COND:";
  end

end // end OB0HS4D

// darken all avail map fields
Function OB0HS4E()

  set OB0HM001.OB0HMDAV[1] skip, invisible; /* avail label 1*/
  set OB0HM001.OB0HMDAV[2] skip, invisible; /* avail label 2*/
  set OB0HM001.OB0HMDCD[1] skip, invisible; /* cond cd label 1*/
  set OB0HM001.OB0HMDCD[2] skip, invisible; /* cond cd label 2*/

  OB0HWSU1 = 1; /* init map subscript*/
  while (OB0HWSU1 <= 20)
    set OB0HM001.OB0HMAVL[OB0HWSU1] skip, invisible; /* avail*/
    set OB0HM001.OB0HMCON[OB0HWSU1] skip, invisible; /* cond cd*/
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end

  set OB0HM001.AV2CMNT skip, invisible; /* avail comment*/

end // end OB0HS4E

// update
Function OB0HS50()

   /* item will split to a new or existing suborder*/
   /* if the need date, warehouse, bulk customer*/
   /* order id or bulk-nike-ord-id has changed.*/
   /* If the bulk draw code has changed the item will*/
   /* split to a new order.*/


  OB0HS51(); /* save total values and quantities*/

   /* Load the OB1REC & OB3REC with the fields from the*/
   /* work rec, and if something was changed on the map, then*/
   /* set the flag to 'y'.*/

  OB0HS52();

   /* update and split when needed*/

  if (OB0HW02.OB0HWFLG == "Y") /* fields were changed*/
    if (OBWREC.OBW-EDIT-FUNCTION == "5")
      OB0HS53(); /* update - no split*/
    end
    if (OBWREC.OBW-EDIT-FUNCTION == "2")
      if (OB0HW02.OB0HWSPL == "Y") /* fields were changed*/
        OB0HS60(); /* update - split item to new subord*/
        OB0HS63(); /* update temp storage with new subord*/
      else
        OB0HS53(); /* update - no split*/
      end
    end
    if (OBWREC.OBW-EDIT-FUNCTION == "1")
      OB0HS60(); /* update - split item to new subord*/
      OB0HS70(); /* update - split subord to new order*/
      OB0HS73(); /* update temp storage with new order*/
    end
  /* TCS INCLUDE BEGIN*/
  else
    OB0HS55();
  /* TCS INCLUDE END*/
  end


end // end OB0HS50

// save old totals
Function OB0HS51()

    /* Save the original OB3REC total line item value and*/
    /* on-order quantity to the work record.*/
    /* They are used later in updating the OB1REC.*/

  OB0HW02.OP2LNIVL = OB3REC.OP2LNIVL; /* line item value*/
  OB0HW02.OP2TONOQ = OB3REC.OP2TONOQ; /* total on-order quantity*/

end // end OB0HS51

// move work rec to OB1 & OB3REC
Function OB0HS52()

  OB0HW02.OB0HWFLG = "N"; /* init change flag*/
  OB0HW02.OB0HWSPL = "N"; /* split order flag*/
  OB0HW02.OB0HW-UPD-OCD-FL = "N"; /* update ocd flag*/
  OB0HW02.OB0HW-OCD-NDT-FL = "N"; /* update ocd flag*/

    /* move OB1REC fields*/

    /* The need date, warehouse, and bulk/draw code and*/
    /* bulk cust order ids only need to be moved*/
    /* to an OB1REC when the item is being split*/

    /* move OB3REC on-order quantities*/

  OB0HW02.OB0HWSB3 = 0; /* init WCU1710 subscript*/
  OB0HWSU1 = 1; /* init work rec subscript*/
  while (OB0HWSU1 <= 40 /* max sizes on work rec*/
   && OB0HW01.SY4IDDSC[OB0HWSU1] != " ") /* and a valid size*/
    OB0HWSU2 = OB0HW01.OB0HWSAV[OB0HWSU1]; /* saved ob3rec subscript*/
    if (OB0HW01.SAME-XREF-VALUES-FL == "Y")
      OB0HS-CHK-XREF-SZ(); /* was this size returned by CU1710?*/
    end
    if (OB0HW01.OP3ONOQT[OB0HWSU1] != OB3REC.OP3ONOQT[OB0HWSU2])
      OB3REC.OP3ONOQT[OB0HWSU2] = OB0HW01.OP3ONOQT[OB0HWSU1];
      OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
      OB0HW02.OB0HW-UPD-OCD-FL = "Y"; /* an ocd field has changed*/
      OBWREC.OBW-EDIT-FUNCTION = "5"; /* set the edit function*/
                                  /* If this size is new to the order and*/
                                   /* the customer has cross reference*/
      /* at the size level, call CU1710 with option 2 to see if it already*/
                                  /* exists. If it doesn't exist, add it*/
                                   /* to VCUCPX01. If it exists, see*/
      /* if we need an override record.*/
      if (OB0HW01.XREF-SZ-FOUND-FL == "N") /* if this size wasn't returned*/
        if (OB0HW01.SAME-XREF-VALUES-FL == "Y") /* by cu1710 & the xref data*/
          OB0HS-CU1710-OPT2(); /* is the same, update xref for this*/
                                   /* size*/
        end
      end
    end
    if (OB3REC.OP3ONOQT[OB0HWSU2] > 0) /* if quantity not 0*/
      OB3REC.OP3SZAFL[OB0HWSU2] = "Y"; /* size active flag*/
  /* *TCS CHANGE BEGIN 28/01/1998*/
      if (OBDUREC.OBWDUPL == "N") /* *TCS CHANGE*/
        OB3REC.SY5PRCUN[OB0HWSU2] = OB0HW01.OB0HWCLP;
      end
  /* *TCS CHANGE END  28/01/1998*/
      if (OB0HW01.SPCL-MKUP-FL == "Y" /* if this is spcl makup &*/
       && OB0HW01.SAME-XREF-VALUES-FL != "Y") /* each sz has diff values*/
        OB0HW02.OB0HWSB3 = OB0HW02.OB0HWSB3 + 1; /* move each sz with qty to*/
        OB0HW01.OB0HW-SAVE-SZ = OB0HW02.OB0HWSB3; /* ovrd sz & add it*/
        OB0HW02.OB0HWSB1 = OB0HW02.OB0HWSB3;
        OB0HS-CU1710-OPT2();
      end
      /* TCS change begin 05/14/99*/
      if (OB3REC.OP3PRCOF[OB0HWSU2] == " ") /* if price override is blank*/
                                  /* MOVE 'N' TO*/
                                   /* OB3REC.OP3PRCOF(OB0HWSU2);/* set*/
                                   /* price override flag*/
        OB3REC.OP3PRCOF[OB0HWSU2] = OB3REC.OP2PRCOF;
        OB3REC.SY5PRCUN[OB0HWSU2] = OB3REC.OP2AUPRC;
        /* tcs change end   05/14/99*/
      end
    else
      OB3REC.OP3SZAFL[OB0HWSU2] = "N"; /* size active flag*/
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump work rec subscript*/
  end
   /* *TCS BEGIN 01/29/98*/
  OBDUREC.OBWDUPL = "Y";
   /* *TCS END   01/29/98*/

   /* clean up any override records not needed when sizes changed*/
  if (OB0HW01.SAME-XREF-VALUES-FL == "Y")
    OB0HS-CLEANUP-OVRD();
  end

  if (OB0HW01.XOWCD != OB3REC.XOWCD) /* owner group*/
    OB3REC.XOWCD = OB0HW01.XOWCD;
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OBWREC.OBW-EDIT-FUNCTION = "5"; /* set the edit function*/
  end

  if (OB0HW01.XUMCD != OB3REC.XUMCD) /* unit of measure*/
    OB3REC.XUMCD = OB0HW01.XUMCD;
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OBWREC.OBW-EDIT-FUNCTION = "5"; /* set the edit function*/
  end

   /* if using push availability flag then update ob3rec*/

  if (OBWREC.OBW-PUSH-AVAIL == "Y"
   && OB0HM001.OB0HM-PUSH-AVAIL == "Y")
    if (OB0HM001.OB0HM-PUSH-AVAIL != OB3REC.OB-PART-AVAL-FL)

      OB3REC.OB-PART-AVAL-FL = OB0HM001.OB0HM-PUSH-AVAIL;
      OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
      OBWREC.OBW-EDIT-FUNCTION = "5"; /* set the edit function*/
    end
  end

  if (OB0HM001.OB0HM-PUSH-AVAIL == " "
   || OB0HM001.OB0HM-PUSH-AVAIL == "N")
    if (OB3REC.OB-PART-AVAL-FL == "Y")
      OB3REC.OB-PART-AVAL-FL = " ";
      OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
      OBWREC.OBW-EDIT-FUNCTION = "5"; /* set the edit function*/
    end
  end


  if (OB0HW01.OP1BLKID != OB1REC.OP1BLKID) /* bulk order id*/
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OB0HW02.OB0HWSPL = "Y"; /* split order flag*/
    OBWREC.OBW-EDIT-FUNCTION = "2"; /* set the edit function*/
  end


  if (OB0HW01.OPRBNOID != OB3REC.OPRBNOID) /* bulk nike order id*/
    OB3REC.OPRBNOID = OB0HW01.OPRBNOID;
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OBWREC.OBW-EDIT-FUNCTION = "2"; /* set the edit function*/
  end


  if (OB0HW01.OP1CUNDT != OB1REC.OP1CUNDT) /* need date*/
    /* need date moved when item split to new suborder in s60*/
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OB0HW02.OB0HW-OCD-NDT-FL = "Y"; /* ocd field has changed*/
    OB0HW02.OB0HWSPL = "Y"; /* split order flag*/
    OBWREC.OBW-EDIT-FUNCTION = "2"; /* set the edit function*/
    if (OB1REC.XBDCD == "4"
     || OB1REC.XBDCD == "6"
     || OB1REC.XBDCD == "7")
      OB3REC.OPRBNOID = 0;
    end
  end


  if (OB0HW01.XWHCD != OB1REC.XWHCD) /* warehouse code*/
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OB0HW02.OB0HWSPL = "Y"; /* split order flag*/
    OBWREC.OBW-EDIT-FUNCTION = "2"; /* set the edit function*/
    if (OB1REC.XBDCD == "4"
     || OB1REC.XBDCD == "6"
     || OB1REC.XBDCD == "7")
      OB3REC.OPRBNOID = 0;
    end
  end


  if (OB0HW01.XBDCD != OB1REC.XBDCD) /* bulk/draw code*/
    OB0HW02.OB0HWFLG = "Y"; /* field has changed*/
    OB0HW02.OB0HWSPL = "Y"; /* split order flag*/
    OBWREC.OBW-EDIT-FUNCTION = "1"; /* set the edit function*/
  end


  if (OB0HW02.OB0HWFLG == "Y") /* field has changed*/
    OB1REC.YOBCD = "NC";
  end


end // end OB0HS52

// update - no split
Function OB0HS53()

    /* update the OB3REC*/

  OB0HS54();


    /* update VSOSCR01  ocd order item size change reason*/
  if (OB0HW02.OB0HW-UPD-OCD-FL == "Y")
    OB0HS-CALL-OZ2090();
  end

    /* update temp storage for the OB3REC*/

  OB0HS55();


    /* Adjust the OB1REC total order units by adding to it the*/
    /* difference between the new and old OB3REC units.*/
    /* Also, do the same thing for the total order value.*/

  OB1REC.OP1OTUNT = OB1REC.OP1OTUNT + OB3REC.OP2TONOQ - OB0HW02.OP2TONOQ;
  OB1REC.OP1OVALU = OB1REC.OP1OVALU + OB3REC.OP2LNIVL - OB0HW02.OP2LNIVL;


    /* update the OB1REC*/

  OB0HS56();


end // end OB0HS53

// UPDATE OB3REC - OB1690
Function OB0HS54()

  OB3REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB3REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/

  set OBSFREC empty;
  set SQLCA empty;

  OBSFREC.OBSF-TASK = "U ";
  OBSFREC.OBSF-CALLER-LOC-1 = "U       ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "OB0HS54 ";
  OBSFREC.OBSF-CALLING-APPL = "OB0H";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

    /* io mod handles the change count*/
  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0) /* good return*/
     /* ok - next sentence*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* not found*/
      OBWREC.CAMSG = "ORDER MODIFIED BY ANOTHER SERVICE REP";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback any changes*/
      XSOBP00(); /* transfer to self*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS54 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* return code*/
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
      if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
       || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
        XSOBS05(); /* 911 - rollback*/
      else
        XSOBEDR(); /* retn - rollback*/
      end
    end
  end
   /* TCS CHANGE BEGIN 01/29/98*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
   /* TCS CHANGE END   01/29/98*/
end // end OB0HS54

// update temp storage - OB3REC
Function OB0HS55()

  XSOBT4R(); /* read temp storage*/

  OBDREC.OBDMSEL[OBWTSF4S] = "U";
  OBDREC.OP2TONOQ[OBWTSF4S] = OB3REC.OP2TONOQ;
  /* TCS INCLUDE BEGIN 02/16/98*/
  if (OB3REC.OP2AUPRC != 0)
    OBDREC.OP2AUPRC[OBWTSF4S] = OB3REC.OP2AUPRC;
  end
  /* TCS INCLUDE END 02/16/98*/

  XSOBT4U(); /* update temp storage*/

end // end OB0HS55

// update old OB1REC
Function OB0HS56()

      /* First see if there are any products left on the old*/
      /* suborder. If none exist the suborder will be cancelled.*/

  OB0HS58(); /* get item count*/


  set OBFREC empty;
  set SQLCA empty;

  OBFREC.OBFTASK = "U ";

  OB1REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* change date*/
  OB1REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* change time*/
   /* change count handled in I/O module*/

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if update ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OBWREC.CAMSG = "ORDER MODIFIED BY ANOTHER SERVICE REP";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback any changes*/
      XSOBP00(); /* transfer to self*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0HS56 "; /* statement group*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        XSOBS05(); /* 911 - rollback*/
      else
        XSOBEDR(); /* retn - rollback*/
      end
    end
  end

   /* update temp storage for selected order*/

  OB0HS57();

end // end OB0HS56

// update temp storage - OB3REC
Function OB0HS57()

  XSOBT1R(); /* read temp storage*/

  if (OB1REC.YOBCD == "DL")
    OBAREC.OBAMSEL[OBWTSF1S] = "*"; /* selected order*/
  else
    OBAREC.OBAMSEL[OBWTSF1S] = "U"; /* selected order*/
  end

  OBAREC.YOBCD[OBWTSF1S] = OB1REC.YOBCD; /* selected order - status*/

  XSOBT1U(); /* update temp storage*/

end // end OB0HS57

// read OB2REC
Function OB0HS58()

  set OB2REC empty;
  set OBKREC empty;
  set SQLCA empty;

  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* cust order id*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/

  OBKREC.OBKTASK = "MC"; /* select existance*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
    if (OBKREC.OBKCOUNT > 0)
      OB1REC.YOBCD = "NC"; /* order has item*/
    else
      OB1REC.YOBCD = "DL"; /* no items so cancel the order*/
    end
  else
    TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
    TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
    TA1REC.TA1LOCAT[1] = "MC      "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO5170  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS58 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "        "; /* spaces*/
    if (SQLCA.VAGen_SQLCODE == -911) /* -911*/
      XSOBS05(); /* 911 - rollback*/
    else
      XSOBEDR(); /* retn - rollback*/
    end
  end

end // end OB0HS58

// ob1620- split item to suborder
Function OB0HS60()

    /* The warehouse, need date, bulk-nike-ord-id*/
    /* bulk cust order id has been changed,*/
    /* so we are here to split the item to a new*/
    /* or existing suborder.*/

     /* first update the item*/

  OB0HS54(); /* call ob1690 to update*/

     /* build OB1620 pass record*/

  OB0HS61();

  call "OB1620" (OBSSREC) {isNoRefresh = yes, isExternal = yes};

    /* IF OBSSREC.OBSS-SPLIT-TO-NEW-SUBORD-FL = 'Y';/* if new nike-ord-id*/
  OB1REC.OP1NORID = OBSSREC.OBSS-NEW-NIKE-ORD-ID;
    /* END;*/

  if (OB0HW02.OB0HW-UPD-OCD-FL == "Y")
    OB0HS-CALL-OZ2090(); /* call oz2090 to update*/
  end

   /* Capture change reason for new header*/
  if (OB0HW02.OB0HW-OCD-NDT-FL == "Y")
    OB0HS-ADD-VSOHCR01();
  end
     /* process the return code*/

  OB0HS62();


end // end OB0HS60

// BUILD OB1620 PASS RECORD
Function OB0HS61()

  set OBSSREC empty;

  OBSSREC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OBSSREC.OP1CUOID = OB1REC.OP1CUOID; /* cust order id*/
  OBSSREC.OP1NORID = OB1REC.OP1NORID; /* nike order id*/
  OBSSREC.OP2LNINB = OB3REC.OP2LNINB; /* line item nbr*/
  OBSSREC.KUCCOID = OB1REC.KUCCOID; /* company*/
  OBSSREC.KUMSTRID = OB1REC.KUMSTRID; /* store*/
  OBSSREC.XNXCD = OB1REC.XNXCD; /* department*/
  OBSSREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  OBSSREC.XDVCD = OB1REC.XDVCD; /* division*/
  OBSSREC.XBCCD = OB1REC.XBCCD; /* brand*/
  OBSSREC.XSOCD = OB1REC.XSOCD; /* sales office*/
  OBSSREC.XOTCD = OB1REC.XOTCD; /* system order type*/
  OBSSREC.XOBCD = OB1REC.XOBCD; /* base order type*/
  OBSSREC.OB1ACCSF = OB1REC.OB1ACCSF; /* accessory flag*/
  OBSSREC.XOCCD = OB1REC.XOCCD; /* order class*/
  OBSSREC.SP1ID = OB0HW01.SP1ID; /* sales program*/
  OBSSREC.SM1AGYID = OB1REC.SM1AGYID; /* agency*/
  OBSSREC.SM4REPID = OB1REC.SM4REPID; /* agency*/
  OBSSREC.XBDCD = OB0HW01.XBDCD; /* bulk/draw code*/
  OBSSREC.XWHCD = OB0HW01.XWHCD; /* warehouse code*/
  OBSSREC.OP1CUNDT = OB0HW01.OP1CUNDT; /* need date*/
  OBSSREC.XDSCD = OB1REC.XDSCD; /* direct ship cd*/
  OBSSREC.OP1BLKID = OB0HW01.OP1BLKID; /* bulk ord id*/

  OBSSREC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OBSSREC.ZZZCHGTM = OBWREC.ZZZCHGTM;

  OBSSREC.OBSS-SPLIT-TO-CA-STAT-FL = "N";


end // end OB0HS61

// PROCESS OB1620 RETURN CODES
Function OB0HS62()

  if (OBSSREC.OBSS-RETURN-CODE == 0
  )
    /* update current order in temp storage*/

    XSOBS03(); /* read the current order*/
    XSOBT1R(); /* read current temp storage page*/

    OB0HWSU1 = OBWREC.OBWTSF1S;

    if (OB1REC.YOBCD == "DL") /* yob code*/
      OBAREC.OBAMSEL[OB0HWSU1] = "*"; /* select option*/
    else
      OBAREC.OBAMSEL[OB0HWSU1] = "U"; /* select option*/
    end

    OBAREC.YOBCD[OB0HWSU1] = OB1REC.YOBCD; /* yob code*/

    XSOBT1U(); /* update temp storage record*/

    /* save original order*/

    OB0HW02.OP1PARTN = OBWREC.OP1PARTN;
    OB0HW02.OP1CUOID = OBWREC.OP1CUOID;
    OB0HW02.OP1NORID = OBWREC.OP1NORID;

    /* save new nike ord id for next ob1rec read*/

    OBWREC.OP1NORID = OBSSREC.OBSS-NEW-NIKE-ORD-ID;
    OBWREC.OBWNOID = OBSSREC.OBSS-NEW-NIKE-ORD-ID;

  else /* process error return codes*/
    TA1REC.TA1LOCAT[1] = "        "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OB1620  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS62 "; /* statement group*/
    TAEREC.TAEDESC1 = OBSSREC.OBSS-ERRDIAG-KEY; /* error key*/
    if (OBSSREC.OBSS-RETURN-CODE == 2) /* record not found on update*/
      OBWREC.CAMSG = "ORDER UPDATED BY BATCH SYSTEM OR ANOTHER CSR - PLEASE TRY AGAIN";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      XSOBP00();
    end
    if (OBSSREC.OBSS-RETURN-CODE == 3
     || OBSSREC.OBSS-RETURN-CODE == 5
    ) /* db2 deadlock occured in ob1620*/
      OBWREC.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      XSOBP00();
      return;
    end
    if (OBSSREC.OBSS-RETURN-CODE == 4
    ) /* fatal dbr error in ob1620*/
      TAEREC.TAEDESC2 = "FATAL DB2 ERROR IN OB1620";
    else
      if (OBSSREC.OBSS-RETURN-CODE == 6
      ) /* fatal dbr error in ob1690 from ob1620*/
        TAEREC.TAEDESC2 = "FATAL DB2 ERROR IN OB1690 FROM OB1620";
      else
                                  /* unexpected return code from ob1620*/
        TAEREC.TAEDESC2 = "UNEXPECTED RETURN CODE FROM OB1620";
      end
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    XSOBENP(); /* appl post with rollback*/
    XSOBP04(); /* main menu*/
  end



end // end OB0HS62

// UPDATE TS WITH NEW SUBORDER
Function OB0HS63()


    /* format message*/

  OB0HW02.OB0HWMS1 = "PRODUCT ";
  OB0HW02.OB0HWMS2 = OB0HW02.OB0HWPRD; /* formatted product*/
  OB0HW02.OB0HWMS3 = " IS NOW ON SUBORDER ";
  OB0HW02.OB0HWMS4 = OBWREC.OBWORDER; /* formatted order*/
  OBWREC.CAMSG = OB0HW02.OB0HWMSG; /* move in formatted msg*/

    /* add new suborder to selected suborders temp storage (OBAREC)*/

  if (OBSSREC.OBSS-SPLIT-TO-NEW-SUBORD-FL == "Y")
    OB0HS7G(); /* add to temp storage*/
  else
    OB0HS7I(); /* find existing order*/
  end



end // end OB0HS63

// nil prc typ cd based on comp
Function OB0HS6N()
   /* TCS INCLUDE BEGIN 01/28/1998*/

    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the comp number*/


   /* read the company record of the comp nbr to get its acct cls*/

  KUCREC.KUCCOID = OB1REC.OP1CMPNB; /* get kucrec using comp nbr*/
  OB0HS9C(); /* read company rec (kucrec)*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* put acct class in key*/

    /* get the account type of the comp nbr & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OB0HS9G(); /* read inv specl tbl*/
  else /* if no account type*/
    OB0HW01.OB0HWZPR = "Y"; /* give the item a zero price*/
  end



   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS6N

// nil price typ cd based on co.
Function OB0HS6O()
   /* TCS INCLUDE BEGIN 01/28/1998*/

    /* **  get the price type code from the invoicing specialty*/
    /* **  table based on the company number*/


    /* put the account class of the company in the key*/

  IVEREC.XAUCD = OB0HW01.XAUCD;


    /* get the account type of the company & using it and the*/
    /* acct class as part of the key, get the price type from the*/
    /* invoicing specialty table*/


  sysVar.arrayIndex = 1;
  if (OB0HW01.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    IVEREC.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* put acct type in key*/
    OB0HS9G(); /* read inv specl tbl*/
  else /* if no account type*/
    OB0HW01.OB0HWZPR = "Y"; /* give the item a zero price*/
  end



   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS6O

// OB1630 - SPLIT ITEM TO NEW ORD
Function OB0HS70()

    /* The bulk draw code changed*/
    /* so we are here to split the item to a new*/
    /* order. (currently it's on a suborder by itself).*/


     /* build OB1630 pass record*/

  OB0HS71();

  call "OB1630" (OBSOREC) {isNoRefresh = yes, isExternal = yes};

     /* process the return code*/

  OB0HS72();


end // end OB0HS70

// BUILD OB1630 PASS RECORD
Function OB0HS71()

  set OBSOREC empty;

  OBSOREC.OP1PARTN = OBWREC.OP1PARTN; /* part char*/
  OBSOREC.OP1CUOID = OBWREC.OP1CUOID; /* cust order id*/
  OBSOREC.OP1NORID = OBWREC.OP1NORID; /* nike order id*/

  OBSOREC.ZZZCHGDT = OBWREC.ZZZCHGDT;
  OBSOREC.ZZZCHGTM = OBWREC.ZZZCHGTM;


end // end OB0HS71

// PROCESS OB1630 RETURN CODES
Function OB0HS72()

  if (OBSOREC.OBSO-RETURN-CODE == 0
  )
    /* save new order id for next ob1rec read*/

    OBWREC.OP1PARTN = OBSOREC.OBSO-OP1PARTN-NEW;
    OBWREC.OP1CUOID = OBSOREC.OBSO-OP1CUOID-NEW;
    OBWREC.OP1NORID = OBSOREC.OBSO-OP1NORID-NEW;

    OBWREC.OBWCUOID = OBSOREC.OBSO-OP1CUOID-NEW;
    OBWREC.OBWNOID = OBSOREC.OBSO-OP1NORID-NEW;
    OBWREC.OBWFMT = OBWREC.OBWORDER;
    XSOBS06();
    OBWREC.OBWORDER = OBWREC.OBWFMT;

  else /* process error return codes*/
    TA1REC.TA1LOCAT[1] = "        "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "OB1630  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "OB0HS72 "; /* statement group*/
    TAEREC.TAEDESC1 = OBSOREC.OBSO-ERRDIAG-KEY; /* error key*/
    if (OBSOREC.OBSO-RETURN-CODE == 1) /* original order not found*/
      TAEREC.TAEDESC2 = "ORDER NOT FOUND IN OB1630 ";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      XSOBENP(); /* post*/
      XSOBP04(); /* main menu*/
    end
    if (OBSOREC.OBSO-RETURN-CODE == 2
     || OBSOREC.OBSO-RETURN-CODE == 4
    ) /* db2 deadlock occured in ob1630*/
      OBWREC.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      XSOBP00();
    end
    if (OBSOREC.OBSO-RETURN-CODE == 3
    ) /* fatal dbr error in ob1630*/
      TAEREC.TAEDESC2 = "FATAL DB2 ERROR IN OB1630";
    else
      if (OBSOREC.OBSO-RETURN-CODE == 5
      ) /* application error in ob1630*/
        TAEREC.TAEDESC2 = "APPLICATION ERROR OCCURED IN OB1630";
      else /* unexpected return code from ob1630*/
        TAEREC.TAEDESC2 = "UNEXPECTED RETURN CODE FROM OB1630";
      end
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    XSOBENP(); /* post*/
    XSOBP04(); /* main menu*/
  end



end // end OB0HS72

// ADD NEW ORDER TO TEMP STORAGE
Function OB0HS73()


    /* format message*/

  OB0HW02.OB0HWMS1 = "PRODUCT ";
  OB0HW02.OB0HWMS2 = OB0HW02.OB0HWPRD; /* formatted product*/
  OB0HW02.OB0HWMS3 = " IS NOW ON ORDER ";
  OB0HW02.OB0HWMS4 = OBWREC.OBWORDER; /* formatted order*/
  OBWREC.CAMSG = OB0HW02.OB0HWMSG; /* move in formatted msg*/

    /* add new order to selected suborders temp storage (OBAREC)*/

  OB0HS7G(); /* add to temp storage*/


end // end OB0HS73

// UPDATE TEMP STORAGE
Function OB0HS7G()


  OB0HWSU2 = OBWREC.OBWTSF1P; /* save current page*/

   /* Read order temp storage record*/

  OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* get last page*/
  XSOBT1R();


   /* Find available slot in last page for added order*/

  OB0HWSU1 = 1; /* init subscript*/
  while (OB0HWSU1 <= 12 /* still within the page*/
   && OBAREC.OBACUOID[OB0HWSU1] != 0) /* slot not vacant*/
    OB0HWSU1 = OB0HWSU1 + 1; /* increment subscript*/
  end


   /* If there is a no slot available in the last page,*/
   /* then you will be adding a new record, so empty the*/
   /* record, init the subscript, load the obarec, and add*/
   /* the new record.  Otherwise, just load the obarec and*/
   /* do an update.*/

  if (OB0HWSU1 == 13) /* need to add new page*/
    set OBAREC empty; /* clear for new page*/
    OB0HWSU1 = 1; /* set subscript to first line*/
    OB0HS7H(); /* load the temp storage obarec*/
    XSOBT1W(); /* add temp storage record*/
  else /* vacant slot found on same page*/
    OB0HS7H(); /* load the temp storage obarec*/
    XSOBT1U(); /* update temp storage record*/
  end


   /* Read order temp storage record for current order*/

  OBWREC.OBWTSF1P = OB0HWSU2; /* restore current page*/
  XSOBT1R();

  if (OBAREC.OBAMSEL[OBWTSF1S] == "*") /* orig ord deleted or loaded*/
    OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* restore last page*/
    OBWREC.OBWTSF1S = OB0HWSU1; /* and subscript for new order*/
    OB0HW02.OP1CUOID = 0; /* init - orig order not needed anymore*/
    OB0HW02.OP1NORID = 0; /* init - orig sub not needed anymore*/
    OB0HW02.OP1PARTN = " "; /* init - not needed anymore*/
    /* obwrec contains the new order*/
  else
    OBWREC.OBWTSF1P = OB0HWSU2; /* restore current page*/
    OB0HW02.OB0HW-NEW-ORD-SUB = OB0HWSU1; /* subscript for new order*/
    OB0HS7K(); /* restore original order to obwrec*/
   /* ob0hw02 contains the new order at this point*/
   /* the new order will be editted from OB0HS85*/
  end

  OBWREC.OBW-GET-ITEMS-FL = "Y"; /* reload items to temp storage*/
                                  /* in ob0f*/
end // end OB0HS7G

// LOAD TEMP STORAGE OBAREC
Function OB0HS7H()

  XSOBS03(); /* read the new order*/

  if (OB1REC.YOBCD == "DL") /* yob code*/
    OBAREC.OBAMSEL[OB0HWSU1] = "*"; /* select option*/
  else
    OBAREC.OBAMSEL[OB0HWSU1] = "U"; /* select option*/
  end

  OBAREC.OBAORDER[OB0HWSU1] = OBWREC.OBWORDER; /* formatted order*/
  OBAREC.OBANORID[OB0HWSU1] = OB1REC.OP1NORID; /* nike order id*/
  OBAREC.OP1PARTN[OB0HWSU1] = OB1REC.OP1PARTN; /* part char*/

  OBAREC.OB1PARLF[OB0HWSU1] = OB1REC.OB1PARLF; /* partial load flag*/
  OBAREC.SP1ID[OB0HWSU1] = OB1REC.SP1ID; /* sales program*/
  OBAREC.XOBCD[OB0HWSU1] = OB1REC.XOBCD; /* base ot code*/

  OBWREC.OBWDT8 = OB1REC.OP1CUNDT; /* reformat need date*/
  XSOBDCM(); /* db2 date to map date*/
  OBAREC.OBACUNDT[OB0HWSU1] = OBWREC.OBWDT6;
                                   /* reformatted need date*/

  OBAREC.YOBCD[OB0HWSU1] = OB1REC.YOBCD; /* yob code*/

  OBAREC.OB1ERRFL[OB0HWSU1] = OB1REC.OB1ERRFL; /* error flag*/
  OBAREC.OBAFILL[OB0HWSU1] = "/"; /* slash*/
  OBAREC.OB1HLDFL[OB0HWSU1] = OB1REC.OB1HLDFL; /* hold flag*/

  OBAREC.OBACUST[OB0HWSU1] = OBWREC.OBWCUST; /* formatted cust*/

  OBAREC.KUMSTSNM[OB0HWSU1] = "NEW SUBORD"; /* short store name*/

end // end OB0HS7H

// UPDATE TEMP STORAGE
Function OB0HS7I()

  OB0HWSU2 = OBWREC.OBWTSF1P; /* save current page*/
  OB0HWSU3 = OBWREC.OBWTSF1S; /* save current subscript*/


   /* Read order temp storage current record*/

  XSOBT1R();

   /* Find the existing suborder*/

   /* init temp storage subscript*/
  OBWREC.OBWTSF1S = 0;
  while (OBWREC.OBWTSF1S == 0 /* suborder not found*/
   && OBWREC.OBWTSF1P > 0) /* page not zero*/
    OB0HWSU1 = 1; /* init subscript*/
    if (OBAREC.OBACUOID[OB0HWSU1] <= OBWREC.OBWCUOID) /**/
      while (OB0HWSU1 <= 12 /* still within the page*/
       && OBWREC.OBWTSF1S == 0)
        if (OBAREC.OBACUOID[OB0HWSU1] == OBWREC.OBWCUOID
         && OBAREC.OBANORID[OB0HWSU1] == OBWREC.OBWNOID)
          OBWREC.OBWTSF1S = OB0HWSU1;
        else
          OB0HWSU1 = OB0HWSU1 + 1; /* increment subscript*/
        end
      end
      if (OBWREC.OBWTSF1S == 0)
        OB0HS7J(); /* start with last page and work*/
                                   /* backwards*/
      end
    else
      /* check the previous page*/
      OBWREC.OBWTSF1P = OBWREC.OBWTSF1P - 1;
      if (OBWREC.OBWTSF1P > 0)
        XSOBT1R();
      end
    end
  end


   /* If we found the existing order load the record and*/
   /* do an update.*/

  if (OBWREC.OBWTSF1S != 0) /**/
    OB0HW02.OB0HWSU1 = OBWREC.OBWTSF1S; /* set subscript*/
    OB0HS7H(); /* load the temp storage obarec*/
    XSOBT1U(); /* update temp storage record*/
  end


   /* decide which order to retunr control to*/

   /* Read order temp storage current record*/


  sysVar.arrayIndex = OBWREC.OBWTSF1P; /* save current page*/
  OBWREC.OBWTSF1P = OB0HW02.OB0HWSU2; /* save current page*/
  XSOBT1R();

  if (OBAREC.OBAMSEL[OB0HWSU3] == "*") /* order deleted or loaded*/
    OBWREC.OBWTSF1P = sysVar.arrayIndex; /* use the existing order*/
                                  /* obwtsf1s is already set*/
  else
    OBWREC.OBWTSF1S = OB0HW02.OB0HWSU3; /* use the orig order*/
                                  /* obwtsf1p is already set*/
  end



end // end OB0HS7I

// UPDATE TEMP STORAGE
Function OB0HS7J()



   /* Read order temp storage current record*/

  OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* last page*/
  XSOBT1R();

   /* Find the existing suborder*/

   /* init temp storage subscript*/
  OBWREC.OBWTSF1S = 0;
  while (OBWREC.OBWTSF1S == 0 /* suborder not found*/
   && OBWREC.OBWTSF1P > 0) /* page not zero*/
    OB0HWSU1 = 12; /* init subscript*/
    while (OB0HWSU1 > 0 /* still within the page*/
     && OBWREC.OBWTSF1S == 0)
      if (OBAREC.OBACUOID[OB0HWSU1] == OBWREC.OBWCUOID
       && OBAREC.OBANORID[OB0HWSU1] == OBWREC.OBWNOID)
        OBWREC.OBWTSF1S = OB0HWSU1;
      end
      OB0HWSU1 = OB0HWSU1 - 1; /* decrement subscript*/
    end
      /* check the previous page*/
    if (OBWREC.OBWTSF1S == 0)
      OBWREC.OBWTSF1P = OBWREC.OBWTSF1P - 1;
      if (OBWREC.OBWTSF1P > 0)
        XSOBT1R();
      end
    end
  end





end // end OB0HS7J

// PROCESS OB1630 RETURN CODES
Function OB0HS7K()

  OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* save new order*/
  OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
  OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

  OBWREC.OP1PARTN = OB0HW02.OP1PARTN; /* restore orig order*/
  OBWREC.OP1CUOID = OB0HW02.OP1CUOID; /**/
  OBWREC.OP1NORID = OB0HW02.OP1NORID; /**/

  OB0HW02.OP1PARTN = OB1REC.OP1PARTN; /* save new order*/
  OB0HW02.OP1CUOID = OB1REC.OP1CUOID; /**/
  OB0HW02.OP1NORID = OB1REC.OP1NORID; /**/

  OB1REC.OP1PARTN = OBWREC.OP1PARTN; /* restore orig order*/
  OB1REC.OP1CUOID = OBWREC.OP1CUOID; /**/
  OB1REC.OP1NORID = OBWREC.OP1NORID; /**/

  OBWREC.OBWCUOID = OBWREC.OP1CUOID;
  OBWREC.OBWNOID = OBWREC.OP1NORID;
  OBWREC.OBWFMT = OBWREC.OBWORDER;
  XSOBS06(); /* suppress leading zeros*/
  OBWREC.OBWORDER = OBWREC.OBWFMT;




end // end OB0HS7K

// toggle pages
Function OB0HS80()

   /* change the current page to the other page (either 1 or 2)*/

  if (OB0HW01.OB0HWPAG == "1")
    OB0HW01.OB0HWPAG = "2"; /* switch to page 2*/
  else
    OB0HW01.OB0HWPAG = "1"; /* switch to page 1*/
  end


   /* Now move a page worth of size descriptions, quantities,*/
   /* condition codes, and availability to the map.  If you*/
   /* are on page 1, move 1-20 from the work rec, otherwise*/
   /* move 21-40.*/

  OB0HWSU1 = 1; /* init map subscript*/
  while (OB0HWSU1 <= 20) /* max sizes on the map*/
    if (OB0HW01.OB0HWPAG == "1") /* if on page 1*/
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU1];
      OB0HM001.OP3ONOQT[OB0HWSU1] = OB0HW01.OP3ONOQT[OB0HWSU1];
      OB0HM001.OB0HMAVL[OB0HWSU1] = OB0HW01.OB0HWAVL[OB0HWSU1];
      OB0HM001.OB0HMCON[OB0HWSU1] = OB0HW01.OB0HWCON[OB0HWSU1];
    else
      OB0HWSU2 = OB0HWSU1 + 20; /* set work rec subscript*/
      OB0HM001.SY4IDDSC[OB0HWSU1] = OB0HW01.SY4IDDSC[OB0HWSU2];
      OB0HM001.OP3ONOQT[OB0HWSU1] = OB0HW01.OP3ONOQT[OB0HWSU2];
      OB0HM001.OB0HMAVL[OB0HWSU1] = OB0HW01.OB0HWAVL[OB0HWSU2];
      OB0HM001.OB0HMCON[OB0HWSU1] = OB0HW01.OB0HWCON[OB0HWSU2];
    end
    OB0HWSU1 = OB0HWSU1 + 1; /* bump up map subscript*/
  end


  OB0HS25(); /* reset the field attributes (except avail)*/


    /* reset availability field attributes*/

  if (OB0HW02.OB0HWAVF == "Y") /* if display availability*/
    OB0HS4D(); /* reset avail*/
  else
    OB0HS4E(); /* darken availability*/
  end

end // end OB0HS80

// EDIT NEW ORDER WHEN SPLIT
Function OB0HS85()

  OB1REC.OP1PARTN = OB0HW02.OP1PARTN; /* move new order*/
  OB1REC.OP1CUOID = OB0HW02.OP1CUOID; /* to ob1rec for*/
  OB1REC.OP1NORID = OB0HW02.OP1NORID; /* edit*/
  OB0HW02.OB0HWSU1 = OBWREC.OBWTSF1S; /* save orig subscript*/
  OB0HW02.OB0HWSU2 = OBWREC.OBWTSF1P; /* save orig page*/
  OBWREC.OBWTSF1P = OBWREC.OBWTSF1M; /* restore new order page*/
  OBWREC.OBWTSF1S = OB0HW02.OB0HW-NEW-ORD-SUB; /* restore new ord sub*/

  OB0HW02.OP1PARTN = OBWREC.OP1PARTN; /* save original order*/
  OB0HW02.OP1CUOID = OBWREC.OP1CUOID;
  OB0HW02.OP1NORID = OBWREC.OP1NORID;

  OBWREC.OP1PARTN = OB1REC.OP1PARTN; /* move new order*/
  OBWREC.OP1CUOID = OB1REC.OP1CUOID; /* to obwrec for*/
  OBWREC.OP1NORID = OB1REC.OP1NORID; /* edit*/

  OBWREC.OBWCUOID = OBWREC.OP1CUOID;
  OBWREC.OBWNOID = OBWREC.OP1NORID;
  OBWREC.OBWFMT = OBWREC.OBWORDER;
  XSOBS06(); /* suppress leading zeros*/
  OBWREC.OBWORDER = OBWREC.OBWFMT;

  OBWREC.OBW-EDIT-FUNCTION = 2;
  XSOBS-ONLINE-EDIT();

  OB1REC.OP1PARTN = OB0HW02.OP1PARTN; /* restore first order*/
  OB1REC.OP1CUOID = OB0HW02.OP1CUOID;
  OB1REC.OP1NORID = OB0HW02.OP1NORID;

  OBWREC.OP1PARTN = OB0HW02.OP1PARTN; /* restore first order*/
  OBWREC.OP1CUOID = OB0HW02.OP1CUOID;
  OBWREC.OP1NORID = OB0HW02.OP1NORID;
  OBWREC.OBWCUOID = OBWREC.OP1CUOID;
  OBWREC.OBWNOID = OBWREC.OP1NORID;
  OBWREC.OBWFMT = OBWREC.OBWORDER;
  XSOBS06(); /* suppress leading zeros*/
  OBWREC.OBWORDER = OBWREC.OBWFMT;

  OBWREC.OBWTSF1S = OB0HW02.OB0HWSU1;
  OBWREC.OBWTSF1P = OB0HW02.OB0HWSU2;

  OB0HW02.OP1PARTN = " ";
  OB0HW02.OP1CUOID = 0;
  OB0HW02.OP1NORID = 0;






end // end OB0HS85

// db2-product prices
Function OB0HS90()
   /* *TCS INCLUDE BEGIN 01/28/1998*/


      /* common read of product price data base*/

  if (OB1REC.XDVCD == "02")
    OB0HS98(); /* TO FIND NIL PRICE TYPE CODES*/
  end

  TA1REC.TA1LOCAT[2] = "OB0HS90"; /* error diag group name*/

      /* *******************************************************/
      /* * set up data base key, color&size from calling place*/
      /* *******************************************************/
  if (OB0HW01.OB0HWZPR == "Y")
    return;
  end

  SY5REC.XGPCD = OB3REC.XGPCD; /* general prod.class*/
  SY5REC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  SY5REC.SY2CLRID = OB3REC.SY2CLRID; /* COLOR*/
  SY5REC.XDMCD = OB3REC.XDMCD; /* DIM*/
  SY5REC.SY5SZID = 0; /* NOT CONSIDER SIZE*/
  sysVar.arrayIndex = 1;
  if (OB1REC.XOTCD in XOTTBL.XOTCD)
    OB0HW01.OB0HWSBO = sysVar.arrayIndex;
  end

  if (XOTTBL.XOTPRCDT[sysVar.arrayIndex] == "B")
    OB0HW01.OB0HWPED = OB1REC.OP1ENTDT;
  else
    OB0HW01.OB0HWPED = OB1REC.OP1CUNDT;
  end
  if (OB1REC.XDVCD == "02") /* IF NIL CUSTOMER*/
    if (OB0HW01.XAUCD == "33") /* if cust's acct class 33*/
      SY5REC.XPYCD = VNLXPY01.XPYCD; /* use nimrec's price type cd*/
    else /* otherwise acct class 31, 32 or accnt*/
                                /* type 06*/
      SY5REC.XPYCD = IVEREC.IVEPCTYP; /* use invspec's price tpe cd*/
    end
  else /* domestic orders*/
    SY5REC.XPYCD = XOTTBL.XPYCD[OB0HWSBO]; /* use prc typ cd from xo*/
  end

  if (OB1REC.XDVCD == "02" /* if nil*/
   && OB3REC.XQACD == "02") /* if b-grade product*/
    SY5REC.XQACD = "01"; /* quality code*/
  else
    SY5REC.XQACD = OB3REC.XQACD; /* quality code*/
  end


    /* --added for canada--*/

  if (OB1REC.XDZ-DATA-DIST-CD == "CA") /* country code*/
    SY5REC.XCT-CTRY-CD = "CANA";
  else
    SY5REC.XCT-CTRY-CD = "USA";
  end

  if (OB1REC.ZFC-CRCY-CD != " ")
    SY5REC.ZFC-CRCY-CD = OB1REC.ZFC-CRCY-CD; /* currency code*/
  else
    SY5REC.ZFC-CRCY-CD = "USD"; /* currency code*/
  end

      /* db2 read*/

  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
    return;
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* table view*/
    TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* key value*/
    TA1REC.TA1LOCAT[4] = "IO0380"; /* i/o mod*/
    XSOPS02(); /* common abend routine*/
  end


   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS90

// check prod price effective dte
Function OB0HS91()

   /* TCS INCLUDE BEGIN 01/28/1998*/

      /* find current price among 6 possible prices*/
      /* new/future date is first, oldest date is last*/
      /* price effective date is booking or ship date,*/
      /* set by order type table in initial w-s.*/

   /* domestic:if no price found for an effect.date, a newer,valid price*/
   /* is used -- covers early shipments.*/
   /* ----------------------------------------------*/


  TA1REC.TA1LOCAT[2] = "OB0HS91"; /* error diag group name*/


  sysVar.arrayIndex = 1; /* check dates ascending seq*/
  OB0HW01.OB0HW-HOLD-EZETST-VAL = 0; /* init.subscript hold;*/


  while (sysVar.arrayIndex < 7)

   /* --use sub. if no valid effect.date found for domest.product.---*/
    if (SY5REC.SY5PCEDT[sysVar.arrayIndex] > 0) /* hold subscript of oldest price*/
      OB0HW01.OB0HW-HOLD-EZETST-VAL = sysVar.arrayIndex;
    end


    if (SY5REC.SY5PCEDT[sysVar.arrayIndex] <= OB0HW01.OB0HWPED /* price effective date*/
     && SY5REC.SY5PCEDT[sysVar.arrayIndex] > 0)                /* non-zero effect.date*/
      return; /* then use ezetst for price*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end


  if (sysVar.arrayIndex == 7) /* no price for eff date*/
    if (OB1REC.XDVCD == "02") /* internation-do not substitute*/
         /* next sentence*/
    else
      if (OB0HW01.OB0HW-HOLD-EZETST-VAL > 0)
        sysVar.arrayIndex = OB0HW01.OB0HW-HOLD-EZETST-VAL; /* use oldest $*/
      end
    end
  end


   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS91

// get nil price type codes
Function OB0HS98()


   /* TCS INCLUDE BEGIN 01/28/1998*/

  OB0HW01.OB0HWZPR = "N";

  KUCREC.KUCCOID = OB1REC.KUCCOID;
  OB0HS9C(); /* read the customer rec (kucrec)*/

     /* save the account class of the company in case kucrec*/
     /* later contains info on the comp nbr rather than the co.*/

  OB0HW01.XAUCD = KUCREC.XAUCD;


   /* *  for nike international orders, price type code can*/
   /* *  come from several sources:*/
   /* *  - if the customer is a nil distributor*/
   /* *        the price type code comes from nimrec*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and it is a direct ship or from the nil warehse*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is sample*/
   /* *    and the item comes from a regular warehouse (not 12)*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not a sample*/
   /* *    and the comp number is entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        comp number as part of the key*/
   /* *  - if the customer is nike owned or exports*/
   /* *    and the order type is not sample*/
   /* *    and the comp number is not entered*/
   /* *        the price type code comes from the invoicing*/
   /* *        specialty table using the account class of the*/
   /* *        company as part of the key*/


  if (OB0HW01.XAUCD == "33") /* if the customer is a nil distrib*/
    OB0HS9D(); /* get price type from nimrec*/
  else /* otherwise*/
    if (OB0HW01.XAUCD == "31" /* if cust acct class is nike owned*/
     || OB0HW01.XAUCD == "32") /* or exports get it from inv specl tb*/
      if (OB1REC.XOBCD == "S1") /* if order type is sample*/
        if (OB1REC.XWHCD == " ") /* if direct ship*/
          OB0HS6O(); /* use cust acct class in key*/
        else /* otherwise*/
          OB0HS6N(); /* use comp acct class in key*/
        end
      else /* if not a sample*/
        if (OB1REC.OP1CMPNB == 0) /* if comp nbr not entered*/
          OB0HS6O(); /* use cust acct class in key*/
        else /* otherwise*/
          OB0HS6N(); /* use comp acct class in key*/
        end
      end
    else /* all else (xaucd ne 31,32,or33)*/
      OB0HW01.OB0HWZPR = "Y"; /* give the item a zero price*/
    end
  end


   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS98

// read company record for xaucd
Function OB0HS9C()
   /* TCS INCLUDE BEGIN 01/28/1998*/

      /* this routine reads the company record to obtain the*/
      /* account class (xaucd).  account class is used to*/
      /* to determine whether a price override is valid*/


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0240  ";
    TA1REC.TA1DBASE = "KUCREC  ";
    TA1REC.TA1TBLVU = "VCMPNY01";
    OB0HW01.OB0HWTK1 = KUCREC.KUCCOID;
    OB0HW01.OB0HWTK1 = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OB0HW01.OB0HWTK1;
    XSOPS02(); /* abend*/
  end





   /* TCS INCLUDE END   01/28/1998*/
end // end OB0HS9C

// read nimrec for price code
Function OB0HS9D()
   /* TCS INCLUDE BEGIN 01/28/1998*/


      /* ***************************************************/
      /* * get the price code from nimrec*/
      /* ***************************************************/



  OB0HS9E(); /* get the summary base order type*/

  if (OB0HW01.OB0HWZPR == "Y") /* if zero price flag set and ot not*/
                                   /* found*/
     /* next sentence*/
  else /* otherwise get nimrec*/
    OB0HS9L(); /* get acct reg cd from dnilo.vdstrb01*/
    VNLXPY01.ZARCD = VDSTRB01.ZARCD; /* acct reg. code*/
    VNLXPY01.KUCCOID = OB1REC.KUCCOID; /* customer*/
    VNLXPY01.ZFCCD = " "; /* currancy code*/
    VNLXPY01.YSMXOB = YSMREC.YSMSUMCD; /* sum base order type code*/
    VNLXPY01.XGPCD = OB1REC.XGPCD; /* gen prod class code*/


    call "IO4500" ("SF", SQLCA, VNLXPY01) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0) /* all ok if found*/
       /* next sentence*/
    else /* else*/
      if (SQLCA.VAGen_SQLCODE == 100) /* if price type code not found*/
        OB0HW01.OB0HWZPR = "Y"; /* force zero prices*/
      else /* else abend*/
        TA1REC.TA1LOCAT[2] = "OB0HS9D";
        TA1REC.TA1DBASE = "DNILO   "; /* data base name*/
        TA1REC.TA1TBLVU = "VNLXPY01"; /* table view*/
        OB0HW01.OB0HWNI1 = VNLXPY01.XGPCD; /* format key cuz*/
        OB0HW01.OB0HWNI2 = VNLXPY01.YSMXOB; /* kuccoid*/
        OB0HW01.OB0HWNI3 = VNLXPY01.ZARCD; /* is binary*/
        OB0HW01.OB0HWNI4 = VNLXPY01.KUCCOID;
        OB0HW01.OB0HWNI5 = VNLXPY01.ZFCCD;
        TA1REC.TA1TBLKE = OB0HW01.OB0HWNIM; /* move key to ta1rec*/
        TA1REC.TA1LOCAT[3] = "IO4500  "; /* i/o mod name*/
        XSOPS02(); /* common db abend*/
      end
    end

  end


   /* TCS INCLUDE END   01/28/1998*/
end // end OB0HS9D

// read summary base order type
Function OB0HS9E()
   /* TCS INCLUDE BEGIN 01/28/1998*/

      /* this routine reads the summary base order type table*/
      /* to convert the base order type to summary base order*/
      /* type.  this is part of the key to the international*/
      /* price type code table (nimrec).*/


  YSMREC.YSMTBLPF = "XOB"; /* table name of xob*/
  YSMREC.YSMSYSPF = "NL"; /* international system*/
  YSMREC.YSMSUMID = 2;
  YSMREC.YSMSUMCD = "**"; /* wild card for sum xob*/
  YSMREC.YSMSRCVL = OB1REC.XOBCD; /* order's base order type*/

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S1      ";
    TA1REC.TA1LOCAT[2] = "OB0HS96 ";
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02(); /* abend*/
  end


  call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if found, ok*/
     /* next sentence*/
  else /* else*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if none found*/
      OB0HW01.OB0HWZPR = "Y"; /* force zero price*/
    else /* else*/
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OB0HS96 "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  while (SQLCA.VAGen_SQLCODE == 0 /* while record found*/
   && YSMREC.XXXSTAT != "A") /* but status not active*/
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/

    if (SQLCA.VAGen_SQLCODE == 0 /* all ok*/
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "N1      "; /* if other problems*/
      TA1REC.TA1LOCAT[2] = "OB0HS96 "; /* abend*/
      TA1REC.TA1LOCAT[3] = "IO2640  ";
      TA1REC.TA1DBASE = "DCORP   ";
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02();
    end
  end


  if (YSMREC.XXXSTAT == "A") /* if active sum base ot found*/
      /* next sentence                ;    all ok*/
  else /* otherwise*/
    OB0HW01.OB0HWZPR = "Y"; /* force zero price*/
  end


  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "C1      "; /* if problems*/
    TA1REC.TA1LOCAT[2] = "OB0HS96 "; /* abend*/
    TA1REC.TA1LOCAT[3] = "IO2640  ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMREC.YSMGRP;
    XSOPS02();
  end
   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS9E

// db2 - invoicing specialty tbl
Function OB0HS9G()
   /* TCS INCLUDE BEGIN 01/28/1998*/


      /* *************************************************/
      /* * get the price or cost type code from invoicing*/
      /* *    specialty table*/
      /* *************************************************/


  IVEREC.XOTCD = OB1REC.XOTCD;

  call "IO1450" ("SF", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB0HW01.OB0HWZPR = "Y"; /* force zero prices*/
    else
      TA1REC.TA1LOCAT[1] = "SF      ";
      TA1REC.TA1LOCAT[2] = "OB0HS9G ";
      TA1REC.TA1LOCAT[3] = "IO1450  ";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VSPECL01";
      OB0HW01.OB0HWT1 = " ";
      OB0HW01.OB0HWTK3 = IVEREC.XATCD;
      OB0HW01.OB0HWTK4 = IVEREC.XAUCD;
      OB0HW01.OB0HWTK5 = IVEREC.XOTCD;
      TA1REC.TA1TBLKE = OB0HW01.OB0HWT1;
      XSOPS02();
    end
  end



   /* TCS INCLUDE END 01/28/1998*/
end // end OB0HS9G

// read acct reg cd dnilo.vdstrb
Function OB0HS9L()
   /* TCS INCLUDE BEGIN 01/28/1998*/

      /* this routine reads the dnilo.vdstrb01 to obtain the*/
      /* acct reg code to be used as part of the key for reading*/
      /* some other record i haven't got the time to find out about*/
      /* right now.  database changes suck.  bbake2 3/92*/

  set SQLCA empty;
  set VDSTRB01 empty;
  VDSTRB01.KUCCOID = KUCREC.KUCCOID;

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      set VDSTRB01 empty; /* we'll use blanks for acct reg cd*/
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OB0HS9L ";
      TA1REC.TA1LOCAT[3] = "IO4600  ";
      TA1REC.TA1DBASE = "DNILO   ";
      TA1REC.TA1TBLVU = "VDSTRB01";
      OB0HW01.OB0HWTK1 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OB0HW01.OB0HWTK1;
      XSOPS02(); /* abend*/
    end
  end
  /* TCS INCLUDE END  01/28/1998*/
end // end OB0HS9L

// process pfkeys for OB0H
Function OB0HSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;

  if (converseVar.eventKey is pf1)
    OB0HS-SAVE-MAP();
    XSOBP01();
    OB0HM001.CAMSG = OBWREC.OBWHELP; /* returns msg to screen*/
  end

  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf5)
    XSOBP05();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf9)
    XSOBP09();
  end

  if (converseVar.eventKey is pf13)
    XSOBP13();
  end

  if (converseVar.eventKey is pf14)
    XSOBP14();
  end

  if (converseVar.eventKey is pf15)
    XSOBP15();
  end

  if (converseVar.eventKey is pf17)
    XSOBP17();
  end

  if (converseVar.eventKey is pf18)
    XSOBP18();
  end

  if (converseVar.eventKey is pf19)
    XSOBP19();
  end

  if (converseVar.eventKey is pf20)
    if (OB1REC.YOBCD != "LP" /* lost demand reported*/
     && OB1REC.YOBCD != "PD") /* postponed demand reported*/
      if (OB1REC.XPACD == "MS" ||  /* can't have more than one item*/
      OB1REC.XPACD == "CU")        /* per msr or cu order 10/22/97*/
        OB0HS-CHK-MSR-ITM(); /* per msr order 09/03/97*/
        if (OB0HW-MSRITM-FL == "Y")
          converseLib.validationFailed(240);
          OBWREC.OBWERRFL = "Y";
        else
          XSOBP20();
        end
      else
        XSOBP20();
      end
    else
      converseLib.validationFailed(164); /* order status doesn't allow changes*/
      OBWREC.OBWERRFL = "Y";
    end
  end

  if (converseVar.eventKey is pf21
   && OB0HM001.OB0HMMOR == "Y" /* if pf21 and more sizes*/
   && OBWREC.OBWERRFL == "N")  /* and no errors*/
    OB0HS80(); /* toggle pages*/
  end

  if (converseVar.eventKey is pf22)
    XSOBP22();
  end

  if (converseVar.eventKey is pf23)
    if (OBWREC.YOBCD == "FA") /* failed availability*/
      XSOBP23();
    else
      converseLib.validationFailed(188); /* order status doesn't allow changes*/
      OBWREC.OBWERRFL = "Y";
    end
  end

  if (converseVar.eventKey is pf24)
    OB0HS-EDIT-XL-RSN();

    if (OBWREC.OBWERRFL != "Y")
      if (OB1REC.YOBCD == "CA" /* cleared availability*/
       || OB1REC.YOBCD == "LP" /* lost demand reported*/
       || OB1REC.YOBCD == "PD") /* postponed demand reported*/
        converseLib.validationFailed(164); /* order status doesn't allow changes*/
        OBWREC.OBWERRFL = "Y";
      else
        OBWREC.OBWXLIND = "I"; /* purge item*/
        OB0HS-CALL-OZ2090(); /* call oz2090 to update vsoscr01*/
        XSOBP24(); /* call ob0r*/
        OB0HS-DEL-OVERRIDE();
        OB0HS-DEL-VOBXRF01();
        XSOB-UPD-VOCITM01();
        COMMAREA.CAUSERA = OBWREC.OBWGROUP; /* save obwrec to commarea*/
        OB0HS-GET-PREPK();
        if (COMMAREA.CAFROMAP == "OB0L")
          XSOBP17(); /* error screen*/
        else
          XSOBP09(); /* product summary*/
        end
      end
    end
  end


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf23
   || converseVar.eventKey is pf24)
    /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


  if (converseVar.eventKey is enter
   && OBWREC.OBWERRFL == "N")
    if (OB0HW02.OB0HWSPL == "Y") /* if order was split*/
      XSOBP09();
    else
      if (OB0HW02.OB0HWFLG == "Y") /* item was updated*/
   /* * wai test begin*/
   /* * we need to delete the prepacks if exist since the on order*/
   /* * quantities have been touched, the existing prepacks may*/
   /* * not be correct.  they need to be recalculated and created.*/
   /* * call msr edits if item is added*/
        if (OB1REC.XPACD == "MS" || 
        OB1REC.XPACD == "CU") /* include cu order for msr edits*/
          OB0HS-CHK-PREPACK();
          OBW-EDIT-FUNCTION = "2";
          XSOBS-ONLINE-EDIT();
        end
   /* * wai test end*/
        XSOBP00(); /* goback to self*/
      else
        if (COMMAREA.CAFROMAP == "OB0L")
          XSOBP17();
        else
          XSOBP09();
        end
      end
    end
  end

end // end OB0HSPF

//*** RECORD=OB0HW01 ****
// ;
// This is the main working storage area for use by OB0H.
// The first part of the record will contain all of the fields
// that can be changed on the map, as well as all fields that
// occur 40 times, and thus must be paged (such as the size
// descriptions and availability).  The second part of the
// record contains an indicator which tells you which of the
// two pages is currently on the map, and an array of 40
// subscripts to tell you where you picked up a quantity on the
// OB3REC, and thus where to put it back when you are ready
// to update.
// ;
//                     MODIFICATIONS
// ------------------------------------------------------------
// 06/14/90    cgrice    initial creation
// 07/22/92    dlegg     add booking season fields
// 02/21/94    craine    db chgs- xhdchg resized to 9,2
// 02/07/96    CBRINE    Added ord id field with part char
// 09/03/97    wleong    Added MSR item flag
// 02/02/98    sparth    Added the following fields -
//                       OB0HWREJ,OB0HW-HOLD-EZETST-VAL,
//                       OB0HWPED,OB0HWCLP,OB0HWSBO,
//                       OB0HWZPR,OB0HWNIM,OB0HWNI1,OB0HWNI2,
//                       OB0HWNI3,OB0HWNI4,OB0HWNI5,OB0HWNI6
//                       OB0HWT1,OB0HWTK1,OB0HWTK2,OB0HWTK3,
//                       OB0HWTK4,OB0HWTK5.
// ***********************
Record OB0HW01 type basicRecord
  5 SY4IDDSC SY4IDDSC [40] ; 
  5 OP3ONOQT OP3ONOQT [40] ; 
  5 OB0HWAVL OB0HWAVL [40] ; 
  5 OB0HWCON OB0HWCON [40] ; 
  5 OB0HWSAV OB0HWSAV [40] ; 
  5 AV2CMNT AV2CMNT ; 
  5 XBDCD XBDCD ; 
  5 OP1BLKID OP1BLKID ; 
  5 OPRBNOID OPRBNOID ; 
  5 XWHCD XWHCD ; 
  5 XOWCD XOWCD ; 
  5 XAUCD XAUCD ; 
  5 XUMCD XUMCD ; 
  5 OP1CUNDT OP1CUNDT ; 
  5 OB-PART-AVAL-FL OB-PART-AVAL-FL ; 
  5 OB0HW-END-OF-BULKS-FL char(1) ; 
  5 OB0HW-ORD-ID num(9) ; 
    10 * char(8) ; // OB-PART-AVAL-FL
    10 OP1PARTN OP1PARTN ; 
  5 SP1ID SP1ID ; 
  5 * char(1) ; 
  5 OB0HWPAG OB0HWPAG ; 
  5 OB0HWCAL OB0HWCAL ; 
  5 XOBCD XOBCD ; 
  5 XOTCD XOTCD ; 
  5 XSOCD XSOCD ; 
  5 XDSCD XDSCD ; 
  5 XHDCD XHDCD [5] ; 
  5 XHDCHG XHDCHG [5] ; 
  5 OP2HCHGO OP2HCHGO [5] ; 
  5 * char(1) ; 
  5 WCU1710-EXISTS-FL WCU1710-EXISTS-FL ; 
  5 SAME-XREF-VALUES-FL SAME-XREF-VALUES-FL ; 
  5 XREF-SZ-FOUND-FL XREF-SZ-FOUND-FL ; 
  5 CU-CUSKU-SZ-FL CU-CUSKU-SZ-FL ; 
  5 SPCL-MKUP-FL SPCL-MKUP-FL ; 
  5 XREF-COUNT XREF-COUNT ; 
  5 OB0HW-SAVE-SZ OB0HW-SAVE-SZ ; 
  5 DELETE-SIZE-ID DELETE-SIZE-ID ; 
  5 MSG-NBR MSG-NBR ; 
  5 QTY-INCREASE-FL QTY-INCREASE-FL ; 
  5 QTY-DECREASE-FL QTY-DECREASE-FL ; 
  5 * char(1) ; 
  5 XREF-SZ-ID smallint [24] ; 
  5 OVRD-EXISTS-FL char(1) [24] ; 
  5 XREF-EXISTS-FL char(1) [24] ; 
  5 SZ-ON-ORD-FL char(1) [24] ; 
  5 * char(1) ; 
  5 XREF-CU-CUSKU-ID XREF-CU-CUSKU-ID [24] ; 
  5 XREF-XNX-DEPT-ID-XREF XREF-XNX-DEPT-ID-XREF [24] ; 
  5 XREF-CU-PROD-XREF-EDT XREF-CU-PROD-XREF-EDT [24] ; 
  5 XREF-CU-CUST-PROD-ID XREF-CU-CUST-PROD-ID [24] ; 
  5 XREF-CU-PROD-NM XREF-CU-PROD-NM [24] ; 
  5 XREF-CU-PROD-SNM XREF-CU-PROD-SNM [24] ; 
  5 XREF-CU-PROD-COLR-NM XREF-CU-PROD-COLR-NM [24] ; 
  5 XREF-CU-PROD-SZ-ID XREF-CU-PROD-SZ-ID [24] ; 
  5 XREF-CU-PROD-SZ-NM XREF-CU-PROD-SZ-NM [24] ; 
  5 XREF-XGP-GPC-CD XREF-XGP-GPC-CD [24] ; 
  5 XREF-SY-STY-NBR XREF-SY-STY-NBR [24] ; 
  5 XREF-SY-COLR-CD-ID XREF-SY-COLR-CD-ID [24] ; 
  5 XREF-XDM-DIM-CD XREF-XDM-DIM-CD [24] ; 
  5 XREF-XQA-QUAL-CD XREF-XQA-QUAL-CD [24] ; 
  5 XREF-CU-CUST-RTL-PRC XREF-CU-CUST-RTL-PRC [24] ; 
  5 XREF-CU-CUST-SPCL-PRC XREF-CU-CUST-SPCL-PRC [24] ; 
  5 XREF-CU-SPCL-PRC-EDT XREF-CU-SPCL-PRC-EDT [24] ; 
  5 XREF-CU-SUGG-RTL-PRC XREF-CU-SUGG-RTL-PRC [24] ; 
  5 XREF-CU-HANG-XGP-CD XREF-CU-HANG-XGP-CD [24] ; 
  5 XREF-CU-HANG-STY-NBR XREF-CU-HANG-STY-NBR [24] ; 
  5 XREF-PK-LABL-CD1 XREF-PK-LABL-CD1 [24] ; 
  5 XREF-PK-LABL-CD2 XREF-PK-LABL-CD2 [24] ; 
  5 XREF-YLA-LABL-ATCH-CD1 XREF-YLA-LABL-ATCH-CD1 [24] ; 
  5 XREF-YLA-LABL-ATCH-CD2 XREF-YLA-LABL-ATCH-CD2 [24] ; 
  5 XREF-CU-HANG-CRTN-CLS XREF-CU-HANG-CRTN-CLS [24] ; 
  5 XREF-CU-VEND-CLS-ID XREF-CU-VEND-CLS-ID [24] ; 
  5 XREF-CU-SKU-COMNT1 XREF-CU-SKU-COMNT1 [24] ; 
  5 XREF-CU-SKU-COMNT2 XREF-CU-SKU-COMNT2 [24] ; 
  5 XREF-CU-SKU-COMNT3 XREF-CU-SKU-COMNT3 [24] ; 
  5 OB0HW-MSRITM-FL OB0HW-MSRITM-FL ; 
  5 OB0HWREJ OB0HWREJ ; 
  5 OB0HW-HOLD-EZETST-VAL OB0HW-HOLD-EZETST-VAL ; 
  5 OB0HWPED OB0HWPED ; 
  5 OB0HWCLP OB0HWCLP ; 
  5 OB0HWSBO OB0HWSBO ; 
  5 OB0HWT1 OB0HWT1 ; 
    10 OB0HWTK1 OB0HWTK1 ; 
    10 OB0HWTK2 OB0HWTK2 ; 
    10 OB0HWTK3 OB0HWTK3 ; 
    10 OB0HWTK4 OB0HWTK4 ; 
    10 OB0HWTK5 OB0HWTK5 ; 
  5 OB0HWNIM OB0HWNIM ; 
    10 OB0HWNI1 OB0HWNI1 ; 
    10 OB0HWNI2 OB0HWNI2 ; 
    10 OB0HWNI3 OB0HWNI3 ; 
    10 OB0HWNI4 OB0HWNI4 ; 
    10 OB0HWNI5 OB0HWNI5 ; 
  5 OB0HWZPR OB0HWZPR ; 
end // end OB0HW01

//*** RECORD=OB0HW02 ****
// ;
// This is the second working storage area for use by OB0H.
// It will contain stuff like counters and subscripts.
// ;
//                     MODIFICATIONS
// ------------------------------------------------------------
// 06/14/90    cgrice    initial creation
// 03/20/91    swatso    added product description - ob0hwpds
// 08/12/92    dlegg     added booking season work fields
// 02/21/94    craine    db chgs - op2lnivl resized to 15,2
// ***********************
Record OB0HW02 type basicRecord
  5 OB0HWXOT OB0HWXOT ; 
  5 OB0HWXBD OB0HWXBD ; 
  5 OB0HWSU1 OB0HWSU1 ; 
  5 OB0HWSU2 OB0HWSU2 ; 
  5 OB0HWSU3 OB0HWSU3 ; 
  5 OB0HWSB1 OB0HWSB1 ; 
  5 OB0HWSB2 OB0HWSB2 ; 
  5 OB0HWSB3 OB0HWSB3 ; 
  5 * char(1) ; 
  5 OB0HWPRD OB0HWPRD ; 
    10 SY1STNBR SY1STNBR ; 
    10 OB0HW001 OB0HW001 ; 
    10 SY2CLRID SY2CLRID ; 
    10 OB0HW002 OB0HW002 ; 
    10 XDMCD XDMCD ; 
  5 * char(1) ; 
  5 OB0HWFND OB0HWFND ; 
  5 OB0HWFLG OB0HWFLG ; 
  5 OB0HWSPL OB0HWSPL ; 
  5 OB0HWAVF OB0HWAVF ; 
  5 OB0HWOP1 OB0HWOP1 ; 
  5 OB0HWOP3 OB0HWOP3 ; 
  5 * char(1) ; 
  5 OB0HWCDT OB0HWCDT ; 
    10 OB0HWCMM OB0HWCMM ; 
    10 OB0HWCSS OB0HWCSS ; 
    10 OB0HWCDD OB0HWCDD ; 
  5 * char(1) ; 
  5 OB0HWOID OB0HWOID ; 
    10 OB0HW003 OB0HW003 ; 
    10 OB0HWPAR OB0HWPAR ; 
  5 * char(1) ; 
  5 OP2TONOQ OP2TONOQ ; 
  5 OP2LNIVL OP2LNIVL ; 
  5 OB0HWRK3 OB0HWRK3 ; 
  5 * char(1) ; 
  5 OB0HWMSG OB0HWMSG ; 
    10 OB0HWMS1 OB0HWMS1 ; 
    10 OB0HWMS2 OB0HWMS2 ; 
    10 OB0HWMS3 OB0HWMS3 ; 
    10 OB0HWMS4 OB0HWMS4 ; 
  5 OB0HWPDS OB0HWPDS ; 
    10 OB0HWSSN OB0HWSSN ; 
    10 OB0HWSPC OB0HWSPC ; 
    10 OB0HWSCA OB0HWSCA ; 
  5 * char(1) ; 
  5 OP1PARTN OP1PARTN ; 
  5 OP1CUOID OP1CUOID ; 
  5 OP1NORID OP1NORID ; 
  5 OB0HW-NEW-ORD-SUB OB0HW-NEW-ORD-SUB ; 
  5 OB0HW-UPD-OCD-FL OB0HW-UPD-OCD-FL ; 
  5 OB0HW-OCD-NDT-FL OB0HW-OCD-NDT-FL ; 
  5 OB0HW-MAX-SEQ OB0HW-MAX-SEQ ; 
end // end OB0HW02

// op-hndl-chg-ovrd
DataItem DELETE-SIZE-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HW-HOLD-EZETST-VAL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HW-MAX-SEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msr item flag
DataItem OB0HW-MSRITM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ts subscript for new ord
DataItem OB0HW-NEW-ORD-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HW-OCD-NDT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem OB0HW-SAVE-SZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HW-UPD-OCD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0HW001 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler value '.'
DataItem OB0HW002 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OB0HW003 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// display avail flag
DataItem OB0HWAVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size availability
DataItem OB0HWAVL num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// call ob1350 flag
DataItem OB0HWCAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem OB0HWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cond code date
DataItem OB0HWCDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWCLP decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem OB0HWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// availability cond codes
DataItem OB0HWCON char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem OB0HWCSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order changed flag
DataItem OB0HWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem OB0HWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product
DataItem OB0HWMS1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted product
DataItem OB0HWMS2 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// is now on suborder
DataItem OB0HWMS3 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted order
DataItem OB0HWMS4 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted camsg
DataItem OB0HWMSG char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWNI1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWNI2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWNI3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWNI4 num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWNI5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWNIM char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust order id
DataItem OB0HWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP1REC found flag
DataItem OB0HWOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP3REC found flag
DataItem OB0HWOP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map page
DataItem OB0HWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OB0HWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product description
DataItem OB0HWPDS char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted product
DataItem OB0HWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWREJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field 3
DataItem OB0HWRK3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved qty subscripts
DataItem OB0HWSAV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third work subscript
DataItem OB0HWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third work subscript
DataItem OB0HWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third work subscript
DataItem OB0HWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWSBO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style color abbrev.
DataItem OB0HWSCA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value ' '.
DataItem OB0HWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split order flag
DataItem OB0HWSPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short style number
DataItem OB0HWSSN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first work subscript
DataItem OB0HWSU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second work subscript
DataItem OB0HWSU2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// third work subscript
DataItem OB0HWSU3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWT1 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWTK1 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWTK2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWTK3 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWTK4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OB0HWTK5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xbd table subscript
DataItem OB0HWXBD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xot table subscript
DataItem OB0HWXOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OB0HWZPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wcu1700 found fl
DataItem QTY-DECREASE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wcu1700 found fl
DataItem QTY-INCREASE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem SAME-XREF-VALUES-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CUSKU_SZ_FL
DataItem SPCL-MKUP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem WCU1710-EXISTS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem XREF-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-hndl-chg-ovrd
DataItem XREF-SZ-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

