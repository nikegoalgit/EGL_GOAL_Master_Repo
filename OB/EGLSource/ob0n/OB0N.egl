package ob0n;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OB0N ****
// APPLICATION OVERVIEW:
//   This map displays the information needed to add a new
// product to an existing order.  It is not in the mainstream
// of the OB system but is reached by pressing PF20 from prod-
// uct level screens. If a style is entered and ENTER is press-
// ed, the system will flow to the Product Detail Availability
// Screen so quantities by size can be entered.  If a product
// is not entered and ENTER is pressed, the system will flow
// to the Product Summary Screen.
// 
// APPLICATION OBJECTIVE:
//   This map allows the user to add a new product to an order.
// Style number is required but other elements such as unit of
// measure, package type, and inventory segment code can also
// be entered.  The sizes and quantities can be copied from
// another product on this or another order.  Or, the total
// quantity can be entered and a standard size distribution
// requested.  When the screen data is correct, and enter is
// pressed, a new item record is written, and if there are
// quantities, size record(s) are written.  General information
// on the item is also added to the last page of OBF4 temp
// storage.  The next screen, Product Detail Availability, will
// further handle the quantities per size.
// 
// ************************************************************
// *          M A I N T E N A N C E   L O G
// ************************************************************
// *  DATE      PRGMR                   DESC
// *
// * 10/02/90  CRAINE   Allow products to be added when no
// *                    valid products exists on order.  S3B.
// * 10/04/90  craine   update header if xdvcd or xbccd are
// *                    invalid, allows a valid product to dup
// *                    an invalid products size run.
// * 10/09/90  skott    choose xpccd(1) for database change
// *                    2nd occurance of product added
// * 01/23/91  tfox     removed accessory sales pgm logic and
// *                    replaced it with a call to op1660.
// *                    s3a,s3j,s3l,s60 w01
// * 02/15/91  dmeier   regen for database changes
// * 03/15/91  oricha   adjust code to allow translation of
// *                    nike style/color/dim to short nbr
// *                    via dcust.vcusku01. s32,s35,s37,s40
// * 03/20/91  swatso   changed the source of product descrpt
// *                    to short style number + style color
// *                    abbrev.  Modified w01 & s38.
// * 04/01/91  dflesh   created new return codes for life cycle
// *                    (07) and quality code (08).  s3l
// *                    log #589.
// * 05/02/91  tfox     menu of services - s51.
// * 05/20/91  schen    log #554 - data base changes -
// *                    changed s10, s35, s37 because ku2rec is
// *                    deleted.  use io5790 instead of io0270
// *                    or io0400.
// * 06/10/91  schase   June database changes. Corrected error
// *                    diag info for ref to IO0270. Now IO5790
// * 08/13/91  dharri   log #673 - add new product XREF ind val
// *                    of 'r'. s32, s35, s37, s40.
// * 09/03/92  dharri   log #893 - CUSTOM LOGO - ADDED TO S36
// *                    EDITS FOR PROJECT.  NEW STMT GROUPS S46
// *                    S47, S48, OB0NS-OB-ITM-SET, OB-ITM-NEXT
// *                    OB-ITM-CLOSE, LOGIC TO PREVENT MIXING
// *                    OF CUSTOM LOGO & NON-CUSTOM LOGO PROD-
// *                    UCTS ON AN ORDER.
// * 09/14/92  dlegg    Log #885 - Customer Prod Xref enhance-
// *                    ments. Changes to s32, s35, s37, and
// *                    s40.
// * 04/07/93 sjob     Log #937 - add new apparel whse #25
// *                   (ob0ns36)
// * 01/10/94 dmeier   Log #971 - musical size run processing.
// *                   ob0ns-edit-msr, ob0ns-msr-qty, s3a,
// *                   s3h, s3l, s53.
// * 05/19/94 scantr   virtual airspeed project: chgd obwrec,
// *                   xsobs02, xsobs03, added xsobs10
// * 05/24/94 scantr   changed xsobs03
// * 06/15/94 craine   changes for virtual airspeed
// * 09/06/94 craine   change to obwrec
// * 10/26/94 schase   change to obwrec
// * 01/03/95 craine   change to obwrec
// * 01/30/94 craine   chg to xsobs-upd-oba-edit
// * 04/18/95 kkauth   changed call to IO0200 to 'SF' -
// *                   OB0NS-DISPLAY-HNDL
// * 06/02/95 craine   change to obwrec
// * 08/01/95 DLIDDL   Modified to incorporate Nike Canada into
// *                   the AIRSPEED - OB0NS38.
// * 08/07/95 CRAINE   Database changes.
// * 03/20/96 CBRINE   Pre-set OB-PART-AVAL-FL to 'Y' (OB0NS51)
// *                   for apparel items.
// * 12/07/96 CBRINE   Added product category for equipment
// * 12/17/96 WLEONG   Removed musical size run logic.
// * 12/20/96 CBRINE   Call Cu1710 to access new cust xref tbl
// *                   (OB0NS35 & OB0NS37).
// * 06/24/97 csawki   Added Equipment/Product Category
// *                   changes: added OPWREC01 to Working
// *                   Storage, modified OB0NS61, added 2 new
// *                   SGRPS: 1)OB0NS-CHECK-EQUIP and
// *                   2)OB0NS-EU0100-SU.
// * 09/23/97 jnaemu   added edit for apparel futures to check
// *                   the need date against the product future
// *                   offering begin and end date.
// * 03/24/98 sgopal   removed use of xvotbl and added code to
// *                   access dcorp.vxvo0001 using the iomod
// *                   vxvo0001.
// *                   The statement group changed is: S61
// * 04/01/98 sgopal   Removed the commented code that accessed
// *                   XVOTBL in OB0NS61 as a clean-up process.
// * 04/30/98 sparth   Made changes in OB0NS3K and OB0NS51
// *                   to take care of duplicate product id.
// * 10/02/98   svargh   updated ob0gs21 and added ob0gs-check-
// *                    -vbulk and ob0gs-updte-vbulk to update
// *                   bulk quantities in vbulks02 table when
// *                   the header table is updated.
// * 03/22/99 kramse   Modified statement group OB0NS38 to call
// *                   SY2000 for apparal orders GPC 03 in
// *                   addition to Canadian orders.
// * 03/23/00 nkathi          BSSA GOES GPC02 PROJECT
// * TT#4752           Added 4 new SRGPs OB0NS-CHK-IF-BSSA,
// *                   OB0NS-EDT-BSSA-HND, OB0NS-MOV-BSSA-HND
// *                   OB0NS-EDT-BSSA-LBL to check BSSA
// *                   products and assign hardcoded label and
// *                   handle codes for specific  customers.
// *                   Added record YSMREC which is passed on
// *                   the call to IO Mod IO2640.
// *                   Modified SRGPs OB0NS-EDIT-HNDL,
// *                   OB0NS-EDIT-LBLS and OB0NS51.
// * 05/24/00 rharat          BSSA GOES GPC02 PROJECT
// * TT#4752           Added 4 new SRGPs OB0NS-CHK-IF-BSSA,
// *                   OB0NS-EDT-BSSA-HND, OB0NS-MOV-BSSA-HND
// *                   OB0NS-EDT-BSSA-LBL to check BSSA
// ************************************************************
// *********************
Program OB0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUFREC KUFREC; // record
  OB0NW01 OB0NW01; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB3REC OB3REC; // record
  OB8REC OB8REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBDUREC OBDUREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBHREC OBHREC; // record
  OBKREC OBKREC; // record
  OBSFREC OBSFREC; // record
  OBWREC OBWREC; // record
  OP2REC OP2REC; // record
  OPCREC OPCREC; // record
  OPMSREC OPMSREC; // record
  OPWREC01 OPWREC01; // record
  PC2REC PC2REC; // record
  PWRREC PWRREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VXVO0001 VXVO0001; // record
  WCU1710 WCU1710; // record
  WEU0100 WEU0100; // record
  WSY2000 WSY2000; // record
  XSOBW01 XSOBW01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL; // table
  use XGPTBL; // table
  use XQATBL; // table
  use XBDTBL; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOTTBL; // table
  use XEGTBL; // table
  use XPGTBL; // table
  use XUMTBL; // table
  use XSZTBL; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use OB0NM.OB0NM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB0N000: OB0N000();
    goto OB0N010;
    OB0N010: OB0N010();
    goto OB0N010;
  end // end main
end // end OB0N

// ADD PRODUCT INIT
Function OB0N000()
     /* Check csp and order batch security*/

  XSENTRY();
  XSOBS01();

     /* Initialize application - init records, get zz date/time,*/
                              /* save map name for XSOBE## sgrp's*/
  OB0NS10();

     /* Set -911 processing flag*/

  OBWREC.OBWER911 = "N";

     /* Determine if batch edit is running*/

  XSOBS02();

     /* Read current order header*/

  XSOBS03();


     /* Display commarea message*/

  OB0NM001.CAMSG = OBWREC.CAMSG;
  OBWREC.CAMSG = " ";


     /* Build map for display*/

  OB0NS20();


end // end OB0N000

// ADD PRODUCT CONVERSE
Function OB0N010()

  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  OBWREC.OBWER911 = "Y"; /* -911 processing flag*/

  converse OB0NM001 ;

     /* Init error stuff*/

  OBWREC.OBWERRFL = "N";
  converseLib.validationFailed(0);
  OBWREC.OBWHELP = OB0NM001.CAMSG; /* save for help screen*/
  OB0NM001.CAMSG = " "; /* replace mapname and uncomment*/


     /* Reset field attributes*/

  OB0NS40();


     /* Edit map(no matter what pfkey is used)*/

  OB0NS30();


     /* Update*/

  if (OBWREC.OBWERRFL == "N"
   && converseVar.eventKey is enter
   && OB0NW01.OB0NWENT == "Y") /* product was entered*/
    OB0NS50();
  end


     /* Edit PF Keys*/

  OB0NSPF();

end // end OB0N010

// check for equipment product
Function OB0NS-CHECK-EQMT()
   /* --------------------- ob0ns-check-eqmt ---------------------------*/

   /* determine whether or not this is an equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "OB0N";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = SYCREC.XGPCD;
  WEU0100.SY1STNBR = SYCREC.SY1STNBR;
  WEU0100.SY2CLRID = SYCREC.SY2CLRID;
  WEU0100.XDMCD = SYCREC.XDMCD;

  OB0NS-EU0100-SU(); /* select unique*/

end // end OB0NS-CHECK-EQMT

// check for equipment product
Function OB0NS-CHECK-VBULK()

   /* **************TCSINCLUDE BEGIN*******************/


  set SQLCA empty;
  set OBFREC empty;
  OBFREC.OBFTASK = "S";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0NS-UPDTE-VBULK();
  else

    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1LOCAT[1] = "S ";
      TA1REC.TA1LOCAT[2] = "VBULKS02";
      TA1REC.TA1LOCAT[3] = "OB0NS-CHECK-VBULK";
      TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end

   /* ***************TCS INCLUDE END*****************/

end // end OB0NS-CHECK-VBULK

// Check for BSSA product
Function OB0NS-CHK-IF-BSSA()
   /* *****************************************************************/
   /* TT#4752          03/24/00    NKATHI                           **/
   /* This SRGP is added to read the sum code table and  identify   **/
   /* BSSA products calling IO module IO2640.The flag OB0NW-BSSA    **/
   /* -PRODUCT is set to 'Y' if the product is BSSA else left as 'N'**/
   /* *****************************************************************/

  OB0NW-BSSA-PRODUCT = "N"; /* set bssa flag 'N'*/
  YSMREC.YSMTBLPF = "XPC"; /* move table prefix XPC*/
  YSMREC.YSMSYSPF = "BS"; /* BS  system prefix for BSSA products*/
  YSMREC.YSMSUMID = 1; /* 1 to sum id*/
  YSMREC.YSMSUMCD = "1"; /* '1' to sum code*/
  YSMREC.YSMSRCVL = SYCREC.XPCCD; /* 1&2 positions of srce code is*/
                                  /* xpc code*/

  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* unique select*/

  if (SQLCA.VAGen_SQLCODE == 0) /* bssa product found*/
    OB0NW-BSSA-PRODUCT = "Y"; /* move 'Y' to BSSA flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* bssa product not found*/
   /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "OB0NS-CH"; /* move SRGP name*/
      TA1REC.TA1LOCAT[2] = "K-IF-BSS";
      TA1REC.TA1LOCAT[3] = "IO2640  "; /* move program name*/
      TA1REC.TA1DBASE = "DCORP   "; /* move table name*/
      TA1REC.TA1TBLVU = "VSUMCD01";
      TA1REC.TA1TBLKE = YSMREC.YSMGRP;
      XSOPS02(); /* DB2 abend*/
    end
  end
end // end OB0NS-CHK-IF-BSSA

// display cust special handling
Function OB0NS-DISPLAY-HNDL()

      /* ********************************************************/
      /* * display map with customer handling codes if they exist*/
      /* ********************************************************/


  set KUFREC empty;
  set SQLCA empty;

  KUFREC.KUCCOID = OB1REC.KUCCOID; /* cust num*/
  KUFREC.KUMSTRID = OB1REC.KUMSTRID; /* store*/
  KUFREC.XNXCD = OB1REC.XNXCD; /* dept*/
   /* bssa project changes * begin * 05/24/2000 * rharat *****/
  if (OB0NW01.OB0NW-BSSA-PRODUCT == "Y") /* if bssa product*/
    KUFREC.XGPCD = "03"; /* gpc code*/
  else
    KUFREC.XGPCD = OB1REC.XGPCD; /* gpc code*/
  end
   /* bssa project changes *  end  * 05/24/2000 * rharat *****/

  call "IO0200" ("SF", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OB0NM001.XHDCD[1] = KUFREC.XHDCD[1];
    OB0NM001.XHDCHG[1] = KUFREC.XHDCHG[1];
    OB0NM001.XHDCD[2] = KUFREC.XHDCD[2];
    OB0NM001.XHDCHG[2] = KUFREC.XHDCHG[2];
    OB0NM001.XHDCD[3] = KUFREC.XHDCD[3];
    OB0NM001.XHDCHG[3] = KUFREC.XHDCHG[3];
    OB0NM001.XHDCD[4] = KUFREC.XHDCD[4];
    OB0NM001.XHDCHG[4] = KUFREC.XHDCHG[4];
    OB0NM001.XHDCD[5] = KUFREC.XHDCD[5];
    OB0NM001.XHDCHG[5] = KUFREC.XHDCHG[5];
    OB0NM001.PWRLBCD[1] = KUFREC.PWRLBCD[1];
    OB0NM001.PWRLBCD[2] = KUFREC.PWRLBCD[2];
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VHNDLX01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "IO0200  ";
      TA1REC.TA1LOCAT[3] = "OB0NS-DI";
      TA1REC.TA1LOCAT[4] = "SPLAY-HN";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end


   /* get handling code abbreviations*/

  OB0NW01.OB0NWSUB = 1; /* start at first handling code*/
  while (OB0NW01.OB0NWSUB < 6)
    if (OB0NM001.XHDCD[OB0NWSUB] != " ")
      sysVar.arrayIndex = 1;
      OB0NW01.XHDCD = OB0NM001.XHDCD[OB0NWSUB];
      OB0NW01.XGPCD = OB1REC.XGPCD;
      if (OB0NW01.XHDKEY in XHDTBL.XHDKEY)
        /* BSSA PROJECT CHANGES * BEGIN * 03/28/2000 * FIXED BUG ***/
        OB0NM001.XHDABRV[OB0NWSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
        /* BSSA PROJECT CHANGES *  END  * 03/28/2000 * FIXED BUG ***/
      end
    end
    OB0NW01.OB0NWSUB = OB0NW01.OB0NWSUB + 1;
  end

   /* get label abbreviations*/

  if (OB0NM001.PWRLBCD[1] != " ") /* label code exists*/
      /* get label code abbreviation*/
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OB0NM001.PWRLBCD[1]; /* setup key*/

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* label code found*/
      OB0NM001.PWRLBABR[1] = PWRREC.PWRLBABR; /* move abrv*/
    else
      OB0NM001.PWRLBABR[1] = "UNKNWN";
    end
  else
    OB0NM001.PWRLBABR[1] = "      "; /* cust label code abrv*/
  end

   /* BSSA PROJECT CHANGES * BEGIN * 03/28/2000 * FIXED BUG ***/
   /* MOVE OB3REC.PWRLBCD(2) TO OB0NM001.PWRLBCD(2);/* cust label code 2*/
   /* BSSA PROJECT CHANGES *  END  * 03/28/2000 * FIXED BUG ***/

  if (OB0NM001.PWRLBCD[2] != " ") /* label code exists*/
      /* get label code abbreviation*/
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OB0NM001.PWRLBCD[2]; /* setup key*/

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* label code found*/
      OB0NM001.PWRLBABR[2] = PWRREC.PWRLBABR; /* move abrv*/
    else
      OB0NM001.PWRLBABR[2] = "UNKNWN";
    end
  else
    OB0NM001.PWRLBABR[2] = "      "; /* cust label code abrv*/
  end





end // end OB0NS-DISPLAY-HNDL

// edit special handling codes
Function OB0NS-EDIT-HNDL()
       /* **************************************************/
       /* *  EDIT HANDLING CODES (1-5) & CHARGES (1-5)    **/
       /* **************************************************/

  OB0NW01.OB0NWSUB = 5; /* set subscript to 5*/
  while (OB0NW01.OB0NWSUB > 0) /* while subscript not 0*/

    if (OB0NM001.XHDCD[OB0NWSUB] > " ") /* if handling code entered*/

      OB0NW01.XHDCD = OB0NM001.XHDCD[OB0NWSUB];
      OB0NW01.XGPCD = OB1REC.XGPCD;
      sysVar.arrayIndex = 1;
      if (OB0NW01.XHDKEY in XHDTBL.XHDKEY /* search xhdtbl*/
       && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* verify status*/
        OB0NM001.XHDABRV[OB0NWSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
        if (OB0NM001.XHDCHG[OB0NWSUB] == 0) /* ;  amount not entered*/
          OB0NM001.XHDCHG[OB0NWSUB] = XHDTBL.XHDCHG[sysVar.arrayIndex];
        end
        if (OB0NM001.XHDCHG[OB0NWSUB] != XHDTBL.XHDCHG[sysVar.arrayIndex])
          OB0NM001.OP2HCHGO[OB0NWSUB] = "*";
        end
      else
        converseLib.validationFailed(3); /* handling code is invalid or inactive*/
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        set OB0NM001.XHDCD[OB0NWSUB] cursor, bold;
        OB0NM001.XHDABRV[OB0NWSUB] = "UNKNWN";
      end


    else
      OB0NM001.XHDABRV[OB0NWSUB] = " ";
    end

    if (OB0NM001.XHDCD[OB0NWSUB] == " " /* if hndlg code not entered*/
     && OB0NM001.XHDCHG[OB0NWSUB] > 0)  /* and charge is entered*/
      converseLib.validationFailed(3); /* handling code is invalid or inactive*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0NM001.XHDCD[OB0NWSUB] cursor, bold;
    end

    OB0NW01.OB0NWSUB = OB0NW01.OB0NWSUB - 1; /* decrement subscript by 1*/
  end


end // end OB0NS-EDIT-HNDL

// edit specail labels
Function OB0NS-EDIT-LBLS()
       /* **************************************************/
       /* *  EDIT CUSTOMER LABEL CODES                    **/
       /* **************************************************/

  if (OB0NM001.PWRLBCD[1] > " ") /* if label code entered*/
      /* get label code abbreviation*/
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OB0NM001.PWRLBCD[1]; /* SETUP KEY*/

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0 /* label code found*/
     && PWRREC.XXXSTAT == "A")   /* label code active*/
      OB0NM001.PWRLBABR[1] = PWRREC.PWRLBABR; /* move abrv*/
    else
      converseLib.validationFailed(154); /* label code invalid or inactive*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0NM001.PWRLBCD[1] cursor, bold;
      OB0NM001.PWRLBABR[1] = "UNKNWN";
    end
  else
    OB0NM001.PWRLBABR[1] = "      "; /* cust label code abrv*/
  end


  if (OB0NM001.PWRLBCD[2] > " ") /* if label code entered*/
      /* get label code abbreviation*/
    set PWRREC empty;
    set SQLCA empty;
    PWRREC.PWRLBCD = OB0NM001.PWRLBCD[2]; /* setup key*/

    call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0 /* label code found*/
     && PWRREC.XXXSTAT == "A")   /* label code active*/
      OB0NM001.PWRLBABR[2] = PWRREC.PWRLBABR; /* move abrv*/
    else
      converseLib.validationFailed(154); /* label code invalid or inactive*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      set OB0NM001.PWRLBCD[2] cursor, bold;
      OB0NM001.PWRLBABR[2] = "UNKNWN";
    end
  else
    OB0NM001.PWRLBABR[2] = "      "; /* cust label code abrv*/
  end

end // end OB0NS-EDIT-LBLS

// call eu0100 select unique
Function OB0NS-EU0100-SU()
   /* ------------------- ob0ns-eu0100-su -------------------------*/

  WEU0100.WEU0100-TASK = "S ";
  WEU0100.WEU0100-CALLER-LOCATION = "OB0NS-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to ob0ns-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "OB0NS-EU0100-SU"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/


end // end OB0NS-EU0100-SU

// check for equipment product
Function OB0NS-UPDTE-VBULK()

   /* **********TCS INCLUDE BEGIN**************/

   /* STATEMENT GROUP TO UPDATE BULK TABLE*/

  set SQLCA empty;
  set OBFREC empty;
  VBULKS02.KUMSTRID = OB1REC.KUMSTRID;
  VBULKS02.XNXCD = OB1REC.XNXCD;
  VBULKS02.XBDCD = OB1REC.XBDCD;
  VBULKS02.OP1CUPO = OB1REC.OP1CUPO;
  VBULKS02.XDVCD = OB1REC.XDVCD;
  VBULKS02.XGPCD = OB1REC.XGPCD;
  VBULKS02.XSOCD = OB1REC.XSOCD;
  VBULKS02.XWHCD = OB1REC.XWHCD;
  VBULKS02.OP1CUNDT = OB1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OB1REC.OP1DSADT;
  VBULKS02.SP1ID = OB1REC.SP1ID;
  VBULKS02.SM4REPID = OB1REC.SM4REPID;

  OBFREC.OBFTASK = "U";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)

  else

    if (SQLCA.VAGen_SQLCODE == 100)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      XSOBP00();
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0NS-UPDTE-VBULK"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        ";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS05(); /* rollback and restart*/
      else
        XSOBEDR(); /* abort routine - reset*/
      end
    end
  end

   /* ************TCS INCLUDE END ***********************/

end // end OB0NS-UPDTE-VBULK

// INITIALIZE APPLICATION
Function OB0NS10()
       /* ***************************************************/
       /* *  INITIALIZE OB0N APPLICATION.                  **/
       /* ***************************************************/

  set OBAREC empty;
  set OBBREC empty;
  set OBCREC empty;
  set OBDREC empty;
  set OBEREC empty;
  set OBFREC empty;
  set OBHREC empty;
  set OBKREC empty;
  set OBSFREC empty;
  set OB1REC empty;
  set OB2REC empty;
  set OB3REC empty;
  set OB8REC empty;
  set OP2REC empty;
  set OPCREC empty;
  set KUCREC empty;
  set KUFREC empty;
  set WCU1710 empty;
  set PC2REC empty;
  set SYCREC empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA5REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set XX0XW01 empty;

  set OB0NM001 empty;
  set OB0NW01 empty;

   /* bssa project changes * begin * 05/24/2000 * rharat ********/
  OB0NW01.OB0NW-BSSA-PRODUCT = "N"; /* bssa product indicator*/
  OB0NW01.OB0NW-BSSA-FIRST-TIME = "Y"; /* fl used to force converse*/
   /* bssa project changes * begin * 05/24/2000 * rharat ********/

  XX0XS01();
  OBWREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OBWREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  TA1REC.TA1MAP = "OB0NM001"; /* map name*/



end // end OB0NS10

// BUILD MAP
Function OB0NS20()

     /* move fields to map*/

  OB0NS21();

     /* get customer company record to determine if cust has*/
     /* own product code list*/

  OB0NSCU();

     /* find any product in the order to determine if the*/
     /* product to be added is the first and therefore,*/
     /* allow modification of GPC on the header*/

  OB0NSGP();

     /* determine if this order is a draw or not.  this*/
     /* information will be needed later on when setting*/
     /* the attributes for unit of measure and when editing*/
     /* product style-color-dimension id.*/

  OB0NSDR();


     /* reset field attributes*/

  OB0NS40();

end // end OB0NS20

// MOVE FIELDS TO MAP
Function OB0NS21()

    /* MOVE FIELDS TO MAP*/

  OB0NM001.OB0NMPRC = "OB0N010"; /* process name*/
  OB0NM001.OBWCDATE = OBWREC.OBWCDATE; /* current date*/

  OB0NM001.OBWORDER = OBWREC.OBWORDER; /* formatted ord num*/
  OB0NM001.OBWCUST = OBWREC.OBWCUST; /* formatted cust*/
  OB0NM001.OP1CUPO = OBWREC.OP1CUPO; /* purchase order number*/
  OB0NM001.KUMSTRNM = OBWREC.KUMSTRNM; /* customer name*/

  OB0NM001.XGPCD = OB1REC.XGPCD; /* GPC code*/

  if (OB1REC.XGPCD != "03") /* not apparel*/
    OB0NM001.SY2CLRID = "00 "; /* color code id*/
  end

  OB0NM001.OB0NMCSL = "CUST STYLE:"; /* customer style lit*/
  OB0NM001.XDMCD = "00"; /* dimension cd*/
  OB0NM001.CU-CUST-PROD-ID = " "; /* cust prod id*/
  OB0NM001.XQACD = "01"; /* quality code*/
  OB0NM001.PC2INSEG = "000"; /* inventory segment*/
  OB0NM001.XEGCD = "000"; /* engr difference*/
  OB0NM001.XPGCD = "00"; /* package type code*/

    /* DESCRIPTIONS/ABBREVIATIONS AND CODE DEFAULTS*/
    /* THAT ARE DERIVED FROM TABLES*/

  sysVar.arrayIndex = 1;
  if (OB0NM001.XGPCD == " ") /* GPC CODE abbreviation*/
    OB0NM001.XGPABRV = " ";
  else
    if (OB0NM001.XGPCD in XGPTBL.XGPCD)
      OB0NM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OB0NM001.XGPABRV = "UNKNWN";
    end
  end


  sysVar.arrayIndex = 1;
  if (OB0NM001.XQACD in XQATBL.XQACD) /* quality code abbreviation*/
    OB0NM001.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    OB0NM001.XQAABRV = "UNKNWN";
  end


  sysVar.arrayIndex = 1;
  if (OB0NM001.XLCCD in XLCTBL.XLCCD) /* life cycle abbreviation*/
    OB0NM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
  else
    OB0NM001.XLCABRV = "UNKNWN";
  end


  sysVar.arrayIndex = 1;
  if (OB0NM001.XPGCD in XPGTBL.XPGCD) /* PACKAGE TYPE CODE abbrev*/
    OB0NM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
  else
    OB0NM001.XPGABRV = "UNKNWN";
  end


  sysVar.arrayIndex = 1;
  if (OB0NM001.XEGCD in XEGTBL.XEGCD) /* ENGR DIFF CODE abbrev*/
    OB0NM001.XEGABRV = XEGTBL.XEGABRV[sysVar.arrayIndex];
  else
    OB0NM001.XEGABRV = "UNKNWN";
  end

                           /* INVENTORY SEGMENT CODE abbreviation*/

  set PC2REC empty;
  set SQLCA empty;
  PC2REC.XGPCD = OB0NM001.XGPCD; /* gpc code*/
  PC2REC.PC2INSEG = OB0NM001.PC2INSEG; /* segment code*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0NM001.PC2SEGAB = PC2REC.PC2SEGAB; /* move abbreviation to map*/
  else
    OB0NM001.PC2SEGAB = "UNKNWN"; /* move abbreviation to map*/
  end

  OB0NS-DISPLAY-HNDL();

end // end OB0NS21

// EDIT MAP
Function OB0NS30()

    /* EDIT MAP*/

    /* If no product was entered, then consider as an abort and*/
    /* return to Product summary screen via OB0NSPF statement*/
    /* group.  But before checking for product entered, set the*/
    /* default values for color and dimension.*/

  if (OB0NM001.XDMCD == " ") /* dimension code is blanks*/
    OB0NM001.XDMCD = "00"; /* default to '00'*/
  end

  if (OB0NM001.SY2CLRID == " " /* color code id is blanks*/
   && OB0NM001.XGPCD != "03")  /* and not apparel*/
    OB0NM001.SY2CLRID = "00"; /* default to '00 '*/
  end

                                  /* for footwear or non-apparel*/
  if (OB1REC.XGPCD == OB0NM001.XGPCD /* gpc code is not*/
   && OB0NM001.SY1STNBR == " "       /* changed and the*/
   && OB0NM001.SY2CLRID == "00 "     /* nike style/color/*/
   && OB0NM001.XDMCD == "00"         /* dimension and the*/
   && OB0NM001.CU-CUST-PROD-ID == " ") /* cust style id not change*/
    OB0NW01.OB0NWENT = "N"; /* set product entered flag to no*/
    return;
  end
                                  /* for apparel*/
  if (OB1REC.XGPCD == OB0NM001.XGPCD /* gpc code is not*/
   && OB0NM001.SY1STNBR == " "       /* changed and the*/
   && OB0NM001.SY2CLRID == "   "     /* nike style/color/*/
   && OB0NM001.XDMCD == "00"         /* dimension and the*/
   && OB0NM001.CU-CUST-PROD-ID == " ") /* cust style id not change*/
    OB0NW01.OB0NWENT = "N"; /* set product entered flag to no*/
    return;
  end


  OB0NW01.OB0NWENT = "Y"; /* product was entered to map*/


   /* Procedures to edit all fields on the map start here*/


  OB0NS31(); /* edit GPC CODE*/


  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    OB0NS32(); /* edit PRODUCT*/
  end

   /* bssa changes * begin * 05/24/2000 * rharat **************/
  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    if (OB0NW01.OB0NW-BSSA-FIRST-TIME == "Y") /* first time in*/
      if (OB0NW01.OB0NW-BSSA-PRODUCT == "Y") /* and bssa product*/
        OB0NS-DISPLAY-HNDL(); /* get correct hndl/lbl codes*/
        converseLib.validationFailed(259); /* warning check hndl/lbl*/
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        OB0NW01.OB0NW-BSSA-FIRST-TIME = "N"; /* no to fitst time*/
      end
    end
  end
   /* bssa changes *  end  * 05/24/2000 * rharat **************/

  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    OB0NS3C(); /* edit engineering diff*/
    OB0NS3D(); /* edit package type cd*/
    OB0NS3E(); /* edit inventory segment*/
    OB0NS3F(); /* edit unit of measure*/
    OB0NS3G(); /* edit total order quantity*/
    OB0NS3H(); /* edit std size distribution*/
    OB0NS3I(); /* edit dup from nike ord id*/
    /* Dup from cust ord id -- (not required, so no edits)*/
    /* Dup from product id  -- OB0NS3K (performed from OB0NS3I)*/
    OB0NS-EDIT-HNDL(); /* edit handling codes*/
    OB0NS-EDIT-LBLS(); /* edit labels*/
  end


end // end OB0NS30

// EDIT GPC CODE
Function OB0NS31()

    /* EDIT GPC CODE*/

    /* If the GPC field on the map is autoskip, do not edit*/
    /* Note that this field will be autoskip if there were*/
    /* already products in this order.*/

  if (OB0NW01.OB0NWPRD == "N" /* there are no products on the order*/
   && OB1REC.XGPCD == " ")    /* and the order has no gpc originally*/
      /* next sentence*/
  else
    return;
  end


  if (OB0NM001.XGPCD == " ") /* GPC code is blank*/
    set OB0NM001.XGPCD cursor, bold;
    OB0NM001.XGPABRV = " ";
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(125); /* GPC is a required field*/
    return;
  end


  if (OB0NM001.XGPCD in XGPTBL.XGPCD /* found an active gpc record*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OB0NM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    set OB0NM001.XGPCD cursor, bold;
    OB0NM001.XGPABRV = "UNKNWN";
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(010); /* GPC is inactive or invalid*/
    return;
  end

end // end OB0NS31

// EDIT PRODUCT
Function OB0NS32()

    /* EDIT PRODUCT*/

    /* If the customer has own customer-product id list,*/
    /* convert cu-cust-prod-id nike style id if used.  if nike*/
    /* style was used and the customer is allowed own*/
    /* product list, convert nike style to customer style.*/
    /* Note that the customer-product-id field could not*/
    /* be filled if not allowed because its attribute*/
    /* was set autoskip in ob0ns40.*/
    /* 3/91: generic style number.  used when customers cannot*/
    /* handle our style/color/dim 11-digit number.  so we have*/
    /* to convert it to a shorter version using this logic.*/
    /* customer company record will indicate 'g' for this.*/

    /* Do the edits to product after the above mentioned*/
    /* process.*/

  if (KUCREC.CU-PRT-XREF-FL == "Y") /* X-ref print flag is yes*/
    if (KUCREC.KUCSKIND == "P" /* parent--company wide numbers*/
     || KUCREC.KUCSKIND == "R" /* group--only numbers*/
     || KUCREC.KUCSKIND == "C" /* company-only numbers*/
     || KUCREC.KUCSKIND == "G")
                                   /* generic--convert long style to short*/

      if (OB0NM001.CU-CUST-PROD-ID != " ") /* cust-prod-id entered*/
        OB0NS35(); /* convert cust-prod to nike-prod id*/
      else /* cust-prod-id was not entered*/
        OB0NS37(); /* convert nike-prod to cust-prod id*/
      end
    end

  end


  if (OBWREC.OBWERRFL == "Y") /* errors in conversion*/
    return; /* no further edits done*/
  end


  OB0NS36(); /* edit style-color-dim id*/

  if (OBWREC.OBWERRFL == "Y") /* error found*/
    set OB0NM001.SY1STNBR cursor, bold; /* highlight nike-style*/
    set OB0NM001.SY2CLRID bold; /* highlight color*/
    set OB0NM001.XDMCD bold; /* highlight dimension*/

    if (KUCREC.CU-PRT-XREF-FL == "Y")
      if (KUCREC.KUCSKIND == "P" /* customer sku table used*/
       || KUCREC.KUCSKIND == "C" /* to convert numbers*/
       || KUCREC.KUCSKIND == "G" 
       || KUCREC.KUCSKIND == "R")
        if (OB0NM001.CU-CUST-PROD-ID != " ") /* field was entered*/
          set OB0NM001.CU-CUST-PROD-ID bold; /* highlight cust-prod*/
        end
      end
    end

  end

   /* bssa project changes * begin * 05/25/20000 * rharat *********/
  if (OBWREC.OBWERRFL == "N") /* no error found*/
    OB0NS-CHK-IF-BSSA(); /* check if bssa product*/
  end
   /* bssa project changes *  end  * 05/25/20000 * rharat *********/
end // end OB0NS32

// EDIT PROD FOR VALID SIZES
Function OB0NS33()

    /* EDIT PROD FOR VALID SIZES*/

     /* This routine will ensure that any products added will*/
     /* have valid sizes before getting to the availability*/
     /* screen.*/

  OB0NSSZ(); /* get and count number of valid sizes*/

     /* The counted number of valid sizes must not be zero;*/
     /* otherwise, it's an error.  This the value of this count*/
     /* will be stored in OB0NWNVS.  This field was initialized*/
     /* and set in OB0NSSZ.*/

  if (OB0NW01.OB0NWNVS == 0) /* Number of valid sizes is zero*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(134); /* Prod does not have valid sizes*/
  end


end // end OB0NS33

// CONVERT CUST TO NIKE PROD-ID
Function OB0NS35()

    /* CONVERT CUST-PROD ID TO NIKE-PROD ID*/

  set WCU1710 empty;

  WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OB1REC.KUCCOID;
  WCU1710-XNX-DEPT-ID-XREF = OB1REC.XNXCD;
  WCU1710.WCU1710-IN-CU-CUST-PROD-ID = OB0NM001.CU-CUST-PROD-ID;
  WCU1710.WCU1710-IN-CU-PROD-SZ-ID = " ";

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/

  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0)
    OB0NM001.SY1STNBR = WCU1710.SY-STY-NBR[1]; /* style*/
    OB0NM001.SY2CLRID = WCU1710.SY-COLR-CD-ID[1]; /* color*/
    OB0NM001.XDMCD = WCU1710.XDM-DIM-CD[1]; /* dimension*/
  else
    if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
      set OB0NM001.CU-CUST-PROD-ID cursor, bold;
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      converseLib.validationFailed(098); /* customer style id is not valid*/
      OB0NM001.SY1STNBR = " "; /* style*/
      OB0NM001.SY2CLRID = " "; /* color*/
      OB0NM001.XDMCD = " "; /* dimension*/
      OB0NM001.SY2PRDES = " "; /* product description*/
    else
      if (WCU1710.WCU1710-RETURN-CODE == 3) /* database is busy*/
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        OB0NM001.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      else
        TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[2] = "OB0NS35 "; /* statement group*/
        TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
        TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
        TA1REC.TA1TYPE = "APPL"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        XSOBEDC();
      end
    end
  end


end // end OB0NS35

// EDIT STYLE-COLOR-DIM ID
Function OB0NS36()

    /* EDIT STYLE, COLOR AND DIMENSION CODES*/

  if (OB0NM001.SY1STNBR == " ") /* style number not entered*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(102); /* Please enter a style*/
    return;
  end


  OB0NS38(); /* edit against product file*/

  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    if (OB1REC.OB1ACCSF == "C") /* custom logo order*/
      if (SYCREC.XPRCD == "22") /* custom logo product*/
          /* next sentence           /**/
      else /* custom logo or non-custom logo*/
        OBWREC.OBWERRFL = "Y"; /* can't mix products*/
        converseLib.validationFailed(173);
      end
    else /* non custom logo order*/
      if (SYCREC.XPRCD == "22") /* custom logo product*/
        OBWREC.OBWERRFL = "Y"; /* can't mix products*/
        converseLib.validationFailed(174);
      end
    end
  end


  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    OB0NS3B(); /* edit product against brand*/
  end

  if (OBWREC.OBWERRFL == "N") /* no previous errors*/
    OB0NS33(); /* edit product for valid sizes*/
  end



end // end OB0NS36

// CONVERT NIKE TO CUST PROD-ID
Function OB0NS37()

    /* CONVERT NIKE TO CUST PROD ID*/

  set WCU1710 empty;

  WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OB1REC.KUCCOID;
  WCU1710-XNX-DEPT-ID-XREF = OB1REC.XNXCD; /* dept code*/
  WCU1710-IN-XGP-GPC-CD = OB0NM001.XGPCD; /* gpc cd*/
  WCU1710-IN-SY-STY-NBR = OB0NM001.SY1STNBR; /* style nbr*/
  WCU1710-IN-SY-COLR-CD-ID = OB0NM001.SY2CLRID; /* color cd id*/
  WCU1710-IN-XDM-DIM-CD = OB0NM001.XDMCD; /* dimension code*/
  WCU1710-IN-XQA-QUAL-CD = OB0NM001.XQACD; /* quality code*/

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/

  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0)
    OB0NM001.CU-CUST-PROD-ID = WCU1710.CU-CUST-PROD-ID[1]; /* cust-prod id*/
  else
    if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
      OB0NM001.CU-CUST-PROD-ID = " "; /* cust-prod id*/
    else
      if (WCU1710.WCU1710-RETURN-CODE == 3) /* database busy*/
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        OB0NM001.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      else
        TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[2] = "OB0NS37 "; /* statement group*/
        TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
        TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
        TA1REC.TA1TYPE = "APPL"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        XSOBEDC();
      end
    end
  end


end // end OB0NS37

// EDIT PROD AGAINST PROD FILE
Function OB0NS38()

    /* EDIT PRODUCT ENTERED AGAINST THE PRODUCT FILE (sycrec)*/

  set SYCREC empty;
  set SQLCA empty;
  SYCREC.XGPCD = OB0NM001.XGPCD; /* GPC Code*/
  SYCREC.SY1STNBR = OB0NM001.SY1STNBR; /* Style number*/
  SYCREC.SY2CLRID = OB0NM001.SY2CLRID; /* Color code id*/
  SYCREC.XDMCD = OB0NM001.XDMCD; /* Dimension cd*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* CANADA 08/01/95*/
    /* Added call to SY2000 for any apparel gpc '03' order - 03/22/99*/
    /* kramse*/

    /* The check below will be replaced with a check against data*/
    /* distribution code once this field has been added to the database.*/

    if (OB1REC.XDZ-DATA-DIST-CD == "CA" /* Canadian order*/
     || SYCREC.XGPCD == "03")           /* GPC Code'03'*/

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "OB0N"; /* program name*/
      TA1REC.TA1LOC = "OB0NS38"; /* statement group name*/
      TA1REC.TA1MAP = "OB0NM001"; /* map name*/

      XSOB-CALL-SY2000(); /* call SY2000 to get*/
                                   /* product/region record*/

      if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
        OB0NW01.OB0NWSSN = SYCREC.SY1SSTNM; /* short style nbr*/
        OB0NW01.OB0NWSPC = " ";
        OB0NW01.OB0NWSCA = SYCREC.SY2CLRAB; /* style color abbr*/
        OB0NM001.SY2PRDES = OB0NW01.OB0NWPDS;
                                   /* formatted prod desc*/
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
          OB0NM001.SY2PRDES = "UNKNOWN PROD FOR RGN";
          OBWREC.OBWERRFL = "Y"; /* set error flag*/
          converseLib.validationFailed(192); /* style color not valid for rgn*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
            OBWREC.OBWERRFL = "Y"; /* set error flag*/
            OB0NM001.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
          else /* fatal DB2 error*/
            TA1LOCAT[1] = "S ";
            TA1LOCAT[2] = "SY2000";
            TA1LOCAT[3] = "OB0NS38";
            TA1LOCAT[4] = OB0NM001.SY1STNBR;
            TA1DBASE = "DPROD";
            TA1TBLVU = "VSYREG02";
            XSOBEDC();
          end
        end
      end
    else
      OB0NW01.OB0NWSSN = SYCREC.SY1SSTNM; /* short style number*/
      OB0NW01.OB0NWSPC = " ";
      OB0NW01.OB0NWSCA = SYCREC.SY2CLRAB; /* style color abbrev*/
      OB0NM001.SY2PRDES = OB0NW01.OB0NWPDS; /* formatted prod descrpt*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OB0NM001.SY2PRDES = "UNKNOWN";
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      converseLib.validationFailed(103); /* Style/color is not valid*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        OB0NM001.CAMSG = "DATABASE BUSY - PLEASE TRY AGAIN";
      else
        TA1LOCAT[1] = "S ";
        TA1LOCAT[2] = "IO0560";
        TA1LOCAT[3] = "OB0NS38";
        TA1LOCAT[4] = OB0NM001.SY1STNBR;
        TA1DBASE = "DPROD";
        TA1TBLVU = "VCOLOR02";
        XSOBEDC();
      end
    end
  end

   /* checks the need date with the product future begin and*/
   /* end dates.*/

  if (OB1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y" /* if a futures order*/
     && OB1REC.XGPCD == "03")                     /* apparel*/
   /* next sentence*/
    else
      return;
    end
  else
    return;
  end

  if (SYCREC.SY2FOFBD <= 0) /* if field is blank on database*/
    SYCREC.SY2FOFBD = 0;
  end

  if (SYCREC.SY2FOFXD <= 0) /* if field is blank on database*/
    SYCREC.SY2FOFXD = 99999999;
  end

  if (OB1REC.OP1CUNDT >= SYCREC.SY2FOFBD) /* need dt>= futr beg dt*/
    if (OB1REC.OP1CUNDT <= SYCREC.SY2FOFXD) /* need dt <=futr xdt*/
       /* next sentence--need date within range; ok to process*/
    else
      OBWREC.OBWERRFL = "Y";
      converseLib.validationFailed(243); /* product not offered for need dt*/
    end
  else
    OBWREC.OBWERRFL = "Y";
    converseLib.validationFailed(243); /* product not offered for need dt*/
  end


end // end OB0NS38

// EDIT PROD FOR BRAND RESTRICTIO
Function OB0NS3B()

    /* EDIT PRODUCT FOR BRAND RESTRICTIONS*/

     /* This routine checks if the brand code of the product to*/
     /* be added matches the brand code for the order.*/


     /* If the order has no products yet, then the brand code*/
     /* on the order will be set to the brand code of the first*/
     /* product added.*/

  if (OB0NW01.OB0NWPRD == "N" /* order does not have products yet*/
   || OB1REC.XBCCD == "  ")   /* all invalid products*/
    OB0NW01.OB0NWPRD = "N"; /* order does not have valid products*/
    return;
  end


     /* Brand code on the order header must match that of the*/
     /* product being added.*/

  if (OB1REC.XBCCD != SYCREC.XBCCD) /* Brands don't match*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(099); /* Prod brand does not match order's brand*/
  end


end // end OB0NS3B

// EDIT ENGR DIFF CODE
Function OB0NS3C()

    /* EDIT ENGINEERING DIFFERENCE CODE*/

  if (OB0NM001.XEGCD == " ") /* field is blank*/
    OB0NM001.XEGCD = "000"; /* move in default*/
  end

  if (OB0NM001.XEGCD in XEGTBL.XEGCD /* found in table*/
   && XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    OB0NM001.XEGABRV = XEGTBL.XEGABRV[sysVar.arrayIndex]; /* abbreviation*/
  else
    OB0NM001.XEGABRV = "UNKNWN"; /* abbreviation*/
    set OB0NM001.XEGCD cursor, bold; /* highlight field in error*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(104); /* Engr diff cd is invalid or inactive*/
  end


end // end OB0NS3C

// EDIT PACKAGE TYPE CODE
Function OB0NS3D()

    /* EDIT PACKAGE TYPE CODE*/

  if (OB0NM001.XPGCD == " ") /* field is blank*/
    OB0NM001.XPGCD = "00"; /* move in default*/
  end

  if (OB0NM001.XPGCD in XPGTBL.XPGCD /* found in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    OB0NM001.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex]; /* abbreviation*/
  else
    OB0NM001.XPGABRV = "UNKNWN"; /* abbreviation*/
    set OB0NM001.XPGCD cursor, bold; /* highlight field in error*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(006); /* Pkg type code is invalid or inactive*/
  end


end // end OB0NS3D

// EDIT INVENTORY SEGMENT CODE
Function OB0NS3E()

    /* EDIT INVENTORY SEGMENT CODE*/

  if (OB0NM001.PC2INSEG == " ") /* field is blanks*/
    OB0NM001.PC2INSEG = "000"; /* move in default value*/
  end


  set PC2REC empty;
  set SQLCA empty;
  PC2REC.XGPCD = OB0NM001.XGPCD; /* gpc code*/
  PC2REC.PC2INSEG = OB0NM001.PC2INSEG; /* segment code*/
  OB0NM001.PC2SEGAB = " "; /* init inseg abbrev on map*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OB0NM001.PC2SEGAB = PC2REC.PC2SEGAB; /* move abbreviation to map*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OB0NM001.PC2SEGAB = "UNKNWN"; /* move abbreviation to map*/
      set OB0NM001.PC2INSEG cursor, bold; /* highlight field in error*/
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      converseLib.validationFailed(007); /* Spec code is not valid*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        OB0NM001.CAMSG = "DATABASE BUSY -- PLEASE TRY AGAIN";
      else
        TA1LOCAT[1] = "SG";
        TA1LOCAT[2] = "IO3340";
        TA1LOCAT[3] = "OB0NS3E";
        TA1LOCAT[4] = OB0NM001.PC2INSEG;
        TA1DBASE = "DPRODC";
        TA1TBLVU = "VPRDCU01";
        XSOBEDC();
      end
    end
  end
end // end OB0NS3E

// EDIT UNIT OF MEASURE
Function OB0NS3F()

    /* EDIT UNIT OF MEASURE*/

  if (OB0NM001.XUMCD == " ") /* field is blank*/
    OB0NM001.XUMDESC = " "; /* blank-out description*/
    return;
  end

  if (OB0NM001.XUMCD in XUMTBL.XUMCD /* found in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    OB0NM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex]; /* description*/
  else
    OB0NM001.XUMDESC = "UNKNWN"; /* description*/
    set OB0NM001.XUMCD cursor, bold; /* highlight field in error*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(005); /* Unit of measure is invalid or*/
                                   /* inactive*/
  end


end // end OB0NS3F

// EDIT TOTAL ORDER QUANTITY
Function OB0NS3G()

    /* EDIT TOTAL ORDERED QUANTITY*/

   /* F OB0NM001.XSZCD NE ' ';         /* std size dist is present*/
   /* IF OB0NM001.OP2TORGQ GT 0;      /* quantity field was filled*/
     /* ;*/
     /* ; /* Okay. Qty is required if STD SZ DIST is used*/
     /* ;*/
   /* ELSE;                           /* quantity field was not filled*/
     /* SET OB0NM001.OP2TORGQ CURSOR,BRIGHT; /* highlight field in error*/
     /* MOVE 'Y' TO OBWREC.OBWERRFL;    /* set error flag*/
     /* MOVE 105 TO EZEMNO; /* Total quantity is required for std sz dist*/
   /* END;*/
   /* LSE;                             /* std size dist is not used*/
   /* ;*/
   /* ; /* no std dist so ignore any value of quantity*/
   /* ;*/
   /* ND;*/


end // end OB0NS3G

// EDIT STANDARD SIZE DISTRIBUTIO
Function OB0NS3H()

    /* EDIT STANDARD SIZE DISTRIBUTION CODE*/

   /* F OB0NM001.XSZCD EQ ' ';         /* code is blanks*/
   /* EZERTN;               /* return because it is not a required field*/
   /* ND;*/


   /* F OB1REC.XGPCD = '02';                  /* gpc = footwear*/
   /* OB0NS-EDIT-MSR;                        /* edit musical size run*/
   /* LSE;*/
   /* IF OB0NM001.XSZCD IN XSZTBL.XSZCD        /* found in table*/
     /* AND XSZTBL.XXXSTAT(EZETST) EQ 'A';     /* and active*/
     /* ;*/
     /* ;  /* The number of valid sizes was determined during the edits.*/
     /* ;  /* It was stored in OB0NWNVS and will be used here to check*/
     /* ;  /* if it matches the number of sizes for the std-sz-dist-cd.*/
     /* ;*/
     /* IF XSZTBL.XSZNBRSZ(EZETST) NE OB0NW01.OB0NWNVS;*/
       /* SET OB0NM001.XSZCD CURSOR,BRIGHT;    /* highlight field in error*/
       /* MOVE 'Y' TO OBWREC.OBWERRFL;         /* set error flag*/
       /* MOVE 108 TO EZEMNO;*/
                                  /* Std sz dist cd invalid for prod sizes*/
     /* END;*/
     /* ;*/
   /* ELSE;*/
     /* SET OB0NM001.XSZCD CURSOR,BRIGHT;      /* highlight field in error*/
     /* MOVE 'Y' TO OBWREC.OBWERRFL;           /* set error flag*/
     /* MOVE 107 TO EZEMNO;*/
                                  /* Std sz dist cd is invalid or inactive*/
   /* END;*/
   /* ND;*/


end // end OB0NS3H

// EDIT DUP NIKE ORDER ID
Function OB0NS3I()

    /* EDIT NIKE ORDER ID TO DUPLICATE*/

     /* This field is required if the cust-ord-id to*/
     /* duplicate is used.*/

  if (OB0NM001.OP1CUOID > 0 /* cust-ord-id is entered*/
   && OB0NM001.OP1NORID == 0) /* nike-ord-id not entered*/
    set OB0NM001.OP1NORID cursor, bold; /* highlight field in error*/
    OBWREC.OBWERRFL = "Y"; /* set error flag*/
    converseLib.validationFailed(109); /* Nike Order Id required for size/qty*/
                                   /* duplication*/
  else
    OB0NS3K(); /* edit dup from prod id*/
  end


end // end OB0NS3I

// EDIT DUP PRODUCT ID
Function OB0NS3K()

    /* EDIT DUPLICATE-FROM PRODUCT ID*/


  if (OB0NM001.OB0NMDSY == " ") /* dup from style not entered*/
   /* *TCS INCLUDE BEGIN  01/28/98*/
    OBDUREC.OBWDUPL = "N";
   /* *TCS INCLUDE END    01/28/98*/
    return; /* skip further edits*/
  end

    /* Check if both std-sz-dist and dup-prod-sz/qty were used*/

   /* F OB0NM001.OB0NMDSY NE ' '       /* dup from style entered*/
   /* AND OB0NM001.XSZCD NE ' ';      /* std sz dist cd entered*/
   /* SET OB0NM001.OB0NMDSY CURSOR,BRIGHT;   /* highlight field in error*/
   /* SET OB0NM001.XSZCD BRIGHT;      /* highlight field in error*/
   /* MOVE 'Y' TO OBWREC.OBWERRFL;    /* set error flag*/
                                  /* MOVE 111 TO EZEMNO;            /**/
                                   /* Can't dup sz/qty and use std sz dist*/
                                  /* at same time*/
   /* EZERTN;                         /* skip further edits*/
   /* ND;*/

    /* Move default value if not entered for color and dim*/

  if (OB0NM001.OB0NMDCL == " " /* dup from color not entered*/
   && OB0NM001.XGPCD != "03")  /* and gpc is not apparel*/
    OB0NM001.OB0NMDCL = "00"; /* move default value to color*/
  end

  if (OB0NM001.OB0NMDDM == " ") /* dup from dim not entered*/
    OB0NM001.OB0NMDDM = "00"; /* move default value to dim*/
  end

    /* Move default value if not entered for dup-from order id's*/

  if (OB0NM001.OP1CUOID == 0 /* dup from cust-ord-id not entered*/
   && OB0NM001.OP1NORID == 0) /* dup from nike-ord-id not entered*/
    OB0NM001.OP1NORID = OB1REC.OP1NORID; /* put default from current*/
  end

  if (OB0NM001.OP1CUOID == 0) /* dup from cust-ord-id not entered*/
    OB0NM001.OP1CUOID = OB1REC.OP1CUOID; /* put default from current*/
  end

    /* Find the product/item record to copy size/qty from*/

  set OBKREC empty;
  set OB2REC empty;
  set SQLCA empty;

  OB2REC.OP1CUOID = OB0NM001.OP1CUOID; /* dup from cust ord id*/
  OB0NW01.OB0NWORD = OB0NM001.OP1CUOID;
  OB2REC.OP1PARTN = OB0NW01.OP1PARTN; /* dup from part char*/
  OB2REC.OP1NORID = OB0NM001.OP1NORID; /* dup from nike ord id*/

  OB2REC.SY1STNBR = OB0NM001.OB0NMDSY; /* dup from style*/
  OB2REC.SY2CLRID = OB0NM001.OB0NMDCL; /* dup from color*/
  OB2REC.XDMCD = OB0NM001.OB0NMDDM; /* dup from dim*/
  OB2REC.XGPCD = "*"; /* dup from gpc code*/

  OBKREC.OBKTASK = "E2"; /* look for first prod in item*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OBKREC.OBKIND1 < 0) /* sql ind found error for e2 request*/
      set OB0NM001.OB0NMDSY cursor, bold; /* highlight field in error*/
      set OB0NM001.OB0NMDCL bold;
      set OB0NM001.OB0NMDDM bold;
      set OB0NM001.OP1CUOID bold;
      set OB0NM001.OP1NORID bold;
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      converseLib.validationFailed(110); /* Product to dup does not exist*/
    else /* E2 request was successful*/
      OB0NSSR(); /* get and save size records*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no record found*/
      set OB0NM001.OB0NMDSY cursor, bold; /* highlight field in error*/
      set OB0NM001.OB0NMDCL bold;
      set OB0NM001.OB0NMDDM bold;
      set OB0NM001.OP1CUOID bold;
      set OB0NM001.OP1NORID bold;
      OBWREC.OBWERRFL = "Y"; /* set error flag*/
      converseLib.validationFailed(110); /* Product to dup does not exist*/
    else
      TA1LOCAT[1] = "E2";
      TA1LOCAT[2] = "IO5170";
      TA1LOCAT[3] = "OB0NS3K";
      TA1LOCAT[4] = OB0NM001.OB0NMDSY; /* style to dup*/
      TA1DBASE = "DORDB";
      TA1TBLVU = "VBITEM01";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end
end // end OB0NS3K

// SET FIELD ATTRIBUTES
Function OB0NS40()

    /* SET FIELD ATTRIBUTES*/

  set OB0NM001.SY1STNBR cursor, initialAttributes; /* style number*/
  set OB0NM001.SY2CLRID initialAttributes; /* color code id*/
  set OB0NM001.XDMCD initialAttributes; /* dimension code*/
  set OB0NM001.OB0NMDSY initialAttributes; /* dup from style nbr*/
  set OB0NM001.OB0NMDCL initialAttributes; /* dup from color id*/
  set OB0NM001.OB0NMDDM initialAttributes; /* dup from dimension*/
  set OB0NM001.OP1CUOID initialAttributes; /* dup from cust ord id*/
  set OB0NM001.OP1NORID initialAttributes; /* dup from nike ord id*/
   /* ET OB0NM001.XSZCD DEFINED;      /* std size dist code*/
   /* ET OB0NM001.OP2TORGQ DEFINED;   /* total order quantity*/
  set OB0NM001.XQACD initialAttributes; /* quality code*/
  set OB0NM001.XLCCD initialAttributes; /* quality code*/
  set OB0NM001.PC2INSEG initialAttributes; /* inventory segment cd*/
  set OB0NM001.XPGCD initialAttributes; /* package type code*/
  set OB0NM001.XEGCD initialAttributes; /* engineering difference*/

                                  /* SET GPC CODE Attribute*/

  if (OB0NW01.OB0NWPRD == "N" /* no products exist on the order*/
   && OB1REC.XGPCD == " ")    /* and order has no gpc code*/
    set OB0NM001.XGPCD cursor, normal; /* GPC cd is required for 1st prod*/
  else
    set OB0NM001.XGPCD initialAttributes; /* map definition is autoskip*/
  end

                                  /* SET CUSTOMER STYLE Attr*/

  if (KUCREC.CU-PRT-XREF-FL == "Y")
    if (KUCREC.KUCSKIND == "P"
     || KUCREC.KUCSKIND == "C"
     || KUCREC.KUCSKIND == "R"
     || KUCREC.KUCSKIND == "G")
      set OB0NM001.OB0NMCSL initialAttributes; /* cust-prod-id literal*/
      set OB0NM001.CU-CUST-PROD-ID initialAttributes; /* cust-prod-id*/
    else
      set OB0NM001.OB0NMCSL skip, invisible; /* cust-prod-id literal*/
      set OB0NM001.CU-CUST-PROD-ID skip, invisible; /* cust-prod-id*/
    end
  else
    set OB0NM001.OB0NMCSL skip, invisible; /* cust-prod-id literal*/
    set OB0NM001.CU-CUST-PROD-ID skip, invisible; /* cust-prod-id*/
  end

                                  /* SET UNIT OF MEASURE Attr*/

     /* if the order type does not allow non-standard unit*/
     /* of measure, cannot change unit of measure.  set it*/
     /* to dark and autoskip*/

  if (OB1REC.XOTCD in XOTTBL.XOTCD /* find active order type record*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XOTTBL.XOTANSUM[sysVar.arrayIndex] == "Y") /* allow non std uom*/
      set OB0NM001.OB0NMUML initialAttributes; /* unit of measure literal*/
      set OB0NM001.XUMCD initialAttributes; /* unit of measure code*/
      OB0NM001.OB0NMUML = "NON-STD UOM:";
    else
      set OB0NM001.OB0NMUML skip, invisible; /* unit of measure literal*/
      set OB0NM001.XUMCD skip, invisible; /* unit of measure code*/
    end
  else
    set OB0NM001.OB0NMUML skip, invisible; /* unit of measure literal*/
    set OB0NM001.XUMCD skip, invisible; /* unit of measure code*/
  end

     /* if the order is a draw, cannot change unit of measure*/

  if (OB0NW01.OB0NWDRW == "Y") /* order is a draw*/
    set OB0NM001.OB0NMUML skip, invisible; /* unit of measure literal*/
    set OB0NM001.XUMCD skip, invisible; /* unit of measure code*/
  end

   /* handling codes and labels*/

  set OB0NM001.XHDCD[1] initialAttributes;
  set OB0NM001.XHDABRV[1] initialAttributes;
  set OB0NM001.XHDCHG[1] initialAttributes;
  set OB0NM001.OP2HCHGO[1] initialAttributes;
  set OB0NM001.XHDCD[2] initialAttributes;
  set OB0NM001.XHDABRV[2] initialAttributes;
  set OB0NM001.XHDCHG[2] initialAttributes;
  set OB0NM001.OP2HCHGO[2] initialAttributes;
  set OB0NM001.XHDCD[3] initialAttributes;
  set OB0NM001.XHDABRV[3] initialAttributes;
  set OB0NM001.XHDCHG[3] initialAttributes;
  set OB0NM001.OP2HCHGO[3] initialAttributes;
  set OB0NM001.XHDCD[4] initialAttributes;
  set OB0NM001.XHDABRV[4] initialAttributes;
  set OB0NM001.XHDCHG[4] initialAttributes;
  set OB0NM001.OP2HCHGO[4] initialAttributes;
  set OB0NM001.XHDCD[5] initialAttributes;
  set OB0NM001.XHDABRV[5] initialAttributes;
  set OB0NM001.XHDCHG[5] initialAttributes;
  set OB0NM001.OP2HCHGO[5] initialAttributes;
  set OB0NM001.PWRLBCD[1] initialAttributes;
  set OB0NM001.PWRLBCD[2] initialAttributes;
  set OB0NM001.PWRLBABR[1] initialAttributes;
  set OB0NM001.PWRLBABR[2] initialAttributes;



end // end OB0NS40

// UPDATE
Function OB0NS50()

    /* UPDATE*/

  OB0NS51(); /* set up item fields (ob3rec)*/

  OB0NS53(); /* set up size fields (ob3rec)*/

  OB0NS57(); /* update ob3rec*/

  OB0NS60(); /* update ob1rec*/

  OB0NS70(); /* update temp sto*/

end // end OB0NS50

// SET-UP ITEM FIELDS IN OB3REC
Function OB0NS51()

    /* SET UP ITEM FIELDS IN OB3REC*/

  /* TCS INCLUDE BEGIN 01/28/1998*/
  if (OBDUREC.OBWDUPL == "N")
    set OB3REC empty;
  end
  /* TCS INCLUDE 01/28/1998*/
  OB3REC.OP1PARTN = OB1REC.OP1PARTN; /* ORD PART CHAR*/
  OB3REC.OP1CUOID = OB1REC.OP1CUOID; /* CUST ORD ID*/
  OB3REC.OP1NORID = OB1REC.OP1NORID; /* NIKE ORD ID*/

  OB0NS52(); /* GET NEXT LINE ITEM NUMBER*/

  OB3REC.OP2LNINB = OBKREC.OBKMAX; /* LINE ITEM NUMBER*/
  OB3REC.OP2CPLNB = OBKREC.OBKMAX; /* cust po line item nbr*/
  OB3REC.XGPCD = OB0NM001.XGPCD; /* GPC CODE*/
  OB3REC.SY1STNBR = OB0NM001.SY1STNBR; /* STYLE NUMBER*/
  OB3REC.SY2CLRID = OB0NM001.SY2CLRID; /* COLOR CODE ID*/
  OB3REC.XDMCD = OB0NM001.XDMCD; /* DIMENSION CODE*/
  OB3REC.CU-CUST-PROD-ID = OB0NM001.CU-CUST-PROD-ID;
  OB3REC.XOWCD = "00"; /* OWNER GROUP CODE*/
  OB3REC.OP2TDRWQ = 0; /* DRAWN QUANTITY*/
  OB3REC.OP2CGPCD = " "; /* COORDINATE GROUP CODE*/
  OB3REC.XEGCD = OB0NM001.XEGCD; /* ENGR DIFF CODE*/
  OB3REC.PC2INSEG = OB0NM001.PC2INSEG; /* INVENTORY SEGMENT*/
  OB3REC.XPGCD = OB0NM001.XPGCD; /* PACKAGE TYPE CODE*/
  OB3REC.OP2MSCDP = 0.00; /* MAX SCALEDOWN PERCENT*/
  OB3REC.XQACD = OB0NM001.XQACD; /* QUALITY CODE*/
  OB3REC.XBRCD = " "; /* BACKORDER REASON CODE*/
  if (OB0NM001.XGPCD == "03") /* only pre-set flag for apparel*/
    OB3REC.OB-PART-AVAL-FL = "Y"; /* partial avail fl*/
  else
    OB3REC.OB-PART-AVAL-FL = "N"; /* partial avail fl*/
  end
  OB3REC.OP2PRCOF = "N"; /* PRICE OVERRIDE FLAG*/

  OB3REC.XHDCD[1] = OB0NM001.XHDCD[1]; /* HANDLING CODE 1*/
  OB3REC.XHDCD[2] = OB0NM001.XHDCD[2]; /* HANDLING CODE 2*/
  OB3REC.XHDCD[3] = OB0NM001.XHDCD[3]; /* HANDLING CODE 3*/
  OB3REC.XHDCD[4] = OB0NM001.XHDCD[4]; /* HANDLING CODE 4*/
  OB3REC.XHDCD[5] = OB0NM001.XHDCD[5]; /* HANDLING CODE 5*/
   /* TT#4752 BSSA GPC02 CHANGE Begin *****************/
  OB3REC.PWRLBCD[1] = OB0NM001.PWRLBCD[1]; /* LABEL CODE 1*/
  OB3REC.PWRLBCD[2] = OB0NM001.PWRLBCD[2]; /* LABEL CODE 2*/
   /* TT#4752 BSSA GPC02 CHANGE Begin *****************/
  OB3REC.XHDCHG[1] = OB0NM001.XHDCHG[1]; /* HANDLING Charge 1*/
  OB3REC.XHDCHG[2] = OB0NM001.XHDCHG[2]; /* HANDLING Charge 2*/
  OB3REC.XHDCHG[3] = OB0NM001.XHDCHG[3]; /* HANDLING Charge 3*/
  OB3REC.XHDCHG[4] = OB0NM001.XHDCHG[4]; /* HANDLING Charge 4*/
  OB3REC.XHDCHG[5] = OB0NM001.XHDCHG[5]; /* HANDLING Charge 5*/

  if (OB0NM001.OP2HCHGO[1] == "*")
    OB3REC.OP2HCHGO[1] = "Y"; /* HANDLING Charge OVRD 1*/
  else
    OB3REC.OP2HCHGO[1] = "N";
  end

  if (OB0NM001.OP2HCHGO[2] == "*")
    OB3REC.OP2HCHGO[2] = "Y"; /* HANDLING CHARGE OVRD 1*/
  else
    OB3REC.OP2HCHGO[2] = "N";
  end

  if (OB0NM001.OP2HCHGO[3] == "*")
    OB3REC.OP2HCHGO[3] = "Y"; /* HANDLING CHARGE OVRD 1*/
  else
    OB3REC.OP2HCHGO[3] = "N";
  end

  if (OB0NM001.OP2HCHGO[4] == "*")
    OB3REC.OP2HCHGO[4] = "Y"; /* HANDLING CHARGE OVRD 1*/
  else
    OB3REC.OP2HCHGO[4] = "N";
  end

  if (OB0NM001.OP2HCHGO[5] == "*")
    OB3REC.OP2HCHGO[5] = "Y"; /* HANDLING CHARGE OVRD 1*/
  else
    OB3REC.OP2HCHGO[5] = "N";
  end

  OB3REC.ZZZSDT = OBWREC.ZZZCHGDT; /* SETUP DATE*/
  OB3REC.ZZZSTM = OBWREC.ZZZCHGTM; /* SETUP TIME*/
  OB3REC.ZZZCHGDT = OBWREC.ZZZCHGDT; /* CHANGE DATE*/
  OB3REC.ZZZCHGTM = OBWREC.ZZZCHGTM; /* CHANGE TIME*/

                                  /* UNIT OF MEASURE*/
  if (OB0NW01.OB0NWDRW == "Y") /* a draw order*/
    OB3REC.XUMCD = OP2REC.XUMCD; /* use uom of bulk*/
  else /* not a draw order*/
    if (OB0NM001.XUMCD != " ") /* uom was entered*/
      OB3REC.XUMCD = OB0NM001.XUMCD; /* use uom on map*/
    else /* uom was not entered on map*/
      OB3REC.XUMCD = SYCREC.XUMCD; /* use prod default*/
    end
  end

                                  /* BULK ORD ID*/
  if (OB0NW01.OB0NWDRW == "Y") /* a draw order*/
    OB3REC.OPRBNOID = OP2REC.OP1NORID; /* use bulk's nike ord id*/
  else /* not a draw order*/
    OB3REC.OPRBNOID = 0; /* move zeros*/
  end

                                  /* BACKORDER FLAG*/
  if (SYCREC.SY2BOSWI == "N" /* prod BO flag is N*/
   && OB1REC.ZZZSDT > SYCREC.SY2BOEDT) /* prod BO effect date*/
    OB3REC.OP1BOFL = "N"; /* set BO flag to N*/
  else /* prod BO no longer applies*/
    OB3REC.OP1BOFL = OB1REC.OP1BOFL; /* use order's BO flag*/
  end


end // end OB0NS51

// GET NEXT LINE NUMBER TO USE
Function OB0NS52()

    /* GET NEXT AVAILABLE LINE NUMBER TO USE FOR THE NEW ITEM*/

  set OB2REC empty;
  set OBKREC empty;
  set SQLCA empty;

  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* ord part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* cust ord id*/
  OB2REC.OP1NORID = -1; /* nike ord id*/
  OBKREC.OBKTASK = "MC"; /* max counts, etc.*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OBKREC.OBKMAX = OBKREC.OBKMAX + 1;
  else
    TA1LOCAT[1] = "MC      ";
    TA1LOCAT[2] = "IO5170  ";
    TA1LOCAT[3] = "OB0NS52 ";
    TA1LOCAT[4] = "        ";
    TA1DBASE = "DORDB   ";
    TA1TBLVU = "VBITEM01";
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end


end // end OB0NS52

// SET-UP SIZE FIELDS IN OB3REC
Function OB0NS53()

    /* SET UP THE SIZE FIELDS IN OB3REC*/

      /* Note that the size fields were initialized into zeros*/
      /* and spaces when OB3REC was set empty in OB0NS51.*/
      /* These will have values if the sizes were DUPED*/
      /* from another product ordered or a standard size*/
      /* distribution was specified; otherwise, they will*/
      /* will be left initialized and the item-size formatter*/
      /* will take care of the size records.*/

  if (OB0NM001.OB0NMDSY != " ") /* a prod to dup was entered*/
    OB0NS54(); /* copy sizes/qty from saved order*/
  end

   /* F OB0NM001.XSZCD NE ' ';         /* a std sz dist cd was entered*/
   /* IF OB1REC.XGPCD = '02';         /* gpc = footwear*/
     /* OB0NS-MSR-QTYS;               /* distribute qtys via op2830*/
   /* ELSE;*/
                                  /* OB0NS55;                      /* calc*/
                                   /* sizes/qty from std sz dist cd*/
   /* END;*/
   /* ND;*/


end // end OB0NS53

// COPY SIZES FROM SAVED DUP-PROD
Function OB0NS54()

    /* COPY SIZES FROM THE SAVED PRODUCT ORDERED TO DUPLICATE*/

      /* Note that the prices will be determined by the batch*/
      /* edit program.*/

  OB0NW01.OB0NWSUB = 1; /* initialize subscript*/

  while (OB0NWSUB <= 40)
    if (OB0NW01.OP3SZAFL[OB0NWSUB] == "Y")
                                   /* size was active for dup prod*/
      OB3REC.OP3SZAFL[OB0NWSUB] = "Y"; /* set size active*/
      OB3REC.OP3PRCOF[OB0NWSUB] = "N"; /* set price ovrd fl to N*/
                                   /* copy ordered qty*/
      OB3REC.OP3ONOQT[OB0NWSUB] = OB0NW01.OP3ONOQT[OB0NWSUB];
    end
    OB0NWSUB = OB0NWSUB + 1; /* increment subscript*/
  end


end // end OB0NS54

// UPDATE OB3REC (ITEM/SIZE)
Function OB0NS57()

    /* UPDATE OB3REC -- Formatted ITEM and SIZE Record*/

  set OBSFREC empty; /* request type*/

  OBSFREC.OBSF-TASK = "A "; /* request for an insert*/
  OBSFREC.OBSF-CALLER-LOC-1 = "A       "; /* io task*/
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  "; /* io mod*/
  OBSFREC.OBSF-CALLER-LOC-3 = "OB0NS57 "; /* calling stmt grp*/
  OBSFREC.OBSF-CALLING-APPL = "OB0N";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes}; /* call io mod for insert*/

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0
   || OBSFREC.OBSF-RETURN-CD == 11
  ) /* continue processing*/
  else
    TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
    TA1LOCAT[1] = "A ";
    TA1LOCAT[2] = "OB1690";
    TA1LOCAT[3] = "OB0NS57";
    TA1LOCAT[4] = OBSFREC.OBSF-TASK;
    TA1DBASE = "DORDB";
    TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
    if (OBSFREC.OBSF-RETURN-CD == 14) /* got a -911 deadlock on item*/
      TA1TBLVU = "VBITEM01";
      XSOBS05();
    else
      if (OBSFREC.OBSF-RETURN-CD == 15) /* got a -911 deadlock on sizes*/
        TA1TBLVU = "VBSIZE01";
        XSOBS05();
      else
        XSOBEDR();
      end
    end
  end


end // end OB0NS57

// UPDATE ORDER HEADER (OB1REC)
Function OB0NS60()

    /* UPDATE ORDER HEADER (OB1REC)*/

        /* Note that OB1REC had been previously read.  This*/
        /* routine will just move in values to changed fields*/
        /* and update.  The keys and other information are*/
        /* still intact in  OB1REC.*/

     /* use only the first occurance of product category (xpccd)*/
     /* The second occurance is a historical code, used only by*/
     /* sales analysis.*/

  if (OB0NW01.OB0NWPRD == "N") /* this is the first product added*/
    OB1REC.XGPCD = OB0NM001.XGPCD; /* use prod's gpc for order*/
    OB1REC.XBCCD = SYCREC.XBCCD; /* use prod's brand for order*/
    OB1REC.XDVCD = SYCREC.XDVCD1; /* use prod's division code*/
    OB1REC.XPCCD = SYCREC.XPCCD; /* product category*/
    OB0NS61(); /* get system order type*/
  end


  if (OB3REC.OP2TONOQ > 0) /* there are units on added product*/
    OB1REC.OP1OTUNT = OB1REC.OP1OTUNT + OB3REC.OP2TONOQ;
                                  /* add units to hdr*/
  end

  OB1REC.YOBCD = "NC";

  set SQLCA empty;
  OBFREC.OBFTASK = "U ";
  set VBULKS02 empty;

  call "IO5160" (OBFREC, SQLCA, OB1REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod -- update*/

   /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/

    /* ******TCS INCLUDE BEGIN************/

    VBULKS02.OP1PARTN = OB1REC.OP1PARTN;
    VBULKS02.OP1CUOID = OB1REC.OP1CUOID;
    VBULKS02.OP1NORID = OB1REC.OP1NORID;
    OB0NS-CHECK-VBULK();

    /* ******TCS INCLUDE END**************/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* order # not found*/
      OBWREC.CAMSG = "ORDER HEADER HAS BEEN MODIFIED BY ANOTHER SERVICE REP";

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback*/
      XSOBP00(); /* restart application*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VOBHDR01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "U       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO5160  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB0NS60 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "        ";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS05(); /* rollback and restart*/
      else
        XSOBEDR(); /* abort routine - reset*/
      end
    end
  end

end // end OB0NS60

// get system ord type via xvotbl
Function OB0NS61()


   /* ----------------------------------------------------------*/
   /* equipment check*/
   /* ----------------------------------------------------------*/

  OPWREC01.XPCCK = "  ";

  OB0NS-CHECK-EQMT(); /* call to eu0100*/
  if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y")
    OPWREC01.XPCCK = WEU0100.XPCCD;
  else
    OPWREC01.XPCCK = "  ";
  end


  OB0NW01.OB0NWOTF = "N"; /* reset flag*/
  OB1REC.XOTCD = " ";
  sysVar.arrayIndex = 1;

   /* ****** TCS INCLUDE BEGIN***********/

  set VXVO0001 empty;
  set SQLCA empty;
  VXVO0001.XOBCD = OB1REC.XOBCD; /* valid base order type*/
  VXVO0001.XGPCD = OB1REC.XGPCD; /* valid gpc code*/
  VXVO0001.XSOCD = OB1REC.XSOCD; /* valid salesoffice code*/
  VXVO0001.XDVCD = OB1REC.XDVCD; /* valid division code*/
  VXVO0001.XBCCD = OB1REC.XBCCD; /* valid brand code*/
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK; /* valid category code*/
  VXVO0001.XXXSTAT = "A"; /* active status*/

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/


  if (SQLCA.VAGen_SQLCODE != 0) /* invalid open*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OB0NS61";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOBEDC();
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (VXVO0001.XOTCD != OB1REC.XOTCD)
        OB1REC.XOTCD = VXVO0001.XOTCD;
      end
      OB0NW01.OB0NWOTF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OB0NS61";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        XSOBEDC();
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* invalid close*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OB0NS61";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOBEDC();
  end


   /* **********TCS INCLUDE END***********/

end // end OB0NS61

// UPDATE TEMP STORAGE
Function OB0NS70()

    /* UPDATE TEMPORARY STORAGE*/

   /* Read Temp Storage*/

  OBWREC.OBWTSF4P = OBWREC.OBWTSF4M; /* get last page*/

  XSOBT4R();

   /* Find available slot in last page for added item record*/

  OBWREC.OBWTSF4S = 1; /* init subscript*/
  while (OBWTSF4S <= 10 /* still within the page*/
   && OBDREC.SY1STNBR[OBWTSF4S] != " ") /* slot not vacant*/
    OBWTSF4S = OBWTSF4S + 1; /* increment subscript*/
  end

   /* Depending on the results of the above routine, either*/
   /* Add a new temp storage record or update the existing*/
   /* 'last page' record.  Unless the page is full, the*/
   /* subscript will point to the vacant slot.*/

  if (OBWTSF4S == 11) /* need to add new page*/
    set OBDREC empty; /* clear for new page*/
    OBWREC.OBWTSF4S = 1; /* set subscript to first line*/
    OB0NS71(); /* set-up item in temp storage*/
    XSOBT4W(); /* add temp storage record*/
    OBWREC.OBWTSF4P = OBWREC.OBWTSF4M; /* reset current page*/
  else /* vacant slot found on same page*/
    OB0NS71(); /* set-up item in temp storage*/
    XSOBT4U(); /* update temp storage record*/
     /* current page is last page*/
  end

   /* Update the line item number in OBWREC*/

  OBWREC.OBWLNINB = OB3REC.OP2LNINB;

     /* update temp storage for selected order*/

  XSOBT1R(); /* read temp storage*/

  OBAREC.OBAMSEL[OBWTSF1S] = "U"; /* selected order*/

  XSOBT1U(); /* update temp storage*/

end // end OB0NS70

// SETUP ITEM IN TEMP STORAGE
Function OB0NS71()

    /* SETUP ITEM IN TEMP STORAGE*/

  OBDREC.OBDMSEL[OBWTSF4S] = "U"; /* select option*/
  OBDREC.OP2LNINB[OBWTSF4S] = OB3REC.OP2LNINB; /* line item nbr*/
  OBDREC.SY1STNBR[OBWTSF4S] = OB3REC.SY1STNBR; /* style nbr*/
  OBDREC.OBDPER1[OBWTSF4S] = "-";
  OBDREC.SY2CLRID[OBWTSF4S] = OB3REC.SY2CLRID; /* color code id*/
  OBDREC.OBDPER2[OBWTSF4S] = "-";
  OBDREC.XDMCD[OBWTSF4S] = OB3REC.XDMCD; /* dimension code*/
  OBDREC.OBDPRDNM[OBWTSF4S] = SYCREC.SY1SSTNM; /* style name*/
  OBDREC.SY2CLRAB[OBWTSF4S] = SYCREC.SY2CLRAB; /* color abbrev*/
  OBDREC.OP2TONOQ[OBWTSF4S] = OB3REC.OP2TONOQ; /* order quantity*/
  OBDREC.OP2AUPRC[OBWTSF4S] = OB3REC.OP2AUPRC; /* ave unit price*/
  OBDREC.OB1ERRFL[OBWTSF4S] = "N"; /* ob error flag*/
  OBDREC.OBDFILL[OBWTSF4S] = "/";
  OBDREC.OB1HLDFL[OBWTSF4S] = "N"; /* ob hold flag*/
  OBDREC.OP2CGPCD[OBWTSF4S] = OB3REC.OP2CGPCD; /* coordinate grp cd*/


end // end OB0NS71

// CUSTOMER STYLE CODES ALLOWED?
Function OB0NSCU()

    /* get company record to determine if customer style*/
    /* numbers will be allowed to be entered on the map*/

  set KUCREC empty;
  set SQLCA empty;
  KUCREC.KUCCOID = OB1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* presence of a 'P' or 'C' in KUCREC will indicate*/
     /* if customer style id's will be allowed to be*/
     /* entered on the map*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
       /* kucrec will still be empty and kucskind will be blanks*/
    else
      TA1LOCAT[1] = "S ";
      TA1LOCAT[2] = "IO0240";
      TA1LOCAT[3] = "OB0NSCU";
      TA1LOCAT[4] = " ";
      TA1DBASE = "DCUST";
      TA1TBLVU = "VCMPNY01";
      if (SQLCA.VAGen_SQLCODE == -911)
        XSOBS04();
      else
        XSOBEDC();
      end
    end
  end
end // end OB0NSCU

// ORDER IS A DRAW?
Function OB0NSDR()

     /* IS ORDER A DRAW?  set a flag (this is done only once)*/

  if (OB1REC.XBDCD in XBDTBL.XBDCD /* find active bulk code record*/
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* bulk code is for a draw*/
      OB0NW01.OB0NWDRW = "Y";
    else
      OB0NW01.OB0NWDRW = "N";
    end
  else
    OB0NW01.OB0NWDRW = "N";
  end

end // end OB0NSDR

// ORDER HAS PRODUCTS?
Function OB0NSGP()

    /* determine if the order has products*/

  set OBKREC empty;
  set OB2REC empty;
  set SQLCA empty;
  OB2REC.OP1PARTN = OB1REC.OP1PARTN; /* part char*/
  OB2REC.OP1CUOID = OB1REC.OP1CUOID; /* cust ord id*/
  OB2REC.OP1NORID = OB1REC.OP1NORID; /* nike ord id*/
  OBKREC.OBKTASK = "MC";
                                   /* request for special processing*/

  call "IO5170" (OBKREC, SQLCA, OB2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)

     /* a zero value in obkrec.obkcount means that this*/
     /* order has no products*/

    if (OBKREC.OBKCOUNT == 0)
      OB0NW01.OB0NWPRD = "N"; /* there are no products on the order*/
    else
      OB0NW01.OB0NWPRD = "Y"; /* there  are  products  on the order*/
    end
  else
    TA1LOCAT[1] = "MC";
    TA1LOCAT[2] = "IO5170";
    TA1LOCAT[3] = "OB0NSGP";
    TA1LOCAT[4] = " ";
    TA1DBASE = "DORDB";
    TA1TBLVU = "VBITEM01";
    if (SQLCA.VAGen_SQLCODE == -911)
      XSOBS04();
    else
      XSOBEDC();
    end
  end

   /* just in case there were products and they are invalid*/
   /* check the division and brand if one of them is spaces*/
   /* then there are no 'valid' products, so set the flag to 'n'*/
   /* so the division and brand are set.*/

  if (OB1REC.XDVCD == "  "
   || OB1REC.XBCCD == "  ")
    OB1REC.XDVCD = SYCREC.XDVCD1;
    OB1REC.XBCCD = SYCREC.XBCCD;
  end
end // end OB0NSGP

// Edit pfkeys for OB0N
Function OB0NSPF()

  COMMAREA.CAUSERA = OBWREC.OBWGROUP;


  if (converseVar.eventKey is pf1)
    XSOBP01();
    OB0NM001.CAMSG = OBWREC.OBWHELP; /* redisplay if no help*/
  end

  if (converseVar.eventKey is pf3)
    XSOBP03();
  end

  if (converseVar.eventKey is pf4)
    XSOBP04();
  end

  if (converseVar.eventKey is pf6)
    XSOBP06();
  end

  if (converseVar.eventKey is pf13)
    XSOBP13();
  end

  if (converseVar.eventKey is pf14)
    XSOBP14();
  end

  if (converseVar.eventKey is pf15)
    XSOBP15();
  end

  if (converseVar.eventKey is pf16)
    XSOBP16();
  end

  if (converseVar.eventKey is pf17)
    XSOBP17();
  end

  if (converseVar.eventKey is pf18)
    XSOBP18();
  end

  if (converseVar.eventKey is pf19)
    XSOBP19();
  end



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1)
     /* next sentence*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OBWREC.OBWERRFL = "Y"; /* set 'OB' error flag*/
  end


  if (converseVar.eventKey is enter /* ENTER key was pressed*/
   && OBWREC.OBWERRFL == "N")       /* no errors*/
    if (OB0NW01.OB0NWENT == "N") /* no product entered on screen*/
      XSOBP09(); /* go to the product summary screen*/
    else /* product was entered*/
      XSOBP10(); /* go to the prod avail screen*/
    end
  end


end // end OB0NSPF

// GET AND SAVE SIZE RECORDS
Function OB0NSSR()

    /* GET AND SAVE SIZES FROM SIZE RECORDS USING ob1690*/

  set OBSFREC empty; /* request type*/
  set OB3REC empty; /* passed record*/

  OB3REC.OP1PARTN = OB2REC.OP1PARTN; /* part char*/
  OB3REC.OP1CUOID = OB2REC.OP1CUOID; /* cust ord id*/
  OB3REC.OP1NORID = OB2REC.OP1NORID; /* nike ord id*/
  OB3REC.OP2LNINB = OB2REC.OP2LNINB; /* line item nbr*/
  OB0NW01.OB0NWLIN = OB2REC.OP2LNINB; /* numeric line item nbr*/

  OBSFREC.OBSF-TASK = "S "; /* request for unique select*/
  OBSFREC.OBSF-CALLER-LOC-1 = "S       "; /* io task*/
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  "; /* io mod*/
  OBSFREC.OBSF-CALLER-LOC-3 = "OB0NSSR "; /* calling stmt grp*/
  OBSFREC.OBSF-CALLING-APPL = "OB0H";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes}; /* call io mod for inquiry*/

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD >= 0
   && OBSFREC.OBSF-RETURN-CD <= 11)
    OB3REC.OB3GROUP = OBSFREC.OB3GROUP;
    OB0NW01.OB0NWSUB = 1; /* initialize subscript*/
    while (OB0NWSUB < 41) /* save size-run/qty of product-to-dup*/
      OB0NW01.OP3SZAFL[OB0NWSUB] = OB3REC.OP3SZAFL[OB0NWSUB];
      OB0NW01.OP3ONOQT[OB0NWSUB] = OB3REC.OP3ONOQT[OB0NWSUB];
      OB0NWSUB = OB0NWSUB + 1;
    end
  else
    if (OBSFREC.OBSF-RETURN-CD == 14) /* got a -911 deadlock on item*/
      TA1LOCAT[1] = "S ";
      TA1LOCAT[2] = "OB1690";
      TA1LOCAT[3] = "OB0NSSR";
      TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD;
      TA1DBASE = "DORDB";
      TA1TBLVU = "VBITEM01";
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
      XSOBS04();
    else
      if (OBSFREC.OBSF-RETURN-CD == 15) /* got a -911 deadlock on sizes*/
        TA1LOCAT[1] = "S ";
        TA1LOCAT[2] = "OB1690";
        TA1LOCAT[3] = "OB0NSSR";
        TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD;
        TA1DBASE = "DORDB";
        TA1TBLVU = "VBSIZE01";
        TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/
        XSOBS04();
      else
        set OB0NM001.OB0NMDSY cursor, bold; /* highlight field in error*/
        set OB0NM001.OB0NMDCL bold;
        set OB0NM001.OB0NMDDM bold;
        set OB0NM001.OP1CUOID bold;
        set OB0NM001.OP1NORID bold;
        OBWREC.OBWERRFL = "Y"; /* set error flag*/
        converseLib.validationFailed(110); /* Product to dup does not exist*/
      end
    end
  end


end // end OB0NSSR

// GET NUMBER OF VALID SIZES
Function OB0NSSZ()

    /* GET NUMBER OF VALID SIZES*/

  set OBHREC empty; /* initialize pass record to ob1200*/

  OB0NW01.OB0NWNVS = 0; /* init number of valid sizes*/
  OBHREC.OP1CUOID = OB1REC.OP1CUOID; /* cust company*/
  OBHREC.XDVCD = SYCREC.XDVCD1; /* use style division*/
  OBHREC.XOTCD = OB1REC.XOTCD; /* order type*/
  OBHREC.XGPCD = OB0NM001.XGPCD; /* gpc code*/
  OBHREC.SY1STNBR = OB0NM001.SY1STNBR; /* style*/
  OBHREC.SY2CLRID = OB0NM001.SY2CLRID; /* color*/
  OBHREC.XDMCD = OB0NM001.XDMCD; /* dimension*/

  call "OB1700" (OBHREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (OBHREC.OBHRTNCD != 0)
    OB0NM001.CAMSG = "UNABLE TO DETERMINE SIZES FOR THE PRODUCT";
  else
    OB0NW01.OB0NWSUB = 1; /* init subscript*/
    while (OB0NWSUB < 41)
      if (OBHREC.OBHSZDES[OB0NWSUB] != " ") /* active size*/
        OB0NW01.OB0NWNVS = OB0NW01.OB0NWNVS + 1; /* # of active sz*/
      end
      OB0NWSUB = OB0NWSUB + 1;
    end
  end


end // end OB0NSSZ

//*** RECORD=OB0NW01 ****
// 03/20/91  swatso  added product description - ob0nwpds
// 08/31/92  dharri  added ob0nw-cust-logo-flag
// 03/23/00  nkathi  added ob0nw-bssa-product,
// TT#4752           ob0nw-bssa-old-hnd,ob0nw-bssa-hnd-cd
//                   ob0nw-bssa-sub-flag - BSSA goes GPC02 proj
// 05/24/00  rharat  added ob0nw-bssa-first-time
// ***********************
Record OB0NW01 type basicRecord
  10 OB0NWSUB OB0NWSUB ; 
  10 OB0NWSB2 OB0NWSB2 ; 
  10 OB0NWSB3 OB0NWSB3 ; 
  10 OB0NWENT OB0NWENT ; 
  10 OB0NWPRD OB0NWPRD ; 
  10 OB0NWDRW OB0NWDRW ; 
  10 OB0NWPMF OB0NWPMF ; 
  10 OB0NWNVS OB0NWNVS ; 
  10 OB0NWORD OB0NWORD ; 
    15 * char(8) ; 
    15 OP1PARTN OP1PARTN ; 
  10 OB0NWLIN OB0NWLIN ; 
  10 OP3SZAFL OP3SZAFL [40] ; 
  10 OP3ONOQT OP3ONOQT [40] ; 
  10 OB0NWPCT OB0NWPCT ; 
  10 OB0NWSZP OB0NWSZP [40] ; 
  10 OB0NWOTF OB0NWOTF ; 
  10 OB0NWPDS OB0NWPDS ; 
    15 OB0NWSSN OB0NWSSN ; 
    15 OB0NWSPC OB0NWSPC ; 
    15 OB0NWSCA OB0NWSCA ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 OB0NW-BSSA-PRODUCT char(1) ; // bssa product flag
  10 OB0NW-BSSA-OLD-HND char(3) ; // bssa old hndl code
  10 OB0NW-BSSA-HND-CD char(3) ; // bssa hndl code new
  10 OB0NW-BSSA-SUB-FLG char(1) ; // bssa substitution flag
  10 OB0NW-BSSA-FIRST-TIME char(1) ; // flag to force converse
end // end OB0NW01

// order is a draw fl
DataItem OB0NWDRW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod was entered fl
DataItem OB0NWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-line-item-nbr (numeric)
DataItem OB0NWLIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod's number of valid sizes
DataItem OB0NWNVS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id (numeric)
DataItem OB0NWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order type found flag
DataItem OB0NWOTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work percent / 100
DataItem OB0NWPCT decimal(5,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product description
DataItem OB0NWPDS char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product match found fl
DataItem OB0NWPMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod's present on order fl
DataItem OB0NWPRD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work subscript 2
DataItem OB0NWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work subscript 3
DataItem OB0NWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style color abbrev.
DataItem OB0NWSCA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value ' '
DataItem OB0NWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short style number
DataItem OB0NWSSN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work subscript
DataItem OB0NWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// standard size dist pct
DataItem OB0NWSZP decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

