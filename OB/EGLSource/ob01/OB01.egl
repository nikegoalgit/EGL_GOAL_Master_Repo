package ob01;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=OB01 ****
// ************************************************************
// *  MENU OF SERVICES - CUSTOMER PREPACK BY PRODUCT          *
// *                     ( AIRSPEED )                         *
// ************************************************************
// *                                                          *
// *  OVERVIEW: This application will display all products    *
// *            and their package numbers (if assigned) for a *
// *            specified order, and allow the customer       *
// *            service rep to select a product or all        *
// *            products for packaging.                       *
// *                                                          *
// *            This application is called by the OB0A        *
// *            applications.                                 *
// *                                                          *
// ************************************************************
// *                                                          *
// *    IOMODS       DATABASE/FILENAME        CSP RECORDS     *
// *    ------       -----------------       -------------    *
// *    OB1940       DORDB.VBCSPR01          SQLCA,  OB2REC,  *
// *                                         VBCSPR01         *
// *                                                          *
// *    OB1690       DORDB.VBITEM01                           *
// *                 DORDB.VOBSIZ01                           *
// *                                                          *
// *    IO0560       DPROD.VCOLOR02          SQLCA,  SYCREC   *
// *                                                          *
// *    IO0040       DPROD.VSCALE01          SQLCA,  SY4REC   *
// *                                                          *
// *    TA0020       Post DB2 errors         TA1REC, ERRSQLCA *
// *                                                          *
// *    TA0020       Post Non-DB2 errors     TA1REC, TAEREC   *
// *                                                          *
// *    TA0050       Temp Storage Routine    OBSPREC, TA5REC  *
// *                                                          *
// ************************************************************
// *                                                          *
// * MAINTENANCE HISTORY:                                     *
// *   DATE     WHO                  COMMENTS                 *
// * --------  ------       --------------------------------- *
// * 01/02/97  wleong       creation                          *
// ************************************************************
// 
// *********************
Program OB01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OB01W01 OB01W01; // record
  OB01W02 OB01W02; // record
  OB1REC OB1REC; // record
  OB2REC OB2REC; // record
  OB3REC OB3REC; // record
  OB6REC OB6REC; // record
  OB7REC OB7REC; // record
  OB9REC OB9REC; // record
  OBAREC OBAREC; // record
  OBBREC OBBREC; // record
  OBCREC OBCREC; // record
  OBDREC OBDREC; // record
  OBEREC OBEREC; // record
  OBFREC OBFREC; // record
  OBGREC OBGREC; // record
  OBSFREC OBSFREC; // record
  OBSPREC OBSPREC; // record
  OBSWREC OBSWREC; // record
  OBWREC OBWREC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBCSPR01 VBCSPR01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPATBL; // table
  use OB01M.OB01M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OB01000: OB01000();

     /* =======================*/
      /* flow to next process*/
     /* =======================*/

    goto OB01010;

    OB01010: OB01010();
     /* ===================================================*/
      /* NOTE: flow is to this converse process*/
            /* if PF7 or PF8 is pressed and*/
            /* error/s is/are found in the*/
            /* edit/process PF keys stmt grp.*/

            /* for PF3, if there are no errors*/
                /* found during edit, it will*/
                /* branch to OB0A.*/

            /* for ENTER (continue), if there*/
                /* are no errors found during*/
                /* edit, it will branch to OB02*/
     /* ===================================================*/

    goto OB01010;

  end // end main
end // end OB01

// init., load temp storage/map
Function OB01000()

    /* ***********************************************************/
    /* *  This process re-checks the gpc and pack code on       **/
    /* *  order to see if it can have prepacks.  It initializes **/
    /* *  the work areas and load temp storage.                 **/
    /* ***********************************************************/



   /* ALL COMMIT;*/

  XSENTRY(); /* application entry validation*/

  XSOBS01(); /* o/b system security*/

  OB01S05(); /* extract ob1rec from commarea*/

   /* XSSEGTR;                          /* setting segmented trans id*/

  OB01S10(); /* check gpc code*/

  OB01S15(); /* check pack code in xpatbl*/

  OB01S20(); /* initialize records*/

  OB01S25(); /* load temp storage (obsprec)*/

  OB01S30(); /* load map from temp stor*/

  if (COMMAREA.CAFROMAP == "OB0L" || 
  COMMAREA.CAFROMAP == "OB02" || 
  COMMAREA.CAFROMAP == "OB0D" || 
  COMMAREA.CAFROMAP == "OB0F")
    OB01S-GET-ERR-MSG();
  end

end // end OB01000

// converse, edit pf keys
Function OB01010()

  converseVar.segmentedMode = 1; /* force segmented execution mode*/

  converse OB01M001 ;

  OB01S35(); /* reset field attributes*/

  OB01S36(); /* edit/process pf keys*/

end // end OB01010

// get error msg
Function OB01S-GET-ERR-MSG()
   /* set get error msg flag for ob0l*/
  OBWREC.OBW-GET-ERRORS-FL = "Y";
  OBWREC.OBW-GET-HOLDS-FL = "Y";

  set OB7REC empty;

  OB7REC.OP1PARTN = OB1REC.OP1PARTN;
  OB7REC.OP1CUOID = OB1REC.OP1CUOID;
  OB7REC.OP1NORID = OB1REC.OP1NORID;
  OB7REC.OB7MSGTP = "E";

  set SQLCA empty;
  set OB6REC empty;

  call "OB1240" ("SS", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDB";
    TA1REC.TA1TBLVU = "VOBMSG01";
    TA1REC.TA1LOC = "SS OB1240";
    if (SQLCA.VAGen_SQLCODE == -911)
      OBWREC.OBWER911 = "Y";
      XSOBS04();
    else
      XSOBEDC();
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0)

    set SQLCA empty;
    set OB6REC empty;

    call "OB1240" ("SN", SQLCA, OB7REC, OB6REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      if (OB7REC.OB6MSGNB == "309" || 
      OB7REC.OB6MSGNB == "400" || 
      OB7REC.OB6MSGNB == "401" || 
      OB7REC.OB6MSGNB == "402" || 
      OB7REC.OB6MSGNB == "403" || 
      OB7REC.OB6MSGNB == "404") /* check for prepack errors*/
        OB01S-GET-SZ-ITM();
        OB01M001.CAMSG = "CORRECT PREPACK ERRORS ON HILITED ITEMS";
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
     /* NEXT SENTENCE*/
      else
        TA1REC.TA1DBASE = "DORDB";
        TA1REC.TA1TBLVU = "VOBMSG01";
        TA1REC.TA1LOC = "SS OB1240";
        if (SQLCA.VAGen_SQLCODE == -911)
          OBWREC.OBWER911 = "Y";
          XSOBS04();
        else
          XSOBEDC();
        end
      end
    end

  end
end // end OB01S-GET-ERR-MSG

// read item/size - OB3REC
Function OB01S-GET-SZ-ITM()

  set OB3REC empty;
  set OBSFREC empty;
  set SQLCA empty;

  OB3REC.OP1PARTN = OB7REC.OP1PARTN; /* part char*/
  OB3REC.OP1CUOID = OB7REC.OP1CUOID; /* customer order id*/
  OB3REC.OP1NORID = OB7REC.OP1NORID; /* nike order id*/
  OB3REC.OP2LNINB = OB7REC.OP2LNINB; /* line item number*/

  OBSFREC.OBSF-TASK = "S ";
  OBSFREC.OBSF-CALLER-LOC-1 = "S       ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "OB01S11 ";
  OBSFREC.OBSF-CALLING-APPL = "OB01";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0 /* good return*/
   || OBSFREC.OBSF-RETURN-CD == 11) /* or no sizes*/
     /* continue*/
    OB01S-HILITE-STY();
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* not found*/
      OBWREC.CAMSG = "PRODUCT NO LONGER ON ORDER";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB01S-GET-SZ-ITM"; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* return code*/
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/

      if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
       || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end

end // end OB01S-GET-SZ-ITM

// hilite styles with errors
Function OB01S-HILITE-STY()


  OB01W01.OB01WSUB = 1; /* set subscript to 1*/

  while (OB01W01.OB01WSUB <= 12)
    if (OBSPREC.OBSPSTYNB[OB01WSUB] == " ")
      set OB01M001.OB01MSEL[OB01WSUB] skip, invisible;
    else
      set OB01M001.OB01MSEL[OB01WSUB] initialAttributes;
     /* IF OBSPREC.OBSPDELET(OB01WSUB) = '*';  /* delete*/
       /* MOVE OBSPREC.OBSPDELET(OB01WSUB) TO OB01M001.OB01MDEL(OB01WSUB);*/
     /* ELSE;                /* do not want to display 'a'(allocated) or*/
       /* MOVE ' ' TO OB01M001.OB01MDEL(OB01WSUB); /* 'p'(partially alloc)*/
     /* END;*/
      OB01M001.OB01MSEL[OB01WSUB] = OBSPREC.OBSPSELTD[OB01WSUB];
      OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] = OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB];
      OB01M001.OBSPSTYNB[OB01WSUB] = OBSPREC.OBSPSTYNB[OB01WSUB];
      if (OB3REC.SY1STNBR == OBSPREC.SY1STNBR[OB01WSUB] && 
      OB3REC.SY2CLRID == OBSPREC.SY2CLRID[OB01WSUB])
        set OB01M001.OBSPSTYNB[OB01WSUB] bold;
      end
      OB01M001.OP2CGPCD[OB01WSUB] = OBSPREC.OP2CGPCD[OB01WSUB];
      OB01M001.SY1SSTNM[OB01WSUB] = OBSPREC.SY1SSTNM[OB01WSUB];
      OB01M001.SY2CLRAB[OB01WSUB] = OBSPREC.SY2CLRAB[OB01WSUB];
    end
    OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;
  end

end // end OB01S-HILITE-STY

// extract ob1rec from commarea
Function OB01S05()

  COMMAREA.CACURRAP = "OB01"; /* current applic*/

   /* =========================================*/
    /* since this is the first time OBSWREC is*/
    /* set up in this application, it is*/
    /* initialized here.  However, in all*/
    /* other cases where the 3rd character of*/
    /* the record is a 'W', these records*/
    /* should NOT be initialized..........*/
   /* =========================================*/

  set OBSWREC empty;

   /* ==============================*/
    /* extract OBWREC from COMMAREA*/
   /* ==============================*/
  OBWREC.OBWGROUP = COMMAREA.CA-USER-WORKAREA-4K;

   /* ==============================*/
    /* extract OB1REC from OBWREC*/
   /* ==============================*/
   /* MOVE OBWREC.OB1GROUP TO OB1REC.OB1GROUP;*/
  XSOBS03();

   /* ==============================*/
    /* move OBWREC to OBSWREC*/
   /* ==============================*/
  OBSWREC.OBSWOMWGP = OBWREC.OBWGROUP;

end // end OB01S05

// check gpc code
Function OB01S10()
    /* ==========================================================*/
      /* if gpc code = '03' (apparel)  or*/
      /* if gpc code = '02' (footwear) continue processing*/
      /* otherwise, exit from this application and return to*/
      /* calling application . . . . . .*/
    /* ==========================================================*/

  if (OB1REC.XGPCD == "03"
   || OB1REC.XGPCD == "02")
    return;
  else
    COMMAREA.CATOAP = "OB0A"; /* return to calling applic*/
    OB01S11(); /* dxfr out*/
  end

end // end OB01S10

// DXFR out
Function OB01S11()
   /* =================*/
       /* dxfr out*/
   /* =================*/


  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;

  sysVar.transferName = COMMAREA.CATOAP;

  COMMAREA.CATOAP = " ";

  transfer to program sysVar.transferName passing COMMAREA;
end // end OB01S11

// check pack code in xpatbl
Function OB01S15()

   /* =====================================================*/
        /* check if pack code in OB1REC exists in the*/
        /* table XPATBL.*/

        /* if it exists, the 'specified flag' for that*/
        /* specific pack code must be = 'Y' and the*/
        /* 'status' must be an 'A'.*/
   /* =====================================================*/

  sysVar.arrayIndex = 1;

  if (OB1REC.XPACD in XPATBL.XPACD              /* exists in Pack Code table*/
   && XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y" /* Cust Specified Flag*/
   && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Pack Code Active*/

    return;

  else

    OBWREC.CAMSG = "PACK CODE IS MISSING";
    COMMAREA.CAUSERA = OBWREC.OBWGROUP;
    if (COMMAREA.CAFROMAP == "OB0F")
      XSOBP09(); /* transfer to prod summary*/
    else
      XSOBP13(); /* transfer to order batch header*/
    end
   /* MOVE 'OB0A' TO COMMAREA.CATOAP;*/
   /* OB01S11;                        /* return to calling applic*/

  end

end // end OB01S15

// initialize records
Function OB01S20()

  set OB01W01 empty;

  set OB01W02 empty;

  set OBSPREC empty;

  set OB01M001 initial;

  OB01S21(); /* reformat date (mm-dd-yy)*/

  OB01S22(); /* reformat order & cust nos.*/


end // end OB01S20

// reformat map date (mm-dd-yy)
Function OB01S21()


  OB01W01.OB01WEDT = VGVar.currentShortGregorianDate; /* system date (yymmdd)*/

  OB01W01.OB01WCYY = OB01W01.OB01WEYY;

  OB01W01.OB01WCMM = OB01W01.OB01WEMM;

  OB01W01.OB01WCDD = OB01W01.OB01WEDD;

  OB01W01.OB01WDS1 = "-";

  OB01W01.OB01WDS2 = "-";

end // end OB01S21

// reformat order & cust nos.
Function OB01S22()

    /* ==========================*/
       /* reformat order no.*/
    /* ==========================*/

  OB01W01.OB01WCOI = OB1REC.OP1CUOID;

  OB01W01.OB01WPR1 = ".";

  OB01W01.OB01WNOI = OB1REC.OP1NORID;


    /* ==========================*/
       /* reformat customer no.*/
    /* ==========================*/

  OB01W01.OB01WCCI = OB1REC.KUCCOID;

  OB01W01.OB01WPR2 = ".";

  OB01W01.OB01WSTI = OB1REC.KUMSTRID;

  OB01W01.OB01WPR3 = ".";

  OB01W01.OB01WDEP = OB1REC.XNXCD;

end // end OB01S22

// load temp stor (OBSPREC)
Function OB01S25()

   /* =================================*/
       /* initialize before loading*/
   /* =================================*/

  OB01W01.OB01WCPG = 0; /* init current page cntr*/

  OBSWREC.OBSWTSF1M = 0; /* init last page cntr*/

  OB01W01.OB01WPGC = 0; /* init page cntr*/

  OB01W01.OB01WEOF = "N"; /* init end-of-file*/

  OB01W01.OB01WSUB = 0; /* init w/s subscript*/

  set SQLCA empty;

  set TA5REC empty; /* init rec to be passed to TA0050*/

  set TA1REC empty;

  OB01S26(); /* purge temp stor*/

  OB01S27(); /* format/write temp stor*/

end // end OB01S25

// purge temp storage
Function OB01S26()



  TA5REC.TA5APPID = "OB01"; /* applic id*/

  TA5REC.TA5FNCCD = "P"; /* function code 'p' = purge*/

  call "TA0050" (OBSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};

   /* * * * * * * * * * * * * * * * * * * * * * * **/

    /* note: return code from TA0050 is not*/
          /* checked here in the purge routine*/
          /* 'coz it doesn't matter if the*/
          /* purging is ok or not.  Also, if*/
          /* it was unsuccessful, the error*/
          /* is posted in TA0050.*/

   /* * * * * * * * * * * * * * * * * * * * * * * **/

end // end OB01S26

// format/write t/s (OBSPREC)
Function OB01S27()

   /* ===========================================*/
    /* EXISTS IN ITEM  AND  NOT EXISTS IN PREPACK*/
   /* ===========================================*/

  OB01S7A(); /* DECLARE/OPEN ITEM*/

  OB01S7B(); /* FETCH 1st ITEM*/


  while (OB01W01.OB01WEOF != "Y")

    OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;

    OB01S7F(); /* MOVE TO TEMP STOR*/

    if (OB01W01.OB01WSUB == 12)
      OB01S7G(); /* write temp storage*/

      OB01W01.OB01WSUB = 0;
    end


    OB01S7B(); /* fetch next item*/

  end

  OB01S7H(); /* close item cursor*/


   /* ======================================*/
    /* check if prepack-exist flag is 'on'.*/
    /* if 'on'*/
       /* do a join of both item & prepack*/
       /* databases*/
   /* ======================================*/

  OB01S7M(); /* call vbcspr01 to see if prepk exists*/

  if (OBSWREC.OBSWPPEXF == "Y") /* prepack exists, need to get join*/

    OB01W01.OB01WEOF = "N"; /* reset end-of-file*/

    OB01S7I(); /* declare item/prepack*/

    OB01S7J(); /* fetch 1st item/prepack*/

    while (OB01W01.OB01WEOF != "Y")

      OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;

      OB01S7N(); /* MOVE TO TEMP STOR*/

      if (OB01W01.OB01WSUB == 12)
        OB01S7G(); /* write temp stor*/

        OB01W01.OB01WSUB = 0;

      end

      OB01S7J(); /* fetch next item/prepack*/
    end

    OB01S7P(); /* close item/prepack cursor*/

  end

  if (OB01W01.OB01WSUB > 0)

    OB01S7G(); /* write temp stor (for the last time)*/

  end


  if (OB01W01.OB01WPGC == 0)
    TA1REC.TA1LOCAT[1] = "OB01000";
    TA1REC.TA1LOCAT[2] = "OB01S27";
    TAEREC.TAEDESC1 = "NO RECORDS LOADED IN TEMP STOR";
    OB01S98(); /* post non-db2 err*/
    OB01S29(); /* force DXFR out*/
  else

    /* ======================================*/
     /* 1. pass the last record no. written*/
        /* into temp stor to OBWREC (this*/
        /* data is needed to be passed to*/
        /* OB02 later)*/
     /* 2. init current page cntr to 1*/
    /* ======================================*/
    OBSWREC.OBSWTSF1M = OB01W01.OB01WPGC;

    OB01W01.OB01WCPG = 1; /* set current page to 1*/

  end

end // end OB01S27

// force DXFR out
Function OB01S29()

   /* ==================================================*/

   /* this statement group is performed when there*/
   /* are abnormal returns from the other modules*/
   /* like OP3730, DB100, IO0560, IO0040, TA0050.*/
   /* for the reason that there is no use to continue*/
   /* processing for these abnormal errors, the*/
   /* system forces user out to 'OM0M' and*/
   /* sending a msg thru commarea.*/

   /* ==================================================*/

  COMMAREA.CAMSG = " ";

  OB01W01.OB01WEM1 = "UNABLE TO PROCESS REQUEST ";

  OB01W01.OB01WEM2 = "CONTACT USER ANALYST";

  COMMAREA.CAMSG = OB01W01.OB01WERM;

  COMMAREA.CATOAP = "OB0A";

  OB01S26(); /* purge temp storage*/

  OB01S11(); /* DXFR out*/


end // end OB01S29

// load map from temp stor
Function OB01S30()

   /* =====================================*/
      /* initialize maps & records*/
   /* =====================================*/

  set OB01M001 initial;

  set OBSPREC empty;

  set TA5REC empty;

  set TA1REC empty;

   /* =====================================*/
      /* format map top line*/
   /* =====================================*/

  OB01M001.OB01MPRC = "OB01010"; /* process name*/

  OB01M001.OB01MRVN = "01"; /* revision no.*/

  OB01M001.OB01MCDT = OB01W01.OB01WCDT; /* current date*/

  OB01M001.OB01MORD = OB01W01.OB01WORD; /* reformatted order no.*/

  OB01M001.OB01MCUS = OB01W01.OB01WCUS; /* reformatted cust no.*/

  OB01M001.KUMSTRNM = OBWREC.KUMSTRNM; /* cust store name*/

  OB01M001.CAMSG = COMMAREA.CAMSG; /* commarea message*/

   /* MOVE '(*)' TO OB01M001.OB01MAST;  /* delete message legend*/

   /* =====================================*/
      /* read current page temp storage*/
   /* =====================================*/

  TA5REC.TA5TSQIX = OB01W01.OB01WCPG; /* set ts page no. to cur page*/

  OB01S31(); /* read temp storage*/

   /* =====================================*/
      /* format map detail lines*/
   /* =====================================*/

  OB01S32(); /* format map detail line*/



end // end OB01S30

// read temp stor
Function OB01S31()


  TA5REC.TA5APPID = "OB01";

  TA5REC.TA5FNCCD = "R";

  OBSPREC.OBSPTSLEN = 3820; /* ts length of rec*/


  call "TA0050" (OBSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/

   /* =============================================*/
    /* if ret code is non-zero*/
       /* force user out of this application*/
   /* =============================================*/
  if (TA5REC.TA5RTNCD == 0)
     /* next sentence*/
  else

    OB01S29(); /* force DXFR out*/

  end
  if (OBSPREC.OBSPMORE[1] == "2"
   || OBSPREC.OBSPMORE[2] == "2"
   || OBSPREC.OBSPMORE[3] == "2"
   || OBSPREC.OBSPMORE[4] == "2"
   || OBSPREC.OBSPMORE[5] == "2"
   || OBSPREC.OBSPMORE[6] == "2"
   || OBSPREC.OBSPMORE[7] == "2"
   || OBSPREC.OBSPMORE[8] == "2"
   || OBSPREC.OBSPMORE[9] == "2"
   || OBSPREC.OBSPMORE[10] == "2"
   || OBSPREC.OBSPMORE[11] == "2"
   || OBSPREC.OBSPMORE[11] == "2")
    if (converseVar.eventKey is pf8)
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* get the next ts record*/
      OB01W01.OB01WCPG = OB01W01.OB01WCPG + 1; /* update current page*/
      if (OB01W01.OB01WCPG > OBSWREC.OBSWTSF1M)
        OB01W01.OB01WCPG = OB01W01.OB01WCPG - 2; /* update current page*/
        converseLib.validationFailed(087);
        return;
      end
    else
      if (converseVar.eventKey is pf7)
        TA5REC.TA5TSQIX = TA5REC.TA5TSQIX - 1; /* get the next ts record*/
        OB01W01.OB01WCPG = OB01W01.OB01WCPG - 1; /* update current page*/
        if (OB01W01.OB01WCPG <= 1)
          converseLib.validationFailed(086);
          return;
        end
      end
    end
    TA5REC.TA5APPID = "OB01";
    TA5REC.TA5FNCCD = "R";
    OBSPREC.OBSPTSLEN = 3820; /* ts length of rec*/
    call "TA0050" (OBSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/
   /* =============================================*/
    /* if ret code is non-zero*/
       /* force user out of this application*/
   /* =============================================*/
    if (TA5REC.TA5RTNCD == 0)
        /* next sentence*/
    else

      OB01S29(); /* force DXFR out*/

    end
  end


end // end OB01S31

// format map detl line
Function OB01S32()


  OB01W01.OB01WSUB = 1; /* set subscript to 1*/

  while (OB01W01.OB01WSUB <= 12)
    if (OBSPREC.OBSPSTYNB[OB01WSUB] == " ")
      set OB01M001.OB01MSEL[OB01WSUB] skip, invisible;
    else
      set OB01M001.OB01MSEL[OB01WSUB] initialAttributes;
     /* IF OBSPREC.OBSPDELET(OB01WSUB) = '*';  /* delete*/
       /* MOVE OBSPREC.OBSPDELET(OB01WSUB) TO OB01M001.OB01MDEL(OB01WSUB);*/
     /* ELSE;                /* do not want to display 'a'(allocated) or*/
       /* MOVE ' ' TO OB01M001.OB01MDEL(OB01WSUB); /* 'p'(partially alloc)*/
     /* END;*/
      OB01M001.OB01MSEL[OB01WSUB] = OBSPREC.OBSPSELTD[OB01WSUB];
      OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] = OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB];
      OB01M001.OBSPSTYNB[OB01WSUB] = OBSPREC.OBSPSTYNB[OB01WSUB];
      OB01M001.OP2CGPCD[OB01WSUB] = OBSPREC.OP2CGPCD[OB01WSUB];
      OB01M001.SY1SSTNM[OB01WSUB] = OBSPREC.SY1SSTNM[OB01WSUB];
      OB01M001.SY2CLRAB[OB01WSUB] = OBSPREC.SY2CLRAB[OB01WSUB];
    end
    OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;
  end

end // end OB01S32

// reset field attributes
Function OB01S35()

   /* =====================================================*/
    /* reset the only enterable field (select) to define*/
   /* =====================================================*/

  COMMAREA.CAMSG = " "; /* reset commarea msg*/

  OB01W01.OB01WSUB = 1; /* set subscript to 1*/

  while (OB01W01.OB01WSUB <= 12)
    if (OB01M001.OBSPSTYNB[OB01WSUB] == " ")
      set OB01M001.OB01MSEL[OB01WSUB] skip, invisible;
    else
      set OB01M001.OB01MSEL[OB01WSUB] initialAttributes;
    end
    OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;
  end

end // end OB01S35

// edit/process pf keys
Function OB01S36()





  converseLib.validationFailed(0);

  if (converseVar.eventKey is pf3)
   /* OB01S40;                        /* return to OB0A*/
    XSOBP03();
  else
    if (converseVar.eventKey is pf4)
      OB01S80(); /* return to MN0M*/
    else
      if (converseVar.eventKey is pf7)
        OB01S50(); /* scroll backward*/
      else
        if (converseVar.eventKey is pf8)
          OB01S60(); /* scroll forward*/
        else
          if (converseVar.eventKey is pf13) /* go to ob0d*/
            XSOBP13();
          else
            if (converseVar.eventKey is pf17)
              COMMAREA.CAUSERA = OBWREC.OBWGROUP;
              XSOBP17(); /* go to error screen*/
            else
              if (converseVar.eventKey is pf19)
                XSOBP19(); /* go to hold screen*/
              else
                if (converseVar.eventKey is enter)
                  OB01S70(); /* continue*/
                else
                  converseLib.validationFailed(1); /* invalid PF key*/
                end
              end
            end
          end
        end
      end
    end
  end
end // end OB01S36

// incr. subs & chk next TSQ sty
Function OB01S44()

    /* increment subs*/

  OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;

  if (OB01W01.OB01WSUB == 13)
    return;
  else

      /* check next detail style no.*/

    if (OBSPREC.OBSPSTYNB[OB01WSUB] == " ") /* no more detl data*/
      OB01W01.OB01WSUB = 13; /* force end to loop*/
    end
  end


end // end OB01S44

// PF7 edit-scroll backward
Function OB01S50()

   /* ===========================*/
     /* check the current page*/
   /* ===========================*/

  if (OB01W01.OB01WCPG == 1) /* first page*/
    converseLib.validationFailed(086); /* cannot scroll backward*/
    return;
  end

   /* ==========================*/
     /* current page > 1*/
   /* ==========================*/

  converseLib.validationFailed(0); /* init ezemno*/

  OB01S51(); /* edit map current page*/

  if (converseVar.validationMsgNum == 0)
    /* ==========================*/
     /* do a rewrite whether or*/
     /* not there is/are update/s*/
    /* ==========================*/
    OB01S53(); /* rewrite/update temp stor*/
    OB01W01.OB01WCPG = OB01W01.OB01WCPG - 1;
    OB01S30(); /* load map*/
  end
end // end OB01S50

// edit map current page
Function OB01S51()
   /* ===================*/
   /* initialize data*/
   /* ===================*/
  converseLib.validationFailed(0); /* init ezemno*/

  OB01W01.OB01WALF = "N"; /* init all-flag*/

  OB01W01.OB01WSFL = "N"; /* init S-flag*/

  OB01W01.OP-PREPK-PKG-NBR = 0; /* init save-pkg-no*/

  set OBSPREC empty;

  set TA5REC empty;

   /* ==================================*/
   /* read current page temp stor rec*/
   /* ==================================*/

  TA5REC.TA5TSQIX = OB01W01.OB01WCPG; /* set ts indx to curr page*/

  OB01S31(); /* read temp storage*/

   /* =====================================================*/
   /* edit each select code in current page temp stor rec*/
   /* =====================================================*/

  OB01W01.OB01WSUB = 1; /* init subs to 1*/

  while (OB01W01.OB01WSUB <= 12
   && converseVar.validationMsgNum == 0)

    OB01S52(); /* edit select code*/

  end

  if (converseVar.validationMsgNum == 0)
    if (OBSWREC.OBSWTSF1M == 1) /* only 1 page/record in T/S*/
      /* =====================================================*/
       /* CHECK THE S-FLAG:*/
       /* if S-flag is 'on' (meaning there is at least an item*/
                          /* on the current map with 'S' select*/
                          /* code)*/
          /* CHECK THE SAVE-PKG-NO:*/
          /* if save-pkg-no is blank (meaning there is one or more*/
                          /* items on the current map with 'S'*/
                          /* select code and blank pkg no.)*/
             /* move '000' to OBSWREC.OP-PREPK-PKG-NBR*/
          /* else*/
             /* move the save-pkg-no to OBSWREC.OP-PREPK-PKG-NBR*/

      /* * * * * * * * * * * * * * * * * * * * * * * * * * * **/
       /* NOTE: For the 'A' select code, the moving of data*/
             /* to OBSWREC.OP-PREPK-PKG-NBR is done at the end of*/
             /* stmt grp OB01S54.*/

             /* For the 'S' select code (OB01S55), this is*/
             /* not done coz it is impossible at that point*/
             /* to do this.*/
      /* =====================================================*/

      if (OB01W01.OB01WSFL == "Y")

        if (OB01W01.OP-PREPK-PKG-NBR == 0) /* blank save-pkg-no*/
           /* next sentence*/
        else /* non-blank save-pkg-no*/
          OBSWREC.OP-PREPK-PKG-NBR = OB01W01.OP-PREPK-PKG-NBR;
        end

      else /* no items selected*/
        if (OB01W01.OB01WALF == "Y") /* entire pkg selected*/
          return;
        else
          converseLib.validationFailed(215); /* select 'a' or 's'*/
          return;
        end
      end

    end

  end

end // end OB01S51

// edit map select code
Function OB01S52()
   /* ============================================*/

       /* check the select code;*/
       /* valid select codes: 'A', 'S' or ' '.*/

   /* ============================================*/

  if (OB01M001.OB01MSEL[OB01WSUB] == "A")

    OB01S54(); /* edit map 'A' select*/

  else
    if (OB01M001.OB01MSEL[OB01WSUB] == "S")

      OB01S55(); /* edit map 'S' select*/

    else
      if (OB01M001.OB01MSEL[OB01WSUB] == " ")
        /* next sentence*/

      else

        converseLib.validationFailed(215); /* select option is not valid*/

        set OB01M001.OB01MSEL[OB01WSUB] cursor, bold;

        return;

      end

    end

  end

  if (converseVar.validationMsgNum == 0)

    /* =========================================*/
        /* update the temp storage select-code*/
        /* field with the map select-code field*/
    /* =========================================*/

    OBSPREC.OBSPSELTD[OB01WSUB] = OB01M001.OB01MSEL[OB01WSUB];

    OB01S56(); /* increment subs & check next map sty no.*/
  end

end // end OB01S52

// rewrite/update temp stor
Function OB01S53()



  TA5REC.TA5APPID = "OB01";

  TA5REC.TA5FNCCD = "U"; /* update function*/

  OBSPREC.OBSPTSLEN = 3808; /* ts length of rec*/


  call "TA0050" (OBSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/

  if (TA5REC.TA5RTNCD == 0)
     /* next sentence*/
  else
    /* =============================================*/
      /* if ret code is non-zero*/
         /* force to exit from this applic*/
         /* and transfer to 'OM0M'*/
    /* =============================================*/
    OB01S29(); /* force DXFR out*/

  end


end // end OB01S53

// edit map 'A' select
Function OB01S54()
   /* ==================================================*/

   /* only 1 item on the screen can have*/
   /* an 'A' select code*/

   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/

   /* if both the All-flag and S-flag are 'n'*/
   /* it means the item is the first 'A'*/
   /* select and the first item that has a*/
   /* valid select code; therefore,*/
     /* a- set the All-flag 'on'*/
     /* b- updt the select code of OBSPREC*/
        /* (temp stor) by moving the*/
        /* select code from map*/


   /* ==================================================*/

  if (OB01W01.OB01WALF == "N")

    if (OB01W01.OB01WSFL == "N")

      OB01W01.OB01WALF = "Y"; /* set all-flag 'on'*/

       /* next sentence*/

    else /* prior item/s has 'S' select code*/

      converseLib.validationFailed(216); /* select either 'A' or 'S' not both*/
      return;

    end
  else /* prior item/s has 'A' select code*/
    converseLib.validationFailed(217); /* multiple pkgs cannot be selected*/
    return;
  end

   /* ----------------------------------------*/

           /* FORMAT DATA FOR OBSWREC*/

     /* (the following is done only once*/
      /* after setting the All-flag 'on')*/
   /* ----------------------------------------*/
    /* if the total pages / ts recs = 1*/
       /* initialize the data in OBSWREC*/
       /* that needs to be passed on to*/
       /* OB02:*/
          /* - 1st page no. w/ 'A' sel*/
            /* code*/
          /* - subscript or detail item*/
            /* no. in the 1st page w/*/
            /* 'A'; sel. code*/
   /* ----------------------------------------*/

  if (OBSWREC.OBSWTSF1M == 1)
    OBSWREC.OBSWTSF1P = TA5REC.TA5TSQIX;
    OBSWREC.OBSWTSF1S = OB01W01.OB01WSUB;
  end

   /* ----------------------------------------*/
    /* if pkg no. on map for the item*/
       /* selected w/ 'A' has a pkg no.*/
       /* then pass the pkg no. to OBSWREC*/
   /* ----------------------------------------*/

  if (OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] == 0)
     /* next sentence*/
  else
    OBSWREC.OP-PREPK-PKG-NBR = OB01M001.OP-PREPK-PKG-NBR[OB01WSUB];
  end

end // end OB01S54

// edit map 'S' select
Function OB01S55()

   /* ==================================================*/

   /* more than 1 item on the screen can be selected*/
   /* with 'S' code.  However, if these items have*/
   /* pkg nos. in them, these pkg nos. should be*/
   /* the same or 1 or more items w/ blank pkg nos.*/
   /* may be selected together with 1 or more items*/
   /* w/ the same pkg nos.*/

   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/

   /* ==================================================*/

  if (OB01W01.OB01WALF == "Y") /* prior item/s has an 'A' sel code*/
    converseLib.validationFailed(216); /* select either 'A' or 'S' not both*/
    return;
  else

    if (OB01W01.OB01WSFL == "N") /* first selected item*/
      /* ---------------------------------------*/
         /* FIRST SELECTED ITEM ON THE SCREEN*/
      /* ---------------------------------------*/
           /* set s-flag on*/
           /* if the selected item has pkg no.*/
              /* move pkg no. to save-pkg no.*/
           /* else*/
              /* go to FORMAT DATA FOR OBSWREC*/
      /* ---------------------------------------*/

      OB01W01.OB01WSFL = "Y";

      /* ----------------------------------------*/

               /* FORMAT DATA FOR OBSWREC*/

      /* ----------------------------------------*/
        /* if the total pages / ts recs = 1*/
           /* move data from map to  OBSWREC*/
           /* that needs to be passed on to*/
           /* OB02:*/
              /* - 1st page no. w/ 'S' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'S'; sel. code*/
      /* ----------------------------------------*/

      if (OBSWREC.OBSWTSF1M == 1)
        OBSWREC.OBSWTSF1P = TA5REC.TA5TSQIX;
        OBSWREC.OBSWTSF1S = OB01W01.OB01WSUB;
      end

      if (OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] != 0)

        OB01W01.OP-PREPK-PKG-NBR = OB01M001.OP-PREPK-PKG-NBR[OB01WSUB];

      else
         /* next sentence (go to FORMAT DATA FOR OBSWREC)*/
      end

    else /* not the first selected item*/
      /* ---------------------------------------*/
         /* SUBSEQUENT SELECTED ITEM ON SCREEN*/
      /* ---------------------------------------*/
         /* if the selected item has pkg no.*/
            /* if the save-pkg-no is blank*/
               /* move pkg no. to save-pkg-no.*/
            /* else*/
               /* if pkg-no not = save-pkg-no.*/
                  /* send error msg*/
               /* else*/
                  /* exit from this stmt grp*/
         /* else (selected item has a blank pkg no.)*/
            /* exit from this stmt grp*/
      /* ---------------------------------------*/

      if (OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] != 0)
        if (OB01W01.OP-PREPK-PKG-NBR == 0)
          OB01W01.OP-PREPK-PKG-NBR = OB01M001.OP-PREPK-PKG-NBR[OB01WSUB];
        else
          if (OB01M001.OP-PREPK-PKG-NBR[OB01WSUB] != 
          OB01W01.OP-PREPK-PKG-NBR)
            converseLib.validationFailed(217); /* multiple pkgs cannot be selected*/
            return;
          else
            return;
          end
        end
      else /* blank map pkg-no.*/
        return;
      end

    end

  end



end // end OB01S55

// incr subs & check next map sty
Function OB01S56()

    /* increment subs*/

  OB01W01.OB01WSUB = OB01W01.OB01WSUB + 1;

  if (OB01W01.OB01WSUB == 13)
    return;
  else

      /* check next map detl style no.*/

    if (OB01M001.OBSPSTYNB[OB01WSUB] == " ") /* no more detl data*/
      OB01W01.OB01WSUB = 13; /* force end to loop*/
    end
  end


end // end OB01S56

// PF8 edit-scroll forward
Function OB01S60()

   /* ===========================*/
     /* check the current page*/
   /* ===========================*/

  if (OB01W01.OB01WCPG == OBSWREC.OBSWTSF1M) /* last page reached*/
    converseLib.validationFailed(087); /* cannot scroll forward*/
    return;
  end

   /* ============================*/
     /* current page < last page*/
   /* ============================*/

  converseLib.validationFailed(0); /* init ezemno*/

  OB01S51(); /* edit map current page*/

  if (converseVar.validationMsgNum == 0)
    OB01S53(); /* rewrite/update temp stor*/
    OB01W01.OB01WCPG = OB01W01.OB01WCPG + 1; /* incr page*/
    OB01S30(); /* load map*/
  end

end // end OB01S60

// ENTER edits/process
Function OB01S70()

   /* ==================================================*/
     /* E D I T     M A P    C U R R E N T   P A G E*/
   /* ==================================================*/

  OB01S51(); /* edit map current page*/

   /* ---------------------------*/
   /* If no errors in edit*/
      /* rewrite/update ts*/
   /* ELSE*/
      /* exit*/
   /* ---------------------------*/

  if (converseVar.validationMsgNum == 0)
    OB01S53(); /* rewrite/update temp stor*/
  else
    return;
  end


   /* ==================================*/
     /* in addition to edit current map*/
     /* page, if last page-cntr > 1*/
     /* EDIT ALL RECORDS IN  TEMP STOR*/
   /* ==================================*/

  if (OBSWREC.OBSWTSF1M > 1)
    OB01S71(); /* edit all recs in ts queue*/
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* =================================*/
    /* format OBSWREC to pass to OB02*/
   /* =================================*/

  OBSWREC.OBSWOMWGP = OBWREC.OBWGROUP;

  COMMAREA.CA-USER-WORKAREA-4K = OBSWREC.OBSWSGRP;

   /* =================================*/
    /* DXFR out to OB02*/
   /* =================================*/

  COMMAREA.CATOAP = "OB02";

  OB01S11(); /* DXFR out*/


end // end OB01S70

// edit all recs in TSQ
Function OB01S71()

   /* ============================*/
   /* initialize flags, records*/
   /* ============================*/

  converseLib.validationFailed(0); /* init ezemno*/

  OB01W01.OB01WALF = "N"; /* init all-flag*/

  OB01W01.OB01WSFL = "N"; /* init select-flag*/

  OB01W01.OP-PREPK-PKG-NBR = 0; /* init pkg#*/

  set OBSPREC empty;

  set TA5REC empty;

  TA5REC.TA5TSQIX = 1; /* init temp stor index to 1*/

  OB01W01.OB01WSUB = 1; /* init subscript to 1*/

   /* =========================================================*/
    /* Read thru all records in the temp storage queue*/
    /* until the last record (which is equal to the last*/
    /* page no. stored in OBSWTSF1M)*/

    /* For each record read*/
        /* edit the delete and package no. fields for each*/
        /* of the 12 occurrence (detail lines)*/
   /* =========================================================*/

  while (TA5REC.TA5TSQIX <= OBSWREC.OBSWTSF1M
   && converseVar.validationMsgNum == 0)

    OB01S31(); /* read temp storage*/

    while (OB01W01.OB01WSUB <= 12
     && converseVar.validationMsgNum == 0)
      OB01S72(); /* edit TSQ select codes*/
    end

    if (converseVar.validationMsgNum == 0)
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      OB01W01.OB01WSUB = 1; /* reset subscript to 1*/
    end

  end

  if (converseVar.validationMsgNum == 0)
    OB01S75(); /* check for at least 1 'A' or 'S'*/
  end

end // end OB01S71

// edit TSQ select codes
Function OB01S72()

   /* ============================================*/

       /* check the select code;*/
       /* valid select codes: 'A', 'S' or ' '.*/

   /* ============================================*/

  if (OBSPREC.OBSPSELTD[OB01WSUB] == "A")
    OB01S73(); /* edit TSQ 'A' select*/
  else
    if (OBSPREC.OBSPSELTD[OB01WSUB] == "S")
      OB01S74(); /* edit TSQ 'S' select*/
    else
      if (OBSPREC.OBSPSELTD[OB01WSUB] == " ")
         /* next sentence*/
      else
        converseLib.validationFailed(215); /* select option is not valid*/
        set OB01M001.OB01MSEL[OB01WSUB] initialAttributes;
        OB01M001.OB01MSEL[OB01WSUB] = "J";
        return;
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    OB01S44(); /* increment subs & check TSQ sty no.*/
  end



end // end OB01S72

// edit TSQ 'A' select
Function OB01S73()

   /* ==================================================*/

   /* only 1 item on all TSQ recs can have*/
   /* an 'A' select code*/

   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/

   /* if both the All-flag and S-flag are 'n'*/
   /* it means the item is the first 'A'*/
   /* select and the first item that has a*/
   /* valid select code; therefore,*/
     /* a- set the All-flag 'on'*/
     /* b- updt the select code of OBSPREC*/
        /* (temp stor) by moving the*/
        /* select code from map*/


   /* ==================================================*/

  if (OB01W01.OB01WALF == "N")

    if (OB01W01.OB01WSFL == "N")

      OB01W01.OB01WALF = "Y";

      /* ----------------------------------------*/
            /* FORMAT DATA FOR OBSWREC*/
      /* ----------------------------------------*/
           /* initialize the data in OBSWREC*/
           /* that needs to be passed on to*/
           /* OB02:*/
              /* - 1st page no. w/ 'A' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'A'; sel. code*/
      /* ----------------------------------------*/

      OBSWREC.OBSWTSF1P = TA5REC.TA5TSQIX;
      OBSWREC.OBSWTSF1S = OB01W01.OB01WSUB;

      /* ----------------------------------------*/
           /* if TSQ rec pkg no. for the item*/
              /* selected w/ 'A' has a pkg no.*/
              /* then pass the pkg no. to OBSWREC*/
      /* ----------------------------------------*/

      if (OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] == 0) /* blank pkg-no*/

         /* next sentence*/

      else /* non-blank pkg-no*/

        OBSWREC.OP-PREPK-PKG-NBR = OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB];

      end

    else /* prior item/s has 'S' select code*/

      converseLib.validationFailed(216); /* select either 'A' or 'S' not both*/

    end

  else /* prior item/s has 'A' select code*/

    converseLib.validationFailed(217); /* multiple pkgs cannot be selected*/

  end


end // end OB01S73

// edit TSQ 'S' select
Function OB01S74()

   /* ==================================================*/

   /* more than 1 item on all TSQ recs can be selected*/
   /* with 'S' code.  However, if these items have*/
   /* pkg nos. in them, these pkg nos. should be*/
   /* the same or 1 or more items w/ blank pkg nos.*/
   /* may be selected together with 1 or more items*/
   /* w/ the same pkg nos.*/

   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/



   /* ==================================================*/

  if (OB01W01.OB01WALF == "Y") /* prior item/s has an 'A' sel code*/

    converseLib.validationFailed(216); /* select either 'A'or 'S' not both*/

    return;

  else

    if (OB01W01.OB01WSFL == "N") /* first selected item*/
      /* ---------------------------------------*/
         /* FIRST SELECTED ITEM IN THE TSQ*/
      /* ---------------------------------------*/
           /* set s-flag on*/
           /* if the selected item has pkg no.*/
              /* move pkg no. to save-pkg no.*/
           /* else*/
              /* go to FORMAT DATA FOR OBSWREC*/
      /* ---------------------------------------*/
      OB01W01.OB01WSFL = "Y";

      /* ----------------------------------------*/

               /* FORMAT DATA FOR OBSWREC*/

      /* ----------------------------------------*/
           /* move data that need to be passed*/
           /* on to OB02 thru OBSWREC:*/
              /* - 1st page no. w/ 'S' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'S'; sel. code*/
      /* ----------------------------------------*/

      OBSWREC.OBSWTSF1P = TA5REC.TA5TSQIX;
      OBSWREC.OBSWTSF1S = OB01W01.OB01WSUB;

      if (OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] != 0)
        OB01W01.OP-PREPK-PKG-NBR = OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB];
      end

    else /* not the first selected item*/
      /* ---------------------------------------*/
         /* SUBSEQUENT SELECTED ITEM IN TSQ*/
      /* ---------------------------------------*/
         /* if the selected item has pkg no.*/
            /* if the save-pkg-no is blank*/
               /* move pkg no. to save-pkg-no.*/
            /* else*/
               /* if pkg-no not = save-pkg-no.*/
                  /* send error msg*/
               /* else*/
                  /* exit from this stmt grp*/
         /* else (selected item has a blank pkg no.)*/
            /* exit from this stmt grp*/
      /* ---------------------------------------*/

                                            /* item selt'd has pkg no.*/
      if (OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] != 0)

        if (OB01W01.OP-PREPK-PKG-NBR == 0)
          OB01W01.OP-PREPK-PKG-NBR = OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB];
        else

          if (OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] != 
          OB01W01.OP-PREPK-PKG-NBR)
            converseLib.validationFailed(217); /* multiple pkgs cannot be selected*/
            return;
          else
            return;
          end

        end

      else /* blank map pkg-no.*/
        return;
      end

    end

  end

end // end OB01S74

// check for at least 'A' or 'S'
Function OB01S75()

   /* ==============================================*/
    /* At least 1 item must be selected with*/
    /* an 'A' or a 'S' (either the all-flag or the*/
    /* S-flag = 'y')*/

    /* If both the all-flag and the select-flag*/
    /* are 'N' it means nothing is selected.*/
    /* therefore, send an error message.*/

    /* For S-flag 'on', additional steps to be*/
    /* done:*/
      /* CHECK THE SAVE-PKG-NO:*/
      /* if save-pkg-no is blank (meaning there is one or more*/
                      /* items on the current map with 'S'*/
                      /* select code and blank pkg no.)*/
         /* move '000' to OBSWREC.OP-PREPK-PKG-NBR*/
      /* else*/
         /* move the save-pkg-no to OBSWREC.OP-PREPK-PKG-NBR*/

   /* * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* NOTE: For the 'A' select code, the moving of data*/
         /* to OBSWREC.OP-PREPK-PKG-NBR was done in stmt grp OB01S73*/

         /* For the 'S' select code in OB01S74, this is*/
         /* not done coz it was impossible at that point*/
         /* to do this.*/
   /* ====================================================*/

  if (OB01W01.OB01WALF == "Y") /* All-flag 'on'*/

    return;

  else

    if (OB01W01.OB01WSFL == "Y") /* S-flag 'on'*/

      if (OB01W01.OP-PREPK-PKG-NBR == 0) /* blank save-pkg-no*/
         /* next sentence*/
      else /* non-blank save-pkg-no*/
        OBSWREC.OP-PREPK-PKG-NBR = OB01W01.OP-PREPK-PKG-NBR;
      end

    else

      converseLib.validationFailed(215); /* select option is not valid*/

    end

  end

end // end OB01S75

// declare/open item
Function OB01S7A()


  set SQLCA empty;
  set OB2REC empty;
  set VBCSPR01 empty;

   /* ======================*/
   /* set up key to OB2REC*/
   /* ======================*/

  OB2REC.OP1PARTN = OB1REC.OP1PARTN;
  OB2REC.OP1CUOID = OB1REC.OP1CUOID;
  OB2REC.OP1NORID = OB1REC.OP1NORID;

  call "OB1940" ("S1", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)

         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/

      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;

    else

         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/

      TA1REC.TA1DBASE = "DORDB   "; /* database name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OB01S7A "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OB1940  "; /* iomod*/

         /* --------------------------------*/
             /* format OB1REC db key in W/S*/
         /* --------------------------------*/

      TA1REC.TA1TBLKE = " ";
      OB01W01.OP1PARTN = OB1REC.OP1PARTN;
      OB01W01.OB01WKCO = OB1REC.OP1CUOID;
      OB01W01.OB01WKNO = OB1REC.OP1NORID;
      TA1REC.TA1TBLKE = OB01W01.OB01WKY1;

      OB01S99(); /* db2 err post routine*/
      OB01S29(); /* force DXFR out*/
    end
  end

end // end OB01S7A

// fetch item
Function OB01S7B()


  call "OB1940" ("N1", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OB01S7C(); /* get size-run rec (OP3REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB01W01.OB01WEOF = "Y";
    else

         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/

      TA1REC.TA1DBASE = "DORDB   "; /* database name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OB01S7B "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OB1940  "; /* iomod*/

         /* --------------------------------*/
             /* format OB1REC db key in W/S*/
         /* --------------------------------*/

      TA1REC.TA1TBLKE = " ";
      OB01W01.OP1PARTN = OB1REC.OP1PARTN;
      OB01W01.OB01WKCO = OB1REC.OP1CUOID;
      OB01W01.OB01WKNO = OB1REC.OP1NORID;
      TA1REC.TA1TBLKE = OB01W01.OB01WKY1;

      OB01S99(); /* db2 retn err routine*/
      OB01S29(); /* force DXFR out*/
    end
  end

end // end OB01S7B

// SELECT DATABASE RECORDS
Function OB01S7C()
       /* **************************************************/
       /* *    SELECT ITEM /SIZE RECORD                   **/
       /* **************************************************/
  set OB3REC empty;
  set OBSFREC empty;
  set SQLCA empty;


  OB3REC.OP1PARTN = OB2REC.OP1PARTN; /* op-ord-part-char*/
  OB3REC.OP1CUOID = OB2REC.OP1CUOID; /* op-cust-ord-id*/
  OB3REC.OP1NORID = OB2REC.OP1NORID; /* op-nike-ord-id*/
  OB3REC.OP2LNINB = OB2REC.OP2LNINB; /* op-line-item-nbr*/


  OBSFREC.OBSF-TASK = "S ";
  OBSFREC.OBSF-CALLER-LOC-1 = "S       ";
  OBSFREC.OBSF-CALLER-LOC-2 = "OB1690  ";
  OBSFREC.OBSF-CALLER-LOC-3 = "OB01S7C ";
  OBSFREC.OBSF-CALLING-APPL = "OB01";
  OBSFREC.OB3GROUP = OB3REC.OB3GROUP;
  OBSFREC.OBSF-RETURN-CD = 99;

  call "OB1690" (OBSFREC) {isNoRefresh = yes, isExternal = yes};

  OB3REC.OB3GROUP = OBSFREC.OB3GROUP;

  if (OBSFREC.OBSF-RETURN-CD == 0 /* good return*/
   || OBSFREC.OBSF-RETURN-CD == 11) /* or no sizes*/
    OB01S7D(); /* select product info*/
  else
    if (OBSFREC.OBSF-RETURN-CD == 1) /* not found*/
      if (OBWREC.CAMSG == " ")
        OBWREC.CAMSG = "PRODUCT NO LONGER ON ORDER";
      end
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      XSOBP09(); /* transfer to product summary*/
    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[2] = "OB1690  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "OB01S07C"; /* statement group*/
      TA1REC.TA1LOCAT[4] = OBSFREC.OBSF-RETURN-CD; /* return code*/
      TA1REC.TA1TBLKE = OBSFREC.OBSF-DIAG-KEY; /* table key*/

      if (OBSFREC.OBSF-RETURN-CD == 14 /* -911 on item*/
       || OBSFREC.OBSF-RETURN-CD == 15) /* -911 on size*/
        XSOBS04(); /* 911 - no rollback*/
      else
        XSOBEDC(); /* retn - no rollback*/
      end
    end
  end



end // end OB01S7C

// get desc-color (SYCREC)
Function OB01S7D()

   /* =========================*/
    /* initialize pass record*/
   /* =========================*/

  set SYCREC empty;
  set SQLCA empty;

   /* ===========================*/
    /* set up key to read sycrec*/
   /* ===========================*/

  SYCREC.XGPCD = OB3REC.XGPCD; /* gpc code*/
  SYCREC.SY1STNBR = OB3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OB3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OB3REC.XDMCD; /* dimension*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OB01S7E(); /* get size-scale (SY4REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      OBWREC.CAMSG = "INVALID PRODUCT, CANNOT ACCESS PREPACK";
      COMMAREA.CAUSERA = OBWREC.OBWGROUP;
      if (COMMAREA.CAFROMAP == "OB0F")
        XSOBP09(); /* transfer to prod summary*/
      else
        XSOBP13(); /* transfer to order batch header*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* dbase busy*/

             /* ---------------------*/
                /* D X F R  to self*/
             /* ---------------------*/

        sysVar.transferName = COMMAREA.CACURRAP;
        transfer to program sysVar.transferName passing COMMAREA;

      else

             /* ------------------------------------*/
                /* format data for db2 err posting*/
             /* ------------------------------------*/

        TA1REC.TA1DBASE = "DPROD   "; /* database name*/
        TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
        TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
        TA1REC.TA1LOCAT[2] = "OB01S7D "; /* statement grp*/
        TA1REC.TA1LOCAT[3] = "IO0560  "; /* iomod*/

             /* --------------------------------*/
                 /* format db key in W/S*/
             /* --------------------------------*/

        TA1REC.TA1TBLKE = " ";
        OB01W01.XGPCD = OB3REC.XGPCD; /* gpc code*/
        OB01W01.SY1STNBR = OB3REC.SY1STNBR; /* style*/
        OB01W01.SY2CLRID = OB3REC.SY2CLRID; /* color*/
        OB01W01.XDMCD = OB3REC.XDMCD; /* dimension*/
        TA1REC.TA1TBLKE = OB01W01.OB01WKY3;

        OB01S99(); /* db2 retn err routine*/
        OB01S29(); /* force DXFR out*/
      end
    end
  end

end // end OB01S7D

// get size-scale (SY4REC)
Function OB01S7E()

  set SY4REC empty; /* init sy4rec*/

      /* ********************************************************/
      /* * read db2 for the product's size scale code          **/
      /* * this give us a record with 40 size descriptions     **/
      /* ********************************************************/

   /* =======================================*/
      /* set up key to read dbase record*/
   /* =======================================*/

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL; /* scale code*/

   /* =================*/
      /* read db2*/
   /* =================*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/

   /* ===========================*/
      /* check db2 return code*/
   /* ===========================*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dbase busy*/

         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/

      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;

    else

         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/

      TA1REC.TA1DBASE = "DPROD   "; /* database name*/
      TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OB01S7E "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "IO0040  "; /* iomod*/

         /* --------------------------------*/
             /* format  db key in W/S*/
         /* --------------------------------*/

      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1TBLKE = SYCREC.SY4SZSCL;

      OB01S99(); /* db2 retn err post*/
      OB01S29(); /* force DXFR out*/
    end
  end

end // end OB01S7E

// move to temp stor
Function OB01S7F()

     /* move fields to temp storage*/




   /* IF OB2REC.OP2LNIST = 'AL';        /* item allocated*/
    /* MOVE 'A' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
    /* MOVE 'A' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
   /* ELSE;*/
    /* IF OB2REC.OP2LNIST = 'PA';      /* item partially allocated*/
      /* MOVE 'P' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
      /* MOVE 'P' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
    /* ELSE;                           /* xl orders are excluded*/
      /* MOVE ' ' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
      /* MOVE ' ' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
    /* END;*/
   /* END;*/

  OBSPREC.OBSPSELTD[OB01WSUB] = " "; /* select code*/
  OB01W02.OBSPSELTD[OB01WSUB] = " "; /* select code*/

  OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] = 0; /* pkg no.*/
  OB01W02.OP-PREPK-PKG-NBR[OB01WSUB] = 0; /* pkg no.*/

  OBSPREC.SY1STNBR[OB01WSUB] = OB3REC.SY1STNBR; /* style no.*/
  OB01W02.SY1STNBR[OB01WSUB] = OB3REC.SY1STNBR; /* style no.*/

  OBSPREC.OBSPPER1[OB01WSUB] = "-";
  OB01W02.OBSPPER1[OB01WSUB] = "-";

  OBSPREC.SY2CLRID[OB01WSUB] = OB3REC.SY2CLRID; /* color code id*/
  OB01W02.SY2CLRID[OB01WSUB] = OB3REC.SY2CLRID; /* color code id*/

  OBSPREC.OBSPPER2[OB01WSUB] = "-";
  OB01W02.OBSPPER2[OB01WSUB] = "-";

  OBSPREC.XDMCD[OB01WSUB] = OB3REC.XDMCD; /* dimension code*/
  OB01W02.XDMCD[OB01WSUB] = OB3REC.XDMCD; /* dimension code*/

  OBSPREC.OP2CGPCD[OB01WSUB] = OB3REC.OP2CGPCD; /* group code*/
  OB01W02.OP2CGPCD[OB01WSUB] = OB3REC.OP2CGPCD; /* group code*/

  OBSPREC.SY1SSTNM[OB01WSUB] = SYCREC.SY1SSTNM; /* short style name*/
  OB01W02.SY1SSTNM[OB01WSUB] = SYCREC.SY1SSTNM; /* short style name*/

  OBSPREC.SY2CLRAB[OB01WSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  OB01W02.SY2CLRAB[OB01WSUB] = SYCREC.SY2CLRAB; /* color abbrev*/

  OBSPREC.OP2LNINB[OB01WSUB] = OB3REC.OP2LNINB; /* line item no.*/
  OB01W02.OP2LNINB[OB01WSUB] = OB3REC.OP2LNINB; /* line item no.*/

  OBSPREC.KUFMIXBL[OB01WSUB] = OB1REC.KUFMIXBL; /* alw mix box flag*/
  OB01W02.KUFMIXBL[OB01WSUB] = OB1REC.KUFMIXBL; /* alw mix box flag*/
  if (OBSPREC.KUFMIXBL[OB01WSUB] == " ")
    OBSPREC.KUFMIXBL[OB01WSUB] = "N"; /* init flag*/
    OB01W02.KUFMIXBL[OB01WSUB] = "N"; /* init flag*/
  end

  OBSPREC.KUCUNTCS[OB01WSUB] = OB1REC.KUCUNTCS; /* unit per crtn*/
  OB01W02.KUCUNTCS[OB01WSUB] = OB1REC.KUCUNTCS; /* unit per crtn*/

  OBSPREC.SY4SZSCL[OB01WSUB] = SYCREC.SY4SZSCL; /* size class code*/
  OB01W02.SY4SZSCL[OB01WSUB] = SYCREC.SY4SZSCL; /* size class code*/

  OBSPREC.YNTCD[OB01WSUB] = " "; /* carton type*/
  OB01W02.YNTCD[OB01WSUB] = " "; /* carton type*/

    /* this change count will be used in OB02*/
  OBSPREC.ZZZCHGCT[OB01WSUB] = 0; /* change count*/
  OB01W02.ZZZCHGCT[OB01WSUB] = 0; /* change count*/

  OB01S7X(); /* init. TS 20 occurrences w/ zeros*/

  OB01S7Y(); /* load qty & desc (20 occurs)*/

end // end OB01S7F

// write temp storage
Function OB01S7G()


  TA5REC.TA5APPID = "OB01"; /* appl identification*/

  TA5REC.TA5FNCCD = "A"; /* function code 'a' to add*/

  OBSPREC.OBSPTSLEN = 3820;

  call "TA0050" (OBSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor routine*/

  if (TA5REC.TA5RTNCD == 0) /* successful addition to TS*/
    set OBSPREC empty;
    OB01W01.OB01WPGC = OB01W01.OB01WPGC + 1;
  else
    OB01S29(); /* force DXFR out*/
  end

  if (OB01W02.OBSPSZI01[1] > " "
   || OB01W02.OBSPSZI01[2] > " "
   || OB01W02.OBSPSZI01[3] > " "
   || OB01W02.OBSPSZI01[4] > " "
   || OB01W02.OBSPSZI01[5] > " "
   || OB01W02.OBSPSZI01[6] > " "
   || OB01W02.OBSPSZI01[7] > " "
   || OB01W02.OBSPSZI01[8] > " "
   || OB01W02.OBSPSZI01[9] > " "
   || OB01W02.OBSPSZI01[10] > " "
   || OB01W02.OBSPSZI01[11] > " "
   || OB01W02.OBSPSZI01[12] > " ")

    TA5REC.TA5APPID = "OB01"; /* appl identification*/

    TA5REC.TA5FNCCD = "A"; /* function code 'a' to add*/

    OB01W02.OBSPTSLEN = 3820;
    call "TA0050" (OB01W02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor routine*/

    if (TA5REC.TA5RTNCD == 0) /* successful addition to TS*/
      set OB01W02 empty;
      OB01W01.OB01WPGC = OB01W01.OB01WPGC + 1;
    else
      OB01S29(); /* force DXFR out*/
    end

  end
end // end OB01S7G

// close item cursor
Function OB01S7H()

  call "OB1940" ("C1", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1LOCAT[1] = "OB01000"; /* process name*/
    TA1REC.TA1LOCAT[2] = "OB01S7H"; /* statement grp*/
    TA1REC.TA1LOCAT[3] = "OB1940 "; /* iomod*/
    OB01S99(); /* db2 retn err routine*/
    OB01S29(); /* force DXFR out*/
  end

end // end OB01S7H

// declare item/prepack
Function OB01S7I()


  set SQLCA empty;
  set OB2REC empty;
  set VBCSPR01 empty;

   /* ======================*/
   /* set up key to OP2REC*/
   /* ======================*/

  OB2REC.OP1PARTN = OB1REC.OP1PARTN;
  OB2REC.OP1CUOID = OB1REC.OP1CUOID;
  OB2REC.OP1NORID = OB1REC.OP1NORID;

   /* ======================*/
   /* set up key to VBCSPR01*/
   /* ======================*/

  VBCSPR01.OP1PARTN = OB1REC.OP1PARTN;
  VBCSPR01.OP1CUOID = OB1REC.OP1CUOID;
  VBCSPR01.OP1NORID = OB1REC.OP1NORID;

   /* =====================================*/
   /* function code 'S2' will do a join*/
   /* =====================================*/

  call "OB1940" ("S2", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)

         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/

      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;

    else

         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/

      TA1REC.TA1DBASE = "DORDB   "; /* database name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OB01S7I "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OB1940  "; /* iomod*/

         /* --------------------------------*/
             /* format OB1REC db key in W/S*/
         /* --------------------------------*/

      TA1REC.TA1TBLKE = " ";
      OB01W01.OP1PARTN = OB1REC.OP1PARTN;
      OB01W01.OB01WKCO = OB1REC.OP1CUOID;
      OB01W01.OB01WKNO = OB1REC.OP1NORID;
      TA1REC.TA1TBLKE = OB01W01.OB01WKY1;

      OB01S99(); /* db2 err post routine*/
      OB01S29(); /* force DXFR out*/
    end
  end

end // end OB01S7I

// fetch item/prepack
Function OB01S7J()


  call "OB1940" ("N2", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OB01S7C(); /* get size-run rec (OB3REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OB01W01.OB01WEOF = "Y";
    else

         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/

      TA1REC.TA1DBASE = "DORDB   "; /* database name*/
      TA1REC.TA1TBLVU = "VBITEM01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OB01000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OB01S7J "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OB1940  "; /* iomod*/

         /* --------------------------------*/
             /* format OB1REC db key in W/S*/
         /* --------------------------------*/

      TA1REC.TA1TBLKE = " ";
      OB01W01.OP1PARTN = OB1REC.OP1PARTN;
      OB01W01.OB01WKCO = OB1REC.OP1CUOID;
      OB01W01.OB01WKNO = OB1REC.OP1NORID;
      TA1REC.TA1TBLKE = OB01W01.OB01WKY1;

      OB01S99(); /* db2 err retn routine*/
      OB01S29(); /* force DXFR out*/
    end
  end

end // end OB01S7J

// CHECK FOR PREPACK
Function OB01S7M()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OBSWREC.OBSWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OB1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OB1REC.XGPCD == "02") /* footwear order*/
    if (OB1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set VBCSPR01 empty;
  set SQLCA empty;

  VBCSPR01.XWHCD = OB1REC.XWHCD; /* WAREHOUSE*/
  VBCSPR01.OP1PARTN = OB1REC.OP1PARTN; /* PART CHAR*/
  VBCSPR01.OP1CUOID = OB1REC.OP1CUOID; /* ORDER NUM*/
  VBCSPR01.OP1NORID = OB1REC.OP1NORID; /* NIKE ORD ID*/

  call "VBCSPR01" ("SE", SQLCA, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* move than one record found is ok*/
    OBSWREC.OBSWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OBSWREC.OBSWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        sysVar.transferName = COMMAREA.CACURRAP;
        transfer to program sysVar.transferName passing COMMAREA;
      else
        set SQLCA empty;
        TA1REC.TA1TYPE = "DB2     ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OB01S7M ";
        TA1REC.TA1LOCAT[3] = "VBCSPR01  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OB01W01.OP1PARTN = OB1REC.OP1PARTN;
        OB01W01.OB01WKCO = OB1REC.OP1CUOID;
        OB01W01.OB01WKNO = OB1REC.OP1NORID;
        TA1REC.TA1TBLKE = OB01W01.OB01WKY1;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OB01";
        transfer to program "OB0A" passing COMMAREA;
      end
    end
  end

end // end OB01S7M

// move to temp stor
Function OB01S7N()


   /* IF OB2REC.OP2LNIST EQ 'XL';*/
    /* MOVE '*' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
    /* MOVE '*' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
   /* ELSE;*/
    /* IF OB2REC.OP2LNIST EQ 'AL';     /* allocated*/
      /* MOVE 'A' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
      /* MOVE 'A' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
    /* ELSE;*/
      /* IF OB2REC.OP2LNIST EQ 'PA';   /* partially allocated*/
        /* MOVE 'P' TO OBSPREC.OBSPDELET(OB01WSUB); /* delete code*/
        /* MOVE 'P' TO OB01W02.OBSPDELET(OB01WSUB); /* delete code*/
      /* ELSE;*/
        /* MOVE ' ' TO OBSPREC.OBSPDELET(OB01WSUB);*/
        /* MOVE ' ' TO OB01W02.OBSPDELET(OB01WSUB);*/
      /* END;*/
    /* END;*/
   /* END;*/

  OBSPREC.OBSPSELTD[OB01WSUB] = " "; /* select code*/
  OB01W02.OBSPSELTD[OB01WSUB] = " "; /* select code*/

    /* ---------------------------------*/
    /* move the pkg no. to w/s first coz*/
    /* the pkg no. from VBCSPR01 is binary*/
    /* and the receiving field in OBSPREC*/
    /* is CHA.*/
    /* ---------------------------------*/

  OB01W01.OP-PREPK-PKG-NBR = VBCSPR01.OP-PREPK-PKG-NBR;
  OBSPREC.OP-PREPK-PKG-NBR[OB01WSUB] = OB01W01.OP-PREPK-PKG-NBR;
  OB01W02.OP-PREPK-PKG-NBR[OB01WSUB] = OB01W01.OP-PREPK-PKG-NBR;

  OBSPREC.SY1STNBR[OB01WSUB] = OB3REC.SY1STNBR; /* style no.*/
  OB01W02.SY1STNBR[OB01WSUB] = OB3REC.SY1STNBR; /* style no.*/

  OBSPREC.OBSPPER1[OB01WSUB] = "-";
  OB01W02.OBSPPER1[OB01WSUB] = "-";

  OBSPREC.SY2CLRID[OB01WSUB] = OB3REC.SY2CLRID; /* color code id*/
  OB01W02.SY2CLRID[OB01WSUB] = OB3REC.SY2CLRID; /* color code id*/

  OBSPREC.OBSPPER2[OB01WSUB] = "-";
  OB01W02.OBSPPER2[OB01WSUB] = "-";

  OBSPREC.XDMCD[OB01WSUB] = OB3REC.XDMCD; /* dimension code*/
  OB01W02.XDMCD[OB01WSUB] = OB3REC.XDMCD; /* dimension code*/

  OBSPREC.OP2CGPCD[OB01WSUB] = OB3REC.OP2CGPCD; /* group code*/
  OB01W02.OP2CGPCD[OB01WSUB] = OB3REC.OP2CGPCD; /* group code*/

  OBSPREC.SY1SSTNM[OB01WSUB] = SYCREC.SY1SSTNM; /* short style name*/
  OB01W02.SY1SSTNM[OB01WSUB] = SYCREC.SY1SSTNM; /* short style name*/

  OBSPREC.SY2CLRAB[OB01WSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  OB01W02.SY2CLRAB[OB01WSUB] = SYCREC.SY2CLRAB; /* color abbrev*/

  OBSPREC.OP2LNINB[OB01WSUB] = OB3REC.OP2LNINB; /* line item no.*/
  OB01W02.OP2LNINB[OB01WSUB] = OB3REC.OP2LNINB; /* line item no.*/

  OBSPREC.PKTBACTI[OB01WSUB] = VBCSPR01.PKTBACTI; /* beg. act sz id*/
  OB01W02.PKTBACTI[OB01WSUB] = VBCSPR01.PKTBACTI; /* beg. act sz id*/

  OBSPREC.KUFMIXBL[OB01WSUB] = VBCSPR01.KUFMIXBL; /* alw. mix box fl*/
  OB01W02.KUFMIXBL[OB01WSUB] = VBCSPR01.KUFMIXBL; /* alw. mix box fl*/

  OBSPREC.KUCUNTCS[OB01WSUB] = VBCSPR01.KUCUNTCS; /* unit per crtn*/
  OB01W02.KUCUNTCS[OB01WSUB] = VBCSPR01.KUCUNTCS; /* unit per crtn*/

  OBSPREC.SY4SZSCL[OB01WSUB] = SYCREC.SY4SZSCL; /* size class code*/
  OB01W02.SY4SZSCL[OB01WSUB] = SYCREC.SY4SZSCL; /* size class code*/

  OBSPREC.YNTCD[OB01WSUB] = VBCSPR01.YNTCD; /* carton type*/
  OB01W02.YNTCD[OB01WSUB] = VBCSPR01.YNTCD; /* carton type*/

    /* this change count will be used in OB02*/
  OBSPREC.ZZZCHGCT[OB01WSUB] = VBCSPR01.ZZZCHGCT; /* change count*/
  OB01W02.ZZZCHGCT[OB01WSUB] = VBCSPR01.ZZZCHGCT; /* change count*/

  OB01S7X(); /* init. TS 20 occurrences w/ zeros*/

  OB01S7Z(); /* load qty & desc (20 occurs)*/

end // end OB01S7N

// close item/prepack cursor
Function OB01S7P()

  call "OB1940" ("C2", SQLCA, OB2REC, VBCSPR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1LOCAT[1] = "OB01000"; /* process name*/
    TA1REC.TA1LOCAT[2] = "OB01S7P"; /* statement grp*/
    TA1REC.TA1LOCAT[3] = "OB1940 "; /* iomod*/
    OB01S99(); /* db2 err retn routine*/
    OB01S29(); /* force DXFR out*/
  end

end // end OB01S7P

// load from W/S to T/S
Function OB01S7W()


   /* =================================*/
    /* load prepack quantities*/
   /* =================================*/

  OBSPREC.OBSPPQ01[OB01WSUB] = OB01W01.OB01WPPQ[1];
  OBSPREC.OBSPPQ02[OB01WSUB] = OB01W01.OB01WPPQ[2];
  OBSPREC.OBSPPQ03[OB01WSUB] = OB01W01.OB01WPPQ[3];
  OBSPREC.OBSPPQ04[OB01WSUB] = OB01W01.OB01WPPQ[4];
  OBSPREC.OBSPPQ05[OB01WSUB] = OB01W01.OB01WPPQ[5];
  OBSPREC.OBSPPQ06[OB01WSUB] = OB01W01.OB01WPPQ[6];
  OBSPREC.OBSPPQ07[OB01WSUB] = OB01W01.OB01WPPQ[7];
  OBSPREC.OBSPPQ08[OB01WSUB] = OB01W01.OB01WPPQ[8];
  OBSPREC.OBSPPQ09[OB01WSUB] = OB01W01.OB01WPPQ[9];
  OBSPREC.OBSPPQ10[OB01WSUB] = OB01W01.OB01WPPQ[10];
  OBSPREC.OBSPPQ11[OB01WSUB] = OB01W01.OB01WPPQ[11];
  OBSPREC.OBSPPQ12[OB01WSUB] = OB01W01.OB01WPPQ[12];
  OBSPREC.OBSPPQ13[OB01WSUB] = OB01W01.OB01WPPQ[13];
  OBSPREC.OBSPPQ14[OB01WSUB] = OB01W01.OB01WPPQ[14];
  OBSPREC.OBSPPQ15[OB01WSUB] = OB01W01.OB01WPPQ[15];
  OBSPREC.OBSPPQ16[OB01WSUB] = OB01W01.OB01WPPQ[16];
  OBSPREC.OBSPPQ17[OB01WSUB] = OB01W01.OB01WPPQ[17];
  OBSPREC.OBSPPQ18[OB01WSUB] = OB01W01.OB01WPPQ[18];
  OBSPREC.OBSPPQ19[OB01WSUB] = OB01W01.OB01WPPQ[19];
  OBSPREC.OBSPPQ20[OB01WSUB] = OB01W01.OB01WPPQ[20];
  OB01W02.OBSPPQ01[OB01WSUB] = OB01W01.OB01WPPQ[21];
  OB01W02.OBSPPQ02[OB01WSUB] = OB01W01.OB01WPPQ[22];
  OB01W02.OBSPPQ03[OB01WSUB] = OB01W01.OB01WPPQ[23];
  OB01W02.OBSPPQ04[OB01WSUB] = OB01W01.OB01WPPQ[24];
  OB01W02.OBSPPQ05[OB01WSUB] = OB01W01.OB01WPPQ[25];
  OB01W02.OBSPPQ06[OB01WSUB] = OB01W01.OB01WPPQ[26];
  OB01W02.OBSPPQ07[OB01WSUB] = OB01W01.OB01WPPQ[27];
  OB01W02.OBSPPQ08[OB01WSUB] = OB01W01.OB01WPPQ[28];
  OB01W02.OBSPPQ09[OB01WSUB] = OB01W01.OB01WPPQ[29];
  OB01W02.OBSPPQ10[OB01WSUB] = OB01W01.OB01WPPQ[30];
  OB01W02.OBSPPQ11[OB01WSUB] = OB01W01.OB01WPPQ[31];
  OB01W02.OBSPPQ12[OB01WSUB] = OB01W01.OB01WPPQ[32];
  OB01W02.OBSPPQ13[OB01WSUB] = OB01W01.OB01WPPQ[33];
  OB01W02.OBSPPQ14[OB01WSUB] = OB01W01.OB01WPPQ[34];
  OB01W02.OBSPPQ15[OB01WSUB] = OB01W01.OB01WPPQ[35];
  OB01W02.OBSPPQ16[OB01WSUB] = OB01W01.OB01WPPQ[36];
  OB01W02.OBSPPQ17[OB01WSUB] = OB01W01.OB01WPPQ[37];
  OB01W02.OBSPPQ18[OB01WSUB] = OB01W01.OB01WPPQ[38];
  OB01W02.OBSPPQ19[OB01WSUB] = OB01W01.OB01WPPQ[39];
  OB01W02.OBSPPQ20[OB01WSUB] = OB01W01.OB01WPPQ[40];

   /* =================================*/
    /* load on-order quantities*/
   /* =================================*/

  OBSPREC.OBSPORQ01[OB01WSUB] = OB01W01.OB01WORQ[1];
  OBSPREC.OBSPORQ02[OB01WSUB] = OB01W01.OB01WORQ[2];
  OBSPREC.OBSPORQ03[OB01WSUB] = OB01W01.OB01WORQ[3];
  OBSPREC.OBSPORQ04[OB01WSUB] = OB01W01.OB01WORQ[4];
  OBSPREC.OBSPORQ05[OB01WSUB] = OB01W01.OB01WORQ[5];
  OBSPREC.OBSPORQ06[OB01WSUB] = OB01W01.OB01WORQ[6];
  OBSPREC.OBSPORQ07[OB01WSUB] = OB01W01.OB01WORQ[7];
  OBSPREC.OBSPORQ08[OB01WSUB] = OB01W01.OB01WORQ[8];
  OBSPREC.OBSPORQ09[OB01WSUB] = OB01W01.OB01WORQ[9];
  OBSPREC.OBSPORQ10[OB01WSUB] = OB01W01.OB01WORQ[10];
  OBSPREC.OBSPORQ11[OB01WSUB] = OB01W01.OB01WORQ[11];
  OBSPREC.OBSPORQ12[OB01WSUB] = OB01W01.OB01WORQ[12];
  OBSPREC.OBSPORQ13[OB01WSUB] = OB01W01.OB01WORQ[13];
  OBSPREC.OBSPORQ14[OB01WSUB] = OB01W01.OB01WORQ[14];
  OBSPREC.OBSPORQ15[OB01WSUB] = OB01W01.OB01WORQ[15];
  OBSPREC.OBSPORQ16[OB01WSUB] = OB01W01.OB01WORQ[16];
  OBSPREC.OBSPORQ17[OB01WSUB] = OB01W01.OB01WORQ[17];
  OBSPREC.OBSPORQ18[OB01WSUB] = OB01W01.OB01WORQ[18];
  OBSPREC.OBSPORQ19[OB01WSUB] = OB01W01.OB01WORQ[19];
  OBSPREC.OBSPORQ20[OB01WSUB] = OB01W01.OB01WORQ[20];
  OB01W02.OBSPORQ01[OB01WSUB] = OB01W01.OB01WORQ[21];
  OB01W02.OBSPORQ02[OB01WSUB] = OB01W01.OB01WORQ[22];
  OB01W02.OBSPORQ03[OB01WSUB] = OB01W01.OB01WORQ[23];
  OB01W02.OBSPORQ04[OB01WSUB] = OB01W01.OB01WORQ[24];
  OB01W02.OBSPORQ05[OB01WSUB] = OB01W01.OB01WORQ[25];
  OB01W02.OBSPORQ06[OB01WSUB] = OB01W01.OB01WORQ[26];
  OB01W02.OBSPORQ07[OB01WSUB] = OB01W01.OB01WORQ[27];
  OB01W02.OBSPORQ08[OB01WSUB] = OB01W01.OB01WORQ[28];
  OB01W02.OBSPORQ09[OB01WSUB] = OB01W01.OB01WORQ[29];
  OB01W02.OBSPORQ10[OB01WSUB] = OB01W01.OB01WORQ[30];
  OB01W02.OBSPORQ11[OB01WSUB] = OB01W01.OB01WORQ[31];
  OB01W02.OBSPORQ12[OB01WSUB] = OB01W01.OB01WORQ[32];
  OB01W02.OBSPORQ13[OB01WSUB] = OB01W01.OB01WORQ[33];
  OB01W02.OBSPORQ14[OB01WSUB] = OB01W01.OB01WORQ[34];
  OB01W02.OBSPORQ15[OB01WSUB] = OB01W01.OB01WORQ[35];
  OB01W02.OBSPORQ16[OB01WSUB] = OB01W01.OB01WORQ[36];
  OB01W02.OBSPORQ17[OB01WSUB] = OB01W01.OB01WORQ[37];
  OB01W02.OBSPORQ18[OB01WSUB] = OB01W01.OB01WORQ[38];
  OB01W02.OBSPORQ19[OB01WSUB] = OB01W01.OB01WORQ[39];
  OB01W02.OBSPORQ20[OB01WSUB] = OB01W01.OB01WORQ[40];

   /* =================================*/
    /* load size id desc*/
   /* =================================*/

  OBSPREC.OBSPSZI01[OB01WSUB] = OB01W01.OB01WSZI[1];
  OBSPREC.OBSPSZI02[OB01WSUB] = OB01W01.OB01WSZI[2];
  OBSPREC.OBSPSZI03[OB01WSUB] = OB01W01.OB01WSZI[3];
  OBSPREC.OBSPSZI04[OB01WSUB] = OB01W01.OB01WSZI[4];
  OBSPREC.OBSPSZI05[OB01WSUB] = OB01W01.OB01WSZI[5];
  OBSPREC.OBSPSZI06[OB01WSUB] = OB01W01.OB01WSZI[6];
  OBSPREC.OBSPSZI07[OB01WSUB] = OB01W01.OB01WSZI[7];
  OBSPREC.OBSPSZI08[OB01WSUB] = OB01W01.OB01WSZI[8];
  OBSPREC.OBSPSZI09[OB01WSUB] = OB01W01.OB01WSZI[9];
  OBSPREC.OBSPSZI10[OB01WSUB] = OB01W01.OB01WSZI[10];
  OBSPREC.OBSPSZI11[OB01WSUB] = OB01W01.OB01WSZI[11];
  OBSPREC.OBSPSZI12[OB01WSUB] = OB01W01.OB01WSZI[12];
  OBSPREC.OBSPSZI13[OB01WSUB] = OB01W01.OB01WSZI[13];
  OBSPREC.OBSPSZI14[OB01WSUB] = OB01W01.OB01WSZI[14];
  OBSPREC.OBSPSZI15[OB01WSUB] = OB01W01.OB01WSZI[15];
  OBSPREC.OBSPSZI16[OB01WSUB] = OB01W01.OB01WSZI[16];
  OBSPREC.OBSPSZI17[OB01WSUB] = OB01W01.OB01WSZI[17];
  OBSPREC.OBSPSZI18[OB01WSUB] = OB01W01.OB01WSZI[18];
  OBSPREC.OBSPSZI19[OB01WSUB] = OB01W01.OB01WSZI[19];
  OBSPREC.OBSPSZI20[OB01WSUB] = OB01W01.OB01WSZI[20];
  OB01W02.OBSPSZI01[OB01WSUB] = OB01W01.OB01WSZI[21];
  OB01W02.OBSPSZI02[OB01WSUB] = OB01W01.OB01WSZI[22];
  OB01W02.OBSPSZI03[OB01WSUB] = OB01W01.OB01WSZI[23];
  OB01W02.OBSPSZI04[OB01WSUB] = OB01W01.OB01WSZI[24];
  OB01W02.OBSPSZI05[OB01WSUB] = OB01W01.OB01WSZI[25];
  OB01W02.OBSPSZI06[OB01WSUB] = OB01W01.OB01WSZI[26];
  OB01W02.OBSPSZI07[OB01WSUB] = OB01W01.OB01WSZI[27];
  OB01W02.OBSPSZI08[OB01WSUB] = OB01W01.OB01WSZI[28];
  OB01W02.OBSPSZI09[OB01WSUB] = OB01W01.OB01WSZI[29];
  OB01W02.OBSPSZI10[OB01WSUB] = OB01W01.OB01WSZI[30];
  OB01W02.OBSPSZI11[OB01WSUB] = OB01W01.OB01WSZI[31];
  OB01W02.OBSPSZI12[OB01WSUB] = OB01W01.OB01WSZI[32];
  OB01W02.OBSPSZI13[OB01WSUB] = OB01W01.OB01WSZI[33];
  OB01W02.OBSPSZI14[OB01WSUB] = OB01W01.OB01WSZI[34];
  OB01W02.OBSPSZI15[OB01WSUB] = OB01W01.OB01WSZI[35];
  OB01W02.OBSPSZI16[OB01WSUB] = OB01W01.OB01WSZI[36];
  OB01W02.OBSPSZI17[OB01WSUB] = OB01W01.OB01WSZI[37];
  OB01W02.OBSPSZI18[OB01WSUB] = OB01W01.OB01WSZI[38];
  OB01W02.OBSPSZI19[OB01WSUB] = OB01W01.OB01WSZI[39];
  OB01W02.OBSPSZI20[OB01WSUB] = OB01W01.OB01WSZI[40];

  if (OB01W02.OBSPSZI01[OB01WSUB] > " ") /* more that 20 sizes*/
    OBSPREC.OBSPMORE[OB01WSUB] = "Y"; /* set more sizes indicator*/
    OB01W02.OBSPMORE[OB01WSUB] = "2";
  else
    OBSPREC.OBSPMORE[OB01WSUB] = "N"; /* set to no*/
    OB01W02.OBSPMORE[OB01WSUB] = " ";
  end

end // end OB01S7W

// init WS 20 occurs
Function OB01S7X()


   /* =========================*/
    /* init  subscript*/
   /* =========================*/

  OB01W01.OB01WSB2 = 1;


   /* ===========================*/
    /* init W/S 40 occurrences*/
   /* ===========================*/

  while (OB01W01.OB01WSB2 <= 40)
    OB01W01.OB01WORQ[OB01WSB2] = 0;
    OB01W01.OB01WPPQ[OB01WSB2] = 0;
    OB01W01.OB01WSZI[OB01WSB2] = " ";
    OB01W01.OB01WSB2 = OB01W01.OB01WSB2 + 1;
  end


end // end OB01S7X

// load TS 20 occurs
Function OB01S7Y()


   /* ===============================*/
    /* init subscripts*/
   /* ===============================*/
    /* OB01WSB1 = subscript for the*/
               /* 40 occurrences in*/
               /* OB3REC*/

    /* OB01WSB2 = subscript for the*/
               /* 40 occurrences in*/
               /* OBSPREC*/

  OB01W01.OB01WSB1 = 1;
  OB01W01.OB01WSB2 = 0;

   /* =================================*/
    /* load on-order quantities,*/
         /* active size flags,*/
         /* size id-desc*/
    /* to   working storage record*/
   /* =================================*/

  while (OB01W01.OB01WSB1 <= 40)

    if (OB3REC.OP3SZAFL[OB01WSB1] == "Y" /* size active*/
     && OB3REC.OP3ONOQT[OB01WSB1] > 0)   /* non-zero on-ord qty*/

      OB01W01.OB01WSB2 = OB01W01.OB01WSB2 + 1;

      if (OB01W01.OB01WSB2 == 1) /* first active size*/
        OBSPREC.PKTBACTI[OB01WSUB] = OB01W01.OB01WSB1;
      end

      if (OB01W01.OB01WSB2 <= 41)
        OB01W01.OB01WORQ[OB01WSB2] = OB3REC.OP3ONOQT[OB01WSB1];
        OB01W01.OB01WSZI[OB01WSB2] = SY4REC.SY4IDDSC[OB01WSB1];
      else
        TA1REC.TA1LOCAT[1] = "OB01000"; /* process name*/
        TA1REC.TA1LOCAT[2] = "OB01S7Y"; /* statement grp*/
        TAEREC.TAEDESC1 = " OVERFLOW IN TS 40 OCCURRENCES ";
        OB01S98(); /* post, non-db2 err*/
        OB01S29(); /* force DXFR out*/
      end

    end

    OB01W01.OB01WSB1 = OB01W01.OB01WSB1 + 1;

  end


   /* =======================================*/
    /* L O A D   F R O M   W/S   T O   T/S*/
   /* =======================================*/

  OB01S7W();

end // end OB01S7Y

// load TS qty/desc (20 occurs)
Function OB01S7Z()


   /* ===============================*/
    /* init subscripts*/
   /* ===============================*/
    /* OB01WSB1 = subscript for the*/
               /* 40 occurrences in*/
               /* OP3REC*/

    /* OB01WSB2 = subscript for the*/
               /* 40 occurrences in*/
               /* OBSPREC*/

  OB01W01.OB01WSB1 = 1;
  OB01W01.OB01WSB2 = 0;

   /* =================================*/
    /* load on-order quantities,*/
         /* active size flags,*/
         /* size id-desc*/
    /* to   working storage record*/
   /* =================================*/

  while (OB01W01.OB01WSB1 <= 40)

    if (OB3REC.OP3SZAFL[OB01WSB1] == "Y" /* size active*/
     && OB3REC.OP3ONOQT[OB01WSB1] > 0)   /* non-zero on-ord qty*/

      OB01W01.OB01WSB2 = OB01W01.OB01WSB2 + 1;

      if (OB01W01.OB01WSB2 <= 41)
        OB01W01.OB01WORQ[OB01WSB2] = OB3REC.OP3ONOQT[OB01WSB1];
        OB01W01.OB01WPPQ[OB01WSB2] = VBCSPR01.PKTPPQTY[OB01WSB1];
        OB01W01.OB01WSZI[OB01WSB2] = SY4REC.SY4IDDSC[OB01WSB1];
      else
        TA1REC.TA1LOCAT[1] = "OB01000"; /* process name*/
        TA1REC.TA1LOCAT[2] = "OB01S7Z"; /* statement grp*/
        TAEREC.TAEDESC1 = " OVERFLOW IN TS 40 OCCURRENCES";
        OB01S98(); /* post, non-db2 err*/
        OB01S29(); /* force DXFR out*/
      end

    end

    OB01W01.OB01WSB1 = OB01W01.OB01WSB1 + 1;

  end


   /* =======================================*/
    /* L O A D   F R O M   W/S   T O   T/S*/
   /* =======================================*/

  OB01S7W();

end // end OB01S7Z

// pf4 edit - MN0M
Function OB01S80()


   /* =============================*/
   /* pf4 edit - return to MN0M*/
   /* =============================*/

  OB01S26(); /* purge temp stor*/
  XSPF4(); /* master menu (MN0M)*/


end // end OB01S80

// post non-db2 err
Function OB01S98()


  TA1REC.TA1TYPE = "APPL";

  TA1REC.TA1FUNC = "POST";

  TA1PGMNM = COMMAREA.CACURRAP;

  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end OB01S98

// db2 retn err routine
Function OB01S99()


  set ERRSQLCA empty;

  move SQLCA to ERRSQLCA withV60Compat;

  TA1REC.TA1TYPE = "DB2";

  TA1REC.TA1FUNC = "RETN";

  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* currrent applic.*/

  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end OB01S99

//*** RECORD=OB01W01 ****
// ; **********************************************************
// ;    This is the working storage record containing the
// ;    data fields for flags, subscripts, reformatted data
// ;    (e.g. order no., cust. no., date), current page
// ; **********************************************************
// ;
// ;  MAINTENANCE HISTORY
// ;
// ;  DATE      WHO   COMMENTS
// ; ------    -----  ----------------------------------------
// ; 01/01/97  wleong record creation.
// ;
// ***********************
Record OB01W01 type basicRecord
  10 OB01WORD OB01WORD ; 
    15 OB01WCOI OB01WCOI ; 
    15 OB01WPR1 OB01WPR1 ; 
    15 OB01WNOI OB01WNOI ; 
  10 OB01WCUS OB01WCUS ; 
    15 OB01WCCI OB01WCCI ; 
    15 OB01WPR2 OB01WPR2 ; 
    15 OB01WSTI OB01WSTI ; 
    15 OB01WPR3 OB01WPR3 ; 
    15 OB01WDEP OB01WDEP ; 
  10 OB01WEDT OB01WEDT ; 
    15 OB01WEYY OB01WEYY ; 
    15 OB01WEMM OB01WEMM ; 
    15 OB01WEDD OB01WEDD ; 
  10 OB01WCDT OB01WCDT ; 
    15 OB01WCMM OB01WCMM ; 
    15 OB01WDS1 OB01WDS1 ; 
    15 OB01WCDD OB01WCDD ; 
    15 OB01WDS2 OB01WDS2 ; 
    15 OB01WCYY OB01WCYY ; 
  10 OB01WPGC OB01WPGC ; 
  10 OB01WCPG OB01WCPG ; 
  10 OB01WSUB OB01WSUB ; 
  10 OB01WSB1 OB01WSB1 ; 
  10 OB01WSB2 OB01WSB2 ; 
  10 OB01WNPF OB01WNPF ; 
  10 OB01WPEF OB01WPEF ; 
  10 OB01WALF OB01WALF ; 
  10 OB01WSFL OB01WSFL ; 
  10 OB01WEOF OB01WEOF ; 
  10 OP-PREPK-PKG-NBR OP-PREPK-PKG-NBR ; 
  10 OB01WERM OB01WERM ; 
    15 OB01WEM1 OB01WEM1 ; 
    15 OB01WEM2 OB01WEM2 ; 
  10 OB01WDXF OB01WDXF ; 
  10 OB01WORQ OB01WORQ [40] ; 
  10 OB01WSZI OB01WSZI [40] ; 
  10 OB01WPPQ OB01WPPQ [40] ; 
  10 OB01WKY2 OB01WKY2 ; 
    15 OB01WKY1 OB01WKY1 ; 
      20 OP1PARTN OP1PARTN ; 
      20 OB01WKCO OB01WKCO ; 
      20 OB01WKNO OB01WKNO ; 
    15 OB01WKLI OB01WKLI ; 
  10 OB01WKY3 OB01WKY3 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
end // end OB01W01

//*** RECORD=OB01W02 ****
// ***** ORDER PROCESSING TEMP STORAGE RECORD FOR PREPACKS ****
// *                                                          *
// * Data from :  VBCSPR01/OB2REC/OB3REC                      *
// *
// * Temporary storage record used to hold detail items for   *
// * a particular order no. for the OB01 application.         *
// *                                                          *
// * This is used for paging purpose.  1 page = 1 temporary   *
// * storage record.  There are 12 occurrences of detail item *
// * for 1 page/1 ts record.                                  *
// *                                                          *
// *==========================================================*
// *                                                          *
// * NOTE:  Since CSP does not allow 'OCCURS' within an       *
// *        'OCCURS', the 40 occurrences for prepack-qty,     *
// *        size-active-flag, on-order-qty and size-id-desc   *
// *        have to be defined with a unique name for each    *
// *        occurrence.                                       *
// *                                                          *
// ************************************************************
// 
// DATE CREATED:          3/15/91
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT    COMMENTS
// -------   ----    ------------------------------------------
// 01/01/97  wleong  new record definition.
// ***********************
Record OB01W02 type basicRecord
  5 OBSPGROUP OBSPGROUP ; 
    10 OBSPTSLEN OBSPTSLEN ; 
    10 OBSPTSROW OBSPTSROW [12] ; 
      15 OBSPDELET OBSPDELET ; 
      15 OBSPSELTD OBSPSELTD ; 
      15 OBSPMORE OBSPMORE ; 
      15 OP-PREPK-PKG-NBR OP-PREPK-PKG-NBR ; 
      15 OBSPSTYNB OBSPSTYNB ; 
        20 SY1STNBR SY1STNBR ; 
        20 OBSPPER1 OBSPPER1 ; 
        20 SY2CLRID SY2CLRID ; 
        20 OBSPPER2 OBSPPER2 ; 
        20 XDMCD XDMCD ; 
      15 OP2CGPCD OP2CGPCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 OBSPPQ01 OBSPPQ01 ; 
      15 OBSPPQ02 OBSPPQ02 ; 
      15 OBSPPQ03 OBSPPQ03 ; 
      15 OBSPPQ04 OBSPPQ04 ; 
      15 OBSPPQ05 OBSPPQ05 ; 
      15 OBSPPQ06 OBSPPQ06 ; 
      15 OBSPPQ07 OBSPPQ07 ; 
      15 OBSPPQ08 OBSPPQ08 ; 
      15 OBSPPQ09 OBSPPQ09 ; 
      15 OBSPPQ10 OBSPPQ10 ; 
      15 OBSPPQ11 OBSPPQ11 ; 
      15 OBSPPQ12 OBSPPQ12 ; 
      15 OBSPPQ13 OBSPPQ13 ; 
      15 OBSPPQ14 OBSPPQ14 ; 
      15 OBSPPQ15 OBSPPQ15 ; 
      15 OBSPPQ16 OBSPPQ16 ; 
      15 OBSPPQ17 OBSPPQ17 ; 
      15 OBSPPQ18 OBSPPQ18 ; 
      15 OBSPPQ19 OBSPPQ19 ; 
      15 OBSPPQ20 OBSPPQ20 ; 
      15 OBSPORQ01 OBSPORQ01 ; 
      15 OBSPORQ02 OBSPORQ02 ; 
      15 OBSPORQ03 OBSPORQ03 ; 
      15 OBSPORQ04 OBSPORQ04 ; 
      15 OBSPORQ05 OBSPORQ05 ; 
      15 OBSPORQ06 OBSPORQ06 ; 
      15 OBSPORQ07 OBSPORQ07 ; 
      15 OBSPORQ08 OBSPORQ08 ; 
      15 OBSPORQ09 OBSPORQ09 ; 
      15 OBSPORQ10 OBSPORQ10 ; 
      15 OBSPORQ11 OBSPORQ11 ; 
      15 OBSPORQ12 OBSPORQ12 ; 
      15 OBSPORQ13 OBSPORQ13 ; 
      15 OBSPORQ14 OBSPORQ14 ; 
      15 OBSPORQ15 OBSPORQ15 ; 
      15 OBSPORQ16 OBSPORQ16 ; 
      15 OBSPORQ17 OBSPORQ17 ; 
      15 OBSPORQ18 OBSPORQ18 ; 
      15 OBSPORQ19 OBSPORQ19 ; 
      15 OBSPORQ20 OBSPORQ20 ; 
      15 PKTBACTI PKTBACTI ; 
      15 KUFMIXBL KUFMIXBL ; 
      15 KUCUNTCS KUCUNTCS ; 
      15 OP2LNINB OP2LNINB ; 
      15 SY4SZSCL SY4SZSCL ; 
      15 YNTCD YNTCD ; 
      15 OBSPSZI01 OBSPSZI01 ; 
      15 OBSPSZI02 OBSPSZI02 ; 
      15 OBSPSZI03 OBSPSZI03 ; 
      15 OBSPSZI04 OBSPSZI04 ; 
      15 OBSPSZI05 OBSPSZI05 ; 
      15 OBSPSZI06 OBSPSZI06 ; 
      15 OBSPSZI07 OBSPSZI07 ; 
      15 OBSPSZI08 OBSPSZI08 ; 
      15 OBSPSZI09 OBSPSZI09 ; 
      15 OBSPSZI10 OBSPSZI10 ; 
      15 OBSPSZI11 OBSPSZI11 ; 
      15 OBSPSZI12 OBSPSZI12 ; 
      15 OBSPSZI13 OBSPSZI13 ; 
      15 OBSPSZI14 OBSPSZI14 ; 
      15 OBSPSZI15 OBSPSZI15 ; 
      15 OBSPSZI16 OBSPSZI16 ; 
      15 OBSPSZI17 OBSPSZI17 ; 
      15 OBSPSZI18 OBSPSZI18 ; 
      15 OBSPSZI19 OBSPSZI19 ; 
      15 OBSPSZI20 OBSPSZI20 ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end OB01W02

//*** RECORD=OB9REC ****
// ***********************  ITEM TABLE  ***********************
// 
// DB2 TABLE:           NONE (PARM RECORD FOR FORMATTER CALL)
// 
// COPYLIB MEMBER:      WDBOBRNP    pass record
// 
// I/O MOD:             DB1720 FORMATTER
// 
// CALL STMT:           CALL DB1720 OB9REC, OB3REC, OBGREC
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        05/10/90
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05-10-90   SMK       INITIAL RECORD CREATION
// 
// **********************
Record OB9REC type basicRecord
  5 OB9GROUP OB9GROUP ; 
    10 OB9TASK OB9TASK ; 
    10 OB9LOC OB9LOC ; 
      15 OB9LOCAT OB9LOCAT [4] ; 
    10 OB9MAP OB9MAP ; 
end // end OB9REC

//*** RECORD=OBGREC ****
// **************** formatter size run return code ************
// 
// db2 table:      none (parm record for formatter call)
// 
// copylib member: WDBOBRNR  return record
// 
// i/o mod:        DB1720 formatter
// 
// call stmt:      CALL DB1720 OB9REC, OB3REC, OBGREC
// 
// key to db2 table: none
// 
// date created:  05/10/90
// 
// maintenance log:
// 
//   date    init.   comment
// ________  _____   __________________________________________
// 05-10-90  SMK     initial record creation
// **********************
Record OBGREC type basicRecord
  5 OBGGROUP OBGGROUP ; 
    10 OBGSZRC OBGSZRC ; 
end // end OBGREC

// all flag
DataItem OB01WALF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust company id
DataItem OB01WCCI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// system date (dd)
DataItem OB01WCDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted date (mm/dd/yy)
DataItem OB01WCDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted date (mm)
DataItem OB01WCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust order id
DataItem OB01WCOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page
DataItem OB01WCPG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CUSTOMER NO.
DataItem OB01WCUS char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yy)
DataItem OB01WCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust dept id
DataItem OB01WDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dash  (-)
DataItem OB01WDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash  (-)
DataItem OB01WDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dxfr-flag
DataItem OB01WDXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (dd)
DataItem OB01WEDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yymmdd)
DataItem OB01WEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err-msg-1
DataItem OB01WEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err-msg-2
DataItem OB01WEM2 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (mm)
DataItem OB01WEMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-file flag
DataItem OB01WEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ERR-MSG
DataItem OB01WERM char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yy)
DataItem OB01WEYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num cust ord no
DataItem OB01WKCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num line no.
DataItem OB01WKLI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num nike ord no
DataItem OB01WKNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s OB1REC key
DataItem OB01WKY1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s OB2REC key
DataItem OB01WKY2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s SYCREC key
DataItem OB01WKY3 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike order id
DataItem OB01WNOI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no package flag
DataItem OB01WNPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ORDER NO.
DataItem OB01WORD char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-on-ord-qty
DataItem OB01WORQ decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// package exist flag
DataItem OB01WPEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page counter
DataItem OB01WPGC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-prepack-qty
DataItem OB01WPPQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OB01WPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OB01WPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OB01WPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript1
DataItem OB01WSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript2
DataItem OB01WSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select flag
DataItem OB01WSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust store id
DataItem OB01WSTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript
DataItem OB01WSUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-sz-id-desc
DataItem OB01WSZI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OB9GROUP char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o mod caller profile
DataItem OB9LOC char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o mod caller profiles
DataItem OB9LOCAT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o mod caller map
DataItem OB9MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o mod func code
DataItem OB9TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OBGGROUP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size run return code
DataItem OBGSZRC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

