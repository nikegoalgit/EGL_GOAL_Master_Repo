package pb0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0J ****
// This program will allow the user to inquire/maintain
// inland transit time for direct shipments.
// 
// 
// This application was cloned from PC0C.
// 
//   A user can select customer xref. rows for inquiry by
// general product class.  The customer xref code is used
// as a starting point for displaying customer xref. data.
// By pressing ENTER the data will be displayed for viewing.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(only PADD)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
// -------   --------   --------     --------------------------
// control     date      userid      description
// -------   --------   --------     --------------------------
//           11/06/97    DRAMSE      created
//           01/27/98    DRAMSE      Changed PADD in map as
//                                   DIR SHP ADJ DAYS
//           05/28/98    DRAMSE      fixed bug in PC2NAME
//                                   in PB0J111
// *********************
Program PB0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  PB0JW01 PB0JW01; // record
  PB0JW02 PB0JW02; // record
  PB0JW03 PB0JW03; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TSCREC TSCREC; // record
  VPRDCU03 VPRDCU03; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YPCTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PC0CTBL {deleteAfterUse = yes}; // table
  use PB0JM.PB0JM001,  // forms
      PB0JM.PB0JM002, 
      PB0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PB0J001;

    PB0J001: PB0J001();

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PB0J002;

    PB0J002: PB0J002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto PB0J002;

  end // end main
end // end PB0J

// first time processing
Function PB0J001()
   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PB0JM001 initial;
  set PB0JW01 empty;
  set PB0JW03 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TSCREC empty;
  set KUNREC empty;
  set KUMREC empty;
  set FY1REC empty;

  PB0JW01.PB0JWSWR = "N"; /* init request for data switch*/
  PB0JW01.PB0JWBYF = "Y"; /* init bypass processing flag*/
  PB0JW01.PB0JWMAP = "1"; /* init to map 1*/
  PB0JW01.PB0JWLIX = 1; /* init line index*/
  PB0JM001.XGPCD = COMMAREA.XGPCD; /* Init map 1 gpc code*/
  PB0JW03.XXXSTAT = "A"; /* init status request*/

    /* ------------------------------------------------------------*/
        /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
        /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
        /* OR PRODUCTION.*/
    /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    PB0JM001.XXXPRCNM = "PB0J001"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end


   /* **                                                        ***/
   /* ********************** End of PB0J001 ***********************/
end // end PB0J001

// p.o. customer xref inq/maint.
Function PB0J002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Display the customer cross reference - list screen*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMAP == "1") /* Map 1 was requested*/
    PB0J100(); /* Display map 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the inland transit time      - INQUIRY screen and*/
   /* control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMAP == "2" /* Map 2 was selected*/
   && PB0JW01.PB0JWFSW == "I") /* and INQUIRE function*/

    if (converseVar.validationMsgNum == 0
     && PB0JW01.PB0JWBYF == "N")
      PB0JW01.PB0JWIXM = 1; /* Initialize index*/
    end

    while (PB0JW01.PB0JWIXM <= 13 /* Until end of page*/
     && PB0JW01.PB0JWMAP == "2") /* and map 2*/

      if (PB0JM001.PB0JMSEL[PB0JWIXM] == "S") /* If line selected*/
        PB0J300(); /* Display INQUIRY Map*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PB0JW01.PB0JWBYF == "N")         
        PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1; /* Increment index*/
      end
    end
    PB0JW01.PB0JWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the inland transit time      - CHANGE screen and*/
   /* control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMAP == "2" /* Map 2 was selected*/
   && PB0JW01.PB0JWFSW == "C") /* and CHANGE function*/

    if (converseVar.validationMsgNum == 0
     && PB0JW01.PB0JWBYF == "N")
      PB0JW01.PB0JWIXM = 1; /* Initialize index*/
    end

    while (PB0JW01.PB0JWIXM <= 13 /* Until end of page*/
     && PB0JW01.PB0JWMAP == "2") /* and map 2*/

      if (PB0JM001.PB0JMSEL[PB0JWIXM] == "S") /* If line selected*/
        PB0J400(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PB0JW01.PB0JWBYF == "N")         
        PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1; /* Increment index*/
      end

    end
    PB0JW01.PB0JWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid map number terminate processing*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMAP == "1"
   || PB0JW01.PB0JWMAP == "2")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0J002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PB0JW01.PB0JWMAP; /* Map name*/
    TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid function switch terminate processing*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMAP == "2")
    if (PB0JW01.PB0JWFSW == "A"
     || PB0JW01.PB0JWFSW == "I"
     || PB0JW01.PB0JWFSW == "C")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "PB0J002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PB0JW01.PB0JWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP FUNCTION IS INVALID";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    end
  end

end // end PB0J002

// p.o. customer xref list screen
Function PB0J100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PB0J110(); /* Obtain the data to display*/

  PB0J120(); /* Format and display the map*/

  PB0J130(); /* Check attention identifier*/

  PB0J140(); /* Reset fields to normal intensity*/

  PB0J150(); /* Verify the entered data*/

  PB0J160(); /* Process valid input request*/

end // end PB0J100

// Obtain the data to display
Function PB0J110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWSWR == "N") /* Data not requested*/

    return;

  end

  PB0JS01(); /* Purge any temporary storage*/

  set VPRDCU03 empty; /* Clear p.o. customer xref record*/
  set PB0JW02 empty; /* Clear temporary storage record*/
  PB0JW01.PB0JWLIX = 1; /* reset line index*/
  PB0JW01.PB0JWSWR = "N"; /* Request for data completed*/

   /* validate the gpc code entered*/

  if (PB0JM001.XGPCD > " ")
    if (PB0JM001.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0JM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      PB0JW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      if (PB0JM001.XGPCD != "01"
       && PB0JM001.XGPCD != "02"
       && PB0JM001.XGPCD != "03"
       && PB0JM001.XGPCD != "07")
        converseLib.validationFailed(200); /* invalid gpc for p.o. system*/
        PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
        PB0JW01.XGPCD = " "; /* set w/s gpc code*/
        PB0JW01.XGPDESC = " "; /* set w/s gpc description*/
        PB0JM001.XGPDESC = " "; /* set w/s gpc description*/
        PB0JM001.XXXPRCNM = "PB0J110"; /* process name*/
        set PB0JM001.XGPCD cursor, modified, bold;
        return; /* display error message*/
      end
    else
      converseLib.validationFailed(28); /* invalid or missing gpc code*/
      PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
      PB0JW01.XGPCD = " "; /* set w/s gpc code*/
      PB0JW01.XGPDESC = " "; /* set w/s gpc description*/
      PB0JM001.XXXPRCNM = "PB0J110"; /* process name*/
      set PB0JM001.XGPCD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(28); /* invalid or missing gpc code*/
    PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
    PB0JW01.XGPCD = " "; /* set w/s gpc code*/
    PB0JW01.XGPDESC = " "; /* set w/s gpc description*/
    PB0JM001.XXXPRCNM = "PB0J110"; /* process name*/
    set PB0JM001.XGPCD cursor, modified, bold;
  end

  if (PB0JW01.PB0JWPSW == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* If no error(s) verify user security*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWUPD = "N"; /* reset update flag*/
  PB0JW01.PB0JWINQ = "N";

  if (COMMAREA.XGPCD == "01"
   && COMMAREA.CACLVL[1] == "Y")
    PB0JW01.PB0JWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "02"
   && COMMAREA.CACLVL[2] == "Y")
    PB0JW01.PB0JWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "03"
   && COMMAREA.CACLVL[3] == "Y")
    PB0JW01.PB0JWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "07"
   && COMMAREA.CACLVL[7] == "Y")
    PB0JW01.PB0JWUPD = "Y"; /* set update flag*/
  end

  if (PB0JW01.PB0JWUPD == "N")
    if (COMMAREA.XGPCD == "01"
     && COMMAREA.CAILVL[1] == "Y")
      PB0JW01.PB0JWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "02"
     && COMMAREA.CAILVL[2] == "Y")
      PB0JW01.PB0JWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "03"
     && COMMAREA.CAILVL[3] == "Y")
      PB0JW01.PB0JWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "07"
     && COMMAREA.CAILVL[7] == "Y")
      PB0JW01.PB0JWINQ = "Y"; /* set update flag*/
    end

    if (PB0JW01.PB0JWINQ == "N")
      PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
      PB0JW01.XGPCD = " "; /* set w/s gpc code*/
      converseLib.validationFailed(105); /* user not authorized*/
      PB0JM001.XXXPRCNM = "PB0J110"; /* process name*/
    end
  end

  if (PB0JW01.PB0JWPSW == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if no errors obtain customer xref data for display*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty;
  VPRDCU03.XGPCD = PB0JM001.XGPCD;
  VPRDCU03.PC2INSEG = PB0JW03.PC2INSEG;
  VPRDCU03.PC2CUXID = PB0JW03.PC2CUXID;
  VPRDCU03.KUCCOID = PB0JW03.KUCCOID;
  VPRDCU03.KUMSTRID = -1;
  VPRDCU03.XNXCD = -1;

  PB0JW01.PB0JWIXM = 1; /* Initialize display line number*/
  PB0JW01.PB0JWCSW = "N"; /* Initialize end of cursor switch*/
  PB0JW01.PB0JWPSW = "N"; /* Initialize problem switch*/

  PB0JS02(); /* Select set and open the cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch all rows and screen out '000' Iseg code's and*/
   /* also screen out customers not matching on status*/
   /* if status selection was requested.*/
   /* ------------------------------------------------------------*/

  PB0JS04(); /* Fetch VPRDCU03 row*/

  while (PB0JW01.PB0JWCSW == "N" /* Until end of set*/
   && PB0JW01.PB0JWPSW == "N") /* and no problems*/

    if (VPRDCU03.PC2INSEG == "000" /* If dummy customer*/
    )                              /* ======= Next Sentence ========>*/
    else

      PB0J111(); /* Load data to for display*/

    end /* End of If statement*/


    PB0JS04(); /* Fetch VPRDCU03 row*/

  end /* End of Set while loop*/

  if (PB0JW01.PB0JWIXM > 1 /* Partial page was formated*/
   && PB0JW01.PB0JWPSW == "N") /* and no errors*/

    PB0JS05(); /* add page to temp storage*/

    PB0JW01.PB0JWIXM = 1; /* Reset index to 1*/

  end

  PB0JW01.PB0JWTSP = 1; /* Initialize page number*/

  PB0JS06(); /* Close set of VPRDCU03 rows*/

  if (PB0JW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PB0JW01.PB0JWPSW = "Y"; /* indicate error exists*/
    PB0JM001.XXXPRCNM = "PB0J110"; /* process name.*/
  else
    PB0JW01.XGPCD = PB0JM001.XGPCD; /* save gpc*/
    COMMAREA.XGPCD = PB0JM001.XGPCD; /* save gpc*/
  end

end // end PB0J110

// load/prepare data for display
Function PB0J111()
        /* *************************************/
        /* **    Load data to for display***/
        /* *************************************/

  if (PB0JW03.XXXSTAT == " " /* All status requested*/
   || VPRDCU03.XXXSTAT == PB0JW03.XXXSTAT)
    PB0JW02.XGPCD[PB0JWIXM] = VPRDCU03.XGPCD;
    PB0JW02.PC2CUXID[PB0JWIXM] = VPRDCU03.PC2CUXID;
    PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM] = VPRDCU03.PO-DIR-SHP-ADJ-DY;
    PB0JW02.KUCCOID[PB0JWIXM] = VPRDCU03.KUCCOID;
    KUMREC.KUCCOID = VPRDCU03.KUCCOID;
    PB0JW02.KUMSTRID[PB0JWIXM] = VPRDCU03.KUMSTRID;
    KUMREC.KUMSTRID = VPRDCU03.KUMSTRID;
    PB0JW02.XNXCD[PB0JWIXM] = VPRDCU03.XNXCD;

    if (VPRDCU03.KUCCOID > 0)

          /* get description for a valid customer number*/
      KUMREC.KUMSTRNM = " ";

      if (VPRDCU03.PC-PRDCU-APAO-FL == "E")
        PB0JS-0014(); /* get customer description*/
      else
        PB0JS14(); /* get customer description*/
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        PB0JW02.PC2NAME[PB0JWIXM] = KUMREC.KUMSTRNM;
      else
        PB0JW02.PC2NAME[PB0JWIXM] = VPRDCU03.PC2NAME;
      end

    else
      PB0JW02.PC2NAME[PB0JWIXM] = VPRDCU03.PC2NAME;
    end
    PB0JW02.TSCLOCCD[PB0JWIXM] = VPRDCU03.TSCLOCCD;
    PB0JW02.PC2INSEG[PB0JWIXM] = VPRDCU03.PC2INSEG;
    PB0JW02.PC2SEGAB[PB0JWIXM] = VPRDCU03.PC2SEGAB;
    PB0JW02.PC2SEGDE[PB0JWIXM] = VPRDCU03.PC2SEGDE;
    PB0JW02.YSMXDV[PB0JWIXM] = VPRDCU03.YSMXDV;
    PB0JW02.YPCCD[PB0JWIXM] = VPRDCU03.YPCCD;
    PB0JW02.PB0JMUCC[PB0JWIXM] = VPRDCU03.XCTCD;
    PB0JW02.PC2REFID[PB0JWIXM] = VPRDCU03.PC2REFID;
    PB0JW02.PCXCTRTA[PB0JWIXM] = VPRDCU03.XCTRTADY;
    PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM] = VPRDCU03.PC-PRDCU-APAO-FL;
    PB0JW02.XWHCD[PB0JWIXM] = VPRDCU03.XWHCD;
    PB0JW02.XXXSTAT[PB0JWIXM] = VPRDCU03.XXXSTAT;
    PB0JW02.ZZZCHGCT[PB0JWIXM] = VPRDCU03.ZZZCHGCT;
    TSCREC.TSCLOCCD = VPRDCU03.TSCLOCCD;

    PB0JS03(); /* select tscrec row*/

    if (SQLCA.VAGen_SQLCODE == 0
     && TSCREC.XXXSTAT == "A")
      PB0JW02.XCTCD[PB0JWIXM] = TSCREC.XCTCD;
      PB0JW02.XXXCITY[PB0JWIXM] = TSCREC.XXXCITY;
    else
      PB0JW02.XCTCD[PB0JWIXM] = " ";
      PB0JW02.XXXCITY[PB0JWIXM] = " ";
    end

    if (PB0JW01.PB0JWIXM > 12 /* Page full*/
     || PB0JW01.PB0JWCSW == "Y") /* or until end of set*/

      PB0JS05(); /* add page to temp storage*/
      PB0JW01.PB0JWIXM = 1; /* Reset index to 1*/

    else

      PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1;

    end

  end /* End of If statement*/

end // end PB0J111

// Format and display the map
Function PB0J120()

   /* ------------------------------------------------------------*/
   /* If no error(s) to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no message to display*/
   && PB0JW01.PB0JWBYF == "N")          /* do not bypass processing*/
    PB0J121(); /* Format the selected data*/
  end

   /* ------------------------------------------------------------*/
   /* The problem switch is set if:  invalid gpc code*/
                                  /* invalid transfer application*/
                                  /* blank gpc code*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWPSW == "Y") /* Error message to display*/

    set PB0JM001 initial; /* clear screen pb0jm001*/

    set PB0JM001.XGPCD cursor; /* default position*/
    set PB0JM001.PB0JMPGL initialAttributes; /* Turn off "PAGE" literal*/
    set PB0JM001.PB0JMOFL initialAttributes; /* Turn off "OF" literal*/
    set PB0JM001.PB0JWTSP initialAttributes; /* turn off current page number*/
    set PB0JM001.TA5TSQIX initialAttributes; /* Turn off highest page number*/

    if (COMMAREA.CATOAP > " ") /* invalid transfer request*/
      PB0JM001.CATOAP = COMMAREA.CATOAP; /* load transfer application*/
      PB0JM001.CAITEM = COMMAREA.CAITEM; /* load transfer items*/
      COMMAREA.CATOAP = " "; /* clear commarea transfer application*/
      COMMAREA.CAITEM = " "; /* clear commarea transfer items*/
      PB0JW01.XGPCD = " "; /* clear w/s gpc code*/
      set PB0JM001.CATOAP cursor, modified, bold; /* set cursor*/
    else
      if (PB0JW01.TA5TSQIX == 0) /* no data loaded*/
        PB0JW01.XGPCD = " "; /* clear w/s gpc code*/
        PB0JM001.XGPCD = COMMAREA.XGPCD; /* load gpc code*/

        if (PB0JM001.XGPCD in XGPTBL.XGPCD /* if gpc active load desc*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (COMMAREA.XGPCD in XGPTBL.XGPCD)
            PB0JM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
          end
        else
          PB0JM001.XGPDESC = " ";
        end

        if (converseVar.validationMsgNum == 28 /* invalid gpc*/
         || converseVar.validationMsgNum == 200)
          set PB0JM001.XGPCD cursor, modified, bold;
          PB0JM001.XXXPRCNM = "PB0J120"; /* process name*/
        else /* blank gpc*/
          set PB0JM001.XGPCD cursor;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if updates allowed display pfkeys*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWUPD == "Y")
    set PB0JM001.PB0JMCHG skip; /* gpc valid for chg*/
  end

   /* ------------------------------------------------------------*/
   /* if data successful updated display message*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWMFL == "Y") /* update flag on*/
    converseLib.validationFailed(1);
    PB0JM001.XXXPRCNM = "PB0J120"; /* process name*/
    PB0JW01.PB0JWMFL = "N"; /* reset message flag*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors sound the alarm*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PB0JM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Display customer xref list screen*/
   /* ------------------------------------------------------------*/


  PB0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PB0JM001 ;

   /* ------------------------------------------------------------*/
   /* Reset problem switch and check if the user has requested*/
   /* the display of the gpc pop-up window.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWPSW = "N"; /* Reset problem switch*/
  PB0JW01.PB0JWBYF = "N"; /* Reset bypass processing flag*/

  if (converseVar.eventKey is enter)
    PB0J122(); /* Check for ? inquiry by user*/
  end
end // end PB0J120

// Format the selected data
Function PB0J121()

   /* ------------------------------------------------------------*/
   /* If the customer xref locator is used, search temporary*/
   /* storage to find a customer xref code that is greater than*/
   /* or equal to the customer xref locator. If found,*/
   /* (customer xref(s) are equal) position the cursor at that*/
   /* customer xref code.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWCFL = "N";

  if (PB0JM001.PB0JMCUX > " " /* Locate customer xref code*/
   || PB0JM001.PB0JMSEG > " ") /* Locate customer iseg code*/
    PB0JW01.PB0JWTSP = 1; /* Init temporary storage page*/

    while (PB0JW01.PB0JWTSP <= PB0JW01.TA5TSQIX /* Search all pages*/
     && PB0JW01.PB0JWCFL == "N") /* Customer not found*/

      PB0JS07(); /* Obtain temp storage*/

      PB0JW01.PB0JWIXM = 1; /* Init index*/
      while (PB0JW01.PB0JWIXM <= 13
       && PB0JW01.PB0JWCFL == "N")

        if (PB0JM001.PB0JMCUX != " ")
          if (PB0JW02.PC2CUXID[PB0JWIXM] >= PB0JM001.PB0JMCUX)
            PB0JW01.PB0JWLIX = PB0JW01.PB0JWIXM;
            PB0JW01.PB0JWCFL = "Y"; /* customer xref found*/
          end
        else
          if (PB0JW02.PC2INSEG[PB0JWIXM] >= PB0JM001.PB0JMSEG)
            PB0JW01.PB0JWLIX = PB0JW01.PB0JWIXM;
            PB0JW01.PB0JWCFL = "Y"; /* customer xref found*/
          end
        end

        if (PB0JW01.PB0JWCFL == "N") /* customer xref not found*/
          PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1; /* Incr. index*/
        end
      end

      if (PB0JW01.PB0JWCFL == "N") /* Customer xref not found*/
        PB0JW01.PB0JWTSP = PB0JW01.PB0JWTSP + 1; /* Incr. temp storage pg*/
      end

    end

    PB0JM001.PB0JMCUX = " ";

    if (PB0JW01.PB0JWCFL == "N") /* Customer xref not found*/
      PB0JW01.PB0JWTSP = 1; /* display first page of data*/
      PB0JM001.XXXPRCNM = "PB0J121"; /* process name*/
      converseLib.validationFailed(18); /* display msg 'request processed and*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain temporary storage, load and display map fields.*/
   /* ------------------------------------------------------------*/

  set PB0JM001 initial;
  PB0JM001.XGPCD = PB0JW01.XGPCD;
  if (PB0JW01.XGPCD in XGPTBL.XGPCD)
    PB0JM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  PB0JS07(); /* Obtain temporary storage page*/

  set PB0JM001.PB0JMPGL skip; /* Display "PAGE" literal*/
  set PB0JM001.PB0JMOFL skip; /* Display "OF" literal*/

  PB0JM001.PB0JWTSP = PB0JW01.PB0JWTSP; /* Current page number*/
  set PB0JM001.PB0JWTSP skip; /* Display number*/
  PB0JM001.TA5TSQIX = PB0JW01.TA5TSQIX; /* Highest page number*/
  set PB0JM001.TA5TSQIX skip; /* Display number*/

  PB0JW01.PB0JWIXM = 1; /* Initialize line index*/
  while (PB0JW01.PB0JWIXM <= 13 /* Until end of lines or*/
   && PB0JW02.PC2CUXID[PB0JWIXM] != " ") /* all customers are displayed*/

    set PB0JM001.PB0JMSEL[PB0JWIXM] normal; /* Display select flag*/
    PB0JM001.PB0JMSEL[PB0JWIXM] = PB0JW02.PB0JMSEL[PB0JWIXM];
    PB0JM001.PC2CUXID[PB0JWIXM] = PB0JW02.PC2CUXID[PB0JWIXM];
    PB0JM001.PC2NAME[PB0JWIXM] = PB0JW02.PC2NAME[PB0JWIXM];
    PB0JM001.XCTCD[PB0JWIXM] = PB0JW02.PB0JMUCC[PB0JWIXM];
    PB0JM001.TSCLOCCD[PB0JWIXM] = PB0JW02.TSCLOCCD[PB0JWIXM];
    PB0JM001.PC2INSEG[PB0JWIXM] = PB0JW02.PC2INSEG[PB0JWIXM];
    PB0JM001.PO-DIR-SHP-ADJ-DY[PB0JWIXM] = PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM];

    PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1; /* Increment line index*/

  end

   /* set cursor position*/

  if (PB0JW01.PB0JWFSW == "A")
    set PB0JM001.PB0JMCUX cursor;
  else
    if (PB0JW01.PB0JWFSW == "I")
      set PB0JM001.PB0JMCUX cursor;
    else
      set PB0JM001.PB0JMSEL[PB0JWLIX] cursor; /* Last row viewed*/
    end
  end

  PB0JW01.PB0JWFSW = " "; /* Init function flag*/

end // end PB0J121

// Check for ? inquiry by user
Function PB0J122()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


    /* *************************************************************/
     /* Check GPC Code for '?'*/
    /* *************************************************************/

  if (PB0JM001.XGPCD == "?"
  )
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the gpc        **/
      /* *  table code and description to the map.               **/
      /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0JM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      PB0JM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
    else
      PB0JM001.XGPCD = COMMAREA.XGPCD;
      if (COMMAREA.XGPCD in XGPTBL.XGPCD)
        PB0JM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
    end

  end


  converseLib.clearScreen();
   /* restore the original map*/
end // end PB0J122

// Check attention identifier
Function PB0J130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pb0jm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PB0JW01.PB0JWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0JM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0JS01(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PB0JM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0JM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
      PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PB0JS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CAUSERA = " "; /* init commarea*/
    PCWREC.CAUSERA = " "; /* init pcwrec*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/
    set PCWREC empty;

    XSPCS01(); /* Exit to p.o. menu*/

    PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
    PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PB0JM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0JS01(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
    PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF14 - Verify if user is authorized to change customer xref*/
          /* information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PB0JW01.PB0JWUPD == "N")     /* and user chg not authorized*/
    PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PB0JM001.XXXPRCNM = "PB0J130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0JW01.PB0JWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0J130

// Reset highlighted fields
Function PB0J140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0JM001.XGPCD initialAttributes; /* gpc code*/
  set PB0JM001.XGPDESC initialAttributes; /* gpc code desc*/
  set PB0JM001.PB0JMCUX initialAttributes; /* customer xref code*/

  PB0JW01.PB0JWIXM = 1; /* Initialize line index*/

  while (PB0JW01.PB0JWIXM <= 13 /* Until end of lines*/
   && PB0JM001.PC2CUXID[PB0JWIXM] != " ")
                                   /* and customer xref codes exists*/
    set PB0JM001.PB0JMSEL[PB0JWIXM] normal; /* Reset select flag*/
    PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM + 1; /* Increment line index*/
  end

  set PB0JM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0JM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PB0J140

// Verify the entered data
Function PB0J150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PB0JM001.CAITEM > " ") /* Application data was entered*/
    set PB0JM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0JM001.XXXPRCNM = "PB0J150"; /* Process name*/

    exit stack; /* exit redisplay map*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0J151(); /* Verify scroll request*/

  else
    if (converseVar.eventKey not pf13)

      PB0J152(); /* Verify any changed data*/

    end
  end


end // end PB0J150

// Verify scroll request
Function PB0J151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWIXM = 13; /* Initialize line index*/

  while (PB0JW01.PB0JWIXM > 0) /* Until end of lines*/
    if (PB0JM001.PB0JMSEL[PB0JWIXM] > " "
     && PB0JM001.PB0JMSEL[PB0JWIXM] != "V")
      set PB0JM001.PB0JMSEL[PB0JWIXM] cursor, modified, bold; /* Highlight*/
      PB0JM001.XXXPRCNM = "PB0J151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0JW01.PB0JWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* no errors*/
    PB0JM001.XXXPRCNM = "PB0J151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PB0JW01.PB0JWTSP == PB0JW01.TA5TSQIX /* already on highest page*/
   && converseVar.validationMsgNum == 0)   /* no errors*/
    PB0JM001.XXXPRCNM = "PB0J151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum == 0)
    PB0JW01.PB0JWLIX = 1; /* set cursor at first row*/
  end

end // end PB0J151

// Verify any changed data
Function PB0J152()
   /* ------------------------------------------------------------*/
   /* If both cust xref and iseg code entered display error msg*/
   /* ------------------------------------------------------------*/

  if (PB0JM001.PB0JMCUX != " " /* Cust xref entered*/
   && PB0JM001.PB0JMSEG != " ") /* and iseg code entered*/
    PB0JM001.XXXPRCNM = "PB0J152"; /* Process name*/
    set PB0JM001.PB0JMCUX cursor, modified, bold;
    set PB0JM001.PB0JMSEG modified, bold;
    converseLib.validationFailed(318); /* Cannot enter both xref & iseg*/
  else
    if (PB0JM001.PB0JMCUX != " " /* Cust xref entered*/
     || PB0JM001.PB0JMSEG != " ") /* or iseg code entered*/
      PB0JW03.PC2CUXID = PB0JM001.PB0JMCUX; /* Save customer*/
      PB0JW03.PC2INSEG = PB0JM001.PB0JMSEG; /* Save Iseg*/
      PB0JW01.PB0JWSWR = "Y"; /* Request for data*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Check for changed/valid gpc code.  If request for data*/
   /* is yes bypass all other edits.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = PB0JM001.XGPCD; /* keep current at all times*/

  if (PB0JM001.XGPCD == " " /* If gpc code not entered*/
   || PB0JM001.XGPCD != PB0JW01.XGPCD) /* gpc code has changed*/
    PB0JW01.XGPCD = PB0JM001.XGPCD; /* gpc code*/
    PB0JW01.PB0JWSWR = "Y"; /* set request for data*/
    if (PB0JM001.PB0JMCUX != " " /* Cust xref entered*/
     && PB0JM001.PB0JMSEG != " ") /* and iseg code entered*/
      /* next sentence*/
    else
      if (PB0JM001.PB0JMCUX != " " /* Cust xref entered*/
       || PB0JM001.PB0JMSEG != " ") /* or iseg code entered*/
        PB0JW03.PC2CUXID = PB0JM001.PB0JMCUX; /* Save customer*/
        PB0JW03.PC2INSEG = PB0JM001.PB0JMSEG; /* Save Iseg*/
      else
        PB0JW01.PB0JWCXS = " "; /* init save cust key*/
        PB0JW03.PC2CUXID = " "; /* init cust xref*/
        PB0JW01.PB0JWISS = " "; /* init save iseg key*/
        PB0JW03.PC2INSEG = " "; /* init inseg*/
      end
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if data has been selected off the list screen*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWSFL = "N"; /* Initialize selection flag*/
  PB0JW01.PB0JWIXM = 13; /* Initialize index*/

  while (PB0JW01.PB0JWIXM > 0) /* Until end of lines*/
    if (PB0JM001.PB0JMSEL[PB0JWIXM] != " ") /* If selection not blank*/
      if (PB0JM001.PB0JMSEL[PB0JWIXM] == "S")
        PB0JW01.PB0JWSFL = "Y"; /* Initialize selection flag*/
      else
        if (PB0JM001.PB0JMSEL[PB0JWIXM] != "V") /* invalid entry*/
          converseLib.validationFailed(13); /* Error message and highlight*/
          PB0JM001.XXXPRCNM = "PB0J152"; /* Process name*/
          PB0JW01.PB0JWSFL = "Y"; /* Initialize selection flag*/
          set PB0JM001.PB0JMSEL[PB0JWIXM] cursor, modified, bold;
        end
      end
    end

    PB0JW01.PB0JWIXM = PB0JW01.PB0JWIXM - 1; /* Decrement line index*/
  end
   /* ------------------------------------------------------------*/
   /* If PF14 was pressed and no data selected display error msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PB0JW01.PB0JWSFL == "N")     /* and selection was not made*/
    PB0JM001.XXXPRCNM = "PB0J152"; /* Process name*/
    converseLib.validationFailed(25); /* enter 's' for selection*/
  end
end // end PB0J152

// Process valid input request
Function PB0J160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message set up*/
    return;
  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PB0JW01.PB0JWTSP = PB0JW01.PB0JWTSP - 1; /* Decrement page number*/
    return;
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    if (PB0JW01.TA5TSQIX > PB0JW01.PB0JWTSP) /* more pages*/
      PB0JW01.PB0JWTSP = PB0JW01.PB0JWTSP + 1; /* Increment page number*/
      return;
    else
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Change function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PB0JW01.PB0JWSFL == "Y")     /* and selection was made*/
    PB0JW01.PB0JWMAP = "2"; /* Select Map #2*/
    PB0JW01.PB0JWFSW = "C"; /* Select change function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Inquiry function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (PB0JW01.PB0JWSFL == "Y") /* selection was made*/
      PB0JW01.PB0JWMAP = "2"; /* Select Map #2*/
      PB0JW01.PB0JWFSW = "I"; /* Select inquiry function*/
      converseLib.validationFailed(0); /* Clear error message field*/
    else
      if (PB0JM001.PB0JMSEG != " ") /* If iseg code key search entered*/
        PB0JW01.PB0JWSWR = "Y"; /* request for data = yes*/
      end
    end
  end

end // end PB0J160

// customer xref inquiry map
Function PB0J300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0J310(); /* Format and display the map*/

  PB0J320(); /* Check attention identifier*/

  PB0J330(); /* Reset fields to normal intensity*/

  PB0J340(); /* Verify the entered data*/

end // end PB0J300

// Format and display the map
Function PB0J310()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PB0JW01.PB0JWBYF == "N")          /* do not bypass processing*/
    set PB0JM002 initial; /* Clear map output area*/
    PB0JM002.XGPCD = PB0JW02.XGPCD[PB0JWIXM];
    if (PB0JW02.XGPCD[PB0JWIXM] in XGPTBL.XGPCD)
      PB0JM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end

    PB0JM002.PC2CUXID = PB0JW02.PC2CUXID[PB0JWIXM]; /* cust xref code*/
    PB0JM002.YPCCD = PB0JW02.YPCCD[PB0JWIXM]; /* xref type*/
    if (PB0JW02.YPCCD[PB0JWIXM] in YPCTBL.YPCCD)
      PB0JM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    end
    PB0JM002.PC-PRDCU-APAO-FL = PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM];
    PB0JM002.XWHCD = PB0JW02.XWHCD[PB0JWIXM]; /* warehouse*/
    PB0JM002.PC2REFID = PB0JW02.PC2REFID[PB0JWIXM]; /* cust xref id*/
    PB0JM002.PCXCTRTA = PB0JW02.PCXCTRTA[PB0JWIXM]; /* rta day*/
    PB0JM002.PO-DIR-SHP-ADJ-DY = PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM];

    PB0JM002.KUCCOID = PB0JW02.KUCCOID[PB0JWIXM]; /* company nbr*/
    PB0JM002.KUMSTRID = PB0JW02.KUMSTRID[PB0JWIXM]; /* store id*/
    PB0JM002.XNXCD = PB0JW02.XNXCD[PB0JWIXM]; /* dept nbr*/
    PB0JM002.PC2NAME = PB0JW02.PC2NAME[PB0JWIXM]; /* customer desc.*/

    PB0JM002.TSCLOCCD = PB0JW02.TSCLOCCD[PB0JWIXM]; /* destination*/
    PB0JM002.XXXCITY = PB0JW02.XXXCITY[PB0JWIXM];
                                   /* destination desc.*/
    PB0JM002.XCTCD = PB0JW02.XCTCD[PB0JWIXM]; /* country code*/
    if (PB0JW02.XCTCD[PB0JWIXM] in XCTTBL.XCTCD)
      PB0JM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PB0JM002.PB0JMUCC = PB0JW02.PB0JMUCC[PB0JWIXM]; /* ult.cnty code*/
    if (PB0JW02.PB0JMUCC[PB0JWIXM] in XCTTBL.XCTCD)
      PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PB0JM002.YSMXDV = PB0JW02.YSMXDV[PB0JWIXM]; /* division code*/
    YSMREC.YSMSUMCD = PB0JW02.YSMXDV[PB0JWIXM]; /* division code*/
    XSPCS02();
    if (SQLCA.VAGen_SQLCODE == 0)
      PB0JM002.YSMSMDSC = YSMREC.YSMSMDSC; /* load description*/
    else
      PB0JM002.YSMSMDSC = " "; /* clear description*/
    end

    PB0JM002.PC2INSEG = PB0JW02.PC2INSEG[PB0JWIXM]; /* iseg code*/
    PB0JM002.PC2SEGAB = PB0JW02.PC2SEGAB[PB0JWIXM]; /* iseg abrv*/
    PB0JM002.PC2SEGDE = PB0JW02.PC2SEGDE[PB0JWIXM]; /* iseg desc*/

    PB0JM002.XXXSTAT = PB0JW02.XXXSTAT[PB0JWIXM]; /* status code*/
    if (PB0JW02.XXXSTAT[PB0JWIXM] == "A")
      PB0JM002.PB0JMSDS = "ACTIVE  "; /* status description*/
    else
      if (PB0JW02.XXXSTAT[PB0JWIXM] == "I")
        PB0JM002.PB0JMSDS = "INACTIVE"; /* status description*/
      end
    end

    set PB0JM002.CATOAP cursor; /* Position cursor*/
    PB0JW01.PB0JWLIX = PB0JW01.PB0JWIXM; /* save to position cursor*/
    PB0JW02.PB0JMSEL[PB0JWIXM] = "V";

    PB0JS15(); /* update temp storage*/

  end

  PB0JM002.PB0JMFNC = "INQUIRY"; /* Move inquiry literal to map*/
  PB0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PB0JM002.XGPCD == "02")
    set PB0JM002.PCRTADAY skip; /* display rta day literal*/
    set PB0JM002.PCXCTRTA skip; /* display rta day field*/
  end

  set PB0JM002.XGPCD protect; /* Gpc code*/
  set PB0JM002.PC2CUXID protect; /* customer xref code*/
  set PB0JM002.YPCCD protect; /* xref type code*/
  set PB0JM002.KUCCOID protect; /* company nbr*/
  set PB0JM002.KUMSTRID protect; /* store id*/
  set PB0JM002.XNXCD protect; /* dept nbr*/
  set PB0JM002.PC2NAME protect; /* customer name*/
  set PB0JM002.TSCLOCCD protect; /* destination code*/
  set PB0JM002.PB0JMUCC protect; /* ultimate country code*/
  set PB0JM002.YSMXDV protect; /* division code*/
  set PB0JM002.PC2INSEG protect; /* iseg code*/
  set PB0JM002.PC2SEGAB protect; /* iseg abrv*/
  set PB0JM002.PC2SEGDE protect; /* iseg desc*/
  set PB0JM002.XXXSTAT protect; /* status code*/
  set PB0JM002.XWHCD protect; /* dept nbr*/
  set PB0JM002.PO-DIR-SHP-ADJ-DY protect; /* PADD*/
  set PB0JM002.PC-PRDCU-APAO-FL skip;

  if (PB0JM002.XGPCD == "02")
    set PB0JM002.PB0JMSSR skip; /* display ss reference literal*/
    set PB0JM002.PC2REFID skip; /* display ss reference field*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PB0JM002 alarm; /* sound the alarm*/
  end


  converse PB0JM002 ;

  PB0JW01.PB0JWPSW = "N"; /* Initialize problem switch*/
  PB0JW01.PB0JWBYF = "N"; /* Initialize bypass processing flag*/

end // end PB0J310

// Check attention identifier
Function PB0J320()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pb0jm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PB0JW01.PB0JWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0JS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PB0JM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0JM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0JW01.PB0JWPSW = "Y"; /* Set error switch*/
      PB0JW01.PB0JWMAP = 1; /* display list screen*/
      PB0JM001.XXXPRCNM = "PB0J320"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PB0JM002.CATOAP cursor, modified, bold; /* Highlight*/
      PB0JM002.XXXPRCNM = "PB0J320"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end
   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer xref list screen pb0jm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PB0JW01.PB0JWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PB0JM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PB0JS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0JW01.PB0JWMAP = 1; /* reset map*/
    PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
    PB0JM001.XXXPRCNM = "PB0J320"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PB0JM002.XXXPRCNM = "PB0J320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0JW01.PB0JWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PB0J320

// Reset highlighted fields
Function PB0J330()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0JM002.XGPCD initialAttributes; /* Gpc code*/
  set PB0JM002.XGPDESC initialAttributes; /* Gpc desc.*/
  set PB0JM002.PC2CUXID initialAttributes; /* customer xref code*/
  set PB0JM002.YPCCD initialAttributes; /* xref type code*/
  set PB0JM002.YPCSDESC initialAttributes; /* xref type code description*/
  set PB0JM002.KUCCOID initialAttributes; /* company code*/
  set PB0JM002.KUMSTRID initialAttributes; /* store id*/
  set PB0JM002.XNXCD initialAttributes; /* department code*/
  set PB0JM002.TSCLOCCD initialAttributes; /* destination code*/
  set PB0JM002.XXXCITY initialAttributes; /* destination description*/
  set PB0JM002.XCTCD initialAttributes; /* country code*/
  set PB0JM002.XCTDESC initialAttributes; /* country description*/
  set PB0JM002.PB0JMUCC initialAttributes; /* ultimate country code*/
  set PB0JM002.PB0JMUCD initialAttributes; /* ultimate country code description*/
  set PB0JM002.YSMXDV initialAttributes; /* division code*/
  set PB0JM002.YSMSMDSC initialAttributes; /* division description*/
  set PB0JM002.PC2INSEG protect; /* iseg code*/
  set PB0JM002.PC2SEGAB protect; /* iseg abrv*/
  set PB0JM002.PC2SEGDE protect; /* iseg desc*/
  set PB0JM002.XXXSTAT initialAttributes; /* status code*/
  set PB0JM002.PB0JMSDS initialAttributes; /* status description*/
  set PB0JM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0JM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PB0J330

// Verify the entered data
Function PB0J340()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWDEF = "N"; /* Initialize data entered flag*/

  if (PB0JM002.CAITEM > " ") /* Application data was entered*/
    set PB0JM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0JM002.XXXPRCNM = "PB0J340"; /* Process name*/

    return;

  end

end // end PB0J340

// customer xref change map
Function PB0J400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0J410(); /* Format and display the map*/

  PB0J420(); /* Check attention identifier*/

  PB0J430(); /* Reset Highlighted fields*/

  PB0J440(); /* Verify the entered data*/

  PB0J450(); /* Process valid input request*/


end // end PB0J400

// Format and display the map
Function PB0J410()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PB0JW01.PB0JWBYF == "N")          /* do not bypass processing*/
    set PB0JM002 initial; /* Clear map output area*/
    PB0JM002.XGPCD = PB0JW02.XGPCD[PB0JWIXM];
    if (PB0JW02.XGPCD[PB0JWIXM] in XGPTBL.XGPCD)
      PB0JM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end

    PB0JM002.PC2CUXID = PB0JW02.PC2CUXID[PB0JWIXM]; /* cust xref code*/
    PB0JM002.YPCCD = PB0JW02.YPCCD[PB0JWIXM]; /* xref type*/
    if (PB0JW02.YPCCD[PB0JWIXM] in YPCTBL.YPCCD)
      PB0JM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    end
    PB0JM002.PC-PRDCU-APAO-FL = PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM];
    PB0JM002.XWHCD = PB0JW02.XWHCD[PB0JWIXM]; /* warehouse*/
    PB0JM002.PC2REFID = PB0JW02.PC2REFID[PB0JWIXM]; /* ref type id*/
    PB0JM002.PCXCTRTA = PB0JW02.PCXCTRTA[PB0JWIXM]; /* rta day*/
    PB0JM002.PO-DIR-SHP-ADJ-DY = PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM];

    PB0JM002.KUCCOID = PB0JW02.KUCCOID[PB0JWIXM]; /* company nbr*/
    PB0JM002.KUMSTRID = PB0JW02.KUMSTRID[PB0JWIXM]; /* store id*/
    PB0JM002.XNXCD = PB0JW02.XNXCD[PB0JWIXM]; /* dept nbr*/
    PB0JM002.PC2NAME = PB0JW02.PC2NAME[PB0JWIXM]; /* customer desc.*/

    PB0JM002.TSCLOCCD = PB0JW02.TSCLOCCD[PB0JWIXM]; /* destination*/
    PB0JM002.XXXCITY = PB0JW02.XXXCITY[PB0JWIXM];
                                   /* destination desc.*/
    PB0JM002.XCTCD = PB0JW02.XCTCD[PB0JWIXM]; /* country code*/
    if (PB0JW02.XCTCD[PB0JWIXM] in XCTTBL.XCTCD)
      PB0JM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PB0JM002.PB0JMUCC = PB0JW02.PB0JMUCC[PB0JWIXM]; /* ult.cnty code*/
    if (PB0JW02.PB0JMUCC[PB0JWIXM] in XCTTBL.XCTCD)
      PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PB0JM002.YSMXDV = PB0JW02.YSMXDV[PB0JWIXM]; /* division code*/
    YSMREC.YSMSUMCD = PB0JW02.YSMXDV[PB0JWIXM];
    XSPCS02();
    if (SQLCA.VAGen_SQLCODE == 0)
      PB0JM002.YSMSMDSC = YSMREC.YSMSMDSC;
    else
      PB0JM002.YSMSMDSC = " ";
    end

    PB0JM002.PC2INSEG = PB0JW02.PC2INSEG[PB0JWIXM]; /* iseg code*/
    PB0JM002.PC2SEGAB = PB0JW02.PC2SEGAB[PB0JWIXM]; /* iseg abrv*/
    PB0JM002.PC2SEGDE = PB0JW02.PC2SEGDE[PB0JWIXM]; /* iseg desc*/

    PB0JM002.XXXSTAT = PB0JW02.XXXSTAT[PB0JWIXM]; /* status code*/
    if (PB0JW02.XXXSTAT[PB0JWIXM] == "A")
      PB0JM002.PB0JMSDS = "ACTIVE  "; /* status description*/
    else
      if (PB0JW02.XXXSTAT[PB0JWIXM] == "I")
        PB0JM002.PB0JMSDS = "INACTIVE"; /* status description*/
      end
    end


    PB0JW01.PB0JWLIX = PB0JW01.PB0JWIXM; /* Last row viewed*/
    PB0JW02.PB0JMSEL[PB0JWIXM] = "V";

    PB0JS15(); /* update temp storage*/

  end

  PB0JM002.PB0JMFNC = "CHANGE "; /* Move inquiry literal to map*/
  PB0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PB0JM002.XGPCD == "02")
    set PB0JM002.PCRTADAY skip; /* display rta day literal*/
    set PB0JM002.PCXCTRTA skip; /* display rta day field*/
  end

  if (PB0JM002.XGPCD == "02")
    set PB0JM002.PB0JMSSR skip; /* display ss reference literal*/
    set PB0JM002.PC2REFID skip; /* allow update*/
  end

  set PB0JM002.PC2NAME protect;

  set PB0JM002.XGPCD protect; /* Gpc code*/
  set PB0JM002.PC2CUXID protect; /* customer xref code*/
  set PB0JM002.PC2INSEG protect; /* iseg code*/
  if (PB0JM002.XXXSTAT == "I") /* inactive protect all fields*/
    set PB0JM002.XXXSTAT bold;
    set PB0JM002.PO-DIR-SHP-ADJ-DY protect;
    converseLib.validationFailed(538);
    if (PB0JM002.XGPCD == "02")
      set PB0JM002.PC2REFID skip; /* display/protect ss ref field*/
      set PB0JM002.PCXCTRTA skip; /* display/protect ss ref field*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PB0JM002 alarm; /* sound the alarm*/
  end

  if (PB0JW01.PB0JWMFL == "Y")
    converseLib.validationFailed(1);
    PB0JM002.XXXPRCNM = "PB0J410";
    PB0JW01.PB0JWMFL = "N";
  end

  converse PB0JM002 ;

  PB0JW01.PB0JWPSW = "N"; /* Initialize problem switch*/
  PB0JW01.PB0JWBYF = "N"; /* Initialize bypass processing flag*/

  if (converseVar.eventKey is enter)
    PB0J411(); /* check for ? inquiry by user*/
  end

end // end PB0J410

// Check for ? inquiry by user
Function PB0J411()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PB0JM002.XGPCD == "?"
   || PB0JM002.YPCCD == "?"
   || PB0JM002.PB0JMUCC == "?"
   || PB0JM002.PC-PRDCU-APAO-FL == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PB0JM002.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0JM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PB0JM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        PB0JM002.XGPCD = PB0JW02.XGPCD[PB0JWIXM];
        if (PB0JW02.XGPCD[PB0JWIXM] in XGPTBL.XGPCD)
          PB0JM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end

      set PB0JM002.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check customer xref type code for ?*/
    /* *************************************************************/

    if (PB0JM002.YPCCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               XREF TYPE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPC01(); /* perform customer xref window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0JM002.YPCCD = YPCTBL.YPCCD[XX0XWPIX]; /* move code*/
        PB0JM002.YPCSDESC = YPCTBL.YPCSDESC[XX0XWPIX]; /* move name*/
      else
        PB0JM002.YPCCD = PB0JW02.YPCCD[PB0JWIXM];
        if (PB0JW02.YPCCD[PB0JWIXM] in YPCTBL.YPCCD)
          PB0JM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
        end
      end

      set PB0JM002.YPCCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check ultimate country code for ?*/
    /* *************************************************************/

    if (PB0JM002.PB0JMUCC == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY  "; /* heading*/

      XCTTBL.XCTCD = PB0JM002.PB0JMUCC;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ultimate   **/
       /* *  country table code and description to the map.       **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0JM002.PB0JMUCC = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      else
        PB0JM002.PB0JMUCC = PB0JW02.PB0JMUCC[PB0JWIXM];
        if (PB0JW02.PB0JMUCC[PB0JWIXM] in XCTTBL.XCTCD)
          PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end
      end

      set PB0JM002.PB0JMUCC cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check Customer Process Incidator of '?'*/
    /* *************************************************************/

    if (PB0JM002.PC-PRDCU-APAO-FL == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "     CUSTOMER PROCESS IND  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPPC040(); /* perform  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0JM002.PC-PRDCU-APAO-FL = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWPIX]; /* move code*/
      else
        PB0JM002.PC-PRDCU-APAO-FL = "N"; /* move code*/
      end

      set PB0JM002.PC-PRDCU-APAO-FL cursor; /* set cursor*/

    end


    converseLib.clearScreen();

    PB0JW01.PB0JWBYF = "Y";

  end


end // end PB0J411

// Check attention identifier
Function PB0J420()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    PB0JW01.PB0JWBYF = "Y"; /* bypass reload of screen*/

    return; /* redisplay screen*/

  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0JS01();

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PB0JM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0JM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/
      PB0JW01.PB0JWMAP = 1; /* set map switch*/
      PB0JM001.XXXPRCNM = "PB0J420"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

      PB0JM002.XXXPRCNM = "PB0J420"; /* Process name*/
      set PB0JM002.CATOAP cursor, modified, bold; /* Highlight*/

      return; /* Exit to redisplay map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* PF3 - return to customer xref list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PB0JW01.PB0JWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay list screen*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - transfer to help screen*/
   /* PF4 - transfer to p.o. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* PF6 - transfer to location inq/maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PB0JM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PB0JS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0JW01.PB0JWMAP = 1; /* reset map*/
    PB0JM001.XXXPRCNM = "PB0J420"; /* Process name*/
    PB0JW01.PB0JWPSW = "Y"; /* set problem switch*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If invalid key display message*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PB0JM002.XXXPRCNM = "PB0J420"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0JW01.PB0JWBYF = "Y"; /* bypass reload of screen*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PB0J420

// Reset highlighted fields
Function PB0J430()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0JM002.XGPCD initialAttributes; /* Gpc code*/
  set PB0JM002.XGPDESC initialAttributes; /* Gpc desc.*/
  set PB0JM002.PC2CUXID initialAttributes; /* customer xref code*/
  set PB0JM002.YPCCD initialAttributes; /* xref type code*/
  set PB0JM002.YPCSDESC initialAttributes; /* xref type code description*/
  set PB0JM002.KUCCOID initialAttributes; /* company code*/
  set PB0JM002.KUMSTRID initialAttributes; /* store id*/
  set PB0JM002.XNXCD initialAttributes; /* department code*/
  set PB0JM002.TSCLOCCD initialAttributes; /* destination code*/
  set PB0JM002.XXXCITY initialAttributes; /* destination description*/
  set PB0JM002.XCTCD initialAttributes; /* country code*/
  set PB0JM002.XCTDESC initialAttributes; /* country description*/
  set PB0JM002.PB0JMUCC initialAttributes; /* ultimate country code*/
  set PB0JM002.PB0JMUCD initialAttributes; /* ultimate country code description*/
  set PB0JM002.YSMXDV initialAttributes; /* division code*/
  set PB0JM002.YSMSMDSC initialAttributes; /* division description*/
  set PB0JM002.PC2INSEG protect; /* iseg code*/
  set PB0JM002.PC2SEGAB initialAttributes; /* iseg abrv*/
  set PB0JM002.PC2SEGDE initialAttributes; /* iseg desc*/
  set PB0JM002.XXXSTAT initialAttributes; /* status code*/
  set PB0JM002.PB0JMSDS initialAttributes; /* status description*/
  set PB0JM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0JM002.CAITEM initialAttributes; /* Commarea application data*/
  set PB0JM002.PO-DIR-SHP-ADJ-DY initialAttributes; /* Commarea application data*/

end // end PB0J430

// Verify the entered data
Function PB0J440()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWDEF = "N"; /* Initialize data entered flag*/

  if (PB0JM002.CAITEM > " ") /* Application data was entered*/
    set PB0JM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0JM002.XXXPRCNM = "PB0J440"; /* Process name*/

    return;

  end

  if (PB0JM002.KUCCOID == PB0JW02.KUCCOID[PB0JWIXM]
   && PB0JM002.KUMSTRID == PB0JW02.KUMSTRID[PB0JWIXM]
   && PB0JM002.XNXCD == PB0JW02.XNXCD[PB0JWIXM]
   && PB0JM002.YPCCD == PB0JW02.YPCCD[PB0JWIXM]
   && PB0JM002.TSCLOCCD == PB0JW02.TSCLOCCD[PB0JWIXM]
   && PB0JM002.PB0JMUCC == PB0JW02.PB0JMUCC[PB0JWIXM]
   && PB0JM002.PC2INSEG == PB0JW02.PC2INSEG[PB0JWIXM]
   && PB0JM002.PC2SEGAB == PB0JW02.PC2SEGAB[PB0JWIXM]
   && PB0JM002.PC2SEGDE == PB0JW02.PC2SEGDE[PB0JWIXM]
   && PB0JM002.PC2REFID == PB0JW02.PC2REFID[PB0JWIXM]
   && PB0JM002.PCXCTRTA == PB0JW02.PCXCTRTA[PB0JWIXM]
   && PB0JM002.PC-PRDCU-APAO-FL == PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM]
   && PB0JM002.XWHCD == PB0JW02.XWHCD[PB0JWIXM]
   && PB0JM002.XXXSTAT == PB0JW02.XXXSTAT[PB0JWIXM]
   && PB0JM002.PC2NAME == PB0JW02.PC2NAME[PB0JWIXM]
   && PB0JM002.PO-DIR-SHP-ADJ-DY == PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM])

    return; /* Exit to redisplay map*/

  else
    PB0J441(); /* Validate input data*/
  end

end // end PB0J440

// Validate any input data
Function PB0J441()
   /* ------------------------------------------------------------*/
   /* VALIDATE ANY INPUT DATA.*/
   /* IF ANY ERRORS WERE FOUND, EXIT TO REDISPLAY THE MAP.*/
   /* ------------------------------------------------------------*/

  PB0JW01.PB0JWDEF = "Y"; /* Data has been entered*/

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID STATUS CODE*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.XXXSTAT > " ") /* If status code entered*/
    if (PB0JM002.XXXSTAT == "A") /* Status active*/
      PB0JM002.PB0JMSDS = "ACTIVE  ";
    else
      if (PB0JM002.XXXSTAT == "I") /* Status inactive*/
        PB0JM002.PB0JMSDS = "INACTIVE";
      else
        PB0JM002.PB0JMSDS = " "; /* clear description fields*/
        converseLib.validationFailed(37); /* Status invalid*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.XXXSTAT cursor, modified, bold;
      end
    end
  else
    PB0JM002.PB0JMSDS = " "; /* Clear description field*/
    converseLib.validationFailed(37); /* Status invalid*/
    PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
    set PB0JM002.XXXSTAT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID ULTIMATE COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.PB0JMUCC > " ") /* If ultimate ctry code entered*/

    if (PB0JM002.PB0JMUCC in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];

      if (PB0JM002.PB0JMUCC == "USA")
        PB0JM002.YSMXDV = "10";
        YSMREC.YSMSUMCD = "10";
      else
        PB0JM002.YSMXDV = "20";
        YSMREC.YSMSUMCD = "20";
      end

      XSPCS02(); /* get division description*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PB0JM002.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        PB0JM002.YSMSMDSC = " ";
      end

    else
      PB0JM002.PB0JMUCD = " "; /* Clear description field*/
      converseLib.validationFailed(49); /* Country code invalid*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.PB0JMUCC cursor, modified, bold;
    end
  else
    PB0JM002.PB0JMUCD = " "; /* Clear description field*/
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID DESTINATION CODE*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.TSCLOCCD > " ") /* If destination code entered*/
    TSCREC.TSCLOCCD = PB0JM002.TSCLOCCD;

    PB0JS03(); /* Select trans. location row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PB0JM002.XXXCITY = TSCREC.XXXCITY; /* Load map fields*/
      PB0JM002.XCTCD = TSCREC.XCTCD;
      if (TSCREC.XCTCD in XCTTBL.XCTCD)
        PB0JM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end

      if (PB0JM002.PB0JMUCC == " ") /* Default to tras. loc*/
        PB0JM002.PB0JMUCC = TSCREC.XCTCD;
        PB0JM002.PB0JMUCD = PB0JM002.XCTDESC;

        if (PB0JM002.PB0JMUCC == "USA")
          PB0JM002.YSMXDV = "10";
          YSMREC.YSMSUMCD = "10";
        else
          PB0JM002.YSMXDV = "20";
          YSMREC.YSMSUMCD = "20";
        end

      end /* Default to tras. loc*/

    else

      if (SQLCA.VAGen_SQLCODE == 100)
        PB0JM002.XXXCITY = " "; /* Clear description fields*/
        PB0JM002.XCTCD = " ";
        PB0JM002.XCTDESC = " ";
        converseLib.validationFailed(48); /* Location code invalid*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.TSCLOCCD cursor, modified, bold;
      end
    end
  else
    PB0JM002.XXXCITY = " "; /* Clear description fields*/
    PB0JM002.XCTCD = " ";
    PB0JM002.XCTDESC = " ";
    converseLib.validationFailed(48); /* location code invalid*/
    PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
    set PB0JM002.TSCLOCCD cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER NUMBER FOR CUSTOMER XREF TYPE NIKE*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD == "N") /* nike xref type*/
    if (PB0JW02.YPCCD != "N")
      PB0JM002.KUCCOID = 0; /* Clear customer number*/
      PB0JM002.KUMSTRID = 0; /* Clear customer number*/
      PB0JM002.XNXCD = 0; /* Clear customer number*/
    else
      if (PB0JM002.KUCCOID > 0
       || PB0JM002.KUMSTRID > 0
       || PB0JM002.XNXCD > 0)
        converseLib.validationFailed(182);
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.XNXCD cursor, modified, bold;
        set PB0JM002.KUMSTRID cursor, modified, bold;
        set PB0JM002.KUCCOID cursor, modified, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF TYPE EQUALS NIKE THE CUSTOMER DESCRIPTION*/
   /* MUST BE ENTERED.*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD == "N") /* nike xref type*/
    if (PB0JM002.PC2NAME != " ")
      if (PB0JW02.YPCCD[PB0JWIXM] != "N") /* previous value c or s*/
        if (PB0JM002.PC2NAME not modified)
          converseLib.validationFailed(184); /* Customer name invalid*/
          PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
          set PB0JM002.PC2NAME cursor, modified, bold;
        else
          set PB0JM002.PC2NAME modified;
        end
      end
    else
      converseLib.validationFailed(183); /* Customer name invalid*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.PC2NAME cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* IF XREF TYPE EQUALS CUSTOMER/SCREENER THE CUSTOMER NUMBER*/
   /* IS REQUIRED.  IF XREF TYPE EQUALS NIKE THE CUSTOMER NUMBER*/
   /* MUST BE EQUAL ZEROS.*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD == "C" /* customer xref type*/
   || PB0JM002.YPCCD == "S") /* screener xref type*/
    if (PB0JM002.KUCCOID == 0
     && PB0JM002.KUMSTRID == 0
     && PB0JM002.XNXCD == 0)
      PB0JM002.PC2NAME = " "; /* Clear customer name*/
      converseLib.validationFailed(47);
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.XNXCD cursor, modified, bold;
      set PB0JM002.KUMSTRID cursor, modified, bold;
      set PB0JM002.KUCCOID cursor, modified, bold;
    else
      KUNREC.XGPCD = PB0JM002.XGPCD;
      KUNREC.KUCCOID = PB0JM002.KUCCOID;
      KUNREC.KUMSTRID = PB0JM002.KUMSTRID;
      KUNREC.XNXCD = PB0JM002.XNXCD;

      if (PB0JM002.PC-PRDCU-APAO-FL == "E")
        PB0JS-0009(); /* Select unique customer row*/
      else
        PB0JS09(); /* Select unique customer row*/
      end

      if (SQLCA.VAGen_SQLCODE == 0) /* Customer exists*/
        if (KUNREC.XXXSTAT == "A") /* Statust active*/
          KUMREC.KUCCOID = PB0JM002.KUCCOID; /* get cust. name*/
          KUMREC.KUMSTRID = PB0JM002.KUMSTRID;

          if (PB0JM002.PC-PRDCU-APAO-FL == "E")
            PB0JS-0014(); /* Select unique customer row*/
          else
            PB0JS14(); /* Select the customer store row*/
          end

          if (SQLCA.VAGen_SQLCODE == 0)
            if (KUMREC.XXXSTAT == "A") /* Status active*/
              PB0JM002.PC2NAME = KUMREC.KUMSTRNM;
            else
              if (PB0JM002.XXXSTAT == "A") /* If cust xref active*/
                converseLib.validationFailed(327); /* Customer number inactive*/
                PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
                set PB0JM002.XNXCD cursor, modified, bold;
                set PB0JM002.KUMSTRID cursor, modified, bold;
                set PB0JM002.KUCCOID cursor, modified, bold;
              end
            end
          else
            PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
            set PB0JM002.XNXCD cursor, modified, bold;
            set PB0JM002.KUMSTRID cursor, modified, bold;
            set PB0JM002.KUCCOID cursor, modified, bold;
            converseLib.validationFailed(47); /* Customer number invalid*/
          end
        else
          if (PB0JM002.XXXSTAT == "A") /* If cust xref active*/
            PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
            set PB0JM002.XNXCD cursor, modified, bold;
            set PB0JM002.KUMSTRID cursor, modified, bold;
            set PB0JM002.KUCCOID cursor, modified, bold;
            converseLib.validationFailed(327); /* Customer number invalid*/
          end
        end
      else
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.XNXCD cursor, modified, bold;
        set PB0JM002.KUMSTRID cursor, modified, bold;
        set PB0JM002.KUCCOID cursor, modified, bold;
        converseLib.validationFailed(47); /* Customer number invalid*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* VERIFY IF CUSTOMER ALREADY EXISTS*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD == "S" /* Xref type is screener*/
   || PB0JM002.YPCCD == "C") /* Xref type is customer*/
    if (PB0JM002.KUCCOID > 0
     || PB0JM002.KUMSTRID > 0
     || PB0JM002.XNXCD > 0)
      if (PB0JM002.XGPCD != PB0JW02.XGPCD[PB0JWIXM]
       || PB0JM002.KUCCOID != PB0JW02.KUCCOID[PB0JWIXM]
       || PB0JM002.KUMSTRID != PB0JW02.KUMSTRID[PB0JWIXM]
       || PB0JM002.XNXCD != PB0JW02.XNXCD[PB0JWIXM])
        VPRDCU03.XGPCD = PB0JM002.XGPCD;
        VPRDCU03.KUCCOID = PB0JM002.KUCCOID;
        VPRDCU03.KUMSTRID = PB0JM002.KUMSTRID;
        VPRDCU03.XNXCD = PB0JM002.XNXCD;

        PB0JS11(); /* Select xref customer row*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Customer xref exists*/
          PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
          set PB0JM002.XNXCD cursor, modified, bold;
          set PB0JM002.KUMSTRID cursor, modified, bold;
          set PB0JM002.KUCCOID cursor, modified, bold;
          if (VPRDCU03.XXXSTAT == "A")
            converseLib.validationFailed(19); /* Duplicate of active entry*/
          else
            converseLib.validationFailed(20); /* Duplicate of inactive entry*/
          end
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE THE WAREHOUSE.*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.XWHCD > " ")
    if (PB0JM002.PC-PRDCU-APAO-FL != "W")

      converseLib.validationFailed(523); /* Cannot enter warehouse*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.XWHCD cursor, modified, bold;

    else /* ===> code not in table*/
      if (PB0JM002.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

        VPRDCU03.XWHCD = PB0JM002.XWHCD;
        PB0JW01.PB0JWSWR = "Y"; /* Request for data*/

      else /* ===> code not in table*/

        converseLib.validationFailed(59); /* Warehouse must be entered*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.XWHCD cursor, modified, bold;

      end
    end
  else /* ===> code not in table*/
    if (PB0JM002.PC-PRDCU-APAO-FL == "W")
      converseLib.validationFailed(59); /* WAREHOUSE MUST BE ENTERED*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.XWHCD cursor, modified, bold;

    end
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE THE APAO FLAG.*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.PC-PRDCU-APAO-FL != PB0JW03.PC-PRDCU-APAO-FL
   && PB0JW03.PC-PRDCU-APAO-FL == "W")
    converseLib.validationFailed(515); /* CANNOT CHANGE FROM 'W'*/
    PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
    set PB0JM002.PC-PRDCU-APAO-FL cursor, modified, bold;

  else
    if (PB0JM002.PC-PRDCU-APAO-FL != PB0JW03.PC-PRDCU-APAO-FL)
      if (PB0JM002.PC-PRDCU-APAO-FL in PC0CTBL.PC-PRDCU-APAO-FL)

        PB0JW03.PC-PRDCU-APAO-FL = PB0JM002.PC-PRDCU-APAO-FL;
        PB0JW01.PB0JWSWR = "Y"; /* Request for data*/

      else /* ===> code not in table*/

        converseLib.validationFailed(515); /* Status invalid*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.PC-PRDCU-APAO-FL cursor, modified, bold;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE RTA days field.*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.XGPCD == "02")
    if (PB0JM002.PCXCTRTA > -100
     && PB0JM002.PCXCTRTA < 100)

    else
      converseLib.validationFailed(526); /* valid rta day range -99 thru 99*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.PCXCTRTA cursor, modified, bold;

    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER XREF TYPE*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD > " ") /* If xref type code entered*/
    if (PB0JM002.YPCCD in YPCTBL.YPCCD
     && YPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PB0JM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    else
      PB0JM002.YPCSDESC = " "; /* Clear description fields*/
      converseLib.validationFailed(46); /* Customer xref invalid*/
      PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
      set PB0JM002.YPCCD cursor, modified, bold;
    end
  else
    PB0JM002.YPCSDESC = " "; /* Clear description fields*/
    converseLib.validationFailed(46); /* Customer xref invalid*/
    PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
    set PB0JM002.YPCCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER REFERENCE ID*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.PC2REFID > " " /* If ref id entered*/
   && PB0JM002.YPCCD == "S")  /* screener xref type*/
    converseLib.validationFailed(244); /* Customer xref invalid*/
    PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
    set PB0JM002.PC2REFID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER XREF CODE FOR CUSTOMER XREF TYPE SCREENER*/
   /* ------------------------------------------------------------*/

  if (PB0JM002.YPCCD == "S") /* Screen xref type*/
    FY1REC.XGPCD = PB0JM002.XGPCD;
    FY1REC.FY1FCTYC = PB0JM002.PC2CUXID;

    PB0JS10(); /* Select unique factory*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT != "A") /* Status active*/
        converseLib.validationFailed(181); /* Customer xref code invalid*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.YPCCD cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(181); /* Customer xref code invalid*/
        PB0JM002.XXXPRCNM = "PB0J441"; /* Process name*/
        set PB0JM002.YPCCD cursor, modified, bold;
      end
    end
  end

end // end PB0J441

// Process valid input request
Function PB0J450()
   /* ------------------------------------------------------------*/
   /* Verify that the table row exists for the customer xref*/
   /* If found then update row and display message*/
   /* ------------------------------------------------------------*/

  if (PB0JW01.PB0JWDEF == "N"           /* no data was entered*/
   || converseVar.validationMsgNum != 0 /* or errors were found*/
   || PB0JW01.PB0JWBYF == "Y")          /* bypass processing*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Verify that table row exists before update*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* clear records*/

  VPRDCU03.XGPCD = PB0JM002.XGPCD; /* gpc code*/
  VPRDCU03.PC2CUXID = PB0JM002.PC2CUXID; /* customer xref code*/

  PB0JS16(); /* select the customer xref row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if customer xref record not found*/
    PB0JM001.XXXPRCNM = "PB0J450";
    PB0JW01.PB0JWMAP = 1; /* reset map*/
    PB0JW01.XGPCD = " "; /* force gpc validation*/
    converseLib.validationFailed(26); /* data deleted by another application*/
    exit stack; /* display msg*/
  end

   /* ------------------------------------------------------------*/
    /* Format VPRDCU03 for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current time*/

  VPRDCU03.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRDCU03.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPRDCU03.KUCCOID = PB0JM002.KUCCOID; /* company code*/
  VPRDCU03.KUMSTRID = PB0JM002.KUMSTRID; /* store id*/
  VPRDCU03.XNXCD = PB0JM002.XNXCD; /* dept nbr*/
  VPRDCU03.YPCCD = PB0JM002.YPCCD; /* xref code*/
  VPRDCU03.PC2NAME = PB0JM002.PC2NAME; /* customer name*/
  VPRDCU03.TSCLOCCD = PB0JM002.TSCLOCCD; /* destination*/
  VPRDCU03.PO-DIR-SHP-ADJ-DY = PB0JM002.PO-DIR-SHP-ADJ-DY;
  if (PB0JM002.PB0JMUCC == " ")
    VPRDCU03.XCTCD = PB0JM002.TSCLOCCD;
    PB0JM002.PB0JMUCC = PB0JM002.TSCLOCCD;
  else
    VPRDCU03.XCTCD = PB0JM002.PB0JMUCC; /* ultimate country code*/
  end
  VPRDCU03.YSMXDV = PB0JM002.YSMXDV; /* division*/
  VPRDCU03.PC2INSEG = PB0JM002.PC2INSEG; /* iseg code*/
  VPRDCU03.PC2SEGAB = PB0JM002.PC2SEGAB; /* iseg abrv*/
  VPRDCU03.PC2SEGDE = PB0JM002.PC2SEGDE; /* iseg desc*/
  VPRDCU03.PC-PRDCU-APAO-FL = PB0JM002.PC-PRDCU-APAO-FL;
  VPRDCU03.XWHCD = PB0JM002.XWHCD; /* warehouse*/
  VPRDCU03.PC2REFID = PB0JM002.PC2REFID; /* cust ref id*/
  VPRDCU03.XXXSTAT = PB0JM002.XXXSTAT; /* status*/
  VPRDCU03.ZZZCHGCT = PB0JW02.ZZZCHGCT[PB0JWIXM];
  if (PB0JM002.XGPCD == "02")
    VPRDCU03.XCTRTADY = PB0JM002.PCXCTRTA; /* rta day*/
  end
                                   /* load the chg count*/

  PB0JS13(); /* update customer xref row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if customer xref record not found*/
    PB0JM002.XXXPRCNM = "PB0J450";
    converseLib.validationFailed(12); /* data update by another application*/

     /* select and load the new version of the record*/

    set VPRDCU03 empty; /* clear records*/

    VPRDCU03.XGPCD = PB0JM002.XGPCD; /* gpc code*/
    VPRDCU03.PC2CUXID = PB0JM002.PC2CUXID; /* customer xref code*/

    PB0JS16(); /* select the customer xref row*/

    PB0JM002.KUCCOID = VPRDCU03.KUCCOID; /* display cust xref chg data*/
    PB0JM002.KUMSTRID = VPRDCU03.KUMSTRID;
    PB0JM002.XNXCD = VPRDCU03.XNXCD;
    PB0JM002.YPCCD = VPRDCU03.YPCCD;
    PB0JM002.PC2NAME = VPRDCU03.PC2NAME;
    PB0JM002.PB0JMUCC = VPRDCU03.XCTCD;
    if (VPRDCU03.XCTCD in XCTTBL.XCTCD)
      PB0JM002.PB0JMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    PB0JM002.TSCLOCCD = VPRDCU03.TSCLOCCD;
    PB0JM002.YSMXDV = VPRDCU03.YSMXDV;
    PB0JM002.PC2INSEG = VPRDCU03.PC2INSEG;
    PB0JM002.PC2SEGAB = VPRDCU03.PC2SEGAB;
    PB0JM002.PC2SEGDE = VPRDCU03.PC2SEGDE;
    PB0JM002.PC-PRDCU-APAO-FL = VPRDCU03.PC-PRDCU-APAO-FL;
    PB0JM002.XWHCD = VPRDCU03.XWHCD;
    PB0JM002.PC2REFID = VPRDCU03.PC2REFID;
    PB0JM002.XXXSTAT = VPRDCU03.XXXSTAT;
    TSCREC.TSCLOCCD = VPRDCU03.TSCLOCCD;
    if (PB0JM002.XGPCD == "02")
      PB0JM002.PCXCTRTA = VPRDCU03.XCTRTADY;
    end

    PB0JS03(); /* select trans. location rec*/

    if (SQLCA.VAGen_SQLCODE == 0
     && TSCREC.XXXSTAT == "A")
      PB0JM002.XCTCD = TSCREC.XCTCD;
      PB0JM002.XXXCITY = TSCREC.XXXCITY;
    else
      PB0JM002.XCTCD = " ";
      PB0JM002.XXXCITY = " ";
    end

       /* update temporary storage*/

    PB0JW02.XGPCD[PB0JWIXM] = PB0JM002.XGPCD; /* gpc code*/
    PB0JW02.PC2CUXID[PB0JWIXM] = PB0JM002.PC2CUXID; /* xref code*/
    PB0JW02.KUCCOID[PB0JWIXM] = PB0JM002.KUCCOID; /* company code*/
    PB0JW02.KUMSTRID[PB0JWIXM] = PB0JM002.KUMSTRID; /* store id*/
    PB0JW02.XNXCD[PB0JWIXM] = PB0JM002.XNXCD; /* dept nbr*/
    PB0JW02.PC2NAME[PB0JWIXM] = PB0JM002.PC2NAME; /* dept nbr*/
    PB0JW02.XXXCITY[PB0JWIXM] = PB0JM002.XXXCITY; /* dept nbr*/
    PB0JW02.XCTCD[PB0JWIXM] = PB0JM002.XCTCD; /* country code*/
    PB0JW02.TSCLOCCD[PB0JWIXM] = PB0JM002.TSCLOCCD; /* location code*/
    PB0JW02.PC2INSEG[PB0JWIXM] = PB0JM002.PC2INSEG; /* iseg code*/
    PB0JW02.PC2SEGAB[PB0JWIXM] = PB0JM002.PC2SEGAB; /* iseg abrv*/
    PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM] = PB0JM002.PC-PRDCU-APAO-FL;
    PB0JW02.XWHCD[PB0JWIXM] = PB0JM002.XWHCD; /* warehouse*/
    PB0JW02.PC2SEGDE[PB0JWIXM] = PB0JM002.PC2SEGDE; /* iseg desc*/
    PB0JW02.YSMXDV[PB0JWIXM] = PB0JM002.YSMXDV; /* division code*/
    PB0JW02.YPCCD[PB0JWIXM] = PB0JM002.YPCCD; /* xref type*/
    PB0JW02.PB0JMUCC[PB0JWIXM] = PB0JM002.PB0JMUCC; /* ult cntry*/
    PB0JW02.PC2REFID[PB0JWIXM] = PB0JM002.PC2REFID; /* ref id*/
    PB0JW02.XXXSTAT[PB0JWIXM] = PB0JM002.XXXSTAT; /* status code*/
    PB0JW02.ZZZCHGCT[PB0JWIXM] = VPRDCU03.ZZZCHGCT; /* load chg count*/
    if (PB0JM002.XGPCD == "02")
      PB0JW02.PCXCTRTA[PB0JWIXM] = PB0JM002.PCXCTRTA; /* rta day*/
    end

    PB0JS15(); /* update temporary storage*/

    return;
  end

  if (converseVar.validationMsgNum == 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit any updates*/
    PB0JW02.XGPCD[PB0JWIXM] = PB0JM002.XGPCD; /* gpc code*/
    PB0JW02.PC2CUXID[PB0JWIXM] = PB0JM002.PC2CUXID; /* xref code*/
    PB0JW02.KUCCOID[PB0JWIXM] = PB0JM002.KUCCOID; /* company code*/
    PB0JW02.KUMSTRID[PB0JWIXM] = PB0JM002.KUMSTRID; /* store id*/
    PB0JW02.XNXCD[PB0JWIXM] = PB0JM002.XNXCD; /* dept nbr*/
    PB0JW02.PC2NAME[PB0JWIXM] = PB0JM002.PC2NAME; /* dept nbr*/
    PB0JW02.XXXCITY[PB0JWIXM] = PB0JM002.XXXCITY; /* dept nbr*/
    PB0JW02.XCTCD[PB0JWIXM] = PB0JM002.XCTCD; /* country code*/
    PB0JW02.TSCLOCCD[PB0JWIXM] = PB0JM002.TSCLOCCD; /* location code*/
    PB0JW02.PC2INSEG[PB0JWIXM] = PB0JM002.PC2INSEG; /* iseg code*/
    PB0JW02.PC2SEGAB[PB0JWIXM] = PB0JM002.PC2SEGAB; /* iseg abrv*/
    PB0JW02.PC2SEGDE[PB0JWIXM] = PB0JM002.PC2SEGDE; /* iseg desc*/
    PB0JW02.PC-PRDCU-APAO-FL[PB0JWIXM] = PB0JM002.PC-PRDCU-APAO-FL;
    PB0JW02.XWHCD[PB0JWIXM] = PB0JM002.XWHCD; /* warehouse*/
    PB0JW02.YSMXDV[PB0JWIXM] = PB0JM002.YSMXDV; /* division*/
    PB0JW02.PO-DIR-SHP-ADJ-DY[PB0JWIXM] = PB0JM002.PO-DIR-SHP-ADJ-DY;
    PB0JW02.YPCCD[PB0JWIXM] = PB0JM002.YPCCD; /* xref type*/
    PB0JW02.PB0JMUCC[PB0JWIXM] = PB0JM002.PB0JMUCC; /* ult cntry*/
    PB0JW02.PC2REFID[PB0JWIXM] = PB0JM002.PC2REFID; /* cust ref id*/
    PB0JW02.XXXSTAT[PB0JWIXM] = PB0JM002.XXXSTAT; /* status code*/
    PB0JW02.ZZZCHGCT[PB0JWIXM] = VPRDCU03.ZZZCHGCT; /* load chg count*/
    if (PB0JM002.XGPCD == "02")
      PB0JW02.PCXCTRTA[PB0JWIXM] = PB0JM002.PCXCTRTA; /* rta day*/
    end

    PB0JS15(); /* update temporary storage*/

    PB0JW01.PB0JWMFL = "Y"; /* set message flag*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/
  end

end // end PB0J450

// Select customer table  EURD
Function PB0JS-0009()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set KUNREC empty;
   /* THIS WAS PUT HERE UNTIL THE DEURO TABLE IS SETUP*/
   /*  */
  KUNREC.XXXSTAT = "A";
  SQLCA.VAGen_SQLCODE = 0;
  return; /* Return to previous process*/
   /*  */
   /* THIS WAS PU IN HERE UNTIL THE DEURO TABLE IS SETUP*/

  try
    call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "CS-0009"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DEURO.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VECUST01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "CS-0009"; /* Process name*/

  exit stack;

end // end PB0JS-0009

// Select customer store row EURD
Function PB0JS-0014()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "CS-0014"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DEURO.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "CS-0014"; /* Process name*/


  exit stack;

end // end PB0JS-0014

// Purge temp storage
Function PB0JS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PB0J"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0JS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PB0JW01.PB0JWTSP = 0; /* Reset current page number*/
  PB0JW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PB0JS01

// Select Set VPRDCU03 (S1,S2,S3)
Function PB0JS02()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows using gpc order by cust xref*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (PB0JW03.PC2CUXID > " ") /* Cust xref entered*/
    try
      call "VPRDCU03" ("S1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PB0JW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("S2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PB0JW03.KUCCOID > 0) /* If Cust nbr entered*/
        try
          call "VPRDCU03" ("S3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("S1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  PB0JW01.XGPCD = " "; /* force validation logic*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PB0JW01.PB0JWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM001.XXXPRCNM = "PB0JS02"; /* Process name*/

  exit stack;

end // end PB0JS02

// Select transportation location
Function PB0JS03()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PB0JW01.PB0JWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0JW01.XGPCD = " "; /* force gpc validation*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS03"; /* Process name*/
  TA1REC.TA1LOC = "SELECT TRANS. LOCATION ROW ";
  TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PB0JW01.PB0JWMAP == 1)
    PB0JM001.XXXPRCNM = "PB0JS03"; /* Process name*/
  else
    if (PB0JW01.PB0JWMAP == 2)
      PB0JM002.XXXPRCNM = "PB0JS03"; /* Process name*/
    end
  end

  exit stack;

end // end PB0JS03

// Fetch VPRDCU03 row
Function PB0JS04()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PB0JW03.PC2CUXID > " ") /* If Cust xref entered*/
    try
      call "VPRDCU03" ("N1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PB0JW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("N2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PB0JW03.KUCCOID > 0) /* If Cust nbr entered*/
        try
          call "VPRDCU03" ("N3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("N1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0JW01.PB0JWCSW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  PB0JW01.XGPCD = " "; /* force gpc validation*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PB0JW01.PB0JWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM001.XXXPRCNM = "PB0JS04"; /* Process name*/

  exit stack;

end // end PB0JS04

// Add page to temp storage
Function PB0JS05()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
   /* 13 rows x 132 + 4 bytes*/
  PB0JW02.PB0JWLEN = 1720; /* page length*/
  TA5REC.TA5APPID = "PB0J"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PB0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* everything is a-ok*/
    PB0JW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PB0JW01.PB0JWIXM = 1; /* Reset display line number*/
    set PB0JW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0JS05"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0JM001.XXXPRCNM = "PB0JS05"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0JW01.XGPCD = " "; /* force gpc validation*/

    exit stack;

  end

end // end PB0JS05

// Close selected VPRDCU03 set
Function PB0JS06()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PB0JW03.PC2CUXID > " ") /* If Cust xref entered*/
    try
      call "VPRDCU03" ("C1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PB0JW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("C2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PB0JW03.KUCCOID > 0) /* If Iseg entered*/
        try
          call "VPRDCU03" ("C3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("C1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0JS06"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    PB0JM001.XXXPRCNM = "PB0JS06"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0JW01.XGPCD = " "; /* force gpc validation*/

    exit stack;

  end

end // end PB0JS06

// Obtain lines from temp storage
Function PB0JS07()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
   /* 13 rows x 132 + 4 bytes*/
  PB0JW02.PB0JWLEN = 1720; /* temporary storage page length*/
  TA5REC.TA5APPID = "PB0J"; /* Application identification*/
  TA5REC.TA5TSQIX = PB0JW01.PB0JWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PB0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0JS07"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0JM001"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0JW01.XGPCD = " "; /* force gpc validation*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0JM001.XXXPRCNM = "PB0JS07"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0JS07

// Select customer table
Function PB0JS09()
   /*  */
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS09"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DCUST.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS09"; /* Process name*/

  exit stack;

end // end PB0JS09

// Select factory table
Function PB0JS10()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS10"; /* Process name*/

  exit stack;

end // end PB0JS10

// Select customer xref row
Function PB0JS11()
   /*  */
   /* ------------------------------------------------------------*/
   /* Select a unique row using gpc and customer number*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("SA", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS11"; /* Process name*/

  exit stack;

end // end PB0JS11

// upd customer xref row
Function PB0JS13()
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("U ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS13"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS13"; /* Process name*/

  exit stack;

end // end PB0JS13

// Select customer store row
Function PB0JS14()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS14"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS14"; /* Process name*/


  exit stack;

end // end PB0JS14

// update temporary storage
Function PB0JS15()

   /* ------------------------------------------------------------*/
   /* Update the temp storage page.*/
   /* ------------------------------------------------------------*/
   /* 13 rows x 132 bytes + 4 bytes for length*/
  PB0JW02.PB0JWLEN = 1720; /* temp storage page length*/
  TA5REC.TA5APPID = "PB0J"; /* Application identification*/
  TA5REC.TA5TSQIX = PB0JW01.PB0JWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PB0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0JS15"; /* Process name*/
    TA1REC.TA1LOC = "UPD PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0JM002"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0JW01.XGPCD = " "; /* force gpc validation*/
    PB0JW01.PB0JWMAP = 1; /* redisplay list screen*/
    PB0JM001.XXXPRCNM = "PB0JS15"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0JS15

// select customer xref
Function PB0JS16()
   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0JS16"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0JM002.XXXPRCNM = "PB0JS16"; /* Process name*/

  exit stack;

end // end PB0JS16

//*** RECORD=PB0JW01 ****
// Working storage for pb0j - p.o. Customer xref
// ***********************
Record PB0JW01 type basicRecord
  5 PB0JW1GP PB0JW1GP ; 
    10 PB0JWIXM PB0JWIXM ; 
    10 PB0JWCFM PB0JWCFM ; 
    10 PB0JWLIX PB0JWLIX ; 
    10 PB0JWPNB PB0JWPNB ; 
    10 PB0JWIDX PB0JWIDX ; 
    10 PB0JWSZI PB0JWSZI ; 
    10 PB0JWSGP PB0JWSGP ; 
    10 PB0JWSIX PB0JWSIX ; 
    10 PB0JWSPG PB0JWSPG ; 
    10 PB0JWCSW PB0JWCSW ; 
    10 PB0JWIOT PB0JWIOT ; 
    10 PB0JWXRF PB0JWXRF ; 
    10 PB0JWSFL PB0JWSFL ; 
    10 PB0JWPSW PB0JWPSW ; 
    10 PB0JWSWR PB0JWSWR ; 
    10 PB0JWTSP PB0JWTSP ; 
    10 PB0JWMAP PB0JWMAP ; 
    10 PB0JWFSW PB0JWFSW ; 
    10 XGPDESC XGPDESC ; 
    10 PB0JW1KY PB0JW1KY ; 
      15 XGPCD XGPCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YSMXDV YSMXDV ; 
    10 YPCCD YPCCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 PB0JMUCC PB0JMUCC ; 
    10 PB0JMCUX PB0JMCUX ; 
    10 PB0JWCFL PB0JWCFL ; 
    10 PB0JWMFL PB0JWMFL ; 
    10 PB0JWUPD PB0JWUPD ; 
    10 PB0JWINQ PB0JWINQ ; 
    10 PB0JWBYF PB0JWBYF ; 
    10 PB0JWDEF PB0JWDEF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PB0JWCXS PB0JWCXS ; 
    10 PB0JWISS PB0JWISS ; 
    10 PB0JWOIX PB0JWOIX ; 
    10 PB0JWJIX PB0JWJIX ; 
end // end PB0JW01

//*** RECORD=PB0JW02 ****
// Temp. storage record for pb0j - p.o. customer xref list scrn
// ***********************
Record PB0JW02 type basicRecord
  10 PB0JWLEN PB0JWLEN ; 
  10 PB0JWLIN PB0JWLIN [13] ; 
    15 PB0JMSEL PB0JMSEL ; 
    15 XGPCD XGPCD ; 
    15 PC2CUXID PC2CUXID ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 PC2NAME PC2NAME ; 
    15 XCTCD XCTCD ; 
    15 XXXCITY XXXCITY ; 
    15 TSCLOCCD TSCLOCCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 PC2SEGAB PC2SEGAB ; 
    15 PC2SEGDE PC2SEGDE ; 
    15 YSMXDV YSMXDV ; 
    15 YPCCD YPCCD ; 
    15 PB0JMUCC PB0JMUCC ; 
    15 PC2REFID PC2REFID ; 
    15 PCXCTRTA PCXCTRTA ; 
    15 PO-DIR-SHP-ADJ-DY PO-DIR-SHP-ADJ-DY ; 
    15 PC-PRDCU-APAO-FL PC-PRDCU-APAO-FL ; 
    15 XWHCD XWHCD ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PB0JW02

//*** RECORD=PB0JW03 ****
// Working storage for PB0J - Inquiry header fields
// ***********************
Record PB0JW03 type basicRecord
  10 PC2CUXID PC2CUXID ; 
  10 PC2INSEG PC2INSEG ; 
  10 KUCCOID KUCCOID ; 
  10 XXXSTAT XXXSTAT ; 
  10 PC-PRDCU-APAO-FL PC-PRDCU-APAO-FL ; 
end // end PB0JW03

DataItem PB0JMCUX char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PB0JMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ultimate Country code
DataItem PB0JMUCC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pb0jw01 Group level
DataItem PB0JW1GP char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key
DataItem PB0JW1KY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bypass processing flag
DataItem PB0JWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer special type flag
DataItem PB0JWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add confirmation flag
DataItem PB0JWCFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PB0JWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save key for pc-prdcu-id
DataItem PB0JWCXS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem PB0JWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag
DataItem PB0JWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for working storage
DataItem PB0JWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry allowed flag
DataItem PB0JWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I-o task indicator
DataItem PB0JWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save key for pc-cu-in-seg-cd
DataItem PB0JWISS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PB0JWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JcL line index
DataItem PB0JWJIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tempory storage length
DataItem PB0JWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display line
DataItem PB0JWLIN char(132)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Load index for pb0jw03 rec
DataItem PB0JWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Map to be displayed
DataItem PB0JWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Message flag
DataItem PB0JWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Override index
DataItem PB0JWOIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp page location number
DataItem PB0JWPNB num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Problem switch
DataItem PB0JWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem PB0JWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save gpc code
DataItem PB0JWSGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index
DataItem PB0JWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save page number
DataItem PB0JWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem PB0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PB0JWSZI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temp storage page
DataItem PB0JWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update allowed flag
DataItem PB0JWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Xref type found flag
DataItem PB0JWXRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

