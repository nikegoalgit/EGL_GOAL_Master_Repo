package pb0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0M ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO SUBMIT THE JOB PC1411.  IT
// *   WILL PRINT THE APPAREL AIR FREIGHT REQUEST FORM.
// *
// *
// *   DATE     USERID  COMMENTS
// * ________  ________ _______________________________________
// * 04/09/98  KGRAHA   Created Application
// ************************************************************
// *********************
Program PB0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0MW01 PB0MW01; // record
  PB0MW02 PB0MW02; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XCTHREC XCTHREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use PB0MT01 {deleteAfterUse = yes}; // table
  use PB0MT11 {deleteAfterUse = yes}; // table
  use PB0MM.PB0MM010,  // forms
      PB0MM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* initialize records and maps*/
     /* ------------------------------------------------------------*/

    set PB0MW01 empty; /* Initialize working storage*/
    set PB0MW02 empty; /* Initialize jcl working storage*/

    set ERRSQLCA empty; /* Initialize*/
    set SQLCA empty; /* Initialize*/

    set TA1REC empty; /* Initialize*/
    set TA2REC empty; /* Initialize*/
    set XCTHREC empty; /* Initialize theater of ops record*/
    set TA6REC empty; /* Initialize Jcl record*/
    set TAEREC empty; /* Initialize*/

    set PB0MM010 initial; /* Initialize map*/

    PB0M001: PB0M001();
    goto PB0M001;
  end // end main
end // end PB0M


// main process
Function PB0M001()
   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/

  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PB0MM010.XXXPRCNM = "PB0M001"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAILVL[3] == "Y" /* User can enter*/
   && PCWREC.XGPCD == "03")     /* Apparel only*/

    PB0M002(); /* Report generation process*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* IF FOR SOME REASON THE USER IS NOT AUTHORIZED TO GET INTO*/
     /* THIS PROGRAM AND IS NOT AUTHORIZED TO GET TO THE PC0A MENU*/
     /* THE USER WILL BE KICKED OUT TO THE MAIN MENU. THIS WILL*/
     /* ALLOW THE PROGRAM TO TERMINATE AND NOT RESULT IN AN*/
     /* INFINITE LOOP.*/
    /* ------------------------------------------------------------*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end

end // end PB0M001


// master menu
Function PB0M002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0M100(); /* Format and display the map*/

  PB0M200(); /* Check attention identifier*/

  PB0M300(); /* Reset fields to normal intensity*/

  PB0M400(); /* Verify the data that was entered*/

  PB0M500(); /* Process valid input request*/


end // end PB0M002


// format and display the map
Function PB0M100()
   /* ------------------------------------------------------------*/
   /* If no error to display, format the map output area.*/
   /* Indicate sound audible alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/

    PB0MM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move Current date to map*/
    PB0MM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

  else

    set PB0MM010 alarm; /* Indicate sound alarm*/

  end

  converse PB0MM010 ;


end // end PB0M100


// check attention identifiers
Function PB0M200()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0MM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0MM010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0MM010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0MM010.XXXPRCNM = "PB0M200"; /* Process name*/
    end

    set PB0MM010.CATOAP cursor, bold; /* Highlight*/
    PB0MM010.XXXPRCNM = "PB0M200"; /* Process name*/
    return; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PB0MM010.XXXPRCNM = "PB0M200"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PB0MM010.XXXPRCNM = "PB0M200"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0MM010.XXXPRCNM = "PB0M200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0M200


// reset highlighted fields
Function PB0M300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0MM010.PC6AIRNB initialAttributes, cursor; /* A/F nbr*/
  set PB0MM010.PC3PONBR initialAttributes; /* PO nbr*/
  set PB0MM010.PC6PLAN initialAttributes; /* Plan nbr*/
  set PB0MM010.PB0MM-NEED-DT initialAttributes; /* Need date*/
  set PB0MM010.PB0MM-PMNT-CD initialAttributes; /* Paymnent Code*/
  set PB0MM010.PB0MM-REASON initialAttributes; /* Reason*/
  set PB0MM010.PB0MM-CMNT1 initialAttributes; /* Comment #1*/
  set PB0MM010.PB0MM-CMNT2 initialAttributes; /* Comment #2*/
  set PB0MM010.CATOAP initialAttributes; /* FAST PATH to application*/
  set PB0MM010.CAITEM initialAttributes; /* FAST PATH application data*/

end // end PB0M300


// verify data that was entered
Function PB0M400()
   /* ------------------------------------------------------------*/
   /* Verify the values entered.*/
   /* Exit to redisplay the map if any error was found.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Validate Payment Code*/
   /* ------------------------------------------------------------*/

  if (PB0MM010.PB0MM-PMNT-CD != "AN"
   && PB0MM010.PB0MM-PMNT-CD != "AP"
   && PB0MM010.PB0MM-PMNT-CD != "AF"
   && PB0MM010.PB0MM-PMNT-CD != "AS")

    converseLib.validationFailed(555); /* Display Invalid Payment Code*/
    set PB0MM010.PB0MM-PMNT-CD cursor, bold; /* Highlight Payment Code*/
    PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/
    PB0MW01.PB0MW-PMNT-CD = PB0MM010.PB0MM-PMNT-CD;

  end

   /* ------------------------------------------------------------*/
   /* Validate Need Date*/
   /* ------------------------------------------------------------*/

  if (PB0MM010.PB0MM-NEED-DT != 0
   || PB0MM010.PB0MM-NEED-DT != PB0MW01.PB0MW-NEED-DT)

    set TA2REC empty; /* Initialize record*/
    TA2REC.TA2GRGG = PB0MM010.PB0MM-NEED-DT;

    PB0MS10(); /* Call to TA0040*/

    if (TA2REC.TA2RTNCD == 0)
      PB0MW01.PB0MW-NEED-DT = PB0MM010.PB0MM-NEED-DT;
    else
      set PB0MM010.PB0MM-NEED-DT cursor, bold;
      converseLib.validationFailed(38);
      PB0MM010.XXXPRCNM = "PB0M400";
    end
  else
    PB0MW01.PB0MW-NEED-DT = 0;
    set PB0MM010.PB0MM-NEED-DT cursor, bold;
    converseLib.validationFailed(38);
    PB0MM010.XXXPRCNM = "PB0M400";
  end

   /* ------------------------------------------------------------*/
   /* Validate Plan Number*/
   /* ------------------------------------------------------------*/

  if (PB0MM010.PC6PLAN > 0)

    set PCYREC empty; /* Initialize record*/
    set VPOITM03 empty; /* Initialize record*/

    VPOITM03.PO-REG-CD = "01"; /* Region code*/
    VPOITM03.XGPCD = "03"; /* GPC code*/
    VPOITM03.PC3PONBR = PB0MM010.PC3PONBR; /* PO nbr*/
    VPOITM03.PC6PLAN = PB0MM010.PC6PLAN; /* Plan nbr*/

    if (VPOITM03.PC6AIRNB > 0) /* A/F nbr entered*/
      VPOITM03.PC6AIRNB = PB0MM010.PC6AIRNB;
    else
      VPOITM03.PC6AIRNB = -1; /* Wildcard A/F nbr*/
    end

    PB0MS21(); /* Declare VPOITM03 csr*/
    PB0MS22(); /* Select next VPOITM03 rcd*/

    if (converseVar.validationMsgNum == 554) /* Not found flag from PB0MS35*/

      converseLib.validationFailed(554); /* Invalid Plan msg*/
      set PB0MM010.PC6PLAN cursor, bold; /* Highlight Plan nbr*/
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/

    end

    PB0MS23(); /* Close VPOITM03 csr*/

  else

    if (PB0MM010.PC6AIRNB == 0) /* A/F number not entered*/

      set PB0MM010.PC6PLAN cursor, bold; /* Highlight Plan nbr*/
      converseLib.validationFailed(554); /* Display Invalid Plan Nbr*/
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Validate PO Number*/
   /* ------------------------------------------------------------*/

  if (PB0MM010.PC3PONBR > 0) /* If PO NUMBER entered*/
    VPOHDR02.PC3PONBR = 0; /* Initialize w.s. fields*/

    set VPOHDR02 empty; /* Initialize record*/

    VPOHDR02.PO-REG-CD = "01";
    VPOHDR02.XGPCD = "03"; /* GPC*/
    VPOHDR02.PC3PONBR = PB0MM010.PC3PONBR;

    PB0MS30(); /* Verify po number*/

    if (converseVar.validationMsgNum == 69) /* Not found msg from PB0MS30*/
      set PB0MM010.PC3PONBR cursor, bold;
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/

    end

  else

    if (PB0MM010.PC6AIRNB == 0) /* A/F number not entered*/

      set PB0MM010.PC3PONBR cursor, bold;
      converseLib.validationFailed(35); /* Display PO nbr not entered*/
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Validate A/F Number*/
   /* ------------------------------------------------------------*/


  if (PB0MM010.PC6AIRNB > 0) /* A/F number was entered*/

    set VPOITM03 empty; /* Initialize record*/

    VPOITM03.PO-REG-CD = "01";
    VPOITM03.XGPCD = "03"; /* GPC*/
    VPOITM03.PC6AIRNB = PB0MM010.PC6AIRNB; /* A/F nbr*/
    VPOITM03.PC3PONBR = -1; /* PO nbr*/
    VPOITM03.PC6PLAN = -1; /* Plan nbr*/

    PB0MS35(); /* Validate A/F nbr*/

    if (converseVar.validationMsgNum == 563) /* Not found flag from PB0MS35*/
      set PB0MM010.PC6AIRNB cursor, bold;
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/
    end

  else /* A/F number not entered*/

    if (PB0MM010.PC3PONBR == 0 /* If PO NUMBER not entered*/
     || PB0MM010.PC6PLAN == 0) /* or Plan number not entered*/

      set PB0MM010.PC6AIRNB cursor, bold;
      set PB0MM010.PC3PONBR bold;
      set PB0MM010.PC6PLAN bold; /* Highlight Plan nbr*/
      converseLib.validationFailed(562); /* Enter A/F # or PO # and Plan #*/
      PB0MM010.XXXPRCNM = "PB0M400"; /* Process name*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If Pf9 was pressed dont display the message*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error*/
    exit stack; /* Exit to display map*/
  else

    if (converseVar.eventKey is pf9
    )
      return;

    else

      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(384); /* Press PF9 to confirm msg*/
      end

    end
  end

end // end PB0M400


// prodess the valid data
Function PB0M500()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9 /* PF9 not pressed*/
   || converseVar.validationMsgNum != 0) /* we have a message*/

    return; /* return to top of job*/

  else

    set PB0MW01 empty;

    PB0MW01.XGPCD = "03";
    PB0MW01.PO-REG-CD = "01";
    PB0MW01.PB0MW-AF-NBR = PB0MM010.PC6AIRNB;
    PB0MW01.PB0MW-PO-NBR = PB0MM010.PC3PONBR;
    PB0MW01.PB0MW-PLAN-NBR = PB0MM010.PC6PLAN;
    PB0MW01.PB0MW-NEED-DT = PB0MM010.PB0MM-NEED-DT;
    PB0MW01.PB0MW-PMNT-CD = PB0MM010.PB0MM-PMNT-CD;
    PB0MW01.CAUSERID = COMMAREA.CAUSERID;
    PB0MW01.PB0MW-REASON = PB0MM010.PB0MM-REASON;
    PB0MW01.PB0MW-CMNT1 = PB0MM010.PB0MM-CMNT1;
    PB0MW01.PB0MW-CMNT2 = PB0MM010.PB0MM-CMNT2;

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
      PB0M510(); /* format production jcl*/
    else
      PB0M520(); /* format development jcl*/
    end
    set PB0MW02 empty;

  end


end // end PB0M500


// submit prod JCL
Function PB0M510()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0MW02.PB0MWOIX = 0; /* Initialize over. index*/
  PB0MW02.PB0MWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0MW02.PB0MWLIX > 0) /* Until end of table*/

    if (PB0MT01.TARTYPE[PB0MWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format parm rec 1*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM1-REC; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (PB0MT01.TARTYPE[PB0MWLIX] == "M") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parm rec 2*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM2-REC; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = "M"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PB0MT01.TARTYPE[PB0MWLIX] == "L") /* Parameters statement*/

          /* ------------------------------------------------------------*/
          /* Format parm rec 3*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM3-REC; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = "L"; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        else

          if (PB0MT01.TARTYPE[PB0MWLIX] == "K") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format parm rec 4*/
            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM4-REC; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = "K"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

          else

            if (PB0MT01.TARTYPE[PB0MWLIX] == "D") /* Remote printer card*/

              TA6REC.TA6SUBSW = "N";
                                   /* ===> display printer selection map*/
              TA6REC.XURDEST = "RMT999"; /* ===> print distrabution*/
              TA6REC.XURCOPY = 1; /* ===>number of copies*/
              PB0MW02.PB0MW-SAV-IDX = TA6INDEX;
                                   /* save idx before displaying map*/

              while (TA6REC.TA6RTNCD < "0")
                                   /* ===> Until subroutine completed*/
                XPTA0P(); /* ===> Print Request Subroutine*/
              end

              TA6INDEX = PB0MW02.PB0MW-SAV-IDX; /* reset index*/

              PB0MW02.PB0MWRMT = TA6REC.XURDEST;
                                   /* Selected printer cd*/

              PB0MW02.PB0MWLN1 = "//P0010.REPT001  DD  SYSOUT=A,DEST=";
              PB0MW02.PB0MWLN2 = ",OUTPUT=*.OUT01";

              TA6REC.TARJCL[TA6INDEX] = PB0MW02.PB0MWJCD; /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = "D"; /* Type*/

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
              PB0MW02.PB0MWLIX = PB0MW02.PB0MWLIX + 1;
                                   /* Increment table index*/

            end

            /* ------------------------------------------------------------*/
              /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PB0MT01.TARJCL[PB0MWLIX];
                                   /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PB0MT01.TARTYPE[PB0MWLIX];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/

          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0MT01.TARJCL[PB0MWLIX] == "/*EOF") /* End of table*/

      PB0MW02.PB0MWLIX = 0; /* Indicate end of table*/

    else

      PB0MW02.PB0MWLIX = PB0MW02.PB0MWLIX + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/
  TA6REC.TA6RTNCD = " "; /* Initialze return code*/

  PB0MS40(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0MM010.XXXPRCNM = "PB0M510"; /* Process name*/
    PB0MM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0MM010.XXXPRCNM = "PB0M510"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0M510


// submit test JCL
Function PB0M520()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0MW02.PB0MWOIX = 0; /* Initialize over. index*/
  PB0MW02.PB0MWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0MW02.PB0MWLIX > 0) /* Until end of table*/

    if (PB0MT11.TARTYPE[PB0MWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format parm rec 1*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM1-REC; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (PB0MT11.TARTYPE[PB0MWLIX] == "M") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parm rec 2*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM2-REC; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = "M"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PB0MT11.TARTYPE[PB0MWLIX] == "L") /* Parameters statement*/

          /* ------------------------------------------------------------*/
          /* Format parm rec 3*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM3-REC; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = "L"; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        else

          if (PB0MT11.TARTYPE[PB0MWLIX] == "K") /* Parameters statement*/


            /* ------------------------------------------------------------*/
            /* Format parm rec 4*/
            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PB0MW01.PARM4-REC; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = "K"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

          else



            /* ------------------------------------------------------------*/
              /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PB0MT11.TARJCL[PB0MWLIX];
                                   /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PB0MT11.TARTYPE[PB0MWLIX];
                                   /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/

          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0MT11.TARJCL[PB0MWLIX] == "/*EOF") /* End of table*/

      PB0MW02.PB0MWLIX = 0; /* Indicate end of table*/

    else

      PB0MW02.PB0MWLIX = PB0MW02.PB0MWLIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  PB0MS40(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0MM010.XXXPRCNM = "PB0M520"; /* Process name*/
    PB0MM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0MM010.XXXPRCNM = "PB0M520"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0M520


// Validate Need Date
Function PB0MS10()


   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate the need dates.*/
   /* ------------------------------------------------------------*/


  TA2REC.TA2GRTYP = "G"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get all greg formats*/

   /* ------------------------------------------------------------*/
   /* Call TA0040*/
   /* ------------------------------------------------------------*/


  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA2REC.TA2GRGA; /* date sent to validate*/

  PB0MM010.XXXPRCNM = "PB0MS10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0MS10"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PB0MS10


// Select (SW) Set/Open  VPOITM03
Function PB0MS21()
   /* ------------------------------------------------------------*/
   /* Declare cursor for DPRODC.VPOITM03*/
   /* ------------------------------------------------------------*/


  PCYREC.PCYFUNC = "SW";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0MM010.XXXPRCNM = "PB0MS21";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0MS21"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0MS21 ***********************/
end // end PB0MS21


// Fetch  (NW) Next row  VPOITM03
Function PB0MS22()
   /* ------------------------------------------------------------*/
   /* If row not found, return to prev. with EOF Cursor set.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NW";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(554); /* Display Invalid Plan Nbr*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0MM010.XXXPRCNM = "PB0MS22";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0MS22"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PB0MS22 ***********************/
end // end PB0MS22


// Close  (CW) Set       VPOITM03
Function PB0MS23()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOITM03*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CW";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0MM010.XXXPRCNM = "PB0MS23";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0MS23"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PB0MS23 ***********************/
end // end PB0MS23


// Select unique from VPOHDR02
Function PB0MS30()
   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOHDR02 to verify PO NUMBER.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0MM010.PC3PONBR cursor, bold;
        PB0MM010.XXXPRCNM = "PB0MS30"; /* Module name*/
        converseLib.validationFailed(69); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0MM010.XXXPRCNM = "PB0MS30"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0MS30"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0MM010 initial; /* Clear screen before display*/

  exit stack;


end // end PB0MS30


// Select unique from VPOITM03
Function PB0MS35()
   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOITM03 to verify A/F number.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" ("SW", SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(563); /* Invalid A/F nbr msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0MM010.XXXPRCNM = "PB0MS35"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0MS35"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0MM010 initial; /* Clear screen before display*/

  exit stack;


end // end PB0MS35


// submit JCL to internal reader
Function PB0MS40()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PB0MM010.XXXPRCNM = "PB0MS40"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PB0MM010.XXXPRCNM = "PB0MS40"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0MM010.XXXPRCNM = "PB0MS40"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PB0MS40


//*** RECORD=PB0MW01 ****
// This record is the PARM sent to PC141D.
// ***********************
Record PB0MW01 type basicRecord
  10 PARM1-REC PARM1-REC ; 
    15 XGPCD XGPCD ; 
    15 PO-REG-CD PO-REG-CD ; 
    15 PB0MW-AF-NBR PB0MW-AF-NBR ; 
    15 PB0MW-PO-NBR PB0MW-PO-NBR ; 
    15 PB0MW-PLAN-NBR PB0MW-PLAN-NBR ; 
    15 PB0MW-NEED-DT PB0MW-NEED-DT ; 
    15 PB0MW-PMNT-CD PB0MW-PMNT-CD ; 
    15 CAUSERID CAUSERID ; 
    15 * char(38) ; 
  10 PARM2-REC PARM2-REC ; 
    15 PB0MW-REASON PB0MW-REASON ; 
    15 * char(2) ; 
  10 PARM3-REC PARM3-REC ; 
    15 PB0MW-CMNT1 PB0MW-CMNT1 ; 
    15 * char(2) ; 
  10 PARM4-REC PARM4-REC ; 
    15 PB0MW-CMNT2 PB0MW-CMNT2 ; 
    15 * char(2) ; 
end // end PB0MW01


//*** RECORD=PB0MW02 ****
// ************************************************************
// *
// *      JCL WORKING STORAGE FOR  PB0M
// *
// *  DATE              USERID       COMMENTS
// * ________          _________    _______________________
// * 04/09/98          KGRAHA       created new record
// *
// ************************************************************
// ***********************
Record PB0MW02 type basicRecord
  10 PB0MWJCE PB0MWJCE ; 
    15 PB0MWEX1 PB0MWEX1 ; 
    15 PB0MWPGM PB0MWPGM ; 
    15 * char(58) ; 
  10 PB0MWJCP PB0MWJCP ; 
  10 PB0MWTYP PB0MWTYP ; 
  10 PB0MWOVR PB0MWOVR [6] ; 
  10 PB0MWJCC PB0MWJCC [6] ; 
    15 * char(19) ; 
    15 PB0MWCLG PB0MWCLG ; 
    15 * char(36) ; 
  10 PB0MWOIX PB0MWOIX ; 
  10 PB0MWLIX PB0MWLIX ; 
  10 PB0MWMFF PB0MWMFF ; 
  10 PB0MW-SAV-IDX PB0MW-SAV-IDX ; 
  10 * char(3) ; 
  10 PB0MWJCD PB0MWJCD ; 
    15 PB0MWLN1 PB0MWLN1 ; 
    15 PB0MWRMT PB0MWRMT ; 
    15 PB0MWLN2 PB0MWLN2 ; 
    15 * char(24) ; 
end // end PB0MW02


// Parm record
DataItem PARM1-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PARM2-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PARM3-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PARM4-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// PC_AIR_FRGT_NBR
DataItem PB0MW-AF-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// First extra comments line
DataItem PB0MW-CMNT1 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Second extra comments line
DataItem PB0MW-CMNT2 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// User entered need dt
DataItem PB0MW-NEED-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// PC_PO_PLAN_NBR
DataItem PB0MW-PLAN-NBR num(2)  {
  upperCase = yes, currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Payment comments code
DataItem PB0MW-PMNT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// PC_PO_NBR
DataItem PB0MW-PO-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Reason for air freight ship
DataItem PB0MW-REASON char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws for temp save of TA6INDEX
DataItem PB0MW-SAV-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Condition logic
DataItem PB0MWCLG char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// execute stat. constants
DataItem PB0MWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Condition statement
DataItem PB0MWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// report destination card
DataItem PB0MWJCD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// execute statement
DataItem PB0MWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// parm. statement
DataItem PB0MWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// line index
DataItem PB0MWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// literal 1
DataItem PB0MWLN1 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// literal 2
DataItem PB0MWLN2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Map format flag
DataItem PB0MWMFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// override index
DataItem PB0MWOIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// override statement
DataItem PB0MWOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// program name
DataItem PB0MWPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// rmt printer number
DataItem PB0MWRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// jcl type
DataItem PB0MWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


