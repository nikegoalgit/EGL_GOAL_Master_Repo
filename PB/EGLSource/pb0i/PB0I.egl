package pb0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PB0I ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//          SALES ORDER / CUSTOMER PO INQUIRY
// 
//    This program will allow the user to bring up a list of
// P.O. Products for inquiry/maintenance functions. Access
// this application by entering option ? from the P.O. Order
// Menu screen.  In doing so, the user has the ability to
// enter desired criteria for either a Sales Order # or a
// Customer PO and display records.  Then select a record and
// transfer to an application according to the entered data.
// 
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can also obtain more detailed information for
// the list by pressing PF17, which will transfer them to PC0U
// for apparel, and PC0R for all others.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 12/10/91   chaert   New Application
// 08/04/92   lsutto   index dates being verified (PB0I225)
// 04/26/00   MNADEL   Corrected the application to delete the
//                     TS queue when PF3 is pressed and made
//                     style/color details compulsary when the
//                     SO/Cust PO is not entered
// 
// *********************
Program PB0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0IW-REC-00 PB0IW-REC-00; // record
  PB0IW-REC-01 PB0IW-REC-01; // record
  PB0IW-REC-02 PB0IW-REC-02; // record
  PB0IW-REC-03 PB0IW-REC-03; // record
  PB0IW-REC-04 PB0IW-REC-04; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC6REC PC6REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PB0IM.PB0IM001,  // forms
      PB0IM.PB0IM002, 
      PB0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0IM001 initial;
    set PB0IM002 initial;
    set PB0IW-REC-00 empty;
    set PB0IW-REC-01 empty;
    set PB0IW-REC-02 empty;
    set PB0IW-REC-03 empty;
    set PB0IW-REC-04 empty;
    set PC2REC empty;
    set PC4REC empty;
    set PC6REC empty;
    set PCYREC empty;
    set PG2REC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;
    set YSMREC empty;

    PB0IW-REC-00.PB0IW-SWR = "Y"; /* ===>request for data*/
    PB0IW-REC-00.PB0IW-SWF = "Y"; /* ===>format map switch*/
    PB0IW-REC-00.PB0IW-XIT = "N"; /* ===>exit flag for invalid GPC*/
    PB0IW-REC-00.PB0IW-MOD = "N"; /* ===>MODified data flag*/
    PB0IW-REC-00.PB0IW-IXM = 1; /* ===>Map row index*/
    PB0IW-REC-00.PB0IW-IXR = 1; /* ===>Row index for selected row to*/
                                     /* pass record*/


     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[1] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0IW-REC-00.PB0IW-XIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[2] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0IW-REC-00.PB0IW-XIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[3] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0IW-REC-00.PB0IW-XIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[7] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0IW-REC-00.PB0IW-XIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07"
     && PCWREC.XGPCD != "  ")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PB0IW-REC-00.PB0IW-XIT = "Y"; /* ===>exit flag for invalid GPC*/
    end



    if (COMMAREA.CAFROMAP == "PC0R"
     || COMMAREA.CAFROMAP == "PC0U")

      /* ------------------------------------------------------------*/
      /* %GET XSPC003*/
       /* On reentry into your applicaton from a 'called'*/
       /* application find your appl id in the cafrommap*/
       /* array and use the corresponding pcwuser(n). Move*/
       /* spaces to the  cafromap field containing the name of*/
       /* the 'called' application.*/
      /* ------------------------------------------------------------*/


      if (PCWREC.CAFROMAP[1] == "PB0I")
        PB0IW-REC-04.PB0IW-USR = PCWREC.PCWUSER1;
        PCWREC.CAFROMAP[1] = " ";
        PCWREC.PCWUSER1 = " ";
        move PB0IW-REC-04 to PB0IW-REC-01 byName;
                                       /* ===> load corr data "Display Rec 1"*/
        move PB0IW-REC-04 to PB0IM001 byName; /* ===> load corr data "Map 1"*/

      else
        if (PCWREC.CAFROMAP[2] == "PB0I")
          PB0IW-REC-04.PB0IW-USR = PCWREC.PCWUSER2;
          PCWREC.CAFROMAP[2] = " ";
          PCWREC.PCWUSER2 = " ";
          move PB0IW-REC-04 to PB0IW-REC-01 byName;
                                       /* ===> load corr data "Display Rec 1"*/
          move PB0IW-REC-04 to PB0IM001 byName; /* ===> load corr data "Map 1"*/

        else
          if (PCWREC.CAFROMAP[3] == "PB0I")
            PB0IW-REC-04.PB0IW-USR = PCWREC.PCWUSER3;
            PCWREC.CAFROMAP[3] = " ";
            PCWREC.PCWUSER3 = " ";
            move PB0IW-REC-04 to PB0IW-REC-01 byName;
                                       /* ===> load corr data "Display Rec 1"*/
            move PB0IW-REC-04 to PB0IM001 byName; /* ===> load corr data "Map 1"*/

          else
            if (PCWREC.CAFROMAP[4] == "PB0I")
              PB0IW-REC-04.PB0IW-USR = PCWREC.PCWUSER4;
              PCWREC.CAFROMAP[4] = " ";
              PCWREC.PCWUSER4 = " ";
              move PB0IW-REC-04 to PB0IW-REC-01 byName;
                                       /* ===> load corr data "Display Rec 1"*/
              move PB0IW-REC-04 to PB0IM001 byName; /* ===> load corr data "Map 1"*/

            else
              move PCWREC to PB0IW-REC-01 byName;
                                       /* ===> load corr data "Display Rec 1"*/
              move PCWREC to PB0IM001 byName; /* ===> load corr data "Map 1"*/

            end
          end
        end
      end


      if (PB0IW-REC-04.PB0IW-MAP-SW == "1")
        PB0IW-REC-00.PB0IW-MAP-SW = "1";
                                             /* ===>set  requested select map*/
        PB0IW-REC-04.XXXTSPAG = 0; /* ===>set  requested page*/
      end

      if (PB0IW-REC-04.PB0IW-MAP-SW == "2")
        PB0IW-REC-00.PB0IW-MAP-SW = "2"; /* ===>set  requested map*/
      end

      if (PB0IW-REC-04.PB0IW-MAP-SW != "1"
       && PB0IW-REC-04.PB0IW-MAP-SW != "2")
        PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ===>set requested map*/
        PB0IW-REC-04.XXXTSPAG = 0; /* ===>set  requested page*/
      end

    else /* ===> not from (PC0R,PC0U)*/

      if (COMMAREA.XGPCD > " ")
        PB0IM001.XGPCD = COMMAREA.XGPCD;
        PB0IW-REC-01.XGPCD = COMMAREA.XGPCD;
      else
        set PB0IM001.XGPCD cursor;
      end
      PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ===>set  requested select map*/

    end /* ===> from (PC0R,PC0U)*/



     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0I-001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PB0I-001: PB0I-001();
    goto PB0I-001;
  end // end main
end // end PB0I

// Application main line
Function PB0I-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (PB0IW-REC-00.PB0IW-XIT == "Y")

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0IW-REC-00.PB0IW-SWF = "Y"; /* Format the map switch*/
    set PB0IM001 initial;
    set PB0IM001.CATOAP cursor, bold; /* Highlight*/
    set PB0IW-REC-01 empty; /* ==>reset map display record*/
    PB0IW-REC-01.XGPCD = COMMAREA.XGPCD;
    PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* Map 1 was requested*/

  end


  if (PB0IW-REC-00.PB0IW-MAP-SW == "1") /* Map 1 was requested*/

    PB0I-100(); /* ===> process Display map 1*/

  else

    if (PB0IW-REC-00.PB0IW-MAP-SW == "2") /* ===> Map 2 was requested*/

      PB0I-200(); /* ===> process List map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PB0IW-REC-00.XXXPRCNM = "PB0I001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PB0IW-REC-00.PB0IW-MAP-SW; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PB0IW-REC-00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of pb0i001 ***********************/
end // end PB0I-001

// ========>Process map 1 logic
Function PB0I-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0I-120(); /* Format and display the map*/

  PB0I-130(); /* Check attention identifier*/

  PB0I-140(); /* Reset fields to normal intensity*/

  PB0I-150(); /* Verify the entered data*/

  PB0I-160(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of pb0i100 ***********************/
end // end PB0I-100

// -->Format and Converse the map
Function PB0I-120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0IW-REC-00.PB0IW-SWF == "Y") /* Map must be formatted*/

      PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the data in the map from the display storage.*/
      /* ------------------------------------------------------------*/

      PB0IM001.XGPCD = PB0IW-REC-01.XGPCD; /* GPC code*/
      PB0IM001.PC6STAT = "OP"; /* po item status*/
      PB0IW-REC-01.PC6STAT = "OP"; /* po item status*/


      if (COMMAREA.CAILVL[5] == "Y") /* =======>Authorized for DIV 20 only*/
        set PB0IM001.YSMXDV skip; /* ====> Division Code*/
        PB0IM001.YSMXDV = "20"; /* division code*/
        PB0IW-REC-01.YSMXDV = "20"; /* division code*/
      else
        PB0IM001.YSMXDV = "10"; /* division code*/
        PB0IW-REC-01.YSMXDV = "10"; /* division code*/
      end

    end

  else /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0IM001.XXXPRCNM = PB0IW-REC-00.XXXPRCNM;
                                                   /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

   /* sET PB0IM001 ALARM              /* Indicate sound alarm*/

  end

  converse PB0IM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0IW-REC-00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0I-121(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0IM001.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of pb0i120 ***********************/
end // end PB0I-120

// Check for ? inquiry by user
Function PB0I-121()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0IM001.PC6STAT == "?" /* ===> if any ? entered*/
   || PB0IM001.XGPCD == "?") 

    /* ------------------------------------------------------------*/
             /* STATUS CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.PC6STAT == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  STATUS CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPU01(); /* perform status code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0IM001.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      else
        PB0IM001.PC6STAT = PB0IW-REC-01.PC6STAT;
                                                    /* ===> reset map field*/
      end
      set PB0IM001.PC6STAT cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
                   /* GPC CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.XGPCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "       GPC TABLE          "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0IM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        PB0IM001.XGPCD = PB0IW-REC-01.XGPCD; /* ===> reset map field*/
      end
      set PB0IM001.XGPCD cursor; /* ===> reset map field*/
    end


    converseLib.clearScreen();

    converseLib.validationFailed(84);

    exit stack;

  end /* end of if ? statements*/

   /* **                                                        ***/
   /* ********************** End of pb0i121 ***********************/
end // end PB0I-121

// --> Check attention identifier
Function PB0I-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PB0IW-REC-00.PB0IW-SWF = "Y"; /* Format the map switch*/
      set PB0IM001 initial;
      set PB0IM001.CATOAP cursor, bold; /* Highlight*/
      set PB0IW-REC-01 empty; /* ==>reset map display record*/
      PB0IW-REC-01.XGPCD = COMMAREA.XGPCD;
      PB0IW-REC-00.XXXPRCNM = "PB0I130"; /* Module identification*/

    else

      PB0IW-REC-00.XXXPRCNM = "PB0I130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5) /* or PF5  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0IM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end



    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PB0IW-REC-00.PB0IW-SWF = "Y"; /* Format the map switch*/

    set PB0IM001 initial;
    set PB0IM001.CATOAP cursor, bold; /* Highlight*/
    PB0IW-REC-01.XGPCD = COMMAREA.XGPCD;
    PB0IW-REC-00.XXXPRCNM = "PB0I130"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0IW-REC-00.XXXPRCNM = "PB0I130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0i130 ***********************/
end // end PB0I-130

// -->Reset highlighted fields
Function PB0I-140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0IM001.OP1CUOID initialAttributes; /* sales order*/
  set PB0IM001.OP1NORID initialAttributes; /**/
  set PB0IM001.OP1CUPO initialAttributes; /**/

  if (COMMAREA.CAILVL[5] == "Y") /* =======> Authorized for DIV 20 only*/
    /* ========== Next Sentence ============> not modifiable*/
  else
    set PB0IM001.YSMXDV initialAttributes; /* division code*/
  end

  set PB0IM001.XGPCD initialAttributes; /* GPC code*/
  set PB0IM001.SY1STNBR initialAttributes; /* style number*/
  set PB0IM001.SY2CLRID initialAttributes; /* color code*/
  set PB0IM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
  set PB0IM001.PC2CUXID initialAttributes; /* customer xref id*/
  set PB0IM001.PC6STAT initialAttributes; /* status code*/

  set PB0IM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0IM001.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of pb0i140 ***********************/
end // end PB0I-140

// -->Verify the entered data
Function PB0I-150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0IW-REC-00.XXXPRCNM = "PB0I150"; /* Module identification*/
    set PB0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.YSMXDV != PB0IW-REC-01.YSMXDV) /* division code*/
      PB0I-151(); /* ===========> Verify division code*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If customer xref changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.PC2CUXID != PB0IW-REC-01.PC2CUXID) /* customer xref id*/
      PB0I-157(); /* ===========> Verify xref-id on table*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.PC6STAT != PB0IW-REC-01.PC6STAT)
      PB0I-153(); /* =========> Verify status code*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If po type changed, verify po type.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.PC4ORTYP == " ")
      PB0IW-REC-01.PC4ORTYP = " ";
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
    else
      if (PB0IM001.PC4ORTYP != PB0IW-REC-01.PC4ORTYP)
        PB0I-154(); /* =========> Verify po type*/
        PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
      end
    end
    /* ------------------------------------------------------------*/
     /* If color code changed, verify the entered code.*/
     /* or related required fields changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.SY2CLRID != PB0IW-REC-01.SY2CLRID
     || PB0IM001.SY1STNBR != PB0IW-REC-01.SY1STNBR)
      PB0I-155(); /* =========> Verify color code*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.SY1STNBR != PB0IW-REC-01.SY1STNBR
     || PB0IM001.SY1STNBR == " ")

      PB0I-156(); /* =========> Verify style code*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> data modified*/

    end

    /* -------------------------------------------------------------*/
    /* Style/color should be entered when so/xref not entered*/
    /* -------------------------------------------------------------*/

    if (PB0IM001.XGPCD != " ")
      if ((PB0IM001.SY1STNBR == " " && PB0IM001.SY2CLRID == " ")
       && PB0IM001.OP1CUOID == 0 && PB0IM001.OP1CUPO == " ")
        converseLib.validationFailed(196); /* Style/color not entered*/
        set PB0IM001.SY1STNBR cursor, bold;
        PB0IW-REC-00.XXXPRCNM = "PB0I150";
      end
    end

    /* ------------------------------------------------------------*/
     /* If GPC Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.XGPCD != PB0IW-REC-01.XGPCD
     || PB0IM001.XGPCD == " ")

      PB0I-152(); /* =========> Verify GPC Code & security*/

    end

    /* ------------------------------------------------------------*/
     /* either sales order or cust po is required*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.OP1CUOID != PB0IW-REC-01.OP1CUOID
     || PB0IM001.OP1NORID != PB0IW-REC-01.OP1NORID
     || PB0IM001.OP1CUPO != PB0IW-REC-01.OP1CUPO
     || (PB0IM001.OP1CUOID == 0 && PB0IM001.OP1NORID != 0))

      PB0I-158(); /* =========> Verify so/cpo*/

    end
    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end


   /* **                                                        ***/
   /* ********************** End of pb0i150  **********************/
end // end PB0I-150

// Verify Division code
Function PB0I-151()
  if (PB0IM001.YSMXDV == " ")
    PB0IW-REC-01.YSMXDV = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PB0IM001.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PB0I151";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine to verify division group*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PB0IW-REC-01.YSMXDV = PB0IM001.YSMXDV;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0IW-REC-00.XXXPRCNM = "PB0I151"; /* Module identification*/
    set PB0IM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0i151 ***********************/
end // end PB0I-151

// Verify GPC
Function PB0I-152()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PB0IM001.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PB0IM001.XGPCD cursor, bold;
        PB0IW-REC-00.XXXPRCNM = "PB0I152";
        return;
      end
    end
  end

  if (PB0IM001.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PB0IM001.XGPCD cursor, bold;
        PB0IW-REC-00.XXXPRCNM = "PB0I152";
        return;
      end
    end
  end

  if (PB0IM001.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PB0IM001.XGPCD cursor, bold;
        PB0IW-REC-00.XXXPRCNM = "PB0I152";
        return;
      end
    end
  end

  if (PB0IM001.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PB0IM001.XGPCD cursor, bold;
        PB0IW-REC-00.XXXPRCNM = "PB0I152";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.XGPCD == "01"
   || PB0IM001.XGPCD == "02"
   || PB0IM001.XGPCD == "03"
   || PB0IM001.XGPCD == "07")

    PB0IW-REC-01.XGPCD = PB0IM001.XGPCD;
    COMMAREA.XGPCD = PB0IM001.XGPCD;

  else /* ===> not valid for this application*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      set PB0IM001.XGPCD cursor, bold;
      PB0IW-REC-00.XXXPRCNM = "PB0I152"; /* Module identification*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(28); /* Indicate missing or invalid*/
      set PB0IM001.XGPCD cursor, bold;
      PB0IW-REC-00.XXXPRCNM = "PB0I152"; /* Module identification*/

    end /* ===> GPC in Table*/


  end /* ===> GPC in ('01','02','03') & valid*/


   /* **                                                        ***/
   /* ********************** End of pb0i152 ***********************/
end // end PB0I-152

// Verify Status code
Function PB0I-153()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.PC6STAT == " ")
    PB0IW-REC-01.PC6STAT = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if request is for Status '*X'*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.PC6STAT == "*X") /* request is for all cancelled items*/
    if (PB0IM001.XGPCD == "03") /* apparel only*/

      PB0IM001.PC6STAT = "CX"; /* Set to code in table*/

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table and status is active.*/
      /* ------------------------------------------------------------*/

      if (PB0IM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
       && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PB0IW-REC-01.PC6STAT = PB0IM001.PC6STAT;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PB0IW-REC-00.XXXPRCNM = "PB0I153"; /* Module identification*/
        set PB0IM001.PC6STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Indicate missing or invalid*/

      end

      PB0IM001.PC6STAT = "*X"; /* Set back to requested stat cd*/

    else

      /* ------------------------------------------------------------*/
       /* If not apparel, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PB0IW-REC-00.XXXPRCNM = "PB0I153"; /* Module identification*/
      set PB0IM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PB0IM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PB0IW-REC-01.PC6STAT = PB0IM001.PC6STAT;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PB0IW-REC-00.XXXPRCNM = "PB0I153"; /* Module identification*/
      set PB0IM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of pb0i153 ***********************/
end // end PB0I-153

// Verify p.o. type
Function PB0I-154()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PB0IM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PB0IM001.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0IW-REC-01.PC4ORTYP = PB0IM001.PC4ORTYP;
                                                     /* ===> p.o. type code*/
      PB0IW-REC-00.PB0IW-MOD = "Y"; /* ===> modified data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0IM001.PC4ORTYP cursor, bold;
   /* Format the map switch*/
      PB0IW-REC-00.PB0IW-MAP-SW = "N";
      PB0IW-REC-00.XXXPRCNM = "PB0I153"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0IW-REC-00.XXXPRCNM = "PB0I153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0i154 ***********************/
end // end PB0I-154

// Verify Color
Function PB0I-155()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.SY2CLRID == " ")

    PB0IW-REC-01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.SY1STNBR == " ")

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0IM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0IM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0IM001.SY1STNBR; /* ===> style code*/

  PG2REC.XDMCD = "00";

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0IW-REC-01.SY2CLRID = PB0IM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0IW-REC-00.XXXPRCNM = "PB0I155"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0IM001.SY1STNBR cursor, bold;
      set PB0IM001.SY2CLRID bold;
      PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/

      PB0IW-REC-00.XXXPRCNM = "PB0I155"; /* Module identification*/
      converseLib.validationFailed(197); /* ===>style,color dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0IM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pb0i155 ***********************/
end // end PB0I-155

// Verify Style
Function PB0I-156()
   /* ------------------------------------------------------------*/
   /* Verify style nbr*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.SY1STNBR == " " /* style required*/
   && PB0IM001.SY2CLRID != " ") /* if color entered*/
    PB0IW-REC-01.SY1STNBR = " ";
    PB0IW-REC-00.XXXPRCNM = "PB0I156"; /* Module identification*/
    set PB0IM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(196);
    return; /* Return to previous process*/

  end

  if (PB0IM001.SY1STNBR == " ")
    PB0IW-REC-01.SY1STNBR = " "; /**/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0IM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0IM001.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0IW-REC-01.SY1STNBR = PB0IM001.SY1STNBR; /* ===> style code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/


  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    PB0IW-REC-00.XXXPRCNM = "PB0I156"; /* Module identification*/
    set PB0IM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(196);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PB0IM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of pb0i156 ***********************/
end // end PB0I-156

// Verify Cust Xref ID
Function PB0I-157()
  if (PB0IM001.PC2CUXID == " ")
    PB0IW-REC-01.PC2CUXID = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty;
  PC2REC.XGPCD = PB0IM001.XGPCD;
  PC2REC.PC2CUXID = PB0IM001.PC2CUXID;
  PCYREC.PCYFUNC = "S ";

  PB0IS-01(); /* select cust xref row by iseg/gpc*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Code in table*/
   && PC2REC.XXXSTAT == "A")   /* and active status*/

    PB0IW-REC-01.PC2CUXID = PB0IM001.PC2CUXID;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0IW-REC-00.XXXPRCNM = "PB0I157"; /* Module identification*/
    set PB0IM001.PC2CUXID cursor, bold; /* Highlight*/
    converseLib.validationFailed(45); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0i157 ***********************/
end // end PB0I-157

// Verify sales ord/cust po
Function PB0I-158()
   /* ------------------------------------------------------------*/
   /* Verify the sales order and nike cust ord id*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.OP1CUOID == 0 /* both so and cpo entered*/
   && PB0IM001.OP1NORID != 0)

    converseLib.validationFailed(577); /* ===> Cann't enter nike ord without SO*/
                                   /* po*/
    set PB0IM001.OP1CUOID cursor, bold;
    PB0IW-REC-00.XXXPRCNM = "PB0I158"; /* Module identification*/

  end
   /* ------------------------------------------------------------*/
   /* Verify the sales order and customer po*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.OP1CUOID > 0 /* both so and cpo entered*/
   && PB0IM001.OP1CUPO != " ")

    converseLib.validationFailed(441); /* ===> only enter sales order or cust*/
                                   /* po*/
    set PB0IM001.OP1CUOID cursor, bold;
    PB0IW-REC-00.XXXPRCNM = "PB0I158"; /* Module identification*/

  end
  if (PB0IM001.OP1CUOID != PB0IW-REC-01.OP1CUOID /* sales order entered*/
   || PB0IM001.OP1NORID != PB0IW-REC-01.OP1NORID) /* Nike order id ent*/

    PB0IW-REC-01.OP1CUPO = " ";
    PB0IW-REC-01.OP1CUOID = PB0IM001.OP1CUOID;
    PB0IW-REC-01.OP1NORID = PB0IM001.OP1NORID;
    PB0IW-REC-00.PB0IW-OP1CUOID = PB0IM001.OP1CUOID;
    PB0IW-REC-01.OP1PARTN = PB0IW-REC-00.PB0IW-OP1PARTN;

  end
  if (PB0IM001.OP1CUPO != PB0IW-REC-01.OP1CUPO) /* customer po entered*/

    PB0IW-REC-01.OP1CUPO = PB0IM001.OP1CUPO;
    PB0IW-REC-01.OP1CUOID = 0;
    PB0IW-REC-01.OP1NORID = 0;
    PB0IW-REC-01.OP1PARTN = " ";

  end

   /* ********************** End of pb0i152 ***********************/
end // end PB0I-158

// -->Process valid input request
Function PB0I-160()
  if (converseVar.eventKey is enter)

    PB0IW-REC-00.PB0IW-MAP-SW = "2"; /* ==>map requested*/
    PB0IW-REC-00.PB0IW-SWR = "Y"; /* ==>request for data*/
    PB0IW-REC-00.PB0IW-SWF = "Y"; /* ==>format map requested*/

  end


   /* **                                                        ***/
   /* ********************** End of pb0i160 ***********************/
end // end PB0I-160

// ========>Process Map 2 logic
Function PB0I-200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0I-210(); /* Obtain the data to display*/

  PB0I-220(); /* Format and display the map*/

  PB0I-230(); /* Check attention identifier*/

  PB0I-240(); /* Reset fields to normal intensity*/

  PB0I-250(); /* Verify the entered data*/

  PB0I-260(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of pb0i200 ***********************/
end // end PB0I-200

// -->Obtain data to display
Function PB0I-210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-00.PB0IW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.XXXTSLEN = 1080; /* Temporary storage page length*/
   /* ==> (15 display lines) * (72 length of display line) = 1080*/
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PB0I-211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-02.XGPCD = PB0IM001.XGPCD; /* ===> GPC code*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Item Rows.*/
   /* ------------------------------------------------------------*/

  PB0I-212(); /* ===> Select set and open for all*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PB0I-213(); /* ===> Fetch next all other row*/

  set PB0IW-REC-02 empty; /* ===>reset the temp storage array*/

  PB0IW-REC-00.PB0IW-IXM = 1; /* ===>initialize map index*/

  while (PB0IW-REC-00.PB0IW-SWC == "N") /* ===> Until end of cursor*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PB0IW-REC-00.PB0IW-IXM <= 15) /* ===> Page has room for more rows*/
       /* CONTINUE*/
    else
      PB0I-217(); /* Add page to temporary storage*/
    end

    if (PB0IM001.XGPCD == "03") /* Apparell only*/
      if (PB0IM001.PC6STAT == " ") /* Select all statuses*/
        if (PC6REC.PC6STAT == "CX" /* Except when cancelled*/
         && PC6REC.XXXUSRID > " ") /* Select only user cancelled*/
          PB0I-216(); /* ===> build temp storage line*/
          PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                           /* ===>row-index*/
        else
          if (PC6REC.PC6STAT != "CX")
            PB0I-216(); /* ===> build temp storage line*/
            PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                           /* ===>row-index*/
          end
        end
      else
        if (PB0IM001.PC6STAT == "CX" /* Select only cancelled items*/
         && PC6REC.XXXUSRID > " ")   /* And only if user cancelled*/
          PB0I-216(); /* ===> build temp storage line*/
          PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                           /* ===>row-index*/
        else
          if (PB0IM001.PC6STAT != "CX")
            PB0I-216(); /* ===> build temp storage line*/
            PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                           /* ===>row-index*/
          end
        end
      end
    else
      PB0I-216(); /* ===> build temp storage line*/
      PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1; /* ===>row-index*/
    end

    PB0I-213(); /* ===> Fetch next all other row*/

  end
   /* ------------------------------------------------------------*/
   /* format the extra map line for the very last line if it*/
    /* exists.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-00.PB0IW-IXM > 1) /* Page was formatted*/
    PB0I-217(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0I-218(); /* Close the all other set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* and redisplay Map 1*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-00.TA5TSQIX == 0) /* No pages formatted*/

    PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ======>set map switch*/
    PB0IW-REC-00.PB0IW-SWF = "N"; /* Request for data switch*/
    PB0IW-REC-00.XXXPRCNM = "PB0I210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PB0IM001.OP1CUOID cursor;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PB0IW-REC-00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.PB0IW-SWR = "N"; /* Request for data switch*/


   /* **                                                        ***/
   /* ********************** End of pb0i210 ***********************/
end // end PB0I-210

// purge any temp. storage
Function PB0I-211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PB0IW-REC-02 empty; /* Map 2 display storage record*/

  PB0IW-REC-00.PB0IW-SWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PB0IW-REC-00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0IW-REC-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0IW-REC-00.XXXPRCNM = "PB0I211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  if (PB0IW-REC-00.PB0IW-MAP-SW == "2")
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0i211 ***********************/
end // end PB0I-211

// Select set & open ITEM cursor
Function PB0I-212()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.PB0IW-IXM = 1; /* Display line index*/
  PB0IW-REC-00.PB0IW-SWC = "N"; /* End of cursor switch*/


  set PC6REC empty; /* ===>initialize record before loading*/
                                  /* it*/

   /* ------------------------------------------------------------*/
   /* set up required fields for iomod*/
   /* ------------------------------------------------------------*/

  PC6REC.XGPCD = PB0IW-REC-01.XGPCD; /* gpc*/
  PC6REC.XDMCD = "*"; /* dimension*/

   /* ------------------------------------------------------------*/
   /* If style entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY1STNBR > " ")
    PC6REC.SY1STNBR = PB0IW-REC-01.SY1STNBR;
  else
    PC6REC.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* If color code entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY2CLRID > " ")
    PC6REC.SY2CLRID = PB0IW-REC-01.SY2CLRID;
  else
    PC6REC.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If status entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC6STAT > " ")
    if (PB0IW-REC-01.PC6STAT == "*X")
      PC6REC.PC6STAT = "CX";
    else
      PC6REC.PC6STAT = PB0IW-REC-01.PC6STAT;
    end
  else
    PC6REC.PC6STAT = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC2CUXID > " ")
    PC6REC.PC2CUXID = PB0IW-REC-01.PC2CUXID;
  else
    PC6REC.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If po type entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC4ORTYP > " ")
    PC6REC.PC4ORTYP = PB0IW-REC-01.PC4ORTYP;
  else
    PC6REC.PC4ORTYP = "*";
  end

   /* ------------------------------------------------------------*/
   /* If division entered,*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.YSMXDV > " ")
    PC6REC.YSMXDV = PB0IW-REC-01.YSMXDV;
  else
    PC6REC.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* determine ifsales order or cust po request.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUOID > 0) /* sales order request*/
    PC6REC.OP1CUOID = PB0IW-REC-01.OP1CUOID;
    if (PB0IW-REC-01.OP1NORID > 0)
      PC6REC.OP1NORID = PB0IW-REC-01.OP1NORID;
    else
      PC6REC.OP1NORID = -1;
    end
    PB0IW-REC-00.PB0IW-OP1CUOID = PB0IW-REC-01.OP1CUOID;
                                                        /* op1partn in w00*/
    PB0IW-REC-01.OP1PARTN = PB0IW-REC-00.PB0IW-OP1PARTN;
    PC6REC.OP1PARTN = PB0IW-REC-00.PB0IW-OP1PARTN;
    PCYREC.PCYFUNC = "SK";
  else /* customer po request*/
    PB0IW-REC-00.PB0IW-CPO-XX = PB0IW-REC-01.OP1CUPO;
                                                  /* set up hi and lo value*/
    PB0IW-REC-00.PB0IW-HI-VAL-BIN = +00255; /* SET UP HI VAL FLD*/
    PB0IW-REC-00.PB0IW-LO-VAL-BIN = +00000; /* SET UP LO VAL FLD*/
    PB0IW-REC-00.PB0IW-CPO-NDX = +25;
    while (PB0IW-REC-00.PB0IW-CPO-NDX > 0
     && PB0IW-REC-00.PB0IW-CPO[PB0IW-CPO-NDX] == " ")
      PB0IW-REC-00.PB0IW-FCPO[PB0IW-CPO-NDX] = PB0IW-REC-00.PB0IW-LO-VAL-02;
      PB0IW-REC-00.PB0IW-TCPO[PB0IW-CPO-NDX] = PB0IW-REC-00.PB0IW-HI-VAL-02;
      PB0IW-REC-00.PB0IW-CPO-NDX = PB0IW-CPO-NDX - 1;
    end
    while (PB0IW-REC-00.PB0IW-CPO-NDX > 0)
      PB0IW-REC-00.PB0IW-FCPO[PB0IW-CPO-NDX] = PB0IW-REC-00.PB0IW-CPO[PB0IW-CPO-NDX];
      PB0IW-REC-00.PB0IW-TCPO[PB0IW-CPO-NDX] = PB0IW-REC-00.PB0IW-CPO[PB0IW-CPO-NDX];
      PB0IW-REC-00.PB0IW-CPO-NDX = PB0IW-CPO-NDX - 1;
    end
    PCYREC.PCYFCPO = PB0IW-REC-00.PB0IW-FCPO-XX;
    PCYREC.PCYTCPO = PB0IW-REC-00.PB0IW-TCPO-XX;
    PCYREC.PCYFUNC = "SL";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0IW-REC-00.XXXPRCNM = "PB0I212"; /* Module identification*/
  PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0IW-REC-00.PB0IW-SWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0IM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0i212 ***********************/
end // end PB0I-212

// Fetch next row in ITEM cursor
Function PB0I-213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUOID > 0)
    PCYREC.PCYFUNC = "NK";
  else
    PCYREC.PCYFUNC = "NL";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0IW-REC-00.PB0IW-SWC = "Y"; /* Indicate end of cursor "ITEM"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0IW-REC-00.XXXPRCNM = "PB0I213"; /* Module identification*/
  PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0IW-REC-00.PB0IW-SWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0i213 ***********************/
end // end PB0I-213

// Save the data in temp storage
Function PB0I-216()

   /* ------------------------------------------------------------*/
   /* Save the P.O. ID to be displayed in temp storage*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.PC3POIDT = PC6REC.PC3POIDT; /* po id date*/
  PB0IW-REC-00.TA2GRGGN = PB0IW-REC-00.PC3POIDT;
                                                 /* move to numeric display*/
  PB0IW-REC-00.TA2GRGG = PB0IW-REC-00.TA2GRGGN;
                                               /* move to character display*/

  PB0IW-REC-00.PCFSECD = PC6REC.PCFSECD; /* po id season code*/
  PB0IW-REC-02.FY1FCTYC[PB0IW-IXM] = PC6REC.FY1FCTYC; /* factory*/

  if (PC6REC.XGPCD == "03") /* if apparel*/
    PB0IW-REC-02.PB0IW-MPYR[PB0IW-IXM] = PB0IW-REC-00.PCFSECD;
                                   /* setup season/year*/
  else
    PB0IW-REC-02.PB0IW-MPYR[PB0IW-IXM] = PB0IW-REC-00.PB0IW-MPYR;
                                   /* setup po id year*/
  end

  PB0IW-REC-02.PB0IW-MPMO[PB0IW-IXM] = PB0IW-REC-00.PB0IW-MPMO;
                                                           /* setup prod mo*/
  PB0IW-REC-02.PB0IW-MPDM[PB0IW-IXM] = PB0IW-REC-00.PB0IW-MPDM;
                                                           /* setup del mo.*/

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the temp storage page*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-02.XGPCD[PB0IW-IXM] = PC6REC.XGPCD; /* gpc*/
  PB0IW-REC-02.PC3PONBR[PB0IW-IXM] = PC6REC.PC3PONBR; /* po number*/
  PB0IW-REC-02.PC6ITMNB[PB0IW-IXM] = PC6REC.PC6ITMNB; /* itm seq nbr*/
  PB0IW-REC-02.XOWCD[PB0IW-IXM] = PC6REC.XOWCD; /* owner group*/
  PB0IW-REC-02.XDMCD[PB0IW-IXM] = PC6REC.XDMCD; /* dimension*/
  PB0IW-REC-02.SY1STNBR[PB0IW-IXM] = PC6REC.SY1STNBR; /* style*/
  PB0IW-REC-02.SY2CLRID[PB0IW-IXM] = PC6REC.SY2CLRID; /* color*/
  if (PB0IM001.PC6STAT == "*X")
    if (PC6REC.XXXUSRID == " ")
      PB0IW-REC-02.PC6STAT[PB0IW-IXM] = PC6REC.PC6STAT; /* status*/
    else
      PB0IW-REC-02.PC6STAT[PB0IW-IXM] = "UX"; /* status*/
    end
  else
    PB0IW-REC-02.PC6STAT[PB0IW-IXM] = PC6REC.PC6STAT; /* status*/
  end
  PB0IW-REC-02.YMTCD[PB0IW-IXM] = PC6REC.YMTCD; /* mode*/
  PB0IW-REC-02.PC2CUXID[PB0IW-IXM] = PC6REC.PC2CUXID; /* customer*/
  PB0IW-REC-02.PC6ETSDT[PB0IW-IXM] = PC6REC.PC6ETSDT; /* ets date*/
  PB0IW-REC-02.PC6RTADT[PB0IW-IXM] = PC6REC.PC6RTADT; /* rta date*/
  PB0IW-REC-02.PC6OETS[PB0IW-IXM] = PC6REC.PC6OETS; /* original ets*/
  PB0IW-REC-02.PC6TORDE[PB0IW-IXM] = PC6REC.PC6TORDE; /* tot on order*/
  PB0IW-REC-02.PC4ORTYP[PB0IW-IXM] = PC6REC.PC4ORTYP; /* po type*/
  PB0IW-REC-02.YSMXDV[PB0IW-IXM] = PC6REC.YSMXDV; /* division*/

   /* **                                                        ***/
   /* ********************** End of pb0i216 ***********************/
end // end PB0I-216

// Add page to Temp Storage
Function PB0I-217()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-02.XXXTSLEN = PB0IW-REC-00.XXXTSLEN;
                                                /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PB0IW-REC-00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P")    /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PB0IW-REC-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0IW-REC-02 empty; /* M002  display storage*/

    PB0IW-REC-00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PB0IW-REC-00.PB0IW-IXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0IW-REC-00.XXXPRCNM = "PB0I217"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0i217 ***********************/
end // end PB0I-217

// Close select on ITEM cursor
Function PB0I-218()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUOID > 0)
    PCYREC.PCYFUNC = "CK";
  else
    PCYREC.PCYFUNC = "CL";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0IW-REC-00.XXXPRCNM = "PB0I218"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0i218 ***********************/
end // end PB0I-218

// -->Format and converse map 2
Function PB0I-220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0IW-REC-00.PB0IW-SWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PB0IM002 initial;

      PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/
      /* ------------------------------------------------------------*/
       /* Format the MAP*/
      /* ------------------------------------------------------------*/


      PB0I-221(); /* ===> Format the data from T.S.*/

      PB0I-223();
                                  /* ===> Format fields entered from map 1*/
      if (PB0IW-REC-01.XGPCD == "03") /* ===> SET UP THE DATE LABEL*/
        PB0IM-DATE-LABEL = "OETS";
      else
        PB0IM-DATE-LABEL = "RTA ";
      end

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map*/
   /* ------------------------------------------------------------*/

  PB0I-224(); /* ========> converse map*/

   /* **                                                        ***/
   /* ********************** End of pb0i220 ***********************/
end // end PB0I-220

// Format and display data
Function PB0I-221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-00.TA5TSQIX > 0) /* Pages were formatted*/

    if (COMMAREA.CAFROMAP == "PC0R"
     || COMMAREA.CAFROMAP == "PC0U")

      if (PB0IW-REC-04.XXXTSPAG > 0) /* ===> desired page was passed*/
        PB0IW-REC-00.XXXTSPAG = PB0IW-REC-04.XXXTSPAG;
                                                   /* ===>load desired page*/
        PB0IW-REC-04.XXXTSPAG = 0; /* ===>reset desired page*/
      end

    end

    if (PB0IW-REC-00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/


      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PB0IW-REC-00.PB0IW-SWU == "Y") /* Current page was changed*/

        PB0IS-07(); /* Update temporary storage page*/

        PB0IW-REC-00.PB0IW-SWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PB0IW-REC-00.XXXTSPAG > PB0IW-REC-00.TA5TSQIX)
                                                       /* Desired > highest*/
        PB0IW-REC-00.XXXTSPAG = PB0IW-REC-00.TA5TSQIX;
                                                      /* Default to highest*/
      end

      PB0IS-08(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 25; /* ====> please select a line message*/
  PB0IW-REC-00.XXXPRCNM = "PB0I221"; /* Module identification*/

  PB0IW-REC-00.PB0IW-IXM = 1; /* Initialize line index*/

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PB0IW-REC-00.PB0IW-IXM <= 15 /* Until screen is full*/
   && PB0IW-REC-02.XGPCD[PB0IW-IXM] > " ") /* or end of data*/

    /* *******************************************************/
     /* format a complete line*/
    /* *******************************************************/
    if (PB0IW-REC-02.PC3PONBR[PB0IW-IXM] > 0)

      set PB0IW-REC-03 empty;

      PB0IW-REC-03.SY1STNBR = PB0IW-REC-02.SY1STNBR[PB0IW-IXM];
      PB0IW-REC-03.SY2CLRID = PB0IW-REC-02.SY2CLRID[PB0IW-IXM];
      PB0IW-REC-03.PB0IW-PO-NBR = PB0IW-REC-02.PC3PONBR[PB0IW-IXM];
      PB0IW-REC-00.PB0IW-FRMT-DASH-1 = "-";
      PB0IW-REC-00.PB0IW-FRMT-DASH-2 = "-";
      PB0IW-REC-00.PB0IW-FRMT-DASH-3 = "-";
      PB0IW-REC-00.PB0IW-FRMT-PI-SESN = PB0IW-REC-02.PB0IW-MPYR[PB0IW-IXM];
      PB0IW-REC-00.PB0IW-FRMT-PI-BUY-MO = PB0IW-REC-02.PB0IW-MPMO[PB0IW-IXM];
      PB0IW-REC-00.PB0IW-FRMT-PI-DLV-MO = PB0IW-REC-02.PB0IW-MPDM[PB0IW-IXM];
      PB0IW-REC-00.PB0IW-FRMT-PI-FCTY = PB0IW-REC-02.FY1FCTYC[PB0IW-IXM];
      PB0IW-REC-03.PB0IW-PO-ID-FRMT = PB0IW-REC-00.PB0IW-FRMT-PO-ID;
      PB0IW-REC-03.PC6STAT = PB0IW-REC-02.PC6STAT[PB0IW-IXM];
      PB0IW-REC-03.PC4ORTYP = PB0IW-REC-02.PC4ORTYP[PB0IW-IXM];
      PB0IW-REC-03.PC2CUXID = PB0IW-REC-02.PC2CUXID[PB0IW-IXM];
      PB0IW-REC-03.YMTCD = PB0IW-REC-02.YMTCD[PB0IW-IXM];
      PB0IW-REC-03.XDMCD = PB0IW-REC-02.XDMCD[PB0IW-IXM];
      PB0IW-REC-03.XOWCD = PB0IW-REC-02.XOWCD[PB0IW-IXM];
      PB0I-225(); /* format dates*/

      PB0IM002.PB0IM-DTL-LN[PB0IW-IXM] = PB0IW-REC-03.PB0IW-DETAIL;
      PB0IM002.PB0IM-DTL-QTY[PB0IW-IXM] = PB0IW-REC-02.PC6TORDE[PB0IW-IXM];


      PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                /* ===>Increment line index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* set the unused map selection fields askip*/
   /* ------------------------------------------------------------*/

  while (PB0IW-REC-00.PB0IW-IXM <= 15) /* Until screen is full*/

    set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] skip, invisible;

    PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                /* ===>Increment line index*/

  end


   /* **                                                        ***/
   /* ********************** End of pb0i221 ***********************/
end // end PB0I-221

// Format the map header data
Function PB0I-223()
  PB0IM002.XGPCD = PB0IW-REC-01.XGPCD;
  set PB0IM002.XGPCD skip, bold;

   /* ------------------------------------------------------------*/
   /* If sales order, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUOID > 0)
    PB0IM002.OP1CUOID = PB0IW-REC-01.OP1CUOID;
    PB0IM002.OP1NORID = PB0IW-REC-01.OP1NORID;
    set PB0IM002.OP1CUOID skip, bold;
    set PB0IM002.OP1NORID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If customer po, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUPO > " ")
    PB0IM002.OP1CUPO = PB0IW-REC-01.OP1CUPO;
    set PB0IM002.OP1CUPO skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.YSMXDV > " ")
    PB0IM002.YSMXDV = PB0IW-REC-01.YSMXDV;
    set PB0IM002.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY1STNBR > " ")
    PB0IM002.SY1STNBR = PB0IW-REC-01.SY1STNBR;
    set PB0IM002.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY2CLRID > " ")
    PB0IM002.SY2CLRID = PB0IW-REC-01.SY2CLRID;
    set PB0IM002.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Order type , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IM001.PC4ORTYP > " ")

    PB0IM002.PC4ORTYP = PB0IW-REC-01.PC4ORTYP;
    set PB0IM002.PC4ORTYP skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC2CUXID > " ")
    PB0IM002.PC2CUXID = PB0IW-REC-01.PC2CUXID;
    set PB0IM002.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Status, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC6STAT > " ")
    if (PB0IM001.PC6STAT == "*X")
      PB0IM002.PC6STAT = "*X";
    else
      PB0IM002.PC6STAT = PB0IW-REC-01.PC6STAT;
    end
    set PB0IM002.PC6STAT skip, bold;
  end

   /* **                                                        ***/
   /* ********************** End of pb0i223 ***********************/
end // end PB0I-223

// converse detail screen
Function PB0I-224()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0IM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0IM002.XXXPRCNM = PB0IW-REC-00.XXXPRCNM;
                                                   /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

   /* ET PB0IM002 ALARM;             /* Indicate sound alarm*/

  end

  converse PB0IM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0IW-REC-00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0IM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0IM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of pb0i224 ***********************/
end // end PB0I-224

// format dates for display
Function PB0I-225()
   /* ------------------------------------------------------------*/
   /* Set up ETS Date For Map Display*/
   /* ------------------------------------------------------------*/
  if (PB0IW-REC-02.PC6ETSDT[PB0IW-IXM] > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PB0IW-REC-02.PC6ETSDT[PB0IW-IXM];
                                   /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PB0IS-06(); /* ===> Call date calculation routine*/
    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
      PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* set map # to 1*/
      PB0IW-REC-00.XXXPRCNM = "PB0I225"; /* Module identification*/
      converseLib.validationFailed(430); /* Indicate missing or invalid*/
      exit stack; /* ===> exit to display map with date*/
    end

    PB0IW-REC-03.PB0IW-ETS-FRMT = TA2REC.TA2GRGA; /* =>ETS Dt*/
  else
    PB0IW-REC-03.PB0IW-ETS-FRMT = " "; /* =>ETS Date disp*/
  end

   /* ------------------------------------------------------------*/
   /* Set up oETS or rta Date For Map Display*/
   /* ------------------------------------------------------------*/
  if (PB0IW-REC-02.XGPCD == "03")
    if (PB0IW-REC-02.PC6OETS[PB0IW-IXM] > 0) /* ===> date -->(ccyymmdd)*/
      set TA2REC empty;
      TA2REC.TA2GRGGN = PB0IW-REC-02.PC6OETS[PB0IW-IXM];
                                   /* ===> date -->(ccyymmdd)*/
      TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
      PB0IS-06(); /* ===> Call date calculation routine*/
      if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
        PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* set map # to 1*/
        PB0IW-REC-00.XXXPRCNM = "PB0I225"; /* Module identification*/
        converseLib.validationFailed(430); /* Indicate missing or invalid*/
        exit stack; /* ===> exit to display map with date*/
      end

      PB0IW-REC-03.PB0IW-DTE-FRMT = TA2REC.TA2GRGA;
                                   /* =>date disp*/
    else
      PB0IW-REC-03.PB0IW-DTE-FRMT = " "; /* => Date disp*/
    end
  else
    if (PB0IW-REC-02.PC6RTADT[PB0IW-IXM] > 0) /* ===> date -->(ccyymmdd)*/
      set TA2REC empty;
      TA2REC.TA2GRGGN = PB0IW-REC-02.PC6RTADT[PB0IW-IXM];
                                   /* ==> date -->(ccyymmdd)*/
      TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
      PB0IS-06(); /* ===> Call date calculation routine*/
      if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
        PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* set map # to 1*/
        PB0IW-REC-00.XXXPRCNM = "PB0I225"; /* Module identification*/
        converseLib.validationFailed(430); /* Indicate missing or invalid*/
        exit stack; /* ===> exit to display map with date*/
      end

      PB0IW-REC-03.PB0IW-DTE-FRMT = TA2REC.TA2GRGA; /* =>dte*/
    else
      PB0IW-REC-03.PB0IW-DTE-FRMT = " "; /* => Date disp*/
    end
  end

   /* ********************** End of pb0i225 ***********************/
end // end PB0I-225

// -->Check attention identifier
Function PB0I-230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0IW-REC-00.PB0IW-SWR == "Y") /* Request for data*/
      set PB0IW-REC-02 empty; /* Map  display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/
    PB0IW-REC-00.PB0IW-SWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0IM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PB0I-211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PB0IM001 initial;
      set PB0IM001.CATOAP cursor, bold; /* Highlight*/
      PB0IM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0IW-REC-00.XXXPRCNM = "PB0I230"; /* Module identification*/

      PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* request for map switch*/
      PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/
      PB0IW-REC-00.PB0IW-SWR = "N"; /* Request for data switch*/

    else

      PB0IW-REC-00.XXXPRCNM = "PB0I230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0IM002"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    PB0I-211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0IM001 initial;
    set PB0IM001.CATOAP cursor, bold; /* Highlight*/
    PB0IM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PB0IW-REC-00.XXXPRCNM = "PB0I230"; /* Module identification*/

    PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* request for map switch*/
    PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/
    PB0IW-REC-00.PB0IW-SWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ===> Set request for Sel map*/
    set PB0IM001.OP1CUOID cursor;
    PB0IM001.XXXPRCNM = "PB0I"; /* ===> Reset field*/
    PB0IW-REC-00.PB0IW-SWF = "N"; /* Format the map switch*/

    PB0I-211(); /* Purge temporary storage*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/

    PB0IW-REC-00.XXXPRCNM = "PB0I230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


   /* **                                                        ***/
   /* ********************** End of pb0i230 ***********************/
end // end PB0I-230

// -->Reset highlighted fields
Function PB0I-240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  PB0IW-REC-00.PB0IW-IXM = 1; /* Initialize line index*/

  while (PB0IW-REC-00.PB0IW-IXM <= 15 /* Until end of lines*/
   && PB0IW-REC-02.XGPCD[PB0IW-IXM] > " ") /* or end of display*/

    if (PB0IW-REC-02.PC3PONBR[PB0IW-IXM] > 0) /* if a normal line*/
      set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] initialAttributes; /* RESET SELECT FLAG*/
    else /* if an extra line*/
      set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] skip, invisible;
    end

    PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                                    /* Increment line index*/

  end

  set PB0IM002.CATOAP initialAttributes; /* TO application*/
  set PB0IM002.CAITEM initialAttributes; /* Application data*/


   /* **                                                        ***/
   /* ********************** End Of pb0i240 ***********************/
end // end PB0I-240

// -->Verify the entered data
Function PB0I-250()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0I-251(); /* Verify scroll*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (PB0IW-REC-00.TA5TSQIX > 0) /* Page was formatted*/

      PB0IW-REC-00.PB0IW-IXM = 15; /* Initialize line index*/

      while (PB0IW-REC-00.PB0IW-IXM > 0) /* Until end of lines*/

        PB0I-252(); /* Verify data in the line*/

        PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM - 1;
                                                   /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0IM002.CAITEM > " ") /* Application data was entered*/

    PB0IW-REC-00.XXXPRCNM = "PB0I250"; /* Module identification*/
    set PB0IM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of pb0i250 ***********************/
end // end PB0I-250

// Verify scroll request
Function PB0I-251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0IW-REC-00.XXXTSPAG < 2)  /* and no previous pages*/


    PB0IW-REC-00.XXXPRCNM = "PB0I251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PB0IM002.PB0IM-DTL-SEL[1] cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0IW-REC-00.XXXTSPAG >= PB0IW-REC-00.TA5TSQIX) /* and no more pages*/


    converseLib.clearScreen();
    
    set PB0IM002.PB0IM-DTL-SEL[1] cursor;
    PB0IW-REC-00.XXXPRCNM = "PB0I251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.PB0IW-IXM = 15; /* Initialize line index*/

  while (PB0IW-REC-00.PB0IW-IXM > 0) /* Until end of lines*/

    if (PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] != 
    PB0IW-REC-02.PB0IW-MSEL[PB0IW-IXM])

      PB0IW-REC-00.XXXPRCNM = "PB0I251"; /* Module identification*/
      set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] cursor, bold; /* Highlight*/

      if (converseVar.eventKey is pf7 /* Scroll back request*/
       || converseVar.eventKey is pf8) /* Scroll forward request*/
        converseLib.validationFailed(14); /* can't page back/forward*/
      end

    end

    PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM - 1;
                                                   /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of pb0i251 ***********************/
end // end PB0I-251

// Verify data in the line
Function PB0I-252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] != 
  PB0IW-REC-02.PB0IW-MSEL[PB0IW-IXM]
   && PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] != "S") /* and is not a "S"*/

    PB0IW-REC-00.XXXPRCNM = "PB0I252"; /* Module identification*/
    set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
   /* GPC Code and PF Keys.*/
   /* ------------------------------------------------------------*/

  if (PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] == "S")

    if (PB0IW-REC-00.PC3PONBR == 0) /* ===> saved po number*/
      PB0IW-REC-00.PC3PONBR = PB0IW-REC-02.PC3PONBR[PB0IW-IXM];
    end

    if (PB0IW-REC-02.PC3PONBR[PB0IW-IXM] != PB0IW-REC-00.PC3PONBR)
      set PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] cursor, bold; /* Highlight*/
      PB0IW-REC-00.XXXPRCNM = "PB0I252"; /* Module identification*/
      converseLib.validationFailed(364); /* ===>multiple p.o.s may not be*/
                                   /* selected*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of pb0i252 ***********************/
end // end PB0I-252

// -->Process valid iput request
Function PB0I-260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PB0IW-REC-00.PB0IW-SWF = "Y"; /* Format the map switch*/
    set PB0IM002 initial;
    PB0IW-REC-00.XXXTSPAG = PB0IW-REC-00.XXXTSPAG - 1;
                                                   /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PB0IW-REC-00.PB0IW-SWF = "Y"; /* Format the map switch*/
    set PB0IM002 initial;
    PB0IW-REC-00.XXXTSPAG = PB0IW-REC-00.XXXTSPAG + 1;
                                                   /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/


  if ("S" in PB0IM002.PB0IM-DTL-SEL) /* =====> Line was selected*/


    PB0I-261(); /* ===>load pcwrec with selected data and func*/

    if (converseVar.eventKey not pf17)
      PB0I-262(); /* ===> load pcwrec with entered data (map 1)*/
    end

    PB0I-263(); /* ===> load pcwrec with from appl return data*/

    COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

    PB0I-211(); /* ===> Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0IW-REC-00.PB0IW-MAP-SW = "1"; /* ===> Set request for Sel map*/
    PB0IW-REC-00.PB0IW-SWF = "Y"; /* ===>format the data*/
    set PB0IM001 initial; /* set map clear*/
    set PB0IM001.CATOAP cursor, bold; /* Highlight*/
    set PB0IW-REC-01 empty; /* reset map display record*/
    PB0IW-REC-01.XGPCD = COMMAREA.XGPCD;
    PB0IW-REC-00.XXXPRCNM = "PB0I260";

    exit stack; /* =================> Exit to display*/
                                   /* map*/

  else
    PB0IW-REC-00.XXXPRCNM = "PB0I260";
    set PB0IM002.PB0IM-DTL-SEL[1] cursor, bold; /* ====>highlight*/
    converseLib.validationFailed(25);
    return; /* Return to previous process*/
  end
   /* **                                                        ***/
   /* ********************** End of pb0i260 ***********************/
end // end PB0I-260

// Process selected detail line
Function PB0I-261()
   /* ------------------------------------------------------------*/
      /* Set the inquiry of detail information according to GPC*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* change mode requested*/

    PCWREC.XGPCD = PB0IW-REC-01.XGPCD;

    if (PB0IW-REC-01.XGPCD == "03")
      COMMAREA.CATOAP = "PC0U";
    else
      COMMAREA.CATOAP = "PC0R";
      move " " to PCWREC.PCWWHSE[1] for all; /* ===> init. dest array*/
      move " " to PCWREC.PCWCUST[1] for all;
    end

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields in the pass record.*/
      /* according to PF Key pressed*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-00.PB0IW-IXM = 1; /* Initialize map line index*/
  PB0IW-REC-00.PB0IW-IXR = 1; /* Initialize record line index*/

  while (PB0IW-REC-00.PB0IW-IXM <= 15) /* Until end of lines*/

    if (PB0IM002.PB0IM-DTL-SEL[PB0IW-IXM] != 
    PB0IW-REC-02.PB0IW-MSEL[PB0IW-IXM])

      /* ------------------------------------------------------------*/
       /* Load the product key data into the pass record*/
      /* ------------------------------------------------------------*/

      PCWREC.SY1STNBR = PB0IW-REC-02.SY1STNBR[PB0IW-IXM];
      PCWREC.YSMXDV = PB0IW-REC-02.YSMXDV[PB0IW-IXM];
      PCWREC.PC3PONBR = PB0IW-REC-02.PC3PONBR[PB0IW-IXM];

      if (PB0IW-REC-02.XGPCD[PB0IW-IXM] == "03")
          /* --------------------------------------------------*/
          /* apparel wants to wild card all fields except for*/
          /* division and style*/
          /* --------------------------------------------------*/

        PCWREC.SY2CLRID = "*";
        PCWREC.XDMCD = "*";
        PCWREC.XQACD = "*";
        PCWREC.XOWCD = "*";
        PCWREC.PC2INSEG = "*";
        PCWREC.XPGCD = "*";
        PCWREC.XUMCD = "*";

      else
          /* --------------------------------------------------*/
          /* footwear wants to send specific information*/
          /* including customer and warehouse*/
          /* --------------------------------------------------*/

        PCWREC.SY2CLRID = PB0IW-REC-02.SY2CLRID[PB0IW-IXM];
        PCWREC.XDMCD = PB0IW-REC-02.XDMCD[PB0IW-IXM];
        PCWREC.XQACD = PB0IW-REC-02.XQACD[PB0IW-IXM];
        PCWREC.XOWCD = PB0IW-REC-02.XOWCD[PB0IW-IXM];
        PCWREC.PC2INSEG = PB0IW-REC-02.PC2INSEG[PB0IW-IXM];
        PCWREC.XPGCD = PB0IW-REC-02.XPGCD[PB0IW-IXM];
        PCWREC.XUMCD = PB0IW-REC-02.XUMCD[PB0IW-IXM];
        PCWREC.PCWWHSE[PB0IW-IXR] = PB0IW-REC-02.XWHCD[PB0IW-IXM];
        PCWREC.PCWCUST[PB0IW-IXR] = PB0IW-REC-02.PC2CUXID[PB0IW-IXM];

      end

      PB0IW-REC-00.PB0IW-IXR = PB0IW-REC-00.PB0IW-IXR + 1;

    end

    PB0IW-REC-00.PB0IW-IXM = PB0IW-REC-00.PB0IW-IXM + 1;
                                   /* Increment pcwrec row index*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0i261 ***********************/
end // end PB0I-261

// Save selection criteria
Function PB0I-262()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PB0IW-REC-01.XGPCD;

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY1STNBR > " ")
    PCWREC.SY1STNBR = PB0IW-REC-01.SY1STNBR;
  else
    PCWREC.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY2CLRID > " ")
    PCWREC.SY2CLRID = PB0IW-REC-01.SY2CLRID;
  else
    PCWREC.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* If po type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC4ORTYP > " ")
    PCWREC.PC4ORTYP = PB0IW-REC-01.PC4ORTYP;
  else
    PCWREC.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC6STAT > " ")
    if (PB0IW-REC-01.PC6STAT == "CX")
      if (PB0IM001.PC6STAT == "*X")
        PCWREC.PC6STAT = "*X";
      else
        PCWREC.PC6STAT = PB0IW-REC-01.PC6STAT;
      end
    else
      PCWREC.PC6STAT = PB0IW-REC-01.PC6STAT;
    end
  else
    PCWREC.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC2CUXID > " ")
    PCWREC.PC2CUXID = PB0IW-REC-01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* If sales order nbr , load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUOID > 0)
    PB0IW-REC-04.OP1CUOID = PB0IW-REC-01.OP1CUOID;
    PB0IW-REC-04.OP1NORID = PB0IW-REC-01.OP1NORID;
  else
    PB0IW-REC-04.OP1CUOID = 0;
    PB0IW-REC-04.OP1NORID = 0;
  end

   /* ------------------------------------------------------------*/
   /* If customer po nbr , load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.OP1CUPO > " ")
    PB0IW-REC-04.OP1CUPO = PB0IW-REC-01.OP1CUPO;
  else
    PB0IW-REC-04.OP1CUPO = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.YSMXDV > " ")
    PCWREC.YSMXDV = PB0IW-REC-01.YSMXDV;
  else
    PCWREC.YSMXDV = " ";
  end

   /* **                                                        ***/
   /* ********************** End of pb0i262 ***********************/
end // end PB0I-262

// Save data for return from appl
Function PB0I-263()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-04.PB0IW-MAP-SW = PB0IW-REC-00.PB0IW-MAP-SW;
  PB0IW-REC-04.XXXTSPAG = PB0IW-REC-00.XXXTSPAG;
                                               /* ==>T.S. Page to displayed*/

  PB0IW-REC-04.XGPCD = PB0IW-REC-01.XGPCD;
  PB0IW-REC-04.OP1CUOID = PB0IW-REC-01.OP1CUOID;
  PB0IW-REC-04.OP1NORID = PB0IW-REC-01.OP1NORID;
  PB0IW-REC-04.OP1CUPO = PB0IW-REC-01.OP1CUPO;

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY1STNBR > " ")
    PB0IW-REC-04.SY1STNBR = PB0IW-REC-01.SY1STNBR;
  else
    PB0IW-REC-04.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.SY2CLRID > " ")
    PB0IW-REC-04.SY2CLRID = PB0IW-REC-01.SY2CLRID;
  else
    PB0IW-REC-04.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* If po type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC4ORTYP > " ")
    PB0IW-REC-04.PC4ORTYP = PB0IW-REC-01.PC4ORTYP;
  else
    PB0IW-REC-04.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC6STAT > " ")
    if (PB0IM001.PC6STAT == "*X")
      PB0IW-REC-04.PC6STAT = "*X";
    else
      PB0IW-REC-04.PC6STAT = PB0IW-REC-01.PC6STAT;
    end
  else
    PB0IW-REC-04.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.PC2CUXID > " ")
    PB0IW-REC-04.PC2CUXID = PB0IW-REC-01.PC2CUXID;
  else
    PB0IW-REC-04.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0IW-REC-01.YSMXDV > " ")
    PB0IW-REC-04.YSMXDV = PB0IW-REC-01.YSMXDV;
  else
    PB0IW-REC-04.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the pb0iw04 array*/
   /* and move your application id to that field. Use the*/
   /* pcwrec.pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PB0I"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PB0IW-REC-04.PB0IW-USR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PB0I"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PB0IW-REC-04.PB0IW-USR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PB0I"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PB0IW-REC-04.PB0IW-USR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PB0I"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PB0IW-REC-04.PB0IW-USR;

        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of pb0i263 ***********************/
end // end PB0I-263

// Select DPRODC.VPRDCU01 row
Function PB0IS-01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" (PCYREC, SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0IW-REC-00.XXXPRCNM = "PB0IS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0is01 ***********************/
end // end PB0IS-01

// call 'calc' date routine
Function PB0IS-06()
   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

   /* **                                                        ***/
   /* ********************** End of pb0is06 ***********************/
end // end PB0IS-06

// Update temp storage
Function PB0IS-07()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PB0IW-REC-01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0IW-REC-00.XXXPRCNM = "PB0IS07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of pb0is07 ***********************/
end // end PB0IS-07

// Read temp storage
Function PB0IS-08()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0IW-REC-02.XXXTSLEN = PB0IW-REC-00.XXXTSLEN;
                                                /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PB0IW-REC-00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PB0IW-REC-02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0IW-REC-00.XXXPRCNM = "PB0IS08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0IW-REC-00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of pb0is08 ***********************/
end // end PB0IS-08

//*** RECORD=PB0IW-REC-00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -control break save fields
//    -W.S. date fields
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ****************************
Record PB0IW-REC-00 type basicRecord
  10 PB0IW-SWR PB0IW-SWR ; 
  10 PB0IW-MAP-SW PB0IW-MAP-SW ; 
  10 PB0IW-SWF PB0IW-SWF ; 
  10 PB0IW-SWC PB0IW-SWC ; 
  10 PB0IW-SWU PB0IW-SWU ; 
  10 PB0IW-XIT PB0IW-XIT ; 
  10 PB0IW-MOD PB0IW-MOD ; 
  10 * char(1) ; 
  10 PB0IW-HI-VAL-BIN PB0IW-HI-VAL-BIN ; 
    20 PB0IW-HI-VAL-01 PB0IW-HI-VAL-01 ; 
    20 PB0IW-HI-VAL-02 PB0IW-HI-VAL-02 ; 
  10 PB0IW-LO-VAL-BIN PB0IW-LO-VAL-BIN ; 
    20 PB0IW-LO-VAL-01 PB0IW-LO-VAL-01 ; 
    20 PB0IW-LO-VAL-02 PB0IW-LO-VAL-02 ; 
  10 PB0IW-IXM PB0IW-IXM ; 
  10 PB0IW-IXR PB0IW-IXR ; 
  10 PB0IW-IXT PB0IW-IXT ; 
  10 PB0IW-CPO-NDX PB0IW-CPO-NDX ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * char(1) ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PCFSECD PCFSECD ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 * char(1) ; 
  10 PB0IW-DATE PB0IW-DATE ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
    15 PB0IW-MPCC PB0IW-MPCC ; 
    15 PB0IW-MPYR PB0IW-MPYR ; 
    15 PB0IW-MPMO PB0IW-MPMO ; 
    15 PB0IW-MPDM PB0IW-MPDM ; 
  10 * char(1) ; 
  10 PB0IW-FCPO-XX PB0IW-FCPO-XX ; 
    15 PB0IW-FCPO PB0IW-FCPO [25] ; 
  10 PB0IW-TCPO-XX PB0IW-TCPO-XX ; 
    15 PB0IW-TCPO PB0IW-TCPO [25] ; 
  10 PB0IW-CPO-XX PB0IW-CPO-XX ; 
    15 PB0IW-CPO PB0IW-CPO [25] ; 
  10 * char(3) ; 
  10 PB0IW-FRMT-PO-ID PB0IW-FRMT-PO-ID ; 
    15 PB0IW-FRMT-PI-SESN PB0IW-FRMT-PI-SESN ; 
      20 PB0IW-FRMT-PI-SCD PB0IW-FRMT-PI-SCD ; 
      20 PB0IW-FRMT-PI-SYR PB0IW-FRMT-PI-SYR ; 
    15 PB0IW-FRMT-DASH-1 PB0IW-FRMT-DASH-1 ; 
    15 PB0IW-FRMT-PI-BUY-MO PB0IW-FRMT-PI-BUY-MO ; 
    15 PB0IW-FRMT-DASH-2 PB0IW-FRMT-DASH-2 ; 
    15 PB0IW-FRMT-PI-DLV-MO PB0IW-FRMT-PI-DLV-MO ; 
    15 PB0IW-FRMT-DASH-3 PB0IW-FRMT-DASH-3 ; 
    15 PB0IW-FRMT-PI-FCTY PB0IW-FRMT-PI-FCTY ; 
  10 * char(1) ; 
  10 PB0IW-OP1CUOID PB0IW-OP1CUOID ; 
    15 * num(8) ; 
    15 PB0IW-OP1PARTN PB0IW-OP1PARTN ; 
end // end PB0IW-REC-00

//*** RECORD=PB0IW-REC-01 ****
// ***** PRODUCTION ORDER STYLE SELECTION MAP RECORD **********
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PB0IM.PB0IM001
// 
//    RECORD NAME:      PB0IW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list maps.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list maps PB0IM002.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER STYLE SELECTION MAP RECORD **********
// ****************************
Record PB0IW-REC-01 type basicRecord
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUPO OP1CUPO ; 
  10 YSMXDV YSMXDV ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC2CUXID PC2CUXID ; 
  10 PC6STAT PC6STAT ; 
end // end PB0IW-REC-01

//*** RECORD=PB0IW-REC-02 ****
// ************ SALES ORDER/CUSTOMER PO RECORD ****************
// **                  Display Record                        **
// **                                                        **
// 
// 
//    RECORD NAME:      pb0iW02
// 
//    MAP   NAMES:      pb0iM002
// 
//       This record is a working storage record used to
//    hold data that is pertinent to map pb0iM002.
//       It holds information  that relates to a P.O. Item
//    It is used to the load temp. storage, the list maps,
//    and the pass record PCWREC
// 
// **                                                        **
// ************ SALES ORDER/CUSTOMER PO RECORD ****************
// ****************************
Record PB0IW-REC-02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PB0IW-RC2 PB0IW-RC2 [15] ; 
    10 PB0IW-MSEL PB0IW-MSEL ; 
    10 XGPCD XGPCD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PB0IW-MPOI PB0IW-MPOI ; 
      15 PB0IW-MPYR PB0IW-MPYR ; 
      15 PB0IW-MPMO PB0IW-MPMO ; 
      15 PB0IW-MPDM PB0IW-MPDM ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC6STAT PC6STAT ; 
    10 PC6TORDE PC6TORDE ; 
end // end PB0IW-REC-02

//*** RECORD=PB0IW-REC-03 ****
// ******* SO/CPO DETAIL LINE DEFINITION                *******
// 
//    Record Name:      PB0IW03
// 
//    This record formats the portion of the list screen
// line that is a group field.
// 
// ******* SO/CPO DETAIL LINE DEFINITION                *******
// ****************************
Record PB0IW-REC-03 type basicRecord
  5 PB0IW-DETAIL PB0IW-DETAIL ; 
    10 PB0IW-PO-NBR PB0IW-PO-NBR ; 
    10 * char(1) ; 
    10 PB0IW-PO-ID-FRMT PB0IW-PO-ID-FRMT ; 
    10 * char(1) ; 
    10 SY1STNBR SY1STNBR ; 
    10 * char(1) ; 
    10 SY2CLRID SY2CLRID ; 
    10 * char(1) ; 
    10 XDMCD XDMCD ; 
    10 * char(1) ; 
    10 YMTCD YMTCD ; 
    10 * char(1) ; 
    10 XOWCD XOWCD ; 
    10 * char(1) ; 
    10 PC6STAT PC6STAT ; 
    10 * char(1) ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(2) ; 
    10 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 PB0IW-ETS-FRMT PB0IW-ETS-FRMT ; 
    10 * char(1) ; 
    10 PB0IW-DTE-FRMT PB0IW-DTE-FRMT ; 
end // end PB0IW-REC-03

//*** RECORD=PB0IW-REC-04 ****
// ************ SALES ORDER/CUSTOMER PO RECORD ****************
// **                  Display Record                        **
// **                                                        **
// 
// 
//    RECORD NAME:      pb0iW04
// 
//    MAP   NAMES:      pb0iM002
// 
//       This record is a working storage record used to
//    hold data that is pertinent to map pb0iM002.
//       It holds information  that relates to a P.O. Item
//    It is used to the load temp. storage, the list maps,
//    and the pass record PCWREC
// 
// **                                                        **
// ************ SALES ORDER/CUSTOMER PO RECORD ****************
// ****************************
Record PB0IW-REC-04 type basicRecord
  5 PB0IW-USR PB0IW-USR ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PB0IW-MAP-SW PB0IW-MAP-SW ; 
    10 PC3PONBR PC3PONBR ; 
    10 PB0IW-MPOI PB0IW-MPOI ; 
      15 PB0IW-MPYR PB0IW-MPYR ; 
      15 PB0IW-MPMO PB0IW-MPMO ; 
      15 PB0IW-MPDM PB0IW-MPDM ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 YMTCD YMTCD ; 
    10 XOWCD XOWCD ; 
    10 XGPCD XGPCD ; 
    10 YSMXDV YSMXDV ; 
    10 PC6STAT PC6STAT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6TORDE PC6TORDE ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
end // end PB0IW-REC-04

// SINGLE CHARACTER OF FIELD
DataItem PB0IW-CPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for CUST PO SET UP
DataItem PB0IW-CPO-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ORIGINAL CUST PO
DataItem PB0IW-CPO-XX char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// list screen line 1 format
DataItem PB0IW-DETAIL char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date display
DataItem PB0IW-DTE-FRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date display
DataItem PB0IW-ETS-FRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM CUST PO
DataItem PB0IW-FCPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM CUST PO FORMAT AREA
DataItem PB0IW-FCPO-XX char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-FRMT-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-FRMT-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-FRMT-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - buy month
DataItem PB0IW-FRMT-PI-BUY-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - delivery month
DataItem PB0IW-FRMT-PI-DLV-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - factory
DataItem PB0IW-FRMT-PI-FCTY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - aprl season code
DataItem PB0IW-FRMT-PI-SCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - season, year
DataItem PB0IW-FRMT-PI-SESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  - aprl season year
DataItem PB0IW-FRMT-PI-SYR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po id
DataItem PB0IW-FRMT-PO-ID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-HI-VAL-01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-HI-VAL-02 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BINARY FIELD FOR HI VAL
DataItem PB0IW-HI-VAL-BIN smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PB0IW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PB0IW-IXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp array (break)
DataItem PB0IW-IXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CHARACTER FIELD FOR LO VALUE
DataItem PB0IW-LO-VAL-01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHARACTER FIELD FOR LO VALUE
DataItem PB0IW-LO-VAL-02 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BINARY FIELD FOR LO VAL
DataItem PB0IW-LO-VAL-BIN smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PB0IW-MOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production century
DataItem PB0IW-MPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PB0IW-MPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem PB0IW-MPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem PB0IW-MPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production year
DataItem PB0IW-MPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PB0IW-MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0IW-OP1PARTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id with -
DataItem PB0IW-PO-ID-FRMT char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PB0IW-PO-NBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level array
DataItem PB0IW-RC2 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PB0IW-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PB0IW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0IW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PB0IW-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO CUST PO
DataItem PB0IW-TCPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO CUST PO FORMAT AREA
DataItem PB0IW-TCPO-XX char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0IW-USR char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0IW-XIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

