package pb0w;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0W ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//             PPR P.O. PRODUCT SPLIT SELECTION
// 
//    This program will allow the user to split PO item
//    information.  The user will be accessing an entry
// screen by entering option 02 from the PPR menu (pb0v)
// screen.  In doing so, the user has the ability to enter
// desired criteria on a particular P.O. Item and be transfered
// to PB0X to split the PO.
// 
//    The user may inquire, change, or split up to 20 item
// database rows in one pass to the appropriate application by
// means of a pass record, PCWREC.CAUSERA via COMMAREA.CAUSERA.
// 
//    Curtain fields will be protected and thus can not be
// changed dependent on security and GPC code.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 05/30/97   jniese   pca365 - ppr split selection
// 06/13/97   jniese   pca365 - change to allow open only
// 07/01/97   jniese   pca365 - correct po region edit
// 07/28/97   jniese   pca365 - change io module task values
// 09/30/99   KGRAHA   PCA999 - CHANGE TO USE NEW VIEW VPOITM04
// *********************
Program PB0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0WW00 PB0WW00; // record
  PB0WW01 PB0WW01; // record
  PB0WW02 PB0WW02; // record
  PC2REC PC2REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM04 VPOITM04; // record
  VPOREG01 VPOREG01; // record
  XPCWRG1 XPCWRG1; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use PB0WM.PB0WM001,  // forms
      PB0WM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ****************** Start of XPPC001 FLOW ********************/
     /* **                                                        ***/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0WM001 initial;
    set PB0WW00 empty;
    set PB0WW01 empty;
    set XPCWRG1 empty;
    set VPOREG01 empty;
    set VPOHDR02 empty;
    set VPOITM04 empty;
    set PG2REC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    PB0WW00.PB0WWSWF = "Y"; /* ===>format map switch*/
    PB0WW00.PB0WWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PB0WW00.PB0WWMOD = "N"; /* ===>MODified data flag*/
    PB0WW00.PB0WWMLT = "N"; /* ===>Multiple styes flag*/
    PCWREC.PCWMAP = 1;

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (COMMAREA.XGPCD != "03"
     || PCWREC.XGPCD != "03")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138; /* Security violation*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PB0WW00.PB0WWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* next sentence*/
      else
        if (COMMAREA.CAILVL[3] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0WW00.PB0WWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (COMMAREA.CAFROMAP == "PB0W")
      /* -------*/
      if (PCWREC.CAFROMAP[1] == "PB0W")
        PB0WW02.PB0WWUSR = PCWREC.PCWUSER1;
        PCWREC.CAFROMAP[1] = " ";
        PCWREC.PCWUSER1 = " ";
        PCWREC.PCWFNC[1] = " ";

      else
        if (PCWREC.CAFROMAP[2] == "PB0W")
          PB0WW02.PB0WWUSR = PCWREC.PCWUSER2;
          PCWREC.CAFROMAP[2] = " ";
          PCWREC.PCWUSER2 = " ";
          PCWREC.PCWFNC[2] = " ";

        else
          if (PCWREC.CAFROMAP[3] == "PB0W")
            PB0WW02.PB0WWUSR = PCWREC.PCWUSER3;
            PCWREC.CAFROMAP[3] = " ";
            PCWREC.PCWUSER3 = " ";
            PCWREC.PCWFNC[3] = " ";

          else
            if (PCWREC.CAFROMAP[4] == "PB0W")
              PB0WW02.PB0WWUSR = PCWREC.PCWUSER4;
              PCWREC.CAFROMAP[4] = " ";
              PCWREC.PCWUSER4 = " ";
              PCWREC.PCWFNC[4] = " ";

            end
          end
        end
      end

      /* MOVE pb0wW02 TO pb0wm001      ;===> move corr. data to map*/
      PB0WM001.PO-REG-CD = PB0WW02.PO-REG-CD; /* PO region*/
      PB0WM001.PC3PONBR = PB0WW02.PC3PONBR; /* PO number*/
      PB0WM001.SY1STNBR = PB0WW02.SY1STNBR;
      PB0WM001.SY2CLRID = PB0WW02.SY2CLRID;
      PB0WM001.XDMCD = PB0WW02.XDMCD;
      PB0WM001.XQACD = PB0WW02.XQACD;
      PB0WM001.XOWCD = PB0WW02.XOWCD;
      PB0WM001.XPGCD = PB0WW02.XPGCD;
      PB0WM001.XUMCD = PB0WW02.XUMCD;
      PB0WM001.XWHCD = PB0WW02.XWHCD;
      PB0WM001.PC2INSEG = PB0WW02.PC2INSEG;
      PB0WM001.YMTCD = PB0WW02.YMTCD;
      PB0WM001.PC6PLAN = PB0WW02.PC6PLAN;
      PB0WM001.PC2CUXID = PB0WW02.PC2CUXID;

      PB0WW01.PO-REG-CD = PB0WW02.PO-REG-CD; /* PO number*/
      PB0WW01.PC3PONBR = PB0WW02.PC3PONBR; /* PO number*/
      PB0WW01.SY1STNBR = PB0WW02.SY1STNBR;
      PB0WW01.SY2CLRID = PB0WW02.SY2CLRID;
      PB0WW01.XDMCD = PB0WW02.XDMCD;
      PB0WW01.XQACD = PB0WW02.XQACD;
      PB0WW01.XOWCD = PB0WW02.XOWCD;
      PB0WW01.XPGCD = PB0WW02.XPGCD;
      PB0WW01.XUMCD = PB0WW02.XUMCD;
      PB0WW01.XWHCD = PB0WW02.XWHCD;
      PB0WW01.PC2INSEG = PB0WW02.PC2INSEG;
      PB0WW01.YMTCD = PB0WW02.YMTCD;
      PB0WW01.PC6PLAN = PB0WW02.PC6PLAN;
      PB0WW01.PC2CUXID = PB0WW02.PC2CUXID;
    end /* ===> from appl is Pb0x*/

     /* --                                                        --*/
    set PB0WW02 empty;
    set PCWREC empty; /* ===> since this is a level (1)*/
                                     /* application*/
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0W001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PB0W001: PB0W001();
    goto PB0W001;
  end // end main
end // end PB0W

// application main line
Function PB0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0WW00.PB0WWXIT == "Y")
    XSPCS01(); /* =====>Exit to PC0A application*/
  end

  PB0W200(); /* Format and display the map*/

  PB0W300(); /* Check attention identifier*/

  PB0W400(); /* Reset fields to normal intensity*/

  PB0W500(); /* Verify the entered data*/

  PB0W600(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of Pb0w001 ***********************/
end // end PB0W001

// -->Format and converse the map
Function PB0W200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

  if (converseVar.validationMsgNum != 0) /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0WM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0WM001.XXXPRCNM = PB0WW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0WM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0WW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0W210(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0WM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0WM001.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of Pb0w200 ***********************/
end // end PB0W200

// Check for ? inquiry by user
Function PB0W210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0WM001.PO-REG-CD == " ?" /* ===> if any ? entered*/
   || PB0WM001.PO-REG-CD == "? " /* ===> if any ? entered*/
   || PB0WM001.XWHCD == "?"      
   || PB0WM001.YMTCD == "?"      
   || PB0WM001.XDMCD == "?"      
   || PB0WM001.XQACD == "?"      
   || PB0WM001.XOWCD == "?"      
   || PB0WM001.PC2INSEG == "?"   
   || PB0WM001.XPGCD == "?"      
   || PB0WM001.XUMCD == "?")    


    /* ------------------------------------------------------------*/
            /* REGION CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.PO-REG-CD == "? " /* If ? in region field*/
     || PB0WM001.PO-REG-CD == " ?")

      if (XPCWRG1.REG-ARRAY-SW == " ")
        PB0WS15(); /* load region array*/
      end
      PB0W215(); /* Pop up window routine*/
      set PB0WM001.PO-REG-CD cursor;
      exit stack; /* Exit to redisplay map*/
    end


    if (PB0WM001.PO-REG-CD > " ") /* If REGION entered*/
      PB0WW01.PO-REG-CD = PB0WM001.PO-REG-CD;
      if (PB0WW01.PO-REG-CHAR1 == " ") /* Zero edit*/
        PB0WW01.PO-REG-CHAR1 = "0";
      else
        if (PB0WW01.PO-REG-CHAR2 == " ")
          PB0WW01.PO-REG-CHAR2 = PB0WW01.PO-REG-CHAR1;
          PB0WW01.PO-REG-CHAR1 = "0";
        end
      end

      PB0WM001.PO-REG-CD = PB0WW01.PO-REG-CD;

      PB0WS10(); /* Verify region*/

      if (converseVar.validationMsgNum != 0) /* If error*/

        exit stack; /* Exit to redisplay map*/

      end
    end


    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XWHCD = PB0WW01.XWHCD; /* ===> reset map field*/
      end
      set PB0WM001.XWHCD cursor;
    end


    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.YMTCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.YMTCD = PB0WW01.YMTCD; /* ===> reset map field*/
      end
      set PB0WM001.YMTCD cursor;
    end


    /* ------------------------------------------------------------*/
               /* DIMENSION TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = "    DIMENSION TABLE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XDMCD = PB0WW01.XDMCD; /* ===> reset map field*/
      end
      set PB0WM001.XDMCD cursor;
    end

    /* ------------------------------------------------------------*/
               /* QUALITY TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XQACD = PB0WW01.XQACD; /* ===> reset map field*/
      end
      set PB0WM001.XQACD cursor;
    end


    /* ------------------------------------------------------------*/
            /* OWNER GROUP CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XOWCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " OWNER GROUP CODE TABLE "; /* heading*/
      XX0XW02.XWHCD = PB0WM001.XWHCD;
      XX0XW02.XGPCD = COMMAREA.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XOWCD = PB0WW01.XOWCD; /* ===> reset map field*/
      end
      set PB0WM001.XOWCD cursor;
    end



    /* ------------------------------------------------------------*/
             /* PACKAGE TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XPGCD == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = "  PACKAGE TYPE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XPGCD = PB0WW01.XPGCD; /* ===> reset map field*/
      end
      set PB0WM001.XPGCD cursor;
    end


    /* ------------------------------------------------------------*/
            /* UNIT OF MEASURE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XUMCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " UNIT OF MEASURE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform unit of measure window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0WM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* move code*/
      else
        PB0WM001.XUMCD = PB0WW01.XUMCD; /* ===> reset map field*/
      end
      set PB0WM001.XUMCD cursor;
    end

    converseLib.clearScreen();
     /* restore the original map*/

    converseLib.validationFailed(84); /* ===> press same key to process data*/

    exit stack; /* =====> exit to  display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0w210 ***********************/
end // end PB0W210

// region popup
Function PB0W215()
   /* ------------------------------------------------------------*/

              /* region code popup window*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry. 'S' should be used to select*/
        /* the code.*/

     /* 2) Set map page after the window displayed*/

   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
            /* REGION CODE TABLE WINDOW*/
   /* ------------------------------------------------------------*/


  XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
  XX0XW02.XX0XWHDR = " REGION CODE TABLE          ";

  while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
    XPCPRG1(); /* perform region code window*/
  end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

  if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
    PB0WM001.PO-REG-CD = XPCWRG1.PO-REG-CD[XX0XWPIX]; /* move code*/
  else
    PB0WM001.PO-REG-CD = " "; /* Reset map field*/
  end

  converseLib.clearScreen();
   /* Restore map*/



end // end PB0W215

// -->Check attention identifier
Function PB0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PB0WW00.PB0WWSWF = "Y"; /* Format the map switch*/
      set PB0WM001 initial;
      set PB0WM001.CATOAP cursor, bold; /* Highlight*/
      set PB0WW01 empty; /* ==>reset map display record*/

    else

      PB0WW00.XXXPRCNM = "PB0W300"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5) /* or PF5  was pressed*/


    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0WM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PB0U"; /* set to application ppr menu*/
    end

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PB0WW00.PB0WWSWF = "Y"; /* Format the map switch*/

    set PB0WM001 initial;
    set PB0WM001.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0WW00.XXXPRCNM = "PB0W300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0w300 ***********************/
end // end PB0W300

// -->Reset highlighted fields
Function PB0W400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/




  set PB0WM001.XWHCD initialAttributes; /* warehouse code*/
  set PB0WM001.YMTCD initialAttributes; /* transportation mode*/
  set PB0WM001.PC2INSEG initialAttributes; /* spec diff code*/
  set PB0WM001.XQACD initialAttributes; /* quality code*/
  set PB0WM001.XOWCD initialAttributes; /* owner group code*/
  set PB0WM001.XPGCD initialAttributes; /* package type code*/
  set PB0WM001.XDMCD initialAttributes; /* dimension code*/
  set PB0WM001.XUMCD initialAttributes; /* unit of measure code*/

  set PB0WM001.PC3PONBR initialAttributes; /* P.O. Number*/
  set PB0WM001.PO-REG-CD initialAttributes; /* P.O. region*/
  set PB0WM001.SY1STNBR initialAttributes; /* style number*/
  set PB0WM001.SY2CLRID initialAttributes; /* color code*/
  set PB0WM001.PC6PLAN initialAttributes; /* plan code*/
  set PB0WM001.PB0W-MAP-ETS-CCYYMMDD initialAttributes; /* Est time of ship*/
  set PB0WM001.PC2CUXID initialAttributes; /* customer xref id*/

  set PB0WM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0WM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ********************** End of pb0w400 ***********************/
end // end PB0W400

// -->Verify the entered data
Function PB0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0WW00.XXXPRCNM = "PB0W500"; /* Module identification*/
    set PB0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If unit of measure code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/
    if (PB0WM001.XUMCD != PB0WW01.XUMCD)
      PB0W501(); /* =========> package type code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If package type code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XPGCD != PB0WW01.XPGCD)
      PB0W502(); /* =========> package type code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If spec diff code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.PC2INSEG != PB0WW01.PC2INSEG)
      PB0W503(); /* =========> Verify spec diff code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If owner group changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XOWCD != PB0WW01.XOWCD
     || PB0WM001.XWHCD != PB0WW01.XWHCD
     || PB0WM001.XOWCD > " ")

      PB0W504(); /* =========> Verify owner group code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If quality was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XQACD != PB0WW01.XQACD) /* quality code*/
      PB0W505(); /* ===========> Verify quality code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XDMCD != PB0WW01.XDMCD) /* dimension code*/
      PB0W506(); /* ===========> Verify dimension code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* If estimated time of shipment entered.*/
     /* If customer xref changed, verify the entered code.*/

      /* note: formated/grouped this way for map edit logic reasons*/

    /* ------------------------------------------------------------*/

    if (PB0WM001.PC2CUXID != PB0WW01.PC2CUXID /* customer xref id*/
     || PB0WM001.PB0W-MAP-ETS-CCYYMMDD !=     
    PB0WW01.PB0W-MAP-ETS-CCYYMMDD)            /* est time of ship*/

      PB0W508(); /* ===========> Verify xref-id on table*/

      PB0W509(); /* ===========> Verify date*/

      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If trans mode changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.YMTCD != PB0WW01.YMTCD)
      PB0W511(); /* =========> Verify trans mode*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If warehouse was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.XWHCD != PB0WW01.XWHCD)
      PB0W512(); /* =========> Verify warehouse code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Plan was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.PC6PLAN != PB0WW01.PC6PLAN)
      PB0WW01.PC6PLAN = PB0WM001.PC6PLAN; /* ===>save in display rec*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If color code changed, verify the entered code.*/
     /* or related required fields changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.SY2CLRID != PB0WW01.SY2CLRID
     || PB0WM001.SY1STNBR != PB0WW01.SY1STNBR)
      PB0W514(); /* =========> Verify color code*/
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.SY1STNBR != PB0WW01.SY1STNBR
     || PB0WM001.SY1STNBR == " ")
      PB0W515(); /* =========> Verify style code*/
    end

    /* ------------------------------------------------------------*/
     /* If po region changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0WM001.PO-REG-CD != PB0WW01.PO-REG-CD
     || PB0WM001.PO-REG-CD == " ")
      PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
    end
    PB0W516(); /* =========> Region required*/

    /* ------------------------------------------------------------*/
     /* If P.O. Number was changed, verify the entered code.*/
     /* or is not entered, verify the data request.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* Errors were found*/
      if (PB0WM001.PC3PONBR != PB0WW01.PC3PONBR
       || PB0WM001.PC3PONBR == " "
       || PB0WM001.PC3PONBR <= 0)
        PB0WW00.PB0WWMOD = "Y"; /* ===> data modified*/
      end
      PB0W517(); /* =========> Verify P.O. Number code*/
    end
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* ********************** End of pb0w500 ***********************/
end // end PB0W500

// Verify Unit of Measure
Function PB0W501()
  if (PB0WM001.XUMCD == " ")
    PB0WW01.XUMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.XUMCD = PB0WM001.XUMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W501"; /* Module identification*/
    set PB0WM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W501 ***********************/
end // end PB0W501

// Verify Package type
Function PB0W502()
  if (PB0WM001.XPGCD == " ")
    PB0WW01.XPGCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.XPGCD = PB0WM001.XPGCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W502"; /* Module identification*/
    set PB0WM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(55); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W502 ***********************/
end // end PB0W502

// Verify ISEG code
Function PB0W503()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.PC2INSEG == " ")
    PB0WW01.PC2INSEG = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = COMMAREA.XGPCD; /* ===> GPC*/
  PC2REC.PC2INSEG = PB0WM001.PC2INSEG; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT == "A")  

      PB0WW01.PC2INSEG = PB0WM001.PC2INSEG;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row found and not active status.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT != "A")  

      set PB0WM001.PC2INSEG cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W503"; /* Module identification*/
      converseLib.validationFailed(51);

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0WM001.PC2INSEG cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W503"; /* Module identification*/
      converseLib.validationFailed(51);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0WW00.XXXPRCNM = "PB0W503"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0W503 ***********************/
end // end PB0W503

// Verify Owner Group code
Function PB0W504()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XOWCD == " ")
    PB0WW01.XOWCD = " ";
    return;
  end

  if (PB0WM001.XOWCD == "00")
    PB0WW01.XOWCD = "00";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/


    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "N") /* and owner group flag set*/
      if (PB0WM001.XOWCD == "00")

        PB0WW01.XOWCD = "00";

      else

        PB0WW00.XXXPRCNM = "PB0W504"; /* Module identification*/
        set PB0WM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end

    end


    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* and owner group flag set*/

      PB0WW00.XWHCD = PB0WM001.XWHCD;
      PB0WW00.XOWCD = PB0WM001.XOWCD;

      if (PB0WW00.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PB0WW01.XOWCD = PB0WM001.XOWCD;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PB0WW00.XXXPRCNM = "PB0W504"; /* Module identification*/
        set PB0WM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end


    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W504"; /* Module identification*/
    set PB0WM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(119); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W504 ***********************/
end // end PB0W504

// Verify Quality code
Function PB0W505()
  if (PB0WM001.XQACD == " ")
    PB0WW01.XQACD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.XQACD = PB0WM001.XQACD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W505"; /* Module identification*/
    set PB0WM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W505 ***********************/
end // end PB0W505

// Verify Dimension code
Function PB0W506()
  if (PB0WM001.XDMCD == " ")
    PB0WW01.XDMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.XDMCD = PB0WM001.XDMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W506"; /* Module identification*/
    set PB0WM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W506 ***********************/
end // end PB0W506

// Verify Cust Xref ID
Function PB0W508()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.PC2CUXID == " ")
    PB0WW01.PC2CUXID = " "; /* ==>save cust xref id moved*/
    return;
  else

    if (PB0WM001.PC2INSEG > " "
     && PB0WM001.PC2CUXID != PC2REC.PC2CUXID)
      set PB0WM001.PC2INSEG bold;
      set PB0WM001.PC2CUXID cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/
      PB0WW00.XXXPRCNM = "PB0W508"; /* Module identification*/
      converseLib.validationFailed(289); /* ===> Cust Xref does not match ISEG*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = COMMAREA.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PB0WM001.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT == "A")  

      PB0WW01.PC2CUXID = PB0WM001.PC2CUXID;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row found and not active status.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT != "A")  

      converseLib.clearScreen();
      
      set PB0WM001.PC2CUXID cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W508"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0WM001.PC2CUXID cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W508"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0WW00.XXXPRCNM = "PB0W508"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0W508 ***********************/
end // end PB0W508

// Verify ETS 'date'
Function PB0W509()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested.*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.PB0W-MAP-ETS-CCYYMMDD == " "
   || PB0WM001.PB0W-MAP-ETS-CCYYMMDD == "000000")
    PB0WW01.PB0W-MAP-ETS-CCYYMMDD = "00000000";
                                   /* ===> clear ETS Date map display*/
    PB0WW01.PC6ETSDT = 0; /* ===> clear ETS Date display record*/
    return;
  end

  if (PB0WM001.PB0W-MAP-ETS-CCYYMMDD not numeric)
    PB0WW01.PB0W-MAP-ETS-CCYYMMDD = "00000000";
                                   /* ===> clear ETS Date map display*/
    PB0WW01.PC6ETSDT = 0; /* ===> clear ETS Date display record*/
    PB0WW00.XXXPRCNM = "PB0W509"; /* Module identification*/
    set PB0WM001.PB0W-MAP-ETS-CCYYMMDD cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "C"; /* ===>     move date type to record*/
                                   /* -->(mmddccyy)*/

  PB0WW01.PB0W-MAP-ETS-CCYYMMDD = PB0WM001.PB0W-MAP-ETS-CCYYMMDD; /* ===> save ETS Date display*/
  PB0WW00.PB0WWMM = PB0WW01.PB0WWMM; /* ===> ETS Date Month display*/
  PB0WW00.PB0WWDD = PB0WW01.PB0WWDD; /* ===> ETS Date Day   display*/
  PB0WW00.PB0WWCC = PB0WW01.PB0WWCC; /* ===> ETS Date Year  display*/
  PB0WW00.PB0WWYY = PB0WW01.PB0WWYY; /* ===> ETS Date Year  display*/

  TA2REC.TA2GRECN = PB0WW00.TA2GRECN; /* ===> move date -->(mmddccyy)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PB0WW01.PC6ETSDT = TA2REC.TA2GRGGN; /* ===> save ETS Date*/


  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW01.PB0W-MAP-ETS-CCYYMMDD = "00000000";
                                   /* ===> clear ETS Date map display*/
    PB0WW00.XXXPRCNM = "PB0W509"; /* Module identification*/
    set PB0WM001.PB0W-MAP-ETS-CCYYMMDD cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W509 ***********************/
end // end PB0W509

// Verify Trans Mode
Function PB0W511()
   /* ------------------------------------------------------------*/
   /* Determine is reguested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.YMTCD == " ")
    PB0WW01.YMTCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.YMTCD in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.YMTCD = PB0WM001.YMTCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W511"; /* Module identification*/
    set PB0WM001.YMTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W511 ***********************/
end // end PB0W511

// Verify Product Warehouse
Function PB0W512()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XWHCD == " ")
    PB0WW01.XWHCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0WW01.XWHCD = PB0WM001.XWHCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0WW00.XXXPRCNM = "PB0W512"; /* Module identification*/
    set PB0WM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0W512 ***********************/
end // end PB0W512

// Verify Color Code
Function PB0W514()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.SY2CLRID == " ")

    PB0WW01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.SY1STNBR == " ")

    PB0WW00.XXXPRCNM = "PB0W514"; /* Module identification*/
    set PB0WM001.SY1STNBR cursor, bold; /* Highlight*/
    set PB0WM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = COMMAREA.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0WM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0WM001.SY1STNBR; /* ===> style code*/

  if (PB0WM001.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0WM001.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0WW01.SY2CLRID = PB0WM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0WM001.SY2CLRID cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W514"; /* Module identification*/
      converseLib.validationFailed(197);
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0WM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0W514 ***********************/
end // end PB0W514

// Verify Style Code
Function PB0W515()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.SY1STNBR != PB0WW01.SY1STNBR)
    PB0WW00.PB0WWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.SY1STNBR == " ")
    PB0WW01.SY1STNBR = PB0WM001.SY1STNBR;
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = COMMAREA.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0WM001.SY1STNBR; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0WW01.SY1STNBR = PB0WM001.SY1STNBR; /* ===> color code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the color code invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PB0WM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PB0WM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PB0W515 ***********************/
end // end PB0W515

// Verify region code
Function PB0W516()

  PB0WW01.PO-REG-CD = PB0WM001.PO-REG-CD;

  if (PB0WW01.PO-REG-CHAR1 == " ") /* Zero edit*/
    PB0WW01.PO-REG-CHAR1 = "0";
  end

  if (PB0WW01.PO-REG-CHAR2 == " ")
    PB0WW01.PO-REG-CHAR2 = PB0WW01.PO-REG-CHAR1;
    PB0WW01.PO-REG-CHAR1 = "0";
  end

  PB0WM001.PO-REG-CD = PB0WW01.PO-REG-CD;

  PB0WS10(); /* Verify region*/


end // end PB0W516

// Verify the P.O. Number
Function PB0W517()
   /* ------------------------------------------------------------*/
   /* check if PO NUMBER IS 0 or spaces*/
   /* ------------------------------------------------------------*/

  if (PB0WM001.PC3PONBR <= 0
   || PB0WM001.PC3PONBR == " ")
    set PB0WM001.PC3PONBR cursor, bold; /* Highlight*/
    set PB0WM001.PO-REG-CD cursor, bold; /* Highlight*/
    PB0WW00.XXXPRCNM = "PB0W517"; /* Module identification*/
    converseLib.validationFailed(35); /* P.O. Number must be entered*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = COMMAREA.XGPCD; /* ===> GPC*/
  VPOHDR02.PO-REG-CD = PB0WM001.PO-REG-CD; /* ===> PO REGION*/
  VPOHDR02.PC3PONBR = PB0WM001.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Z ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (VPOHDR02.YPUCD == "OP")
        if (VPOHDR02.PO-REG-CD == PB0WM001.PO-REG-CD)
          PB0WW01.PO-REG-CD = PB0WM001.PO-REG-CD; /* ===> p.o. region*/
          PB0WW01.PC3PONBR = PB0WM001.PC3PONBR; /* ===> p.o. number*/
          return; /* Return to previous process*/
        else
          set PB0WM001.PC3PONBR cursor, bold;
          set PB0WM001.PO-REG-CD cursor, bold;
          PB0WW00.XXXPRCNM = "PB0W517"; /* Module identification*/
          converseLib.validationFailed(69);
          return; /* Return to previous process*/
        end
      else
        set PB0WM001.PC3PONBR cursor, bold; /* Highlight*/
        set PB0WM001.PO-REG-CD cursor, bold; /* Highlight*/
        PB0WW00.XXXPRCNM = "PB0W517"; /* Module identification*/
        converseLib.validationFailed(503); /* P.O. Must be Open*/
        return;
      end
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0WM001.PC3PONBR cursor, bold;
      set PB0WM001.PO-REG-CD cursor, bold;
      PB0WW00.PB0WWSWF = "N"; /* Format the map switch*/

      PB0WW00.XXXPRCNM = "PB0W517"; /* Module identification*/
      converseLib.validationFailed(69);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0WW00.XXXPRCNM = "PB0W517"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0W517 ***********************/
end // end PB0W517

// -->Process valid input request
Function PB0W600()
   /* ------------------------------------------------------------*/
   /* This if statement process the first of multiple styles*/
     /* if user elected to proceed with display style on map*/
      /* and they did not modify any of the data.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter
   && PB0WW00.PB0WWMOD == "N" /* ===> field modifed flag*/
   && PB0WW00.PB0WWMLT == "Y") /* ===> multiple styles flag*/

    PB0W630(); /* =======>process  set up transfer to appl*/

  end

   /* ------------------------------------------------------------*/
   /* load the select row*/
   /* ------------------------------------------------------------*/

  PB0W610(); /* =======> load/process select count*/

   /* ------------------------------------------------------------*/
    /* if count > 0 and < 21 process load PCWREC*/
   /* ------------------------------------------------------------*/

  if (PCYREC.PCYCOUNT == 0)

    if (PB0WM001.PC3PONBR == 0)
      PB0WM001.PO-REG-CD = VPOITM04.PO-REG-CD;
      PB0WM001.PC3PONBR = VPOITM04.PC3PONBR;
    end

    set PB0WM001.PO-REG-CD cursor;
    PB0WW00.XXXPRCNM = "PB0W600"; /* Module identification*/
    converseLib.validationFailed(18); /* ===> Indicate no data found*/
    exit stack;

  end

  if (PCYREC.PCYCOUNT > 20)

    if (PB0WM001.PC3PONBR == 0)
      PB0WM001.PO-REG-CD = VPOITM04.PO-REG-CD;
      PB0WM001.PC3PONBR = VPOITM04.PC3PONBR;
    end

    set PB0WM001.PO-REG-CD cursor;
    PB0WW00.XXXPRCNM = "PB0W600"; /* Module identification*/
    converseLib.validationFailed(82); /* ===> Indicate row max exceeded*/
    exit stack;

  end

  PB0W620(); /* =======> process select set and load to PCWREC*/

  if (PB0WW00.PB0WWMLT == "Y") /* ===>multiple styles flag*/

    return; /* ===>exit to display map*/

  end


   /* ------------------------------------------------------------*/
    /* if successful, transfer to appropriate application*/
   /* ------------------------------------------------------------*/

  PB0W630(); /* =======>process transfer to*/
                                   /* application*/
   /* **                                                        ***/
   /* ********************** End of pb0w600 ***********************/
end // end PB0W600

// Set-up  Select Count  VPOITM04
Function PB0W610()
   /* ------------------------------------------------------------*/
   /* Load the IO MODE call record and make a select count call*/
   /* to the P.O. Item Data Base.*/
   /* ------------------------------------------------------------*/


  set VPOITM04 empty; /* ===>initialize record before loading*/
                                   /* it*/
  set PCYREC empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM04.XGPCD = COMMAREA.XGPCD;
  VPOITM04.PC6RTADT = -1;
  VPOITM04.PC6OETS = -1;
  VPOITM04.PC6CXNBR = -1;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XUMCD > " ")
    VPOITM04.XUMCD = PB0WW01.XUMCD;
  else
    VPOITM04.XUMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XPGCD > " ")
    VPOITM04.XPGCD = PB0WW01.XPGCD;
  else
    VPOITM04.XPGCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2INSEG > " ")
    VPOITM04.PC2INSEG = PB0WW01.PC2INSEG;
  else
    VPOITM04.PC2INSEG = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XOWCD > " ") /* owner group code*/
    VPOITM04.XOWCD = PB0WW01.XOWCD;
  else
    VPOITM04.XOWCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If quality, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XQACD > " ") /* quality code*/
    VPOITM04.XQACD = PB0WW01.XQACD;
  else
    VPOITM04.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If dimension, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XDMCD > " ") /* dimension code*/
    VPOITM04.XDMCD = PB0WW01.XDMCD;
  else
    VPOITM04.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer xref, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2CUXID > " ") /* customer xref id*/
    VPOITM04.PC2CUXID = PB0WW01.PC2CUXID;
  else
    VPOITM04.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If estimated time of shipment, load select record*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6ETSDT > 0) /* est time of shipment*/
    VPOITM04.PC6ETSDT = PB0WW01.PC6ETSDT;
  else
    VPOITM04.PC6ETSDT = -1;
  end

   /* ------------------------------------------------------------*/
   /* If trans mode, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.YMTCD > " ")
    VPOITM04.YMTCD = PB0WW01.YMTCD;
  else
    VPOITM04.YMTCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XWHCD > " ")
    VPOITM04.XWHCD = PB0WW01.XWHCD;
  else
    VPOITM04.XWHCD = "*";
  end


   /* ------------------------------------------------------------*/
   /* If plan code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6PLAN > 0)
    VPOITM04.PC6PLAN = PB0WW01.PC6PLAN;
  else
    VPOITM04.PC6PLAN = -1;
  end

   /* ------------------------------------------------------------*/
   /* If color code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY2CLRID > " ")
    VPOITM04.SY2CLRID = PB0WW01.SY2CLRID;
  else
    VPOITM04.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If style code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY1STNBR > " ")
    VPOITM04.SY1STNBR = PB0WW01.SY1STNBR;
  else
    VPOITM04.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* load rest of key fields.*/
   /* ------------------------------------------------------------*/


  VPOITM04.YSMXDV = "*";
  VPOITM04.XDSCD = "*";
  VPOITM04.PC6STAT = "OP";
  VPOITM04.PC3PONBR = PB0WW01.PC3PONBR;
  VPOITM04.PO-REG-CD = PB0WW01.PO-REG-CD;


  if (COMMAREA.CAILVL[4] == "Y" /* ===> direct ship security*/
   && VPOITM04.XDSCD == "*")   

    PB0WW00.PB0WWCNT = 0; /* ===> init saved I.O. mode count*/
    VPOITM04.XDSCD = "1";
    PB0W611(); /* ===> Select (T1) Count    VPOITM04*/
    PB0WW00.PB0WWCNT = PCYREC.PCYCOUNT; /* ===> save I.O. mode count*/

    VPOITM04.XDSCD = "2";
    PB0W611(); /* ===> Select (T1) Count    VPOITM04*/
    PCYREC.PCYCOUNT = PCYREC.PCYCOUNT + PB0WW00.PB0WWCNT; /* ===> sum count*/

    VPOITM04.XDSCD = "*"; /* ===> load back orig value*/

  else

    PB0W611(); /* ===> Select (T1) Count    VPOITM04*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0W610 ***********************/
end // end PB0W610

// Select (T1) Count     VPOITM04
Function PB0W611()
   /* *************************************************************/
   /* Select the count of rows returned with the above criteria*/
   /* *************************************************************/


  PCYREC.PCYFUNC = "R1";
  try
    call "VPOITM04" (PCYREC, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Sel count*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0WW00.XXXPRCNM = "PB0W611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0W611 ***********************/
end // end PB0W611

// Process select set/load PCWREC
Function PB0W620()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PB0W621(); /* ========> select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into PCWREC until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PB0WW00.PB0WWSWC == "N") /* Until end of cursor*/

    PB0W622(); /* ==========> Fetch selected rows*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0W623(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* if not data was loaded to transfer/display*/
           /* exit to display map*/
   /* ------------------------------------------------------------*/

  if (PB0WW00.PB0WWIXR == 0) /* increment record index*/
    converseLib.validationFailed(18); /* ===> no data was found to display*/
    PB0WW00.XXXPRCNM = "PB0W620"; /* Module identification*/
    exit stack;
  end

   /* **                                                        ***/
   /* ********************** End of pb0w620 ***********************/
end // end PB0W620

// Select the data
Function PB0W621()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* note: VPOITM04 has been loaded from select count process.*/
   /* ------------------------------------------------------------*/

  PB0WW00.PB0WWIXR = 0; /* ===> record line index*/
  PB0WW00.PB0WWSWC = "N"; /* ===> End of cursor switch*/
  PB0WW00.PB0WWMLT = "N"; /* ===> multiple styles flag*/
  PB0WW00.PB0WWMOD = "N"; /* ===> modified data flag*/
  move 0 to PCWREC.PC6ITMNB[1] for 20; /* ===> P.O. Item sequence number*/


   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "Z7";

  try
    call "VPOITM04" (PCYREC, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0WW00.XXXPRCNM = "PB0W621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0WM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0w621 ***********************/
end // end PB0W621

// Fetch next row/load the PCWREC
Function PB0W622()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "G7";
  try
    call "VPOITM04" (PCYREC, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (VPOITM04.PC6STAT == "OP")
        if (VPOITM04.SY1STNBR == PB0WW00.PB0WWSTY /* ==> no change in style*/
         || PB0WW00.PB0WWIXR == 0)                /* ===> record index*/

          PB0WW00.PB0WWIXR = PB0WW00.PB0WWIXR + 1;
          PCWREC.PC6ITMNB[PB0WWIXR] = VPOITM04.PC6ITMNB;
          PB0WW00.PB0WWSTY = VPOITM04.SY1STNBR;
                                   /* ==> save current style*/
          return; /* Return to previous process*/
        else /* ==>control break for mult styles*/
          converseLib.validationFailed(113); /* mult. styles (press ent. to except*/
          PB0WW00.XXXPRCNM = "PB0W622"; /* Module identification*/
          PB0WM001.SY1STNBR = PB0WW00.PB0WWSTY;
                                   /* ==> load style to map*/
          PB0WW01.SY1STNBR = PB0WW00.PB0WWSTY;
                                   /* ==>  to display record*/
          set PB0WM001.SY1STNBR cursor; /* ==>positon cursor for style entry*/
          PB0WW00.PB0WWSWC = "Y"; /* Indicate end of cursor*/
          PB0WW00.PB0WWMLT = "Y"; /* multiple styles flag*/
          return; /* Exit to display map*/
        end
      else /* ==>only get open items*/
        return; /* Return to previous process*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      PB0WW00.PB0WWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0WW00.XXXPRCNM = "PB0W622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0W622 ***********************/
end // end PB0W622

// Close selected set cursor
Function PB0W623()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Q7";
  try
    call "VPOITM04" (PCYREC, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0WW00.XXXPRCNM = "PB0W623"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0WW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0W623 ***********************/
end // end PB0W623

// Set-up and transfer to appl.
Function PB0W630()
   /* ------------------------------------------------------------*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "PB0X";

  PB0W631(); /* ===> load pass data to pcwrec*/

  PB0W632(); /* ===> load save selection pass data*/
                                   /* for return*/

  COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

  XSPCS01(); /* Exit to another application*/

   /* ===>*/
   /* ===>if exit failed, reset and return to selection map*/
   /* ===>*/

  PB0WW00.PB0WWSWF = "Y"; /* ===>format the data*/
  set PB0WM001 initial; /* set map clear*/
  set PB0WM001.CATOAP cursor, bold; /* Highlight*/
  set PB0WW01 empty; /* reset map display record*/

  exit stack; /* =================> Exit to display*/
                                   /* map*/
   /* **                                                        ***/
   /* ********************** End of PB0W630 ***********************/
end // end PB0W630

// load "PCWREC" w/ Sel pass data
Function PB0W631()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.PO-REG-CD = PB0WW01.PO-REG-CD;
  PCWREC.PC3PONBR = PB0WW01.PC3PONBR;

  if (COMMAREA.CATOAP == "PB0X")
    PCWREC.PC3POIDT = 0;
    PCWREC.PC4ORTYP = " ";
    PCWREC.FY1FCTYC = " ";
  end

  PCWREC.XGPCD = COMMAREA.XGPCD;
  PCWREC.XDSCD = " ";
  PCWREC.PC6STAT = " ";
  PCWREC.YSMXDV = " ";


   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PB0WW01.XUMCD > " ")
    PCWREC.XUMCD = PB0WW01.XUMCD;
  else
    PCWREC.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XPGCD > " ")
    PCWREC.XPGCD = PB0WW01.XPGCD;
  else
    PCWREC.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2INSEG > " ")
    PCWREC.PC2INSEG = PB0WW01.PC2INSEG;
  else
    PCWREC.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XOWCD > " ") /* owner group code*/
    PCWREC.XOWCD = PB0WW01.XOWCD;
  else
    PCWREC.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XQACD > " ") /* quality code*/
    PCWREC.XQACD = PB0WW01.XQACD;
  else
    PCWREC.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XDMCD > " ")
    PCWREC.XDMCD = PB0WW01.XDMCD;
  else
    PCWREC.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2CUXID > " ")
    PCWREC.PC2CUXID = PB0WW01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
    /* IF ESTiMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6ETSDT > 0)
    PCWREC.PC6ETSDT = PB0WW01.PC6ETSDT;
  else
    PCWREC.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.YMTCD > " ")
    PCWREC.YMTCD = PB0WW01.YMTCD;
  else
    PCWREC.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XWHCD > " ")
    PCWREC.XWHCD = PB0WW01.XWHCD;
  else
    PCWREC.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6PLAN > 0)
    PCWREC.PC6PLAN = PB0WW01.PC6PLAN;
  else
    PCWREC.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY2CLRID > " ")
    PCWREC.SY2CLRID = PB0WW01.SY2CLRID;
  else
    PCWREC.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY1STNBR > " ")
    PCWREC.SY1STNBR = PB0WW01.SY1STNBR;
  else
    PB0WW02.SY1STNBR = " ";
  end


   /* ********************** End of pb0w631 ***********************/
end // end PB0W631

// load/save pass data for return
Function PB0W632()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/


  PB0WW02.PO-REG-CD = PB0WW01.PO-REG-CD;
  PB0WW02.PC3PONBR = PB0WW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PB0WW01.XUMCD > " ")
    PB0WW02.XUMCD = PB0WW01.XUMCD;
  else
    PB0WW02.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XPGCD > " ")
    PB0WW02.XPGCD = PB0WW01.XPGCD;
  else
    PB0WW02.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2INSEG > " ")
    PB0WW02.PC2INSEG = PB0WW01.PC2INSEG;
  else
    PB0WW02.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XOWCD > " ") /* owner group code*/
    PB0WW02.XOWCD = PB0WW01.XOWCD;
  else
    PB0WW02.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XQACD > " ") /* quality code*/
    PB0WW02.XQACD = PB0WW01.XQACD;
  else
    PB0WW02.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XDMCD > " ")
    PB0WW02.XDMCD = PB0WW01.XDMCD;
  else
    PB0WW02.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC2CUXID > " ")
    PB0WW02.PC2CUXID = PB0WW01.PC2CUXID;
  else
    PB0WW02.PC2CUXID = " ";
  end


   /* ------------------------------------------------------------*/
    /* IF ESTiMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6ETSDT > 0)
    PB0WW02.PC6ETSDT = PB0WW01.PC6ETSDT;
  else
    PB0WW02.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.YMTCD > " ")
    PB0WW02.YMTCD = PB0WW01.YMTCD;
  else
    PB0WW02.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.XWHCD > " ")
    PB0WW02.XWHCD = PB0WW01.XWHCD;
  else
    PB0WW02.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.PC6PLAN > 0)
    PB0WW02.PC6PLAN = PB0WW01.PC6PLAN;
  else
    PB0WW02.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY2CLRID > " ")
    PB0WW02.SY2CLRID = PB0WW01.SY2CLRID;
  else
    PB0WW02.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PB0WW01.SY1STNBR > " ")
    PB0WW02.SY1STNBR = PB0WW01.SY1STNBR;
  else
    PB0WW02.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PB0W"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PB0WW02.PB0WWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PB0W"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PB0WW02.PB0WWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PB0W"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PB0WW02.PB0WWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PB0W"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PB0WW02.PB0WWUSR;

        end
      end
    end
  end



   /* **                                                        ***/
   /* ********************** End of pb0w632 ***********************/
end // end PB0W632

// Select unique from VPOREG01
Function PB0WS10()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = COMMAREA.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = PB0WW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to verify REGION.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0WM001.PO-REG-CD cursor, bold;
        PB0WM001.XXXPRCNM = "PB0WS10"; /* Module name*/
        converseLib.validationFailed(528); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0WM001.XXXPRCNM = "PB0WS10"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0WM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0WS10"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0WS10

// Access DPRODC.VPOREG01
Function PB0WS15()
   /* ------------------------------------------------------------*/
   /* Read DPRODC.VPOREG01. Load REGION array.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOREG01.XGPCD = COMMAREA.XGPCD; /* GPC*/

  XPCWRG1.STOPSW = " ";

  PB0WS16(); /* Declare and open cursor*/

  PB0WS17(); /* Fetch first row*/

  if (XPCWRG1.STOPSW == "Y") /* No data found*/
    converseLib.validationFailed(276); /* Display msg*/
    PB0WM001.XXXPRCNM = "PB0WS15"; /* Module name*/
    set PB0WM001.PO-REG-CD cursor, bold; /* Highlight field*/
  end

  XPCWRG1.REGSUB = 1; /* Initialize region subscript*/

  while (XPCWRG1.STOPSW != "Y" /* Load region array*/
   && XPCWRG1.REGSUB <= 99)

    XPCWRG1.PO-REG-CD[REGSUB] = VPOREG01.PO-REG-CD;
    XPCWRG1.PO-REG-DESC[REGSUB] = VPOREG01.PO-REG-DESC;

    XPCWRG1.REGSUB = XPCWRG1.REGSUB + 1; /* Increment region subscript*/

    PB0WS17(); /* Fetch next row*/

  end

  XPCWRG1.REGSUBMAX = XPCWRG1.REGSUB - 1; /* Save number of entries*/

  PB0WS18(); /* Close cursor*/

  XPCWRG1.REG-ARRAY-SW = "Y"; /* Set up 'region array loaded' switch*/

end // end PB0WS15

// Select rows from VPOREG01
Function PB0WS16()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0WM001.XXXPRCNM = "PB0WS16"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0WM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0WS16"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0WS16

// Fetch row from VPOREG01
Function PB0WS17()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOREG01.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("N1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        XPCWRG1.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0WM001.XXXPRCNM = "PB0WS17"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0WM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0WS17"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0WS17

// Close cursor for VPOREG01
Function PB0WS18()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("C1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0WM001.XXXPRCNM = "PB0WS18"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0WM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0WS18"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0WS18

// converse pop up window
Function XPCPRG1()
   /* ------------------------------------------------------------*/

              /* CONVERSE PO REGION POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the data.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "Y") /* if the first time through*/
      XX0XW02.XX0XWINX[10] = 0; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      XPCWRG1.REGSUB = XX0XW02.XX0XWINX[10] + 1; /* set up array sub.*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPCWRG1.REGSUB <= XPCWRG1.REGSUBMAX) /* or end of data*/
        XX0XM001.XX0XMCD[XX0XWCT2] = XPCWRG1.PO-REG-CD[REGSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = XPCWRG1.PO-REG-DESC[REGSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = XPCWRG1.REGSUB; /* Save array sub.*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        XPCWRG1.REGSUB = XPCWRG1.REGSUB + 1; /* Increment array sub.*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to 'no'*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XPCWRG1.REGSUB = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        XX0XM001.XX0XMCD[XX0XWCT2] = XPCWRG1.PO-REG-CD[REGSUB];
        XX0XM001.XX0XMDES[XX0XWCT2] = XPCWRG1.PO-REG-DESC[REGSUB];
        XX0XW02.XX0XWINX[XX0XWCT2] = XPCWRG1.REGSUB;
                                   /* Save array sub*/
        set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        XPCWRG1.REGSUB = XPCWRG1.REGSUB - 1; /* Decrement table index*/
      end
      if (XPCWRG1.REGSUB < 1) /* If the table index was decremented*/
        XPCWRG1.REGSUB = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPCWRG1.REGSUB > XPCWRG1.REGSUBMAX) /* or end of data*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= 1)  
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPCPRG1

//*** RECORD=PB0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PB0WW00 type basicRecord
  10 PB0WWSWR PB0WWSWR ; 
  10 PB0WWSWF PB0WWSWF ; 
  10 PB0WWSWC PB0WWSWC ; 
  10 PB0WWIXR PB0WWIXR ; 
  10 PB0WWXIT PB0WWXIT ; 
  10 PB0WWMOD PB0WWMOD ; 
  10 PB0WWMLT PB0WWMLT ; 
  10 PB0WWCNT PB0WWCNT ; 
  10 * char(3) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PB0WWSTY PB0WWSTY ; 
  10 PB0WWDT PB0WWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 * char(3) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PB0WWMM PB0WWMM ; 
    15 PB0WWDD PB0WWDD ; 
    15 PB0WWCC PB0WWCC ; 
    15 PB0WWYY PB0WWYY ; 
  10 * char(3) ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
end // end PB0WW00

//*** RECORD=PB0WW01 ****
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      Pb0wM.Pb0wM001
// 
//    RECORD NAME:      Pb0wW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information  that relates to a P.O. Item.
//    This record information is processed in a (Select Set)
//    to retrieve rows for subsequent applications.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// ***********************
Record PB0WW01 type basicRecord
  10 PO-REG-CD PO-REG-CD ; 
    15 PO-REG-CHAR1 PO-REG-CHAR1 ; 
    15 PO-REG-CHAR2 PO-REG-CHAR2 ; 
  10 PC3PONBR PC3PONBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XSECD XSECD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XWHCD XWHCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 YMTCD YMTCD ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PB0W-MAP-ETS-CCYYMMDD PB0W-MAP-ETS-CCYYMMDD ; 
    15 PB0WWCC PB0WWCC ; 
    15 PB0WWYY PB0WWYY ; 
    15 PB0WWMM PB0WWMM ; 
    15 PB0WWDD PB0WWDD ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC2CUXID PC2CUXID ; 
end // end PB0WW01

//*** RECORD=PB0WW02 ****
// **************** PRODUCTION ORDER ITEM  RECORD *************
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      pb0wM.pb0wM001
// 
//    RECORD NAME:      pb0wW02
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the data that was entered
//    the user at the start of this application.  Also, map and
//    temp storage pages are saved for the return from a lower
//    level application.
// 
//      On the return from one of the above applications, the
//    appropraite user area is laoded to this record and
//    processed accordingly.
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER ITEM  RECORD *************
// ***********************
Record PB0WW02 type basicRecord
  5 PB0WWUSR PB0WWUSR ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XWHCD XWHCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YMTCD YMTCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC2CUXID PC2CUXID ; 
    10 * char(457) ; 
end // end PB0WW02

//*** RECORD=XPCWRG1 ****
// ----------------------------
// region pop-up table working storage
// ----------------------------
// ***********************
Record XPCWRG1 type basicRecord
  10 PO-REG-DATA char(32) [99] ; // po reg table
    15 PO-REG-CD PO-REG-CD ; 
    15 PO-REG-DESC PO-REG-DESC ; 
  10 REGSUB num(2) ; // region subscript
  10 REGSUBMAX num(2) ; // region max susbscript
  10 STOPSW char(1) ; // region stopsw
  10 REG-ARRAY-SW char(1) ; // region stopsw
end // end XPCWRG1

// PC_EST_HDT map display
DataItem PB0W-MAP-ETS-CCYYMMDD char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PB0WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count saved for D.S. security
DataItem PB0WWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ETS date day map display
DataItem PB0WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHAR data form
DataItem PB0WWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PB0WWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// multiple styles flag
DataItem PB0WWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PB0WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PB0WWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved/previous style number
DataItem PB0WWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PB0WWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PB0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PB0WWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0WWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PB0WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

