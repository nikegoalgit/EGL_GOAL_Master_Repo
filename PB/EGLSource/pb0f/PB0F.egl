package pb0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0F ****
//              PB0F - ORIGINAL ETS MAINTENANCE
// 
//   This application is for apparel only. It will be used to
// change the OETS for all products on a p.o. If the month
// entered in the OETS field on the screen, then the P.O. ID
// will be updated so the delivery month matches the monthe
// on the OETS. The year must no be changed from what is
// already on the P.O. in the season year field.
// 
//   After the user has entered the data, pressed <ENTER>, and
// passed all edits, they will be given a message telling them
// how many plans and colors will be updated. They must then
// press <ENTER> a second time for the updates to occur.
// 
// 
//   DATE      NAME   DESCRIPTION OF CHANGE
// --------   ------  ----------------------------------------
// 01/23/91   GAMEN   New application.
// 06/12/91   GAMEN   Add new fields for db2 changes to pcjrec.
// 07/25/91   GAMEN   Add item seq # to errdiag key in pb0fs06.
// 07/26/91   GAMEN   In pb0d621, add check to insure item is
//                    not trying to merge with itself by
//                    comparing the item sequence numbers.
// 10/07/91   GAMEN   Added new pc6rec fields to pb0fw02 for
//                    october 91 db2 changes.
// 03/10/92   GAMEN   Add s.o. fields for db2 chgs, mar09,
//                    to dprodc.vpoasz01 table.
// 03/16/92   GAMEN   Insure that audit item time is unique in
//                    pb0fs12.
// 10/07/91   GAMEN   Modify to use sales order key fields.
// 09/18/92   chaert  Modify to use mode in balance to ship
// 06/16/93   dhales  add new fields fo db2 changes to pc7rec
//                    and pckrec
// 02/04/94   dhales  prevent changes to po nbr < 300000
// 03/07/94   dhales  db2 changes new hdr and item field
// 01/19/95   SFORD   changed module PB0F520 to only process
//                    P.O. Range between 400000 and 699999
//                    to include date ad time change
// 06/10/97   PHARWO  PCA367 - PPR PROJECT - P.O. VIEWS
// 06/23/97   jniese  correct redefine of itm and ppr changes
// 12/09/97   DRAMMO  Preventing change of PO ID field for PO
//                    type 'BA' if OETS is entered through PB0F
//                    Changes are made in PB0F500 & PB0F600.
// 10/20/98   MHUYNH  Generated due to changes to XPPC030
// 12/09/98   DRAMMO  PB0FS17- Modified to create Audit itms
//                    recd for PO transfers.
// 04/30/99   VKUMAR  Generated to move XSPCS31
// 05/20/99   Vsanka  bug fixed in pb0fs12.
// 09/09/99   sbungo  changed to use view vpoitm04 & default
//                    bank-cd to spaces for inserts into itm04
// 01/19/2000 vmatt   Cleaned up vpoitm03
// 03/24/2000 SBUNGO  CHANGED TO USE VIEW VPOITM05
// 05/17/00   SBUNGO  MODIFIED PROCESS PB0F500 AND CREATED NEW
//                    STATEMENT GROUP PB0FS31 TO PREVENT
//                    MAINTENANCE FOR SAP CREATED PO'S
//                    Also modified statement groups
//                    pb0fs02,pb0fs03,pb0fs04 to use PCYREC
//                    when calling iomod VPOITM05 instead of
//                    moving hardcoded function call values.
// 03/12/01   VMATT   Changed PB0F500 to retrieve nissho sent
//                    flag and others for the new po id only
//                    if the LC is already issued for that
//                    PO number
// 06/06/01   VMATT   Retain Nissho fl,date & time if LC is
//                    already issued.
// *********************
Program PB0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PB0FW00 PB0FW00; // record
  PB0FW01 PB0FW01; // record
  PB0FW02 PB0FW02; // record
  PB0FW03 PB0FW03; // record
  PB0FW04 PB0FW04; // record
  PC2REC PC2REC; // record
  PC5REC PC5REC; // record
  PC8REC PC8REC; // record
  PCBREC PCBREC; // record
  PCDREC PCDREC; // record
  PCGREC PCGREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YACTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PB0FM.PB0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PB0F001; /* Special Initialization*/

    PB0F001: PB0F001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/

    goto PB0F002; /* Converse main process*/

    PB0F002: PB0F002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the PB0FM001 map*/
     /* ------------------------------------------------------------*/

    goto PB0F002; /* Repeat main process*/

  end // end main
end // end PB0F


// Special Initialization
Function PB0F001()

   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CACLVL[3] == "Y")
     /* next sentence*/

  else
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PB0FM001.XXXPRCNM = "PB0F001";

  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/
  set PB0FM001 initial;
  set PB0FW00 empty;
  set PB0FW01 empty;
  set PB0FW02 empty;
  set PB0FW03 empty;
  set PB0FW04 empty;
  set VPOHDR02 empty;
  set PC5REC empty;
  set VPOITM05 empty;
  set VPOSIZ02 empty;
  set PCBREC empty;
  set PCDREC empty;
  set PCGREC empty;
  set VPOAHD02 empty;
  set VPOAIT02 empty;
  set VPOASZ02 empty;
  set PCYREC empty;
  set VFYPO002 empty;
  set PG2REC empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TSTREC empty;
  set TSOREC empty;
  set TSHREC empty;
  set XX0XW01 empty;
  set XX0XW02 empty;

  TA1REC.TA1PGMNM = "PB0F001"; /* Module identification*/
  PB0FW00.XXXPRCNM = "PB0F"; /* Module identification*/
  PB0FW01.XGPCD = PCWREC.XGPCD; /* Save gpc code*/

end // end PB0F001


// Main process to display a map
Function PB0F002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0F200(); /* Format and display the map*/

  PB0F300(); /* Check attention identifier*/

  PB0F400(); /* Reset fields to normal intensity*/

  PB0F500(); /* Verify the entered data*/

  PB0F600(); /* Process valid input request*/


end // end PB0F002


// Format and display the map
Function PB0F200()

   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not a PA key pressed*/
    set PB0FM001 initial; /* Clear map output area*/
    PB0F210(); /* Format selection data*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0FM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PB0FM001.XXXPRCNM = PB0FW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PB0FM001 alarm; /* Indicate sound alarm*/
  end


  converse PB0FM001 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0FW00.XXXPRCNM = "PB0F"; /* Module identification*/
  COMMAREA.CATOAP = PB0FM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PB0FM001.CAITEM; /* Application data*/

end // end PB0F200


// Move data to map
Function PB0F210()
   /* ------------------------------------------------------------*/
   /* Format the item data for map 001 display.*/
   /* ------------------------------------------------------------*/

  PB0FM001.XGPCD = PB0FW01.XGPCD; /* GPC Code*/
  if (PB0FM001.XGPCD in XGPTBL.XGPCD)
    PB0FM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end
  PB0FM001.PC3PONBR = PB0FW01.PC3PONBR; /* PO number*/
  PB0FM001.PB0FMETS = PB0FW01.PB0FMETS; /* OETS*/
  PB0FM001.YACCD = PB0FW01.YACCD; /* Audit comment*/
  if (PB0FM001.YACCD in YACTBL.YACCD)
    PB0FM001.YACSDESC = YACTBL.YACSDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* Format the confirmation message - number of colors & plans*/
   /* ------------------------------------------------------------*/

  if (PB0FW00.PB0FWCFL == "Y") /* If confirm flag = 'y'*/
    PB0FM001.PB0FWCT1 = PB0FW00.PB0FWCT1; /* Color count*/
    PB0FM001.PB0FWCT2 = PB0FW00.PB0FWCT2; /* Plan count*/
    set PB0FM001.PB0FMLT1 skip; /* Display number of colors literal*/
    set PB0FM001.PB0FMLT2 skip; /* Display number of plans literal*/
  else
    PB0FM001.PB0FWCT1 = 0; /* Color count*/
    PB0FM001.PB0FWCT2 = 0; /* Plan count*/
    set PB0FM001.PB0FMLT1 skip, invisible; /* Darken number of colors lit*/
    set PB0FM001.PB0FMLT2 skip, invisible; /* Darken number of plans lit*/
  end

end // end PB0F210


// Check attention identifier
Function PB0F300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PB0FM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PB0FW00.XXXPRCNM = "PB0F130"; /* Module identification*/
      set PB0FM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAFROMAP = "PB0FM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PB0FW00.XXXPRCNM = "PB0F130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PB0F300


// Reset highlighted fields
Function PB0F400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PB0FM001.PC3PONBR initialAttributes; /* PO number*/
  set PB0FM001.PB0FMETS initialAttributes; /* Oets*/
  set PB0FM001.YACCD initialAttributes; /* Audit comment*/
   /* SET PB0FM001.PB0FMLT1 DEFINED   ; Color count literal*/
   /* SET PB0FM001.PB0FMLT2 DEFINED   ; Plan count literal*/
  set PB0FM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0FM001.CAITEM initialAttributes; /* Commarea application data*/

end // end PB0F400


// Verify the entered data
Function PB0F500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0FW00.XXXPRCNM = "PB0F500"; /* Module identification*/
    set PB0FM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* verify the po number is not an EAO bridged po.*/
   /* ------------------------------------------------------------*/

  if (PB0FM001.PC3PONBR < 400000 /* Application data was entered*/
   || PB0FM001.PC3PONBR > 699999) /* Application data was entered*/

    PB0FW00.XXXPRCNM = "PB0F500"; /* Module identification*/
    set PB0FM001.PC3PONBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(509); /* Indicate out of range*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Check to see if data has changed*/
   /* ------------------------------------------------------------*/

  if (PB0FM001.PC3PONBR != PB0FW01.PC3PONBR /* If P.O. number*/
   || PB0FM001.PB0FMETS != PB0FW01.PB0FMETS /* or OETS changed*/
   || PB0FM001.YACCD != PB0FW01.YACCD)      /* or audit comment changed*/
    PB0FW00.PB0FWCFL = "N"; /* Set confirm flag to no*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the audit comment*/
   /* ------------------------------------------------------------*/

  if (PB0FM001.YACCD in YACTBL.YACCD /* ===> Code is in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ===> active status*/
    PB0FW01.YACCD = PB0FM001.YACCD;
  else
    PB0FM001.XXXPRCNM = "PB0F500"; /* Module identification*/
    set PB0FM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the OETS entered*/
   /* ------------------------------------------------------------*/

  PB0F510(); /* Call TA0040 to verify/convert data*/

   /* ------------------------------------------------------------*/
   /* Verify the p.o. number*/
   /* ------------------------------------------------------------*/

  if (PB0FM001.PC3PONBR > 0) /* P.O. number was entered*/
    set VPOHDR02 empty; /* Clear P.O. header record*/
    VPOHDR02.XGPCD = PB0FM001.XGPCD; /* Gpc code*/
    VPOHDR02.PC3PONBR = PB0FM001.PC3PONBR; /* P.O. number*/
    VPOHDR02.PO-REG-CD = "01"; /* po region*/
    PB0FS01(); /* Select unique p.o. header*/
    if (VAGen_SQLCODE == 0) /* Row found*/
      PB0FW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
      PB0FW01.PC3PONBR = PB0FM001.PC3PONBR;
      PB0FW00.PC3POIDT = VPOHDR02.PC3POIDT; /* P.O. id*/
      PB0FW00.PB0FWPOD = VPOHDR02.PC3POIDT; /* P.O. id group level*/

    else
      PB0FW00.XXXPRCNM = "PB0F500"; /* Module identification*/
      set PB0FM001.PC3PONBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(69); /* Indicate P.O. not found*/

    end
  else
    PB0FW00.XXXPRCNM = "PB0F500"; /* Module identification*/
    set PB0FM001.PC3PONBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(69); /* Indicate P.O. not found*/

  end

   /* ------------------------------------------------------------*/
   /* Check to see if P.O. Id has changed*/
   /* ------------------------------------------------------------*/

   /* Initialize the nissho sent flag*/

   /* IF VPOHDR02.PC3NISFL EQ 'Y'*/
  if (VPOHDR02.PC3NISFL == "N")
    PB0FW00.PC3NISFL = "N"; /* Nissho p.o. but not printed*/
    PB0FW00.PC3LCDIN = "N"; /* LOCR detail print indicator*/
    PB0FW00.PC3LCDSF = "N"; /* LOCR summary detail print indicator*/
    PB0FW00.PC3NISDT = 0;
    PB0FW00.PC3NISTM = 0;
  else
    if (VPOHDR02.PC3NISFL == " ")
      PB0FW00.PC3NISFL = " "; /* Not a nissho p.o.*/
      PB0FW00.PC3LCDIN = "N"; /* LOCR detail print indicator*/
      PB0FW00.PC3LCDSF = "N"; /* LOCR summary detail print indicator*/
      PB0FW00.PC3NISDT = 0;
      PB0FW00.PC3NISTM = 0;
    end
  end

  PB0FW00.PB0FWPFL = "N"; /* Init p.o. id change flag to no*/

  if (VPOHDR02.PC4ORTYP != "BA")
    if (PB0FW00.PB0FWM2 != PB0FW00.PB0FWMON) /* If delivery month changed*/
      PB0FW00.PB0FWM2 = PB0FW00.PB0FWMON; /* change months*/
      PB0FW00.PC3POIDT = PB0FW00.PB0FWPOD; /* P.O. id*/
      move VPOHDR02 to PB0FW04 withV60Compat; /* Save header record*/
      if (VPOHDR02.PC3NISFL == "Y") /* LC has been already issued*/
        /* PERFORM PB0F520;           /* Get*/
                                   /* nissho print indicator from new*/
                                   /* p.o. id*/
        PB0FW00.PC3NISFL = VPOHDR02.PC3NISFL; /* Save nissho sent flag*/
        PB0FW00.PC3NISDT = VPOHDR02.PC3NISDT; /* Save nissho sent date*/
        PB0FW00.PC3NISTM = VPOHDR02.PC3NISTM; /* Save nissho sent time*/
        PB0FW00.PC3LCDIN = VPOHDR02.PC3LCDIN; /* Detail print ind.*/
        PB0FW00.PC3LCDSF = VPOHDR02.PC3LCDSF; /* Summary print ind.*/
      end
      move PB0FW04 to VPOHDR02 withV60Compat; /* Restore header record*/
      PB0FW00.PB0FWPFL = "Y"; /* Set p.o. id change flag to yes*/
    end
  end

   /* -----------------------------------------------------------*/
   /* Validate to check whether any sap po items for a po #*/
   /* If found, then maintenance cannot be done for those po #*/
   /* -----------------------------------------------------------*/
  set VPOITM05 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "T9";
  PCYREC.PCYCOUNT = 0;
  VPOITM05.XGPCD = PB0FM001.XGPCD;
  VPOITM05.PO-REG-CD = "01";
  VPOITM05.PC3PONBR = PB0FM001.PC3PONBR;

  PB0FS31();

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -305)
    if (PCYREC.PCYCOUNT > 0)
      PB0FW00.XXXPRCNM = "PB0F500"; /* Module identification*/
      set PB0FM001.PC3PONBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(576); /* cannot maintain sap po's*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/

  end

  set VPOITM05 empty; /* Clear P.O. item record*/
  VPOITM05.XGPCD = PB0FM001.XGPCD; /* Gpc code*/
  VPOITM05.PC3PONBR = PB0FM001.PC3PONBR; /* P.O. number*/
  VPOITM05.PO-REG-CD = "01"; /* P.O. region*/

  PB0FS02(); /* Select set VPOITM05*/

  PB0FW00.PB0FWEOC = "N"; /* Initialize end of cursor flag*/
  PB0FS03(); /* Fetch next row VPOITM05*/
  if (VAGen_SQLCODE == 0)
    PB0FW00.YSMXDV = VPOITM05.YSMXDV; /* Save division code*/
  end

  while (PB0FW00.PB0FWEOC == "N" /* While not end of cursor*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0F530();
                                   /* Process balance to ship for all items*/
    PB0FS03(); /* Fetch next VPOITM05 row*/

  end

  PB0FS04(); /* Close VPOITM05 row*/


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/

  end


end // end PB0F500


// Validate OETS date
Function PB0F510()
   /* ------------------------------------------------------------*/
   /* Validate the input date*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = PB0FM001.PB0FMETS; /* move date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PB0FW00.PC6OETS = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    PB0FW00.PB0FWETS = TA2REC.TA2GRGGN; /* and in group level*/
    PB0FW01.PB0FMETS = TA2REC.TA2GRGA; /* save date in mmddyy*/
  else /* Invalid date entered*/
    converseLib.validationFailed(38); /* Error message*/
    PB0FM001.XXXPRCNM = "PB0FS01"; /* Process name*/
    set PB0FM001.PB0FMETS cursor, modified, bold;
  end


end // end PB0F510


// Check the balance to ship
Function PB0F530()
   /* ------------------------------------------------------------*/
   /* Process the "OP" or "FC" items only*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "OP"
   || VPOITM05.PC6STAT == "FC")

    /* ------------------------------------------------------------*/
     /* Get the balance to ship quantities*/
    /* ------------------------------------------------------------*/

    move VPOITM05 to PB0FW02 withV60Compat; /* ===> Save item to process*/
    PB0F531(); /* Get balance to ship*/

    /* ------------------------------------------------------------*/
     /* If there is intransit quantities or receipts,  then error*/
    /* ------------------------------------------------------------*/

    if (PC5REC.PC5TSHIP > 0 /* ===>   If Intransit data exists*/
     || PC5REC.PC5TRECV > 0) /* ===>   or receipts*/
      PB0FW00.XXXPRCNM = "PB0F530"; /* Module identification*/
      PCWREC.XXXMSGNO = 399; /* No data for selection requested*/
      PB0FW00.PB0FWEOC = "Y"; /* End of cursor flag*/
      exit stack; /* ===> Return to display message*/

    end

    move PB0FW02 to VPOITM05 withV60Compat; /* Restore item to process*/

  end

end // end PB0F530


// Get the balance to ship
Function PB0F531()
   /* ------------------------------------------------------------*/
   /* Load the PC5REC with item values*/
   /* ------------------------------------------------------------*/
  PC5REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC5REC.PO-REG-CD = VPOITM05.PO-REG-CD; /* GPC code*/
  PC5REC.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC5REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  PC5REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  PC5REC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  PC5REC.XQACD = VPOITM05.XQACD; /* Quality*/
  PC5REC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  PC5REC.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  PC5REC.XPGCD = VPOITM05.XPGCD; /* Package*/
  PC5REC.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  PC5REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  PC5REC.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  PC5REC.YMTCD = VPOITM05.YMTCD; /* mode of transportation*/
  PC5REC.OP1PARTN = VPOITM05.OP1PARTN; /* Part char*/
  PC5REC.OP1CUOID = VPOITM05.OP1CUOID; /* Sales order*/
  PC5REC.OP1NORID = VPOITM05.OP1NORID; /* Nike order*/
  PC5REC.PC5ERFL = "N"; /* hard error flag*/

  XPPC030(); /* Get balance to ship quantities for*/
                                   /* the item*/

end // end PB0F531


// Process valid input request
Function PB0F600()
   /* ------------------------------------------------------------*/
   /* Display confirmation message if not yet shown.*/
   /* ------------------------------------------------------------*/

  if (PB0FW00.PB0FWCFL == "N") /* If confirm flag = no*/
    if (VPOHDR02.YPUCD != "IN") /* IF NOT INCOMPLETE HDR STATUS*/
      PB0F610(); /* Get color & plan counts*/
    end
    if (VPOHDR02.YPUCD == "IN") /* IF INCOMPLETE HDR STATUS*/
      PB0FW00.PB0FWCT1 = 0; /* Color count*/
      PB0FM001.PB0FWCT1 = 0; /* Move to map*/
      PB0FW00.PB0FWCT2 = 0; /* Plan count*/
      PB0FM001.PB0FWCT2 = 0; /* Move to map*/
    end
    PCWREC.XXXMSGNO = 84; /* Confirmation message*/
    PB0FW00.PB0FWCFL = "Y"; /* Confirm flag = yes*/
    exit stack; /* Display message*/
  else
    PB0FW00.PB0FWCFL = "N"; /* Confirm flag = no*/
  end

  XX0XS01(); /* Get date and time*/

   /* ------------------------------------------------------------*/
   /* Fetch and update items.*/
   /* ------------------------------------------------------------*/
  PB0FS02(); /* Open cursor PO item*/
  PB0FW00.PB0FWITM = "N"; /* Initialize items updated flag*/
  PB0FW00.PB0FWEOC = "N"; /* Initialize end of cursor flag*/
  PB0FS03(); /* Fetch next item*/
  while (PB0FW00.PB0FWEOC == "N") /* While more items*/
    PB0F620(); /* Update PO*/
    PB0FS03(); /* Fetch next item*/
  end
  PB0FS04(); /* Close item cursor*/

   /* ------------------------------------------------------------*/
   /* Update p.o. id on header if changed with existing data*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC4ORTYP != "BA")
    if (PB0FW00.PB0FWPFL == "Y") /* If P.O. Id changed*/
      PB0FW00.PB0FWITM = "Y";
      VPOHDR02.PC3DMPRC = 0; /* LOCR dollar adjustment*/
      VPOHDR02.PC3DMQTY = 0; /* LOCR quantity adjustment*/
      VPOHDR02.PC3LASDT = 0; /* LOCR amdendment date*/
      VPOHDR02.PC3LASTM = 0; /* LOCR amdendment time*/
      VPOHDR02.PC3LCNPC = 0; /* LOCR percent for NIL*/
      VPOHDR02.PC3LCPCT = 0; /* LOCR percent for DOM*/
      VPOHDR02.PC3NLPRC = 0; /* LOCR dollar amt for NIL*/
      VPOHDR02.PC3NLQTY = 0; /* LOCR quantity amt for NIL*/
      VPOHDR02.PC3LCDIN = PB0FW00.PC3LCDIN; /* LOCR detail ind*/
      VPOHDR02.PC3LCDSF = PB0FW00.PC3LCDSF; /* LOCR summary ind*/
      VPOHDR02.PC3POIDT = PB0FW00.PC3POIDT; /* PO number*/
      VPOHDR02.PC3NISFL = PB0FW00.PC3NISFL; /* Nissho sent flag*/
      VPOHDR02.PC3NISDT = PB0FW00.PC3NISDT; /* Nissho sent date*/
      VPOHDR02.PC3NISTM = PB0FW00.PC3NISTM; /* Nissho sent time*/
      PB0F630(); /* Update PO header*/
    end
  end

  if (PB0FW00.PB0FWITM == "Y") /* If items updated*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    PB0FW01.PC3PONBR = 0; /* P.O. Nbr*/
    PB0FW01.PB0FMETS = 0; /* Map display ETS*/
    PB0FW01.YACCD = " "; /* Map display audit comment*/
    PB0FW00.PB0FWETS = 0; /* Working storage ETS*/
    PB0FW00.PC6OETS = 0; /* Original ETS*/
    PB0FW00.PC3POIDT = 0; /* P.O. Id month range*/
    PB0FW00.PB0FWPOD = 0; /* Group level P.O. Id month range*/
    PCWREC.XXXMSGNO = 1; /* Update successful*/
    return;
  else
    if (VPOHDR02.YPUCD != "IN") /* IF NOT INCOMPLETE HDR STATUS*/
      PB0FW00.XXXPRCNM = "PB0F600"; /* Module identification*/
      PCWREC.XXXMSGNO = 276; /* No data for selection requested*/
      return;
    end
  end

end // end PB0F600


// Count colors & plans
Function PB0F610()
   /* ------------------------------------------------------------*/
   /* This process will count all colors and plans for the P.O.*/
   /* number entered on the screen*/
   /* ------------------------------------------------------------*/

  PB0FW00.PB0FWCT1 = 0; /* Init color count*/
  PB0FW00.PB0FWCT2 = 0; /* Init plan count*/
  set VPOITM05 empty; /* Init PO item record*/
  VPOITM05.XGPCD = "03"; /* GPC code*/
  VPOITM05.PO-REG-CD = "01"; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PB0FW01.PC3PONBR; /* PO number*/
  VPOITM05.YSMXDV = PB0FW00.YSMXDV; /* Division code*/
  VPOITM05.SY1STNBR = "*"; /* Wildcard style*/
  VPOITM05.SY2CLRID = "*"; /* Wildcard color*/
  VPOITM05.PC6PLAN = -1; /* Wildcard plan*/
  VPOITM05.PC6STAT = "*"; /* Wildcard status*/

  PCYREC.PCYFUNC = "T2"; /* Count colors*/
  PB0FS05(); /* Select count VPOITM05*/

  PB0FW00.PB0FWCT1 = PCYREC.PCYCOUNT; /* Color count*/
  PB0FM001.PB0FWCT1 = PCYREC.PCYCOUNT; /* Color count*/

  PCYREC.PCYFUNC = "T3"; /* Count plans*/
  PB0FS05(); /* Select count VPOITM05*/

  PB0FW00.PB0FWCT2 = PCYREC.PCYCOUNT; /* Plan count*/
  PB0FM001.PB0FWCT2 = PCYREC.PCYCOUNT; /* Plan count*/

  if (PB0FW00.PB0FWCT1 == 0 /* If color count = 0*/
   || PB0FW00.PB0FWCT2 == 0) /* If plan count = 0*/
    PB0FW00.XXXPRCNM = "PB0F610"; /* Module identification*/
    converseLib.validationFailed(276); /* Zero count not okay*/
    exit stack; /* Display message*/
  end

end // end PB0F610


// Check status for update type
Function PB0F620()
   /* ------------------------------------------------------------*/
   /* Determine the status of the item to change and update the*/
   /* items accordingly. If the item is cancelled, only udate the*/
   /* p.o. id if it has changed.*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "CX")
    if (PB0FW00.PB0FWPFL == "Y") /* P.O. Id change flag*/

      /* ------------------------------------------------------------*/
       /* Update cancelled item.*/
      /* ------------------------------------------------------------*/

      VPOITM05.PC3POIDT = PB0FW00.PC3POIDT; /* P.O. Id*/

      PB0FS06(); /* Update VPOITM05*/
      PB0FW00.PB0FWITM = "Y"; /* ===>Item update flag=yes*/

    end

  else

    move VPOITM05 to PB0FW02 withV60Compat; /* Save the old record*/

    VPOITM05.PC6OETS = PB0FW00.PC6OETS; /* Change OETS date*/
    VPOITM05.PC6ETSDT = PB0FW00.PC6OETS; /* New ETS date*/
    VPOITM05.PC3POIDT = PB0FW00.PC3POIDT; /* P.O. Id*/

    /* -------------------------------------------------------*/
     /* Update the item key fields*/
    /* -------------------------------------------------------*/

    if (VPOITM05.VPOITM05-GROUP != PB0FW02.VPOITM05-GROUP) /* item changes?*/
      PB0F621(); /* Key update*/
      PB0FW00.PB0FWITM = "Y"; /* ===>Item update flag=yes*/
    end
  end


end // end PB0F620


// Update the items
Function PB0F621()
   /* ------------------------------------------------------------*/
   /* See if an existing item can be merged to another based on*/
   /* the new key.*/
      /* Note, at this point the VPOITM05 is already loaded*/
      /* with the updated data*/
   /* ------------------------------------------------------------*/

  PB0FS07(); /* Select unique VPOITM05*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If new item already exists*/
    if (VPOITM05.PC6ITMNB != PB0FW02.PC6ITMNB) /* and not the same item*/
      PB0FS08(); /* Merge old/new item*/
      PB0FS17(); /* Cancel VPOITM05*/
    else /* P.O. id only thing changed*/
      VPOITM05.PC3POIDT = PB0FW00.PC3POIDT; /* Restore P.O. Id*/
      PB0FS18(); /* Create new item*/
      PB0FS17(); /* Cancel VPOITM05*/
    end
  else
    PB0FS18(); /* Create new item*/
    PB0FS17(); /* Cancel old VPOITM05*/

  end

end // end PB0F621


// Update p.o. header
Function PB0F630()
   /* ------------------------------------------------------------*/
   /* Update the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOHDR02" ("U ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PB0FW00.XXXPRCNM = "PB0F630"; /* Process nam*/
      converseLib.validationFailed(12); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0FW00.XXXPRCNM = "PB0F630"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0F630"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1LOC = "UPDATE P.O. HEADER ROW";
  PB0FW00.PB0FWKA1 = VPOHDR02.XGPCD; /* key 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOHDR02.PC3PONBR; /* key 1 - numeric*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PB0F630


// Select Unique VPOHDR02
Function PB0FS01()
   /* ------------------------------------------------------------*/
   /* Select unique PO number header row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0FW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOHDR02.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOHDR02.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS01


// Select set 'S2' VPOITM05
Function PB0FS02()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  set PCYREC empty;
  PCYREC.PCYFUNC = "S2";


  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS02


// Fetch next 'N2' VPOITM05
Function PB0FS03()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  set PCYREC empty;
  PCYREC.PCYFUNC = "N2";

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0FW00.PB0FWEOC = "Y"; /* Indicate  end of cursor*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - numeric*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS03


// Close set 'S2' VPOITM05
Function PB0FS04()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  set PCYREC empty;
  PCYREC.PCYFUNC = "C2";

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS04"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS04"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS04


// Select counts (T2,T3) VPOITM05
Function PB0FS05()
   /* ------------------------------------------------------------*/
   /* Select count for VPOITM05.*/

   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Null return*/
      PCYREC.PCYCOUNT = 0; /* Zero to count*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1- alpha*/
  PB0FW00.PB0FWKN2 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  PB0FW00.PB0FWKA2 = VPOITM05.YSMXDV; /* Key field 2 - alpha*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS05


// Update VPOITM05
Function PB0FS06()
   /* ------------------------------------------------------------*/
   /* Update row for VPOITM05.*/
   /* ------------------------------------------------------------*/

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  PCYREC.PCYFUNC = "UB"; /* Function is update*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS06"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  PB0FW00.PB0FWKN2 = VPOITM05.PC6ITMNB; /* Key field 2 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS06


// Select VPOITM05
Function PB0FS07()
   /* ------------------------------------------------------------*/
   /* Select unique row VPOITM05.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "SE"; /* Select unique*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS07


// Merge old/new item quantities
Function PB0FS08()
   /* ------------------------------------------------------------*/
   /* Get the old VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PB0FW02.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PB0FW02.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PB0FW02.PC6ITMNB; /* Item sequence number*/
  PB0FS09(); /* Obtain item size*/
  move VPOSIZ02 to PB0FW03 withV60Compat; /* Save old item size*/

   /* ------------------------------------------------------------*/
   /* Get the new VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  /* MOVE VPOITM05.PO-REG-CD TO VPOSIZ02.PO-REG-CD;/* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PB0FS09(); /* Obtain item size*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/

   /* ------------------------------------------------------------*/
   /* Load the audit record before values and*/
   /* add the size quantities of the old size to the new size.*/
   /* ------------------------------------------------------------*/
  PB0FW00.XXX1 = 1; /* Initialize index*/
  while (PB0FW00.XXX1 <= 40) /* While index <= 40*/
    VPOASZ02.PCIBFRN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    VPOASZ02.PCKBFRPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    if (PB0FW03.PC7ORDEQ[XXX1] != 0 /* If old item qty exists*/
     && VPOSIZ02.PC7ORDEQ[XXX1] == 0) /* and new item qty does not*/
      VPOSIZ02.FY4FOBPR[XXX1] = PB0FW03.FY4FOBPR[XXX1];
    end
    VPOASZ02.PCKAFTPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    VPOSIZ02.PC7ORDEQ[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1] +     PB0FW03.PC7ORDEQ[XXX1];
    VPOASZ02.PCIAFTN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    PB0FW00.XXX1 = PB0FW00.XXX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  PB0FS10(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update the item - VPOITM05.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE + PB0FW02.PC6TORDE;
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOITM05.PC6TADD = VPOITM05.PC6TADD + PB0FW02.PC6TORDE;
  VPOITM05.PC6MICHG = VPOITM05.PC6MICHG + PB0FW02.PC6MICHG;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  PB0FS06(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item audit - VPOAIT02.*/
   /* ------------------------------------------------------------*/
  PB0FS11(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOAIT02.YOACD = "59"; /* Audit type = qty chg*/
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  PB0FS12(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS;
  PB0FS16(); /* Item size audit*/

   /* ************************************************************/
   /* *     copy all special instructions for this item*/
   /* ************************************************************/

  set PCGREC empty; /* Initialize record*/

  PCGREC.XGPCD = VPOITM05.XGPCD; /* Gpc code*/
  PCGREC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. number*/
  PCGREC.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence nbr*/

  PB0FS21(); /* Select set of instructions*/

  PB0FW00.PB0FWSIF = "N"; /* Special instructions flag*/

  PB0FS22(); /* Fetch next instruction*/

  while (PB0FW00.PB0FWSIF == "N" /* While more instructions*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    PB0FW00.PCASINBR = PCGREC.PCASINBR; /* Save old seq. nbr for text*/

    set PCDREC empty; /* Initialize record*/

    PCDREC.XGPCD = PB0FW01.XGPCD; /* Gpc code*/
    PB0FS23(); /* Get next special instruction number*/

    PCGREC.PC6OETS = VPOITM05.PC6OETS; /* Oets date*/
    PCGREC.PC6ETSDT = VPOITM05.PC6ETSDT; /* Ets date*/
    PCGREC.PCASINBR = PCDREC.PCDSINBR; /* Sequence number*/
    PCGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    PCGREC.ZZZCHGCT = 0; /* Change count*/

    PB0FS24(); /* Add new special instruction row*/

     /* Add special instruction AUDIT row*/

    VPOAIT02.PCIBFRA = "SPECIAL INSTR"; /* Before image*/
    VPOAIT02.PCIAFTA = " "; /* After image*/
    VPOAIT02.PCIBFRN = 0; /* Before number*/
    VPOAIT02.PCIAFTN = PCGREC.PCASINBR; /* After number*/
    VPOAIT02.PCJNETQT = 0; /* Net change*/
    VPOAIT02.YOACD = "78"; /* Audit code*/
    PB0FS12(); /* Item audit*/

     /* Copy all special instr. text to new number*/

    set PCBREC empty; /* Initialize record*/

    PCBREC.XGPCD = PB0FW01.XGPCD; /* Gpc code*/
    PCBREC.PCASINBR = PB0FW00.PCASINBR; /* Sequence number*/

    PB0FS25(); /* Select Set VSITXT01*/

    PB0FW00.PB0FWITF = "N"; /* Special instr text flag*/
    PB0FS26(); /* Fetch VSITXT01*/

    while (PB0FW00.PB0FWITF == "N") /* While more text*/
      PCBREC.PCASINBR = PCGREC.PCASINBR; /* Sequence number*/
      PCGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
      PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      PCGREC.ZZZCHGCT = 0; /* Change count*/
      PB0FS27(); /* Add VSITXT01*/
      PB0FS26(); /* Fetch VSITXT01*/
    end

    PB0FS28(); /* Close VSITXT01*/

    PB0FS22(); /* Fetch next instruction*/

  end

  PB0FS29(); /* Close set special instructions*/

   /* ************************************************************/
   /* *     insert po item*/
   /* ************************************************************/

   /* PB0FS30                         ;         Insert item*/


end // end PB0FS08


// Select VPOSIZ02
Function PB0FS09()
   /* ------------------------------------------------------------*/
   /* Select unique VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ITEM SIZE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS09"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PB0FS09


// Update VPOSIZ02
Function PB0FS10()
   /* ------------------------------------------------------------*/
   /* Update VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ITEM SIZE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PB0FS10


// Select Max audit seq. nbr
Function PB0FS11()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/

   /* ------------------------------------------------------------*/
   /* Select max on sequence number for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "M1"; /* Function is max for seq #*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PCYREC.PCYCOUNT = VPOAIT02.PCJSEQNO; /* Sequence # max*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -305) /* No audit sequence # max*/
        PCYREC.PCYCOUNT = 0; /* Max = 0*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT MAX SEQUENCE #";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOAIT02.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOAIT02.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FW00.XXXPRCNM = "PB0FS11";
  exit stack;

end // end PB0FS11


// Insert VPOAIT02
Function PB0FS12()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID; /* Cust order nbr*/
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID; /* Nike order nbr*/
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN; /* Part char*/
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD; /* dest ctry*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP; /* PO type*/

  PB0FS13(); /* set o/a and c/m flags*/

  VPOAIT02.YACCD = PB0FW01.YACCD; /* Audit comment code*/

  if (PB0FW00.PB0FWCT1 > 1) /* If more than 1 color*/
    VPOAIT02.PCJGLOFL = "Y"; /* Global color change flag*/
  else
    VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
   /* ------------------------------------------------------------*/

  if (PB0FW00.PB0FWPFL == "Y") /* P.O. Id changed flag*/
    if (VPOAIT02.YOACD == "61") /* If cancel audit*/
      PB0FS14(); /* Set the "FROM" p.o. id l/c indicator*/
    else
      if (VPOAIT02.YOACD == "59" /* If merge audit*/
       || VPOAIT02.YOACD == "60") /* OR ADD AUDIT*/
        PB0FS15(); /* Set the "TO" p.o. id l/c indicator*/
      else
        if (VPOHDR02.PC3NISFL == "Y" /* P.O. sent to Nissho*/
         || VPOHDR02.PC3NISFL == "N") /* P.O. not sent to Nissho*/
          VPOAIT02.PCJAMEND = "5"; /* Offshore but not needed*/
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end
    end
  else /* P.O. Id not changed, Nissho doesn't*/
                                   /* care then*/
    if (VPOHDR02.PC3NISFL == "Y" /* P.O. sent to Nissho*/
     || VPOHDR02.PC3NISFL == "N") /* P.O. not sent to Nissho*/
      VPOAIT02.PCJAMEND = "5"; /* Offshore, but not needed*/
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end

  VPOAIT02.XDSCD = VPOITM05.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD; /* Scheduler code*/
  VPOAIT02.XPRCD = VPOITM05.XPRCD;

  if (VPOAIT02.YOACD != "87")
    XX0XS01(); /* GET THE DATE/TIME*/
    while (XX0XW01.XX0XWHMS == PB0FW00.XX0XWHMS)
      XX0XS01(); /* GET THE DATE/TIME*/
    end
  end


  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  PB0FW00.XX0XWHMS = XX0XW01.XX0XWHMS; /* Save new time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS12"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOAIT02.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOAIT02.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FW00.XXXPRCNM = "PB0FS12"; /* Module identification*/
  exit stack;

end // end PB0FS12


// Set o/a and c/m flags
Function PB0FS13()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/
      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end

    else /* ===> code not in table*/
      PB0FM001.XXXPRCNM = "PB0FS13"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/
      exit stack;
    end

  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";

  end

   /* **                                                        ***/
   /* ********************** End of pb0fs13 ***********************/
end // end PB0FS13


// Set the FROM p.o. id l/c amd.
Function PB0FS14()
   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header on the FROM p.o. id*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3NISFL == "Y") /* P.O. sent to Nissho*/
    VPOAIT02.PCJAMEND = "1"; /* Print l/c*/
  else
    if (VPOHDR02.PC3NISFL == "N") /* Not printed yet, no amnd needed*/
      VPOAIT02.PCJAMEND = "2";
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end
end // end PB0FS14


// Set the TO l/c amd.
Function PB0FS15()
   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header on the FROM p.o. id*/
   /* ------------------------------------------------------------*/

  if (PB0FW00.PC3NISFL == "Y") /* P.O. sent to Nissho*/
    VPOAIT02.PCJAMEND = "1"; /* Print l/c*/
  else
    if (PB0FW00.PC3NISFL == "N") /* Not printed yet, no amnd needed*/
      VPOAIT02.PCJAMEND = "2";
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end
end // end PB0FS15


// Insert VPOASZ02
Function PB0FS16()
   /* ------------------------------------------------------------*/
   /* Move values to size audit record.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO; /* Item audit sequence number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOASZ02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOASZ02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOASZ02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOASZ02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOASZ02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOASZ02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOASZ02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOASZ02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN; /* Sales order*/
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID; /* Sales order*/
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID; /* Sales order*/
  VPOASZ02.ZFC-CRCY-CD = " "; /* blank currency*/

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOASZ02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOASZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS16"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOASZ02.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOASZ02.PC3PONBR; /* Key field 1 - num*/
  PB0FW00.PB0FWKN2 = VPOASZ02.PCJSEQNO; /* Key field 2 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FW00.XXXPRCNM = "PB0FS16"; /* Module identification*/

  exit stack;

end // end PB0FS16


// Cancel old key item
Function PB0FS17()
  move PB0FW02 to VPOITM05 withV60Compat; /* Restore old item*/
   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PB0FS09(); /* Obtain item size*/

  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
   /* ------------------------------------------------------------*/
   /* Load the audit record before values.*/
   /* Zero out the on order quantities and audit after values.*/
   /* ------------------------------------------------------------*/
  PB0FW00.PB0FWIX1 = 1; /* Initialize index*/
  while (PB0FW00.PB0FWIX1 <= 40) /* While index <= 40*/

    VPOASZ02.PCIBFRN[PB0FWIX1] = VPOSIZ02.PC7ORDEQ[PB0FWIX1];
    VPOASZ02.PCKBFRPR[PB0FWIX1] = VPOSIZ02.FY4FOBPR[PB0FWIX1];
    VPOASZ02.PCKAFTPR[PB0FWIX1] = VPOSIZ02.FY4FOBPR[PB0FWIX1];
    VPOSIZ02.FY4FOBPR[PB0FWIX1] = 0;
    VPOSIZ02.PC7ORDEQ[PB0FWIX1] = 0;
    VPOASZ02.PCIAFTN[PB0FWIX1] = 0;
    VPOSIZ02.PC7FOBFL[PB0FWIX1] = "N";
    PB0FW00.PB0FWIX1 = PB0FW00.PB0FWIX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02*/
   /* ------------------------------------------------------------*/
  PB0FS10(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update item - VPOITM05*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE; /* Cancel qty*/
  VPOITM05.PC6TORDE = 0; /* On order qty*/
  VPOITM05.PC6MICHG = 0; /* Misc. chg's*/
  VPOAIT02.PCIAFTN = 0; /* After qty*/
  VPOITM05.PC3POIDT = PB0FW00.PC3POIDT; /* New P.O. Id*/
  VPOITM05.PC6STAT = "CX"; /* Cancel status*/
  VPOITM05.PC6CXNBR = 1; /* Cancel version number*/
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status date*/
  PB0FS06(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02*/
   /* ------------------------------------------------------------*/
  PB0FS11(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOASZ02.PC6OETS = PB0FW02.PC6OETS; /* Old oets date*/
  VPOASZ02.PC6ETSDT = PB0FW02.PC6ETSDT; /* Old ETS date*/
  PB0FS16(); /* Item size audit*/

   /* ------------------------------------------------------------*/
   /* Create PO item audits - VPOAIT02*/
   /* ------------------------------------------------------------*/
   /* Create item audit for cancel*/
   /* ------------------------------------------------------------*/
  VPOAIT02.YOACD = "61"; /* Audit type = cancel*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  VPOAIT02.PC6OETS = PB0FW02.PC6OETS; /* Old oets date*/
  VPOAIT02.PC6ETSDT = PB0FW02.PC6ETSDT; /* Old ETS date*/
  VPOAIT02.PC3POIDT = PB0FW02.PC3POIDT; /* Old P.O. Id*/
  PB0FS12(); /* Item audit*/

  VPOAIT02.PCJSEQNO = 0; /* Seq # for no size audit*/
  VPOAIT02.PCJNETQT = 0; /* Cancel quantity*/
   /* ------------------------------------------------------------*/
   /* Create item audit for ETS date*/
   /* ------------------------------------------------------------*/
  if (PB0FW02.PC6ETSDT != PB0FW00.PC6OETS) /* If ETS date changed*/
    VPOAIT02.YOACD = "65"; /* Audit type = ETS chg*/
    VPOAIT02.PC3POIDT = PB0FW02.PC3POIDT; /* Old P.O. Id*/
    VPOAIT02.PCIBFRN = PB0FW02.PC6ETSDT; /* Before*/
    VPOAIT02.PCIAFTN = PB0FW00.PC6OETS; /* After*/
    PB0FS12(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for Original ETS date*/
   /* ------------------------------------------------------------*/
  VPOAIT02.YOACD = "80"; /* Audit type = OETS chg*/
  VPOAIT02.PC3POIDT = PB0FW02.PC3POIDT; /* Old P.O. Id*/
  VPOAIT02.PCIBFRN = PB0FW02.PC6OETS; /* Before*/
  VPOAIT02.PCIAFTN = PB0FW00.PC6OETS; /* After*/
  PB0FS12(); /* Create item audit*/

   /* ------------------------------------------------------------*/
   /* Create item audit for PO ID changes*/
   /* ------------------------------------------------------------*/
  if (PB0FW00.PB0FWPFL == "Y") /* PO ID Changed*/
    VPOAIT02.YOACD = "86"; /* Audit type = PO ID chg*/
    VPOAIT02.PC3POIDT = PB0FW02.PC3POIDT; /* Old P.O. Id*/
    VPOAIT02.PCIBFRN = PB0FW02.PC3POIDT; /* Before nbr*/
    VPOAIT02.PCIAFTN = PB0FW00.PC3POIDT; /* After nbr*/
    VPOAIT02.PCIBFRA = VPOITM05.FY1FCTYC; /* Before alpha*/
    VPOAIT02.PCIAFTA = VPOITM05.FY1FCTYC; /* After alpha*/
    PB0FS12(); /* Create item audit*/

    VPOAIT02.YOACD = "87"; /* Audit type = PO transfers*/
    VPOAIT02.PCIBFRN = VPOITM05.PC3PONBR; /* P.O. nbr*/
    VPOAIT02.PCIAFTN = VPOITM05.PC3PONBR; /* P.O. nbr*/
    PB0FS12(); /* Create item audit*/
  end

end // end PB0FS17


// Create new key item
Function PB0FS18()
   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PB0FW02.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PB0FW02.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PB0FW02.PC6ITMNB; /* Item sequence number*/
  PB0FS09(); /* Obtain item size*/

   /* ------------------------------------------------------------*/
   /* Get the next item sequence number*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "M2"; /* Function = count seq#*/
  PB0FS19(); /* Select count item seq*/
  VPOITM05.PC6ITMNB = PCYREC.PCYCOUNT + 1; /* Seq # = count + 1*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Sequence number*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
  PB0FW00.PB0FWIX1 = 1; /* Initialize index*/
  while (PB0FW00.PB0FWIX1 <= 40) /* While index <= 40*/

    /* ------------------------------------------------------------*/
     /* Load the audit record before values.*/
    /* ------------------------------------------------------------*/
    VPOASZ02.PCIBFRN[PB0FWIX1] = 0;

    if (VPOSIZ02.PC7ORDEQ[PB0FWIX1] > 0)

      VPOASZ02.PCIAFTN[PB0FWIX1] = VPOSIZ02.PC7ORDEQ[PB0FWIX1];
      VPOASZ02.PCKBFRPR[PB0FWIX1] = VPOSIZ02.FY4FOBPR[PB0FWIX1];
      VPOASZ02.PCKAFTPR[PB0FWIX1] = VPOSIZ02.FY4FOBPR[PB0FWIX1];

    end /* ===> qty exist check*/

    PB0FW00.PB0FWIX1 = PB0FW00.PB0FWIX1 + 1; /* Increment index*/

  end /* ===> while more sizes*/

   /* ------------------------------------------------------------*/
   /* Create new PO item size*/
   /* ------------------------------------------------------------*/
  PB0FS20(); /* Insert item size*/

   /* ------------------------------------------------------------*/
   /* Create PO item audit*/
   /* ------------------------------------------------------------*/
  PB0FS11(); /* Audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOAIT02.YOACD = "60"; /* Audit type = size ADD*/
  VPOAIT02.PCIBFRN = 0; /* Before qty*/
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN; /* Net change*/
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT; /* P.O. Id*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS*/
  PB0FS12(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Create PO item size audit*/
   /* ------------------------------------------------------------*/
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS*/
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS; /* OETS*/
  PB0FS16(); /* Item size audit*/

   /* ************************************************************/
   /* *     copy all special instructions for this item*/
   /* ************************************************************/

  PCGREC.XGPCD = VPOITM05.XGPCD; /* Gpc code*/
  PCGREC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. number*/
  PCGREC.PC6ITMNB = PB0FW02.PC6ITMNB; /* Item sequence number*/

  PB0FS21(); /* Select set of instructions*/

  PB0FW00.PB0FWSIF = "N"; /* Special instructions flag*/

  PB0FS22(); /* Fetch next instruction*/

  while (PB0FW00.PB0FWSIF == "N" /* While more instructions*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    PB0FW00.PCASINBR = PCGREC.PCASINBR; /* Save old seq. nbr for text*/

    PCDREC.XGPCD = PB0FW01.XGPCD; /* Gpc code*/
    PB0FS23(); /* Get next special instruction number*/

    PCGREC.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
    PCGREC.PC6OETS = VPOITM05.PC6OETS; /* Oets date*/
    PCGREC.PC6ETSDT = VPOITM05.PC6ETSDT; /* Ets date*/
    PCGREC.PCASINBR = PCDREC.PCDSINBR; /* Sequence number*/
    PCGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    PCGREC.ZZZCHGCT = 0; /* Change count*/

    PB0FS24(); /* Add new special instruction row*/

     /* Add special instruction AUDIT row*/

    VPOAIT02.PCIBFRA = "SPECIAL INSTR"; /* Before image*/
    VPOAIT02.PCIAFTA = " "; /* After image*/
    VPOAIT02.PCIBFRN = 0; /* Before number*/
    VPOAIT02.PCIAFTN = PCGREC.PCASINBR; /* After number*/
    VPOAIT02.PCJNETQT = 0; /* Net change*/
    VPOAIT02.YOACD = "78"; /* Audit code*/
    PB0FS12(); /* Item audit*/

     /* Copy all special instr. text to new number*/

    PCBREC.XGPCD = PB0FW01.XGPCD; /* Gpc code*/
    PCBREC.PCASINBR = PB0FW00.PCASINBR; /* Sequence number*/

    PB0FS25(); /* Select Set VSITXT01*/

    PB0FW00.PB0FWITF = "N"; /* Special instr text flag*/
    PB0FS26(); /* Fetch VSITXT01*/

    while (PB0FW00.PB0FWITF == "N") /* While more text*/
      PCBREC.PCASINBR = PCGREC.PCASINBR; /* Sequence number*/
      PCGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
      PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      PCGREC.ZZZCHGCT = 0; /* Change count*/
      PB0FS27(); /* Add VSITXT01*/
      PB0FS26(); /* Fetch VSITXT01*/
    end

    PB0FS28(); /* Close VSITXT01*/

    PB0FS22(); /* Fetch next instruction*/

  end

  PB0FS29(); /* Close set special instructions*/

   /* ************************************************************/
   /* *     insert po item*/
   /* ************************************************************/

  PB0FS30(); /* Insert item*/


end // end PB0FS18


// Select item # count - VPOITM05
Function PB0FS19()
   /* ------------------------------------------------------------*/
   /* Select count for VPOITM05.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Null return*/
      PCYREC.PCYCOUNT = 0; /* Zero to count*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PB0FW00.XXXPRCNM = "PB0FS17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS17"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS19


// Select/Insert VPOSIZ02
Function PB0FS20()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOSIZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for VPOSIZ02.*/
    /* ------------------------------------------------------------*/
    VPOSIZ02.ZFC-CRCY-CD = " "; /* blank currency*/
    VPOSIZ02.PO-REG-CD = "01"; /* P.O. REGION CODE*/
    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

    try
      call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PB0FW00.XXXPRCNM = "PB0FS20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. SIZE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS20"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS20


// Select Set VPOISI01
Function PB0FS21()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("S2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS21"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FM001.XXXPRCNM = "PB0FS21"; /* Process name*/

  exit stack;

end // end PB0FS21


// Fetch VPOISI01
Function PB0FS22()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("N2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0FW00.PB0FWSIF = "Y"; /* End of cursor*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back any changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS22"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FM001.XXXPRCNM = "PB0FS22"; /* Process name*/

  exit stack;

end // end PB0FS22


// Get seq. nbr
Function PB0FS23()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback updates*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS23"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT INSTR. NBR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.PCDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();
   /* Clear output*/

  PB0FM001.XXXPRCNM = "PB0FS23"; /* Process name*/

  exit stack;

end // end PB0FS23


// Insert VPOISI01
Function PB0FS24()
   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("A ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback update*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS24"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0FM001.XXXPRCNM = "PB0FS24"; /* Process name*/

  exit stack;

end // end PB0FS24


// Select set VSITXT01
Function PB0FS25()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS25"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();

  PB0FM001.XXXPRCNM = "PB0FS25"; /* Process name*/

  exit stack;

end // end PB0FS25


// Fetch VSITXT01
Function PB0FS26()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0FW00.PB0FWITF = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS26"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();

  PB0FM001.XXXPRCNM = "PB0FS26"; /* Process name*/

  exit stack;

end // end PB0FS26


// Insert VSITXT01
Function PB0FS27()
   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0FS27"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();

  PB0FM001.XXXPRCNM = "PC0CS27"; /* Process name*/

  exit stack;

end // end PB0FS27


// Close set VSITXT01
Function PB0FS28()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0FS28"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();

    PB0FM001.XXXPRCNM = "PB0FS28"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack;

  end

end // end PB0FS28


// Close set VPOISI01
Function PB0FS29()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("C2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any changes*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0FS29"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    PB0FM001.XXXPRCNM = "PB0FS29"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack;

  end

end // end PB0FS29


// Insert VPOITM05
Function PB0FS30()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOITM05.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'S ' TO PCYREC.PCYFUNC     ; Function = select unique*/
   /* CALL VPOITM05 PCYREC,SQLCA,VPOITM05 (NOMAPS,NONCSP,REPLY;*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

   /* IF EZERT8 EQ '00000000'         ; Call successful*/
    /* AND SQLCA.SQLCODE EQ 100      ; Row not found*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  VPOITM05.PO-REG-CD = "01"; /* P.O. REGION CODE*/
  VPOITM05.XIB-IBANK-CD = " "; /* default to spaces*/
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  PCYREC.PCYFUNC = "A "; /* Function = insert*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PB0FW00.XXXPRCNM = "PB0FS30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS30"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  PB0FW00.PB0FWKA2 = VPOITM05.PC4ORTYP; /* Key field 2 - alpha*/
  PB0FW00.PB0FWKA3 = VPOITM05.YSMXDV; /* Key field 3 - alpha*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS30


// Select COUNT(*) FROM VPOITM05
Function PB0FS31()
   /* ------------------------------------------------------------*/
   /* Select COUNT(*) FROM VPOITM05 TABLE*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0FW00.XXXPRCNM = "PB0FS31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO COUNT(*)DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0FS31"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PB0FW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0FW00.PB0FWKA1 = VPOITM05.XGPCD; /* Key field 1 - alpha*/
  PB0FW00.PB0FWKN1 = VPOITM05.PC3PONBR; /* Key field 1 - num*/
  TA1REC.TA1TBLKE = PB0FW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0FS31


//*** RECORD=PB0FW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PB0FW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 PCWMAP PCWMAP ; 
  10 TA2GRBMM TA2GRBMM ; 
  10 PB0FWEOC PB0FWEOC ; 
  10 PB0FWCFL PB0FWCFL ; 
  10 PB0FWPFL PB0FWPFL ; 
  10 PB0FWSIF PB0FWSIF ; 
  10 PB0FWITF PB0FWITF ; 
  10 XXX1 XXX1 ; 
  10 YSMXDV YSMXDV ; 
  10 PB0FWIX1 PB0FWIX1 ; 
  10 PB0FWITM PB0FWITM ; 
  10 PB0FWNUM PB0FWNUM ; 
    15 PB0FWNM1 PB0FWNM1 ; 
    15 PB0FWNM2 PB0FWNM2 ; 
  10 PB0FWPOD PB0FWPOD ; 
    15 PB0FWCC PB0FWCC ; 
    15 PB0FWYY PB0FWYY ; 
    15 PB0FWM1 PB0FWM1 ; 
    15 PB0FWM2 PB0FWM2 ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC3NISFL PC3NISFL ; 
  10 PC3NISDT PC3NISDT ; 
  10 PC3NISTM PC3NISTM ; 
  10 PC3LCDIN PC3LCDIN ; 
  10 PC3LCDSF PC3LCDSF ; 
  10 PC6PLAN PC6PLAN ; 
  10 PB0FWCT1 PB0FWCT1 ; 
  10 PB0FWCT2 PB0FWCT2 ; 
  10 PC6OETS PC6OETS ; 
  10 PCASINBR PCASINBR ; 
  10 PB0FWETS PB0FWETS ; 
    15 PB0FWCEN PB0FWCEN ; 
    15 PB0FWYER PB0FWYER ; 
    15 PB0FWMON PB0FWMON ; 
    15 PB0FWDAY PB0FWDAY ; 
  10 XX0XWHMS XX0XWHMS ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PB0FWKA1 PB0FWKA1 ; 
    15 PB0FWKN1 PB0FWKN1 ; 
    15 * char(1) ; 
    15 PB0FWKA2 PB0FWKA2 ; 
    15 PB0FWKN2 PB0FWKN2 ; 
    15 * char(1) ; 
    15 PB0FWKA3 PB0FWKA3 ; 
    15 PB0FWKN3 PB0FWKN3 ; 
    15 * char(8) ; 
end // end PB0FW00


//*** RECORD=PB0FW01 ****
// ---------------------------
// PB0FM001 Map Working Storage
// ---------------------------
// ***********************
Record PB0FW01 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PB0FMETS PB0FMETS ; 
  10 YACCD YACCD ; 
end // end PB0FW01


//*** RECORD=PB0FW02 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0OW03       (---> Mirrors PC6REC )
// 
// This record is used to hold the old item being changed.
// 
// ***********************
Record PB0FW02 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0FW02


//*** RECORD=PB0FW03 ****
// ******* COPY OF PRODUCTION ORDER DESTINATION SIZE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/28/91   GAMEN    New record.
// ***********************
Record PB0FW03 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0FW03


//*** RECORD=PB0FW04 ****
// ******* COPY OF PRODUCTION ORDER HEADER TABLE **************
// 
// DB2 TABLE VIEW:      DPRODC.VPOHDR01
// 
// COPYLIB MEMBER:      DCL00573
// 
// I/O MODULE:          IO3270
// 
// KEY TO DB2 TABLE:    XGPCD,
//                      PC3PONBR
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 03/20/91   GAMEN    New record.
// ***********************
Record PB0FW04 type basicRecord
  5 VPOHDR02-GROUP VPOHDR02-GROUP ; 
    10 VPOHDR02-KEY VPOHDR02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 TSEOXCC TSEOXCC ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 PC3BUYMO PC3BUYMO ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XSECD XSECD ; 
    10 PCFSEYR PCFSEYR ; 
    10 YPUCD YPUCD ; 
    10 PC3STADT PC3STADT ; 
    10 PC3ATTEN PC3ATTEN ; 
    10 PC3MAILD PC3MAILD ; 
    10 PC3ACKDT PC3ACKDT ; 
    10 PC3CRDT PC3CRDT ; 
    10 PC3ENTBY PC3ENTBY ; 
    10 PC3ORDBY PC3ORDBY ; 
    10 PC3PRTIN PC3PRTIN ; 
    10 PC3PRTDT PC3PRTDT ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 PC3COMP PC3COMP ; 
    10 PC3SHVIA PC3SHVIA ; 
    10 PC3FOBLC PC3FOBLC ; 
    10 PC3RCRFL PC3RCRFL ; 
    10 PC3REQNO PC3REQNO ; 
    10 PC3REQDP PC3REQDP ; 
    10 YOHCD YOHCD ; 
    10 PC3NISFL PC3NISFL ; 
    10 PC3NISDT PC3NISDT ; 
    10 PC3NISTM PC3NISTM ; 
    10 PC3CMPNT PC3CMPNT ; 
    10 PC3DMPRC PC3DMPRC ; 
    10 PC3NLPRC PC3NLPRC ; 
    10 PC3DMQTY PC3DMQTY ; 
    10 PC3NLQTY PC3NLQTY ; 
    10 PC3LCPCT PC3LCPCT ; 
    10 PC3LCNPC PC3LCNPC ; 
    10 PC3LCDSF PC3LCDSF ; 
    10 PC3LCDIN PC3LCDIN ; 
    10 PC3LASDT PC3LASDT ; 
    10 PC3LASTM PC3LASTM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0FW04


// Original ETS date (mmddyy)
DataItem PB0FMETS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// PO ID century
DataItem PB0FWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ETS century
DataItem PB0FWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Confirm flag
DataItem PB0FWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Count 1
DataItem PB0FWCT1 num(4)  {
  upperCase = yes, currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Count 2
DataItem PB0FWCT2 num(4)  {
  upperCase = yes, currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ETS day
DataItem PB0FWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// End of cursor flag
DataItem PB0FWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Group level oets
DataItem PB0FWETS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Special Instr. text EOC flag
DataItem PB0FWITF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Items updated flag
DataItem PB0FWITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Index
DataItem PB0FWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Key field one - alpha
DataItem PB0FWKA1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Key field two - alpha
DataItem PB0FWKA2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Key field three - alpha
DataItem PB0FWKA3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Key field one - numeric
DataItem PB0FWKN1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Key field two - numeric
DataItem PB0FWKN2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Key field three - numeric
DataItem PB0FWKN3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// PO ID buy month
DataItem PB0FWM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// PO ID delivery month
DataItem PB0FWM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// ETS month
DataItem PB0FWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// numeric byte 1 as char
DataItem PB0FWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// numeric byte 2 as char
DataItem PB0FWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Numeric redefine as char
DataItem PB0FWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// P.O. Id change flag
DataItem PB0FWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// PO ID reformatted
DataItem PB0FWPOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Special Instructions EOC flag
DataItem PB0FWSIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ETS year
DataItem PB0FWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// PO ID year
DataItem PB0FWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


