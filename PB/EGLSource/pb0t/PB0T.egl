package pb0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PB0T ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO SUBMIT THE ONTIME DELIVERY
// *   BRIDGE TO MAPPER JCL.
// *
// *   THE USER  WILL ENTER THE BUY SEASON AND BUY YEAR.
// *
// *   THE USER WILL HIT THE ENTER KEY TO SUBMIT THE JOB.
// *
// *   DATE       USERID           COMMENTS
// *  _______    ________         ________________________
// * 12/31/96    KLEE             NEW APPLICATION
// * 11/15/97    riglli           Y2K MODIFICATIONS MADE TO:
// *                              PB0TW01: Add ccyy w/s item.
// *                              PB0T001: Change yy calc to
// *                                       ccyy.
// *                              PB0T200: Change yy calc to
// *                                       ccyy.
// ************************************************************
// *********************
Program PB0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PB0TW01 PB0TW01; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PB0TT01 {deleteAfterUse = yes}; // table
  use PB0TT11 {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use PB0TT03 {deleteAfterUse = yes}; // table
  use PB0TM.PB0TM001,  // forms
      PB0TM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/

    set PB0TW01 empty; /* Initialize working storage*/
    set PC3REC empty; /* Initialize*/
    set PC4REC empty; /* Initialize*/
    set PG2REC empty; /* Initialize*/
    set PCYREC empty; /* Initialize*/
    set FY1REC empty; /* Initialize*/
    set PCFREC empty; /* Initialize*/

    set ERRSQLCA empty; /* Initialize*/
    set SQLCA empty; /* Initialize*/

    set TA1REC empty; /* Initialize*/
    set TA2REC empty; /* Initialize date record*/
    set XCTHREC empty; /* Initialize theater of ops record*/
    set TA6REC empty; /* Initialize Jcl record*/
    set TAEREC empty; /* Initialize*/

    set PB0TM001 initial; /* Initialize map*/

    set XX0XW01 empty; /* Initialize*/

    PB0T001: PB0T001();
     /* no flow*/
    PB0T002: PB0T002();
    goto PB0T002;
  end // end main
end // end PB0T

// GET CURRENT DATE
Function PB0T001()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PB0TW01.PB0TWCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0D"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0TM001.XXXPRCNM = "PB0T001"; /* Process name*/

    end
  end

   /* ----------------------------------------------------------*/
   /* set default season code*/
   /* ----------------------------------------------------------*/

  if (PB0TWMMM == 11
   || PB0TWMMM == 12)
    PB0TW01.PB0TWSES = "F";
    /* ------------------------ y2k out -------------------*/
    /* PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2 + 1;*/
    /* ------------------------ y2k out -------------------*/
    /* ------------------------ y2k in --------------------*/
    PB0TW01.PB0TW-CALC-CCYY = PB0TW01.PB0TW-CUR-CCYY + 1;
    PB0TW01.PB0TWSEY = PB0TW-CALC-Y2; /* ------------------------ y2k in --------------------*/
  else
    if (PB0TWMMM == 05
     || PB0TWMMM == 06
     || PB0TWMMM == 07
     || PB0TWMMM == 08
     || PB0TWMMM == 09
     || PB0TWMMM == 10)
      PB0TW01.PB0TWSES = "S";
      /* ------------------------ y2k out -------------------*/
      /* PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2 + 1;*/
      /* ------------------------ y2k out -------------------*/
      /* ------------------------ y2k in --------------------*/
      PB0TW01.PB0TW-CALC-CCYY = PB0TW01.PB0TW-CUR-CCYY + 1;
      PB0TW01.PB0TWSEY = PB0TW-CALC-Y2; /* ------------------------ y2k in --------------------*/
    else
      if (PB0TWMMM == 01
       || PB0TWMMM == 02
       || PB0TWMMM == 03
       || PB0TWMMM == 04)
        PB0TW01.PB0TWSES = "F";
        PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2;
      end
    end
  end

  PB0TM001.PCFSECD = PB0TW01.PB0T-SESN-YR-CD; /* default sesn-cd*/

   /* ----------------------------------------------------------*/
   /* set other default fields*/
   /* ----------------------------------------------------------*/

  PB0TW01.XGPCD = "03"; /* default gpc-cd*/

end // end PB0T001

// MAIN PROCESS TO DISPLAY MAP
Function PB0T002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "03") /* Apparel*/

    PB0T003(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* IF FOR SOME REASON THE USER IN NOT AUTHORIZED TO GET INTO*/
     /* THIS PROGRAM AND IS NO AUTHORIZED TO GET TO THE PC0A MENU*/
     /* THE USER WILL BE KICKED OUT TO THE MAIN MENU. THIS WILL*/
     /* ALLOW THE PROGRAM TO TERMINATE AND NOT RESULT IN AN*/
     /* INFINITE LOOP.*/
    /* ------------------------------------------------------------*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end


end // end PB0T002

// PROGRAM PROCESS CONTROL
Function PB0T003()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1)     NOT USED      (OBTAIN DATA TO DISPLAY).*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process the entered data.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PB0T100(); /* Format and display the map*/

  PB0T200(); /* Check attention identifier*/

  PB0T300(); /* Reset fields to normal intensity*/

  PB0T400(); /* Verify the entered data*/

  PB0T500(); /* Process the entered data*/


end // end PB0T003

// DISPLAY SELECT MAP
Function PB0T100()


  if (converseVar.validationMsgNum == 0)

      /* NEXT SENTENCE*/

  else

    if (converseVar.validationMsgNum == 190
     && COMMAREA.CAMSG > " ") /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PB0TM001.XXXPRCNM = "PB0T100"; /* PROCESS NAME*/
      PB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PB0TM001 alarm; /* Sound alarm*/

  end

  PB0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0TW01.XGPCD = "03";

   /* PB0TT07 ?  FIND CURRENT SEASON AND DEFAULT SCREEN SESN-CD*/

  converse PB0TM001 ;


end // end PB0T100

// CHECK ATTENTION IDENTIFIERS
Function PB0T200()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set PB0TM001 initial; /* Clear the map fields*/
    if (PB0TWMMM == 11
     || PB0TWMMM == 12)
      PB0TW01.PB0TWSES = "F";
      /* ------------------------ y2k out -------------------*/
      /* PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2 + 1;*/
      /* ------------------------ y2k out -------------------*/
      /* ------------------------ y2k in --------------------*/
      PB0TW01.PB0TW-CALC-CCYY = PB0TW01.PB0TW-CUR-CCYY + 1;
      PB0TW01.PB0TWSEY = PB0TW-CALC-Y2; /* ------------------------ y2k in --------------------*/
    else
      if (PB0TWMMM == 05
       || PB0TWMMM == 06
       || PB0TWMMM == 07
       || PB0TWMMM == 08
       || PB0TWMMM == 09
       || PB0TWMMM == 10)
        PB0TW01.PB0TWSES = "S";
        /* ------------------------ y2k out -------------------*/
        /* PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2 + 1;*/
        /* ------------------------ y2k out -------------------*/
        /* ------------------------ y2k in --------------------*/
        PB0TW01.PB0TW-CALC-CCYY = PB0TW01.PB0TW-CUR-CCYY + 1;
        PB0TW01.PB0TWSEY = PB0TW-CALC-Y2; /* ------------------------ y2k in --------------------*/
      else
        if (PB0TWMMM == 01
         || PB0TWMMM == 02
         || PB0TWMMM == 03
         || PB0TWMMM == 04)
          PB0TW01.PB0TWSES = "F";
          PB0TW01.PB0TWSEY = PB0TW01.PB0TWY2;
        end
      end
    end

    PB0TM001.PCFSECD = PB0TW01.PB0T-SESN-YR-CD; /* default sesn-cd*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0TM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0TM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0TM001.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0TM001.XXXPRCNM = "PB0T200"; /* Process name*/
    end

    set PB0TM001.CATOAP cursor, bold; /* Highlight*/
    PB0TM001.XXXPRCNM = "PB0T200"; /* Process name*/
    return; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3  was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0X"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PB0TM001.XXXPRCNM = "PB0T200"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0TM001.XXXPRCNM = "PB0T200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0T200

// RESET HIGHLIGHTED FIELDS
Function PB0T300()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PB0TM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0TM001.CAITEM initialAttributes; /* Commarea application data*/

  set PB0TM001.PCFSECD initialAttributes; /* po-id season code*/

end // end PB0T300

// PROCESS THE ENTERED DATA
Function PB0T400()

   /* ------------------------------------------------------------*/
   /* First check to see if a fast path was requested.*/
   /* ------------------------------------------------------------*/

  if (PB0TM001.CAITEM > " ") /* Application data was entered*/

    set PB0TM001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0TM001.XXXPRCNM = "PB0T400"; /* Process name*/
    return;

  end

  PB0TW01.PB0TWERR = "N"; /* clear out edit error flag*/
   /* ------------------------------------------------------------*/
   /* validate 'short' season/year code*/
   /* ------------------------------------------------------------*/

  if (PB0TM001.PCFSECD != "  ")

    PB0TW01.PB0TWXSA = PB0TM001.PCFSECD; /* move sesn cd to wk area*/

    PB0TW01.PB0T-SESN-YR-CD = "    ";
    PB0TW01.PBWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
    while (PB0TW01.PBWIDX5 != 9999
     && PB0TW01.PB0T-SESN-YR-CD != "    ")
      if (YSNTBL.XSNABRV[PBWIDX5] == PB0TW01.PB0TWXSA
       && YSNTBL.XGPCD[PBWIDX5] == "03"
       && YSNTBL.XDR-PROD-REG-CD[PBWIDX5] == "01")

        PB0TW01.PB0T-SESN-YR-CD = PB0TM001.PCFSECD;
      else
        if (YSNTBL.XGPCD[PBWIDX5] != "99")
          PB0TW01.PBWIDX5 = PB0TW01.PBWIDX5 + 1;
        else
          PB0TW01.PBWIDX5 = 9999; /* END OF TABLE*/
        end
      end
    end
            /* (season cd/yr combination invalid)*/
    if (PB0TW01.PBWIDX5 == 9999) /* test for missing or invalid*/
      set PB0TM001.PCFSECD cursor, bold; /* Highlight*/
      PB0TW01.PB0TWERR = "Y";
      converseLib.validationFailed(129); /* Indicate missing or invalid*/
      PB0TM001.XXXPRCNM = "PB0T400";
    end
  end

   /* ------------------------------------------------------------*/
   /* set program switch*/
   /* ------------------------------------------------------------*/

  PB0TW01.PB0TWPGF = "Y";

   /* ------------------------------------------------------------*/
   /* If Pf9 was pressed dont display the message*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   && PB0TW01.PB0TWERR == "N") /* no edit errors indicated*/
    return;
  end


  if (PB0TW01.PB0TWERR == "N") /* no edit errors indicated*/
    PB0TM001.VAGen_EZEMSG = "PRESS PF9 TO SUBMIT THIS JOB";
  else
    PB0TM001.VAGen_EZEMSG = "                            ";
  end

end // end PB0T400

// PROCESS THE VALID DATA
Function PB0T500()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9 /* PF9 not pressed*/
   || PB0TW01.PB0TWERR == "Y"      /* we have an edit error*/
   || converseVar.validationMsgNum != 0) /* we have a message*/

    return; /* return to top of job*/

  end

   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    PB0TM001.XXXPRCNM = "PB0T500"; /* module identification*/
    converseLib.validationFailed(8);
    exit stack;
  else
    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
      PB0T510(); /* format production jcl*/
    else
      PB0T511(); /* format development jcl*/
    end
  end

end // end PB0T500

// PROCESS THE prod jcl
Function PB0T510()
   /* ------------------------------------------------------------*/
   /* CREATE THE PRODUCTION JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0TW01.PB0TWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0TW01.PB0TWLIX > 0) /* Until end of table*/

    if (PB0TT01.TARTYPE[PB0TWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0TW01.PB0TWJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0TT01.TARJCL[PB0TWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0TT01.TARTYPE[PB0TWLIX]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0TT01.TARJCL[PB0TWLIX] == "/*EOF") /* End of table*/

      PB0TW01.PB0TWLIX = 0; /* Indicate end of table*/

    else

      PB0TW01.PB0TWLIX = PB0TW01.PB0TWLIX + 1; /* Increment table index*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0TS02(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0TM001.XXXPRCNM = "PB0T510"; /* Process name*/
    PB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
    PB0TM001.VAGen_EZEMSG = " "; /* blank out scr msg to sbmt job*/

  else

    PB0TM001.XXXPRCNM = "PB0T510"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end

end // end PB0T510

// PROCESS THE DEVELOPMENT JCL
Function PB0T511()
   /* ------------------------------------------------------------*/
   /* CREATE THE DEVELOPMENT JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0TW01.PB0TWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0TW01.PB0TWLIX > 0) /* Until end of table*/

    if (PB0TT11.TARTYPE[PB0TWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0TW01.PB0TWJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0TT11.TARJCL[PB0TWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0TT11.TARTYPE[PB0TWLIX]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0TT11.TARJCL[PB0TWLIX] == "/*EOF") /* End of table*/

      PB0TW01.PB0TWLIX = 0; /* Indicate end of table*/

    else

      PB0TW01.PB0TWLIX = PB0TW01.PB0TWLIX + 1; /* Increment table index*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0TS02(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0TM001.XXXPRCNM = "PB0T510"; /* Process name*/
    PB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
    PB0TM001.VAGen_EZEMSG = " "; /* blank out scr msg to sbmt job*/

  else

    PB0TM001.XXXPRCNM = "PB0T510"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end

end // end PB0T511

// SUBMIT JCL TO INTERNAL READER
Function PB0TS02()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PB0TM001.XXXPRCNM = "PC0DS96"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PB0TM001.XXXPRCNM = "PC0DS96"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0TM001.XXXPRCNM = "PC0DS96"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PB0TS02

//*** RECORD=PB0TW01 ****
// ************************************************************
// *
// *     WORKING STORAGE FOR PB0G
// *
// *
// *   DATE             USERID        COMMENTS
// * ________         __________     ________________________
// * 09/20/89          gwitzi         new record
// *
// ************************************************************
// ***********************
Record PB0TW01 type basicRecord
  10 PB0TWLIX PB0TWLIX ; 
  10 PB0TWERR PB0TWERR ; 
  10 PB0TWCDT PB0TWCDT ; 
    15 PB0TW-CUR-CCYY PB0TW-CUR-CCYY ; 
      20 PB0TWCCC PB0TWCCC ; 
      20 PB0TWYYY PB0TWYYY ; 
        25 PB0TWY1 PB0TWY1 ; 
        25 PB0TWY2 PB0TWY2 ; 
    15 PB0TWMMM PB0TWMMM ; 
    15 PB0TWDDD PB0TWDDD ; 
  10 PB0TWJCL PB0TWJCL ; 
    15 PBWIDX5 PBWIDX5 ; 
    15 PB0TWXSA PB0TWXSA ; 
    15 XGPCD XGPCD ; 
    15 PB0T-SESN-YR-CD PB0T-SESN-YR-CD ; 
    15 PB0TMFDT PB0TMFDT ; 
    15 PB0TWSES PB0TWSES ; 
    15 PB0TWSEY PB0TWSEY ; 
    15 PB0TMTDT PB0TMTDT ; 
    15 PB0TWABS PB0TWABS ; 
    15 PB0TMPTF PB0TMPTF ; 
    15 PB0TWPGF PB0TWPGF ; 
    15 * char(32) ; 
  10 PB0TWEOT PB0TWEOT ; 
  10 PB0TWIDX PB0TWIDX ; 
  10 PB0TW-CALC-CCYY PB0TW-CALC-CCYY ; 
    15 PB0TW-CALC-CC PB0TW-CALC-CC ; 
    15 PB0TW-CALC-YY PB0TW-CALC-YY ; 
      20 PB0TW-CALC-Y1 PB0TW-CALC-Y1 ; 
      20 PB0TW-CALC-Y2 PB0TW-CALC-Y2 ; 
end // end PB0TW01

// PC_PO_ID_SESN_CD
DataItem PB0T-SESN-YR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM DATE
DataItem PB0TMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PRINT FLAG LASER/LOCAL
DataItem PB0TMPTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO DATE
DataItem PB0TMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY
DataItem PB0TW-CALC-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0TW-CALC-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0TW-CALC-Y1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0TW-CALC-Y2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem PB0TW-CALC-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0TW-CUR-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// APPAREL BUY DATA SWITCH
DataItem PB0TWABS char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY
DataItem PB0TWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT DATE
DataItem PB0TWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DAY
DataItem PB0TWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OVER DATE
DataItem PB0TWEOT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EDIT ERROR FLAG
DataItem PB0TWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL TABLE INDEX
DataItem PB0TWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL LINE
DataItem PB0TWJCL char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line indexs
DataItem PB0TWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PB0TWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program flags
DataItem PB0TWPGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NO IDEA
DataItem PB0TWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YEAR
DataItem PB0TWSEY num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SS
DataItem PB0TWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK YEAR
DataItem PB0TWY1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK YEAR
DataItem PB0TWY2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem PB0TWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PBWIDX5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

