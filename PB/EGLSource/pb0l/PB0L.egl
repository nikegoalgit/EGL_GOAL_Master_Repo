package pb0l;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PB0L ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO submit the program that prints
// *   the bar-code box-end labels for i.e. (Footware)
// *
// *   THE USER WILL ENTER A P.O. ID DATE(THE FIRST SIX DIGITS)
// *   AND WILL THEN BE ABLE TO SPECIFY EITHER ALL FACTORIES
// *   OR ONE FACTORY, IF ALL FACTORIES THE USER THEN WILL HAVE
// *   THE OPTION OF ENTERING A COUNTRY CODE TO OBTAIN A REPORT
// *   FOR ALL FACTORIES FOR THAT COUNTRY.  IF A SINGLE FACTORY
// *   IS SELECTED FOR THE FIRST TIME FOR A SPECIFIC P.O. ID
// *   DATE THE USER CAN ONLY ENTER SINGLE FACTORIES UNTIL THEY
// *   CHANGE THE P.O. ID DATE OR REQUEST THE PRINTER ROUTINE
// *   BY HITTING THE PF9 KEY. IF ALL FACTORIES IS SELECTED
// *   THE USER CAN ENTER A COUNTRY AND THEY WILL GET ALL THE
// *   FACTORIES FOR THE COUNTRY ENTERED. BY LEAVING THE
// *   COUNTRY FIELD BLANK THE USER WILL GET A REPORT(S) FOR
// *   ALL FACTORIES AND ALL COUNTRIES.
// *
// *   AT THE PRESENT TIME 7-24-92 THE USER WILL BE ABLE TO
// *   ENTER UP TO 10 PARMS.
// *
// ************************************************************
// *   DATE        USERID             COMMENTS
// * ________    __________          ______________________
// * 07/18/92    lsutto              new application
// * 07/24/92    lsutto              (not installed yet BUT:)
// *                                 removed pop-up remote
// *                                 select screen (pb0ls03)
// *                                 set switch to s (not y)
// *                                 default to xerox printer
// * 12/29/93    gamen               add theater of ops code
// * 10/30/97    rgilli              Y2K MODIFICATIONS MADE TO:
// *                                 PB0LW01: Add ccyy items
// *                                 PB0L520: Add century
// *                                          windowing. Change
// *                                          yy calculation to
// *                                          ccyy calculation,
// *                                          chg yy compare to
// *                                          ccyy.
// ************************************************************
// *********************
Program PB0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PB0LW01 PB0LW01; // record
  PB0LW02 PB0LW02; // record
  PB0LW03 PB0LW03; // record
  PB0LW04 PB0LW04; // record
  PCWREC PCWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PB0LT01; // table
  use PB0LT11; // table
  use PB0LM.PB0LM001,  // forms
      PB0LM.TA0PM001, 
      PB0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE THE RECORDS, MAPS, AND FIELDS*/
     /* ------------------------------------------------------------*/

    set FY1REC empty; /* CLEAR FACTORY RECORD*/
    set PG2REC empty; /* CLEAR STYLE RECORD*/
    set PB0LW01 empty; /* Working storage*/
    set PB0LW02 empty; /* Working storage  JCL*/
    set PB0LW03 empty; /* Working storage Screen parm.*/
    set PB0LW04 empty; /* Working storage Parm. table*/

    set ERRSQLCA empty;
    set SQLCA empty;
    set TA1REC empty;
    set TA2REC empty;
    set XCTHREC empty;
    set TA6REC empty;
    set TAEREC empty;

    set PB0LM001 initial;
    set XX0XM001 initial;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PB0LM001.FY1FCTYC = "ALL"; /* Initalize factory*/

    PB0LW01.PB0LWBRI = 0; /* Rpt. index*/
    PB0LW01.PB0LWMXB = 60; /* Rpt. max. number*/

     /* Will change later. For testing 10 prams. will be enough*/
     /* Will change later. For testing 10 prams. will be enough*/

    PB0LW01.PB0LWMXD = 10; /* Max. number for parms.*/


    PB0L000: PB0L000();
     /* no flow*/
    PB0L050: PB0L050();
    goto PB0L050;
  end // end main
end // end PB0L

// Special initialization
Function PB0L000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PB0LW01.PB0LWCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0L"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0LM001.XXXPRCNM = "PB0L000"; /* Process name*/

    end
  end


end // end PB0L000

// MAIN PROCESS TO DISPLAY MAP
Function PB0L050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[2] == "Y" /* User can enter*/
   && COMMAREA.XGPCD == "02")   /* only footwear is allowed*/

    PB0L080(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0X"; /* To application*/
    XSEXIT(); /* Exit to another application*/
  end



   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PB0LM001.XXXPRCNM = "PB0L050"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

end // end PB0L050

// PROGRAM PROCESS CONTROL
Function PB0L080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PB0L200(); /* Format and display the map*/

  PB0L300(); /* Check attention identifier*/

  PB0L400(); /* Reset fields to normal intensity*/

  PB0L500(); /* Verify the entered data*/

  PB0L600(); /* Process the entered data*/


end // end PB0L080

// DISPLAY MAP
Function PB0L200()

   /* ------------------------------------------------------------*/
   /* If no hard errors to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No information message*/
   || converseVar.validationMsgNum == 253) /* Parms. added*/

    if (PB0LW01.PB0LWBRI == 0) /* Array index greater than nothing*/
      set PB0LM001.PB0LWMYY cursor; /* POID year*/
    else
      set PB0LM001.FY1FCTYC cursor; /* Factory*/
    end

  else


    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PB0LM001.XXXPRCNM = "PB0L200"; /* PROCESS NAME*/
      PB0LM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PB0LM001 alarm; /* Indicate sound alarm*/

  end


  PB0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse PB0LM001 ;

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PB0L210(); /* POP-UP window*/
  end

end // end PB0L200

// PERFORM POP UP WINDOW ROUTINE
Function PB0L210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PB0LM001.XCTCD == "?" /* if any ?*/
   || PB0LM001.XDMCD == "?")

    /* ------------------------------------------------------------*/
           /* factory country table window*/
    /* ------------------------------------------------------------*/

    if (PB0LM001.XCTCD == "?") /* if ? in country code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               COUNTRY CODES"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform Country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the Season     **/
       /* *  table code to the map.                               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0LM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        set PB0LM001.XCTCD cursor, modified;
      else
        PB0LM001.XCTCD = PB0LW01.XCTCD; /* clear fields*/
        set PB0LM001.XCTCD cursor, modified;
      end
    end

    /* ------------------------------------------------------------*/
           /* dimension code table window*/
    /* ------------------------------------------------------------*/

    if (PB0LM001.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             DIMENSION CODES"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dim. code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the Season     **/
       /* *  table code to the map.                               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0LM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
        set PB0LM001.XDMCD cursor, modified;
      else
        PB0LM001.XDMCD = PB0LW01.XDMCD; /* clear fields*/
        set PB0LM001.XDMCD cursor, modified;
      end
    end

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

end // end PB0L210

// CHECK ATTENTION IDENTIFIERS
Function PB0L300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    /* per gamen and lsutto: we didn't want it like this, User did)*/
    set PB0LW04 empty;
    PB0LW01.PB0LWBRI = 0; /* reset index*/
    set PB0LM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0LM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0LM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0LM001.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    end

    set PB0LM001.CATOAP cursor, bold; /* Highlight*/
    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf9 /* PF9 was pressed*/
   && PB0LW04.XGPCD[1] == " ")    /* Table empty*/
    converseLib.validationFailed(17); /* Parms. must be entered*/
    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0LM001.XXXPRCNM = "PB0L300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0L300

// RESTET THE HIGHLIGHTED FIELDS
Function PB0L400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PB0LM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0LM001.CAITEM initialAttributes; /* Commarea application data*/

  set PB0LM001.PB0LWMYY initialAttributes; /* P.O. id production year*/
  set PB0LM001.PB0LWMM1 initialAttributes; /* P.O. id production month*/
  set PB0LM001.PB0LWMM2 initialAttributes; /* P.O. id delivery month*/
  set PB0LM001.FY1FCTYC initialAttributes; /* Factory code*/
  set PB0LM001.XCTCD initialAttributes; /* Country code*/
  set PB0LM001.SY1STNBR initialAttributes; /* style number*/
  set PB0LM001.SY2CLRID initialAttributes; /* style color*/
  set PB0LM001.XDMCD initialAttributes; /* dimension*/


end // end PB0L400

// VERIFY THE ENTERED DATA
Function PB0L500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.CAITEM > " ") /* Application data was entered*/

    set PB0LM001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0LM001.XXXPRCNM = "PB0L500"; /* Process name*/

  else

    PB0L510(); /* Verify the entered data*/
    PB0L520(); /* Process detail edits*/
    PB0L525(); /* Process style,colr,dim edits*/
    PB0L530(); /* Process parm. edits*/

  end


end // end PB0L500

// EDIT THE ENTERED DATA
Function PB0L510()

   /* ------------------------------------------------------------*/
     /* CHECK AND SEE WHAT REPORTS WERE REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/

    if (PB0LW01.PB0LWBRI >= PB0LW01.PB0LWMXB)
                                   /* Both index is ge both max.*/
      converseLib.validationFailed(240); /* Max. reached for both*/
      PB0LM001.XXXPRCNM = "PB0L510"; /* Process name*/
    end
  end


end // end PB0L510

// DO DETAIL EDITS
Function PB0L520()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.PB0LWMYY == 00 /* Nothing there*/
   && PB0LM001.PB0LWMM1 == 00 /* Nothing there*/
   && PB0LM001.PB0LWMM2 == 00) /* Nothing there*/
    set PB0LM001.PB0LWMYY cursor, bold; /* Highlight error*/
    converseLib.validationFailed(177); /* Date is missing*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/


  if (PB0LM001.FY1FCTYC == " " /* Factory not entered*/
   && PB0LM001.XCTCD == " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PB0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
    set PB0LM001.XCTCD bold; /* Highlight error*/
    PB0LM001.XCTDESC = " "; /* Country desc.*/
    PB0LM001.FY1FCTNM = " "; /* Factory name*/
    PB0LW01.XCTDESC = " "; /* Country desc.*/
    PB0LW01.FY1FCTNM = " "; /* Factory name*/
    PB0LM001.XXXPRCNM = "PB0L52A"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* COUNTRY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.XCTCD > " ")
    if (PB0LM001.XCTCD in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PB0LW01.XCTCD = PB0LM001.XCTCD; /* Country code*/
      PB0LM001.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
      PB0LW01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/

    else
      converseLib.validationFailed(49); /* Invalid country code*/
      set PB0LM001.XCTCD cursor, bold; /* Highlight error*/
      PB0LM001.XCTDESC = " "; /* Country desc.*/
      PB0LW01.XCTCD = " "; /* Country code*/
      PB0LW01.XCTDESC = " "; /* Country desc.*/
      PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
    end
  else
    PB0LW01.XCTCD = " "; /* Country code*/
    PB0LM001.XCTDESC = " "; /* Country desc.*/
    PB0LW01.XCTDESC = " "; /* Country desc.*/
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.FY1FCTYC == " ") /* Nothing there*/

    converseLib.validationFailed(252); /* Must enter*/
    set PB0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
    PB0LW01.FY1FCTYC = " "; /* Factory code*/
    PB0LW01.FY1FCTNM = " "; /* Factory name*/
    PB0LM001.FY1FCTNM = " "; /* Factory name*/

  else
    if (PB0LM001.FY1FCTYC == "ALL")
      PB0LW01.FY1FCTYC = "ALL"; /* Factory code*/
      PB0LW01.FY1FCTNM = " "; /* Factory name*/
      PB0LM001.FY1FCTNM = " "; /* Factory name*/
    else
      set FY1REC empty; /* Clear record*/
      FY1REC.FY1FCTYC = PB0LM001.FY1FCTYC; /* Search key*/
      FY1REC.XGPCD = "02"; /* Search key*/


      PB0LS01(); /* Call factory check routine*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        if (FY1REC.XXXSTAT == "A") /* Everything OK*/
          PB0LW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Factory code*/
          PB0LW01.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
          PB0LM001.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
        else
          converseLib.validationFailed(32); /* Invalid factory*/
          PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
          set PB0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
          PB0LW01.FY1FCTYC = " "; /* Factory code*/
          PB0LW01.FY1FCTNM = " "; /* Factory name*/
          PB0LM001.FY1FCTNM = " "; /* Factory name*/
        end
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
        set PB0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
        PB0LW01.FY1FCTYC = " "; /* Factory code*/
        PB0LW01.FY1FCTNM = " "; /* Factory name*/
        PB0LM001.FY1FCTNM = " "; /* Factory name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.PB0LWMM2 > 00 /* Something there*/
   && PB0LM001.PB0LWMM2 <= 12)

    PB0LW01.PB0LWMM2 = PB0LM001.PB0LWMM2;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
    set PB0LM001.PB0LWMM2 cursor, bold; /* Highlight*/
    PB0LW01.PB0LWMM2 = 00;
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.PB0LWMM1 > 00 /* Something there*/
   && PB0LM001.PB0LWMM1 <= 12)

    PB0LW01.PB0LWMM1 = PB0LM001.PB0LWMM1;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
    set PB0LM001.PB0LWMM1 cursor, bold; /* Highlight*/
    PB0LW01.PB0LWMM1 = 00;
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.PB0LWMYY >= 00
   && PB0LM001.PB0LWMYY <= 99)
    PB0LW01.PB0LWMYY = PB0LM001.PB0LWMYY;
    /* ----------------------- y2k in ---------------------*/
    PB0LW01.PB0LW-MAP-YY = PB0LM001.PB0LWMYY;
    if (PB0LW01.PB0LW-MAP-YY > 60) /* Century windowing;*/
      PB0LW-MAP-CC = 19;
    else
      PB0LW-MAP-CC = 20;
    end
    /* ----------------------- y2k in ---------------------*/

    /* ----------------------- y2k out --------------------*/
    /* PB0LW01.PB0LW-CY1 = PB0LW01.PB0LWYYY + 1; /* One year greater*/
    /* PB0LW01.PB0LWCY2 = PB0LW01.PB0LWYYY - 1; /* One year less*/
    /* IF PB0LW01.PB0LWMYY GE PB0LW01.PB0LWCY2  /* One year less or equal*/
      /* AND PB0LW01.PB0LWMYY LE PB0LW01.PB0LWCY1; One year GE*/
    /* ----------------------- y2k out --------------------*/
    /* ----------------------- y2k in  --------------------*/
    PB0LW01.PB0LW-CCYY1 = PB0LW01.PB0LW-CCYY + 1; /* One year greater*/
    PB0LW01.PB0LW-CCYY2 = PB0LW01.PB0LW-CCYY - 1; /* One year less*/
    if (PB0LW01.PB0LW-MAP-CCYY >= PB0LW01.PB0LW-CCYY2 /* One year LE*/
     && PB0LW01.PB0LW-MAP-CCYY <= PB0LW01.PB0LW-CCYY1) /* one year GE*/
    /* ----------------------- y2k in  --------------------*/

       /* NEXT SENTENCE*/

    else
      converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
      PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
      set PB0LM001.PB0LWMYY cursor, bold; /* Highlight*/
      PB0LW01.PB0LWMYY = 00;
    end
  else
    converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
    PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
    set PB0LM001.PB0LWMYY cursor, bold; /* Highlight*/
    PB0LW01.PB0LWMYY = 00;
  end

  if (converseVar.validationMsgNum == 0) /* No message*/
    PB0LS02(); /* Set up p.o. id date*/
  end

  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* No message*/

    if (PB0LM001.FY1FCTYC != "ALL" /* P.O. ID factory code not all*/
     && PB0LM001.FY1FCTYC > " "    /* P.O. ID factory code not all*/
     && PB0LM001.XCTCD > " ")      /* Country code*/
      converseLib.validationFailed(236); /* Enter factory or country*/
      PB0LM001.XXXPRCNM = "PB0L520"; /* Process name*/
      set PB0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
    end

  end


end // end PB0L520

// EDIT STYLE, COLOR, DIM.
Function PB0L525()

   /* ------------------------------------------------------------*/
    /* SEE IF THE DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  PB0LW01.SY1STNBR = " "; /* Style number*/
  PB0LW01.SY2CLRID = " "; /* Color id*/
  PB0LW01.XDMCD = " "; /* Dim. code*/
  if (PB0LM001.XDMCD > " ") /* Something there*/
    if (PB0LM001.XDMCD in XDMTBL.XDMCD /* Code is in the table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Code is active*/

       /* NEXT SENTENCE*/

    else
      set PB0LM001.XDMCD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(53); /* Style/color/dim. invalid*/
      PB0LM001.XXXPRCNM = "PC09525";
    end
  end

   /* ------------------------------------------------------------*/
    /* SEE IF THE STYLE, COLOR, DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  if (PB0LM001.SY1STNBR > " " /* Style number*/
   && PB0LM001.SY2CLRID > " " /* Color id*/
   && PB0LM001.XDMCD > " ")   /* Dim. code*/
    set PG2REC empty; /* Clear style record*/
    PG2REC.SY1STNBR = PB0LM001.SY1STNBR; /* Style number*/
    PG2REC.SY2CLRID = PB0LM001.SY2CLRID; /* Color id*/
    PG2REC.XDMCD = PB0LM001.XDMCD; /* Dim. code*/
    PG2REC.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    TA1REC.TA1PGMNM = "PC09525";

    XSPG202(); /* Get the style name*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

      PB0LW01.SY1STNBR = PB0LM001.SY1STNBR; /* Style number*/
      PB0LW01.SY2CLRID = PB0LM001.SY2CLRID; /* Color id*/
      PB0LW01.XDMCD = PB0LM001.XDMCD; /* Dim. code*/

    else
      set PB0LM001.SY1STNBR cursor, bold; /* Style number*/
      set PB0LM001.SY2CLRID bold; /* Color id*/
      set PB0LM001.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(197); /* Style/color/dim. invalid*/
      PB0LM001.XXXPRCNM = "PC09525";
    end
  else
    if (PB0LM001.SY1STNBR > " ") /* Style number*/
      set PG2REC empty; /* Clear record*/
      PG2REC.SY1STNBR = PB0LM001.SY1STNBR; /* Style number*/
      PG2REC.XGPCD = PCWREC.XGPCD; /* Gpc code*/
      TA1REC.TA1PGMNM = "PC09525";

      XSPG201(); /* Get the style name*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

        PB0LW01.SY1STNBR = PB0LM001.SY1STNBR; /* Style number*/
        PB0LW01.SY2CLRID = PB0LM001.SY2CLRID; /* Color id*/
        PB0LW01.XDMCD = PB0LM001.XDMCD; /* Dim. code*/

      else
        set PB0LM001.SY1STNBR cursor, bold; /* Style number*/
        converseLib.validationFailed(52); /* Style color invalid*/
        PB0LM001.XXXPRCNM = "PC09525";
      end
    end
  end

  if (PB0LM001.SY1STNBR == " ") /* Style number*/
    if (PB0LM001.SY2CLRID == "00" /* Color id*/
     || PB0LM001.SY2CLRID == "  " /* Color id*/
     || PB0LM001.XDMCD == "00")   /* Dim. code*/

       /* NEXT SENTENCE*/

    else
      set PB0LM001.SY2CLRID cursor, bold; /* Color id*/
      set PB0LM001.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(294); /* Style color invalid*/
      PB0LM001.XXXPRCNM = "PC09525";
    end
  end


end // end PB0L525

// PROCESS PARM EDITS
Function PB0L530()

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PB0LW03.XGPCD = "02"; /* Gpc code*/
    PB0LW03.PB0LWIDT = PB0LW01.PB0LWPDT; /* PO ID*/
    PB0LW03.FY1FCTYC = PB0LW01.FY1FCTYC; /* Factory*/
    PB0LW03.XCTCD = PB0LW01.XCTCD; /* Country code*/
    PB0LW03.SY1STNBR = PB0LW01.SY1STNBR; /* style number*/
    PB0LW03.SY2CLRID = PB0LW01.SY2CLRID; /* style color*/
    PB0LW03.XDMCD = PB0LW01.XDMCD; /* dimension code*/
    PB0LW03.PB0LWALF = " "; /* Application req. flag*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS ARE ALREADY SET*/
    /* ------------------------------------------------------------*/


    if (PB0LW03.PB0LWDTW in PB0LW04.PB0LWBTB) /* Parm in table*/
      set PB0LM001.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(241); /* Parm already in table*/
      PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
      return; /* Return to previous process*/
    else
      if (PB0LW03.PB0LWIDT in PB0LW04.PB0LWIDT) /* PO ID*/
        PB0LW01.PB0LWSRI = sysVar.arrayIndex; /* Set index*/
        while (PB0LW01.PB0LWSRI != PB0LW01.PB0LWMXB
         && PB0LW04.XGPCD[PB0LWSRI] > " ") /* Something in row*/
          if (PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
           && PB0LW04.XCTCD[PB0LWSRI] == " " /* Country code*/
           && PB0LM001.FY1FCTYC == "ALL"     
           && PB0LM001.XCTCD > " ")          /* Country code*/
            set PB0LM001.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(254); /* cannot be country specific*/
            PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
           && PB0LW04.XCTCD[PB0LWSRI] > " " /* Country code*/
           && PB0LM001.FY1FCTYC == "ALL"    
           && PB0LM001.XCTCD == " ")        /* Country code*/
            set PB0LM001.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(256); /* must be country specific*/
            PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PB0LM001.FY1FCTYC != "ALL"
           && PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
           && PB0LW04.XCTCD[PB0LWSRI] > " ")
            set PB0LM001.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting all factories*/
            PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PB0LM001.FY1FCTYC == "ALL"
           && PB0LW04.FY1FCTYC[PB0LWSRI] > " "
           && PB0LW04.FY1FCTYC[PB0LWSRI] != "ALL")
            set PB0LM001.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(260); /* Already getting factory*/
            PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PB0LM001.FY1FCTYC != "ALL"
           && PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
           && PB0LM001.XCTCD == " ")
            set PB0LM001.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting factory*/
            PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PB0LM001.SY1STNBR > " ")
            if (PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"       
             && PB0LM001.FY1FCTYC == "ALL"                
             && PB0LW04.XCTCD[PB0LWSRI] == PB0LM001.XCTCD /* ctry code*/
             && PB0LM001.SY1STNBR == PB0LW04.SY1STNBR[PB0LWSRI]
             && PB0LM001.SY2CLRID == PB0LW04.SY2CLRID[PB0LWSRI]
             && PB0LM001.XDMCD == PB0LW04.XDMCD[PB0LWSRI])
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              set PB0LM001.SY2CLRID bold;
              set PB0LM001.XDMCD bold;
              converseLib.validationFailed(241); /* parm already requested*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"       
             && PB0LM001.FY1FCTYC == "ALL"                
             && PB0LW04.XCTCD[PB0LWSRI] == PB0LM001.XCTCD /* ctry code*/
             && PB0LW04.SY1STNBR[PB0LWSRI] == " ")        /* all styles*/
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(292); /* style already selected*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LM001.FY1FCTYC == PB0LW04.FY1FCTYC[PB0LWSRI]
             && PB0LM001.XCTCD == " "
             && PB0LM001.SY1STNBR == PB0LW04.SY1STNBR[PB0LWSRI]
             && PB0LM001.SY2CLRID == PB0LW04.SY2CLRID[PB0LWSRI]
             && PB0LM001.XDMCD == PB0LW04.XDMCD[PB0LWSRI])
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              set PB0LM001.SY2CLRID bold;
              set PB0LM001.XDMCD bold;
              converseLib.validationFailed(241); /* parm already requested*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LM001.FY1FCTYC == PB0LW04.FY1FCTYC[PB0LWSRI]
             && PB0LM001.XCTCD == " "
             && PB0LW04.SY1STNBR[PB0LWSRI] == " ") /* all styles*/
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(292); /* style entered can't be blank*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LM001.FY1FCTYC != "ALL"
             && PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
             && PB0LM001.XCTCD == " "
             && PB0LM001.SY1STNBR == PB0LW04.SY1STNBR[PB0LWSRI]
             && PB0LM001.SY2CLRID == PB0LW04.SY2CLRID[PB0LWSRI]
             && PB0LM001.XDMCD == PB0LW04.XDMCD[PB0LWSRI])
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              set PB0LM001.SY2CLRID bold;
              set PB0LM001.XDMCD bold;
              converseLib.validationFailed(255); /* 'all' fctys requested*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

          end
          if (PB0LM001.SY1STNBR == " ")
            if (PB0LM001.FY1FCTYC == PB0LW04.FY1FCTYC[PB0LWSRI]
             && PB0LM001.XCTCD == " "
             && PB0LW04.SY1STNBR[PB0LWSRI] > " ") /* unique style*/
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(293); /* style entered can't be blank*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LM001.FY1FCTYC == PB0LW04.FY1FCTYC[PB0LWSRI]
             && PB0LM001.XCTCD == PB0LW04.XCTCD[PB0LWSRI]
             && PB0LW04.SY1STNBR[PB0LWSRI] > " ") /* unique style*/
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(293); /* style entered can't be blank*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PB0LM001.FY1FCTYC != "ALL"
             && PB0LW04.FY1FCTYC[PB0LWSRI] == "ALL"
             && PB0LM001.XCTCD == " "
             && PB0LW04.SY1STNBR[PB0LWSRI] > " ") /* unique style*/
              set PB0LM001.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(255); /* 'all' fctys requested*/
              PB0LM001.XXXPRCNM = "PB0L530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

          end

          PB0LW01.PB0LWSRI = PB0LW01.PB0LWSRI + 1; /* Increment index*/
        end
      end
    end
  end


end // end PB0L530

// PROCESS THE VALID INPUT DATA
Function PB0L600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/

    PB0L610();

  else

    if (converseVar.eventKey is pf9) /* PF9 pressed*/

      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
        PB0L620(); /* format production jcl for remote*/
      else
        PB0L621(); /* format development jcl for remote*/
      end

      PB0LW01.PB0LWDRI = 0;
      PB0LW01.PB0LWBRI = 0;
      PB0LW01.PB0LWSRI = 0;
      PB0LW01.PB0LWMXB = 10;

      set PB0LW03 empty;
      set PB0LW04 empty;

    end
  end


end // end PB0L600

// DO SAVE THE PARMS
Function PB0L610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PB0LW01.PB0LWBRI = PB0LW01.PB0LWBRI + 1; /* Add 1 to index*/
    PB0LW04.XGPCD[PB0LWBRI] = "02"; /* Gpc code*/
    PB0LW04.PB0LWIDT[PB0LWBRI] = PB0LW01.PB0LWPDT; /* PO ID*/
    PB0LW04.FY1FCTYC[PB0LWBRI] = PB0LW01.FY1FCTYC; /* Factory*/
    PB0LW04.XCTCD[PB0LWBRI] = PB0LW01.XCTCD; /* Country code*/
    PB0LW04.SY1STNBR[PB0LWBRI] = PB0LW01.SY1STNBR; /* style nbr*/
    PB0LW04.SY2CLRID[PB0LWBRI] = PB0LW01.SY2CLRID; /* style colr*/
    PB0LW04.XDMCD[PB0LWBRI] = PB0LW01.XDMCD; /* dimension code*/
    PB0LW04.PB0LWALF[PB0LWBRI] = " "; /* Application req. flag*/
    converseLib.validationFailed(253); /* Parm. Entered*/

    if (PB0LW01.PB0LWBRI == 10) /* Max amount for table*/
      converseLib.validationFailed(240); /* Max amount reached*/
      PB0LM001.XXXPRCNM = "PB0L610"; /* Process name*/
    end

  end


end // end PB0L610

// SUBMIT TEST JOBS TO REMOTE
Function PB0L620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PB0LW04.PB0LWBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PB0LW01.PB0LWIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PB0LW01.PB0LWIX2 = 0; /* Initialize index*/
    PB0LW01.PB0LWIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PB0LW01.PB0LWIXT > 0) /* Until end of table*/

      if (PB0LT01.TARTYPE[PB0LWIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PB0LW02.PB0LWTYP = "P"; /* Type*/

        PB0LW01.PB0LWIX3 = 1;

        while (PB0LW01.PB0LWIX3 <= PB0LW01.PB0LWMXD) /* LE max for table*/
          if (PB0LW04.PB0LWBTB[PB0LWIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PB0LW04.PB0LWBTB[PB0LWIX3];
            TA6REC.TARTYPE[TA6INDEX] = PB0LW02.PB0LWTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
          else
            PB0LW01.PB0LWIX3 = PB0LW01.PB0LWMXD; /* Set index to 10*/
          end
          PB0LW01.PB0LWIX3 = PB0LW01.PB0LWIX3 + 1;
                                  /* ; Increment both tbl indx*/
        end

      else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

        if (PB0LT01.TARJCL[PB0LWIXT] == "            /*EOF" /* End of table*/
         && PB0LW01.PB0LWIXT == PB0LW01.PB0LWMXB)   

          PB0LW01.PB0LWIXT = PB0LW01.PB0LWIXT + 1; /* incrmnt indx*/

        else
               /* move jcl cards to table*/
          TA6REC.TARJCL[TA6INDEX] = PB0LT01.TARJCL[PB0LWIXT];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PB0LT01.TARTYPE[PB0LWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PB0LT01.TARJCL[PB0LWIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PB0LW01.PB0LWIXT == PB0LW01.PB0LWMXB)
           /* next sentence*/
        else
          PB0LW01.PB0LWIXT = 0; /* Indicate end of table*/
        end

      else

        PB0LW01.PB0LWIXT = PB0LW01.PB0LWIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PB0LS03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PB0LW04 empty; /* Clear parameter table*/
      return;

    else

      set PB0LW04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PB0L620

// SUBMIT TEST JOBS TO REMOTE
Function PB0L621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PB0LW04.PB0LWBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PB0LW01.PB0LWIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PB0LW01.PB0LWIX2 = 0; /* Initialize index*/
    PB0LW01.PB0LWIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PB0LW01.PB0LWIXT > 0) /* Until end of table*/

      if (PB0LT11.TARTYPE[PB0LWIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PB0LW02.PB0LWTYP = "P"; /* Type*/

        PB0LW01.PB0LWIX3 = 1;

        while (PB0LW01.PB0LWIX3 <= PB0LW01.PB0LWMXD) /* LE max for table*/
          if (PB0LW04.PB0LWBTB[PB0LWIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PB0LW04.PB0LWBTB[PB0LWIX3];
            TA6REC.TARTYPE[TA6INDEX] = PB0LW02.PB0LWTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
          else
            PB0LW01.PB0LWIX3 = PB0LW01.PB0LWMXD; /* Set index to 10*/
          end
          PB0LW01.PB0LWIX3 = PB0LW01.PB0LWIX3 + 1;
                                  /* ; Increment both tbl indx*/
        end

      else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

        if (PB0LT11.TARJCL[PB0LWIXT] == "            /*EOF" /* End of table*/
         && PB0LW01.PB0LWIXT == PB0LW01.PB0LWMXB)   

          PB0LW01.PB0LWIXT = PB0LW01.PB0LWIXT + 1; /* incrmnt indx*/

        else
               /* move jcl cards to table*/
          TA6REC.TARJCL[TA6INDEX] = PB0LT11.TARJCL[PB0LWIXT];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = PB0LT11.TARTYPE[PB0LWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PB0LT11.TARJCL[PB0LWIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PB0LW01.PB0LWIXT == PB0LW01.PB0LWMXB)
           /* next sentence*/
        else
          PB0LW01.PB0LWIXT = 0; /* Indicate end of table*/
        end

      else

        PB0LW01.PB0LWIXT = PB0LW01.PB0LWIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PB0LS03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PB0LW04 empty; /* Clear parameter table*/
      return;

    else

      set PB0LW04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PB0L621

// Call factory row
Function PB0LS01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0L"; /* Process name*/
  TA1REC.TA1LOC = "PB0LS01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PB0LM001.XXXPRCNM = "PB0LS01"; /* Process name*/

  exit stack;


end // end PB0LS01

// SET UP DATE
Function PB0LS02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in type*/
  TA2REC.TA2GRGEN = PB0LW01.PB0LWDAT;

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PB0LW01.PB0LWPDT = TA2REC.TA2GRGGN; /* P.O. id date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0LS02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0LM001.XXXPRCNM = "PB0LS02"; /* Process name*/

    end
  end


end // end PB0LS02

// SUBMIT JCL
Function PB0LS03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* and reset the map.*/
   /* ------------------------------------------------------------*/

  set PB0LW04 empty;
  set PB0LM001 initial; /* Clear the map*/

  PB0LM001.FY1FCTYC = "ALL";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Job submitted to reader*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PB0LW04 empty;
    PB0LM001.XXXPRCNM = "PB0LS03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    PB0LM001.XXXPRCNM = "PB0LS03"; /* Process name*/
    exit stack;

  end


end // end PB0LS03

//*** RECORD=PB0LW01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC09
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// *  9/12/89   GWITZI        NEW RECORD
// *
// ************************************************************
// ***********************
Record PB0LW01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTNM FY1FCTNM ; 
  10 XGPCD XGPCD ; 
  10 XCTCD XCTCD ; 
  10 XCTDESC XCTDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PB0LWPDT PB0LWPDT ; 
  10 PB0LW-MAP-CCYY PB0LW-MAP-CCYY ; 
    15 PB0LW-MAP-CC PB0LW-MAP-CC ; 
    15 PB0LW-MAP-YY PB0LW-MAP-YY ; 
  10 PB0LWDAT PB0LWDAT ; 
    15 PB0LWMYY PB0LWMYY ; 
    15 PB0LWMM1 PB0LWMM1 ; 
    15 PB0LWMM2 PB0LWMM2 ; 
  10 PB0LW-CCYY1 PB0LW-CCYY1 ; 
    15 PB0LWCC1 PB0LWCC1 ; 
    15 PB0LWCY1 PB0LWCY1 ; 
  10 PB0LW-CCYY2 PB0LW-CCYY2 ; 
    15 PB0LWCC2 PB0LWCC2 ; 
    15 PB0LWCY2 PB0LWCY2 ; 
  10 PB0LWCDT PB0LWCDT ; 
    15 PB0LW-CCYY PB0LW-CCYY ; 
      20 PB0LWCCC PB0LWCCC ; 
      20 PB0LWYYY PB0LWYYY ; 
    15 PB0LWMMM PB0LWMMM ; 
    15 PB0LWDDD PB0LWDDD ; 
  10 PB0LWIXT PB0LWIXT ; 
  10 PB0LWIX2 PB0LWIX2 ; 
  10 PB0LWIX3 PB0LWIX3 ; 
  10 PB0LWDRI PB0LWDRI ; 
  10 PB0LWSRI PB0LWSRI ; 
  10 PB0LWBRI PB0LWBRI ; 
  10 PB0LWMXD PB0LWMXD ; 
  10 PB0LWMXS PB0LWMXS ; 
  10 PB0LWMXB PB0LWMXB ; 
  10 PB0LWEX1 PB0LWEX1 ; 
  10 PB0LWSRF PB0LWSRF ; 
  10 PB0LWJCE PB0LWJCE ; 
  10 PB0LWJCP PB0LWJCP ; 
  10 PB0LWJCC PB0LWJCC ; 
  10 PB0LWCND PB0LWCND ; 
  10 PB0LWTYP PB0LWTYP ; 
  10 PB0LWCLG PB0LWCLG ; 
  10 PB0LWMPR PB0LWMPR ; 
  10 PB0LWPNM PB0LWPNM ; 
  10 PB0LWLTC PB0LWLTC ; 
end // end PB0LW01

//*** RECORD=PB0LW02 ****
// ************************************************************
// *
// *    JCL RECORD AREA  (WORKING STORAGE
// *
// ************************************************************
// ***********************
Record PB0LW02 type basicRecord
  10 PB0LWJCP PB0LWJCP ; 
  10 PB0LWJCE PB0LWJCE ; 
    15 PB0LWEX1 PB0LWEX1 ; 
    15 PB0LWPNM PB0LWPNM ; 
    15 * char(58) ; 
  10 PB0LWJCC PB0LWJCC [16] ; 
    15 * char(23) ; 
    15 PB0LWCLG PB0LWCLG ; 
    15 * char(40) ; 
  10 PB0LWTYP PB0LWTYP ; 
  10 PB0LWCND PB0LWCND [16] ; 
    15 * char(4) ; 
    15 PB0LWCMM PB0LWCMM ; 
    15 * char(12) ; 
end // end PB0LW02

//*** RECORD=PB0LW03 ****
// ************************************************************
// *
// *   Screen table working storage
// *
// ************************************************************
// ***********************
Record PB0LW03 type basicRecord
  10 PB0LWDTW PB0LWDTW ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PB0LWIDT PB0LWIDT ; 
    15 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PB0LWALF PB0LWALF ; 
    15 * char(1) ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(38) ; 
end // end PB0LW03

//*** RECORD=PB0LW04 ****
// ************************************************************
// *
// *  Report working storage for the array to pass to ta6rec
// *
// ************************************************************
// ***********************
Record PB0LW04 type basicRecord
  10 PB0LWBTB PB0LWBTB [10] ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PB0LWIDT PB0LWIDT ; 
    15 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PB0LWALF PB0LWALF ; 
    15 * char(1) ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(38) ; 
end // end PB0LW04

DataItem PB0LW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LW-CCYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LW-CCYY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LW-MAP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LW-MAP-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LW-MAP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application flag
DataItem PB0LWALF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. index
DataItem PB0LWBRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both report tbl recd
DataItem PB0LWBTB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0LWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0LWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          centry
DataItem PB0LWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PB0LWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement logic
DataItem PB0LWCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PB0LWCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem PB0LWCND char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date +1
DataItem PB0LWCY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PB0LWCY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PB0LWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PB0LWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. index
DataItem PB0LWDRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. report tablerec.
DataItem PB0LWDTW char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem PB0LWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID mo rng
DataItem PB0LWIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PB0LWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PB0LWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem PB0LWIXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem PB0LWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem PB0LWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem PB0LWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Less than condidition override
DataItem PB0LWLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem PB0LWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// po id delivery month
DataItem PB0LWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

//          month
DataItem PB0LWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max jcl lines for primary rpts
DataItem PB0LWMPR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both rpt. max.
DataItem PB0LWMXB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. max.
DataItem PB0LWMXD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summ. rpt. max.
DataItem PB0LWMXS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date - production year
DataItem PB0LWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// map po id date
DataItem PB0LWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proc name
DataItem PB0LWPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// secondary rpts needed flag
DataItem PB0LWSRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summ. rpt. index
DataItem PB0LWSRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL statement type
DataItem PB0LWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PB0LWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

