package pb0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0H ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO SUBMIT THE FOOTWEAR BATCH
// *   REPORT FOR SALESMAN SAMPLE CHANGES (PO TYPE 'SS').
// *   THE PARM 'SS' WILL BE PASSED TO PC350D.
// *
// *   THE USER WILL HIT THE ENTER KEY TO SUBMIT THE JOB.
// *
// *   DATE     USERID  COMMENTS
// * ________  ________ _______________________________________
// *  3/13/91  CHAERT   NEW APPLICATION
// * 12/29/93  gamen    Add code for theater of ops.
// * 11/05/97  GREDDY   modified map to have the user enter
// *                    the PO type of PO#
// * 12/02/97  BMUSTI   MODIFIED JCL table
// * 05/20/98  vramac   PCF168- Changed parm rec to
// *                    pass product line code.
// ************************************************************
// *********************
Program PB0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0HW02 PB0HW02; // record
  PB0HW03 PB0HW03; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOREG01 VPOREG01; // record
  XCTHREC XCTHREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use PB0HT01; // table
  use PB0HT11; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use PB0HM.PB0HM010,  // forms
      PB0HM.TA0PM001, 
      PB0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* initialize records and maps*/
     /* ------------------------------------------------------------*/

    set PB0HW02 empty; /* Initialize jcl working storage*/

    set ERRSQLCA empty; /* Initialize*/
    set SQLCA empty; /* Initialize*/

    set TA1REC empty; /* Initialize*/
    set XCTHREC empty; /* Initialize theater of ops record*/
    set TA6REC empty; /* Initialize Jcl record*/
    set TAEREC empty; /* Initialize*/

    set PB0HM010 initial; /* Initialize map*/
    PB0HM010.PB0HPOSF = "N"; /* Initialize all PO's Flag*/
    PB0HM010.PC3POREG = "01"; /* Initialize po region code*/
    PB0HM010.PB0HM-XPL-LNCD-FLG = "Y"; /* Initialize all Prod lncd Flg*/
    PB0HM010.XGPCD = COMMAREA.XGPCD;
    set PB0HM010.PC3POREG protect;
    set PB0HM010.XGPCD protect;

    PB0H050: PB0H050();
    goto PB0H050;
  end // end main
end // end PB0H

// MAIN PROCESS TO DISPLAY MAP
Function PB0H050()
   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/

  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PB0HM010.XXXPRCNM = "PB0H050"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02" /* Footware*/
   && COMMAREA.CACLVL[2] == "Y") /* User can enter*/

    PB0H080(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* IF FOR SOME REASON THE USER IN NOT AUTHORIZED TO GET INTO*/
     /* THIS PROGRAM AND IS NO AUTHORIZED TO GET TO THE PC0A MENU*/
     /* THE USER WILL BE KICKED OUT TO THE MAIN MENU. THIS WILL*/
     /* ALLOW THE PROGRAM TO TERMINATE AND NOT RESULT IN AN*/
     /* INFINITE LOOP.*/
    /* ------------------------------------------------------------*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end



end // end PB0H050

// PROGRAM PROCESS CONTROL
Function PB0H080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PB0H100(); /* Get desc for PO reg code*/

  if (PB0HM010.XGPCD in XGPTBL.XGPCD)
    PB0HM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  PB0H200(); /* Format and display the map*/

  PB0H300(); /* Check attention identifier*/

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/
  set PB0HM010.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0HM010.CAITEM initialAttributes; /* Commarea application data*/

  if (PB0HM010.PB0HPOSF != "N" /* all PO flag should be Y or N*/
   && PB0HM010.PB0HPOSF != "Y")
    converseLib.validationFailed(42);
    PB0HM010.XXXPRCNM = "PB0H080";
    set PB0HM010.PB0HPOSF cursor, bold;
  end

  if (PB0HM010.PB0HPOSF == "N" /* if PO # AND PO type are blanks*/
   && PB0HM010.PC3PONBR == 000000000
   && PB0HM010.PC4ORTYP == "  ")
    converseLib.validationFailed(535);
    PB0HM010.XXXPRCNM = "PB0H080";
    set PB0HM010.PC3PONBR cursor, bold;
    set PB0HM010.PC4ORTYP bold;
  end

  if (PB0HM010.PC3PONBR != 000000000 /* po # and po type are mutually excl*/
   && PB0HM010.PC4ORTYP != "  ")    
    converseLib.validationFailed(536);
    PB0HM010.XXXPRCNM = "PB0H080";
    set PB0HM010.PC3PONBR cursor, bold;
    set PB0HM010.PC4ORTYP bold;
  end

  if (PB0HM010.PB0HPOSF == "N"
   && PB0HM010.PC4ORTYP == "  "
   && PB0HM010.PC3PONBR != 000000000)
    PB0H400(); /* Process the PC PO NBR.*/
  end

  if (PB0HM010.PC4ORTYP != "  "
   && PB0HM010.PC3PONBR == 000000000
   && PB0HM010.PB0HPOSF == "N")
    if (PB0HM010.PC4ORTYP != "SS" && 
    PB0HM010.PC4ORTYP != "PS" && 
    PB0HM010.PC4ORTYP != "CR")
      converseLib.validationFailed(33);
      PB0HM010.XXXPRCNM = "PB0H080";
      set PB0HM010.PC4ORTYP cursor, bold;
    end
  end

  if (PB0HM010.PB0HPOSF == "Y"
   && PB0HM010.PC3PONBR != 000000000)
    converseLib.validationFailed(537);
    PB0HM010.XXXPRCNM = "PB0H080";
    set PB0HM010.PC3PONBR cursor, bold;
  end

  if (PB0HM010.PB0HPOSF == "Y"
   && PB0HM010.PC4ORTYP != "  ")
    converseLib.validationFailed(537);
    PB0HM010.XXXPRCNM = "PB0H080";
    set PB0HM010.PC4ORTYP cursor, bold;
  end

  if (PB0HM010.PC4ORTYP == "SS")
    if (PB0HM010.PB0HM-XPL-LNCD-FLG != "Y"
     && PB0HM010.PB0HM-XPL-LNCD-FLG != "N")
      converseLib.validationFailed(42);
      set PB0HM010.PB0HM-XPL-LNCD-FLG cursor, bold;
      PB0HM010.XXXPRCNM = "PB0H080";
      exit stack;
    end
    if (PB0HM010.PB0HM-XPL-LNCD-FLG == "Y"
     && (PB0HM010.PB0HM-XPL-LNCD1 != " "
     || PB0HM010.PB0HM-XPL-LNCD2 != " "
     || PB0HM010.PB0HM-XPL-LNCD3 != " "
     || PB0HM010.PB0HM-XPL-LNCD4 != " "))
      converseLib.validationFailed(549);
      set PB0HM010.PB0HM-XPL-LNCD-FLG cursor, bold;
      set PB0HM010.PB0HM-XPL-LNCD1 cursor, bold;
      set PB0HM010.PB0HM-XPL-LNCD2 bold;
      set PB0HM010.PB0HM-XPL-LNCD3 bold;
      set PB0HM010.PB0HM-XPL-LNCD4 bold;
      PB0HM010.XXXPRCNM = "PB0H080";
      exit stack;
    end
    if (PB0HM010.PB0HM-XPL-LNCD-FLG == "N"
     && (PB0HM010.PB0HM-XPL-LNCD1 == " "
     && PB0HM010.PB0HM-XPL-LNCD2 == " "
     && PB0HM010.PB0HM-XPL-LNCD3 == " "
     && PB0HM010.PB0HM-XPL-LNCD4 == " "))
      converseLib.validationFailed(550);
      set PB0HM010.PB0HM-XPL-LNCD-FLG cursor, bold;
      set PB0HM010.PB0HM-XPL-LNCD1 cursor, bold;
      set PB0HM010.PB0HM-XPL-LNCD2 bold;
      set PB0HM010.PB0HM-XPL-LNCD3 bold;
      set PB0HM010.PB0HM-XPL-LNCD4 bold;
      PB0HM010.XXXPRCNM = "PB0H080";
      exit stack;
    end

    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end

  if (PB0HM010.PC4ORTYP != "SS")
    if (PB0HM010.PB0HM-XPL-LNCD-FLG != "Y"
     || PB0HM010.PB0HM-XPL-LNCD1 != " "
     || PB0HM010.PB0HM-XPL-LNCD2 != " "
     || PB0HM010.PB0HM-XPL-LNCD3 != " "
     || PB0HM010.PB0HM-XPL-LNCD4 != " ")
      converseLib.validationFailed(551);
      set PB0HM010.PC4ORTYP cursor, bold;
      set PB0HM010.PB0HM-XPL-LNCD-FLG bold;
      set PB0HM010.PB0HM-XPL-LNCD1 bold;
      set PB0HM010.PB0HM-XPL-LNCD2 bold;
      set PB0HM010.PB0HM-XPL-LNCD3 bold;
      set PB0HM010.PB0HM-XPL-LNCD4 bold;
      PB0HM010.XXXPRCNM = "PB0H080";
      exit stack;
    end
  end

  if (PB0HM010.PB0HM-XPL-LNCD1 != " ")
    PB0HW02.PB0HWCD1 = PB0HM010.PB0HM-XPL-LNCD1; /* Product line*/
    PB0HW02.PB0HWCD2 = "02"; /* GPC code*/
    if (PB0HW02.PB0HWKEY in XPLTBL.XPLKEY) /* Product key in table*/

    else
      PB0HM010.XXXPRCNM = "PBOHS080"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD1 cursor, bold; /* Highlight*/
      converseLib.validationFailed(93); /* Product line invalid*/
      exit stack; /* Exit to display map*/
    end
  end

  if (PB0HM010.PB0HM-XPL-LNCD2 != " ")
    PB0HW02.PB0HWCD1 = PB0HM010.PB0HM-XPL-LNCD2; /* Product line*/
    PB0HW02.PB0HWCD2 = "02"; /* GPC code*/
    if (PB0HW02.PB0HWKEY in XPLTBL.XPLKEY) /* Product key in table*/

    else
      PB0HM010.XXXPRCNM = "PBOHS080"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD2 cursor, bold; /* Highlight*/
      converseLib.validationFailed(93); /* Product line invalid*/
      exit stack; /* Exit to display map*/
    end
  end

  if (PB0HM010.PB0HM-XPL-LNCD3 != " ")
    PB0HW02.PB0HWCD1 = PB0HM010.PB0HM-XPL-LNCD3; /* Product line*/
    PB0HW02.PB0HWCD2 = "02"; /* GPC code*/
    if (PB0HW02.PB0HWKEY in XPLTBL.XPLKEY) /* Product key in table*/

    else
      PB0HM010.XXXPRCNM = "PBOHS080"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD3 cursor, bold; /* Highlight*/
      converseLib.validationFailed(93); /* Product line invalid*/
      exit stack; /* Exit to display map*/
    end
  end

  if (PB0HM010.PB0HM-XPL-LNCD4 != " ")
    PB0HW02.PB0HWCD1 = PB0HM010.PB0HM-XPL-LNCD4; /* Product line*/
    PB0HW02.PB0HWCD2 = "02"; /* GPC code*/
    if (PB0HW02.PB0HWKEY in XPLTBL.XPLKEY) /* Product key in table*/

    else
      PB0HM010.XXXPRCNM = "PBOHS080"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD4 cursor, bold; /* Highlight*/
      converseLib.validationFailed(93); /* Product line invalid*/
      exit stack; /* Exit to display map*/
    end
  end

  if (converseVar.validationMsgNum == 0)
    PB0HM010.VAGen_EZEMSG = "PRESS PF9 TO SUBMIT THIS JOB";
  else
    PB0HM010.VAGen_EZEMSG = "                            ";
  end

  PB0H600(); /* Process the entered data*/

end // end PB0H080

Function PB0H100()
  /* GET DUMMY*/

   /* ------------------------------------------------------------*/
   /* Verify the PO REG CODE Entered and display its description.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty;
  VPOREG01.PO-REG-CD = PB0HM010.PC3POREG;
  VPOREG01.XGPCD = "01";
  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0HM010.PC3PORDE = VPOREG01.PO-REG-DESC;
      /* MOVE VPOREG01.PO-REG-CD TO PB0HW03.PC3POREG;*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      set PB0HM010.PC3POREG cursor, bold; /* Highlight field*/
      PB0HM010.XXXPRCNM = "PB0H400";
      converseLib.validationFailed(528); /* Indicate error message*/

      return; /* Return to previous process*/

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0H400"; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0HM010"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0HM010.XXXPRCNM = "PB0H400"; /* Process name*/

  exit stack; /* Return to previous process*/


end // end PB0H100

// DISPLAY SELECT MAP
Function PB0H200()


  if (converseVar.validationMsgNum == 0)

      /* NEXT SENTENCE*/

  else

    if (converseVar.validationMsgNum == 190
     && COMMAREA.CAMSG > " ") /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PB0HM010.XXXPRCNM = "PB0H200"; /* PROCESS NAME*/
      PB0HM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PB0HM010 alarm; /* Sound alarm*/

  end

  PB0HM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  converse PB0HM010 ;

  PB0H250(); /* POP UP window for Prod line category*/

end // end PB0H200

// Validate prod line category
Function PB0H250()

  if (PB0HM010.PB0HM-XPL-LNCD1 == "?") /* List requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PB0HM010.XXXPRCNM = "PB0H450"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD1 cursor, bold;
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    else
      XPXX001(); /* window initialization*/
      XX0XW02.XGPCD = "02"; /* GPC code*/
      XX0XW02.XX0XWHDR = " PRODUCT LINE"; /* Heading*/
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPL01(); /* Display the list*/
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    else
      PB0HM010.PB0HM-XPL-LNCD1 = XPLTBL.XPLCD[XX0XWPIX]; /* Selected cd*/
    end

    set PB0HM010.PB0HM-XPL-LNCD1 cursor; /* Establish cursor position*/
  end

  if (PB0HM010.PB0HM-XPL-LNCD2 == "?") /* List requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PB0HM010.XXXPRCNM = "PB0H450"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD2 cursor, bold;
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    else
      XPXX001(); /* window initialization*/
      XX0XW02.XGPCD = "02"; /* GPC code*/
      XX0XW02.XX0XWHDR = " PRODUCT LINE"; /* Heading*/
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPL01(); /* Display the list*/
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    else
      PB0HM010.PB0HM-XPL-LNCD2 = XPLTBL.XPLCD[XX0XWPIX]; /* Selected cd*/
    end

    set PB0HM010.PB0HM-XPL-LNCD2 cursor; /* Establish cursor position*/
  end

  if (PB0HM010.PB0HM-XPL-LNCD3 == "?") /* List requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PB0HM010.XXXPRCNM = "PB0H450"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD3 cursor, bold;
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    else
      XPXX001(); /* window initialization*/
      XX0XW02.XGPCD = "02"; /* GPC code*/
      XX0XW02.XX0XWHDR = " PRODUCT LINE"; /* Heading*/
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPL01(); /* Display the list*/
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    else
      PB0HM010.PB0HM-XPL-LNCD3 = XPLTBL.XPLCD[XX0XWPIX]; /* Selected cd*/
    end

    set PB0HM010.PB0HM-XPL-LNCD3 cursor; /* Establish cursor position*/
  end

  if (PB0HM010.PB0HM-XPL-LNCD4 == "?") /* List requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PB0HM010.XXXPRCNM = "PB0H450"; /* Module identification*/
      set PB0HM010.PB0HM-XPL-LNCD4 cursor, bold;
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    else
      XPXX001(); /* window initialization*/
      XX0XW02.XGPCD = "02"; /* GPC code*/
      XX0XW02.XX0XWHDR = " PRODUCT LINE"; /* Heading*/
      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXPL01(); /* Display the list*/
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    else
      PB0HM010.PB0HM-XPL-LNCD4 = XPLTBL.XPLCD[XX0XWPIX]; /* Selected cd*/
    end

    set PB0HM010.PB0HM-XPL-LNCD4 cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();

end // end PB0H250

// CHECK ATTENTION IDENTIFIERS
Function PB0H300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0HM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0HM010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0HM010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0HM010.XXXPRCNM = "PB0H300"; /* Process name*/
    end

    set PB0HM010.CATOAP cursor, bold; /* Highlight*/
    PB0HM010.XXXPRCNM = "PB0H300"; /* Process name*/
    return; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PB0HM010.XXXPRCNM = "PB0H300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PB0HM010.XXXPRCNM = "PB0H300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0HM010.XXXPRCNM = "PB0H300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0H300

Function PB0H400()
   /* ------------------------------------------------------------*/
   /* Edit PO Nbr key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = "02"; /* GPC cd*/
  VPOHDR02.PO-REG-CD = PB0HM010.PC3POREG; /* PO region*/
  VPOHDR02.PC3PONBR = PB0HM010.PC3PONBR; /* PO nbr*/


  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0HW03.PC-PO-NBR = PB0HM010.PC3PONBR;
      /* SET PB0HM010.PC4ORTYP PROTECT;*/


      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      set PB0HM010.PC3PONBR cursor, bold; /* Highlight field*/
      PB0HM010.XXXPRCNM = "PB0H400"; /* Process id*/
      converseLib.validationFailed(69); /* Indicate error message*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0H410"; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0HM010"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0HM010.XXXPRCNM = "PB0H410"; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0H400

// PROCESS THE VALID DATA
Function PB0H600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* PF9 pressed*/
   && converseVar.validationMsgNum == 0) /* No message*/
    PB0HW03.FY-FCTY-CD = "SS"; /* parm to indicate it is SS run*/

    if (PB0HM010.PB0HPOSF == "Y")
      PB0HW03.PC4ORTYP = "  ";
      PB0HW03.PC-PO-NBR = 0;
    end

    if (PB0HM010.PB0HPOSF == "N")
      PB0HW03.PC4ORTYP = PB0HM010.PC4ORTYP;
      PB0HW03.PC-PO-NBR = PB0HM010.PC3PONBR;
    end

    if (PB0HM010.PC4ORTYP == "SS")
      PB0HW03.PB0HW-XPL-LNCD-FLG = PB0HM010.PB0HM-XPL-LNCD-FLG;
      PB0HW03.PB0HW-XPL-LNCD1 = PB0HM010.PB0HM-XPL-LNCD1;
      PB0HW03.PB0HW-XPL-LNCD2 = PB0HM010.PB0HM-XPL-LNCD2;
      PB0HW03.PB0HW-XPL-LNCD3 = PB0HM010.PB0HM-XPL-LNCD3;
      PB0HW03.PB0HW-XPL-LNCD4 = PB0HM010.PB0HM-XPL-LNCD4;
    else
      PB0HW03.PB0HW-XPL-LNCD-FLG = "Y";
      PB0HW03.PB0HW-XPL-LNCD1 = " ";
      PB0HW03.PB0HW-XPL-LNCD2 = " ";
      PB0HW03.PB0HW-XPL-LNCD3 = " ";
      PB0HW03.PB0HW-XPL-LNCD4 = " ";
    end

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
      PB0H620(); /* format production jcl*/
    else
      PB0H621(); /* format development jcl*/
    end
    set PB0HW03 empty;

  end


end // end PB0H600

// SUBMIT THE JCL
Function PB0H620()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0HW02.PB0HWOIX = 0; /* Initialize over. index*/
  PB0HW02.PB0HWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0HW02.PB0HWLIX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    if (PB0HT01.TARTYPE[PB0HWLIX] == "P") /* parm statement*/
      TA6REC.TARJCL[TA6INDEX] = PB0HW03.PB0HWTBG;
      TA6REC.TARTYPE[TA6INDEX] = "P";
    else
      TA6REC.TARJCL[TA6INDEX] = PB0HT01.TARJCL[PB0HWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0HT01.TARTYPE[PB0HWLIX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0HT01.TARJCL[PB0HWLIX] == "/*EOF") /* End of table*/

      PB0HW02.PB0HWLIX = 0; /* Indicate end of table*/

    else

      PB0HW02.PB0HWLIX = PB0HW02.PB0HWLIX + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0HS96(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0HM010.XXXPRCNM = "PB0H620"; /* Process name*/
    PB0HM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0HM010.XXXPRCNM = "PB0H620"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0H620

// SUBMIT THE JCL
Function PB0H621()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0HW02.PB0HWOIX = 0; /* Initialize over. index*/
  PB0HW02.PB0HWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0HW02.PB0HWLIX > 0) /* Until end of table*/

    if (PB0HT11.TARTYPE[PB0HWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0HW03.PB0HWTBG; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0HT11.TARJCL[PB0HWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0HT11.TARTYPE[PB0HWLIX]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0HT11.TARJCL[PB0HWLIX] == "/*EOF") /* End of table*/

      PB0HW02.PB0HWLIX = 0; /* Indicate end of table*/

    else

      PB0HW02.PB0HWLIX = PB0HW02.PB0HWLIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0HS96(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0HM010.XXXPRCNM = "PB0H621"; /* Process name*/
    PB0HM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0HM010.XXXPRCNM = "PB0H621"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0H621

// SUBMIT JCL TO INTERNAL READER
Function PB0HS96()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PB0HM010.XXXPRCNM = "PB0HS96"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PB0HM010.XXXPRCNM = "PB0HS96"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0HM010.XXXPRCNM = "PB0HS96"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PB0HS96

//*** RECORD=PB0HW02 ****
// ************************************************************
// *
// *      JCL WORKING STORAGE FOR  Pb0h
// *
// *  DATE              USERID       COMMENTS
// * ________          _________    _______________________
// * 03/14/91          chaert       new record
// *
// * 06/02/98          vramac       Included key field for
// *                                Product line code check
// ************************************************************
// ***********************
Record PB0HW02 type basicRecord
  10 PB0HWJCE PB0HWJCE ; 
    15 PB0HWEX1 PB0HWEX1 ; 
    15 PB0HWPGM PB0HWPGM ; 
    15 * char(58) ; 
  10 PB0HWJCP PB0HWJCP ; 
  10 PB0HWTYP PB0HWTYP ; 
  10 PB0HWOVR PB0HWOVR [6] ; 
  10 PB0HWJCC PB0HWJCC [6] ; 
    15 * char(19) ; 
    15 PB0HWCLG PB0HWCLG ; 
    15 * char(36) ; 
  10 PB0HWOIX PB0HWOIX ; 
  10 PB0HWLIX PB0HWLIX ; 
  10 PB0HWKEY PB0HWKEY ; 
    15 PB0HWCD1 PB0HWCD1 ; 
    15 PB0HWCD2 PB0HWCD2 ; 
end // end PB0HW02

//*** RECORD=PB0HW03 ****
// This record is the same as COPYLIB member WPC1113
// ***********************
Record PB0HW03 type basicRecord
  10 PB0HWTBG PB0HWTBG ; 
    15 FY-FCTY-CD FY-FCTY-CD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 * int ; 
    15 * char(19) ; 
    15 * int ; 
    15 * num(4) ; 
    15 PC-PO-NBR PC-PO-NBR ; 
    15 PB0HW-XPL-LNCD-FLG PB0HW-XPL-LNCD-FLG ; 
    15 PB0HW-XPL-LNCD1 PB0HW-XPL-LNCD1 ; 
    15 PB0HW-XPL-LNCD2 PB0HW-XPL-LNCD2 ; 
    15 PB0HW-XPL-LNCD3 PB0HW-XPL-LNCD3 ; 
    15 PB0HW-XPL-LNCD4 PB0HW-XPL-LNCD4 ; 
    15 * char(30) ; 
end // end PB0HW03

// All Prod line category flg
DataItem PB0HW-XPL-LNCD-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem PB0HW-XPL-LNCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem PB0HW-XPL-LNCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem PB0HW-XPL-LNCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem PB0HW-XPL-LNCD4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code 1 for table edits
DataItem PB0HWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code 2 for table edits
DataItem PB0HWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition logic
DataItem PB0HWCLG char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute stat. constants
DataItem PB0HWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement
DataItem PB0HWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PB0HWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PB0HWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for table edits
DataItem PB0HWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line index
DataItem PB0HWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override index
DataItem PB0HWOIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override statement
DataItem PB0HWOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// program name
DataItem PB0HWPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table row
DataItem PB0HWTBG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl type
DataItem PB0HWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

