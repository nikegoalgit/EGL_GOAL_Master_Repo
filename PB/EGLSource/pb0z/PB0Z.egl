package pb0z;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import da.common.*;
import fy.common.*;
import pa.common.*;
import pc.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=PB0Z ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO SUBMIT THE REPORT FOR THE
// *   CUSTOMER CROSS-REFERENCE CHANGES. THE PARMS GPC CODE,
// *   DIVISION CODE AND  STATUS WILL BE PASSED TO PC101D.
// *
// *
// *   DATE     USERID  COMMENTS
// * ________  ________ _______________________________________
// * 01/05/98  DRAMMO   Created Application
// * 03/13/98  VRAMAC   Include the following parameter: Setup
// *                    date, Direct Ship Adj. days, Requested
// *                    time of Arrival Day, Delivery Analyst,
// *                    First 3 chars of Customer Xref(upto
// *                    5 separate fields) to parm file.
// ************************************************************
// *********************
Program PB0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0ZW01 PB0ZW01; // record
  PB0ZW02 PB0ZW02; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VDLVAN01 VDLVAN01; // record
  XCTHREC XCTHREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use PB0ZT01; // table
  use PB0ZT11; // table
  use PB0ZM.PB0ZM010,  // forms
      PB0ZM.TA0PM001, 
      PB0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* initialize records and maps*/
     /* ------------------------------------------------------------*/

    set PB0ZW02 empty; /* Initialize jcl working storage*/

    set ERRSQLCA empty; /* Initialize*/
    set SQLCA empty; /* Initialize*/

    set TA1REC empty; /* Initialize*/
    set XCTHREC empty; /* Initialize theater of ops record*/
    set TA6REC empty; /* Initialize Jcl record*/
    set TAEREC empty; /* Initialize*/

    set PB0ZM010 initial; /* Initialize map*/
    PB0ZM010.XGPCD = COMMAREA.XGPCD;

    PB0Z001: PB0Z001();
    goto PB0Z001;
  end // end main
end // end PB0Z

// main process
Function PB0Z001()
   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/

  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PB0ZM010.XXXPRCNM = "PB0Z001"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[2] == "Y") /* User can enter*/

    PB0Z002(); /* Report generation process*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* IF FOR SOME REASON THE USER IS NOT AUTHORIZED TO GET INTO*/
     /* THIS PROGRAM AND IS NOT AUTHORIZED TO GET TO THE PC0A MENU*/
     /* THE USER WILL BE KICKED OUT TO THE MAIN MENU. THIS WILL*/
     /* ALLOW THE PROGRAM TO TERMINATE AND NOT RESULT IN AN*/
     /* INFINITE LOOP.*/
    /* ------------------------------------------------------------*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end

end // end PB0Z001

// master menu
Function PB0Z002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0Z100(); /* Format and display the map*/

  PB0Z200(); /* Check attention identifier*/

  PB0Z300(); /* Reset fields to normal intensity*/

  PB0Z400(); /* Verify the data that was entered*/

  PB0Z500(); /* Process valid input request*/


end // end PB0Z002

// format and display the map
Function PB0Z100()
   /* ------------------------------------------------------------*/
   /* If no error to display, format the map output area.*/
   /* Indicate sound audible alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error message*/
   || converseVar.validationMsgNum == 190) /* Normal Return message*/

    if (PB0ZW02.PB0ZWMFF != "N") /* Map must be formated*/

      PB0ZW02.PB0ZWMFF = "N"; /* Set map format flag to no*/
      set PB0ZM010 initial; /* Clear map output area*/
      PB0ZM010.XXX-STATUS = "A"; /* Move status code*/
      PB0ZM010.XGPCD = PCWREC.XGPCD;
      if (PB0ZM010.XGPCD in XGPTBL.XGPCD)
        PB0ZM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end

    end

    PB0ZM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move Current date to map*/
    PB0ZM010.XXXPRCNM = "PB0Z"; /* Move application name to map*/
    PB0ZM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

  else

    set PB0ZM010 alarm; /* Indicate sound alarm*/

  end

  converse PB0ZM010 ;

  if (converseVar.eventKey is enter)

    PB0Z110(); /* Check for ? inquiry by user*/

  end
end // end PB0Z100

// Check for ? inquiry by user
Function PB0Z110()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                 /* GPC CODE TABLE WINDOW*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.XGPCD == "?") /* if ? in destination  code field*/
    XPXX001(); /* =========> perform pop-up window*/
                                 /* initialize*/
    XX0XW02.XX0XWHDR = "       GPC TABLE          "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform destination code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the data       **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0ZM010.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      if (PB0ZM010.XGPCD in XGPTBL.XGPCD)
        PB0ZM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
    else
      PB0ZM010.XGPCD = " "; /* ===> reset map field*/
      PB0ZM010.XGPDESC = " "; /* ===> reset map field*/
    end
    set PB0ZM010.XGPCD cursor; /* ===> reset map field*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();

end // end PB0Z110

// check attention identifiers
Function PB0Z200()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0ZM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0ZM010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0ZM010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0ZM010.XXXPRCNM = "PB0Z200"; /* Process name*/
    end

    set PB0ZM010.CATOAP cursor, bold; /* Highlight*/
    PB0ZM010.XXXPRCNM = "PB0Z200"; /* Process name*/
    return; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PB0ZM010.XXXPRCNM = "PB0Z200"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PB0ZM010.XXXPRCNM = "PB0Z200"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0ZM010.XXXPRCNM = "PB0Z200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0Z200

// reset highlighted fields
Function PB0Z300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0ZM010.XGPCD initialAttributes; /* General Product Class*/
  set PB0ZM010.XDVCD initialAttributes; /* Division Code*/
  set PB0ZM010.ZZZSDT initialAttributes; /* Setup Date*/
  set PB0ZM010.PO-DIR-SHP-ADJ-DY initialAttributes; /* Direct Ship Adjustment days*/
  set PB0ZM010.XCTRTADY initialAttributes; /* Requested Time of Arrival Day*/
  set PB0ZM010.PC-DLVR-ANALYST-CD initialAttributes; /* Delivery Analyst*/
  set PB0ZM010.PC-PRDCU-ID1 initialAttributes; /* Xref Mask 1*/
  set PB0ZM010.PC-PRDCU-ID2 initialAttributes; /* Xref Mask 2*/
  set PB0ZM010.PC-PRDCU-ID3 initialAttributes; /* Xref Mask 3*/
  set PB0ZM010.PC-PRDCU-ID4 initialAttributes; /* Xref Mask 4*/
  set PB0ZM010.PC-PRDCU-ID5 initialAttributes; /* Xref Mask 5*/
  set PB0ZM010.XXX-STATUS initialAttributes; /* Status Code*/
  set PB0ZM010.CATOAP initialAttributes; /* FAST PATH to application*/
  set PB0ZM010.CAITEM initialAttributes; /* FAST PATH application data*/

end // end PB0Z300

// verify data that was entered
Function PB0Z400()
   /* ------------------------------------------------------------*/
   /* Verify the values entered.*/
   /* Exit to redisplay the map if any error was found.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Validate GPC code*/
   /* ------------------------------------------------------------*/

  PB0Z410(); /* Verify the GPC code*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* Validate Division code*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.XDVCD != "  "
   && PB0ZM010.XDVCD != 10
   && PB0ZM010.XDVCD != 20)
    PB0ZM010.XXXPRCNM = "PB0Z400"; /* Module identification*/
    converseLib.validationFailed(50); /* Division Code invalid*/
    set PB0ZM010.XDVCD cursor, bold; /* Highlight*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate Setup Date*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.ZZZSDT > 0) /* If ZZ_SDT is entered*/
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGG = PB0ZM010.ZZZSDT;
    PB0ZS01(); /* edit date range*/

    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(38); /* Indicate missing or invalid*/
      set PB0ZM010.ZZZSDT cursor, bold; /* Hightlight*/
      PB0ZM010.XXXPRCNM = "PB0Z400"; /* Process name*/
    else
      PB0ZW02.PB0ZWSDT = VGVar.currentGregorianDate;
      if (TA2REC.TA2GRGGN >= PB0ZW02.PB0ZWSDT)
        converseLib.validationFailed(38); /* Indicate ZZ-SDT should not be later*/
                                   /* than today*/
        set PB0ZM010.ZZZSDT cursor, bold; /* Hightlight*/
        PB0ZM010.XXXPRCNM = "PB0Z400"; /* Process name*/
      else
        PB0ZW02.PB0ZWSDT = PB0ZM010.ZZZSDT;
        if (PB0ZW02.PB0ZWSCC == 0)
          converseLib.validationFailed(38); /* Indicate missing or invalid*/
          set PB0ZM010.ZZZSDT cursor, bold; /* Hightlight*/
          PB0ZM010.XXXPRCNM = "PB0Z400"; /* Process name*/
        end
      end
    end
  else
    if (PB0ZM010.ZZZSDT < 0) /* If ZZ_SDT is entered*/
      converseLib.validationFailed(38); /* Indicate missing or invalid*/
      set PB0ZM010.ZZZSDT cursor, bold; /* Hightlight*/
      PB0ZM010.XXXPRCNM = "PB0Z400"; /* Process name*/
    end
  end


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate Direct Ship Adjustment Days (DSAD)*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.PO-DIR-SHP-ADJ-DY < 0)
    /* OR PB0ZM010.PO-DIR-SHP-ADJ-DY NE ' ';*/
    PB0ZM010.XXXPRCNM = "PB0Z400"; /* Module identification*/
    converseLib.validationFailed(172); /* DSAD is invalid*/
    set PB0ZM010.PO-DIR-SHP-ADJ-DY cursor, bold; /* Highlight*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate Requested Time of Arrival Day (RTA)*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.XCTRTADY < 0)
    /* OR PB0ZM010.XCT-RTA-DY NE ' ';*/
    PB0ZM010.XXXPRCNM = "PB0Z400"; /* Module identification*/
    converseLib.validationFailed(172); /* RTA is invalid*/
    set PB0ZM010.XCTRTADY cursor, bold; /* Highlight*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate Delivery Analyst & Xref Mask(s)*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.PC-DLVR-ANALYST-CD != "  "
   && (PB0ZM010.PC-PRDCU-ID1 != " "
   || PB0ZM010.PC-PRDCU-ID2 != " "
   || PB0ZM010.PC-PRDCU-ID3 != " "
   || PB0ZM010.PC-PRDCU-ID4 != " "
   || PB0ZM010.PC-PRDCU-ID5 != " "))
    PB0ZM010.XXXPRCNM = "PB0Z400"; /* Module identification*/
    converseLib.validationFailed(547); /* Field cannot have value if any xref*/
                                   /* Mask are entered or vice versa*/
    set PB0ZM010.PC-DLVR-ANALYST-CD cursor, bold; /* Highlight*/
    set PB0ZM010.PC-PRDCU-ID1 cursor, bold; /* Highlight*/
    set PB0ZM010.PC-PRDCU-ID2 cursor, bold; /* Highlight*/
    set PB0ZM010.PC-PRDCU-ID3 cursor, bold; /* Highlight*/
    set PB0ZM010.PC-PRDCU-ID4 cursor, bold; /* Highlight*/
    set PB0ZM010.PC-PRDCU-ID5 cursor, bold; /* Highlight*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0ZM010.PC-DLVR-ANALYST-CD != "  ") /* Deliv Analyst cd is entered*/
    PB0Z420(); /* Select all Xrefs for Delv Analyst*/
    if (converseVar.validationMsgNum != 0) /* Error was found*/
      exit stack; /* Exit to redisplay map*/
    else
      PB0Z421(); /* Fetch Xrefs for Delv Analyst*/
    end

    if (converseVar.validationMsgNum != 0) /* Error was found*/
      exit stack; /* Exit to redisplay map*/
    else
      PB0Z422(); /* Close Xrefs for Delv Analyst*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate status.*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.XXX-STATUS != "A"
   && PB0ZM010.XXX-STATUS != "I"
   && PB0ZM010.XXX-STATUS != " ")
    PB0ZM010.XXXPRCNM = "PB0Z400"; /* Module identification*/
    converseLib.validationFailed(37); /* Status invalid*/
    set PB0ZM010.XXX-STATUS cursor, bold; /* Highlight*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* If Pf9 was pressed dont display the message*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
  )
    return;

  else

    if (converseVar.validationMsgNum == 0)
      PB0ZM010.VAGen_EZEMSG = "PRESS PF9 TO SUBMIT THIS JOB";
    else
      PB0ZM010.VAGen_EZEMSG = "                            ";
    end

  end

end // end PB0Z400

// Verify the gpc code entered
Function PB0Z410()
   /* ------------------------------------------------------------*/
                  /* VERIFY THE GPC CODE ENTERED*/
   /* ------------------------------------------------------------*/

  if (PB0ZM010.XGPCD == " ") /* if general product is blank*/
    converseLib.validationFailed(28); /* Display error message*/
    PB0ZM010.XXXPRCNM = "PB0Z410"; /* Process name*/
    set PB0ZM010.XGPCD cursor, modified, bold; /* highlight field*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0ZM010.XGPCD in XGPTBL.XGPCD) /* Check valid code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XGPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(28); /* Display error message*/
      PB0ZM010.XXXPRCNM = "PB0Z410"; /* Process name*/
      set PB0ZM010.XGPCD cursor, modified, bold; /* highlight field*/
    else /* Save gpc code*/
      PCWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
      if (PCWREC.XGPCD in XGPTBL.XGPCD)
        PB0ZM010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
    end
  end


end // end PB0Z410

// Select set and open cursor
Function PB0Z420()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VDLVAN01 empty; /* initialize*/

  VDLVAN01.PC_DLVR_ANALYST_CD = PB0ZM010.PC-DLVR-ANALYST-CD; /* Indicate DA*/
  VDLVAN01.XPRCD = "01"; /* Indicate XPR-PROD-TYP-CD*/
  VDLVAN01.XPCCD = "**"; /* Indicate XPC-PROD-CAT-CD*/
  VDLVAN01.XXXSTAT = "A"; /* Indicate XXX-STATUS*/

  try
    call "VDLVAN01" ("S3", SQLCA, VDLVAN01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0Z420"; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN01"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN01.PT8KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PB0ZM010.XXXPRCNM = "PB0Z420"; /* Process name*/

      return; /* Return to previous process*/

    end
  else /* call to VDLVAN01 unsuccessfull*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0Z420"; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN01"; /* Table view name*/
      TA1REC.TA1TBLKE = VDLVAN01.PT8KEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    end
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0Z420"; /* Error location*/
    TA1REC.TA1LOC = "S3 CALL TO VDLVAN01";
    TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PB0ZM010.XXXPRCNM = "PB0Z420"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    return; /* Return to previous process*/
  end


end // end PB0Z420

// Fetch next row and format
Function PB0Z421()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VDLVAN01" ("N3", SQLCA, VDLVAN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    converseLib.validationFailed(548); /* No data found for this Deliv. Analyst*/
    PB0ZM010.XXXPRCNM = "PB0Z421"; /* Process name*/
    set PB0ZM010.PC-DLVR-ANALYST-CD cursor, bold; /* Highlight*/
    PB0Z422(); /* Close Xrefs for Delv Analyst*/
    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000") /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0Z421"; /* Error location*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDLVAN01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      PB0ZM010.XXXPRCNM = "PB0Z421"; /* Process name*/

      return; /* Return to previous process*/

    end

  else /* call to VDLVAN01 no-good*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = "PB0Z421"; /* Error location*/
    TA1REC.TA1LOC = "N3 CALL TO VDLVAN01";
    TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* start over*/

  end

end // end PB0Z421

// Close selected set cursor
Function PB0Z422()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VDLVAN01" ("C3", SQLCA, VDLVAN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000")

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0Z422"; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "PB0ZM010"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDLVAN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PB0ZM010.XXXPRCNM = "PB0Z422"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PB0Z422

// prodess the valid data
Function PB0Z500()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9 /* PF9 not pressed*/
   || converseVar.validationMsgNum != 0) /* we have a message*/

    return; /* return to top of job*/

  else

    PB0ZW01.SPL-RUN-IND = "D"; /* parm to indicate it is special run*/
    PB0ZW01.XGP-GPC-CD = PB0ZM010.XGPCD;
    PB0ZW01.XDVCD = PB0ZM010.XDVCD;
    PB0ZW01.ZZZSDT = PB0ZM010.ZZZSDT;
    PB0ZW01.PO-DIR-SHP-ADJ-DY = PB0ZM010.PO-DIR-SHP-ADJ-DY;
    PB0ZW01.XCTRTADY = PB0ZM010.XCTRTADY;
    PB0ZW01.PC-DLVR-ANALYST-CD = PB0ZM010.PC-DLVR-ANALYST-CD;
    PB0ZW01.PC-PRDCU-CD[1] = PB0ZM010.PC-PRDCU-ID1;
    PB0ZW01.PC-PRDCU-CD[2] = PB0ZM010.PC-PRDCU-ID2;
    PB0ZW01.PC-PRDCU-CD[3] = PB0ZM010.PC-PRDCU-ID3;
    PB0ZW01.PC-PRDCU-CD[4] = PB0ZM010.PC-PRDCU-ID4;
    PB0ZW01.PC-PRDCU-CD[5] = PB0ZM010.PC-PRDCU-ID5;
    PB0ZW01.XXX-STATUS = PB0ZM010.XXX-STATUS;

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
      PB0Z510(); /* format production jcl*/
    else
      PB0Z520(); /* format development jcl*/
    end
    set PB0ZW02 empty;

  end


end // end PB0Z500

// submit the JCL
Function PB0Z510()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0ZW02.PB0ZWOIX = 0; /* Initialize over. index*/
  PB0ZW02.PB0ZWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0ZW02.PB0ZWLIX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    if (PB0ZT01.TARTYPE[PB0ZWLIX] == "P") /* parm statement*/
      TA6REC.TARJCL[TA6INDEX] = PB0ZW01.PARM-REC;
      TA6REC.TARTYPE[TA6INDEX] = "P";
    else
      TA6REC.TARJCL[TA6INDEX] = PB0ZT01.TARJCL[PB0ZWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0ZT01.TARTYPE[PB0ZWLIX]; /* Type*/
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0ZT01.TARJCL[PB0ZWLIX] == "/*EOF") /* End of table*/

      PB0ZW02.PB0ZWLIX = 0; /* Indicate end of table*/

    else

      PB0ZW02.PB0ZWLIX = PB0ZW02.PB0ZWLIX + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0ZS96(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0ZM010.XXXPRCNM = "PB0Z510"; /* Process name*/
    PB0ZM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0ZM010.XXXPRCNM = "PB0Z510"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0Z510

// submit the JCL
Function PB0Z520()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PB0ZW02.PB0ZWOIX = 0; /* Initialize over. index*/
  PB0ZW02.PB0ZWLIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PB0ZW02.PB0ZWLIX > 0) /* Until end of table*/

    if (PB0ZT11.TARTYPE[PB0ZWLIX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0ZW01.PARM-REC; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PB0ZT11.TARJCL[PB0ZWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PB0ZT11.TARTYPE[PB0ZWLIX]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PB0ZT11.TARJCL[PB0ZWLIX] == "/*EOF") /* End of table*/

      PB0ZW02.PB0ZWLIX = 0; /* Indicate end of table*/

    else

      PB0ZW02.PB0ZWLIX = PB0ZW02.PB0ZWLIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PB0ZS96(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PB0ZM010.XXXPRCNM = "PB0Z520"; /* Process name*/
    PB0ZM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PB0ZM010.XXXPRCNM = "PB0Z520"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PB0Z520

Function PB0ZS01()

   /* ------------------------------------------------------------*/
   /* validate/format of CCYYMMDD.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || TA2REC.TA2RTNCD >= 888)        /* and subroutine completed*/

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "PB0ZS01 DATE EDIT CCYYMMDD";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PB0ZM010.XXXPRCNM = "PB0ZS01"; /* Module identification*/
    converseLib.validationFailed(10); /* System error occurred*/

    exit stack; /* exit to display map*/

  end
end // end PB0ZS01

// submit JCL to internal reader
Function PB0ZS96()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PB0ZM010.XXXPRCNM = "PB0ZS96"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PB0ZM010.XXXPRCNM = "PB0ZS96"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PB0ZM010.XXXPRCNM = "PB0ZS96"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PB0ZS96

//*** RECORD=PB0ZW01 ****
// This record is the same as COPYLIB member WPC1011
// ***********************
Record PB0ZW01 type basicRecord
  10 PARM-REC PARM-REC ; 
    15 SPL-RUN-IND SPL-RUN-IND ; 
    15 XGP-GPC-CD XGP-GPC-CD ; 
    15 XDVCD XDVCD ; 
    15 ZZZSDT ZZZSDT ; 
    15 PO-DIR-SHP-ADJ-DY PO-DIR-SHP-ADJ-DY ; 
    15 XCTRTADY XCTRTADY ; 
    15 PC-DLVR-ANALYST-CD PC-DLVR-ANALYST-CD ; 
    15 PC-PRDCU-CD PC-PRDCU-CD [5] ; 
    15 XXX-STATUS XXX-STATUS ; 
    15 * char(49) ; 
end // end PB0ZW01

//*** RECORD=PB0ZW02 ****
// ************************************************************
// *
// *      JCL WORKING STORAGE FOR  PB0Z
// *
// *  DATE              USERID       COMMENTS
// * ________          _________    _______________________
// * 01/02/98          DRAMMO       created new record
// *
// * 05/06/98          VRAMAC       Added PB0ZWSDT for today's
// *                                verification
// ************************************************************
// ***********************
Record PB0ZW02 type basicRecord
  10 PB0ZWJCE PB0ZWJCE ; 
    15 PB0ZWEX1 PB0ZWEX1 ; 
    15 PB0ZWPGM PB0ZWPGM ; 
    15 * char(58) ; 
  10 PB0ZWJCP PB0ZWJCP ; 
  10 PB0ZWTYP PB0ZWTYP ; 
  10 PB0ZWOVR PB0ZWOVR [6] ; 
  10 PB0ZWJCC PB0ZWJCC [6] ; 
    15 * char(19) ; 
    15 PB0ZWCLG PB0ZWCLG ; 
    15 * char(36) ; 
  10 PB0ZWOIX PB0ZWOIX ; 
  10 PB0ZWLIX PB0ZWLIX ; 
  10 PB0ZWMFF PB0ZWMFF ; 
  10 PB0ZWSDT PB0ZWSDT ; 
    15 PB0ZWSCC PB0ZWSCC ; 
    15 PB0ZWYMD PB0ZWYMD ; 
end // end PB0ZW02

//*** RECORD=VDLVAN01 ****
// ******* DELIVERY ANALYST ***********************************
// 
// DB2 TABLE:           DPRODC.VDLVAN01
// 
// COPYLIB MEMBER:      DDLVAN01
// 
// I/O MOD:             VDLVAN01
// 
// KEY TO DB2 TABLE:    PCDLVACD      PC_DLVR_ANALYST_CD
// 
// DATE CREATED:        05/30/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 05/30/97  IDICKI     INITIAL RECORD CREATION
// 
// ************************************************************
// ************************
Record VDLVAN01 type basicRecord
  5 DANGROUP DANGROUP ; 
    10 PT8KEY PT8KEY ; 
      15 PC_DLVR_ANALYST_CD PC_DLVR_ANALYST_CD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 PC_WHSE_TYP_CD PC_WHSE_TYP_CD ; 
    10 XXXSTAT XXXSTAT ; 
    10 PC2CUXID PC2CUXID ; 
    10 FY-FLD-OFC-CD FY-FLD-OFC-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VDLVAN01

// Condition logic
DataItem PB0ZWCLG char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute stat. constants
DataItem PB0ZWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement
DataItem PB0ZWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PB0ZWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PB0ZWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line index
DataItem PB0ZWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map format flag
DataItem PB0ZWMFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override index
DataItem PB0ZWOIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override statement
DataItem PB0ZWOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// program name
DataItem PB0ZWPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date - cc
DataItem PB0ZWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working date - ccyymmdd
DataItem PB0ZWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl type
DataItem PB0ZWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date - yymmdd
DataItem PB0ZWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XGP_GPC_CD
DataItem PC-DLVR-ANALYST-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-PRDCU-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special run indicator
DataItem SPL-RUN-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status
DataItem XXX-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

