package pb0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0D ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//          inquiry by blank p.o./stock transfer number
// 
//   This program is for apparel users only.  Access from the
// production orders menu (PC0A, Option 6) will be allowed
// only for GPC code '03'.  It is intended for those users
// working with tee shirts and other screened apparel.
// 
//   This program has a selection screen and two list screens
// to provide online a cross-reference of finished good PO
// items associated with a particular 'blank' PO or stock
// transfer number.  Identifying information and the order
// quantity by size is shown for each item, along with sub-
// totals by style/color and totals by factory.  All items
// displayed will have the same blank style/color.
// 
//    The user will enter the 'blank' P.O. and/or inventory
// stock transfer number, plus any limiting selection criteria,
// and press <ENTER>.  When the list of selected items is
// displayed, the user may then press PF11 to scroll right for
// additional information about those items, or they may enter
// an 'S' in the left-hand column of any items they wish to
// select for other functions.  To transfer to PC0K, press
// <ENTER> for item inquiry or PF12 for item maintenance. To
// transfer to PC0U to display 'balance to ship' information,
// select one item and press PF17.
// 
// 
// 
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// 
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 04/01/91   PPETER   New Application
// 06/10/97   PHARWO   PCA367 - PPR project - P.O. views
// 07/10/97   jniese   PCA367 - PPR corrections
// *********************
Program PB0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  PB0DW00 PB0DW00; // record
  PB0DW01 PB0DW01; // record
  PB0DW02 PB0DW02; // record
  PB0DW03 PB0DW03; // record
  PB0DW04 PB0DW04; // record
  PB0DW05 PB0DW05; // record
  PB0DW06 PB0DW06; // record
  PB0DW07 PB0DW07; // record
  PBAREC PBAREC; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PB0DM.PB0DM001,  // forms
      PB0DM.PB0DM002, 
      PB0DM.PB0DM003, 
      PB0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0DM001 initial;
    set PB0DM002 initial;
    set PB0DM003 initial;
    set PB0DW00 empty;
    set PB0DW01 empty;
    set PB0DW02 empty;
    set PB0DW03 empty;
    set PB0DW04 empty;
    set PB0DW05 empty;
    set PB0DW06 empty;
    set PB0DW07 empty;
    set PBAREC empty;
    set PC2REC empty;
    set VPOHDR02 empty;
    set VPOITM03 empty;
    set VPOSIZ02 empty;
    set PCYREC empty;
    set FY1REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set YSMREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PB0DW00.PB0DWSWR = "Y"; /* ===>request for data*/
    PB0DW00.PB0DWSWF = "Y"; /* ===>format map switch*/
    PB0DW00.PB0DWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PB0DW00.PB0DWMOD = "N"; /* ===>MODified data flag*/
    PB0DW00.PB0DWMLT = "N"; /* ===>Multiple styles flag*/
    PB0DW00.PB0DWMXL = 12; /* ===>Max data lines per page*/

     /* ------------------------------------------------------------*/
     /* Establish the temporary storage queue page length.*/
     /* ------------------------------------------------------------*/

    PB0DW00.XXXTSLEN = 2452; /* Temporary storage page length*/
     /* (12 display lines) * (204 length of display line) +4 = 2452*/


     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[3] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0DW00.PB0DWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end


    if (PCWREC.XGPCD != "03")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138; /* only gpc '03' is valid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PB0DW00.PB0DWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end



     /* ------------------------------------------------------------*/
     /* Load the PC system common pass data to the selection map*/
     /* and the selection map display record & Set requested map*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PC0K"
     || COMMAREA.CAFROMAP == "PC0U")

      /* ------------------------------------------------------------*/
      /* %GET XSPC003*/
       /* On reentry into your applicaton from a 'called'*/
       /* application find your appl id in the cafrommap*/
       /* array and use the corresponding pcwuser(n). Move*/
       /* spaces to the  cafromap field containing the name of*/
       /* the 'called' application.*/
      /* ------------------------------------------------------------*/

      if (PCWREC.CAFROMAP[1] == "PB0D")
        PB0DW04.PB0DWUSR = PCWREC.PCWUSER1;
        PCWREC.CAFROMAP[1] = " ";
        PCWREC.PCWUSER1 = " ";
        move PB0DW04 to PB0DW00 byName; /* move corr, DB2 functions,page, map*/
                                     /* nbr*/
        move PB0DW04 to PB0DW01 byName; /* move corr, saved map 1 selection criteria*/
        move PB0DW04 to PB0DM001 byName; /* move corr, saved map 1 entries*/
        PB0DW00.PB0DWSB1 = PB0DW04.SY1BSTNB; /* Blank style selected*/
        PB0DW00.PB0DWSB2 = PB0DW04.SY2BCLCD; /* Blank color selected*/
        PB0DW00.PB0DWSB3 = PB0DW04.PB0DWBDM; /* Blank dim selected*/

      else
        if (PCWREC.CAFROMAP[2] == "PB0D")
          PB0DW04.PB0DWUSR = PCWREC.PCWUSER2;
          PCWREC.CAFROMAP[2] = " ";
          PCWREC.PCWUSER2 = " ";
          move PB0DW04 to PB0DW00 byName; /* move corr, DB2 functions,page, map*/
                                     /* nbr*/
          move PB0DW04 to PB0DW01 byName; /* move corr, saved map1 sel criteria*/
          move PB0DW04 to PB0DM001 byName; /* move corr, saved map 1 entries*/
          PB0DW00.PB0DWSB1 = PB0DW04.SY1BSTNB; /* Blank style selected*/
          PB0DW00.PB0DWSB2 = PB0DW04.SY2BCLCD; /* Blank color selected*/
          PB0DW00.PB0DWSB3 = PB0DW04.PB0DWBDM; /* Blank dim selected*/

        else
          if (PCWREC.CAFROMAP[3] == "PB0D")
            PB0DW04.PB0DWUSR = PCWREC.PCWUSER3;
            PCWREC.CAFROMAP[3] = " ";
            PCWREC.PCWUSER3 = " ";
            move PB0DW04 to PB0DW00 byName; /* move corr, DB2 functions,page, map*/
                                     /* nbr*/
            move PB0DW04 to PB0DW01 byName; /* move corr, saved map1 sel criteria*/
            move PB0DW04 to PB0DM001 byName;
                                     /* move corr, saved map 1 entries*/
            PB0DW00.PB0DWSB1 = PB0DW04.SY1BSTNB;
                                     /* Blank style selected*/
            PB0DW00.PB0DWSB2 = PB0DW04.SY2BCLCD;
                                     /* Blank color selected*/
            PB0DW00.PB0DWSB3 = PB0DW04.PB0DWBDM; /* Blank dim selected*/

          else
            if (PCWREC.CAFROMAP[4] == "PB0D")
              PB0DW04.PB0DWUSR = PCWREC.PCWUSER4;
              PCWREC.CAFROMAP[4] = " ";
              PCWREC.PCWUSER4 = " ";
              move PB0DW04 to PB0DW00 byName; /* move corr, DB2 functions,page, map*/
                                     /* nbr*/
              move PB0DW04 to PB0DW01 byName; /* move corr, saved map1 sel criteria*/
              move PB0DW04 to PB0DM001 byName;
                                     /* move corr, saved map 1 entries*/
              PB0DW00.PB0DWSB1 = PB0DW04.SY1BSTNB;
                                     /* Blank style select*/
              PB0DW00.PB0DWSB2 = PB0DW04.SY2BCLCD;
                                     /* Blank color select*/
              PB0DW00.PB0DWSB3 = PB0DW04.PB0DWBDM; /* Blank dim select*/

            else
              move PCWREC to PB0DW01 byName; /* move corr pass data to selection rec*/
              move PB0DW01 to PB0DM001 byName; /* move corr to map 1 selection screen*/
              PB0DW00.PB0DWSWM = 1; /* request map 1*/
              PB0DW00.XXXTSPAG = 0; /* init temp storage page nbr*/

            end
          end
        end
      end


      if (PB0DW04.PB0DWSWM < "1"
       || PB0DW04.PB0DWSWM > "3")
        PB0DW00.PB0DWSWM = "1"; /* ===>set  requested select map*/
        PB0DW04.XXXTSPAG = 0; /* ===>set  requested page*/
      end

      if (PB0DW04.PB0DWSWM == "2")
        PB0DW00.PB0DWSWM = "2"; /* ===>set  requested left map*/
      end

      if (PB0DW04.PB0DWSWM == "3")
        PB0DW00.PB0DWSWM = "3"; /* ===>set requested right map*/
      end

    else /* ===> not from (PC0K,PC0U)*/

      if (COMMAREA.XGPCD == "03")
        PB0DM001.XGPCD = COMMAREA.XGPCD;
        PB0DW01.XGPCD = COMMAREA.XGPCD;
        PB0DW00.PB0DWSWM = "1"; /* set requested select map*/
      end

    end /* ===> from (PC0K,PC0U)*/



     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0D001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PB0D001: PB0D001();
    goto PB0D001;
  end // end main
end // end PB0D

// Application main line
Function PB0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (PB0DW00.PB0DWXIT == "Y")

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/
    set PB0DM001 initial;
    set PB0DM001.CATOAP cursor, bold; /* Highlight*/
    set PB0DW01 empty; /* ==>reset map display record*/
    PB0DW01.XGPCD = COMMAREA.XGPCD;
    PB0DW00.PB0DWSWM = "1"; /* Map 1 was requested*/

  end


  if (PB0DW00.PB0DWSWM == "1") /* Map 1 was requested*/

    PB0DW00.PB0DWSWR = "Y"; /* Set request for data switch*/
    PB0D100(); /* ===> process Display map 1*/

  else

    if (PB0DW00.PB0DWSWM == "2" /* ===> Map 2 was requested*/
     || PB0DW00.PB0DWSWM == "3") /* ===> Map 3 was requested*/

      PB0D200(); /* ===> process Display map 2 or 3 logic*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PB0DW00.XXXPRCNM = "PB0D001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PB0DW00.PB0DWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PB0DW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PB0DW00.PB0DWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of pb0d001 ***********************/
end // end PB0D001

// ========>Process map 1 logic
Function PB0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0D120(); /* Format and display the map*/

  PB0D130(); /* Check attention identifier*/

  PB0D140(); /* Reset fields to normal intensity*/

  PB0D150(); /* Verify the entered data*/

  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0)
    PB0D190(); /* Process valid input request*/
  end


   /* **                                                        ***/
   /* ********************** End of pb0d100 ***********************/
end // end PB0D100

// -->Format and converse the map
Function PB0D120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0DW00.PB0DWSWF == "Y") /* Map must be formatted*/

      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the data in the map from the display storage.*/
      /* ------------------------------------------------------------*/

      PB0DM001.XGPCD = PB0DW01.XGPCD; /* GPC code*/

      PB0DM001.PC6STAT = "OP"; /* status*/
      PB0DW01.PC6STAT = "OP"; /* status*/
      PB0DM001.XDMCD = "00"; /* FG style dimension default*/
      PB0DW01.XDMCD = "00"; /* FG style dimension default*/
      PB0DM001.PB0DWBDM = "00"; /* Blank style dimension default*/
      PB0DW01.PB0DWBDM = "00"; /* Blank style dimension default*/

    end

  else /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0DM001.XXXPRCNM = PB0DW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0DM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0DM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0DW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0D121(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0DM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of pb0d120 ***********************/
end // end PB0D120

// Check for ? inquiry by user
Function PB0D121()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0DM001.PC6STAT == "?" /* ===> if any ? entered*/
   || PB0DM001.XWHCD == "?"   
   || PB0DM001.XDMCD == "?"   
   || PB0DM001.XQACD == "?"   
   || PB0DM001.XOWCD == "?") 



    /* ------------------------------------------------------------*/
             /* STATUS CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.PC6STAT == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  STATUS CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPU01(); /* perform status code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0DM001.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      else
        PB0DM001.PC6STAT = PB0DW01.PC6STAT; /* ===> reset map field*/
      end
      set PB0DM001.PC6STAT cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0DM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PB0DM001.XWHCD = PB0DW01.XWHCD; /* ===> reset map field*/
      end
      set PB0DM001.XWHCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* DIMENSION TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIMENSION TABLE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0DM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PB0DM001.XDMCD = PB0DW01.XDMCD; /* ===> reset map field*/
      end
      set PB0DM001.XDMCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* QUALITY TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0DM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        PB0DM001.XQACD = PB0DW01.XQACD; /* ===> reset map field*/
      end
      set PB0DM001.XQACD cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
            /* OWNER GROUP CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.XOWCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window initialize*/

      XX0XW02.XX0XWHDR = " OWNER GROUP CODE TABLE "; /* heading*/

      if (PB0DM001.XWHCD == " ") /* if no whse entered*/
        XX0XW02.XWHCD = "51"; /* use whse '51'*/
      else
        XX0XW02.XWHCD = PB0DM001.XWHCD; /* whse entered*/
      end

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0DM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
      else
        PB0DM001.XOWCD = PB0DW01.XOWCD; /* ===> reset map field*/
      end
      set PB0DM001.XOWCD cursor; /* ===> reset map field*/
    end


    converseLib.clearScreen();
     /* restore the original map*/

    converseLib.validationFailed(84); /* ===> press same key to process data*/

    exit stack; /* =====> exit to  display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d121 ***********************/
end // end PB0D121

// -->Check attention identifier
Function PB0D130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/
      set PB0DM001 initial;
      set PB0DM001.CATOAP cursor, bold; /* Highlight*/
      set PB0DW01 empty; /* ==>reset map display record*/
      PB0DW01.XGPCD = COMMAREA.XGPCD;
      PB0DW00.XXXPRCNM = "PB0D130"; /* Module identification*/

    else

      PB0DW00.XXXPRCNM = "PB0D130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5) /* or PF5  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0DM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end


    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/

    set PB0DM001 initial;
    set PB0DM001.CATOAP cursor, bold; /* Highlight*/
    PB0DW01.XGPCD = COMMAREA.XGPCD;
    PB0DW00.XXXPRCNM = "PB0D130"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0DW00.XXXPRCNM = "PB0D130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d130 ***********************/
end // end PB0D130

// -->Reset highlighted fields
Function PB0D140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0DM001.XGPCD initialAttributes; /* GPC code*/
  set PB0DM001.PC3BLPO initialAttributes; /* 'Blank' P.O. nbr*/
  set PB0DM001.IN7STNBR initialAttributes; /* Stock transfer nbr*/
  set PB0DM001.SY1BSTNB initialAttributes; /* 'Blank' style code*/
  set PB0DM001.SY2BCLCD initialAttributes; /* 'Blank' color code*/
  set PB0DM001.PB0DWBDM initialAttributes; /* 'Blank' dimension code*/

  set PB0DM001.FY1FCTYC initialAttributes; /* ====> factory code*/
  set PB0DM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
  set PB0DM001.XOWCD initialAttributes; /* owner group code*/
  set PB0DM001.XWHCD initialAttributes; /* warehouse code*/
  set PB0DM001.PC2CUXID initialAttributes; /* customer xref id*/
  set PB0DM001.PC6PLAN initialAttributes; /* plan code*/
  set PB0DM001.PC6STAT initialAttributes; /* status code*/

  set PB0DM001.SY1STNBR initialAttributes; /* style number*/
  set PB0DM001.SY2CLRID initialAttributes; /* color code*/
  set PB0DM001.XDMCD initialAttributes; /* dimension code*/
  set PB0DM001.XQACD initialAttributes; /* quality code*/

  set PB0DM001.YSMXDV initialAttributes; /* ====> Division Code*/

  set PB0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0DM001.CAITEM initialAttributes; /* Commarea application data*/


   /* **                                                        ***/
   /* ********************** End of pb0d140 ***********************/
end // end PB0D140

// -->Verify the entered data
Function PB0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0DW00.XXXPRCNM = "PB0D150"; /* Module identification*/
    set PB0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If division changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWMOD = "Y"; /* ===> data modified*/

  if (PB0DM001.YSMXDV > " ")
    PB0D151(); /* ===========> Verify division code*/
  else
    PB0DW01.YSMXDV = PB0DM001.YSMXDV;
  end

   /* ------------------------------------------------------------*/
   /* If quality was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XQACD > " ") /* quality code*/
    PB0D152(); /* ===========> Verify quality code*/
  else
    PB0DW01.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If Fin Good dimension changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XDMCD > " ") /* dimension code*/
    PB0D156(); /* ===========> Verify dimension code*/
  else
    PB0DW01.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If Fin Good color code changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY2CLRID > " "
   || PB0DM001.SY1STNBR > " ")
    PB0D157(); /* =========> Verify color code*/
  else
    PB0DW01.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* If Fin Good style code changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY1STNBR > " ")
    PB0D158(); /* =========> Verify style code*/
  else
    PB0DW01.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* If Status was changed, load map display record.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC6STAT > " ")
    PB0D161(); /* =========> Verify warehouse code*/
  else
    PB0DW01.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
   /* If Plan was changed, load map display record.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC6PLAN > 0)
    PB0DW01.PC6PLAN = PB0DM001.PC6PLAN;
  else
    PB0DW01.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* If customer xref changed, verify the entered code.*/

   /* ------------------------------------------------------------*/

  if (PB0DM001.PC2CUXID > " ") /* customer xref id*/
    PB0D163(); /* ===========> Verify xref-id on table*/
  else
    PB0DW01.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XWHCD > " ")
    PB0D164(); /* =========> Verify warehouse code*/
  else
    PB0DW01.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group or warehouse changed, verify entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XWHCD > " "
   || PB0DM001.XOWCD > " ")
    PB0D165(); /* =========> Verify owner group code*/
  else
    PB0DW01.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* --->  verify P.O. TYPE*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC4ORTYP > " ")
    PB0D166(); /* =========> Verify P.O. Type code*/
  else
    PB0DW01.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* --->  verify Factory*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.FY1FCTYC > " ")
    PB0D167(); /* =========> Verify Factory code*/
  else
    PB0DW01.FY1FCTYC = " ";
  end


   /* ------------------------------------------------------------*/
   /* If 'Blank' dimension changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PB0DWBDM > " ") /* Dimension code*/
    PB0D172(); /* ===========> Verify dimension code*/
  else
    PB0DW01.PB0DWBDM = " ";
  end

   /* ------------------------------------------------------------*/
   /* If 'Blank' color code changed, verify the entered code.*/
   /* or related required fields changed, verify entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY2BCLCD > " " /* Color entered*/
   && PB0DM001.SY1BSTNB == " ") /* Style not entered*/

    PB0DW00.XXXPRCNM = "PB0D150"; /* Module identification*/
    set PB0DM001.SY1BSTNB cursor, bold; /* Highlight*/
    set PB0DM001.SY2BCLCD bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/

  else

    if (PB0DM001.SY2BCLCD > " " /* Color entered*/
     && PB0DM001.SY1BSTNB > " ") /* Style entered*/
      PB0D173(); /* =========> Verify style/color*/
      PB0DW00.PB0DWMOD = "Y"; /* ===> data modified*/

      /* ------------------------------------------------------------*/
       /* If 'Blank' style code changed, verify the entered code.*/
      /* ------------------------------------------------------------*/

    else
      if (PB0DM001.SY1BSTNB > " ") /* Style only entered*/
        PB0D174(); /* =========> Verify style code*/
        PB0DW00.PB0DWMOD = "Y"; /* ===> data modified*/
      else
        PB0DW01.SY1BSTNB = " ";
        PB0DW01.SY2BCLCD = " ";

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If 'Blank' PO Nbr was entered, load map display record.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC3BLPO > 0) /* If Blank PO Nbr entered*/
    PB0DW00.PB0DWMOD = "Y"; /* ===> data modified*/
    set VPOHDR02 empty; /* Initialize reocrd*/
    VPOHDR02.XGPCD = PB0DM001.XGPCD; /* Gpc code*/
    VPOHDR02.PC3PONBR = PB0DM001.PC3BLPO; /* Blank p.o.*/
    PB0D175(); /* Verify blank p.o. nbr*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0DW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* save po region*/
      PB0DW01.PC3BLPO = PB0DM001.PC3BLPO; /* save in disp rec*/
      PB0DW00.PB0DWMOD = "Y"; /* data modified*/
      PB0D176(); /* check for multi style/color*/
    else
      PB0DW00.XXXPRCNM = "PB0D150"; /* Process name*/
      set PB0DM001.PC3BLPO cursor, bold; /* Cursor and highlight*/
      converseLib.validationFailed(69);
      PB0DW00.PB0DWMOD = "Y"; /* data modified*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Stock Transfer Nbr was changed, load map display record.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.IN7STNBR > 0)
    PB0DW00.PB0DWMOD = "Y"; /* ===> data modified*/
    set IN7REC empty; /* Initialize reocrd*/
    IN7REC.XGPCD = PB0DM001.XGPCD; /* Gpc code*/
    IN7REC.IN7STNBR = PB0DM001.IN7STNBR; /* Stock xfer nbr*/
    PB0D177(); /* Verify stock xfer*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0DW01.IN7STNBR = PB0DM001.IN7STNBR; /* save in disp rec*/
      PB0DW00.PB0DWMOD = "Y"; /* data modified*/
      PB0D178(); /* check for multi style/color*/
    else
      PB0DW00.XXXPRCNM = "PB0D150"; /* Process name*/
      set PB0DM001.IN7STNBR cursor, bold; /* Cursor and highlight*/
      converseLib.validationFailed(40);
      PB0DW00.PB0DWMOD = "Y"; /* data modified*/
    end
  end

   /* ------------------------------------------------------------*/
   /* 'Blank' PO Nbr and/or Stock Transfer Nbr must be entered.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC3BLPO == 0 /* If Blank PO Nbr*/
   && PB0DM001.IN7STNBR == 0) /* or Stock Trf Nbr NOT entered*/

    PB0DW00.XXXPRCNM = "PB0D150"; /* Process name*/
    set PB0DM001.PC3BLPO cursor, bold; /* Cursor and highlight*/
    set PB0DM001.IN7STNBR bold; /* Highlight*/
    converseLib.validationFailed(415); /* Either Blank PO or Stk Trf required*/

  end



   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of pb0d150 ***********************/
end // end PB0D150

// Verify Division code
Function PB0D151()
  if (PB0DM001.YSMXDV == " ")
    PB0DW01.YSMXDV = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PB0DM001.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PB0D151";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine to verify division group*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PB0DW01.YSMXDV = PB0DM001.YSMXDV;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D151"; /* Module identification*/
    set PB0DM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d151 ***********************/
end // end PB0D151

// Verify Quality code
Function PB0D152()
  if (PB0DM001.XQACD == " ")
    PB0DW01.XQACD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0DW01.XQACD = PB0DM001.XQACD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D152"; /* Module identification*/
    set PB0DM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of Pb0d152 ***********************/
end // end PB0D152

// Verify FG Dimension code
Function PB0D156()
  if (PB0DM001.XDMCD == " ")
    PB0DW01.XDMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0DW01.XDMCD = PB0DM001.XDMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D156"; /* Module identification*/
    set PB0DM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d156 ***********************/
end // end PB0D156

// Verify FG Color Code
Function PB0D157()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY2CLRID == " ")

    PB0DW01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY1STNBR == " ")

    PB0DW00.XXXPRCNM = "PB0D157"; /* Module identification*/
    set PB0DM001.SY1STNBR cursor, bold; /* Highlight*/
    set PB0DM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0DM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0DM001.SY1STNBR; /* ===> style code*/

  if (PB0DW01.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0DM001.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0DW01.SY2CLRID = PB0DM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D157"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0DM001.SY2CLRID cursor, bold;
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      converseLib.validationFailed(197); /* ===>style,color,dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0DM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pb0d157 ***********************/
end // end PB0D157

// Verify FG Style Code
Function PB0D158()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY1STNBR != PB0DW01.SY1STNBR)
    PB0DW00.PB0DWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.SY1STNBR == " ")

    PB0DW01.SY1STNBR = PB0DM001.SY1STNBR;


    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0DM001.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0DW01.SY1STNBR = PB0DM001.SY1STNBR; /* ===> style code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/

  PB0DW00.XXXPRCNM = "PB0D158"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PB0DM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PB0DM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of pb0d158 ***********************/
end // end PB0D158

// Verify Status Code
Function PB0D161()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC6STAT == " ")
    PB0DW01.PC6STAT = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the request is for Status 'UX' or '*X'*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC6STAT == "*X" /* Request is for all cancelled items*/
   || PB0DM001.PC6STAT == "UX") /* Request is for user-cancelled only*/
                                    /* (UX gives same result as CX)*/
    PB0DW01.PC6STAT = "CX"; /* Set to code in table*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PB0DW01.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PB0DW01.PC6STAT = PB0DM001.PC6STAT; /* Save code entered*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PB0DW00.XXXPRCNM = "PB0D161"; /* Module identification*/
      set PB0DM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end


  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PB0DM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PB0DW01.PC6STAT = PB0DM001.PC6STAT;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PB0DW00.XXXPRCNM = "PB0D161"; /* Module identification*/
      set PB0DM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of pb0d161 ***********************/
end // end PB0D161

// Verify Cust Xref ID
Function PB0D163()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC2CUXID == " ")
    PB0DW01.PC2CUXID = " ";
    return;
  else

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PB0DM001.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0DW01.PC2CUXID = PB0DM001.PC2CUXID;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0DM001.PC2CUXID cursor, bold;
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      PB0DW00.XXXPRCNM = "PB0D163"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0DW00.XXXPRCNM = "PB0D163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0d163 ***********************/
end // end PB0D163

// Verify Warehouse
Function PB0D164()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XWHCD == " ")
    PB0DW01.XWHCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (XWHTBL.XGPCD1[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD2[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD3[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD4[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD5[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD6[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD7[sysVar.arrayIndex] == PB0DW01.XGPCD
     || XWHTBL.XGPCD8[sysVar.arrayIndex] == PB0DW01.XGPCD)

      PB0DW01.XWHCD = PB0DM001.XWHCD;

    else

      PB0DW00.XXXPRCNM = "PB0D164"; /* Module identification*/
      set PB0DM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(145); /* Whse not valid for this GPC*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If whse not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D164"; /* Module identification*/
    set PB0DM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d164 ***********************/
end // end PB0D164

// Verify Owner Group code
Function PB0D165()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XOWCD == " ")
    PB0DW01.XOWCD = " ";
    return;
  end

  if (PB0DM001.XOWCD == "00")
    PB0DW01.XOWCD = "00";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the whse is valid, active and accepts owner gp*/
   /* If so, verify OG/whse against the owner group table*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.XWHCD == " ") /* no whse entered*/
    PB0DW00.PB0DWWHS = "51"; /* default whse for OG test*/
  else
    PB0DW00.PB0DWWHS = PB0DM001.XWHCD; /* whse is entered*/
  end

  if (PB0DW00.PB0DWWHS in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* and owner group flag set*/
      PB0DW00.PB0DWWHC = PB0DW00.PB0DWWHS;
      PB0DW00.PB0DWOWC = PB0DM001.XOWCD;

      if (PB0DW00.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PB0DW01.XOWCD = PB0DM001.XOWCD;

      else

        /* ------------------------------------------------------------*/
         /* If OG not found or inactive, indicate invalid for whse.*/
        /* ------------------------------------------------------------*/

        PB0DW00.XXXPRCNM = "PB0D165"; /* Module identification*/
        set PB0DM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(405); /* Owner group not valid for this whse*/

      end


    else
      PB0DW00.XXXPRCNM = "PB0D165"; /* Module identification*/
      set PB0DM001.XOWCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(404);
                                   /* This whse accepts only Owner Grp '00'*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If whse not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D165"; /* Module identification*/
    set PB0DM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Whse is missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d165 ***********************/
end // end PB0D165

// Verify P.O.Type
Function PB0D166()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC4ORTYP == " ")
    PB0DW01.PC4ORTYP = " "; /* ===> p.o. type code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PB0DM001.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0DW01.PC4ORTYP = PB0DM001.PC4ORTYP; /* ===> p.o. type code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0DM001.PC4ORTYP cursor, bold;

      PB0DW00.XXXPRCNM = "PB0D166"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0DW00.XXXPRCNM = "PB0D166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0d166 ***********************/
end // end PB0D166

// Verify factory
Function PB0D167()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PB0DM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0DW01.FY1FCTYC = PB0DM001.FY1FCTYC; /* ===> factory code*/
      PB0DW00.PB0DWMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0DM001.FY1FCTYC cursor, bold;
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      PB0DW00.XXXPRCNM = "PB0D167"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0DW00.XXXPRCNM = "PB0D167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* EZEFLO                          ; Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0d167 ***********************/
end // end PB0D167

// Verify Blank Dimension cd
Function PB0D172()
  if (PB0DM001.PB0DWBDM == " ")
    PB0DW01.PB0DWBDM = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PB0DWBDM in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0DW01.PB0DWBDM = PB0DM001.PB0DWBDM;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D172"; /* Module identification*/
    set PB0DM001.PB0DWBDM cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d172 ***********************/
end // end PB0D172

// Verify Blank Color Code
Function PB0D173()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0DM001.SY1BSTNB; /* ===> style code*/
  PG2REC.SY2CLRID = PB0DM001.SY2BCLCD; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  if (PB0DW01.PB0DWBDM == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0DM001.PB0DWBDM;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0DW01.SY1BSTNB = PG2REC.SY1STNBR; /* ===> Style nbr*/
      PB0DW01.SY2BCLCD = PG2REC.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D173"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0DM001.SY1BSTNB cursor, bold;
      set PB0DM001.SY2BCLCD bold;
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      converseLib.validationFailed(197); /* ===>style,color,dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  set PB0DM001.SY1BSTNB cursor, bold;
  set PB0DM001.SY2BCLCD bold;
  converseLib.clearScreen();
  
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pb0d173 ***********************/
end // end PB0D173

// Verify Blank Style Code
Function PB0D174()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0DM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0DM001.SY1BSTNB; /* ===> Blank style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0DW01.SY1BSTNB = PG2REC.SY1BSTNB; /* ===> style nbr*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/

  PB0DW00.XXXPRCNM = "PB0D174"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PB0DM001.SY1BSTNB cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PB0DM001.SY1BSTNB cursor, bold;
  set PB0DM001.SY2BCLCD bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of pb0d174 ***********************/
end // end PB0D174

// Select row DPRODC.VPOHDR01
Function PB0D175()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PB0DW00.XXXPRCNM = "PB0F175"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0f175 ***********************/
end // end PB0D175

// Check for multiple style/color
Function PB0D176()
   /* ------------------------------------------------------------*/
   /* Select set of items, fetch each row and check the styles*/
   /* and colors for multiples. If so, load the first style/color*/
   /* to the map and give a message stating so.*/
   /* ------------------------------------------------------------*/

  set VPOITM03 empty; /* Initialize record*/

  PB0DW00.PB0DWEOF = "N"; /* Reset cursor EOF switch*/
  VPOITM03.XGPCD = PB0DM001.XGPCD; /* Gpc code*/
  VPOITM03.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM03.PC3PONBR = PB0DM001.PC3BLPO; /* P.O. number*/

  if (PB0DW01.SY1BSTNB != " ") /* Style entered*/
    VPOITM03.SY1STNBR = PB0DW01.SY1BSTNB;
  else
    VPOITM03.SY1STNBR = "*";
  end

  if (PB0DW01.SY2BCLCD != " ") /* Color entered*/
    VPOITM03.SY2CLRID = PB0DW01.SY2BCLCD;
  else
    VPOITM03.SY2CLRID = "*";
  end

  if (PB0DW00.PB0DWSB3 != " ") /* Dimension entered*/
    VPOITM03.XDMCD = PB0DW00.PB0DWSB3;
  else
    VPOITM03.XDMCD = "*";
  end

  VPOITM03.XQACD = "*";
  VPOITM03.XOWCD = "*";
  VPOITM03.XPGCD = "*";
  VPOITM03.PC2INSEG = "*";
  VPOITM03.XUMCD = "*";
  VPOITM03.XWHCD = "*";
  VPOITM03.PC2CUXID = "*";
  VPOITM03.YMTCD = "*";
  VPOITM03.PC6ETSDT = -1;
  VPOITM03.PC6PLAN = -1;
  VPOITM03.XDSCD = "*";
  VPOITM03.YSMXDV = "*";
  VPOITM03.PC6RTADT = -1;
  VPOITM03.PC6OETS = -1;

  PB0DS04(); /* Select set of items;*/

  PB0DS05(); /* Fetch next record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PB0DW00.PB0DWSB1 = VPOITM03.SY1STNBR; /* Save first style found*/
    PB0DM001.SY1BSTNB = VPOITM03.SY1STNBR; /* move to map 1*/
    PB0DW00.PB0DWSB2 = VPOITM03.SY2CLRID; /* Save first color found*/
    PB0DM001.SY2BCLCD = VPOITM03.SY2CLRID; /* move to map 1*/
    PB0DW00.PB0DWSB3 = VPOITM03.XDMCD; /* Save first dim found*/
    PB0DM001.PB0DWBDM = VPOITM03.XDMCD; /* Move to map 1*/
  else
    set PB0DM001.SY1BSTNB cursor, bold; /* Set cursor and hightlight*/
    set PB0DM001.SY2BCLCD bold; /* Hightlight*/
    PB0DW00.PB0DWSWF = "N"; /* Request for data switch*/
    PB0DW00.XXXPRCNM = "PB0D176"; /* Module identification*/
    converseLib.validationFailed(393); /* Indicate Product not on p.o.*/
    exit stack;
  end

  while (PB0DW00.PB0DWEOF == "N") /* ===> Until end of cursor*/

    if (VPOITM03.SY1STNBR != PB0DW00.PB0DWSB1 /* Styles are different*/
     || VPOITM03.SY2CLRID != PB0DW00.PB0DWSB2 /* or colors are different*/
     || VPOITM03.XDMCD != PB0DW00.PB0DWSB3)   /* or dim is different*/
      converseLib.validationFailed(113); /* Multiple styles found, enter one*/
      PB0DW00.PB0DWSWF = "N"; /* Request for data switch*/
      PB0DW00.XXXPRCNM = "PB0D176"; /* Module identification*/
      PB0DS06(); /* Close cursor*/
      exit stack;
    end /* End-while, cursor EOF*/

    PB0DS05(); /* Fetch next record*/

  end /* End-while, cursor EOF*/

  PB0DS06(); /* Close cursor*/
   /* **                                                        ***/
   /* ********************** End of pb0d176 ***********************/
end // end PB0D176

// Select DINVNT.VTFITM01
Function PB0D177()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0720" ("S ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  PB0DW00.XXXPRCNM = "PB0F177"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN7REC.IN7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0f177 ***********************/
end // end PB0D177

// Check for multiple style/color
Function PB0D178()
   /* ------------------------------------------------------------*/
   /* Select set of items, fetch each row and check the styles*/
   /* and colors for multiples. If so, load the first style/color*/
   /* to the map and give a message stating so.*/
   /* ------------------------------------------------------------*/

  set IN8REC empty; /* Initialize record*/

  PB0DW00.PB0DWEOF = "N"; /* Reset cursor EOF switch*/
  IN8REC.XGPCD = PB0DM001.XGPCD; /* Gpc code*/
  IN8REC.IN7STNBR = PB0DM001.IN7STNBR; /* Stock xfer nbr*/

  if (PB0DW01.SY1BSTNB != " ") /* Style entered*/
    IN8REC.SY1STNBR = PB0DW01.SY1BSTNB;
  end

  if (PB0DW01.SY2BCLCD != " ") /* Color entered*/
    IN8REC.SY2CLRID = PB0DW01.SY2BCLCD;
  end

  PB0DS07(); /* Select set of items;*/

  PB0DS08(); /* Fetch next record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PB0DW00.PB0DWSB1 = IN8REC.SY1STNBR; /* Save first style found*/
    PB0DM001.SY1BSTNB = IN8REC.SY1STNBR; /* move to map 1*/
    PB0DW01.SY1BSTNB = IN8REC.SY1STNBR;
    PB0DW00.PB0DWSB2 = IN8REC.SY2CLRID; /* Save first color found*/
    PB0DM001.SY2BCLCD = IN8REC.SY2CLRID; /* move to map 1*/
    PB0DW01.SY2BCLCD = IN8REC.SY2CLRID;
    PB0DW00.PB0DWSB3 = IN8REC.XDMCD; /* Save first dim found*/
    PB0DM001.PB0DWBDM = IN8REC.XDMCD; /* Move to map 1*/
  else
    set PB0DM001.SY1BSTNB cursor, bold; /* Set cursor and hightlight*/
    set PB0DM001.SY2BCLCD bold; /* Hightlight*/
    PB0DW00.PB0DWSWF = "N"; /* Request for data switch*/
    PB0DW00.XXXPRCNM = "PB0D178"; /* Module identification*/
    converseLib.validationFailed(427); /* Indicate no data to display*/
    exit stack;
  end

  while (PB0DW00.PB0DWEOF == "N") /* ===> Until end of cursor*/

    if (IN8REC.SY1STNBR != PB0DW00.PB0DWSB1 /* Styles are different*/
     || IN8REC.SY2CLRID != PB0DW00.PB0DWSB2 /* or colors are different*/
     || IN8REC.XDMCD != PB0DW00.PB0DWSB3)   /* or dim is different*/
      converseLib.validationFailed(113); /* Multiple styles found, enter one*/
      PB0DW00.PB0DWSWF = "N"; /* Request for data switch*/
      PB0DW00.XXXPRCNM = "PB0D178"; /* Module identification*/
      PB0DS09(); /* Close cursor*/
      exit stack;
    end /* End-while, cursor EOF*/

    PB0DS08(); /* Fetch next record*/

  end /* End-while, cursor EOF*/

  PB0DS09(); /* Close cursor*/
   /* **                                                        ***/
   /* ********************** End of pb0d178 ***********************/
end // end PB0D178

// -->Process valid input request
Function PB0D190()

  PB0DW00.PB0DWSWM = "2"; /* ==>map requested*/
  PB0DW00.PB0DWSWR = "Y"; /* ==>request for data*/
  PB0DW00.PB0DWSWF = "Y"; /* ==>format map requested*/
   /* MOVE PB0DM001.SY1BSTNB TO PB0DW00.PB0DWSB1;Save blnk style*/
   /* MOVE PB0DM001.SY2BCLCD TO PB0DW00.PB0DWSB2;Save  blnk color*/
   /* MOVE PB0DM001.PB0DWBDM TO PB0DW00.PB0DWSB3; Save blank dim*/

  if (PB0DM001.IN7STNBR == 0) /* 'Blank' PO Nbr only requested*/
    PB0DW00.PB0DWFSX = "S1"; /* Set Select function*/
    PB0DW00.PB0DWFNX = "N1"; /* Set Fetch Next Row function*/
    PB0DW00.PB0DWFCX = "C1"; /* Set Close function*/
  else
    if (PB0DM001.PC3BLPO == 0) /* Stk Trf Nbr only requested*/
      PB0DW00.PB0DWFSX = "S2"; /* Set Select function*/
      PB0DW00.PB0DWFNX = "N2"; /* Set Fetch Next Row function*/
      PB0DW00.PB0DWFCX = "C2"; /* Set Close function*/
    else /* Both 'Blank' PO & Stk Trf Requested*/
      PB0DW00.PB0DWFSX = "S3"; /* Set Select function*/
      PB0DW00.PB0DWFNX = "N3"; /* Set Fetch Next Row function*/
      PB0DW00.PB0DWFCX = "C3"; /* Set Close function*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of pb0d190 ***********************/
end // end PB0D190

// ========>Process Map 2&3 logic
Function PB0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWSWR == "Y" /* if request-for-data = yes*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0D300(); /* Obtain the data to display*/
  end

  PB0D500(); /* Format and converse maps 2,3*/

  PB0D600(); /* Check attention identifier*/

  PB0D700(); /* Reset flds to norm intensity*/

  PB0D800(); /* Verify the entered data*/

  PB0D900(); /* Process valid input request*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pb0d200 ***********************/
end // end PB0D200

// -->Obtain the data to display
Function PB0D300()

   /* ------------------------------------------------------------*/
   /* Initializations*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWSWR = "N"; /* Reset request-for-data switch*/
  PB0DW00.PB0DWEOF = "N"; /* Reset cursor EOF switch*/
  PB0DW00.PB0DW03X = 0; /* Init pb0dw03 row table index*/
  set PB0DW03 empty; /* Init the table for ret'd PBARECs*/
  PB0DW00.PB0DWICT = 0; /* Init tabled item count*/
  PB0DW00.PB0DWSZI = " "; /* Init size indicators*/
  move 0 to PB0DW00.PB0DWSZS[1] for all; /* Init table of size subscripts to use*/

   /* ------------------------------------------------------------*/
   /* Format the selection criteria in PBAREC.*/
   /* Select and open the cursor for the set to be selected.*/
   /* ---> a set of PBAREC rows.*/
   /* ------------------------------------------------------------*/

  PB0D310(); /* ===> Format PBAREC for select*/

  PB0D320(); /* ===> Select set and open cursor for items*/

   /* ------------------------------------------------------------*/
   /* Fetch each row until end of cursor.*/
   /* Table the rows in PB0DW03 which match on Blank style/color*/
     /* and/or pass the selection criteria for cancelled rows.*/
   /* ------------------------------------------------------------*/

  PB0D330(); /* ===> Fetch first row*/

  while (PB0DW00.PB0DWEOF == "N") /* ===> Until end of cursor*/

    PB0DW00.PB0DWSHO = "Y"; /* Assume record will be tabled*/
    if (PBAREC.PC6STAT == "CX") /* A cancelled row was selected*/
      if (PBAREC.XXXUSRID == " ") /* If a system-cancel*/
        if (PB0DW01.PC6STAT == "*X") /* All CX's are to display*/
          /* ===> next sentence     ;*/
        else /* Only user-cancels are to display*/
          PB0DW00.PB0DWSHO = "N"; /* Set to bypass this CX*/
        end
      else /* xxxusrid indicates user-cancel*/
        PBAREC.PC6STAT = "UX"; /* Display as user-cancel*/
      end
    end

    if (PB0DW00.PB0DWSHO == "Y") /* row passes CX'd criteria*/

      PB0D340(); /* Get Blank style/color for item*/

      if (PB0DW00.PB0DWIBL == PB0DW00.PB0DWSBL) /* Item bl sty/clr = request*/
        PB0DW00.PB0DWICT = PB0DW00.PB0DWICT + 1;
                                   /* Count nbr of rows tabled*/
        if (PB0DW00.PB0DWICT <= 100) /* Can select 100 rows max*/
          PB0DW00.PB0DW03X = PB0DW00.PB0DW03X + 1; /* Increment W03 index*/
          PB0DW03.PBAGROUP[PB0DW03X] = PBAREC.PBAGROUP; /* Add row*/
          PB0D330(); /* Get Next row*/
        else /* Have already tabled 100 rows*/
          PB0D350(); /* Close cursor*/
          PB0DM001.SY1BSTNB = PB0DW00.PB0DWSB1;
          PB0DM001.SY2BCLCD = PB0DW00.PB0DWSB2;
          PB0DM001.PB0DWBDM = PB0DW00.PB0DWSB3;
          PB0DW00.XXXPRCNM = "PB0D300"; /* Module identification*/
          converseLib.validationFailed(95); /* too many rows, must limit selection*/
          PB0DW00.PB0DWSWM = "1"; /* Set Map nbr to 1*/
          exit stack; /* Exit to display map*/
        end
                                   /* if le 100 rows tabled*/
      else /* Blank sty/clr of ret'd item not the one selected*/
        PB0DW00.PB0DWICT = PB0DW00.PB0DWICT + 1;
                                   /* Count nbr of rows tabled*/
        if (PB0DW00.PB0DWICT <= 100) /* Can select 100 rows max*/
          PB0DW00.XXXPRCNM = "PB0D300"; /* Module identification*/
          PB0DW00.PB0DW03X = PB0DW00.PB0DW03X + 1; /* Increment W03 index*/
          PB0DW03.PBAGROUP[PB0DW03X] = PBAREC.PBAGROUP; /* Add row*/
          PB0D330(); /* Get Next row*/
          PCWREC.XXXMSGNO = 426;
        else /* Have already tabled 100 rows*/
          PB0D350(); /* Close cursor*/
          PB0DM001.SY1BSTNB = PB0DW00.PB0DWSB1;
          PB0DM001.SY2BCLCD = PB0DW00.PB0DWSB2;
          PB0DM001.PB0DWBDM = PB0DW00.PB0DWSB3;
          PB0DW00.XXXPRCNM = "PB0D300"; /* Module identification*/
          converseLib.validationFailed(95); /* too many rows, must limit selection*/
          PB0DW00.PB0DWSWM = "1"; /* Set Map nbr to 1*/
          exit stack; /* Exit to display map*/
        end
                                   /* if le 100 rows tabled*/
      end /* If blank sty/clr doesn't match*/
    else /* CX'd record not wanted*/
      PB0D330(); /* Bypass unwanted row, fetch next row*/
    end /* End CX check*/
  end /* End-while, cursor EOF*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0D350(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If rows were tabled,*/
      /* format pages and load to temporary storage.*/
   /* If no rows were tabled,*/
      /* indicate no data to display and redisplay Map 1.*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWICT > 0) /* Rows were found*/

    PB0D400(); /* Format and load data to temp storage*/

    PB0D460(); /* Get size descriptions*/

    PB0D470(); /* Get size subscripts of sizes used*/

    PB0DW00.XXXTSPAG = 1; /* Set first page nbr to display*/

  else /* No rows matched the selection*/
                                   /* criteria*/
    PB0DW00.PB0DWSWM = "1"; /* Set map switch*/
    PB0DW00.PB0DWSWF = "N"; /* Request for data switch*/
    PB0DW00.XXXPRCNM = "PB0D300"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PB0DM001.PC3BLPO cursor;

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d300 ***********************/
end // end PB0D300

// Format PBAREC select criteria
Function PB0D310()

   /* ------------------------------------------------------------*/
   /* Load selection criteria to PBAREC*/
   /* ------------------------------------------------------------*/

  set PBAREC empty; /* ===>initialize record before loading*/
                                   /* it*/

  PBAREC.XGPCD = PB0DW01.XGPCD; /* GPC code*/
  PBAREC.PO-REG-CD = PB0DW01.PO-REG-CD;
  PBAREC.PC3BLPO = PB0DW01.PC3BLPO;
                                   /* 'Blank' PO to select or spaces*/
  PBAREC.IN7STNBR = PB0DW01.IN7STNBR;
                                   /* Stock Trf to select or spaces*/

  PBAREC.XUMCD = "*"; /* no limit by unit of measure*/

   /* ------------------------------------------------------------*/
   /* If finished goods style specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.SY1STNBR > " ")
    PBAREC.SY1STNBR = PB0DW01.SY1STNBR;
  else
    PBAREC.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* If finished goods color specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.SY2CLRID > " ")
    PBAREC.SY2CLRID = PB0DW01.SY2CLRID;
  else
    PBAREC.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If finished goods dimension specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XDMCD > " ") /* dimension code*/
    PBAREC.XDMCD = PB0DW01.XDMCD;
  else
    PBAREC.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If finished goods quality specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XQACD > " ") /* quality code*/
    PBAREC.XQACD = PB0DW01.XQACD;
  else
    PBAREC.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner group specified,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XOWCD > " ") /* owner group code*/
    PBAREC.XOWCD = PB0DW01.XOWCD;
  else
    PBAREC.XOWCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XWHCD > " ")
    PBAREC.XWHCD = PB0DW01.XWHCD;
  else
    PBAREC.XWHCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer xref specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC2CUXID > " ") /* customer xref id*/
    PBAREC.PC2CUXID = PB0DW01.PC2CUXID;
  else
    PBAREC.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If factory specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.FY1FCTYC > " ")
    PBAREC.FY1FCTYC = PB0DW01.FY1FCTYC;
  else
    PBAREC.FY1FCTYC = "*";
  end

   /* ------------------------------------------------------------*/
   /* If P.O. type specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC4ORTYP > " ") /* P.O. type*/
    PBAREC.PC4ORTYP = PB0DW01.PC4ORTYP;
  else
    PBAREC.PC4ORTYP = "*";
  end

   /* ------------------------------------------------------------*/
   /* If plan code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC6PLAN > 0)
    PBAREC.PC6PLAN = PB0DW01.PC6PLAN;
  else
    PBAREC.PC6PLAN = -1;
  end

   /* ------------------------------------------------------------*/
   /* If division, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.YSMXDV > " ") /* division code*/
    PBAREC.YSMXDV = PB0DW01.YSMXDV;
  else
    PBAREC.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* If item status specified, load select record.*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC6STAT > " ") /* Item status code*/
    if (PB0DW01.PC6STAT == "*X"
     || PB0DW01.PC6STAT == "UX")
      PBAREC.PC6STAT = "CX";
    else
      PBAREC.PC6STAT = PB0DW01.PC6STAT;
    end
  else
    PBAREC.PC6STAT = "*";
  end


   /* **                                                        ***/
   /* ********************** End of pb0d310 ***********************/
end // end PB0D310

// Select set & open ITEM cursor
Function PB0D320()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = PB0DW00.PB0DWFSX; /* Move Select function*/

  try
    call "PC1250" (PCYREC, SQLCA, PBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0D320"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0DW00.PB0DWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0DM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PBAREC"; /* Table view name*/
  PB0DW00.PB0DWKA1 = "PC3BLPO"; /* Table key*/
  PB0DW00.PB0DWKN2 = PB0DW01.PC3BLPO; /* Table key*/
  PB0DW00.PB0DWKA3 = "IN7STNBR"; /* Table key*/
  PB0DW00.PB0DWKN4 = PB0DW01.IN7STNBR; /* Table key*/
  TA1REC.TA1TBLKE = PB0DW00.TA1TBLKE; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0d320 ***********************/
end // end PB0D320

// Fetch next row in ITEM cursor
Function PB0D330()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = PB0DW00.PB0DWFNX;

  try
    call "PC1250" (PCYREC, SQLCA, PBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0DW00.PB0DWEOF = "Y"; /* Indicate end of cursor "ITEM"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0D330"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0DW00.PB0DWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "PBAREC"; /* ===> Table view name*/
  PB0DW00.PB0DWKA1 = "PC3BLPO"; /* Table key*/
  PB0DW00.PB0DWKN2 = PB0DW01.PC3BLPO; /* Table key*/
  PB0DW00.PB0DWKA3 = "IN7STNBR"; /* Table key*/
  PB0DW00.PB0DWKN4 = PB0DW01.IN7STNBR; /* Table key*/
  TA1REC.TA1TBLKE = PB0DW00.TA1TBLKE; /* Program number*/


  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0d330 ***********************/
end // end PB0D330

// Get Blank Sty/Clr for item
Function PB0D340()
   /* ------------------------------------------------------------*/
   /* Get Blank Style/Color for the finished good item selected.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWIBL = " "; /* Clear Item blank style save area*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0DW01.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PBAREC.SY1STNBR; /* ===> style code*/
  PG2REC.SY2CLRID = PBAREC.SY2CLRID; /* ===> color code*/
  PG2REC.XDMCD = PBAREC.XDMCD; /* ===> dimension code*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, save item blank style/color for comparison*/
    /* to the blank style/color selected.*/
   /* If no blank style/color was specified on the selection*/
    /* screen, save the blank style/color from the first*/
    /* item encountered for selection.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PG2REC.SY1BSTNB > " ") /* Style has a Blank style*/
        PB0DW00.PB0DWIB1 = PG2REC.SY1BSTNB; /* Item blank style*/
        PB0DW00.PB0DWIB2 = PG2REC.SY2BCLCD; /* Item blank color*/
        PB0DW00.PB0DWIB3 = PG2REC.XDMCD; /* Item blank dimension*/
      else /* No blank style; item must be a blank itself*/
        PB0DW00.PB0DWIB1 = PG2REC.SY1STNBR; /* Item blank style*/
        PB0DW00.PB0DWIB2 = PG2REC.SY2CLRID; /* Item blank color*/
        PB0DW00.PB0DWIB3 = PG2REC.XDMCD; /* Item blank dimension*/
      end /* End-if style has a blank style*/

      if (PB0DW00.PB0DWSB1 == " ") /* No blank style specified on map*/
        PB0DW00.PB0DWSBL = PB0DW00.PB0DWIBL; /* blank style to select*/
        return; /* Return to previous process*/
      else
        return; /* Return to previous process*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the finished good style/color*/
     /* of the selected item is invalid (not in DPRODG.VSYCLR01)*/
    /* ------------------------------------------------------------*/

    PB0DW00.XXXPRCNM = "PB0D340"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0DM001.SY1STNBR = PBAREC.SY1STNBR; /* ===> style code*/
      PB0DM001.SY2CLRID = PBAREC.SY2CLRID; /* ===> color code*/
      PB0DM001.XDMCD = PBAREC.XDMCD; /* ===> dimension code*/
      set PB0DM001.SY1STNBR cursor, bold;
      set PB0DM001.SY2CLRID bold;
      set PB0DM001.XDMCD bold;
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/
      PB0DW00.PB0DWSWM = "1"; /* Request map 1*/

      converseLib.validationFailed(197); /* ===>style,color,dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  PB0DM001.SY1STNBR = PBAREC.SY1STNBR; /* ===> style code*/
  PB0DM001.SY2CLRID = PBAREC.SY2CLRID; /* ===> color code*/
  PB0DM001.XDMCD = PBAREC.XDMCD; /* ===> dimension code*/
  set PB0DM001.SY1STNBR cursor, bold;
  set PB0DM001.SY2CLRID bold;
  set PB0DM001.XDMCD bold;
  PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/
  PB0DW00.PB0DWSWM = "1"; /* Request map 1*/
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pb0d340 ***********************/
end // end PB0D340

// Close Select Set Item cursor
Function PB0D350()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = PB0DW00.PB0DWFCX;

  try
    call "PC1250" (PCYREC, SQLCA, PBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0D350"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PBAREC "; /* Table view name*/
  PB0DW00.PB0DWKA1 = "PC3BLPO"; /* Table key*/
  PB0DW00.PB0DWKN2 = PB0DW01.PC3BLPO; /* Table key*/
  PB0DW00.PB0DWKA3 = "IN7STNBR"; /* Table key*/
  PB0DW00.PB0DWKN4 = PB0DW01.IN7STNBR; /* Table key*/
  TA1REC.TA1TBLKE = PB0DW00.TA1TBLKE; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0d350 ***********************/
end // end PB0D350

// Format/load data to temp stor
Function PB0D400()
   /* ------------------------------------------------------------*/
   /* Format the data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PB0D405(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Initialize indexes and set up control break fields.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW02X = 0; /* Init page index*/
  set PB0DW02 empty; /* Clear page record*/
  PB0DW00.PB0DW03X = 1; /* Init row table index*/
  PB0DW00.FY1FCTYC = PB0DW03.FY1FCTYC[1]; /* Save Factory ctl break*/
  PB0DW00.PB0DWCT1 = PB0DW03.SY1STNBR[1]; /* Save Style ctl break*/
  PB0DW00.PB0DWCT2 = PB0DW03.SY2CLRID[1]; /* Save Color ctl break*/
  PB0DW00.PB0DWCT3 = PB0DW03.XDMCD[1]; /* Save Dim ctl break*/
  move 0 to PB0DW00.PB0DWSTQ[1] for all; /* Clear Style/color size qty subtotals*/
  move 0 to PB0DW00.PB0DWTTQ[1] for all; /* Clear Factory size qty totals*/
  move 0 to PB0DW00.PB0DWGTQ[1] for all; /* Clear Grand  size qty totals*/
  PB0DW00.PB0DWSOQ = 0; /* Clear Style/color on order subtotal qty*/
  PB0DW00.PB0DWTOQ = 0; /* Clear Factory on order total qty*/
  PB0DW00.PB0DWGOQ = 0; /* Clear Grand on order total qty*/

   /* ------------------------------------------------------------*/
   /* Format the data into pages and put in temporary storage*/
     /* until end of PB0DW03 table*/
   /* ------------------------------------------------------------*/

  while (PB0DW00.PB0DW03X <= PB0DW00.PB0DWICT)

    PB0D410(); /* format pages*/
    PB0DW00.PB0DW03X = PB0DW00.PB0DW03X + 1; /* Init row table index*/

  end


  PB0D420(); /* Final Style/color break*/
  PB0D430(); /* Final Factory break*/
  PB0D435(); /* Grand totals*/

  if (PB0DW00.PB0DW02X > 0) /* If there are additional lines*/
    PB0DS02(); /* Add final page*/
    PB0DW00.PB0DW02X = 0;
    set PB0DW02 empty;
  end

   /* **                                                        ***/
   /* ********************** End of pb0d400 ***********************/
end // end PB0D400

// purge any temporary storage
Function PB0D405()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PB0DW02 empty; /* Map 2 & 3 display storage record*/

  PB0DW00.PB0DWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PB0DW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0DW00.XXXPRCNM = "PB0D405"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  if (PB0DW00.PB0DWSWM == "2")
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  else
    TA1REC.TA1MAPNO = "M003"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0d405 ***********************/
end // end PB0D405

// Format lines to the page
Function PB0D410()
   /* ------------------------------------------------------------*/
   /* Format the pages for temporary storage*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for control breaks*/
   /* ------------------------------------------------------------*/

  if (PB0DW03.FY1FCTYC[PB0DW03X] != PB0DW00.FY1FCTYC) /* If Factory break*/
    PB0D420(); /* Do style/color break*/
    PB0D430(); /* Do factory break*/
    PB0DW00.FY1FCTYC = PB0DW03.FY1FCTYC[PB0DW03X];
    PB0DW00.PB0DWCTL = PB0DW03.PB0DWCTL[PB0DW03X];
  else
    if (PB0DW03.PB0DWCTL[PB0DW03X] != PB0DW00.PB0DWCTL) /* If Sty/clr break*/
      PB0D420(); /* Do style/color break*/
      PB0DW00.PB0DWCTL = PB0DW03.PB0DWCTL[PB0DW03X];
    end
  end

   /* ------------------------------------------------------------*/
   /* Format item detail line in PB0DW05*/
   /* ------------------------------------------------------------*/

  set PB0DW05 empty; /* Init detail line*/
  PB0DW05.PB0DWLTY = 1; /* line type code*/
  PB0DW05.PC6ITMNB = PB0DW03.PC6ITMNB[PB0DW03X];
  PB0DW05.YSMXDV = PB0DW03.YSMXDV[PB0DW03X];
  PB0DW05.FY1FCTYC = PB0DW03.FY1FCTYC[PB0DW03X];
  PB0DW05.SY1STNBR = PB0DW03.SY1STNBR[PB0DW03X];
  PB0DW05.SY2CLRID = PB0DW03.SY2CLRID[PB0DW03X];
  PB0DW05.PC3PONBR = PB0DW03.PC3PONBR[PB0DW03X];
  PB0DW05.PO-REG-CD = PB0DW03.PO-REG-CD[PB0DW03X];
  PB0DW05.PC4ORTYP = PB0DW03.PC4ORTYP[PB0DW03X];
  PB0DW05.PC6STAT = PB0DW03.PC6STAT[PB0DW03X];
  PB0DW05.XOWCD = PB0DW03.XOWCD[PB0DW03X];
  PB0DW05.XWHCD = PB0DW03.XWHCD[PB0DW03X];
  PB0DW05.PC2CUXID = PB0DW03.PC2CUXID[PB0DW03X];
  PB0DW05.PC6TORDE = PB0DW03.PC6TORDE[PB0DW03X];
  if (PB0DW01.PC3BLPO == 0) /* If selection is not by Blank PO Nbr*/
    if (PB0DW03.PC3BLPO[PB0DW03X] > 0)
      PB0DW05.PB0DWBLX = PB0DW03.PC3BLPO[PB0DW03X];
    end
  else
    if (PB0DW01.IN7STNBR == 0) /* If selection is not by Stk Trf Nbr*/
      if (PB0DW03.IN7STNBR[PB0DW03X] > 0)
        PB0DW05.PB0DWBLX = PB0DW03.IN7STNBR[PB0DW03X];
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Get item size quantities*/
   /* ------------------------------------------------------------*/

  PB0DS01(); /* Get VPOSIZ02 record*/

  move VPOSIZ02.PC7ORDEQ to PB0DW05.PB0DWORQ[1] for all; /* Move size qty array*/

   /* ------------------------------------------------------------*/
   /* Accumulate totals and set size indicators*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWSOQ = PB0DW00.PB0DWSOQ + PB0DW05.PC6TORDE;
                                   /* sty/clr ord qty*/
  PB0DW00.PB0DWTOQ = PB0DW00.PB0DWTOQ + PB0DW05.PC6TORDE;
                                   /* factory ord qty*/
  PB0DW00.PB0DWGOQ = PB0DW00.PB0DWGOQ + PB0DW05.PC6TORDE;
                                   /* factory ord qty*/

  PB0DW00.PB0DWIXS = 1; /* Init size qty index*/
  while (PB0DW00.PB0DWIXS <= 40)
    if (PB0DW05.PB0DWORQ[PB0DWIXS] > 0) /* If size qty > 0*/
      PB0DW00.PB0DWSIZ[PB0DWIXS] = "Y"; /* Size indicator*/
      PB0DW00.PB0DWQWK = PB0DW05.PB0DWORQ[PB0DWIXS]; /* qty to work field*/
      PB0DW00.PB0DWSTQ[PB0DWIXS] = PB0DW00.PB0DWSTQ[PB0DWIXS] + PB0DWQWK;
      PB0DW00.PB0DWTTQ[PB0DWIXS] = PB0DW00.PB0DWTTQ[PB0DWIXS] + PB0DWQWK;
      PB0DW00.PB0DWGTQ[PB0DWIXS] = PB0DW00.PB0DWGTQ[PB0DWIXS] + PB0DWQWK;
    end
    PB0DW00.PB0DWIXS = PB0DW00.PB0DWIXS + 1; /* Increment size qty index*/
  end

   /* ------------------------------------------------------------*/
   /* Add formatted line to page.*/
   /* ------------------------------------------------------------*/

  PB0DW06.PB0DW6GP = PB0DW05.PB0DW5GP;
  PB0D440(); /* Add line to page*/
   /* **                                                        ***/
   /* ********************** End of pb0d410 ***********************/
end // end PB0D410

// Style/color break
Function PB0D420()
   /* ------------------------------------------------------------*/
   /* Process Style/Color control break*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format Style/Color subtotal line in PB0DW06*/
   /* ------------------------------------------------------------*/

  set PB0DW06 empty; /* Init detail line*/
  PB0DW06.PB0DWLTY = 2; /* Line type code*/
  PB0DW06.FY1FCTYC = PB0DW00.FY1FCTYC;
  PB0DW06.SY1STNBR = PB0DW00.PB0DWCT1;
  PB0DW06.SY2CLRID = PB0DW00.PB0DWCT2;

   /* ------------------------------------------------------------*/
   /* Move Style/Color accumulated size quantity subtotals*/
   /* ------------------------------------------------------------*/

  PB0DW06.PC6TORDE = PB0DW00.PB0DWSOQ;
                                   /* Move sty/clr total order qty*/
  move PB0DW00.PB0DWSTQ to PB0DW06.PB0DWORQ[1] for all; /* Move size qty array*/

  PB0DW00.PB0DWSOQ = 0; /* Reset sty/clr total order qty*/
  move 0 to PB0DW00.PB0DWSTQ[1] for all; /* Reset style/clr size accums*/

   /* ------------------------------------------------------------*/
   /* Add formatted line to page.*/
   /* ------------------------------------------------------------*/

  PB0D440(); /* Add line to page*/

   /* **                                                        ***/
   /* ********************** End of pb0d420 ***********************/
end // end PB0D420

// Factory break
Function PB0D430()
   /* ------------------------------------------------------------*/
   /* Process Factory control break*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format Factory total line in PB0DW06*/
   /* ------------------------------------------------------------*/

  set PB0DW06 empty; /* Init detail line*/
  PB0DW06.PB0DWLTY = 3; /* Line type code*/
  PB0DW06.FY1FCTYC = PB0DW00.FY1FCTYC;

   /* ------------------------------------------------------------*/
   /* Move Factory accumulated size quantity totals*/
   /* ------------------------------------------------------------*/

  PB0DW06.PC6TORDE = PB0DW00.PB0DWTOQ; /* Move factory order qty*/
  move PB0DW00.PB0DWTTQ to PB0DW06.PB0DWORQ[1] for all; /* Move size qty array*/

  PB0DW00.PB0DWTOQ = 0; /* Reset Factory order qty total*/
  move 0 to PB0DW00.PB0DWTTQ[1] for all; /* Reset Factory size totals*/

   /* ------------------------------------------------------------*/
   /* Add formatted line to page.*/
   /* ------------------------------------------------------------*/

  PB0D440(); /* Add line to page*/

   /* **                                                        ***/
   /* ********************** End of pb0d430 ***********************/
end // end PB0D430

// Grand total break
Function PB0D435()
   /* ------------------------------------------------------------*/
   /* Process Grand total break*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format Grand total line in PB0DW06*/
   /* ------------------------------------------------------------*/

  set PB0DW06 empty; /* Init detail line*/
  PB0DW06.PB0DWLTY = 4; /* Line type code*/
  PB0DW06.FY1FCTYC = "GT";

   /* ------------------------------------------------------------*/
   /* Move Grand accumulated size quantity totals*/
   /* ------------------------------------------------------------*/

  PB0DW06.PC6TORDE = PB0DW00.PB0DWGOQ; /* Move grand total order qty*/
  move PB0DW00.PB0DWGTQ to PB0DW06.PB0DWORQ[1] for all; /* Move size qty array*/

  PB0DW00.PB0DWGOQ = 0; /* Reset Grand order qty total*/
  move 0 to PB0DW00.PB0DWGTQ[1] for all; /* Reset Grand size totals*/

   /* ------------------------------------------------------------*/
   /* Add formatted line to page.*/
   /* ------------------------------------------------------------*/

  PB0D440(); /* Add line to page*/

   /* **                                                        ***/
   /* ********************** End of pb0d435 ***********************/
end // end PB0D435

// Add line to PB0DW02 page
Function PB0D440()
   /* ------------------------------------------------------------*/
   /* Add the formatted line to the PB0DW02 page*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW02X = PB0DW00.PB0DW02X + 1; /* Increment line index*/

  PB0DW02.PB0DWRC2[PB0DW02X] = PB0DW06.PB0DW6GP; /* Move line to page*/

  if (PB0DW00.PB0DW02X == PB0DW00.PB0DWMXL) /* If page is full*/
    PB0DS02(); /* Call TA0050 to add page to temp storage*/

    PB0DW00.PB0DW02X = 0; /* Clear line index*/
    set PB0DW02 empty; /* Clear page*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d440 ***********************/
end // end PB0D440

// Get size descriptions
Function PB0D460()
   /* ------------------------------------------------------------*/
   /* Get size descriptions for the blank style/color*/
   /* ------------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PB0DW01.XGPCD;
  PG3REC.SY1STNBR = PB0DW00.PB0DWSB1;
  PG3REC.SY2CLRID = PB0DW00.PB0DWSB2;
  PG3REC.XDMCD = PB0DW00.PB0DWSB3;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301();

   /* ------------------------------------------------------------*/
   /* If successful, determine size columns to be displayed.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/
    return;


  else
    PB0DW00.XXXPRCNM = "PB0D460";
    PB0DW00.PB0DWSWM = "1";
    if (sysVar.errorCode == "00000000"
     && PG3REC.PG3RETCD == "09")
      converseLib.validationFailed(11);
    else
      converseLib.validationFailed(10);
      converseLib.clearScreen();
      
    end
    exit stack;
  end

   /* **                                                        ***/
   /* ********************** End of pb0d460 ***********************/
end // end PB0D460

// Determine size columns to disp
Function PB0D470()
   /* ------------------------------------------------------------*/
   /* Determine size columns to be displayed.*/
   /* Get size descriptions for size column headings.*/
   /* Get size subscripts of size quantities to be displayed.*/
   /* ------------------------------------------------------------*/

  move 0 to PB0DW00.PB0DWSZS[1] for all; /* Init subscript save area*/
  move " " to PB0DW00.PB0DWDSC[1] for all; /* Init size column label table*/
  PB0DW00.PB0DWSCT = 0; /* Init size column count*/
  PB0DW00.PB0DWSSX = 1; /* Init subscr save area index*/
  PB0DW00.PB0DWIXS = 1; /* Init size index*/


  while (PB0DW00.PB0DWIXS <= 40) /* For size array*/

    if (PB0DW00.PB0DWSIZ[PB0DWIXS] == "Y")
                                   /* If there is a qty for this size*/
      PB0DW00.PB0DWSZS[PB0DWSSX] = PB0DW00.PB0DWIXS;
                                   /* save sz subscr*/
      PB0DW00.PB0DWDSC[PB0DWSSX] = PG3REC.SY4IDDSC[PB0DWIXS]; /* sz lbl tbl*/
      PB0DW00.PB0DWSCT = PB0DW00.PB0DWSCT + 1; /* Count nbr of columns needed*/
      PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Increment subscr index*/
    end
    PB0DW00.PB0DWIXS = PB0DW00.PB0DWIXS + 1; /* Increment size index*/

  end /* end-while*/

   /* **                                                        ***/
   /* ********************** End of pb0d470 ***********************/
end // end PB0D470

// -->Format and converse map 2&3
Function PB0D500()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0DW00.PB0DWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PB0DM002 initial;
      set PB0DM003 initial;

      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the LEFT AND RIGHT maps*/
      /* ------------------------------------------------------------*/

      PB0D510(); /* Format the data from T.S.*/

      PB0D540(); /* Format fields entered from Map 1*/

      PB0D550(); /* Format size column headings, Map 2*/

      PB0D560(); /* Format the literals*/

    else /* Maps have already been formatted*/
      if (converseVar.eventKey is pf11 /* Scroll right requested*/
       && PB0DW00.PB0DWSZR > 0)        /* There are more sizes to format*/

        PB0D570(); /* Format Map 3 size qtys and col hdgs*/

      end

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map (LEFT or RIGHT)*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWSWM == "2")

    PB0D580(); /* converse PB0DM002, left half of list*/

  else

    PB0D590();
                                   /* converse PB0DM003, right half of list*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0d500 ***********************/
end // end PB0D500

// Format the display data
Function PB0D510()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PB0DW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PB0DW00.XXXTSPAG > PB0DW00.TA5TSQIX) /* Desired > highest*/
        PB0DW00.XXXTSPAG = PB0DW00.TA5TSQIX; /* Default to highest*/
      end

      PB0DS03(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW02X = 1; /* Initialize line index*/
  PB0DW00.PB0DWALF = "Y"; /* Set 'show ctl fields' to 'Y'es.*/
  PB0DW00.PB0DWCUR = "Y"; /* Set Cursor switch*/

   /* ------------------------------------------------------------*/
   /* format the temp storage area page record to the maps*/
   /* ------------------------------------------------------------*/

  while (PB0DW00.PB0DW02X <= PB0DW00.PB0DWMXL /* Until screen is full*/
   && PB0DW02.FY1FCTYC[PB0DW02X] > " ") /* or end of data*/

    PB0DW06.PB0DW6GP = PB0DW02.PB0DWRC2[PB0DW02X]; /* All lines*/

    /* ------------------------------------------------------------*/
     /* Descriptive fields ===> Maps 2 & 3*/
    /* ------------------------------------------------------------*/

    if (PB0DW02.PB0DWLTY[PB0DW02X] == 1) /* If detail item line*/
      PB0D515(); /* Format detail descriptive flds*/
    else
      PB0DW00.PB0DWALF = "Y"; /* On next detail, show ctl flds*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] == 2) /* If Sty/Clr subtotal line*/
        PB0D520(); /* Format subtotal desc flds*/
      else /* Total line*/
        PB0D525(); /* Format total desc flds*/
      end
    end


    /* ------------------------------------------------------------*/
     /* Total On order Quantity   ===> Maps 2 & 3*/
    /* ------------------------------------------------------------*/

    PB0DM002.PB0DMSTO[PB0DW02X] = PB0DW06.PC6TORDE;

    PB0DM003.PB0DMSTO[PB0DW02X] = PB0DW06.PC6TORDE;

    if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If subtotal or total line*/
      set PB0DM002.PB0DMSTO[PB0DW02X] skip, bold;
      set PB0DM003.PB0DMSTO[PB0DW02X] skip, bold;
    end

    /* ------------------------------------------------------------*/
     /* Move First Six Order Quantities by Size  To Map 2*/
    /* ------------------------------------------------------------*/

    move 0 to PB0DW00.PB0DWSZM[1] for all; /* Clear qty format area for disp line*/
    PB0DW00.PB0DWSSX = 1; /* Init display sz col subscript index*/
    PB0DW00.PB0DWSSH = 0; /* Init subscript hold area*/

    if (PB0DW00.PB0DWSCT > 0) /* If there are size qtys*/
      while (PB0DW00.PB0DWSSX <= PB0DW00.PB0DWSCT)
                                   /* Til all sizes formatted*/
        PB0DW00.PB0DWSSH = PB0DW00.PB0DWSZS[PB0DWSSX]; /* Move sz subscr*/

        /* ------------------------------------------------------------*/
         /* Move order size qty to the size column in the display array*/
        /* ------------------------------------------------------------*/

        PB0DW00.PB0DWSZM[PB0DWSSX] = PB0DW06.PB0DWORQ[PB0DWSSH];
        PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Index for subscr array*/
      end /* end-while*/
      if (PB0DWSCT > 6) /* If there are more than 6 size qtys*/
        PB0DW07.PB0DW7GP[PB0DW02X] = PB0DW00.PB0DWSZF; /* Tbl fmt szs*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Format First Six size quantities to Map 2*/
    /* ------------------------------------------------------------*/

    if (PB0DW00.PB0DWSZM[1] > 0) /* If qty in first size column*/
      PB0DM002.PB0DMSQ1[PB0DW02X] = PB0DW00.PB0DWSZM[1]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ1[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    if (PB0DW00.PB0DWSZM[2] > 0) /* If qty in second size column*/
      PB0DM002.PB0DMSQ2[PB0DW02X] = PB0DW00.PB0DWSZM[2]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ2[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    if (PB0DW00.PB0DWSZM[3] > 0) /* If qty in 3rd size column*/
      PB0DM002.PB0DMSQ3[PB0DW02X] = PB0DW00.PB0DWSZM[3]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ3[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    if (PB0DW00.PB0DWSZM[4] > 0) /* If qty in 4th size column*/
      PB0DM002.PB0DMSQ4[PB0DW02X] = PB0DW00.PB0DWSZM[4]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ4[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    if (PB0DW00.PB0DWSZM[5] > 0) /* If qty in 5th size column*/
      PB0DM002.PB0DMSQ5[PB0DW02X] = PB0DW00.PB0DWSZM[5]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ5[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    if (PB0DW00.PB0DWSZM[6] > 0) /* If qty in 6th size column*/
      PB0DM002.PB0DMSQ6[PB0DW02X] = PB0DW00.PB0DWSZM[6]; /* fmt Map2*/
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM002.PB0DMSQ6[PB0DW02X] skip, bold; /* Highlight*/
      end
    end


    /* ------------------------------------------------------------*/
     /* Increment line index for maps and page record*/
    /* ------------------------------------------------------------*/

    PB0DW00.PB0DW02X = PB0DW00.PB0DW02X + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate Nbr of sizes displayed and remaining to display*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWSCT <= 6) /* All qtys fit on Map 2*/
    PB0DW00.PB0DWSZD = PB0DW00.PB0DWSCT; /* Set nbr szs displayed*/
    PB0DW00.PB0DWSZR = 0; /* No sizes remaining to be formatted*/
  else /* Have some size qty columns for Map 3*/
    PB0DW00.PB0DWSZD = 6; /* Set nbr szs displayed*/
    PB0DW00.PB0DWSZR = PB0DW00.PB0DWSCT; /* Init sizes remaining*/
    PB0DW00.PB0DWSZR = PB0DW00.PB0DWSZR - 6;
                                   /* Size col remaining to format*/

  end

  PB0DW00.PB0DWSCP = 6; /* Init max col nbr index for map 3*/

   /* **                                                        ***/
   /* ********************** End of Pb0d510 ***********************/
end // end PB0D510

// Format detail descriptive flds
Function PB0D515()
   /* ------------------------------------------------------------*/
   /* Format the detail line item (line type 1) descriptive*/
     /* fields from PB0DW05 and move them to maps 2 and 3.*/
   /* ------------------------------------------------------------*/

  PB0DW05.PB0DW5GP = PB0DW02.PB0DWRC2[PB0DW02X];
                                   /* To detail work rec*/

  set PB0DM002.PB0DMSEL[PB0DW02X] normal; /* 'S'elect field*/
  set PB0DM003.PB0DMSEL[PB0DW02X] normal; /* 'S'elect field*/

  if (PB0DW00.PB0DWCUR == "Y") /* Need to set cursor*/
    PB0DW00.PB0DWCUR = "N"; /* Reset cursor switch*/
    set PB0DM002.PB0DMSEL[PB0DW02X] cursor; /* Cursor at first detail line*/
    set PB0DM003.PB0DMSEL[PB0DW02X] cursor; /* Cursor at first detail line*/
  end

  PB0DM002.PB0DMSEL[PB0DW02X] = PB0DW05.PB0DMSEL; /* 'S'elect field*/
  PB0DM003.PB0DMSEL[PB0DW02X] = PB0DW05.PB0DMSEL;

   /* ------------------------------------------------------------*/
   /* Format the work area*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW2A = " "; /* Clear map 2 detail desc work area*/
  PB0DW00.PB0DW3A = " "; /* Clear map 3 detail desc work area*/


  PB0DW00.PB0DW2A4 = PB0DW05.PC3PONBR; /* FG PO Nbr*/
  PB0DW00.PB0DW2A5 = PB0DW05.PC4ORTYP; /* PO type*/
  PB0DW00.PB0DW2A6 = PB0DW05.PC6STAT; /* PO item status*/
  PB0DW00.PB0DW2A1 = PB0DW05.FY1FCTYC; /* show factory*/

  PB0DW00.PB0DW3A4 = PB0DW05.PC3PONBR; /* FG PO Nbr*/
  PB0DW00.PB0DW3A5 = PB0DW05.PC4ORTYP; /* PO type*/
  PB0DW00.PB0DW3A6 = PB0DW05.PC6STAT; /* PO item status*/

  PB0DW00.PB0DW3A7 = PB0DW05.XOWCD; /* Owner group*/
  PB0DW00.PB0DW3A8 = PB0DW05.XWHCD; /* Warehouse*/
  PB0DW00.PB0DW3A9 = PB0DW05.PC2CUXID; /* Cust Xref*/
  PB0DW00.PB0DW3A1 = PB0DW05.FY1FCTYC; /* show factory*/

  if (PB0DW05.PB0DWBLX > 0) /* Have addl Bl PO or Stk Trf Nbr*/
    if (PB0DW05.PB0DWBLX < 100000)
      PB0DW00.PB0DW3AC = PB0DW05.PB0DWBLX; /* 5-digit field*/
      PB0DW00.PB0DW3A0 = PB0DW00.PB0DW3AA; /* 6-char field*/
    else
      PB0DW00.PB0DW3AE = PB0DW05.PB0DWBLX; /* 6-digit field*/
      PB0DW00.PB0DW3A0 = PB0DW00.PB0DW3AD; /* 6-char field*/
    end
  end

  if (PB0DW00.PB0DWALF == "Y") /* If need to show ctl fields*/
    PB0DW00.PB0DW2A2 = PB0DW05.SY1STNBR; /* show style*/
    PB0DW00.PB0DW2A3 = PB0DW05.SY2CLRID; /* show color*/

    PB0DW00.PB0DW3A2 = PB0DW05.SY1STNBR; /* show style*/
    PB0DW00.PB0DW3A3 = PB0DW05.SY2CLRID; /* show color*/

    PB0DW00.PB0DWALF = "N"; /* Ctl flds have been moved to line*/

  end

   /* ------------------------------------------------------------*/
   /* Move the formatted work areas to the maps*/
   /* ------------------------------------------------------------*/

  PB0DM002.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW2A; /* Desc to map2*/
  PB0DM003.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW3A; /* Desc to map3*/

   /* **                                                        ***/
   /* ********************** End of Pb0d515 ***********************/
end // end PB0D515

// Format Sty/Clr subtotal desc
Function PB0D520()
   /* ------------------------------------------------------------*/
   /* Format the Style/Color subtotal line descriptive fields*/
     /* from PB0DW06 and move them to maps 2 and 3.*/
   /* ------------------------------------------------------------*/

   /* ET PB0DM002.PB0DMSEL(PB0DW02X) AUTOSKIP,DARK;*/
   /* ET PB0DM003.PB0DMSEL(PB0DW02X) AUTOSKIP,DARK;*/

   /* ------------------------------------------------------------*/
   /* Format the work area*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW2B = " "; /* Clear map 2 subtotal desc work area*/
  PB0DW00.PB0DW3B = " "; /* Clear map 3 subtotal desc work area*/

  PB0DW00.PB0DW2B4 = " SUBTOTALS:"; /* Subtotal label, map 2*/
  PB0DW00.PB0DW3B4 = "STYLE/COLOR SUBTOTALS:"; /* Subtot lbl, map 3*/

  if (PB0DW00.PB0DW02X == 1) /* If first line*/
    PB0DW00.PB0DW2B1 = PB0DW06.FY1FCTYC; /* show factory*/
    PB0DW00.PB0DW2B2 = PB0DW06.SY1STNBR; /* show style*/
    PB0DW00.PB0DW2B3 = PB0DW06.SY2CLRID; /* show color*/

    PB0DW00.PB0DW3B1 = PB0DW06.FY1FCTYC; /* show factory*/
    PB0DW00.PB0DW3B2 = PB0DW06.SY1STNBR; /* show style*/
    PB0DW00.PB0DW3B3 = PB0DW06.SY2CLRID; /* show color*/

  end

   /* ------------------------------------------------------------*/
   /* Move the work area to the maps*/
   /* ------------------------------------------------------------*/

  PB0DM002.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW2B; /* Desc to map2*/
  PB0DM003.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW3B; /* Desc to map3*/

  set PB0DM002.PB0DMSDL[PB0DW02X] skip, bold;
  set PB0DM003.PB0DMSDL[PB0DW02X] skip, bold;

   /* **                                                        ***/
   /* ********************** End of Pb0d520 ***********************/
end // end PB0D520

// Format Factory total desc flds
Function PB0D525()
   /* ------------------------------------------------------------*/
   /* Format the Factory total line descriptive fields*/
     /* from PB0DW06 and move them to maps 2 and 3.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Format the work area*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW2C = " "; /* Clear map 2 total desc work area*/
  PB0DW00.PB0DW3C = " "; /* Clear map 3 total desc work area*/

  if (PB0DW02.PB0DWLTY[PB0DW02X] == 3) /* If factory total line*/
    PB0DW00.PB0DW2C4 = "FACTORY TOTALS:"; /* Total label,map 2*/
    PB0DW00.PB0DW3C4 = "       FACTORY TOTALS:"; /* Total label,map 3*/

  else /* Grand total line*/
    PB0DW00.PB0DW2C4 = "  GRAND TOTALS:"; /* Total label,map 2*/
    PB0DW00.PB0DW3C4 = "         GRAND TOTALS:"; /* Total label,map 3*/

  end

  if (PB0DW00.PB0DW02X == 1) /* If first line*/
    if (PB0DW02.PB0DWLTY[PB0DW02X] == 3) /* If factory total line*/
      PB0DW00.PB0DW2C1 = PB0DW06.FY1FCTYC; /* show factory*/
      PB0DW00.PB0DW3C1 = PB0DW06.FY1FCTYC; /* show factory*/
    else /* Grand total*/
      PB0DW00.PB0DW2C1 = " "; /* show factory*/
      PB0DW00.PB0DW3C1 = " "; /* show factory*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Move the work area to the maps*/
   /* ------------------------------------------------------------*/

  PB0DM002.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW2C; /* Desc to map2*/
  PB0DM003.PB0DMSDL[PB0DW02X] = PB0DW00.PB0DW3C; /* Desc to map3*/

  set PB0DM002.PB0DMSDL[PB0DW02X] skip, bold;
  set PB0DM003.PB0DMSDL[PB0DW02X] skip, bold;

   /* **                                                        ***/
   /* ********************** End of Pb0d525 ***********************/
end // end PB0D525

// Format the map header data
Function PB0D540()
  PB0DM002.XGPCD = PB0DW01.XGPCD;
  PB0DM003.XGPCD = PB0DW01.XGPCD;

   /* ------------------------------------------------------------*/
   /* Blank PO Nbr, Stock Transfer Nbr selected*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC3BLPO > 0)

    PB0DM002.PC3BLPO = PB0DW01.PC3BLPO;
    set PB0DM002.PC3BLPO skip, bold;
    PB0DM003.PC3BLPO = PB0DW01.PC3BLPO;
    set PB0DM003.PC3BLPO skip, bold;

  end

  if (PB0DM001.IN7STNBR > 0)

    PB0DM002.IN7STNBR = PB0DW01.IN7STNBR;
    set PB0DM002.IN7STNBR skip, bold;
    PB0DM003.IN7STNBR = PB0DW01.IN7STNBR;
    set PB0DM003.IN7STNBR skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* Blank Style/Color/Dimension selected*/
   /* ------------------------------------------------------------*/


  if (PB0DM001.SY1BSTNB > " ") /* If blank sty/clr was entered*/

    PB0DM002.SY1BSTNB = PB0DW01.SY1BSTNB;
    set PB0DM002.SY1BSTNB skip, bold;
    PB0DM003.SY1BSTNB = PB0DW01.SY1BSTNB;
    set PB0DM003.SY1BSTNB skip, bold;

    PB0DM002.SY2BCLCD = PB0DW01.SY2BCLCD;
    set PB0DM002.SY2BCLCD skip, bold;
    PB0DM003.SY2BCLCD = PB0DW01.SY2BCLCD;
    set PB0DM003.SY2BCLCD skip, bold;

    PB0DM002.PB0DWBDM = PB0DW01.PB0DWBDM;
    set PB0DM002.PB0DWBDM skip, bold;
    PB0DM003.PB0DWBDM = PB0DW01.PB0DWBDM;
    set PB0DM003.PB0DWBDM skip, bold;

  else /* Display blank sty/clr even if it was not entered*/

    PB0DM002.SY1BSTNB = PB0DW00.PB0DWSB1; /* Blank style*/
    PB0DM003.SY1BSTNB = PB0DW00.PB0DWSB1;
    PB0DM002.SY2BCLCD = PB0DW00.PB0DWSB2; /* Blank color*/
    PB0DM003.SY2BCLCD = PB0DW00.PB0DWSB2;
    PB0DM002.PB0DWBDM = PB0DW00.PB0DWSB3; /* Blank dimension*/
    PB0DM003.PB0DWBDM = PB0DW00.PB0DWSB3;

  end


   /* ------------------------------------------------------------*/
   /* Remaining fields are selected from the finished goods PO*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If Factory selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.FY1FCTYC > " ")

    PB0DM002.FY1FCTYC = PB0DW01.FY1FCTYC;
    set PB0DM002.FY1FCTYC skip, bold;
    PB0DM003.FY1FCTYC = PB0DW01.FY1FCTYC;
    set PB0DM003.FY1FCTYC skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Order type selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DM001.PC4ORTYP > " ")

    PB0DM002.PC4ORTYP = PB0DW01.PC4ORTYP;
    set PB0DM002.PC4ORTYP skip, bold;
    PB0DM003.PC4ORTYP = PB0DW01.PC4ORTYP;
    set PB0DM003.PC4ORTYP skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Owner Group selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XOWCD > " ") /* owner group code*/
    PB0DM002.XOWCD = PB0DW01.XOWCD;
    set PB0DM002.XOWCD skip, bold;
    PB0DM003.XOWCD = PB0DW01.XOWCD;
    set PB0DM003.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XWHCD > " ")
    PB0DM002.XWHCD = PB0DW01.XWHCD;
    set PB0DM002.XWHCD skip, bold;
    PB0DM003.XWHCD = PB0DW01.XWHCD;
    set PB0DM003.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer Xref selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC2CUXID > " ")
    PB0DM002.PC2CUXID = PB0DW01.PC2CUXID;
    set PB0DM002.PC2CUXID skip, bold;
    PB0DM003.PC2CUXID = PB0DW01.PC2CUXID;
    set PB0DM003.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC6PLAN > 0)
    PB0DM002.PC6PLAN = PB0DW01.PC6PLAN;
    set PB0DM002.PC6PLAN skip, bold;
    PB0DM003.PC6PLAN = PB0DW01.PC6PLAN;
    set PB0DM003.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Status selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.PC6STAT > " ")
    if (PB0DM001.PC6STAT == "*X")
      PB0DM002.PC6STAT = "*X";
      PB0DM003.PC6STAT = "*X";
    else
      PB0DM002.PC6STAT = PB0DW01.PC6STAT;
      PB0DM003.PC6STAT = PB0DW01.PC6STAT;
    end
    set PB0DM002.PC6STAT skip, bold;
    set PB0DM003.PC6STAT skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Finished Good Style  selected, load to hdg on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.SY1STNBR > " ")
    PB0DM002.SY1STNBR = PB0DW01.SY1STNBR;
    set PB0DM002.SY1STNBR skip, bold;
    PB0DM003.SY1STNBR = PB0DW01.SY1STNBR;
    set PB0DM003.SY1STNBR skip, bold;
  end
   /* ------------------------------------------------------------*/
   /* If Finished Good Color  selected, load to hdg on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.SY2CLRID > " ")
    PB0DM002.SY2CLRID = PB0DW01.SY2CLRID;
    set PB0DM002.SY2CLRID skip, bold;
    PB0DM003.SY2CLRID = PB0DW01.SY2CLRID;
    set PB0DM003.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Finished Good Dimension selected, load to hdg - maps 2,3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XDMCD > " ")
    PB0DM002.XDMCD = PB0DW01.XDMCD;
    set PB0DM002.XDMCD skip, bold;
    PB0DM003.XDMCD = PB0DW01.XDMCD;
    set PB0DM003.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.XQACD > " ") /* quality code*/
    PB0DM002.XQACD = PB0DW01.XQACD;
    set PB0DM002.XQACD skip, bold;
    PB0DM003.XQACD = PB0DW01.XQACD;
    set PB0DM003.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division selected, load to heading on maps 2 & 3*/
   /* ------------------------------------------------------------*/

  if (PB0DW01.YSMXDV > " ")
    PB0DM002.YSMXDV = PB0DW01.YSMXDV;
    set PB0DM002.YSMXDV skip, bold;
    PB0DM003.YSMXDV = PB0DW01.YSMXDV;
    set PB0DM003.YSMXDV skip, bold;
  end

   /* **                                                        ***/
   /* ********************** End of PB0D540 ***********************/
end // end PB0D540

// Format the size column hdgs
Function PB0D550()
   /* ------------------------------------------------------------*/
   /* Move the size descriptions to the column headings.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWSSX = 1; /* Init display sz col subscript index*/

  while (PB0DW00.PB0DWSSX <= 6) /* Format map 2 column hdgs*/
    if (PB0DW00.PB0DWDSC[PB0DWSSX] > " ")
      PB0DM002.SY4IDDSC[PB0DWSSX] = PB0DW00.PB0DWDSC[PB0DWSSX];
    else
      set PB0DM002.SY4IDDSC[PB0DWSSX] skip, invisible;
    end
    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Index for subscr array*/
  end

  PB0DW00.PB0DWSS3 = 1; /* Init display sz col subsc, map 3*/

  while (PB0DW00.PB0DWSSX <= 9) /* Format initial map 3 column hdgs*/
    if (PB0DW00.PB0DWDSC[PB0DWSSX] > " ")
      PB0DM003.SY4IDDSC[PB0DWSS3] = PB0DW00.PB0DWDSC[PB0DWSSX];
    else
      set PB0DM003.SY4IDDSC[PB0DWSS3] skip, invisible;
    end
    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Index for subscr array*/
    PB0DW00.PB0DWSS3 = PB0DW00.PB0DWSS3 + 1; /* Index for map 3 columns*/
  end


   /* **                                                        ***/
   /* ********************** End of Pb0d550 ***********************/
end // end PB0D550

// Format the display literals
Function PB0D560()
   /* ------------------------------------------------------------*/
   /* Display the page information on both of the screens*/
   /* ------------------------------------------------------------*/

  set PB0DM002.XXXLITPG skip; /* "PAGE" literal*/
  set PB0DM003.XXXLITPG skip; /* "PAGE" literal*/
  set PB0DM002.XXXTSPAG skip; /* "Current PAGE" value*/
  set PB0DM003.XXXTSPAG skip; /* "Current PAGE" value*/
  set PB0DM002.XXXLITOF skip; /* "OF" literal*/
  set PB0DM003.XXXLITOF skip; /* "OF" literal*/
  set PB0DM002.TA5TSQIX skip; /* "Highest PAGE" value*/
  set PB0DM003.TA5TSQIX skip; /* "Highest PAGE" value*/
  PB0DM002.XXXTSPAG = PB0DW00.XXXTSPAG; /* Current page*/
  PB0DM003.XXXTSPAG = PB0DW00.XXXTSPAG; /* Current page*/
  PB0DM002.TA5TSQIX = PB0DW00.TA5TSQIX; /* Highest page*/
  PB0DM003.TA5TSQIX = PB0DW00.TA5TSQIX; /* Highest page*/


   /* ------------------------------------------------------------*/
   /* Set 'More Sizes' literals*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWSCT > 6)
    set PB0DM002.PB0DMORE skip, bold;
  end


  if (PB0DW00.PB0DWSCT > 9)
    set PB0DM003.PB0DMORE skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is not*/
   /* authorized to perform various functions.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[3] == "N") /* =======>No 'change item' security*/
    set PB0DM002.PB0DMCHG skip, invisible; /* ====> pf12 literal dark*/
    set PB0DM003.PB0DMCHG skip, invisible; /* ====> pf12 literal dark*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0D560 ***********************/
end // end PB0D560

// Format size qty only on map 3
Function PB0D570()
   /* ------------------------------------------------------------*/
   /* If there are more than six size quantities to be displayed,*/
   /* pf11 will invoke this routine to format only the size*/
   /* quantity columns and column headings on Map 3.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Move the size descriptions to the column headings.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DWSSX = PB0DW00.PB0DWSCP; /* Init size description ndx*/

  PB0DW00.PB0DWSS3 = 1; /* Init scrn sz col subscript, map 3*/

  while (PB0DW00.PB0DWSS3 <= 3) /* Format initial map 3 column hdgs*/
    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Index sz descript array*/
    if (PB0DW00.PB0DWDSC[PB0DWSSX] > " ")
      PB0DM003.SY4IDDSC[PB0DWSS3] = PB0DW00.PB0DWDSC[PB0DWSSX];
    else
      set PB0DM003.SY4IDDSC[PB0DWSS3] skip, invisible;
    end
    PB0DW00.PB0DWSS3 = PB0DW00.PB0DWSS3 + 1; /* Index for map 3 columns*/
  end


   /* ------------------------------------------------------------*/
   /* Format the size qty columns from the PB0DW07 table;*/
    /* Formatted size qty lines in PB0DW07 correspond to the*/
    /* same line in the PB0DW02 page, formatted in the columns*/
    /* to be displayed on the map.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW02X = 1; /* Initialize line index*/
  PB0DW00.PB0DWSSX = PB0DW00.PB0DWSCP; /* Init formatted sz subscr*/


  while (PB0DW00.PB0DW02X <= PB0DW00.PB0DWMXL /* Until screen is full*/
   && PB0DW02.FY1FCTYC[PB0DW02X] > " ") /* or end of data*/

    PB0DW00.PB0DWSZF = PB0DW07.PB0DW7GP[PB0DW02X]; /* Each line*/


    /* ------------------------------------------------------------*/
     /* Format the next 3 Quantity columns to Map 3*/
    /* ------------------------------------------------------------*/

    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Incr sz col subscr index*/
    PB0DM003.PB0DMSQ7[PB0DW02X] = 0; /* Init map qty field*/
    set PB0DM003.PB0DMSQ7[PB0DW02X] initialAttributes; /* Reset to normal*/

    if (PB0DW00.PB0DWSZM[PB0DWSSX] > 0) /* If qty in next size column*/
      PB0DM003.PB0DMSQ7[PB0DW02X] = PB0DW00.PB0DWSZM[PB0DWSSX];
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM003.PB0DMSQ7[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Incr sz col subscr index*/
    PB0DM003.PB0DMSQ8[PB0DW02X] = 0; /* Init map qty field*/
    set PB0DM003.PB0DMSQ8[PB0DW02X] initialAttributes; /* Reset to normal*/

    if (PB0DW00.PB0DWSZM[PB0DWSSX] > 0) /* If qty in next size column*/
      PB0DM003.PB0DMSQ8[PB0DW02X] = PB0DW00.PB0DWSZM[PB0DWSSX];
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM003.PB0DMSQ8[PB0DW02X] skip, bold; /* Highlight*/
      end
    end


    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSSX + 1; /* Incr sz col subscr index*/
    PB0DM003.PB0DMSQ9[PB0DW02X] = 0; /* Init map qty field*/
    set PB0DM003.PB0DMSQ9[PB0DW02X] initialAttributes; /* Reset to normal*/

    if (PB0DW00.PB0DWSZM[PB0DWSSX] > 0) /* If qty in next size column*/
      PB0DM003.PB0DMSQ9[PB0DW02X] = PB0DW00.PB0DWSZM[PB0DWSSX];
      if (PB0DW02.PB0DWLTY[PB0DW02X] != 1) /* If Subtotal or Total line*/
        set PB0DM003.PB0DMSQ9[PB0DW02X] skip, bold; /* Highlight*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Increment line index for maps and page record*/
    /* ------------------------------------------------------------*/

    PB0DW00.PB0DW02X = PB0DW00.PB0DW02X + 1; /* ===>Increment line index*/
    PB0DW00.PB0DWSSX = PB0DW00.PB0DWSCP; /* Init formatted sz subscr*/

  end /* end-while*/

  PB0DW00.PB0DWSCP = PB0DW00.PB0DWSCP + 3; /* Set to max sz col displayed*/

  if (PB0DW00.PB0DWSCT <= PB0DW00.PB0DWSCP)
    PB0DW00.PB0DWSZD = PB0DW00.PB0DWSCT;
    PB0DW00.PB0DWSZR = 0;
  else
    PB0DW00.PB0DWSZD = PB0DW00.PB0DWSZD + 3;
    PB0DW00.PB0DWSZR = PB0DW00.PB0DWSZR - 3;
  end



  if (PB0DW00.PB0DWSZR > 0)
    set PB0DM003.PB0DMORE skip, bold; /* 'more sizes' literal*/
  else
    set PB0DM003.PB0DMORE initialAttributes;
  end

   /* **                                                        ***/
   /* ********************** End of Pb0d570 ***********************/
end // end PB0D570

// converse left half (List Map)
Function PB0D580()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0DM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0DM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0DM002.XXXPRCNM = PB0DW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0DM002 alarm; /* Indicate sound alarm*/

  end

  converse PB0DM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0DW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0DM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0DM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0D580 ***********************/
end // end PB0D580

// converse right half (List Map)
Function PB0D590()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0DM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0DM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0DM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0DM003.XXXPRCNM = PB0DW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0DM003 alarm; /* Indicate sound alarm*/

  end

  converse PB0DM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0DW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0DM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0DM003.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0D590 ***********************/
end // end PB0D590

// -->Check attention identifier
Function PB0D600()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0DW00.PB0DWSWR == "Y") /* Request for data*/
      set PB0DW02 empty; /* M002 display storage*/
      set PB0DW03 empty; /* M003 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/
    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/
    PB0DW00.PB0DWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0DM002.CATOAP > " " /* FAST PATH was requested*/
   || PB0DM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PB0D405(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PB0DM001 initial;
      set PB0DM001.CATOAP cursor, bold; /* Highlight*/
      PB0DM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/

      PB0DW00.PB0DWSWM = "1"; /* request for map switch*/
      PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/
      PB0DW00.PB0DWSWR = "N"; /* Request for data switch*/

    else

      PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0DM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    PB0D405(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0DM001 initial;
    set PB0DM001.CATOAP cursor, bold; /* Highlight*/
    PB0DM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/

    PB0DW00.PB0DWSWM = "1"; /* request for map switch*/
    PB0DW00.PB0DWSWF = "N"; /* Format the map switch*/
    PB0DW00.PB0DWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end



   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/

    PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll left was requested, check invalid PF key*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && PB0DW00.PB0DWSWM == "2")     /* and presently in left map*/

    PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/
    converseLib.validationFailed(77); /* There are no previous sizes to*/
                                   /* display*/
    converseLib.clearScreen();
    
    set PB0DM002.PB0DMSEL[1] cursor;
    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll right was requested, check invalid PF Key*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && PB0DW00.PB0DWSWM == "3"      /* and presently in right map*/
   && PB0DW00.PB0DWSZR == 0)       /* no more sizes to display*/

    PB0DW00.XXXPRCNM = "PB0D600"; /* Module identification*/
    converseLib.validationFailed(76); /* There are no more sizes to display*/
    converseLib.clearScreen();
    
    set PB0DM003.PB0DMSEL[1] cursor;
    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf12) /* PC0K change item function requested*/

    PB0D610(); /* ===> check security/authorization*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0D600 ***********************/
end // end PB0D600

// Check PF Key security
Function PB0D610()
   /* ------------------------------------------------------------*/
   /* verify valid PF key pressed, if the user is authorized*/
   /* to perform various functions continue else error.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[3] == "N") /* =======> No PC0K change security*/
    PB0DW00.XXXPRCNM = "PB0D610";
    converseLib.validationFailed(4); /* ===>invalid PF Key*/
  end

   /* **                                                        ***/
   /* ********************** End of pb0d610 ***********************/
end // end PB0D610

// -->Reset highlighted fields
Function PB0D700()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
    /* (except 'More Sizes' literal)*/
   /* ------------------------------------------------------------*/


  PB0DW00.PB0DW02X = 1; /* Initialize line index*/

  while (PB0DW00.PB0DW02X <= PB0DW00.PB0DWMXL) /* Til end of lines*/

    if (PB0DW02.PB0DWLTY[PB0DW02X] == 1) /* if detail line*/
      set PB0DM002.PB0DMSEL[PB0DW02X] normal; /* allow entry*/
      set PB0DM003.PB0DMSEL[PB0DW02X] normal; /* allow entry*/
    else /* if total or blank line*/
      set PB0DM002.PB0DMSEL[PB0DW02X] initialAttributes; /* Autoskip, dark*/
      set PB0DM003.PB0DMSEL[PB0DW02X] initialAttributes; /* Autoskip, dark*/
    end

    PB0DW00.PB0DW02X = PB0DW00.PB0DW02X + 1; /* Increment line ndx*/

  end /* end-while*/

  set PB0DM002.CATOAP initialAttributes; /* TO application*/
  set PB0DM002.CAITEM initialAttributes; /* Application data*/


   /* **                                                        ***/
   /* ********************** End Of pb0d700 ***********************/
end // end PB0D700

// -->Verify the entered data
Function PB0D800()

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    PB0D810(); /* Verify scroll*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (PB0DW00.TA5TSQIX > 0) /* Page was formatted*/

      PB0DW00.PB0DW02X = PB0DW00.PB0DWMXL; /* Initialize line index*/

      while (PB0DW00.PB0DW02X > 0) /* Until end of lines*/

        PB0D820(); /* Verify data in the line*/

        PB0DW00.PB0DW02X = PB0DW00.PB0DW02X - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0DM002.CAITEM > " " /* Application data was entered*/
   || PB0DM003.CAITEM > " ") /* Application data was entered*/

    PB0DW00.XXXPRCNM = "PB0D800"; /* Module identification*/
    set PB0DM002.CAITEM cursor, bold; /* Highlight*/
    set PB0DM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0D800 ***********************/
end // end PB0D800

// Verify scroll request
Function PB0D810()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0DW00.XXXTSPAG < 2)       /* and no previous pages*/


    PB0DW00.XXXPRCNM = "PB0D810"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PB0DM002.PB0DMSEL[1] cursor;
    converseLib.clearScreen();
    
    set PB0DM003.PB0DMSEL[1] cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0DW00.XXXTSPAG >= PB0DW00.TA5TSQIX) /* and no more pages*/


    converseLib.clearScreen();
    
    set PB0DM002.PB0DMSEL[1] cursor;
    converseLib.clearScreen();
    
    set PB0DM003.PB0DMSEL[1] cursor;
    PB0DW00.XXXPRCNM = "PB0D810"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PB0DW00.PB0DW02X = PB0DW00.PB0DWMXL; /* Initialize line index*/

  while (PB0DW00.PB0DW02X > 0) /* Until end of lines*/

    if (PB0DM002.PB0DMSEL[PB0DW02X] != PB0DW02.PB0DMSEL[PB0DW02X]
     || PB0DM003.PB0DMSEL[PB0DW02X] != PB0DW02.PB0DMSEL[PB0DW02X])

      PB0DW00.XXXPRCNM = "PB0D810"; /* Module identification*/
      set PB0DM002.PB0DMSEL[PB0DW02X] cursor, bold; /* Highlight*/
      set PB0DM003.PB0DMSEL[PB0DW02X] cursor, bold; /* Highlight*/

      if (converseVar.eventKey is pf7 /* Scroll back request*/
       || converseVar.eventKey is pf8) /* Scroll forward request*/
        converseLib.validationFailed(14); /* can't page back/forward & select*/
      end

      if (converseVar.eventKey is pf10 /* Scroll left request*/
       || converseVar.eventKey is pf11) /* Scroll right request*/
        converseLib.validationFailed(239); /* can't page left/right & select*/
      end

    end

    PB0DW00.PB0DW02X = PB0DW00.PB0DW02X - 1; /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of pb0d810 ***********************/
end // end PB0D810

// Verify data in the line
Function PB0D820()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PB0DW00.PB0DWSWM == "2")
    if (PB0DM002.PB0DMSEL[PB0DW02X] != PB0DW02.PB0DMSEL[PB0DW02X]
     && PB0DM002.PB0DMSEL[PB0DW02X] != "S") /* and is not a "S"*/

      PB0DW00.XXXPRCNM = "PB0D820"; /* Module identification*/
      set PB0DM002.PB0DMSEL[PB0DW02X] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/
      return;

    end

  else

    if (PB0DM003.PB0DMSEL[PB0DW02X] != PB0DW02.PB0DMSEL[PB0DW02X]
     && PB0DM003.PB0DMSEL[PB0DW02X] != "S") /* and is not a "S"*/

      PB0DW00.XXXPRCNM = "PB0D820"; /* Module identification*/
      set PB0DM003.PB0DMSEL[PB0DW02X] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/
      return;

    end

  end


   /* **                                                        ***/
   /* ********************** End of pb0d820 ***********************/
end // end PB0D820

// -->Process valid input request
Function PB0D900()
   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PB0DW00.PB0DWSWM = "1"; /* ===> Set request for Sel map*/
    set PB0DM001.PC3BLPO cursor;
    set PB0DM001 empty; /* Clear map*/
    PB0DW00.PB0DWSB1 = " "; /* Clear working storage fields*/
    PB0DW00.PB0DWSB2 = " ";
    PB0DW00.PB0DWSB3 = " ";
    PB0DW01.SY1BSTNB = " ";
    PB0DW01.SY2BCLCD = " ";
    PB0DW01.XDMCD = " ";
    PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/
    exit stack; /* Flow to converse map*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/
    set PB0DM002 initial;
    set PB0DM003 initial;
    PB0DW00.XXXTSPAG = PB0DW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PB0DW00.PB0DWSWF = "Y"; /* Format the map switch*/
    set PB0DM002 initial;
    set PB0DM003 initial;
    PB0DW00.XXXTSPAG = PB0DW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf10 /* Left map requested*/
   && PB0DW00.PB0DWSWM == "3")     /* and in right map*/

    PB0DW00.PB0DWSWM = "2"; /* set request for left map*/

    if (PB0DW00.PB0DWSCT > 6) /* If there are sizes for map 3*/
      PB0DW00.PB0DWSZD = 6; /* Reset sizes displayed counter*/
      PB0DW00.PB0DWSCP = 6; /* Reset for map 3 size routine*/
      PB0DW00.PB0DWSZR = PB0DW00.PB0DWSCT; /* calculate remaining szs*/
      PB0DW00.PB0DWSZR = PB0DW00.PB0DWSZR - 6;

    else
      PB0DW00.PB0DWSZD = PB0DW00.PB0DWSCT; /* reset*/
      PB0DW00.PB0DWSZR = 0; /* reset*/
      PB0DW00.PB0DWSCP = 6; /* Reset*/
    end

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Right map requested*/

    PB0DW00.PB0DWSWM = "3"; /* set request for right map*/
                           /* (this is OK whether it is now 2 or 3)*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/


  if ("S" in PB0DM002.PB0DMSEL /* =====> Line was selected*/
   || "S" in PB0DM003.PB0DMSEL) /* =====> Line was selected*/

    set PCWREC empty; /* Init pass record*/

    PB0D910(); /* ===> load pcwrec with selected data*/
                                   /* and function*/

    if (converseVar.eventKey not pf17)
      PB0D920(); /* ===> load pcwrec with entered data (map 1)*/
    end

    PB0D930(); /* ===> load pcwrec with from appl return data*/

    COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

    PB0D405(); /* ===> Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0DW00.PB0DWSWM = "1"; /* ===> Set request for Sel map*/
    PB0DW00.PB0DWSWF = "Y"; /* ===>format the data*/
    set PB0DM001 initial; /* set map clear*/
    set PB0DM001.CATOAP cursor, bold; /* Highlight*/
    set PB0DW01 empty; /* reset map display record*/
    PB0DW01.XGPCD = COMMAREA.XGPCD;
    PB0DW00.XXXPRCNM = "PB0D900";

    exit stack; /* =================> Exit to display*/
                                   /* map*/

  else
    set PB0DM002.PB0DMSEL[1] cursor, bold; /* ====>highlight*/
    set PB0DM003.PB0DMSEL[1] cursor, bold; /* ====>highlight*/
    return; /* Return to previous process*/
  end
   /* **                                                        ***/
   /* ********************** End of pb0d900 ***********************/
end // end PB0D900

// Process selected input request
Function PB0D910()
   /* ------------------------------------------------------------*/
             /* Set up the item inquire function request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* inquire mode requested*/

    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "I";

  end

   /* ------------------------------------------------------------*/
             /* Set up the item change function request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* change mode requested*/

    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "C";

  end

   /* ------------------------------------------------------------*/
      /* Set up the 'Balance to ship' detail inquiry request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* Balance to ship inquiry*/

    COMMAREA.CATOAP = "PC0U";

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields in the pass record*/
      /* according to PF Key pressed*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PB0DW01.XGPCD; /* Move GPC to the pass rec*/

  PCWREC.PO-REG-CD = " "; /* init region*/
  PCWREC.PC3PONBR = 0; /* initialize PO nbr to pass*/
  move 0 to PCWREC.PC6ITMNB[1] for all; /* initialize sequence number*/

  PB0DW00.PB0DW02X = 1; /* Initialize map line & page rec index*/
  PB0DW00.PB0DWIXR = 1; /* Initialize item seq nbr index*/

  while (PB0DW00.PB0DW02X <= PB0DW00.PB0DWMXL) /* Until end of lines*/

    if (PB0DM002.PB0DMSEL[PB0DW02X] == "S"
     || PB0DM003.PB0DMSEL[PB0DW02X] == "S")

      PB0DW05.PB0DW5GP = PB0DW02.PB0DWRC2[PB0DW02X]; /* copy to work rec*/

      if (converseVar.eventKey is enter /* inquiry mode requested*/
       || converseVar.eventKey is pf12) /* change  mode requested*/

        if (PCWREC.PC3PONBR == 0) /* If this is the first line 'S'elected*/
          PCWREC.PC3PONBR = PB0DW05.PC3PONBR;
          PCWREC.PO-REG-CD = PB0DW05.PO-REG-CD;
          PCWREC.PC6ITMNB[PB0DWIXR] = PB0DW05.PC6ITMNB;
        else
          if (PB0DW05.PC3PONBR == PCWREC.PC3PONBR) /* for same PO*/
            PCWREC.PC6ITMNB[PB0DWIXR] = PB0DW05.PC6ITMNB;
          end

        end

      end

      if (converseVar.eventKey is pf17) /* detail requested*/

        PCWREC.PO-REG-CD = PB0DW05.PO-REG-CD;
        PCWREC.PC3PONBR = PB0DW05.PC3PONBR;

        /* ------------------------------------------------------------*/
         /* Load the product key data into the pass record*/
        /* ------------------------------------------------------------*/

        PCWREC.SY1STNBR = PB0DW05.SY1STNBR; /* Fin gd style*/
        PCWREC.YSMXDV = PB0DW05.YSMXDV; /* Division code*/

        /* --------------------------------------------------*/
        /* apparel wants to wild card all fields except for*/
        /* division and style*/
        /* --------------------------------------------------*/

        PCWREC.SY2CLRID = "*";
        PCWREC.XDMCD = "*";
        PCWREC.XQACD = "*";
        PCWREC.XOWCD = "*";
        PCWREC.PC2INSEG = "*";
        PCWREC.XPGCD = "*";
        PCWREC.XUMCD = "*";


      end

      PB0DW00.PB0DWIXR = PB0DW00.PB0DWIXR + 1; /* Incremt item seq nbr ndx*/

    end
    PB0DW00.PB0DW02X = PB0DW00.PB0DW02X + 1; /* Increment page/map line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0D910 ***********************/
end // end PB0D910

// save key data entered (map1)
Function PB0D920()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  move PB0DW01 to PCWREC withV60Compat; /* Move corresponding*/
   /* ------------------------------------------------------------*/
   /* If PO type specified, load it to the pass record.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.PC4ORTYP GT ' '      ; PO type code*/
   /* MOVE PB0DW01.PC4ORTYP TO PCWREC.PC4ORTYP;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.PC4ORTYP;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* If owner group,  load pass record.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.XOWCD GT ' '         ;owner group code*/
   /* MOVE PB0DW01.XOWCD TO PCWREC.XOWCD;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.XOWCD;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD PASS RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.XWHCD GT ' ';*/
   /* MOVE PB0DW01.XWHCD TO PCWREC.XWHCD;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.XWHCD;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.PC2CUXID GT ' ';*/
   /* MOVE PB0DW01.PC2CUXID TO PCWREC.PC2CUXID;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.PC2CUXID;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.PC6PLAN > 0;*/
   /* MOVE PB0DW01.PC6PLAN TO PCWREC.PC6PLAN;*/
   /* LSE ;*/
   /* MOVE 0 TO PCWREC.PC6PLAN;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.PC6STAT GT ' ';*/
   /* MOVE PB0DW01.PC6STAT TO PCWREC.PC6STAT;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.PC6STAT;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.SY1STNBR GT ' ';*/
   /* MOVE PB0DW01.SY1STNBR TO PCWREC.SY1STNBR;*/
   /* LSE ;*/
   /* MOVE ' ' TO pcwrec.SY1STNBR;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.SY2CLRID GT ' ';*/
   /* MOVE PB0DW01.SY2CLRID TO PCWREC.SY2CLRID;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.SY2CLRID;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.XDMCD GT ' ';*/
   /* MOVE PB0DW01.XDMCD TO PCWREC.XDMCD;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.XDMCD;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.XQACD GT ' '         ;quality code*/
   /* MOVE PB0DW01.XQACD TO PCWREC.XQACD;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.XQACD;*/
   /* ND ;*/

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

   /* F PB0DW01.YSMXDV GT ' ';*/
   /* MOVE PB0DW01.YSMXDV TO PCWREC.YSMXDV;*/
   /* LSE ;*/
   /* MOVE ' ' TO PCWREC.YSMXDV;*/
   /* ND ;*/


   /* **                                                        ***/
   /* ********************** End of pb0d920 ***********************/
end // end PB0D920

// save data for return from appl
Function PB0D930()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/

  PB0DW04.PB0DWSWM = PB0DW00.PB0DWSWM; /* current display map nbr*/
  PB0DW04.XXXTSPAG = PB0DW00.XXXTSPAG; /* T.S. Page to displayed*/
  PB0DW04.PB0DWFSX = PB0DW00.PB0DWFSX; /* Save 'Select' function to use*/
  PB0DW04.PB0DWFNX = PB0DW00.PB0DWFNX; /* Save 'Fetch Next' function*/
  PB0DW04.PB0DWFCX = PB0DW00.PB0DWFCX;
                                   /* Save 'Close' function to use*/

   /* ------------------------------------------------------------*/
     /* Save the Blank style/color for the return display,*/
     /* even if the user did not key it in on Map 1.*/
   /* ------------------------------------------------------------*/

  PB0DW01.SY1BSTNB = PB0DW00.PB0DWSB1; /* Save Blank style for return*/
  PB0DW01.SY2BCLCD = PB0DW00.PB0DWSB2; /* Save Blank color for return*/
  PB0DW01.PB0DWBDM = PB0DW00.PB0DWSB3; /* Save Blank dimensn for return*/

  PB0DW04.PB0DW1RC = PB0DW01.PB0DW1RC; /* Copy to pass save area*/


   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PB0D"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PB0DW04.PB0DWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PB0D"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PB0DW04.PB0DWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PB0D"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PB0DW04.PB0DWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PB0D"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PB0DW04.PB0DWUSR;

        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of pb0d930 ***********************/
end // end PB0D930

// Fetch item size row
Function PB0DS01()

   /* ------------------------------------------------------------*/
   /* Initialize the size record and load the key fields*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VPOSIZ02.XGPCD = PB0DW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PB0DW03.PO-REG-CD[PB0DW03X]; /* PO region*/
  VPOSIZ02.PC3PONBR = PB0DW03.PC3PONBR[PB0DW03X]; /* PO number*/
  VPOSIZ02.PC6ITMNB = PB0DW03.PC6ITMNB[PB0DW03X]; /* Item sequence number*/


  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0DS01"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SIZE ROW          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0DM001.XXXPRCNM = "PB0DS01";
  exit stack;

   /* **                                                        ***/
   /* *********************** End of PB0DS01 **********************/
end // end PB0DS01

// Add page to temp storage
Function PB0DS02()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PB0DW02.XXXTSLEN = PB0DW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

   /* F PB0DW00.TA5TSQIX EQ 0        ; No pages are formatted*/
   /* AND TA5REC.TA5FNCCD EQ 'P'    ; and last function purge*/

   /* MOVE 'N' TO TA5REC.TA5FNCCD   ; Function code*/
   /* LSE ;*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

   /* ND ;*/

  try
    call "TA0050" (PB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0DW02 empty; /* M002 & M003 display storage*/

    PB0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0DW00.XXXPRCNM = "PB0DS02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pb0ds02 ***********************/
end // end PB0DS02

// Read temporary storage page
Function PB0DS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0DW02.XXXTSLEN = PB0DW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PB0DW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0DW00.XXXPRCNM = "PC0MS04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of PC0MS04 ***********************/
end // end PB0DS03

// Select Set (S7) VPOITM01
Function PB0DS04()

  try
    call "VPOITM03" ("S7", SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS04"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0DW00.PB0DWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0DM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds04 ***********************/
end // end PB0DS04

// Fetch (N7) VPOITM01
Function PB0DS05()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" ("N7", SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0DW00.PB0DWEOF = "Y"; /* Indicate end of cursor "ITEM"*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS05"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0DW00.PB0DWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds05 ***********************/
end // end PB0DS05

// Close Set (C7) VPOITM01
Function PB0DS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" ("C7", SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS06"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds06 ***********************/
end // end PB0DS06

// Select Set (S1) VTFITM01
Function PB0DS07()

  try
    call "IO0730" ("SS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS07"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0DW00.PB0DWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0DM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN8REC.IN8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds07 ***********************/
end // end PB0DS07

// Fetch (N1) VTFITM01
Function PB0DS08()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0730" ("SN", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0DW00.PB0DWEOF = "Y"; /* Indicate end of cursor "ITEM"*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS08"; /* Module identification*/
  PB0DW00.PB0DWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0DW00.PB0DWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = IN8REC.IN8KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds08 ***********************/
end // end PB0DS08

// Close Set (C1) VTFITM01
Function PB0DS09()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0730" ("CS", SQLCA, IN8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0DW00.XXXPRCNM = "PB0DS09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0DW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN8REC.IN8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ds09 ***********************/
end // end PB0DS09

//*** RECORD=PB0DW00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -control break save fields
//    -W.S. date fields
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PB0DW00 type basicRecord
  10 PB0DWSWR PB0DWSWR ; 
  10 PB0DWSWM PB0DWSWM ; 
  10 PB0DWSWF PB0DWSWF ; 
  10 PB0DWEOF PB0DWEOF ; 
  10 PB0DWSWU PB0DWSWU ; 
  10 PB0DWXIT PB0DWXIT ; 
  10 PB0DWMOD PB0DWMOD ; 
  10 PB0DWMLT PB0DWMLT ; 
  10 PB0DWSHO PB0DWSHO ; 
  10 PB0DWALF PB0DWALF ; 
  10 PB0DWCUR PB0DWCUR ; 
  10 * char(1) ; 
  10 PB0DWICT PB0DWICT ; 
  10 PB0DWMXL PB0DWMXL ; 
  10 PB0DW02X PB0DW02X ; 
  10 PB0DW03X PB0DW03X ; 
  10 PB0DWIXR PB0DWIXR ; 
  10 PB0DWIXM PB0DWIXM ; 
  10 PB0DWIXS PB0DWIXS ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * char(1) ; 
  10 PB0DWFSX PB0DWFSX ; 
  10 PB0DWFNX PB0DWFNX ; 
  10 PB0DWFCX PB0DWFCX ; 
  10 PB0DWSBL PB0DWSBL ; 
    15 PB0DWSB1 PB0DWSB1 ; 
    15 PB0DWSB2 PB0DWSB2 ; 
    15 PB0DWSB3 PB0DWSB3 ; 
  10 PB0DWIBL PB0DWIBL ; 
    15 PB0DWIB1 PB0DWIB1 ; 
    15 PB0DWIB2 PB0DWIB2 ; 
    15 PB0DWIB3 PB0DWIB3 ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PB0DWCTL PB0DWCTL ; 
    15 PB0DWCT1 PB0DWCT1 ; 
    15 PB0DWCT2 PB0DWCT2 ; 
    15 PB0DWCT3 PB0DWCT3 ; 
  10 PB0DWQWK PB0DWQWK ; 
  10 PB0DWSOQ PB0DWSOQ ; 
  10 PB0DWSDS PB0DWSDS ; 
    15 PB0DWSTQ PB0DWSTQ [40] ; 
  10 PB0DWTOQ PB0DWTOQ ; 
  10 PB0DWSDT PB0DWSDT ; 
    15 PB0DWTTQ PB0DWTTQ [40] ; 
  10 PB0DWGOQ PB0DWGOQ ; 
  10 PB0DWSDG PB0DWSDG ; 
    15 PB0DWGTQ PB0DWGTQ [40] ; 
  10 * char(1) ; 
  10 PB0DWSZI PB0DWSZI ; 
    15 PB0DWSIZ PB0DWSIZ [40] ; 
  10 PB0DWDSC PB0DWDSC [40] ; 
  10 PB0DWSZS PB0DWSZS [40] ; 
  10 PB0DWSSX PB0DWSSX ; 
  10 PB0DWSS3 PB0DWSS3 ; 
  10 PB0DWSSH PB0DWSSH ; 
  10 PB0DWSZF PB0DWSZF ; 
    15 PB0DWSZM PB0DWSZM [40] ; 
  10 * char(1) ; 
  10 PB0DWSCT PB0DWSCT ; 
  10 PB0DWSZD PB0DWSZD ; 
  10 PB0DWSZR PB0DWSZR ; 
  10 PB0DWSCP PB0DWSCP ; 
  10 * char(1) ; 
  10 PB0DWDT PB0DWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
  10 * char(1) ; 
  10 PB0DWWHS PB0DWWHS ; 
  10 XOWKEY XOWKEY ; 
    15 PB0DWWHC PB0DWWHC ; 
    15 PB0DWOWC PB0DWOWC ; 
  10 * char(1) ; 
  10 PB0DWSPD PB0DWSPD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 * char(1) ; 
  10 PB0DW2A PB0DW2A ; 
    15 PB0DW2A2 PB0DW2A2 ; 
    15 * char(1) ; 
    15 PB0DW2A3 PB0DW2A3 ; 
    15 * char(1) ; 
    15 PB0DW2A4 PB0DW2A4 ; 
    15 * char(1) ; 
    15 PB0DW2A5 PB0DW2A5 ; 
    15 * char(1) ; 
    15 PB0DW2A6 PB0DW2A6 ; 
    15 * char(1) ; 
    15 PB0DW2A1 PB0DW2A1 ; 
  10 * char(1) ; 
  10 PB0DW3A PB0DW3A ; 
    15 PB0DW3A2 PB0DW3A2 ; 
    15 * char(1) ; 
    15 PB0DW3A3 PB0DW3A3 ; 
    15 * char(2) ; 
    15 PB0DW3A4 PB0DW3A4 ; 
    15 * char(1) ; 
    15 PB0DW3A5 PB0DW3A5 ; 
    15 * char(1) ; 
    15 PB0DW3A6 PB0DW3A6 ; 
    15 * char(1) ; 
    15 PB0DW3A7 PB0DW3A7 ; 
    15 * char(1) ; 
    15 PB0DW3A8 PB0DW3A8 ; 
    15 * char(1) ; 
    15 PB0DW3A9 PB0DW3A9 ; 
    15 * char(2) ; 
    15 PB0DW3A1 PB0DW3A1 ; 
    15 * char(1) ; 
    15 PB0DW3A0 PB0DW3A0 ; 
  10 * char(1) ; 
  10 PB0DW3AA PB0DW3AA ; 
    15 PB0DW3AB PB0DW3AB ; 
    15 PB0DW3AC PB0DW3AC ; 
  10 * char(1) ; 
  10 PB0DW3AD PB0DW3AD ; 
    15 PB0DW3AE PB0DW3AE ; 
  10 * char(1) ; 
  10 PB0DW2B PB0DW2B ; 
    15 PB0DW2B2 PB0DW2B2 ; 
    15 * char(1) ; 
    15 PB0DW2B3 PB0DW2B3 ; 
    15 * char(1) ; 
    15 PB0DW2B4 PB0DW2B4 ; 
    15 * char(1) ; 
    15 PB0DW2B1 PB0DW2B1 ; 
  10 * char(1) ; 
  10 PB0DW3B PB0DW3B ; 
    15 PB0DW3B2 PB0DW3B2 ; 
    15 * char(1) ; 
    15 PB0DW3B3 PB0DW3B3 ; 
    15 * char(2) ; 
    15 PB0DW3B4 PB0DW3B4 ; 
    15 * char(2) ; 
    15 PB0DW3B1 PB0DW3B1 ; 
    15 * char(1) ; 
    15 * char(6) ; 
  10 * char(3) ; 
  10 PB0DW2C PB0DW2C ; 
    15 * char(7) ; 
    15 PB0DW2C4 PB0DW2C4 ; 
    15 * char(1) ; 
    15 PB0DW2C1 PB0DW2C1 ; 
  10 * char(3) ; 
  10 PB0DW3C PB0DW3C ; 
    15 * char(12) ; 
    15 PB0DW3C4 PB0DW3C4 ; 
    15 * char(2) ; 
    15 PB0DW3C1 PB0DW3C1 ; 
    15 * char(7) ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PB0DWKA1 PB0DWKA1 ; 
      20 * char(10) ; 
    15 PB0DWKA2 PB0DWKA2 ; 
      20 PB0DWKN2 PB0DWKN2 ; 
      20 * char(1) ; 
    15 PB0DWKA3 PB0DWKA3 ; 
      20 * char(10) ; 
    15 PB0DWKA4 PB0DWKA4 ; 
      20 PB0DWKN4 PB0DWKN4 ; 
      20 * char(1) ; 
end // end PB0DW00

//*** RECORD=PB0DW01 ****
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PB0DM.PB0DM001
// 
//    RECORD NAME:      PB0DW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
// 
//       It holds information that the user has entered as a
//    selection criteria for the list maps.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list maps PB0DM002 & PB0DM003.
// 
//       The PB0DW04.PB0DWRC1 group level definition must match
//    the PB0DW01.PB0DWRC1 group level definition (in this
//    record) exactly for program transfers to work correctly.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// ***********************
Record PB0DW01 type basicRecord
  5 PB0DW1RC PB0DW1RC ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 SY1BSTNB SY1BSTNB ; 
    10 SY2BCLCD SY2BCLCD ; 
    10 PB0DWBDM PB0DWBDM ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6STAT PC6STAT ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 YSMXDV YSMXDV ; 
end // end PB0DW01

//*** RECORD=PB0DW02 ****
// *********** PRODUCTION ORDER ITEM PAGE DISPLAY *************
// 
//     RECORD NAME:     PB0DW02
// 
//     This record holds one page of data and is the
//     interface record for TA0050, temporary storage routine.
// 
//     To build a page, lines are moved from PB0DW06.
//     When a page is full, it is moved to temporary storage.
// 
//     To format Maps PB0DM002 and PB0DM003, the requested
//     page is retrieved from temporary storage into PB0DW02;
//     then the data is formatted to the maps.
// 
// --------   ------   ---------------------------------------
// 03/11/91   PPETER   New record.
// 
// ***********************
Record PB0DW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PB0DWRC2 PB0DWRC2 [12] ; 
    10 PB0DWLTY PB0DWLTY ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 YSMXDV YSMXDV ; 
    10 PB0DMSEL PB0DMSEL ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 PB0DW6DS PB0DW6DS ; 
    10 PC6TORDE PC6TORDE ; 
    10 PB0DWSQD PB0DWSQD ; 
end // end PB0DW02

//*** RECORD=PB0DW03 ****
// ******* PRODUCTION ORDER HEADER + ITEM JOINED **************
// **                 WORKING STORAGE RECORD                 **
// **                                                        **
// 
//    RECORD NAME:      PB0DW03
// 
//      This is a working storage table of records returned
//    by the I/O Module PC1250, to a maximum of 100.
// 
//      It holds data that relates to a P. O. Item from:
//         DPRODC.VPOHDR01 - the P. O. Header
//         DPRODC.VPOITM01 - the P.O. Item
//    as defined in PBAREC.
// 
// **                                                        **
// **                                                        **
// ******* PRODUCTION ORDER HEADER + ITEM JOINED **************
// ***********************
Record PB0DW03 type basicRecord
  5 PBAGROUP PBAGROUP [100] ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 YPUCD YPUCD ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PB0DWCTL PB0DWCTL ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XUMCD XUMCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC6STAT PC6STAT ; 
    10 PC6TORDE PC6TORDE ; 
    10 XXXUSRID XXXUSRID ; 
end // end PB0DW03

//*** RECORD=PB0DW04 ****
// *********** PB0D PROGRAM TRANSFER INTERFACE RECORD *********
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      PB0DM.PB0DM001
// 
//    RECORD NAME:      PB0DW04
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the selection criteria
//    entered by the user on PB0DM001 at the start of the
//    application as well as the map number, temp storage page
//    number, and the DB2 functions to be used by PC1250.
// 
//       The PB0DW04.PB0DWRC1 group level definition must match
//    the PB0DW01.PB0DWRC1 group level definition exactly.
// 
//       The data to be saved is loaded to this record when
//    when a transfer to PC0K or PC0U is requested and then
//    loaded to the first available user area in the PCWREC.
// 
//      On the return from one of the above applications, the
//    appropriate PCWREC user area is loaded to this record
//    and then to the appropriate PB0DW00 and PB0DW01 fields
//    and processed to return the user to the same screen that
//    displayed when the transfer was invoked.
// 
// **                                                        **
// *********** PB0D PROGRAM TRANSFER INTERFACE RECORD *********
// ***********************
Record PB0DW04 type basicRecord
  5 PB0DWUSR PB0DWUSR ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PB0DWSWM PB0DWSWM ; 
    10 PB0DWFSX PB0DWFSX ; 
    10 PB0DWFNX PB0DWFNX ; 
    10 PB0DWFCX PB0DWFCX ; 
    10 PB0DW1RC PB0DW1RC ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3BLPO PC3BLPO ; 
      15 IN7STNBR IN7STNBR ; 
      15 SY1BSTNB SY1BSTNB ; 
      15 SY2BCLCD SY2BCLCD ; 
      15 PB0DWBDM PB0DWBDM ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 PC6PLAN PC6PLAN ; 
      15 PC6STAT PC6STAT ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 YSMXDV YSMXDV ; 
    10 * char(432) ; 
end // end PB0DW04

//*** RECORD=PB0DW05 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
//    Record Name:      PB0DW05
// 
//    Each detail item line is formatted in this record and
//  then moved to the PB0DW06 record for page formatting in
//  PB0DW02.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 03/11/91   PPETER   New record.
// 
// ***********************
Record PB0DW05 type basicRecord
  5 PB0DW5GP PB0DW5GP ; 
    10 PB0DWLTY PB0DWLTY ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 YSMXDV YSMXDV ; 
    10 PB0DMSEL PB0DMSEL ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC6STAT PC6STAT ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PB0DWBLX PB0DWBLX ; 
    10 PC6TORDE PC6TORDE ; 
    10 PB0DWSQD PB0DWSQD ; 
      15 PB0DWORQ PB0DWORQ [40] ; 
end // end PB0DW05

//*** RECORD=PB0DW06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
//                   formatted display line
// 
//    Record Name:      PC0KW06
// 
//    Each display line is formatted in this record and then
// moved to the PC0KW02 page record.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PB0DW06 type basicRecord
  5 PB0DW6GP PB0DW6GP ; 
    10 PB0DWLTY PB0DWLTY ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 YSMXDV YSMXDV ; 
    10 PB0DMSEL PB0DMSEL ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 PB0DW6DS PB0DW6DS ; 
    10 PC6TORDE PC6TORDE ; 
    10 PB0DWSQD PB0DWSQD ; 
      15 PB0DWORQ PB0DWORQ [40] ; 
end // end PB0DW06

//*** RECORD=PB0DW07 ****
// *********** PRODUCTION ORDER ITEM PAGE DISPLAY *************
// 
//     RECORD NAME:     PB0Dw07
// 
//     This table holds the formatted size quantities to
//     be displayed for one page of data.  It is built only
//     if there are seven (7) or more sizes to be displayed,
//     i.e. there will be size quantities shown on Map 3.
//     It is build in the routine that formats a page of
//     data from temporary storage into Maps 2 and 3 and is
//     used to format the quantities on Map 3.
// 
// 
// --------   ------   ---------------------------------------
// 05/13/91   PPETER   New record.
// 
// ***********************
Record PB0DW07 type basicRecord
  5 PB0DWRC7 PB0DWRC7 ; 
    10 PB0DW7GP PB0DW7GP [12] ; 
end // end PB0DW07

//*** RECORD=PBAREC ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      none
//           JOIN OF    DPRODC.VPOHDR01
//               AND    DPRODC.VPOITM01
//         for equal    XGPCD,
//                      PC3PONBR
//       selected by    XGPCD,
//                      PC3BLPO and/or IN7STNBR
// 
// COPYLIB MEMBER:      NO DCLGEN
// 
// I/O MODULE:          PC1250
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 03/11/91   PPETER   New record.
// 
// **********************
Record PBAREC type basicRecord
  5 PBAGROUP PBAGROUP ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 YPUCD YPUCD ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XUMCD XUMCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC6STAT PC6STAT ; 
    10 PC6TORDE PC6TORDE ; 
    10 XXXUSRID XXXUSRID ; 
end // end PBAREC

// Select line indicator
DataItem PB0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index PB0DW02-page & map lines
DataItem PB0DW02X smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index PB0DW03-tbl PBAREC rows
DataItem PB0DW03X smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Copy of PB0DW01
DataItem PB0DW1RC char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format detail desc-map 2
DataItem PB0DW2A char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW2A1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PB0DW2A2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PB0DW2A3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PB0DW2A4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_OT_CD
DataItem PB0DW2A5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_ITM_STAT_CD
DataItem PB0DW2A6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format subtotal desc-map 2
DataItem PB0DW2B char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW2B1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PB0DW2B2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PB0DW2B3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subtotal literal
DataItem PB0DW2B4 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format total desc-map 2
DataItem PB0DW2C char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW2C1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total literal
DataItem PB0DW2C4 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format detail desc-map 3
DataItem PB0DW3A char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alternate Blank PO/Stk Trf
DataItem PB0DW3A0 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW3A1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PB0DW3A2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PB0DW3A3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PB0DW3A4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_OT_CD
DataItem PB0DW3A5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_ITM_STAT_CD
DataItem PB0DW3A6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem PB0DW3A7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem PB0DW3A8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID
DataItem PB0DW3A9 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Zero supp Alt Blank PO/Stk Trf
DataItem PB0DW3AA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Space
DataItem PB0DW3AB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alt Blank PO/Stk Trf lt 100000
DataItem PB0DW3AC num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Zero supp Alt Blank PO/Stk Trf
DataItem PB0DW3AD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Alt Blank PO/Stk Trf lt 100000
DataItem PB0DW3AE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format subtotal desc-map 3
DataItem PB0DW3B char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW3B1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PB0DW3B2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PB0DW3B3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subtotal literal
DataItem PB0DW3B4 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format total desc-map 3
DataItem PB0DW3C char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD (Major ctl)
DataItem PB0DW3C1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total literal
DataItem PB0DW3C4 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PB0DW5GP char(206)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Descriptive fields
DataItem PB0DW6DS char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PB0DW6GP char(206)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line of size qty columns
DataItem PB0DW7GP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Show ctl fields switch
DataItem PB0DWALF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLANK XDM_DIM_CD
DataItem PB0DWBDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC3BLPO or IN7STNBR
DataItem PB0DWBLX int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ctl break FG SY_STY_NBR
DataItem PB0DWCT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ctl break FG SY_COLR_CD_ID
DataItem PB0DWCT2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ctl break FG XDM_DIM_CD
DataItem PB0DWCT3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FG Style/Color break fields
DataItem PB0DWCTL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set cursor switch
DataItem PB0DWCUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size labels used table
DataItem PB0DWDSC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Char data form
DataItem PB0DWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PB0DWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'Close' function to use
DataItem PB0DWFCX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'Next' function to use
DataItem PB0DWFNX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'Select' function to use
DataItem PB0DWFSX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total on order qty
DataItem PB0DWGOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_SZ_ONORD_QTY
DataItem PB0DWGTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item Blank SY_STY_NBR
DataItem PB0DWIB1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item Blank SY_COLR_CD_ID
DataItem PB0DWIB2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item Blank XDM_DIM_CD
DataItem PB0DWIB3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item Blank style/color/dim
DataItem PB0DWIBL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count of rows tabled
DataItem PB0DWICT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PB0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PB0DWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PB0DWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field or error key char
DataItem PB0DWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field or error key char
DataItem PB0DWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field or error key char
DataItem PB0DWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field or error key char
DataItem PB0DWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field or error key num
DataItem PB0DWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field or error key num
DataItem PB0DWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line type code
DataItem PB0DWLTY num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple styles flag
DataItem PB0DWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PB0DWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max nbr of data lines/page
DataItem PB0DWMXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_SZ_ONORD_QTY
DataItem PB0DWORQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group code
DataItem PB0DWOWC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Qty work field
DataItem PB0DWQWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level array
DataItem PB0DWRC2 char(206)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted size qty cols
DataItem PB0DWRC7 char(1920)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select Blank SY_STY_NBR
DataItem PB0DWSB1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select Blank SY_COLR_CD_ID
DataItem PB0DWSB2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select Blank XDM_DIM_CD
DataItem PB0DWSB3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select Blank style/color/dim
DataItem PB0DWSBL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max size col nbr,current map3
DataItem PB0DWSCP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Count of size columns needed
DataItem PB0DWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand total size qtys
DataItem PB0DWSDG char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sty/clr subtotal size qtys
DataItem PB0DWSDS char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory total size qtys
DataItem PB0DWSDT char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Test for unwanted CX's to omit
DataItem PB0DWSHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set 'Y' if size qty > 0
DataItem PB0DWSIZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sty/clr subtotal on order qty
DataItem PB0DWSOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level product saved
DataItem PB0DWSPD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size quantity data
DataItem PB0DWSQD char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map 3 size columns
DataItem PB0DWSS3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Hold sz qty subscript PB0DWSZS
DataItem PB0DWSSH smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for size subscr save
DataItem PB0DWSSX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_SZ_ONORD_QTY
DataItem PB0DWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map 1 switch
DataItem PB0DWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PB0DWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PB0DWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ct of size columns displayed
DataItem PB0DWSZD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formatted qtys for 1 displ ln
DataItem PB0DWSZF char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array of size qty indicators
DataItem PB0DWSZI char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formatted qtys for 1 displ ln
DataItem PB0DWSZM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ct of sz col remaing to displ
DataItem PB0DWSZR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save subscripts of sizes used
DataItem PB0DWSZS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory total on order qty
DataItem PB0DWTOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_SZ_ONORD_QTY
DataItem PB0DWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pass level user area
DataItem PB0DWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse code
DataItem PB0DWWHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work whse code
DataItem PB0DWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0DWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PBAGROUP char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

