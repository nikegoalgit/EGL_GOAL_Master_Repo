package pb0b;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0B ****
// 
//              PB0B PO Receipt Inquiry/Maint
// 
// 
// Program Description:
// 
// 
//   This program enables users to inquire, add, change, or
// apply-to P.O. receipts.  Depending on the task: inquiry,
// add, update, or apply-to; the user can release set asides
// with PF9, recompare receipt qtys with PF14, do global or
// individual qty adjustments, or do overage-condition over-
// rides with PF12.  Qty tolerance checking is automatically
// done whenever an add, update, or apply-to is requested.
// 
//   A user can select P.O. receipt rows for inquiry by status,
// receiving date range (31 days max spread), GPC, warehouse,
// style, color, dimension, quality, factory, P.O. number, P.O.
// ID, P.O. type, division code, CXREF, and S.O. number.  By
// 's'electing lines and pressing ENTER the data can be dis-
// played in greater detail on map 003.
// 
//   The user may cycle to the next row 's'elected from the
// list screen while on map 003 by pressing PF15, or, return
// to the list screen by pressing PF3.
// 
//   Whenever a receipt is 's'elected off the list screen for
// inquiry or maintenance, or PF13 is pressed to add a new
// receipt, map 003 is displayed.  When ENTER is pressed, map
// 004 is displayed.  This screen contains the size detail.
// Detail included is the receipt quantity (RCPT QTY), the
// balance of P.O. on order quantity (PO QTY BAL), and the
// difference between the two (DIFF QTY).  The balance of P.O.
// on order quantity (PO QTY BAL) is computed as follows:
// PO QTY BAL   =   P.O. ON ORDER QTY   -
//           (TOTAL QTY FOR ALL RECEIPTS  -  QTY THIS RECEIPT).
// The difference quantity (DIFF QTY) is computed as follows:
// DIFF QTY   =   RCPT QTY  - DIFF QTY.
// 
//   During maintenance, quantities may be updated on receipts
// by adjusting quantities individually or by adjusting quant-
// ities all at once by using the PF15 adjust all feature which
// applies all the quantities to an apply-to receipt from an
// original receipt.
// 
//   To add new receipts, users press PF13, enter receipt in-
// formation on map 003, press enter, and then enter size
// quantities on map 004, the size detail screen.  At this
// point, the receipts can be added by pressing ENTER for non-
// footwear items or by pressing PF9 for footwear items.  Foot
// wear receipts may include up to three screens of sizes,
// whereas non-footwear receipts require just one size screen.
// Footwear receipt processing allows for an extra step so
// that users can scroll through the size screens adding and
// adjusting size quantities without the receipt being added
// prematurely.  Once the receipt has been added, map 003 is
// displayed and the user may continue adding receipts, or
// exit to the list screen by pressing PF3.
// 
// ************************************************************
// 
// -------   --------  --------    ----------------------------
// control     date      name      description of change
// -------   --------   ------     ----------------------------
//           01/31/90   JRAMOS     created
// 0000001   07/16/90   GAMEN      Application blowing when
//                                 poid for apparel entered.
//                                 change spec to iseg on maps.
// 0000002   07/25/90   GAMEN      Fix P.O. Id for apparel
// 0000003   07/27/90   GAMEN      Fix adding of duplicate rows
// e#00000   08/07/90   kande1     Fix whse to except blank for
//                                 stock transfers
// pb101     08/08/90   kande1     fix add item to set rel stat
//                                 to 'c' in pb0b561
// fix       08/17/90   cepple     allow user to change whse cd
//                                 in apply to po.  In PB0B400
//                                 process level.
// pb#8      08/31/90   kande1     add code for status 13 used
//                                 in whse 09 or gpc 01 or qual
//                                 02.
// pb#8      09/14/90   kande1     add code for status 13 used
//                                 gpc 07.
// pb#108    12/14/90   cepple     Fix duplicate problem in
// pb#109                          detail add screen.
//                                 Fix required rcv rpt no in
//                                 change map. No longer requ.
// pb#110    12/17/90   cepple     Include cntnr and rcpt dt in
//                                 all select uniques against
//                                 DPRODC.VFYPO001
// fix       01/02/91   cepple     Would not allow overlap of
//                                 years in from-to date range.
// pb#101    01/11/91   kande1     Restructured application
//                                 removing work records 6 and
//                                 7. Consolidating level 700
//                                 processing into the 600.
//                                 Made common modules for com-
//                                 mon routines.  Added key
//                                 date editing process -- Key
//                                 data will be edited and the
//                                 processing stoppped if PO
//                                 number does not exist or
//                                 style not on PO.  If a PO
//                                 Header or a PO Item closed a
//                                 warning message will be dis-
//                                 played. This edit processing
//                                 will occur during: a) Add
//                                 PF13 for Orig. key data.
//                                 b) Maintenance func. w/o key
//                                 chg. for Orig. key data. c)
//                                 Maintenance func. w key chg.
//                                 for Orig. and Applied-To key
//                                 key data. Changed map for
//                                 status selection adding 4th
//                                 status field and setting
//                                 defaults based on GPC.
//                                 Rewrote RECOMPARE PROCESS.
//                                 The recompare process will
//                                 now occur during: a) Add
//                                 PF13 for Orig. Qty. data. b)
//                                 Maint. Func. w/o key chg for
//                                 Orig. Qty. data. c) Maint.
//                                 Func. w key chg for Orig and
//                                 Apply-To Qty.data. d) PF14
//                                 Recompare Func.
//     RECOMPARE PROCESS:  The recompare process will get all
//     related rows based on Warehouse, PO number, GPC, style,
//     color, dimension, quality, Owner Group, In-Seg, Package
//     Type for FYPO, POHDR and POITM tables for the recompare
//     calculation.  If the recompare is good, the result will
//     set all related rows to a status of 10.  If the recomp-
//     are is not good, the result will set the selected row
//     only according to the table below and all other related
//     rows are not changed.  If the PO Header is closed (PC)
//     or the PO ITEM is closed (IC) and processing continues
//     after the warning message, the result will set the
//     selected row only according to the table below and all
//     other related rows are not changed.
//           RECOMPARE STATUS TABLE
//     STATUS  RECOMPARE RESULT       ACTION
//     BEFORE
//      10    Overage Hard or PC or IC  Selected row set to  13
//      11    GOOD                      ALL related rows to  10
//      11    Overage Hard or PC or IC  Selected row remains 11
//      12    Overage Hard or PC or IC  Selected row remains 12
//      12    GOOD                      ALL related rows to  10
//      13    GOOD                      ALL related rows to  10
//      13    Overage Hard or PC or IC  Selected row remains 13
// 
// pb#012    02/05/91    cepple    1. Made rcving rpt number
//   #013                             enterable in both add and
//   #131                             apply-to processes.
//   #132                          2. Quality will be wildcard
//   #133                             against P.O. when gpc 03
//   #134                          3. Fix highlighting of
//                                    fields when message 393
//                                    displayed.
//                                 4. Do not stop user from
//                                    apply-to function when
//                                    orig style not on P.O.
//                                 5. Whse '09' will have owner
//                                    group wildcard when going
//                                    against P.O.
//                                 6. Change PO on maps to 6
//                                    characters.
//  f#137    02/18/91    cepple    Fix so that user can inquire
//   #138                          and update po rcpt item that
//                                 does not exist on the po.
// pb#000    02/21/91    cepple    Fix temporary storage length
//                                 from 1393 to 1389.  Was
//                                 incorrectly using first 4
//                                 bytes of record in calc.
// pb#000    02/27/91    mchris    Took out closed po edit -
//                                 edit too strict for users.
//  a#129    02/28/91    cepple    T-shirt changes to add rows
//                                 to alternate inventory tbls.
// pb#005    03/18/91    kstokk    Put page nbr on maps 1 & 2.
//                                 Temporarily override alt inv
//                                 ret cds.
// pb#142    03/25/91    kstokk    Modify so quality code can
//                                 be wildcarded.
// pb#140    04/02/91    kstokk    Modify so receipts can be
//                                 deleted by zeroing out the
//                                 quantities.
// a141      04/22/91    kstokk    Fix PF15 so it will take us-
//                                 er thru selections on list.
//                                 Also, when rcpts are DELETED
//                                 or an ADJ ALL is completed
//                                 if there are more selections
//                                 then the process will flow
//                                 to that selection.
// f006      04/22/91    kstokk    Improve response time for
//                                 returning to map #1.
// pb#000    04/22/91    kstokk    Remove wildcarding of OG for
//                                 t-shirts.
// *105      05/23/91    kstokk    Fix inquiry and change auth-
//                                 ority logic.
// f143      06/24/91    kstokk    Fix status update logic for
//                                 related receipts and updat-
//                                 ing of userid after chngs.
// pb#000    06/28/91    kstokk    Remove temporary override of
//                                 alt inventory return codes.
// f146      08/01/91    kstokk    On detail size map increase
//                                 size of qtys by one byte.
//                                 Reduce the number of sizes
//                                 per line by two.  Chk for
//                                 rcpt qtys > 99999 or <
//                                 -99999.
// f151      08/14/91    kstokk    Allow receipts to be select-
// f152                            ed by cust xref, div code,
// f153                            and po type. Add div code to
//                                 maps 3 and 4. Change map 1
//                                 so po id and type are from
//                                 POHDR (if POHDR row exists).
// f154                            Leave 's's on lines that are
//                                 not processed yet.
// f000      09/16/91    kstokk    Change label of OR PO BAL to
//                                 PO QTY BAL.
// f233      11/05/91    kstokk    Add BGRADE and Sales Order
//                                 (SO) handling processes.
// f000      03/18/92    kstokk    Fix QU default and required
//                                 flds check to include POID.
// f158      04/10/92    kstokk    Retrieve ORIG receipt SO if
//                                 it's not entered only if in
//                                 ADD receipt function.  Also,
//                                 allow invalid SO in all
//                                 functions if PO or POID
//                                 entered, but display warn-
//                                 ing message.
// fix       05/13/92    kstokk    Wildcard QU for gpc 03.
// fix       05/26/92    kstokk    In check for mult SOs don't
//                                 incl items with status CX.
// F161      05/29/92    kstokk    For ADD RCPT process for
// F163                            ftwr only, add pf9 to accept
//                                 and default mode to VL.
// F164      05/29/92    kstokk    Add CXREF to map 003. Fix
//                                 ADD function so status code
//                                 reset to 10 after each add.
// F188      10/16/92    ksanfo    Add xri-rcpt-stat-cd to
//                                 map 003 as display only.
// F172      10/22/92    chaert    change to xppc030 balance to
//                                 ship.  Add mode of trans.
// bug fix   11/04/92    ksanfo    put EZEROLLB  into PB0BS79.
// bug fix   11/09/92    ksanfo    Always edit gpc code from
//                                 first map, even when PF13 is
//                                 entered; PB0B150,152,160.
// EAO005    01/05/93    ksanfo    Convert all DREADO table
//                                 IOMOD calls to DORDER table
//                                 IOMOD calls.
// PCF000    05/19/93    ksanfo    bug fix - xri-rcpt-stat-cd
//                                 & pc-pv-rcpt-ivc-qty weren't
//                                 moved to new row during PF15
//                                 adjust all processing.
// PCF201    05/20/93    ksanfo    added PF16 clear key to ADD
//                                 mode of map003 i.e, PB0B300
// Pc0000    07/06/93    dhales    not passing on setaside rls
//                                 flag, mod pb0bw01, pb0b66g,
//                                 pb0b66l.
// Pc0000    08/11/93    dhales    prep for csp 4.1 convert
// Pca272    05/10/94    dhales    dont adjust alt invent. for
//                                 interim product at fcty not
//                                 normally a screener
// Pca279    06/07/94    dhales    adjust alt invent. for
//                                 uncrested product at
//                                 screener factories
// PCF010    04/03/96    GAMEN     INCREASE S.O. TO 9.3.
// PCA367    05/29/97    PHARWO    CHANGES FOR PO VIEW NAMES.
// PCA367    07/09/97    jniese    ppr corrections
// PCA398    08/22/97    KGRAHA    ALLOW 'FC' PO'S TO ACT LIKE
//           10/09/97    GREDDY    FIXED BUG IN PB0B561.
// YR2000    10/30/97    rgilli    Y2K MODIFICATIONS MADE TO:
//                                 PB0BS-32: Remove 00 yr edit.
//                                 PB0BS-48: Remove 00 yr edit.
//                                 PB0BS-68: Remove 00 yr edit.
//                                 PB0BS-78: Remove 00 yr edit.
//                                 PB0BS23:  Remove 00 yr edit.
//                                 PB0BS33:  Remove 00 yr edit.
//                                 PB0BS59:  Remove 00 yr edit.
//                                 PB0BS69:  Remove 00 yr edit.
//                                 PB0B410:  Add cc windowing
//                                 PB0B421:  Add cc windowing
//                                 PB0B11A:  Add cc windowing
//                                 PB0B114:  Add cc windowing
//                                 PB0B117:  Add cc windowing
//                                 PB0B561:  Add cc windowing
//                                 PB0B66G:  Add cc windowing
//                                 PB0B667:  Add cc windowing
//                                 PB0BS03:  Add cc windowing
//                                 PB0BS37:  Add cc windowing
//                                 PB0BS73:  Add cc windowing
//                                 PB0BS95:  Add cc windowing
// PCf128    04/20/97    NREDDY    Allow pb0b to see the recei
//                                 pts with status 10,11,12,13
//                                 just by entering the PO id
//                                 only.If the factory code or
//                                 po type entered, the system
//                                 should display receipts sati
//                                 -sfying the criteria.
// 
//                                 allow 92 days diff. between
//                                 beginning and end dates
//                                 PB0BS03.
// PCF147    07/07/98    DRAMSE    Include ST POs for GPC '02'
//                                 in PB0BS33 and PB0BS69
// TS1512    10/20/98    MHUYNH    Generated due to changes to
//                                 XPPC030.
// PCA999    07/10/99    VSANKA    Changes to prevent abends
//                                 due to duplicate receipts.
// PCA999    01/01/00    TMISHR    Fixed Y2K bug PB0Bs03
// PCF210J   03/24/00    SBUNGO    CHANGED TO USE VIEW VPOITM05
// PCF210    06/07/00    SBUNGO    Modified statement groups
//                                 pb0bs21, pb0bs31, pb0bs57
//                                 and pb0bs67
//                                 to prevent changes to SAP
//                                 countries.
//                                 (NOTE: When SAP goes live
//                                 for any ctry, only add
//                                 the ctry/whse cd in pccttbl
//                                 csp table and it will work
//                                 fine)
// PCF999   12/07/00    MNADEL     Fixed the bug of not popula-
//                                 ting the YRSCD, when a
//                                 receipt is modified for a
//                                 po which is in closed stat
//                                 in PB0BS99.
// PCF999   06/11/01    spitch     modified pb0bs77, ship-id is
//                                 included in where clause
// ************************************************************
// *********************
Program PB0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVJREC AVJREC; // record
  AVKREC AVKREC; // record
  AVLREC AVLREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  PB0BW01 PB0BW01; // record
  PB0BW02 PB0BW02; // record
  PB0BW03 PB0BW03; // record
  PB0BW04 PB0BW04; // record
  PB0BW05 PB0BW05; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCXREC PCXREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  TSXREC TSXREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XRETBL {deleteAfterUse = yes}; // table
  use XRITBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use PCCTTBL {deleteAfterUse = yes}; // table
  use PB0BM.PB0BM001,  // forms
      PB0BM.PB0BM002, 
      PB0BM.PB0BM003, 
      PB0BM.PB0BM004, 
      PB0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map(s)*/
     /* ------------------------------------------------------------*/

    goto PB0B001;
    PB0B001: PB0B001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PB0B002;

    PB0B002: PB0B002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map(s)*/
     /* ------------------------------------------------------------*/

    goto PB0B002;

  end // end main
end // end PB0B

// Initial Processing
Function PB0B001()
   /* ------------------------------------------------------------*/
                    /* Initial Processing*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check commarea security fields*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.XGPCD != "01"
   && COMMAREA.XGPCD != "02"
   && COMMAREA.XGPCD != "03"
   && COMMAREA.XGPCD != "07")
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

   /* ------------------------------------------------------------*/
   /* First-time processing*/
   /* ------------------------------------------------------------*/

                   /* Initialize work areas*/

  set PB0BW01 empty;
  set PB0BW02 empty;
  set PB0BW03 empty;
  set PB0BW04 empty;
  set PB0BW05 empty;
  set AVJREC empty;
  set AVKREC empty;
  set AVLREC empty;
  set FY1REC empty;
  set PCFREC empty;
  set VFYPO002 empty;
  set PCYREC empty;
  set PC2REC empty;
  set VPOHDR02 empty;
  set PC4REC empty;
  set PC5REC empty;
  set VPOITM05 empty;
  set VPOSIZ02 empty;
  set PG2REC empty;
  set PG3REC empty;
  set TSXREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;

                   /* Define map environment*/

  PCWREC.PC3PONBR = 0; /* Clear po nbr*/
  PB0BW01.PB0BWAPP = "PB0B"; /* Application ID*/
  PB0BW01.PB0BWPRC = "    "; /* Space out process nm*/
  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Init process disp*/

                /* Set Map 1/2 TSQ record size*/

  PB0BW01.PB0BWTSL = +1719; /* TSQ record length*/

                    /* Set map item values*/

  PB0BW01.PB0BWPRC = " "; /* Init process number*/
  PB0BW01.PB0BWFUN = "1"; /* Function #1 - receipt list 1*/
  PB0BW01.PB0BWSWR = "N"; /* Init request for data switch*/
  PB0BW01.PB0BWBYP = "N"; /* Init process bypass*/
   /* MOVE 'N' TO PB0BW03.PB0BW-PREV-ITEM-WARN;/*Init item warning flag*/
  PB0BW03.PB0BW-PREV-HDR-WARN = "N"; /* Init hdr warning flag*/
  PB0BW01.PB0BW-PREV-INV-SO-WARN = "N"; /* Init inv so warn flag-map 1*/
  PB0BW01.PB0BW-FTI-WARN = "N"; /* Init first time in flag*/
  PB0BW03.PB0BW-PREV-INV-SO-WARN = "N"; /* Init inv so warn flag-map 3*/
  PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN = "N";
                                      /* Init style missing warning flag*/
  COMMAREA.CATOAP = " "; /* Init application field*/
  COMMAREA.CAITEM = " "; /* Init item field*/

               /* Set map item default values*/

  if (COMMAREA.XGPCD == "01")
    PB0BM001.PB0BMHST[1] = "  "; /* First status*/
    PB0BW01.PB0BWHST[1] = "  "; /* First status*/
    PB0BM001.PB0BMHST[2] = "  "; /* Second status*/
    PB0BW01.PB0BWHST[2] = "  "; /* Second status*/
    PB0BM001.PB0BMHST[3] = "  "; /* Third status*/
    PB0BW01.PB0BWHST[3] = "  "; /* Third status*/
    PB0BM001.PB0BMHST[4] = "13"; /* Fourth status*/
    PB0BW01.PB0BWHST[4] = "13"; /* Fourth status*/
  end

  if (COMMAREA.XGPCD == "02")
    PB0BM001.PB0BMHST[1] = "  "; /* First status*/
    PB0BW01.PB0BWHST[1] = "  "; /* First status*/
    PB0BM001.PB0BMHST[2] = "11"; /* Second status*/
    PB0BW01.PB0BWHST[2] = "11"; /* Second status*/
    PB0BM001.PB0BMHST[3] = "12"; /* Third status*/
    PB0BW01.PB0BWHST[3] = "12"; /* Third status*/
    PB0BM001.PB0BMHST[4] = "  "; /* Fourth status*/
    PB0BW01.PB0BWHST[4] = "  "; /* Fourth status*/
  end

  if (COMMAREA.XGPCD == "03")
    PB0BM001.PB0BMHST[1] = "  "; /* First status*/
    PB0BW01.PB0BWHST[1] = "  "; /* First status*/
    PB0BM001.PB0BMHST[2] = "11"; /* Second status*/
    PB0BW01.PB0BWHST[2] = "11"; /* Second status*/
    PB0BM001.PB0BMHST[3] = "12"; /* Third status*/
    PB0BW01.PB0BWHST[3] = "12"; /* Third status*/
    PB0BM001.PB0BMHST[4] = "13"; /* Fourth status*/
    PB0BW01.PB0BWHST[4] = "13"; /* Fourth status*/
  end

  if (COMMAREA.XGPCD == "07")
    PB0BM001.PB0BMHST[1] = "  "; /* First status*/
    PB0BW01.PB0BWHST[1] = "  "; /* First status*/
    PB0BM001.PB0BMHST[2] = "  "; /* Second status*/
    PB0BW01.PB0BWHST[2] = "  "; /* Second status*/
    PB0BM001.PB0BMHST[3] = "  "; /* Third status*/
    PB0BW01.PB0BWHST[3] = "  "; /* Third status*/
    PB0BM001.PB0BMHST[4] = "13"; /* Fourth status*/
    PB0BW01.PB0BWHST[4] = "13"; /* Fourth status*/
  end

  PB0BM001.XWHCD = "*"; /* Wild card warehouse cd*/
  PCWREC.XWHCD = "*"; /* Wild card warehouse cd*/

                /* Format receipt date range*/

  XX0XS01(); /* Convert system date/time*/

  PB0BW01.PB0BWDTY = XX0XW01.XX0XWZYY; /* Reformat yy*/
  PB0BW01.PB0BWDTM = XX0XW01.XX0XWZMM; /* Reformat mm*/
  PB0BW01.PB0BWDTD = XX0XW01.XX0XWZDD; /* Reformat dd*/
  PB0BM001.PB0BMERD = PB0BW01.PB0BWDTW; /* End rcvd date*/
  PB0BW01.PB0BWERD = PB0BW01.PB0BWDTW; /* End rcvd date*/

  set TA2REC empty; /* Clear work record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Date option*/
  TA2REC.TA2GRTYP = "E"; /* Date type*/
  TA2REC.TA2DYAOD = -31; /* Days to add (or subtract)*/
  TA2REC.TA2GRGE = XX0XW01.XX0XWZDT; /* Start date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Get date range from TA00040*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date returned*/
    PB0BM001.PB0BMERD = 999999; /* Indicate invalid date*/
    set PB0BM001.PB0BMERD bold; /* Highlight field*/
  else
    PB0BW01.PB0BWDTT = TA2REC.TA2GRGE; /* To date wk area*/
    PB0BW01.PB0BWDTY = PB0BW01.PB0BWDYY; /* Reformat yy*/
    PB0BW01.PB0BWDTM = PB0BW01.PB0BWDMM; /* Reformat mm*/
    PB0BW01.PB0BWDTD = PB0BW01.PB0BWDDD; /* Reformat dd*/
    PB0BM001.PB0BMBRD = PB0BW01.PB0BWDTW; /* Beginning rcvd date*/
    PB0BW01.PB0BWBRD = PB0BW01.PB0BWDTW; /* Beginning rcvd date*/
  end

  PB0BS0A(); /* Clear map fields*/



end // end PB0B001

// P.O./Fcty/Rceipt Inq/Maint
Function PB0B002()
   /* ------------------------------------------------------------*/
                  /* P.O./Fcty/Rceipt Inq/Maint*/

   /* This is the main process used to display the maps. Process-*/
   /* ing returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed. If an invalid request is detected*/
   /* or an error is indicated, control is passed to the master*/
   /* menu.*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWFUN == "1") /* Function #1 - receipt list 1*/
    PB0B100(); /* Process Receipt List 1*/

  else
    if (PB0BW01.PB0BWFUN == "2") /* Function #2 - receipt list 2*/
      PB0B200(); /* Process Receipt List 2*/
    else
      if (PB0BW01.PB0BWFUN == "3") /* Function #3 - itm hdr add*/
        PB0B300(); /* Process Item Header Add*/

      else
        if (PB0BW01.PB0BWFUN == "4") /* Function #4 - itm hdr inq/chg*/
          PB0B400(); /* Process Item Header Inq/Chg*/

        else
          if (PB0BW01.PB0BWFUN == "5") /* Function #5 - itm dtl add*/
            PB0B500(); /* Process Item Detail Add*/

          else
            if (PB0BW01.PB0BWFUN == "6") /* Function #6 - itm dtl inq/chg*/
              PB0B600(); /* Process Item Detail Inq/Chg*/

            else
                          /* (Map Number Invalid)*/
              TA1REC.TA1TYPE = "APPL"; /* Type of error*/
              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              TA1REC.TA1PGMNM = "PB0B002 "; /* Process name*/
              TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
              TA1REC.TA1MAP = PB0BW01.PB0BWFUN; /* Map name*/
              TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";
              call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error rtn*/

            end
          end
        end
      end
    end
  end


end // end PB0B002

// Process Receipt List 1
Function PB0B100()
   /* ------------------------------------------------------------*/
                   /* Process Receipt List 1*/

   /* This is the main process used to display the map. Process-*/
   /* ing returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PB0B110(); /* Obtain the data to display*/

  PB0B120(); /* Format and display the map*/

  PB0B130(); /* Check attention identifier*/

  PB0B140(); /* Reset fields to normal intensity*/

  PB0B150(); /* Verify the entered data*/

  PB0B160(); /* Process valid input request*/


end // end PB0B100

// Obtain the data to display
Function PB0B110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/


  if (PB0BW01.PB0BWSWR == "N" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Errors found*/
    return; /* Exit to next process*/
  end


  PB0BS0C(); /* Purge any temporary storage*/


   /* ------------------------------------------------------------*/
   /* If rows with status = '10' (valid) is to be inquired upon,*/
   /* then process all valid rows first.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWIXM = 1; /* Initialize map index*/


  if (PB0BW01.PB0BWHST[1] == "10" /* Hdr status 1 w/ valid code*/
   || PB0BW01.PB0BWHST[2] == "10" /* Hdr status 2 w/ valid code*/
   || PB0BW01.PB0BWHST[3] == "10" /* Hdr status 3 w/ valid code*/
   || PB0BW01.PB0BWHST[4] == "10") /* Hdr status 4 w/ valid code*/


    PB0B11A(); /* Select DPRODC.VFYPO001 set*/


    if (converseVar.validationMsgNum == 0) /* No errors found*/

      PB0BW01.PB0BWSWF = "N"; /* Reset EOF indicator*/

      while (PB0BW01.PB0BWSWF != "Y") /* Process all selected rows*/

        PB0B111(); /* Format TSQ data*/

        if (PB0BW01.PB0BWIXM > 11) /* Map page full*/
          PB0B112(); /* Add page to TSQ*/
        end

        if (converseVar.validationMsgNum != 0) /* Errors found*/
          PB0BW01.PB0BWSWF = "Y"; /* Force loop end*/
        end

      end

      if (converseVar.validationMsgNum == 0)
        PB0B113(); /* Close DPRODC.VFYPO001 cursor*/
      end

    end


  end


   /* ------------------------------------------------------------*/
   /* Process rows with status '11' (Released from set aside) or*/
    /* '12' (Set aside).*/
   /* ------------------------------------------------------------*/


  if (PB0BW01.PB0BWHST[1] == "11" /* Hdr status 1 w/ '11' spec*/
   || PB0BW01.PB0BWHST[2] == "11" /* Hdr status 2 w/ '11' spec*/
   || PB0BW01.PB0BWHST[3] == "11" /* Hdr status 3 w/ '11' spec*/
   || PB0BW01.PB0BWHST[4] == "11" /* Hdr status 4 w/ '11' spec*/
   || PB0BW01.PB0BWHST[1] == "12" /* Hdr status 1 w/ '12' spec*/
   || PB0BW01.PB0BWHST[2] == "12" /* Hdr status 2 w/ '12' spec*/
   || PB0BW01.PB0BWHST[3] == "12" /* Hdr status 3 w/ '12' spec*/
   || PB0BW01.PB0BWHST[4] == "12") /* Hdr status 4 w/ '12' spec*/


    PB0B114(); /* Select DPRODC.VFYPO001 set*/


    if (converseVar.validationMsgNum == 0) /* No errors found*/

      PB0BW01.PB0BWSWF = "N"; /* Reset EOF indicator*/

      while (PB0BW01.PB0BWSWF != "Y") /* Process all selected rows*/

        PB0B115(); /* Format TSQ data*/

        if (PB0BW01.PB0BWIXM > 11) /* Map page full*/
          PB0B112(); /* Add page to TSQ*/
        end

        if (converseVar.validationMsgNum != 0) /* Errors found*/
          PB0BW01.PB0BWSWF = "Y"; /* Force loop end*/
        end

      end

      if (converseVar.validationMsgNum == 0)
        PB0B116(); /* Close DPRODC.VFYPO001 cursor*/
      end

    end


  end


   /* ------------------------------------------------------------*/
   /* Process rows with status '13'*/
   /* ------------------------------------------------------------*/


  if (PB0BW01.PB0BWHST[1] == "13" /* Hdr status 1 w/ '13' spec*/
   || PB0BW01.PB0BWHST[2] == "13" /* Hdr status 2 w/ '13' spec*/
   || PB0BW01.PB0BWHST[3] == "13" /* Hdr status 3 w/ '13' spec*/
   || PB0BW01.PB0BWHST[4] == "13") /* Hdr status 4 w/ '13' spec*/


    PB0B117(); /* Select DPRODC.VFYPO001 set*/


    if (converseVar.validationMsgNum == 0) /* No errors found*/

      PB0BW01.PB0BWSWF = "N"; /* Reset EOF indicator*/

      while (PB0BW01.PB0BWSWF != "Y") /* Process all selected rows*/

        PB0B118(); /* Format TSQ data*/

        if (PB0BW01.PB0BWIXM > 11) /* Map page full*/
          PB0B112(); /* Add page to TSQ*/
        end

        if (converseVar.validationMsgNum != 0) /* Errors found*/
          PB0BW01.PB0BWSWF = "Y"; /* Force loop end*/
        end

      end

      if (converseVar.validationMsgNum == 0)
        PB0B119(); /* Close DPRODC.VFYPO001 cursor*/
      end

    end


  end


  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && PB0BW01.PB0BWSDX > 1)             /* Page was formatted*/

    PB0BW01.PB0BWIX1 = PB0BW01.PB0BWSDX; /* Set start line*/
    while (PB0BW01.PB0BWIX1 <= 11) /* Until end of lines*/

      PB0BW02.PB0BWSEL[PB0BWIX1] = "*"; /* Indicate unused line*/
      PB0BW01.PB0BWIX1 = PB0BW01.PB0BWIX1 + 1; /* Loop through*/

    end

    PB0B112(); /* Add page to TSQ*/

  end


   /* ------------------------------------------------------------*/
   /* Set map page to display,*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWTSP = 1; /* Set TSQ page to 1*/
  PB0BW01.PB0BWSWR = "N"; /* Request for data completed*/

   /* ------------------------------------------------------------*/
   /* Reset Receipt Delete Flag*/
   /* ------------------------------------------------------------*/

  PB0BW05.PB0BDEL = "N"; /* Reset receipt delete flag*/

end // end PB0B110

// Process DPRODC.VFYPO002 rows
Function PB0B111()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* Check FYPO selection criteria.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

   /* tcs  change begin -----------------------------**/
  if (PB0BW01.PB0BWFID == "D") /* Select Next D specified*/
    PCXREC.PCXFUNC = "ND"; /* Indicate 'ND' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
   /* ELSE;*/
  end
  if (PB0BW01.PB0BWFID == "E") /* Select Next E specified*/
    PCXREC.PCXFUNC = "NE"; /* Indicate 'NE' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PB0BW01.PB0BWFID == "H") /* Select Next H specified*/
    PCXREC.PCXFUNC = "NH"; /* Indicate 'NH' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* tcs  change end   -----------------------------**/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* No sql errors*/

      PB0BS0H(); /* Check FYPO selection criteria*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0BW01.PB0BWSWF = "Y"; /* Indicate end of file*/
      PB0BW01.PB0BWSDX = PB0BW01.PB0BWIXM; /* Save index*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "111 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/


end // end PB0B111

// Write map storage to TSQ
Function PB0B112()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/


  PB0BW02.PB0BWLEN = PB0BW01.PB0BWTSL; /* TSQ length*/
  TA5REC.TA5APPID = "PB0B"; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/


  call "TA0050" (PB0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PB0BW01.PB0BWPRC = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


  PB0BW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  PB0BW01.PB0BWIXM = 1; /* Reset display line number*/

  set PB0BW02 empty; /* Clear temporary storage record*/


end // end PB0B112

// Close DPRODC.VFYPO002 cursor
Function PB0B113()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

   /* tcs change begin ----------------------------------**/
  if (PB0BW01.PB0BWFID == "D") /* Close D specified*/
    PCXREC.PCXFUNC = "CD"; /* Indicate 'CD' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
   /* ELSE;*/
  end
  if (PB0BW01.PB0BWFID == "E") /* Close E specified*/
    PCXREC.PCXFUNC = "CE"; /* Indicate 'CE' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (PB0BW01.PB0BWFID == "H") /* Close H specified*/

    PCXREC.PCXFUNC = "CH"; /* Indicate 'CH' function*/
    try
      call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* tcs change end   ----------------------------------**/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      return; /* Return to calling process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B113

// Select set DPRODC.VFYPO002
Function PB0B114()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set VFYPO002 empty; /* Clear record work area*/


  VFYPO002.XGPCD = PCWREC.XGPCD; /* GPC cd*/
  VFYPO002.PO-REG-CD = PCWREC.PO-REG-CD; /* po reg cd*/


   /* IF PCWREC.XWHCD NE ' '          ; Warehouse*/
  VFYPO002.XWHCD = PCWREC.XWHCD;
   /* ELSE ;*/
    /* MOVE '*' TO PCMREC.XWHCD;*/
   /* END ;*/


  if (PCWREC.SY1STNBR != " ") /* Style*/
    VFYPO002.SY1STNBR = PCWREC.SY1STNBR;
  else
    VFYPO002.SY1STNBR = "*";
  end


  if (PCWREC.SY2CLRID != " ") /* Color*/
    VFYPO002.SY2CLRID = PCWREC.SY2CLRID;
  else
    VFYPO002.SY2CLRID = "*";
  end


  if (PCWREC.XDMCD != " ") /* Dimension*/
    VFYPO002.XDMCD = PCWREC.XDMCD;
  else
    VFYPO002.XDMCD = "*";
  end


   /* IF PCWREC.XQACD NE ' '          ; Quality*/
  VFYPO002.XQACD = PCWREC.XQACD;
   /* ELSE ;*/
    /* MOVE '*' TO PCMREC.XQACD;*/
   /* END ;*/


  if (PCWREC.FY1FCTYC != " ") /* Factory*/
    VFYPO002.FY1FCTYC = PCWREC.FY1FCTYC;
  else
    VFYPO002.FY1FCTYC = "*";
  end


  if (PCWREC.PC3PONBR != 0) /* PO nbr*/
    VFYPO002.PC3PONBR = PCWREC.PC3PONBR;
  else
    VFYPO002.PC3PONBR = -1;
  end


  if (PB0BW01.PB0BW-OCI != 0 /* Cust ord id specified*/
   && PB0BW01.PB0BW-ONI != 0) /* Nike ord id specified*/
    VFYPO002.OP1PARTN = PB0BW01.PB0BW-OPC; /* Get so for part char*/
    VFYPO002.OP1CUOID = PB0BW01.PB0BW-OCI; /* Get so for cust ord id*/
    VFYPO002.OP1NORID = PB0BW01.PB0BW-ONI; /* Get so for nike ord id*/
  else
    VFYPO002.OP1PARTN = "*"; /* Get all part char*/
    VFYPO002.OP1CUOID = -1; /* Get all cust ord id*/
    VFYPO002.OP1NORID = -1; /* Get all nike ord id*/
  end


  PB0BW01.PB0BWDTW = PB0BW01.PB0BWBRD; /* Reformat beg date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* Beg month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* Beg day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* Beg year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* Beg century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXFRDT = PB0BW01.PB0BWDPW; /* Internal Beg date*/

  PB0BW01.PB0BWDTW = PB0BW01.PB0BWERD; /* Reformat end date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* End month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* End day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* End year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* End century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXTODT = PB0BW01.PB0BWDPW; /* Internal End date*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "S9"; /* Indicate 'S9' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B114

// Process DPRODC.VFYPO002 rows
Function PB0B115()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* Check FYPO selection criteria.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "N9"; /* Indicate 'N9' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* No sql errors*/

      if (PB0BW01.PB0BWHST[1] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[2] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[3] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[4] == VFYPO002.YRSCD) /* Status for inquiry*/

        PB0BS0H(); /* Check FYPO selection criteria*/

        return; /* Return to calling process*/

      else
        return; /* Return to calling process*/

      end

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0BW01.PB0BWSWF = "Y"; /* Indicate end of file*/
      PB0BW01.PB0BWSDX = PB0BW01.PB0BWIXM; /* Save index*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "115 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B115

// Close DPRODC.VFYPO002 cursor
Function PB0B116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "C9"; /* Indicate 'C9' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      return; /* Return to calling process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "116 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B116

// Select set DPRODC.VFYPO002
Function PB0B117()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set VFYPO002 empty; /* Clear record work area*/


  VFYPO002.XGPCD = PCWREC.XGPCD; /* GPC cd*/
  VFYPO002.PO-REG-CD = PCWREC.PO-REG-CD; /* po region*/


   /* IF PCWREC.XWHCD NE ' '          ; Warehouse*/
  VFYPO002.XWHCD = PCWREC.XWHCD;
   /* ELSE ;*/
    /* MOVE '*' TO PCMREC.XWHCD;*/
   /* END ;*/


  if (PCWREC.SY1STNBR != " ") /* Style*/
    VFYPO002.SY1STNBR = PCWREC.SY1STNBR;
  else
    VFYPO002.SY1STNBR = "*";
  end


  if (PCWREC.SY2CLRID != " ") /* Color*/
    VFYPO002.SY2CLRID = PCWREC.SY2CLRID;
  else
    VFYPO002.SY2CLRID = "*";
  end


  if (PCWREC.XDMCD != " ") /* Dimension*/
    VFYPO002.XDMCD = PCWREC.XDMCD;
  else
    VFYPO002.XDMCD = "*";
  end


   /* IF PCWREC.XQACD NE ' '          ; Quality*/
  VFYPO002.XQACD = PCWREC.XQACD;
   /* ELSE ;*/
    /* MOVE '*' TO PCMREC.XQACD;*/
   /* END ;*/


  if (PCWREC.FY1FCTYC != " ") /* Factory*/
    VFYPO002.FY1FCTYC = PCWREC.FY1FCTYC;
  else
    VFYPO002.FY1FCTYC = "*";
  end


  if (PCWREC.PC3PONBR != 0) /* PO nbr*/
    VFYPO002.PC3PONBR = PCWREC.PC3PONBR;
  else
    VFYPO002.PC3PONBR = -1;
  end


  if (PB0BW01.PB0BW-OCI != 0 /* Cust ord id specified*/
   && PB0BW01.PB0BW-ONI != 0) /* Nike ord id specified*/
    VFYPO002.OP1PARTN = PB0BW01.PB0BW-OPC; /* Get so for part char*/
    VFYPO002.OP1CUOID = PB0BW01.PB0BW-OCI;
                                                  /* Get so for cust ord id*/
    VFYPO002.OP1NORID = PB0BW01.PB0BW-ONI;
                                                  /* Get so for nike ord id*/
  else
    VFYPO002.OP1PARTN = "*"; /* Get all part char*/
    VFYPO002.OP1CUOID = -1; /* Get all cust ord id*/
    VFYPO002.OP1NORID = -1; /* Get all nike ord id*/
  end


  PB0BW01.PB0BWDTW = PB0BW01.PB0BWBRD; /* Reformat beg date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* Beg month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* Beg day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* Beg year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* Beg century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXFRDT = PB0BW01.PB0BWDPW; /* Internal Beg date*/

  PB0BW01.PB0BWDTW = PB0BW01.PB0BWERD; /* Reformat end date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* End month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* End day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* End year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* End century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXTODT = PB0BW01.PB0BWDPW; /* Internal End date*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "SF"; /* Indicate 'SF' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "117 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B117

// Process DPRODC.VFYPO002 rows
Function PB0B118()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* Check FYPO selection criteria.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "NF"; /* Indicate 'NF' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* No sql errors*/

      if (PB0BW01.PB0BWHST[1] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[2] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[3] == VFYPO002.YRSCD /* Status for inquiry*/
       || PB0BW01.PB0BWHST[4] == VFYPO002.YRSCD) /* Status for inquiry*/

        PB0BS0H(); /* Check FYPO selection criteria*/

        return; /* Return to calling process*/

      else
        return; /* Return to calling process*/

      end

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0BW01.PB0BWSWF = "Y"; /* Indicate end of file*/
      PB0BW01.PB0BWSDX = PB0BW01.PB0BWIXM; /* Save index*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "118 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/


end // end PB0B118

// Close DPRODC.VFYPO002 cursor
Function PB0B119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  PCXREC.PCXFUNC = "CF"; /* Indicate 'CF' function*/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      return; /* Return to calling process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "119 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B119

// Select set DPRODC.VFYPO002
Function PB0B11A()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *========================**/
   /* *  Build Common DB Keys  **/
   /* *========================**/

  set VFYPO002 empty; /* Clear record work area*/


  VFYPO002.XGPCD = PCWREC.XGPCD; /* GPC cd*/
  VFYPO002.PO-REG-CD = PCWREC.PO-REG-CD; /**/


   /* IF PCWREC.XWHCD NE ' '          ; Warehouse*/
  VFYPO002.XWHCD = PCWREC.XWHCD;
   /* ELSE ;*/
    /* MOVE '*' TO VFYPO002.XWHCD;*/
   /* END ;*/


  if (PCWREC.SY2CLRID != " ") /* Color*/
    VFYPO002.SY2CLRID = PCWREC.SY2CLRID;
  else
    VFYPO002.SY2CLRID = "*";
  end


  if (PCWREC.XDMCD != " ") /* Dimension*/
    VFYPO002.XDMCD = PCWREC.XDMCD;
  else
    VFYPO002.XDMCD = "*";
  end


   /* IF PCWREC.XQACD NE ' '          ; Quality*/
  VFYPO002.XQACD = PCWREC.XQACD;
   /* ELSE ;*/
    /* MOVE '*' TO VFYPO002.XQACD;*/
   /* END ;*/


  if (PCWREC.FY1FCTYC != " ") /* Factory*/
    VFYPO002.FY1FCTYC = PCWREC.FY1FCTYC;
  else
    VFYPO002.FY1FCTYC = "*";
  end


  if (PB0BW01.PB0BW-OCI != 0 /* Cust ord id specified*/
   && PB0BW01.PB0BW-ONI != 0) /* Nike ord id specified*/
    VFYPO002.OP1PARTN = PB0BW01.PB0BW-OPC; /* Get so for part char*/
    VFYPO002.OP1CUOID = PB0BW01.PB0BW-OCI; /* Get so for cust ord id*/
    VFYPO002.OP1NORID = PB0BW01.PB0BW-ONI; /* Get so for nike ord id*/
  else
    VFYPO002.OP1PARTN = "*"; /* Get all part char*/
    VFYPO002.OP1CUOID = -1; /* Get all cust ord id*/
    VFYPO002.OP1NORID = -1; /* Get all nike ord id*/
  end


  PB0BW01.PB0BWDTW = PB0BW01.PB0BWBRD; /* Reformat beg date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* Beg month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* Beg day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* Beg year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* Beg century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXFRDT = PB0BW01.PB0BWDPW; /* Internal Beg date*/

  PB0BW01.PB0BWDTW = PB0BW01.PB0BWERD; /* Reformat end date*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* End month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* End day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* End year*/
   /* -------------------- y2k out -----------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* End century*/
   /* -------------------- y2k out -----------------------*/
   /* -------------------- y2k in ------------------------*/
  if (PB0BW01.PB0BWDPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* -------------------- y2k in ------------------------*/
  PCXREC.PCXTODT = PB0BW01.PB0BWDPW; /* Internal End date*/

   /* *==================================**/
   /* *  Check Style or PO keys Required **/
   /* *==================================**/

  if (PCWREC.SY1STNBR != " ") /* Style not ' '*/

    PB0BW01.PB0BWFID = "D"; /* Indicate 'SD' func*/
    PCXREC.PCXFUNC = "SD"; /* Indicate 'SD' func*/
    VFYPO002.SY1STNBR = PCWREC.SY1STNBR;

    if (PCWREC.PC3PONBR <= 0) /* PO number not specified*/
      VFYPO002.PC3PONBR = -1; /* Get all po's*/
    else /* PO number specified*/
      VFYPO002.PC3PONBR = PCWREC.PC3PONBR; /**/
    end

  else /* Style eq ' '*/

    PB0BW01.PB0BWFID = "E"; /* Indicate 'SE' func*/
    PCXREC.PCXFUNC = "SE"; /* Indicate 'SE' func*/
    VFYPO002.SY1STNBR = "*"; /* Get all styles*/

    VFYPO002.PC3PONBR = PCWREC.PC3PONBR; /**/

  end

   /* tcs change begin ------------------------------------**/
  if (PCWREC.SY1STNBR == " " /* Style not specified*/
   && PCWREC.PC3PONBR <= 0)  /* po nbr not specified*/

    PB0BW01.PB0BWFID = "H"; /* Indicate 'SH' func*/
    PCXREC.PCXFUNC = "SH"; /* Indicate 'SH' func*/
    VFYPO002.SY1STNBR = "*"; /* get all styles*/
    VFYPO002.PC3PONBR = -1; /* get all po's*/
    VFYPO002.PC3POIDT = PB0BW01.PB0BW2PW;

  end
   /* tcs change end   ------------------------------------**/

   /* *==========================**/
   /* *  Access DPRODC.VFYPO002  **/
   /* *==========================**/

  try
    call "VFYPO002" (PCXREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "11A "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B11A

// Get Receipt Division Code
Function PB0B11B()
   /* ------------------------------------------------------------*/
   /*  */
   /* Get the division code for the receipt from the POITM*/
   /* table.  If the division code isn't found there, look it up*/
   /* in the PRDCU table.  If the division code isn't found there,*/
   /* default it to '10'.*/
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===>Initialize temp. cursor "ITEM"*/

  set VPOITM05 empty; /* ===>Initialize record before loading*/

  set PCYREC empty; /* ===>Initialize record before loading*/



  VPOITM05.XGPCD = VFYPO002.XGPCD; /* ==>GPC code*/
  PC5REC.XGPCD = VFYPO002.XGPCD; /* PC5REC.XGPCD chkd in XSPCS81*/
  VPOITM05.PO-REG-CD = VFYPO002.PO-REG-CD; /* ==>P.O. REGION CODE*/
  VPOITM05.PC3PONBR = VFYPO002.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VPOITM05.SY1STNBR = VFYPO002.SY1STNBR; /* ==> Style number*/
  VPOITM05.SY2CLRID = VFYPO002.SY2CLRID; /* ==> Color code*/
  VPOITM05.XDMCD = VFYPO002.XDMCD; /* ==> Dimension code*/
  VPOITM05.XQACD = VFYPO002.XQACD; /* ==> Quality code*/
  VPOITM05.XOWCD = VFYPO002.XOWCD; /* ==> Owner group code*/
  VPOITM05.PC2INSEG = VFYPO002.PC2INSEG; /* ==> Spec Diff code*/
  VPOITM05.XPGCD = VFYPO002.XPGCD; /* ==> Package code*/
  VPOITM05.XUMCD = VFYPO002.XUMCD; /* ==> Unit of measure*/

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VPOITM05.XWHCD = VFYPO002.XWHCD; /* ==> Warehouse code*/
  VPOITM05.PC2CUXID = VFYPO002.PC2CUXID; /* ==> Customer Xref id*/


   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";


  XSPCS81(); /* Select set and open cursor*/

  XSPCS82(); /* Fetch row priming read on poitm*/


  while (PC5REC.PC5WSWT == "N" /* More rows to process on poitm*/
   && VPOITM05.YSMXDV == "*") /* Div cd not found yet*/
    XSPCS82(); /* Fetch row driving read on poitm*/
  end

  XSPCS84(); /* Close set of POITM rows*/


  if (VPOITM05.YSMXDV == "  " /* Row found and DIV = '  '*/
   || VPOITM05.YSMXDV == "*") /* or row not found on POITM*/

    PB0B11C(); /* Get div cd from PRDCU*/

    if (PC2REC.YSMXDV == "  " /* Row found and DIV = '  '*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found on PRDCU*/

      PB0BW02.PB0BWTDV[PB0BWIXM] = "10";
                                      /* Default div code to '10'*/
    else /* Row found and NE '  ' on PRDCU*/

      PB0BW02.PB0BWTDV[PB0BWIXM] = PC2REC.YSMXDV;
                                      /* Move PRDCU div to ws*/
    end

  else /* Row found and NE '  ' on POITM*/

    PB0BW02.PB0BWTDV[PB0BWIXM] = VPOITM05.YSMXDV;
                                      /* Move POITM div to ws*/

  end


end // end PB0B11B

// Get Div Code from PRDCU Table
Function PB0B11C()
   /* ------------------------------------------------------------*/
   /*  */
   /* Get the division code from the PRDCU table.*/
   /*  */
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Clear record wk area*/

  PC2REC.XGPCD = VFYPO002.XGPCD; /* GPC key*/
  PC2REC.PC2INSEG = VFYPO002.PC2INSEG; /* ISEG key*/


  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "11C "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0B11C

// Format and display the map
Function PB0B120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error msg to display*/
   && PB0BW01.PB0BWBYP == "N"           /* Do not bypass process*/
   && PB0BW01.PB0BWFTI != " ")          /* Not first time through*/
    if (PB0BW01.PB0BWMNO == 460) /* Invalid SO msg to display*/
      if (PB0BW01.PB0BWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PB0BW01.PB0BWMNO);
      end /* Information msg no.*/
      set PB0BM001.OP1CUOID cursor; /* Set cursor at SO*/
    else
      PB0B121(); /* Format map page from TSQ*/
      if (converseVar.validationMsgNum == 0) /* No msg to display*/
        if (PB0BW01.PB0BWMNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PB0BW01.PB0BWMNO);
        end /* Information msg no.*/
      end
    end
  end


  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (PB0BW01.PB0BWFTI != " ") /* Not first time*/
      set PB0BM001.PB0BMSEL[1] cursor; /* Set cursor at map dtl area*/
    else /* first time*/
      PB0BM001.XGPCD = PCWREC.XGPCD; /* commarea gpc to map*/
    end

  end


   /* IF PB0BM001.XGPCD EQ '03';*/
    /* SET PB0BM001.PB0BMPYR AUTOSKIP ; Protect p.o. Id fields*/
    /* SET PB0BM001.PB0BMPMO AUTOSKIP;*/
    /* SET PB0BM001.PB0BMDMO AUTOSKIP;*/
    /* SET PB0BM001.PB0BMFCT AUTOSKIP;*/
    /* SET PB0BM001.PC4ORTYP AUTOSKIP;*/
   /* END ;*/


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    /* ET PB0BM001 ALARM;             /* Indicate sound alarm*/
    PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end


  PB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0BM001.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM001.CAITEM = COMMAREA.CAITEM; /* Fast path information*/

   /* ----------------------------------------------------------*/
   /* If no user update authority, darken PF13 add receipt*/
   /* ----------------------------------------------------------*/

  PB0BS0G(); /* Verify user authority*/

  if (PB0BW01.PB0BWUPD == "N") /* Changes not authorized*/
    set PB0BM001.PB0BMP13 skip, invisible; /* No PF13 add receipt*/
  end


  converse PB0BM001 ;


   /* ----------------------------------------------------------*/
   /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  PB0BW01.PB0BWFTI = "N"; /* First time through ind*/
  PB0BW01.PB0BWBYP = "N"; /* Reset bypass process ind*/
  PB0BW01.PB0BWMNO = 0; /* Reset information message number*/
  PB0BW01.PB0BWAPP = "PB0B"; /* App name*/

  COMMAREA.CATOAP = PB0BM001.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM001.CAITEM; /* Fast path information*/


end // end PB0B120

// Format Map Data
Function PB0B121()
   /* ------------------------------------------------------------*/
                       /* Format Map Data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear map for new data to display*/
   /* ------------------------------------------------------------*/

  set PB0BM001 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format map header information from save fields*/
   /* ------------------------------------------------------------*/

  PB0BM001.PC3PONBR = PCWREC.PC3PONBR; /* Po nbr*/
  PB0BM001.PB0BMHST[1] = PB0BW01.PB0BWHST[1]; /* Status cd*/
  PB0BM001.PB0BMHST[2] = PB0BW01.PB0BWHST[2]; /* Status cd*/
  PB0BM001.PB0BMHST[3] = PB0BW01.PB0BWHST[3]; /* Status cd*/
  PB0BM001.PB0BMHST[4] = PB0BW01.PB0BWHST[4]; /* Status cd*/
  PB0BM001.PB0BMBRD = PB0BW01.PB0BWBRD; /* Beg rcvd date*/
  PB0BM001.PB0BMERD = PB0BW01.PB0BWERD; /* End rcvd date*/
  PB0BM001.XGPCD = PCWREC.XGPCD; /* GPC*/
  PB0BM001.XWHCD = PCWREC.XWHCD; /* Warehouse*/
  PB0BM001.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
  PB0BM001.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
  PB0BM001.XDMCD = PCWREC.XDMCD; /* Dimension*/
  PB0BM001.XQACD = PCWREC.XQACD; /* Quality*/
  PB0BM001.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory*/
  PB0BM001.PB0BMPYR = PB0BW01.PB0BWPYR; /* Po id production yr*/
  PB0BM001.PB0BMPMO = PB0BW01.PB0BWPMO; /* Po id production mth*/
  PB0BM001.PB0BMDMO = PB0BW01.PB0BWDMO; /* Po id delivery mth*/
  PB0BM001.PB0BMFCT = PB0BW01.PB0BWFCT; /* Po id factory*/
  PB0BM001.PC4ORTYP = PCWREC.PC4ORTYP; /* Po type*/
  PB0BM001.PB0BMDIV = PB0BW01.PB0BWDIV; /* Division code*/
  PB0BM001.PB0BMXRF = PB0BW01.PB0BWXRF; /* Customer xref*/
  PB0BM001.OP1CUOID = PB0BW01.PB0BW-OCI; /* Cust ord id*/
  PB0BM001.OP1NORID = PB0BW01.PB0BW-ONI; /* Nike ord id*/



   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/


  if (PB0BW01.TA5TSQIX == 0) /* No data to display*/

    PB0BS0A(); /* Clear detail data from map*/

    set PB0BM001.XGPCD cursor; /* Set cursor position*/
    PB0BW01.PB0BWERL = "PB0B121"; /* Process number*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PB0BW01.PB0BWSLC = 0; /* Initialize select count*/
    return; /* Return to calling process*/

  end



  set PB0BM001.PB0BMSEL[1] cursor; /* Set cursor position*/



   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  PB0B122(); /* Obtain TSQ page*/

  set PB0BM001.PB0BMPGL skip; /* Display "PAGE" literal*/
  set PB0BM001.PB0BMOFL skip; /* Display "OF" literal*/

  PB0BM001.PB0BWTSP = PB0BW01.PB0BWTSP; /* Current page number*/
  PB0BM001.TA5TSQIX = PB0BW01.TA5TSQIX; /* Highest page number*/


  PB0BW01.PB0BWIXM = 1; /* Initialize map index*/


  while (PB0BW01.PB0BWIXM <= 11) /* Format data for display*/

    if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid map line*/

      PB0BM001.PB0BMSEL[PB0BWIXM] = PB0BW02.PB0BWSEL[PB0BWIXM];
      PB0BM001.PB0BMSTA[PB0BWIXM] = PB0BW02.PB0BWSTA[PB0BWIXM];
      PB0BM001.PB0BMEXC[PB0BWIXM] = PB0BW02.PB0BWEXC[PB0BWIXM];
      PB0BM001.PB0BMSTY[PB0BWIXM] = PB0BW02.PB0BWSTY[PB0BWIXM];
      PB0BM001.PB0BMCLR[PB0BWIXM] = PB0BW02.PB0BWCLR[PB0BWIXM];
      PB0BM001.PB0BMXDM[PB0BWIXM] = PB0BW02.PB0BWXDM[PB0BWIXM];
      PB0BM001.PB0BMXQA[PB0BWIXM] = PB0BW02.PB0BWXQA[PB0BWIXM];
      PB0BM001.PB0BMPON[PB0BWIXM] = PB0BW02.PB0BWPON[PB0BWIXM];
      if (PB0BM001.XGPCD == "03")
        PB0BM001.PB0BMDPY[PB0BWIXM] = PB0BW02.PB0BWSES[PB0BWIXM];
      else
        PB0BM001.PB0BMDPY[PB0BWIXM] = PB0BW02.PB0BWDPY[PB0BWIXM];
      end
      PB0BM001.PB0BMDPM[PB0BWIXM] = PB0BW02.PB0BWDPM[PB0BWIXM];
      PB0BM001.PB0BMDDM[PB0BWIXM] = PB0BW02.PB0BWDDM[PB0BWIXM];
      PB0BM001.PB0BMDFC[PB0BWIXM] = PB0BW02.PB0BWDFC[PB0BWIXM];
      PB0BM001.PB0BMPOT[PB0BWIXM] = PB0BW02.PB0BWPOT[PB0BWIXM];
      PB0BM001.PC2CUXID[PB0BWIXM] = PB0BW02.PC2CUXID[PB0BWIXM];
      PB0BM001.PB0BMXWH[PB0BWIXM] = PB0BW02.PB0BWXWH[PB0BWIXM];
      PB0BW01.PB0BWDPW = PB0BW02.PB0BWRDT[PB0BWIXM];
      PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY; /* Rcvd yy*/
      PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM; /* Rcvd mm*/
      PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD; /* Rcvd dd*/
      PB0BM001.PB0BMRDT[PB0BWIXM] = PB0BW01.PB0BWDTW;
      PB0BM001.PB0BMRRN[PB0BWIXM] = PB0BW02.PB0BWRRN[PB0BWIXM];

    else

      set PB0BM001.PB0BMSEL[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMSTA[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMEXC[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMSTY[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMCLR[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMXDM[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMXQA[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMPON[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMDPY[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMDPM[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMDDM[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMDFC[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMPOT[PB0BWIXM] skip, invisible;
      set PB0BM001.PC2CUXID[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMXWH[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMRDT[PB0BWIXM] skip, invisible;
      set PB0BM001.PB0BMRRN[PB0BWIXM] skip, invisible;

    end

    PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Set screen prompts*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.TA5TSQIX == 1) /* One page for display*/
    set PB0BM001.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
    set PB0BM001.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
  else /* More than one page for display*/
    if (PB0BW01.PB0BWTSP == 1 /* First page displayed*/
     && PB0BW01.PB0BWTSP < PB0BW01.TA5TSQIX) /* Not last page*/
      set PB0BM001.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
      set PB0BM001.PB0BMP08 skip; /* Show PF8 prompt*/
    else /* Not first page*/
      if (PB0BW01.PB0BWTSP < PB0BW01.TA5TSQIX) /* Not last page*/
        set PB0BM001.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM001.PB0BMP08 skip; /* Show PF8 prompt*/
      else /* Last page*/
        set PB0BM001.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM001.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
      end
    end
  end



end // end PB0B121

// Read temporary storage page
Function PB0B122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/


  PB0BW02.PB0BWLEN = PB0BW01.PB0BWTSL; /* TSQ length*/
  TA5REC.TA5APPID = "PB0B"; /* Appl Id*/
  TA5REC.TA5TSQIX = PB0BW01.PB0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/


  call "TA0050" (PB0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subrtn*/

   /* --------------------------------------------------------------------*/
   /* Check for processed selections*/
   /* --------------------------------------------------------------------*/

  if (PB0BW01.PB0BWCSL == "Y") /* Cancel selection flag = 'Y'*/
    if (PB0BW01.PB0BWSPG == PB0BW01.PB0BWTSP) /* Correct page nbr*/
      PB0BW01.PB0BWIXM = 1; /* Initialize map index*/
      while (PB0BW01.PB0BWIXM <= 11) /* While there are lines*/
        if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid map line*/
          PB0BW02.PB0BWSEL[PB0BWIXM] = PB0BW01.PB0BWBSL[PB0BWIXM];
        else
        /* continue*/
        end
        PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/
      end
    else /* Not correct page nbr*/
    /* continue*/
    end
  else /* Cancel selection flag not = 'Y'*/
   /* continue*/
  end


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PB0BW01.PB0BWPRC = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PB0BM001.XGPCD cursor; /* Fix cursor position*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B122

// Check Attention Identifier
Function PB0B130()

   /* ------------------------------------------------------------*/
                  /* Check Attention Identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 refresh PB0BM001 request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 refresh PB0BM001*/
    converseLib.clearScreen();
     /* Refresh screen*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* Init commarea*/
      PCWREC.CAUSERA = " "; /* Clear pcwrec*/
      COMMAREA.CATOAP = PB0BM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      set PB0BM001.CATOAP cursor, bold; /* TO application*/
      PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/

    else

      set PB0BM001.CATOAP cursor, bold; /* TO application*/
      converseLib.validationFailed(5); /* Indicate PF key not valid w/ fast path*/
      PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF3 exit to prdn menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 exit to prdn menu*/

    PB0BS0C(); /* Purge any temporary storage*/

    COMMAREA.CAUSERA = " "; /* Init. commarea*/
    PCWREC.CAUSERA = " "; /* Clear pcwrec area*/
    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0A"; /* Set to prdn menu*/

    XSPCS01(); /* Exit to prdn menu*/

    PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 help request or*/
   /* PF4 mstr menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 help request*/
   || converseVar.eventKey is pf4) /* PF4 mstr menu request*/

    if (converseVar.eventKey is pf1) /* PF1 help request*/
      COMMAREA.CAITEM = "PB0BM001"; /* Move in map name*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF13 add receipt request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 add receipt request*/

    PB0BS0G(); /* Verify user authority*/

    if (PB0BW01.PB0BWUPD == "N") /* User changes not authorized*/
      PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end


   /* ------------------------------------------------------------*/
   /* ENTER*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER*/

    PB0BS0G(); /* Verify user authority*/

    if (PB0BW01.PB0BWUPD == "N") /* Changes not authorized*/
      if (PB0BW01.PB0BWINQ == "N") /* Inquiries not authorized*/
        converseLib.clearScreen();
         /* Refresh map 1*/
        return; /* Exit to redisplay map*/
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* not ENTER proceed to itm hdr*/
   && converseVar.eventKey not pf7   /* not PF7 scroll backward*/
   && converseVar.eventKey not pf8   /* not PF8 scroll forward*/
   && converseVar.eventKey not pf11  /* not PF11 scroll right*/
   && converseVar.eventKey not pf13) /* not PF13 add receipt*/

    PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf11 /* PF11 scroll right*/
   || converseVar.eventKey is pf7  /* PF7 scroll backward*/
   || converseVar.eventKey is pf8) /* PF8 scroll forward*/

    if (PB0BW01.PB0BW-PREV-INV-SO-WARN == "Y" /* Prev inv SO*/
     && PB0BW01.PB0BW-FTI-WARN == "Y")        /* SO warn msg displayed*/

      PB0BW01.PB0BWERL = "PB0B130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/

      exit stack; /* Exit to redisplay map*/

    end

  end


end // end PB0B130

// Reset hlghtd flds/disp pop-ups
Function PB0B140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0BM001.PC3PONBR normal; /* Po nbr*/
  set PB0BM001.OP1CUOID normal; /* Cust ord id*/
  set PB0BM001.OP1NORID normal; /* Nike ord id*/
  set PB0BM001.PB0BMHST[1] normal; /* Status cd*/
  set PB0BM001.PB0BMHST[2] normal; /* Status cd*/
  set PB0BM001.PB0BMHST[3] normal; /* Status cd*/
  set PB0BM001.PB0BMHST[4] normal; /* Status cd*/
  set PB0BM001.PB0BMBRD normal; /* Beg rcvd date*/
  set PB0BM001.PB0BMERD normal; /* End rcvd date*/
  set PB0BM001.XGPCD normal; /* GPC*/
  set PB0BM001.XWHCD normal; /* Warehouse*/
  set PB0BM001.SY1STNBR normal; /* Style*/
  set PB0BM001.SY2CLRID normal; /* Color*/
  set PB0BM001.XDMCD normal; /* Dimension*/
  set PB0BM001.XQACD normal; /* Quality*/
  set PB0BM001.FY1FCTYC normal; /* Factory*/
  set PB0BM001.PB0BMPYR normal; /* Po id production yr*/
  set PB0BM001.PB0BMPMO normal; /* Po id production mth*/
  set PB0BM001.PB0BMDMO normal; /* Po id delivery mth*/
  set PB0BM001.PB0BMFCT normal; /* Po id factory*/
  set PB0BM001.PC4ORTYP normal; /* Po type*/
  set PB0BM001.PB0BMDIV normal; /* Division code*/
  set PB0BM001.PB0BMXRF normal; /* Customer xref*/

  PB0BM001.XXXPRCNM = "PB0B    "; /* Reset process name*/

  set PB0BM001.CATOAP initialAttributes; /* Commarea To application*/
  set PB0BM001.CAITEM initialAttributes; /* Commarea application data*/


   /* *=========================================================**/
   /* *          CHECK FOR USER ? CODE INQUIRY                  **/
   /* * 1) If the user has enter a '?' in any of the appropiate**/
   /* *    fields, display the pop up window for that CSP table**/
   /* *    and allow for inquiry.                               **/
   /* * 2) Set map page after all windows displayed             **/
   /* *==========================================================*/


  if (PB0BM001.XGPCD == "?" /* Pop-up window for GPC*/
   || PB0BM001.XWHCD == "?" /* Pop-up window for Whse*/
   || PB0BM001.XDMCD == "?" /* Pop-up window for Dimension*/
   || PB0BM001.XQACD == "?") /* Pop-up window for Quality*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      PB0BW01.PB0BWPRC = "140"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    return; /* Exit to next process*/

  end


   /* *=====================**/
   /* *  GPC POP-UP WINDOW  **/
   /* *=====================**/

  if (PB0BM001.XGPCD == "?")

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
    else
      PB0BM001.XGPCD = PCWREC.XGPCD;
    end

    set PB0BM001.XGPCD cursor; /* set cursor*/

  end


   /* *======================**/
   /* *  WHSE POP-UP WINDOW  **/
   /* *======================**/

  if (PB0BM001.XWHCD == "?")

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                  WHSE    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXWH01(); /* perform whse code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
    else
      PB0BM001.XWHCD = PCWREC.XWHCD;
    end

    set PB0BM001.XWHCD cursor; /* set cursor*/

  end


   /* *===========================**/
   /* *  DIMENSION POP-UP WINDOW  **/
   /* *===========================**/

  if (PB0BM001.XDMCD == "?")

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   DIM    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform xdm code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
    else
      PB0BM001.XDMCD = PCWREC.XDMCD;
    end

    set PB0BM001.XDMCD cursor; /* set cursor*/

  end


   /* *=========================**/
   /* *  QUALITY POP-UP WINDOW  **/
   /* *=========================**/

  if (PB0BM001.XQACD == "?")

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   XQA    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform xqa code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
    else
      PB0BM001.XQACD = PCWREC.XQACD;
    end

    set PB0BM001.XQACD cursor; /* set cursor*/

  end


   /* *===============================**/
   /* * RESET MAP, REDISPLAY CHANGES  **/
   /* *===============================**/

  converseLib.clearScreen();
   /* Clear screen before display*/
  PB0BW01.PB0BWBYP = "Y"; /* Bypass wk map contents display*/

  exit stack; /* Exit to redisplay map*/


end // end PB0B140

// Verify the entered data
Function PB0B150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM001.CAITEM > " ") /* Application data was entered*/

    set PB0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "150"; /* Process name*/

    return; /* exit redisplay map*/

  end


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PB0B151(); /* Verify scroll request*/
  else
   /* IF EZEAID IS PF13;             /* Add receipt request*/
   /* OR EZEAID IS PF11;            /* Scroll right request*/
        /* continue*/
    PB0B152(); /* Verify any changed data*/
  end


end // end PB0B150

// Verify scroll request
Function PB0B151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  PB0BW01.PB0BWIXM = 1; /* Initialize line index*/

  while (PB0BW01.PB0BWIXM <= 11) /* Until end of lines*/

    if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid line*/

      if (PB0BW02.PB0BWSEL[PB0BWIXM] != PB0BM001.PB0BMSEL[PB0BWIXM])
        set PB0BM001.PB0BMSEL[PB0BWIXM] cursor, bold; /* Highlight*/
        PB0BW01.PB0BWPRC = "151"; /* Process name*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

    end

    PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/

  end


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0BW01.PB0BWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0BW01.PB0BWPRC = "151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end


  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PB0BW01.PB0BWTSP >= PB0BW01.TA5TSQIX /* and no more pages*/
   && converseVar.validationMsgNum == 0)   /* and no errors*/
    PB0BW01.PB0BWPRC = "151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end



end // end PB0B151

// Validate Map Fields
Function PB0B152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data. Edit detail    ******/
   /* ***** fields if no selection criteria errors found.    ******/
   /* *****                                                  ******/
   /* *************************************************************/


  PB0BW01.PB0BWSWR = "N"; /* Reset req data ind off*/


   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (PB0BM001.PC3PONBR != PCWREC.PC3PONBR        /* Po nbr*/
   || PB0BM001.PB0BMHST[1] != PB0BW01.PB0BWHST[1] /* Status cd*/
   || PB0BM001.PB0BMHST[2] != PB0BW01.PB0BWHST[2] /* Status cd*/
   || PB0BM001.PB0BMHST[3] != PB0BW01.PB0BWHST[3] /* Status cd*/
   || PB0BM001.PB0BMHST[4] != PB0BW01.PB0BWHST[4] /* Status cd*/
   || PB0BM001.PB0BMBRD != PB0BW01.PB0BWBRD       /* Beg rcvd date*/
   || PB0BM001.PB0BMERD != PB0BW01.PB0BWERD       /* End rcvd date*/
   || PB0BM001.XGPCD != PCWREC.XGPCD              /* GPC*/
   || PB0BM001.XWHCD != PCWREC.XWHCD              /* Warehouse*/
   || PB0BM001.SY1STNBR != PCWREC.SY1STNBR        /* Style*/
   || PB0BM001.SY2CLRID != PCWREC.SY2CLRID        /* Color*/
   || PB0BM001.XDMCD != PCWREC.XDMCD              /* Dimension*/
   || PB0BM001.XQACD != PCWREC.XQACD              /* Quality*/
   || PB0BM001.FY1FCTYC != PCWREC.FY1FCTYC        /* Factory*/
   || PB0BM001.PB0BMPYR != PB0BW01.PB0BWPYR       /* Po id prod yr*/
   || PB0BM001.PB0BMPMO != PB0BW01.PB0BWPMO       /* Po id prod mth*/
   || PB0BM001.PB0BMDMO != PB0BW01.PB0BWDMO       /* Po id del mth*/
   || PB0BM001.PB0BMFCT != PB0BW01.PB0BWFCT       /* Po id factory*/
   || PB0BM001.PC4ORTYP != PCWREC.PC4ORTYP        /* Po type*/
   || PB0BM001.PB0BMDIV != PB0BW01.PB0BWDIV       /* Division code*/
   || PB0BM001.PB0BMXRF != PB0BW01.PB0BWXRF       /* Customer xref*/
   || PB0BM001.OP1CUOID != PB0BW01.PB0BW-OCI      /* Cust ord id*/
   || PB0BM001.OP1NORID != PB0BW01.PB0BW-ONI)     /* Nike ord id*/

    PB0BW01.PB0BWSWR = "Y"; /* New criteria entered*/
    PB0BW01.PB0BW-PREV-INV-SO-WARN = "N"; /* Previous invalid SO*/

  end


   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (PB0BW01.PB0BWSWR == "Y") /* New keys entered*/

    if (converseVar.eventKey not enter /* Enter key not pressed*/
     && converseVar.eventKey not pf11  
     && converseVar.eventKey not pf13)

      converseLib.validationFailed(4); /* Request not permitted*/
      PB0BW01.PB0BWERL = "PB0B152"; /* Process number*/
      exit stack; /* Exit to reselect data*/

    end

  end



   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/

  PB0BS-08(); /* Edit Sales order key*/

  if (converseVar.validationMsgNum != 0) /* Validation error present*/
    PB0BW01.PB0BWSWR = "N"; /* Do not select new data*/
    exit stack; /* Exit to redisplay map*/
  end

  PB0BS06(); /* Edit Customer xref*/
  PB0BS04(); /* Edit Division code*/
  PB0BS0I(); /* Edit PO Key*/
  PB0BS0O(); /* Edit Factory cd*/
  PB0BS0Q(); /* Edit Quality cd*/
  PB0BS0S(); /* Edit Dimension cd*/
  PB0BS0U(); /* Edit Color id*/
  PB0BS0W(); /* Edit Style cd*/
  PB0BS0Y(); /* Edit Warehouse cd*/
  PB0BS01(); /* Edit GPC cd*/
  PB0BS03(); /* Edit Receiving date range*/
  PB0BS05(); /* Edit Status cds*/

  if (converseVar.validationMsgNum == 0) /* No errors so far*/

    if (PB0BM001.PB0BMHST[1] == "10" /* Status cd '10' req*/
     || PB0BM001.PB0BMHST[2] == "10" /* Status cd '10' req*/
     || PB0BM001.PB0BMHST[3] == "10" /* Status cd '10' req*/
     || PB0BM001.PB0BMHST[4] == "10") /* Status cd '10' req*/

      /* tcs change begin --------------------------------**/
      if (PB0BM001.PC4ORTYP != "  " /* po type  entered*/
       && PB0BM001.PB0BMFCT != "  ") /* po id factory entered*/

        PB0BS07(); /* Check PO/Style keys*/

      end
      /* tcs change end   --------------------------------**/

    end

  end



   /* *====================================**/
   /* *  Check Criteria Validation Status  **/
   /* *====================================**/

  if (converseVar.validationMsgNum != 0) /* Validation error present*/

    PB0BW01.PB0BWSWR = "N"; /* Do not select new data*/
    PB0BS0A(); /* Clear map detail*/
    exit stack; /* Exit to redisplay map*/

  end


   /* *==========================**/
   /* *  Edit Map Detail Lines   **/
   /* *==========================**/

  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && PB0BW01.PB0BWSWR == "N"           /* and No new select criteria*/
   && PB0BW01.TA5TSQIX > 0)             /* and TSQ page(s) formatted*/

    PB0BS09(); /* Edit map detail lines*/

    PB0BS11(); /* Update TSQ page*/

  end


   /* *==========================**/
   /* Initialize page selection values*/
   /* *==========================**/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    PB0BW01.PB0BWIXM = 1; /* Initialize*/
    PB0BW01.PB0BWSPG = PB0BW01.PB0BWTSP; /* Current page nbr*/
    while (PB0BW01.PB0BWIXM <= 11) /* Format data*/
      if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid map line*/
        PB0BW01.PB0BWBSL[PB0BWIXM] = " ";
      end
      PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/
    end
  end


end // end PB0B152

// Process Valid Input Request
Function PB0B160()
   /* ------------------------------------------------------------*/
                  /* Process Valid Input Request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for previous errors or new selection criteria*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Previous error*/
    return; /* Return to calling process*/
  end

  if (converseVar.eventKey is enter /* ENTER*/
   && PB0BW01.PB0BWSWR == "Y")      /* New selection criteria*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* PF7 scroll backward or PF8 scroll forward request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll backward request*/
    PB0BW01.PB0BWTSP = PB0BW01.PB0BWTSP - 1; /* Decrement page number*/
    return; /* Return to calling process*/
  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    PB0BW01.PB0BWTSP = PB0BW01.PB0BWTSP + 1; /* Increment page number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* PF11 scroll right on receipt list request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* PF11 scroll right request*/
    PB0BW01.PB0BWFUN = "2"; /* Function #2 - rcpt list 2*/
    PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* PF13 add receipt request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 add receipt request*/
    PB0BW01.PB0BWFUN = "3"; /* Function #3 - itm hdr add*/
    PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* ENTER*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER*/

    /* -----------------------------------------------------------*/
    /* Check invalid SO warning*/
    /* -----------------------------------------------------------*/

   /* F PB0BW01.PB0BW-PREV-INV-SO-WARN = 'N';*/
   /* IF PB0BW01.PB0BWMNO EQ 460;*/
   /* MOVE 'Y' TO PB0BW01.PB0BW-PREV-INV-SO-WARN;*/
   /* EZERTN;*/
   /* END;*/
   /* ND;*/

    if (PB0BW01.PB0BWSLC <= 0) /* No selections made*/
      PB0BW01.PB0BWERL = "PB0B160"; /* This module nbr*/
      PB0BW01.PB0BWMNO = 25; /* Error msg nbr*/
    else /* Selection made*/
      PB0BW01.PB0BWSLX = 0; /* Initialize selection index*/
      PB0BW01.PB0BWFUN = "4"; /* Function #4 - itm hdr inq/chg*/
      PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
      converseLib.validationFailed(0); /* Clear error message field*/

   /* ------------------------------------------------------------*/
    /* Initialize page selection values*/
   /* ------------------------------------------------------------*/

      PB0BW01.PB0BWIXM = 1; /* Initialize*/
      PB0BW01.PB0BWSPG = PB0BW01.PB0BWTSP; /* Current page nbr*/
      while (PB0BW01.PB0BWIXM <= 11) /* Format data*/
        if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid map line*/
          PB0BW01.PB0BWBSL[PB0BWIXM] = PB0BM001.PB0BMSEL[PB0BWIXM];
        end
        PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/
      end

    end

  end

end // end PB0B160

// Process Receipt List 2
Function PB0B200()
   /* ------------------------------------------------------------*/
                    /* Process Receipt List 2*/

   /* This is the main process used to display the map. Process-*/
   /* ing returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/


  PB0B210(); /* Obtain the data to display*/

  PB0B220(); /* Format and display the map*/

  PB0B230(); /* Check attention identifier*/

   /* PERFORM PB0B240    ; Reset fields to normal intensity (N/A)*/

  PB0B250(); /* Verify the entered data*/

  PB0B260(); /* Process valid input request*/


end // end PB0B200

// Obtain data to display
Function PB0B210()
   /* ------------------------------------------------------------*/
   /* Check Process Bypass indicators*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWBYP == "Y" /* Process bypass on*/
   || converseVar.validationMsgNum != 0) /* or Errors found*/

    return; /* Exit to next process*/

  end


   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/

  set PB0BM002 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format Map Header Information from save fields.*/
   /* ------------------------------------------------------------*/

  PB0BM002.PC3PONBR = PCWREC.PC3PONBR; /* Po nbr*/
  PB0BM002.PB0BMHST[1] = PB0BW01.PB0BWHST[1]; /* Status cd*/
  PB0BM002.PB0BMHST[2] = PB0BW01.PB0BWHST[2]; /* Status cd*/
  PB0BM002.PB0BMHST[3] = PB0BW01.PB0BWHST[3]; /* Status cd*/
  PB0BM002.PB0BMHST[4] = PB0BW01.PB0BWHST[4]; /* Status cd*/
  PB0BM002.PB0BMBRD = PB0BW01.PB0BWBRD; /* Beg rcvd date*/
  PB0BM002.PB0BMERD = PB0BW01.PB0BWERD; /* End rcvd date*/
  PB0BM002.XGPCD = PCWREC.XGPCD; /* GPC*/
  PB0BM002.XWHCD = PCWREC.XWHCD; /* Warehouse*/
  PB0BM002.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
  PB0BM002.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
  PB0BM002.XDMCD = PCWREC.XDMCD; /* Dimension*/
  PB0BM002.XQACD = PCWREC.XQACD; /* Quality*/
  PB0BM002.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory*/
  PB0BM002.PB0BMPYR = PB0BW01.PB0BWPYR; /* Po id production yr*/
  PB0BM002.PB0BMPMO = PB0BW01.PB0BWPMO; /* Po id production mth*/
  PB0BM002.PB0BMDMO = PB0BW01.PB0BWDMO; /* Po id delivery mth*/
  PB0BM002.PB0BMFCT = PB0BW01.PB0BWFCT; /* Po id factory*/
  PB0BM002.PC4ORTYP = PCWREC.PC4ORTYP; /* Po type*/
  PB0BM002.PB0BMDIV = PB0BW01.PB0BWDIV; /* Division code*/
  PB0BM002.PB0BMXRF = PB0BW01.PB0BWXRF; /* Customer xref*/
  PB0BM002.OP1CUOID = PB0BW01.PB0BW-OCI; /* Cust ord id*/
  PB0BM002.OP1NORID = PB0BW01.PB0BW-ONI; /* Nike ord id*/


   /* ------------------------------------------------------------*/
   /* Protect Map Header Information.*/
   /* ------------------------------------------------------------*/

  set PB0BM002.PC3PONBR skip; /* Po nbr*/
  set PB0BM002.PB0BMHST[1] skip; /* Status cd*/
  set PB0BM002.PB0BMHST[2] skip; /* Status cd*/
  set PB0BM002.PB0BMHST[3] skip; /* Status cd*/
  set PB0BM002.PB0BMHST[4] skip; /* Status cd*/
  set PB0BM002.PB0BMBRD skip; /* Beg rcvd date*/
  set PB0BM002.PB0BMERD skip; /* End rcvd date*/
  set PB0BM002.XGPCD skip; /* GPC*/
  set PB0BM002.XWHCD skip; /* Warehouse*/
  set PB0BM002.SY1STNBR skip; /* Style*/
  set PB0BM002.SY2CLRID skip; /* Color*/
  set PB0BM002.XDMCD skip; /* Dimension*/
  set PB0BM002.XQACD skip; /* Quality*/
  set PB0BM002.FY1FCTYC skip; /* Factory*/
  set PB0BM002.PB0BMPYR skip; /* Po id production yr*/
  set PB0BM002.PB0BMPMO skip; /* Po id production mth*/
  set PB0BM002.PB0BMDMO skip; /* Po id delivery mth*/
  set PB0BM002.PB0BMFCT skip; /* Po id factory*/
  set PB0BM002.PC4ORTYP skip; /* Po type*/
  set PB0BM002.PB0BMDIV skip; /* Division code*/
  set PB0BM002.PB0BMXRF skip; /* Customer xref*/
  set PB0BM002.OP1CUOID skip; /* Cust ord id*/
  set PB0BM002.OP1NORID skip; /* Nike ord id*/



   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/


  if (PB0BW01.TA5TSQIX == 0) /* No data to display*/

    PB0BS13(); /* Clear detail data from map*/

    set PB0BM002.CATOAP cursor; /* Set cursor position*/
    PB0BW01.PB0BWERL = "PB0B210"; /* Process number*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  PB0B122(); /* Obtain TSQ page*/


  set PB0BM002.PB0BMPGL skip; /* Display "PAGE" literal*/
  set PB0BM002.PB0BMOFL skip; /* Display "OF" literal*/

  PB0BM002.PB0BWTSP = PB0BW01.PB0BWTSP; /* Current page number*/
  PB0BM002.TA5TSQIX = PB0BW01.TA5TSQIX; /* Highest page number*/


  PB0BW01.PB0BWIXM = 1; /* Initialize map index*/


  while (PB0BW01.PB0BWIXM <= 11) /* Format data for display*/

    if (PB0BW02.PB0BWSEL[PB0BWIXM] != "*") /* Valid map line*/

      set PB0BM002.PB0BMSEL[PB0BWIXM] skip; /* Protect map sel line*/

      set PB0BM002.PB0BMSEL[PB0BWIXM] skip;
      PB0BM002.PB0BMSTA[PB0BWIXM] = PB0BW02.PB0BWSTA[PB0BWIXM];
      PB0BM002.PB0BMEXC[PB0BWIXM] = PB0BW02.PB0BWEXC[PB0BWIXM];
      PB0BM002.PB0BMSTY[PB0BWIXM] = PB0BW02.PB0BWSTY[PB0BWIXM];
      PB0BM002.PB0BMCLR[PB0BWIXM] = PB0BW02.PB0BWCLR[PB0BWIXM];
      PB0BM002.PB0BMXDM[PB0BWIXM] = PB0BW02.PB0BWXDM[PB0BWIXM];
      PB0BM002.PB0BMXQA[PB0BWIXM] = PB0BW02.PB0BWXQA[PB0BWIXM];
      PB0BM002.PB0BM-SO-NBR[PB0BWIXM] = PB0BW02.PB0BW-SO-NBR[PB0BWIXM];
      PB0BW01.PB0BWDPW = PB0BW02.PB0BWRDT[PB0BWIXM];
      PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
      PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
      PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
      PB0BM002.PB0BMRDT[PB0BWIXM] = PB0BW01.PB0BWDTW;
      PB0BM002.PB0BMRRN[PB0BWIXM] = PB0BW02.PB0BWRRN[PB0BWIXM];
      PB0BW01.PB0BWDPW = PB0BW02.PB0BWSDT[PB0BWIXM];
      PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
      PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
      PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
      PB0BM002.PB0BMSDT[PB0BWIXM] = PB0BW01.PB0BWDTW;
      PB0BM002.XXXUSER[PB0BWIXM] = PB0BW02.XXXUSER[PB0BWIXM];

    else

      set PB0BM002.PB0BMSEL[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMSTA[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMEXC[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMSTY[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMCLR[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMXDM[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMXQA[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BM-SO-NBR[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMRDT[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMRRN[PB0BWIXM] skip, invisible;
      set PB0BM002.PB0BMSDT[PB0BWIXM] skip, invisible;
      set PB0BM002.XXXUSER[PB0BWIXM] skip, invisible;

    end

    PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/

  end


   /* ------------------------------------------------------------*/
   /* Set screen prompts.*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.TA5TSQIX == 1) /* Only one page to display*/
    set PB0BM002.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
    set PB0BM002.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
  else /* more than one page to display*/
    if (PB0BW01.PB0BWTSP == 1 /* page one displayed*/
     && PB0BW01.PB0BWTSP < PB0BW01.TA5TSQIX) /* not at max page*/
      set PB0BM002.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
      set PB0BM002.PB0BMP08 skip; /* Show PF8 prompt*/
    else
      if (PB0BW01.PB0BWTSP < PB0BW01.TA5TSQIX) /* not max page*/
        set PB0BM002.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM002.PB0BMP08 skip; /* Show PF8 prompt*/
      else /* at max page*/
        set PB0BM002.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM002.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Set process bypass.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWBYP = "Y"; /* Process bypass on*/


   /* ------------------------------------------------------------*/
   /* Set cursor position.*/
   /* ------------------------------------------------------------*/

  set PB0BM002.CATOAP cursor; /* Cursor in CATOAP field*/

end // end PB0B210

// Format and display the map
Function PB0B220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Message to display*/
    /* ET PB0BM002 ALARM;             /* Indicate sound alarm*/
    PB0BM002.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end


  PB0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0BM002.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM002.CAITEM = COMMAREA.CAITEM; /* Fast path information*/

   /* ----------------------------------------------------------*/
   /* If no user update authority, darken PF13 add receipt*/
   /* ----------------------------------------------------------*/

  PB0BS0G(); /* Verify user authority*/

  if (PB0BW01.PB0BWUPD == "N") /* Changes not authorized*/
    set PB0BM002.PB0BMP13 skip, invisible; /* No PF13 add receipt*/
  end


  converse PB0BM002 ;


   /* ----------------------------------------------------------*/
   /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  COMMAREA.CATOAP = PB0BM002.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM002.CAITEM; /* Fast path information*/
  PB0BW01.PB0BWAPP = "PB0B"; /* App name*/


end // end PB0B220

// Check attention identifier
Function PB0B230()

   /* ------------------------------------------------------------*/
                  /* Check Attention Identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 refresh PB0BM002 requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* clear pcwrec*/
      COMMAREA.CATOAP = PB0BM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0BW01.PB0BWPRC = "230"; /* Process name*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid w/ fast*/
                                   /* path*/
      PB0BW01.PB0BWPRC = "230"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF3 exit to prdn menu requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 exit to prdn menu req*/

    PB0BS0C(); /* Purge any temporary storage*/

    COMMAREA.CAUSERA = " "; /* Init. commarea*/
    PCWREC.CAUSERA = " "; /* Clear pcwrec area*/
    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0A"; /* Set to prdn menu*/

    XSPCS01(); /* Exit to prdn menu*/

    PB0BW01.PB0BWPRC = "230"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 help request or*/
   /* PF4 mstr menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 help request*/
   || converseVar.eventKey is pf4) /* PF4 return to mstr menu request*/

    if (converseVar.eventKey is pf1) /* PF1 help request*/
      COMMAREA.CAITEM = "PB0BM002"; /* move in map name*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWPRC = "230"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF13 add receipts request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 add receipt request*/
   && PB0BW01.PB0BWUPD == "N")     /* User add not authorized*/
    PB0BW01.PB0BWPRC = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* not PF7 scroll backward*/
   && converseVar.eventKey not pf8   /* not PF8 scroll forward*/
   && converseVar.eventKey not pf10  /* not PF10 scroll left*/
   && converseVar.eventKey not pf13) /* not PF13 add receipt*/

    PB0BW01.PB0BWPRC = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B230

// Verify the entered data
Function PB0B250()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM002.CAITEM > " ") /* Application data was entered*/

    set PB0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "250"; /* Process name*/

    return; /* exit redisplay map*/

  end


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0B251(); /* Verify scroll request*/

  end


end // end PB0B250

// Verify scroll request
Function PB0B251()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0BW01.PB0BWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0BW01.PB0BWPRC = "251"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end


  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PB0BW01.PB0BWTSP >= PB0BW01.TA5TSQIX /* and no more pages*/
   && converseVar.validationMsgNum == 0)   /* and no errors*/
    PB0BW01.PB0BWPRC = "251"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end



end // end PB0B251

// Process Valid Input Request
Function PB0B260()
   /* ------------------------------------------------------------*/
                   /* Process Valid Input Request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for previous errors*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message set up*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* PF7 scroll backward or PF8 scroll forward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* PF7 scroll backward request*/
    PB0BW01.PB0BWTSP = PB0BW01.PB0BWTSP - 1; /* Decrement page number*/
    PB0BW01.PB0BWBYP = "N"; /* Format map data*/
    return; /* Return to calling process*/
  end

  if (converseVar.eventKey is pf8) /* PF8 scroll forward request*/
    PB0BW01.PB0BWTSP = PB0BW01.PB0BWTSP + 1; /* Increment page number*/
    PB0BW01.PB0BWBYP = "N"; /* Format map data*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* PF10 scroll left on receipt list*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* PF10 scroll left request*/
    PB0BW01.PB0BWFUN = "1"; /* Function #1 - rcpt list 1*/
    PB0BW01.PB0BWSWR = "N"; /* Do not get new data*/
    PB0BW01.PB0BWBYP = "N"; /* Redisplay map 1 contents*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* PF13 Add Receipt*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 add request*/
    PB0BW01.PB0BWFUN = "3"; /* Function #3 - itm hdr add*/
    PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* ENTER*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER*/

    if (PB0BW01.PB0BWSLC <= 0) /* No selections made*/
      PB0BW01.PB0BWPRC = "260"; /* This module nbr*/
      converseLib.validationFailed(25); /* Error message nbr*/
    else /* Selections made*/
      PB0BW01.PB0BWFUN = "4"; /* Function #4 - itm hdr inq/chg*/
      PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
      converseLib.validationFailed(0); /* Clear error message field*/
    end

  end


end // end PB0B260

// Process Add Header map
Function PB0B300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/


  PB0B310(); /* Obtain the data to display*/

  PB0B320(); /* Format and display the map*/

  PB0B330(); /* Check attention identifier*/

  PB0B340(); /* Reset fields to normal intensity*/

  PB0B350(); /* Verify the entered data*/

  PB0B360(); /* Process valid input request*/


end // end PB0B300

// Obtain data to display
Function PB0B310()
   /* ------------------------------------------------------------*/
   /* Check Process Bypass indicators*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWBYP == "Y" /* Process bypass on*/
   || converseVar.validationMsgNum != 0) /* or Errors found*/

    return; /* Exit to next process*/

  end


   /* ------------------------------------------------------------*/
   /* Clear Map/Wk Area for Initial Screen to Display*/
   /* ------------------------------------------------------------*/

  set PB0BM003 initial; /* Clear map for display*/
  set PB0BW03 empty; /* Clear Item Hdr/Dtl wk area*/

   /* ------------------------------------------------------------*/
   /* Format Map Header Information*/
   /* ------------------------------------------------------------*/

  PB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0BW01.PB0BWERL = "PB0B    "; /* Process name*/

  PB0BM003.PB0BMRST = "10"; /* default status*/
  PB0BW03.PB0BWRST = "10";

  PB0BM003.PB0BMOWH = " "; /* Default warehouse*/
  PB0BW03.PB0BWOWH = " ";

  PB0BW03.PB0BWOGP = PCWREC.XGPCD; /* Save GPC to wk area*/
  PB0BM003.PB0BMOGP = PCWREC.XGPCD; /* Move GPC to map*/

  PB0BM003.PB0BMRRN = 99999999; /* Default Receipt Rpt no*/

  if (PB0BM003.PB0BMOGP == "02") /* GPC cd 02*/
    PB0BM003.YMTCD = "VL"; /* Default Mode cd to vessel*/
  else /* Other GPC*/
    PB0BM003.YMTCD = "TR"; /* Default Mode cd to truck*/
  end /* Other GPC*/

             /* Format Receipt date*/

  XX0XS01(); /* Convert system date/time*/

  PB0BW01.PB0BWDTY = XX0XW01.XX0XWZYY; /* Reformat yy*/
  PB0BW01.PB0BWDTM = XX0XW01.XX0XWZMM; /* Reformat mm*/
  PB0BW01.PB0BWDTD = XX0XW01.XX0XWZDD; /* Reformat dd*/
  PB0BM003.PB0BMRDT = PB0BW01.PB0BWDTW; /* Default Rcvd date*/


             /* Protect Map fields*/

   /* SET PB0BM003.PB0BMRRN AUTOSKIP  ; Receiving report nbr-allow entry*/
  set PB0BM003.PB0BMRST skip; /* Status cd*/
  set PB0BM003.PB0BMEXC skip, invisible; /* Exception cd*/
  set PB0BM003.PB0BMEXD skip, invisible; /* Exception desc*/
  set PB0BM003.PB0BMOGP skip; /* GPC cd*/
  set PB0BM003.PB0BMHDV skip, invisible; /* Header-division code*/
  set PB0BM003.PB0BMDIV skip, invisible; /* Division code*/

             /* Darken Apply-to fields for Add Function*/

  set PB0BM003.PB0BMAPO skip, invisible; /* PO number*/
  set PB0BM003.PB0BM-ACI skip, invisible; /* SO-Cust ord id*/
  set PB0BM003.PB0BM-ANI skip, invisible; /* SO-Nike ord id*/
  set PB0BM003.PB0BMAPY skip, invisible; /* POID-PO prod yr*/
  set PB0BM003.PB0BMAPM skip, invisible; /* POID-PO prod mth*/
  set PB0BM003.PB0BMADM skip, invisible; /* POID-PO delivery mth*/
  set PB0BM003.PB0BMAFY skip, invisible; /* POID-Factory*/
  set PB0BM003.PB0BMATY skip, invisible; /* PO type*/
  set PB0BM003.PB0BMAWH skip, invisible; /* Whse*/
  set PB0BM003.PB0BMAGP skip, invisible; /* GPC*/
  set PB0BM003.PB0BMAST skip, invisible; /* Style*/
  set PB0BM003.PB0BMACL skip, invisible; /* Color*/
  set PB0BM003.PB0BMADI skip, invisible; /* Dimension*/
  set PB0BM003.PB0BMAQU skip, invisible; /* Quality*/
  set PB0BM003.PB0BMASP skip, invisible; /* ISEG*/
  set PB0BM003.PB0BM-ACXREF skip, invisible; /* CXREF*/
  set PB0BM003.PB0BMAPK skip, invisible; /* Pkg type*/
  set PB0BM003.PB0BMAUM skip, invisible; /* UOM*/
  set PB0BM003.PB0BMAOG skip, invisible; /* Own grp*/

          /* Darken Apply-to headers for Add Function*/

  set PB0BM003.PB0BMH02 skip, invisible; /* Hdr 2-for PO number*/
  set PB0BM003.PB0BM-H03 skip, invisible; /* Hdr 3-for SO number*/
  set PB0BM003.PB0BM-H04 skip, invisible; /* Hdr 4-for POID*/
  set PB0BM003.PB0BM-H05 skip, invisible; /* Hdr 5-for PO type*/
  set PB0BM003.PB0BMH06 skip, invisible; /* Hdr 6-for warehouse code*/
  set PB0BM003.PB0BMH07 skip, invisible; /* Hdr 7-for GPC*/
  set PB0BM003.PB0BMH08 skip, invisible; /* Hdr 8-for style number*/
  set PB0BM003.PB0BMH09 skip, invisible; /* Hdr 9-for color code*/
  set PB0BM003.PB0BMH10 skip, invisible; /* Hdr 10-for dimension code*/
  set PB0BM003.PB0BMH11 skip, invisible; /* Hdr 11-for quality code*/
  set PB0BM003.PB0BMH12 skip, invisible; /* Hdr 12-for ISEG*/
  set PB0BM003.PB0BM-H16 skip, invisible; /* Hdr 16-for CXREF*/
  set PB0BM003.PB0BMH13 skip, invisible; /* Hdr 13-for pkg code*/
  set PB0BM003.PB0BMH14 skip, invisible; /* Hdr 14-for UOM*/
  set PB0BM003.PB0BMH15 skip, invisible; /* Hdr 15-for OG*/

   /* ------------------------------------------------------------*/
   /* Darken Screen Prompts*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMP09 skip, invisible; /* Deactivate PF9 rls from setaside*/
  set PB0BM003.PB0BMP14 skip, invisible; /* Deactivate PF14 recompare*/
  set PB0BM003.PB0BMP15 skip, invisible; /* Deactivate PF15 next selection*/

   /* ------------------------------------------------------------*/
   /* Set process bypass*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWBYP = "Y"; /* Process bypass on*/

   /* ------------------------------------------------------------*/
   /* Set Cursor Position at rcv rpt nbr*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMRRN cursor; /* Cursor on rcv rpt nbr field*/

end // end PB0B310

// Format and Display the Map
Function PB0B320()
   /* ------------------------------------------------------------*/
                 /* Format and Display the Map*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0 /* No error msg to display*/
   && PB0BW03.PB0BWPND == "N")          /* Bypass process not active*/
   /* ND PB0BW03.PB0BWFTI NE ' ';    /* Not first time through*/
    PB0B321(); /* Format map from wk storage*/
    if (PB0BW03.PB0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PB0BW03.PB0BWMNO);
    end /* Information msg no.*/

  end


  if (PB0BM003.PB0BMOGP == "03")
    set PB0BM003.PB0BMOPY skip;
    set PB0BM003.PB0BMOPM skip;
    set PB0BM003.PB0BMODM skip;
    set PB0BM003.PB0BMOFY skip;
    set PB0BM003.PB0BMOTY skip;
  end


  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && PB0BW03.PB0BWFTI != " ")          /* Not first time*/
    set PB0BM003.PB0BMOPO cursor; /* Set cursor at map dtl area*/
  else
    /* ET PB0BM003 ALARM;             /* Indicate sound alarm*/
    PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end




  PB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0BM003.PB0BMTYP = "ADD"; /* Indicate map type*/

  PB0BM003.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM003.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  converse PB0BM003 ;


   /* ----------------------------------------------------------*/
   /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/

  PB0BW03.PB0BWFTI = "N"; /* Reset first time ind*/
  PB0BW03.PB0BWPND = "N"; /* Reset process bypass ind*/
  PB0BW03.PB0BWMNO = 0; /* Information msg no.*/
  PB0BW01.PB0BWAPP = "PB0B"; /* App name*/

  COMMAREA.CATOAP = PB0BM003.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM003.CAITEM; /* Fast path information*/


end // end PB0B320

// Format Map Data
Function PB0B321()

   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/

  set PB0BM003 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format Map Header Information from save fields.*/
   /* ------------------------------------------------------------*/

  PB0BM003.PB0BMRST = PB0BW03.PB0BWRST; /* Receipt status*/
  PB0BM003.XRICD = PB0BW03.PB0BWXRI; /* Receipt invoice status*/

  if (PB0BW03.PB0BWXRI in XRITBL.XRICD)
    PB0BM003.XRIDESC = XRITBL.XRIDESC[sysVar.arrayIndex];
  end /* invc descr*/

  if (PB0BW03.PB0BWXRE == "  ") /* No exception cd*/
    PB0BM003.PB0BMEXC = "  "; /* Exception cd*/
    PB0BM003.PB0BMEXD = "  "; /* Exception description*/
  else
    PB0BM003.PB0BMEXC = PB0BW03.PB0BWXRE; /* Exception cd*/
    if (PB0BW03.PB0BWXRE in XRETBL.XRECD)
      PB0BM003.PB0BMEXD = XRETBL.XREDESC[sysVar.arrayIndex]; /* Exception desc.*/
    else
      PB0BM003.PB0BMEXD = "* NOT IN TABLE *";
    end
  end

         /* *Reformat Date for Map**/

  PB0BW01.PB0BWDPW = PB0BW03.PB0BWRDT;
  PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
  PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
  PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
  PB0BM003.PB0BMRDT = PB0BW01.PB0BWDTW; /* Receipt date*/

  PB0BM003.PB0BMRRN = PB0BW03.PB0BWRRN; /* Receipt rpt number*/
  PB0BM003.YMTCD = PB0BW03.YMTCD; /* Transp Mode cd*/
  PB0BM003.YMTSDESC = PB0BW03.YMTSDESC; /* Transp Mode desc*/
  PB0BM003.PB0BMOPO = PB0BW03.PB0BWOPO; /* PO number*/
  PB0BM003.PB0BM-OCI = PB0BW03.PB0BW-OCI; /* Cust ord id*/
  PB0BM003.PB0BM-ONI = PB0BW03.PB0BW-ONI; /* Nike ord id*/
  if (PB0BM003.PB0BMOGP == "03")
    PB0BM003.PB0BMOPY = PB0BW03.PCFSECD; /* PO prod yr*/
  else
    PB0BM003.PB0BMOPY = PB0BW03.PB0BWOPY; /* PO prod yr*/
  end
  PB0BM003.PB0BMOPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BM003.PB0BMODM = PB0BW03.PB0BWODM; /* PO delivery mth*/
  PB0BM003.PB0BMOFY = PB0BW03.PB0BWOFY; /* Factory*/
  PB0BM003.PB0BMOTY = PB0BW03.PB0BWOTY; /* PO type*/
  if (PB0BW03.PB0BWOWH == "*")
    PB0BM003.PB0BMOWH = " "; /* Whse*/
  else
    PB0BM003.PB0BMOWH = PB0BW03.PB0BWOWH; /* Whse*/
  end
  PB0BM003.PB0BMOGP = PB0BW03.PB0BWOGP; /* GPC*/
  PB0BM003.PB0BMOST = PB0BW03.PB0BWOST; /* Style*/
  PB0BM003.PB0BMOCL = PB0BW03.PB0BWOCL; /* Color*/
  PB0BM003.PB0BMODI = PB0BW03.PB0BWODI; /* Dimension*/
  PB0BM003.PB0BMOQU = PB0BW03.PB0BWOQU; /* Quality*/
  PB0BM003.PB0BMOSP = PB0BW03.PB0BWOSP; /* Spec*/
  PB0BM003.PB0BM-OCXREF = PB0BW03.PB0BW-OCXREF; /* CXREF*/
  PB0BM003.PB0BMOPK = PB0BW03.PB0BWOPK; /* Pkg type*/
  PB0BM003.PB0BMOUM = PB0BW03.PB0BWOUM; /* UOM*/
  PB0BM003.PB0BMOOG = PB0BW03.PB0BWOOG; /* Own grp*/


   /* ------------------------------------------------------------*/
   /* Protect Map fields*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMRST skip; /* Status*/
   /* SET PB0BM003.PB0BMRRN AUTOSKIP  ; Receiving Report Nbr-allow entry*/
  set PB0BM003.PB0BMEXC skip; /* Exception cd*/
  set PB0BM003.PB0BMEXD skip; /* Exception desc*/
  set PB0BM003.PB0BMOGP skip; /* GPC*/
  set PB0BM003.PB0BMHDV skip, invisible; /* Header-division code*/
  set PB0BM003.PB0BMDIV skip, invisible; /* Division code*/


             /* Darken Apply-to Fields for Add Function*/

  set PB0BM003.PB0BMAPO skip, invisible; /* PO number*/
  set PB0BM003.PB0BM-ACI skip, invisible; /* SO-cust ord id*/
  set PB0BM003.PB0BM-ANI skip, invisible; /* SO-Nike ord id*/
  set PB0BM003.PB0BMAPY skip, invisible; /* POID sesn cd or prod yr*/
  set PB0BM003.PB0BMAPM skip, invisible; /* POID prod mth*/
  set PB0BM003.PB0BMADM skip, invisible; /* POID delivery mth*/
  set PB0BM003.PB0BMAFY skip, invisible; /* POID Factory*/
  set PB0BM003.PB0BMATY skip, invisible; /* PO type*/
  set PB0BM003.PB0BMAWH skip, invisible; /* Whse*/
  set PB0BM003.PB0BMAGP skip, invisible; /* GPC*/
  set PB0BM003.PB0BMAST skip, invisible; /* Style*/
  set PB0BM003.PB0BMACL skip, invisible; /* Color*/
  set PB0BM003.PB0BMADI skip, invisible; /* Dimension*/
  set PB0BM003.PB0BMAQU skip, invisible; /* Quality*/
  set PB0BM003.PB0BMASP skip, invisible; /* ISEG*/
  set PB0BM003.PB0BM-ACXREF skip, invisible; /* Customer XREF*/
  set PB0BM003.PB0BMAPK skip, invisible; /* Package code*/
  set PB0BM003.PB0BMAUM skip, invisible; /* UOM*/
  set PB0BM003.PB0BMAOG skip, invisible; /* Owner group*/


          /* Darken Apply-to Hdrs for Add Function*/

  set PB0BM003.PB0BMH02 skip, invisible; /* Hdr 2-for PO number*/
  set PB0BM003.PB0BM-H03 skip, invisible; /* Hdr 3-for SO number*/
  set PB0BM003.PB0BM-H04 skip, invisible; /* Hdr 4-for POID*/
  set PB0BM003.PB0BM-H05 skip, invisible; /* Hdr 5-for for PO type*/
  set PB0BM003.PB0BMH06 skip, invisible; /* Hdr 6-for warehouse code*/
  set PB0BM003.PB0BMH07 skip, invisible; /* Hdr 7-for GPC*/
  set PB0BM003.PB0BMH08 skip, invisible; /* Hdr 8-for style code*/
  set PB0BM003.PB0BMH09 skip, invisible; /* Hdr 9-for color code*/
  set PB0BM003.PB0BMH10 skip, invisible; /* Hdr 10-for dimension code*/
  set PB0BM003.PB0BMH11 skip, invisible; /* Hdr 11-for quality code*/
  set PB0BM003.PB0BMH12 skip, invisible; /* Hdr 12-for ISEG*/
  set PB0BM003.PB0BM-H16 skip, invisible; /* Hdr 16-for customer XREF*/
  set PB0BM003.PB0BMH13 skip, invisible; /* Hdr 13-for package code*/
  set PB0BM003.PB0BMH14 skip, invisible; /* Hdr 14-for UOM*/
  set PB0BM003.PB0BMH15 skip, invisible; /* Hdr 15-for OG*/


   /* ------------------------------------------------------------*/
   /* Darken Screen Prompts for Add Function*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMP09 skip, invisible; /* Deactivate PF9 rls from setaside*/
  set PB0BM003.PB0BMP14 skip, invisible; /* Deactivate PF14 recompare*/
  set PB0BM003.PB0BMP15 skip, invisible; /* Deactivate PF15 next selection*/


   /* ------------------------------------------------------------*/
   /* Set Cursor Position at mode code*/
   /* ------------------------------------------------------------*/

  set PB0BM003.YMTCD cursor; /* Cursor on mode code field*/



end // end PB0B321

// Check Attention Identifier
Function PB0B330()

   /* ------------------------------------------------------------*/
                  /* Check Attention Identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 refresh PB0BM003*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 refresh request*/
    converseLib.clearScreen();
     /* Refresh screen*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* Init commarea*/
      PCWREC.CAUSERA = " "; /* Clear pcwrec*/
      COMMAREA.CATOAP = PB0BM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM003.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0BW01.PB0BWPRC = "330"; /* This module nbr*/

    else

      converseLib.validationFailed(5); /* PF key not valid err msg nbr*/
      PB0BW01.PB0BWPRC = "330"; /* This module nbr*/

    end

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF3 exit to receipt list request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 exit to receipt list*/
    PB0BW01.PB0BWFUN = "1"; /* Function #1 - rcpt list 1*/
    PB0BW01.PB0BWBYP = "N"; /* Format map 1 contents*/
    converseLib.validationFailed(0); /* Clear error msg field*/
    PB0BW01.PB0BWMNO = 0; /* Clear info msg field*/
    PB0BW03.PB0BWMNO = 0; /* Clear info msg field*/
    exit stack; /* Exit to next process*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 help request*/
   /* PF4 exit to mstr menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 help request*/
   || converseVar.eventKey is pf4) /* PF4 exit to mstr menu request*/

    if (converseVar.eventKey is pf1) /* PF1 help request*/
      COMMAREA.CAITEM = "PB0BM003"; /* This map name*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWPRC = "330"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF16 CLEAR map request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF16 request*/

   /* ------------------------------------------------------------*/
    /* Set process bypass*/
   /* ------------------------------------------------------------*/

    PB0BW01.PB0BWBYP = "N"; /* Process bypass on*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0BW01.PB0BWPRC = "330"; /* This module nbr*/
    converseLib.validationFailed(4); /* Invalid attention key err msg nbr*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B330

// Reset hlghtd flds/disp pop-ups
Function PB0B340()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMOPO normal; /* PO number*/
  set PB0BM003.PB0BM-OCI normal; /* SO number Cust ord id*/
  set PB0BM003.PB0BM-ONI normal; /* SO number Nike ord id*/
  set PB0BM003.PB0BMOPY normal; /* POID prod yr*/
  set PB0BM003.PB0BMOPM normal; /* POID prod mth*/
  set PB0BM003.PB0BMODM normal; /* POID delivery mth*/
  set PB0BM003.PB0BMOFY normal; /* POID Factory*/
  set PB0BM003.PB0BMOTY normal; /* PO type*/
  set PB0BM003.PB0BMOWH normal; /* Whse*/
   /* ET PB0BM003.PB0BMOGP NORMAL;   /* GPC (not editable so commented out)*/
  set PB0BM003.PB0BMOST normal; /* Style*/
  set PB0BM003.PB0BMOCL normal; /* Color*/
  set PB0BM003.PB0BMODI normal; /* Dimension*/
  set PB0BM003.PB0BMOQU normal; /* Quality*/
  set PB0BM003.PB0BMOSP normal; /* ISEG*/
  set PB0BM003.PB0BM-OCXREF normal; /* Customer XREF*/
  set PB0BM003.PB0BMOPK normal; /* Pkg type*/
  set PB0BM003.PB0BMOUM normal; /* UOM*/
  set PB0BM003.PB0BMOOG normal; /* Own grp*/
  set PB0BM003.PB0BMRDT normal; /* Receive date*/
  set PB0BM003.PB0BMRRN normal; /* Receive Rpt no.*/
  set PB0BM003.YMTCD normal; /* Mode*/

  PB0BM003.XXXPRCNM = "PB0B    "; /* Reset process name*/

  set PB0BM003.CATOAP initialAttributes; /* Commarea To application*/
  set PB0BM003.CAITEM initialAttributes; /* Commarea application data*/


   /* *=========================================================**/
   /* *          CHECK FOR USER ? CODE INQUIRY                  **/
   /* * 1) If the user has enter a '?' in any of the appropiate**/
   /* *    fields, display the pop up window for that CSP table**/
   /* *    and allow for inquiry.                               **/
   /* * 2) Set map page after all windows displayed             **/
   /* *==========================================================*/


  if (PB0BM003.YMTCD == "?"    /* Pop-up window for Mode cd*/
   || PB0BM003.PB0BMODI == "?" /* Pop-up window for Dim cd*/
   || PB0BM003.PB0BMOQU == "?" /* Pop-up window for Qual cd*/
   || PB0BM003.PB0BMOPK == "?" /* Pop-up window for Pkg typ cd*/
   || PB0BM003.PB0BMOUM == "?" /* Pop-up window for Unit Meas cd*/
   || PB0BM003.PB0BMOOG == "?") /* Pop-up window for Own Grp cd*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      PB0BW01.PB0BWPRC = "340"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    return; /* Exit to next process*/

  end


   /* *=======================**/
   /* *  YMTCD POP-UP WINDOW  **/
   /* *=======================**/

  if (PB0BM003.YMTCD == "?")

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                  MODE    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYMT01(); /* perform ymtcd code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.YMTCD = YMTTBL.YMTCD[XX0XWPIX];
      PB0BM003.YMTSDESC = YMTTBL.YMTSDESC[XX0XWPIX];
    else
      PB0BM003.YMTCD = PB0BW03.YMTCD;
      PB0BM003.YMTSDESC = PB0BW03.YMTSDESC;
    end

    set PB0BM003.YMTCD cursor; /* set cursor*/

  end


   /* *===========================**/
   /* *  DIMENSION POP-UP WINDOW  **/
   /* *===========================**/

  if (PB0BM003.PB0BMODI == "?") /* Pop-up window for Dim cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              DIMENSION   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform xdm code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMODI = XDMTBL.XDMCD[XX0XWPIX];
    else
      PB0BM003.PB0BMODI = PB0BW03.PB0BWODI;
    end

    set PB0BM003.PB0BMODI cursor; /* set cursor*/

  end


   /* *=========================**/
   /* *  QUALITY POP-UP WINDOW  **/
   /* *=========================**/

  if (PB0BM003.PB0BMOQU == "?") /* Pop-up window for Qual cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                  QUALITY "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform xqa code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMOQU = XQATBL.XQACD[XX0XWPIX];
    else
      PB0BM003.PB0BMOQU = PB0BW03.PB0BWOQU;
    end

    set PB0BM003.PB0BMOQU cursor; /* set cursor*/

  end


   /* *============================**/
   /* *  PKG TYP CD POP-UP WINDOW  **/
   /* *============================**/

  if (PB0BM003.PB0BMOPK == "?") /* Pop-up window for Pkg typ cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          PACKAGING TYPE  "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform xpg code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMOPK = XPGTBL.XPGCD[XX0XWPIX];
    else
      PB0BM003.PB0BMOPK = PB0BW03.PB0BWOPK;
    end

    set PB0BM003.PB0BMOPK cursor; /* set cursor*/

  end


   /* *=================================**/
   /* *  UNIT OF MEASURE POP-UP WINDOW  **/
   /* *=================================**/

  if (PB0BM003.PB0BMOUM == "?") /* Pop-up window for Unit Meas*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "         UNIT OF MEASURE  "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXUM01(); /* perform xum code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMOUM = XUMTBL.XUMCD[XX0XWPIX];
    else
      PB0BM003.PB0BMOUM = PB0BW03.PB0BWOUM;
    end

    set PB0BM003.PB0BMOUM cursor; /* set cursor*/

  end


   /* *============================**/
   /* *  OWN GRP CD POP-UP WINDOW  **/
   /* *============================**/

  if (PB0BM003.PB0BMOOG == "?") /* Pop-up window for Own Grp cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "            OWNER GROUP   "; /* heading*/
    if (PB0BM003.PB0BMOWH in XOWTBL.XWHCD) /* If warehouse in table*/
      XX0XW02.XWHCD = PB0BM003.PB0BMOWH; /* Warehouse*/
    else
      XX0XW02.XWHCD = "00"; /* default*/
    end

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXOW01(); /* perform xow code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMOOG = XOWTBL.XOWCD[XX0XWPIX];
    else
      PB0BM003.PB0BMOOG = PB0BW03.PB0BWOOG;
    end

    set PB0BM003.PB0BMOOG cursor; /* set cursor*/

  end


   /* *===============================**/
   /* * RESET MAP, REDISPLAY CHANGES  **/
   /* *===============================**/

  converseLib.clearScreen();
   /* Clear screen before display*/
  PB0BW03.PB0BWPND = "Y"; /* Bypass wk map contents display*/

  exit stack; /* Exit to redisplay map*/


end // end PB0B340

// Verify the entered data
Function PB0B350()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM003.CAITEM > " ") /* Application data was entered*/

    set PB0BM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "350"; /* Process name*/

    exit stack; /* exit redisplay map*/

  end


  if (converseVar.eventKey is enter) /* Enter key pressed*/

    PB0B352(); /* Verify entered data*/

  end


end // end PB0B350

// Validate Map Fields
Function PB0B352()
   /* ------------------------------------------------------------*/
   /* E D I T    E N T E R E D   D A T A*/
   /*  */
   /* Edit entered data to be used as key information*/
   /* further in the update process. Highlight all*/
   /* errors found; assign defaults where applicable.*/
   /* ------------------------------------------------------------*/

   /* *----------------------------------------------------------*/
   /* *   Check for warning flag reset*/
   /* *----------------------------------------------------------*/

  PB0B353();


   /* *----------------------------------------------------------*/
   /* *   Perform edits*/
   /* *----------------------------------------------------------*/

  PB0BS15(); /* Edit Own Group cd*/
  PB0BS17(); /* Edit Unit of Measure*/
  PB0BS19(); /* Edit Pkg Type cd*/
  PB0BS21(); /* Edit ISEG*/
  PB0BS25(); /* Edit Dimension cd*/
  PB0BS27(); /* Edit Color id*/
  PB0BS29(); /* Edit Style cd*/
  PB0BS31(); /* Edit warehouse*/
  PB0BS-32(); /* Edit Sales order key*/
  PB0BS23(); /* Edit Quality cd*/
  PB0BS33(); /* Edit PO Key*/
  PB0BS39(); /* Edit Transp Mode cd*/
  PB0BS41(); /* Edit Receipt no.*/
  PB0BS43(); /* Edit Receipt date*/

   /* *----------------------------------------------------------*/
   /* *   Check for previous errors*/
   /* *----------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* if errors*/
   || PB0BW03.PB0BWMNO != 0)            /* if warnings*/
    return; /* return to calling process*/
  end


   /* *----------------------------------------------------------*/
   /* If PO NE ZERO===>do PO checks*/
   /* otherwise=====>do SO checks*/
   /* *----------------------------------------------------------*/

  if (PB0BM003.PB0BMOPO != 0) /* PO NE zero*/

       /* *-----------------------------------------------*/
       /* *  Check for ORIG PO Header Status Closed.*/
       /* *  Warning set if header status closed.*/
       /* *-----------------------------------------------*/

    if (PCWREC.XGPCD != "03"
     && PB0BW03.PB0BWOPS == "FC") /* factory closed status*/
      PB0BW01.PB0BWERL = "PB0B352"; /* Process id*/
      PB0BW03.PB0BWMNO = 221; /* warning FC status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMOPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end

    if (PB0BW03.PB0BWOPS == "NC") /* NIKE Closed status*/
      PB0BW01.PB0BWERL = "PB0B352"; /* Process id*/
      PB0BW03.PB0BWMNO = 222; /* warning NC status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMOPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end

    if (PB0BW03.PB0BWOPS == "CL") /* System Closed status*/
      PB0BW01.PB0BWERL = "PB0B352"; /* Process id*/
      PB0BW03.PB0BWMNO = 397; /* warning CL status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMOPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end


  else /* IF PO EQ 0 DO SALES ORDER CHECKS*/

    if (PB0BM003.PB0BM-OCI != 0 /* If SO cust ord id NE zero*/
     && PB0BM003.PB0BM-ONI != 0) /* And SO Nike ord id NE zero*/

      PB0BS-46(); /* Select set (S2) VITEM0R1*/

         /* *----------------------------------------------------*/
         /* Check Orig SO item for Style not on SO.*/
         /* *----------------------------------------------------*/

      PB0BS-48(); /* Fetch next (N2) row VITEM0R1*/

      PB0BS-50(); /* Close cursor (C2) VITEM0R1*/


         /* *----------------------------------------------------*/
         /* *  Check for previous errors found*/
         /* *----------------------------------------------------*/

      if (converseVar.validationMsgNum != 0 /* if errors*/
       || PB0BW03.PB0BWMNO != 0)            /* if warnings*/
        return; /* return to calling process*/
      end


         /* *-----------------------------------------------------*/
         /* *  Check for ORIG SO Header Status EQ 'AL'(allocated).*/
         /* *  Warning set if header status NE 'AL'.*/
         /* *-----------------------------------------------------*/

      if (PB0BW03.PB0BWOPS != "AL") /* SO hdr st ne 'AL'*/
        PB0BW01.PB0BWERL = "PB0B352"; /* Process id*/
        PB0BW03.PB0BWMNO = 438; /* warning status do you want to*/
                                   /* cont.*/
        set PB0BM003.PB0BM-OCI cursor, bold; /* Highlight cust ord id*/
        set PB0BM003.PB0BM-ONI bold; /* Highlight nike ord id*/
        return; /* return to calling process*/

      end
    end

  end


end // end PB0B352

// Check for Warning Flag Reset
Function PB0B353()

   /* *************************************************************/
   /* *  Check for Needed Warning Flag Reset During Add Mode*/
   /* *************************************************************/

  if (PB0BM003.PB0BMOPO != PB0BW03.PB0BWOPO         /* Orig PO no.*/
   || PB0BM003.PB0BMOPY != PB0BW03.PB0BWOPY         /* Orig POID yr or sesn cd*/
   || PB0BM003.PB0BMOPM != PB0BW03.PB0BWOPM         /* Orig POID month*/
   || PB0BM003.PB0BMODM != PB0BW03.PB0BWODM         /* Orig POID del month*/
   || PB0BM003.PB0BMOFY != PB0BW03.PB0BWOFY         /* Orig POID factory*/
   || PB0BM003.PB0BM-OCI != PB0BW03.PB0BW-OCI       /* Orig SO Cust ord id*/
   || PB0BM003.PB0BM-ONI != PB0BW03.PB0BW-ONI       /* Orig SO Nike ord id*/
   || PB0BM003.PB0BMOTY != PB0BW03.PB0BWOTY         /* Orig PO type*/
   || PB0BM003.PB0BMOWH != PB0BW03.PB0BWOWH         /* Orig Whse*/
   || PB0BM003.PB0BMOST != PB0BW03.PB0BWOST         /* Orig Style*/
   || PB0BM003.PB0BMOCL != PB0BW03.PB0BWOCL         /* Orig Color*/
   || PB0BM003.PB0BMODI != PB0BW03.PB0BWODI         /* Orig Dim*/
   || PB0BM003.PB0BMOQU != PB0BW03.PB0BWOQU         /* Orig Qual*/
   || PB0BM003.PB0BMOSP != PB0BW03.PB0BWOSP         /* Orig ISEG*/
   || PB0BM003.PB0BM-OCXREF != PB0BW03.PB0BW-OCXREF /* Orig CXREF*/
   || PB0BM003.PB0BMOPK != PB0BW03.PB0BWOPK         /* Orig Pkg*/
   || PB0BM003.PB0BMOUM != PB0BW03.PB0BWOUM         /* Orig UOM*/
   || PB0BM003.PB0BMOOG != PB0BW03.PB0BWOOG)        /* Orig Own Grp*/

   /* MOVE 'N' TO PB0BW03.PB0BW-PREV-ITEM-WARN;/*ITEM status warning flag*/
    PB0BW03.PB0BW-PREV-HDR-WARN = "N"; /* HDR status warning flag*/
    PB0BW03.PB0BW-PREV-INV-SO-WARN = "N"; /* Invalid SO warning flag*/
  end


end // end PB0B353

// Process Valid Input Request
Function PB0B360()
   /* ------------------------------------------------------------*/
                 /* Process Valid Input Request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for previous error*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Previous error*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER*/
    PB0B361(); /* Check for existing row*/
    if (SQLCA.VAGen_SQLCODE == 100)

      /* -----------------*/
      /* Check item status*/
      /* -----------------*/

      /* IF PB0BW03.PB0BW-PREV-ITEM-WARN = 'N';*/
       /* IF PB0BW03.PB0BWOIS NE ' ';*/
         /* MOVE 'Y' TO PB0BW03.PB0BW-PREV-ITEM-WARN;*/
         /* EZERTN;                   /* Exit to redisplay map*/
       /* END;*/
      /* END;*/

      /* -------------------------------*/
      /* Check invalid so warning status*/
      /* -------------------------------*/

      if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N")
        if (PB0BW03.PB0BWMNO == 460)
          PB0BW03.PB0BW-PREV-INV-SO-WARN = "Y";
          return; /* Exit to redisplay map*/
        end
      end

      /* -------------------*/
      /* Check header status*/
      /* -------------------*/
      if (PB0BW03.PB0BW-PREV-HDR-WARN == "N")
        if (PB0BW03.PB0BWOPO != 0) /* Orig PO NE 0*/
          if (PCWREC.XGPCD == "03") /* Aprl*/
            if (PB0BW03.PB0BWOPS != "OP" /* Orig hdr status for PO*/
             && PB0BW03.PB0BWOPS != "FC") /* Orig hdr status for PO*/
              PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
              return; /* Exit to redisplay map*/
            end
          else
            if (PB0BW03.PB0BWOPS != "OP") /* Orig hdr status for PO*/
              PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
              return; /* Exit to redisplay map*/
            end
          end
        else /* Orig PO EQ 0*/
          if (PB0BM003.PB0BM-OCI != 0 /* Orig SO NE 0*/
           && PB0BM003.PB0BM-ONI != 0)
            if (PB0BW03.PB0BWOPS != "AL") /* Orig hdr status for SO*/
              PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
              return; /* Exit to redisplay map*/
            end
          end
        end
      end

      PB0BW01.PB0BWFUN = "5"; /* Function #5 - itm dtl add*/
      PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
      converseLib.validationFailed(0); /* Clear err msg nbr*/
      PB0BW01.PB0BWMNO = 0; /* Clear info msg nbr*/
      PB0BW03.PB0BWMNO = 0; /* Clear info msg nbr*/

    else

      if (PB0BW03.PB0BWOPO != 0) /* Orig PO present*/
        converseLib.validationFailed(390); /* Indicate po rcpt already exists*/
      else
        converseLib.validationFailed(449); /* Indicate so rcpt already exists*/
      end
      PB0BW01.PB0BWERL = "PB0B360"; /* This module nbr*/
      PB0BW03.PB0BWOOG = "  "; /* Clear work area*/
    end
  end


end // end PB0B360

// Sel unq (SB) VFYPO002-Orig
Function PB0B361()

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row-Original Receipt*/
   /* ------------------------------------------------------------*/

  set VFYPO002 empty; /* clear wk record*/

                /* Build Access Keys*/

  VFYPO002.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* Po region*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWOPO; /* Po number*/

  VFYPO002.PC3POIDT = PB0BW03.PC3POIDT; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWOSE; /* POID season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWOFY; /* PO ID factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWOTY; /* Po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWOSP; /* ISEG*/
  VFYPO002.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW03.YMTCD; /* Mode of Transport*/
  VFYPO002.XWHCD = PB0BW03.PB0BWOWH; /* Warehouse*/
  VFYPO002.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* Customer xref*/

  VFYPO002.SL1RCRNO = PB0BW03.PB0BWRRN; /* Receipt rpt no.*/
  VFYPO002.TSHRCTDT = PB0BW03.PB0BWRDT; /* Receipt date*/
  VFYPO002.TSHCNTNR = PB0BW03.PB0BWCTR; /* Container id*/


   /* ------------------------------------------------------------*/
   /* Access DPRODC.VFYPO002 (Select Unique).*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BW-OCI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* Ord part char*/
    VFYPO002.OP1CUOID = 0; /* Cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-OPC; /* Ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-OCI; /* Cust ord id*/
  end

  if (PB0BW03.PB0BW-ONI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* Nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ONI; /* Nike ord id*/
  end

  try
    call "VFYPO002" ("SB", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Sel unq row*/

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to calling process*/

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "361"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "SELECT PO RCPTS ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate data in use*/
    TA1REC.TA1FUNC = "POST"; /* Termination func*/

  else
    converseLib.validationFailed(10); /* Indicate unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset screen before redisplay*/

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end PB0B361

// Process Maint Hdr map
Function PB0B400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/


  PB0B410(); /* Obtain the data to display*/

  PB0B420(); /* Format and display the map*/

  PB0B430(); /* Check attention identifier*/

  PB0B440(); /* Reset fields to normal intensity*/

  PB0B450(); /* Verify the entered data*/

  PB0B460(); /* Process valid input request*/


end // end PB0B400

// Obtain Data to Display
Function PB0B410()
   /* ------------------------------------------------------------*/
                   /* Obtain Data to Display*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check process bypass indicator*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWBYP == "Y" /* Process bypass on*/
   || converseVar.validationMsgNum != 0) /* or Errors found*/

    return; /* Exit to next process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear map/wk area for initial screen display*/
   /* ------------------------------------------------------------*/

  set PB0BM003 initial; /* Clear map for display*/

  if (PB0BW05.PB0BDEL == "Y") /* Delete receipt in progress*/
    set PB0BW05 empty; /* Clear apply-to wk area*/
    PB0BW05.PB0BDEL = "Y"; /* Reset delete receipt flag*/
    if (PB0BW03.PB0BWMNO == 1) /* If map #3 msg number set to 1*/
      set PB0BW03 empty; /* Clear item hdr/dtl wk area*/
      PB0BW03.PB0BWMNO = 1; /* Reset map #3 msg number*/
    else
      set PB0BW03 empty; /* Clear item hdr/dtl wk area*/
    end
  else
    set PB0BW03 empty; /* Clear item hdr/dtl wk area*/
    set PB0BW05 empty; /* Clear apply-to wk area*/
  end

  PB0BW05.PB0BWPND = "N"; /* Indicate no apply-to pending*/


   /* ------------------------------------------------------------*/
   /* Format item header information*/
   /* ------------------------------------------------------------*/

  PB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0BW01.PB0BWERL = "PB0B    "; /* Process name*/

  PB0BM003.PB0BMOGP = VFYPO002.XGPCD; /* Default GPC cd*/
  PB0BW03.PB0BWOGP = VFYPO002.XGPCD; /* Save to wk area*/
  PB0BM003.PB0BMAGP = VFYPO002.XGPCD; /* Default GPC cd*/
  PB0BW03.PB0BWAGP = VFYPO002.XGPCD; /* Save to wk area*/
  PB0BW03.PB0BWO-PO-REG-CD = VFYPO002.PO-REG-CD; /* Save*/
  PB0BW03.PB0BWA-PO-REG-CD = VFYPO002.PO-REG-CD; /* Save*/


                   /* Protect map fields*/

  set PB0BM003.XRICD skip; /* invoice stat cd*/
  set PB0BM003.XRIDESC skip; /* invoice stat cd description*/
  set PB0BM003.PB0BMRST skip; /* Status cd*/
   /* SET PB0BM003.PB0BMRRN AUTOSKIP  ; Rcv no.*/
  set PB0BM003.YMTSDESC skip; /* Mode transp*/
  set PB0BM003.PB0BMEXC skip; /* Exception cd*/
  set PB0BM003.PB0BMEXD skip; /* Exception desc*/
  set PB0BM003.PB0BMOGP skip; /* GPC cd*/
  set PB0BM003.PB0BMAGP skip; /* GPC cd*/
  set PB0BM003.PB0BMOWH skip; /* Whse cd*/
  set PB0BM003.PB0BMDIV skip; /* Division code*/
   /* SET PB0BM003.PB0BMAWH AUTOSKIP  ; Whse cd*/

   /* ------------------------------------------------------------*/
   /* Get first (or next) selection from receipt list*/
   /* ------------------------------------------------------------*/

  PB0B411(); /* Get first (or next) selection*/

  if (PB0BW05.PB0BDEL == "Y") /* Delete receipt pending*/
    PB0BW01.PB0BWPRC = 410; /* This module name*/
  end

  if (PB0BW01.PB0BWSLX <= 0) /* No more selections*/

    PB0BW01.PB0BWFUN = "1"; /* Function #1 - rcpt list 1*/
     /* Will automatically do FYPO lookup every time*/
     /* and get rid of 'S's on all the selected lines*/
    PB0BW01.PB0BWSWR = "Y"; /* Request for new data*/
    PB0BW01.PB0BWBYP = "N"; /* Format map #1 contents*/

    if (PB0BW05.PB0BDEL == "Y") /* Delete receipt pending*/
    else /* No delete receipt pending*/
      PB0BW01.PB0BWMNO = 0; /* Clear info msg fld*/
      converseLib.validationFailed(0); /* Clear err msg fld*/
    end

    exit stack; /* Exit to redisplay map #1*/

  end


   /* ------------------------------------------------------------*/
   /* Format selection data into map header*/
   /* ------------------------------------------------------------*/


                  /* Format header fields*/

  PB0BM003.XRICD = PB0BW02.PB0BWXRI[PB0BWSLX]; /* invoice stat cd*/
  PB0BW03.PB0BWXRI = PB0BW02.PB0BWXRI[PB0BWSLX]; /* save invc stat*/

  if (PB0BW03.PB0BWXRI in XRITBL.XRICD)
    PB0BM003.XRIDESC = XRITBL.XRIDESC[sysVar.arrayIndex];
  end /* invc descr*/

  PB0BM003.PB0BMRST = PB0BW02.PB0BWSTA[PB0BWSLX]; /* stat*/
  PB0BW03.PB0BWRST = PB0BW02.PB0BWSTA[PB0BWSLX]; /* wk stat*/
  PB0BW03.PB0BWCTR = PB0BW02.PB0BWCTR[PB0BWSLX]; /* container*/
  PB0BW03.PB0BW-SHIP-ID = PB0BW02.PB0BW-SHIP-ID[PB0BWSLX]; /**/

  PB0BW01.PB0BWDPW = PB0BW02.PB0BWRDT[PB0BWSLX]; /* Reformat*/
  PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY; /* Rcvd yy*/
  PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM; /* Rcvd mm*/
  PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD; /* Rcvd dd*/
  PB0BM003.PB0BMRDT = PB0BW01.PB0BWDTW; /* Rcvd date*/

  PB0BM003.PB0BMRRN = PB0BW02.PB0BWRRN[PB0BWSLX]; /* Rcv no.*/

  PB0BM003.YMTCD = PB0BW02.PB0BWYMT[PB0BWSLX]; /* Mode transp*/
  PB0BW03.YMTCD = PB0BW02.PB0BWYMT[PB0BWSLX]; /* Mode transp save*/
  if (PB0BW02.PB0BWYMT[PB0BWSLX] in YMTTBL.YMTCD)
    PB0BM003.YMTSDESC = YMTTBL.YMTSDESC[sysVar.arrayIndex]; /* Xre desc*/
  else
    PB0BM003.YMTSDESC = "* NOT IN TABLE *";
  end

  PB0BM003.PB0BMDIV = PB0BW02.PB0BWTDV[PB0BWSLX]; /* Division code*/
  PB0BW03.PB0BWTDV = PB0BW02.PB0BWTDV[PB0BWSLX]; /* Save division code*/

  if (PB0BW02.PB0BWEXC[PB0BWSLX] == " ") /* No except cd*/
    PB0BW03.PB0BWXRE = " "; /* Spaces to wk excep cd*/
    PB0BM003.PB0BMEXC = " "; /* Spaces to map excep cd*/
    PB0BM003.PB0BMEXD = " "; /* Spaces to map excsp desc*/
  else
    PB0BW03.PB0BWXRE = PB0BW02.PB0BWEXC[PB0BWSLX]; /* Xre cd*/
    PB0BM003.PB0BMEXC = PB0BW02.PB0BWEXC[PB0BWSLX]; /* Xre cd*/
    if (PB0BW02.PB0BWEXC[PB0BWSLX] in XRETBL.XRECD)
      PB0BM003.PB0BMEXD = XRETBL.XREDESC[sysVar.arrayIndex]; /* Xre desc*/
    else
      PB0BM003.PB0BMEXD = "* NOT IN TABLE *";
    end
  end


                  /* Format original receipt fields*/

  PB0BM003.PB0BMOPO = PB0BW02.PB0BWPON[PB0BWSLX]; /* PO no.*/
  PB0BM003.PB0BM-OCI = PB0BW02.PB0BW-OCI[PB0BWSLX]; /* Cust ord id*/
  PB0BM003.PB0BM-ONI = PB0BW02.PB0BW-ONI[PB0BWSLX]; /* Nike ord id*/
   /* ----------------------- y2k out ----------------------*/
   /* MOVE 019 TO PB0BW03.PB0BWDCN;    /* PO century*/
   /* ----------------------- y2k out ----------------------*/
  if (PB0BM003.PB0BMOGP == "03")
    PB0BM003.PB0BMOPY = PB0BW02.PB0BWSES[PB0BWSLX]; /* PO yr*/
    /* ----------------------- y2k in -----------------------*/
    PB0BW03.PB0BWDCN = 00;
    /* ----------------------- y2k in -----------------------*/
  else
    PB0BM003.PB0BMOPY = PB0BW02.PB0BWDPY[PB0BWSLX]; /* PO yr*/
    /* ----------------------- y2k in -----------------------*/
    if (PB0BW02.PB0BWDPY[PB0BWSLX] > 60) /* Century windowing*/
      PB0BW03.PB0BWDCN = 19;
    else
      PB0BW03.PB0BWDCN = 20;
    end
    /* ----------------------- y2k in -----------------------*/
  end
  PB0BM003.PB0BMOPM = PB0BW02.PB0BWDPM[PB0BWSLX]; /* PO mth*/
  PB0BM003.PB0BMODM = PB0BW02.PB0BWDDM[PB0BWSLX]; /* PO Del mth*/
  PB0BM003.PB0BMOFY = PB0BW02.PB0BWDFC[PB0BWSLX]; /* PO fcty*/
  PB0BM003.PB0BMOTY = PB0BW02.PB0BWPOT[PB0BWSLX]; /* PO type*/
  PB0BM003.PB0BMOWH = PB0BW02.PB0BWXWH[PB0BWSLX]; /* Whse*/
  PB0BW03.PB0BWOWH = PB0BW02.PB0BWXWH[PB0BWSLX]; /* Save to wk*/
  PB0BM003.PB0BMOST = PB0BW02.PB0BWSTY[PB0BWSLX]; /* Style*/
  PB0BM003.PB0BMOCL = PB0BW02.PB0BWCLR[PB0BWSLX]; /* Color*/
  PB0BM003.PB0BMODI = PB0BW02.PB0BWXDM[PB0BWSLX]; /* Dim*/
  PB0BM003.PB0BMOQU = PB0BW02.PB0BWXQA[PB0BWSLX]; /* Qual*/
  PB0BM003.PB0BMOSP = PB0BW02.PB0BWXSD[PB0BWSLX]; /* Spec*/
  PB0BM003.PB0BM-OCXREF = PB0BW02.PC2CUXID[PB0BWSLX]; /* CXREF*/
  PB0BM003.PB0BMOPK = PB0BW02.PB0BWXPG[PB0BWSLX]; /* Pkg*/
  PB0BM003.PB0BMOUM = PB0BW02.PB0BWXUM[PB0BWSLX]; /* UOM*/
  PB0BM003.PB0BMOOG = PB0BW02.PB0BWXOW[PB0BWSLX]; /* Own Grp*/


                  /* Format apply-to receipt fields*/

  PB0BM003.PB0BMAPO = PB0BW02.PB0BWPON[PB0BWSLX]; /* PO no.*/
  PB0BM003.PB0BM-ACI = PB0BW02.PB0BW-OCI[PB0BWSLX]; /* Cust ord id*/
  PB0BM003.PB0BM-ANI = PB0BW02.PB0BW-ONI[PB0BWSLX]; /* Nike ord id*/
  if (PB0BM003.PB0BMAGP == "03")
    PB0BM003.PB0BMAPY = PB0BW02.PB0BWSES[PB0BWSLX]; /* PO yr*/
  else
    PB0BM003.PB0BMAPY = PB0BW02.PB0BWDPY[PB0BWSLX]; /* PO yr*/
  end
  PB0BM003.PB0BMAPM = PB0BW02.PB0BWDPM[PB0BWSLX]; /* PO mth*/
  PB0BM003.PB0BMADM = PB0BW02.PB0BWDDM[PB0BWSLX]; /* PO Del mth*/
  PB0BM003.PB0BMAFY = PB0BW02.PB0BWDFC[PB0BWSLX]; /* PO fcty*/
  PB0BM003.PB0BMATY = PB0BW02.PB0BWPOT[PB0BWSLX]; /* PO type*/
  PB0BM003.PB0BMAWH = PB0BW02.PB0BWXWH[PB0BWSLX]; /* Whse*/
  PB0BW03.PB0BWAWH = PB0BW02.PB0BWXWH[PB0BWSLX]; /* Save to wk*/
  PB0BM003.PB0BMAST = PB0BW02.PB0BWSTY[PB0BWSLX]; /* Style*/
  PB0BM003.PB0BMACL = PB0BW02.PB0BWCLR[PB0BWSLX]; /* Color*/
  PB0BM003.PB0BMADI = PB0BW02.PB0BWXDM[PB0BWSLX]; /* Dim*/
  PB0BM003.PB0BMAQU = PB0BW02.PB0BWXQA[PB0BWSLX]; /* Qual*/
  PB0BM003.PB0BMASP = PB0BW02.PB0BWXSD[PB0BWSLX]; /* Spec*/
  PB0BM003.PB0BM-ACXREF = PB0BW02.PC2CUXID[PB0BWSLX]; /* CXREF*/
  PB0BM003.PB0BMAPK = PB0BW02.PB0BWXPG[PB0BWSLX]; /* Pkg*/
  PB0BM003.PB0BMAUM = PB0BW02.PB0BWXUM[PB0BWSLX]; /* UOM*/
  PB0BM003.PB0BMAOG = PB0BW02.PB0BWXOW[PB0BWSLX]; /* Own Grp*/


         /* PROTECT original receipt map fields from data entry*/

  set PB0BM003.PB0BMOPO skip; /* PO no.*/
  set PB0BM003.PB0BM-OCI skip; /* Cust ord id*/
  set PB0BM003.PB0BM-ONI skip; /* Nike ord id*/
  set PB0BM003.PB0BMOPY skip; /* PO yr*/
  set PB0BM003.PB0BMOPM skip; /* PO mth*/
  set PB0BM003.PB0BMODM skip; /* PO Del mth*/
  set PB0BM003.PB0BMOFY skip; /* PO fcty*/
  set PB0BM003.PB0BMOTY skip; /* PO type*/
  set PB0BM003.PB0BMOST skip; /* Style*/
  set PB0BM003.PB0BMOCL skip; /* Color*/
  set PB0BM003.PB0BMODI skip; /* Dim*/
  set PB0BM003.PB0BMOQU skip; /* Qual*/
  set PB0BM003.PB0BMOSP skip; /* Spec*/
  set PB0BM003.PB0BM-OCXREF skip; /* CXREF*/
  set PB0BM003.PB0BMOPK skip; /* Pkg*/
  set PB0BM003.PB0BMOUM skip; /* UOM*/
  set PB0BM003.PB0BMOOG skip; /* Own Grp*/


   /* ------------------------------------------------------------*/
   /* Obtain the pg_scn_sty_ind for the original rcpt style*/
   /* ------------------------------------------------------------*/

  PB0B412(); /* Get pg_scn_sty_ind*/

   /* ------------------------------------------------------------*/
   /* Set process bypass*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWBYP = "Y"; /* Process bypass on*/


   /* ------------------------------------------------------------*/
   /* Set cursor position*/
   /* ------------------------------------------------------------*/

  set PB0BM003.YMTCD cursor, initialAttributes; /* Cursor on YMTCD field*/

   /* ------------------------------------------------------------*/
   /* Set function keys*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMP16 skip, invisible; /* darken clear key*/


end // end PB0B410

// Process Maint Hdr map
Function PB0B411()
   /* ------------------------------------------------------------*/
   /* Find the first (or next) selected line in Map 1 (Inquiry).*/
   /* When a selected line is found, the index address is passed*/
   /* to the calling process. Otherwise, zeroes are passed, which*/
   /* indicates that no valid selection line has been found.*/
   /* ------------------------------------------------------------*/


  PB0BW03.PB0BWSLN = PB0BW01.PB0BWSLX; /* To wk area*/

  PB0BW03.PB0BWSLN = PB0BW03.PB0BWSLN + 1; /* Set index start addr*/


  while (PB0BW03.PB0BWSLN <= 11) /* Process all map lines*/

    if (PB0BW02.PB0BWSEL[PB0BWSLN] == "*") /* Out of bounds*/

      PB0BW03.PB0BWSLN = 999; /* Terminate loop*/
      PB0BW01.PB0BWSLX = 0; /* Indicate no more selects*/
      return; /* Return to calling process*/

    else

      if (PB0BW02.PB0BWSEL[PB0BWSLN] == "S") /* Selected line found*/

        PB0BW01.PB0BWCSL = "Y"; /* Cancel processed selection flag*/
        PB0BW01.PB0BWBSL[PB0BWSLN] = " "; /* New blank selection char*/
        PB0BW01.PB0BWSPG = PB0BW01.PB0BWTSP; /* Page nbr*/

        PB0BW01.PB0BWSLX = PB0BW03.PB0BWSLN; /* Pass sel index*/
        PB0BW03.PB0BWSLN = 999; /* Terminate loop*/
        return; /* Return to calling process*/

      else

        PB0BW03.PB0BWSLN = PB0BW03.PB0BWSLN + 1; /* Loop through*/

      end

    end

  end


  PB0BW01.PB0BWSLX = 0; /* Indicate no more selects*/


end // end PB0B411

// Select ORIG PG-SCN-STY-IND
Function PB0B412()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0BM003.PB0BMOGP; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0BM003.PB0BMOCL; /* ===> color code*/
  PG2REC.SY1STNBR = PB0BM003.PB0BMOST; /* ===> style code*/
  PG2REC.XDMCD = PB0BM003.PB0BMODI; /* ===> dim code*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0BW03.PB0BWOSC = PG2REC.PG2SCRFL; /* Save pg-scn-sty-ind*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWPRC = "412"; /* Module identification*/
      set PB0BM003.PB0BMOST cursor, bold;
      set PB0BM003.PB0BMOCL bold;
      converseLib.validationFailed(197); /* Indicate invalid message*/
      return; /* Return to previous process*/

    end

  end


  converseLib.clearScreen();
  
  set PB0BM003.PB0BMOCL cursor, bold;
  converseLib.validationFailed(10);


end // end PB0B412

// Format and display the map
Function PB0B420()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


   /* PB0BW03.PB0BWFTI NE ' ';       /* Not first time through*/

  if (converseVar.validationMsgNum == 0) /* No error msg to display*/

    if (PB0BW03.PB0BWPND == "N" /* Bypass process not active*/
     || PB0BW05.PB0BWF15 == "Y") /* PF15 ADJ ALL flag = 'Y'*/

      PB0B421(); /* Format map from wk storage*/

      if (converseVar.validationMsgNum == 0) /* No error msg to display*/
        if (PB0BW03.PB0BWMNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PB0BW03.PB0BWMNO);
        end /* Information msg no.*/
      end

    end

  end

   /* ;*/


  if (converseVar.validationMsgNum == 0 /* No error msg to display*/
   && PB0BW05.PB0BDEL == "Y")           /* Receipt delete flag = 'Y'*/
    if (PB0BW03.PB0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PB0BW03.PB0BWMNO);
    end /* Information msg no.*/
  end


  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && PB0BW03.PB0BWFTI != " ")          /* Not first time*/
    set PB0BM003.PB0BMAPO cursor; /* Set cursor at map dtl area*/
  else
    /* ET PB0BM003 ALARM;             /* Indicate sound alarm*/
    PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end


  if (PB0BM003.PB0BMOGP == "03")
    set PB0BM003.PB0BMOPY skip;
    set PB0BM003.PB0BMOPM skip;
    set PB0BM003.PB0BMODM skip;
    set PB0BM003.PB0BMOFY skip;
    set PB0BM003.PB0BMOTY skip;
  end


  if (PB0BM003.PB0BMAGP == "03")
    set PB0BM003.PB0BMAPY skip;
    set PB0BM003.PB0BMAPM skip;
    set PB0BM003.PB0BMADM skip;
    set PB0BM003.PB0BMAFY skip;
    set PB0BM003.PB0BMATY skip;
  end


  if (PB0BW03.PB0BWOSC == "S" /* If tshirt indicated*/
   || PB0BW03.PB0BWOSC == "I" 
   || PB0BW03.PB0BWOSC == "B")
    set PB0BM003.PB0BMP14 skip, invisible; /* No recompare function*/
  end


  PB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0B422(); /* Check user change authority*/


  PB0BM003.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM003.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  converse PB0BM003 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  PB0BW03.PB0BWPND = "N"; /* Reset process bypass ind*/
  PB0BW03.PB0BWMNO = 0; /* Information msg no.*/
  PB0BW01.PB0BWAPP = "PB0B"; /* Process name*/

  COMMAREA.CATOAP = PB0BM003.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM003.CAITEM; /* Fast path information*/


end // end PB0B420

// Format Map Data
Function PB0B421()

   /* ------------------------------------------------------------*/
   /* Clear Map #3/Wk Area for Initial Screen to Display*/
   /* ------------------------------------------------------------*/

  set PB0BM003 initial; /* Clear map #3 for display*/


   /* ------------------------------------------------------------*/
   /* Format Map #3 Header Information*/
   /* ------------------------------------------------------------*/

  PB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0BM003.PB0BMOGP = VFYPO002.XGPCD; /* Default GPC cd*/
  PB0BW03.PB0BWOGP = VFYPO002.XGPCD; /* Save to wk area*/
  PB0BM003.PB0BMAGP = VFYPO002.XGPCD; /* Default GPC cd*/
  PB0BW03.PB0BWAGP = VFYPO002.XGPCD; /* Save to wk area*/
  PB0BW03.PB0BWO-PO-REG-CD = VFYPO002.PO-REG-CD; /* Save*/
  PB0BW03.PB0BWA-PO-REG-CD = VFYPO002.PO-REG-CD; /* Save*/


              /* Protect Map #3 fields*/

  set PB0BM003.XRICD skip; /* Invoice status cd*/
  set PB0BM003.XRIDESC skip; /* Invoice status cd descr*/
  set PB0BM003.PB0BMRST skip; /* Status cd*/
   /* SET PB0BM003.PB0BMRRN AUTOSKIP ; Rcv no.*/
  set PB0BM003.YMTSDESC skip; /* Mode transp desc*/
  set PB0BM003.PB0BMEXC skip; /* Exception cd*/
  set PB0BM003.PB0BMEXD skip; /* Exception desc*/
  set PB0BM003.PB0BMOGP skip; /* GPC cd*/
  set PB0BM003.PB0BMAGP skip; /* GPC cd*/
  set PB0BM003.PB0BMDIV skip; /* Division code*/
   /* SET PB0BM003.PB0BMAWH AUTOSKIP ; Whse cd*/



  if (converseVar.eventKey is enter /* Enter key pressed*/
   || converseVar.eventKey is pf3   /* PF3 Return from detail*/
   || converseVar.eventKey is pf9   /* PF9 Release from setaside*/
   || converseVar.eventKey is pf14  /* PF14 Recompare*/
   || PB0BW05.PB0BWF15 == "Y")      /* PF15 ADJ ALL flag = 'Y'*/

    /* If PF15 ADJ ALL -*/
     /* Move apply to receipt fields to orig receipt fields*/

    if (PB0BW05.PB0BWF15 == "Y") /* PF15 ADJ ALL flag = 'Y'*/

      PB0BW03.PB0BWOPO = PB0BW03.PB0BWAPO; /* PO no.*/
      PB0BW03.PB0BW-OCI = PB0BW03.PB0BW-ACI; /* Cust ord id*/
      PB0BW03.PB0BW-ONI = PB0BW03.PB0BW-ANI; /* Nike ord id*/
      if (PB0BM003.PB0BMAGP == "03")
         /* continue on*/
      else
        PB0BW03.PB0BWOPY = PB0BW03.PB0BWAPY; /* PO yr*/
        /* ---------------------- Y2K IN ------------------------*/
        if (PB0BW03.PB0BWOPY > 60) /* Century Windowing*/
          PB0BW03.PB0BWDCN = 019;
        else
          PB0BW03.PB0BWDCN = 020;
        end
        /* ---------------------- Y2K IN ------------------------*/
      end
      PB0BW03.PB0BWOPM = PB0BW03.PB0BWAPM; /* PO mth*/
      PB0BW03.PB0BWODM = PB0BW03.PB0BWADM; /* PO Del mth*/
      PB0BW03.PB0BWOFY = PB0BW03.PB0BWAFY; /* PO fcty*/
      PB0BW03.PB0BWOTY = PB0BW03.PB0BWATY; /* PO type*/
      PB0BW03.PB0BWOWH = PB0BW03.PB0BWAWH; /* Whse*/
      PB0BW03.PB0BWOST = PB0BW03.PB0BWAST; /* Style*/
      PB0BW03.PB0BWOCL = PB0BW03.PB0BWACL; /* Color*/
      PB0BW03.PB0BWODI = PB0BW03.PB0BWADI; /* Dim*/
      PB0BW03.PB0BWOQU = PB0BW03.PB0BWAQU; /* Qual*/
      PB0BW03.PB0BWOSP = PB0BW03.PB0BWASP; /* Spec*/
      PB0BW03.PB0BW-OCXREF = PB0BW03.PB0BW-ACXREF; /* CXREF*/
      PB0BW03.PB0BWOPK = PB0BW03.PB0BWAPK; /* Pkg*/
      PB0BW03.PB0BWOUM = PB0BW03.PB0BWAUM; /* UOM*/
      PB0BW03.PB0BWOOG = PB0BW03.PB0BWAOG; /* Own Grp*/

      PB0BW02.PB0BWYMT[PB0BWSLX] = PB0BW03.YMTCD; /* Mode of trans*/
      PB0BW02.PC2CUXID[PB0BWSLX] = PB0BW03.PB0BW-ACXREF; /* CXREF*/
      PB0BW02.PB0BWRRN[PB0BWSLX] = PB0BW03.PB0BWRRN; /* Rcpt rept no*/
      PB0BW02.PB0BWRDT[PB0BWSLX] = PB0BW03.PB0BWRDT; /* Rcpt date*/
      PB0BW02.PB0BWCTR[PB0BWSLX] = PB0BW03.PB0BWCTR; /* Cntnr Id*/
      PB0BW02.PB0BW-SHIP-ID[PB0BWSLX] = PB0BW03.PB0BW-SHIP-ID; /**/
      PB0BW03.PB0BWOGP = PB0BW03.PB0BWAGP; /* GPC*/
      /* ------------------------- y2k out --------------------------*/
      /* MOVE 019 TO PB0BW03.PB0BWDCN;        /* Century*/
      /* ------------------------- y2k out --------------------------*/
      PB0BW03.PB0BWOSE = PB0BW03.PB0BWASE; /* Season code*/
      PB0BW05.PB0BWF15 = "N"; /* RESET PF15 ADJ ALL flag TO 'N'*/

    end /* PF15 ADJ ALL flag = 'Y'*/


    /* ----------------------------------------------------------*/
     /* Format Map #3 Header Data.*/
    /* ----------------------------------------------------------*/

    PB0BM003.PB0BMRST = PB0BW03.PB0BWRST; /* stat*/
    PB0BM003.XRICD = PB0BW03.PB0BWXRI; /* rcpt invoice status cd*/

    if (PB0BW03.PB0BWXRI in XRITBL.XRICD)
      PB0BM003.XRIDESC = XRITBL.XRIDESC[sysVar.arrayIndex];
    end /* invc descr*/

           /* *Reformat Date for Map**/

    PB0BW01.PB0BWDPW = PB0BW03.PB0BWRDT;
    PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
    PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
    PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
    PB0BM003.PB0BMRDT = PB0BW01.PB0BWDTW; /* Rcvd date*/

    PB0BM003.PB0BMRRN = PB0BW03.PB0BWRRN; /* Rcv no.*/
    PB0BM003.YMTCD = PB0BW03.YMTCD; /* Mode transp*/
    PB0BM003.YMTSDESC = PB0BW03.YMTSDESC; /* Mode transp desc*/
    PB0BM003.PB0BMDIV = PB0BW03.PB0BWTDV; /* Division code*/

    if (PB0BW03.PB0BWXRE == " ") /* No except cd*/
      PB0BM003.PB0BMEXC = " "; /* Spaces to map excep cd*/
      PB0BM003.PB0BMEXD = " "; /* Spaces to map excep desc*/
    else
      PB0BM003.PB0BMEXC = PB0BW03.PB0BWXRE; /* Xre cd*/
      if (PB0BW03.PB0BWXRE in XRETBL.XRECD)
        PB0BM003.PB0BMEXD = XRETBL.XREDESC[sysVar.arrayIndex]; /* Desc*/
      else
        PB0BM003.PB0BMEXD = "* NOT IN TABLE *";
      end
    end


    /* ----------------------------------------------------------*/
     /* Format Selection Data from Save Area into Map #3*/
    /* ----------------------------------------------------------*/

              /* Format Original Receipt Fields*/

       /* Move orig receipt data to orig receipt fields*/

    PB0BM003.PB0BMOPO = PB0BW03.PB0BWOPO; /* PO no.*/
    PB0BM003.PB0BM-OCI = PB0BW03.PB0BW-OCI; /* Cust ord id*/
    PB0BM003.PB0BM-ONI = PB0BW03.PB0BW-ONI; /* Nike ord id*/
    if (PB0BM003.PB0BMOGP == "03")
      PB0BM003.PB0BMOPY = PB0BW03.PCFSECD; /* PO yr*/
    else
      PB0BM003.PB0BMOPY = PB0BW03.PB0BWOPY; /* PO yr*/
    end
    PB0BM003.PB0BMOPM = PB0BW03.PB0BWOPM; /* PO mth*/
    PB0BM003.PB0BMODM = PB0BW03.PB0BWODM; /* PO Del mth*/
    PB0BM003.PB0BMOFY = PB0BW03.PB0BWOFY; /* PO fcty*/
    PB0BM003.PB0BMOTY = PB0BW03.PB0BWOTY; /* PO type*/
    PB0BM003.PB0BMOWH = PB0BW03.PB0BWOWH; /* Whse*/
    PB0BM003.PB0BMOST = PB0BW03.PB0BWOST; /* Style*/
    PB0BM003.PB0BMOCL = PB0BW03.PB0BWOCL; /* Color*/
    PB0BM003.PB0BMODI = PB0BW03.PB0BWODI; /* Dim*/
    PB0BM003.PB0BMOQU = PB0BW03.PB0BWOQU; /* Qual*/
    PB0BM003.PB0BMOSP = PB0BW03.PB0BWOSP; /* Spec*/
    PB0BM003.PB0BM-OCXREF = PB0BW03.PB0BW-OCXREF; /* CXREF*/
    PB0BM003.PB0BMOPK = PB0BW03.PB0BWOPK; /* Pkg*/
    PB0BM003.PB0BMOUM = PB0BW03.PB0BWOUM; /* UOM*/
    PB0BM003.PB0BMOOG = PB0BW03.PB0BWOOG; /* Own Grp*/


             /* Format Apply To Receipt Fields*/

    PB0BM003.PB0BMAPO = PB0BW03.PB0BWAPO; /* PO no.*/
    PB0BM003.PB0BM-ACI = PB0BW03.PB0BW-ACI; /* Cust ord id*/
    PB0BM003.PB0BM-ANI = PB0BW03.PB0BW-ANI; /* Nike ord id*/
    if (PB0BM003.PB0BMAGP == "03")
      PB0BM003.PB0BMAPY = PB0BW03.PCFSECD; /* PO yr*/
    else
      PB0BM003.PB0BMAPY = PB0BW03.PB0BWAPY; /* PO yr*/
    end
    PB0BM003.PB0BMAPM = PB0BW03.PB0BWAPM; /* PO mth*/
    PB0BM003.PB0BMADM = PB0BW03.PB0BWADM; /* PO Del mth*/
    PB0BM003.PB0BMAFY = PB0BW03.PB0BWAFY; /* PO fcty*/
    PB0BM003.PB0BMATY = PB0BW03.PB0BWATY; /* PO type*/
    PB0BM003.PB0BMAWH = PB0BW03.PB0BWAWH; /* Whse*/
    PB0BM003.PB0BMAST = PB0BW03.PB0BWAST; /* Style*/
    PB0BM003.PB0BMACL = PB0BW03.PB0BWACL; /* Color*/
    PB0BM003.PB0BMADI = PB0BW03.PB0BWADI; /* Dim*/
    PB0BM003.PB0BMAQU = PB0BW03.PB0BWAQU; /* Qual*/
    PB0BM003.PB0BMASP = PB0BW03.PB0BWASP; /* Spec*/
    PB0BM003.PB0BM-ACXREF = PB0BW03.PB0BW-ACXREF; /* CXREF*/
    PB0BM003.PB0BMAPK = PB0BW03.PB0BWAPK; /* Pkg*/
    PB0BM003.PB0BMAUM = PB0BW03.PB0BWAUM; /* UOM*/
    PB0BM003.PB0BMAOG = PB0BW03.PB0BWAOG; /* Own Grp*/

  else
                     /* Not ENTER, PF3, PF9, PF14, or PF15 ADJ ALL*/
    /* continue*/
  end

         /* Protect Original Fields on Map #3*/

  set PB0BM003.PB0BMOPO skip; /* PO no.*/
  set PB0BM003.PB0BM-OCI skip; /* Cust ord id*/
  set PB0BM003.PB0BM-ONI skip; /* Nike ord id*/
  set PB0BM003.PB0BMOPY skip; /* PO yr*/
  set PB0BM003.PB0BMOPM skip; /* PO mth*/
  set PB0BM003.PB0BMODM skip; /* PO Del mth*/
  set PB0BM003.PB0BMOFY skip; /* PO fcty*/
  set PB0BM003.PB0BMOTY skip; /* PO type*/
  set PB0BM003.PB0BMOWH skip; /* Whse*/
  set PB0BM003.PB0BMOST skip; /* Style*/
  set PB0BM003.PB0BMOCL skip; /* Color*/
  set PB0BM003.PB0BMODI skip; /* Dim*/
  set PB0BM003.PB0BMOQU skip; /* Qual*/
  set PB0BM003.PB0BMOSP skip; /* Spec*/
  set PB0BM003.PB0BM-OCXREF skip; /* CXREF*/
  set PB0BM003.PB0BMOPK skip; /* Pkg*/
  set PB0BM003.PB0BMOUM skip; /* UOM*/
  set PB0BM003.PB0BMOOG skip; /* Own Grp*/



   /* ------------------------------------------------------------*/
   /* Set Cursor Position for Map #3*/
   /* ------------------------------------------------------------*/

  set PB0BM003.YMTCD cursor, initialAttributes; /* Cursor on YMTCD field*/

  set PB0BM003.PB0BMP16 skip, invisible; /* darken PF16 clear key*/

end // end PB0B421

// Check User Change Authority
Function PB0B422()
   /* ------------------------------------------------------------*/
            /* Check user change authority*/
            /* for item header inq/chg - function #4*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWUPD == "N") /* Changes not authorized*/

                  /* Set map type to 'Inquire'*/

    PB0BM003.PB0BMTYP = "INQUIRY"; /* Indicate map type*/

                  /* Protect apply-to fields*/

    set PB0BM003.PB0BMRDT skip; /* Rcvng dt*/
    set PB0BM003.YMTCD skip; /* Mode of trans*/
    set PB0BM003.PB0BMRRN skip; /* Rcvng rpt nbr*/
    set PB0BM003.PB0BMAWH skip; /* Whse cd*/
    set PB0BM003.PB0BMAPO skip; /* PO nbr*/
    set PB0BM003.PB0BM-ACI skip; /* Cust ord id*/
    set PB0BM003.PB0BM-ANI skip; /* Nike ord id*/
    set PB0BM003.PB0BMAPY skip; /* PO yr*/
    set PB0BM003.PB0BMAPM skip; /* PO mth*/
    set PB0BM003.PB0BMADM skip; /* PO del mth*/
    set PB0BM003.PB0BMAFY skip; /* PO fcty*/
    set PB0BM003.PB0BMATY skip; /* PO type*/
    set PB0BM003.PB0BMAST skip; /* Style*/
    set PB0BM003.PB0BMACL skip; /* Color*/
    set PB0BM003.PB0BMADI skip; /* Dim*/
    set PB0BM003.PB0BMAQU skip; /* Qual*/
    set PB0BM003.PB0BMASP skip; /* Spec*/
    set PB0BM003.PB0BM-ACXREF skip; /* CXREF*/
    set PB0BM003.PB0BMAPK skip; /* Pkg*/
    set PB0BM003.PB0BMAUM skip; /* UOM*/
    set PB0BM003.PB0BMAOG skip; /* Own Grp*/

                      /* Darken PF9 and PF14*/

    set PB0BM003.PB0BMP09 skip, invisible; /* No PF9 rls setsd*/
    set PB0BM003.PB0BMP14 skip, invisible; /* No PF14 recompare*/

  else

                    /* Set Map Type to 'Change'*/

    PB0BM003.PB0BMTYP = "CHANGE"; /* Indicate map type*/

  end
end // end PB0B422

// Check attention identifier
Function PB0B430()

   /* ------------------------------------------------------------*/
   /* Check Attention Identifier.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen PB0BM003*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* clear pcwrec*/
      COMMAREA.CATOAP = PB0BM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM003.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0BW01.PB0BWPRC = "430"; /* Process name*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0BW01.PB0BWPRC = "430"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PB0BM003"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWPRC = "430"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* If pf14 pressed and tshirt indicated, then invalid pf key*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* pf14 pressed*/
    if (PB0BW03.PB0BWOSC == "S" /* if tshirt indicated*/
     || PB0BW03.PB0BWOSC == "I" 
     || PB0BW03.PB0BWOSC == "B")

      PB0BW01.PB0BWPRC = "430"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/

      exit stack; /* Exit to redisplay map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    PB0BW01.PB0BWPRC = "430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B430

// Reset hlghtd flds/disp pop-ups
Function PB0B440()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMAPO normal; /* PO number*/
  set PB0BM003.PB0BM-ACI normal; /* Cust ord id*/
  set PB0BM003.PB0BM-ANI normal; /* Nike ord id*/
  set PB0BM003.PB0BMAPY normal; /* PO prod yr*/
  set PB0BM003.PB0BMAPM normal; /* PO prod mth*/
  set PB0BM003.PB0BMADM normal; /* PO delivery mth*/
  set PB0BM003.PB0BMAFY normal; /* Factory*/
  set PB0BM003.PB0BMATY normal; /* PO type*/
  set PB0BM003.PB0BMAWH normal; /* Whse*/
  set PB0BM003.PB0BMAGP normal; /* GPC*/
  set PB0BM003.PB0BMAST normal; /* Style*/
  set PB0BM003.PB0BMACL normal; /* Color*/
  set PB0BM003.PB0BMADI normal; /* Dimension*/
  set PB0BM003.PB0BMAQU normal; /* Quality*/
  set PB0BM003.PB0BMASP normal; /* Spec*/
  set PB0BM003.PB0BM-ACXREF normal; /* CXREF*/
  set PB0BM003.PB0BMAPK normal; /* Pkg type*/
  set PB0BM003.PB0BMAUM normal; /* UOM*/
  set PB0BM003.PB0BMAOG normal; /* Own grp*/

  PB0BM003.XXXPRCNM = "PB0B    "; /* Reset process name*/

  set PB0BM003.CATOAP initialAttributes; /* Commarea To application*/
  set PB0BM003.CAITEM initialAttributes; /* Commarea application data*/


   /* *=========================================================**/
   /* *          CHECK FOR USER ? CODE INQUIRY                  **/
   /* * 1) If the user has enter a '?' in any of the appropiate**/
   /* *    fields, display the pop up window for that CSP table**/
   /* *    and allow for inquiry.                               **/
   /* * 2) Set map page after all windows displayed             **/
   /* *==========================================================*/


  if (PB0BM003.PB0BMADI == "?" /* Pop-up window for Dim cd*/
   || PB0BM003.PB0BMAQU == "?" /* Pop-up window for Qual cd*/
   || PB0BM003.PB0BMAPK == "?" /* Pop-up window for Pkg typ cd*/
   || PB0BM003.PB0BMAUM == "?" /* Pop-up window for Unit Meas cd*/
   || PB0BM003.PB0BMAOG == "?") /* Pop-up window for Own Grp cd*/

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      PB0BW01.PB0BWPRC = "440"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    return; /* Exit to next process*/

  end


   /* *===========================**/
   /* *  DIMENSION POP-UP WINDOW  **/
   /* *===========================**/

  if (PB0BM003.PB0BMADI == "?") /* Pop-up window for Dim cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              DIMENSION   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform xdm code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMADI = XDMTBL.XDMCD[XX0XWPIX];
    else
      PB0BM003.PB0BMADI = PB0BW03.PB0BWADI;
    end

    set PB0BM003.PB0BMADI cursor; /* set cursor*/

  end


   /* *=========================**/
   /* *  QUALITY POP-UP WINDOW  **/
   /* *=========================**/

  if (PB0BM003.PB0BMAQU == "?") /* Pop-up window for Qual cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                QUALITY   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform xqa code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMAQU = XQATBL.XQACD[XX0XWPIX];
    else
      PB0BM003.PB0BMAQU = PB0BW03.PB0BWAQU;
    end

    set PB0BM003.PB0BMAQU cursor; /* set cursor*/

  end


   /* *============================**/
   /* *  PKG TYP CD POP-UP WINDOW  **/
   /* *============================**/

  if (PB0BM003.PB0BMAPK == "?") /* Pop-up window for Pkg typ cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          PACKAGING TYPE  "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXPG01(); /* perform xpg code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMAPK = XPGTBL.XPGCD[XX0XWPIX];
    else
      PB0BM003.PB0BMAPK = PB0BW03.PB0BWAPK;
    end

    set PB0BM003.PB0BMAPK cursor; /* set cursor*/

  end


   /* *=================================**/
   /* *  UNIT OF MEASURE POP-UP WINDOW  **/
   /* *=================================**/

  if (PB0BM003.PB0BMAUM == "?") /* Pop-up window for Unit Meas*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "          UNIT OF MEASURE "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXUM01(); /* perform xum code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMAUM = XUMTBL.XUMCD[XX0XWPIX];
    else
      PB0BM003.PB0BMAUM = PB0BW03.PB0BWAUM;
    end

    set PB0BM003.PB0BMAUM cursor; /* set cursor*/

  end


   /* *============================**/
   /* *  OWN GRP CD POP-UP WINDOW  **/
   /* *============================**/

  if (PB0BM003.PB0BMAOG == "?") /* Pop-up window for Own Grp cd*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             OWNER GROUP  "; /* heading*/
    if (PB0BM003.PB0BMAWH in XOWTBL.XWHCD) /* If warehouse in table*/
      XX0XW02.XWHCD = PB0BM003.PB0BMAWH; /* Warehouse*/
    else
      XX0XW02.XWHCD = "00"; /* Default*/
    end

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXOW01(); /* perform xow code window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0BM003.PB0BMAOG = XOWTBL.XOWCD[XX0XWPIX];
    else
      PB0BM003.PB0BMAOG = PB0BW03.PB0BWAOG;
    end

    set PB0BM003.PB0BMAOG cursor; /* set cursor*/

  end


   /* *===============================**/
   /* * RESET MAP, REDISPLAY CHANGES  **/
   /* *===============================**/

  converseLib.clearScreen();
   /* Clear screen before display*/
  PB0BW03.PB0BWPND = "Y"; /* Bypass wk map contents display*/

  exit stack; /* Exit to redisplay map*/


end // end PB0B440

// Verify the entered data
Function PB0B450()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Edit data entered/passed; Highlight any errors.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM003.CAITEM > " ") /* Application data was entered*/

    set PB0BM003.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "450"; /* Process name*/

    exit stack; /* exit redisplay map*/

  end


                  /* (Check YMTCD Field)*/
  if (PB0BM003.YMTCD != PB0BW03.YMTCD) /* Mode of Transp Changed*/
    PB0BW03.PB0BWAPU = "Y"; /* Indicate change*/
  else
    PB0BW03.PB0BWAPU = "N"; /* Reset indicator*/
  end

  if (converseVar.eventKey not pf3)
    PB0B452(); /* Edit Map Field*/
  end

end // end PB0B450

// Validate Map Fields
Function PB0B452()
   /* *-----------------------------------------------------------*/
   /* E D I T    E N T E R E D   D A T A*/
   /*  */
   /* Edit entered data to be used as key information*/
   /* further in the update process. Highlight all*/
   /* errors found; assign defaults where applicable.*/
   /* *-----------------------------------------------------------*/

   /* *-----------------------------------------------------------*/
   /* *  Check for Warning Flag Reset*/
   /* *-----------------------------------------------------------*/

  PB0B453();


   /* *-----------------------------------------------------------*/
   /* *  Edit Header Fields*/
   /* *-----------------------------------------------------------*/

  PB0BS39(); /* Edit Mode of Transp. cd*/
  PB0BS41(); /* Receipt Report No.*/
  PB0BS43(); /* Receipt Report date*/


   /* *-----------------------------------------------------------*/
   /* *  Edit Original Data*/
   /* *-----------------------------------------------------------*/

  PB0BS15(); /* Edit Own Group cd*/
  PB0BS17(); /* Edit Unit of Measure*/
  PB0BS19(); /* Edit Pkg Type cd*/
  PB0BS21(); /* Edit ISEG and CXREF*/
  PB0BS25(); /* Edit Dimension cd*/
  PB0BS27(); /* Edit Color id*/
  PB0BS29(); /* Edit Style cd*/
  PB0BS-32(); /* Edit SO Key*/
  PB0BS23(); /* Edit Quality cd*/
  PB0BS33(); /* Edit PO Key*/


   /* *-----------------------------------------------------------*/
   /* *  Check for previous errors found*/
   /* *-----------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* if errors*/
   || PB0BW03.PB0BWMNO != 0)            /* if warnings*/
    return; /* return to calling process*/
  end


   /* *-----------------------------------------------------------*/
   /* *  Edit Apply-To Data*/
   /* *-----------------------------------------------------------*/

  PB0BS51(); /* Edit Own Group cd*/
  PB0BS53(); /* Edit Unit of Measure*/
  PB0BS55(); /* Edit Pkg Type cd*/
  PB0BS57(); /* Edit ISEG and CXREF*/
  PB0BS61(); /* Edit Dimension cd*/
  PB0BS63(); /* Edit Color id*/
  PB0BS65(); /* Edit Style cd*/
  PB0BS67(); /* Edit Warehouse cd*/
  PB0BS-68(); /* Edit SO Key*/
  PB0BS59(); /* Edit Quality cd*/
  PB0BS69(); /* Edit PO Key*/


   /* *-----------------------------------------------------------*/
   /* *  Check Apply-To Data*/
   /* *-----------------------------------------------------------*/

  PB0B454(); /* Check Apply-to data*/


   /* *-----------------------------------------------------------*/
   /* *  Check for previous errors found*/
   /* *-----------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* If errors*/
   || PB0BW03.PB0BWMNO != 0)            /* if warnings*/
    return; /* return to calling process*/
  end


   /* *-----------------------------------------------------------*/
   /* If PO NE ZERO===>do PO checks*/
   /* otherwise=====>do SO checks*/
   /* *-----------------------------------------------------------*/

  if (PB0BM003.PB0BMAPO != 0) /* if po present*/

       /* *------------------------------------------------------*/
       /* *  Check for Apply-to PO Header Status Closed.*/
       /* *  Header status set in PB0BS71 Edit Apply-to PO Nbr.*/
       /* *  Warning set if header status closed.*/
       /* *------------------------------------------------------*/

    if (PCWREC.XGPCD != "03"
     && PB0BW03.PB0BWAPS == "FC") /* factory closed status*/
      PB0BW01.PB0BWERL = "PB0B452"; /* Process id*/
      PB0BW03.PB0BWMNO = 221; /* warning FC status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMAPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end

    if (PB0BW03.PB0BWAPS == "NC") /* NIKE Closed status*/
      PB0BW01.PB0BWERL = "PB0B452"; /* Process id*/
      PB0BW03.PB0BWMNO = 222; /* warning NC status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMAPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end

    if (PB0BW03.PB0BWAPS == "CL") /* System Closed status*/
      PB0BW01.PB0BWERL = "PB0B452"; /* Process id*/
      PB0BW03.PB0BWMNO = 397; /* warning CL status do you want to*/
                                   /* cont.*/
      set PB0BM003.PB0BMAPO cursor, bold; /* Highlight PO Number*/
      return; /* return to calling process*/

    end


  else /* IF PO EQ 0 DO SALES ORDER CHECKS*/

    if (PB0BM003.PB0BM-ACI != 0 /* if SO NE 0*/
     && PB0BM003.PB0BM-ANI != 0) /**/

      PB0BS-76(); /* Select set (S2) VITEM0R1*/

         /* *------------------------------------------------------*/
         /* Check Apply-to SO item for Style not on SO.*/
         /* Sets fatal error (434) if Style not on SO and*/
         /* doing apply-to a different receipt than the*/
         /* original ( PB0BW03.PB0BWAPU EQ 'Y').*/
         /* Sets warning message (437) if Style not on SO and*/
         /* apply-to same as original (PB0BW03.PB0BWAPU NE 'Y').*/
         /* *------------------------------------------------------*/

      PB0BS-78(); /* Fetch next row (N2) VITEM0R1*/

      PB0BS-80(); /* Close cursor (C2) VITEM0R1*/


         /* *------------------------------------------------------*/
         /* *  Check for previous errors found*/
         /* *------------------------------------------------------*/

      if (converseVar.validationMsgNum != 0 /* If errors or warnings*/
       || PB0BW03.PB0BWMNO != 0)           
        return; /* return to calling process*/
      end


         /* *------------------------------------------------------*/
         /* *  Check for Apply-to SO Header Status NE 'AL' (allocated).*/
         /* *  Header status set in PB0BS-68 Edit Sales Order.*/
         /* *  Warning set if header status NE 'AL'.*/
         /* *------------------------------------------------------*/

      if (PB0BW03.PB0BWAPS != "AL") /* SO hdr st ne 'AL'*/
        PB0BW01.PB0BWERL = "PB0B452"; /* Process id*/
        PB0BW03.PB0BWMNO = 438; /* warning status do you want to*/
                                   /* cont.*/
        set PB0BM003.PB0BM-ACI cursor, bold; /* Highlight cust ord id*/
        set PB0BM003.PB0BM-ANI bold; /* Highlight nike ord id*/
        return; /* return to calling process*/

      end
    end
  end


end // end PB0B452

// Check for Warning Flag Reset
Function PB0B453()

   /* *************************************************************/
   /* *  Check for Needed Warning Flag Reset in Maintenance Mode*/
   /* *************************************************************/

  if (PB0BM003.PB0BMAPO != PB0BW03.PB0BWAPO         /* Apply-to PO no.*/
   /* R PB0BM003.PB0BMAPY NE PB0BW03.PB0BWAPY;/*Apply-to PO yr/sesn*/
   || PB0BM003.PB0BMAPM != PB0BW03.PB0BWAPM         /* Apply-to POID month*/
   || PB0BM003.PB0BMADM != PB0BW03.PB0BWADM         /* Apply-to POID del month*/
   || PB0BM003.PB0BMAFY != PB0BW03.PB0BWAFY         /* Apply-to POID factory*/
   || PB0BM003.PB0BM-ACI != PB0BW03.PB0BW-ACI       /* Apply-to SO cust ord id*/
   || PB0BM003.PB0BM-ANI != PB0BW03.PB0BW-ANI       /* Apply-to SO Nike ord id*/
   || PB0BM003.PB0BMATY != PB0BW03.PB0BWATY         /* Apply-to PO type*/
   || PB0BM003.PB0BMAWH != PB0BW03.PB0BWAWH         /* Apply-to Whse*/
   || PB0BM003.PB0BMAST != PB0BW03.PB0BWAST         /* Apply-to Apply-to Style*/
   || PB0BM003.PB0BMACL != PB0BW03.PB0BWACL         /* Apply-to Color*/
   || PB0BM003.PB0BMADI != PB0BW03.PB0BWADI         /* Apply-to Dim*/
   || PB0BM003.PB0BMAQU != PB0BW03.PB0BWAQU         /* Apply-to Qual*/
   || PB0BM003.PB0BMASP != PB0BW03.PB0BWASP         /* Apply-to ISEG*/
   || PB0BM003.PB0BM-ACXREF != PB0BW03.PB0BW-ACXREF /* Apply-to CXREF*/
   || PB0BM003.PB0BMAPK != PB0BW03.PB0BWAPK         /* Apply-to Pkg*/
   || PB0BM003.PB0BMAUM != PB0BW03.PB0BWAUM         /* Apply-to UOM*/
   || PB0BM003.PB0BMAOG != PB0BW03.PB0BWAOG)        /* Apply-to Own Grp*/

   /* MOVE 'N' TO PB0BW03.PB0BW-PREV-ITEM-WARN; /* ITEM status warning flag*/
    PB0BW03.PB0BW-PREV-HDR-WARN = "N"; /* HDR status warning flag*/
    PB0BW03.PB0BW-PREV-INV-SO-WARN = "N"; /* INVALID SO warning flag*/
    PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN = "N";
                                                       /* ITEM not on POITM*/
  end


end // end PB0B453

// Check Orig and Apply-to data
Function PB0B454()
   /* *=================================================**/
   /* *  Check original versus apply-to data for updates*/
   /* *  to determine if in apply-to update mode*/
   /* *=================================================**/

  if (PB0BW03.PB0BWOPO == PB0BW03.PB0BWAPO                 /* PO no.*/
   && PB0BW03.PB0BWO-PO-REG-CD == PB0BW03.PB0BWA-PO-REG-CD /* reg*/
   && PB0BW03.PB0BWOPY == PB0BW03.PB0BWAPY                 /* POID yr/sesn cd*/
   && PB0BW03.PB0BWOPM == PB0BW03.PB0BWAPM                 /* POID month*/
   && PB0BW03.PB0BWODM == PB0BW03.PB0BWADM                 /* POID del month*/
   && PB0BW03.PB0BWOFY == PB0BW03.PB0BWAFY                 /* POID factory*/
   && PB0BW03.PB0BW-OCI == PB0BW03.PB0BW-ACI               /* SO Cust ord id*/
   && PB0BW03.PB0BW-ONI == PB0BW03.PB0BW-ANI               /* SO Nike ord id*/
   && PB0BW03.PB0BWOTY == PB0BW03.PB0BWATY                 /* PO type*/
   && PB0BW03.PB0BWOWH == PB0BW03.PB0BWAWH                 /* Whse*/
   && PB0BW03.PB0BWOST == PB0BW03.PB0BWAST                 /* Style*/
   && PB0BW03.PB0BWOCL == PB0BW03.PB0BWACL                 /* Color*/
   && PB0BW03.PB0BWODI == PB0BW03.PB0BWADI                 /* Dim*/
   && PB0BW03.PB0BWOQU == PB0BW03.PB0BWAQU                 /* Qual*/
   && PB0BW03.PB0BWOSP == PB0BW03.PB0BWASP                 /* ISEG*/
   && PB0BW03.PB0BW-OCXREF == PB0BW03.PB0BW-ACXREF         /* CXREF*/
   && PB0BW03.PB0BWOPK == PB0BW03.PB0BWAPK                 /* Pkg*/
   && PB0BW03.PB0BWOUM == PB0BW03.PB0BWAUM                 /* UOM*/
   && PB0BW03.PB0BWOOG == PB0BW03.PB0BWAOG)                /* Own Grp*/

    /* Continue because apply-to data is the same as orig data*/

  else /* Apply-to data is not the same as orig data*/

    PB0BW03.PB0BWAPU = "Y"; /* Set flag for apply-to update mode*/

  end

end // end PB0B454

// Process valid input request
Function PB0B460()

   /* ------------------------------------------------------------*/
                 /* Process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for Previous Errors*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message set up*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* PF3 exit to receipt list*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3  was pressed*/
    PB0BW01.PB0BWFUN = "1"; /* Function #1 - rcpt list 1*/
    PB0BW01.PB0BWBYP = "N"; /* Format map #1 contents*/
    converseLib.validationFailed(0); /* Clear error message field*/
    PB0BW01.PB0BWMNO = 0; /* Clear info message field*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* PF15 display next receipt*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 next selection*/
    PB0BW01.PB0BWFUN = "4"; /* Function #4 - itm hdr inq/chg*/
    PB0BW01.PB0BWBYP = "N"; /* Will display initial screen*/
    PB0BW03.PB0BWFTI = "N"; /* Not first time thru*/
    PB0BW03.PB0BWPND = "N"; /* Indicate no apply to pending*/
    PB0BW03.PB0BWMNO = 0; /* Clear the map #3 info msg*/
    PB0BW01.PB0BWMNO = 0; /* Clear the map #1 info msg*/
    converseLib.validationFailed(0); /* Clear the error msg*/
    return; /* Exit to display map*/
  end /* PF15 pressed for next selection END*/


   /* ------------------------------------------------------------*/
   /* ENTER*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/


   /* --------------------------*/
   /* Check apply-to item status*/
   /* --------------------------*/

   /* IF PB0BW03.PB0BW-PREV-ITEM-WARN EQ 'N';*/
     /* IF PB0BW03.PB0BWAIS NE '  ';/* Apply-to itm status for po/so*/
       /* MOVE 'Y' TO PB0BW03.PB0BW-PREV-ITEM-WARN;*/
       /* EZERTN;                   /* Exit to redisplay map*/
     /* END;*/
   /* END;*/



   /* ------------------------*/
   /* Check orig header status*/
   /* ------------------------*/
       /* IF PB0BW03.PB0BWOPO NE 0;     /* Orig po present*/
         /* IF PB0BW03.PB0BWOPS NE 'OP';/* Orig hdr status for po*/
           /* EZERTN;                   /* Exit to redisplay map*/
         /* END;*/
       /* ELSE;*/
         /* IF PB0BW03.PB0BWOPS NE 'AL';/* Orig hdr status for so*/
           /* EZERTN;                   /* Exit to redisplay map*/
         /* END;*/
       /* END;*/
   /*  */


   /* ----------------------------*/
   /* Check for style not on SO/PO*/
   /* ----------------------------*/

    if (PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN == "N")
      if (PB0BW03.PB0BWMNO == 437 /* Style not on SO*/
       || PB0BW03.PB0BWMNO == 407) /* Style not on PO*/
        PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN = "Y";
        return; /* Exit to redisplay map*/
      end
    end

   /* ----------------------------*/
   /* Check for invalid SO warning*/
   /* ----------------------------*/

    if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N")
      if (PB0BW03.PB0BWMNO == 460) /* Invalid SO warning set*/
        PB0BW03.PB0BW-PREV-INV-SO-WARN = "Y";
        return; /* Exit to redisplay map*/
      end
    end

   /* ----------------------------*/
   /* Check apply-to header status*/
   /* ----------------------------*/

    if (PB0BW03.PB0BW-PREV-HDR-WARN == "N")
      if (PB0BW03.PB0BWAPO != 0) /* Apply to PO NE 0*/
        if (PCWREC.XGPCD == "03") /* Aprl*/
          if (PB0BW03.PB0BWAPS != "OP" /* Apply to PO hdr status*/
           && PB0BW03.PB0BWAPS != "FC" /* Apply to PO hdr status*/
           && PB0BW03.PB0BWAPS != "XX") /* set if sty not on PO in PB0BS75*/
            PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
            return; /* Exit to redisplay map*/
          end
        else
          if (PB0BW03.PB0BWAPS != "OP" /* Apply to PO hdr status*/
           && PB0BW03.PB0BWAPS != "XX") /* set if style not on PO in PB0BS75*/
            PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
            return; /* Exit to redisplay map*/
          end
        end
      else /* PO EQ 0*/
        if (PB0BM003.PB0BM-ACI != 0 /* SO NE 0*/
         && PB0BM003.PB0BM-ANI != 0)
          if (PB0BW03.PB0BWAPS != "AL" /* Apply to SO hdr status*/
           && PB0BW03.PB0BWAPS != "XX") /* if style not on SO in PB0BS-78*/
            PB0BW03.PB0BW-PREV-HDR-WARN = "Y";
            return; /* Exit to redisplay map*/
          end
        end
      end
    end


    PB0BW01.PB0BWFUN = "6"; /* Function #6 - itm dtl inq/chg*/
    PB0BW01.PB0BWBYP = "N"; /* Deactivate process bypass*/
    converseLib.validationFailed(0); /* Clear error message field*/
    PB0BW01.PB0BWMNO = 0; /* Clear info message field*/
    return; /* Exit to next process*/
  end



   /* ------------------------------------------------------------*/
   /* First check for PF9 rlse from setsd or PF14 recmpare req*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* PF9 rlse setsd*/
   || converseVar.eventKey is pf14) /* PF14 recompare*/

    if (PB0BW03.PB0BWFTI == " ") /* First time thru*/
      PB0BW03.PB0BWFTI = "N";
    end

    if (PB0BW01.PB0BWUPD == "N") /* No user change authority*/
      converseLib.validationFailed(4); /* Invalid attention key*/
      PB0BW01.PB0BWERL = "PB0B460"; /* This module nbr*/
      exit stack; /* Exit to redisplay map*/
    end

    if (PB0BW03.PB0BWAPU == "Y") /* Apply-to update mode*/
      converseLib.validationFailed(4); /* Invalid attention key*/
      PB0BW01.PB0BWERL = "PB0B460"; /* This module nbr*/
      exit stack; /* Exit to redisplay map*/
    end

  end


   /* ------------------------------------------------------------*/
   /* PF9 release from set aside request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* PF9 rls setsd*/

    if (PB0BW03.PB0BWFTI == " ") /* First time thru*/
      PB0BW03.PB0BWFTI = "N";
    end

    if (PB0BW03.PB0BWRST == "12") /* Set aside status*/

      PB0B461(); /* Execute set aside function*/

      if (converseVar.validationMsgNum == 0) /* Update successful*/
        PB0BW03.PB0BWMNO = 352; /* Indicate released*/
        PB0BW01.PB0BWERL = "PB0B460"; /* Process number*/
        PB0BW01.PB0BWSWR = "Y"; /* Request for new map #1 data = 'Y'*/
        exit stack; /* Exit to redisplay map*/
      end

    else

      converseLib.validationFailed(374); /* Request not available*/
      PB0BW01.PB0BWERL = "PB0B460"; /* This module nbr*/
      exit stack; /* Exit to redisplay map*/

    end

  end



   /* ------------------------------------------------------------*/
   /* PF14 recompare function requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PF14 pressed*/

    if (PB0BW03.PB0BWFTI == " ") /* First time thru*/
      PB0BW03.PB0BWFTI = "N";
    end

    PB0BS79(); /* Obtain tolerances*/

    PB0B463(); /* Execute recompare function*/

    PB0BS85(); /* Update one row*/

    if (PB0BW03.PB0BWXRE == "  ") /* No exceptions*/
      if (PCWREC.XGPCD == "03")
        if (PB0BW03.PB0BWOPS == "OP" /* Orig po hdr status*/
         || PB0BW03.PB0BWOPS == "FC" /* Orig po hdr status*/
         && PB0BW03.PB0BWOIS == "  ") /* Orig po itm status*/
          PB0BS91(); /* Update all related rows*/
        end
      else
        if (PB0BW03.PB0BWOPS == "OP" /* Orig po hdr status*/
         && PB0BW03.PB0BWOIS == "  ") /* Orig po itm status*/
          PB0BS91(); /* Update all related rows*/
        end
      end
    end

    if (converseVar.validationMsgNum == 0) /* Recompare successful*/
      PB0BW03.PB0BWMNO = 353; /* Recompare message*/
      PB0BW01.PB0BWERL = "PB0B460"; /* Process number*/
      PB0BW01.PB0BWSWR = "Y"; /* Request for new map #1 data = 'Y'*/
      exit stack; /* Exit to redisplay map*/
    end

  end



end // end PB0B460

// Process Release Set-Aside Func
Function PB0B461()

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row.*/
   /* ------------------------------------------------------------*/

  PB0BS77(); /* Select Unique Rcpt row*/



   /* ------------------------------------------------------------*/
   /* Update Status and Release Set-Aside Flag of Row.*/
   /* ------------------------------------------------------------*/

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


       /* (Update Status and Rlse Set Aside Fields)*/

  VFYPO002.YRSCD = "11"; /* Set error/released status*/
  PB0BW02.PB0BWSTA[PB0BWSLX] = "11"; /* Set error/released status*/
  VFYPO002.PCMRLSFL = "R"; /* Indicate for release*/



   /* ------------------------------------------------------------*/
   /* Update the row in PO Receipts Table.*/
   /* ------------------------------------------------------------*/

  if (VFYPO002.OP1CUOID != 0 /* Cust ord id specified*/
   && VFYPO002.OP1NORID != 0) /* Nike ord id specified*/
    try
      call "VFYPO002" ("U2", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end /* Upd row*/
  else
    try
      call "VFYPO002" ("U ", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
    end /* Upd row*/
  end



   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0BW03.PB0BWRST = "11"; /* Set error/released status*/
    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "461"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "UPDATE PO RCPTS ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user/s*/

      converseLib.validationFailed(12); /* Indicate message*/
      exit stack; /* Exit to redisplay map*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate data in use*/
        TA1REC.TA1FUNC = "POST"; /* Termination func*/

      else

        converseLib.validationFailed(10); /* Indicate unexpected error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Reset screen before redisplay*/

      end

    end

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end PB0B461

// Process Recompare Function
Function PB0B463()

   /* ============================================================*/
   /* Obtain PO Qty Data for Tolerance Checking.*/
   /* ============================================================*/

  PB0BS81(); /* Get PO Qty data*/


   /* ===========================================================*/
   /* Check Tolerances.*/
   /* ===========================================================*/


   /* ------------------------------------------------------------*/
   /* Initialize tolerance check primary work areas.*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW04.PB0BWRCD[1] for all; /* Clear Dummy Received array*/
  move 0 to PB0BW04.PB0BWRDP[1] for all; /* Clear Dummy Pcent Bal-to-Rcv*/
  move 0 to PB0BW04.PB0BWDFW[1] for all; /* Clear Dummy Bal-to-Rcv array*/

  PB0BW03.PB0BWDFD = 0; /* Initialize Tot Dummy Bal-to-Rcv*/
  PB0BW03.PB0BWXRE = " "; /* Initialize Exception cd wk*/
  PB0BW03.PB0BWTLC = "N"; /* Initialize Tol Confirm flag*/



   /* ------------------------------------------------------------*/
   /* Calculate the dummy received qtys ===> Old Rcvd.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    PB0BW04.PB0BWRCD[PB0BWDX1] = PB0BW04.PB0BWRCQ[PB0BWDX1];

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BS83(); /* check toleranance routine*/


end // end PB0B463

// Process Add Item Map
Function PB0B500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/


  PB0B510(); /* Obtain the data to display*/

  PB0B520(); /* Format and display the map*/

  PB0B530(); /* Check attention identifier*/

  PB0B540(); /* Reset fields to normal intensity*/

  PB0B550(); /* Verify the entered data*/

  PB0B560(); /* Process valid input request*/


end // end PB0B500

// Obtain data to display
Function PB0B510()
   /* ------------------------------------------------------------*/
   /* Check Process Bypass indicators*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWBYP == "Y" /* Process bypass on*/
   || converseVar.validationMsgNum != 0) /* or Errors found*/

    return; /* Exit to next process*/

  end

  PB0BS81(); /* get po data original*/

             /* (Store totals in map dtl arrays)*/
  PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDXM + 1; /* Next avail slot*/

  PB0BW04.SY5SZID[PB0BWDX2] = +99; /* Total dummy size*/
  PB0BW04.SY4IDDSC[PB0BWDX2] = "TOTAL"; /* Total heading*/
  PB0BW04.PB0BWRCQ[PB0BWDX2] = PB0BW03.PB0BWRCT; /* Total rcv*/
  PB0BW04.PB0BWPBQ[PB0BWDX2] = PB0BW03.PB0BWPBT; /* Total on-ord*/
  PB0BW04.PB0BWDFQ[PB0BWDX2] = PB0BW03.PB0BWDFT; /* Total diff*/



   /* ------------------------------------------------------------*/
   /* Set map display indicators.*/
   /* ------------------------------------------------------------*/

   /* F PB0BW03.PB0BWDSP = 3;          /* Map 3*/
   /* OR PB0BW03.PB0BWDSP = 2;        /* Map 2*/
         /* CONTINUE*/
   /* LSE;*/
  PB0BW03.PB0BWDSP = 1; /* Set map display to page 1*/
   /* ND;*/

  PB0BW01.PB0BWBYP = "Y"; /* Request for data completed.*/

  if (PB0BW03.PB0BWDXM <= 17) /* Data fits on 1ST map page*/
    PB0BW03.PB0BWDSM = 1; /* Set max screen to display*/
  else
    if (PB0BW03.PB0BWDXM <= 35) /* Max data fits on 2ND map page*/
      PB0BW03.PB0BWDSM = 2; /* Set max screen to display*/
    else
      PB0BW03.PB0BWDSM = 3; /* Set max screen to display*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Set function keys*/
   /* ------------------------------------------------------------*/

  set PB0BM003.PB0BMP16 skip, invisible; /* darken clear key*/

end // end PB0B510

// Format and display the map
Function PB0B520()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* No error msg to display*/

    PB0B521(); /* Format map page from wk*/

    if (converseVar.validationMsgNum == 0) /* No error msg to display*/
      if (PB0BW01.PB0BWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PB0BW01.PB0BWMNO);
      end /* Information msg no.*/
    end

    set PB0BM004.PB0BMADQ[1] cursor; /* Set cursor at map dtl area*/

  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    /* ET PB0BM004 ALARM;             /* Indicate sound alarm*/
    PB0BM004.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end


  PB0BM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PB0BM004.PB0BMTYP = "ADD"; /* Indicate map type*/

   /* -----------------------------------------------------------------*/
   /* Determine appropriate qty balance label*/
   /* -----------------------------------------------------------------*/

  if (PB0BW03.PB0BWOPO == 0) /* If PO number EQ zero*/
    if (PB0BW03.PB0BW-OCI == 0 /* If SO number EQ zero*/
     && PB0BW03.PB0BW-ONI == 0)
        /* let PO qty labels 1 and 2 default to defined value 'QTY BAL:'*/
    else /* If SO number NE zero*/
      PB0BM004.PB0BMPBH[1] = "SO QTY BAL:"; /* SO qty label 1*/
      PB0BM004.PB0BMPBH[2] = "SO QTY BAL:"; /* SO qty label 2*/
    end
  else /* If PO number NE zero*/
    PB0BM004.PB0BMPBH[1] = "PO QTY BAL:"; /* Qty label 1*/
    PB0BM004.PB0BMPBH[2] = "PO QTY BAL:"; /* Qty label 2*/
  end

  PB0BM004.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM004.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  converse PB0BM004 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  PB0BW01.PB0BWMNO = 0; /* Reset information message number*/
  PB0BW01.PB0BWAPP = "PB0B"; /* App name*/

  COMMAREA.CATOAP = PB0BM004.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM004.CAITEM; /* Fast path information*/


end // end PB0B520

// Format Map Data
Function PB0B521()
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/

  set PB0BM004 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format Map Header Information from save fields.*/
   /* ------------------------------------------------------------*/

  PB0BM004.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
   /* OVE PB0BW03.PB0BWRST TO PB0BM004.PB0BMRST; /* Receipt status*/
  PB0BM004.PB0BMRST = "10"; /* Initialize receipt status*/
  PB0BW03.PB0BWXRE = "  "; /* Initialize receipt exception code*/

          /* *Reformat Date for Map**/
  PB0BW01.PB0BWDPW = PB0BW03.PB0BWRDT;
  PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
  PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
  PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
  PB0BM004.PB0BMRDT = PB0BW01.PB0BWDTW; /* Receipt date*/

  PB0BM004.PB0BMOPO = PB0BW03.PB0BWOPO; /* PO number*/
  PB0BM004.PB0BM-ORIG-SO-NBR = PB0BW03.PB0BW-ORIG-SO-NBR; /* SO*/
  if (PB0BM004.XGPCD == "03")
    PB0BM004.PB0BMOPY = PB0BW03.PCFSECD; /* PO prod yr*/
  else
    PB0BM004.PB0BMOPY = PB0BW03.PB0BWOPY; /* PO prod yr*/
  end
  PB0BM004.PB0BMOPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BM004.PB0BMODM = PB0BW03.PB0BWODM; /* PO delivery mth*/
  PB0BM004.PB0BMOFY = PB0BW03.PB0BWOFY; /* Factory*/
  PB0BM004.PB0BMOTY = PB0BW03.PB0BWOTY; /* PO type*/
  PB0BM004.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  PB0BM004.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  PB0BM004.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  PB0BM004.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  PB0BM004.XSDCD = PB0BW03.PB0BWOSP; /* Spec*/

  set PB0BM004.PB0BMHDV skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMDIV skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMH01 skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMAPO skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMH02 skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMAPY skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMAPM skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMADM skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMAFY skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BM-H03 skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BMATY skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BM-H04 skip, invisible; /* Protect,darken map fld*/
  set PB0BM004.PB0BM-APPLY-SO-NBR skip, invisible; /* Protect,darken map fld*/



   /* ------------------------------------------------------------*/
   /* Check the map page to display.*/
   /* Format the map detail data per map page requested.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDSP == 1) /* Map page 1 requested*/

    PB0BW03.PB0BWDX1 = 1; /* Set array start index*/
    if (PB0BW03.PB0BWDXM <= 8) /* To fit on 1st half of map*/
      set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
    end

  else

    if (PB0BW03.PB0BWDSP == 2) /* Map page 2 requested*/

      PB0BW03.PB0BWDX1 = 19; /* Set array start index*/
      if (PB0BW03.PB0BWDXM <= 26) /* To fit on 2nd half of map*/
        set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
      end

    else
      if (PB0BW03.PB0BWDSP == 3) /* Map page 3 requested*/

        PB0BW03.PB0BWDX1 = 37; /* Set array start index*/
        set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
      end
    end
  end


  PB0BW03.PB0BWDX2 = 1; /* Set map start index*/

  while (PB0BW03.PB0BWDX2 <= 18) /* Process all map sizes*/

    if (PB0BW03.PB0BWDX1 <= 41) /* Process all array sizes*/

      if (PB0BW04.SY5SZID[PB0BWDX1] == 0) /* Empty array bucket*/

        set PB0BM004.SY5SZID[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMRCQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMPBQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMDFQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMADQ[PB0BWDX2] skip, invisible;

      else

        PB0BM004.SY5SZID[PB0BWDX2] = PB0BW04.SY4IDDSC[PB0BWDX1];
        PB0BM004.PB0BMRCQ[PB0BWDX2] = PB0BW04.PB0BWRCQ[PB0BWDX1];
        PB0BM004.PB0BMPBQ[PB0BWDX2] = PB0BW04.PB0BWPBQ[PB0BWDX1];
        PB0BM004.PB0BMDFQ[PB0BWDX2] = PB0BW04.PB0BWDFQ[PB0BWDX1];
        PB0BM004.PB0BMADQ[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];

        if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Total line*/
          set PB0BM004.PB0BMADQ[PB0BWDX2] skip; /* Protect adj tot*/
        end

      end

    else

      set PB0BM004.SY5SZID[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMRCQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMPBQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMDFQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMADQ[PB0BWDX2] skip, invisible;

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Get next array elem*/
    PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Set screen prompts.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDXM <= 18) /* One page for display*/

    set PB0BM004.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
    set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/

  else /* More than one page for display*/

    if (PB0BW03.PB0BWDSP == 1) /* Page one displayed*/
      set PB0BM004.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
      set PB0BM004.PB0BMP08 skip; /* Show PF8 prompt*/
    else
      if (PB0BW03.PB0BWDSM == 2 /* Max pages = 2*/
       && PB0BW03.PB0BWDSP == 2) /* Page two displayed*/
        set PB0BM004.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
      else
        if (PB0BW03.PB0BWDSP == 3) /* Page three displayed*/
          set PB0BM004.PB0BMP07 skip; /* Show PF7 prompt*/
          set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
        end
      end
    end

  end



   /* ------------------------------------------------------------*/
   /* Darken unavailable function prompts.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOGP == "02") /* Ftwr add receipt in process*/
    /* continue*/
  else /* Non-ftwr add recpt in process*/
    set PB0BM004.PB0BMP09 skip, invisible; /* PF9 Accept Add not available*/
  end

  set PB0BM004.PB0BMP12 skip, invisible; /* Accept Overage not available*/
  set PB0BM004.PB0BMP15 skip, invisible; /* Adj All not available*/



end // end PB0B521

// Check attention identifier
Function PB0B530()

   /* ------------------------------------------------------------*/
                  /* Check Attention Identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh  PB0BM004*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 refresh request*/
    converseLib.clearScreen();
     /* Refresh screen*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any TSQ records*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* Clear pcwrec*/
      COMMAREA.CATOAP = PB0BM004.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM004.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0BW01.PB0BWPRC = "530"; /* This module nbr*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0BW01.PB0BWPRC = "530"; /* This module nbr*/

    end

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 help request*/
   /* PF4 mstr menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 help request*/
   || converseVar.eventKey is pf4) /* PF4 mstr menu request*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PB0BM004"; /* Move in map name*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWPRC = "530"; /* This module nbr*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF3 exit to item header request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 exit to itm hdr request*/
    PB0BW01.PB0BWFUN = "3"; /* Function #3 - itm hdr add*/
    PB0BW01.PB0BWBYP = "Y"; /* Do not display initial screen*/
    converseLib.validationFailed(0); /* Clear error message field*/
    PB0BW01.PB0BWMNO = 0; /* Clear info message field*/
    PB0BW03.PB0BWMNO = 0; /* Clear info message field*/
    exit stack; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* Note:  PF9 is part of the ftwr add receipt process only.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    if (PB0BM003.PB0BMOGP == "02") /* For ftwr add process*/
      if (converseVar.eventKey not pf9) /* PF9 to accept not pressed*/
        PB0BW01.PB0BWPRC = "530"; /* This module nbr*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/

        if (converseVar.eventKey is pa1 /* PA1 was pressed*/
         || converseVar.eventKey is pa3) /* or PA3 was pressed*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end

        exit stack; /* Exit to redisplay map*/
      end
    else /* For non-ftwr add*/
                                   /* PF9 to accept not part of process*/

      PB0BW01.PB0BWPRC = "530"; /* This module nbr*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/

      if (converseVar.eventKey is pa1 /* PA1 was pressed*/
       || converseVar.eventKey is pa3) /* or PA3 was pressed*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      exit stack; /* Exit to redisplay map*/

    end
  end


end // end PB0B530

// Reset hlghtd flds/disp pop-ups
Function PB0B540()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PB0BM004.XXXPRCNM = "PB0B    "; /* Reset process name*/

  set PB0BM004.CATOAP initialAttributes; /* Commarea To application*/
  set PB0BM004.CAITEM initialAttributes; /* Commarea application data*/


end // end PB0B540

// Verify the entered data
Function PB0B550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM004.CAITEM > " ") /* Application data was entered*/

    set PB0BM004.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "550"; /* Process name*/

    return; /* exit redisplay map*/

  end


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0B551(); /* Verify scroll request*/
    PB0B552(); /* Edit entered data*/

  else

    PB0B552(); /* Edit entered data*/

    if (converseVar.validationMsgNum == 0) /* No edit errors found*/

      PB0BS79(); /* Obtain Tolerance limits*/

      if (converseVar.validationMsgNum == 0)

        PB0BW03.PB0BWXRE = " "; /* Reset receipt exception code*/

        /* -------------------------------------------------------*/
        /* Check tolerances for receipt*/
        /* -------------------------------------------------------*/

        if (PB0BW03.PB0BWOPO == 0) /* If PO EQ zero*/
          if (PB0BW03.PB0BW-OCI == 0 /* If SO cust ord id EQ zero*/
           || PB0BW03.PB0BW-ONI == 0) /* or SO Nike ord id EQ zero*/
            /* Don't check tolerances*/
          else /* If SO cust ord id and Nike ord id not both EQ zero*/
            PB0B554(); /* Check Tolerances*/
          end
        else /* If PO NE zero*/
          PB0B554(); /* Check Tolerances*/
        end


        /* -------------------------------------------------------*/
        /* Process results of tolerance check*/
        /* -------------------------------------------------------*/

        if (PB0BW03.PB0BWXRE == "OH") /* Overshipment - Hard*/

          if (PB0BW03.PB0BWPND == "Y") /* Previous pending act*/
            PB0BW03.PB0BWPND = "N"; /* Reset to process upd*/
          else
            PB0BW03.PB0BWPND = "Y"; /* Indicate pending act*/
            PB0BW01.PB0BWPRC = "550"; /* Process number*/
            if (PB0BM003.PB0BMOGP == "02") /* Ftwr add in process*/
              PB0BW01.PB0BWMNO = 461; /* Tolerance exceeded*/
            else /* Non-Ftwr add in process*/
              PB0BW01.PB0BWMNO = 462; /* Tolerance exceeded*/
            end
          end

        else

          PB0BW03.PB0BWPND = "N"; /* Reset prev actvty ind*/

          if (PB0BM003.PB0BMOGP == "02" /* Ftwr add in process*/
           && PB0BW03.PB0BWADT > 0)     /* Adjustments total > 0*/
            PB0BW01.PB0BWPRC = "550"; /* Process number*/
            PB0BW01.PB0BWMNO = 463; /* Press PF9 to add*/
          end
        end
      end
    end
  end


end // end PB0B550

// Verify scroll request
Function PB0B551()

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  PB0BW03.PB0BWDX1 = 1; /* Initialize line index*/

  if (PB0BW03.PB0BWDSP == 1) /* Map 1 displayed*/
    PB0BW03.PB0BWDX2 = 1; /* Set array start index (1st map)*/
  else
    if (PB0BW03.PB0BWDSP == 2) /* Map 2 displayed*/
      PB0BW03.PB0BWDX2 = 18; /* Set array start index (2nd map)*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Map 3 displayed*/
        PB0BW03.PB0BWDX2 = 36; /* Set array start index (3rd map)*/
      end
    end
  end


   /* HILE PB0BW03.PB0BWDX1 LE 18;     /* Until end of lines*/

   /* IF PB0BW04.SY5SZID(PB0BWDX2) GT 0;     /* Valid line*/

     /* IF PB0BW04.PB0BWADQ(PB0BWDX2) NE PB0BM004.PB0BMADQ(PB0BWDX1);*/
       /* SET PB0BM004.PB0BMADQ(PB0BWDX1) CURSOR,BRIGHT; /* Highlight*/
       /* MOVE '551' TO PB0BW01.PB0BWPRC;    /* Process name*/
       /* MOVE 14 TO EZEMNO;          /* Modifications not allowed*/
     /* END;*/

   /* END;*/

   /* PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
   /* PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Get next array elem*/

   /* IF PB0BW03.PB0BWDX2 GT 41;      /* All sizes processed*/
     /* MOVE +999 TO PB0BW03.PB0BWDX1;       /* Terminate loop*/
   /* END;*/

   /* ND;*/


   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0BW03.PB0BWDSP == 1       /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0BW01.PB0BWPRC = "551"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PB0BW03.PB0BWDSM == 1 /* Max pages = 1*/
     && converseVar.validationMsgNum == 0) /* and no errors*/
      PB0BW01.PB0BWPRC = "551"; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      if (PB0BW03.PB0BWDSM == 2 /* Max pages = 2*/
       && PB0BW03.PB0BWDSP == 2 /* Current page = 2*/
       && converseVar.validationMsgNum == 0) /* and no errors*/
        PB0BW01.PB0BWPRC = "551"; /* Process name*/
        converseLib.validationFailed(3); /* No more pages to display*/
      else
        if (PB0BW03.PB0BWDSM == 3 /* Max pages = 3*/
         && PB0BW03.PB0BWDSP == 3 /* Current page = 3*/
         && converseVar.validationMsgNum == 0) /* and no errors*/
          PB0BW01.PB0BWPRC = "551"; /* Process name*/
          converseLib.validationFailed(3); /* No more pages to display*/
        end
      end
    end
  end



end // end PB0B551

// Validate Map Fields
Function PB0B552()
   /* *************************************************************/
   /* *****  E D I T   E N T E R E D  A D J U S T M E N T S  ******/
   /* *************************************************************/


  if (PB0BW03.PB0BWPND != "Y") /* No Pending update activity*/
    PB0BW03.PB0BWUPD = "N"; /* Reset Updates present ind*/
  end


   /* *==========================================**/
   /* * Re-load adjustments array with new data  **/
   /* *==========================================**/

  if (PB0BW03.PB0BWDSP == 1) /* Map page 1 requested*/
    PB0BW03.PB0BWDX1 = 1; /* Set array start index*/
  else
    if (PB0BW03.PB0BWDSP == 2) /* Map page 2 requested*/
      PB0BW03.PB0BWDX1 = 19; /* Set array start index*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Map page 3 requested*/
        PB0BW03.PB0BWDX1 = 37; /* Set array start index*/
      end
    end
  end


  PB0BW03.PB0BWDX2 = 1; /* Set map start index*/

  while (PB0BW03.PB0BWDX2 <= 18) /* Process all map sizes*/

    if (PB0BW03.PB0BWDX1 <= 41) /* Process all array sizes*/

      if (PB0BW04.SY5SZID[PB0BWDX1] == 0 /* Empty bucket*/
       || PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Totals bucket*/

          /* (next sentence)*/

      else

        if (PB0BW04.PB0BWADQ[PB0BWDX1] != PB0BM004.PB0BMADQ[PB0BWDX2])

          PB0BW03.PB0BWPND = "N"; /* Reset Pending actvty ind*/

          if (PB0BM004.PB0BMADQ[PB0BWDX2] >= 0
           && PB0BM004.PB0BMADQ[PB0BWDX2] <= 99999) /* valid adj*/
            PB0BW04.PB0BWADQ[PB0BWDX1] = PB0BM004.PB0BMADQ[PB0BWDX2];
            PB0BW03.PB0BWUPD = "Y"; /* Updates present*/
          else
            set PB0BM004.PB0BMADQ[PB0BWDX2] cursor, bold; /* Hilight*/
            PB0BW01.PB0BWPRC = "552"; /* Process name*/
            converseLib.validationFailed(428); /* Indicate invalid qty*/
            PB0BW03.PB0BWUPD = "N"; /* Reset upd ind*/
          end

        end

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Get next array elem*/
    PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Loop through*/

  end


   /* *===============================**/
   /* *  Recompute Adjustment totals  **/
   /* *===============================**/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  PB0BW03.PB0BWADT = 0; /* Initialize adjustment totals*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process valid sizes*/

    PB0BW03.PB0BWADT = PB0BW03.PB0BWADT + PB0BW04.PB0BWADQ[PB0BWDX1];

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

             /* (Store totals in map dtl array)*/
  PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDXM + 1; /* Totals slot*/
  PB0BW04.PB0BWADQ[PB0BWDX2] = PB0BW03.PB0BWADT; /* Total adj*/



end // end PB0B552

// Check Maint Tolerances
Function PB0B554()

   /* ------------------------------------------------------------*/
   /* Initialize tolerance check primary work areas.*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW04.PB0BWRCD[1] for all; /* Clear Dummy Received array*/
  move 0 to PB0BW04.PB0BWRDP[1] for all; /* Clear Dummy Pcent Bal-to-Rcv*/
  move 0 to PB0BW04.PB0BWDFW[1] for all; /* Clear Dummy Bal-to-Rcv array*/

  PB0BW03.PB0BWDFD = 0; /* Initialize Tot Dummy Bal-to-Rcv*/
  PB0BW03.PB0BWXRE = " "; /* Initialize Exception cd wk*/
  PB0BW03.PB0BWTLC = "N"; /* Initialize Tol Confirm flag*/

   /* ------------------------------------------------------------*/
   /* Calculate the dummy received qtys. (Old Rcvd + New Adjust)*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    PB0BW03.PB0BWQT1 = PB0BW04.PB0BWRCQ[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk 2*/
    PB0BW04.PB0BWRCD[PB0BWDX1] = PB0BW03.PB0BWQT1 + PB0BW03.PB0BWQT2;

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BS83(); /* Check Tolerance Routine*/


end // end PB0B554

// Process valid input request
Function PB0B560()

   /* ------------------------------------------------------------*/
               /* Process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for previous error or pending activity*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Previous error*/
   || PB0BW03.PB0BWPND == "Y")          /* Pending activity*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* PF7 scroll backward or PF8 scroll forward request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll backward request*/
    if (PB0BW03.PB0BWDSP == 2) /* Page nbr = 2*/
      PB0BW03.PB0BWDSP = 1; /* Decrement page number*/
      return; /* Return to calling process*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Page nbr = 3*/
        PB0BW03.PB0BWDSP = 2; /* Decrement page number*/
        return; /* Return to calling process*/
      end
    end
  end

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PB0BW03.PB0BWDSP == 1) /* Page nbr = 1*/
      PB0BW03.PB0BWDSP = 2; /* Increment page number*/
      return; /* Return to calling process*/
    else
      if (PB0BW03.PB0BWDSP == 2) /* Page nbr = 2*/
        PB0BW03.PB0BWDSP = 3; /* Increment page number*/
        return; /* Return to calling process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If ftwr add receipt in process:*/
   /* if PF9 - add receipt to data base request.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOGP == "02") /* if ftwr add receipt in process*/
    /* F EZEAID IS ENTER;             /**/
     /* MOVE 'PB0B560' TO PB0BW01.PB0BWPRC;/* Process name*/
     /* MOVE 463 TO PB0BW01.PB0BWMNO; /* Display msg for PF9 add*/
    /* ND;*/
    if (converseVar.eventKey is pf9) /* PF9 - add receipt to db*/

      if (PB0BW03.PB0BWUPD == "Y" /* Valid updates present*/
       || PB0BW03.PB0BWADT > 0)   /* Adjustment total GT zero*/

        PB0B361(); /* Check for existing row*/

        if (SQLCA.VAGen_SQLCODE == 100)
          PB0B561(); /* Add DPRODC.VFYPO001 row*/

          if (PB0BW03.PB0BWXRE == "  "
           && PB0BW03.PB0BWOPS == "OP"
           && PB0BW03.PB0BWOIS == "  ")
            PB0BS91(); /* UPDATE ALL RELATED ROWS*/
          end

          /* F PB0BW03.PB0BWOSC EQ 'I'; /* If valid t-shirt*/
           /* OR PB0BW03.PB0BWOSC EQ 'B';*/
             /* PERFORM PB0B562;      /* Add to alternate inventory*/
          /* ND;*/

          if (converseVar.validationMsgNum == 0) /* Successful update done*/
            PB0BW01.PB0BWERL = "PB0B560"; /* Process name*/
            PB0BW03.PB0BWMNO = 1; /* Indicate upd message*/
            PB0BW01.PB0BWFUN = "3"; /* Function #3 itm hdr add*/
            PB0BW01.PB0BWSWR = "Y"; /* Request for data*/
            PB0BW01.PB0BWBYP = "Y"; /* Get updated data to display*/
          else /* Unsuccessful update*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* Reset any changes*/
          end
        else
          PB0BW01.PB0BWERL = "PB0B560"; /* Process name*/
          converseLib.validationFailed(12); /* Ind row upd by someone else*/
          PB0BW01.PB0BWFUN = "3"; /* Return to funct #3 itm hdr add*/
          PB0BW01.PB0BWSWR = "Y"; /* Request for data*/
          PB0BW01.PB0BWBYP = "Y"; /* Get updated data to display*/
        end

      end

    end
  end


   /* ------------------------------------------------------------*/
   /* If Non-ftwr add receipt in process:*/
   /* if Enter - add receipt to data base request.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOGP != "02") /* If Non-ftwr add receipt in progress*/
    if (converseVar.eventKey is enter) /* Enter - add receipt to db*/

      if (PB0BW03.PB0BWUPD == "Y" /* Valid updates present*/
       || PB0BW03.PB0BWADT > 0)   /* Adjustment total GT zero*/

        PB0B361(); /* Check for existing row*/

        if (SQLCA.VAGen_SQLCODE == 100)
          PB0B561(); /* Add DPRODC.VFYPO001 row*/

          if (PB0BW03.PB0BWXRE == "  ")
            if (PCWREC.XGPCD == "03") /* Aprl*/
              if (PB0BW03.PB0BWOPS == "OP"
               || PB0BW03.PB0BWOPS == "FC"
               && PB0BW03.PB0BWOIS == "  ")
                PB0BS91(); /* UPDATE ALL RELATED ROWS*/
              end
            else
              if (PB0BW03.PB0BWOPS == "OP"
               && PB0BW03.PB0BWOIS == "  ")
                PB0BS91(); /* UPDATE ALL RELATED ROWS*/
              end
            end
          end

          if (PB0BW03.PB0BWOSC == "I" /* If valid t-shirt*/
           || PB0BW03.PB0BWOSC == "B" 
           || PB0BW03.PB0BWOSC == "U")
            PB0B562(); /* Add to alternate inventory*/
          end

          if (converseVar.validationMsgNum == 0) /* Successful update done*/
            PB0BW01.PB0BWERL = "PB0B560"; /* Process name*/
            PB0BW03.PB0BWMNO = 1; /* Indicate upd message*/
            PB0BW01.PB0BWFUN = "3"; /* Function #3 itm hdr add*/
            PB0BW01.PB0BWSWR = "Y"; /* Request for data*/
            PB0BW01.PB0BWBYP = "Y"; /* Get updated data to display*/
          else /* Unsuccessful update*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* Reset any changes*/
          end
        else
          PB0BW01.PB0BWERL = "PB0B560"; /* Process name*/
          converseLib.validationFailed(12); /* Ind row upd by someone else*/
          PB0BW01.PB0BWFUN = "3"; /* Return to funct #3 itm hdr add*/
          PB0BW01.PB0BWSWR = "Y"; /* Request for data*/
          PB0BW01.PB0BWBYP = "Y"; /* Get updated data to display*/
        end

      end

    end
  end


end // end PB0B560

// Add DPRODC.VFYPO002 row
Function PB0B561()
   /* ------------------------------------------------------------*/
   /* Build PO Receipts Table row.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get current date/TIME*/

  set VFYPO002 empty; /* Clear output record*/

  PB0BS87(); /* set status*/

  VFYPO002.YRSCD = PB0BW03.PB0BWRST;
  VFYPO002.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* po region*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWOPO; /* PO number*/

  if (PB0BW03.PB0BW-OCI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* Ord part char*/
    VFYPO002.OP1CUOID = 0; /* Cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-OPC; /* Ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-OCI; /* Cust ord id*/
  end

  if (PB0BW03.PB0BW-ONI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* Nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ONI; /* Nike ord id*/
  end


  if (PB0BW03.PB0BWOPO > 0) /* PO number*/
    /* ------------------- y2k out --------------------*/
    /* MOVE 019 TO PB0BW01.PB0BWDPC;  /* PO prod century*/
    /* ------------------- y2k out --------------------*/
    /* ------------------- y2k in ---------------------*/
    if (PB0BW03.PB0BWOPY > 60) /* Century windowing*/
      PB0BW01.PB0BWDPC = 019;
    else
      PB0BW01.PB0BWDPC = 020;
    end
    /* ------------------- y2k in ---------------------*/
  else
    PB0BW01.PB0BWDPC = 000; /* PO prod century*/
  end

  PB0BW01.PB0BWDPY = PB0BW03.PB0BWOPY; /* PO prod yr*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWODM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWOSE; /* Season*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWOFY; /* Factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWOTY; /* PO type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec*/
  VFYPO002.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Typ cd*/
  VFYPO002.XUMCD = PB0BW03.PB0BWOUM; /* Unit of meas*/
  VFYPO002.YMTCD = PB0BW03.YMTCD; /* Mode*/
  VFYPO002.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  VFYPO002.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* CXREF*/
  VFYPO002.SL1RCRNO = PB0BW03.PB0BWRRN; /* Receipt ref no.*/

  VFYPO002.TSHRCTDT = PB0BW03.PB0BWRDT; /* Received date*/

  VFYPO002.TSHCNTNR = " "; /* Container no.*/
  VFYPO002.TSFSHPID = 0; /* SHIPMENT ID*/

  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
  VFYPO002.PCMRLSFL = "C"; /* Rel status flag*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/

  VFYPO002.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  VFYPO002.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ change time*/
  VFYPO002.ZZZCHGCT = 0; /* ZZ change count*/

            /* (Move all valid size qtys)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];
      end
    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Add the row to PO Receipts Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("A ", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

     /* NEXT SENTENCE               ; Next sentence*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    PB0BW01.PB0BWPRC = "561"; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
    TA1REC.TA1LOC = "ADD PO RCPTS ROW";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
    TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B561

// Add to ALTERNATE INVENTORY
Function PB0B562()
   /* ------------------------------------------------------------*/
           /* Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY if necessary*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* uncrest product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I")
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /**/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A"
       && PC2REC.YPCCD == "S") /* screener*/
      /* continue*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B562"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

            /* (Move all valid size qtys)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        AVLREC.AVLADJQT[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];
      end
    end
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end

  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "562"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B562

// Process Maint Item map
Function PB0B600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/


  PB0B610(); /* Obtain the data to display*/

  PB0B620(); /* Format and display the map*/

  PB0B630(); /* Check attention identifier*/

  PB0B640(); /* Reset fields to normal intensity*/

  PB0B650(); /* Verify the entered data*/

  PB0B660(); /* Process valid input request*/


end // end PB0B600

// Obtain data to display
Function PB0B610()
   /* ------------------------------------------------------------*/
   /* Check Process Bypass indicators*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWBYP == "Y" /* Process bypass on*/
   || converseVar.validationMsgNum != 0) /* or Errors found*/

    return; /* Exit to next process*/

  end

  PB0BS81(); /* get QTY data*/

             /* (Store totals in map dtl arrays)*/
  PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDXM + 1; /* Next avail slot*/

  PB0BW04.SY5SZID[PB0BWDX2] = +99; /* Total dummy size*/
  PB0BW04.SY4IDDSC[PB0BWDX2] = "TOTAL"; /* Total heading*/
  PB0BW04.PB0BWRCQ[PB0BWDX2] = PB0BW03.PB0BWRCT; /* Total rcv*/
  PB0BW04.PB0BWPBQ[PB0BWDX2] = PB0BW03.PB0BWPBT; /* Total on-ord*/
  PB0BW04.PB0BWDFQ[PB0BWDX2] = PB0BW03.PB0BWDFT; /* Total diff*/



   /* ------------------------------------------------------------*/
   /* Set map display indicators.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDSP == 3 /* Map 3*/
   || PB0BW03.PB0BWDSP == 2) /* Map 2*/
       /* CONTINUE*/
  else
    PB0BW03.PB0BWDSP = 1; /* Set map display to page 1*/
  end

  PB0BW01.PB0BWBYP = "Y"; /* Request for data completed.*/
  PB0BW03.PB0BWFTI = " "; /* Set first time thru switch*/

  if (PB0BW03.PB0BWDXM <= 17) /* Max data fits on 1ST map page*/
    PB0BW03.PB0BWDSM = 1; /* Set max screen to display*/
  else
    if (PB0BW03.PB0BWDXM <= 35) /* Max data fits on 2ND map page*/
      PB0BW03.PB0BWDSM = 2; /* Set max screen to display*/
    else
      PB0BW03.PB0BWDSM = 3; /* Set max screen to display*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Set delete receipt flag to 'N'*/
   /* ------------------------------------------------------------*/

  PB0BW05.PB0BDEL = "N"; /* Set delete receipt flag to 'N'*/


end // end PB0B610

// Format and display the map
Function PB0B620()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* No error msg to display*/

    PB0B621(); /* Format map page from wk*/
    PB0B622(); /* Check User Change Authority*/

    if (converseVar.validationMsgNum == 0) /* No error msg to display*/
      if (PB0BW01.PB0BWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PB0BW01.PB0BWMNO);
      end /* Information msg no.*/
    end

    set PB0BM004.PB0BMADQ[1] cursor; /* Set cursor at map dtl area*/

  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    /* ET PB0BM004 ALARM;             /* Indicate sound alarm*/
    PB0BM004.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
  end


  PB0BM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


   /* -----------------------------------------------------------------*/
   /* Determine appropriate qty balance label*/
   /* -----------------------------------------------------------------*/

  if (PB0BW03.PB0BWOPO == 0) /* If PO number EQ zero*/
    if (PB0BW03.PB0BW-OCI == 0 /* If SO number EQ zero*/
     && PB0BW03.PB0BW-ONI == 0)
        /* let PO qty labels 1 and 2 default to defined value 'QTY BAL:'*/
    else /* If SO number NE zero*/
      PB0BM004.PB0BMPBH[1] = "SO QTY BAL:"; /* SO qty label 1*/
      PB0BM004.PB0BMPBH[2] = "SO QTY BAL:"; /* SO qty label 2*/
    end
  else /* If PO number NE zero*/
    PB0BM004.PB0BMPBH[1] = "PO QTY BAL:"; /* Qty label 1*/
    PB0BM004.PB0BMPBH[2] = "PO QTY BAL:"; /* Qty label 2*/
  end


  PB0BM004.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  PB0BM004.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  converse PB0BM004 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  PB0BW01.PB0BWMNO = 0; /* Reset information message number*/
  PB0BW01.PB0BWAPP = "PB0B"; /* App name*/

  COMMAREA.CATOAP = PB0BM004.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = PB0BM004.CAITEM; /* Fast path information*/


end // end PB0B620

// Format Map Data
Function PB0B621()
   /* ------------------------------------------------------------*/
                      /* Format Map Data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear map for new data to display*/
   /* ------------------------------------------------------------*/

  set PB0BM004 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format map header information from save fields*/
   /* ------------------------------------------------------------*/

  PB0BM004.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  PB0BM004.PB0BMRST = PB0BW02.PB0BWSTA[PB0BWSLX]; /* Rcpt status*/

              /* Reformat Date for Map*/

  PB0BW01.PB0BWDPW = PB0BW03.PB0BWRDT;
  PB0BW01.PB0BWDTY = PB0BW01.PB0BWDPY;
  PB0BW01.PB0BWDTM = PB0BW01.PB0BWDPM;
  PB0BW01.PB0BWDTD = PB0BW01.PB0BWDPD;
  PB0BM004.PB0BMRDT = PB0BW01.PB0BWDTW; /* Receipt date*/

               /* Original P.O. Data*/

  PB0BM004.PB0BMOPO = PB0BW03.PB0BWOPO; /* PO number*/
  PB0BM004.PB0BM-ORIG-SO-NBR = PB0BW03.PB0BW-ORIG-SO-NBR;
                                                    /* Orig so nbr*/
  if (PB0BM004.XGPCD == "03")
    PB0BM004.PB0BMOPY = PB0BW03.PB0BWOSE; /* PO prod yr*/
  else
    PB0BM004.PB0BMOPY = PB0BW03.PB0BWOPY; /* PO prod yr*/
  end
  PB0BM004.PB0BMOPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BM004.PB0BMODM = PB0BW03.PB0BWODM; /* PO delivery mth*/
  PB0BM004.PB0BMOFY = PB0BW03.PB0BWOFY; /* Factory*/
  PB0BM004.PB0BMOTY = PB0BW03.PB0BWOTY; /* PO type*/
  PB0BM004.XWHCD = PB0BW03.PB0BWOWH; /* Warehouse*/
  PB0BM004.PB0BMDIV = PB0BW03.PB0BWTDV; /* Division*/
  PB0BM004.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  PB0BM004.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  PB0BM004.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  PB0BM004.XSDCD = PB0BW03.PB0BWOSP; /* Spec*/

          /* Check if Apply-To Update to be done*/

  if (PB0BW03.PB0BWAPU == "N") /* Not Apply-to PO update*/

    set PB0BM004.PB0BMH01 skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMAPO skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMH02 skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMAPY skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMAPM skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMADM skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMAFY skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BM-H03 skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BMATY skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BM-H04 skip, invisible; /* Protect,darken map fld*/
    set PB0BM004.PB0BM-APPLY-SO-NBR skip, invisible; /* Protect,darken map fld*/

  else

                 /* Format Apply-To P.O. Keys*/

    PB0BM004.PB0BMAPO = PB0BW03.PB0BWAPO; /* PO number*/
    PB0BM004.PB0BM-APPLY-SO-NBR = PB0BW03.PB0BW-APPLY-SO-NBR;
    /* OVE PB0BM003.PB0BMAPO TO PB0BM004.PB0BMAPO;   /* PO number*/
    /* OVE PB0BM003.PB0BM-ACI TO PB0BW03.PB0BW-ACI;  /* Cust ord id*/
    /* OVE PB0BM003.PB0BM-ANI TO PB0BW03.PB0BW-ANI;/* Nike ord id*/
    /* OVE PB0BW03.PB0BW-APPLY-SO-NBR TO PB0BM004.PB0BM-APPLY-SO-NBR;*/
                                                 /* Apply so nbr*/
    if (PB0BM004.XGPCD == "03")
      PB0BM004.PB0BMAPY = PB0BW03.PB0BWASE; /* PO prod yr*/
    else
      PB0BM004.PB0BMAPY = PB0BW03.PB0BWAPY; /* PO prod yr*/
    end
    PB0BM004.PB0BMAPM = PB0BW03.PB0BWAPM; /* PO prod mth*/
    PB0BM004.PB0BMADM = PB0BW03.PB0BWADM; /* PO delivery mth*/
    PB0BM004.PB0BMAFY = PB0BW03.PB0BWAFY; /* Factory*/
    PB0BM004.PB0BMATY = PB0BW03.PB0BWATY; /* PO type*/

  end

   /* ------------------------------------------------------------*/
   /* Check the map page to display.*/
   /* Format the map detail data per map page requested.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDSP == 1) /* Map page 1 requested*/

    PB0BW03.PB0BWDX1 = 1; /* Set array start index*/
    if (PB0BW03.PB0BWDXM <= 8) /* To fit on 1st half of map*/
      set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
      set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
    end

  else
    if (PB0BW03.PB0BWDSP == 2) /* Map page 2 requested*/

      PB0BW03.PB0BWDX1 = 19; /* Set array start index*/
      if (PB0BW03.PB0BWDXM <= 26) /* To fit on 2nd half of map*/
        set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
      end

    else
      if (PB0BW03.PB0BWDSP == 3) /* Map page 3 requested*/

        PB0BW03.PB0BWDX1 = 37; /* Set array start index*/
        set PB0BM004.PB0BMSZH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMRCH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMPBH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMDFH[2] skip, invisible; /* Darken hdgs*/
        set PB0BM004.PB0BMADH[2] skip, invisible; /* Darken hdgs*/
      end
    end
  end


  PB0BW03.PB0BWDX2 = 1; /* Set map start index*/

  while (PB0BW03.PB0BWDX2 <= 18) /* Process all map sizes*/

    if (PB0BW03.PB0BWDX1 <= 41) /* Process all array sizes*/

      if (PB0BW04.SY5SZID[PB0BWDX1] == 0) /* Empty array bucket*/

        set PB0BM004.SY5SZID[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMRCQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMPBQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMDFQ[PB0BWDX2] skip, invisible;
        set PB0BM004.PB0BMADQ[PB0BWDX2] skip, invisible;

      else

        PB0BM004.SY5SZID[PB0BWDX2] = PB0BW04.SY4IDDSC[PB0BWDX1];
        PB0BM004.PB0BMRCQ[PB0BWDX2] = PB0BW04.PB0BWRCQ[PB0BWDX1];
        PB0BM004.PB0BMPBQ[PB0BWDX2] = PB0BW04.PB0BWPBQ[PB0BWDX1];
        PB0BM004.PB0BMDFQ[PB0BWDX2] = PB0BW04.PB0BWDFQ[PB0BWDX1];
        PB0BM004.PB0BMADQ[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];

        if (PB0BW04.SY5SZID[PB0BWDX1] == 99 /* Total line*/
         || PB0BW01.PB0BWUPD == "N")        /* No user change authority*/
          set PB0BM004.PB0BMADQ[PB0BWDX2] skip; /* Protect adj tot*/
        end

      end

    else

      set PB0BM004.SY5SZID[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMRCQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMPBQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMDFQ[PB0BWDX2] skip, invisible;
      set PB0BM004.PB0BMADQ[PB0BWDX2] skip, invisible;

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Get next array elem*/
    PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Set screen prompts, set max display page*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDXM <= 18) /* One page for display*/

    set PB0BM004.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
    set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/

  else /* More than one page for display*/

    if (PB0BW03.PB0BWDSP == 1) /* Page one displayed*/
      set PB0BM004.PB0BMP07 skip, invisible; /* Darken PF7 prompt*/
      set PB0BM004.PB0BMP08 skip; /* Show PF8 prompt*/
    else
      if (PB0BW03.PB0BWDSM == 2 /* Max pages = 2*/
       && PB0BW03.PB0BWDSP == 2) /* Page two displayed*/
        set PB0BM004.PB0BMP07 skip; /* Show PF7 prompt*/
        set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
      else
        if (PB0BW03.PB0BWDSP == 3) /* Page three displayed*/
          set PB0BM004.PB0BMP07 skip; /* Show PF7 prompt*/
          set PB0BM004.PB0BMP08 skip, invisible; /* Darken PF8 prompt*/
        end
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* DARKEN PF KEY OPTIONS for unavailable functions*/
   /* ------------------------------------------------------------*/

  set PB0BM004.PB0BMP09 skip, invisible; /* PF9 Accept Add not available*/

  if (PB0BW03.PB0BWAPU == "N") /* Not Apply-to update mode*/
    set PB0BM004.PB0BMP15 skip, invisible; /* PF15 Adjust all not available*/
  else /* Apply-to update mode*/
    set PB0BM004.PB0BMP12 skip, invisible; /* PF12 Accept Overage not avail*/
  end


end // end PB0B621

// Check User Change Authority
Function PB0B622()
   /* ------------------------------------------------------------*/
          /* Check user change authority*/
          /* for item detail inq/chg - function #6*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWUPD == "N") /* Changes not authorized*/

                  /* Set Map Type to 'Inquire'*/

    PB0BM004.PB0BMTYP = "INQUIRY"; /* Indicate map type*/

                       /* Darken PF12*/

    set PB0BM004.PB0BMP12 skip, invisible; /* No PF12 acpt ovrg*/

  else /* Changes are authorized*/

                 /* Set Map Type to 'Change'*/

    PB0BM004.PB0BMTYP = "CHANGE"; /* Indicate map type*/

  end

end // end PB0B622

// Check attention identifier
Function PB0B630()

   /* ------------------------------------------------------------*/
                 /* Check Attention Identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh PB0BM004 request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 refresh screen request*/
    converseLib.clearScreen();
     /* Refresh screen*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PB0BM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0BS0C(); /* Purge any TSQ records*/

      COMMAREA.CAUSERA = " "; /* Init commarea*/
      PCWREC.CAUSERA = " "; /* Clear pcwrec*/
      COMMAREA.CATOAP = PB0BM004.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PB0BM004.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PB0BW01.PB0BWPRC = "630"; /* Process name*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0BW01.PB0BWPRC = "630"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 - help screen request*/
   /* PF4 - mstr menu request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 help request*/
   || converseVar.eventKey is pf4) /* PF4 mstr menu request*/

    if (converseVar.eventKey is pf1) /* PF1 help request*/
      COMMAREA.CAITEM = "PB0BM004"; /* Map name*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PB0BS0C(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PB0BW01.PB0BWPRC = "630"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF3 exit to item header request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 exit to itm hdr inq/chg*/
    PB0BW01.PB0BWFUN = "4"; /* Function #4 - itm hdr inq/chg*/
    PB0BW01.PB0BWBYP = "Y"; /* Do not display initial screen*/
    PB0BW03.PB0BWFTI = "N"; /* Set first time thru to no*/
    PB0BW03.PB0BWPND = "N"; /* Indicate no apply-to pending*/
    PB0BW03.PB0BWDSP = "1"; /* Set map display to page 1*/
    converseLib.validationFailed(0); /* Clear error message field*/
    PB0BW01.PB0BWMNO = 0; /* Clear info message field*/
    PB0BW03.PB0BWMNO = 0; /* Clear info message field*/
    exit stack; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* not ENTER accept*/
   && converseVar.eventKey not pf3   /* and not PF3 exit*/
   && converseVar.eventKey not pf7   /* and not PF7 scroll backward*/
   && converseVar.eventKey not pf8   /* and not PF8 scroll forward*/
   && converseVar.eventKey not pf12  /* and not PF12 acpt ovrg*/
   && converseVar.eventKey not pf15) /* and not PF15adj all*/

    PB0BW01.PB0BWPRC = "630"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf12) /* PF12 acpt ovrg*/
    if (PB0BW01.PB0BWUPD == "N") /* No user change authority*/
      PB0BW01.PB0BWPRC = "630"; /* This module nbr*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
    if (PB0BW03.PB0BWAPU == "Y") /* Apply-to update*/
      PB0BW01.PB0BWPRC = "630"; /* This module nbr*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end


  if (converseVar.eventKey is pf15) /* PF15 adj all*/
    if (PB0BW03.PB0BWAPU == "N") /* Not apply-to update*/
      PB0BW01.PB0BWPRC = "630"; /* This module nbr*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end



end // end PB0B630

// Reset hlghtd flds/disp pop-ups
Function PB0B640()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PB0BM004.XXXPRCNM = "PB0B    "; /* Reset process name*/

  set PB0BM004.CATOAP initialAttributes; /* Commarea To application*/
  set PB0BM004.CAITEM initialAttributes; /* Commarea application data*/


end // end PB0B640

// Verify the entered data
Function PB0B650()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (PB0BM004.CAITEM > " ") /* Application data was entered*/

    set PB0BM004.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0BW01.PB0BWPRC = "650"; /* Process name*/

    return; /* exit redisplay map*/

  end


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0B651(); /* Verify scroll request*/

  else

    if (PB0BW02.PB0BWFL11 == "Y")
      converseLib.validationFailed(565);
      PB0BW02.PB0BWFL11 = "N";
      return;
    end

    PB0B652(); /* Edit entered data*/

    if (converseVar.validationMsgNum == 0 /* No edit errors found*/
     && PB0BW03.PB0BWUPD == "Y")          /* and With valid updates*/

      PB0BS79(); /* Obtain Tolerance limits*/

      if (converseVar.validationMsgNum == 0)

        PB0BW03.PB0BWXRE = " "; /* Reset orig exception code*/
        PB0BW03.PB0BWXRA = " "; /* Reset apply-to exception code*/

        if (PB0BW03.PB0BWAPU == "Y") /* Apply-to update is in progress*/

          /* ---------------------------------------------------------*/
          /* Check orig rcpt tolerances if PO or SO qtys available*/
          /* ---------------------------------------------------------*/

          if (PB0BW03.PB0BWOPO == 0) /* If PO EQ zero*/
            if (PB0BW03.PB0BW-OCI == 0 /* If SO cust ord id EQ zero*/
             || PB0BW03.PB0BW-ONI == 0) /* or SO Nike ord id EQ zero*/
                /* Don't check tolerance*/
            else /* Both SO cust ord id and Nike ord id NE zero*/
              PB0B653(); /* Check tolerance for orig receipt*/
            end
          else /* PO NE zero*/
            PB0B653(); /* Check tolerance for orig receipt*/
          end

          /* ----------------------------------------------------------*/
          /* Check apply-to rcpt tolerances if PO or SO qtys available*/
          /* ----------------------------------------------------------*/

          if (PB0BW03.PB0BWAPO == 0) /* If PO EQ zero*/
            if (PB0BW03.PB0BW-ACI == 0 /* If SO cust ord id EQ zero*/
             || PB0BW03.PB0BW-ANI == 0) /* or SO Nike ord id EQ zero*/
                /* Don't check tolerance*/
            else /* Both SO cust ord id and Nike ord id NE zero*/
              PB0B654(); /* Check tolerance for apply-to receipt*/
            end
          else /* PO NE zero*/
            PB0B654(); /* Check tolerance for apply-to receipt*/
          end

        else /* Apply-to update is not in progress*/

          /* -----------------------------------------------------------*/
          /* Check orig rcpt tolerances if PO or SO qtys available*/
          /* -----------------------------------------------------------*/

          if (PB0BW03.PB0BWOPO == 0) /* If PO EQ zero*/
            if (PB0BW03.PB0BW-OCI == 0 /* If SO cust ord id EQ zero*/
             || PB0BW03.PB0BW-ONI == 0) /* or SO Nike ord id EQ zero*/
                /* Don't check tolerance*/
            else /* Both SO cust ord id and Nike ord id NE zero*/
              PB0B554(); /* Check tolerance for orig receipt*/
            end
          else /* PO NE zero*/
            PB0B554(); /* Check tolerance for orig receipt*/
          end

        end


        /* -----------------------------------------------------------*/
        /* Process results of tolerance checks*/
        /* -----------------------------------------------------------*/

        if (PB0BW03.PB0BWXRE == "OH" /* Overshipment - Hard - orig*/
         || PB0BW03.PB0BWXRA == "OH") /* Overshipment - Hard - apply*/

          if (PB0BW03.PB0BWFTI != "N") /* if first time thru*/
            if (PB0BW03.PB0BWXRE == "OH") /* Overshipment - Hard - orig*/
              if (PB0BW03.PB0BWOPO != 0) /* PO available - orig*/
                PB0BW01.PB0BWMNO = 350; /* Tol exceeded orig PO*/
              else /* SO available - orig*/
                PB0BW01.PB0BWMNO = 445; /* Tol exceeded orig SO*/
              end
            end

            if (PB0BW03.PB0BWXRA == "OH") /* Overshipment - Hard - apply-to*/
              if (PB0BW03.PB0BWAPO != 0) /* PO available - apply-to*/
                PB0BW01.PB0BWMNO = 351; /* Tol exceeded apply-to PO*/
              else /* SO available - apply-to*/
                PB0BW01.PB0BWMNO = 446; /* Tol exceeded apply-to SO*/
              end
            end

            if (PB0BW03.PB0BWXRE == "OH" /* Overshipment - Hard - orig*/
             && PB0BW03.PB0BWXRA == "OH") /* Overshipment - Hard - apply*/

              if (PB0BW03.PB0BWOPO != 0 /* PO available - orig*/
               && PB0BW03.PB0BWAPO != 0) /* PO available - apply-to*/
                PB0BW01.PB0BWMNO = 398; /* Tol exc orig & apply PO*/
              else
                if (PB0BW03.PB0BWOPO == 0 /* SO available - orig*/
                 && PB0BW03.PB0BWAPO == 0) /* SO available - apply-to*/
                  PB0BW01.PB0BWMNO = 447; /* Tol exc orig & apply SO*/
                else
                  PB0BW01.PB0BWMNO = 448; /* Tol exc orig & apply*/
                end
              end

            end

            PB0BW03.PB0BWPND = "Y"; /* Indicate pending act*/
            PB0BW03.PB0BWFTI = "N"; /* set first time thru to no*/
            PB0BW01.PB0BWBYP = "Y"; /* Do not obtain initial data*/
            PB0BW01.PB0BWPRC = "650"; /* Process number*/
          else
            PB0BW03.PB0BWPND = "N"; /* Indicate pending act*/
            PB0BW03.PB0BWFTI = " "; /* set first time thru to no*/
          end
        else
          PB0BW03.PB0BWPND = "N"; /* Reset prev actvty ind*/
        end
      end
    end
  end


end // end PB0B650

// Verify scroll request
Function PB0B651()

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  PB0BW03.PB0BWDX1 = 1; /* Initialize line index*/

  if (PB0BW03.PB0BWDSP == 1) /* Map 1 displayed*/
    PB0BW03.PB0BWDX2 = 1; /* Set array start index (1st map)*/
  else
    if (PB0BW03.PB0BWDSP == 2) /* Map 2 displayed*/
      PB0BW03.PB0BWDX2 = 18; /* Set array start index (2nd map)*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Map 3 displayed*/
        PB0BW03.PB0BWDX2 = 36; /* Set array start index (3rd map)*/
      end
    end
  end


  while (PB0BW03.PB0BWDX1 <= 18) /* Until end of lines*/

    if (PB0BW04.SY5SZID[PB0BWDX2] > 0) /* Valid line*/

      if (PB0BW04.PB0BWADQ[PB0BWDX2] != PB0BM004.PB0BMADQ[PB0BWDX1])
        set PB0BM004.PB0BMADQ[PB0BWDX1] cursor, bold; /* Highlight*/
        PB0BW01.PB0BWPRC = "651"; /* Process name*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
    PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Get next array elem*/

    if (PB0BW03.PB0BWDX2 > 41) /* All sizes processed*/
      PB0BW03.PB0BWDX1 = +999; /* Terminate loop*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0BW03.PB0BWDSP == 1       /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0BW01.PB0BWPRC = "651"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PB0BW03.PB0BWDSM == 1 /* Max pages = 1*/
     && converseVar.validationMsgNum == 0) /* and no errors*/
      PB0BW01.PB0BWPRC = "651"; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      if (PB0BW03.PB0BWDSM == 2 /* Max pages = 2*/
       && PB0BW03.PB0BWDSP == 2 /* Current page = 2*/
       && converseVar.validationMsgNum == 0) /* and no errors*/
        PB0BW01.PB0BWPRC = "651"; /* Process name*/
        converseLib.validationFailed(3); /* No more pages to display*/
      else
        if (PB0BW03.PB0BWDSM == 3 /* Max pages = 3*/
         && PB0BW03.PB0BWDSP == 3 /* Current page = 3*/
         && converseVar.validationMsgNum == 0) /* and no errors*/
          PB0BW01.PB0BWPRC = "651"; /* Process name*/
          converseLib.validationFailed(3); /* No more pages to display*/
        end
      end
    end
  end

end // end PB0B651

// Validate Map Fields
Function PB0B652()
   /* *************************************************************/
   /* *****  E D I T   E N T E R E D  A D J U S T M E N T S  ******/
   /* *************************************************************/


  if (PB0BW03.PB0BWPND == "Y" /* Pending update activity-Orig*/
   || PB0BW05.PB0BWPND == "Y") /* Pending update activity-Apply PO*/
            /* (Next Sentence)*/
  else
    PB0BW03.PB0BWUPD = "N"; /* Reset update indicator off*/
  end


   /* *==========================================**/
   /* * Re-load adjustments array with new data  **/
   /* *==========================================**/

  if (PB0BW03.PB0BWDSP == 1) /* Map page 1 requested*/
    PB0BW03.PB0BWDX1 = 1; /* Set array start index*/
  else
    if (PB0BW03.PB0BWDSP == 2) /* Map page 2 requested*/
      PB0BW03.PB0BWDX1 = 19; /* Set array start index*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Map page 3 requested*/
        PB0BW03.PB0BWDX1 = 37; /* Set array start index*/
      end
    end
  end


  PB0BW03.PB0BWDX2 = 1; /* Set map start index*/

  while (PB0BW03.PB0BWDX2 <= 18) /* Process all map sizes*/

    if (PB0BW03.PB0BWDX1 <= 41) /* Process all array sizes*/

      if (PB0BW04.SY5SZID[PB0BWDX1] == 0 /* Empty bucket*/
       || PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Totals bucket*/

          /* (next sentence)*/

      else

        if (PB0BW04.PB0BWADQ[PB0BWDX1] != PB0BM004.PB0BMADQ[PB0BWDX2])

          if (PB0BW03.PB0BWAPU == "Y") /* Apply-to-PO update*/

            if (PB0BM004.PB0BMADQ[PB0BWDX2] > 0 /* Positive adjustment*/
             && PB0BM004.PB0BMADQ[PB0BWDX2] <= PB0BW04.PB0BWRCQ[PB0BWDX1])

              PB0BW03.PB0BWPND = "N"; /* Reset Pending actvty ind*/
              PB0BW03.PB0BWUPD = "Y"; /* Updates present*/
              PB0BW04.PB0BWADQ[PB0BWDX1] = PB0BM004.PB0BMADQ[PB0BWDX2]; /* Move adj*/

            else

              set PB0BM004.PB0BMADQ[PB0BWDX2] cursor, bold; /* Hilight*/
              PB0BW01.PB0BWPRC = "652"; /* Process name*/
              converseLib.validationFailed(348); /* Indicate invalid qty*/
              PB0BW03.PB0BWPND = "N"; /* Reset Pending actvty ind*/
              PB0BW03.PB0BWUPD = "N"; /* No Updates present*/

            end

          else /* Not apply to*/

            PB0BWTOT = PB0BM004.PB0BMADQ[PB0BWDX2] + PB0BW04.PB0BWRCQ[PB0BWDX1];

            if (PB0BM004.PB0BMADQ[PB0BWDX2] != 0) /* Non-zero adj*/

              if (PB0BW03.PB0BWTOT > 99999 /* Invalid*/
               || PB0BW03.PB0BWTOT < -99999) /* Invalid*/

                set PB0BM004.PB0BMADQ[PB0BWDX2] cursor, bold; /* Hilight*/
                PB0BW01.PB0BWPRC = "652"; /* Process name*/
                converseLib.validationFailed(428); /* Indicate invalid qty*/
                PB0BW03.PB0BWPND = "N"; /* Reset Pending actvty ind*/
                PB0BW03.PB0BWUPD = "N"; /* No Updates present*/

              else /* Not invalid*/

                PB0BW03.PB0BWPND = "N"; /* Reset Pending actvty ind*/
                PB0BW03.PB0BWUPD = "Y"; /* Updates present*/
                PB0BW04.PB0BWADQ[PB0BWDX1] = PB0BM004.PB0BMADQ[PB0BWDX2]; /* Move adj*/
              end

            else /* Zero adj*/

              PB0BW04.PB0BWADQ[PB0BWDX1] = 0; /* Move 0 to adj*/

            end

          end

        end

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Get next array elem*/
    PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDX2 + 1; /* Loop through*/

  end


   /* *===============================**/
   /* *  Recompute Adjustment totals  **/
   /* *===============================**/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  PB0BW03.PB0BWADT = 0; /* Initialize adjustment totals*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process valid sizes*/

    PB0BW03.PB0BWADT = PB0BW03.PB0BWADT + PB0BW04.PB0BWADQ[PB0BWDX1];

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

             /* (Store totals in map dtl array)*/
  PB0BW03.PB0BWDX2 = PB0BW03.PB0BWDXM + 1; /* Totals slot*/
  PB0BW04.PB0BWADQ[PB0BWDX2] = PB0BW03.PB0BWADT; /* Total adj*/



end // end PB0B652

// Chk Maint Tol for applyto proc
Function PB0B653()
   /* check maint tolerance for apply to process*/

   /* ------------------------------------------------------------*/
   /* Initialize tolerance check primary work areas.*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW04.PB0BWRCD[1] for all; /* Clear Dummy Received array*/
  move 0 to PB0BW04.PB0BWRDP[1] for all; /* Clear Dummy Pcent Bal-to-Rcv*/
  move 0 to PB0BW04.PB0BWDFW[1] for all; /* Clear Dummy Bal-to-Rcv array*/

  PB0BW03.PB0BWDFD = 0; /* Initialize Tot Dummy Bal-to-Rcv*/
  PB0BW03.PB0BWXRE = " "; /* Initialize Exception cd wk*/
  PB0BW03.PB0BWTLC = "N"; /* Initialize Tol Confirm flag*/

   /* ------------------------------------------------------------*/
   /* Calculate the dummy received qtys. (Old Rcvd - New Adjust)*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    PB0BW03.PB0BWQT1 = PB0BW04.PB0BWRCQ[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk 2*/
    PB0BW04.PB0BWRCD[PB0BWDX1] = PB0BW03.PB0BWQT1 - PB0BW03.PB0BWQT2;

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BS83(); /* Check Tolerance Routine*/



end // end PB0B653

// Check Tolerances
Function PB0B654()

   /* ===========================================================*/
   /* Obtain Apply to PO QTY Data for Tolerance Checking*/
   /* ===========================================================*/

  PB0BS93(); /* Get APPLY-TO PO data*/

   /* ===========================================================*/
   /* Check Tolerances.*/
   /* ===========================================================*/

   /* ------------------------------------------------------------*/
   /* Initialize tolerance check primary work areas.*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW05.PB0BWRCD[1] for all; /* Clear Dummy Received array*/
  move 0 to PB0BW05.PB0BWRDP[1] for all; /* Clear Dummy Pcent Bal-to-Rcv*/
  move 0 to PB0BW05.PB0BWDFW[1] for all; /* Clear Dummy Bal-to-Rcv array*/

  PB0BW03.PB0BWDFD = 0; /* Initialize Tot Dummy Bal-to-Rcv*/
  PB0BW03.PB0BWXRA = " "; /* Initialize Exception cd wk*/
  PB0BW03.PB0BWTLC = "N"; /* Initialize Tol Confirm flag*/



   /* ------------------------------------------------------------*/
   /* Calculate the dummy received qtys ===> Old Rcvd.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    if (PB0BW05.SY5SZID[PB0BWDX1] == 99)
            /* (Bypass array element)*/
    else
      if (PB0BW05.SY5SZID[PB0BWDX1] > 0)
        PB0BW03.PB0BWDX2 = PB0BW05.SY5SZID[PB0BWDX1];
        PB0BW03.PB0BWQT1 = PB0BW05.PB0BWRCQ[PB0BWDX1];
        if (converseVar.eventKey is pf15) /* IF pf15 pressed*/
          PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADA[PB0BWDX2];
        else
          PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1];
        end
        PB0BW05.PB0BWRCD[PB0BWDX1] = PB0BW03.PB0BWQT1 + PB0BW03.PB0BWQT2;
      end
    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BS97(); /* Check APPLY-TO Tolerance*/


end // end PB0B654

// Process valid input request
Function PB0B660()

   /* ------------------------------------------------------------*/
   /* Check for previous errors found/pending activity present.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error message set up*/
   || PB0BW03.PB0BWPND == "Y")          /* Pending activity*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust map page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    if (PB0BW03.PB0BWDSP == 2) /* Page nbr = 2*/
      PB0BW03.PB0BWDSP = 1; /* Decrement page number*/
      return; /* Return to calling process*/
    else
      if (PB0BW03.PB0BWDSP == 3) /* Page nbr = 3*/
        PB0BW03.PB0BWDSP = 2; /* Decrement page number*/
        return; /* Return to calling process*/
      end
    end
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    if (PB0BW03.PB0BWDSP == 1) /* Page nbr = 1*/
      PB0BW03.PB0BWDSP = 2; /* Increment page number*/
      return; /* Return to calling process*/
    else
      if (PB0BW03.PB0BWDSP == 2) /* Page nbr = 2*/
        PB0BW03.PB0BWDSP = 3; /* Increment page number*/
        return; /* Return to calling process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Update function has been requested.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter /* Enter was pressed*/
   || converseVar.eventKey is pf12) /* PF12 was pressed*/


    /* ------------------------------------------------------------*/
     /* Valid updates present - Either Maintenance or Apply to mode*/
    /* ------------------------------------------------------------*/
    if (PB0BW03.PB0BWUPD == "Y") /* Valid updates present*/

      /* ------------------------------------------------------------*/
       /* MAINTENANCE MODE*/
      /* ------------------------------------------------------------*/
      if (PB0BW03.PB0BWAPU == "N") /* Maintenance indicated*/

        PB0B66J(); /* Maintenance mode*/

        /* ------------------------------------------------------------*/
         /* APPLY TO MODE*/
        /* ------------------------------------------------------------*/
      else

        PB0B66K(); /* Apply to mode*/

      end /* Maintenance or Apply to mode end*/

      /* ------------------------------------------------------------*/
       /* PF12 ACCEPT OVERAGE*/
      /* ------------------------------------------------------------*/
    else

      if (converseVar.eventKey is pf12) /* Accept Overage*/

        PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/
        PB0B664(); /* Update DPRODC.VFYPO001 row(+)*/

        if (PB0BW05.PB0BDEL == "Y")
          PB0B66I(); /* Delete receipt/PF15 Adjust all*/
        else

          if (PB0BW03.PB0BWAAI == "N") /* If orig stat eq '10'*/
             /* continue on*/
          else
            if (PB0BW03.PB0BWOSC == "I"
             || PB0BW03.PB0BWOSC == "U"
             || PB0BW03.PB0BWOSC == "B")
              PB0B66C(); /* Upd/Add ORIG to ALTERNATE INVENTORY*/
            end
          end

          /* ---------------------------------------------------*/
                    /* PF12 Accept Overage Receipt Wrapup*/
          /* ---------------------------------------------------*/

          if (converseVar.validationMsgNum == 0) /* Successful update done*/
            PB0BW01.PB0BWPRC = "660"; /* Process name*/
            PB0BW01.PB0BWMNO = 377; /* Indicate upd message*/
            PB0BW01.PB0BWBYP = "N"; /* Display updated data*/
            PB0BW01.PB0BWSWR = "Y"; /* Request for new data = 'Y'*/
            return; /* Exit to display map*/
          end /* Successful update done END*/
        end /* Delete receipt flag check END*/

      else

        /* ------------------------------------------------------------*/
         /* EZEAID = ENTER (No updates made)*/
        /* ------------------------------------------------------------*/

        /* ---------------------------------------------------*/
                          /* Original Receipts*/
        /* ---------------------------------------------------*/

        if (PB0BW05.PB0BDEL == "N") /* Check that receipt exists*/
          PB0B66H(); /* Check for zeroed quantities*/
          if (PB0BW05.PB0BDEL == "Y") /* Delete receipt = 'Y'*/
            PB0B66I(); /* Delete receipt/PF15 Adjust all*/
          end /* Delete receipt flag check END*/
        end /* Delete receipt flag check END*/

      end /* Accept overage - Ezeaid PF12 END*/

    end /* Valid updates present or not END*/

  end /* Ezeaid enter or PF12 END*/


   /* ------------------------------------------------------------*/
   /* PF15 ADJUST ALL*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/

    PB0B66L(); /* PF15 Adjust All*/

  end


end // end PB0B660

// Add APPL to ALT INVENTORY
Function PB0B661()
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* interim product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I") /* interim product*/
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* dest to xref*/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A" /* active*/
       && PC2REC.YPCCD == "S")  /* screener*/
        /* continue                            not a screener fcty*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end

   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWAWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWAST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWACL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWADI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWAQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWASP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B661"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    if (PB0BW05.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW05.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW05.SY5SZID[PB0BWDX1]; /* To wk*/
        AVLREC.AVLADJQT[PB0BWDX2] = PB0BW05.PB0BWRCD[PB0BWDX1];
      end
    end
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end

  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "661"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B661

// Upd DPRODC.VFYPO002 Row -Apply
Function PB0B662()

   /* ------------------------------------------------------------*/
   /* Update DPRODC.VFYPO002 row (Apply-To-PO mode).*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* * Update(APPLY) PO Quantity Data   **/
   /* *==================================**/

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/


        /* (Set Status, Exception cd, Set-Aside Flag)*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    PB0BS99(); /* set apply to status*/

  end



   /* *=====================================================**/
   /* * SPECIAL OVERRIDE IF PF12 (Accept Overage) REQUESTED **/
   /* *=====================================================**/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    if (VFYPO002.YRSCD == "12") /* Orig Stat error*/

      VFYPO002.YRSCD = "10"; /* Assigned status*/
      VFYPO002.XRECD = " "; /* Assigned xrecd*/
      VFYPO002.PCMRLSFL = "R"; /* Release from setaside*/

    else

      VFYPO002.YRSCD = "10"; /* Assigned status*/
      VFYPO002.XRECD = " "; /* Assigned xrecd*/
      VFYPO002.PCMRLSFL = "N"; /* Setaside N/A*/

    end

  end


           /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else

      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/

        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        PB0BW03.PB0BWQT1 = VFYPO002.PCMRCPTQ[PB0BWDX2]; /* To wk*/
        PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW03.PB0BWQT1 + PB0BW03.PB0BWQT2;

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Update the row in PO Receipts Table.*/
   /* ------------------------------------------------------------*/

  PB0BS89(); /* update FYPO*/

end // end PB0B662

// Upd APPL to ALT INVENTORY
Function PB0B663()
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* uncrest product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I") /* interim product*/
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* dest to xref*/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A" /* not active*/
       && PC2REC.YPCCD == "S")  /* Normal return code*/
        /* continue   /* adjust alt inv*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWAWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWAST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWACL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWADI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWAQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWASP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B663"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        if (PB0BW03.PB0BWAAI == "Y") /* If add to alt inv indicated*/
          AVLREC.AVLADJQT[PB0BWDX2] = VFYPO002.PCMRCPTQ[PB0BWDX2];
        else
          AVLREC.AVLADJQT[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];
        end
      end
    end
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end


  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "663"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B663

// Upd DPRODC.VFYPO002 Row-(PF12)
Function PB0B664()


   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row for Accept Overage - PF12*/
   /* ------------------------------------------------------------*/


  PB0BS77(); /* Select Unique DPRODC.VFYPO002*/

  if (VFYPO002.YRSCD == "13" /* If a bad status code*/
   || VFYPO002.YRSCD == "12" 
   || VFYPO002.YRSCD == "11")
    PB0BW03.PB0BWAAI = "Y"; /* Set add alternate inv to yes*/
  end

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/


   /* *===================================================**/
   /* * Change Status, Except Cd and Rlse Flag of Product **/
   /* *===================================================**/

  if (VFYPO002.YRSCD == "12") /* Orig stat error*/
    VFYPO002.PCMRLSFL = "R"; /* Release from setaside*/
  else
    VFYPO002.PCMRLSFL = "N"; /* Setaside N/A*/
  end

  VFYPO002.YRSCD = "10"; /* Assign status*/
  VFYPO002.XRECD = " "; /* Assign exception code*/

  PB0BW03.PB0BWRST = VFYPO002.YRSCD; /* Save status*/
  PB0BW03.PB0BWXRE = VFYPO002.XRECD; /* Save exception code*/

  PB0B66H(); /* Check for zeroed quantities*/

  if (PB0BW05.PB0BDEL == "N") /* Delete receipt flag = 'N'*/
    PB0BS89(); /* Update the receipt table*/
  else /* Continue on*/
  end

end // end PB0B664

// Delete orig po from VFYPO002
Function PB0B665()

   /* ------------------------------------------------------------*/
    /* Delete fypo row*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("D3", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    PB0BW02.PB0BWXREC-STORE = VFYPO002.XRECD;
    PB0BW02.PB0BWEXC[PB0BWSLX] = PB0BW02.PB0BWXREC-STORE;
    return;
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user*/
      converseLib.validationFailed(12); /* Indicate not available*/
      PB0BW01.PB0BWBYP = "N"; /* reselect same data*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* reset screen before redisplay*/
      end
    end
  end

  PC5REC.XXXPRCNM = "PB0B665"; /* Process name*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0B665"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE FYPO             ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* ********************** End of pb0b665 ***********************/


end // end PB0B665

// PF15 upd ORIG to ALT INVENTORY
Function PB0B666()
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY if necessary*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* uncrest product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I") /* interim product*/
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* fcty to xref*/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A"
       && PC2REC.YPCCD == "S") /* screener*/
        /* continue*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B666"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    AVLREC.AVLADJQT[PB0BWDX1] = PB0BW04.PB0BWADA[PB0BWDX1];
    AVLREC.AVLADJQT[PB0BWDX1] = AVLREC.AVLADJQT[PB0BWDX1] * -1;
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end

  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "666"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B666

// Sel Unq VFYPO002 Row -Apply PO
Function PB0B667()

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row.*/
   /* ------------------------------------------------------------*/


   /* *=======================**/
   /* * Build DB Access Keys  **/
   /* *=======================**/


  set VFYPO002 empty; /* clear wk record*/

                /* (Build Access Keys)*/
  VFYPO002.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWA-PO-REG-CD; /* po region*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWAPO; /* po number*/

   /* ---------------------- y2k out -------------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* PO prod century*/
   /* ---------------------- y2k out -------------------------*/
   /* ---------------------- y2k in --------------------------*/
  if (PB0BW03.PB0BWAPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019; /* PO prod century*/
  else
    PB0BW01.PB0BWDPC = 020; /* PO prod century*/
  end
   /* ---------------------- y2k in --------------------------*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWAPY; /* PO prod year*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWAPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWADM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWASE; /* PO season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWAFY; /* po id factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWATY; /* po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWAST; /* style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWACL; /* color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWADI; /* dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWAQU; /* quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWASP; /* Spec cd*/
  VFYPO002.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWAUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW03.YMTCD; /* Mode transport cd*/
  VFYPO002.XWHCD = PB0BW03.PB0BWAWH; /* warehouse*/
  VFYPO002.PC2CUXID = PB0BW03.PB0BW-ACXREF; /* CXREF*/
  VFYPO002.SL1RCRNO = PB0BW03.PB0BWRRN; /* receiving rpt no.*/
  VFYPO002.TSHRCTDT = PB0BW03.PB0BWRDT; /* receiving dt*/
  VFYPO002.TSHCNTNR = PB0BW03.PB0BWCTR; /* container id*/


  if (PB0BW03.PB0BW-ACI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
    PC5REC.OP1PARTN = " "; /* ord part char*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
    PC5REC.OP1CUOID = 0; /* cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-APC; /* ord part char*/
    PC5REC.OP1PARTN = PB0BW03.PB0BW-APC; /* ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-ACI; /* cust ord id*/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-ACI; /* cust ord id*/
  end

  if (PB0BW03.PB0BW-ANI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
    PC5REC.OP1NORID = 0; /* nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ANI; /* nike ord id*/
    PC5REC.OP1NORID = PB0BW03.PB0BW-ANI; /* nike ord id*/
  end



   /* ------------------------------------------------------------*/
   /* Access DPRODC.VFYPO002 (Select Unique).*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("SB", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Upd row*/



   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to calling process*/

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "667"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "SELECT PO RCPTS ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination func*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end PB0B667

// Upd DPRODC.VFYPO002 Row -Apply
Function PB0B668()
   /* ------------------------------------------------------------*/
   /* Update DPRODC.VFYPO002 row (Apply-To-PO mode).*/
   /* ------------------------------------------------------------*/

   /* *==================================**/
   /* * Update(APPLY) PO Quantity Data   **/
   /* *==================================**/

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* yrs status date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* yrs status time*/


     /* Set Status of Apply To Row*/

  PB0BS99(); /* set Apply To Row*/

           /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW05.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else

      if (PB0BW05.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/

        PB0BW03.PB0BWDX2 = PB0BW05.SY5SZID[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW05.PB0BWRCD[PB0BWDX1];

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Update the row in PO Receipts Table.*/
   /* ------------------------------------------------------------*/

  PB0BS89(); /* update FYPO*/


end // end PB0B668

// PF15 Upd/Add APPL to ALT INV
Function PB0B669()
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* uncrest product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I") /* interim product*/
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* dest to xref*/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A" /* active*/
       && PC2REC.YPCCD == "S")  /* screener*/
        /* continue        adjust alt inv*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWAWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWAST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWACL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWADI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWAQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWASP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B669"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    AVLREC.AVLADJQT[PB0BWDX1] = PB0BW04.PB0BWADA[PB0BWDX1];
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end

  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "669"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B669

// Upd DPRODC.VFYPO002 Row +Maint
Function PB0B66A()
   /* ------------------------------------------------------------*/
   /* Update original fypo row during Maintenance mode.*/
   /* Add to original receipt quantities.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row*/
   /* ------------------------------------------------------------*/


  if (PB0BW02.PB0BWFL12 != "Y")
    PB0BS101(); /* Check for duplicate row with*/
  end
                                 /* exception code*/
  PB0BS77(); /* Select Unique DPRODC.VFYPO002*/

  if (VFYPO002.YRSCD == "13" /* If a bad status code*/
   || VFYPO002.YRSCD == "12" 
   || VFYPO002.YRSCD == "11")
    PB0BW03.PB0BWAAI = "Y"; /* Set add alternate inv to yes*/
  end
                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* yrs status date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* yrs status time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* userid*/

        /* (Set Status, Exception cd, Set-Aside Flag)*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    PB0BS87(); /* set status*/

  end



   /* *=====================================================**/
   /* * SPECIAL OVERRIDE IF PF12 (Accept Overage) REQUESTED **/
   /* *=====================================================**/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    if (VFYPO002.YRSCD == "12") /* Orig Cond error*/
      VFYPO002.PCMRLSFL = "R"; /* Release from setaside*/
    else
      VFYPO002.PCMRLSFL = "N"; /* Setaside N/A*/
    end

    VFYPO002.YRSCD = "10"; /* Assigned status*/
    VFYPO002.XRECD = " "; /* Assigned exception code*/

  end

  PB0BW03.PB0BWRST = VFYPO002.YRSCD; /* Save new status*/
  PB0BW03.PB0BWXRE = VFYPO002.XRECD; /* Save exception code*/

         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else

      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/

        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        PB0BW03.PB0BWQT1 = VFYPO002.PCMRCPTQ[PB0BWDX2]; /* To wk*/
        PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW03.PB0BWQT1 + PB0BW03.PB0BWQT2;

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


  PB0B66H(); /* Check for zeroed quantities*/

  if (PB0BW05.PB0BDEL == "N") /* Delete receipt flag = 'N'*/
    if (PB0BW02.PB0BWFL11 != "Y")
      PB0BS89(); /* Update the receipt table*/
    else /* Continue on*/
    end
  else

    if (PB0BW05.PB0BDEL == "Y")
      converseLib.validationFailed(0);
    end
  end




end // end PB0B66A

// Upd/Add ORIG to ALT INVENTORY
Function PB0B66C()
   /* ------------------------------------------------------------*/
       /* Upd/Add to the ALTERNATE INVENTORY*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOSC == "I" /* interim product*/
   || PB0BW03.PB0BWOSC == "U") /* uncrest product*/
    set PC2REC empty;
    PC2REC.XGPCD = PB0BW03.PB0BWOGP; /* orig gpc*/
    if (PB0BW03.PB0BWOSC == "I") /* interim product*/
      PC2REC.PC2CUXID = PB0BW03.PB0BWOFY; /* fcty to xref*/
    else
      PC2REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* dest to xref*/
    end

    PB0BS-66610();

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      return; /* dont adjust alt inv if not a screener fcty*/
    else
      if (PC2REC.XXXSTAT == "A" /* active*/
       && PC2REC.YPCCD == "S")  /* not screener*/
        /* continue*/
      else
        return; /* dont adjust alt inv if not a screener fcty*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set AVJREC empty; /* Respective records needed*/
  set AVKREC empty;
  set AVLREC empty;

  XX0XS01(); /* Get current date/TIME*/

  AVLREC.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  AVLREC.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  AVLREC.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  AVLREC.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  AVLREC.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  AVLREC.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  AVLREC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec*/
  AVLREC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Typ cd*/

  AVLREC.XXXUSER = COMMAREA.CACURRAP; /* Application Id*/

  PB0BW01.PB0BWWPO = VFYPO002.PC3PONBR; /* Set up comment*/
  PB0BW01.PB0BWWRN = VFYPO002.SL1RCRNO;
  PB0BW01.PB0BWFL1 = "PO=";
  PB0BW01.PB0BWDPO = PB0BW01.PB0BWWPO;
  PB0BW01.PB0BWFL2 = " / RN=";
  PB0BW01.PB0BWDRN = PB0BW01.PB0BWWRN;
  AVLREC.AV2CMNT = PB0BW01.PB0BWCMT;

  TA1REC.TA1PGMNM = "PB0B66C"; /* Calling process name*/

  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        if (PB0BW03.PB0BWAAI == "Y") /* If add to alt inv indicated*/
          AVLREC.AVLADJQT[PB0BWDX2] = VFYPO002.PCMRCPTQ[PB0BWDX2];
        else
          AVLREC.AVLADJQT[PB0BWDX2] = PB0BW04.PB0BWADQ[PB0BWDX1];
          if (PB0BW03.PB0BWAPU == "N") /* If not apply-to*/
             /* Continue on*/
          else
            AVLREC.AVLADJQT[PB0BWDX2] = AVLREC.AVLADJQT[PB0BWDX2] * -1;
          end
        end
      end
    end
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/
  end


  XSAVS10(); /* Perform update of alternate inv.*/

  if (AVLREC.AVLRTNCD == 0) /* Normal return code*/
    return;
  else
    if (AVLREC.AVLRTNCD == 4) /* Resource unavailable*/
      converseLib.validationFailed(11); /* Indicate error message*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate error message*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWPRC = "66C"; /* Process number*/
  TA1REC.TA1PGMNM = AVLREC.AVLRTNCD; /* Program name*/
  TA1REC.TA1LOC = "UPDATE ALT INVEN";
  TA1REC.TA1DBASE = "DAVAIL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAINVA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AVLREC.AVLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  converseLib.clearScreen();
  
  exit stack; /* Exit to redisplay map*/


end // end PB0B66C

// Upd DPRODC.VFYPO002 Row -Maint
Function PB0B66E()
   /* ------------------------------------------------------------*/
   /* update original fypo row during Apply-To mode.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row (Apply-To mode).*/
   /* ------------------------------------------------------------*/


  PB0BS77(); /* Select Unique DPRODC.VFYPO002*/

  if (VFYPO002.YRSCD == "13" /* If a bad status code*/
   || VFYPO002.YRSCD == "12" 
   || VFYPO002.YRSCD == "11")
    PB0BW03.PB0BWAAI = "Y"; /* Set add alternate inv to yes*/
  end

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/

        /* (Set Status, Exception cd, Set-Aside Flag)*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    PB0BS87(); /* set status*/

  end



   /* *=====================================================**/
   /* * SPECIAL OVERRIDE IF PF12 (Accept Overage) REQUESTED **/
   /* *=====================================================**/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    if (VFYPO002.YRSCD == "12") /* Orig Cond error*/

      VFYPO002.YRSCD = "10"; /* Assigned status*/
      VFYPO002.XRECD = " "; /* Assigned xrecd*/
      VFYPO002.PCMRLSFL = "R"; /* Release from setaside*/

    else

      VFYPO002.YRSCD = "10"; /* Assigned status*/
      VFYPO002.XRECD = " "; /* Assigned xrecd*/
      VFYPO002.PCMRLSFL = "N"; /* Setaside N/A*/

    end

  end


         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else

      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/

        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        PB0BW03.PB0BWQT1 = VFYPO002.PCMRCPTQ[PB0BWDX2]; /* To wk*/
        PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW03.PB0BWQT1 - PB0BW03.PB0BWQT2;

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BW03.PB0BWRST = VFYPO002.YRSCD; /* save new status*/

  PB0B66H(); /* Check for zeroed quantities*/

  if (PB0BW05.PB0BDEL == "N") /* Delete receipt flag = 'N'*/
    PB0BS89(); /* Update the receipt table*/
  else /* Continue on*/
  end


end // end PB0B66E

// Add DPRODC.VFYPO002 row
Function PB0B66G()

   /* ------------------------------------------------------------*/
   /* Build PO Receipts Table row.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get current date/TIME*/

  set VFYPO002 empty; /* Clear output record*/

                /* (Build Access Keys)*/
  VFYPO002.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWA-PO-REG-CD; /* po REGION*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWAPO; /* po number*/

  if (PB0BW03.PB0BW-ACI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-APC; /* ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-ACI; /* cust ord id*/
  end

  if (PB0BW03.PB0BW-ANI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ANI; /* nike ord id*/
  end

  if (PB0BW03.PB0BWAPO > 0) /* po number*/
    /* -------------------- y2k out --------------------------*/
    /* MOVE 019 TO PB0BW01.PB0BWDPC;  /* PO prod century*/
    /* -------------------- y2k out --------------------------*/
    /* -------------------- y2k in ---------------------------*/
    if (PB0BW03.PB0BWAPY > 60) /* Century windowing*/
      PB0BW01.PB0BWDPC = 019; /* PO prod century*/
    else
      PB0BW01.PB0BWDPC = 020; /* PO prod century*/
    end
    /* -------------------- y2k in ---------------------------*/
  else
    PB0BW01.PB0BWDPC = 000; /* PO prod century*/
  end

  PB0BW01.PB0BWDPY = PB0BW03.PB0BWAPY; /* PO prod year*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWAPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWADM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWASE; /* PO season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWAFY; /* po id factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWATY; /* po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWAST; /* style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWACL; /* color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWADI; /* dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWAQU; /* quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWASP; /* Spec cd*/
  VFYPO002.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWAUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW03.YMTCD; /* Mode transport cd*/
  VFYPO002.XWHCD = PB0BW03.PB0BWAWH; /* warehouse*/
  VFYPO002.PC2CUXID = PB0BW03.PB0BW-ACXREF; /* CXREF*/
  VFYPO002.SL1RCRNO = PB0BW03.PB0BWRRN; /* receiving rpt no.*/

  VFYPO002.TSHRCTDT = PB0BW03.PB0BWRDT; /* Receipt date*/

  VFYPO002.TSHCNTNR = PB0BW03.PB0BWCTR; /* Container no.*/
  VFYPO002.TSFSHPID = PB0BW03.PB0BW-SHIP-ID; /* SHIP ID*/

  VFYPO002.XRICD = PB0BW03.PB0BWXRI; /* rcpt ivc stat cd*/
  VFYPO002.PCMIVQTY = PB0BW03.PCMIVQTY; /* rcpt ivc qty*/

  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Receipt status date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Receipt status time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/

  VFYPO002.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  VFYPO002.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

     /* SET APPLY TO STATUS*/

  PB0BS99(); /* set Apply To Status*/

  if (PB0BW01.PB0BW-RELEASE-FL == "R")
    VFYPO002.PCMRLSFL = PB0BW01.PB0BW-RELEASE-FL;
    PB0BW01.PB0BW-RELEASE-FL = " ";
  end

            /* (Move all valid size qtys)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW05.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else
      if (PB0BW05.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/
        PB0BW03.PB0BWDX2 = PB0BW05.SY5SZID[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW05.PB0BWRCD[PB0BWDX1];
      end
    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Add the row to PO Receipts Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("A ", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

     /* NEXT SENTENCE               ; Next sentence*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    PB0BW01.PB0BWPRC = "66G"; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
    TA1REC.TA1LOC = "ADD PO RCPTS ROW";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
    TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0B66G

// Check for Zeroed Receipt QTYs
Function PB0B66H()
   /* ------------------------------------------------------------*/
   /* Check for Zeroed Receipt Quantities for Receipt Delete*/
   /* ------------------------------------------------------------*/

  PB0BW05.PB0BDEL = "N"; /* Initialize delete receipt flag*/
  if (VFYPO002.PCMRCPTQ[1] == 0 /* Check all receipt sizes*/
   && VFYPO002.PCMRCPTQ[2] == 0 
   && VFYPO002.PCMRCPTQ[3] == 0 
   && VFYPO002.PCMRCPTQ[4] == 0 
   && VFYPO002.PCMRCPTQ[5] == 0 
   && VFYPO002.PCMRCPTQ[6] == 0 
   && VFYPO002.PCMRCPTQ[7] == 0 
   && VFYPO002.PCMRCPTQ[8] == 0 
   && VFYPO002.PCMRCPTQ[9] == 0 
   && VFYPO002.PCMRCPTQ[10] == 0
   && VFYPO002.PCMRCPTQ[11] == 0
   && VFYPO002.PCMRCPTQ[12] == 0
   && VFYPO002.PCMRCPTQ[13] == 0
   && VFYPO002.PCMRCPTQ[14] == 0
   && VFYPO002.PCMRCPTQ[15] == 0
   && VFYPO002.PCMRCPTQ[16] == 0
   && VFYPO002.PCMRCPTQ[17] == 0
   && VFYPO002.PCMRCPTQ[18] == 0
   && VFYPO002.PCMRCPTQ[19] == 0
   && VFYPO002.PCMRCPTQ[20] == 0
   && VFYPO002.PCMRCPTQ[21] == 0
   && VFYPO002.PCMRCPTQ[22] == 0
   && VFYPO002.PCMRCPTQ[23] == 0
   && VFYPO002.PCMRCPTQ[24] == 0
   && VFYPO002.PCMRCPTQ[25] == 0
   && VFYPO002.PCMRCPTQ[26] == 0
   && VFYPO002.PCMRCPTQ[27] == 0
   && VFYPO002.PCMRCPTQ[28] == 0
   && VFYPO002.PCMRCPTQ[29] == 0
   && VFYPO002.PCMRCPTQ[30] == 0
   && VFYPO002.PCMRCPTQ[31] == 0
   && VFYPO002.PCMRCPTQ[32] == 0
   && VFYPO002.PCMRCPTQ[33] == 0
   && VFYPO002.PCMRCPTQ[34] == 0
   && VFYPO002.PCMRCPTQ[35] == 0
   && VFYPO002.PCMRCPTQ[36] == 0
   && VFYPO002.PCMRCPTQ[37] == 0
   && VFYPO002.PCMRCPTQ[38] == 0
   && VFYPO002.PCMRCPTQ[39] == 0
   && VFYPO002.PCMRCPTQ[40] == 0)

    PB0BW05.PB0BDEL = "Y"; /* Set delete receipt flag to 'Y'*/
    converseLib.validationFailed(0);

  else

    PB0BW05.PB0BDEL = "N"; /* Set delete receipt flag to 'N'*/

  end

end // end PB0B66H

// Delete Receipt/PF15 Adj All
Function PB0B66I()

   /* ------------------------------------------------------------*/
               /* Delete receipt/PF15 adjust all*/
   /* ------------------------------------------------------------*/

   /* ---------------------------------------------------*/
                    /* Original receipt*/
   /* ---------------------------------------------------*/
  PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/
  PB0BS77(); /* Obtain Orig Rcpt Row*/
  if (VFYPO002.YRSCD == "13" /* If a bad status code*/
   || VFYPO002.YRSCD == "12" 
   || VFYPO002.YRSCD == "11")
    PB0BW03.PB0BWAAI = "Y"; /* Indicate add to alt inv*/
  end

  move 0 to PB0BW04.PB0BWADA[1] for all; /* Initialize wk array*/
  PB0BW03.PB0BWDX1 = 1; /* Initialize Loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/
             /* (Move Rcpt Qtys into wk area)*/
    PB0BW04.PB0BWADA[PB0BWDX1] = VFYPO002.PCMRCPTQ[PB0BWDX1];
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0B665(); /* Delete original row*/

  if (PB0BW03.PB0BWAAI == "Y") /* If does not already exist in alt inv*/
     /* continue on*/
  else
    if (PB0BW03.PB0BWOSC == "I" /* T-shirt*/
     || PB0BW03.PB0BWOSC == "U" 
     || PB0BW03.PB0BWOSC == "B")
      PB0B666(); /* Upd alt inventory*/
    end
  end

   /* ---------------------------------------------------*/
   /* Receipt wrapup/continued PF15 adjust all processing*/
   /* ---------------------------------------------------*/
  if (PB0BW05.PB0BDEL == "Y") /* Delete receipt*/
    PB0BW01.PB0BWFUN = "4"; /* Function #4 item header*/
    PB0BW01.PB0BWBYP = "N"; /* Will display initial screen*/
    PB0BW01.PB0BWSWR = "Y"; /* Request for new data*/
    PB0BW03.PB0BWFTI = " "; /* Not first time thru*/
    PB0BW03.PB0BWPND = "N"; /* Indicate no apply- to pending*/
    PB0BW01.PB0BWMNO = 1; /* Update msg for map #1*/
    PB0BW03.PB0BWMNO = 1; /* Update msg for map #3*/
    return; /* Exit to display map*/
  else /* Or Continue on with PF15 Adjust All*/

  end /* Delete receipt END*/

end // end PB0B66I

// Maintenance Mode
Function PB0B66J()
   /* ------------------------------------------------------------*/
   /* MAINTENANCE MODE*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                       /* Original Receipt*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/
  PB0B66A(); /* Add to original receipt quantities*/

  if (PB0BW05.PB0BDEL == "Y")
    PB0B66I(); /* Delete receipt/PF15 Adjust all*/
  else

    if (converseVar.eventKey is enter) /* Normal update*/
      if (PB0BW03.PB0BWXRE == "  ") /* IF NO EXCEPTIONS*/
        if (PCWREC.XGPCD == "03") /* AprL*/
          if (PB0BW03.PB0BWOPS == "OP"
           || PB0BW03.PB0BWOPS == "FC"
           && PB0BW03.PB0BWOIS == "  ")
            PB0BS91(); /* UPDATE ALL RELATED ROWS*/
          end
        else
          if (PB0BW03.PB0BWOPS == "OP"
           && PB0BW03.PB0BWOIS == "  ")
            PB0BS91(); /* UPDATE ALL RELATED ROWS*/
          end
        end
      end
    end

    if (PB0BW03.PB0BWOSC == "I"
     || PB0BW03.PB0BWOSC == "U"
     || PB0BW03.PB0BWOSC == "B")
      PB0B66C(); /* Upd/Add ORIG to ALTERNATE INVENTORY*/
    end

    /* ---------------------------------------------------*/
             /* Maintenance Mode Receipt Wrapup*/
    /* ---------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* Successful update done*/
      PB0BW01.PB0BWPRC = "66J"; /* Process name*/
      PB0BW01.PB0BWBYP = "N"; /* Display updated data*/
      PB0BW01.PB0BWSWR = "Y"; /* Request for new data = 'Y'*/
      if (converseVar.eventKey is enter) /* Normal update*/
        PB0BW01.PB0BWMNO = 1; /* Indicate upd message*/
      else
        PB0BW01.PB0BWMNO = 377; /* Indicate overage accepted*/
      end
       /* EZERTN                    ; Exit to display map*/
    end /* Successful update done END*/
  end /* Delete receipt flag check END*/

end // end PB0B66J

// Apply to Mode
Function PB0B66K()
   /* ------------------------------------------------------------*/
   /* APPLY TO MODE*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                       /* Original Receipt*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/
  PB0B66E(); /* Subtract from original receipt*/
                                   /* quantities*/

  if (PB0BW05.PB0BDEL == "Y") /* Delete receipt flag = 'Y'*/
     /* continue on*/
  else

    if (converseVar.eventKey is enter) /* Normal update*/
      if (PB0BW03.PB0BWXRE == "  ") /* ORIG ROWS*/
        if (PCWREC.XGPCD == "03") /* Aprl*/
          if (PB0BW03.PB0BWOPS == "OP"
           || PB0BW03.PB0BWOPS == "FC"
           && PB0BW03.PB0BWOIS == "  ")
            PB0BS91(); /* UPDATE ALL RELATED ROWS*/
          end
        else
          if (PB0BW03.PB0BWOPS == "OP"
           && PB0BW03.PB0BWOIS == "  ")
            PB0BS91(); /* UPDATE ALL RELATED ROWS*/
          end
        end
      end
    end

    if (PB0BW03.PB0BWOSC == "I"
     || PB0BW03.PB0BWOSC == "U"
     || PB0BW03.PB0BWOSC == "B")
      PB0B66C(); /* Upd/Add ORIG to ALTERNATE INVENTORY*/
    end
  end /* Delete receipt flag check END*/

   /* ------------------------------------------------------------*/
                       /* Apply to Receipt*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/

  PB0BS95(); /* Check existence of Apply to receipt*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Apply to receipt not found*/
    PB0BW03.PB0BWAAI = "Y"; /* Indicate add to alt inv*/
    PB0B66G(); /* Add Apply to receipt row*/
    if (PB0BW03.PB0BWASC == "I"
     || PB0BW03.PB0BWASC == "U"
     || PB0BW03.PB0BWASC == "B")
      PB0B661(); /* Add APPL to ALTERNATE INVENTORY*/
    end
  else
    if (VFYPO002.YRSCD == "13" /* If a bad status code*/
     || VFYPO002.YRSCD == "12" 
     || VFYPO002.YRSCD == "11")
      PB0BW03.PB0BWAAI = "Y"; /* Indicate add to alt inv*/
    end
    PB0B662(); /* Update row for Apply to receipt*/
    if (PB0BW03.PB0BWASC == "I"
     || PB0BW03.PB0BWASC == "B"
     || PB0BW03.PB0BWASC == "U")
      PB0B663(); /* Upd APPL to ALTERNATE INVENTORY*/
    end
  end /* SQLCA.SQLCODE EQ 100 or not END*/

  if (converseVar.eventKey is enter) /* Normal update*/
    if (PB0BW03.PB0BWXRA == "  ") /* APPLY-TO ROWS*/
      if (PCWREC.XGPCD == "03") /* Aprl*/
        if (PB0BW03.PB0BWAPS == "OP"
         || PB0BW03.PB0BWAPS == "FC"
         && PB0BW03.PB0BWAIS == "  ")
          PB0BS91(); /* UPDATE ALL RELATED ROWS*/
        end
      else
        if (PB0BW03.PB0BWAPS == "OP"
         && PB0BW03.PB0BWAIS == "  ")
          PB0BS91(); /* UPDATE ALL RELATED ROWS*/
        end
      end
    end
  end

   /* ---------------------------------------------------*/
              /* Apply to Mode Receipt Wrapup*/
   /* ---------------------------------------------------*/

  if (PB0BW05.PB0BDEL == "Y") /* Delete receipt flag = 'Y'*/
    PB0B66I(); /* Delete receipt/PF15 Adjust all*/
  else

    if (converseVar.validationMsgNum == 0) /* Successful update done*/
      PB0BW01.PB0BWPRC = "66K"; /* Process name*/
      PB0BW01.PB0BWBYP = "N"; /* Display updated data*/
      PB0BW01.PB0BWSWR = "Y"; /* Request for new data = 'Y'*/
      if (converseVar.eventKey is enter) /* Normal update*/
        PB0BW01.PB0BWMNO = 1; /* Indicate upd message*/
      else
        PB0BW01.PB0BWMNO = 377; /* Indicate overage accepted*/
      end
    end /* Successful update done END*/
    exit stack; /* Exit to next process*/
  end /* Delete receipt flag check END*/

end // end PB0B66K

// PF15 Adjust All
Function PB0B66L()
   /* ------------------------------------------------------------*/
                    /* PF15 adjust all*/
   /* ------------------------------------------------------------*/

   /* ---------------------------------------------------*/
                    /* Original receipt*/
   /* ---------------------------------------------------*/

  PB0BW05.PB0BDEL = "N"; /* Initialize delete receipt flag*/
  PB0BW01.PB0BW-RELEASE-FL = VFYPO002.PCMRLSFL; /* release flag*/
  PB0B66I(); /* Delete receipt/PF15 adjust all*/

   /* ---------------------------------------------------*/
                   /* Apply-to receipt*/
   /* ---------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* No errors found*/

    PB0BS79(); /* Obtain tolerance/PO data*/

    PB0BW03.PB0BWAAI = "N"; /* Reset add alt inv indicator*/
    PB0B667(); /* Check apply-to-PO row for update*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Apply-to PO not found*/
      PB0BW03.PB0BWAAI = "Y"; /* Indicate add to alt inv*/
      PB0B654(); /* Check tolerances*/
      PB0B66G(); /* Add Apply-to PO Row*/
    else
      if (VFYPO002.YRSCD == "13" /* Exceptions*/
       || VFYPO002.YRSCD == "12" /* Setaside*/
       || VFYPO002.YRSCD == "11") /* Rlsd from setasd but has exceptions*/
        PB0BW03.PB0BWAAI = "Y"; /* Indicate add to alt inv*/
      end
      PB0B654(); /* Check tolerances*/
      PB0B668(); /* Update apply-to PO row*/
    end

    if (PB0BW03.PB0BWASC == "I" /* T-shirt*/
     || PB0BW03.PB0BWASC == "U" 
     || PB0BW03.PB0BWASC == "B")
      PB0B669(); /* Upd/add to alternate inv*/
    end

    /* ---------------------------------------------------*/
                /* PF15 adjust all receipt wrapup*/
    /* ---------------------------------------------------*/
    if (converseVar.validationMsgNum == 0) /* Successful update done*/
      PB0BW01.PB0BWPRC = "66L"; /* This module number*/
      PB0BW01.PB0BWFUN = "4"; /* Function #4 - item header*/
      PB0BW01.PB0BWBYP = "Y"; /* Don't display initial screen*/
      PB0BW01.PB0BWSWR = "Y"; /* Request for new data*/
      PB0BW03.PB0BWFTI = "N"; /* Set first time thru to 'N'*/
      PB0BW03.PB0BWPND = "N"; /* Indicate no apply-to pending*/
      PB0BW03.PB0BWMNO = 1; /* Update completed msg for map #3*/
      PB0BW05.PB0BWF15 = "Y"; /* PF15 flag set to 'Y'*/
      PB0BW05.PB0BDEL = "N"; /* Reset delete receipt flag to 'N'*/
      return; /* Exit to display map*/
    end /* EZEMNO = 0 END*/

  end /* EZEMNO = 0 END*/

end // end PB0B66L

// Edit Sales Order Key
Function PB0BS-08()
   /* ------------------------------------------------------------*/
   /* Edit Sales Order Key.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BW-OPC = PB0BM001.OP1CUOID; /* ord part char*/
  PB0BW01.PB0BW-OCI = PB0BM001.OP1CUOID; /* cust ord id*/
  PB0BW01.PB0BW-ONI = PB0BM001.OP1NORID; /* nike ord id*/

  if (PB0BM001.OP1CUOID == 0) /* Cust ord id eq 0*/
    if (PB0BM001.OP1NORID == 0) /* Nike ord id eq 0*/
      PB0BW01.PB0BW-FTI-WARN = "N"; /* Reset FTI flag*/
      return; /* ===> return to last process*/
    else /* Nike ord id ne 0*/
      set PB0BM001.OP1CUOID cursor, bold;
      PB0BW01.PB0BWERL = "S-08";
      converseLib.validationFailed(21); /* Need data err msg*/
      PB0BW01.PB0BW-FTI-WARN = "N"; /* Reset FTI flag*/
      return;
    end
  else /* Cust ord id ne 0*/
    if (PB0BM001.OP1NORID == 0) /* Nike ord id eq 0*/
      set PB0BM001.OP1NORID cursor, bold;
      PB0BW01.PB0BWERL = "S-08";
      converseLib.validationFailed(21); /* Need data err msg*/
      PB0BW01.PB0BW-FTI-WARN = "N"; /* Reset FTI flag*/
      return;
    else /* Nike ord id ne 0*/
      /* continue*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1PARTN = PB0BW01.PB0BW-OPC; /* ord part char*/
  OP1REC.OP1CUOID = PB0BW01.PB0BW-OCI; /* cust ord id*/
  OP1REC.OP1NORID = PB0BW01.PB0BW-ONI; /* nike ord id*/


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, verify cust nbr match, if entered.*/
     /* Return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0BW01.PB0BW-FTI-WARN = "N"; /* Reset FTI flag*/
      return;
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      if (PB0BW01.PB0BW-PREV-INV-SO-WARN == "N") /* Not prev invalid SO*/
                                  /* IF PB0BW01.PB0BW-FTI-WARN EQ 'N';*/
                                   /* /* FTI flag not already set*/
        PB0BW01.PB0BW-PREV-INV-SO-WARN = "Y"; /* Set warning flag*/
        PB0BW01.PB0BW-FTI-WARN = "Y"; /* Set FTI flag*/
        PB0BW01.PB0BWERL = "S-08"; /* Set process name*/
        PB0BW01.PB0BWMNO = 460; /* Set invalid SO warning*/
       /* ELSE;*/
         /* MOVE 'N' TO PB0BW01.PB0BW-FTI-WARN;   /* Set FTI flag*/
       /* END;*/
      else
        if (PB0BW01.PB0BW-PREV-INV-SO-WARN == "Y" /* Previous inv warning*/
         && PB0BW01.PB0BW-FTI-WARN == "Y")        /* First time in flag set*/
          PB0BW01.PB0BWSWR = "Y"; /* Want new data now*/
          PB0BW01.PB0BW-FTI-WARN = "N"; /* Not first time in*/
          PB0BW01.PB0BWERL = "PB0B"; /* Set process name*/
        end
      end
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-08";
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PB0BS-08

// Edit Orig SO Nbr
Function PB0BS-32()

   /* ------------------------------------------------------------*/
   /* Edit Orig Sales Order Number*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BW-OPC = PB0BM003.PB0BM-OCI; /* Save ord part char*/
  PB0BW03.PB0BW-OCI = PB0BM003.PB0BM-OCI; /* Save cust ord id*/
  PB0BW03.PB0BW-ONI = PB0BM003.PB0BM-ONI; /* Save nike ord id*/

  TSTREC.OP1PARTN = PB0BM003.PB0BM-OCI; /* Save ord part char*/
  TSTREC.OP1CUOID = PB0BM003.PB0BM-OCI; /* Save cust ord id*/
  TSTREC.OP1NORID = PB0BM003.PB0BM-ONI; /* Save nike ord id*/

  if (PB0BM003.PB0BM-OCI == 0) /* Cust ord id EQ zero*/
    if (PB0BM003.PB0BM-ONI == 0) /* Nike ord id EQ zero*/
      return; /* Return to last process*/
    else /* Nike ord id NE zero*/

      /* If BGRADE ftwr receipt*/

      if (PB0BM003.PB0BMOGP == "02" /* If ftwr gpc '02' receipt*/
       && PB0BM003.PB0BMOQU == "02") /* And if quality '02' BGRADE*/
        return; /* Return to previous process*/

      else /* If not ftwr BGRADE receipt*/
        set PB0BM003.PB0BM-OCI cursor, bold; /* Set cust ord id*/
        PB0BW01.PB0BWERL = "S-32"; /* Indicate process name*/
        converseLib.validationFailed(21); /* Indicate need data*/
        return;
      end
    end
  else /* Cust ord id NE zero*/
    if (PB0BM003.PB0BM-ONI == 0) /* Nike ord id EQ zero*/

      /* If BGRADE ftwr receipt*/

      if (PB0BM003.PB0BMOGP == "02" /* If ftwr gpc '02' receipt*/
       && PB0BM003.PB0BMOQU == "02") /* And if quality '02' BGRADE*/
        return; /* Return to previous process*/

      else /* If not ftwr BGRADE receipt*/
        set PB0BM003.PB0BM-ONI cursor, bold; /* Set Nike ord id*/
        PB0BW01.PB0BWERL = "S-32"; /* Indicate process name*/
        converseLib.validationFailed(21); /* Indicate need data*/
        return; /* Return to previous process*/
      end
    else /* Nike ord id NE zero*/
     /* continue*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Initialize the VORHDR01 order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1PARTN = PB0BW03.PB0BW-OPC; /* Load part char*/
  OP1REC.OP1CUOID = PB0BW03.PB0BW-OCI; /* Load cust ord id*/
  OP1REC.OP1NORID = PB0BW03.PB0BW-ONI; /* Load Nike ord id*/


   /* ------------------------------------------------------------*/
   /* Select a unique row from VORHDR01.*/
   /* If row found for orig SO nbr, retrieve orig SO hdr status*/
   /* code.  If in ADD mode and orig PO EQ zero and orig ISEG EQ*/
   /* zero, retrieve orig ISEG from VPRDCU01.*/
   /* ------------------------------------------------------------*/


  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found for SO nbr*/

      PB0BW03.PB0BWOPS = OP1REC.XOSCD; /* Set SO hdr status code*/

      if (PB0BW01.PB0BWFUN == "3") /* If ADD mode*/
       /* Do ISEG retrieval next*/
      else /* If MAINENANCE mode*/
          /* Do not do ISEG retrieval*/
        return; /* Return to previous process*/
      end

      if (PB0BM003.PB0BMOPO == 0 /* If PO equal zero*/
       && PB0BM003.PB0BMOSP == "000") /* And if ISEG equal zero*/

        PB0BS-3210(); /* Retrieve ISEG from VPRDCU01 with SO*/

      end

      return; /* Return to previous process*/

    end

    /* ----------------------------------------------------------------*/
     /* If row not found, default the SO header status to zero.  Then,*/
     /* if in ADD mode, indicate invalid ORIG SO if not BGRADE ftwr.*/
     /* If in MAINTENANCE mode, don't give a message for the invalid*/
     /* SO.*/
    /* ----------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found for orig SO number*/

      PB0BW03.PB0BWOPS = 0; /* Set SO hdr status to zero*/

      if (PB0BW01.PB0BWFUN == "3") /* If in ADD mode*/

       /* continue SO warning process*/

      else /* If in MAINTENANCE mode*/

        return; /* return to previous process*/

      end

      PB0BW03.PB0BWOPO = PB0BM003.PB0BMOPO; /* Save PO nbr*/
      PB0BW03.PB0BWOPY = PB0BM003.PB0BMOPY; /* Save POID prod yr/sesn*/
      PB0BW03.PB0BWOPM = PB0BM003.PB0BMOPM; /* Save POID prod mo*/
      PB0BW03.PB0BWODM = PB0BM003.PB0BMODM; /* Save POID del mo*/
      PB0BW03.PB0BWOFY = PB0BM003.PB0BMOFY; /* Save POID factory*/
      PB0BW03.PB0BWOTY = PB0BM003.PB0BMOTY; /* Save po type*/
      PB0BW03.PB0BWOQU = PB0BM003.PB0BMOQU; /* Save quality code*/
      PB0BW03.YMTCD = PB0BM003.YMTCD; /* Save mode code*/
      PB0BW03.PB0BWRRN = PB0BM003.PB0BMRRN; /* Save receipt number*/
      PB0BW01.PB0BWDTW = PB0BM003.PB0BMRDT; /* Save receipt date*/

      /* -------------------------------------------------------------*/
      /* If PO or POID has been entered, set a warning for invalid SO.*/
      /* If neither has been entered, and not BGRADE ftwr, indicate*/
      /* fatal error.*/
      /* -------------------------------------------------------------*/

      if (PB0BM003.PB0BMOPO == 0) /* PO EQ zero*/
        if (PB0BM003.PB0BMOPY == "  " /* Prod year EQ ' '*/
        )                             /* --------------------- y2k out ------------------------------*/
      /* OR PB0BM003.PB0BMOPY EQ '00';           /* Prod year EQ '00'*/
      /* --------------------- y2k out ------------------------------*/

          /* If BGRADE ftwr receipt, then PO EQ zero and invalid SO ok*/

          if (PB0BM003.PB0BMOGP == "02" /* If ftwr gpc '02' receipt*/
           && PB0BM003.PB0BMOQU == "02") /* And if quality '02' BGRADE*/
            PB0BW03.PB0BWOPS = "AL"; /* Default SO Hdr st*/
              /* continue without message*/

          else /* If not ftwr BGRADE receipt*/
            PB0BW01.PB0BWERL = "S-32"; /* Process name*/
            set PB0BM003.PB0BM-OCI cursor, bold; /* Set cust ord id*/
            set PB0BM003.PB0BM-ONI bold; /* Set nike ord id*/
            converseLib.validationFailed(70); /* FATAL error - SO invalid*/
          end
        else /* POID entered*/
          if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N") /* Flag EQ 'N'*/
            PB0BW01.PB0BWERL = "S-32"; /* Process name*/
            PB0BW03.PB0BWMNO = 460; /* Indicate SO invalid*/
          end
        end
      else /* PO NE zero*/
        if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N") /* Flag EQ 'N'*/
          PB0BW01.PB0BWERL = "S-32"; /* Process name*/
          PB0BW03.PB0BWMNO = 460; /* Indicate SO invalid*/
        end
      end

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PB0BW01.PB0BWERL = "S-32"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end PB0BS-32

// select (sa) vprdcu01
Function PB0BS-3210()
   /* ------------------------------------------------------------*/
   /* Get Orig ISEG from VPRDCU01 with Orig SO info*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = PB0BM003.PB0BMOGP; /* Load GPC*/
  PC2REC.KUCCOID = OP1REC.KUCCOID; /* Load cust id*/
  PC2REC.KUMSTRID = OP1REC.KUMSTRID; /* Load store id*/
  PC2REC.XNXCD = OP1REC.XNXCD; /* Load dept id xref*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, retrieve ISEG and CXREF and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found with orig SO*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found with orig SO*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found with orig SO*/

        PB0BW03.PB0BWOSP = PC2REC.PC2INSEG; /* Move ISEG to WS*/
        PB0BM003.PB0BMOSP = PC2REC.PC2INSEG; /* Move ISEG to map*/
        PB0BW03.PB0BW-OCXREF = PC2REC.PC2CUXID; /* Move CXREF to WS*/
        PB0BM003.PB0BM-OCXREF = PC2REC.PC2CUXID; /* Move CXREF to map*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWERL = "S-3210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "S-3210"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PB0BS-3210

// Verify the item on the po
Function PB0BS-3510()

   /* --------------------------------------------------------------*/
   /* Verify that the item is on VPOITM.  Check POITM status.*/
   /* --------------------------------------------------------------*/

  PB0BS-3520(); /* Select set VPOITM*/

  PB0BW03.PB0BWEFL = "N"; /* Set end of data flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select OK on POITM*/
    PB0BS-3530(); /* Fetch row POITM*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* If fetch OK then item is on POITM*/

    /* OVE PC6REC.OP1CUOID TO PB0BW03.PB0BW-PREV-OP1CUOID;/* save*/
    /* OVE PC6REC.OP1NORID TO PB0BW03.PB0BW-PREV-OP1NORID;/* save*/

    PB0BS-3550(); /* Check for multiple SOs for this POITM*/

  else /* If fetch not OK then item is not on POITM*/

    if (converseVar.validationMsgNum == 0 /* If no previous errors to display*/
     && PB0BW03.PB0BWMNO == 0)            /* and no previous warnings to display*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If item not on POITM*/

        if (PB0BW03.PB0BW-EDIT-ORIG-FLAG == "Y") /* If Editing orig receipt*/

          PB0BW01.PB0BWERL = "S-3510"; /* Indicate process name*/
          set PB0BM003.YMTCD bold; /* Highlight orig mode code*/
          set PB0BM003.PB0BMOWH cursor, bold; /* Highlight orig warehouse*/
          set PB0BM003.PB0BMOST bold; /* Highlight orig style*/
          set PB0BM003.PB0BMOCL bold; /* Highlight orig color*/
          set PB0BM003.PB0BMODI bold; /* Highlight orig dimension*/
          set PB0BM003.PB0BMOQU bold; /* Highlight orig quality*/
          set PB0BM003.PB0BMOSP bold; /* Highlight orig ISEG*/
          set PB0BM003.PB0BM-OCXREF bold; /* Highlight orig CXREF*/
          set PB0BM003.PB0BMOPK bold; /* Highlight orig package code*/
          set PB0BM003.PB0BMOUM bold; /* Highlight orig UOM*/
          set PB0BM003.PB0BMOOG bold; /* Highlight orig owner group*/
          set PB0BM003.PB0BM-OCI bold; /* Highlight orig SO cust ord id*/
          set PB0BM003.PB0BM-ONI bold; /* Highlight orig SO Nike ord id*/

          converseLib.validationFailed(393); /* Indicate item not on POITM FATAL error*/

        else /* If editing apply-to receipt*/

          PB0BW01.PB0BWERL = "S-3510"; /* Indicate process name*/
          set PB0BM003.YMTCD bold; /* Highlight apply-to mode code*/
          set PB0BM003.PB0BMAWH cursor, bold; /* Highlight apply-to whse*/
          set PB0BM003.PB0BMAST bold; /* Highlight apply-to style*/
          set PB0BM003.PB0BMACL bold; /* Highlight apply-to color*/
          set PB0BM003.PB0BMADI bold; /* Highlight apply-to dimension*/
          set PB0BM003.PB0BMAQU bold; /* Highlight apply-to quality*/
          set PB0BM003.PB0BMASP bold; /* Highlight apply-to ISEG*/
          set PB0BM003.PB0BM-ACXREF bold; /* Highlight apply-to CXREF*/
          set PB0BM003.PB0BMAPK bold; /* Highlight apply-to package code*/
          set PB0BM003.PB0BMAUM bold; /* Highlight apply-to UOM*/
          set PB0BM003.PB0BMAOG bold; /* Highlight apply-to owner group*/
          set PB0BM003.PB0BM-ACI bold; /* Highlt apply-to SO cust ord id*/
          set PB0BM003.PB0BM-ANI bold; /* Highlt apply-to SO Nike ord id*/

          PB0B454(); /* Check if in apply-to update mode now*/

          if (PB0BW03.PB0BWAPU == "Y") /* If in apply-to update mode*/

            converseLib.validationFailed(393); /* Indicate item not on POITM FATAL error*/

          else /* If not in apply-to update mode*/

            if (PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN == "N") /* Flag EQ 'N'*/

              PB0BW03.PB0BWMNO = 407; /* Indicate item not on POITM*/
              PB0BW03.PB0BWAPS = "XX"; /* Indicate warning process*/

            end
          end
        end
      end
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100 /* If row not found for fetch on POITM*/
   || SQLCA.VAGen_SQLCODE == 0)  /* If fetch ok on POITM*/

    PB0BS-3540(); /* Close VPOITM set*/

  end


end // end PB0BS-3510

// Select (SI) set       VPOITM05
Function PB0BS-3520()
   /* ------------------------------------------------------------*/
           /* SELECT THE SET OF PO ITEMS*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;
  set PCYREC empty;

  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD;
  if (PB0BW03.PB0BW-EDIT-ORIG-FLAG == "Y") /* Edit Orig receipt*/

    VPOITM05.XGPCD = PB0BM003.PB0BMOGP;
                                            /* move in all selection fields*/
    VPOITM05.XWHCD = PB0BM003.PB0BMOWH;
    VPOITM05.PC3PONBR = PB0BM003.PB0BMOPO;
    VPOITM05.SY1STNBR = PB0BM003.PB0BMOST;
    VPOITM05.SY2CLRID = PB0BM003.PB0BMOCL;
    VPOITM05.XDMCD = PB0BM003.PB0BMODI;

    if (PB0BM003.PB0BMOGP == "03") /* if apparel*/
      VPOITM05.XQACD = "*"; /* wildcard quality code*/
    else
      VPOITM05.XQACD = PB0BM003.PB0BMOQU;
    end

    if (PB0BM003.PB0BMOWH == "09") /* if warehouse '09'*/
      VPOITM05.XOWCD = "*"; /* wildcard owner group*/
    else
      VPOITM05.XOWCD = PB0BM003.PB0BMOOG;
    end

    VPOITM05.PC2INSEG = PB0BM003.PB0BMOSP;
    VPOITM05.XPGCD = PB0BM003.PB0BMOPK;
    VPOITM05.XUMCD = PB0BM003.PB0BMOUM;
    VPOITM05.PC2CUXID = "*"; /* wildcard cust xref*/

    if (PB0BM003.PB0BM-OCI > 0
     || PB0BM003.PB0BM-ONI > 0)
      VPOITM05.OP1CUOID = PB0BM003.PB0BM-OCI;
      VPOITM05.OP1NORID = PB0BM003.PB0BM-ONI;
      PB0BW03.PB0BW-OPC = PB0BM003.PB0BM-OCI;
      VPOITM05.OP1PARTN = PB0BW03.PB0BW-OPC;
    else
      VPOITM05.OP1CUOID = -1;
      VPOITM05.OP1NORID = -1;
      VPOITM05.OP1PARTN = "*";
    end
  else /* Edit Apply to receipt for maint*/

    VPOITM05.XGPCD = PB0BM003.PB0BMAGP;
                                            /* move in all selection fields*/
    VPOITM05.XWHCD = PB0BM003.PB0BMAWH;
    VPOITM05.PC3PONBR = PB0BM003.PB0BMAPO;
    VPOITM05.SY1STNBR = PB0BM003.PB0BMAST;
    VPOITM05.SY2CLRID = PB0BM003.PB0BMACL;
    VPOITM05.XDMCD = PB0BM003.PB0BMADI;

    if (PB0BM003.PB0BMAGP == "03") /* if apparel*/
      VPOITM05.XQACD = "*"; /* wildcard quality code*/
    else
      VPOITM05.XQACD = PB0BM003.PB0BMAQU;
    end

    if (PB0BM003.PB0BMAWH == "09") /* if warehouse '09'*/
      VPOITM05.XOWCD = "*"; /* wildcard owner group*/
    else
      VPOITM05.XOWCD = PB0BM003.PB0BMAOG;
    end

    VPOITM05.PC2INSEG = PB0BM003.PB0BMASP;
    VPOITM05.XPGCD = PB0BM003.PB0BMAPK;
    VPOITM05.XUMCD = PB0BM003.PB0BMAUM;
    VPOITM05.PC2CUXID = "*"; /* wildcard cust xref*/

    if (PB0BM003.PB0BM-ACI > 0
     || PB0BM003.PB0BM-ANI > 0)
      VPOITM05.OP1CUOID = PB0BM003.PB0BM-ACI;
      VPOITM05.OP1NORID = PB0BM003.PB0BM-ANI;
      PB0BW03.PB0BW-APC = PB0BM003.PB0BM-ACI;
      VPOITM05.OP1PARTN = PB0BW03.PB0BW-APC;
    else
      VPOITM05.OP1CUOID = 0;
      VPOITM05.OP1NORID = 0;
      VPOITM05.OP1PARTN = " ";
        /* MOVE -1 TO PC6REC.OP1CUOID;*/
        /* MOVE -1 TO PC6REC.OP1NORID;*/
        /* MOVE '*' TO PC6REC.OP1PARTN;*/
    end

  end


  VPOITM05.PC6ETSDT = -1;
  VPOITM05.YMTCD = PB0BM003.YMTCD;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";

  call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-3520"; /* Process name*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS-3520

// Fetch  (NI) next row  VPOITM05
Function PB0BS-3530()
   /* ------------------------------------------------------------*/
              /* FETCH ROW FROM DPRODC.VPOITM05*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NI"; /* move in function code*/

  call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
                                                /* (NI) VPOITM05*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found row*/
      return; /* return*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0BW03.PB0BWEFL = "Y"; /* end the loop*/
      return; /* return*/
    end

  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  PB0BW03.PB0BWEFL = "Y"; /* end the loop*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-3530"; /* Process name*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS-3530

// Close  (CI) set       VPOITM05
Function PB0BS-3540()
   /* ------------------------------------------------------------*/
          /* CLOSE TABLE CURSOR DPRODC.VPOITM05*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CI"; /* move in function code*/

  call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
                                                /* (CI) VPOITM05*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return;
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-3540"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS-3540

// Check for multiple SO's
Function PB0BS-3550()

   /* ------------------------------------------------------------*/
   /* This same process is used in the orig and the apply-to*/
   /* receipt sales order edits.*/
   /*  */
   /* 1) Check for multiple sales orders on VPOITM05 table.*/
   /* Don't look at sales orders on cancelled POITMs.*/
   /* 2) If editing orig receipt, move POITM sales order nbr*/
   /* to the map and check the POITM status, setting WS*/
   /* POITM status to 'IC' if not 'OP' status on POITM.*/
   /* ------------------------------------------------------------*/


   /* Initialize previous SO cust ord id and Nike ord id fields.*/
   /* Sales order may be zero so initialize previous SO fields to*/
   /* high values.*/

  PB0BW03.PB0BW-PREV-OP1CUOID = 99999999; /* Initialize prev cust ord*/
  PB0BW03.PB0BW-PREV-OP1NORID = 99; /* Initialize prev Nike ord id*/


   /* ----------------------------------------------------------------------*/
   /* First POITM fetch done in PB0BS-3510.  Now, load previous sales order*/
   /* fields from first non-cancelled POITM found, while POITM end of data*/
   /* flag EQ 'N'.*/
   /* ----------------------------------------------------------------------*/

  while (PB0BW03.PB0BWEFL == "N"                 /* While end of data flag EQ 'N'*/
   && PB0BW03.PB0BW-PREV-OP1CUOID == 99999999 /* And no POITM found*/
   && PB0BW03.PB0BW-PREV-OP1NORID == 99)

    if (VPOITM05.PC6STAT == "CX") /* If POITM in cancelled status*/

      PB0BS-3530(); /* Fetch next POITM row*/

    else /* POITM not in cancelled status*/

      PB0BW03.PB0BW-PREV-OP1CUOID = VPOITM05.OP1CUOID; /* Save*/
                                  /* to previous SO cust ord id*/
      PB0BW03.PB0BW-PREV-OP1NORID = VPOITM05.OP1NORID; /* Save*/
                                  /* to previous SO Nike ord id*/
    end

  end


   /* ----------------------------------------------------------------------*/
   /* After previous SO fields loaded from the first non-cancelled POIM SO,*/
   /* fetch and process POITMs while POITM end of data flag EQ 'N'.*/
   /* ----------------------------------------------------------------------*/

  while (PB0BW03.PB0BWEFL == "N") /* While end of data flag EQ 'N'*/

    if (VPOITM05.PC6STAT == "CX") /* If status of POITM is cancelled*/
      PB0BS-3530(); /* Fetch next POITM row*/
    else /* POITM status not cancelled*/

      /* If current sales order is the same as the previous sales order*/

      if (VPOITM05.OP1CUOID == PB0BW03.PB0BW-PREV-OP1CUOID
       && VPOITM05.OP1NORID == PB0BW03.PB0BW-PREV-OP1NORID)

        PB0BS-3530(); /* Fetch next POITM row*/

      else /* If current sales order is not the*/
                                   /* same as the previous one*/

        /* ----------------------------------------------------------------*/
         /* If previous sales order EQ zero or current sales order*/
         /* EQ zero, don't display multiple SO warning since zero*/
         /* is a valid SO number for this item.*/
        /* ----------------------------------------------------------------*/

        if (PB0BW03.PB0BW-PREV-OP1CUOID == 0 /* If previous sales order EQ 0*/
         && PB0BW03.PB0BW-PREV-OP1NORID == 0) /**/

          PB0BW03.PB0BWEFL = "Y"; /* Set end of data flag to 'Y'*/

        else /* If previous sales order NE zero*/

          if (VPOITM05.OP1CUOID == 0 /* If current sales order EQ zero*/
           && VPOITM05.OP1NORID == 0) /**/

            PB0BW03.PB0BW-PREV-OP1CUOID = 0; /* Set to zero*/
            PB0BW03.PB0BW-PREV-OP1NORID = 0; /* Set to zero*/

            PB0BW03.PB0BWEFL = "Y"; /* Set end of data flag to 'Y'*/

          else /* If current sales order NE zero*/

            /* Previous SO and current SO NE zero so there are multiple*/
            /* non-zero SOs.*/

            PB0BW03.PB0BWEFL = "Y"; /* Set end of data flag to 'Y'*/
            converseLib.validationFailed(439); /* Indicate multiple sales orders exist*/
            PB0BW01.PB0BWERL = "S-3550"; /* Indicate process name*/

            if (PB0BW03.PB0BW-EDIT-ORIG-FLAG == "Y") /* If editing orig receipt*/

              set PB0BM003.PB0BM-OCI cursor, bold; /* Set orig cust ord id*/
              set PB0BM003.PB0BM-ONI bold; /* Set orig Nike ord id*/

            else /* If editing apply-to receipt*/

              set PB0BM003.PB0BM-ACI cursor, bold; /* Set apply-to cust ord*/
              set PB0BM003.PB0BM-ANI bold; /* Set apply-to Nike ord id*/

            end /* End editing original receipt check*/

          end /* End current POITM SO equal zero check*/
        end /* End previous SO equal zero check*/
      end /* End current POITM SO equal previous*/
                                   /* SO check*/
    end /* End POITM status cancelled check*/
  end /* End while not end of data statement*/


   /* ---------------------------------------------------------------------*/
   /* If multiple sales order numbers not indicated*/
   /* ---------------------------------------------------------------------*/
   /*  */
  if (converseVar.validationMsgNum != 439) /* If multiple sales order nbrs not*/
                                   /* indicated*/

    if (PB0BW03.PB0BW-EDIT-ORIG-FLAG == "Y") /* If editing orig receipt*/

      if (PB0BW03.PB0BW-PREV-OP1CUOID == 99999999 /* No POITM found*/
       && PB0BW03.PB0BW-PREV-OP1NORID == 99)     

        if (PB0BM003.PB0BM-OCI == 0 /* If map SO EQ zero*/
         && PB0BM003.PB0BM-ONI == 0)

          PB0BW03.PB0BW-PREV-OP1CUOID = 0; /* Set to zero*/
          PB0BW03.PB0BW-PREV-OP1NORID = 0; /* Set to zero*/

        else

          /* Set previous SO fields to map SO field values*/

          PB0BW03.PB0BW-PREV-OP1CUOID = PB0BM003.PB0BM-OCI;
          PB0BW03.PB0BW-PREV-OP1NORID = PB0BM003.PB0BM-ONI;

        end /* End map SO EQ zero check*/
      end /* End no POITM found check*/


      /* Move POITM sales order to orig receipt sales order*/

      PB0BW03.PB0BW-OPC = PB0BW03.PB0BW-PREV-OP1CUOID; /* ws part*/

      PB0BM003.PB0BM-OCI = PB0BW03.PB0BW-PREV-OP1CUOID; /* map cust*/
      PB0BW03.PB0BW-OCI = PB0BW03.PB0BW-PREV-OP1CUOID; /* ws cust*/

      PB0BM003.PB0BM-ONI = PB0BW03.PB0BW-PREV-OP1NORID; /* map nike*/
      PB0BW03.PB0BW-ONI = PB0BW03.PB0BW-PREV-OP1NORID; /* ws nike*/

      /* ----------------------------------------------------------------*/
      /* Check status of POITM*/
      /* ----------------------------------------------------------------*/

      if (PCWREC.XGPCD == "03") /* Aprl*/
        if (VPOITM05.PC6STAT != "OP" /* If POITM status not open*/
         && VPOITM05.PC6STAT != "FC") /* If POITM status not open*/

          PB0BW03.PB0BWOIS = "IC"; /* Set WS PO item status to closed*/

        end /* End POITM status EQ open check*/
      else
        if (VPOITM05.PC6STAT != "OP") /* If POITM status not open*/

          PB0BW03.PB0BWOIS = "IC"; /* Set WS PO item status to closed*/

        end /* End POITM status EQ open check*/
      end


      /*  */
      /* Moving in apply-to SO from the POITM commented out because it*/
      /* picks up SOs sometimes not previously in the POITM table (when*/
      /* the orig receipt was created).  Retrieving the apply-to SO*/
      /* for the apply-to receipt while the orig receipt SO is zero*/
      /* creates an apply-to update condition (which is not wanted for*/
      /* maintenance of an existing receipt).*/
      /*  */
      /* LSE;                          /* If editing apply-to receipt*/
      /* MOVE PB0BW03.PB0BW-PREV-OP1CUOID TO PB0BM003.PB0BM-ACI; /* map*/
      /* MOVE PB0BW03.PB0BW-PREV-OP1CUOID TO PB0BW03.PB0BW-ACI; /* ws*/
      /* MOVE PB0BW03.PB0BW-PREV-OP1CUOID TO PB0BW03.PB0BW-APC; /* ws*/

      /* MOVE PB0BW03.PB0BW-PREV-OP1NORID TO PB0BM003.PB0BM-ANI; /* map*/
      /* MOVE PB0BW03.PB0BW-PREV-OP1NORID TO PB0BW03.PB0BW-ANI; /* ws*/

    end /* End editing original receipt check*/

  end /* End multiple sales order numbers*/
                                   /* indicated check*/


end // end PB0BS-3550

// Select set from VITEM001
Function PB0BS-46()

   /* *******************************************************/
   /* * Select set from VITEM001*/
   /* *******************************************************/

  set OP2REC empty;

   /* Build order key*/

  OP2REC.OP1PARTN = PB0BW03.PB0BW-OPC;
  OP2REC.OP1CUOID = PB0BW03.PB0BW-OCI;
  OP2REC.OP1NORID = PB0BW03.PB0BW-ONI;
  OP2REC.XGPCD = PB0BW03.PB0BWOGP;
  OP2REC.SY1STNBR = PB0BW03.PB0BWOST;
  OP2REC.SY2CLRID = PB0BW03.PB0BWOCL;
  OP2REC.XDMCD = PB0BW03.PB0BWODI;

  call "IO0440" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end



   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-46"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-46

// Get next (N2) item on VITEM001
Function PB0BS-48()
   /* ********************************************************/
   /* Get the next item*/
   /* ********************************************************/

  call "IO0440" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      /* ----   Style on SO*/
      /* ----   Check if style item status = 'AL'*/
   /* IF OP2REC.OP2LNIST NE 'AL';    /* Status = allocated*/
   /* MOVE 'S-48' TO PB0BW01.PB0BWERL;/* Module id*/
   /* SET PB0BM003.PB0BMOWH CURSOR,BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOST BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOCL BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMODI BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOQU BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOSP BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOPK BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOUM BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMOOG BRIGHT;/* Highlight*/
   /* MOVE 435 TO PB0BW03.PB0BWMNO;/* style not equal 'al' so message*/
   /* MOVE 'IC' TO PB0BW03.PB0BWOIS;/* set SO item status*/
   /* END;*/
      return; /* Return*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      if (PB0BM003.PB0BMOPO == 0) /* PO EQ zero*/
        if (PB0BM003.PB0BMOPY == "  " /* Prod year EQ ' '*/
        )                             /* -------------------- y2k out ---------------------*/
         /* OR PB0BM003.PB0BMOPY EQ '00';/* or Prod year EQ '00'*/
         /* -------------------- y2k out ---------------------*/

          /* If BGRADE ftwr receipt, then PO EQ zero and invalid SO ok*/

          if (PB0BM003.PB0BMOGP == "02" /* If ftwr gpc '02' receipt*/
           && PB0BM003.PB0BMOQU == "02") /* And if quality '02' BGRADE*/
              /* return without message*/
            return; /* Return*/

          else /* If not ftwr BGRADE receipt*/
            /* ----   Style not on DORDER.VITEM001*/
            PB0BW01.PB0BWERL = "S-48"; /* Module id*/
            set PB0BM003.YMTCD bold; /* Highlight*/
            set PB0BM003.PB0BMOWH cursor, bold; /* Highlight*/
            set PB0BM003.PB0BMOST bold; /* Highlight*/
            set PB0BM003.PB0BMOCL bold; /* Highlight*/
            set PB0BM003.PB0BMODI bold; /* Highlight*/
            set PB0BM003.PB0BMOQU bold; /* Highlight*/
            set PB0BM003.PB0BMOSP bold; /* Highlight*/
            set PB0BM003.PB0BM-OCXREF bold; /* Highlight*/
            set PB0BM003.PB0BMOPK bold; /* Highlight*/
            set PB0BM003.PB0BMOUM bold; /* Highlight*/
            set PB0BM003.PB0BMOOG bold; /* Highlight*/
            set PB0BM003.PB0BM-OCI bold; /* Highlight*/
            set PB0BM003.PB0BM-ONI bold; /* Highlight*/
            converseLib.validationFailed(434); /* style not on SO fatal error*/
            return; /* Return*/
          end
        end
      end
    end
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-48"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-48

// Close (C2) cursor VITEM001
Function PB0BS-50()
   /* ------------------------------------------------------------*/
   /* Close table cursor*/
   /* ------------------------------------------------------------*/

  call "IO0440" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
                                              /* (C2) VITEM001*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return;
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-50"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/
end // end PB0BS-50

// Select (sa) prdcu
Function PB0BS-66610()
   /* ------------------------------------------------------------*/
   /* Edit Customer xref by verifying against DPRODC.VPRDCU01.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      return; /* Return to previous process*/
    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "B-66610 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-66610

// Edit Apply-to SO Nbr
Function PB0BS-68()

   /* ------------------------------------------------------------*/
   /* Edit Apply-to Sales Order Number*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BW-APC = PB0BM003.PB0BM-ACI; /* Save ord part char*/
  PB0BW03.PB0BW-ACI = PB0BM003.PB0BM-ACI; /* Save cust ord id*/
  PB0BW03.PB0BW-ANI = PB0BM003.PB0BM-ANI; /* Save Nike ord id*/

  TSTREC.OP1PARTN = PB0BM003.PB0BM-ACI; /* Save ord part char*/
  TSTREC.OP1CUOID = PB0BM003.PB0BM-ACI; /* Save cust ord id*/
  TSTREC.OP1NORID = PB0BM003.PB0BM-ANI; /* Save Nike ord id*/

  if (PB0BM003.PB0BM-ACI == 0) /* If Cust ord id EQ zero*/
    if (PB0BM003.PB0BM-ANI == 0) /* If Nike ord id EQ zero*/
      return; /* Return to previous process*/
    else /* Nike ord id NE zero*/

      /* If BGRADE ftwr receipt*/

      if (PB0BM003.PB0BMAGP == "02" /* If ftwr gpc '02' receipt*/
       && PB0BM003.PB0BMAQU == "02") /* And if quality '02' BGRADE*/
        return; /* Return to previous process*/

      else /* If not ftwr BGRADE receipt*/
        set PB0BM003.PB0BM-ACI cursor, bold; /* Set apply-to cust ord id*/
        PB0BW01.PB0BWERL = "S-68";
        converseLib.validationFailed(21); /* Need data err msg*/
        return;
      end
    end
  else /* Cust ord id NE zero*/
    if (PB0BM003.PB0BM-ANI == 0) /* Nike ord id EQ zero*/

      /* If BGRADE ftwr receipt*/

      if (PB0BM003.PB0BMAGP == "02" /* If ftwr gpc '02' receipt*/
       && PB0BM003.PB0BMAQU == "02") /* And if quality '02' BGRADE*/
        return; /* Return to previous process*/

      else /* If not ftwr BGRADE receipt*/
        set PB0BM003.PB0BM-ANI cursor, bold; /* Set apply-to Nike ord id*/
        PB0BW01.PB0BWERL = "S-68"; /* Indicate process name*/
        converseLib.validationFailed(21); /* Need data err msg*/
        return;
      end
    else /* Nike ord id NE zero*/
      /* continue*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Initialize the VORHDR01 order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1PARTN = PB0BW03.PB0BW-APC; /* Load apply-to part char*/
  OP1REC.OP1CUOID = PB0BW03.PB0BW-ACI; /* Load apply-to cust ord id*/
  OP1REC.OP1NORID = PB0BW03.PB0BW-ANI; /* Load apply-to nike ord id*/


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row found for SO number, retrieve SO hdr status code.*/
   /* If PO nbr EQ zero and ISEG EQ zero, retrieve ISEG from*/
   /* VPRDCU01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found for SO nbr*/

      PB0BW03.PB0BWAPS = OP1REC.XOSCD; /* Save SO hdr status*/

      if (PB0BM003.PB0BMAPO == 0 /* If PO NBR EQ zero*/
       && PB0BM003.PB0BMASP == "000") /* and ISEG EQ zero*/

        PB0BS-6810(); /* Get ISEG from VPRDCU01 with SO nbr*/

      end

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate SO nbr is invalid*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found for SO number*/

      PB0BW03.PB0BWAPS = 0; /* Set SO Hdr status to zero*/

      PB0BW03.PB0BWAPO = PB0BM003.PB0BMAPO; /* Save PO nbr*/
      PB0BW03.PB0BWAPY = PB0BM003.PB0BMAPY; /* Save POID prod yr/sesn*/
      PB0BW03.PB0BWAPM = PB0BM003.PB0BMAPM; /* Save POID prod mo*/
      PB0BW03.PB0BWADM = PB0BM003.PB0BMADM; /* Save POID del mo*/
      PB0BW03.PB0BWAFY = PB0BM003.PB0BMAFY; /* Save POID factory*/
      PB0BW03.PB0BWATY = PB0BM003.PB0BMATY; /* Save po type*/

      PB0BW03.PB0BWAQU = PB0BM003.PB0BMAQU; /* Save quality cd*/

      /* If PO or POID has been entered, set a warning for invalid SO.*/
      /* If neither PO or POID has been entered, and not BGRADE ftwr,*/
      /* and doing apply-to update, indicate fatal error.*/
      /*  */

      if (PB0BM003.PB0BMAPO == 0) /* PO EQ zero*/
        if (PB0BM003.PB0BMAPY == "  " /* Prod year EQ ' '*/
        )                             /* ------------------------y2k out -------------------*/
          /* OR PB0BM003.PB0BMAPY EQ '00';/* or Prod year EQ zero*/
          /* ------------------------y2k out -------------------*/

          /* If BGRADE ftwr receipt, then PO EQ zero and invalid SO ok*/

          if (PB0BM003.PB0BMAGP == "02" /* If ftwr gpc '02' receipt*/
           && PB0BM003.PB0BMAQU == "02") /* And if quality '02' BGRADE*/
            PB0BW03.PB0BWAPS = "AL"; /* Default SO hdr st*/
                /* continue without message*/

          else /* If not ftwr BGRADE receipt*/
            PB0B454(); /* Check apply-to data*/
            if (PB0BW03.PB0BWAPU == "Y") /* If apply-to update*/
              converseLib.validationFailed(70); /* Indicate FATAL ERROR for SO invalid*/
              PB0BW01.PB0BWERL = "S-68"; /* Process name*/
              set PB0BM003.PB0BM-ACI cursor, bold; /* Set cust ord id*/
              set PB0BM003.PB0BM-ANI bold; /* Set nike ord id*/
            end
          end
        else /* POID entered*/
          if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N")
            PB0BW03.PB0BWMNO = 460; /* Indicate SO invalid*/
            converseLib.validationFailed(0); /* Initialize error msg*/
            PB0BW01.PB0BWERL = "S-68"; /* Process name*/
          end
        end
      else /* PO ne 0*/
        if (PB0BW03.PB0BW-PREV-INV-SO-WARN == "N")
          PB0BW03.PB0BWMNO = 460; /* Indicate SO invalid*/
          converseLib.validationFailed(0); /* Initialize error msg*/
          PB0BW01.PB0BWERL = "S-68"; /* Process name*/
        end
      end

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PB0BW01.PB0BWERL = "S-68";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PB0BS-68

// select (sa) vprdcu01
Function PB0BS-6810()
   /* ------------------------------------------------------------*/
   /* Get Apply-to ISEG from VPRDCU01 with apply-to SO info*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = PB0BM003.PB0BMAGP; /* Load GPC*/
  PC2REC.KUCCOID = OP1REC.KUCCOID; /* Load cust id*/
  PC2REC.KUMSTRID = OP1REC.KUMSTRID; /* Load store id*/
  PC2REC.XNXCD = OP1REC.XNXCD; /* Load dept id xref*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, retrieve ISEG and CXREF and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found with apply-to SO*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found with apply-to SO*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found with apply-to SO*/

        PB0BW03.PB0BWASP = PC2REC.PC2INSEG; /* Move ISEG to WS*/
        PB0BM003.PB0BMASP = PC2REC.PC2INSEG; /* Move ISEG to map*/
        PB0BW03.PB0BW-ACXREF = PC2REC.PC2CUXID; /* Move CXREF to WS*/
        PB0BM003.PB0BM-ACXREF = PC2REC.PC2CUXID; /* Move CXREF to map*/

      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0BW01.PB0BWERL = "S-6810"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "S-6810"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PB0BS-6810

// Select set VITEM001
Function PB0BS-76()

   /* *******************************************************/
   /* * Select set from VITEM001*/
   /* *******************************************************/

  set OP2REC empty;

   /* Build order key*/

  OP2REC.OP1PARTN = PB0BW03.PB0BW-APC;
  OP2REC.OP1CUOID = PB0BW03.PB0BW-ACI;
  OP2REC.OP1NORID = PB0BW03.PB0BW-ANI;
  OP2REC.XGPCD = PB0BW03.PB0BWAGP;
  OP2REC.SY1STNBR = PB0BW03.PB0BWAST;
  OP2REC.SY2CLRID = PB0BW03.PB0BWACL;
  OP2REC.XDMCD = PB0BW03.PB0BWADI;

  call "IO0440" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-76"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/
end // end PB0BS-76

// Fetch next (N2) row VITEM001
Function PB0BS-78()
   /* ********************************************************/
   /* Get the next item*/
   /* ********************************************************/

  call "IO0440" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      /* ----   Style on SO*/
      /* ----   Check if style item status = 'AL'*/
   /* IF OP2REC.OP2LNIST NE 'AL';  /* Status = allocated*/
   /* MOVE 'S-78' TO PB0BW01.PB0BWERL;/* Module id*/
   /* SET PB0BM003.PB0BMAWH CURSOR,BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMAST BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMACL BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMADI BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMAQU BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMASP BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMAPK BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMAUM BRIGHT;/* Highlight*/
   /* SET PB0BM003.PB0BMAOG BRIGHT;/* Highlight*/
   /* IF PB0BW03.PB0BW-prev-item-warn eq 'n';/* Warning not set*/
                                  /* MOVE 435 TO PB0BW03.PB0BWMNO;/**/
                                   /* Style not equal 'AL' SO warn msg*/
   /* MOVE 'IC' TO PB0BW03.PB0BWAIS;/* set item status*/
   /* END;*/
   /* END;*/
      return; /* Return*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      if (PB0BM003.PB0BMAPO == 0) /* PO EQ zero*/
        if (PB0BM003.PB0BMAPY == "  " /* Prod year EQ ' '*/
        )                             /* --------------------y2k out -----------------------*/
         /* OR PB0BM003.PB0BMAPY EQ '00';/* or Prod year EQ zero*/
         /* --------------------y2k out -----------------------*/

          /* If BGRADE ftwr receipt, then PO EQ zero and invalid SO ok*/

          if (PB0BM003.PB0BMAGP == "02" /* If ftwr gpc '02' receipt*/
           && PB0BM003.PB0BMAQU == "02") /* And if quality '02' BGRADE*/
              /* Return without message*/
            return;

          else /* If not ftwr BGRADE receipt*/
            /* ----   Style not on DORDER.VITEM001*/
            PB0BW01.PB0BWERL = "S-78"; /* Module id*/
            set PB0BM003.YMTCD bold; /* Highlight*/
            set PB0BM003.PB0BMAWH cursor, bold; /* Highlight*/
            set PB0BM003.PB0BMAST bold; /* Highlight*/
            set PB0BM003.PB0BMACL bold; /* Highlight*/
            set PB0BM003.PB0BMADI bold; /* Highlight*/
            set PB0BM003.PB0BMAQU bold; /* Highlight*/
            set PB0BM003.PB0BMASP bold; /* Highlight*/
            set PB0BM003.PB0BM-ACXREF bold; /* Highlight*/
            set PB0BM003.PB0BMAPK bold; /* Highlight*/
            set PB0BM003.PB0BMAUM bold; /* Highlight*/
            set PB0BM003.PB0BMAOG bold; /* Highlight*/
            set PB0BM003.PB0BM-ACI bold; /* Highlight*/
            set PB0BM003.PB0BM-ANI bold; /* Highlight*/
            if (PB0BW03.PB0BWAPU == "Y") /* If this is an apply-to UPD*/
              converseLib.validationFailed(434); /* Style not on SO fatal error*/
            else
              if (PB0BW03.PB0BW-PREV-STYLE-MISSING-WARN == "N")
                PB0BW03.PB0BWMNO = 437; /* Style not on SO*/
                PB0BW03.PB0BWAPS = "XX"; /* Indicate warning process*/
              end
            end
            return;
          end
        end
      end
    end
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-78"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-78

// Close cursor (C2) VITEM001
Function PB0BS-80()
   /* ------------------------------------------------------------*/
   /* Close table cursor*/
   /* ------------------------------------------------------------*/

  call "IO0440" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
                                  /* (C2) VITEM001*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return;
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-80"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/
end // end PB0BS-80

// Get SO QTYs
Function PB0BS-84()

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the QTYs to be summed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize fields and*/
   /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/

  set OP2REC empty; /* ===>initialize record before loading*/
  set OP3REC empty; /* ===>initialize record before loading*/
  set OP8REC empty; /* ===>initialize record before loading*/
  set OPBREC empty; /* ===>initialize record before loading*/

  PB0BS-86(); /* ========> Select (S2) Set/open VITEM0R1*/

  PB0BS-88(); /* ==========> Fetch (N2) Next Row VITEM0R1*/

   /* ==========================================> priming read*/

  while (PC5REC.PC5WSWT == "N") /* Until EOF temp. cursor VITEM0R1*/

      /* ------------------------------------------------------------*/
      /* Fetch and sum the SO QTYs until end of cursor.*/
      /* ------------------------------------------------------------*/

    PB0BS-90(); /* ==========> Select (S ) a Record VOSIZER1*/

    PB0BW01.PB0BW-INDEX1 = 1; /* ===> initialize temp. index*/

    while (PB0BW01.PB0BW-INDEX1 <= 40) /* ===> Until all sizes proc*/

          /* -----------------------------;===> load QTYs*/

      if (OP3REC.OP3SZAFL[PB0BW-INDEX1] == "Y") /* if active*/

        if (OP2REC.OP2LNIST == "SH") /* so item status = shipped*/
          PC5REC.PC5WORD = OP3REC.OP3SHPQT[PB0BW-INDEX1];
                               /* shipped qty*/
        else
          PC5REC.PC5WORD = OP3REC.OP3ONOQT[PB0BW-INDEX1];
                               /* on order qty*/
        end

        PC5REC.PC5ORDR[PB0BW-INDEX1] = PC5REC.PC5ORDR[PB0BW-INDEX1] +                                          PC5REC.PC5WORD;
        PC5REC.PC5TORDR = PC5REC.PC5TORDR + PC5REC.PC5WORD;

      end

      PB0BW01.PB0BW-INDEX1 = PB0BW01.PB0BW-INDEX1 + 1; /* ===> incr*/

    end /* ===> Until all sizes processed*/

    PB0BS-88(); /* ==========> Fetch (N2) Next Row*/
                                      /* VITEM0R1*/
  end /* ===>*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0BS-92(); /* Close cursor (C2) VITEM0R1*/


end // end PB0BS-84

// Select (S2) Set/open VITEM001
Function PB0BS-86()
   /* *******************************************************/
   /* * Select set from VITEM001*/
   /* *******************************************************/

   /* Build order key*/

  OP2REC.OP1PARTN = PC5REC.OP1PARTN;
  OP2REC.OP1CUOID = PC5REC.OP1CUOID;
  OP2REC.OP1NORID = PC5REC.OP1NORID;
  OP2REC.XGPCD = PC5REC.XGPCD;
  OP2REC.SY1STNBR = PC5REC.SY1STNBR;
  OP2REC.SY2CLRID = PC5REC.SY2CLRID;
  OP2REC.XDMCD = PC5REC.XDMCD;

  call "IO0440" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-86"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "PB0BM004"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM004.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-86

// Fetch next (N2) VITEM001
Function PB0BS-88()
   /* ********************************************************/
   /* Get the next row from VITEM0R1*/
   /* ********************************************************/

  call "IO0440" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return; /* return*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      PC5REC.PC5WSWT = "Y"; /* indicate temp cursor at EOF*/
      return; /* return*/
    end
  end

   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-88"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1MAP = "PB0BM004"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM004.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS-88

// Call DB1000 (get size/run rec)
Function PB0BS-90()
   /* *********************************************************/
   /* Select Order DB item/size set using DB1000*/
   /* *********************************************************/

   /* Build order key*/

  OP3REC.OP1PARTN = PC5REC.OP1PARTN;
  OP3REC.OP1CUOID = PC5REC.OP1CUOID;
  OP3REC.OP1NORID = PC5REC.OP1NORID;
  OP3REC.OP2LNINB = OP2REC.OP2LNINB;
  OP8REC.OP8TASK = "S "; /* set parameters for DB1000*/
  OP8REC.OP8LOCAT[1] = "PB0B";
  OP8REC.OP8LOCAT[2] = "S-90";

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select items/sizes*/

  if (OPBREC.OPBSZRC != 0)
    set SQLCA empty;
    SQLCA.VAGen_SQLCODE = OPBREC.OPBSZRC;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "DB1000  ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "S-90";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end PB0BS-90

// Close cursor (C2) VITEM001
Function PB0BS-92()
   /* *************************************************************/
   /* Close the cursor for the selected set from VITEM001*/
   /* *************************************************************/

  call "IO0440" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
                                  /* (C2) VITEM001*/
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return;
  end

   /* ********************************************************/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ********************************************************/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "S-92"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1MAP = "PB0BM004"; /* Map name*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Record key used*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM004.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/

end // end PB0BS-92

// Edit GPC cd
Function PB0BS01()
   /* ---------------------------------------------------------*/
                     /* Edit GPC cd*/
   /* ---------------------------------------------------------*/
   /* ---------------------------------------------------------*/
   /* Check commarea security fields*/
   /* ---------------------------------------------------------*/

  PCWREC.XGPCD = PB0BM001.XGPCD; /* Save to wk area*/

  if (PB0BM001.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] == "N") /* Not authorized*/
        set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PB0BW01.PB0BWERL = "PB0BS01"; /* Module Identification*/
        return;
      end
    end
  end


  if (PB0BM001.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] == "N") /* Not authorized*/
        set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PB0BW01.PB0BWERL = "PB0BS01"; /* Module identification*/
        return;
      end
    end
  end

  if (PB0BM001.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] == "N") /* Not authorized*/
        set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PB0BW01.PB0BWERL = "PB0BS01"; /* Module indentification*/
        return;
      end
    end
  end

  if (PB0BM001.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] == "N") /* Not authorized*/
        set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PB0BW01.PB0BWERL = "PB0BS01"; /* Module indentification*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the general product class code*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XGPCD == "01"
   || PB0BM001.XGPCD == "02"
   || PB0BM001.XGPCD == "03"
   || PB0BM001.XGPCD == "07")

    PCWREC.XGPCD = PB0BM001.XGPCD;
    PB0BW01.XGPCD = PB0BM001.XGPCD; /* Save to wk area*/
    COMMAREA.XGPCD = PB0BM001.XGPCD;

  else /* ===> not valid for this application*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active*/
    /* ------------------------------------------------------------*/

    if (PB0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid*/
      /* ------------------------------------------------------------*/

      set PB0BM001.XGPCD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end /* ===> GPC in Table*/

    PB0BW01.PB0BWERL = "PB0BS01"; /* Module identification*/

  end



end // end PB0BS01

// Edit Receiving date range
Function PB0BS03()

   /* ------------------------------------------------------------*/
   /* Validate Receiving date range via TA00040.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWBRD = PB0BM001.PB0BMBRD; /* Save to wk area*/
  PB0BW01.PB0BWERD = PB0BM001.PB0BMERD; /* Save to wk area*/


      /* (Check validity of Receiving end date)*/

  set TA2REC empty; /* Clear work record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Date option*/
  TA2REC.TA2GRTYP = "A"; /* Date type*/
  TA2REC.TA2GRGAN = PB0BW01.PB0BWERD; /* To date fmt 'A'*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Get date range from TA00040*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date returned*/
    set PB0BM001.PB0BMERD cursor, bold; /* Highlight field*/
    PB0BW01.PB0BWERL = "PB0BS03"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate error message*/
    PB0BW01.PB0BWERD = 0; /* Clear wk area*/
  else
    PCXREC.PCXTODT = TA2REC.TA2GRGGN; /* Save ccyymmdd date*/
  end


      /* (Check validity of Receiving Beginning date)*/

  set TA2REC empty; /* Clear work record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Date option*/
  TA2REC.TA2GRTYP = "A"; /* Date type*/
  TA2REC.TA2GRGAN = PB0BW01.PB0BWBRD; /* To date fmt 'A'*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Get date range from TA00040*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date returned*/
    set PB0BM001.PB0BMBRD cursor, bold; /* Highlight field*/
    PB0BW01.PB0BWERL = "PB0BS03"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate error message*/
    PB0BW01.PB0BWBRD = 0; /* Clear wk area*/
  else
    PCXREC.PCXFRDT = TA2REC.TA2GRGGN; /* Save ccyymmdd date*/
  end


     /* (If both dates valid, Check date range)*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    if (PCXREC.PCXFRDT > PCXREC.PCXTODT) /* Beg date > End date*/
      set PB0BM001.PB0BMBRD cursor, bold; /* Highlight field*/
      set PB0BM001.PB0BMERD cursor, bold; /* Highlight field*/
      PB0BW01.PB0BWERL = "PB0BS03"; /* Module identification*/
      converseLib.validationFailed(38); /* Indicate error message*/
      PB0BW01.PB0BWBRD = 0; /* Clear wk area*/
      PB0BW01.PB0BWERD = 0; /* Clear wk area*/
      return; /* Return to calling process*/
    end

  else

    return; /* Return to calling process*/

  end


  set TA2REC empty; /* Clear work record*/
  TA2REC.TA2DTOPT = "DAYSDIFF"; /* Date option*/

  PB0BW01.PB0BWDTW = PB0BW01.PB0BWBRD; /* To wk date*/
   /* -------------------- y2k out -------------------------*/
   /* MOVE 019 TO PB0BWDPC;             /* Set century*/
   /* -------------------- y2k out -------------------------*/
   /* -------------------- y2k in --------------------------*/
  if (PB0BW01.PB0BWDTY > 60) /* Century windowing*/
    PB0BWDPC = 019;
  else
    PB0BWDPC = 020;
  end
   /* -------------------- y2k in --------------------------*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* Set month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* Set day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* Set year*/
  TA2REC.TA2DBDFN = PB0BW01.PB0BWDPW; /* Date from fld*/

  PB0BW01.PB0BWDTW = PB0BW01.PB0BWERD; /* To wk date*/
  /* *** y2k fix on 01/01/00*/
  if (PB0BW01.PB0BWDTY > 60) /* Century windowing*/
    PB0BWDPC = 019;
  else
    PB0BWDPC = 020;
  end
  /* *** y2k fix on 01/01/00*/
  PB0BW01.PB0BWDPM = PB0BW01.PB0BWDTM; /* Set month*/
  PB0BW01.PB0BWDPD = PB0BW01.PB0BWDTD; /* Set day*/
  PB0BW01.PB0BWDPY = PB0BW01.PB0BWDTY; /* Set year*/
  TA2REC.TA2DBDTN = PB0BW01.PB0BWDPW; /* Date to fd*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Get days diff from TA00040*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid return code*/

    set PB0BM001.PB0BMBRD cursor, bold; /* Highlight field*/
    set PB0BM001.PB0BMERD cursor, bold; /* Highlight field*/
    PB0BW01.PB0BWERL = "PB0BS03"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate error message*/
    PB0BW01.PB0BWBRD = 0; /* Clear wk area*/
    PB0BW01.PB0BWERD = 0; /* Clear wk area*/

  else

    if (TA2REC.TA2DBDDN > 92) /* Days diff > 92 days*/

      set PB0BM001.PB0BMBRD cursor, bold; /* Highlight field*/
      set PB0BM001.PB0BMERD cursor, bold; /* Highlight field*/
      PB0BW01.PB0BWERL = "PB0BS03"; /* Module identification*/
      converseLib.validationFailed(38); /* Indicate error message*/
      PB0BW01.PB0BWBRD = 0; /* Clear wk area*/
      PB0BW01.PB0BWERD = 0; /* Clear wk area*/

    end

  end



end // end PB0BS03

// Edit division code
Function PB0BS04()
   /* ------------------------------------------------------------*/
   /* Determine if division code is valid*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWDIV = PB0BM001.PB0BMDIV; /* Save to wk area*/

  if (PB0BM001.PB0BMDIV == "  " /* No division entered*/
   || PB0BM001.PB0BMDIV == "10" /* Division '10' domestic*/
   || PB0BM001.PB0BMDIV == "20") /* Division '20' nil*/

     /* Continue*/

  else /* Division not valid*/

    PB0BW01.PB0BWERL = "PB0BS04"; /* Module id*/
    set PB0BM001.PB0BMDIV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end


end // end PB0BS04

// Edit select status cds
Function PB0BS05()

   /* ------------------------------------------------------------*/
   /* Validate selection status codes entered.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWHST[1] = PB0BM001.PB0BMHST[1]; /* Save to wk area*/
  PB0BW01.PB0BWHST[2] = PB0BM001.PB0BMHST[2]; /* Save to wk area*/
  PB0BW01.PB0BWHST[3] = PB0BM001.PB0BMHST[3]; /* Save to wk area*/
  PB0BW01.PB0BWHST[4] = PB0BM001.PB0BMHST[4]; /* Save to wk area*/


  PB0BW01.PB0BWIX1 = 1; /* Initialize loop index*/
  PB0BW01.PB0BWIX2 = 0; /* Initialize valid status ctr*/

  while (PB0BW01.PB0BWIX1 <= 4) /* Process all status flds*/

    if (PB0BW01.PB0BWHST[PB0BWIX1] != "  " /* Not spaces*/
     && PB0BW01.PB0BWHST[PB0BWIX1] != "10" /* Not valid status*/
     && PB0BW01.PB0BWHST[PB0BWIX1] != "11" /* Not rlse from SAS*/
     && PB0BW01.PB0BWHST[PB0BWIX1] != "12" /* Not SAS*/
     && PB0BW01.PB0BWHST[PB0BWIX1] != "13")

      set PB0BM001.PB0BMHST[PB0BWIX1] cursor, bold; /* Hilight fld*/
      PB0BW01.PB0BWERL = "PB0BS05"; /* Module identification*/
      converseLib.validationFailed(37); /* Indicate error message*/
      PB0BW01.PB0BWHST[PB0BWIX1] = " "; /* Clear wk area*/

    else

      if (PB0BW01.PB0BWHST[PB0BWIX1] == "10" /* Valid status*/
       || PB0BW01.PB0BWHST[PB0BWIX1] == "11" /* Rlse from SAS*/
       || PB0BW01.PB0BWHST[PB0BWIX1] == "12" /* SAS*/
       || PB0BW01.PB0BWHST[PB0BWIX1] == "13")

        PB0BW01.PB0BWIX2 = PB0BW01.PB0BWIX2 + 1; /* Accum valid status*/

      end

    end

    PB0BW01.PB0BWIX1 = PB0BW01.PB0BWIX1 + 1; /* Loop through*/

  end


  if (converseVar.validationMsgNum == 0) /* No errors so far*/

    if (PB0BW01.PB0BWIX2 == 0) /* No valid status found*/

      set PB0BM001.PB0BMHST[1] bold; /* Hilight fld*/
      set PB0BM001.PB0BMHST[2] bold; /* Hilight fld*/
      set PB0BM001.PB0BMHST[3] bold; /* Hilight fld*/
      set PB0BM001.PB0BMHST[4] cursor, bold; /* Hilight fld*/
      PB0BW01.PB0BWERL = "PB0BS05"; /* Module identification*/
      converseLib.validationFailed(37); /* Indicate error message*/
      PB0BW01.PB0BWHST[1] = " "; /* Clear wk area*/
      PB0BW01.PB0BWHST[2] = " "; /* Clear wk area*/
      PB0BW01.PB0BWHST[3] = " "; /* Clear wk area*/
      PB0BW01.PB0BWHST[4] = " "; /* Clear wk area*/

    end

  end


end // end PB0BS05

// Edit Customer Xref
Function PB0BS06()
   /* ------------------------------------------------------------*/
   /* Edit Customer xref by verifying against DPRODC.VPRDCU01.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWXRF = PB0BM001.PB0BMXRF; /* Save to wk*/

  if (PB0BW01.PB0BWXRF == " ") /* Customer xref not entered by user*/
    return; /* Return to previous process*/
  else /* Customer xref was entered by user*/
     /* continue*/
  end

  set PC2REC empty; /* Clear record wk area*/

  PC2REC.XGPCD = PB0BM001.XGPCD; /* GPC cd as key*/
  PC2REC.PC2CUXID = PB0BM001.PB0BMXRF; /* Customer xref as key*/


  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

   /* check the sales order info, if entered, for match to cust xref info*/
     /* IF PB0BM001.OP1CUOID NE 0;/* cust ord id entered*/
      /* AND PB0BM001.OP1NORID NE 0;/* nike ord id entered*/
       /* ;*/
           /* ;/* ===> verify cust xref info match for sales order info*/
           /* IF PC2REC.KUCCOID EQ OP1REC.KUCCOID;/* cu_co_id*/
             /* AND PC2REC.KUMSTRID EQ OP1REC.KUMSTRID;/* cu_stor_id*/
             /* AND PC2REC.XNXCD EQ OP1REC.XNXCD;/* xnx_dept_id_xref*/
             /* ;/* continue*/
           /* ELSE;*/
             /* MOVE 83 TO EZEMNO;       /* ===>Cust xrf must match*/
             /* MOVE 'PB0BS06' TO PB0BW01.PB0BWERL;*/
             /* SET PB0BM001.PB0BMXRF CURSOR,BRIGHT;/* cust xref*/
           /* END;*/
     /* END;*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      PB0BW01.PB0BWERL = "PB0BS06"; /* Module identification*/
      set PB0BM001.PB0BMXRF cursor, bold; /* Highlight field*/
      converseLib.validationFailed(45); /* Indicate missing or invalid*/
      PB0BW01.PB0BWXRF = "  "; /* Clear wk area*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS06 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS06

// Edit PO/Style keys(Stat '10')
Function PB0BS07()

   /* ------------------------------------------------------------*/
   /* Check for PO Number or Style/Color/SO if Status '10'*/
   /* data is requested.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.PC3PONBR <= 0) /* No valid PO key present*/

    if (PCWREC.SY1STNBR == " ") /* No valid Style present*/

     /* IF PB0BW01.PB0BW-OCI EQ 0;/* Cust ord id not entered*/
       /* OR PB0BW01.PB0BW-ONI EQ 0;/* Nike ord id not entered*/

      set PB0BM001.PC3PONBR cursor, bold;
      set PB0BM001.SY1STNBR bold;
      set PB0BM001.SY2CLRID bold;
      set PB0BM001.PB0BMPYR bold;
      set PB0BM001.PB0BMPMO bold;
      set PB0BM001.PB0BMDMO bold;
      set PB0BM001.PB0BMFCT bold;
      set PB0BM001.PC4ORTYP bold;
       /* SET PB0BM001.OP1CUOID BRIGHT;*/
       /* SET PB0BM001.OP1NORID BRIGHT;*/
      PB0BW01.PB0BWERL = "PB0BS07";
       /* MOVE 436 TO EZEMNO; /* Style, PO Key, or SO Key Required*/
      converseLib.validationFailed(347); /* Style or PO Key Required*/

     /* END;*/

    end

  end

end // end PB0BS07

// Edit map details
Function PB0BS09()

   /* ------------------------------------------------------------*/
   /* Validate map detail selection/s.*/
   /* ------------------------------------------------------------*/


  PB0BW01.PB0BWSLC = 0; /* Initialize select count*/
  PB0BW01.PB0BWIX1 = 1; /* Initialize loop index*/

  while (PB0BW01.PB0BWIX1 <= 11) /* Process all map lines*/

    if (PB0BW02.PB0BWSEL[PB0BWIX1] != "*") /* Valid line*/

      if (PB0BM001.PB0BMSEL[PB0BWIX1] == "S") /* Line selected*/
        PB0BW02.PB0BWSEL[PB0BWIX1] = "S"; /* Indicate selection*/
        PB0BW01.PB0BWSLC = PB0BW01.PB0BWSLC + 1; /* Accum selects*/
      else
        if (PB0BM001.PB0BMSEL[PB0BWIX1] == " ") /* Selection cancelled*/
          PB0BW02.PB0BWSEL[PB0BWIX1] = " "; /* Bypass*/
        else
          set PB0BM001.PB0BMSEL[PB0BWIX1] cursor, bold; /* Hilight*/
          PB0BW01.PB0BWPRC = "S09"; /* Module id*/
          converseLib.validationFailed(13); /* Indicate error message*/
          PB0BW02.PB0BWSEL[PB0BWIX1] = " "; /* Clear wk area*/
        end
      end

    end

    PB0BW01.PB0BWIX1 = PB0BW01.PB0BWIX1 + 1; /* Loop through*/

  end


end // end PB0BS09

// Clear map 1/2 detail fields
Function PB0BS0A()
   /* ------------------------------------------------------------*/
   /* Set protect, dark all map detail fields.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWIXM = 1; /* Initialize loop index*/

  while (PB0BW01.PB0BWIXM <= 11) /* Process all map dtl lines*/

    set PB0BM001.PB0BMSEL[PB0BWIXM] skip, invisible; /* selection field*/
    set PB0BM001.PB0BMSTA[PB0BWIXM] skip, invisible; /* status*/
    set PB0BM001.PB0BMEXC[PB0BWIXM] skip, invisible; /* exception cd*/
    set PB0BM001.PB0BMSTY[PB0BWIXM] skip, invisible; /* style*/
    set PB0BM001.PB0BMCLR[PB0BWIXM] skip, invisible; /* color*/
    set PB0BM001.PB0BMXDM[PB0BWIXM] skip, invisible; /* dimension*/
    set PB0BM001.PB0BMXQA[PB0BWIXM] skip, invisible; /* quality*/
    set PB0BM001.PB0BMPON[PB0BWIXM] skip, invisible; /* po number*/
    set PB0BM001.PB0BMDPY[PB0BWIXM] skip, invisible; /* po prod year*/
    set PB0BM001.PB0BMDPM[PB0BWIXM] skip, invisible; /* po prod month*/
    set PB0BM001.PB0BMDDM[PB0BWIXM] skip, invisible; /* po delivery month*/
    set PB0BM001.PB0BMDFC[PB0BWIXM] skip, invisible; /* po id factory*/
    set PB0BM001.PB0BMPOT[PB0BWIXM] skip, invisible; /* po type*/
    set PB0BM001.PC2CUXID[PB0BWIXM] skip, invisible; /* customer xref*/
    set PB0BM001.PB0BMXWH[PB0BWIXM] skip, invisible; /* warehouse*/
    set PB0BM001.PB0BMRDT[PB0BWIXM] skip, invisible; /* receiving date*/
    set PB0BM001.PB0BMRRN[PB0BWIXM] skip, invisible; /* receiving rpt no.*/

    PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/

  end


end // end PB0BS0A

// Purge temp storage
Function PB0BS0C()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PB0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0BS0C"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PB0BW01.PB0BWTSP = 0; /* Reset current page number*/
  PB0BW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PB0BS0C

// Retrieve PO ID flds from POHDR
Function PB0BS0D()
   /* ------------------------------------------------------------*/
   /* Retrieve PO ID, season cd, factory cd, and PO type*/
   /* from POHDR table for receipt list map detail lines.*/
   /* ------------------------------------------------------------*/


  VPOHDR02.XGPCD = VFYPO002.XGPCD; /* GPC cd*/
  VPOHDR02.PO-REG-CD = VFYPO002.PO-REG-CD; /* PO region*/
  VPOHDR02.PC3PONBR = VFYPO002.PC3PONBR; /* PO nbr*/
  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0BW01.PB0BWDPW = VPOHDR02.PC3POIDT; /* Format POHDR po id*/
      PB0BW02.PB0BWDCN[PB0BWIXM] = PB0BW01.PB0BWDPC; /* POHDR prod centry*/
      PB0BW02.PB0BWDPY[PB0BWIXM] = PB0BW01.PB0BWDPY; /* POHDR prod year*/
      PB0BW02.PB0BWDPM[PB0BWIXM] = PB0BW01.PB0BWDPM; /* POHDR prod mth*/
      PB0BW02.PB0BWDDM[PB0BWIXM] = PB0BW01.PB0BWDPD; /* POHDR dlvry mth*/

      PB0BW02.PB0BWSES[PB0BWIXM] = VPOHDR02.PCFSECD; /* POHDR season cd*/
      PB0BW02.PB0BWDFC[PB0BWIXM] = VPOHDR02.FY1FCTYC; /* POHDR fctry*/
      PB0BW02.PB0BWPOT[PB0BWIXM] = VPOHDR02.PC4ORTYP; /* POHDR po type*/

      return; /* Return to previous process*/


    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

   /* -------------------------------------------------------------------*/
   /* IN CASE THE PO NBR IS NOT ON THE POHDR TABLE, use the FYPO values-*/
   /* also use in the po type compare if the user specified a po type*/
   /* -------------------------------------------------------------------*/

   /* Move 0 to POHDR po id*/
      VPOHDR02.PC3POIDT = 0;
      PB0BW01.PB0BWDPW = VFYPO002.PC3POIDT; /* Format FYPO po id*/
      PB0BW02.PB0BWDCN[PB0BWIXM] = PB0BW01.PB0BWDPC; /* FYPO prod centry*/
      PB0BW02.PB0BWDPY[PB0BWIXM] = PB0BW01.PB0BWDPY; /* FYPO prod year*/
      PB0BW02.PB0BWDPM[PB0BWIXM] = PB0BW01.PB0BWDPM; /* FYPO prod mth*/
      PB0BW02.PB0BWDDM[PB0BWIXM] = PB0BW01.PB0BWDPD; /* FYPO dlvry mth*/

      PB0BW02.PB0BWSES[PB0BWIXM] = VFYPO002.PCFSECD; /* POHDR season cd*/
      PB0BW02.PB0BWDFC[PB0BWIXM] = VFYPO002.FY1FCTYC; /* FYPO fctry*/
      PB0BW02.PB0BWPOT[PB0BWIXM] = VFYPO002.PC4ORTYP; /* FYPO po type*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S0D "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS0D

// Store PO Receipt data
Function PB0BS0E()
   /* *=========================================================**/
   /* *  Store DPRODC.VFYPO001 and DPRODC.VPOHDR01 table data.*/
   /* *=========================================================**/


  PB0BW02.PB0BWSEL[PB0BWIXM] = " "; /* select fld*/
  PB0BW02.PB0BWXRI[PB0BWIXM] = VFYPO002.XRICD; /* rcpt ivc stat cd*/
  PB0BW02.PCMIVQTY[PB0BWIXM] = VFYPO002.PCMIVQTY; /* rcpt ivc qty*/
  PB0BW02.PB0BWSTA[PB0BWIXM] = VFYPO002.YRSCD; /* status*/
  PB0BW02.PB0BWEXC[PB0BWIXM] = VFYPO002.XRECD; /* exception cd*/
  PB0BW02.PB0BWSTY[PB0BWIXM] = VFYPO002.SY1STNBR; /* style*/
  PB0BW02.PB0BWCLR[PB0BWIXM] = VFYPO002.SY2CLRID; /* color*/
  PB0BW02.PB0BWXDM[PB0BWIXM] = VFYPO002.XDMCD; /* dimension*/
  PB0BW02.PB0BWXQA[PB0BWIXM] = VFYPO002.XQACD; /* quality*/
  PB0BW02.PB0BWPON[PB0BWIXM] = VFYPO002.PC3PONBR; /* po number*/


  PB0BW02.PC2CUXID[PB0BWIXM] = VFYPO002.PC2CUXID; /* customer xref*/
  PB0BW02.PB0BW-OPC[PB0BWIXM] = VFYPO002.OP1PARTN; /* ord part char*/
  PB0BW02.PB0BW-OCI[PB0BWIXM] = VFYPO002.OP1CUOID; /* cust ord id*/
  PB0BW02.PB0BW-ONI[PB0BWIXM] = VFYPO002.OP1NORID; /* nike ord id*/
  PB0BW02.PB0BWXWH[PB0BWIXM] = VFYPO002.XWHCD; /* warehouse*/
  PB0BW02.PB0BWRDT[PB0BWIXM] = VFYPO002.TSHRCTDT; /* receiving dt*/
  PB0BW02.PB0BWRRN[PB0BWIXM] = VFYPO002.SL1RCRNO; /* receiving rpt no.*/
  PB0BW02.PB0BWSDT[PB0BWIXM] = VFYPO002.PCMYRSDT; /* status change dt*/
  PB0BW02.XXXUSER[PB0BWIXM] = VFYPO002.XXXUSRID; /* user id*/


  PB0BW02.PB0BWYMT[PB0BWIXM] = VFYPO002.YMTCD; /* Mode transport cd*/
  PB0BW02.PB0BWXSD[PB0BWIXM] = VFYPO002.PC2INSEG; /* Spec cd*/
  PB0BW02.PB0BWXPG[PB0BWIXM] = VFYPO002.XPGCD; /* Pkg Type*/
  PB0BW02.PB0BWXUM[PB0BWIXM] = VFYPO002.XUMCD; /* Unit of Measure*/
  PB0BW02.PB0BWXOW[PB0BWIXM] = VFYPO002.XOWCD; /* Own Grp cd*/
  PB0BW02.PB0BWCTR[PB0BWIXM] = VFYPO002.TSHCNTNR; /* Container ID*/
  PB0BW02.PB0BW-SHIP-ID[PB0BWIXM] = VFYPO002.TSFSHPID; /**/
  PB0BW02.PB0BWEXD[PB0BWIXM] = VFYPO002.XRECD; /* Exception cd*/
  PB0BW02.PB0BWYRS[PB0BWIXM] = VFYPO002.YRSCD; /* Status cd*/
  PB0BW02.PB0BWYRD[PB0BWIXM] = VFYPO002.PCMYRSDT; /* Status Chg date*/
  PB0BW02.PB0BWYRT[PB0BWIXM] = VFYPO002.PCMYRSTM; /* Status Chg time*/


  PB0BW02.PB0BWRLF[PB0BWIXM] = VFYPO002.PCMRLSFL; /* Release flag*/
  PB0BW02.PB0BWUSR[PB0BWIXM] = VFYPO002.XXXUSRID; /* Userid*/
  PB0BW02.PB0BWSSD[PB0BWIXM] = VFYPO002.ZZZSDT; /* Create date*/
  PB0BW02.PB0BWSST[PB0BWIXM] = VFYPO002.ZZZSTM; /* Create time*/
  PB0BW02.PB0BWCCT[PB0BWIXM] = VFYPO002.ZZZCHGCT; /* Change count*/


  PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Update map ptr*/


end // end PB0BS0E

// Verify User Access Authority
Function PB0BS0G()

   /* ------------------------------------------------------------*/
                 /* Verify User Access Authority*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWUPD = "N"; /* Reset update flag*/
  PB0BW01.PB0BWINQ = "N"; /* Reset inquiry flag*/

   /* ------------------------------------------------------------*/
   /* Verify user is authorized to make changes*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XGPCD == "01"
   && COMMAREA.CACLVL[1] == "Y")
    PB0BW01.PB0BWUPD = "Y";
  end

  if (PB0BM001.XGPCD == "02"
   && COMMAREA.CACLVL[2] == "Y")
    PB0BW01.PB0BWUPD = "Y";
  end

  if (PB0BM001.XGPCD == "03"
   && COMMAREA.CACLVL[3] == "Y")
    PB0BW01.PB0BWUPD = "Y";
  end

  if (PB0BM001.XGPCD == "07"
   && COMMAREA.CACLVL[7] == "Y")
    PB0BW01.PB0BWUPD = "Y";
  end

   /* ------------------------------------------------------------*/
   /* Verify user is authorized to inquire*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XGPCD == "01"
   && COMMAREA.CAILVL[1] == "Y")
    PB0BW01.PB0BWINQ = "Y";
  end

  if (PB0BM001.XGPCD == "02"
   && COMMAREA.CAILVL[2] == "Y")
    PB0BW01.PB0BWINQ = "Y";
  end

  if (PB0BM001.XGPCD == "03"
   && COMMAREA.CAILVL[3] == "Y")
    PB0BW01.PB0BWINQ = "Y";
  end

  if (PB0BM001.XGPCD == "07"
   && COMMAREA.CAILVL[7] == "Y")
    PB0BW01.PB0BWINQ = "Y";
  end

end // end PB0BS0G

// Check FYPO selection criteria
Function PB0BS0H()
   /* ------------------------------------------------------------*/
   /*  */
   /* Check FYPO receipt row selection criteria:*/
   /* DIVISION CD, PO TYPE, PO ID, and CUSTOMER XREF.*/
   /*  */
   /* If the user specified a div cd, check to see if the*/
   /* division code matches with the one the user entered.*/
   /* If the po type was entered, check to see if the po*/
   /* type and po id match those entered by the user.*/
   /* If the receipt row passes all these tests, check*/
   /* the cust xref.  If the cust xref matches the one*/
   /* entered by the user, store the receipt row, otherwise*/
   /* bypass retrieval of the row.*/
   /*  */
   /* ------------------------------------------------------------*/


  PB0BW01.PB0BWCFL = "N"; /* Move 'N' to cust xref check flag*/
  PB0BW02.PB0BWTDV[PB0BWIXM] = "  ";
                                      /* Set table div cd to '  '*/


  PB0B11B(); /* Get division code*/


  if (PB0BM001.PB0BMDIV == PB0BW02.PB0BWTDV[PB0BWIXM]
   /* Div cd match*/
   || PB0BM001.PB0BMDIV == "  ") /* User didn't specify div cd*/

    PB0BS0D(); /* Retrieve PO ID flds from POHDR*/
                                      /* for receipt row detail*/
   /* tcs change begin ------------------------------------------**/
   /* IF PB0BM001.PC4ORTYP EQ '  ';    /* User didn't specify PO type*/
   /* MOVE 'Y' TO PB0BW01.PB0BWCFL;  /* Move 'Y' to cust xref check flag*/
   /* ;*/
   /* ELSE;                            /* PO type specified*/
   /* tcs change end   ------------------------------------------**/

    if (VPOHDR02.PC3POIDT != 0) /* POHDR ROW was found for PC3REC*/

   /* tcs change begin ------------------------------------------**/
      if (PB0BM001.PC4ORTYP == VPOHDR02.PC4ORTYP /* PO type match*/
       || PB0BM001.PC4ORTYP == "  ")             /* PO type not entered*/
   /* tcs change end   ------------------------------------------**/

        if (PB0BM001.PB0BMPYR == "  " /* Prod year not entered*/
         && PB0BM001.PB0BMPMO == 0    /* Prod month not entered*/
         && PB0BM001.PB0BMDMO == 0    /* Del month not entered*/
         && PB0BM001.PB0BMFCT == "  ") /* Factory not entered*/
          PB0BW01.PB0BWCFL = "Y"; /* Move 'Y' to flag*/
        else /* PO ID flds were entered*/
   /* tcs change begin ------------------------------------------**/
          if ((PB0BM001.PB0BMPYR == PB0BW01.PB0BWPYR  /**/
           && PB0BM001.PB0BMPMO == PB0BW01.PB0BWDPM   /**/
           && PB0BM001.PB0BMDMO == PB0BW01.PB0BWDPD   /**/
           && (PB0BM001.PB0BMFCT == VPOHDR02.FY1FCTYC /**/
           || PB0BM001.PB0BMFCT == "  ")))            /* po factory  not entered*/
   /* tcs change end   ------------------------------------------**/
                                /* Matches with fields from POHDR*/
            PB0BW01.PB0BWCFL = "Y"; /* Move 'Y' to flag*/
          else /* PO ID flds don't match*/
                /* continue - bypass retrieved row and return*/
          end
        end
      else /* PO type doesn't match*/
           /* continue - bypass retrieved row and return*/
      end

    else /* POHDR row NOT FOUND, must use FYPO row*/
   /* tcs change begin ------------------------------------------**/
      if (PB0BM001.PC4ORTYP == VFYPO002.PC4ORTYP /* PO type match*/
       || PB0BM001.PC4ORTYP == "  ")             /* PO type not entered*/
   /* tcs change end --------------------------------------------**/
        if (PB0BM001.PB0BMPYR == "  " /* Prod year not entered*/
         && PB0BM001.PB0BMPMO == 0    /* Prod month not entered*/
         && PB0BM001.PB0BMDMO == 0    /* Del month not entered*/
         && PB0BM001.PB0BMFCT == "  ") /* Factory not entered*/
          PB0BW01.PB0BWCFL = "Y"; /* Move 'Y' to flag*/
        else /* PO ID flds were entered*/
   /* tcs change begin ------------------------------------------**/
          if ((PB0BM001.PB0BMPYR == PB0BW01.PB0BWPYR  /**/
           && PB0BM001.PB0BMPMO == PB0BW01.PB0BWDPM   /**/
           && PB0BM001.PB0BMDMO == PB0BW01.PB0BWDPD   /**/
           && (PB0BM001.PB0BMFCT == VPOHDR02.FY1FCTYC /**/
           || PB0BM001.PB0BMFCT == "  ")))            /* po id factory not entered*/
   /* tcs change end   ------------------------------------------**/
                                /* Matches with fields from FYPO*/
            PB0BW01.PB0BWCFL = "Y"; /* Move 'Y' to flag*/
          else /* PO ID flds don't match*/
                /* continue - bypass retrieved row and return*/
          end
        end
      else /* PO type doesn't match*/
             /* continue - bypass retrieved row and return*/
      end
    end
   /* tcs change end   ------------------------------------------**/
   /* END;*/
   /* tcs change end   ------------------------------------------**/
  else /* Unsuccessful div cd match*/
      /* continue - bypass retrieved row and return to previous process*/
  end


   /* ----------------------------------------------------------------------*/
   /* Check customer xref*/
   /* ----------------------------------------------------------------------*/

  if (PB0BW01.PB0BWCFL == "Y") /* Customer xref flag = 'Y'*/
    if (PB0BM001.PB0BMXRF == "  ") /* User didn't specify customer xref*/
      PB0BS0E(); /* Store po receipt data*/
    else /* User specified customer xref*/
      if (PB0BM001.PB0BMXRF == VFYPO002.PC2CUXID) /* Customer xref match*/
        PB0BS0E(); /* Store po receipt data*/
      else /* Unsuccessful div cd match*/
        /* continue - bypass retrieved row and return to previous process*/
      end
    end
  else
    /* continue - bypass retrieved row and return to previous process*/
  end




end // end PB0BS0H

// Edit PO keys
Function PB0BS0I()
   /* ------------------------------------------------------------*/
    /* Edit PO keys by verifying against DPRODC.VPOHDR01.*/
   /* ------------------------------------------------------------*/

  PCWREC.PC3PONBR = PB0BM001.PC3PONBR; /* Save po nbr*/

  PB0BW01.PB0BW2PY = PB0BM001.PB0BMPYR; /* Save prod yr*/
  PB0BW01.PB0BWPYR = PB0BM001.PB0BMPYR; /* Save prod yr*/

  PB0BW01.PB0BW2PM = PB0BM001.PB0BMPMO; /* Save prod mo*/
  PB0BW01.PB0BWPMO = PB0BM001.PB0BMPMO; /* Save prod mo*/

  PB0BW01.PB0BW2PD = PB0BM001.PB0BMDMO; /* Save del mo*/
  PB0BW01.PB0BWDMO = PB0BM001.PB0BMDMO; /* Save del mo*/

  PB0BW01.PB0BWFCT = PB0BM001.PB0BMFCT; /* Save fcty*/
  PCWREC.PC4ORTYP = PB0BM001.PC4ORTYP; /* Save po type*/

      /* Check for non-zero/non-space key values*/

  if (PB0BM001.PC3PONBR != 0) /* PO Nbr entered*/

    PB0BS0K(); /* Edit PO Nbr key*/
                                   /* and get PO ID fields from POHDR*/

  else /* PO Nbr not entered*/


    if (PB0BM001.PB0BMPYR != " " /* Prod yr entered*/
     || PB0BM001.PB0BMPMO != 0   /* Prod month entered*/
     || PB0BM001.PB0BMDMO != 0   /* Delivery month entered*/
     || PB0BM001.PB0BMFCT != " " /* Factory entered*/
     || PB0BM001.PC4ORTYP != " ") /* PO type entered*/

      if (PB0BM001.PC4ORTYP != " ") /* PO type entered*/

        PB0BS0L(); /* Verify valid po type*/

      else /* PO type not entered*/
       /* Continue*/
      end

      if (PB0BM001.PB0BMPYR != " " /* Prod yr entered*/
       || PB0BM001.PB0BMPMO != 0   /* Prod month entered*/
       || PB0BM001.PB0BMDMO != 0   /* Delivery month entered*/
       || PB0BM001.PB0BMFCT != " ") /* Factory entered*/

        PB0BS0M(); /* Verify valid PO ID*/

      else /* PO ID or fcty entered*/
       /* Continue*/
      end

    else /* Neither PO ID, PO type, or fcty entered*/

     /* Continue*/

    end


  end

end // end PB0BS0I

// Edit PO Nbr key
Function PB0BS0K()
   /* ------------------------------------------------------------*/
   /* Edit PO Nbr key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM001.XGPCD; /* GPC cd*/
   /* MOVE PB0BM001.po-reg-cd TO VPOHDR02.po-reg-cd;/* PO region*/
  VPOHDR02.PO-REG-CD = "01"; /* PO region*/
  VPOHDR02.PC3PONBR = PB0BM001.PC3PONBR; /* PO nbr*/


  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save to wk area*/
      PCWREC.PC3POIDT = VPOHDR02.PC3POIDT; /* Save to wk area*/
      PB0BW01.PB0BWFCT = VPOHDR02.FY1FCTYC; /* Save to wk area*/
      PCWREC.PC4ORTYP = VPOHDR02.PC4ORTYP; /* Save to wk area*/
      PB0BM001.PB0BMFCT = VPOHDR02.FY1FCTYC; /* To map*/
      PB0BM001.PC4ORTYP = VPOHDR02.PC4ORTYP; /* To map*/

      PB0BW01.PB0BWDPW = VPOHDR02.PC3POIDT; /* Update PO Id*/
      if (PB0BM001.XGPCD == "03")
        PB0BW01.PB0BWPYR = VPOHDR02.PCFSECD; /* Save to wk area*/
      else
        PB0BW01.PB0BWPYR = PB0BW01.PB0BWDPY; /* Save to wk area*/
      end
      PB0BW01.PB0BWPMO = PB0BW01.PB0BWDPM; /* Save to wk area*/
      PB0BW01.PB0BWDMO = PB0BW01.PB0BWDPD; /* Save to wk area*/
      PB0BM001.PB0BMPYR = PB0BW01.PB0BWPYR; /* To map*/
      /* OVE PB0BW01.PB0BWDPY TO PB0BM001.PB0BMPYR; /* To map*/
      PB0BM001.PB0BMPMO = PB0BW01.PB0BWDPM; /* To map*/
      PB0BM001.PB0BMDMO = PB0BW01.PB0BWDPD; /* To map*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      set PB0BM001.PC3PONBR cursor, bold; /* Highlight field*/
      PB0BW01.PB0BWERL = "PB0BS0K"; /* Process id*/
      converseLib.validationFailed(69); /* Indicate error message*/
      PCWREC.PC3PONBR = 0; /* Clear save area*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS0K"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS0K

// Verify PO TYPE on VPOTYP01
Function PB0BS0L()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PB0BM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PCWREC.PC4ORTYP; /* ===> PO type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWERL = "PB0BS0L"; /* Module id*/
      converseLib.validationFailed(33); /* Indicate invalid*/

      set PB0BM001.PC4ORTYP cursor, bold; /* PO type*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/

end // end PB0BS0L

// Edit PO ID key
Function PB0BS0M()
   /* ------------------------------------------------------------*/
   /* Edit PO ID key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BW2PM < "01" /* ====> Production month*/
   || PB0BW01.PB0BW2PM > "12")

    PB0BW01.PB0BWERL = "PB0BS0M"; /* Process id*/
    set PB0BM001.PB0BMPMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate prod month invalid*/
    return;

  end

  if (PB0BW01.PB0BW2PD < "01" /* ====> Production delivery month*/
   || PB0BW01.PB0BW2PD > "12")

    PB0BW01.PB0BWERL = "PB0BS0M"; /* Process id*/
    set PB0BM001.PB0BMDMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate del month invalid*/
    return;

  end

  if (PB0BW01.PB0BW2PY >= "00" /* ====> Production year*/
   && PB0BW01.PB0BW2PY <= "99")

    if (PB0BW01.PB0BW2PY > "85")
      PB0BW01.PB0BW2PC = "19"; /* Century*/
    else
      PB0BW01.PB0BW2PC = "20"; /* Century*/
    end

  else
    if (PB0BW01.PB0BW2Y1 >= "A"
     && PB0BW01.PB0BW2Y1 <= "Z"
     && PB0BW01.PB0BW2Y2 >= "0"
     && PB0BW01.PB0BW2Y2 <= "9")
      PB0BS0N(); /* Select the set of season years*/
      if (SQLCA.VAGen_SQLCODE == 0)
        PB0BS0R(); /* Fetch the first row*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PB0BW01.PB0BWCYR = PCFREC.PCFSEYR;
          PB0BW01.PB0BW2PY = PB0BW01.PB0BWCYY;
          PB0BW01.PB0BW2PC = PB0BW01.PB0BWCCC;
        else
          PB0BW01.PB0BWERL = "PB0BS0M"; /* Process id*/
          set PB0BM001.PB0BMPYR cursor, bold; /* Highlight*/
          converseLib.validationFailed(38); /* Indicate year invalid*/
        end
        PB0BS0T(); /* Close the set*/
      end
    else
      PB0BW01.PB0BWERL = "PB0BS0M"; /* Process id*/
      set PB0BM001.PB0BMPYR cursor, bold; /* Highlight*/
      converseLib.validationFailed(38); /* Indicate year invalid*/
      return;
    end
  end


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM001.XGPCD; /* GPC cd*/
   /* MOVE PB0Bm001.po-reg-cd TO VPOHDR02.po-reg-cd;/* PO region*/
  VPOHDR02.PO-REG-CD = "01"; /* PO region*/

  VPOHDR02.PC3POIDT = PB0BW01.PB0BW2PW; /* PO ID*/

  VPOHDR02.FY1FCTYC = PB0BW01.PB0BWFCT; /* Factory*/
  VPOHDR02.PC4ORTYP = PCWREC.PC4ORTYP; /* PO Type*/

   /* tcs addition begin -------------------------**/
  if (PCWREC.PC4ORTYP == "  ") /* if po type is not entered*/
    VPOHDR02.PC4ORTYP = "*"; /* po type*/
  end

  if (PB0BW01.PB0BWFCT == "  ") /* if factory is not entered*/
    VPOHDR02.FY1FCTYC = "*"; /* Factory*/
  end
   /* tcs addition end -------------------------**/


  try
    call "VPOHDR02" ("SA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save to wk area*/
      PCWREC.PC3PONBR = VPOHDR02.PC3PONBR; /* Save to wk area*/
      return; /* Return to calling process*/

    else
      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple PO rows found*/
                                  /* so can't save one PO to use*/
                                  /* for row selection criteria*/
        PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save to wk area*/
        return; /* Return to calling process*/
      end

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      PB0BW01.PB0BWERL = "PB0BS0M"; /* Process id*/
      converseLib.validationFailed(313); /* Indicate INVALID PO ID*/

      set PB0BM001.PB0BMPYR cursor, bold; /* Prod yr*/
      set PB0BM001.PB0BMPMO cursor, bold; /* Prod month*/
      set PB0BM001.PB0BMDMO cursor, bold; /* Prod del month*/
      set PB0BM001.PB0BMFCT cursor, bold; /* Factory*/
      set PB0BM001.PC4ORTYP cursor, bold; /* PO Type*/

      PB0BW01.PB0BWPYR = " "; /* Clear Prod yr*/
      PB0BW01.PB0BWPMO = 0; /* Clear Prod month*/
      PB0BW01.PB0BWDMO = 0; /* Clear Prod del month*/
      PB0BW01.PB0BWFCT = "   "; /* Clear Factory*/
      PCWREC.PC4ORTYP = "  "; /* Clear PO Type*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS0M "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS0M

// Select set DPRODC.VPOVFY01
Function PB0BS0N()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/

   /* ------------------------------------------------------------*/


  set PCFREC empty;
  PCFREC.PCFSECD = PB0BW01.PB0BW2PY;
  PCFREC.PCFBUYMO = -1;
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0BS0N"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = "PB0BS0N"; /* Process name*/

  end


end // end PB0BS0N

// Edit Factory cd
Function PB0BS0O()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PCWREC.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PB0BM001.FY1FCTYC; /* ===> factory code*/
  PCWREC.FY1FCTYC = PB0BM001.FY1FCTYC; /* ===> save to wk area*/

  if (PCWREC.FY1FCTYC == "   ") /* Wildcarded factory*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWERL = "PB0BS0O"; /* Module identification*/
      converseLib.validationFailed(32); /* Indicate validation error*/
      set PB0BM001.FY1FCTYC cursor, bold; /* Highlight field*/
      PCWREC.FY1FCTYC = "   "; /* Clear wk area*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0BW01.PB0BWERL = "PB0BS0O"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end PB0BS0O

// Edit Quality cd
Function PB0BS0Q()
  PCWREC.XQACD = PB0BM001.XQACD; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM001.XQACD != " "  /* Not spaces*/
     && PB0BM001.XQACD != "* " /* Not wildcarded*/
     && PB0BM001.XQACD != " *") /* Not wildcarded*/

      PB0BW01.PB0BWERL = "PB0BS0Q"; /* Module identification*/
      set PB0BM001.XQACD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(54); /* Indicate missing or invalid*/
      PCWREC.XQACD = "  "; /* Clear wk area*/

    else

      if (PB0BM001.XQACD == " ") /* Equal spaces*/
        PCWREC.XQACD = "01"; /* Assign default*/
        PB0BM001.XQACD = "01"; /* Assign default*/
        PB0BW01.PB0BWSWR = "Y"; /* Obtain new data*/
      end

    end

  end


end // end PB0BS0Q

// Fetch row  DPRODC.VPOVFY01
Function PB0BS0R()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/

   /* ------------------------------------------------------------*/


  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end


    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0BS0R"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = "PB0BS0R"; /* Process name*/

  end


end // end PB0BS0R

// Edit Dimension cd
Function PB0BS0S()
  PCWREC.XDMCD = PB0BM001.XDMCD; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM001.XDMCD != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS0S"; /* Module identification*/
      set PB0BM001.XDMCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Indicate missing or invalid*/
      PCWREC.XDMCD = "  "; /* Clear wk area*/
    else
      PCWREC.XDMCD = "00"; /* Assign default*/
      PB0BM001.XDMCD = "00"; /* Assign default*/
      PB0BW01.PB0BWSWR = "Y"; /* Obtain new data*/
    end

  end


end // end PB0BS0S

// Close set  DPRODC.VPOVFY01
Function PB0BS0T()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/

   /* ------------------------------------------------------------*/


  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0BS0T"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = "PB0BS0T"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end PB0BS0T

// Edit Color id
Function PB0BS0U()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  PCWREC.SY2CLRID = PB0BM001.SY2CLRID; /* Save to wk area*/


  if (PB0BM001.SY2CLRID == " ") /* Wildcarded field*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.SY1STNBR == " ")

    PB0BW01.PB0BWERL = "PB0BS0U"; /* Module identification*/
    set PB0BM001.SY1STNBR cursor, bold; /* Highlight*/
    set PB0BM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0BM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0BM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0BM001.SY1STNBR; /* ===> style code*/

  if (PB0BM001.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0BM001.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWERL = "PB0BS0U"; /* Module identification*/
      set PB0BM001.SY2CLRID cursor, bold;
      converseLib.validationFailed(197); /* Indicate invalid message*/
      PCWREC.SY2CLRID = "   "; /* Clear wk area*/
      return; /* Return to previous process*/

    end

  end


  converseLib.clearScreen();
  
  set PB0BM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;


end // end PB0BS0U

// Edit style no
Function PB0BS0W()

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  PCWREC.SY1STNBR = PB0BM001.SY1STNBR; /* Save to wk area*/

  if (PB0BM001.SY1STNBR == " ") /* Wildcarded field*/

    /* IF PB0BM001.XGPCD EQ '01'     ;====> style number is req*/
      /* OR PB0BM001.XGPCD EQ '02'   ;====> style number is req*/

      /* MOVE 'PB0BS0W' TO PB0BW01.PB0BWERL     ; Module id*/
      /* SET PB0BM001.SY1STNBR CURSOR,BRIGHT; Highlight field*/
      /* SET PB0BM001.SY2CLRID BRIGHT       ; Highlight field*/
      /* MOVE 52 TO EZEMNO           ; Indicate error message*/
    /* END ;*/

    return;

  end


   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0BM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0BM001.SY1STNBR; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    PB0BW01.PB0BWERL = "PB0BS0W"; /* Module id*/
    set PB0BM001.SY1STNBR cursor, bold; /* Highlight field*/
    converseLib.validationFailed(52); /* Indicate error message*/
    return; /* Return to previous process*/

  end


  converseLib.clearScreen();
  
  set PB0BM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Display abend condition*/


end // end PB0BS0W

// Edit warehouse cd
Function PB0BS0Y()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  PCWREC.XWHCD = PB0BM001.XWHCD; /* Save to wk area*/

  if (PB0BM001.XWHCD == "* " /* Wildcarded field*/
   || PB0BM001.XWHCD == " *" /* Wildcarded field*/
   || PB0BM001.XWHCD == " ")

     /* IF EZEAID NOT PF13            ; Request not add rcpts*/

    return; /* Return to calling process*/

     /* ELSE ;*/

       /* MOVE 'PB0BS0Y' TO PB0BW01.PB0BWERL     ; Module id*/
       /* SET PB0BM001.XWHCD CURSOR,BRIGHT   ; Highlight*/
       /* MOVE 59 TO EZEMNO           ; Indicate missing or invalid*/

     /* END ;*/

  end


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0BW01.PB0BWERL = "PB0BS0Y"; /* Module identification*/
    set PB0BM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/
    PCWREC.XWHCD = "  "; /* Save to wk area*/

  end


end // end PB0BS0Y

// Sel Unq (SB) VFYPO002-Orig
Function PB0BS101()

   /* ------------------------------------------------------------*/
   /* TO CHECK FOR EXISTENCE OF DUPLICATE ROW*/
   /* ------------------------------------------------------------*/


   /* *=======================**/
   /* * Build DB Access Keys  **/
   /* *=======================**/


  set VFYPO002 empty; /* clear wk record*/

                /* (Build Access Keys)*/
  VFYPO002.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  PC5REC.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* po REG*/
  PC5REC.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* po REG*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWOPO; /* po number*/
  PC5REC.PC3PONBR = PB0BW03.PB0BWOPO; /* po number*/

  PB0BW01.PB0BWDPC = PB0BW03.PB0BWDCN; /* PO prod century*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWOPY; /* PO prod year*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWODM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWOSE; /* PO season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWOFY; /* po id factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWOTY; /* po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWOST; /* style*/
  PC5REC.SY1STNBR = PB0BW03.PB0BWOST; /* style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWOCL; /* color*/
  PC5REC.SY2CLRID = PB0BW03.PB0BWOCL; /* color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWODI; /* dimension*/
  PC5REC.XDMCD = PB0BW03.PB0BWODI; /* dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWOQU; /* quality*/
  PC5REC.XQACD = PB0BW03.PB0BWOQU; /* quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  PC5REC.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec cd*/
  PC5REC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec cd*/
  VFYPO002.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Type*/
  PC5REC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/
  PC5REC.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW02.PB0BWYMT[PB0BWSLX]; /* Mode of Transport*/
  VFYPO002.XWHCD = PB0BW03.PB0BWOWH; /* warehouse*/
  PC5REC.XWHCD = PB0BW03.PB0BWOWH; /* warehouse*/
  VFYPO002.PC2CUXID = PB0BW02.PC2CUXID[PB0BWSLX]; /* customer xref*/
  PC5REC.PC2CUXID = PB0BW02.PC2CUXID[PB0BWSLX]; /* customer xref*/

  VFYPO002.SL1RCRNO = PB0BW02.PB0BWRRN[PB0BWSLX]; /* receipt rpt no.*/
  VFYPO002.TSHRCTDT = PB0BW02.PB0BWRDT[PB0BWSLX]; /* receipt dt*/
  VFYPO002.TSHCNTNR = PB0BW02.PB0BWCTR[PB0BWSLX]; /* container id*/



   /* ------------------------------------------------------------*/
   /* Access DPRODC.VFYPO002 (Select Unique).*/
   /* ------------------------------------------------------------*/


  if (PB0BW03.PB0BW-OCI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
    PC5REC.OP1PARTN = " "; /* ord part char*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
    PC5REC.OP1CUOID = 0; /* cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-OPC; /* ord part char*/
    PC5REC.OP1PARTN = PB0BW03.PB0BW-OPC; /* ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-OCI; /* cust ord id*/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-OCI; /* cust ord id*/
  end

  if (PB0BW03.PB0BW-ONI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
    PC5REC.OP1NORID = 0; /* nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ONI; /* nike ord id*/
    PC5REC.OP1NORID = PB0BW03.PB0BW-ONI; /* nike ord id*/
  end

  try
    call "VFYPO002" ("SB", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Sel row*/


   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PB0BW01.PB0BWSLX > 0) /* Valid selection index*/
        PB0BW02.PB0BWEXC[PB0BWSLX] = VFYPO002.XRECD; /* Upd xrecd*/
        PB0BW02.PB0BWSTA[PB0BWSLX] = VFYPO002.YRSCD; /* Upd yrscd*/
      end

      return; /* Return to calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -811)
        if (PB0BW02.PB0BWEXC[PB0BWSLX] == " ")
          PB0BW02.PB0BWFL11 = "N";
          return;
        else
          PB0BW02.PB0BWFL11 = "Y";
          converseLib.validationFailed(565);
          return;
        end

      end

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S77"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "SELECT PO RCPT ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination func*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end PB0BS101

// Update TSQ record
Function PB0BS11()
   /* ------------------------------------------------------------*/
   /* Update the TSQ record processed.*/
   /* ------------------------------------------------------------*/


  PB0BW02.PB0BWLEN = PB0BW01.PB0BWTSL; /* TSQ length*/
  TA5REC.TA5APPID = "PB0B"; /* Appl Id*/
  TA5REC.TA5TSQIX = PB0BW01.PB0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/


  call "TA0050" (PB0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subrtn*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PB0BW01.PB0BWPRC = "S11 "; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
    TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE";
    TA1REC.TA1MAP = "PB0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* Process name*/
    converseLib.validationFailed(10); /* Indicate error*/
    set PB0BM001.XGPCD cursor; /* Fix cursor position*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0BS11

// Clear map 2 detail fields
Function PB0BS13()
   /* ------------------------------------------------------------*/
   /* Set protect, dark all map detail fields.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWIXM = 1; /* Initialize loop index*/

  while (PB0BW01.PB0BWIXM <= 11) /* Process all map dtl lines*/

    set PB0BM002.PB0BMSEL[PB0BWIXM] skip, invisible; /* selection field*/
    set PB0BM002.PB0BMSTA[PB0BWIXM] skip, invisible; /* status*/
    set PB0BM002.PB0BMEXC[PB0BWIXM] skip, invisible; /* exception cd*/
    set PB0BM002.PB0BMSTY[PB0BWIXM] skip, invisible; /* style*/
    set PB0BM002.PB0BMCLR[PB0BWIXM] skip, invisible; /* color*/
    set PB0BM002.PB0BMXDM[PB0BWIXM] skip, invisible; /* dimension*/
    set PB0BM002.PB0BMXQA[PB0BWIXM] skip, invisible; /* quality*/
    set PB0BM002.PB0BMRDT[PB0BWIXM] skip, invisible; /* receiving date*/
    set PB0BM002.PB0BMRRN[PB0BWIXM] skip, invisible; /* receiving rpt no.*/
    set PB0BM002.PB0BMSDT[PB0BWIXM] skip, invisible; /* stat change date*/
    set PB0BM002.XXXUSER[PB0BWIXM] skip, invisible; /* Userid*/

    PB0BW01.PB0BWIXM = PB0BW01.PB0BWIXM + 1; /* Loop through*/

  end


end // end PB0BS13

// Edit Orig Own Grp cd
Function PB0BS15()
  PB0BW03.PB0BWOOG = PB0BM003.PB0BMOOG; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOOG in XOWTBL.XOWCD /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMOOG != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS15"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOOG cursor, bold; /* Highlight field*/
      else /* Maint receipt*/
        set PB0BM003.PB0BMOOG cursor, bold, protect; /* Highlight field*/
      end
      converseLib.validationFailed(119); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWOOG;       /* Clear wk area*/
    else
      PB0BM003.PB0BMOOG = "00"; /* Assign default*/
      PB0BW03.PB0BWOOG = "00"; /* Assign default*/
    end

  end

                                                            /* ***/
end // end PB0BS15

// Edit Orig Unit of Measure cd
Function PB0BS17()
  PB0BW03.PB0BWOUM = PB0BM003.PB0BMOUM; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOUM in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMOUM != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS17"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOUM cursor, bold; /* Highlight field*/
      else /* Maint receipt*/
        set PB0BM003.PB0BMOUM cursor, bold, protect; /* Highlight field*/
      end
      converseLib.validationFailed(56); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWOUM;       /* Clear wk area*/
    else
      PB0BM003.PB0BMOUM = "01"; /* Assign default*/
      PB0BW03.PB0BWOUM = "01"; /* Assign default*/
    end

  end

                                                            /* ***/
end // end PB0BS17

// Edit Orig Pkg Type cd
Function PB0BS19()
  PB0BW03.PB0BWOPK = PB0BM003.PB0BMOPK; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOPK in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMOPK != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS19"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOPK cursor, bold; /* Highlight field*/
      else /* Maint receipt*/
        set PB0BM003.PB0BMOPK cursor, bold, protect; /* Highlight field*/
      end
      converseLib.validationFailed(55); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWOPK;       /* Clear wk area*/
    else
      PB0BM003.PB0BMOPK = "00"; /* Assign default*/
      PB0BW03.PB0BWOPK = "00"; /* Assign default*/
    end

  end


end // end PB0BS19

// Edit Orig ISEG/CXREF
Function PB0BS21()

   /* ------------------------------------------------------------*/
   /* Edit orig ISEG and orig CXREF using DPRODC.VPRDCU01*/
   /* ------------------------------------------------------------*/

   /* *=========================**/
   /* *  Default ISEG if blank  **/
   /* *=========================**/

  if (PB0BM003.PB0BMOSP == " ") /* If orig ISEG blank*/
    PB0BM003.PB0BMOSP = "000"; /* Default orig ISEG to '000'*/
    PB0BW03.PB0BWOSP = "000"; /* Save orig '000' ISEG to WS*/
  else /* Orig ISEG not blank*/
    PB0BW03.PB0BWOSP = PB0BM003.PB0BMOSP; /* Save ISEG to WS*/
  end

   /* *===========================================================**/
   /* *  Check if CXREF is blank.                                 **/
   /* *  If CXREF is blank, lookup CXREF on PRDCU using ISEG only.**/
   /* *  If CXREF isn't blank and ISEG EQ zero, use only CXREF    **/
   /* *  in lookup.  If CXREF isn't blank and ISEG isn't blank,   **/
   /* *  use ISEG in lookup and check retrieved CXREF against map **/
   /* *  CXREF.                                                   **/
   /* *===========================================================**/

  if (PB0BM003.PB0BM-OCXREF == " ") /* If orig CXREF blank*/

    set PC2REC empty; /* Set PRDCU lookup record empty*/

    PC2REC.XGPCD = PB0BM003.PB0BMOGP; /* Load orig GPC for lookup*/
    PC2REC.PC2INSEG = PB0BM003.PB0BMOSP; /* Load orig ISEG for lookup*/

    try
      call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Use ISEG*/

     /* *======================**/
     /* *  Check Call Results  **/
     /* *======================**/

    if (sysVar.errorCode == "00000000") /* Successful call*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        /* pcf210 begin - validate for SAP countries*/
        if (PC2REC.XCTCD in PCCTTBL.XCTCD)
          converseLib.validationFailed(576);
          set PB0BM003.PB0BM-OCXREF cursor, bold;
          set PB0BM003.PB0BMOSP cursor, bold;
          PB0BW01.PB0BWERL = "PB0BS57";
          return;
        end
        /* pcf210 end*/
        if (PB0BW01.PB0BWFUN == "3") /* If in ADD mode*/
          PB0BM003.PB0BM-OCXREF = PC2REC.PC2CUXID; /* Move CXREF to map*/
          PB0BW03.PB0BW-OCXREF = PC2REC.PC2CUXID; /* Move CXREF to WS*/
        else /* If in MAINTENANCE mode*/
        /* Don't retrieve CXREF*/
        end
        return; /* Return to calling process*/
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* No row found to match the orig ISEG*/
        PB0BW01.PB0BWERL = "PB0BS21"; /* Module identification*/
        if (PB0BW01.PB0BWFUN == "3") /* In ADD mode*/
          set PB0BM003.PB0BMOSP cursor, bold; /* Highlight orig ISEG*/
        else /* In MAINTENANCE mode*/
          set PB0BM003.PB0BMOSP cursor, bold, protect; /* Highlight field*/
                                                  /* and protect orig ISEG*/
        end
        converseLib.validationFailed(51); /* Indicate invalid ISEG*/
        /* MOVE '  ' TO PB0BW03.PB0BWOSP; /* Clear WS orig ISEG*/
        return; /* Return to previous process*/
      end
    end /* End successful call check*/

  else /* If CXREF not blank*/

    if (PB0BM003.PB0BMOSP == "000") /* If ISEG EQ zero*/

      set PC2REC empty; /* Set PRDCU lookup record empty*/

      PC2REC.XGPCD = PB0BM003.PB0BMOGP; /* Load GPC for lookup*/
      PC2REC.PC2CUXID = PB0BM003.PB0BM-OCXREF; /* Load CXREF for lookup*/

      try
        call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Use CXREF*/

     /* *======================**/
     /* *  Check Call Results  **/
     /* *======================**/

      if (sysVar.errorCode == "00000000") /* Successful call*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found with CXREF*/
        /* pcf210 begin - validate for SAP countries*/
          if (PC2REC.XCTCD in PCCTTBL.XCTCD)
            converseLib.validationFailed(576);
            set PB0BM003.PB0BM-OCXREF cursor, bold;
            set PB0BM003.PB0BMOSP cursor, bold;
            PB0BW01.PB0BWERL = "PB0BS57";
            return;
          end
        /* pcf210 end*/
          if (PB0BW01.PB0BWFUN == "3") /* If in ADD mode*/
            PB0BM003.PB0BMOSP = PC2REC.PC2INSEG; /* Save ISEG to map*/
            PB0BW03.PB0BWOSP = PC2REC.PC2INSEG; /* Save ISEG to WS*/
          else /* If in MAINTENANCE mode*/
        /* Don't retrieve ISEG*/
          end
          PB0BW03.PB0BW-OCXREF = PB0BM003.PB0BM-OCXREF;
                                     /* Save CXREF to WS*/
          return; /* Return to previous process*/
        end

        if (SQLCA.VAGen_SQLCODE == 100) /* No row found with CXREF*/
          PB0BW01.PB0BWERL = "PB0BS21"; /* Module identification*/
          if (PB0BW01.PB0BWFUN == "3") /* In ADD mode*/
            set PB0BM003.PB0BM-OCXREF cursor, bold; /* Highlight orig CXREF*/
          else /* In MAINTENANCE mode*/
            set PB0BM003.PB0BM-OCXREF cursor, bold, protect; /* Highlight*/
                                              /* and protect orig CXREF*/
          end
          converseLib.validationFailed(045); /* Indicate CXREF invalid*/
        /* MOVE '  ' TO PB0BW03.PB0BW-OCXREF;/* Clear WS orig CXREF*/
          return; /* Return to previous process*/
        end
      end

    else /* If ISEG NE zero*/

      set PC2REC empty; /* Set PRDCU lookup record empty*/

      PC2REC.XGPCD = PB0BM003.PB0BMOGP; /* Load GPC for lookup*/
      PC2REC.PC2INSEG = PB0BM003.PB0BMOSP; /* Load ISEG for lookup*/

      try
        call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Use ISEG*/

       /* *======================**/
       /* *  Check Call Results  **/
       /* *======================**/

      if (sysVar.errorCode == "00000000") /* Successful call*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Row found with ISEG*/

          /* pcf210 begin - validate for SAP countries*/
          if (PC2REC.XCTCD in PCCTTBL.XCTCD)
            converseLib.validationFailed(576);
            set PB0BM003.PB0BM-OCXREF cursor, bold;
            set PB0BM003.PB0BMOSP cursor, bold;
            PB0BW01.PB0BWERL = "PB0BS57";
            return;
          end
          /* pcf210 end*/
           /* Check table CXREF against map CXREF*/

          if (PB0BM003.PB0BM-OCXREF != PC2REC.PC2CUXID) /* Not CXREF match*/
            PB0BW01.PB0BWERL = "PB0BS21"; /* Module identification*/
            if (PB0BW01.PB0BWFUN == "3") /* In ADD mode*/
              set PB0BM003.PB0BMOSP cursor, bold; /* Highlight orig ISEG*/
              set PB0BM003.PB0BM-OCXREF bold; /* Highlt orig CXREF*/
            else /* In MAINTENANCE mode*/
              set PB0BM003.PB0BMOSP cursor, bold, protect; /* Highlight*/
                                                  /* and protect orig ISEG*/
              set PB0BM003.PB0BM-OCXREF bold, protect; /* Highlight*/
            end
            converseLib.validationFailed(289); /* Indicate ISEG does not match CXREF*/
            /* MOVE '  ' TO PB0BW03.PB0BW-OCXREF;/* Clear WS orig CXREF*/
          end
          PB0BW03.PB0BW-OCXREF = PB0BM003.PB0BM-OCXREF;
                                       /* Save CXREF to WS*/
          return; /* Return to previous process*/
        end

        if (SQLCA.VAGen_SQLCODE == 100) /* No row found with ISEG*/

          PB0BW01.PB0BWERL = "PB0BS21"; /* Module identification*/
          if (PB0BW01.PB0BWFUN == "3") /* In ADD mode*/
            set PB0BM003.PB0BMOSP cursor, bold; /* Highlight orig ISEG*/
          else /* In MAINTENANCE mode*/
            set PB0BM003.PB0BMOSP cursor, bold, protect; /* Highlt field*/
                                              /* and protect orig ISEG*/
          end
          converseLib.validationFailed(51); /* Indicate invalid ISEG*/
          /* MOVE '  ' TO PB0BW03.PB0BWOSP; /* Clear WS orig ISEG*/
          return; /* Return to previous process*/
        end /* End check for row found with orig ISEG*/
      end
    end /* End check for ISEG EQ zero*/

   /* ------------------------------------------------------------*/
    /* If data not available, return an error message to user.*/
    /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end


    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    PB0BW01.PB0BWERL = "PB0BS21"; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

    exit stack; /* Return to previous process*/

  end /* End check for CXREF blank*/

end // end PB0BS21

// Edit Orig Quality cd
Function PB0BS23()

  PB0BW03.PB0BWOQU = PB0BM003.PB0BMOQU; /* Save to wk area*/

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOQU in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    return;
  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMOQU != " ") /* QU not equal spaces*/
      PB0BW01.PB0BWERL = "PB0BS23"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOQU cursor, bold; /* Highlight field*/
      else /* Maint receipT*/
        set PB0BM003.PB0BMOQU cursor, bold, protect; /* Highlight field*/
      end
      converseLib.validationFailed(54); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWOQU;         /* Clear wk area*/
    else /* QU equal spaces*/
      if (PB0BW01.PB0BWFUN == "3") /* Function '3' - itm hdr add*/
        if (PB0BM003.PB0BMOTY == "QQ") /* PO type = 'QQ' (bgrade)*/
          PB0BW03.PB0BWOQU = "02"; /* Assign QU 02 for bgrade*/
          PB0BM003.PB0BMOQU = "02"; /* Assign QU 02 for bgrade*/
        else
          if (PB0BM003.PB0BMOPO == 0) /* PO = 0*/
            /* -------------------- y2k out ------------------*/
            /* IF PB0BM003.PB0BMOPY EQ 00      /* PO ID Prod year = 0*/
            /* -------------------- y2k out ------------------*/
            if (PB0BM003.PB0BMOPY == " ") /* PO ID Prod year = ' '*/
              PB0BW03.PB0BWOQU = "02"; /* Assign QU 02 for bgrade*/
              PB0BM003.PB0BMOQU = "02"; /* Assign QU 02 for bgrade*/
            else
              PB0BW03.PB0BWOQU = "01"; /* Assign QU 01*/
              PB0BM003.PB0BMOQU = "01"; /* Assign QU 01*/
            end
          else /* Not bgrade*/
            PB0BW03.PB0BWOQU = "01"; /* Assign QU 01*/
            PB0BM003.PB0BMOQU = "01"; /* Assign QU 01*/
          end
        end
      else /* not Function '3' - itm hdr add*/
        PB0BW03.PB0BWOQU = "01"; /* Assign QU 01*/
        PB0BM003.PB0BMOQU = "01"; /* Assign QU 01*/
      end
    end
  end

end // end PB0BS23

// Edit Orig Dimension cd
Function PB0BS25()
  PB0BW03.PB0BWODI = PB0BM003.PB0BMODI; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMODI in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMODI != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS25"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMODI cursor, bold; /* Highlight*/
      else /* Maint receipt*/
        set PB0BM003.PB0BMODI cursor, bold, protect; /* Highlight*/
      end
      converseLib.validationFailed(53); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWODI;       /* Clear wk area*/
    else
      PB0BW03.PB0BWODI = "00"; /* Assign default*/
      PB0BM003.PB0BMODI = "00"; /* Assign default*/
    end

  end


end // end PB0BS25

// Edit Orig Color id
Function PB0BS27()
   /* ------------------------------------------------------------*/
   /* Save color code to wk area.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWOCL = PB0BM003.PB0BMOCL; /* Save to wk area*/
  PB0BW03.PB0BWOSC = " "; /* Clear pg-scn-sty-ind*/


   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOST == " ")

    PB0BW01.PB0BWERL = "PB0BS27"; /* Module identification*/
    if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
      set PB0BM003.PB0BMOST cursor, bold; /* Highlight*/
      set PB0BM003.PB0BMOCL bold; /* Highlight*/
    else /* Maint receipt*/
      set PB0BM003.PB0BMOST cursor, bold, protect; /* Highlight*/
      set PB0BM003.PB0BMOCL bold, protect; /* Highlight*/
    end
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0BM003.PB0BMOGP; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0BM003.PB0BMOCL; /* ===> color code*/
  PG2REC.SY1STNBR = PB0BM003.PB0BMOST; /* ===> style code*/
  PG2REC.XDMCD = PB0BM003.PB0BMODI; /* ===> dim code*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0BW03.PB0BWOSC = PG2REC.PG2SCRFL; /* Save pg-scn-sty-ind*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWERL = "PB0BS27"; /* Module identification*/
      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOCL cursor, bold;
      else /* Maint receipt*/
        set PB0BM003.PB0BMOCL cursor, bold, protect;
      end
      converseLib.validationFailed(197); /* Indicate invalid message*/
   /* MOVE '   ' TO PB0BW03.PB0BWOCL;      /* Clear wk area*/
      return; /* Return to previous process*/

    end

  end


  converseLib.clearScreen();
  
  set PB0BM003.PB0BMOCL cursor, bold, protect;
  converseLib.validationFailed(10);

  exit stack; /* Exit to redisplay map*/


end // end PB0BS27

// Edit orig style no
Function PB0BS29()

   /* ------------------------------------------------------------*/
   /* Save entered style into wk area.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWOST = PB0BM003.PB0BMOST; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0BM003.PB0BMOGP; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0BM003.PB0BMOST; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0BW03.SY4SZSCL = PG2REC.SY4SZSCL; /* Save style sz scale cd*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    PB0BW01.PB0BWERL = "PB0BS29"; /* Module identification*/
    if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
      set PB0BM003.PB0BMOST cursor, bold; /* Highlight field*/
    else /* Maint receipt*/
      set PB0BM003.PB0BMOST cursor, bold, protect; /* Highlight field*/
    end
    converseLib.validationFailed(52); /* Indicate error message*/
    return; /* Return to previous process*/

  end


  converseLib.clearScreen();
  
  if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
    set PB0BM003.PB0BMOST cursor, bold;
  else /* Maint receipt*/
    set PB0BM003.PB0BMOST cursor, bold, protect;
  end
  converseLib.validationFailed(10);
  exit stack; /* Exit to redisplay map*/


end // end PB0BS29

// Edit warehouse code
Function PB0BS31()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMOWH in XWHTBL.XWHCD) /* Code in table*/
    if (PB0BM003.PB0BMOWH == "  ") /* whse equal to blank stk transfer*/
      PB0BW03.PB0BWOWH = PB0BM003.PB0BMOWH; /* Save to wk area*/
    else
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        PB0BW03.PB0BWOWH = PB0BM003.PB0BMOWH; /* Save to wk area*/
      end
    end

    /* pcf210 begin - validate for SAP countries*/
    if (PB0BM003.PB0BMOWH > " "
     && PB0BM003.PB0BM-OCXREF == " ")
      if (PB0BM003.PB0BMOWH in PCCTTBL.XWHCD)
        converseLib.validationFailed(576);
        set PB0BM003.PB0BMOWH cursor, bold;
        PB0BW01.PB0BWERL = "PB0BS31";
      end
    end

    /* pcf210 end*/
  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0BW01.PB0BWERL = "PB0BS31"; /* Module identification*/
    if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
      set PB0BM003.PB0BMOWH cursor, bold; /* Highlight*/
    else /* Maint receipt*/
      set PB0BM003.PB0BMOWH cursor, bold, protect; /* Highlight*/
    end
    converseLib.validationFailed(59); /* Indicate missing or invalid*/
    PB0BW03.PB0BWOWH = PB0BM003.PB0BMOWH; /* Save to wk area*/
   /* OVE '  ' TO PB0BW03.PB0BWOWH;  /* Save to wk area*/

  end

end // end PB0BS31

// Edit Orig PO keys
Function PB0BS33()

   /* ------------------------------------------------------------*/
    /* Check that orig receipt PO, PO ID, or SO entered.*/
    /* If BGRADE ftwr receipt, then PO and SO EQ zero is OK.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BM-OCI == 0 /* If SO cust ord id EQ 0*/
   || PB0BM003.PB0BM-ONI == 0) /* Or SO Nike ord id EQ 0*/
    if (PB0BM003.PB0BMOPO == 0) /* If PO number EQ 0*/
      if (PB0BM003.PB0BMOPY == " " /* If POID prod year EQ ' '*/
      )                            /* --------------------- y2k out*/
                                   /* ------------------*/
          /* OR PB0BM003.PB0BMOPY EQ 00;   /* Or POID prod year EQ 0*/
          /* --------------------- y2k out ------------------*/


            /* If BGRADE ftwr receipt, then PO and SO EQ zero is OK*/

        if (PB0BM003.PB0BMOGP == "02" /* If ftwr gpc '02' receipt*/
         && PB0BM003.PB0BMOQU == "02") /* And if quality '02' BGRADE*/

                           /* (Save PO keys to wk area)*/
          PB0BW03.PB0BWOPO = PB0BM003.PB0BMOPO; /* Save PO*/
          PB0BW03.PB0BWOPY = PB0BM003.PB0BMOPY; /* Save prod yr*/
          PB0BW03.PB0BWOPM = PB0BM003.PB0BMOPM; /* Save prod mo*/
          PB0BW03.PB0BWODM = PB0BM003.PB0BMODM; /* Save del mo*/
          PB0BW03.PB0BWOFY = PB0BM003.PB0BMOFY; /* Save fcty*/
          PB0BW03.PB0BWOTY = PB0BM003.PB0BMOTY; /* Save PO type*/

          return;

        else /* If not ftwr BGRADE receipt*/

          if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
            set PB0BM003.PB0BMOPO cursor, bold; /* PO*/
            set PB0BM003.PB0BM-OCI bold; /* SO-cust ord id*/
            set PB0BM003.PB0BM-ONI bold; /* SO-nike ord id*/
            set PB0BM003.PB0BMOPY bold; /* Prod yr*/
            set PB0BM003.PB0BMOPM bold; /* Prod month*/
            set PB0BM003.PB0BMODM bold; /* Prod del month*/
            set PB0BM003.PB0BMOFY bold; /* Factory*/
            set PB0BM003.PB0BMOTY bold; /* PO Type*/
          else /* Maint receipt*/
            set PB0BM003.PB0BMOPO cursor, bold, protect; /* PO*/
            set PB0BM003.PB0BM-OCI bold, protect; /* SO-cust ord id*/
            set PB0BM003.PB0BM-ONI bold, protect; /* SO-nike ord id*/
            set PB0BM003.PB0BMOPY bold, protect; /* Prod yr*/
            set PB0BM003.PB0BMOPM bold, protect; /* Prod month*/
            set PB0BM003.PB0BMODM bold, protect; /* Prod del month*/
            set PB0BM003.PB0BMOFY bold, protect; /* Factory*/
            set PB0BM003.PB0BMOTY bold, protect; /* PO Type*/
          end
          PB0BW01.PB0BWERL = "PB0BS33";
          converseLib.validationFailed(21); /* Data needed*/
          return;
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
    /* Edit PO keys by verifying against DPRODC.VPOHDR01.*/
   /* ------------------------------------------------------------*/
             /* (Save PO keys)*/
  PB0BW03.PB0BWOPO = PB0BM003.PB0BMOPO; /* Save*/
  PB0BW03.PB0BWOPY = PB0BM003.PB0BMOPY; /* Save*/
  PB0BW03.PB0BWOPM = PB0BM003.PB0BMOPM; /* Save*/
  PB0BW03.PB0BWODM = PB0BM003.PB0BMODM; /* Save*/
  PB0BW03.PB0BWOFY = PB0BM003.PB0BMOFY; /* Save*/
  PB0BW03.PB0BWOTY = PB0BM003.PB0BMOTY; /* Save*/
  if (PB0BM003.PB0BMOPO != 0) /* PO Nbr entered*/
    PB0BS35(); /* Edit PO Nbr key*/
  else
    if (PB0BM003.PB0BMOPY != " " /* Prod year*/
    )                            /* --------------------- y2k out*/
                                   /* ---------------*/
      /* AND PB0BM003.PB0BMOPY NE 00;     /* Prod year*/
      /* --------------------- y2k out ---------------*/
      /* AND PB0BM003.PB0BMOPM NE 0;       /* Prod month entered*/
      /* AND PB0BM003.PB0BMODM NE 0;       /* Delivery month entered*/
      /* AND PB0BM003.PB0BMOFY NE ' ';     /* Factory entered*/
      /* AND PB0BM003.PB0BMOTY NE ' ';     /* PO type entered*/
      if (PB0BM003.PB0BMOGP == "02")
        if (PB0BM003.PB0BMOTY == "FT"
         || PB0BM003.PB0BMOTY == "QQ"
         || PB0BM003.PB0BMOTY == "OR"
         || PB0BM003.PB0BMOTY == "S1"
         || PB0BM003.PB0BMOTY == "S2"
         || PB0BM003.PB0BMOTY == "S3"
         || PB0BM003.PB0BMOTY == "S4"
         || PB0BM003.PB0BMOTY == "ST")
          PB0BS37(); /* Edit PO ID key*/
        else
          PB0BW01.PB0BWERL = "PB0BS33"; /* Process id*/
          converseLib.validationFailed(273); /* Invalid gpc for p.o. id*/
          if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
            set PB0BM003.PB0BMOPY cursor, bold; /* Prod yr*/
            set PB0BM003.PB0BMOPM bold; /* Prod month*/
            set PB0BM003.PB0BMODM bold; /* Prod del month*/
            set PB0BM003.PB0BMOFY bold; /* Factory*/
            set PB0BM003.PB0BMOTY bold; /* PO Type*/
          else /* Maint receipt*/
            set PB0BM003.PB0BMOPY cursor, bold, protect; /* Prod yr*/
            set PB0BM003.PB0BMOPM bold, protect; /* Prod month*/
            set PB0BM003.PB0BMODM bold, protect; /* Prod del month*/
            set PB0BM003.PB0BMOFY bold, protect; /* Factory*/
            set PB0BM003.PB0BMOTY bold, protect; /* PO Type*/
          end
          PB0BW03.PB0BWOPY = " "; /* Clear Prod yr*/
          PB0BW03.PB0BWOPM = 0; /* Clear Prod month*/
          PB0BW03.PB0BWODM = 0; /* Clear Prod del month*/
          PB0BW03.PB0BWOFY = " "; /* Clear Factory*/
          PB0BW03.PB0BWOTY = " "; /* Clear p.o. type*/
        end
      else
        PB0BW01.PB0BWERL = "PB0BS33"; /* Process id*/
        converseLib.validationFailed(162); /* Invalid p.o. type for p.o. id*/
        if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
          set PB0BM003.PB0BMOPY cursor, bold; /* Prod yr*/
          set PB0BM003.PB0BMOPM bold; /* Prod month*/
          set PB0BM003.PB0BMODM bold; /* Prod del month*/
          set PB0BM003.PB0BMOFY bold; /* Factory*/
          set PB0BM003.PB0BMOTY bold; /* PO Type*/
        else /* Maint receipt*/
          set PB0BM003.PB0BMOPY cursor, bold, protect; /* Prod yr*/
          set PB0BM003.PB0BMOPM bold, protect; /* Prod month*/
          set PB0BM003.PB0BMODM bold, protect; /* Prod del month*/
          set PB0BM003.PB0BMOFY bold, protect; /* Factory*/
          set PB0BM003.PB0BMOTY bold, protect; /* PO Type*/
        end
        PB0BW03.PB0BWOPY = " "; /* Clear Prod yr*/
        PB0BW03.PB0BWOPM = 0; /* Clear Prod month*/
        PB0BW03.PB0BWODM = 0; /* Clear Prod del month*/
        PB0BW03.PB0BWOFY = " "; /* Clear Factory*/
        PB0BW03.PB0BWOTY = " "; /* Clear p.o. type*/
      end
    end
  end

end // end PB0BS33

// Edit Orig PO Nbr key
Function PB0BS35()
   /* ------------------------------------------------------------*/
   /* Edit PO Nbr key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM003.PB0BMOGP; /* GPC cd*/
   /* MOVE PB0BM003.po-reg-cd TO VPOHDR02.po-reg-cd;/* PO region*/
  VPOHDR02.PO-REG-CD = "01"; /* PO region*/
  VPOHDR02.PC3PONBR = PB0BM003.PB0BMOPO; /* PO nbr*/


  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0BW03.PB0BWO-PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save REG*/
      PB0BW03.PCFSECD = VPOHDR02.PCFSECD; /* Save season cd*/
      PB0BW03.PB0BWOSE = VPOHDR02.PCFSECD; /* Save season cd*/

      PB0BW03.PC3POIDT = VPOHDR02.PC3POIDT; /* Save to wk area*/
      PB0BW03.PB0BWOFY = VPOHDR02.FY1FCTYC; /* Save to wk area*/
      PB0BM003.PB0BMOFY = VPOHDR02.FY1FCTYC; /* To map fld*/
      PB0BW03.PB0BWOTY = VPOHDR02.PC4ORTYP; /* Save to wk area*/
      PB0BM003.PB0BMOTY = VPOHDR02.PC4ORTYP; /* To map fld*/
      PB0BW03.PB0BWOPS = VPOHDR02.YPUCD; /* save status to wk area*/

      PB0BW01.PB0BWDPW = VPOHDR02.PC3POIDT; /* Update PO Id*/
      PB0BW03.PB0BWOPY = PB0BW01.PB0BWDPY; /* Save to wk area*/

      if (PB0BM003.PB0BMOGP == "03")
        PB0BM003.PB0BMOPY = VPOHDR02.PCFSECD; /* To map fld*/
      else
        PB0BM003.PB0BMOPY = PB0BW01.PB0BWDPY; /* To map fld*/
      end

      PB0BW03.PB0BWOPM = PB0BW01.PB0BWDPM; /* Save to wk area*/
      PB0BM003.PB0BMOPM = PB0BW01.PB0BWDPM; /* To map fld*/
      PB0BW03.PB0BWODM = PB0BW01.PB0BWDPD; /* Save to wk area*/
      PB0BM003.PB0BMODM = PB0BW01.PB0BWDPD; /* To map fld*/

      PB0BW03.PB0BW-EDIT-ORIG-FLAG = "Y"; /* Set flag to 'Y'*/

      if (PB0BW01.PB0BWFUN == "3") /* Add function*/

      /* Re-check PO TYPE for needed QU default*/
        if (PB0BM003.PB0BMOTY == "QQ") /* PO type = 'QQ' (bgrade)*/
          PB0BW03.PB0BWOQU = "02"; /* Assign QU 02 for bgrade*/
          PB0BM003.PB0BMOQU = "02"; /* Assign QU 02 for bgrade*/
        end

        PB0BS-3510(); /* Verify item on poitm table*/

      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      if (PB0BW01.PB0BWFUN == "3") /* Add receipt*/
        set PB0BM003.PB0BMOPO cursor, bold; /* Highlight field*/
      else /* Maint receipt*/
        set PB0BM003.PB0BMOPO cursor, bold, protect; /* Highlight field*/
      end
      PB0BW01.PB0BWERL = "PB0BS35"; /* Process id*/
      converseLib.validationFailed(69); /* Indicate error message*/
   /* MOVE 0 TO PB0BW03.PB0BWOPO;   /* Clear save area*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS35 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


end // end PB0BS35

// Edit Orig PO ID key
Function PB0BS37()
   /* ------------------------------------------------------------*/
   /* Edit PO ID key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMODM < "01" /* ====> production delivery month*/
   || PB0BM003.PB0BMODM > "12") /* ====> production delevery month*/

    PB0BW01.PB0BWERL = "PB0BS37"; /* Process id*/
    set PB0BM003.PB0BMODM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/
    return;

  end

  if (PB0BM003.PB0BMOPM < "01" /* ====> production month*/
   || PB0BM003.PB0BMOPM > "12") /* ====> production month*/

    PB0BW01.PB0BWERL = "PB0BS37"; /* Process id*/
    set PB0BM003.PB0BMOPM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/
    return;

  end

  if (PB0BM003.PB0BMOPY > "99" /* ====> production year month*/
   || PB0BM003.PB0BMOPY < "00") /* ====> production year month*/

    PB0BW01.PB0BWERL = "PB0BS37"; /* Process id*/
    set PB0BM003.PB0BMOPY cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/
    return;

  end


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM003.PB0BMOGP; /* GPC cd*/
  VPOHDR02.PO-REG-CD = "01"; /* region*/
   /* ------------------------ y2k out-------------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;     /* Century*/
   /* ------------------------ y2k out-------------------------*/
   /* ------------------------ y2k in -------------------------*/
  if (PB0BW03.PB0BWOPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* ------------------------ y2k in -------------------------*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWOPY; /* Prod yr*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWOPM; /* Prod month*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWODM; /* Prod del month*/
  VPOHDR02.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/
  VPOHDR02.FY1FCTYC = PB0BW03.PB0BWOFY; /* Factory*/
  VPOHDR02.PC4ORTYP = PB0BW03.PB0BWOTY; /* PO Type*/


  try
    call "VPOHDR02" ("SA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0BW03.PB0BWO-PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save REG*/
      PB0BW03.PCFSECD = VPOHDR02.PCFSECD; /* Save Season cd*/

      PB0BW03.PB0BWOPO = VPOHDR02.PC3PONBR; /* Save to wk area*/
      PB0BM003.PB0BMOPO = VPOHDR02.PC3PONBR; /* To Map fld*/

      PB0BW03.PB0BWOPS = VPOHDR02.YPUCD; /* Save status to wk area*/

      PB0BW03.PB0BW-EDIT-ORIG-FLAG = "Y"; /**/
      if (PB0BW01.PB0BWFUN == "3") /* ADD FUNCTION*/
        PB0BS-3510(); /* VERIFY ITEM ON POITM TABLE*/
      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      PB0BW01.PB0BWERL = "PB0BS37"; /* Process id*/
      converseLib.validationFailed(313); /* Indicate error message*/

      set PB0BM003.PB0BMOPY cursor, bold; /* Prod yr*/
      set PB0BM003.PB0BMOPM cursor, bold; /* Prod month*/
      set PB0BM003.PB0BMODM cursor, bold; /* Prod del month*/
      set PB0BM003.PB0BMOFY cursor, bold; /* Factory*/
      set PB0BM003.PB0BMOTY cursor, bold; /* PO Type*/

     /* MOVE ' ' TO PB0BW03.PB0BWOPY;        /* Clear Prod yr*/
     /* MOVE ' ' TO PB0BW03.PB0BWOPM;        /* Clear Prod month*/
     /* MOVE ' ' TO PB0BW03.PB0BWODM;        /* Clear Prod del month*/
     /* MOVE ' ' TO PB0BW03.PB0BWOFY;        /* Clear Factory*/
     /* MOVE ' ' TO PB0BW03.PB0BWOTY;        /* Clear PO Type*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS37"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Exit to redisplay map*/



end // end PB0BS37

// Edit Transp Mode cd
Function PB0BS39()
  PB0BW03.YMTCD = PB0BM003.YMTCD; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.YMTCD in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0BW03.YMTSDESC = YMTTBL.YMTSDESC[sysVar.arrayIndex]; /* Get desc*/
    PB0BM003.YMTSDESC = YMTTBL.YMTSDESC[sysVar.arrayIndex]; /* Get desc*/
    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0BW01.PB0BWERL = "PB0BS39"; /* Module identification*/
    set PB0BM003.YMTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/
   /* OVE '  ' TO PB0BW03.YMTCD;     /* Clear wk area*/
   /* OVE '  ' TO PB0BW03.YMTSDESC;  /* Clear wk area*/

  end


end // end PB0BS39

// Edit PO Receiving Rpt no.
Function PB0BS41()
   /* ------------------------------------------------------------*/
                    /* Edit PO Receiving Rpt no.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWRRN = PB0BM003.PB0BMRRN; /* Save to wk area*/


  if (PB0BW01.PB0BWFUN == "3") /* Function #3 - item header add*/

    if (PB0BM003.PB0BMRRN <= 0 /* Invalid RRN entered*/
     && converseVar.eventKey not pf3) /* and not PF3*/
      PB0BW01.PB0BWERL = "PB0BS41"; /* Module identification*/
      set PB0BM003.PB0BMRRN cursor, bold; /* Highlight field*/
      converseLib.validationFailed(349); /* Indicate error message*/
      return; /* Return to previous process*/
    end

  else

    if (PB0BM003.PB0BMRRN >= 0                 /* Valid RRN entered*/
     && PB0BM003.PB0BMOPO == PB0BM003.PB0BMAPO /* and not apply-to*/
     && PB0BM003.PB0BMOPY == PB0BM003.PB0BMAPY 
     && PB0BM003.PB0BMOPM == PB0BM003.PB0BMAPM 
     && PB0BM003.PB0BMODM == PB0BM003.PB0BMADM 
     && PB0BM003.PB0BMOFY == PB0BM003.PB0BMAFY 
     && PB0BM003.PB0BMOTY == PB0BM003.PB0BMATY 
     && PB0BM003.PB0BMOWH == PB0BM003.PB0BMAWH 
     && PB0BM003.PB0BMOGP == PB0BM003.PB0BMAGP 
     && PB0BM003.PB0BMOST == PB0BM003.PB0BMAST 
     && PB0BM003.PB0BMOCL == PB0BM003.PB0BMACL 
     && PB0BM003.PB0BMODI == PB0BM003.PB0BMADI 
     && PB0BM003.PB0BMOQU == PB0BM003.PB0BMAQU 
     && PB0BM003.PB0BMOSP == PB0BM003.PB0BMASP 
     && PB0BM003.PB0BMOPK == PB0BM003.PB0BMAPK 
     && PB0BM003.PB0BMOUM == PB0BM003.PB0BMAUM 
     && PB0BM003.PB0BMOOG == PB0BM003.PB0BMAOG)
       /* continue on*/
    else
      if (PB0BM003.PB0BMRRN >= 0 /* Valid RRN entered*/
       && converseVar.eventKey is pf3)
         /* continue on*/
      else
        if (PB0BM003.PB0BMRRN <= 0) /* Invalid RRN entered*/
          PB0BW01.PB0BWERL = "PB0BS41"; /* Module id*/
          set PB0BM003.PB0BMRRN cursor, bold; /* Highlight field*/
          converseLib.validationFailed(349); /* Indicate error message*/
          return; /* Return to previous process*/
        end
      end
    end

  end


end // end PB0BS41

// Edit PO Receiving Rpt Date
Function PB0BS43()

   /* ------------------------------------------------------------*/
   /* Validate Receiving date range via TA00040.*/
   /* ------------------------------------------------------------*/

  PB0BW01.PB0BWDTW = PB0BM003.PB0BMRDT; /* Save to wk area*/
        /* (Check Receiving date via TA00040)*/

  set TA2REC empty; /* Clear work record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Date option*/
  TA2REC.TA2GRTYP = "A"; /* Date type*/
  TA2REC.TA2GRGAN = PB0BW01.PB0BWDTW; /* To date fmt 'A'*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Get date range from TA00040*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date returned*/
    set PB0BM003.PB0BMRDT cursor, bold; /* Highlight field*/
    PB0BW01.PB0BWERL = "PB0BS43"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate error message*/
   /* OVE 0 TO PB0BW03.PB0BWRDT;     /* Clear wk area*/
  else
    PB0BW03.PB0BWRDT = TA2REC.TA2GRGGN; /* Save to wk area*/
  end


end // end PB0BS43

// Edit Apply-To Own Grp cd
Function PB0BS51()
  PB0BW03.PB0BWAOG = PB0BM003.PB0BMAOG; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAOG in XOWTBL.XOWCD /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMAOG != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS51"; /* Module identification*/
      set PB0BM003.PB0BMAOG cursor, bold; /* Highlight field*/
      converseLib.validationFailed(119); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWAOG;       /* Clear wk area*/
    else
      PB0BM003.PB0BMAOG = "00"; /* Assign default*/
      PB0BW03.PB0BWAOG = "00"; /* Assign default*/
    end

  end

                                                            /* ***/
end // end PB0BS51

// Edit Apply-To Unit of Meas cd
Function PB0BS53()
  PB0BW03.PB0BWAUM = PB0BM003.PB0BMAUM; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAUM in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMAUM != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS53"; /* Module identification*/
      set PB0BM003.PB0BMAUM cursor, bold; /* Highlight field*/
      converseLib.validationFailed(56); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWAUM;       /* Clear wk area*/
    else
      PB0BM003.PB0BMAUM = "01"; /* Assign default*/
      PB0BW03.PB0BWAUM = "01"; /* Assign default*/
    end

  end

                                                            /* ***/
end // end PB0BS53

// Edit Apply-To Pkg Type cd
Function PB0BS55()
  PB0BW03.PB0BWAPK = PB0BM003.PB0BMAPK; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAPK in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMAPK != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS55"; /* Module identification*/
      set PB0BM003.PB0BMAPK cursor, bold; /* Highlight field*/
      converseLib.validationFailed(55); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWAPK;       /* Clear wk area*/
    else
      PB0BM003.PB0BMAPK = "00"; /* Assign default*/
      PB0BW03.PB0BWAPK = "00"; /* Assign default*/
    end

  end


end // end PB0BS55

// Edit Apply-to ISEG/CXREF
Function PB0BS57()

   /* ------------------------------------------------------------*/
   /* Edit apply-to ISEG and apply-to CXREF using DPRODC.VPRDCU01*/
   /* ------------------------------------------------------------*/

   /* *=========================**/
   /* *  Default ISEG if blank  **/
   /* *=========================**/

  if (PB0BM003.PB0BMASP == " ") /* If apply-to ISEG blank*/
    PB0BM003.PB0BMASP = "000"; /* Default apply-to ISEG to '000'*/
    PB0BW03.PB0BWASP = "000"; /* Save apply-to '000' ISEG to WS*/
  else /* apply-to ISEG not blank*/
    PB0BW03.PB0BWASP = PB0BM003.PB0BMASP; /* Save ISEG to WS*/
  end


   /* *===========================================================**/
   /* *  Check if CXREF is blank.                                 **/
   /* *  If CXREF is blank, lookup CXREF on PRDCU using ISEG only.**/
   /* *  If CXREF isn't blank and ISEG EQ zero, use only CXREF    **/
   /* *  in lookup.  If CXREF isn't blank and ISEG isn't blank,   **/
   /* *  use ISEG in lookup and check retrieved CXREF against map **/
   /* *  CXREF.                                                   **/
   /* *===========================================================**/

  if (PB0BM003.PB0BM-ACXREF == " ") /* If apply-to CXREF blank*/

    set PC2REC empty; /* Set PRDCU lookup record empty*/

    PC2REC.XGPCD = PB0BM003.PB0BMAGP; /* Load apply-to GPC for lookup*/
    PC2REC.PC2INSEG = PB0BM003.PB0BMASP; /* Load ISEG for lookup*/

    try
      call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Use ISEG*/

     /* *======================**/
     /* *  Check Call Results  **/
     /* *======================**/

    if (sysVar.errorCode == "00000000") /* Successful call*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        /* pcf210 begin - validate for SAP countries*/
        if (PC2REC.XCTCD in PCCTTBL.XCTCD)
          converseLib.validationFailed(576);
          set PB0BM003.PB0BM-ACXREF cursor, bold;
          set PB0BM003.PB0BMASP cursor, bold;
          PB0BW01.PB0BWERL = "PB0BS57";
        end
        /* pcf210 end*/
        PB0BM003.PB0BM-ACXREF = PC2REC.PC2CUXID; /* Move CXREF to map*/
        PB0BW03.PB0BW-ACXREF = PC2REC.PC2CUXID; /* Move CXREF to WS*/
        return; /* Return to calling process*/
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* No row found to match the ISEG*/
        PB0BW01.PB0BWERL = "PB0BS57"; /* Module identification*/
        set PB0BM003.PB0BMASP cursor, bold; /* Highlight field*/
        converseLib.validationFailed(51); /* Indicate invalid ISEG*/
        /* MOVE '  ' TO PB0BW03.PB0BWasp; /* Clear WS apply-to ISEG*/
        return; /* Return to previous process*/
      end
    end /* End successful call check*/

  else /* If CXREF not blank*/

    if (PB0BM003.PB0BMASP == "000") /* If ISEG EQ zero*/

      set PC2REC empty; /* Set PRDCU lookup record empty*/

      PC2REC.XGPCD = PB0BM003.PB0BMAGP; /* Load GPC for lookup*/
      PC2REC.PC2CUXID = PB0BM003.PB0BM-ACXREF;
                                   /* Load CXREF for lookup*/

      try
        call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Use CXREF*/

      /* *======================**/
      /* *  Check Call Results  **/
      /* *======================**/

      if (sysVar.errorCode == "00000000") /* Successful call*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found with CXREF*/
          /* pcf210 begin - validate for SAP countries*/
          if (PC2REC.XCTCD in PCCTTBL.XCTCD)
            converseLib.validationFailed(576);
            set PB0BM003.PB0BM-ACXREF cursor, bold;
            set PB0BM003.PB0BMASP cursor, bold;
            PB0BW01.PB0BWERL = "PB0BS57";
          end
          /* pcf210 end*/
          PB0BM003.PB0BMASP = PC2REC.PC2INSEG; /* Save ISEG to map*/
          PB0BW03.PB0BWASP = PC2REC.PC2INSEG; /* Save ISEG to WS*/
          PB0BW03.PB0BW-ACXREF = PB0BM003.PB0BM-ACXREF;
                                  /* Save CXREF to WS*/
          return; /* Return to previous process*/
        end

        if (SQLCA.VAGen_SQLCODE == 100) /* No row found with CXREF*/
          PB0BW01.PB0BWERL = "PB0BS57"; /* Module identification*/
          set PB0BM003.PB0BM-ACXREF cursor, bold; /* Highlight*/
          converseLib.validationFailed(045); /* Indicate CXREF invalid*/
          /* MOVE '  ' TO PB0BW03.PB0BW-acxREF;/* Clear WS apply-to CXREF*/
          return; /* Return to previous process*/
        end
      end

    else /* If ISEG NE zero*/

      set PC2REC empty; /* Set PRDCU lookup record empty*/

      PC2REC.XGPCD = PB0BM003.PB0BMAGP; /* Load GPC for lookup*/
      PC2REC.PC2INSEG = PB0BM003.PB0BMASP; /* Load ISEG for lookup*/

      try
        call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Use ISEG*/

       /* *======================**/
       /* *  Check Call Results  **/
       /* *======================**/

      if (sysVar.errorCode == "00000000") /* Successful call*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Row found with ISEG*/

          /* pcf210 begin - validate for SAP countries*/
          if (PC2REC.XCTCD in PCCTTBL.XCTCD)
            converseLib.validationFailed(576);
            set PB0BM003.PB0BM-ACXREF cursor, bold;
            set PB0BM003.PB0BMASP cursor, bold;
            PB0BW01.PB0BWERL = "PB0BS57";
          end
          /* pcf210 end*/
           /* Check table CXREF against map CXREF*/

          if (PB0BM003.PB0BM-ACXREF != PC2REC.PC2CUXID) /* Not CXREF match*/
            PB0BW01.PB0BWERL = "PB0BS57"; /* Module identification*/

            set PB0BM003.PB0BMASP cursor, bold; /* Highlight*/
            set PB0BM003.PB0BM-ACXREF bold; /* Highlight*/
            converseLib.validationFailed(289); /* Indicate ISEG does not match CXREF*/
            /* MOVE '  ' TO PB0BW03.PB0BW-acxREF;/* Clear WS CXREF*/
          end

          PB0BW03.PB0BW-ACXREF = PB0BM003.PB0BM-ACXREF;
                                  /* Save CXREF to WS*/
          return; /* Return to previous process*/
        end

        if (SQLCA.VAGen_SQLCODE == 100) /* No row found with ISEG*/

          PB0BW01.PB0BWERL = "PB0BS57"; /* Module identification*/

          set PB0BM003.PB0BMASP cursor, bold; /* Highlt field*/
          converseLib.validationFailed(51); /* Indicate invalid ISEG*/
          /* MOVE '  ' TO PB0BW03.PB0BWasp; /* Clear WS apply-to ISEG*/

          return; /* Return to previous process*/
        end /* End check for row found with apply-to*/
                                   /* ISEG*/
      end
    end /* End check for ISEG EQ zero*/

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to user.*/
    /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end


    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    PB0BW01.PB0BWERL = "PB0BS57"; /* Process number*/
    TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

    exit stack; /* Return to previous process*/

  end /* End check for CXREF blank*/

end // end PB0BS57

// Edit Apply-To Quality cd
Function PB0BS59()


  PB0BW03.PB0BWAQU = PB0BM003.PB0BMAQU; /* Save to wk area*/

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAQU in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    return;
  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMAQU != " ") /* QU not equal spaces*/
      PB0BW01.PB0BWERL = "PB0BS59"; /* Module identification*/
      set PB0BM003.PB0BMAQU cursor, bold; /* Highlight field*/
      converseLib.validationFailed(54); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWAQU;         /* Clear wk area*/
    else /* QU equal spaces*/
      if (PB0BM003.PB0BMATY == "QQ") /* PO type = 'QQ' (bgrade)*/
        PB0BW03.PB0BWAQU = "02"; /* Assign QU 02 for bgrade*/
        PB0BM003.PB0BMAQU = "02"; /* Assign QU 02 for bgrade*/
      else
        if (PB0BM003.PB0BMAPO == 0) /* PO = 0         (bgrade)*/
          if (PB0BM003.PB0BMAPY == " " /* PO ID Prod year = ' '*/
          )                            /* ----------------------- y2k out ------------------*/
           /* OR PB0BM003.PB0BMAPY EQ 00;      /* PO ID Prod year = 0*/
           /* ----------------------- y2k out ------------------*/
            PB0BW03.PB0BWAQU = "02"; /* Assign QU 02 for bgrade*/
            PB0BM003.PB0BMAQU = "02"; /* Assign QU 02 for bgrade*/
          else /* Not bgrade*/
            PB0BW03.PB0BWAQU = "01"; /* Assign QU 01*/
            PB0BM003.PB0BMAQU = "01"; /* Assign QU 01*/
          end
        else /* Not bgrade*/
          PB0BW03.PB0BWAQU = "01"; /* Assign QU 01*/
          PB0BM003.PB0BMAQU = "01"; /* Assign QU 01*/
        end
      end
    end
  end

end // end PB0BS59

// Edit Apply-To Dimension cd
Function PB0BS61()
  PB0BW03.PB0BWADI = PB0BM003.PB0BMADI; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMADI in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    return; /* Return to calling process*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    if (PB0BM003.PB0BMADI != " ") /* Not spaces*/
      PB0BW01.PB0BWERL = "PB0BS61"; /* Module identification*/
      set PB0BM003.PB0BMADI cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Indicate missing or invalid*/
   /* MOVE '  ' TO PB0BW03.PB0BWADI;       /* Clear wk area*/
    else
      PB0BW03.PB0BWADI = "00"; /* Assign default*/
      PB0BM003.PB0BMADI = "00"; /* Assign default*/
    end

  end


end // end PB0BS61

// Edit Apply-To Color id
Function PB0BS63()
   /* ------------------------------------------------------------*/
   /* Save color code to wk area.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWACL = PB0BM003.PB0BMACL; /* Save to wk area*/
  PB0BW03.PB0BWASC = " "; /* Clear pg-scn-sty-ind*/


   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAST == " ")

    PB0BW01.PB0BWERL = "PB0BS63"; /* Module identification*/
    set PB0BM003.PB0BMAST cursor, bold; /* Highlight*/
    set PB0BM003.PB0BMACL bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0BM003.PB0BMOGP; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0BM003.PB0BMACL; /* ===> color code*/
  PG2REC.SY1STNBR = PB0BM003.PB0BMAST; /* ===> style code*/
  PG2REC.XDMCD = PB0BM003.PB0BMADI; /* ===> dim code*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0BW03.PB0BWASC = PG2REC.PG2SCRFL; /* Apply pg-scn-sty-ind*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0BW01.PB0BWERL = "PB0BS63"; /* Module identification*/
      set PB0BM003.PB0BMACL cursor, bold;
      converseLib.validationFailed(197); /* Indicate invalid message*/
   /* MOVE '   ' TO PB0BW03.PB0BWACL;      /* Clear wk area*/
      return; /* Return to previous process*/

    end

  end


  converseLib.clearScreen();
  
  set PB0BM003.PB0BMACL cursor, bold;
  converseLib.validationFailed(10);

  exit stack; /* Exit to redisplay map*/


end // end PB0BS63

// Edit Apply-To Style no
Function PB0BS65()

   /* ------------------------------------------------------------*/
   /* Save entered style into wk area.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWAST = PB0BM003.PB0BMAST; /* Save to wk area*/


   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PB0BM003.PB0BMOGP; /* ===> GPC*/
  PG2REC.SY1STNBR = PB0BM003.PB0BMAST; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    if (PG2REC.SY4SZSCL != PB0BW03.SY4SZSCL) /* Size scale NE Orig style*/

      PB0BW01.PB0BWERL = "PB0BS65"; /* Module identification*/
      set PB0BM003.PB0BMAST cursor, bold; /* Highlight field*/
      converseLib.validationFailed(52); /* Indicate error message*/
      return; /* Return to previous process*/

    else

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    PB0BW01.PB0BWERL = "PB0BS65"; /* Module identification*/
    set PB0BM003.PB0BMAST cursor, bold; /* Highlight field*/
    converseLib.validationFailed(52); /* Indicate error message*/
    return; /* Return to previous process*/

  end


  PB0BW01.PB0BWERL = "PB0BS65"; /* Module identification*/
  converseLib.clearScreen();
  
  set PB0BM003.PB0BMAST cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Exit to redisplay map*/


end // end PB0BS65

// Edit warehouse code
Function PB0BS67()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMAWH in XWHTBL.XWHCD) /* Code in table*/

    if (PB0BM003.PB0BMAWH == "  ") /* whse equal to blank stk transfer*/
      PB0BW03.PB0BWAWH = PB0BM003.PB0BMAWH; /* Save to wk area*/
    else
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        PB0BW03.PB0BWAWH = PB0BM003.PB0BMAWH; /* Save to wk area*/
      end
    end

    /* pcf210 begin - validate for SAP countries*/
    if (PB0BM003.PB0BMAWH > " "
     && PB0BM003.PB0BM-ACXREF == " ")
      if (PB0BM003.PB0BMAWH in PCCTTBL.XWHCD)
        converseLib.validationFailed(576);
        set PB0BM003.PB0BMAWH cursor, bold;
        PB0BW01.PB0BWERL = "PB0BS67";
      end
    end

    /* pcf210 end*/
  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0BW01.PB0BWERL = "PB0BS67"; /* Module identification*/
    set PB0BM003.PB0BMAWH cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/
    PB0BW03.PB0BWAWH = PB0BM003.PB0BMAWH; /* Save to wk area*/
   /* OVE '  ' TO PB0BW03.PB0BWAWH;  /* Save to wk area*/

  end

end // end PB0BS67

// Edit Apply-To PO keys
Function PB0BS69()

   /* ------------------------------------------------------------*/
    /* Check that apply-to PO, PO ID, or SO entered.*/
    /* If BGRADE ftwr receipt, then PO and SO EQ zero is OK.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BM-ACI == 0 /* If SO cust ord EQ 0*/
   || PB0BM003.PB0BM-ANI == 0) /* Or SO Nike ord EQ 0*/
    if (PB0BM003.PB0BMAPO == 0) /* If PO number EQ 0*/
      if (PB0BM003.PB0BMAPY == " " /* If POID prod yr EQ ' '*/
      )                            /* --------------------- y2k out*/
                                   /* ------------------*/
        /* OR PB0BM003.PB0BMAPY EQ 00;/* or POID prod yr EQ 0*/
        /* --------------------- y2k out ------------------*/

            /* If BGRADE ftwr receipt, then PO and SO EQ zero is OK*/

        if (PB0BM003.PB0BMAGP == "02" /* If ftwr gpc '02' receipt*/
         && PB0BM003.PB0BMAQU == "02") /* And if quality '02' BGRADE*/

                     /* (Save PO keys to wk area)*/
          PB0BW03.PB0BWAPO = PB0BM003.PB0BMAPO; /* Save PO*/
          PB0BW03.PB0BWAPY = PB0BM003.PB0BMAPY; /* Save prod yr*/
          PB0BW03.PB0BWAPM = PB0BM003.PB0BMAPM; /* Save prod mo*/
          PB0BW03.PB0BWADM = PB0BM003.PB0BMADM; /* Save del mo*/
          PB0BW03.PB0BWAFY = PB0BM003.PB0BMAFY; /* Save fcty*/
          PB0BW03.PB0BWATY = PB0BM003.PB0BMATY; /* Save PO type*/

          return; /* Return to previous process*/

        else /* If not ftwr BGRADE receipt*/
          set PB0BM003.PB0BMAPO cursor, bold; /* PO*/
          set PB0BM003.PB0BM-ACI bold; /* SO-cust ord id*/
          set PB0BM003.PB0BM-ANI bold; /* SO-nike ord id*/
          set PB0BM003.PB0BMAPY bold; /* Prod yr*/
          set PB0BM003.PB0BMAPM bold; /* Prod month*/
          set PB0BM003.PB0BMADM bold; /* Prod del month*/
          set PB0BM003.PB0BMAFY bold; /* Factory*/
          set PB0BM003.PB0BMATY bold; /* PO Type*/
          PB0BW01.PB0BWERL = "PB0BS69";
          converseLib.validationFailed(21); /* Data needed*/
          return;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* Edit PO keys by verifying against DPRODC.VPOHDR01.*/
   /* ------------------------------------------------------------*/
           /* (Save PO keys to wk area)*/
  PB0BW03.PB0BWAPO = PB0BM003.PB0BMAPO; /* Save*/
  PB0BW03.PB0BWAPY = PB0BM003.PB0BMAPY; /* Save*/
  PB0BW03.PB0BWAPM = PB0BM003.PB0BMAPM; /* Save*/
  PB0BW03.PB0BWADM = PB0BM003.PB0BMADM; /* Save*/
  PB0BW03.PB0BWAFY = PB0BM003.PB0BMAFY; /* Save*/
  PB0BW03.PB0BWATY = PB0BM003.PB0BMATY; /* Save*/

  if (PB0BM003.PB0BMAPO != 0) /* PO Nbr entered*/
    PB0BS71(); /* Edit PO Nbr key*/
  else
    if (PB0BM003.PB0BMAPY != "  " /* Prod yr entered*/
    )                             /* ----------------- y2k out*/
                                   /* --------------------*/
      /* AND PB0BM003.PB0BMAPY NE 00; /* Prod yr entered*/
      /* ----------------- y2k out --------------------*/
   /* OR PB0BM003.PB0BMAPM NE 0;      /* Prod month entered*/
   /* OR PB0BM003.PB0BMADM NE 0;      /* Delivery month entered*/
   /* OR PB0BM003.PB0BMAFY NE ' ';    /* Factory entered*/
   /* OR PB0BM003.PB0BMATY NE ' ';    /* PO type entered*/
      if (PB0BM003.PB0BMAGP == "02")
        if (PB0BM003.PB0BMATY == "FT"
         || PB0BM003.PB0BMATY == "QQ"
         || PB0BM003.PB0BMATY == "ST"
         || PB0BM003.PB0BMATY == "OR")
          PB0BS73(); /* Edit PO ID key*/
        else
          PB0BW01.PB0BWERL = "PB0BS69"; /* Process id*/
          converseLib.validationFailed(273); /* Invalid gpc for p.o. id*/
          set PB0BM003.PB0BMAPY cursor, bold; /* Prod yr*/
          set PB0BM003.PB0BMAPM bold; /* Prod month*/
          set PB0BM003.PB0BMADM bold; /* Prod del month*/
          set PB0BM003.PB0BMAFY bold; /* Factory*/
          set PB0BM003.PB0BMATY bold; /* PO Type*/
          PB0BW03.PB0BWAPY = " "; /* Clear Prod yr*/
          PB0BW03.PB0BWAPM = 0; /* Clear Prod month*/
          PB0BW03.PB0BWADM = 0; /* Clear Prod del month*/
          PB0BW03.PB0BWAFY = "   "; /* Clear Factory*/
          PB0BW03.PB0BWATY = "  "; /* Clear PO Type*/
        end
      else
        PB0BW01.PB0BWERL = "PB0BS69"; /* Process id*/
        converseLib.validationFailed(162); /* Invalid p.o. type for p.o. id*/
        set PB0BM003.PB0BMAPY cursor, bold; /* Prod yr*/
        set PB0BM003.PB0BMAPM bold; /* Prod month*/
        set PB0BM003.PB0BMADM bold; /* Prod del month*/
        set PB0BM003.PB0BMAFY bold; /* Factory*/
        set PB0BM003.PB0BMATY bold; /* PO Type*/
        PB0BW03.PB0BWAPY = " "; /* Clear Prod yr*/
        PB0BW03.PB0BWAPM = 0; /* Clear Prod month*/
        PB0BW03.PB0BWADM = 0; /* Clear Prod del month*/
        PB0BW03.PB0BWAFY = "   "; /* Clear Factory*/
        PB0BW03.PB0BWATY = "  "; /* Clear PO Type*/
      end
    end
  end

end // end PB0BS69

// Edit Apply-To PO Nbr key
Function PB0BS71()
   /* ------------------------------------------------------------*/
   /* Edit PO Nbr key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/


  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM003.PB0BMAGP; /* GPC cd*/
   /* MOVE PB0BM003.po-reg-cd TO VPOHDR02.po-reg-cd;/* po region*/
  VPOHDR02.PO-REG-CD = "01"; /* po region*/
  VPOHDR02.PC3PONBR = PB0BM003.PB0BMAPO; /* PO nbr*/


  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
                                  /* (S ) VPOHDR02*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0BW03.PB0BWA-PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save REG*/
      PB0BW03.PCFSECD = VPOHDR02.PCFSECD; /* Save season cd*/
      PB0BW03.PB0BWASE = VPOHDR02.PCFSECD; /* Save season cd*/

      PB0BW03.PC3POIDT = VPOHDR02.PC3POIDT; /* Save to wk area*/
      PB0BW03.PB0BWAFY = VPOHDR02.FY1FCTYC; /* Save to wk area*/
      PB0BM003.PB0BMAFY = VPOHDR02.FY1FCTYC; /* To map fld*/
      PB0BW03.PB0BWATY = VPOHDR02.PC4ORTYP; /* Save to wk area*/
      PB0BM003.PB0BMATY = VPOHDR02.PC4ORTYP; /* To map fld*/

      PB0BW03.PB0BWAPS = VPOHDR02.YPUCD; /* Save status to wk area*/

      PB0BW01.PB0BWDPW = VPOHDR02.PC3POIDT; /* Update PO Id*/
      PB0BW03.PB0BWAPY = PB0BW01.PB0BWDPY; /* Save to wk area*/

      if (PB0BM003.PB0BMAGP == "03")
        PB0BM003.PB0BMAPY = VPOHDR02.PCFSECD; /* To map fld*/
      else
        PB0BM003.PB0BMAPY = PB0BW01.PB0BWDPY; /* To map fld*/
      end

      PB0BW03.PB0BWAPM = PB0BW01.PB0BWDPM; /* Save to wk area*/
      PB0BM003.PB0BMAPM = PB0BW01.PB0BWDPM; /* To map fld*/
      PB0BW03.PB0BWADM = PB0BW01.PB0BWDPD; /* Save to wk area*/
      PB0BM003.PB0BMADM = PB0BW01.PB0BWDPD; /* To map fld*/

      PB0BW03.PB0BW-EDIT-ORIG-FLAG = "N"; /* Edit orig recpt = 'N"*/

      /* Re-check PO TYPE for needed QU default*/
      PB0B454(); /* Check for apply-to diff than orig*/
      if (PB0BW03.PB0BWAPU == "Y") /* Apply-to diff than orig*/
        if (PB0BM003.PB0BMATY == "QQ") /* PO type = 'QQ' (bgrade)*/
          PB0BW03.PB0BWAQU = "02"; /* Assign QU 02 for bgrade*/
          PB0BM003.PB0BMAQU = "02"; /* Assign QU 02 for bgrade*/
        end
      end

      PB0BS-3510(); /* Verify item on PO*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      set PB0BM003.PB0BMAPO cursor, bold; /* Highlight field*/
      PB0BW01.PB0BWERL = "PB0BS71"; /* Process id*/
      converseLib.validationFailed(69); /* Indicate error message*/
   /* MOVE 0 TO PB0BW03.PB0BWAPO;   /* Clear save area*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S71 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/



end // end PB0BS71

// Edit Apply-To PO ID key
Function PB0BS73()
   /* ------------------------------------------------------------*/
   /* Edit PO ID key by verifying against DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/

  if (PB0BM003.PB0BMADM < "01" /* ====> production delivery month*/
   || PB0BM003.PB0BMADM > "12") /* ====> production delevery month*/

    PB0BW01.PB0BWERL = "PB0BS73"; /* Process id*/
    set PB0BM003.PB0BMADM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/
    return;

  end

  if (PB0BM003.PB0BMAPM < "01" /* ====> production month*/
   || PB0BM003.PB0BMAPM > "12") /* ====> production month*/

    PB0BW01.PB0BWERL = "PB0BS73"; /* Process id*/
    set PB0BM003.PB0BMAPM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/
    return;

  end

  if (PB0BM003.PB0BMAPY > "99" /* ====> production year month*/
   || PB0BM003.PB0BMAPY < "00") /* ====> production year month*/

    PB0BW01.PB0BWERL = "PB0BS73"; /* Process id*/
    set PB0BM003.PB0BMAPY cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/
    return;

  end

  set VPOHDR02 empty; /* Clear record wk area*/

  VPOHDR02.XGPCD = PB0BM003.PB0BMAGP; /* GPC cd*/
   /* MOVE PB0BM003.po-reg-cd TO VPOHDR02.po-reg-cd;/* po region*/
  VPOHDR02.PO-REG-CD = "01"; /* po region*/
   /* ------------------------ y2k out-------------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;     /* Century*/
   /* ------------------------ y2k out-------------------------*/
   /* ------------------------ y2k in -------------------------*/
  if (PB0BW03.PB0BWAPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* ------------------------ y2k in -------------------------*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWAPY; /* Prod yr*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWAPM; /* Prod month*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWADM; /* Prod del month*/
  VPOHDR02.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/
  VPOHDR02.FY1FCTYC = PB0BW03.PB0BWAFY; /* Factory*/
  VPOHDR02.PC4ORTYP = PB0BW03.PB0BWATY; /* PO Type*/


  try
    call "VPOHDR02" ("SA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PB0BW03.PCFSECD = VPOHDR02.PCFSECD; /* Save Season cd*/

      PB0BW03.PB0BWA-PO-REG-CD = VPOHDR02.PO-REG-CD; /* Save REG*/
      PB0BW03.PB0BWAPO = VPOHDR02.PC3PONBR; /* Save to wk area*/
      PB0BM003.PB0BMAPO = VPOHDR02.PC3PONBR; /* To Map fld*/

      PB0BW03.PB0BWAPS = VPOHDR02.YPUCD; /* Save status to wk area*/

      PB0BW03.PB0BW-EDIT-ORIG-FLAG = "N";
      PB0BS-3510(); /* VERIFY ITEM ON PO*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

      PB0BW01.PB0BWERL = "PB0BS73"; /* Process id*/
      converseLib.validationFailed(313); /* Indicate error message*/

      set PB0BM003.PB0BMAPY cursor, bold; /* Prod yr*/
      set PB0BM003.PB0BMAPM cursor, bold; /* Prod month*/
      set PB0BM003.PB0BMADM cursor, bold; /* Prod del month*/
      set PB0BM003.PB0BMAFY cursor, bold; /* Factory*/
      set PB0BM003.PB0BMATY cursor, bold; /* PO Type*/

     /* MOVE 0 TO PB0BW03.PB0BWAPY;   /* Clear Prod yr*/
     /* MOVE 0 TO PB0BW03.PB0BWAPM;   /* Clear Prod month*/
     /* MOVE 0 TO PB0BW03.PB0BWADM;   /* Clear Prod del month*/
     /* MOVE '   ' TO PB0BW03.PB0BWAFY;      /* Clear Factory*/
     /* MOVE '  ' TO PB0BW03.PB0BWATY;       /* Clear PO Type*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWERL = "PB0BS73"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAP = "PB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM003.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Exit to redisplay map*/



end // end PB0BS73

// Sel Unq (SB) VFYPO002-Orig
Function PB0BS77()

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row (Original PO)*/
   /* ------------------------------------------------------------*/


   /* *=======================**/
   /* * Build DB Access Keys  **/
   /* *=======================**/


  set VFYPO002 empty; /* clear wk record*/

                /* (Build Access Keys)*/
  VFYPO002.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  PC5REC.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* po REG*/
  PC5REC.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* po REG*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWOPO; /* po number*/
  PC5REC.PC3PONBR = PB0BW03.PB0BWOPO; /* po number*/

  PB0BW01.PB0BWDPC = PB0BW03.PB0BWDCN; /* PO prod century*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWOPY; /* PO prod year*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWOPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWODM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWOSE; /* PO season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWOFY; /* po id factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWOTY; /* po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWOST; /* style*/
  PC5REC.SY1STNBR = PB0BW03.PB0BWOST; /* style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWOCL; /* color*/
  PC5REC.SY2CLRID = PB0BW03.PB0BWOCL; /* color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWODI; /* dimension*/
  PC5REC.XDMCD = PB0BW03.PB0BWODI; /* dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWOQU; /* quality*/
  PC5REC.XQACD = PB0BW03.PB0BWOQU; /* quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  PC5REC.XOWCD = PB0BW03.PB0BWOOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec cd*/
  PC5REC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec cd*/
  VFYPO002.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Type*/
  PC5REC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/
  PC5REC.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW02.PB0BWYMT[PB0BWSLX]; /* Mode of Transport*/
  VFYPO002.XWHCD = PB0BW03.PB0BWOWH; /* warehouse*/
  PC5REC.XWHCD = PB0BW03.PB0BWOWH; /* warehouse*/
  VFYPO002.PC2CUXID = PB0BW02.PC2CUXID[PB0BWSLX]; /* customer xref*/
  PC5REC.PC2CUXID = PB0BW02.PC2CUXID[PB0BWSLX]; /* customer xref*/

  VFYPO002.SL1RCRNO = PB0BW02.PB0BWRRN[PB0BWSLX]; /* receipt rpt no.*/
  VFYPO002.TSHRCTDT = PB0BW02.PB0BWRDT[PB0BWSLX]; /* receipt dt*/
  VFYPO002.TSHCNTNR = PB0BW02.PB0BWCTR[PB0BWSLX]; /* container id*/
  VFYPO002.TSFSHPID = PB0BW02.PB0BW-SHIP-ID[PB0BWSLX]; /* ship id*/



   /* ------------------------------------------------------------*/
   /* Access DPRODC.VFYPO002 (Select Unique).*/
   /* ------------------------------------------------------------*/


  if (PB0BW03.PB0BW-OCI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
    PC5REC.OP1PARTN = " "; /* ord part char*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
    PC5REC.OP1CUOID = 0; /* cust ord id*/
  else
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-OPC; /* ord part char*/
    PC5REC.OP1PARTN = PB0BW03.PB0BW-OPC; /* ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-OCI; /* cust ord id*/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-OCI; /* cust ord id*/
  end

  if (PB0BW03.PB0BW-ONI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
    PC5REC.OP1NORID = 0; /* nike ord id*/
  else
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ONI; /* nike ord id*/
    PC5REC.OP1NORID = PB0BW03.PB0BW-ONI; /* nike ord id*/
  end

  VFYPO002.XRECD = PB0BW02.PB0BWEXC[PB0BWSLX];
  try
    call "VFYPO002" ("SK", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Sel row*/


   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PB0BW01.PB0BWSLX > 0) /* Valid selection index*/
        PB0BW02.PB0BWEXC[PB0BWSLX] = VFYPO002.XRECD; /* Upd xrecd*/
        PB0BW02.PB0BWSTA[PB0BWSLX] = VFYPO002.YRSCD; /* Upd yrscd*/
      end

      return; /* Return to calling process*/

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S77"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "SELECT PO RCPT ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination func*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end PB0BS77

// OBTAIN Tolerance Data
Function PB0BS79()
   /* ------------------------------------------------------------*/
            /* OBTAIN Tolerance Data from DTRANS.VTSTOL01*/
   /* ------------------------------------------------------------*/


  set TSXREC empty; /* Clear wk record*/

  TSXREC.XGPCD = PB0BW01.XGPCD; /* GPC cd as key*/

  try
    call "IO5020" ("S ", SQLCA, TSXREC) {isNoRefresh = yes, isExternal = yes};
  end


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      if (TSXREC.TSXSTHQT == 0 /* Unassigned hard tolerance*/
       && TSXREC.TSXSTHPT == 0) /* Unassigned hard tolerance*/
        TSXREC.TSXSTHQT = 999999999; /* Indicate unassigned*/
        TSXREC.TSXSTHPT = 999.99; /* Indicate unassigned*/
      end


      if (TSXREC.TSXSZHQT == 0 /* Unassigned hard tolerance*/
       && TSXREC.TSXSZHPT == 0) /* Unassigned hard tolerance*/
        TSXREC.TSXSZHQT = 999999999; /* Indicate unassigned*/
        TSXREC.TSXSZHPT = 999.99; /* Indicate unassigned*/
      end


      return; /* Return to calling process*/

    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all database changes*/


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0BW01.PB0BWFUN == "4") /* ; Function #4 - itm hdr inq/chng*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    if (PB0BW01.PB0BWFUN == "5" /* Function #5 - itm dtl add*/
     || PB0BW01.PB0BWFUN == "6") /* Function #6 - itm dtl inq/chg*/
      converseLib.clearScreen();
       /* Clear map #4 before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S79 "; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  if (PB0BW01.PB0BWFUN == "4") /* Function #4 - itm hdr inq/chg*/
    TA1REC.TA1MAP = "PB0BM003"; /* Map #3*/
  end
  if (PB0BW01.PB0BWFUN == "5" /* Function #5 - itm dtl add*/
   || PB0BW01.PB0BWFUN == "6") /* Function #6 - itm dtl inq/chg*/
    TA1REC.TA1MAP = "PB0BM004"; /* Map name*/
  end
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSTOL01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSXREC.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0BM001.XXXPRCNM = PB0BW01.PB0BWERL; /* process name*/

  exit stack; /* Return to previous process*/


   /* ********************** End of PB0BS79 ***********************/
end // end PB0BS79

// Get ORIGINAL Qty data
Function PB0BS81()


   /* ------------------------------------------------------------*/
                  /* Get ORIGINAL Qty data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear item detail wk area*/
   /* ------------------------------------------------------------*/

  set PB0BW04 empty; /* Clear wk storage area*/

  PB0BW03.PB0BWPND = "N"; /* Reset process pending ind*/



   /* ------------------------------------------------------------*/
   /* Obtain Valid Size Scale (for the PO/Product).*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear wk storage area*/

  PG3REC.PG3FUNCD = "PC"; /* Translator function*/
  PG3REC.PG3DATFM = "C"; /* Compressed*/

  PG3REC.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  PG3REC.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  PG3REC.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  PG3REC.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/
  PG3REC.XQACD = "**"; /* Qual cd*/
  TA1REC.TA1PGMNM = "PB0BS81"; /* Executing process*/


  XSPG301(); /* Get all valid sizes*/


  if (PG3REC.PG3RETCD == "00" /* Normal return*/
   || PG3REC.PG3RETCD != "09") /* or not found*/
       /* (next sentence)*/
  else

    if (PG3REC.PG3RETCD == "09") /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      if (PB0BW01.PB0BWFUN == "4") /* Function #4 - itm hdr inq/chg*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      if (PB0BW01.PB0BWFUN == "5" /* Function #5 - itm dtl add*/
       || PB0BW01.PB0BWFUN == "6") /* Function #6 - itm dtl inq/chg*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

    PB0BW01.PB0BWPRC = "S81"; /* Process name*/
    return; /* Exit to redisplay map*/

  end



   /* ------------------------------------------------------------*/
   /* Obtain QTY data*/
   /* ------------------------------------------------------------*/

  set PC5REC empty; /* Initialize wk record*/

  PC5REC.XGPCD = PB0BW03.PB0BWOGP; /* GPC*/
  PC5REC.PO-REG-CD = PB0BW03.PB0BWO-PO-REG-CD; /* PO region*/
  PC5REC.PC3PONBR = PB0BW03.PB0BWOPO; /* PO number*/


  if (PB0BW03.PB0BW-OCI == 0) /* Cust ord id EQ zero*/
    PC5REC.OP1PARTN = " "; /* Get all part char*/
    PC5REC.OP1CUOID = 0; /* Get all cust ord id*/
  else
    PC5REC.OP1PARTN = PB0BW03.PB0BW-OPC; /**/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-OCI; /**/
  end

  if (PB0BW03.PB0BW-ONI == 0) /* Nike ord id EQ zero*/
    PC5REC.OP1NORID = 0; /* Get all nike ord id*/
  else
    PC5REC.OP1NORID = PB0BW03.PB0BW-ONI; /**/
  end


  PC5REC.SY1STNBR = PB0BW03.PB0BWOST; /* Style*/
  PC5REC.SY2CLRID = PB0BW03.PB0BWOCL; /* Color*/
  PC5REC.XDMCD = PB0BW03.PB0BWODI; /* Dimension*/

  if (PB0BW03.PB0BWOGP == "03") /* If apparel*/
    PC5REC.XQACD = "*"; /* Wildcard quality*/
  else
    PC5REC.XQACD = PB0BW03.PB0BWOQU; /* Quality*/
  end

  if (PB0BW03.PB0BWOWH == "09") /* If warehouse '09'*/
    PC5REC.XOWCD = "*"; /* Wildcard own grp*/
  else
    PC5REC.XOWCD = PB0BW03.PB0BWOOG; /* Own grp*/
  end

  PC5REC.PC2INSEG = PB0BW03.PB0BWOSP; /* Spec*/
  PC5REC.XPGCD = PB0BW03.PB0BWOPK; /* Pkg type*/
  PC5REC.XUMCD = PB0BW03.PB0BWOUM; /* Unit of Measure*/

  PC5REC.YMTCD = PB0BW03.YMTCD; /* mode of transportation*/
  PC5REC.XWHCD = PB0BW03.PB0BWOWH; /* Whse*/
  PC5REC.PC2CUXID = PB0BW03.PB0BW-OCXREF; /* CXREF*/

  PC5REC.PC5ERFL = "Y"; /* Include hard errors*/




   /* ------------------------------------------------------------*/
   /* Obtain Qtys from PO System or SO System.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOPO != 0) /* PO information available*/
    XPPC030(); /* Calc. Bal to Ship Process*/
  else /* Only SO information available*/
    PB0BS82(); /* Get FYPO and SO qtys*/
  end




   /* ------------------------------------------------------------*/
   /* Obtain DPRODC.VFYPO001 original PO row*/
   /* ------------------------------------------------------------*/

  if (PB0BW01.PB0BWFUN == "4" /* Function #4 - itm hdr inq/chg*/
   || PB0BW01.PB0BWFUN == "6") /* Function #6 - itm dtl inq/chg*/
    PB0BS77(); /* Select unique row*/
  else
    if (PB0BW01.PB0BWFUN == "5") /* Function #5 - itm dtl add*/
      move 0 to VFYPO002.PCMRCPTQ[1] for all; /* Clear result array*/
    end
  end



   /* ------------------------------------------------------------*/
   /* Existing row information pcmrec is cleared for add*/
   /* allowing the same routine to be use for BOTH MAINT. AND ADD*/
   /* Calculate difference qtys (on-orders - received)*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW04.PB0BWDFW[1] for all; /* Initialize diff wk array*/
  PB0BW03.PB0BWDFT = 0; /* Initialize diff totals*/
  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    PB0BW03.PB0BWQT7 = PC5REC.PC5RECV[PB0BWDX1];
    PB0BW03.PB0BWQT8 = PC5REC.PC5RCV12[PB0BWDX1];
    PB0BW03.PB0BWQT4 = PB0BW03.PB0BWQT7 + PB0BW03.PB0BWQT8;

    PB0BW03.PB0BWQT3 = PC5REC.PC5ORDR[PB0BWDX1]; /* To wk qty3*/
    PB0BW03.PB0BWQT5 = VFYPO002.PCMRCPTQ[PB0BWDX1]; /* To wk qty5*/
    PB0BW03.PB0BWQT6 = PB0BW03.PB0BWQT4 - PB0BW03.PB0BWQT5;
    PB0BW03.PB0BWQT1 = PB0BW03.PB0BWQT3 - PB0BW03.PB0BWQT6; /* PO Onord*/

    PB0BW03.PB0BWQT2 = VFYPO002.PCMRCPTQ[PB0BWDX1]; /* To wk qty2*/
    PB0BW04.PB0BWDFW[PB0BWDX1] = PB0BW03.PB0BWQT2 - PB0BW03.PB0BWQT1;

    PB0BW03.PB0BWDFT = PB0BW03.PB0BWDFT + PB0BW04.PB0BWDFW[PB0BWDX1];
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


   /* ------------------------------------------------------------*/
   /* Format valid sizes and qtys into map dtl wk arrays*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Find all valid sizes*/

    if (PG3REC.SY5SZID[PB0BWDX1] > 0) /* Valid size found*/

      PB0BW03.PB0BWDX2 = PG3REC.SY5SZID[PB0BWDX1]; /* To wk*/
      PB0BW04.SY5SZID[PB0BWDX1] = PB0BW03.PB0BWDX2; /* Save index*/
      PB0BW04.SY4IDDSC[PB0BWDX1] = PG3REC.SY4IDDSC[PB0BWDX1];

      PB0BW04.PB0BWRCQ[PB0BWDX1] = VFYPO002.PCMRCPTQ[PB0BWDX2];
      PB0BW04.PB0BWADA[PB0BWDX1] = VFYPO002.PCMRCPTQ[PB0BWDX2];

      PB0BW03.PB0BWQT7 = PC5REC.PC5RECV[PB0BWDX2];
      PB0BW03.PB0BWQT8 = PC5REC.PC5RCV12[PB0BWDX2];
      PB0BW03.PB0BWQT4 = PB0BW03.PB0BWQT7 + PB0BW03.PB0BWQT8;

      PB0BW03.PB0BWQT3 = PC5REC.PC5ORDR[PB0BWDX2];
      PB0BW03.PB0BWQT5 = VFYPO002.PCMRCPTQ[PB0BWDX2];
      PB0BW03.PB0BWQT6 = PB0BW03.PB0BWQT4 - PB0BW03.PB0BWQT5;
      PB0BW03.PB0BWQT1 = PB0BW03.PB0BWQT3 - PB0BW03.PB0BWQT6;

      PB0BW04.PB0BWPBQ[PB0BWDX1] = PB0BW03.PB0BWQT1; /* PO Onord*/
      PB0BW04.PB0BWDFQ[PB0BWDX1] = PB0BW04.PB0BWDFW[PB0BWDX2];

      PB0BW03.PB0BWDXM = PB0BW03.PB0BWDX1; /* save addr*/

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


   /* ------------------------------------------------------------*/
   /* Compute grand totals*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  PB0BW03.PB0BWRCT = 0; /* Initialize rcvd totals*/
  PB0BW03.PB0BWPBT = 0; /* Initialize on-ord totals*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process valid sizes*/

    PB0BW03.PB0BWRCT = PB0BW03.PB0BWRCT + PB0BW04.PB0BWRCQ[PB0BWDX1];
    PB0BW03.PB0BWPBT = PB0BW03.PB0BWPBT + PB0BW04.PB0BWPBQ[PB0BWDX1];

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


end // end PB0BS81

// Get FYPO and SO SIZE Tble QTYs
Function PB0BS82()


   /* ------------------------------------------------------------*/
   /* GET FYPO RECEIVED QTYS AND SO QTYS*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Get FYPO Table received qtys*/
   /* ------------------------------------------------------------*/

  move 0 to PC5REC.PC5RECV[1] for all; /* ===> Init Rcpt QTYs array st 10,11,13*/
  PC5REC.PC5TRECV = 0; /* ===> Init Rcpt QTYs Total st 10,11,13*/
  move 0 to PC5REC.PC5RCV10[1] for all; /* ===> Init Rcpt QTYs array st 10*/
  PC5REC.PC5TRV10 = 0; /* ===> Init Rcpt QTYs Total st 10*/
  move 0 to PC5REC.PC5RCV12[1] for all; /* ===> Init Rcpt QTYs array st 12*/
  PC5REC.PC5TRV12 = 0; /* ===> Init Rcpt QTYs Total st 12*/

  XPPC032(); /* ===> Get FYPO received QTYs*/


   /* ------------------------------------------------------------*/
   /* Get SO Size Table QTYs*/
   /* ------------------------------------------------------------*/

  move 0 to PC5REC.PC5ORDR[1] for all; /* ===> Init QTYs array*/
  PC5REC.PC5TORDR = 0; /* ===> Init QTYs Total*/
  PC5REC.PC5WORD = 0; /* ===> W.S. QTYs*/

  PB0BS-84(); /* ===> Get SO QTYs*/

end // end PB0BS82

// CHECK Orig Tolerances
Function PB0BS83()
   /* ------------------------------------------------------------*/
   /* Check Orig Tolerances.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate the dummy balance-to-receive qtys and total.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

              /* (Calculate Bal-to-Receive by size)*/
    PB0BW03.PB0BWQT1 = PB0BW04.PB0BWPBQ[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW04.PB0BWRCD[PB0BWDX1]; /* To wk 2*/
    PB0BW04.PB0BWDFW[PB0BWDX1] = PB0BW03.PB0BWQT2 - PB0BW03.PB0BWQT1;

          /* (Calculate Percent Variances Bal-to-Rcv by Size)*/
    PB0BW03.PB0BWQT1 = PB0BW04.PB0BWDFW[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW04.PB0BWPBQ[PB0BWDX1]; /* To wk 2*/

    if (PB0BW03.PB0BWQT2 > 0) /* PO Bal gt zero*/
      PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWQT1 / PB0BW03.PB0BWQT2 * 100, -mathLib.decimals(PB0BW03.PB0BWPCT));
      PB0BW04.PB0BWRDP[PB0BWDX1] = PB0BW03.PB0BWPCT;
    else
      if (PB0BW03.PB0BWQT2 < 0) /* PO Bal lt zero*/
        PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWQT1 / PB0BW03.PB0BWQT2 * -100, -mathLib.decimals(PB0BW03.PB0BWPCT));
        PB0BW04.PB0BWRDP[PB0BWDX1] = PB0BW03.PB0BWPCT;
      else
        PB0BW04.PB0BWRDP[PB0BWDX1] = 0; /* Pad W/ zeroes*/
      end
    end

            /* (Calculate Total Balance to Receive for Product)*/
    PB0BW03.PB0BWDFD = PB0BW03.PB0BWDFD + PB0BW04.PB0BWDFW[PB0BWDX1];


    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

    /* (Calculate Total Pcent Variance Bal-to-Rcv for Product)*/
  if (PB0BW03.PB0BWPBT > 0) /* gt zeroes*/
    PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWDFD / PB0BW03.PB0BWPBT * 100, -mathLib.decimals(PB0BW03.PB0BWPCT));
  else
    if (PB0BW03.PB0BWPBT < 0) /* lt zeroes*/
      PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWDFD / PB0BW03.PB0BWPBT * -100, -mathLib.decimals(PB0BW03.PB0BWPCT));
    else
      PB0BW03.PB0BWPCT = 0; /* Pad W/ zeroes*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Check STYLE Level Tolerances.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDFD > TSXREC.TSXSTHQT /* * Above hard*/
   && PB0BW03.PB0BWPCT > TSXREC.TSXSTHPT) /* Tolerances*/

      /* (*** Overshipment over tolerance ***)*/

    PB0BW03.PB0BWXRE = "OH"; /* Indicate exception cd*/
    return; /* Return to calling process*/

  end

   /* ------------------------------------------------------------*/
   /* Check SIZE Level Tolerances.*/
   /* ------------------------------------------------------------*/


  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    if (PB0BW04.PB0BWDFW[PB0BWDX1] > TSXREC.TSXSZHQT /* * Above hard*/
     && PB0BW04.PB0BWRDP[PB0BWDX1] > TSXREC.TSXSZHPT) /* Tolerances*/

        /* (*** Overshipment over tolerance (Hard) ***)*/

      PB0BW03.PB0BWXRE = "OH"; /* Indicate exception cd*/
      PB0BW03.PB0BWDX1 = +999; /* Terminate loop*/


    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


   /* ********************** End of PB0BS83 ***********************/
end // end PB0BS83

// update one fypo row
Function PB0BS85()
   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO001 row.*/
   /* ------------------------------------------------------------*/

  PB0BS77(); /* Select Unique Rcpt row*/

                 /* (Move Change Info)*/
  XX0XS01(); /* Get current date/time*/
  VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ change date*/
  VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ change time*/
  VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
  VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
  VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/

  PB0BS87(); /* Set Status*/

         /* (Adjust Received Qty Fields by Size)*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    if (PB0BW04.SY5SZID[PB0BWDX1] == 99) /* Size totals*/
            /* (Bypass array element)*/
    else

      if (PB0BW04.SY5SZID[PB0BWDX1] > 0) /* Valid sizes*/

        PB0BW03.PB0BWDX2 = PB0BW04.SY5SZID[PB0BWDX1]; /* To wk*/
        PB0BW03.PB0BWQT1 = VFYPO002.PCMRCPTQ[PB0BWDX2]; /* To wk*/
        PB0BW03.PB0BWQT2 = PB0BW04.PB0BWADQ[PB0BWDX1]; /* To wk*/
        VFYPO002.PCMRCPTQ[PB0BWDX2] = PB0BW03.PB0BWQT1 - PB0BW03.PB0BWQT2;

      end

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

  PB0BS89(); /* update fypo row*/

   /* ********************** End of PB0BS85 ***********************/
end // end PB0BS85

// SET ORIG STATUS
Function PB0BS87()

   /* ------------------------------------------------------*/
        /* Set original receipt status code*/
   /* ------------------------------------------------------*/


  if (VFYPO002.PCMRLSFL == "R") /* If release from setaside flag set to*/
                                   /* 'R'*/
     /* Continue on*/
  else /* Release from setaside flag not set to*/
                                   /* 'R'*/
    VFYPO002.PCMRLSFL = "C"; /* Set to 'C'*/
  end


  if (PB0BW03.PB0BWXRE == "  ") /* Balances OK*/
    if (PCWREC.XGPCD == "03") /* Aprl*/
      if (PB0BW03.PB0BWOPS == "OP" /* PO hdr status EQ 'OP' open*/
       || PB0BW03.PB0BWOPS == "FC" /* PO hdr status EQ 'OP' open*/
       && PB0BW03.PB0BWOIS == "  ") /* PO item status EQ '  ' open*/

        if (VFYPO002.YRSCD == "12") /* If status EQ '12' setaside*/
          VFYPO002.PCMRLSFL = "R"; /* Set setaside flag to 'R'*/
        end

        VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
        PB0BW03.PB0BWRST = "10"; /* Update WS status*/
      end
    else
      if (PB0BW03.PB0BWOPS == "OP" /* PO hdr status EQ 'OP' open*/
       && PB0BW03.PB0BWOIS == "  ") /* PO item status EQ '  ' open*/

        if (VFYPO002.YRSCD == "12") /* If status EQ '12' setaside*/
          VFYPO002.PCMRLSFL = "R"; /* Set setaside flag to 'R'*/
        end

        VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
        PB0BW03.PB0BWRST = "10"; /* Update WS status*/
      end
    end

  else

    if (PB0BW03.PB0BWOSC == "S" /* If t-shirt indicated*/
     || PB0BW03.PB0BWOSC == "I" 
     || PB0BW03.PB0BWOSC == "B")

      if (VFYPO002.YRSCD == "12") /* Assign '10' (valid) status*/
        VFYPO002.PCMRLSFL = "R"; /* rlse from setaside*/
      end

      VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
      PB0BW03.PB0BWRST = "10"; /* Update WS status*/
    else

      if (PB0BW03.PB0BWOQU == "01") /* If quality EQ '01'*/

        if (PB0BW03.PB0BWOGP == "01" /* IF IN-STORE PROMO*/
         || PB0BW03.PB0BWOGP == "07" /* posters*/
         || PB0BW03.PB0BWOWH == "09") /* or promo warehouse*/
          VFYPO002.YRSCD = "13"; /* Assign '13' (invalid) st*/
          PB0BW03.PB0BWRST = "13"; /* Update WS status*/
        else
          if (VFYPO002.YRSCD == "10"
           || VFYPO002.YRSCD == "  ") /* adding new fypo row*/
            VFYPO002.YRSCD = "13"; /* Assign '13' (invalid) st*/
            PB0BW03.PB0BWRST = "13"; /* Update WS status*/
            /* else remains as previous error status*/
          end
        end
      else /* Quality NE '01'*/

        if (PB0BW03.PB0BWOQU == "02") /* If quality EQ '02'*/
          if (PB0BW03.PB0BWOPS == "OP" /* PO hdr status open*/
           && PB0BW03.PB0BWOIS == "  ") /* PO item status open*/
            VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
            PB0BW03.PB0BWRST = "10"; /* Update WS status*/
          else /* PO hdr and itm statuses not both open*/

            /* If a ftwr 'step 1' BGRADE (a consolidation of a BGRADE)*/
            if (PB0BW03.PB0BWXRE == "  "       /* If balances are OK*/
             && PB0BW03.PB0BWOGP == "02"       /* And ftwr*/
             && PB0BW03.PB0BWOPO > 0           /* And PO number GT zero*/
             && PB0BW03.PB0BWOTY == "QQ"       /* And PO type 'QQ'*/
             && PB0BW03.PB0BW-ORIG-SO-NBR == 0 /* And SO EQ zero*/
             && PB0BW03.PB0BWOIS == "  ")      /* And po item st open*/
              VFYPO002.YRSCD = "10"; /* Assign '10' st*/
              PB0BW03.PB0BWRST = "10"; /* Update WS st*/
            else

              /* If a ftwr 'step 2' BGRADE (a transfer or order)*/
              if (PB0BW03.PB0BWXRE == "  " /* Balances OK*/
               && PB0BW03.PB0BWOGP == "02" /* Ftwr*/
               && PB0BW03.PB0BWOPO == 0)   /* PO number EQ zero*/
                VFYPO002.YRSCD = "10"; /* Assign '10' st*/
                PB0BW03.PB0BWRST = "10"; /* Update WS st*/
              else

                if (VFYPO002.YRSCD == "10"
                 || VFYPO002.YRSCD == "  ") /* adding new receipt*/
                  VFYPO002.YRSCD = "13"; /* Assign '13' st*/
                  PB0BW03.PB0BWRST = "13"; /* Update WS st*/
                  /* else remains as previous error status*/
                end /**/
              end /* End ftwr 'step 2' BGRADE (a transfer*/
                                   /* or order)*/
            end /* End ftwr 'step 1' BGRADE (a*/
                                   /* consolidation)*/
          end /* End if PO hdr and item statuses check*/
        end /* End if quality EQ '02' check*/
      end /* End if quality EQ '01' check*/
    end /* End if T-Shirt check*/
  end /* End if balances ok and PO hdr and*/
                                   /* item statuses checks*/


   /* ******************************************************************/
   /* If status = '13' set exception code to 'RE'*/
   /* ******************************************************************/

  if (VFYPO002.YRSCD == "13") /* Assign '13' Invalid status*/
    VFYPO002.XRECD = "RE"; /* exception code*/
    PB0BW03.PB0BWXRE = "RE"; /* Update WS xcept*/
  else
    if (PB0BW03.PB0BWOSC == "S" /* If t-shirt indicated*/
     || PB0BW03.PB0BWOSC == "I" 
     || PB0BW03.PB0BWOSC == "B")
      VFYPO002.XRECD = "  "; /* exception code*/
      PB0BW03.PB0BWXRE = "  "; /* Update WS xcept*/
    else
      if (PCWREC.XGPCD == "03") /* Aprl*/
        if (PB0BW03.PB0BWOPS == "NC" /* hdr st = Nike closed*/
         || PB0BW03.PB0BWOPS == "CL") /* hdr st = closed*/
          VFYPO002.XRECD = "PC"; /* exception code PO closed*/
          PB0BW03.PB0BWXRE = "PC"; /* Update WS xcept PO closed*/
        else
          if (PB0BW03.PB0BWOIS == "IC")
            VFYPO002.XRECD = PB0BW03.PB0BWOIS; /* excpt cd Item Closed*/
            PB0BW03.PB0BWXRE = PB0BW03.PB0BWOIS; /* Update WS xcept IC*/
          else
            VFYPO002.XRECD = PB0BW03.PB0BWXRE; /* exception code*/
          end
        end
      else
        if (PB0BW03.PB0BWOPS == "FC" /* hdr st = factory closed*/
         || PB0BW03.PB0BWOPS == "NC" /* hdr st = Nike closed*/
         || PB0BW03.PB0BWOPS == "CL") /* hdr st = closed*/
          VFYPO002.XRECD = "PC"; /* exception code PO closed*/
          PB0BW03.PB0BWXRE = "PC"; /* Update WS xcept PO closed*/
        else
          if (PB0BW03.PB0BWOIS == "IC")
            VFYPO002.XRECD = PB0BW03.PB0BWOIS; /* excpt cd Item Closed*/
            PB0BW03.PB0BWXRE = PB0BW03.PB0BWOIS; /* Update WS xcept IC*/
          else
            VFYPO002.XRECD = PB0BW03.PB0BWXRE; /* exception code*/
          end
        end
      end
    end
  end

end // end PB0BS87

// update fypo row
Function PB0BS89()
   /* ------------------------------------------------------------*/
    /* Update fypo row*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("U3", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Upd row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    PB0BW02.PB0BWXREC-STORE = VFYPO002.XRECD;
    PB0BW02.PB0BWEXC[PB0BWSLX] = PB0BW02.PB0BWXREC-STORE;
    PB0BW02.PB0BWFL12 = "Y";
    return;
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user*/
      converseLib.validationFailed(12); /* Indicate not available*/
      PB0BW01.PB0BWBYP = "N"; /* reselect same data*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* reset screen before redisplay*/
      end
    end
  end

  PC5REC.XXXPRCNM = "PB0BS89"; /* Process name*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0BS89"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE FYPO             ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* ********************** End of pb0bs89 ***********************/
end // end PB0BS89

// update all related fypo rows
Function PB0BS91()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select and open the cursor using the key*/
          /* ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  PC5REC.PC5WSWT = "N"; /* Set EOS cursor flag to no*/

  set VFYPO002 empty;

  VFYPO002.XGPCD = PC5REC.XGPCD;
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD; /* P.O. region*/
  VFYPO002.PC3PONBR = PC5REC.PC3PONBR; /* P.O. number*/


               /* PRODUCT FIELDS*/


  if (PC5REC.OP1PARTN != "*")
    VFYPO002.OP1PARTN = PC5REC.OP1PARTN; /* ord part char*/
  else /* eq '*'*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
  end

  if (PC5REC.OP1CUOID != -1)
    VFYPO002.OP1CUOID = PC5REC.OP1CUOID; /* cust ord id*/
  else /* eq -1*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
  end

  if (PC5REC.OP1NORID != -1)
    VFYPO002.OP1NORID = PC5REC.OP1NORID; /* nike ord id*/
  else /* eq -1*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
  end

  VFYPO002.SY1STNBR = PC5REC.SY1STNBR; /* Style number*/
  VFYPO002.SY2CLRID = PC5REC.SY2CLRID; /* Color code*/
  VFYPO002.XDMCD = PC5REC.XDMCD; /* Dimension code*/
  VFYPO002.XQACD = PC5REC.XQACD; /* Quality code*/
  VFYPO002.XOWCD = PC5REC.XOWCD; /* Owner group code*/
  VFYPO002.PC2INSEG = PC5REC.PC2INSEG; /* Spec Diff code*/
  VFYPO002.XPGCD = PC5REC.XPGCD; /* Package code*/
  VFYPO002.XUMCD = PC5REC.XUMCD; /* Unit of measure*/

               /* DESTINATION FIELD*/

  VFYPO002.XWHCD = PC5REC.XWHCD; /* Warehouse code*/
  VFYPO002.PC2CUXID = PC5REC.PC2CUXID; /* Cust xref*/
  VFYPO002.YMTCD = "*"; /* Wild card mode*/

  XX0XS01(); /* Get current date/time*/

  XSPCS-VFYPO002-S8(); /* Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch next receipt row in table*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-N8(); /* Fetch next selected row*/
   /* ------------------------------===> Priming read*/

  while (PC5REC.PC5WSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    if (VFYPO002.YRSCD == "10" /* Related receipt's status already*/
     /* = '10'*/
     && VFYPO002.XRECD == " ") /* and exception code = ' '*/

       /* Don't update the related receipt*/

    else

       /* Move values to fields for related receipt*/

     /* MOVE '  ' TO VFYPO002.XRECD; /* Exception code*/
     /* MOVE '10' TO VFYPO002.YRSCD; /* Status code*/
      if (VFYPO002.XRECD == " ")

        VFYPO002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ change date*/
        VFYPO002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ change time*/
        VFYPO002.PCMYRSDT = XX0XW01.XX0XWDAT; /* Status change date*/
        VFYPO002.PCMYRSTM = XX0XW01.XX0XWTIM; /* Status change time*/
        VFYPO002.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/

        PB0BS89(); /* Update fypo fcty receipt table*/
      else

      end
    end

    XSPCS-VFYPO002-N8(); /* Fetch next selected row*/
    /* ------------------------------===> Driving read*/

  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-C8(); /* Close the selected set cursor*/

   /* ********************** End of PB0BS91 ***********************/
end // end PB0BS91

// Get Apply-To Qty data
Function PB0BS93()


   /* ------------------------------------------------------------*/
   /* Clear Item Detail Wk Area.*/
   /* ------------------------------------------------------------*/

  set PB0BW05 empty; /* Clear wk storage area*/

  PB0BW03.PB0BWPND = "N"; /* Reset Process Pending ind*/



   /* ------------------------------------------------------------*/
   /* Obtain Valid Size Scale (for the style).*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear wk storage area*/

  PG3REC.PG3FUNCD = "PC"; /* Translator function*/
  PG3REC.PG3DATFM = "C"; /* Compressed*/

  PG3REC.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  PG3REC.SY1STNBR = PB0BW03.PB0BWAST; /* Style*/
  PG3REC.SY2CLRID = PB0BW03.PB0BWACL; /* Color*/
  PG3REC.XDMCD = PB0BW03.PB0BWADI; /* Dimension*/
  PG3REC.XQACD = "**"; /* Qual cd*/
  TA1REC.TA1PGMNM = "PB0BS93"; /* Executing process*/


  XSPG301(); /* Get all valid sizes*/


  if (PG3REC.PG3RETCD == "00" /* Normal return*/
   || PG3REC.PG3RETCD != "09") /* or not found*/
       /* (next sentence)*/
  else

    if (PG3REC.PG3RETCD == "09") /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    PB0BW01.PB0BWPRC = "S93"; /* Process name*/
    return; /* Exit to redisplay map*/

  end



   /* ------------------------------------------------------------*/
   /* Obtain QTY data.*/
   /* ------------------------------------------------------------*/

  set PC5REC empty; /* Initialize wk record*/

  PC5REC.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  PC5REC.PO-REG-CD = PB0BW03.PB0BWA-PO-REG-CD; /* PO region*/
  PC5REC.PC3PONBR = PB0BW03.PB0BWAPO; /* PO number*/


  if (PB0BW03.PB0BW-ACI == 0) /* Cust ord id EQ zero*/
    PC5REC.OP1PARTN = " "; /* Get all part char*/
    PC5REC.OP1CUOID = 0; /* Get all cust ord id*/
  else
    PC5REC.OP1PARTN = PB0BW03.PB0BW-APC; /**/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-ACI; /**/
  end

  if (PB0BW03.PB0BW-ANI == 0) /* Nike ord id EQ zero*/
    PC5REC.OP1NORID = 0; /* Get all nike ord id*/
  else
    PC5REC.OP1NORID = PB0BW03.PB0BW-ANI; /**/
  end


  PC5REC.SY1STNBR = PB0BW03.PB0BWAST; /* Style*/
  PC5REC.SY2CLRID = PB0BW03.PB0BWACL; /* Color*/
  PC5REC.XDMCD = PB0BW03.PB0BWADI; /* Dimension*/

  if (PB0BW03.PB0BWAGP == "03") /* If apparel*/
    PC5REC.XQACD = "*"; /* Wildcard quality*/
  else
    PC5REC.XQACD = PB0BW03.PB0BWAQU; /* Quality*/
  end

  if (PB0BW03.PB0BWAWH == "09") /* If warehouse '09'*/
    PC5REC.XOWCD = "*"; /* Wildcard own grp*/
  else
    PC5REC.XOWCD = PB0BW03.PB0BWAOG; /* Own grp*/
  end

  PC5REC.PC2INSEG = PB0BW03.PB0BWASP; /* Spec*/
  PC5REC.XPGCD = PB0BW03.PB0BWAPK; /* Pkg type*/
  PC5REC.XUMCD = PB0BW03.PB0BWAUM; /* Unit of Measure*/

  PC5REC.YMTCD = PB0BW03.YMTCD; /* mode of transportation*/
  PC5REC.XWHCD = PB0BW03.PB0BWAWH; /* Whse*/
  PC5REC.PC2CUXID = PB0BW03.PB0BW-ACXREF; /* CXREF*/

  PC5REC.PC5ERFL = "Y"; /* Include hard errors*/




   /* ------------------------------------------------------------*/
   /* Obtain Qtys from PO System or SO System.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWOPO != 0) /* PO information available*/
    XPPC030(); /* Calculate Balance to ship*/
  else /* Only SO information available*/
    PB0BS82(); /* Get FYPO and SO qtys*/
  end




   /* ------------------------------------------------------------*/
   /* Obtain dprodc.vfypo001 apply to row*/
   /* ------------------------------------------------------------*/

  PB0BS95(); /* select unique row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    move 0 to VFYPO002.PCMRCPTQ[1] for all;
  end

   /* ------------------------------------------------------------*/
   /* existing row information pcmrec is cleared for add*/
   /* allowing the same routine to be use for both maint. and add*/
   /* Calculate Difference Qtys (On-Orders - Received).*/
   /* ------------------------------------------------------------*/

  move 0 to PB0BW05.PB0BWDFW[1] for all; /* Initialize diff wk array*/
  PB0BW05.PB0BWDFT = 0; /* Initialize diff totals*/
  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Process all sizes*/

    PB0BW03.PB0BWQT7 = PC5REC.PC5RECV[PB0BWDX1];
    PB0BW03.PB0BWQT8 = PC5REC.PC5RCV12[PB0BWDX1];
    PB0BW03.PB0BWQT4 = PB0BW03.PB0BWQT7 + PB0BW03.PB0BWQT8;

    PB0BW03.PB0BWQT3 = PC5REC.PC5ORDR[PB0BWDX1]; /* To wk qty3*/
    PB0BW03.PB0BWQT5 = VFYPO002.PCMRCPTQ[PB0BWDX1]; /* To wk qty5*/
    PB0BW03.PB0BWQT6 = PB0BW03.PB0BWQT4 - PB0BW03.PB0BWQT5;
    PB0BW03.PB0BWQT1 = PB0BW03.PB0BWQT3 - PB0BW03.PB0BWQT6;

    PB0BW03.PB0BWQT2 = VFYPO002.PCMRCPTQ[PB0BWDX1]; /* To wk qty2*/
    PB0BW05.PB0BWDFW[PB0BWDX1] = PB0BW03.PB0BWQT2 - PB0BW03.PB0BWQT1;

     /* Compute Total.*/
    PB0BW05.PB0BWDFT = PB0BW05.PB0BWDFT + PB0BW05.PB0BWDFW[PB0BWDX1];
    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Format valid Sizes and Qtys into map dtl wk arrays.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= 40) /* Find all valid sizes*/

    if (PG3REC.SY5SZID[PB0BWDX1] > 0) /* Valid size found*/

      PB0BW03.PB0BWDX2 = PG3REC.SY5SZID[PB0BWDX1]; /* To wk*/
      PB0BW05.SY5SZID[PB0BWDX1] = PB0BW03.PB0BWDX2; /* Save index*/
      PB0BW05.SY4IDDSC[PB0BWDX1] = PG3REC.SY4IDDSC[PB0BWDX1];

      PB0BW05.PB0BWRCQ[PB0BWDX1] = VFYPO002.PCMRCPTQ[PB0BWDX2];

      PB0BW03.PB0BWQT7 = PC5REC.PC5RECV[PB0BWDX2];
      PB0BW03.PB0BWQT8 = PC5REC.PC5RCV12[PB0BWDX2];
      PB0BW03.PB0BWQT4 = PB0BW03.PB0BWQT7 + PB0BW03.PB0BWQT8;

      PB0BW03.PB0BWQT3 = PC5REC.PC5ORDR[PB0BWDX2];
      PB0BW03.PB0BWQT5 = VFYPO002.PCMRCPTQ[PB0BWDX2];
      PB0BW03.PB0BWQT6 = PB0BW03.PB0BWQT4 - PB0BW03.PB0BWQT5;
      PB0BW03.PB0BWQT1 = PB0BW03.PB0BWQT3 - PB0BW03.PB0BWQT6;

      PB0BW05.PB0BWPBQ[PB0BWDX1] = PB0BW03.PB0BWQT1;
      PB0BW05.PB0BWDFQ[PB0BWDX1] = PB0BW05.PB0BWDFW[PB0BWDX2];

      PB0BW03.PB0BWDXM = PB0BW03.PB0BWDX1; /* Save last addr*/

    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

   /* ----------------------------------------------------*/
     /* Compute Totals.*/
   /* ----------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/
  PB0BW05.PB0BWRCT = 0; /* Initialize rcvd totals*/
  PB0BW05.PB0BWPBT = 0; /* Initialize on-ord totals*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process valid sizes*/

    PB0BW05.PB0BWRCT = PB0BW05.PB0BWRCT + PB0BW05.PB0BWRCQ[PB0BWDX1];
    PB0BW05.PB0BWPBT = PB0BW05.PB0BWPBT + PB0BW05.PB0BWPBQ[PB0BWDX1];

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end


end // end PB0BS93

// Sel Unq (SB) VFYPO002-apply
Function PB0BS95()

   /* ------------------------------------------------------------*/
   /* Select Unique DPRODC.VFYPO002 row (Apply to PO).*/
   /* ------------------------------------------------------------*/


   /* *=======================**/
   /* * Build DB Access Keys  **/
   /* *=======================**/


  set VFYPO002 empty; /* clear wk record*/

                /* (Build Access Keys)*/
  VFYPO002.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  PC5REC.XGPCD = PB0BW03.PB0BWAGP; /* GPC*/
  VFYPO002.PO-REG-CD = PB0BW03.PB0BWA-PO-REG-CD; /* po region*/
  PC5REC.PO-REG-CD = PB0BW03.PB0BWA-PO-REG-CD; /* po region*/
  VFYPO002.PC3PONBR = PB0BW03.PB0BWAPO; /* po number*/
  PC5REC.PC3PONBR = PB0BW03.PB0BWAPO; /* po number*/

   /* ------------------------ y2k out-------------------------*/
   /* MOVE 019 TO PB0BW01.PB0BWDPC;    /* PO prod century*/
   /* ------------------------ y2k out-------------------------*/
   /* ------------------------ y2k in -------------------------*/
  if (PB0BW03.PB0BWAPY > 60) /* Century windowing*/
    PB0BW01.PB0BWDPC = 019;
  else
    PB0BW01.PB0BWDPC = 020;
  end
   /* ------------------------ y2k in -------------------------*/
  PB0BW01.PB0BWDPY = PB0BW03.PB0BWAPY; /* PO prod year*/
  PB0BW01.PB0BWDPM = PB0BW03.PB0BWAPM; /* PO prod mth*/
  PB0BW01.PB0BWDPD = PB0BW03.PB0BWADM; /* PO delivery mth*/
  VFYPO002.PC3POIDT = PB0BW01.PB0BWDPW; /* PO ID*/

  VFYPO002.PCFSECD = PB0BW03.PB0BWASE; /* PO season cd*/
  VFYPO002.FY1FCTYC = PB0BW03.PB0BWAFY; /* po id factory*/
  VFYPO002.PC4ORTYP = PB0BW03.PB0BWATY; /* po type*/
  VFYPO002.SY1STNBR = PB0BW03.PB0BWAST; /* style*/
  PC5REC.SY1STNBR = PB0BW03.PB0BWAST; /* style*/
  VFYPO002.SY2CLRID = PB0BW03.PB0BWACL; /* color*/
  PC5REC.SY2CLRID = PB0BW03.PB0BWACL; /* color*/
  VFYPO002.XDMCD = PB0BW03.PB0BWADI; /* dimension*/
  PC5REC.XDMCD = PB0BW03.PB0BWADI; /* dimension*/
  VFYPO002.XQACD = PB0BW03.PB0BWAQU; /* quality*/
  PC5REC.XQACD = PB0BW03.PB0BWAQU; /* quality*/
  VFYPO002.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  PC5REC.XOWCD = PB0BW03.PB0BWAOG; /* Own Grp cd*/
  VFYPO002.PC2INSEG = PB0BW03.PB0BWASP; /* Spec cd*/
  PC5REC.PC2INSEG = PB0BW03.PB0BWASP; /* Spec cd*/
  VFYPO002.PC2CUXID = PB0BW03.PB0BW-ACXREF; /* CXREF*/
  PC5REC.PC2CUXID = PB0BW03.PB0BW-ACXREF; /* CXREF*/
  VFYPO002.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Type*/
  PC5REC.XPGCD = PB0BW03.PB0BWAPK; /* Pkg Type*/
  VFYPO002.XUMCD = PB0BW03.PB0BWAUM; /* Unit of Measure*/
  PC5REC.XUMCD = PB0BW03.PB0BWAUM; /* Unit of Measure*/
  VFYPO002.YMTCD = PB0BW03.YMTCD; /* Mode transport cd*/
  VFYPO002.XWHCD = PB0BW03.PB0BWAWH; /* warehouse*/
  PC5REC.XWHCD = PB0BW03.PB0BWAWH; /* warehouse*/

  VFYPO002.SL1RCRNO = PB0BW03.PB0BWRRN; /* receiving rpt no.*/
  VFYPO002.TSHRCTDT = PB0BW03.PB0BWRDT; /* receiving dt*/
  VFYPO002.TSHCNTNR = PB0BW03.PB0BWCTR; /* container id*/



   /* ------------------------------------------------------------*/
   /* Access DPRODC.VFYPO002 (Select Unique).*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BW-ACI == 0) /* Cust ord id EQ zero*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/
    PC5REC.OP1PARTN = " "; /* ord part char*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
    PC5REC.OP1CUOID = 0; /* cust ord id*/
  else /* Cust ord id NE zero*/
    VFYPO002.OP1PARTN = PB0BW03.PB0BW-APC; /* ord part char*/
    PC5REC.OP1PARTN = PB0BW03.PB0BW-APC; /* ord part char*/
    VFYPO002.OP1CUOID = PB0BW03.PB0BW-ACI; /* cust ord id*/
    PC5REC.OP1CUOID = PB0BW03.PB0BW-ACI; /* cust ord id*/
  end

  if (PB0BW03.PB0BW-ANI == 0) /* Nike ord id EQ zero*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
    PC5REC.OP1NORID = 0; /* nike ord id*/
  else /* Nike ord id NE zero*/
    VFYPO002.OP1NORID = PB0BW03.PB0BW-ANI; /* nike ord id*/
    PC5REC.OP1NORID = PB0BW03.PB0BW-ANI; /* nike ord id*/
  end


  try
    call "VFYPO002" ("SB", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Sel row*/


   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to calling process*/

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  PB0BW01.PB0BWPRC = "S95"; /* Process number*/
  TA1REC.TA1PGMNM = PB0BW01.PB0BWERL; /* Program name*/
  TA1REC.TA1LOC = "SELECT PO RCPTS ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate data in use*/
      TA1REC.TA1FUNC = "POST"; /* Termination func*/

    else

      converseLib.validationFailed(10); /* Indicate unexpected error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Reset screen before redisplay*/

    end

  end


  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/




end // end PB0BS95

// CHECK Apply-to Tolerances
Function PB0BS97()
   /* ------------------------------------------------------------*/
   /* Check Tolerances.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate the dummy balance-to-receive qtys and total.*/
   /* ------------------------------------------------------------*/

  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

              /* (Calculate Bal-to-Receive by size)*/
    PB0BW03.PB0BWQT1 = PB0BW05.PB0BWPBQ[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW05.PB0BWRCD[PB0BWDX1]; /* To wk 2*/
    PB0BW05.PB0BWDFW[PB0BWDX1] = PB0BW03.PB0BWQT2 - PB0BW03.PB0BWQT1;

          /* (Calculate Percent Variances Bal-to-Rcv by Size)*/
    PB0BW03.PB0BWQT1 = PB0BW05.PB0BWDFW[PB0BWDX1]; /* To wk 1*/
    PB0BW03.PB0BWQT2 = PB0BW05.PB0BWPBQ[PB0BWDX1]; /* To wk 2*/

    if (PB0BW03.PB0BWQT2 > 0) /* PO Bal GT zero*/
      PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWQT1 / PB0BW03.PB0BWQT2 * 100, -mathLib.decimals(PB0BW03.PB0BWPCT));
      PB0BW05.PB0BWRDP[PB0BWDX1] = PB0BW03.PB0BWPCT;
    else
      if (PB0BW03.PB0BWQT2 < 0) /* PO Bal lT zero*/
        PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWQT1 / PB0BW03.PB0BWQT2 * -100, -mathLib.decimals(PB0BW03.PB0BWPCT));
        PB0BW05.PB0BWRDP[PB0BWDX1] = PB0BW03.PB0BWPCT;
      else
        PB0BW05.PB0BWRDP[PB0BWDX1] = 0; /* Pad W/ zeroes*/
      end
    end

            /* (Calculate Total Balance to Receive for Product)*/
    PB0BW03.PB0BWDFD = PB0BW03.PB0BWDFD + PB0BW05.PB0BWDFW[PB0BWDX1];


    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

    /* (Calculate Total Pcent Variance Bal-to-Rcv for Product)*/
  if (PB0BW05.PB0BWPBT > 0) /* GT zeroes*/
    PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWDFD / PB0BW05.PB0BWPBT * 100, -mathLib.decimals(PB0BW03.PB0BWPCT));
  else
    if (PB0BW05.PB0BWPBT < 0) /* lT zeroes*/
      PB0BW03.PB0BWPCT = mathLib.round(PB0BW03.PB0BWDFD / PB0BW05.PB0BWPBT * -100, -mathLib.decimals(PB0BW03.PB0BWPCT));
    else
      PB0BW03.PB0BWPCT = 0; /* Pad W/ zeroes*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Check STYLE Level Tolerances.*/
   /* ------------------------------------------------------------*/

  if (PB0BW03.PB0BWDFD > TSXREC.TSXSTHQT /* * Above hard*/
   && PB0BW03.PB0BWPCT > TSXREC.TSXSTHPT) /* Tolerances*/

      /* (*** Overshipment over tolerance ***)*/

    PB0BW03.PB0BWXRA = "OH"; /* Indicate exception cd*/
    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Check SIZE Level Tolerances.*/
   /* ------------------------------------------------------------*/


  PB0BW03.PB0BWDX1 = 1; /* Initialize loop index*/

  while (PB0BW03.PB0BWDX1 <= PB0BW03.PB0BWDXM) /* Process all sizes*/

    if (PB0BW05.PB0BWDFW[PB0BWDX1] > TSXREC.TSXSZHQT /* * Above hard*/
     && PB0BW05.PB0BWRDP[PB0BWDX1] > TSXREC.TSXSZHPT) /* Tolerances*/

        /* (*** Overshipment over tolerance (Hard) ***)*/

      PB0BW03.PB0BWXRA = "OH"; /* Indicate exception cd*/
      PB0BW03.PB0BWDX1 = +999; /* Terminate loop*/


    end

    PB0BW03.PB0BWDX1 = PB0BW03.PB0BWDX1 + 1; /* Loop through*/

  end

   /* ********************** End of PB0BS97 ***********************/
end // end PB0BS97

// SET APPLY-TO STATUS CODE
Function PB0BS99()

   /* ------------------------------------------------------*/
        /* Set apply-to status code*/
   /* ------------------------------------------------------*/

  if (VFYPO002.PCMRLSFL == "R")
     /* Continue on*/
  else
    VFYPO002.PCMRLSFL = "C";
  end


  if (PB0BW03.PB0BWXRA == "  ") /* Balances OK*/
    if (PCWREC.XGPCD == "03") /* Aprl*/
      if (PB0BW03.PB0BWAPS == "OP"
       || PB0BW03.PB0BWAPS == "FC"
       && PB0BW03.PB0BWAIS == "  ")

        if (VFYPO002.YRSCD == "12")
          VFYPO002.PCMRLSFL = "R"; /* rsle from setaside*/
        end

        VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
      end
    else
      if (PB0BW03.PB0BWAPS == "OP"
       && PB0BW03.PB0BWAIS == "  ")

        if (VFYPO002.YRSCD == "12")
          VFYPO002.PCMRLSFL = "R"; /* rsle from setaside*/
        end

        VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
      end
    end

  else

    if (PB0BW03.PB0BWASC == "S" /* If t-shirt indicated*/
     || PB0BW03.PB0BWASC == "I" 
     || PB0BW03.PB0BWASC == "B")

      if (VFYPO002.YRSCD == "12")
        VFYPO002.PCMRLSFL = "R"; /* rsle from setaside*/
      end

      VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
    else

      if (PB0BW03.PB0BWAQU == "01") /* or quality 01*/

        if (PB0BW03.PB0BWAGP == "01" /* IF IN-STORE PROMO*/
         || PB0BW03.PB0BWAGP == "07" /* posters*/
         || PB0BW03.PB0BWAWH == "09") /* or promo warehouse*/
          VFYPO002.YRSCD = "13"; /* Assign '13' (invalid) status*/
        else
          if (VFYPO002.YRSCD == "10"
           || VFYPO002.YRSCD == "  ") /* adding new fypo row*/
            VFYPO002.YRSCD = "13"; /* Assign '13' (invalid) status*/
            /* else remains as previous error status*/
          end
        end
      else /* If not quality '01'*/
        if (PB0BW03.PB0BWAQU == "02") /* If quality 02*/
          if (PB0BW03.PB0BWAPS == "OP"
           && PB0BW03.PB0BWAIS == "  ")
            VFYPO002.YRSCD = "10"; /* Assign '10' (valid) status*/
          else /* PO hdr and itm statuses not both open*/

            /* If a ftwr 'step 1' BGRADE (a consolidation of a BGRADE)*/
            if (PB0BW03.PB0BWXRA == "  "        /* If balances are OK*/
             && PB0BW03.PB0BWAGP == "02"        /* And ftwr*/
             && PB0BW03.PB0BWAPO > 0            /* And PO number GT zero*/
             && PB0BW03.PB0BWATY == "QQ"        /* And PO type 'QQ'*/
             && PB0BW03.PB0BW-APPLY-SO-NBR == 0 /* And SO EQ zero*/
             && PB0BW03.PB0BWAIS == "  ")       /* And po item st open*/
              VFYPO002.YRSCD = "10"; /* Assign '10' st*/
            else

              /* If a ftwr 'step 2' BGRADE (a transfer or order)*/
              if (PB0BW03.PB0BWXRA == "  " /* Balances OK*/
               && PB0BW03.PB0BWAGP == "02" /* Ftwr*/
               && PB0BW03.PB0BWAPO == 0)   /* PO number EQ zero*/
                VFYPO002.YRSCD = "10"; /* Assign '10' st*/
              else

                if (VFYPO002.YRSCD == "10"
                 || VFYPO002.YRSCD == "  ") /* adding new receipt*/
                  VFYPO002.YRSCD = "13"; /* Assign '13' st*/
                  /* else remains as previous error status*/
                end /**/
              end /* End ftwr 'step 2' BGRADE (a transfer*/
                                  /* or order)*/
            end /* End ftwr 'step 1' BGRADE (a*/
                                  /* consolidation)*/
          end /* End if PO hdr and item statuses check*/
        end /* End if quality EQ '02' check*/
      end /* End if quality EQ '01' check*/
    end /* End if T-Shirt check*/
  end /* End if balances ok and PO hdr and*/
                                  /* item statuses checks*/

   /* ******************************************************************/
   /* If status = '13' set exception code to 'RE'*/
   /* ******************************************************************/

  if (VFYPO002.YRSCD == "13") /* assign '13' invalid status*/
    VFYPO002.XRECD = "RE"; /* exception code*/
  else
    if (PB0BW03.PB0BWASC == "S" /* If t-shirt indicated*/
     || PB0BW03.PB0BWASC == "I" 
     || PB0BW03.PB0BWASC == "B")
      VFYPO002.XRECD = "  "; /* exception code*/
    else
      if (PCWREC.XGPCD == "03") /* Aprl*/
        if (PB0BW03.PB0BWAPS == "NC" /* PO hdr Nike closed*/
         || PB0BW03.PB0BWAPS == "CL") /* PO hdr closed*/
          VFYPO002.XRECD = "PC"; /* exception code PO closed*/
        else
          if (PB0BW03.PB0BWAIS == "IC") /* PO item closed*/
            VFYPO002.XRECD = PB0BW03.PB0BWAIS; /* exception code IC*/
          else
            VFYPO002.XRECD = PB0BW03.PB0BWXRA; /* exception code*/
          end
        end
      else
        if (PB0BW03.PB0BWAPS == "FC" /* PO hdr factory closed*/
         || PB0BW03.PB0BWAPS == "NC" /* PO hdr Nike closed*/
         || PB0BW03.PB0BWAPS == "CL") /* PO hdr closed*/
          VFYPO002.XRECD = "PC"; /* exception code PO closed*/
        else
          if (PB0BW03.PB0BWAIS == "IC") /* PO item closed*/
            VFYPO002.XRECD = PB0BW03.PB0BWAIS; /* exception code IC*/
          else
            VFYPO002.XRECD = PB0BW03.PB0BWXRA; /* exception code*/
          end
        end
      end
    end
  end


   /* --------------------------------------------------------------*/
   /* If PF15 Adjust All function in process move the new status of*/
   /* the apply-to receipt to map 3 working storage after being set*/
   /* in this module.*/
   /* --------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 Adjust all function*/
    if (VFYPO002.YRSCD == " ")
      VFYPO002.YRSCD = 13;
    end
    PB0BW03.PB0BWRST = VFYPO002.YRSCD; /* Update map 3 WS status*/
  end


end // end PB0BS99

//*** RECORD=PB0BW01 ****
// Inquiry main work area
// ***********************
Record PB0BW01 type basicRecord
  10 PC3PONBR PC3PONBR ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XRECD XRECD ; 
  10 XREHRDFL XREHRDFL ; 
  10 PB0BWBRD PB0BWBRD ; 
  10 PB0BWBYP PB0BWBYP ; 
  10 PB0BWDMO PB0BWDMO ; 
  10 PB0BWDPW PB0BWDPW ; 
    15 PB0BWDPC PB0BWDPC ; 
    15 PB0BWDPY PB0BWDPY ; 
    15 PB0BWDPM PB0BWDPM ; 
    15 PB0BWDPD PB0BWDPD ; 
  10 PB0BW2PW PB0BW2PW ; 
    15 PB0BW2PC PB0BW2PC ; 
    15 PB0BW2PY PB0BW2PY ; 
      25 PB0BW2Y1 PB0BW2Y1 ; 
      25 PB0BW2Y2 PB0BW2Y2 ; 
    15 PB0BW2PM PB0BW2PM ; 
    15 PB0BW2PD PB0BW2PD ; 
  10 PB0BWCYR PB0BWCYR ; 
    15 PB0BWCCC PB0BWCCC ; 
    15 PB0BWCYY PB0BWCYY ; 
  10 PB0BWDTW PB0BWDTW ; 
    15 PB0BWDTM PB0BWDTM ; 
    15 PB0BWDTD PB0BWDTD ; 
    15 PB0BWDTY PB0BWDTY ; 
  10 PB0BWDTT PB0BWDTT ; 
    15 PB0BWDYY PB0BWDYY ; 
    15 PB0BWDMM PB0BWDMM ; 
    15 PB0BWDDD PB0BWDDD ; 
  10 PB0BWERD PB0BWERD ; 
  10 PB0BWERL PB0BWERL ; 
    15 PB0BWAPP PB0BWAPP ; 
    15 PB0BWPRC PB0BWPRC ; 
  10 PB0BWFCT PB0BWFCT ; 
  10 PB0BWFID PB0BWFID ; 
  10 PB0BWFTI PB0BWFTI ; 
  10 PB0BWHST PB0BWHST [4] ; 
  10 PB0BWINQ PB0BWINQ ; 
  10 PB0BWIXM PB0BWIXM ; 
  10 PB0BWIX1 PB0BWIX1 ; 
  10 PB0BWIX2 PB0BWIX2 ; 
  10 PB0BWFUN PB0BWFUN ; 
  10 PB0BWMNO PB0BWMNO ; 
  10 PB0BWMSG PB0BWMSG ; 
  10 PB0BWPYR PB0BWPYR ; 
  10 PB0BWPMO PB0BWPMO ; 
  10 PB0BWPND PB0BWPND ; 
  10 PB0BWRSI PB0BWRSI ; 
  10 PB0BWSDX PB0BWSDX ; 
  10 PB0BWSLC PB0BWSLC ; 
  10 PB0BWSLX PB0BWSLX ; 
  10 PB0BWSWF PB0BWSWF ; 
  10 PB0BWSWR PB0BWSWR ; 
  10 PB0BWTSL PB0BWTSL ; 
  10 PB0BWTSP PB0BWTSP ; 
  10 PB0BWUPD PB0BWUPD ; 
  10 PB0BWWPO PB0BWWPO ; 
  10 PB0BWWRN PB0BWWRN ; 
  10 PB0BWCMT PB0BWCMT ; 
    15 PB0BWFL1 PB0BWFL1 ; 
    15 PB0BWDPO PB0BWDPO ; 
    15 PB0BWFL2 PB0BWFL2 ; 
    15 PB0BWDRN PB0BWDRN ; 
    15 * char(3) ; 
  10 PB0BWXRF PB0BWXRF ; 
  10 PB0BWCFL PB0BWCFL ; 
  10 PB0BWCSL PB0BWCSL ; 
  10 PB0BW-PREV-INV-SO-WARN PB0BW-PREV-INV-SO-WARN ; 
  10 PB0BW-FTI-WARN PB0BW-FTI-WARN ; 
  10 PB0BWBSL PB0BWBSL [11] ; 
  10 PB0BWSPG PB0BWSPG ; 
  10 PB0BWDIV PB0BWDIV ; 
  10 PB0BW-OPC PB0BW-OPC ; 
  10 PB0BW-SO-NBR PB0BW-SO-NBR ; 
    15 PB0BW-OCI PB0BW-OCI ; 
    15 PB0BW-ONI PB0BW-ONI ; 
  10 PB0BW-INDEX1 PB0BW-INDEX1 ; 
  10 PB0BW-INDEX2 PB0BW-INDEX2 ; 
  10 XGPCD XGPCD ; 
  10 PB0BW-RELEASE-FL PB0BW-RELEASE-FL ; 
end // end PB0BW01

//*** RECORD=PB0BW02 ****
// working storage for map001/002  inquiry & selection
//   TSQ record
// ************************************************************
// *                 MAINTENANCE LOG                          *
// *  Request   User Id    Date          Description          *
// *  PCF000    KSANFO   05/18/93   ADD PC-PV-RCPT-IVC-QTY    *
// *                                to record.                *
// *                                                          *
// ************************************************************
// ***********************
Record PB0BW02 type basicRecord
  10 PB0BWLEN PB0BWLEN ; 
  10 PB0BWTS PB0BWTS ; 
    15 PB0BWSEL PB0BWSEL [11] ; 
    15 PB0BWSTA PB0BWSTA [11] ; 
    15 PB0BWEXC PB0BWEXC [11] ; 
    15 PB0BWSTY PB0BWSTY [11] ; 
    15 PB0BWCLR PB0BWCLR [11] ; 
    15 PB0BWXDM PB0BWXDM [11] ; 
    15 PB0BWXQA PB0BWXQA [11] ; 
    15 PB0BWPON PB0BWPON [11] ; 
    15 PB0BWDCN PB0BWDCN [11] ; 
    15 PB0BWDPY PB0BWDPY [11] ; 
    15 PB0BWDPM PB0BWDPM [11] ; 
    15 PB0BWDDM PB0BWDDM [11] ; 
    15 PB0BWDFC PB0BWDFC [11] ; 
    15 PB0BWPOT PB0BWPOT [11] ; 
    15 PC2CUXID PC2CUXID [11] ; 
    15 PB0BW-SO-NBR PB0BW-SO-NBR [11] ; 
      20 PB0BW-OCI PB0BW-OCI ; 
      20 PB0BW-ONI PB0BW-ONI ; 
    15 PB0BW-OPC PB0BW-OPC [11] ; 
    15 PB0BWXWH PB0BWXWH [11] ; 
    15 PB0BWRDT PB0BWRDT [11] ; 
    15 PB0BWRRN PB0BWRRN [11] ; 
    15 PB0BWSDT PB0BWSDT [11] ; 
    15 XXXUSER XXXUSER [11] ; 
    15 * char(3) ; 
    15 PB0BWXRI PB0BWXRI [11] ; 
    15 PCMIVQTY PCMIVQTY [11] ; 
    15 PB0BWSES PB0BWSES [11] ; 
    15 PB0BWYMT PB0BWYMT [11] ; 
    15 PB0BWXSD PB0BWXSD [11] ; 
    15 PB0BWXPG PB0BWXPG [11] ; 
    15 PB0BWXUM PB0BWXUM [11] ; 
    15 PB0BWXOW PB0BWXOW [11] ; 
    15 PB0BWCTR PB0BWCTR [11] ; 
    15 PB0BW-SHIP-ID PB0BW-SHIP-ID [11] ; 
    15 PB0BWEXD PB0BWEXD [11] ; 
    15 PB0BWYRS PB0BWYRS [11] ; 
    15 PB0BWYRD PB0BWYRD [11] ; 
    15 PB0BWYRT PB0BWYRT [11] ; 
    15 PB0BWRLF PB0BWRLF [11] ; 
    15 PB0BWUSR PB0BWUSR [11] ; 
    15 PB0BWSSD PB0BWSSD [11] ; 
    15 PB0BWSST PB0BWSST [11] ; 
    15 PB0BWCCT PB0BWCCT [11] ; 
    15 PB0BWTDV PB0BWTDV [11] ; 
  10 PB0BWXREC-STORE PB0BWXREC-STORE ; 
  10 PB0BWFL11 PB0BWFL11 ; 
  10 PB0BWFL12 PB0BWFL12 ; 
end // end PB0BW02

//*** RECORD=PB0BW03 ****
// Item header work area for map003/004
// ************************************************************
// *                    MAINTENANCE LOG                       *
// * REQUEST USERID  DATE              DESCRIPTION            *
// * PCF000  ksanfo  5/18/93  add pc-pv-rcpt-ivc-qty to record*
// *                                                          *
// ************************************************************
// ***********************
Record PB0BW03 type basicRecord
  10 PCFSECD PCFSECD ; 
  10 PC2CUXID PC2CUXID ; 
  10 PB0BW-OCXREF PB0BW-OCXREF ; 
  10 PB0BW-ACXREF PB0BW-ACXREF ; 
  10 PC3POIDT PC3POIDT ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 YMTCD YMTCD ; 
  10 YMTSDESC YMTSDESC ; 
  10 PB0BW-PREV-OP1CUOID PB0BW-PREV-OP1CUOID ; 
  10 PB0BW-PREV-OP1NORID PB0BW-PREV-OP1NORID ; 
  10 PB0BWACL PB0BWACL ; 
  10 PB0BWADI PB0BWADI ; 
  10 PB0BWADM PB0BWADM ; 
  10 PB0BWADT PB0BWADT ; 
  10 PB0BWAFY PB0BWAFY ; 
  10 PB0BWAGP PB0BWAGP ; 
  10 PB0BWA-PO-REG-CD PB0BWA-PO-REG-CD ; 
  10 PB0BWAOG PB0BWAOG ; 
  10 PB0BWAPM PB0BWAPM ; 
  10 PB0BWAPU PB0BWAPU ; 
  10 PB0BWAPK PB0BWAPK ; 
  10 PB0BWAPO PB0BWAPO ; 
  10 PB0BW-APC PB0BW-APC ; 
  10 PB0BW-APPLY-SO-NBR PB0BW-APPLY-SO-NBR ; 
    15 PB0BW-ACI PB0BW-ACI ; 
    15 PB0BW-ANI PB0BW-ANI ; 
  10 PB0BWAIS PB0BWAIS ; 
  10 PB0BWAPS PB0BWAPS ; 
  10 PB0BWAPY PB0BWAPY ; 
  10 PB0BWASE PB0BWASE ; 
  10 PB0BWAQU PB0BWAQU ; 
  10 PB0BWAST PB0BWAST ; 
  10 PB0BWASP PB0BWASP ; 
  10 PB0BWATY PB0BWATY ; 
  10 PB0BWAUM PB0BWAUM ; 
  10 PB0BWAWH PB0BWAWH ; 
  10 PB0BWASC PB0BWASC ; 
  10 PB0BWDFD PB0BWDFD ; 
  10 PB0BWDFT PB0BWDFT ; 
  10 PB0BWDSM PB0BWDSM ; 
  10 PB0BWDSP PB0BWDSP ; 
  10 PB0BWDX1 PB0BWDX1 ; 
  10 PB0BWDX2 PB0BWDX2 ; 
  10 PB0BWDX3 PB0BWDX3 ; 
  10 PB0BWDXM PB0BWDXM ; 
  10 PB0BWFTI PB0BWFTI ; 
  10 PB0BWFTI-ADD-STAT-CHECK PB0BWFTI-ADD-STAT-CHECK ; 
  10 PB0BWMNO PB0BWMNO ; 
  10 PB0BWOCL PB0BWOCL ; 
  10 PB0BWODI PB0BWODI ; 
  10 PB0BWODM PB0BWODM ; 
  10 PB0BWOFY PB0BWOFY ; 
  10 PB0BWOGP PB0BWOGP ; 
  10 PB0BWO-PO-REG-CD PB0BWO-PO-REG-CD ; 
  10 PB0BWOOG PB0BWOOG ; 
  10 PB0BWOPM PB0BWOPM ; 
  10 PB0BWOPK PB0BWOPK ; 
  10 PB0BWOPO PB0BWOPO ; 
  10 PB0BW-OPC PB0BW-OPC ; 
  10 PB0BW-ORIG-SO-NBR PB0BW-ORIG-SO-NBR ; 
    15 PB0BW-OCI PB0BW-OCI ; 
    15 PB0BW-ONI PB0BW-ONI ; 
  10 PB0BWOIS PB0BWOIS ; 
  10 PB0BWOPS PB0BWOPS ; 
  10 PB0BWDCN PB0BWDCN ; 
  10 PB0BWOPY PB0BWOPY ; 
  10 PB0BWOSE PB0BWOSE ; 
  10 PB0BWOQU PB0BWOQU ; 
  10 PB0BWOST PB0BWOST ; 
  10 PB0BWOSP PB0BWOSP ; 
  10 PB0BWOTY PB0BWOTY ; 
  10 PB0BWOUM PB0BWOUM ; 
  10 PB0BWOWH PB0BWOWH ; 
  10 PB0BWOSC PB0BWOSC ; 
  10 PB0BWPBT PB0BWPBT ; 
  10 PB0BWPCT PB0BWPCT ; 
  10 PB0BWPND PB0BWPND ; 
  10 PB0BWQT1 PB0BWQT1 ; 
  10 PB0BWQT2 PB0BWQT2 ; 
  10 PB0BWQT3 PB0BWQT3 ; 
  10 PB0BWQT4 PB0BWQT4 ; 
  10 PB0BWQT5 PB0BWQT5 ; 
  10 PB0BWQT6 PB0BWQT6 ; 
  10 PB0BWQT7 PB0BWQT7 ; 
  10 PB0BWQT8 PB0BWQT8 ; 
  10 PB0BWQT9 PB0BWQT9 ; 
  10 PB0BWRCT PB0BWRCT ; 
  10 PB0BWRSA PB0BWRSA ; 
  10 PB0BWRST PB0BWRST ; 
  10 PB0BWXRI PB0BWXRI ; 
  10 PCMIVQTY PCMIVQTY ; 
  10 PB0BWRDT PB0BWRDT ; 
  10 PB0BWRRN PB0BWRRN ; 
  10 PB0BW-SHIP-ID PB0BW-SHIP-ID ; 
  10 PB0BWCTR PB0BWCTR ; 
  10 PB0BWSLN PB0BWSLN ; 
  10 PB0BWTLC PB0BWTLC ; 
  10 PB0BWUPD PB0BWUPD ; 
  10 PB0BWXRA PB0BWXRA ; 
  10 PB0BWXRE PB0BWXRE ; 
  10 PB0BWAAI PB0BWAAI ; 
  10 PB0BWE0S PB0BWE0S ; 
  10 PB0BWTOT PB0BWTOT ; 
  10 PB0BWTDV PB0BWTDV ; 
  10 PB0BWEFL PB0BWEFL ; 
  10 PB0BW-EDIT-ORIG-FLAG PB0BW-EDIT-ORIG-FLAG ; 
  10 PB0BW-BGRADE-STEP1-FLAG PB0BW-BGRADE-STEP1-FLAG ; 
  10 PB0BW-PREV-ITEM-WARN PB0BW-PREV-ITEM-WARN ; 
  10 PB0BW-PREV-INV-SO-WARN PB0BW-PREV-INV-SO-WARN ; 
  10 PB0BW-PREV-HDR-WARN PB0BW-PREV-HDR-WARN ; 
  10 PB0BW-PREV-STYLE-MISSING-WARN PB0BW-PREV-STYLE-MISSING-WARN ; 
end // end PB0BW03

//*** RECORD=PB0BW04 ****
// Item detail work area
// ***********************
Record PB0BW04 type basicRecord
  10 PB0BWPND PB0BWPND ; 
  10 PB0BWDXM PB0BWDXM ; 
  10 PB0BWRCT PB0BWRCT ; 
  10 PB0BWPBT PB0BWPBT ; 
  10 PB0BWDFT PB0BWDFT ; 
  10 SY5SZID SY5SZID [41] ; 
  10 SY4IDDSC SY4IDDSC [41] ; 
  10 PB0BWADA PB0BWADA [41] ; 
  10 PB0BWADQ PB0BWADQ [41] ; 
  10 PB0BWDFQ PB0BWDFQ [41] ; 
  10 PB0BWDFW PB0BWDFW [41] ; 
  10 PB0BWPBQ PB0BWPBQ [41] ; 
  10 PB0BWRCD PB0BWRCD [41] ; 
  10 PB0BWRDP PB0BWRDP [41] ; 
  10 PB0BWRCQ PB0BWRCQ [41] ; 
end // end PB0BW04

//*** RECORD=PB0BW05 ****
// Item detail work area
// ***********************
Record PB0BW05 type basicRecord
  10 PB0BWPND PB0BWPND ; 
  10 PB0BWDXM PB0BWDXM ; 
  10 PB0BWRCT PB0BWRCT ; 
  10 PB0BWPBT PB0BWPBT ; 
  10 PB0BWDFT PB0BWDFT ; 
  10 SY5SZID SY5SZID [41] ; 
  10 SY4IDDSC SY4IDDSC [41] ; 
  10 PB0BWADQ PB0BWADQ [41] ; 
  10 PB0BWDFQ PB0BWDFQ [41] ; 
  10 PB0BWDFW PB0BWDFW [41] ; 
  10 PB0BWPBQ PB0BWPBQ [41] ; 
  10 PB0BWRCD PB0BWRCD [41] ; 
  10 PB0BWRDP PB0BWRDP [41] ; 
  10 PB0BWRCQ PB0BWRCQ [41] ; 
  10 PB0BDEL PB0BDEL ; 
  10 PB0BWF15 PB0BWF15 ; 
end // end PB0BW05

//*** RECORD=PCXREC ****
// ***************** po date pass record *********************
// 
//   This record contains a from and to date and a function
//   to be passed for po applications's io3680.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/30/90   cepple   New record.
// **********************
Record PCXREC type basicRecord
  5 PCXGROUP PCXGROUP ; 
    10 PCXFUNC PCXFUNC ; 
    10 PCXFRDT PCXFRDT ; 
    10 PCXTODT PCXTODT ; 
end // end PCXREC

// Delete receipt flag
DataItem PB0BDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply Cust ord id
DataItem PB0BW-ACI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apply-to CXREF
DataItem PB0BW-ACXREF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply Nike ord id
DataItem PB0BW-ANI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apply ord partition char
DataItem PB0BW-APC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig SO NBR
DataItem PB0BW-APPLY-SO-NBR num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bgrade step1 receipt flag
DataItem PB0BW-BGRADE-STEP1-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit orig receipt flag
DataItem PB0BW-EDIT-ORIG-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time in checking flag
DataItem PB0BW-FTI-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1
DataItem PB0BW-INDEX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem PB0BW-INDEX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig Cust ord id
DataItem PB0BW-OCI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Original CXREF
DataItem PB0BW-OCXREF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig Nike ord id
DataItem PB0BW-ONI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig Ord partition char
DataItem PB0BW-OPC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig SO NBR
DataItem PB0BW-ORIG-SO-NBR num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous header warning flag
DataItem PB0BW-PREV-HDR-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous invalid SO warn flag
DataItem PB0BW-PREV-INV-SO-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous item warning flag
DataItem PB0BW-PREV-ITEM-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev op-cust-ord-id
DataItem PB0BW-PREV-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev op-nike-ord-id
DataItem PB0BW-PREV-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous style missing flag
DataItem PB0BW-PREV-STYLE-MISSING-WARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setaside rel flag save field
DataItem PB0BW-RELEASE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SHIP ID
DataItem PB0BW-SHIP-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig SO NBR
DataItem PB0BW-SO-NBR num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 1 (CCC)
DataItem PB0BW2PC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date wk area 1 (DD)
DataItem PB0BW2PD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production month
DataItem PB0BW2PM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date wk area 1 (CCCYYMMDD)
DataItem PB0BW2PW num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem PB0BW2PY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production year char 1
DataItem PB0BW2Y1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production year char 2
DataItem PB0BW2Y2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply po reg cd
DataItem PB0BWA-PO-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add to alternate inventory ind
DataItem PB0BWAAI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply color id
DataItem PB0BWACL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Adjust All Wk Qtys
DataItem PB0BWADA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apply dimension code
DataItem PB0BWADI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO delivery month
DataItem PB0BWADM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Adjustment Qtys
DataItem PB0BWADQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Adjustments total qty
DataItem PB0BWADT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apply factory
DataItem PB0BWAFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply prod code
DataItem PB0BWAGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO or SO ITM Status
DataItem PB0BWAIS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply owner grp code
DataItem PB0BWAOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply pkg type code
DataItem PB0BWAPK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO prod month
DataItem PB0BWAPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apply PO number
DataItem PB0BWAPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application ID
DataItem PB0BWAPP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO or SO HDR Status
DataItem PB0BWAPS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply-To Update indicator
DataItem PB0BWAPU char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO prod yr
DataItem PB0BWAPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply quality code
DataItem PB0BWAQU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PG_SCN_STY_IND
DataItem PB0BWASC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply to PC_PO_ID_SESN_CD
DataItem PB0BWASE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply spec code
DataItem PB0BWASP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply style number
DataItem PB0BWAST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply PO type
DataItem PB0BWATY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply unit of measure code
DataItem PB0BWAUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apply whse code
DataItem PB0BWAWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning receiving date
DataItem PB0BWBRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new blank selection char
DataItem PB0BWBSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Process bypass indicator
DataItem PB0BWBYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem PB0BWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count
DataItem PB0BWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check for customer xref flag
DataItem PB0BWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color
DataItem PB0BWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV_COMMENT
DataItem PB0BWCMT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancel selection flag
DataItem PB0BWCSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Container id
DataItem PB0BWCTR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century/year
DataItem PB0BWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem PB0BWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production century
DataItem PB0BWDCN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 3 (DD)
DataItem PB0BWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO id delivery month
DataItem PB0BWDDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO id factory
DataItem PB0BWDFC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dummy Difference total qty
DataItem PB0BWDFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Difference Qtys
DataItem PB0BWDFQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Difference total qty
DataItem PB0BWDFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Difference Qtys wk area
DataItem PB0BWDFW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// division nbr
DataItem PB0BWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date wk area 3 (MM)
DataItem PB0BWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID Delivery month
DataItem PB0BWDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 1 (CCC)
DataItem PB0BWDPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 1 (DD)
DataItem PB0BWDPD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production month
DataItem PB0BWDPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display po
DataItem PB0BWDPO char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date wk area 1 (CCCYYMMDD)
DataItem PB0BWDPW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production year
DataItem PB0BWDPY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display rcv rpt number
DataItem PB0BWDRN char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max Map Pages to display
DataItem PB0BWDSM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Map Page displayed
DataItem PB0BWDSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 2 (DD)
DataItem PB0BWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 2 (MM)
DataItem PB0BWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 3 (YYMMDD)
DataItem PB0BWDTT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 2 (MMDDYY)
DataItem PB0BWDTW num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 2 (YY)
DataItem PB0BWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map detail wk index 1
DataItem PB0BWDX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map detail wk index 2
DataItem PB0BWDX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map detail wk index 3
DataItem PB0BWDX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map detail wk max index
DataItem PB0BWDXM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area 3 (YY)
DataItem PB0BWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// END OF SET SWITCH
DataItem PB0BWE0S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of table flag
DataItem PB0BWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending receiving date
DataItem PB0BWERD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Process Location field
DataItem PB0BWERL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exception code
DataItem PB0BWEXC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exception cd
DataItem PB0BWEXD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF15 flag
DataItem PB0BWF15 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID factory cd
DataItem PB0BWFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB Function indicator
DataItem PB0BWFID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 1
DataItem PB0BWFL1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXCEPTION FLAG
DataItem PB0BWFL11 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UPDATE FLAG
DataItem PB0BWFL12 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 2
DataItem PB0BWFL2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time pass indicator
DataItem PB0BWFTI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time for add stat check
DataItem PB0BWFTI-ADD-STAT-CHECK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function #
DataItem PB0BWFUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header status codes
DataItem PB0BWHST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cleared for inquiry indicator
DataItem PB0BWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk index 1
DataItem PB0BWIX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk index 2
DataItem PB0BWIX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map wk index
DataItem PB0BWIXM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ record length
DataItem PB0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Alternate message area
DataItem PB0BWMNO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit error message area
DataItem PB0BWMSG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig po reg cd
DataItem PB0BWO-PO-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig color id
DataItem PB0BWOCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig dimension code
DataItem PB0BWODI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PO delivery month
DataItem PB0BWODM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig factory
DataItem PB0BWOFY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig prod code
DataItem PB0BWOGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PO or SO ITM Status
DataItem PB0BWOIS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig owner grp code
DataItem PB0BWOOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig pkg type code
DataItem PB0BWOPK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PO prod month
DataItem PB0BWOPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig PO number
DataItem PB0BWOPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orig PO or SO HDR Status
DataItem PB0BWOPS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PO prod yr
DataItem PB0BWOPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig quality code
DataItem PB0BWOQU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PG_SCN_STY_IND
DataItem PB0BWOSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PC_PO_ID_SESN_CD
DataItem PB0BWOSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig spec code
DataItem PB0BWOSP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig style number
DataItem PB0BWOST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig PO type
DataItem PB0BWOTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig unit of measure code
DataItem PB0BWOUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig whse code
DataItem PB0BWOWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO On-Order Balance Qtys
DataItem PB0BWPBQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Balance total qty
DataItem PB0BWPBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bal-to-Rcv Pcent wk
DataItem PB0BWPCT bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID production month
DataItem PB0BWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pending activity indicator
DataItem PB0BWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO number
DataItem PB0BWPON num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO type
DataItem PB0BWPOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Process ID
DataItem PB0BWPRC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID production year
DataItem PB0BWPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk Qty fld 1
DataItem PB0BWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 2
DataItem PB0BWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 3
DataItem PB0BWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 4
DataItem PB0BWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 5
DataItem PB0BWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 6
DataItem PB0BWQT6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 7
DataItem PB0BWQT7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 8
DataItem PB0BWQT8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Qty fld 9
DataItem PB0BWQT9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dummy PO Received Qtys
DataItem PB0BWRCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Received Qtys
DataItem PB0BWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Receipt total qty
DataItem PB0BWRCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bal-to-Receive Pcents
DataItem PB0BWRDP bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Receiving date
DataItem PB0BWRDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Rlse set-aside flag
DataItem PB0BWRLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receiving report number
DataItem PB0BWRRN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Receipt status-Alternate
DataItem PB0BWRSA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reset process indicator
DataItem PB0BWRSI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receipt status
DataItem PB0BWRST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status change date
DataItem PB0BWSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved load map index
DataItem PB0BWSDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map selection field
DataItem PB0BWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Season cd
DataItem PB0BWSES char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item select count
DataItem PB0BWSLC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selections wk index
DataItem PB0BWSLN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid select index
DataItem PB0BWSLX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page nbr of blank selection
DataItem PB0BWSPG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Create date
DataItem PB0BWSSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Create time
DataItem PB0BWSST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail status field
DataItem PB0BWSTA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style
DataItem PB0BWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB EOF indicator
DataItem PB0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data indicator
DataItem PB0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table poitm or prdcu div cd
DataItem PB0BWTDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tolerance Confirm indicator
DataItem PB0BWTLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total projected receipt qty
DataItem PB0BWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ record
DataItem PB0BWTS char(1719)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ record length
DataItem PB0BWTSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ current page
DataItem PB0BWTSP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cleared for update indicator
DataItem PB0BWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Userid
DataItem PB0BWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working display po number
DataItem PB0BWWPO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working display rcv rpt number
DataItem PB0BWWRN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dimension
DataItem PB0BWXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Own Grp cd
DataItem PB0BWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG cd
DataItem PB0BWXPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quality
DataItem PB0BWXQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk Exception code-Alternate
DataItem PB0BWXRA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk Exception code
DataItem PB0BWXRE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save exception code
DataItem PB0BWXREC-STORE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref
DataItem PB0BWXRF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receipt Invoice status cd
DataItem PB0BWXRI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Spec cd
DataItem PB0BWXSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Unit of measure cd
DataItem PB0BWXUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse code
DataItem PB0BWXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Mode cd
DataItem PB0BWYMT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status cd chg date
DataItem PB0BWYRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status cd
DataItem PB0BWYRS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status cd chg time
DataItem PB0BWYRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iomod from date
DataItem PCXFRDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iomod function
DataItem PCXFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PCXGROUP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iomod to date
DataItem PCXTODT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

