package pb0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=PB0R ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO submit the program that prints
// *   the footwear price exception report. (Footware)
// *
// *   THE USER WILL ENTER A P.O. ID DATE(THE FIRST SIX DIGITS)
// *
// *
// ************************************************************
// *   DATE        USERID             COMMENTS
// * ________    __________          ______________________
// * 05/15/94    SLEWIS              new application
// * 05/19/94    SLEWIS              MOVE PB0R050 FILE
// * 06/09/94    SLEWIS              RPT SENT DIRECT AND BUNDLE
// * 10/30/97    rgilli              Y2K MODIFICATIONS MADE TO:
// *                                 PB0RW01: Add ccyy items
// *                                 PB0R520: Add century
// *                                          windowing. Change
// *                                          yy calculation to
// *                                          ccyy calculation,
// *                                          chg yy compare to
// *                                          ccyy.
// *                                 PB0R600: Fix existing bug
// *                                          Add ezemno check
// ************************************************************
// *********************
Program PB0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0RW01 PB0RW01; // record
  PB0RW02 PB0RW02; // record
  PB0RW03 PB0RW03; // record
  PB0RW04 PB0RW04; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PB0RT01; // table
  use PB0RT11; // table
  use PB0RM.PB0RM001,  // forms
      PB0RM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE THE RECORDS, MAPS, AND FIELDS*/
     /* ------------------------------------------------------------*/

    set PB0RW01 empty; /* Working storage*/
    set PB0RW02 empty; /* Working storage  JCL*/
    set PB0RW03 empty; /* Working storage Screen parm.*/
    set PB0RW04 empty; /* Working storage Parm. table*/

    set ERRSQLCA empty;
    set SQLCA empty;
    set TA1REC empty;
    set TA2REC empty;
    set XCTHREC empty;
    set TA6REC empty;
    set TAEREC empty;

    set PB0RM001 initial;
    set XX0XW01 empty;
    set XX0XW02 empty;


    PB0RW01.PB0RWBRI = 0; /* Rpt. index*/
    PB0RW01.PB0RWMXB = 60; /* Rpt. max. number*/

     /* Will change later. For testing 10 prams. will be enough*/
     /* Will change later. For testing 10 prams. will be enough*/

    PB0RW01.PB0RWMXD = 1; /* Max. number for parms.*/


    PB0R000: PB0R000();
     /* no flow*/
    PB0R050: PB0R050();
    goto PB0R050;
  end // end main
end // end PB0R

// Special initialization
Function PB0R000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PB0RW01.PB0RWCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0R"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0RM001.XXXPRCNM = "PB0R000"; /* Process name*/

    end
  end


end // end PB0R000

// MAIN PROCESS TO DISPLAY MAP
Function PB0R050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAINQFL == "Y" /* User can enter*/
   && COMMAREA.XGPCD == "02") /* only footwear is allowed*/

    /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
    /* ------------------------------------------------------------*/
    set XCTHREC empty;
    call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

    if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

      PCWREC.XXXMSGNO = 8; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "LC0A"; /* To application*/
      XSEXIT(); /* Exit to another application*/
    end

    PB0R080(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "LC0A"; /* To application*/
    XSEXIT(); /* Exit to another application*/
  end



end // end PB0R050

// PROGRAM PROCESS CONTROL
Function PB0R080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PB0R200(); /* Format and display the map*/

  PB0R300(); /* Check attention identifier*/

  PB0R400(); /* Reset fields to normal intensity*/

  PB0R500(); /* Verify the entered data*/

  PB0R600(); /* Process the entered data*/


end // end PB0R080

// DISPLAY MAP
Function PB0R200()

   /* ------------------------------------------------------------*/
   /* If no hard errors to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No information message*/
   || converseVar.validationMsgNum == 253) /* Parms. added*/

    set PB0RM001.PB0RWMYY cursor; /* POID year*/

  else


    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PB0RM001.XXXPRCNM = "PB0R200"; /* PROCESS NAME*/
      PB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PB0RM001 alarm; /* Indicate sound alarm*/

  end


  PB0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse PB0RM001 ;


end // end PB0R200

// CHECK ATTENTION IDENTIFIERS
Function PB0R300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    /* per gamen and lsutto: we didn't want it like this, User did)*/
    set PB0RW04 empty;
    set PB0RM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PB0RM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PB0RM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0RM001.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    end

    set PB0RM001.CATOAP cursor, bold; /* Highlight*/
    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "LC0A";
    XSPCS01();

    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf9 /* PF9 was pressed*/
   && PB0RW04.XGPCD[1] == " ")    /* Table empty*/
    converseLib.validationFailed(17); /* Parms. must be entered*/
    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PB0RM001.XXXPRCNM = "PB0R300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PB0R300

// RESTET THE HIGHLIGHTED FIELDS
Function PB0R400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PB0RM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0RM001.CAITEM initialAttributes; /* Commarea application data*/

  set PB0RM001.PB0RWMYY initialAttributes; /* P.O. id production year*/
  set PB0RM001.PB0RWMM1 initialAttributes; /* P.O. id production month*/
  set PB0RM001.PB0RWMM2 initialAttributes; /* P.O. id delivery month*/


end // end PB0R400

// VERIFY THE ENTERED DATA
Function PB0R500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0RM001.CAITEM > " ") /* Application data was entered*/

    set PB0RM001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PB0RM001.XXXPRCNM = "PB0R500"; /* Process name*/

  else

    PB0R520(); /* Process detail edits*/
    PB0R530(); /* Process parm. edits*/

  end


end // end PB0R500

// DO DETAIL EDITS
Function PB0R520()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PB0RM001.PB0RWMYY == 00 /* Nothing there*/
   && PB0RM001.PB0RWMM1 == 00 /* Nothing there*/
   && PB0RM001.PB0RWMM2 == 00) /* Nothing there*/
    set PB0RM001.PB0RWMYY cursor, bold; /* Highlight error*/
    converseLib.validationFailed(177); /* Date is missing*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0RM001.PB0RWMM2 > 00 /* Something there*/
   && PB0RM001.PB0RWMM2 <= 12)

    PB0RW01.PB0RWMM2 = PB0RM001.PB0RWMM2;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PB0RM001.XXXPRCNM = "PB0R520"; /* Process name*/
    set PB0RM001.PB0RWMM2 cursor, bold; /* Highlight*/
    PB0RW01.PB0RWMM2 = 00;
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0RM001.PB0RWMM1 > 00 /* Something there*/
   && PB0RM001.PB0RWMM1 <= 12)

    PB0RW01.PB0RWMM1 = PB0RM001.PB0RWMM1;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PB0RM001.XXXPRCNM = "PB0R520"; /* Process name*/
    set PB0RM001.PB0RWMM1 cursor, bold; /* Highlight*/
    PB0RW01.PB0RWMM1 = 00;
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PB0RM001.PB0RWMYY >= 00
   && PB0RM001.PB0RWMYY <= 99)
    PB0RW01.PB0RWMYY = PB0RM001.PB0RWMYY;
    /* ----------------------- y2k in ---------------------*/
    PB0RW01.PB0RW-MAP-YY = PB0RM001.PB0RWMYY;
    if (PB0RW01.PB0RW-MAP-YY > 60) /* Century windowing;*/
      PB0RW-MAP-CC = 19;
    else
      PB0RW-MAP-CC = 20;
    end
    /* ----------------------- y2k in ---------------------*/

    /* ----------------------- y2k out --------------------*/
    /* pb0rW01.pb0rW-CY1 = pb0rW01.pb0rWYYY + 1; /* One year greater*/
    /* pb0rW01.pb0rWCY2 = pb0rW01.pb0rWYYY - 1; /* One year less*/
    /* IF pb0rW01.pb0rWMYY GE pb0rW01.pb0rWCY2  /* One year less or equal*/
    /* AND pb0rW01.pb0rWMYY LE pb0rW01.pb0rWCY1; One year GE*/
    /* ----------------------- y2k out --------------------*/
    /* ----------------------- y2k in  --------------------*/
    PB0RW01.PB0RW-CCYY1 = PB0RW01.PB0RW-CCYY + 1; /* One year greater*/
    PB0RW01.PB0RW-CCYY2 = PB0RW01.PB0RW-CCYY - 1; /* One year less*/
    if (PB0RW01.PB0RW-MAP-CCYY >= PB0RW01.PB0RW-CCYY2 /* One year LE*/
     && PB0RW01.PB0RW-MAP-CCYY <= PB0RW01.PB0RW-CCYY1) /* one year GE*/
      /* ----------------------- y2k in  --------------------*/

       /* NEXT SENTENCE*/

    else
      converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
      PB0RM001.XXXPRCNM = "PB0R520"; /* Process name*/
      set PB0RM001.PB0RWMYY cursor, bold; /* Highlight*/
      PB0RW01.PB0RWMYY = 00;
    end
  else
    converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
    PB0RM001.XXXPRCNM = "PB0R520"; /* Process name*/
    set PB0RM001.PB0RWMYY cursor, bold; /* Highlight*/
    PB0RW01.PB0RWMYY = 00;
  end

  if (converseVar.validationMsgNum == 0) /* No message*/
    PB0RS02(); /* Set up p.o. id date*/
  end



end // end PB0R520

// PROCESS PARM EDITS
Function PB0R530()

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PB0RW03.XGPCD = "02"; /* Gpc code*/
    PB0RW03.PB0RWIDT = PB0RW01.PB0RWPDT; /* PO ID*/
    PB0RW03.PB0RWALF = " "; /* Application req. flag*/
  end
end // end PB0R530

// PROCESS THE VALID INPUT DATA
Function PB0R600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/
   /* -------------------- Y2K OUT --------------------*/
   /* IF EZEAID IS ENTER               /* Enter pressed*/
   /* -------------------- Y2K OUT --------------------*/

   /* -------------------- Y2K IN ---------------------*/
  if (converseVar.eventKey is enter /* Enter pressed*/
   && converseVar.validationMsgNum == 0)
   /* -------------------- Y2K IN ---------------------*/

    PB0R610();



    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if on production system*/
      PB0R620(); /* format production jcl for remote*/
    else
      PB0R621(); /* format development jcl for remote*/
    end

    PB0RW01.PB0RWDRI = 0;
    PB0RW01.PB0RWBRI = 0;
    PB0RW01.PB0RWSRI = 0;

    set PB0RW03 empty;
    set PB0RW04 empty;

  end


end // end PB0R600

// DO SAVE THE PARMS
Function PB0R610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PB0RW04.XGPCD = "02"; /* Gpc code*/
    PB0RW04.PB0RWIDT = PB0RW01.PB0RWPDT; /* PO ID*/
    PB0RW04.PB0RWALF = " "; /* Application req. flag*/
   /* MOVE 253 TO EZEMNO;            /* Parm. Entered*/


  end


end // end PB0R610

// SUBMIT TEST JOBS TO REMOTE
Function PB0R620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PB0RW04.PB0RWBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PB0RW01.PB0RWIXT = 1; /* Initialize table index*/
    TA6REC.TA6SUBSW = "Y"; /* Initialize PRINT SW*/
    TA6REC.TA6MSGSW = "Y";
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PB0RW01.PB0RWIX2 = 0; /* Initialize index*/
    PB0RW01.PB0RWIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PB0RW01.PB0RWIXT > 0) /* Until end of table*/

      if (PB0RT01.TARTYPE[PB0RWIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PB0RW02.PB0RWTYP = "P"; /* Type*/

        PB0RW01.PB0RWIX3 = 1;

        while (PB0RW01.PB0RWIX3 <= PB0RW01.PB0RWMXD) /* LE max for table*/
          if (PB0RW04.PB0RWBTB[PB0RWIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PB0RW04.PB0RWBTB[PB0RWIX3];
            TA6REC.TARTYPE[TA6INDEX] = PB0RW02.PB0RWTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
          else
            PB0RW01.PB0RWIX3 = PB0RW01.PB0RWMXD; /* Set index to 10*/
          end
          PB0RW01.PB0RWIX3 = PB0RW01.PB0RWIX3 + 1;
                                  /* ; Increment both tbl indx*/
        end

      else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

               /* move jcl cards to table*/
        TA6REC.TARJCL[TA6INDEX] = PB0RT01.TARJCL[PB0RWIXT];
                                   /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PB0RT01.TARTYPE[PB0RWIXT];
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PB0RT01.TARJCL[PB0RWIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        PB0RW01.PB0RWIXT = 0; /* Indicate end of table*/

      else

        PB0RW01.PB0RWIXT = PB0RW01.PB0RWIXT + 1;
      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PB0RS03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PB0RW04 empty; /* Clear parameter table*/
      return;

    else

      set PB0RW04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PB0R620

// SUBMIT TEST JOBS TO REMOTE
Function PB0R621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PB0RW04.PB0RWBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PB0RW01.PB0RWIXT = 1; /* Initialize table index*/
    TA6REC.TA6SUBSW = "Y"; /* Initialize PRINT SW*/
    TA6REC.TA6MSGSW = "Y";
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PB0RW01.PB0RWIX2 = 0; /* Initialize index*/
    PB0RW01.PB0RWIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PB0RW01.PB0RWIXT > 0) /* Until end of table*/

      if (PB0RT11.TARTYPE[PB0RWIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PB0RW02.PB0RWTYP = "P"; /* Type*/

        PB0RW01.PB0RWIX3 = 1;

        while (PB0RW01.PB0RWIX3 <= PB0RW01.PB0RWMXD) /* LE max for table*/
          if (PB0RW04.PB0RWBTB[PB0RWIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PB0RW04.PB0RWBTB[PB0RWIX3];
            TA6REC.TARTYPE[TA6INDEX] = PB0RW02.PB0RWTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
          else
            PB0RW01.PB0RWIX3 = PB0RW01.PB0RWMXD; /* Set index to 10*/
          end
          PB0RW01.PB0RWIX3 = PB0RW01.PB0RWIX3 + 1;
                                  /* ; Increment both tbl indx*/
        end

      else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

               /* move jcl cards to table*/
        TA6REC.TARJCL[TA6INDEX] = PB0RT11.TARJCL[PB0RWIXT];
                                   /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PB0RT11.TARTYPE[PB0RWIXT];
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PB0RT11.TARJCL[PB0RWIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        PB0RW01.PB0RWIXT = 0; /* Indicate end of table*/

      else

        PB0RW01.PB0RWIXT = PB0RW01.PB0RWIXT + 1;
      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PB0RS03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PB0RW04 empty; /* Clear parameter table*/
      return;

    else

      set PB0RW04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PB0R621

// SET UP DATE
Function PB0RS02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in type*/
  TA2REC.TA2GRGEN = PB0RW01.PB0RWDAT;

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PB0RW01.PB0RWPDT = TA2REC.TA2GRGGN; /* P.O. id date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PB0RS02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PB0RM001.XXXPRCNM = "PB0RS02"; /* Process name*/

    end
  end


end // end PB0RS02

// SUBMIT JCL
Function PB0RS03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* and reset the map.*/
   /* ------------------------------------------------------------*/

  set PB0RW04 empty;
  set PB0RM001 initial; /* Clear the map*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Job submitted to reader*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PB0RW04 empty;
    PB0RM001.XXXPRCNM = "PB0RS03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    PB0RM001.XXXPRCNM = "PB0RS03"; /* Process name*/
    exit stack;

  end


end // end PB0RS03

//*** RECORD=PB0RW01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC09
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// *  9/12/89   GWITZI        NEW RECORD
// *
// ************************************************************
// ***********************
Record PB0RW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PB0RWPDT PB0RWPDT ; 
  10 PB0RW-MAP-CCYY PB0RW-MAP-CCYY ; 
    15 PB0RW-MAP-CC PB0RW-MAP-CC ; 
    15 PB0RW-MAP-YY PB0RW-MAP-YY ; 
  10 PB0RWDAT PB0RWDAT ; 
    15 PB0RWMYY PB0RWMYY ; 
    15 PB0RWMM1 PB0RWMM1 ; 
    15 PB0RWMM2 PB0RWMM2 ; 
  10 PB0RW-CCYY1 PB0RW-CCYY1 ; 
    15 PB0RWCC1 PB0RWCC1 ; 
    15 PB0RWCY1 PB0RWCY1 ; 
  10 PB0RW-CCYY2 PB0RW-CCYY2 ; 
    15 PB0RWCC2 PB0RWCC2 ; 
    15 PB0RWCY2 PB0RWCY2 ; 
  10 PB0RWCDT PB0RWCDT ; 
    15 PB0RW-CCYY PB0RW-CCYY ; 
      20 PB0RWCCC PB0RWCCC ; 
      20 PB0RWYYY PB0RWYYY ; 
    15 PB0RWMMM PB0RWMMM ; 
    15 PB0RWDDD PB0RWDDD ; 
  10 PB0RWIXT PB0RWIXT ; 
  10 PB0RWIX2 PB0RWIX2 ; 
  10 PB0RWIX3 PB0RWIX3 ; 
  10 PB0RWDRI PB0RWDRI ; 
  10 PB0RWSRI PB0RWSRI ; 
  10 PB0RWBRI PB0RWBRI ; 
  10 PB0RWMXD PB0RWMXD ; 
  10 PB0RWMXS PB0RWMXS ; 
  10 PB0RWMXB PB0RWMXB ; 
  10 PB0RWEX1 PB0RWEX1 ; 
  10 PB0RWSRF PB0RWSRF ; 
  10 PB0RWJCE PB0RWJCE ; 
  10 PB0RWJCP PB0RWJCP ; 
  10 PB0RWJCC PB0RWJCC ; 
  10 PB0RWCND PB0RWCND ; 
  10 PB0RWTYP PB0RWTYP ; 
  10 PB0RWCLG PB0RWCLG ; 
  10 PB0RWMPR PB0RWMPR ; 
  10 PB0RWPNM PB0RWPNM ; 
  10 PB0RWLTC PB0RWLTC ; 
end // end PB0RW01

//*** RECORD=PB0RW02 ****
// ************************************************************
// *
// *    JCL RECORD AREA  (WORKING STORAGE
// *
// ************************************************************
// ***********************
Record PB0RW02 type basicRecord
  10 PB0RWJCP PB0RWJCP ; 
  10 PB0RWJCE PB0RWJCE ; 
    15 PB0RWEX1 PB0RWEX1 ; 
    15 PB0RWPNM PB0RWPNM ; 
    15 * char(58) ; 
  10 PB0RWJCC PB0RWJCC [16] ; 
    15 * char(23) ; 
    15 PB0RWCLG PB0RWCLG ; 
    15 * char(40) ; 
  10 PB0RWTYP PB0RWTYP ; 
  10 PB0RWCND PB0RWCND [16] ; 
    15 * char(4) ; 
    15 PB0RWCMM PB0RWCMM ; 
    15 * char(12) ; 
end // end PB0RW02

//*** RECORD=PB0RW03 ****
// ************************************************************
// *
// *   Screen table working storage
// *
// ************************************************************
// ***********************
Record PB0RW03 type basicRecord
  10 PB0RWDTW PB0RWDTW ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; // XGP_GPC_CD
    15 PB0RWIDT PB0RWIDT ; 
    15 PB0RWALF PB0RWALF ; 
    15 * char(62) ; 
end // end PB0RW03

//*** RECORD=PB0RW04 ****
// ************************************************************
// *
// *  Report working storage for the array to pass to ta6rec
// *
// ************************************************************
// ***********************
Record PB0RW04 type basicRecord
  10 PB0RWBTB PB0RWBTB [10] ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; // XGP_GPC_CD
    15 PB0RWIDT PB0RWIDT ; 
    15 PB0RWALF PB0RWALF ; 
    15 * char(62) ; 
end // end PB0RW04

DataItem PB0RW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0RW-CCYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0RW-CCYY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0RW-MAP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0RW-MAP-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date +1
DataItem PB0RW-MAP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application flag
DataItem PB0RWALF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. index
DataItem PB0RWBRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both report tbl recd
DataItem PB0RWBTB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0RWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0RWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          centry
DataItem PB0RWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PB0RWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement logic
DataItem PB0RWCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PB0RWCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem PB0RWCND char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date +1
DataItem PB0RWCY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PB0RWCY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PB0RWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PB0RWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. index
DataItem PB0RWDRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. report tablerec.
DataItem PB0RWDTW char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem PB0RWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID mo rng
DataItem PB0RWIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PB0RWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PB0RWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem PB0RWIXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem PB0RWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem PB0RWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem PB0RWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Less than condidition override
DataItem PB0RWLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem PB0RWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// po id delivery month
DataItem PB0RWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

//          month
DataItem PB0RWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max jcl lines for primary rpts
DataItem PB0RWMPR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both rpt. max.
DataItem PB0RWMXB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. max.
DataItem PB0RWMXD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summ. rpt. max.
DataItem PB0RWMXS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date - production year
DataItem PB0RWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// map po id date
DataItem PB0RWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proc name
DataItem PB0RWPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// secondary rpts needed flag
DataItem PB0RWSRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summ. rpt. index
DataItem PB0RWSRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL statement type
DataItem PB0RWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PB0RWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

