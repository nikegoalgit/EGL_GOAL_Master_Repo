package pb0y;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pb.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0Y ****
// This is the P.P.R. Material Date, Cut Date, Need Date
// Maintenance Screen.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 10/03/97   KGRAHA   PCA400 - New application.  Copied from
//                     PB0V.
// 09/20/99   KGRAHA   CHANGE TO USE NEW VIEW VPOITM04.
// *********************
Program PB0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0VW01 PB0VW01; // record
  PB0YW01 PB0YW01; // record
  PC8REC PC8REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSTREC TSTREC; // record
  VFCTY002 VFCTY002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM04 VPOITM04; // record
  VPOPPR01 VPOPPR01; // record
  VPOREG01 VPOREG01; // record
  VPOTYP01 VPOTYP01; // record
  VPOVFY01 VPOVFY01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YMTTBL {deleteAfterUse = yes}; // table
  use YACTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PB0YM.PB0YM001,  // forms
      PB0YM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Initialize maps and working storage records.*/
     /* ------------------------------------------------------------*/

    set PB0YM001 initial;

    set VPOPPR01 empty;
    set VPOHDR02 empty;
    set VPOITM04 empty;
    set VPOVFY01 empty;
    set PB0VW01 empty;
    set PB0YW01 empty;
    set TA1REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set XX0XW02 empty;

    set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Hide updt cnt*/
    set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Hide updt cnt msg*/


    PB0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " ";

     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto PB0Y001;


    PB0Y001: PB0Y001();
     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto PB0Y001;


  end // end main
end // end PB0Y

// Main process
Function PB0Y001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  PB0Y100(); /* Format and display the MAP*/

  PB0Y200(); /* Check attention identifier*/

  PB0Y300(); /* Reset fields to normal intensity*/

  PB0Y400(); /* Verify the data that was entered*/

  PB0Y500(); /* Process the request*/


end // end PB0Y001

// Display MAP 1
Function PB0Y100()
   /* ------------------------------------------------------------*/
   /* Show the map.*/
   /* Indicate sound alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/

    PB0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  else

    set PB0YM001 alarm; /* Indicate sound alarm*/

  end

  if (PCWREC.XXXMSGNO != 0)

    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end
                                   /* Error message passed back from*/
                                  /* called application*/
    PCWREC.XXXMSGNO = 0;

    set PB0YM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0YM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0YM001.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0Y110(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0YM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0YM001.CAITEM; /* Application data*/


end // end PB0Y100

// Check for ? inquiry by user
Function PB0Y110()
    /* ----------------------------------------------------------*/
     /* PO Type pop up window*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PC4ORTYP == "? " /* If PO TYPE pop up window requested*/
   || PB0YM001.PC4ORTYP == " ?")

    if (PB0VW01.TYP-ARRAY-SW == " ")
      PB0YS75(); /* Load po type array*/
    end

    PB0Y111(); /* Pop up window routine*/

    set PB0YM001.PC4ORTYP cursor;

    exit stack; /* Exit to redisplay map*/

  end

    /* ----------------------------------------------------------*/
     /* Region Code pop up window*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PO-REG-CD == "? " /* If REGION pop up window requested*/
   || PB0YM001.PO-REG-CD == " ?")

    if (PB0VW01.REG-ARRAY-SW == " ")
      PB0YS15(); /* Load region array*/
    end

    PB0Y111(); /* Pop up window routine*/

    set PB0YM001.PO-REG-CD cursor;

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0Y110

// Pop-up window routine
Function PB0Y111()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry. 'S' should be used to select*/
        /* the code.*/

     /* 2) Set map page after the window displayed*/

   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
            /* REGION CODE TABLE WINDOW*/
   /* ------------------------------------------------------------*/

  if (PB0YM001.PO-REG-CD == "? " /* If ? in region field*/
   || PB0YM001.PO-REG-CD == " ?")

    XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
    XX0XW02.XX0XWHDR = " REGION CODE TABLE          ";

    while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
      XPYRG01(); /* perform region code window*/
    end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
      PB0YM001.PO-REG-CD = PB0VW01.PO-REG[XX0XWPIX]; /* move code*/
    else
      PB0YM001.PO-REG-CD = " "; /* Reset map field*/
    end

    converseLib.clearScreen();
     /* Restore map*/


  else


    /* ------------------------------------------------------------*/
            /* PO TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0YM001.PC4ORTYP == "? " /* If ? in po type field*/
     || PB0YM001.PC4ORTYP == " ?")

      XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
      XX0XW02.XX0XWHDR = " PO TYPE TABLE              ";

      while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
        XPYTP01(); /* perform po type window*/
      end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
        PB0YM001.PC4ORTYP = PB0VW01.PO-TYP[XX0XWPIX]; /* move code*/
      else
        PB0YM001.PC4ORTYP = " "; /* Reset map field*/
      end

      converseLib.clearScreen();
       /* Restore map*/


    end
  end


end // end PB0Y111

// Check attention identifier
Function PB0Y200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PB0YM001 initial; /* Clear MAP*/

    set VPOPPR01 empty; /* Clear w.s. records*/
    set VPOHDR02 empty;
    set VPOITM04 empty;
    set VPOVFY01 empty;
    set PB0VW01 empty;
    set PB0YW01 empty;

    set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
    set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PB0YM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PB0YM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0YM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PB0YM001.CATOAP cursor, modified, bold; /* Highlight*/

    PB0YM001.XXXPRCNM = "PB0Y200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (PB0YM001.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set PB0YM001.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        PB0YM001.XXXPRCNM = "PB0Y200"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0YM001"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "PB0U"; /* Transfer to P.P.R. menu*/
      end
    end

    XSPCS01(); /* Exit to another application*/

    PB0YM001.XXXPRCNM = "PB0Y200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* PF6 was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PB0YM001.XXXPRCNM = "PB0Y200"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set PB0YM001 initial; /* Clear MAP*/

      set VPOPPR01 empty; /* Clear w.s. records*/
      set VPOHDR02 empty;
      set VPOITM04 empty;
      set VPOVFY01 empty;
      set PB0VW01 empty;
      set PB0YW01 empty;

      set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
      set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PB0Y200

// Reset highlighted fields
Function PB0Y300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0YM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set PB0YM001.CAITEM initialAttributes; /* FAST PATH application data*/

  set PB0YM001.PO-REG-CD initialAttributes; /* Region*/
  set PB0YM001.PONBR initialAttributes; /* PO*/
  set PB0YM001.FY1FCTYC initialAttributes; /* Factory*/
  set PB0YM001.PCFSECD initialAttributes; /* Season*/
  set PB0YM001.PCFBUYYR initialAttributes; /* Year*/
  set PB0YM001.PCFBUYMO initialAttributes; /* Buy month*/
  set PB0YM001.SY1STNBR initialAttributes; /* Style*/
  set PB0YM001.SY2CLRID initialAttributes; /* Color*/
  set PB0YM001.PC4ORTYP initialAttributes; /* PO Type*/
  set PB0YM001.PC-MAT-DT initialAttributes; /* Material Date*/
  set PB0YM001.PC-CUT-DT initialAttributes; /* Cut Date*/
  set PB0YM001.PC-NEED-DT initialAttributes; /* Need Date*/
  set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
  set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/

end // end PB0Y300

// Verify data that was entered
Function PB0Y400()
   /* ------------------------------------------------------------*/
   /* Verify entered values on MAP.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/


    /* ----------------------------------------------------------*/
     /* Verify Region Code*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PO-REG-CD > " ") /* If REGION entered*/
    PB0VW01.PO-REG-CD = PB0YM001.PO-REG-CD;
    if (PB0VW01.PO-REG-CHAR1 == " ") /* Zero edit*/
      PB0VW01.PO-REG-CHAR1 = "0";
    else
      if (PB0VW01.PO-REG-CHAR2 == " ")
        PB0VW01.PO-REG-CHAR2 = PB0VW01.PO-REG-CHAR1;
        PB0VW01.PO-REG-CHAR1 = "0";
      end
    end

    PB0YM001.PO-REG-CD = PB0VW01.PO-REG-CD;

    if (PB0YM001.PO-REG-CD == PB0VW01.PB0VREG) /* If this one was*/
      if (PB0VW01.REG-ERR-SW == "Y") /* already verified and in error*/
        set PB0YM001.PO-REG-CD cursor, bold;
        converseLib.validationFailed(528); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else
      PB0VW01.PB0VREG = " "; /* Initialize w.s. field*/
      PB0VW01.REG-ERR-SW = " "; /* and error switch*/

      PB0YS10(); /* Verify region*/

      PB0VW01.PB0VREG = PB0YM001.PO-REG-CD; /* Save the value*/
      if (converseVar.validationMsgNum != 0) /* If error*/
        PB0VW01.REG-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify PO Number*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PONBR > 0) /* If PO NUMBER entered*/
    if (PB0YM001.PO-REG-CD > " ") /* If region also entered*/
      if (PB0YM001.PONBR == PB0VW01.PONBR
       && PB0YM001.PO-REG-CD == PB0VW01.PB0VREGION) /* If this selection*/
        if (PB0VW01.PO-ERR-SW == "Y") /* already verified and in error*/
          set PB0YM001.PONBR cursor, bold;
          converseLib.validationFailed(69); /* Indicate invalid selection*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else /* New po or/and new region entered*/
        PB0VW01.PONBR = 0; /* Initialize w.s. fields*/
        PB0VW01.PB0VREGION = " ";
        PB0VW01.PO-ERR-SW = " "; /* and error switch*/

        PB0VW01.PC3PONBR = PB0YM001.PONBR;
        PB0VW01.PO-REG-CD = PB0YM001.PO-REG-CD;
        PB0YS60(); /* Verify po number*/

        PB0VW01.PONBR = PB0YM001.PONBR; /* Save the values*/
        PB0VW01.PB0VREGION = PB0YM001.PO-REG-CD;

        if (converseVar.validationMsgNum != 0) /* If error*/
          if (SQLCA.VAGen_SQLCODE == 100) /* If po not found*/
            PB0VW01.PO-ERR-SW = "Y";
          end

          exit stack; /* Exit to redisplay map*/

        end
      end
    else /* Region not entered*/
      set PB0YM001.PO-REG-CD cursor, bold;
      converseLib.validationFailed(528); /* Display message*/
      PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Style Number*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.SY1STNBR > " " /* If STYLE entered*/
   && PB0YM001.SY2CLRID == " ") /* and color not entered*/
    if (PB0YM001.SY1STNBR == PB0VW01.SY1STNBR) /* If this one was*/
      if (PB0VW01.STY-ERR-SW == "Y") /* already verified and in error*/
        set PB0YM001.SY1STNBR cursor, bold;
        converseLib.validationFailed(196); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else
      PB0VW01.SY1STNBR = " "; /* Initialize w.s. field*/
      PB0VW01.STY-ERR-SW = " "; /* and error switch*/

      PB0YS50(); /* Verify style*/

      PB0VW01.SY1STNBR = PB0YM001.SY1STNBR; /* Save the value*/
      if (converseVar.validationMsgNum != 0) /* If error*/
        PB0VW01.STY-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Color Code*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.SY2CLRID > " ") /* If COLOR entered*/
    if (PB0YM001.SY1STNBR == " ") /* but style not entered*/
      set PB0YM001.SY2CLRID cursor, bold;
      converseLib.validationFailed(419); /* Dislay error msg*/
      PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    else /* Both style and color entered*/
      if (PB0YM001.SY1STNBR == PB0VW01.STNBR
       && PB0YM001.SY2CLRID == PB0VW01.SY2CLRID) /* If style/color*/
        if (PB0VW01.COLR-ERR-SW == "Y") /* already verified and in error*/
          set PB0YM001.SY1STNBR bold;
          set PB0YM001.SY2CLRID cursor, bold;
          converseLib.validationFailed(52); /* Indicate invalid selection*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        PB0VW01.STNBR = " "; /* Initialize w.s. fields*/
        PB0VW01.SY2CLRID = " ";
        PB0VW01.COLR-ERR-SW = " "; /* Initialize error switch*/

        PB0YS50(); /* Verify color*/

        PB0VW01.STNBR = PB0YM001.SY1STNBR; /* Save the values*/
        PB0VW01.SY2CLRID = PB0YM001.SY2CLRID;
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.COLR-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify that the Region code was entered with the PO number*/
     /* or with the style/color.*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PO-REG-CD == " ") /* REGION,*/
    set PB0YM001.PO-REG-CD cursor, bold;

    converseLib.validationFailed(528); /* Indicate invalid selection*/
    PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  else
    if (PB0YM001.PONBR == 0) /* PO NBR*/
      if (PB0YM001.SY1STNBR == " " /* STYLE*/
       && PB0YM001.SY2CLRID == " ") /* COLOR*/

        set PB0YM001.PONBR cursor, bold;
        set PB0YM001.SY1STNBR bold;
        set PB0YM001.SY2CLRID bold;

        converseLib.validationFailed(544); /* Must enter po or sty/clr msg*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
        exit stack; /* Exit to redisplay map*/

      end

      if (PB0YM001.SY2CLRID == " ") /* COLOR*/

        set PB0YM001.SY2CLRID cursor, bold;

        converseLib.validationFailed(539); /* Must enter color msg*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
        exit stack; /* Exit to redisplay map*/

      end
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Factory Code*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.FY1FCTYC > " ") /* If FACTORY entered*/
    if (PB0YM001.FY1FCTYC == PB0VW01.FY1FCTYC) /* If this one was*/
      if (PB0VW01.FCTY-ERR-SW == "Y") /* already verified and in error*/
        set PB0YM001.FY1FCTYC cursor, bold;
        converseLib.validationFailed(32); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else
      PB0VW01.FY1FCTYC = " "; /* Initialize w.s. field*/
      PB0VW01.FCTY-ERR-SW = " "; /* and error switch*/

      PB0YS30(); /* Verify factory*/

      PB0VW01.FY1FCTYC = PB0YM001.FY1FCTYC; /* Save the value*/
      if (converseVar.validationMsgNum != 0) /* If error*/
        PB0VW01.FCTY-ERR-SW = "Y";

        set PB0YM001.FY1FCTYC cursor, bold;
        converseLib.validationFailed(32); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Season/Year*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PCFSECD > " ") /* If SEASON/YEAR entered*/
    if (PB0YM001.PCFSECD == PB0VW01.PCFSECD /* If this season/year*/
    )                                       /* already verified*/
      if (PB0VW01.SESN-ERR-SW == "Y") /* and in error*/

        set PB0YM001.PCFSECD cursor, bold;
        converseLib.validationFailed(129); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end

    else
      PB0VW01.PCFSECD = " "; /* Initialize w.s. fields*/
      PB0VW01.SESN-ERR-SW = " "; /* Initialize error switch*/

      if (PB0YM001.PONBR > 0 /* PO# entered*/
       && PB0VW01.PO-ERR-SW != "Y") /* PO# not in error*/

        if (PB0YM001.PCFSECD != VPOHDR02.PCFSECD) /* Incorrect PO typ*/

          PB0VW01.SESN-ERR-SW = "Y";
          set PB0YM001.PCFSECD cursor, bold;
          converseLib.validationFailed(129); /* Indicate invalid selection*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        if (PB0YM001.SY1STNBR > " "   /* Style entered*/
         && PB0YM001.SY2CLRID > " "   /* Color entered*/
         && PB0VW01.STY-ERR-SW != "Y" /* Style not in error*/
         && PB0VW01.COLR-ERR-SW != "Y") /* Color not in error*/

          if (PB0YM001.PCFSECD != VPOITM04.PCFSECD) /* Incorrect PO typ*/

            PB0VW01.SESN-ERR-SW = "Y";
            set PB0YM001.PCFSECD cursor, bold;
            converseLib.validationFailed(129); /* Indicate invalid selection*/
            PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end
        end
      end

      PB0VW01.PCFSECD = PB0YM001.PCFSECD; /* Save the values*/

    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Buy Year*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PCFBUYYR > 0) /* If YEAR entered*/
    if (PB0YM001.PCFBUYYR < 1980 /* If year in error*/
     || PB0YM001.PCFBUYYR > 2200)

      set PB0YM001.PCFBUYYR cursor, bold;
      converseLib.validationFailed(477); /* Indicate invalid selection*/
      PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end
  end

    /* ----------------------------------------------------------*/
     /* Verify Buy Month*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PCFBUYMO > 12) /* If BUY MONTH in error*/

    set PB0YM001.PCFBUYMO cursor, bold;
    converseLib.validationFailed(31); /* Indicate invalid selection*/
    PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

    /* ----------------------------------------------------------*/
     /* Verify PO Type*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PC4ORTYP > " ") /* If PO TYPE entered*/
    if (PB0YM001.PC4ORTYP == PB0VW01.PC4ORTYP) /* If this one was*/
      if (PB0VW01.TYP-ERR-SW == "Y") /* already verified and in error*/
        set PB0YM001.PC4ORTYP cursor, bold;
        converseLib.validationFailed(33); /* Indicate invalid selection*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else
      PB0VW01.PC4ORTYP = " "; /* Initialize w.s. field*/
      PB0VW01.TYP-ERR-SW = " "; /* and error switch*/

      if (PB0YM001.PONBR > 0 /* PO # entered*/
       && PB0VW01.PO-ERR-SW != "Y") /* PO# not in error*/

        if (PB0YM001.PC4ORTYP != VPOHDR02.PC4ORTYP) /* Inorrect PO typ*/

          PB0VW01.TYP-ERR-SW = "Y";
          set PB0YM001.PC4ORTYP cursor, bold;
          converseLib.validationFailed(33); /* Indicate invalid selection*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        if (PB0YM001.SY1STNBR > " "   /* Style entered*/
         && PB0YM001.SY2CLRID > " "   /* Color entered*/
         && PB0VW01.STY-ERR-SW != "Y" /* Style not in error*/
         && PB0VW01.COLR-ERR-SW != "Y") /* Color not in error*/

          if (PB0YM001.PC4ORTYP != VPOITM04.PC4ORTYP) /* Inorrect PO typ*/

            PB0VW01.TYP-ERR-SW = "Y";
            set PB0YM001.PC4ORTYP cursor, bold;
            converseLib.validationFailed(33); /* Indicate invalid selection*/
            PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end
        end
      end

      PB0VW01.PC4ORTYP = PB0YM001.PC4ORTYP; /* Save the values*/

    end
  end

   /* --------------------------------------------------------------*/
   /* Verify that PO data entered on map exists in the PO system*/
   /* --------------------------------------------------------------*/

  set VPOHDR02 empty;

  VPOHDR02.XGPCD = "03";
  VPOHDR02.PO-REG-CD = PB0YM001.PO-REG-CD;
  VPOHDR02.PC3PONBR = PB0YM001.PONBR;
  VPOHDR02.PCFSECD = PB0YM001.PCFSECD;
  VPOHDR02.FY1FCTYC = PB0YM001.FY1FCTYC;
  VPOHDR02.PC4ORTYP = PB0YM001.PC4ORTYP;

  if (PB0YM001.PCFBUYYR != 0
   && PB0YM001.PCFBUYMO != 0)

    PB0YW-BUY-CCYY = PB0YM001.PCFBUYYR;
    PB0YW-WRK-DT = PB0YM001.PCFBUYMO;
    move PB0YW-WRK-MM to PB0YW-BUY-MM withV60Compat;
    VPOHDR02.PC3BUYMO = PB0YW-BUY-DT;

  end

  PB0YS-POHDR-Z6(); /* Open VPOHDR02 csr*/
  PB0YS-POHDR-G6(); /* Fetch VPOHDR02 rcd*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Invalid PO header data*/
   && SQLCA.VAGen_SQLCODE != -811)

    PB0Y410(); /* Highlight filled map fields*/
    PB0YS-POHDR-Q6(); /* Close VPOHDR02 csr*/
    exit stack;

  end

  PB0YS-POHDR-Q6(); /* Close VPOHDR02 csr*/


  set VPOITM04 empty;

  VPOITM04.XGPCD = "03";
  VPOITM04.PO-REG-CD = PB0YM001.PO-REG-CD;

  if (PB0YM001.PONBR == 0)
    VPOITM04.PC3PONBR = -1;
  else
    VPOITM04.PC3PONBR = PB0YM001.PONBR;
  end

  if (PB0YM001.FY1FCTYC == " ")
    VPOITM04.FY1FCTYC = "*";
  else
    VPOITM04.FY1FCTYC = PB0YM001.FY1FCTYC;
  end

  if (PB0YM001.PCFSECD == " ")
    VPOITM04.PCFSECD = "*";
  else
    VPOITM04.PCFSECD = PB0YM001.PCFSECD;
  end

  if (PB0YM001.SY1STNBR == " ")
    VPOITM04.SY1STNBR = "*";
  else
    VPOITM04.SY1STNBR = PB0YM001.SY1STNBR;
  end

  if (PB0YM001.SY2CLRID == " ")
    VPOITM04.SY2CLRID = "*";
  else
    VPOITM04.SY2CLRID = PB0YM001.SY2CLRID;
  end

  if (PB0YM001.PC4ORTYP == " ")
    VPOITM04.PC4ORTYP = "*";
  else
    VPOITM04.PC4ORTYP = PB0YM001.PC4ORTYP;
  end


  PB0YS-POITM-ZV(); /* Open VPOITM04 csr*/
  PB0YS-POITM-GV(); /* Fetch VPOITM04 rcd*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Invalid PO item data*/
   && SQLCA.VAGen_SQLCODE != -811)

    PB0Y410(); /* Highlight filled map fields*/
    PB0YS-POITM-QV(); /* Close VPOITM04 csr*/
    exit stack;

  end

  PB0YS-POITM-QV(); /* Close VPOITM04 csr*/


    /* ----------------------------------------------------------*/
     /* Verify Material Date*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PC-MAT-DT > 0) /* If MAT DATE entered (CCYYMMDD)*/
    if (PB0YM001.PC-MAT-DT == PB0YW01.PC-MAT-DT) /* If date was verified*/
      if (PB0YW01.PC-MAT-DT-ERR-SW == "Y") /* If date invalid*/
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-MAT-DT cursor, bold; /* Highlight MAT date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else /* Verify date*/
      PB0YW01.PC-MAT-DT = 0; /* Initialize w.s. date*/
      PB0YW01.PC-MAT-DT-ERR-SW = " ";
                                  /* Initialize date error switch*/

      PB0VW01.EDITDT8 = PB0YM001.PC-MAT-DT; /* Check if year valid*/
      if (PB0VW01.EDITCC < 19
       && PB0VW01.EDITYY < 80)
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-MAT-DT cursor, bold; /* Highlight MAT date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
        PB0YW01.PC-MAT-DT = PB0YM001.PC-MAT-DT;
        PB0YW01.PC-MAT-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end

      set TA2REC empty;
      TA2REC.TA2GRGGN = PB0YM001.PC-MAT-DT;
      TA2REC.TA2DYAOD = 0;

      PB0YS40(); /* Call date validation routine*/

      PB0YW01.PC-MAT-DT = PB0YM001.PC-MAT-DT;
      if (TA2REC.TA2RTNCD == 0) /* Date valid*/
        PB0VW01.EDITDT6 = VGVar.currentShortGregorianDate; /* Compare with current date*/
        if (EDITYY > 90)
          EDITCC = 19;
        else
          EDITCC = 20;
        end
        if (PB0VW01.EDITDT8 > PB0YM001.PC-MAT-DT)
          converseLib.validationFailed(540); /* Display error msg*/
          set PB0YM001.PC-MAT-DT cursor, bold; /* Highlight MATRL date*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else /* Invalid date*/
        set PB0YM001.PC-MAT-DT cursor, bold; /* Highlight MAT date*/
        PB0YW01.PC-MAT-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end
    end
  else
    PB0YW01.PC-MAT-DT = 0;
    PB0YW01.PC-MAT-DT-ERR-SW = " ";
  end

    /* ----------------------------------------------------------*/
     /* Verify Cut Date*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PC-CUT-DT > 0) /* If CUT DATE entered (CCYYMMDD)*/
    if (PB0YM001.PC-CUT-DT == PB0YW01.PC-CUT-DT) /* If date was verified*/
      if (PB0YW01.PC-CUT-DT-ERR-SW == "Y") /* If date invalid*/
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-CUT-DT cursor, bold; /* Highlight CUT date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else /* Verify date*/
      PB0YW01.PC-CUT-DT = 0; /* Initialize w.s. date*/
      PB0YW01.PC-CUT-DT-ERR-SW = " ";
                                  /* Initialize date error switch*/

      PB0VW01.EDITDT8 = PB0YM001.PC-CUT-DT; /* Check if year valid*/
      if (PB0VW01.EDITCC < 19
       && PB0VW01.EDITYY < 80)
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-CUT-DT cursor, bold; /* Highlight CUT date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
        PB0YW01.PC-CUT-DT = PB0YM001.PC-CUT-DT;
        PB0YW01.PC-CUT-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end

      set TA2REC empty;
      TA2REC.TA2GRGGN = PB0YM001.PC-CUT-DT;
      TA2REC.TA2DYAOD = 0;

      PB0YS40(); /* Call date validation routine*/

      PB0YW01.PC-CUT-DT = PB0YM001.PC-CUT-DT;
      if (TA2REC.TA2RTNCD == 0) /* Date valid*/
        PB0VW01.EDITDT6 = VGVar.currentShortGregorianDate; /* Compare with current date*/
        if (EDITYY > 90)
          EDITCC = 19;
        else
          EDITCC = 20;
        end
        if (PB0VW01.EDITDT8 > PB0YM001.PC-CUT-DT)
          converseLib.validationFailed(540); /* Display error msg*/
          set PB0YM001.PC-CUT-DT cursor, bold; /* Highlight CUT date*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else /* Invalid date*/
        set PB0YM001.PC-CUT-DT cursor, bold; /* Highlight CUT date*/
        PB0YW01.PC-CUT-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end
    end
  else
    PB0YW01.PC-CUT-DT = 0;
    PB0YW01.PC-CUT-DT-ERR-SW = " ";
  end

    /* ----------------------------------------------------------*/
     /* Verify Need Date*/
    /* ----------------------------------------------------------*/

  if (PB0YM001.PC-NEED-DT > 0) /* If NEED DATE entered (CCYYMMDD)*/
    if (PB0YM001.PC-NEED-DT == PB0YW01.PC-NEED-DT) /* If date verified*/
      if (PB0YW01.PC-NEED-DT-ERR-SW == "Y") /* If date invalid*/
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-NEED-DT cursor, bold; /* Highlight NEED date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    else /* Verify date*/
      PB0YW01.PC-NEED-DT = 0; /* Initialize w.s. date*/
      PB0YW01.PC-NEED-DT-ERR-SW = " ";
                                  /* Initialize date error switch*/

      PB0VW01.EDITDT8 = PB0YM001.PC-NEED-DT; /* Check if year valid*/
      if (PB0VW01.EDITCC < 19
       && PB0VW01.EDITYY < 80)
        converseLib.validationFailed(38); /* Display error msg*/
        set PB0YM001.PC-NEED-DT cursor, bold; /* Highlight NEED-date*/
        PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
        PB0YW01.PC-NEED-DT = PB0YM001.PC-NEED-DT;
        PB0YW01.PC-NEED-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end

      set TA2REC empty;
      TA2REC.TA2GRGGN = PB0YM001.PC-NEED-DT;
      TA2REC.TA2DYAOD = 0;

      PB0YS40(); /* Call date validation routine*/

      PB0YW01.PC-NEED-DT = PB0YM001.PC-NEED-DT;
      if (TA2REC.TA2RTNCD == 0) /* Date valid*/
        PB0VW01.EDITDT6 = VGVar.currentShortGregorianDate; /* Compare with current date*/
        if (EDITYY > 90)
          EDITCC = 19;
        else
          EDITCC = 20;
        end
        if (PB0VW01.EDITDT8 > PB0YM001.PC-NEED-DT)
          converseLib.validationFailed(540); /* Display error msg*/
          set PB0YM001.PC-NEED-DT cursor, bold; /* Highlight NEED date*/
          PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else /* Invalid date*/
        set PB0YM001.PC-NEED-DT cursor, bold; /* Highlight NEED date*/
        PB0YW01.PC-NEED-DT-ERR-SW = "Y";

        exit stack; /* Exit to redisplay map*/

      end
    end
  else
    PB0YW01.PC-NEED-DT = 0;
    PB0YW01.PC-NEED-DT-ERR-SW = " ";
  end

   /* --------------------------------------------------------------*/
   /* Verify that at least one date field has been filled*/
   /* --------------------------------------------------------------*/

  PB0YW01.MAP-FILLED = "Y";

  if (PB0YM001.PC-MAT-DT == 0
   && PB0YM001.PC-CUT-DT == 0
   && PB0YM001.PC-NEED-DT == 0)

    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PC-MAT-DT cursor, bold;
    set PB0YM001.PC-CUT-DT bold;
    set PB0YM001.PC-NEED-DT bold;
    PB0YM001.XXXPRCNM = "PB0Y400"; /* Process name*/
    converseLib.validationFailed(38);

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is enter) /* Enter pressed*/

    set PB0YM001.PO-REG-CD cursor; /* Set cursor*/
    set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
    set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/
    PB0VW01.UPDSW = " "; /* Reset switch*/
    converseLib.validationFailed(541); /* Display PF6 msg*/

  end



  PB0YM001.XXXPRCNM = "PB0Y   ";

end // end PB0Y400

// Highlight map fields entered
Function PB0Y410()
   /* --------------------------------------------------------------*/
   /* Highlight map fields that have been filled*/
   /* --------------------------------------------------------------*/


  if (PB0YM001.PC4ORTYP > " ")
    set PB0YM001.PC4ORTYP bold;
  end

  if (PB0YM001.SY2CLRID > " ")
    set PB0YM001.SY2CLRID bold;
  end

  if (PB0YM001.SY1STNBR > " ")
    set PB0YM001.SY1STNBR bold;
  end

  if (PB0YM001.PCFBUYMO > 0)
    set PB0YM001.PCFBUYMO bold;
  end

  if (PB0YM001.PCFBUYYR > 0)
    set PB0YM001.PCFBUYYR bold;
  end

  if (PB0YM001.PCFSECD > " ")
    set PB0YM001.PCFSECD bold;
  end

  if (PB0YM001.FY1FCTYC > " ")
    set PB0YM001.FY1FCTYC bold;
  end

  if (PB0YM001.PONBR > 0)
    set PB0YM001.PONBR bold;
  end

  set PB0YM001.PO-REG-CD cursor, bold;
  converseLib.validationFailed(543);
  PB0YM001.XXXPRCNM = "PB0Y410"; /* Process name*/
end // end PB0Y410

// Process a valid request
Function PB0Y500()
   /* --------------------------------------------------------------*/
   /* See if there are records to update*/
   /* --------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* UPDT/ADD was requested*/

    set VPOPPR01 empty; /* Clear row storage area*/

    VPOPPR01.XGPCD = "03"; /* GPC Code*/
    VPOPPR01.PO-REG-CD = PB0YM001.PO-REG-CD; /* PO Region Cd*/
    VPOPPR01.PC3PONBR = PB0YM001.PONBR; /* PO Number*/
    VPOPPR01.FY1FCTYC = PB0YM001.FY1FCTYC; /* Factory Cd*/
    VPOPPR01.PCFSECD = PB0YM001.PCFSECD; /* Season Cd*/
    VPOPPR01.PCFBUYYR = PB0YM001.PCFBUYYR; /* Buy year*/

    PB0YW01.PB0YW-WRK-DT = 0;
    PB0YW01.PB0YW-WRK-MM = PB0YM001.PCFBUYMO; /* Buy mt*/
    VPOPPR01.PCFBUYMO = PB0YW01.PB0YW-WRK-DT;

    VPOPPR01.SY1STNBR = PB0YM001.SY1STNBR; /* Style nbr*/
    VPOPPR01.SY2CLRID = PB0YM001.SY2CLRID; /* Color Id*/
    VPOPPR01.PC4ORTYP = PB0YM001.PC4ORTYP; /* PO Type*/

    PB0YS-POPPR-R1(); /* Select count*/

    PB0YW01.POPPR-RCD-CNT = PCYREC.PCYCOUNT;

    if (PB0YW01.POPPR-RCD-CNT > 0) /* Rows found to update*/

      PB0VW01.UPDSW = "U"; /* Update switch*/

      PB0YM001.PB0Y-RCD-CNT = PB0YW01.POPPR-RCD-CNT;
      set PB0YM001.PC-MAT-DT cursor;
      set PB0YM001.PB0Y-RCD-CNT initialAttributes; /* Show updt cnt*/
      set PB0YM001.PB0Y-RCD-MSG initialAttributes; /* Show updt cnt msg*/

      if (PB0YW01.MAP-FILLED == "Y") /* At least 1 date field entered*/
        converseLib.validationFailed(384); /* Press PF9 to confirm*/
        set PB0YM001.PO-REG-CD cursor; /* Place cursor*/
      end

    else /* No rows found, must insert a row*/

      PB0VW01.UPDSW = "A"; /* Update switch*/

      if (PB0YW01.MAP-FILLED == "Y") /* All fields entered on map*/

        PB0YS-POPPR-Z(); /* Check to see if the unique key*/
                                   /* already exists*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Row w/key data found. Can't add.*/

          converseLib.validationFailed(542); /* Duplicate key msg*/
          PB0YM001.XXXPRCNM = "PB0Y500"; /* Process name*/
          set PB0YM001.PO-REG-CD cursor, bold; /* Region*/
          set PB0YM001.PONBR bold; /* PO*/
          set PB0YM001.SY1STNBR bold; /* Style*/
          set PB0YM001.SY2CLRID bold; /* Color*/
          exit stack;

        end

        PB0Y520(); /* Validate all map fields entered*/

        converseLib.validationFailed(384); /* Press PF9 to confirm*/
        PB0YM001.XXXPRCNM = "PB0Y500"; /* Process name*/
        set PB0YM001.PO-REG-CD cursor; /* Place cursor*/

      end

    end
  else

    /* --------------------------------------------------------------*/
    /* Process the update or add*/
    /* --------------------------------------------------------------*/

    if (converseVar.eventKey is pf9) /* UPDT/ADD was confirmed*/

      XX0XS01(); /* Get date and time*/

      if (PB0VW01.UPDSW == "U") /* Record(s) to update*/

        PB0YS-POPPR-Z1(); /* Open VPOPPR01 csr*/
        PB0YS-POPPR-G1(); /* Fetch a VPOPPR01 rcd*/

        while (SQLCA.VAGen_SQLCODE == 0) /* While there are rcds to updt*/

          if (PB0YM001.PC-MAT-DT > 0) /* Material Dt entered*/
            VPOPPR01.PC-MAT-DT = PB0YM001.PC-MAT-DT;
          end
          if (PB0YM001.PC-CUT-DT > 0) /* Cut Dt entered*/
            VPOPPR01.PC-CUT-DT = PB0YM001.PC-CUT-DT;
          end
          if (PB0YM001.PC-NEED-DT > 0) /* Need Dt entered*/
            VPOPPR01.PC-NEED-DT = PB0YM001.PC-NEED-DT;
          end

          PB0YS-POPPR-V(); /* Update a VPOPPR01 rcd*/
          PB0YS-POPPR-G1(); /* Fetch a VPOPPR01 rcd*/

        end

        PB0YS-POPPR-Q1(); /* Close VPOPPR01 csr*/

        set PB0YM001 initial; /* Reset map fields*/
        set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
        set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/
        PB0VW01.UPDSW = " "; /* Reset switch*/

      else

        if (PB0VW01.UPDSW == "A") /* Record to insert*/

          if (PB0YW01.MAP-FILLED == "Y") /* All fields entered on map*/

            VPOPPR01.PC-MAT-DT = PB0YM001.PC-MAT-DT; /* Material Dt*/
            VPOPPR01.PC-CUT-DT = PB0YM001.PC-CUT-DT; /* Cut Dt*/
            VPOPPR01.PC-NEED-DT = PB0YM001.PC-NEED-DT; /* Need Dt*/

            PB0YS-POPPR-I(); /* Insert a VPOPPR01 rcd*/

          end

          set PB0YM001 initial; /* Reset map fields*/
          set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
          set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/
          PB0VW01.UPDSW = " "; /* Reset switch*/

        else /* Updt/add switch not set because*/
                                   /* PF6 was not pressed before PF9*/

          set PB0YM001.PB0Y-RCD-CNT skip, invisible; /* Black out record count*/
          set PB0YM001.PB0Y-RCD-MSG skip, invisible; /* Black out update msg*/
          converseLib.validationFailed(541); /* Press PF6 to updt/add*/

        end
      end
    end
  end
end // end PB0Y500

// Validate all fields entered
Function PB0Y520()
   /* --------------------------------------------------------------*/
   /* Verify that all map fields have been filled*/
   /* --------------------------------------------------------------*/


  PB0YW01.MAP-FILLED = "Y";

  if (PB0YM001.PC-NEED-DT == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PC-NEED-DT cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(38);
  end

  if (PB0YM001.PC-CUT-DT == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PC-CUT-DT cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(38);
  end

  if (PB0YM001.PC-MAT-DT == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PC-MAT-DT cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(38);
  end

  if (PB0YM001.PC4ORTYP == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PC4ORTYP cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(33);
  end

  if (PB0YM001.SY2CLRID == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.SY2CLRID cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(419);
  end

  if (PB0YM001.SY1STNBR == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.SY1STNBR cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(196);
  end

  if (PB0YM001.PCFBUYMO == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PCFBUYMO cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(31);
  end

  if (PB0YM001.PCFBUYYR == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PCFBUYYR cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(477);
  end

  if (PB0YM001.PCFSECD == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PCFSECD cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(129);
  end

  if (PB0YM001.FY1FCTYC == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.FY1FCTYC cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(32);
  end

  if (PB0YM001.PONBR == 0)
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PONBR cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(69);
  end

  if (PB0YM001.PO-REG-CD == " ")
    PB0YW01.MAP-FILLED = "N";
    set PB0YM001.PO-REG-CD cursor, bold;
    PB0YM001.XXXPRCNM = "PB0Y520"; /* Process name*/
    converseLib.validationFailed(528);
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end PB0Y520

// Fetch row from VPOHDR02
Function PB0YS-POHDR-G6()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOHDR02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("G6", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Duplicate row code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POHDR-G6"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POHDR-G6"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POHDR-G6

// Close cursor for VPOHDR02
Function PB0YS-POHDR-Q6()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOHDR02*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("Q6", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POHDR-Q6"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POHDR-Q6"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POHDR-Q6

// Select rows from VPOHDR02
Function PB0YS-POHDR-Z6()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOHDR02*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("Z6", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POHDR-Z6"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POHDR-Z6"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POHDR-Z6

// Fetch row from VPOITM04
Function PB0YS-POITM-GV()
   /* ------------------------------------------------------------*/
   /* Fetch row from DPRODC.VPOITM04*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM04" ("GV", SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Duplicate row code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POITM-QV"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POITM-QV"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POITM-GV

// Close cursor for VPOITM04
Function PB0YS-POITM-QV()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOITM04*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM04" ("QV", SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POITM-QV"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POITM-QV"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POITM-QV

// Select rows from VPOITM04
Function PB0YS-POITM-ZV()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOITM04*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM04" ("ZV", SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POITM-ZV"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POITM-ZV"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POITM-ZV

// Fetch row from VPOPPR01
Function PB0YS-POPPR-G1()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOPPR01.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOPPR01" ("G1", SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POPPR-G1"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-G1"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-G1

// Insert a row into VPOPPR01
Function PB0YS-POPPR-I()

   /* ------------------------------------------------------------*/
   /* Insert a row into DPRODC.VPOPPR01*/
   /* ------------------------------------------------------------*/


  VPOPPR01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOPPR01.ZZZSTM = XX0XW01.XX0XWTIM; /* ZZ_SETUP_HHMM*/
  VPOPPR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOPPR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/
  VPOPPR01.ZZZCHGCT = 0; /* Change count*/


  try
    call "VPOPPR01" ("I ", SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -803) /* Row w/key index already exists*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  PB0YM001.XXXPRCNM = "POPPR-I"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT VPOPPR01 ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-I"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-I

// Close cursor for VPOPPR01
Function PB0YS-POPPR-Q1()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOPPR01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOPPR01" ("Q1", SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POPPR-Q1"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-Q1"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-Q1

// Get count from VPOPPR01
Function PB0YS-POPPR-R1()
   /* ----------------------------------------------------------*/
    /* Select count from VPOPPR01*/
   /* ----------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "R1";


  try
    call "VPOPPR01" (PCYREC, SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all d.b. changes*/

  PB0YM001.XXXPRCNM = "POPPR-R1";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "POPPR-R1"; /* Process name*/
  TA1REC.TA1LOC = "COUNT ON VPOPPR01 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial;
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack;

end // end PB0YS-POPPR-R1

// Update row on VPOPPR01
Function PB0YS-POPPR-V()
   /* ------------------------------------------------------------*/
   /* Update row of DPRODC.VPOPPR01*/
   /* ------------------------------------------------------------*/

  VPOPPR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOPPR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/


  PCYREC.PCYFUNC = "V";
  try
    call "VPOPPR01" (PCYREC, SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0YM001.XXXPRCNM = "POPPR-V"; /* Module name*/
        converseLib.validationFailed(276); /* Send message*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back changes*/
        exit stack; /* Exit to display map*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POPPR-V"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ITEM ROW           ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-V"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-V

// Select unique from VPOPPR01
Function PB0YS-POPPR-Z()
   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOPPR01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOPPR01" ("Z ", SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found cannot add a row*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found OK to add a row*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0YM001.XXXPRCNM = "PB0YS10"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-Z"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-Z

// Select rows from VPOPPR01
Function PB0YS-POPPR-Z1()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOPPR01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOPPR01" ("Z1", SQLCA, VPOPPR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "POPPR-Z1"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "POPPR-Z1"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOPPR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOPPR01.VPOPPR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS-POPPR-Z1

// Select unique from VPOREG01
Function PB0YS10()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/

  VPOREG01.PO-REG-CD = PB0VW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to verify REGION.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0YM001.PO-REG-CD cursor, bold;
        PB0YM001.XXXPRCNM = "PB0YS10"; /* Module name*/
        converseLib.validationFailed(528); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0YM001.XXXPRCNM = "PB0YS10"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS10"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS10

// Access DPRODC.VPOREG01
Function PB0YS15()
   /* ------------------------------------------------------------*/
   /* Read DPRODC.VPOREG01. Load REGION array.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/

  PB0VW01.STOPSW = " ";

  PB0YS16(); /* Declare and open cursor*/

  PB0YS17(); /* Fetch first row*/

  if (PB0VW01.STOPSW == "Y") /* No data found*/
    converseLib.validationFailed(276); /* Display msg*/
    PB0YM001.XXXPRCNM = "PB0YS15"; /* Module name*/
    set PB0YM001.PO-REG-CD cursor, bold; /* Highlight field*/
  end

  PB0VW01.REGSUB = 1; /* Initialize region subscript*/

  while (PB0VW01.STOPSW != "Y" /* Load region array*/
   && PB0VW01.REGSUB <= 99)

    PB0VW01.PO-REG[REGSUB] = VPOREG01.PO-REG-CD;
    PB0VW01.PO-REG-DESC[REGSUB] = VPOREG01.PO-REG-DESC;

    PB0VW01.REGSUB = PB0VW01.REGSUB + 1; /* Increment region subscript*/

    PB0YS17(); /* Fetch next row*/

  end

  PB0VW01.REGSUBMAX = PB0VW01.REGSUB - 1; /* Save number of entries*/

  PB0YS18(); /* Close cursor*/

  PB0VW01.REG-ARRAY-SW = "Y"; /* Set up 'region array loaded' switch*/

end // end PB0YS15

// Select rows from VPOREG01
Function PB0YS16()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS16"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS16"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS16

// Fetch row from VPOREG01
Function PB0YS17()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOREG01.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("N1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS17"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS17"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS17

// Close cursor for VPOREG01
Function PB0YS18()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("C1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS18"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS18"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS18

// Select unique from VFCTY001
Function PB0YS30()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VFCTY002 empty; /* Row storage area*/

  VFCTY002.XGPCD = PCWREC.XGPCD; /* GPC*/

  VFCTY002.FY1FCTYC = PB0YM001.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select row from DFCTY.VFCTY001 to verify FACTORY CODE.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY002" ("S ", SQLCA, VFCTY002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0YM001.FY1FCTYC cursor, bold;
        PB0YM001.XXXPRCNM = "PB0YS30"; /* Module name*/
        converseLib.validationFailed(32); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0YM001.XXXPRCNM = "PB0YS30"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS30"; /* Module name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY002.VFCTY002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS30

// Date routine
Function PB0YS40()
   /* ------------------------------------------------------------*/
   /* Set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* Move date type to record*/
                                   /* (ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Calculate date routine*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date*/

    PB0YM001.XXXPRCNM = "PB0YS40"; /* Module name*/
    converseLib.validationFailed(38); /* Display error msg*/

  end

end // end PB0YS40

// Verify style/color
Function PB0YS50()
  set PG2REC empty; /* Clear row storage area*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* Format key information*/
  PG2REC.SY1STNBR = PB0YM001.SY1STNBR;
  if (PB0YM001.SY2CLRID > " ")
    PG2REC.SY2CLRID = PB0YM001.SY2CLRID;
  else
    PG2REC.SY2CLRID = "***";
  end
  PG2REC.XDMCD = "**";


  PB0YS51(); /* Declare and open cursor*/

  PB0YS52(); /* Fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    if (PG2REC.SY2CLRID == "***")
      converseLib.validationFailed(196); /* Display error msg*/
      set PB0YM001.SY1STNBR cursor, bold; /* Highlight field*/
    else
      converseLib.validationFailed(52);
      set PB0YM001.SY1STNBR cursor, bold; /* Highlight field*/
      set PB0YM001.SY2CLRID bold;
    end
    PB0YM001.XXXPRCNM = "PB0YS50"; /* Module name*/
  end


  PB0YS53(); /* Close cursor*/

end // end PB0YS50

// Select rows from VSYCLR01
Function PB0YS51()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODG.PG2REC*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS51"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS51"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PG2REC"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS51

// Fetch row from VSYCLR01
Function PB0YS52()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODG.PG2REC.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS52"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS52"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PG2REC"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS52

// Close cursor for VSYCLR01
Function PB0YS53()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODG.PG2REC*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS53"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS53"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PG2REC"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS53

// Select unique from VPOHDR02
Function PB0YS60()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/

  VPOHDR02.XGPCD = PCWREC.XGPCD; /* GPC*/

  VPOHDR02.PC3PONBR = PB0VW01.PC3PONBR; /* PO number*/

  VPOHDR02.PO-REG-CD = PB0VW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOHDR02 to verify PO NUMBER.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("Z ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0YM001.PONBR cursor, bold;
        PB0YM001.XXXPRCNM = "PB0YS60"; /* Module name*/
        converseLib.validationFailed(69); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0YM001.XXXPRCNM = "PB0YS60"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS60"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack;


end // end PB0YS60

// Access DPRODC.VPOTYP01
Function PB0YS75()
   /* ------------------------------------------------------------*/
   /* Read DPRODC.VPOTYP01. Load PO TYPE array.*/
   /* ------------------------------------------------------------*/

  set VPOTYP01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOTYP01.XGPCD = PCWREC.XGPCD; /* GPC*/

  PB0VW01.STOPSW = " ";

  PB0YS76(); /* Declare and open cursor*/

  PB0YS77(); /* Fetch first row*/

  if (PB0VW01.STOPSW == "Y") /* No data found*/
    converseLib.validationFailed(276); /* Display msg*/
    PB0YM001.XXXPRCNM = "PB0YS75"; /* Module name*/
    set PB0YM001.PC4ORTYP cursor, bold; /* Highlight field*/
  end

  PB0VW01.TYPSUB = 1; /* Initialize type subscript*/

  while (PB0VW01.STOPSW != "Y" /* Load type array*/
   && PB0VW01.TYPSUB <= 99)

    PB0VW01.PO-TYP[TYPSUB] = VPOTYP01.PC4ORTYP;
    PB0VW01.PO-TYP-DESC[TYPSUB] = VPOTYP01.PC4DESC;

    PB0VW01.TYPSUB = PB0VW01.TYPSUB + 1; /* Increment type subscript*/

    PB0YS77(); /* Fetch next row*/

  end

  PB0VW01.TYPSUBMAX = PB0VW01.TYPSUB - 1; /* Save number of entries*/

  PB0YS78(); /* Close cursor*/

  PB0VW01.TYP-ARRAY-SW = "Y"; /* Set up 'type array loaded' switch*/

end // end PB0YS75

// Select rows from VPOTYP01
Function PB0YS76()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS76"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS76"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS76

// Fetch row from VPOTYP01
Function PB0YS77()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOTYP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("N1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS77"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS77"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS77

// Close cursor for VPOTYP01
Function PB0YS78()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("C1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0YM001.XXXPRCNM = "PB0YS78"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0YS78"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set PB0YM001 initial; /* Clear screen before display*/
  set PB0YM001.PB0Y-RCD-CNT invisible; /* Hide updt cnt*/
  set PB0YM001.PB0Y-RCD-MSG invisible; /* Hide updt cnt msg*/

  exit stack; /* Exit to display map*/

end // end PB0YS78

//*** RECORD=PB0YW01 ****
// Working storage for application PB0Y.
// ***********************
Record PB0YW01 type basicRecord
  10 PC-MAT-DT PC-MAT-DT ; 
  10 PC-MAT-DT-ERR-SW char(1) ; // season/year error switch
  10 PC-CUT-DT PC-CUT-DT ; 
  10 PC-CUT-DT-ERR-SW char(1) ; // season/year error switch
  10 PC-NEED-DT PC-NEED-DT ; 
  10 PC-NEED-DT-ERR-SW char(1) ; // season/year error switch
  10 MAP-FILLED char(1) ; // type error switch
  10 POPPR-RCD-CNT POPPR-RCD-CNT ; 
  10 PB0YW-BUY-DT PB0YW-BUY-DT ; 
    15 PB0YW-BUY-CCYY PB0YW-BUY-CCYY ; 
    15 PB0YW-BUY-MM PB0YW-BUY-MM ; 
  10 PB0YW-WRK-DT PB0YW-WRK-DT ; 
    15 PB0YW-WRK-BLNK PB0YW-WRK-BLNK ; 
    15 PB0YW-WRK-MM PB0YW-WRK-MM ; 
end // end PB0YW01

//*** RECORD=VPOPPR01 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOPPR01
// 
// COPYLIB MEMBER:      DPOPPR01
// 
// I/O MODULE:          VPOPPR01
// 
// KEY TO DB2 TABLE:    PC3PONBR,           PO number
//                      SY1STNBR,           Style
//                      SY2CLRID,           Color
//                      XGPCD,              GPC
//                      PO-REG-CD           Region
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/24/97   KGRAHA   PCA400 - ppr.
// 
// ************************
Record VPOPPR01 type basicRecord
  5 VPOPPR01-GROUP VPOPPR01-GROUP ; 
    10 VPOPPR01-KEY VPOPPR01-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PCFBUYYR PCFBUYYR ; 
      15 PCFBUYMO PCFBUYMO ; 
      15 PCFSECD PCFSECD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC-MAT-DT PC-MAT-DT ; 
    10 PC-CUT-DT PC-CUT-DT ; 
    10 PC-NEED-DT PC-NEED-DT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPOPPR01

DataItem PB0YW-BUY-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0YW-BUY-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0YW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0YW-WRK-BLNK num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0YW-WRK-DT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0YW-WRK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC-CUT-DT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-MAT-DT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC-NEED-DT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem POPPR-RCD-CNT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem VPOPPR01-GROUP char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VPOPPR01-KEY char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

