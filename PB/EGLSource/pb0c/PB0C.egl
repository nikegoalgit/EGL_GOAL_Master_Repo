package pb0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0C ****
// ***************** PRODUCTION ORDER SYSTEM ******************
// **                                                        **
//              Print Change Memo List Screen
//              -----------------------------
// 
//    This program is used to select apparel change memo
// transactions to print on a change memo form.  The user can
// group the transactions as they desire until they print on
// the actual change memo form.  After the form is printed,
// the transactions can no longer be re-grouped but the form
// can be reprinted just as it was before.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// **                                                        **
// *                                                          *
// *   DATE      NAME    DESCRIPTION OF CHANGE                *
// * --------   -------  ------------------------------------ *
// *  2/23/90   JNEWMA   New Application                      *
// *  9/21/90   MPISTO   submit job to rmt47 automatically    *
// *  8/28/91   dfranc   Add 'D' status to screen and allow   *
// *                     displaying of deleted change memos.  *
// *  5/20/92   chaert   Bug, setting different colors to 'D' *
// *                     when date time same. pb0c214.        *
// *  5/21/93   chaert   pb0c252, allow formal print without  *
// *                     greenbar                             *
// * 12/29/93   gamen    add theater of ops logic.            *
// * 02/06/94   gamen    Remove job notification.             *
// * 07/07/97   jniese   pca367 - ppr                         *
// * 10/30/97   rgilli   Y2K MODIFICATIONS MADE TO:           *
// *                     PB0C156: Add statement group xx0xs01 *
// *                              to get current date. Change *
// *                              yymmdd compare to ccyymmdd. *
// *                              Init. ta2rec prior to each  *
// *                              call to TA0040.             *
// * 06/02/98   jniese   pca442 - change default printer for  *
// *                     po types 'xi' and 'xd'.              *
// * 08/11/98   KGRAHA   PCA434 - Change JCL to print new     *
// *                     electronic form.                     *
// * 11/24/98   KGRAHA   Fix PA2 cancel.                      *
// * 07/13/00   vsanka   incorporate changes for open text    *
// * 10/03/00   MNADEL   Corrected the change for open text   *
// 
// ************************************************************
// *********************
Program PB0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PB0CW00 PB0CW00; // record
  PB0CW01 PB0CW01; // record
  PB0CW02 PB0CW02; // record
  PB0CW03 PB0CW03; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFDOFC02 VFDOFC02; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use PB0CT01; // table
  use PB0CT11 {deleteAfterUse = yes}; // table
  use YOATBL; // table
  use PB0CM.PB0CM001,  // forms
      PB0CM.PB0CM002, 
      PB0CM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ******************** XPPC001 FLOW ***************************/
     /* **                                                        ***/
                                                              /* --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0CM001 initial;
    set PB0CM002 initial;

    set PB0CW00 empty;
    set PB0CW01 empty; /* ===> Map 1 display W.S. record*/
    set PB0CW02 empty; /* ===> Map 2 display W.S and T.S. page*/
    set PB0CW03 empty; /* ===> W.S. Pass record*/

    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM03 empty;
    set PCFREC empty;
    set PCYREC empty;

    set FY1REC empty;
    set PG1REC empty;
    set PG2REC empty;

    set SQLCA empty;

    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set TA6REC empty;

    set XX0XW01 empty;

    goto PB0C050; /* ==================> flow to special initialization*/

     /* **                                                        ***/
     /* **************** End of XPPC001 FLOW ************************/
    PB0C050: PB0C050();
     /* *****************   Pb0c050 FLOW ****************************/
     /* **                                                        ***/

    goto PB0C001; /* ======================> flow to application main line*/

     /* **                                                        ***/
     /* ************** End of Pb0c050 FLOW **************************/
    PB0C001: PB0C001();
     /* ****************** PB0C001 FLOW *****************************/
     /* **                                                        ***/

    goto PB0C001; /* ======================> flow to application main line*/

     /* **                                                        ***/
     /* *************** End of PB0C001 FLOW *************************/
  end // end main
end // end PB0C

// ===> Application Main Line <==
Function PB0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (PB0CW00.PB0CWSWM == "1") /* Map 1 was requested*/

    PB0C100(); /* ===> process Display map 1*/

  else

    if (PB0CW00.PB0CWSWM == "2") /* ===> Map 2 was requested*/

      PB0C200(); /* ===> process Display map 2 logic*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PB0CW00.XXXPRCNM = "PB0C001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PB0CW00.PB0CWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PB0CW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0X"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PB0CW00.PB0CWSWM = "1"; /* Map 1 was requested*/

         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PB0C001 ***********************/
end // end PB0C001

// Special initialization
Function PB0C050()
   /* ------------------------------------------------------------*/
    /* This process does all the necessary security checks for*/
    /* entry to this application.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD != "03")
    PCWREC.XXXMSGNO = 138; /* GPC is invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    PB0CW00.PB0CWSWR = "N"; /* request for data switch*/
    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
    PB0CW00.XXXPRCNM = "PB0C050"; /* Module identification*/

  end

  if (COMMAREA.CACLVL[3] == "N") /* User can not enter*/
    PCWREC.XXXMSGNO = 163; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0X"; /* To application*/

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    PB0CW00.PB0CWSWR = "N"; /* request for data switch*/
    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
    PB0CW00.XXXPRCNM = "PB0C050"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Initialization of flags and indexes*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWSWR = "Y"; /* ===> request for data*/
  PB0CW00.PB0CWSWF = "Y"; /* ===> request format*/
  PB0CW00.PB0CWSWM = "1"; /* ===> request map 1*/
  PB0CW00.PB0CWCTR = 0; /* ===> counter of # of DD * cards*/
  PB0CW01.CAUSERID = COMMAREA.CAUSERID; /* ===> load userid*/

   /* ------------------------------------------------------------*/
   /* If user has authority then allow change of userid.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[9] == "Y") /* ====> If user has authority*/
    set PB0CM001.CAUSERID initialAttributes; /* ====> allow update of userid*/
  else
    set PB0CM001.CAUSERID skip;
  end

   /* ------------------------------------------------------------*/
   /* Initialize change dates.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize date record*/
  TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate; /* Current date*/
  TA2REC.TA2GRTYP = "E"; /* Type is YYMMDD*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg frmats*/
  PB0CS01(); /* Convert date*/
  PB0CW01.ZZZCHGDT[2] = TA2REC.TA2GRGAN; /* TO date for map MMDDYY*/
  PB0CW01.ZZZSDT[2] = TA2REC.TA2GRGGN; /* Save CCYYMMDD date*/
  TA2REC.TA2DYAOD = -7; /* Subtract 7 from TO date*/
  PB0CS01(); /* Convert date*/
  PB0CW01.ZZZCHGDT[1] = TA2REC.TA2GRGAN; /* FROM date for map*/
  PB0CW01.ZZZSDT[1] = TA2REC.TA2GRGGN; /* Save CCYYMMDD date*/

   /* **                                                        ***/
   /* ********************** End of PB0C050 ***********************/
end // end PB0C050

// ========>Process map 1 logic
Function PB0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0C120(); /* Format and display the map*/

  PB0C130(); /* Check attention identifier*/

  PB0C140(); /* Reset fields to normal intensity*/

  PB0C150(); /* Verify the entered data*/

  PB0C160(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of PB0C100 ***********************/
end // end PB0C100

// -->Format and converse the map
Function PB0C120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/


  if (PB0CW00.PB0CWSWF == "Y") /* Map must be formatted*/

    PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/

    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

    PB0CM001.ZZZCHGDT[1] = PB0CW01.ZZZCHGDT[1];
    PB0CM001.ZZZCHGDT[2] = PB0CW01.ZZZCHGDT[2];
    PB0CM001.CAUSERID = PB0CW01.CAUSERID;

    PB0C121(); /* ===> get order type description*/

    PB0CM001.PC4SDESC = PC4REC.PC4SDESC; /* ===>type form desc.*/

  end

  if (converseVar.validationMsgNum != 0) /* No error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0CM001.XXXPRCNM = PB0CW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0CM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0CM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0CW00.XXXPRCNM = " "; /* Module identification*/


  COMMAREA.CATOAP = PB0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0CM001.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of PB0C120 ***********************/
end // end PB0C120

// Get order type description
Function PB0C121()
  if (PB0CM001.PC4ORTYP != " ") /* If PO type entered*/
    /* ------------------------------------------------------------*/
     /* Get P.O. Type description for the map.*/
    /* ------------------------------------------------------------*/

    set PC4REC empty; /* Row storage area*/

    PC4REC.XGPCD = "03"; /* ===> GPC*/
    PC4REC.PC4ORTYP = PB0CM001.PC4ORTYP; /* ===> p.o. type code*/

    PB0CS02(); /* ===> Select (S ) Unique order type*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the P.O. Type invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    converseLib.clearScreen();

    set PB0CM001.PC4ORTYP bold; /* ===> p.o. type code*/
    PB0CW00.XXXPRCNM = "PB0C121"; /* Module identification*/
    converseLib.validationFailed(33);

    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C121 ***********************/
end // end PB0C121

// -->Check attention identifier
Function PB0C130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
      set PB0CM001 initial;
      set PB0CM001.CATOAP cursor, bold; /* Highlight*/
      set PB0CW01 empty; /* ==>reset map display record*/
      PB0CW00.XXXPRCNM = "PB0C130"; /* Module identification*/

    else

      PB0CW00.XXXPRCNM = "PB0C130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1   was pressed*/
   || converseVar.eventKey is pf3 /* or PF3   was pressed*/
   || converseVar.eventKey is pf4 /* or PF4   was pressed*/
   || converseVar.eventKey is pf5 /* or PF5   was pressed*/
   || converseVar.eventKey is pf21) /* or PF21  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0CM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0X"; /* Application to application*/
    end

    if (converseVar.eventKey is pf21) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end



    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/

    set PB0CM001 initial;
    set PB0CM001.CATOAP cursor, bold; /* Highlight*/
    PB0CW00.XXXPRCNM = "PB0C130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0CW00.XXXPRCNM = "PB0C130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C130 ***********************/
end // end PB0C130

// -->Reset highlighted fields
Function PB0C140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0CM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
   /* ==========>protect P.O. ID*/
  set PB0CM001.PB0CMPYR initialAttributes; /* ====> production year*/
  set PB0CM001.PB0CMPMO initialAttributes; /* ====> production month*/
  set PB0CM001.PB0CMPDM initialAttributes; /* ====> delivery month*/
  set PB0CM001.FY1FCTYC initialAttributes; /* ====> factory code*/

   /* IF COMMAREA.CACLVL(9) EQ 'Y'    ;====> If user has authority*/
  set PB0CM001.CAUSERID initialAttributes; /* ====> allow update of userid*/
   /* ELSE ;*/
    /* SET PB0CM001.CAUSERID AUTOSKIP;*/
   /* END ;*/

  set PB0CM001.PC3PONBR initialAttributes; /* P.O. Number*/
  set PB0CM001.SY1STNBR initialAttributes; /* style number*/
  set PB0CM001.PC3PRTIN initialAttributes; /* print status indicater*/
  set PB0CM001.ZZZCHGDT[1] initialAttributes; /* begin date*/
  set PB0CM001.ZZZCHGDT[2] initialAttributes; /* end date*/

  set PB0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0CM001.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PB0C140 ***********************/
end // end PB0C140

// -->Verify the entered data
Function PB0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0CW00.XXXPRCNM = "PB0C150"; /* Module identification*/
    set PB0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If Date Range was changed validate the dates.*/
    /* ------------------------------------------------------------*/

    if (PB0CM001.ZZZCHGDT[1] != PB0CW01.ZZZCHGDT[1] /* Begin date*/
     || PB0CM001.ZZZCHGDT[2] != PB0CW01.ZZZCHGDT[2]) /* End date*/
      PB0C156(); /* =========> Verify date range*/
      PB0CW00.PB0CWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Print Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PB0CM001.PC3PRTIN != PB0CW01.PC3PRTIN)
      PB0C151(); /* =========> Verify warehouse code*/
      PB0CW00.PB0CWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PB0CM001.SY1STNBR != PB0CW01.SY1STNBR)

      PB0C152(); /* =========> Verify style code*/

    end

    /* ------------------------------------------------------------*/
     /* If userid was changed verify valid userid.*/
    /* ------------------------------------------------------------*/

    if (PB0CM001.CAUSERID != PB0CW01.CAUSERID
     && PB0CM001.CAUSERID > " ")
      PB0CS03(); /* ===> Verify userid*/
      PB0CW00.PB0CWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* If P.O. Number is not entered*/
     /* --->  Verify P.O. TYPE*/
     /* --->  Verify Factory*/
     /* --->  Verify P.O. ID*/
    /* ------------------------------------------------------------*/

    if (PB0CM001.PC3PONBR == 0)

      if (PB0CM001.PC3PONBR != PB0CW01.PC3PONBR)
        PB0CW01.PC3PONBR = 0;
      end

      PB0C153(); /* =========> Verify P.O. Type code*/

      PB0C157(); /* =====>Verify factory code*/

      PB0C154(); /* =========> Verify P.O. ID*/


    else

      /* ------------------------------------------------------------*/
      /* ====> verify  secondary key info not entered*/
            /* if not entered verify P.O. Number exists*/
      /* ------------------------------------------------------------*/

      if (PB0CM001.PC4ORTYP > " "
       || PB0CM001.PB0CMPYR > " "
       || PB0CM001.PB0CMPMO > " "
       || PB0CM001.PB0CMPDM > " "
       || PB0CM001.FY1FCTYC > " ")

        set PB0CM001.PC3PONBR bold;
        set PB0CM001.PC4ORTYP bold;
        set PB0CM001.PB0CMPYR cursor, bold;
        set PB0CM001.PB0CMPMO bold;
        set PB0CM001.PB0CMPDM bold;
        set PB0CM001.FY1FCTYC bold;

        PB0CW00.XXXPRCNM = "PB0C150"; /* Module identification*/
        converseLib.validationFailed(158); /* ===> cannot both primary and*/
                                   /* secondary key*/

      else /* ===> verify P.O. Number exists*/

        PB0CM001.PC4SDESC = " "; /* ===> reset typed desc.*/
        PB0CW01.PC3POIDT = 0; /* ===> reset display record*/
        PB0CW01.PC4ORTYP = " "; /* ===> reset display record*/
        PB0CW01.PB0CMPYR = " "; /* ===> reset display record*/
        PB0CW01.PB0CMPMO = " "; /* ===> reset display record*/
        PB0CW01.PB0CMPDM = " "; /* ===> reset display record*/
        PB0CW01.FY1FCTYC = " "; /* ===> reset display record*/

        /* ------------------------------------------------------------*/
         /* If P.O. Number was changed, verify the entered code.*/
         /* or is not entered, verify the data request.*/
        /* ------------------------------------------------------------*/

        if (PB0CM001.PC3PONBR != PB0CW01.PC3PONBR)

          PB0C158(); /* =========> Verify P.O. Number code*/

          if (VPOHDR02.PO-REG-CD == "01") /* us data only*/
            PB0CW00.PB0CWMOD = "Y"; /* ===> data modified*/
          else
            set PB0CM001.PC3PONBR cursor, bold; /* Highlight*/
            PB0CW00.XXXPRCNM = "PB0C150"; /* Module identification*/
            converseLib.validationFailed(509); /* ===> po out of range*/
          end

        end /* ====> check secondary key entered*/

      end

    end /* ===> P.O. Number zero*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end


   /* **                                                        ***/
   /* ********************** End of PB0C150  **********************/
end // end PB0C150

// Verify Print indicater
Function PB0C151()
  if (PB0CM001.PC3PRTIN == " " /* print status indicater*/
   || PB0CM001.PC3PRTIN == "G" /* print status indicater*/
   || PB0CM001.PC3PRTIN == "P" /* print status indicater*/
   || PB0CM001.PC3PRTIN == "D" /* print status indicater*/
   || PB0CM001.PC3PRTIN == "*") /* print status indicater*/

    PB0CW01.PC3PRTIN = PB0CM001.PC3PRTIN;

  else

    PB0CW00.XXXPRCNM = "PB0C151"; /* Module identification*/
    set PB0CM001.PC3PRTIN cursor, bold; /* Highlight*/
    converseLib.validationFailed(305); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C151 ***********************/
end // end PB0C151

// Verify Style Code
Function PB0C152()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.SY1STNBR != PB0CW01.SY1STNBR)
    PB0CW00.PB0CWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.SY1STNBR == " ")

    PB0CW01.SY1STNBR = PB0CM001.SY1STNBR;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = "03"; /* ===> GPC code*/
  PG2REC.SY1STNBR = PB0CM001.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0CW01.SY1STNBR = PB0CM001.SY1STNBR; /* ===> style code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/

  PB0CW00.XXXPRCNM = "PB0C152"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PB0CM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PB0CM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PB0C152 ***********************/
end // end PB0C152

// Verify P.O. Type
Function PB0C153()
  if (PB0CM001.PC4ORTYP == PB0CW01.PC4ORTYP /* ===> p.o. type code*/
   && PB0CM001.PC4ORTYP != " ")             /* ===> p.o. type code*/
    PB0CM001.PC4SDESC = PB0CW01.PC4SDESC;
                                   /* ===> p.o. type description*/
    return; /* ==============> No edit required*/
  end

   /* ------------------------------------------------------------*/
   /* Verify  P.O. Type is valid and active.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty;
  PC4REC.XGPCD = "03"; /* ===> GPC Code*/
  PC4REC.PC4ORTYP = PB0CM001.PC4ORTYP; /* ===> P.O. Type code*/
  PB0CM001.PC4SDESC = " ";

  PB0CS02(); /* ===> call P.O. Type D.B. from I.O.*/
                                   /* MODE*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && PC4REC.XXXSTAT == "A")  
    PB0CW01.PC4ORTYP = PB0CM001.PC4ORTYP; /* ===> p.o. type code*/
    PB0CM001.PC4SDESC = PC4REC.PC4SDESC; /* ===> p.o. type description*/
    PB0CW01.PC4SDESC = PC4REC.PC4SDESC; /* ===> p.o. type description*/
    PB0CW00.PB0CWMOD = "Y"; /* ===> modified data*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the P.O. Type invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
   || PC4REC.XXXSTAT != "A")    

    set PB0CM001.PC4ORTYP cursor, bold;
    PB0CM001.PC4SDESC = " ";

    PB0CW00.XXXPRCNM = "PB0C153"; /* Module identification*/
    converseLib.validationFailed(33);

    return; /* Exit to display map*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0C153 ***********************/
end // end PB0C153

// Verify the P.O. ID
Function PB0C154()
   /* ------------------------------------------------------------*/
    /* if all secondary key fields are left blank and*/
     /* P.O. Number is also not entered (ie. zero)*/
    /* then error ---> must enter key data*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPYR == " " /* ====> production year*/
   && PB0CM001.PB0CMPMO == " " /* ====> production month*/
   && PB0CM001.PB0CMPDM == " " /* ====> delivery month*/
   && PB0CM001.PC3PONBR == 0)  /* ====> P.O. Number*/

    converseLib.validationFailed(307); /* required to enter some key data*/
    PB0CW00.XXXPRCNM = "PB0C154"; /* Module identification*/
    set PB0CM001.PB0CMPYR cursor, bold; /* ===> production year*/

    return;


  end

   /* ------------------------------------------------------------*/
    /* if P.O. Date fields are left blank then verify the*/
     /* correct order for selection requirements.*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPYR == "  ") /* ====> production year*/

    PB0CW00.XXXPRCNM = "PB0C154"; /* Module identification*/
    set PB0CM001.PB0CMPYR cursor, bold; /* ===> production year*/
    converseLib.validationFailed(80); /* Year is missing or invalid*/
    return;

  end


  if (PB0CM001.PB0CMPYR > " "  /* ====> production year*/
   && PB0CM001.PB0CMPMO == " " /* ====> production month*/
   && PB0CM001.PB0CMPDM > " ") /* ====> delivery month*/

    set PB0CM001.PB0CMPMO cursor, bold; /* ====> production month*/
    PB0CW00.XXXPRCNM = "PB0C154"; /* Module identification*/
    converseLib.validationFailed(31); /* Month missing or invalid*/
    return;

  end


   /* ------------------------------------------------------------*/
   /* Verify P.O. ID fields, providing the above conditions valid*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPYR != PB0CW01.PB0CMPYR /* ====> production year*/
   || PB0CM001.PB0CMPMO != PB0CW01.PB0CMPMO /* ====> production month*/
   || PB0CM001.PB0CMPDM != PB0CW01.PB0CMPDM) /* ====> delivery month*/

    PB0C155(); /* =====>verify date*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C154 ***********************/
end // end PB0C154

// P.O. ID  date "Apparel"
Function PB0C155()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Verify that the date yy & mm is valid*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* ====> Production Delivery Month*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPDM > "  ") /* ====> production delivery month*/
    if (PB0CM001.PB0CMPDM < "01" /* ====> production delivery month*/
     || PB0CM001.PB0CMPDM > "12")
                                   /* ====> production delevery month*/
      converseLib.validationFailed(31); /* Indicate month missing or invalid*/
      set PB0CM001.PB0CMPDM cursor, bold; /* Highlight*/
      PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/
    end
  end


   /* ------------------------------------------------------------*/
   /* ====> Production Month*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPMO > "  ") /* ====> production month*/

    if (PB0CM001.PB0CMPMO < "01" /* ====> production month*/
     || PB0CM001.PB0CMPMO > "12") /* ====> production month*/

      converseLib.validationFailed(31); /* Indicate month missing or invalid*/
      set PB0CM001.PB0CMPMO cursor, bold; /* Highlight*/
      PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/
      return; /* ===> no need to verify Season code for this invalid month*/

    end

  else

    if (PB0CM001.PB0CMPYR > " "  /* ====> production year*/
     && PB0CM001.PB0CMPMO == " " /* ====> production month*/
     && PB0CM001.PB0CMPDM > " ") /* ====> delivery month*/

      converseLib.validationFailed(31); /* required to enter some key data*/
      PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/
      set PB0CM001.PB0CMPYR cursor, bold; /* ====> production year*/

    end

  end


   /* ------------------------------------------------------------*/
   /* ====> Production Month*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPYR == "  ") /* ====> production year*/

    set PB0CM001.PB0CMPYR cursor, bold; /* ====> production year*/
    PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/
    converseLib.validationFailed(80); /* ===> season code required*/

  else

    PB0CS04(); /* ===> verify season code*/

  end

   /* ------------------------------------------------------------*/
   /* If errors detected, do not load display record*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 31 /* date error in P.O. ID*/
   || converseVar.validationMsgNum == 80) /* date error in P.O. ID*/
    /* ===>*/
    /* =========  Next Sentence =========>*/
    /* ===>*/
  else /* ===> load display record*/
    PB0CW01.PB0CMPYR = PB0CM001.PB0CMPYR; /* ====> production year*/
    PB0CW01.PB0CMPMO = PB0CM001.PB0CMPMO; /* ====> production month*/
    PB0CW01.PB0CMPDM = PB0CM001.PB0CMPDM; /* ====> delivery month*/
  end


   /* **                                                        ***/
   /* ********************** End of PB0C155 ***********************/
end // end PB0C155

// Validate the date range
Function PB0C156()
   /* ------------------------------------------------------------*/
   /* Validate TO change date.*/
   /* ------------------------------------------------------------*/
   /* --------------------- y2k in ------------------*/
  XX0XS01();
   /* --------------------- y2k in ------------------*/

  set TA2REC empty; /* Initialize date record*/
  TA2REC.TA2GRGAN = PB0CM001.ZZZCHGDT[2]; /* To change date*/
  TA2REC.TA2GRTYP = "A"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Validate date*/
  if (TA2REC.TA2RTNCD != 0)
    PB0CW00.XXXPRCNM = "PB0C156"; /* Module identification*/
    set PB0CM001.ZZZCHGDT[2] cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Invalid date*/
  else
    PB0CW01.ZZZSDT[2] = TA2REC.TA2GRGGN; /* Save formatted date*/
    /* --------------------- y2k out -----------------*/
    /* MOVE EZEDTE TO PB0CW00.PB0CWDTE;           /* Current date*/
    /* IF TA2REC.TA2GRGEN GT PB0CW00.PB0CWDTE;    /* If To date > current*/
    /* --------------------- y2k out -----------------*/
    /* --------------------- y2k in  -----------------*/
    if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* If To date > current*/
    /* --------------------- y2k in  -----------------*/
      PB0CW00.XXXPRCNM = "PB0C156"; /* Module identification*/
      set PB0CM001.ZZZCHGDT[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(141); /* Date cannot be > current*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate FROM change date.*/
   /* ------------------------------------------------------------*/

   /* --------------------- y2k in ------------------*/
  set TA2REC empty;
   /* --------------------- y2k in ------------------*/
  TA2REC.TA2GRGA = PB0CM001.ZZZCHGDT[1]; /* From change date*/
  TA2REC.TA2GRTYP = "A"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Validate date*/
  if (TA2REC.TA2RTNCD != 0)
    PB0CW00.XXXPRCNM = "PB0C156"; /* Module identification*/
    set PB0CM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Invalid date*/
  else
    PB0CW01.ZZZSDT[1] = TA2REC.TA2GRGGN; /* Save formatted date*/
    /* --------------------- y2k out -----------------*/
    /* MOVE EZEDTE TO PB0CW00.PB0CWDTE;           /* Current date*/
    /* IF TA2REC.TA2GRGEN GT PB0CW00.PB0CWDTE;    /* If To date > current*/
    /* --------------------- y2k out -----------------*/
    /* --------------------- y2k in ------------------*/
    if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* If To date > current*/
    /* --------------------- y2k in ------------------*/
      PB0CW00.XXXPRCNM = "PB0C156"; /* Module identification*/
      set PB0CM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(141); /* Date cannot be > current*/
    else
      if (converseVar.validationMsgNum != 38) /* If TO date valid*/
        if (PB0CW01.ZZZSDT[1] > PB0CW01.ZZZSDT[2]) /* If From > To*/
          PB0CW00.XXXPRCNM = "PB0C156"; /* Module ident*/
          set PB0CM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
          converseLib.validationFailed(136); /* From > To date*/
        else
          /* --------------------- y2k in ------------------*/
          set TA2REC empty;
          /* --------------------- y2k in ------------------*/
          TA2REC.TA2GRGAN = PB0CM001.ZZZCHGDT[2]; /* Fr change date*/
          TA2REC.TA2GRTYP = "A"; /* Type*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg*/
          TA2REC.TA2DYAOD = -30; /* Sub 30 from To*/
          PB0CS01(); /* Validate date*/
          if (TA2REC.TA2GRGGN > PB0CW01.ZZZSDT[1]) /* If Fr < To - 30*/
            PB0CW00.XXXPRCNM = "PB0C156"; /* Module ident*/
            set PB0CM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
            converseLib.validationFailed(362); /* From < To - 30*/
          end
        end
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PB0CW01.ZZZCHGDT[1] = PB0CM001.ZZZCHGDT[1]; /* Save dates*/
    PB0CW01.ZZZCHGDT[2] = PB0CM001.ZZZCHGDT[2];
  end

end // end PB0C156

// Verify factory        VFCTY001
Function PB0C157()
   /* ------------------------------------------------------------*/
   /* check to see if the user spaces out the factory*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.FY1FCTYC == " ") /* ===> factory code*/
    if (PB0CM001.FY1FCTYC != PB0CW01.FY1FCTYC) /* ===> factory code*/
      PB0CW01.FY1FCTYC = " "; /* ===> factory code*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = "03"; /* ===> GPC code*/
  FY1REC.FY1FCTYC = PB0CM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0CW01.FY1FCTYC = PB0CM001.FY1FCTYC; /* ===> factory code*/
      PB0CW00.PB0CWMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0CM001.FY1FCTYC cursor, bold;
      PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/

      PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0CW00.XXXPRCNM = "PB0C155"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0C155 ***********************/
end // end PB0C157

// Verify P.O. NBR       VPOHDR01
Function PB0C158()
   /* ------------------------------------------------------------*/
   /* check if P.O. number  field modified*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PC3PONBR != PB0CW01.PC3PONBR)

    PB0CW00.PB0CWMOD = "Y";

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = "03"; /* ===> GPC*/
  VPOHDR02.PC3PONBR = PB0CM001.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PB0CW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* ===> P.O. REGION CODE*/
      PB0CW01.PC3PONBR = PB0CM001.PC3PONBR; /* ===> P.O. number*/

      return; /* Return to previous process*/

    end /* ===> normal R.C. on select unique P.O. Number*/

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/

      converseLib.validationFailed(69);
      PB0CW00.XXXPRCNM = "PB0C158"; /* Module identification*/
      set PB0CM001.PC3PONBR cursor, bold;

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0CW00.XXXPRCNM = "PB0C158"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0C158 ***********************/
end // end PB0C158

// -->Process valid input request
Function PB0C160()
  if (converseVar.eventKey is enter)

    PB0CW00.PB0CWSWM = "2"; /* ==>map requested*/
    PB0CW00.PB0CWSWR = "Y"; /* ==>request for data*/
    PB0CW00.PB0CWZFL = "N"; /* ==>print message flag*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0C160 ***********************/
end // end PB0C160

// ========>Process Map 2 logic
Function PB0C200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0C210(); /* Obtain the data to display*/

  PB0C220(); /* Format and display the map*/

  PB0C230(); /* Check attention identifier*/

  PB0C240(); /* Reset fields to normal intensity*/

  PB0C250(); /* Verify the entered data*/

  PB0C260(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of PB0C200 ***********************/
end // end PB0C200

// -->Obtain the data to display
Function PB0C210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PB0CW00.PB0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  PB0CW00.PB0CWSWF = "Y"; /* ==>format map requested*/
  PB0CW00.PB0CMSEL = " "; /* ==>save selection field*/
  PB0CW00.PB0CWDFL = "N"; /* ==>delete selection flag*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  PB0CW00.XXXTSLEN = 1508; /* ===> Temporary storage page length*/
   /* ==> (13 display lines) * (116 length of display line) = 1508*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  PB0C211(); /* Purge any temporary storage*/

  PB0CW00.PB0CWCTR = 0; /* ===>init counter for " " print indicaters*/
  PB0CW00.PC4ORTYP = " "; /* ===> initialize Order type*/

  PB0CS03(); /* ===> Get the scheduler code for userid VSUSER01*/

   /* ------------------------------------------------------------*/
   /* If P.O. Number was not entered do:*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Header Rows.*/
   /* ------------------------------------------------------------*/
  if (PB0CM001.PC3PONBR == 0)

    PB0C212(); /* ===> calc high and low dates*/

    PB0CS08(); /* ===> Select set and open cursor for header rows*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
     /* Fetch all header and item audits for each P.O.*/
       /* grouping by print indicator, date, and time*/
       /* with header audits before item audits*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIXM = 1; /* ===>init row-index*/
  PB0CW00.PB0CWSWC = "N"; /* ===>init EOF cursor for VPOHDR01*/

  if (PB0CM001.PC3PONBR == 0)
    PB0CS09(); /* ===> Fetch next row VPOHDR01*/
  end

  PB0CW00.PC3PONBR = 0; /* ===> Init save PO number*/
  PB0CW00.PCJMEMDT = 0; /* ===> Init save print date*/
  PB0CW00.PCJMEMTM = 0; /* ===> Init save print time*/
  PB0CW00.ZZZSDT = 0; /* ===> Init save set up date*/
  PB0CW00.ZZHHMMSS = 0; /* ===> Init save set up time*/
  move " " to PB0CW00.PB0CWMEM[1] for all; /* ===> Init sort print status*/
  move 0 to PB0CW00.PB0CWMDT[1] for all; /* ===> Init sort print dates*/
  move 0 to PB0CW00.PB0CWMTM[1] for all; /* ===> Init sort print times*/

  XX0XS01(); /* ===> Get date and time*/

  while (PB0CW00.PB0CWSWC == "N") /* ===> Until end of cursor for P.O. #s*/

    if (PB0CM001.CAUSERID == VPOHDR02.PC3ENTBY /* ===> Entered by this user*/
     || PB0CM001.CAUSERID == " ")             
      if (VPOHDR02.PC3PRTIN == "P") /* ===> and PO header printed*/

        PB0CS10(); /* ===> Select Set header audits*/
        PB0CS12(); /* ===> Select Set item audits*/

        while (PB0CW00.PB0CWAHC == "N" /* ===> Until end of cursor aud hdr*/
         || PB0CW00.PB0CWAIC == "N")
                                   /* ===> and end of cursor for item*/

          if (PB0CW00.PB0CWAHC == "N" /* ===> If header audits exist*/
           && PB0CW00.PB0CWAIC == "N") /* ===> and item audits exist*/
            if (PB0CW00.PB0CWSRT[1] <= PB0CW00.PB0CWSRT[2])
              /* ===> IF HDR <= ITM*/
              PB0C213(); /* ===> Load header audit & fetch next*/
            else
              PB0C214(); /* ===> Load item audit & fetch next*/
            end
          else
            if (PB0CW00.PB0CWAHC == "N") /* ===> If header audits exist*/
              PB0C213(); /* ===> Move header audit & fetch next*/
            else
              PB0C214(); /* ===> Load item audit & fetch next*/
            end
          end

          /* ------------------------------------------------------------*/
           /* If the page is full, add the page to the storage queue.*/
          /* ------------------------------------------------------------*/
          if (PB0CW00.PB0CWIXM > 13)
            PB0C215(); /* Add page to temporary storage*/
          end

        end

        PB0CS15(); /* ===> Close cursor header audits*/
        PB0CS16(); /* ===> Close cursor item audits*/

      end

    end

    if (PB0CM001.PC3PONBR > 0)
      PB0CW00.PB0CWSWC = "Y"; /* ===>EOF cursor for VPOHDR01*/
    else
      PB0CS09(); /* ===> Fetch next row VPOHDR01*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PB0CW00.PB0CWIXM > 1) /* Page was formatted*/
    PB0C215(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set for VPOHDR01.*/
   /* ------------------------------------------------------------*/
  if (PB0CM001.PC3PONBR == 0)
    PB0CS17(); /* Close the selected set cursor*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, or too many pages formatted*/
   /* indicate error and redisplay Map 1*/
   /* ------------------------------------------------------------*/
  if (PB0CW00.TA5TSQIX == 0) /* No pages formatted*/

    PB0CW00.PB0CWSWM = "1"; /* ======>set map switch*/
    PB0CW00.PB0CWSWF = "N"; /* Request for data switch*/
    PB0CW00.XXXPRCNM = "PB0C210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PB0CM001.PC3PONBR cursor;

    exit stack; /* Exit to display map*/

  else

    if (PB0CW00.TA5TSQIX > 28) /* Too many pages of audits*/

      PB0CW00.PB0CWSWM = "1"; /* ======>set map switch*/
      PB0CW00.PB0CWSWF = "N"; /* Request for data switch*/
      PB0CW00.XXXPRCNM = "PB0C210"; /* Module identification*/
      converseLib.validationFailed(363); /* Indicate too many audits selected*/
      set PB0CM001.PC3PONBR cursor;

      exit stack; /* Exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* set to display page 1.*/
   /* ------------------------------------------------------------*/
  PB0CW00.XXXTSPAG = 1; /* Desired page number*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  PB0CW00.PB0CWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PB0C210 ***********************/
end // end PB0C210

// purge any temporary storage
Function PB0C211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PB0CW02 empty; /* Map 2 display storage record*/

  PB0CW00.PB0CWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PB0CW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0CW00.PB0CWSWM = "1"; /* ===> request for map 1*/
  PB0CW00.XXXPRCNM = "PB0C211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0C211 ***********************/
end // end PB0C211

// Calc. HI/LO P.O. ID Dates
Function PB0C212()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Calculate the date for the high and low values for the*/
      /* select set of Header rows and save the dates in the*/
      /* pb0cW01 display record for map 1.*/

      /* - Season code required and the month fields optional*/
          /* - Use saved season year for High & Low "CCYY" field*/
          /* - if both months left blank*/
             /* - do load High/Low dates*/
          /* - if delivery month left blank*/
             /* - do load High/Low dates*/
          /* - if both months entered*/
             /* - do load High/Low dates*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate High & Low dates for both months left blank.*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPMO == "  " /* ====> production month*/
   && PB0CM001.PB0CMPDM == "  ") /* ====> production delivery month*/

    /* ===> setup begin month/year*/

    PB0CW00.PB0CWYY1 = PB0CW01.PB0CWYR1; /* ====> season year*/
    PB0CW00.PB0CWMM1 = PB0CW01.PB0CWMO1; /* ====> production month*/
    PB0CW00.PB0CWDD1 = 1; /* ====> W.S. delivery month*/
    PB0CW01.PB0CWLOW = PB0CW00.PB0CWDT1; /* ===> low P.O. ID Date*/

    /* ===> setup end month/year*/

    PB0CW00.PB0CWYY1 = PB0CW01.PB0CWYR2; /* ====> season year*/
    PB0CW00.PB0CWMM1 = PB0CW01.PB0CWMO2; /* ====> production month*/
    PB0CW00.PB0CWDD1 = 12; /* ====> W.S. delivery month*/
    PB0CW01.PB0CWHGH = PB0CW00.PB0CWDT1; /* ===> high P.O. ID Date*/

  end


   /* ------------------------------------------------------------*/
   /* Calculate High & Low dates for Delivery month left blank.*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPMO > "  " /* ====> production month*/
   && PB0CM001.PB0CMPDM == "  ") /* ====> production delivery month*/

    PB0CW00.PB0CWYY1 = PB0CW01.PB0CWYR1; /* ====> season year*/
    PB0CW00.PB0CWMM1 = PB0CW01.PB0CWMO1; /* ====> production month*/
    PB0CW00.PB0CWDD1 = 1; /* ====> delivery month*/
    PB0CW01.PB0CWLOW = PB0CW00.PB0CWDT1; /* ===> low P.O. ID Date*/

    PB0CW00.PB0CWDD1 = 12; /* ====> delivery month*/
    PB0CW01.PB0CWHGH = PB0CW00.PB0CWDT1; /* ===> high P.O. ID Date*/

  end


   /* ------------------------------------------------------------*/
   /* Calculate High & Low dates for entire date entered.*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPMO > "  " /* ====> production month*/
   && PB0CM001.PB0CMPDM > "  ") /* ====> production delivery month*/

    PB0CW00.PB0CWYY1 = PB0CW01.PB0CWYR1; /* ====> season year*/
    PB0CW00.PB0CWMM1 = PB0CW01.PB0CWMO1; /* ====> production month*/
    PB0CW00.PB0CWMMA = PB0CM001.PB0CMPDM; /* ====> alpha month form*/
    PB0CW00.PB0CWDD1 = PB0CW00.PB0CWMMN; /* ====> delivery month*/

    PB0CW01.PB0CWLOW = PB0CW00.PB0CWDT1; /* ===> low P.O. ID Date*/
    PB0CW01.PB0CWHGH = PB0CW00.PB0CWDT1; /* ===> high P.O. ID Date*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C212 ***********************/
end // end PB0C212

// Load header audit & fetch next
Function PB0C213()
   /* ------------------------------------------------------------*/
   /* Load/save the row in Temp. Storage. ---> (PB0CW02)*/
   /* ------------------------------------------------------------*/

  if (VPOAHD02.PCJMEMO == "P"               /* If previously printed*/
   && PB0CW00.PC3PONBR == VPOAHD02.PC3PONBR /* with same PO,*/
   && PB0CW00.PCJMEMDT == VPOAHD02.PCJMEMDT /* same print date, and*/
   && PB0CW00.PCJMEMTM == VPOAHD02.PCJMEMTM) /* same print time as last*/
    PB0CW02.PB0CMSEL[PB0CWIXM] = "Z"; /* Identify as part of group*/
  end

  if (VPOAHD02.PCJMEMO == "D" /* If memo deleted*/
   && PB0CM001.PC3PRTIN != "D") /* & map prt indicator NE D*/
    /* ------------------------------------------------------------*/
    /* Fetch the next header audit*/
    /* ------------------------------------------------------------*/
    PB0CS11();
    return;
  end

  PB0CW02.PO-REG-CD[PB0CWIXM] = VPOAHD02.PO-REG-CD;
  PB0CW02.PC3PONBR[PB0CWIXM] = VPOAHD02.PC3PONBR;
  PB0CW02.YOACD[PB0CWIXM] = VPOAHD02.YOACD;
  PB0CW02.ZZZSDT[PB0CWIXM] = VPOAHD02.ZZZSDT;
  PB0CW02.ZZHHMMSS[PB0CWIXM] = VPOAHD02.ZZHHMMSS;

  set TA2REC empty; /* Init date record*/
  TA2REC.TA2GRGGN = VPOAHD02.ZZZSDT; /* Set up date*/
  TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Convert date*/
  PB0CW02.PB0CMSDT[PB0CWIXM] = TA2REC.TA2GRGAN; /* MMDDYY*/

  PB0CW00.PB0CWRTM = VPOAHD02.ZZHHMMSS; /* Reformat setup time*/
  PB0CW00.PB0CWMHH = PB0CW00.PB0CWRHH; /* hours*/
  PB0CW00.PB0CWMCL = ":"; /* colon*/
  PB0CW00.PB0CWMMM = PB0CW00.PB0CWRMM; /* minutes*/
  PB0CW02.PB0CMSTM[PB0CWIXM] = PB0CW00.PB0CWTME;

  if (VPOAHD02.YOACD in YOATBL.YOACD)
    PB0CW02.YOASDESC[PB0CWIXM] = YOATBL.YOASDESC[sysVar.arrayIndex];
  end
  PB0CW02.PB0CMPST[PB0CWIXM] = VPOAHD02.PCJMEMO; /* Print status*/

  set TA2REC empty; /* Init date record*/
  TA2REC.TA2GRGGN = VPOAHD02.PCJMEMDT; /* Print date*/
  TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Convert date*/
  PB0CW02.PB0CMPDT[PB0CWIXM] = TA2REC.TA2GRGAN; /* Prnt date MMDDYY*/

  PB0CW02.PCJMEMDT[PB0CWIXM] = VPOAHD02.PCJMEMDT; /* Print date*/
  PB0CW02.PCJMEMTM[PB0CWIXM] = VPOAHD02.PCJMEMTM; /* Print time*/

  PB0CW00.PB0CWRTM = VPOAHD02.PCJMEMTM; /* Reformat print time*/
  PB0CW00.PB0CWMHH = PB0CW00.PB0CWRHH; /* hours*/
  PB0CW00.PB0CWMCL = ":"; /* colon*/
  PB0CW00.PB0CWMMM = PB0CW00.PB0CWRMM; /* minutes*/
  PB0CW02.PB0CMPTM[PB0CWIXM] = PB0CW00.PB0CWTME;

  PB0CW00.PC3PONBR = VPOAHD02.PC3PONBR; /* Save PO number*/
  PB0CW00.PCJMEMDT = VPOAHD02.PCJMEMDT; /* Save print date*/
  PB0CW00.PCJMEMTM = VPOAHD02.PCJMEMTM; /* Save print time*/

  PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM + 1; /* Increment line index*/

  if (VPOAHD02.PCJMEMO == " ") /* If not printed*/
    PB0CW00.PB0CWCTR = PB0CW00.PB0CWCTR + 1; /* add 1 to blank counter*/
  end

   /* ------------------------------------------------------------*/
    /* Fetch the next header audit*/
   /* ------------------------------------------------------------*/

  PB0CS11();

   /* **                                                        ***/
   /* ********************** End of PB0C213 ***********************/
end // end PB0C213

// Load item audit & fetch next
Function PB0C214()
   /* ------------------------------------------------------------*/
   /* Load/save the row in Temp. Storage. ---> (PB0CW02)*/
   /* ------------------------------------------------------------*/

  if (PB0CW00.PB0CWIXM > 1) /* Set up previous color*/
    PB0CW00.PB0CWIXX = PB0CW00.PB0CWIXM; /* Setup clr index*/
    PB0CW00.PB0CWIXX = PB0CW00.PB0CWIXX - 1; /**/
    PB0CW00.SY2CLRID = PB0CW02.SY2CLRID[PB0CWIXX]; /**/
  else
    PB0CW00.SY2CLRID = "   "; /**/
  end
  if (VPOAIT02.ZZZSDT == PB0CW00.ZZZSDT     /* If same setup date*/
   && VPOAIT02.ZZHHMMSS == PB0CW00.ZZHHMMSS /* and time*/
   && VPOAIT02.PC3PONBR == PB0CW00.PC3PONBR /* and PO as last*/
   && VPOAIT02.SY2CLRID == PB0CW00.SY2CLRID) /* and color*/
    if (VPOAIT02.YOACD == "60" /* If audit type of 'ADD'*/
     || VPOAIT02.YOACD == "61" /* or audit type of 'CANCEL'*/
     || VPOAIT02.YOACD == "70") /* or audit type of 'qty split'*/
      /* ------------------------------------------------------------*/
        /* Update item audit to be non-displayable*/
      /* ------------------------------------------------------------*/
      VPOAIT02.PCJMEMO = "D";
      PB0CS14();

      /* ------------------------------------------------------------*/
        /* Fetch the next item audit*/
      /* ------------------------------------------------------------*/
      PB0CS13();

      return;

    end

  end

  if (VPOAIT02.PCJMEMO == "P"               /* If previously printed*/
   && PB0CW00.PC3PONBR == VPOAIT02.PC3PONBR /* with same PO,*/
   && PB0CW00.PCJMEMDT == VPOAIT02.PCJMEMDT /* same print date, and*/
   && PB0CW00.PCJMEMTM == VPOAIT02.PCJMEMTM) /* same print time as last*/
    PB0CW02.PB0CMSEL[PB0CWIXM] = "Z"; /* Identify as part of group*/
  end

  if (VPOAIT02.PCJMEMO == "D" /* If previously deleted*/
   && PB0CM001.PC3PRTIN != "D") /* and map print indicator NE 'D'*/
      /* ---------------------------------------------------------*/
      /* Fetch the next item audit*/
      /* ---------------------------------------------------------*/
    PB0CS13();

    return;
  end

  PB0CW02.PO-REG-CD[PB0CWIXM] = VPOAIT02.PO-REG-CD;
  PB0CW02.PC3PONBR[PB0CWIXM] = VPOAIT02.PC3PONBR;
  PB0CW02.PCJSEQNO[PB0CWIXM] = VPOAIT02.PCJSEQNO;
  PB0CW02.SY1STNBR[PB0CWIXM] = VPOAIT02.SY1STNBR;
  PB0CW02.SY2CLRID[PB0CWIXM] = VPOAIT02.SY2CLRID;
  PB0CW02.XDMCD[PB0CWIXM] = VPOAIT02.XDMCD;
  PB0CW02.XQACD[PB0CWIXM] = VPOAIT02.XQACD;
  PB0CW02.XOWCD[PB0CWIXM] = VPOAIT02.XOWCD;
  PB0CW02.PC2INSEG[PB0CWIXM] = VPOAIT02.PC2INSEG;
  PB0CW02.XPGCD[PB0CWIXM] = VPOAIT02.XPGCD;
  PB0CW02.XUMCD[PB0CWIXM] = VPOAIT02.XUMCD;
  PB0CW02.PC6ETSDT[PB0CWIXM] = VPOAIT02.PC6ETSDT;
  PB0CW02.PC6OETS[PB0CWIXM] = VPOAIT02.PC6OETS;
  PB0CW02.PC6RTADT[PB0CWIXM] = VPOAIT02.PC6RTADT;
  PB0CW02.YMTCD[PB0CWIXM] = VPOAIT02.YMTCD;
  PB0CW02.PC6CXNBR[PB0CWIXM] = VPOAIT02.PC6CXNBR;
  PB0CW02.XWHCD[PB0CWIXM] = VPOAIT02.XWHCD;
  PB0CW02.PC2CUXID[PB0CWIXM] = VPOAIT02.PC2CUXID;
  PB0CW02.YOACD[PB0CWIXM] = VPOAIT02.YOACD;
  PB0CW02.ZZZSDT[PB0CWIXM] = VPOAIT02.ZZZSDT;

  if (VPOAIT02.YOACD == "69" /* If warehouse split*/
   || VPOAIT02.YOACD == "71") /* or warehouse change*/
    PB0CW02.PB0CWWHS[PB0CWIXM] = VPOAIT02.PCIAFTA; /* New warehouse*/
  end

  if (VPOAIT02.YOACD == "68" /* If customer split*/
   || VPOAIT02.YOACD == "72") /* or customer change*/
    PB0CW02.PB0CWCST[PB0CWIXM] = VPOAIT02.PCIAFTA;
                                                       /* New customer name*/
  end

  set TA2REC empty; /* Init date record*/
  TA2REC.TA2GRGGN = VPOAIT02.ZZZSDT; /* Set up date*/
  TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Convert date*/
  PB0CW02.PB0CMSDT[PB0CWIXM] = TA2REC.TA2GRGAN; /* MMDDYY*/

  PB0CW02.ZZHHMMSS[PB0CWIXM] = VPOAIT02.ZZHHMMSS;

  PB0CW00.PB0CWRTM = VPOAIT02.ZZHHMMSS; /* Reformat setup time*/
  PB0CW00.PB0CWMHH = PB0CW00.PB0CWRHH; /* hours*/
  PB0CW00.PB0CWMCL = ":"; /* colon*/
  PB0CW00.PB0CWMMM = PB0CW00.PB0CWRMM; /* minutes*/
  PB0CW02.PB0CMSTM[PB0CWIXM] = PB0CW00.PB0CWTME;

  if (VPOAIT02.YOACD in YOATBL.YOACD)
    PB0CW02.YOASDESC[PB0CWIXM] = YOATBL.YOASDESC[sysVar.arrayIndex];
  end
  PB0CW02.PB0CMPST[PB0CWIXM] = VPOAIT02.PCJMEMO;

  set TA2REC empty; /* Init date record*/
  TA2REC.TA2GRGGN = VPOAIT02.PCJMEMDT; /* Print date*/
  TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
  PB0CS01(); /* Convert date*/
  PB0CW02.PB0CMPDT[PB0CWIXM] = TA2REC.TA2GRGAN; /* MMDDYY*/

  PB0CW02.PCJMEMDT[PB0CWIXM] = VPOAIT02.PCJMEMDT; /* print date*/
  PB0CW02.PCJMEMTM[PB0CWIXM] = VPOAIT02.PCJMEMTM; /* print time*/

  PB0CW00.PB0CWRTM = VPOAIT02.PCJMEMTM; /* Reformat print time*/
  PB0CW00.PB0CWMHH = PB0CW00.PB0CWRHH; /* hours*/
  PB0CW00.PB0CWMCL = ":"; /* colon*/
  PB0CW00.PB0CWMMM = PB0CW00.PB0CWRMM; /* minutes*/
  PB0CW02.PB0CMPTM[PB0CWIXM] = PB0CW00.PB0CWTME;

  PB0CW00.PC3PONBR = VPOAIT02.PC3PONBR; /* Save PO number*/
  PB0CW00.PCJMEMDT = VPOAIT02.PCJMEMDT; /* Save print date*/
  PB0CW00.PCJMEMTM = VPOAIT02.PCJMEMTM; /* Save print time*/
  PB0CW00.ZZZSDT = VPOAIT02.ZZZSDT; /* Save set up date*/
  PB0CW00.ZZHHMMSS = VPOAIT02.ZZHHMMSS; /* Save set up time*/

  PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM + 1; /* Increment line index*/

  if (VPOAIT02.PCJMEMO == " ") /* If blank print status*/
    PB0CW00.PB0CWCTR = PB0CW00.PB0CWCTR + 1; /* add 1 to blank counter*/
  end

   /* ------------------------------------------------------------*/
    /* Fetch the next item audit*/
   /* ------------------------------------------------------------*/
  PB0CS13();

   /* **                                                        ***/
   /* ********************** End of PB0C214 ***********************/
end // end PB0C214

// Add page to temporary storage
Function PB0C215()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PB0CW02.XXXTSLEN = PB0CW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PB0CW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PB0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0CW02 empty; /* M002 display storage*/

    PB0CW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PB0CW00.PB0CWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
  PB0CW00.XXXPRCNM = "PB0C215"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0C215 ***********************/
end // end PB0C215

// -->Format and converse map 2
Function PB0C220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0CW00.PB0CWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PB0CM002 initial;

      PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/

      PB0C221(); /* ===> Format the data from T.S.*/

      PB0C222();
                                   /* ===> Format fields entered from map 1*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0CM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0CM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PB0CW00.PB0CWZFL == "Y") /* Print Message to display*/

    PB0CM002.XXXPRCNM = PB0CW00.XXXPRCNM; /* Module identification*/
    PB0CM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message*/
    COMMAREA.CAMSG = " ";
    PB0CW00.PB0CWZFL = "N"; /* Reset flag*/

    set PB0CM002 alarm; /* Indicate sound alarm*/

  else
    if (PCWREC.XXXMSGNO != 0) /* Message to display*/

      PB0CM002.XXXPRCNM = PB0CW00.XXXPRCNM; /* Module identification*/
      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end /* Message number*/

      set PB0CM002 alarm; /* Indicate sound alarm*/

    else
      if (PB0CW00.PB0CMSEL != " ") /* Selections have been made*/

        converseLib.validationFailed(384); /* Press PF9 to confirm request*/

      end
    end
  end

  converse PB0CM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0CW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0CM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0CM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0C220 ***********************/
end // end PB0C220

// Format the display data
Function PB0C221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PB0CW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PB0CW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PB0CW00.PB0CWSWU == "Y") /* Current page was changed*/

        PB0CS18(); /* Update temporary storage page*/

        PB0CW00.PB0CWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PB0CW00.XXXTSPAG > PB0CW00.TA5TSQIX) /* Desired > highest*/
        PB0CW00.XXXTSPAG = PB0CW00.TA5TSQIX; /* Default to highest*/
      end

      PB0CS19(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* ====> no previous messages*/
    PCWREC.XXXMSGNO = 386; /* ====> please select a line message*/
    PB0CW00.XXXPRCNM = "PB0C221"; /* Module identification*/
  end

  PB0CM002.ZZZCHGDT[1] = PB0CW01.ZZZCHGDT[1]; /* Begin date*/
  PB0CM002.ZZZCHGDT[2] = PB0CW01.ZZZCHGDT[2]; /* End date*/
  PB0CM002.XXXTSPAG = PB0CW00.XXXTSPAG; /* Current page*/
  PB0CM002.TA5TSQIX = PB0CW00.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIXM = 13; /* Initialize line index*/

  while (PB0CW00.PB0CWIXM >= 1) /* Until screen is full*/

    /* ------------------------------------------------------------*/
     /* Load Detail Lines*/
    /* ------------------------------------------------------------*/

    if (PB0CW02.PB0CMSEL[PB0CWIXM] == "X" /* if previously deleted*/
     || PB0CW02.PC3PONBR[PB0CWIXM] == 0)  /* or no data*/
      set PB0CM002.PB0CMSEL[PB0CWIXM] skip, invisible;
    else
      if (PB0CW02.PB0CMSEL[PB0CWIXM] == "Z") /* If this belongs to 'P'*/
        set PB0CM002.PB0CMSEL[PB0CWIXM] skip, invisible;
      else
        set PB0CM002.PB0CMSEL[PB0CWIXM] cursor;
        PB0CM002.PB0CMSEL[PB0CWIXM] = PB0CW02.PB0CMSEL[PB0CWIXM];
      end
      PB0CM002.PB0CMPNB[PB0CWIXM] = PB0CW02.PC3PONBR[PB0CWIXM];
      PB0CM002.PB0CMSTY[PB0CWIXM] = PB0CW02.SY1STNBR[PB0CWIXM];
      PB0CM002.SY2CLRID[PB0CWIXM] = PB0CW02.SY2CLRID[PB0CWIXM];
      PB0CM002.PC2CUXID[PB0CWIXM] = PB0CW02.PC2CUXID[PB0CWIXM];
      PB0CM002.XWHCD[PB0CWIXM] = PB0CW02.XWHCD[PB0CWIXM];
      PB0CM002.PB0CMSDT[PB0CWIXM] = PB0CW02.PB0CMSDT[PB0CWIXM];
      PB0CM002.PB0CMSTM[PB0CWIXM] = PB0CW02.PB0CMSTM[PB0CWIXM];
      PB0CM002.YOASDESC[PB0CWIXM] = PB0CW02.YOASDESC[PB0CWIXM];
      PB0CM002.PB0CMPST[PB0CWIXM] = PB0CW02.PB0CMPST[PB0CWIXM];
      PB0CM002.PB0CMPDT[PB0CWIXM] = PB0CW02.PB0CMPDT[PB0CWIXM];
      PB0CM002.PB0CMPTM[PB0CWIXM] = PB0CW02.PB0CMPTM[PB0CWIXM];
      if (PB0CW02.PB0CMPDT[PB0CWIXM] == 0)
        set PB0CM002.PB0CMPDT[PB0CWIXM] skip, invisible;
        set PB0CM002.PB0CMPTM[PB0CWIXM] skip, invisible;
      end
    end

    PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM - 1; /* ===>Decrement line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C221 ***********************/
end // end PB0C221

// Format the map header data
Function PB0C222()
   /* ------------------------------------------------------------*/
   /* If PO ID entered*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PB0CMPYR > " ")

    PB0CM002.PB0CMPYR = PB0CW01.PCFSECD;
    PB0CM002.PB0CMPMO = PB0CW01.PB0CMPMO;
    PB0CM002.PB0CMPDM = PB0CW01.PB0CMPDM;

  end

   /* ------------------------------------------------------------*/
   /* If Factory entered*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.FY1FCTYC > " ")
    PB0CM002.FY1FCTYC = PB0CW01.FY1FCTYC;
  end

   /* ------------------------------------------------------------*/
   /* If Order Type entered*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PC4ORTYP > " ")
    PB0CM002.PC4ORTYP = PB0CW01.PC4ORTYP;
    PB0CM002.PC4SDESC = PB0CM001.PC4SDESC;
  end

   /* ------------------------------------------------------------*/
   /* If Style entered*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.SY1STNBR > " ")
    PB0CM002.SY1STNBR = PB0CW01.SY1STNBR;
  end


   /* ------------------------------------------------------------*/
   /* Load other entered header data*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.PC3PRTIN > " ")
    PB0CM002.PC3PRTIN = PB0CM001.PC3PRTIN;
  end

   /* ------------------------------------------------------------*/
   /* Load other common header data*/
   /* ------------------------------------------------------------*/

  PB0CM002.CAUSERID = PB0CM001.CAUSERID;

   /* ------------------------------------------------------------*/
   /* If P.O. Number entered valued*/
     /* - Load all associated data to map*/
   /* ------------------------------------------------------------*/

  if (PB0CW01.PC3PONBR > 0)

    PB0CM002.PC3PONBR = PB0CW01.PC3PONBR;
    PB0CM002.FY1FCTYC = VPOHDR02.FY1FCTYC;

    /* ------------------------------------------------------------*/
      /* Load the P.O Order Type ID*/
     /* If Order Type format not entered load default value*/
    /* ------------------------------------------------------------*/

    PB0CM002.PC4ORTYP = VPOHDR02.PC4ORTYP;

    set PC4REC empty; /* ===> initialize select record*/
    PC4REC.XGPCD = VPOHDR02.XGPCD;
    PC4REC.PC4ORTYP = VPOHDR02.PC4ORTYP;
    PB0CS02(); /* ===> get order type desc.*/
    PB0CM002.PC4SDESC = PC4REC.PC4SDESC;

    /* ------------------------------------------------------------*/
      /* Format and load the P.O ID in display form*/
    /* ------------------------------------------------------------*/

    TA2REC.TA2GRGGN = VPOHDR02.PC3POIDT; /* ===> CCYYMMDD numeric*/
    PB0CW00.TA2GRGG = TA2REC.TA2GRGG; /* ===> CCYYMMDD alpha*/

    PB0CM002.PB0CMPYR = VPOHDR02.PCFSECD; /* ====> production year*/
    PB0CM002.PB0CMPMO = PB0CW00.PB0CMPMO; /* ====> production month*/
    PB0CM002.PB0CMPDM = PB0CW00.PB0CMPDM; /* ====> delivery month*/

  end /* ===> P.O. Number was entered*/

   /* **                                                        ***/
   /* ********************** End of PB0C222 ***********************/
end // end PB0C222

// -->Check attention identifier
Function PB0C230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0CW00.PB0CWSWR == "Y") /* Request for data*/
      set PB0CW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0CW00.PB0CWSWF = "N"; /* Format the map switch*/
    PB0CW00.PB0CWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0CM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PB0C211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PB0CM001 initial;
      set PB0CM001.CATOAP cursor, bold; /* Highlight*/
      PB0CW00.XXXPRCNM = "PB0C230"; /* Module identification*/

      PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
      PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
      PB0CW00.PB0CWSWR = "N"; /* Request for data switch*/

    else

      PB0CW00.XXXPRCNM = "PB0C230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0CM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    PB0C211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0CM001 initial;
    set PB0CM001.CATOAP cursor, bold; /* Highlight*/
    PB0CW00.XXXPRCNM = "PB0C230"; /* Module identification*/

    PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
    PB0CW00.PB0CWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end



   /* ------------------------------------------------------------*/
   /* pf2 = refresh , rebuild the list screen from the database.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf2) /* PF2 was pressed*/
    PB0CW00.PB0CWSWR = "Y"; /* Request for data flag yes*/
    exit stack; /* Rebuild screen*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9  was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    PB0CW00.XXXPRCNM = "PB0C230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end



   /* **                                                        ***/
   /* ********************** End of PB0C230 ***********************/
end // end PB0C230

// -->Reset highlighted fields
Function PB0C240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIXM = 13; /* Initialize line index*/

  while (PB0CW00.PB0CWIXM >= 1) /* Until end of lines*/

    if (PB0CW02.PB0CMSEL[PB0CWIXM] == "X" /* if previously deleted*/
     || PB0CW02.PC3PONBR[PB0CWIXM] == 0)  /* or no data*/
      set PB0CM002.PB0CMSEL[PB0CWIXM] skip, invisible;
    else
      if (PB0CW02.PB0CMSEL[PB0CWIXM] == "Z") /* If this belongs to 'P'*/
        set PB0CM002.PB0CMSEL[PB0CWIXM] skip, invisible;
      else
        set PB0CM002.PB0CMSEL[PB0CWIXM] cursor, initialAttributes;
      end
    end

    PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM - 1; /* Decrement line index*/
  end

  set PB0CM002.CATOAP initialAttributes; /* TO application*/
  set PB0CM002.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End Of PB0C240 ***********************/
end // end PB0C240

// -->Verify the entered data
Function PB0C250()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0C251(); /* Verify scroll*/

  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter /* ===> edit this screen requested*/
   || converseVar.eventKey is pf7   /* ===> scroll backward*/
   || converseVar.eventKey is pf8   /* ===> scroll forward*/
   || converseVar.eventKey is pf9   /* ===> selection print requested*/
   || converseVar.eventKey is pf20) /* ===> global green bar print*/

    if (PB0CW00.TA5TSQIX > 0) /* Page was formatted*/

      PB0CW00.PB0CWIXM = 13; /* Initialize line index*/
      PB0CW00.PC4ORTYP = " "; /* Initialize save Order Type*/

      while (PB0CW00.PB0CWIXM > 0) /* Until end of lines*/

        PB0C252(); /* Verify data in the line*/

        PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM - 1; /* Decrement line number*/

      end

    end /* ===> if Page was formatted*/

    if (converseVar.eventKey is pf20) /* Global print request*/

      if (PB0CW00.PB0CWCTR == 0)
        PB0CW00.XXXPRCNM = "PB0C250"; /* Module identification*/
        set PB0CM002.PB0CMSEL[1] cursor; /* Highlight*/
        converseLib.validationFailed(302); /* ===> No reports to submit/print*/
      else
        PB0CW00.PB0CMSEL = "G"; /* Print on greenbar*/
      end /* Counter check*/

    end /* PF20 check*/

  end /* ===> <enter> or <PF20> check*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0CM002.CAITEM > " ") /* Application data was entered*/

    PB0CW00.XXXPRCNM = "PB0C250"; /* Module identification*/
    set PB0CM002.CAITEM cursor, bold; /* ===>set cursor*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0C250 ***********************/
end // end PB0C250

// Verify scroll request
Function PB0C251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0CW00.XXXTSPAG < 2)       /* and no previous pages*/

    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PB0CM002.PB0CMSEL[1] cursor;
    PB0CW00.XXXPRCNM = "PB0C251"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0CW00.XXXTSPAG >= PB0CW00.TA5TSQIX) /* and no more pages*/

    converseLib.validationFailed(3); /* No more pages to display*/
    converseLib.clearScreen();
    
    set PB0CM002.PB0CMSEL[1] cursor;
    PB0CW00.XXXPRCNM = "PB0C251"; /* Module identification*/

  end

   /* **                                                        ***/
   /* ********************** End Of PB0C251 ***********************/
end // end PB0C251

// Verify data in the line
Function PB0C252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "D","G", OR "P",*/
   /* indicate only "D","G", OR "P" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PB0CM002.PB0CMSEL[PB0CWIXM] == " ") /* ===> reload viewed indicator*/
    if (PB0CW02.PB0CMSEL[PB0CWIXM] == "V")
      PB0CM002.PB0CMSEL[PB0CWIXM] = "V";
    end
    return;
  end

  if (PB0CM002.PB0CMSEL[PB0CWIXM] != PB0CW02.PB0CMSEL[PB0CWIXM])

    if (PB0CM002.PB0CMSEL[PB0CWIXM] != "D" /* and is not a "D"*/
     && PB0CM002.PB0CMSEL[PB0CWIXM] != "G" /* and is not a "G"*/
     && PB0CM002.PB0CMSEL[PB0CWIXM] != "P") /* and is not a "P"*/

      PB0CW00.XXXPRCNM = "PB0C252"; /* Module identification*/
      set PB0CM002.PB0CMSEL[PB0CWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(323); /* Indicate only "D","G", or "P"*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If delete was requested for printed audit indicate error*/
   /* else move "d" to page record.*/
   /* ------------------------------------------------------------*/

  if (PB0CM002.PB0CMSEL[PB0CWIXM] == "D")

    if (PB0CW02.PB0CMPST[PB0CWIXM] == "P") /* ===> Print indicator*/
      set PB0CM002.PB0CMSEL[PB0CWIXM] cursor, bold; /* Highlight*/
      PB0CW00.XXXPRCNM = "PB0C252"; /* Module identification*/
      converseLib.validationFailed(355); /* ===> Cannot delete printed audit*/
    else
      PB0CW02.PB0CMSEL[PB0CWIXM] = "D";
      PB0CW00.PB0CWDFL = "Y"; /* Delete selection flag*/
      PB0CW00.PB0CWSWU = "Y"; /* Storage update switch*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
    /* - PFkey (cannot make selections  with a PF20 request)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    if (PB0CM002.PB0CMSEL[PB0CWIXM] == "D"
     || PB0CM002.PB0CMSEL[PB0CWIXM] == "G"
     || PB0CM002.PB0CMSEL[PB0CWIXM] == "P")

      set PB0CM002.PB0CMSEL[PB0CWIXM] cursor, bold; /* Highlight*/
      PB0CW00.XXXPRCNM = "PB0C252"; /* Module identification*/
      converseLib.validationFailed(301); /* ===>cannot make selection and press PF20*/

    end /* ===> line selected*/

  else /* ===> PF9 pressed*/

    /* ------------------------------------------------------------*/
     /* If selection was entered then verify data according to*/
      /* - Uniqueness, May only select "G"s or "P"s, not both in 1*/
        /* session*/
    /* ------------------------------------------------------------*/

    if (PB0CM002.PB0CMSEL[PB0CWIXM] == "G"
     || PB0CM002.PB0CMSEL[PB0CWIXM] == "P")

      if (PB0CM002.PB0CMSEL[PB0CWIXM] != PB0CW00.PB0CMSEL /* ===>*/
       && PB0CW00.PB0CMSEL != " ")                       
        set PB0CM002.PB0CMSEL[PB0CWIXM] cursor, bold; /* Highlight*/
        PB0CW00.XXXPRCNM = "PB0C252"; /* Module identification*/
        converseLib.validationFailed(300); /* ===>cannot mix codes*/
      else
        PB0CW00.PB0CMSEL = PB0CM002.PB0CMSEL[PB0CWIXM];
                                   /* ==>save code*/
        PB0CW02.PB0CMSEL[PB0CWIXM] = PB0CM002.PB0CMSEL[PB0CWIXM];
        PB0CW00.PB0CWSWU = "Y"; /* Storage update switch*/
      end

      /* ------------------------------------------------------------*/
      /* 4/21/93 removed edit. do not require greenbar print before*/
      /* formal print.*/
      /* ------------------------------------------------------------*/
         /* If trying to "P" a P.O. with a print*/
         /* indicator of ' ' set error*/
      /* ------------------------------------------------------------*/

   /* IF PB0CM002.PB0CMSEL(PB0CWIXM) EQ 'P';*/
   /* AND PB0CW02.PB0CMPST(PB0CWIXM) EQ ' ';/* ===> Print indicator*/

   /* SET PB0CM002.PB0CMSEL(PB0CWIXM) CURSOR,BRIGHT; /* Highlight*/
   /* MOVE 'PB0C252' TO PB0CW00.XXXPRCNM; /* Module identification*/
   /* MOVE 306 TO EZEMNO;        /* ===> cannot select this line with 'P'*/

   /* END;                         /* ===> type not specified*/

    end /* ===> line selected*/

  end /* ===> enter pressed*/

   /* **                                                        ***/
   /* ********************** End of PB0C252 ***********************/
end // end PB0C252

// -->Process valid input request
Function PB0C260()
   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PB0CW00.PB0CWSWM = "1"; /* ===> Set request for Sel map*/
    set PB0CW02 empty;
    set PB0CM002 initial;
    set PB0CM001.PB0CMPYR cursor;
    PB0CM001.XXXPRCNM = "PB0C"; /* ===> Reset field*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
    set PB0CM002 initial;
    PB0CW00.XXXTSPAG = PB0CW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PB0CW00.PB0CWSWF = "Y"; /* Format the map switch*/
    set PB0CM002 initial;
    PB0CW00.XXXTSPAG = PB0CW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and call routine to submit JCL.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   || converseVar.eventKey is pf20)

    XX0XS01(); /* ===>        Get date and time*/
    PB0CW00.PB0CWYY = XX0XW01.XX0XWYY; /* years*/
    PB0CW00.PB0CWMM = XX0XW01.XX0XWMM; /* month*/
    PB0CW00.PB0CWDD = XX0XW01.XX0XWDD; /* day*/
    PB0CW00.PB0CWMHH = XX0XW01.XX0XWHRS; /* hours*/
    PB0CW00.PB0CWMCL = ":"; /* colon*/
    PB0CW00.PB0CWMMM = XX0XW01.XX0XWMNS; /* minutes*/
    PB0CW00.PB0CWPAG = PB0CW00.XXXTSPAG; /* ===> Save current page*/

    PB0CW00.PB0CWVFL = "N"; /* ===> 'P' print has occured flag*/
    PB0CW00.PC3PONBR = 0; /* ===> Init save PO number*/
    PB0CW00.PCJMEMDT = 0; /* ===> Init save print date*/
    PB0CW00.PCJMEMTM = 0; /* ===> Init save print time*/

    if (PB0CW00.PB0CMSEL != " " /* =====> Line was selected*/
     || PB0CW00.PB0CWDFL == "Y" /* =====> of delete was selected*/
     || converseVar.eventKey is pf20) /* =====> or global print requested*/

      PB0C261(); /* ===> process JCL Job submit routine*/

      if (PB0CW00.PB0CWMOD == "Y")
        PB0CW00.PB0CWSWU = "Y"; /* ===> update temp storage*/
      end
      PB0CW00.PB0CWDFL = "N";
                                   /* ===> init delete selection flag*/

    else

      PB0CW00.XXXPRCNM = "PB0C260";
      converseLib.validationFailed(25); /* ===> Selection must be made*/
      return; /* ===> Return to previous process*/

    end

    PB0CW00.PB0CMSEL = " "; /* ===> Reset selection*/
    PB0CW00.XXXTSPAG = PB0CW00.PB0CWPAG; /* ===> Save current page*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0C260 ***********************/
end // end PB0C260

// Process/submit print jobs
Function PB0C261()
  PB0CW00.XXXTSPAG = 1; /* ====> Start with first page*/
  PB0CW00.PB0CWCTR1 = 1;
  PB0CW00.PC4PONBR = 0;
  PB0CW00.PB0CWRMT4 = " ";

  if (PB0CW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

    /* ------------------------------------------------------------*/
     /* If the current page has been changed, update the page in*/
     /* storage before obtaining the first one for processing*/
    /* ------------------------------------------------------------*/

    if (PB0CW00.PB0CWSWU == "Y") /* Current page was changed*/

      PB0CS18(); /* Update temporary storage page*/

      PB0CW00.PB0CWSWU = "N"; /* Storage update switch*/

    end

    PB0CS19(); /* Obtain temporary storage page*/

  end

  PB0CW00.PC3PONBR = 0; /* ====> PO number*/
  set TA6REC empty;
                                   /* ====> print subroutine work area*/
  TA6REC.TA6MSGSW = "N"; /* ====> Set the End-of-Job message*/
                                   /* switch*/

  PB0C262(); /* ====> Load pass record with data*/

  while (PB0CW03.PC3PONBR[PB0CWCTR1] > 0)
    if (PB0CW03.PC3PONBR[PB0CWCTR1] > 0
     && PB0CW03.PC3PONBR[PB0CWCTR1] != PB0CW00.PC4PONBR)
      PB0CW00.PC4PONBR = PB0CW03.PC3PONBR[PB0CWCTR1];

        /* ------------------------------------------------------------*/
        /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
        /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
        /* OR PRODUCTION.*/
        /* ------------------------------------------------------------*/
      set XCTHREC empty;
      call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

      if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
        PB0CM002.XXXPRCNM = "PB0C261"; /* module identification*/
        converseLib.validationFailed(8); /* Error encountered with print request*/
        exit stack;
      else
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          TA6REC.TA6SUBSW = "Y";
                                   /* ====> Display map, Tailor & submit*/
                                   /* JCL*/
          PB0C263(); /* format production jcl*/
        else
          TA6REC.TA6SUBSW = "S"; /* ====> Tailor & submit JCL*/
          TA6REC.TA6RTNCD = " "; /* ====> Initialise the return code*/
          PB0C265(); /* format development jcl*/
        end
      end

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA6REC.TA6RTNCD == "0")        /* and normal return, JCL Submitted*/

        PB0C264(); /* ====> Update header & item audits*/

      end

    end
    PB0CW00.PB0CWCTR1 = PB0CW00.PB0CWCTR1 + 1;
  end
   /* **                                                        ***/
   /* ********************** End of PB0C261 ***********************/
end // end PB0C261

// Load pass record
Function PB0C262()
   /* ------------------------------------------------------------*/
   /* - Init. temp load index and map index*/
   /* - load DD * cards/data to the W.S. pass record*/
     /* until all T.S Pages have been processed*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWPFL = "P"; /* Init print selected flag*/
  PB0CW00.PB0CWIX1 = 1; /* ===> Init. temp load index*/
  PB0CW00.PB0CWIXM = 1; /* ===> init map index*/
  set PB0CW03 empty; /* ===> initialize W.S. Pas record*/

  while (PB0CW00.XXXTSPAG <= PB0CW00.TA5TSQIX) /* ===> until all T.S. pages*/

    /* ------------------------------------------------------------*/
     /* process and Load the pass record from the current T.S. page*/
     /* and T.S. index*/
    /* ------------------------------------------------------------*/

    while (PB0CW00.PB0CWIXM <= 13 /* ===> Until end of T.S. rows*/
     && PB0CW02.PC3PONBR[PB0CWIXM] > 0)

      if (PB0CW02.PB0CMSEL[PB0CWIXM] == "G"
       || PB0CW02.PB0CMSEL[PB0CWIXM] == "P")

        if (PB0CW02.PB0CMPST[PB0CWIXM] == "P")
          PB0CW00.PC3PONBR = PB0CW02.PC3PONBR[PB0CWIXM];
          PB0CW00.PCJMEMDT = PB0CW02.PCJMEMDT[PB0CWIXM];
          PB0CW00.PCJMEMTM = PB0CW02.PCJMEMTM[PB0CWIXM];
        end
        PB0CW03.PB0CWPRM[PB0CWIX1] = PB0CW02.PB0CWPRM[PB0CWIXM];
        PB0CW03.PB0CWCST[PB0CWIX1] = PB0CW02.PB0CWCST[PB0CWIXM];
        PB0CW03.PB0CWWHS[PB0CWIX1] = PB0CW02.PB0CWWHS[PB0CWIXM];
        if (PB0CW02.PB0CMPST[PB0CWIXM] == "P"
         && PB0CW02.PB0CMSEL[PB0CWIXM] == "P")
          PB0CW03.PB0CWUPD[PB0CWIX1] = "N"; /* Set update flag to NO*/
        else
          PB0CW02.PCJMEMDT[PB0CWIXM] = XX0XW01.XX0XWDAT;
                                   /* print date*/
          PB0CW02.PCJMEMTM[PB0CWIXM] = XX0XW01.XX0XWHMS;
                                   /* print time*/
          PB0CW02.PB0CMPDT[PB0CWIXM] = PB0CW00.PB0CWDT;
          PB0CW02.PB0CMPTM[PB0CWIXM] = PB0CW00.PB0CWTME;
        end
        PB0CW02.PB0CMPST[PB0CWIXM] = PB0CW02.PB0CMSEL[PB0CWIXM];
        if (PB0CW02.PB0CMSEL[PB0CWIXM] == "P")
          if (PB0CW00.PB0CWVFL == "N") /* If this is first 'P'*/
            PB0CW00.PB0CWVFL = "Y"; /* reset flag*/
            PB0CW02.PB0CMSEL[PB0CWIXM] = "V"; /* selectable*/
          else
            PB0CW02.PB0CMSEL[PB0CWIXM] = "Z"; /* non-selectable*/
          end
        else
          PB0CW02.PB0CMSEL[PB0CWIXM] = "V";
          PB0CW00.PB0CWPFL = "G"; /* Greenbar print selected*/
        end
        PB0CW00.PB0CWSWU = "Y"; /* Current page updated*/
        PB0CW00.PB0CWSWF = "Y"; /* Map must be formatted*/
        PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* Increment load indx*/

      else

        if (PB0CW02.PB0CMSEL[PB0CWIXM] == "Z"              /* If part of group print*/
         && PB0CW02.PC3PONBR[PB0CWIXM] == PB0CW00.PC3PONBR /* and group*/
         && PB0CW02.PCJMEMDT[PB0CWIXM] == PB0CW00.PCJMEMDT /* is*/
         && PB0CW02.PCJMEMTM[PB0CWIXM] == PB0CW00.PCJMEMTM) /* printing*/

          PB0CW00.PB0CWVFL = "N"; /* reset flag*/
          PB0CW02.PB0CMPST[PB0CWIXM] = PB0CW00.PB0CMSEL;
          PB0CW03.PB0CWPRM[PB0CWIX1] = PB0CW02.PB0CWPRM[PB0CWIXM];
          PB0CW03.PB0CWCST[PB0CWIX1] = PB0CW02.PB0CWCST[PB0CWIXM];
          PB0CW03.PB0CWWHS[PB0CWIX1] = PB0CW02.PB0CWWHS[PB0CWIXM];
          if (PB0CW00.PB0CMSEL == "G")
            PB0CW02.PB0CMSEL[PB0CWIXM] = "V";
            PB0CW02.PCJMEMDT[PB0CWIXM] = XX0XW01.XX0XWDAT;
            PB0CW02.PCJMEMTM[PB0CWIXM] = XX0XW01.XX0XWHMS;
            PB0CW02.PB0CMPDT[PB0CWIXM] = PB0CW00.PB0CWDT;
            PB0CW02.PB0CMPTM[PB0CWIXM] = PB0CW00.PB0CWTME;
          else
            PB0CW03.PB0CWUPD[PB0CWIX1] = "N";
                                   /* Set update flag to NO*/
          end
          PB0CW00.PB0CWSWU = "Y"; /* Current page updated*/
          PB0CW00.PB0CWSWF = "Y"; /* Map must be formatted*/
          PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* Increment load indx*/

        else

          if (PB0CW02.PB0CMSEL[PB0CWIXM] == "D")

            PB0CW03.PB0CWPRM[PB0CWIX1] = PB0CW02.PB0CWPRM[PB0CWIXM];
            PB0CW02.PB0CMPST[PB0CWIXM] = PB0CW02.PB0CMSEL[PB0CWIXM];

            /* ------------------------------------------------------------*/
             /* Update the audit row with the non-display print indicator*/

            /* ------------------------------------------------------------*/
            if (PB0CW03.SY1STNBR[PB0CWIX1] == " ") /* If header item audit*/
              PB0CS20();
                                   /* Select Unique header audit row*/
              VPOAHD02.PCJMEMO = "D"; /* Print status*/
              PB0CS21(); /* Update Unique header row*/
            else
              PB0CS22(); /* Select Unique item audit row*/
              VPOAIT02.PCJMEMO = "D"; /* Print status*/
              PB0CS14();
                                   /* Update Unique item audit row*/
            end
            PB0CW03.PB0CWPRM[PB0CWIX1] = " ";
            PB0CW03.PC3PONBR[PB0CWIX1] = 0;
            PB0CW02.PB0CMSEL[PB0CWIXM] = "X";
            PB0CW00.PB0CWSWU = "Y"; /* Current page updated*/
            PB0CW00.PB0CWSWF = "Y"; /* Map must be formatted*/

          else
            if (converseVar.eventKey is pf20
             && PB0CW02.PB0CMPST[PB0CWIXM] == " ")

              PB0CW03.PB0CWPRM[PB0CWIX1] = PB0CW02.PB0CWPRM[PB0CWIXM];
              PB0CW03.PB0CWCST[PB0CWIX1] = PB0CW02.PB0CWCST[PB0CWIXM];
              PB0CW03.PB0CWWHS[PB0CWIX1] = PB0CW02.PB0CWWHS[PB0CWIXM];
              PB0CW02.PB0CMPST[PB0CWIXM] = "G";
              PB0CW02.PCJMEMDT[PB0CWIXM] = XX0XW01.XX0XWDAT;
                                   /* print date*/
              PB0CW02.PCJMEMTM[PB0CWIXM] = XX0XW01.XX0XWHMS;
                                   /* print time*/
              PB0CW02.PB0CMPDT[PB0CWIXM] = PB0CW00.PB0CWDT;
              PB0CW02.PB0CMPTM[PB0CWIXM] = PB0CW00.PB0CWTME;
              PB0CW02.PB0CMSEL[PB0CWIXM] = "V";
              PB0CW00.PB0CWSWU = "Y"; /* Current page updated*/
              PB0CW00.PB0CWSWF = "Y"; /* Map must be formatted*/
              PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* Increment indx*/

            end

          end

        end

      end

      PB0CW00.PB0CWIXM = PB0CW00.PB0CWIXM + 1; /* Increment T.S. index*/

    end /* ===> while more data on T.S. Page*/

    /* ------------------------------------------------------------*/
     /* Set-up and read the next T.S. page if there are more*/
    /* ------------------------------------------------------------*/

    if (PB0CW00.XXXTSPAG < PB0CW00.TA5TSQIX) /* ===> Not all T.S. pages read*/

      if (PB0CW00.PB0CWSWU == "Y") /* Current page was changed*/

        PB0CS18(); /* Update temp storage page*/
        PB0CW00.PB0CWSWU = "N"; /* Storage update switch*/

      end

      PB0CW00.XXXTSPAG = PB0CW00.XXXTSPAG + 1; /* ===> get next T.S. Page*/
      PB0CW00.PB0CWIXM = 1; /* Initialize T.S. index*/

      PB0CS19(); /* Obtain temporary storage page*/

    else
      return;
    end

  end /* ===> while more T.S. Pages to process*/
   /* **                                                        ***/
   /* ********************** End of PB0C262 ***********************/
end // end PB0C262

// Read table & format parameters
Function PB0C263()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX < 400) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the parameters from the passed record.*/
    /* ------------------------------------------------------------*/

    if (PB0CT01.TARTYPE[PB0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PB0CW00.PB0CWIX1 = 1; /* ===> init temp load index*/

      while (PB0CW03.PC3PONBR[PB0CWIX1] > 0) /* ===> DD * card to load*/
        if (PB0CW03.PC3PONBR[PB0CWIX1] == PB0CW00.PC4PONBR)

          if (PB0CW03.YOACD[PB0CWIX1] == 68
           || PB0CW03.YOACD[PB0CWIX1] == 72)
            PB0CW00.PC2CUXID = PB0CW03.PC2CUXID[PB0CWIX1];
                                   /* Save cust*/
            PB0CW03.PC2CUXID[PB0CWIX1] = PB0CW03.PB0CWCST[PB0CWIX1];
            TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
            PB0CW03.PC2CUXID[PB0CWIX1] = PB0CW00.PC2CUXID; /* Restore*/
          else
            if (PB0CW03.YOACD[PB0CWIX1] == 69
             || PB0CW03.YOACD[PB0CWIX1] == 71)
              PB0CW00.XWHCD = PB0CW03.XWHCD[PB0CWIX1];
                                   /* Save warehouse*/
              PB0CW03.XWHCD[PB0CWIX1] = PB0CW03.PB0CWWHS[PB0CWIX1];
              TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
              PB0CW03.XWHCD[PB0CWIX1] = PB0CW00.XWHCD; /* Restore*/
            else
              TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
            end
          end

          TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr JCL stmt indx*/
        end
        PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* ===> incr. temp index*/

      end /* ===> while DD * available to load*/

      PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* ==> incr JCL tbl indx*/

    else

      if (PB0CT01.TARTYPE[PB0CWIXT] == "D") /* Remote printer card*/

        TA6REC.TA6SUBSW = "N"; /* ===> display printer selection map*/
        TA6REC.XURDEST = "RMT999"; /* ===> print distrabution*/
        TA6REC.XURCOPY = 1; /* ===>number of copies*/
        PB0CW00.PB0CW-SAV-IDX = TA6INDEX;
                                   /* save idx before displaying map*/

        while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
          XPTA0P(); /* ===> Print Request Subroutine*/
        end

        TA6INDEX = PB0CW00.PB0CW-SAV-IDX; /* reset index*/


              /* ---------------------------------------------------------*/
              /* If CANCEL was requested, clear the map fields and exit.*/
              /* ---------------------------------------------------------*/


        if (converseVar.eventKey is pa2) /* PA2 was pressed*/

          converseLib.clearScreen();
           /* m002 display storage*/

          COMMAREA.CATOAP = " "; /* TO application*/
          COMMAREA.CAITEM = " "; /* Application data*/

          exit stack; /* Exit to display map*/

        end

        if (TA6REC.XURDEST == "RMT999" /* No printer selected*/
         && PB0CW00.PB0CWPFL == "P")   /* Form print selected*/

          FY1REC.XGPCD = VPOHDR02.XGPCD;
          FY1REC.FY1FCTYC = VPOHDR02.FY1FCTYC;
          PB0CS24(); /* Get field office code*/

          VFDOFC02.XGPCD = VPOHDR02.XGPCD;
          VFDOFC02.FY6FOCD = FY1REC.FY6FOCD;
          PB0CS25(); /* Get field office printer*/

          if (VFDOFC02.XROPDEST == " ")

            PB0CW00.XXXPRCNM = "PB0C263"; /* Module identification*/
            set PB0CM002.CAITEM cursor, bold; /* ===>set cursor*/
            converseLib.validationFailed(557); /* Field office printer cd not setup*/
            exit stack;

          else

            PB0CW00.PB0CWRMT = VFDOFC02.XROPDEST;
                                   /* Default field office printer cd*/
          end

        else /* Rmt printer selected from TA0PM001*/

          PB0CW00.PB0CWRMT = TA6REC.XURDEST;
                                   /* Selected printer cd*/

        end
        if (PB0CW00.PB0CWRMT4 == " ")
          PB0CW00.PB0CWRMT4 = PB0CW00.PB0CWRMT;
        else
          PB0CW00.PB0CWRMT = PB0CW00.PB0CWRMT4;
        end

        PB0CW00.PB0CWLN1 = "//P0090.SYSUT2   DD  SYSOUT=A,DEST=";
        PB0CW00.PB0CWLN2 = ",OUTPUT=*.OUT01";

        TA6REC.TARJCL[TA6INDEX] = PB0CW00.PB0CWJCD; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

        PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* Increment table index*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PB0CT01.TARJCL[PB0CWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PB0CT01.TARTYPE[PB0CWIXT]; /* Type*/

    /* ------------------------------------------------------------*/
     /* If end of JCL table end, else increment the tbl & rec indxs*/
    /* ------------------------------------------------------------*/

    if (PB0CT01.TARJCL[PB0CWIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 400; /* Indicate end of table*/
    else
      PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* Increment table index*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* request for*/
   /* - display TA0PM001 map for first job*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();

  TA6REC.TA6SUBSW = "S"; /* ===> taylor and submit job*/
  TA6REC.TA6MSGSW = "N"; /* ===> set the end-of-job switch*/
  TA6REC.TA6RTNCD = " "; /* Initialze return code*/

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/

    PB0CW00.PB0CWZFL = "Y"; /* ===> job info message*/
    PB0CW00.XXXTSPAG = "1"; /* ===> Request for data*/
    PB0CM002.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    set PB0CM002 alarm; /* ===> alarm*/
    return; /* ===> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/

    PB0CW00.PB0CWSWR = "Y"; /* ===> Request for data*/
    PCWREC.XXXMSGNO = 86; /* ===> Cancelled by user*/
    PB0CW00.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    exit stack;

  else

    PB0CW00.PB0CWSWR = "Y"; /* ===> Request for data*/
    PCWREC.XXXMSGNO = 10; /* ===> Indicate system error*/
    PB0CW00.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PB0C263 ***********************/
end // end PB0C263

// Do header & item audit updates
Function PB0C264()
   /* ------------------------------------------------------------*/
   /* - Do header &item update for print indicator, date, & time*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIX1 = 1; /* Initialize line index*/

  while (PB0CW00.PB0CWIX1 <= 70 /* Until end of parms*/
   && PB0CW03.PC3PONBR[PB0CWIX1] > 0)

    if (PB0CW03.PB0CWUPD[PB0CWIX1] == " ") /* If update for audit*/

      /* ------------------------------------------------------------*/
       /* Update the audit row with print indicator, date, & time.*/
      /* ------------------------------------------------------------*/

      if (PB0CW03.SY1STNBR[PB0CWIX1] == " ") /* If header item audit*/

        PB0CS20(); /* Select Unique header audit row*/

        VPOAHD02.PCJMEMO = PB0CW00.PB0CMSEL; /* Print status*/
        VPOAHD02.PCJMEMDT = XX0XW01.XX0XWDAT; /* Print date*/
        VPOAHD02.PCJMEMTM = XX0XW01.XX0XWHMS; /* Print time*/
        PB0CS21(); /* Update Unique header row*/

      else

        PB0CS22(); /* Select Unique item audit row*/

        VPOAIT02.PCJMEMO = PB0CW00.PB0CMSEL; /* Print status*/
        VPOAIT02.PCJMEMDT = XX0XW01.XX0XWDAT; /* Print date*/
        VPOAIT02.PCJMEMTM = XX0XW01.XX0XWHMS; /* Print time*/
        PB0CS14(); /* Update Unique item audit row*/

      end

    end

    PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* Increment line number*/

  end


   /* ------------------------------------------------------------*/

                   /* COMMIT ALL DATA BASE UPDATES*/

   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* ===> commit all updates*/

   /* **                                                        ***/
   /* ********************** End of PB0C264 ***********************/
end // end PB0C264

// Read table & format parameters
Function PB0C265()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  PB0CW00.PB0CWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX < 400) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the parameters from the passed record.*/
    /* ------------------------------------------------------------*/

    if (PB0CT11.TARTYPE[PB0CWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PB0CW00.PB0CWIX1 = 1; /* ===> init temp load index*/

      while (PB0CW03.PC3PONBR[PB0CWIX1] > 0) /* ===> DD * card to load*/
        if (PB0CW03.PC3PONBR[PB0CWIX1] == PB0CW00.PC4PONBR)

          if (PB0CW03.YOACD[PB0CWIX1] == 68
           || PB0CW03.YOACD[PB0CWIX1] == 72)
            PB0CW00.PC2CUXID = PB0CW03.PC2CUXID[PB0CWIX1];
                                   /* Save cust*/
            PB0CW03.PC2CUXID[PB0CWIX1] = PB0CW03.PB0CWCST[PB0CWIX1];
            TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
            PB0CW03.PC2CUXID[PB0CWIX1] = PB0CW00.PC2CUXID; /* Restore*/
          else
            if (PB0CW03.YOACD[PB0CWIX1] == 69
             || PB0CW03.YOACD[PB0CWIX1] == 71)
              PB0CW00.XWHCD = PB0CW03.XWHCD[PB0CWIX1];
                                   /* Save warehouse*/
              PB0CW03.XWHCD[PB0CWIX1] = PB0CW03.PB0CWWHS[PB0CWIX1];
              TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
              PB0CW03.XWHCD[PB0CWIX1] = PB0CW00.XWHCD; /* Restore*/
            else
              TA6REC.TA6ROW[TA6INDEX] = PB0CW03.PB0CWPRM[PB0CWIX1];
            end
          end

          TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr JCL stmt indx*/
        end
        PB0CW00.PB0CWIX1 = PB0CW00.PB0CWIX1 + 1; /* ===> incr. temp index*/

      end /* ===> while DD * available to load*/

      PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* ==> incr JCL tbl indx*/

    else

      if (PB0CT11.TARTYPE[PB0CWIXT] == "D") /* Remote printer card*/

        PB0CW00.PB0CWRMT = "RMT999";
        PB0CW00.PB0CWLN1 = "//P0090.SYSUT2   DD  SYSOUT=A,DEST=";
        PB0CW00.PB0CWLN2 = ",OUTPUT=*.OUT01";

        TA6REC.TARJCL[TA6INDEX] = PB0CW00.PB0CWJCD; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

        PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* Increment table index*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PB0CT11.TARJCL[PB0CWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PB0CT11.TARTYPE[PB0CWIXT]; /* Type*/

    /* ------------------------------------------------------------*/
     /* If end of JCL table end, else increment the tbl & rec indxs*/
    /* ------------------------------------------------------------*/

    if (PB0CT11.TARJCL[PB0CWIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 400; /* Indicate end of table*/
    else
      PB0CW00.PB0CWIXT = PB0CW00.PB0CWIXT + 1; /* Increment table index*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* request for*/
   /* - display TA0PM001 map for first job*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
  
  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/

    PB0CW00.PB0CWZFL = "Y"; /* ===> job info message*/
    PB0CW00.XXXTSPAG = "1"; /* ===> Request for data*/
    PB0CM002.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    set PB0CM002 alarm; /* ===> alarm*/
    return; /* ===> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/

    PB0CW00.PB0CWSWR = "Y"; /* ===> Request for data*/
    PCWREC.XXXMSGNO = 86; /* ===> Cancelled by user*/
    PB0CW00.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    exit stack;

  else

    PB0CW00.PB0CWSWR = "Y"; /* ===> Request for data*/
    PCWREC.XXXMSGNO = 10; /* ===> Indicate system error*/
    PB0CW00.XXXPRCNM = "PB0C263"; /* ===> Process name*/
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PB0C263 ***********************/
end // end PB0C265

// Date validation & conversion
Function PB0CS01()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PB0CW00.XXXPRCNM = "PB0CS01"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PB0CW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PB0CS01

// Select (S ) Unique    VPOTYP01
Function PB0CS02()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0CW00.XXXPRCNM = "PB0CS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0CS01 ***********************/
end // end PB0CS02

// Select (S ) Unique    VSUSER01
Function PB0CS03()
   /* ------------------------------------------------------------*/
   /* If user blanked out scheduler, we can't validate spaces.*/
   /* ------------------------------------------------------------*/

  if (PB0CM001.CAUSERID == " ")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty;
  PG1REC.XGPCD = "03";
  PG1REC.XXXUSER = PB0CM001.CAUSERID;
  PG1REC.PG1SC4CD = "**";
  PG1REC.PG1FCTCD = "**";

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PG1REC.XXXSTAT == "A") /* ===> active*/
        PB0CW01.PG1SC4CD = PG1REC.PG1SC4CD;
        PB0CW01.CAUSERID = PB0CM001.CAUSERID;
        return; /* Return to previous process*/
      else
        converseLib.validationFailed(210); /* ===>sheduler not authorized*/
        PB0CW00.PB0CWSWM = "1"; /* ===> request for map 1*/
        PB0CW00.XXXPRCNM = "PB0CS03"; /* Module identification*/
        set PB0CM001.CAUSERID cursor, bold; /* Highlight userid*/
        return; /* Exit to display map*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(210); /* ===>sheduler nov authorized*/
      PB0CW00.PB0CWSWM = "1"; /* ===> request for map 1*/
      PB0CW00.XXXPRCNM = "PB0CS03"; /* Module identification*/
      set PB0CM001.CAUSERID cursor, bold; /* Highlight userid*/
      return; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0CW00.PB0CWSWM = "1"; /* ===> request for map 1*/
  PB0CW00.XXXPRCNM = "PB0CS03"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0CS01 ***********************/
end // end PB0CS03

// Verify prod. year/season code
Function PB0CS04()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of season codes.*/
   /* Read first record of select set.*/
    /* - if found --> save data*/
    /* - else  -----> set invalid error*/
   /* Close cursor.*/
   /* ------------------------------------------------------------*/

  set PCFREC empty; /* ====> row storage area*/

  PCFREC.PCFSECD = PB0CM001.PB0CMPYR;
  if (PB0CM001.PB0CMPMO > "  ") /* ====> production month*/
    PB0CW00.PB0CWMMA = PB0CM001.PB0CMPMO; /* ===> MM char format*/
    PCFREC.PCFBUYMO = PB0CW00.PB0CWMMN; /* ===> MM num to Buy month*/
  else
    PCFREC.PCFBUYMO = -1; /* ===> wild card Buy month*/
  end
  PCFREC.XXXSTAT = "A";
  PB0CW00.PB0CWSWT = "N"; /* ===>EOF cursor temp*/


  PB0CS05(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch the first record then check EOF flag*/
   /* ------------------------------------------------------------*/

  PB0CS06(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  if (PB0CW00.PB0CWSWT == "N") /* ===> EOF temp cursor? (ie. record found?*/

    PB0CW01.PB0CWMO1 = PCFREC.PCFBUYMO; /* save begin buy month*/
    PB0CW01.PB0CWYR1 = PCFREC.PCFBUYYR; /* save begin buy year*/
    PB0CW01.PCFSECD = PCFREC.PCFSECD; /* save season code*/

    while (PB0CW00.PB0CWSWT == "N")
      PB0CS06();
    end

    PB0CW01.PB0CWMO2 = PCFREC.PCFBUYMO; /* save end buy month*/
    PB0CW01.PB0CWYR2 = PCFREC.PCFBUYYR; /* save end buy year*/

  else
    converseLib.validationFailed(80); /* ===> season code invalid*/
    PB0CW00.XXXPRCNM = "PB0CS04"; /* Module identification*/
    set PB0CM001.PB0CMPYR cursor, bold; /* ===> production year*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0CS07(); /* ===> Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of PB0CS04 ***********************/
end // end PB0CS04

// Select (S1)  Set/Open VPCVFY01
Function PB0CS05()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS05"; /* Module identification*/
  PB0CW00.PB0CWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0CW00.PB0CWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0CM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS05 ***********************/
end // end PB0CS05

// Fetch  (N1)  Next row VPOVFY01
Function PB0CS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0CW00.PB0CWSWT = "Y"; /* Indicate end of temp cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS06"; /* Module identification*/
  PB0CW00.PB0CWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0CW00.PB0CWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS06 ***********************/
end // end PB0CS06

// Close  (C1)  Set      VPCVFY01
Function PB0CS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS07 ***********************/
end // end PB0CS07

// Select (S3) Set/Open  VPOHDR01
Function PB0CS08()
   /* ------------------------------------------------------------*/
   /* Initialize the  key information for select set VPOHDR02*/
   /* ------------------------------------------------------------*/


  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = "03";
  VPOHDR02.PO-REG-CD = "01";
  VPOHDR02.PCFSECD = PB0CW01.PCFSECD;

  if (PB0CW01.PC4ORTYP > " ")
    VPOHDR02.PC4ORTYP = PB0CW01.PC4ORTYP;
  else
    VPOHDR02.PC4ORTYP = "*";
  end

  if (PB0CW01.FY1FCTYC > " ")
    VPOHDR02.FY1FCTYC = PB0CW01.FY1FCTYC;
  else
    VPOHDR02.FY1FCTYC = "*";
  end

  PCYREC.PCYFRDT = PB0CW01.PB0CWLOW; /* ===> load low  date*/
  PCYREC.PCYTODT = PB0CW01.PB0CWHGH; /* ===> load high date*/


  PCYREC.PCYFUNC = "S3";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
  PB0CW00.XXXPRCNM = "PB0CS08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS08 ***********************/
end // end PB0CS08

// Fetch  (N3) Next row  VPOHDR01
Function PB0CS09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("N3", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0CW00.PB0CWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
  PB0CW00.XXXPRCNM = "PB0CS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0CS09"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS09 ***********************/
end // end PB0CS09

// Select Set (S3) - VPOAHD01
Function PB0CS10()
  PB0CW00.PB0CWAHC = "N"; /* End of VPOAHD02 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOAHD02 with key values for select set*/
   /* ------------------------------------------------------------*/

  set VPOAHD02 empty; /* Initialize VPOAHD02*/
  VPOAHD02.XGPCD = "03"; /* GPC code*/
  VPOAHD02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAHD02.PC3PONBR = VPOHDR02.PC3PONBR; /* P.O. number*/
  VPOAHD02.PCJMEMO = PB0CM001.PC3PRTIN; /* Status*/
  VPOAHD02.XXXPGUID = "*"; /* userid*/
  PCYREC.PCYFUNC = "S3"; /* Function*/
  PCYREC.PCYFRDT = PB0CW01.ZZZSDT[1]; /* From PO ID*/
  PCYREC.PCYTODT = PB0CW01.ZZZSDT[2]; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0CS11(); /* Fetch first P.O. header audit*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOAHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAHD02.PC3POIDT; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAHD02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS10

// Fetch next (n3) - VPOAHD01
Function PB0CS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOAHD02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N3"; /* Function*/
  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PB0CW00.PB0CWMEM[1] = VPOAHD02.PCJMEMO;
      PB0CW00.PB0CWMDT[1] = VPOAHD02.PCJMEMDT;
      PB0CW00.PB0CWMTM[1] = VPOAHD02.PCJMEMTM;

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0CW00.PB0CWAHC = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAHD02.PC3POIDT; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAHD02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS11

// Select Set (S4) - VPOAIT01
Function PB0CS12()
  PB0CW00.PB0CWAIC = "N"; /* End of VPOAIT02 flag*/

   /* ------------------------------------------------------------*/
   /* Format PCJREC with key values for select set*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* Initialize PCJREC*/
  VPOAIT02.XGPCD = "03"; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAIT02.PC3PONBR = VPOHDR02.PC3PONBR; /* P.O. number*/
  if (PB0CW01.SY1STNBR == " ") /* If style not entered*/
    VPOAIT02.SY1STNBR = "*"; /* wildcard style*/
  else
    VPOAIT02.SY1STNBR = PB0CW01.SY1STNBR; /* Style*/
  end
  VPOAIT02.PCJMEMO = PB0CM001.PC3PRTIN; /* Print flag*/
  VPOAIT02.PG1SC4CD = "*";
                                   /* Scheduler specialty code*/
  PCYREC.PCYFUNC = "S4"; /* Function*/
  PCYREC.PCYFRDT = PB0CW01.ZZZSDT[1]; /* From PO ID*/
  PCYREC.PCYTODT = PB0CW01.ZZZSDT[2]; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0CS13(); /* Fetch first P.O. item audit*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOAIT02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKA3 = VPOAIT02.SY1STNBR; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAIT02.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS12

// Fetch Next (N4) - VPOAIT01
Function PB0CS13()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N4"; /* Function*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PB0CW00.PB0CWMEM[2] = VPOAIT02.PCJMEMO;
      PB0CW00.PB0CWMDT[2] = VPOAIT02.PCJMEMDT;
      PB0CW00.PB0CWMTM[2] = VPOAIT02.PCJMEMTM;

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0CW00.PB0CWAIC = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS13"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKA3 = VPOAIT02.SY1STNBR; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAIT02.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS13

// Update item audit    VPOAIT01
Function PB0CS14()
   /* ------------------------------------------------------------*/
   /* Update the P.O. Item audit table row*/
   /* ------------------------------------------------------------*/

  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOAIT02" ("U ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PB0CW00.XXXPRCNM = "PB0CS14"; /* Process name*/
      converseLib.validationFailed(12); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0CW00.XXXPRCNM = "PB0CS14"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0CS14"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1LOC = "UPDATE ITEM AUDIT ROW";
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAIT02.PCJSEQNO; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAIT02.SY1STNBR; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0CS14 ***********************/
end // end PB0CS14

// Close Cursor (C3) - VPOAHD01
Function PB0CS15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C3";
  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS15"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOAHD02 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS15"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS15

// Close Cursor (C4) - VPOAIT01
Function PB0CS16()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C4"; /* Close cursor*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.XXXPRCNM = "PB0CS16"; /* Module identification*/
  PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOAIT02 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0CS16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
end // end PB0CS16

// Close  (C3) Set       VPOHDR01
Function PB0CS17()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C3";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
  PB0CW00.XXXPRCNM = "PB0CS17"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0CS17"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0CS17 ***********************/
end // end PB0CS17

// Update temporary storage page
Function PB0CS18()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PB0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0CW00.XXXPRCNM = "PB0CS18"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of PB0CS18 ***********************/
end // end PB0CS18

// Read temporary storage page
Function PB0CS19()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0CW02.XXXTSLEN = PB0CW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PB0CW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PB0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0CW00.PB0CWSWM = "1"; /* request for map switch*/
  PB0CW00.XXXPRCNM = "PB0CS19"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of PB0CS19 ***********************/
end // end PB0CS19

// Select (S ) Unique    VPOAHD01
Function PB0CS20()
   /* ------------------------------------------------------------*/
   /* Select the P.O. Header audit table row*/
   /* ------------------------------------------------------------*/

  set VPOAHD02 empty; /* Init Header audit*/
  VPOAHD02.XGPCD = "03"; /* GPC code*/
  VPOAHD02.PO-REG-CD = PB0CW03.PO-REG-CD[PB0CWIX1]; /* PO region*/
  VPOAHD02.PC3PONBR = PB0CW03.PC3PONBR[PB0CWIX1]; /* PO #*/
  VPOAHD02.YOACD = PB0CW03.YOACD[PB0CWIX1]; /* Audit type*/
  VPOAHD02.ZZZSDT = PB0CW03.ZZZSDT[PB0CWIX1]; /* Setup date*/
  VPOAHD02.ZZHHMMSS = PB0CW03.ZZHHMMSS[PB0CWIX1]; /* Set time*/

  try
    call "VPOAHD02" ("S ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PB0CW00.XXXPRCNM = "PB0CS20"; /* Process name*/
      converseLib.validationFailed(12); /* Updated by Another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0CW00.XXXPRCNM = "PB0CS20"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0CS20"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE HEADER AUDIT ROW";
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAHD02.ZZZSDT; /* Key field 3*/
  PB0CW00.PB0CWKN4 = VPOAHD02.ZZHHMMSS; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0CS20 ***********************/
end // end PB0CS20

// Update header audit   VPOAHD01
Function PB0CS21()
   /* ------------------------------------------------------------*/
   /* Update the P.O. Header audit table row*/
   /* ------------------------------------------------------------*/

  VPOAHD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAHD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOAHD02" ("U ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PB0CW00.XXXPRCNM = "PB0CS21"; /* Process name*/
      converseLib.validationFailed(12); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0CW00.XXXPRCNM = "PB0CS21"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0CS21"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  TA1REC.TA1LOC = "UPDATE HEADER AUDIT ROW";
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAHD02.ZZZSDT; /* Key field 3*/
  PB0CW00.PB0CWKN4 = VPOAHD02.ZZHHMMSS; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0CS21 ***********************/
end // end PB0CS21

// Select item audit     VPOAIT01
Function PB0CS22()
   /* ------------------------------------------------------------*/
   /* Select the P.O. Item audit table row*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
                                   /* Init item audit rec*/
  VPOAIT02.XGPCD = "03"; /* GPC code*/
  VPOAIT02.PO-REG-CD = PB0CW03.PO-REG-CD[PB0CWIX1]; /* PO region*/
  VPOAIT02.PC3PONBR = PB0CW03.PC3PONBR[PB0CWIX1]; /* PO #*/
  VPOAIT02.PCJSEQNO = PB0CW03.PCJSEQNO[PB0CWIX1]; /* audit seq #*/
  VPOAIT02.SY1STNBR = PB0CW03.SY1STNBR[PB0CWIX1]; /* style*/
  VPOAIT02.SY2CLRID = PB0CW03.SY2CLRID[PB0CWIX1]; /* Color*/
  VPOAIT02.XDMCD = PB0CW03.XDMCD[PB0CWIX1]; /* Dimension*/
  VPOAIT02.XQACD = PB0CW03.XQACD[PB0CWIX1]; /* Quality code*/
  VPOAIT02.XOWCD = PB0CW03.XOWCD[PB0CWIX1]; /* Owner group*/
  VPOAIT02.PC2INSEG = PB0CW03.PC2INSEG[PB0CWIX1]; /* Iseg code*/
  VPOAIT02.XPGCD = PB0CW03.XPGCD[PB0CWIX1]; /* Package type*/
  VPOAIT02.XUMCD = PB0CW03.XUMCD[PB0CWIX1]; /* Unit of measure*/
  VPOAIT02.PC6ETSDT = PB0CW03.PC6ETSDT[PB0CWIX1]; /* ETS date*/
  VPOAIT02.YMTCD = PB0CW03.YMTCD[PB0CWIX1]; /* Mode of transport*/
  VPOAIT02.XWHCD = PB0CW03.XWHCD[PB0CWIX1]; /* Warehouse*/
  VPOAIT02.PC2CUXID = PB0CW03.PC2CUXID[PB0CWIX1]; /* Customer*/
  VPOAIT02.PC6OETS = PB0CW03.PC6OETS[PB0CWIX1]; /* OETS date*/
  VPOAIT02.PC6RTADT = PB0CW03.PC6RTADT[PB0CWIX1]; /* RTA date*/
  VPOAIT02.PC6CXNBR = PB0CW03.PC6CXNBR[PB0CWIX1]; /* Cancel version #*/
  VPOAIT02.YOACD = PB0CW03.YOACD[PB0CWIX1]; /* Audit type*/
  VPOAIT02.ZZZSDT = PB0CW03.ZZZSDT[PB0CWIX1]; /* Setup date*/
  VPOAIT02.ZZHHMMSS = PB0CW03.ZZHHMMSS[PB0CWIX1]; /* Setup time*/
  try
    call "VPOAIT02" ("S ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PB0CW00.XXXPRCNM = "PB0CS22"; /* Process name*/
      converseLib.validationFailed(12); /* Updated by Another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PB0CW00.XXXPRCNM = "PB0CS22"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0CS22"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ITEM AUDIT ROW";
  PB0CW00.TA1TBLKE = " "; /* Initialize work key*/
  PB0CW00.PB0CWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PB0CW00.PB0CWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PB0CW00.PB0CWKN3 = VPOAIT02.PCJSEQNO; /* Key field 3*/
  PB0CW00.PB0CWKA4 = VPOAIT02.SY1STNBR; /* Key field 4*/
  TA1REC.TA1TBLKE = PB0CW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PB0CS22 ***********************/
end // end PB0CS22

// Select (S ) Unique    VFCTY001
Function PB0CS24()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0CW00.XXXPRCNM = "PB0CS24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0CS24 ***********************/
end // end PB0CS24

// Select (S ) Unique    VFDOFC02
Function PB0CS25()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0CW00.XXXPRCNM = "PB0CS25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0CW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0CS25 ***********************/
end // end PB0CS25

//*** RECORD=PB0CW00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -W.S. date fields
//    -W.S. JCL execute statement
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PB0CW00 type basicRecord
  10 PB0CWKEY PB0CWKEY ; 
    15 PB0CWKY1 PB0CWKY1 ; 
    15 PB0CWKY2 PB0CWKY2 ; 
  10 PB0CWRTM PB0CWRTM ; 
    15 * char(3) ; 
    15 PB0CWRHH PB0CWRHH ; 
    15 PB0CWRMM PB0CWRMM ; 
    15 PB0CWRSS PB0CWRSS ; 
  10 PB0CWTME PB0CWTME ; 
    15 PB0CWMHH PB0CWMHH ; 
    15 PB0CWMCL PB0CWMCL ; 
    15 PB0CWMMM PB0CWMMM ; 
  10 PB0CWDTE PB0CWDTE ; 
  10 PC2CUXID PC2CUXID ; 
  10 XWHCD XWHCD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC4PONBR PC4PONBR ; 
  10 PCJMEMDT PCJMEMDT ; 
  10 PCJMEMTM PCJMEMTM ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZHHMMSS ZZHHMMSS ; 
  10 PB0CWSWR PB0CWSWR ; 
  10 PB0CWZFL PB0CWZFL ; 
  10 PB0CWVFL PB0CWVFL ; 
  10 PB0CWPFL PB0CWPFL ; 
  10 PB0CWSEC PB0CWSEC ; 
  10 PB0CWSWM PB0CWSWM ; 
  10 PB0CWSWU PB0CWSWU ; 
  10 PB0CWSWC PB0CWSWC ; 
  10 PB0CWSWF PB0CWSWF ; 
  10 PB0CWSWT PB0CWSWT ; 
  10 PB0CWAHC PB0CWAHC ; 
  10 PB0CWAIC PB0CWAIC ; 
  10 PB0CWXIT PB0CWXIT ; 
  10 PB0CWMOD PB0CWMOD ; 
  10 PB0CWDFL PB0CWDFL ; 
  10 TA6SUBSW TA6SUBSW ; 
  10 * char(1) ; 
  10 PB0CWIXM PB0CWIXM ; 
  10 PB0CWIXT PB0CWIXT ; 
  10 PB0CWIX1 PB0CWIX1 ; 
  10 PB0CWIXX PB0CWIXX ; 
  10 PB0CW-SAV-IDX PB0CW-SAV-IDX ; 
  10 * char(1) ; 
  10 PB0CWCTR PB0CWCTR ; 
  10 PB0CWCTR1 PB0CWCTR1 ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PB0CWPAG PB0CWPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * char(1) ; 
  10 PC3POIDT PC3POIDT ; 
  10 PB0CMSEL PB0CMSEL ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SY2CLRID SY2CLRID ; 
  10 * char(1) ; 
  10 TA2GRGG TA2GRGG ; 
    15 PB0CMPCC PB0CMPCC ; 
    15 PB0CMPYR PB0CMPYR ; 
    15 PB0CMPMO PB0CMPMO ; 
    15 PB0CMPDM PB0CMPDM ; 
  10 * char(1) ; 
  10 PB0CWDT PB0CWDT ; 
    15 PB0CWMM PB0CWMM ; 
    15 PB0CWDD PB0CWDD ; 
    15 PB0CWYY PB0CWYY ; 
  10 * char(1) ; 
  10 PB0CWDT1 PB0CWDT1 ; 
    15 PB0CWYY1 PB0CWYY1 ; 
    15 PB0CWMM1 PB0CWMM1 ; 
    15 PB0CWDD1 PB0CWDD1 ; 
  10 * char(1) ; 
  10 PB0CWMMA PB0CWMMA ; 
    15 PB0CWMMN PB0CWMMN ; 
  10 * char(1) ; 
  10 PB0CWWSA PB0CWWSA ; 
    15 PB0CWWSN PB0CWWSN ; 
  10 * char(1) ; 
  10 PB0CWMSG PB0CWMSG ; 
    15 PB0CWMS1 PB0CWMS1 ; 
    15 PB0CWMS2 PB0CWMS2 ; 
    15 PB0CWMS3 PB0CWMS3 ; 
  10 * char(4) ; 
  10 PB0CWJCE PB0CWJCE ; 
    15 PB0CWEX1 PB0CWEX1 ; 
    15 PB0CWPNM PB0CWPNM ; 
    15 PB0CWEX2 PB0CWEX2 ; 
    15 * char(58) ; 
  10 PB0CWJCJ PB0CWJCJ ; 
    15 PB0CWJB1 PB0CWJB1 ; 
    15 PB0CWJNM PB0CWJNM ; 
    15 PB0CWJB2 PB0CWJB2 ; 
    15 PB0CWTYP PB0CWTYP ; 
    15 PB0CWJB3 PB0CWJB3 ; 
    15 * char(34) ; 
  10 PB0CWJCO PB0CWJCO ; 
    15 PB0CWFRM PB0CWFRM ; 
      20 PB0CWFR1 PB0CWFR1 ; 
      20 PB0CWFM1 PB0CWFM1 ; 
      20 PB0CWFR2 PB0CWFR2 ; 
      20 PB0CWFM2 PB0CWFM2 ; 
      20 PB0CWFR3 PB0CWFR3 ; 
    15 PB0CWDST PB0CWDST ; 
    15 * char(35) ; 
  10 PB0CWJCD PB0CWJCD ; 
    15 PB0CWLN1 PB0CWLN1 ; 
    15 PB0CWRMT PB0CWRMT ; 
    15 PB0CWLN2 PB0CWLN2 ; 
    15 * char(24) ; 
  10 PB0CWAJCD PB0CWAJCD ; 
    15 PB0CWALN1 PB0CWALN1 ; 
    15 PB0CWARMT PB0CWARMT ; 
    15 PB0CWALN2 PB0CWALN2 ; 
  10 PB0CWLN18 PB0CWLN18 ; 
  10 PB0CWLN19 PB0CWLN19 ; 
  10 PB0CWLN20 PB0CWLN20 ; 
  10 PB0CWLN21 PB0CWLN21 ; 
  10 PB0CWLN3 PB0CWLN3 ; 
    15 PB0CWLN4 PB0CWLN4 ; 
    15 * char(23) ; 
  10 PB0CWLN22 PB0CWLN22 ; 
  10 PB0CWLN23 PB0CWLN23 ; 
  10 PB0CWLN24 PB0CWLN24 ; 
  10 PB0CWLN25 PB0CWLN25 ; 
  10 PB0CWLN26 PB0CWLN26 ; 
  10 PB0CWLN27 PB0CWLN27 ; 
  10 PB0CWLN28 PB0CWLN28 ; 
  10 PB0CWLN29 PB0CWLN29 ; 
  10 PB0CWLN30 PB0CWLN30 ; 
  10 PB0CWLN35 PB0CWLN35 ; 
  10 PB0CWLN36 PB0CWLN36 ; 
  10 PB0CWLN5 PB0CWLN5 ; 
  10 PB0CWLN6 PB0CWLN6 ; 
  10 PB0CWLN13 PB0CWLN13 ; 
  10 PB0CWLN14 PB0CWLN14 ; 
  10 PB0CWLN15 PB0CWLN15 ; 
  10 PB0CWLN16 PB0CWLN16 ; 
  10 PB0CWLN7 PB0CWLN7 ; 
  10 PB0CWLN8 PB0CWLN8 ; 
  10 PB0CWLN9 PB0CWLN9 ; 
  10 PB0CWLN10 PB0CWLN10 ; 
  10 PB0CWJCD2 PB0CWJCD2 ; 
    15 PB0CWLN11 PB0CWLN11 ; 
    15 PB0CWRMT2 PB0CWRMT2 ; 
    15 PB0CWLN12 PB0CWLN12 ; 
  10 PB0CWLN31 PB0CWLN31 ; 
  10 PB0CWLN32 PB0CWLN32 ; 
  10 PB0CWJCD3 PB0CWJCD3 ; 
    15 PB0CWLN33 PB0CWLN33 ; 
    15 PB0CWRMT3 PB0CWRMT3 ; 
    15 PB0CWLN34 PB0CWLN34 ; 
  10 PB0CWSRT PB0CWSRT [2] ; 
    15 PB0CWMEM PB0CWMEM ; 
    15 PB0CWMDT PB0CWMDT ; 
    15 PB0CWMTM PB0CWMTM ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PB0CWKA1 PB0CWKA1 ; 
      20 PB0CWKN1 PB0CWKN1 ; 
      20 * char(1) ; 
    15 PB0CWKA2 PB0CWKA2 ; 
      20 PB0CWKN2 PB0CWKN2 ; 
      20 * char(1) ; 
    15 PB0CWKA3 PB0CWKA3 ; 
      20 PB0CWKN3 PB0CWKN3 ; 
      20 * char(1) ; 
    15 PB0CWKA4 PB0CWKA4 ; 
      20 PB0CWKN4 PB0CWKN4 ; 
      20 * char(1) ; 
  10 PB0CWRMT4 PB0CWRMT4 ; 
end // end PB0CW00

//*** RECORD=PB0CW01 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PB0CM.PB0CM001
// 
//    RECORD NAME:      PB0CW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list map.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list map PB0CM002.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PB0CW01 type basicRecord
  10 PG1SC4CD PG1SC4CD ; 
  10 CAUSERID CAUSERID ; 
  10 PC3PONBR PC3PONBR ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3POIDT PC3POIDT ; 
  10 PB0CWHGH PB0CWHGH ; 
  10 PB0CWLOW PB0CWLOW ; 
  10 TA2GRGE TA2GRGE ; 
    15 PB0CMPYR PB0CMPYR ; 
    15 PB0CMPMO PB0CMPMO ; 
    15 PB0CMPDM PB0CMPDM ; 
  10 PCFSECD PCFSECD ; 
  10 PCFBUYMO PCFBUYMO ; 
  10 PB0CWYR1 PB0CWYR1 ; 
  10 PB0CWYR2 PB0CWYR2 ; 
  10 PB0CWMO1 PB0CWMO1 ; 
  10 PB0CWMO2 PB0CWMO2 ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 XSECD XSECD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC3PRTIN PC3PRTIN ; 
  10 ZZZCHGDT ZZZCHGDT [2] ; 
  10 ZZZSDT ZZZSDT [2] ; 
end // end PB0CW01

//*** RECORD=PB0CW02 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **                   LIST SCREEN                          **
// **                                                        **
// 
//            MAP:      PB0CM.PB0CM002
// 
//    RECORD NAME:      PB0CW02
// 
//       This record is a working storage record to load and
//    extract data for the list screen to and from temporary
//    storage.
//       It holds information that was selected by entering
//    selection criteria from the selection map and is the
//    the source for loading the pass record to the Batch
//    programs.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PB0CW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PB0CWRC2 PB0CWRC2 [13] ; 
    10 PB0CMSEL PB0CMSEL ; 
    10 PB0CWPRM PB0CWPRM ; 
      15 PC3PONBR PC3PONBR ; 
      15 PCJSEQNO PCJSEQNO ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 PC6ETSDT PC6ETSDT ; 
      15 PC6OETS PC6OETS ; 
      15 PC6RTADT PC6RTADT ; 
      15 YMTCD YMTCD ; 
      15 PC6CXNBR PC6CXNBR ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 YOACD YOACD ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZHHMMSS ZZHHMMSS ; 
      15 PO-REG-CD PO-REG-CD ; 
    10 PB0CWCST PB0CWCST ; 
    10 PB0CWWHS PB0CWWHS ; 
    10 YOASDESC YOASDESC ; 
    10 PCJMEMDT PCJMEMDT ; 
    10 PCJMEMTM PCJMEMTM ; 
    10 PB0CMSDT PB0CMSDT ; 
    10 PB0CMSTM PB0CMSTM ; 
    10 PB0CMPST PB0CMPST ; 
    10 PB0CMPDT PB0CMPDT ; 
    10 PB0CMPTM PB0CMPTM ; 
end // end PB0CW02

//*** RECORD=PB0CW03 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **              BATCH PARAMETER RECORD                    **
// **                                                        **
// 
//    RECORD NAME:      PB0CW03
// 
//       This record is a working storage record to format a
//    parameter record to submit to the batch print program.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PB0CW03 type basicRecord
  10 PB0CWPRM PB0CWPRM [365] ; 
    15 PC3PONBR PC3PONBR ; 
    15 PCJSEQNO PCJSEQNO ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 PC6ETSDT PC6ETSDT ; 
    15 PC6OETS PC6OETS ; 
    15 PC6RTADT PC6RTADT ; 
    15 YMTCD YMTCD ; 
    15 PC6CXNBR PC6CXNBR ; 
    15 XWHCD XWHCD ; 
    15 PC2CUXID PC2CUXID ; 
    15 YOACD YOACD ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZHHMMSS ZZHHMMSS ; 
    15 PO-REG-CD PO-REG-CD ; 
  10 PB0CWCST PB0CWCST [365] ; 
  10 PB0CWWHS PB0CWWHS [365] ; 
  10 PB0CWUPD PB0CWUPD [365] ; 
end // end PB0CW03

// P.O. ID Production century
DataItem PB0CMPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PB0CMPDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print date
DataItem PB0CMPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Month
DataItem PB0CMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print status
DataItem PB0CMPST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print time
DataItem PB0CMPTM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Year
DataItem PB0CMPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// set up date
DataItem PB0CMSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved Print request sel. field
DataItem PB0CMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up time
DataItem PB0CMSTM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// ws for temp save of TA6INDEX
DataItem PB0CW-SAV-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file VPOAHD01
DataItem PB0CWAHC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file VPOAIT01
DataItem PB0CWAIC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWAJCD char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWALN1 char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWALN2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWARMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new customer name
DataItem PB0CWCST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for # of DD * cards
DataItem PB0CWCTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter for # of DD * cards
DataItem PB0CWCTR1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date day map display
DataItem PB0CWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. date day
DataItem PB0CWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delete selection flag
DataItem PB0CWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'copies=,dest=' literal
DataItem PB0CWDST char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date (MMDDYY)
DataItem PB0CWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. date field (CCYYMMDD)
DataItem PB0CWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work save date
DataItem PB0CWDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Execute statement constants 1
DataItem PB0CWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants 2
DataItem PB0CWEX2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code
DataItem PB0CWFM1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code
DataItem PB0CWFM2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 1
DataItem PB0CWFR1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 2
DataItem PB0CWFR2 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 3
DataItem PB0CWFR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'forms=pc14,' format line
DataItem PB0CWFRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG High date
DataItem PB0CWHGH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp use
DataItem PB0CWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map/T.S. fields
DataItem PB0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for JCL Table
DataItem PB0CWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp use
DataItem PB0CWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job literal "//"
DataItem PB0CWJB1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job literal desc
DataItem PB0CWJB2 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job literal ")  ',"
DataItem PB0CWJB3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report destination card
DataItem PB0CWJCD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWJCD2 char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWJCD3 char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement group
DataItem PB0CWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job card statment group
DataItem PB0CWJCJ char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output card statment group
DataItem PB0CWJCO char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job name
DataItem PB0CWJNM char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key char
DataItem PB0CWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of error key char
DataItem PB0CWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of error key char
DataItem PB0CWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of error key char
DataItem PB0CWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Redifine table key values
DataItem PB0CWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key num
DataItem PB0CWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of error key num
DataItem PB0CWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of error key num
DataItem PB0CWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of error key num
DataItem PB0CWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table key value 1
DataItem PB0CWKY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table key value 2
DataItem PB0CWKY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 1
DataItem PB0CWLN1 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN10 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN11 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN12 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN13 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN14 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN15 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN16 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN18 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN19 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 2
DataItem PB0CWLN2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN20 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN21 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN22 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN23 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN24 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN25 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN26 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN27 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN28 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN29 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN30 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN31 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN32 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN33 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN34 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN35 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN36 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN4 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN5 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN7 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN8 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWLN9 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG Low  date
DataItem PB0CWLOW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Colon
DataItem PB0CWMCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_CMEMO_PRT_DT sort key
DataItem PB0CWMDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_MEMO_NBR_PRT_FL sort key
DataItem PB0CWMEM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours
DataItem PB0CWMHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date month map display
DataItem PB0CWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. date month
DataItem PB0CWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char.   data form month
DataItem PB0CWMMA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minutes
DataItem PB0CWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric data form month
DataItem PB0CWMMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_BUY_MO wk field1
DataItem PB0CWMO1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_BUY_MO wk field2
DataItem PB0CWMO2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PB0CWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 1 (--)
DataItem PB0CWMS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 2 (# of jobs)
DataItem PB0CWMS2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 3 (message text)
DataItem PB0CWMS3 char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message W.S. Area
DataItem PB0CWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_CMEMO_PRT_HHMM sort key
DataItem PB0CWMTM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save Current T.S. page
DataItem PB0CWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// G or P print flag
DataItem PB0CWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem PB0CWPNM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Batch group level record
DataItem PB0CWPRM char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level array
DataItem PB0CWRC2 char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours
DataItem PB0CWRHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minutes
DataItem PB0CWRMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rmt printer number
DataItem PB0CWRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWRMT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0CWRMT3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rmt printer number
DataItem PB0CWRMT4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Seconds
DataItem PB0CWRSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformating field for time
DataItem PB0CWRTM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Security for userid change
DataItem PB0CWSEC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort key for hdr & itm audits
DataItem PB0CWSRT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PB0CWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PB0CWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PB0CWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PB0CWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update  for data switch (T.S.)
DataItem PB0CWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformated field for time
DataItem PB0CWTME char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO type
DataItem PB0CWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update audit record flag
DataItem PB0CWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print request switch
DataItem PB0CWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new warehouse
DataItem PB0CWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char.   W.S.
DataItem PB0CWWSA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric W.S.
DataItem PB0CWWSN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0CWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc_po_id_buy_yr wk field1
DataItem PB0CWYR1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pc_po_id_buy_yr wk field2
DataItem PB0CWYR2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date year map display
DataItem PB0CWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. PC_SESN_YR
DataItem PB0CWYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Printed message exists
DataItem PB0CWZFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PC4PONBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

