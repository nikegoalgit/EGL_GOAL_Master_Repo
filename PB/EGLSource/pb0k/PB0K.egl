package pb0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PB0K ****
// This program will allow the user to inquire/maintain
// p.o. itm special instruction information. The database
// will return 0 to n rows based upon the selection criteria.
// This program will format the screen with the data returned
// from the database.
// 
// This program enables the user to inquiry, add, change, or
// delete p.o. itm special instruction rows.
// 
//   A user may add new rows by pressing PF13 from the list
// screen (blank or filled with rows).  This will position
// them in an ADD screen.  A row can then be added ( if
// entries pass edit criteria) by pressing ENTER.  The user
// may continue adding or exit to the list screen.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(non-key data only)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
//   A user may select one or more rows for delete and press
// PF15.  The user will then be positioned in an DELETE
// screen where they will hit enter to confrim delete and
// cycle to the next row selected, or, PF3 to return to the
// list screen.
// 
//   A user can select Nike special instruction rows
// for adding to the customer/style special instructions table
// By pressing pf16 from the list screen. They will then be
// sent to map 3 where they can select a row to add. After
// pressing enter, they will be sent to the regular add screen
// where they can modify either the text or the key informtion.
// after pressing enter from here, the row(s) will be added
// to the table.
// ;
// -------   --------  ------   ------------------------------
// control     date     name    description
// -------   --------  ------   -------------------------------
//           08/20/92  GAMEN    Created Application
// YR2000    10/30/97  rgilli   Y2K MODIFICATIONS MADE TO:
//                              PB0KM001: Add 0 fill to po yr
//                              PB0KM002: Add 0 fill to po yr
//                              PB0KM003: Add 0 fill to po yr
//                              PB0K-15400: Remove 00 year edit
//                              PB0K-25400: Remove 00 year edit
// pcf999    05/07/98  jniese   changed so to proper lengths.
// *********************
Program PB0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KUNREC KUNREC; // record
  OP1REC OP1REC; // record
  PB0KW00 PB0KW00; // record
  PB0KW01 PB0KW01; // record
  PB0KW03 PB0KW03; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCAREC PCAREC; // record
  PCBREC PCBREC; // record
  PCDREC PCDREC; // record
  PCWREC PCWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSTYSI01 VSTYSI01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use PB0KM.PB0KM001,  // forms
      PB0KM.PB0KM002, 
      PB0KM.PB0KM003, 
      PB0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PB0K-00001;

    PB0K-00001: PB0K-00001();

    goto PB0K-00002;
    PB0K-00002: PB0K-00002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PB0K-00002;

  end // end main
end // end PB0K

// Additional Initialization
Function PB0K-00001()
   /* ------------------------------------------------------------*/
   /* check commarea security fields*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.XGPCD != "02")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PB0KW00 empty;
  set PB0KW01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set VSTYSI01 empty;
  set PC2REC empty;
  set PC4REC empty;
  set PCAREC empty;
  set PCBREC empty;
  set PCDREC empty;
  set PG2REC empty;
  set FY1REC empty;
  set OP1REC empty;
  set KUNREC empty;

  set PB0KM001 initial;
  set PB0KM002 initial;
  set PB0KM003 initial;

  PB0KW00.XGPCD = COMMAREA.XGPCD;
  PB0KM001.XGPCD = COMMAREA.XGPCD;
  if (COMMAREA.XGPCD in XGPTBL.XGPCD)
    PB0KW00.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end
  PB0KM001.XGPDESC = PB0KW00.XGPDESC;
  PB0KW00.XXXSTAT = "A";
  PB0KM001.XXXSTAT = "A";
  set PB0KM001.YSMXDV cursor;
  PB0KW00.PB0KW-MAP = "1"; /* init to map 1*/
  PB0KW00.PB0KW-SWR = "Y"; /* init request for data switch*/
  PB0KW00.PB0KW-SWF = "Y"; /* init request for data switch*/
  COMMAREA.CATOAP = " "; /* init application field*/
  COMMAREA.CAITEM = " "; /* init item information*/
  PB0KW00.XXXTSLEN = 803;

  if (COMMAREA.CAILVL[5] == "Y") /* =======>Authorized for DIV 20 only*/
    PB0KM001.YSMXDV = "20"; /* division code*/
    PB0KW00.YSMXDV = "20"; /* division code*/
  else
    PB0KM001.YSMXDV = "10"; /* division code*/
    PB0KW00.YSMXDV = "10"; /* division code*/
  end

end // end PB0K-00001

// cust/style spec instr maint
Function PB0K-00002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-MAP == "1") /* Map 1 was requested*/
    PB0K-10000(); /* Display list screen*/
  end

  if (PB0KW00.PB0KW-MAP == "2" /* Map 2 was requested*/
   && PB0KW00.PB0KW-FSW == "A") /* and ADD function*/
    PB0K-20000(); /* Display Location Add Map*/
  end

  if (PB0KW00.PB0KW-MAP == "2") /* Map 2 was selected*/
    if (PB0KW00.PB0KW-FSW == "I" /* and INQUIRE function*/
     || PB0KW00.PB0KW-FSW == "C" /* and CHANGE function*/
     || PB0KW00.PB0KW-FSW == "D") /* and DELETE function*/

      PB0KW00.PB0KW-IXM = 1; /* Initialize index*/

      while (PB0KW00.PB0KW-IXM <= 11 /* Until end of page*/
       && PB0KW00.PB0KW-MAP == "2") /* and map 2*/
        if (PB0KM001.PB0KM-SEL[PB0KW-IXM] == "S") /* If line selected*/
          PB0K-30000(); /* Display Inquiry Map*/
        end
        PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment index*/
      end
      PB0KW00.PB0KW-MAP = "1"; /* Set map number to 1*/
    end
  end

  if (PB0KW00.PB0KW-MAP == "3") /* Map 3 was selected*/
    PB0K-40000(); /* Display Nike selection Map*/
  end

  if (PB0KW00.PB0KW-MAP == "1"
   || PB0KW00.PB0KW-MAP == "2"
   || PB0KW00.PB0KW-MAP == "3")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "00002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PB0KW00.PB0KW-MAP; /* Map name*/
    SQLCA.SQLCAREC = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    XSPF4(); /* Exit to Master Menu*/
  end

  if (PB0KW00.PB0KW-MAP == "2")
    if (PB0KW00.PB0KW-FSW == "A"
     || PB0KW00.PB0KW-FSW == "I"
     || PB0KW00.PB0KW-FSW == "C"
     || PB0KW00.PB0KW-FSW == "D")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "00002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PB0KW00.PB0KW-MAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER IS INVALID";

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
      XSPF4(); /* Exit to Master Menu*/
    end
  end


end // end PB0K-00002

// Process List Screen
Function PB0K-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y"
   && converseVar.validationMsgNum == 0)
    PB0K-11000(); /* Obtain the data to display*/
  end

  PB0K-12000(); /* Format and display the map*/

  PB0K-13000(); /* Check attention identifier*/

  PB0K-14000(); /* Reset fields to normal intensity*/

  PB0K-15000(); /* Verify the entered data*/

  PB0K-16000(); /* Process valid input request*/


end // end PB0K-10000

// Obtain data to display
Function PB0K-11000()
   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set to be formatted.*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PB0K-11100(); /* Purge any temporary storage*/

  set VSTYSI01 empty; /* Clear spcl inst record*/

  PB0K-11200(); /* Set up key information*/

  PB0K-11300(); /* Select set and open the cursor*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize display line number*/
  PB0KW00.PB0KW-EOC = "N"; /* Initialize end of file switch*/

  PB0K-11400(); /* Fetch next row*/

  while (PB0KW00.PB0KW-EOC == "N") /* Until end of set or problem found*/

    if (PB0KW00.PB0KW-IXM > 11) /* Page is not full*/
      PB0K-11600(); /* Add page to temporary storage*/
    end

    PB0K-11500(); /* Save data in temp storage record*/

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1;

    PB0K-11400(); /* Fetch next row*/

  end

  PB0K-11700(); /* Close the selected set cursor*/

  if (PB0KW00.PB0KW-IXM > 1) /* and some of the page was formatted*/
    PB0K-11600(); /* Add page to temporary storage*/
    PB0KW00.PB0KW-SWR = "N"; /* Request for data completed*/
  end

  PB0KW00.XXXTSPAG = 1; /* Initialize page number*/

  if (PB0KW00.TA5TSQIX == 0) /* No data to display*/
    PB0KW00.XXXTSPAG = 0; /* Initialize page number*/
    PB0KM001.XXXPRCNM = "11000"; /* Process name*/
    set PB0KM001.YSMXDV cursor; /* Position crsr at division*/
    set VSTYSI01 empty; /* Clear factory record*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

  end

end // end PB0K-11000

// Purge any temporary storage
Function PB0K-11100()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  set PB0KW01 empty; /* Clear map working storage.*/



  TA5REC.TA5TSQIX = 0;
  PB0KW00.TA5TSQIX = 0;

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PB0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temp Storage*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* Error was found*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PB0K-11100

// Format VSTYSI01 with key data
Function PB0K-11200()
  /* ---------------------------------------------------------;*/
  /* Format the db2 record with the entered data on map 1     ;*/
  /* ---------------------------------------------------------;*/

  VSTYSI01.XGPCD = PB0KW00.XGPCD; /* Gpc code*/
  VSTYSI01.YSMXDV = PB0KW00.YSMXDV; /* Division code*/

  if (PB0KW00.PC3POIDT > 0)
    VSTYSI01.PC3POIDT = PB0KW00.PC3POIDT; /* P.O. id month range*/
  else
    VSTYSI01.PC3POIDT = -1; /* P.O. id month range*/
  end

  if (PB0KW00.PC4ORTYP > " ")
    VSTYSI01.PC4ORTYP = PB0KW00.PC4ORTYP; /* P.O. type code*/
  else
    VSTYSI01.PC4ORTYP = "*"; /* P.O. type code*/
  end

  if (PB0KW00.FY1FCTYC > " ")
    VSTYSI01.FY1FCTYC = PB0KW00.FY1FCTYC; /* Factory*/
  else
    VSTYSI01.FY1FCTYC = "*"; /* Factory*/
  end

  if (PB0KW00.SY1STNBR > " ")
    VSTYSI01.SY1STNBR = PB0KW00.SY1STNBR; /* Style*/
  else
    VSTYSI01.SY1STNBR = "*"; /* Style*/
  end

  if (PB0KW00.SY2CLRID > " ")
    VSTYSI01.SY2CLRID = PB0KW00.SY2CLRID; /* color*/
  else
    VSTYSI01.SY2CLRID = "*"; /* color*/
  end

  if (PB0KW00.XDMCD > " ")
    VSTYSI01.XDMCD = PB0KW00.XDMCD; /* Dimension code*/
  else
    VSTYSI01.XDMCD = "*"; /* Dimension code*/
  end

  if (PB0KW00.XPRCD > " ")
    VSTYSI01.XPRCD = PB0KW00.XPRCD; /* Product type code*/
  else
    VSTYSI01.XPRCD = "*"; /* Product type code*/
  end

  if (PB0KW00.XPLCD > " ")
    VSTYSI01.XPLCD = PB0KW00.XPLCD; /* Product line code*/
  else
    VSTYSI01.XPLCD = "*"; /* Product line code*/
  end

  if (PB0KW00.XPCCD > " ")
    VSTYSI01.XPCCD = PB0KW00.XPCCD; /* Product category code*/
  else
    VSTYSI01.XPCCD = "*"; /* Product category code*/
  end

  if (PB0KW00.PC6XCTCD > " ")
    VSTYSI01.PC6XCTCD = PB0KW00.PC6XCTCD; /* Destination country*/
  else
    VSTYSI01.PC6XCTCD = "*"; /* Destination country*/
  end

  if (PB0KW00.XCTCD > " ")
    VSTYSI01.XCTCD = PB0KW00.XCTCD; /* Manufacturing country*/
  else
    VSTYSI01.XCTCD = "*"; /* Manufacturing country*/
  end

  if (PB0KW00.PC2CUXID > " ")
    VSTYSI01.PC2CUXID = PB0KW00.PC2CUXID; /* Cust xref*/
  else
    VSTYSI01.PC2CUXID = "*"; /* Cust xref*/
  end

  if (PB0KW00.KUCCOID > 0)
    VSTYSI01.KUCCOID = PB0KW00.KUCCOID; /* Customer number*/
  else
    VSTYSI01.KUCCOID = -1; /* Customer number*/
  end

  if (PB0KW00.KUMSTRID > 0)
    VSTYSI01.KUMSTRID = PB0KW00.KUMSTRID; /* Customer number*/
  else
    VSTYSI01.KUMSTRID = -1; /* Customer number*/
  end

  if (PB0KW00.XNXCD > 0)
    VSTYSI01.XNXCD = PB0KW00.XNXCD; /* Department number*/
  else
    VSTYSI01.XNXCD = -1; /* Department number*/
  end

  if (PB0KW00.OP1CUOID > 0)
    VSTYSI01.OP1CUOID = PB0KW00.OP1CUOID; /* Order number*/
  else
    VSTYSI01.OP1CUOID = -1; /* Order number*/
  end

  if (PB0KW00.OP1NORID > 0)
    VSTYSI01.OP1NORID = PB0KW00.OP1NORID; /* Nike order number*/
  else
    VSTYSI01.OP1NORID = -1; /* Nike order number*/
  end

  if (PB0KW00.XXXSTAT > " ")
    VSTYSI01.XXXSTAT = PB0KW00.XXXSTAT; /* Status*/
  else
    VSTYSI01.XXXSTAT = "*"; /* Status*/
  end


end // end PB0K-11200

// Select Set VSTYSI01
Function PB0K-11300()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("S1", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "11300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VSTYSI01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSTYSI01.VSTYSI01-GROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-11300

// Fetch Next VSTYSI01
Function PB0K-11400()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VSTYSI01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("N1", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0KW00.PB0KW-EOC = "Y"; /* Indicate  end of cursor*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "11400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VSTYSI01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSTYSI01.VSTYSI01-GROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-11400

// Format temp storage record
Function PB0K-11500()
  /* ---------------------------------------------------------;*/
  /* Format the db2 record with the entered data on map 1     ;*/
  /* ---------------------------------------------------------;*/

  PB0KW01.PCASINBR[PB0KW-IXM] = VSTYSI01.PCASINBR; /* Spcl inst nbr*/
  PB0KW00.PB0KW-CUST-STOR-DEPT = " ";
  PB0KW01.PB0KM-CUS[PB0KW-IXM] = " ";
  if (VSTYSI01.PC2CUXID > " ") /* Cust xref*/
    PB0KW01.PB0KM-CUS[PB0KW-IXM] = VSTYSI01.PC2CUXID; /* Cust xref*/
  else
    if (VSTYSI01.KUCCOID > 0) /* Customer*/
      if (VSTYSI01.KUCCOID > 0  /* Customer*/
       && VSTYSI01.KUMSTRID > 0 /* Store*/
       && VSTYSI01.XNXCD > 0)   /* Dept*/
        PB0KW00.PB0KW-CUST-NBR = VSTYSI01.KUCCOID;
        PB0KW00.PB0KW-DOT-1 = ".";
        PB0KW00.PB0KW-STOR-NBR = VSTYSI01.KUMSTRID;
        PB0KW00.PB0KW-DOT-2 = ".";
        PB0KW00.PB0KW-DEPT-NBR = VSTYSI01.XNXCD;
      else
        if (VSTYSI01.KUCCOID > 0 /* Customer*/
         && VSTYSI01.KUMSTRID > 0) /* Store*/
          PB0KW00.PB0KW-CUST-NBR = VSTYSI01.KUCCOID;
          PB0KW00.PB0KW-DOT-1 = ".";
          PB0KW00.PB0KW-STOR-NBR = VSTYSI01.KUMSTRID;
          PB0KW00.PB0KW-DOT-2 = " ";
        else
          PB0KW00.PB0KW-CUST-NBR = VSTYSI01.KUCCOID;
          PB0KW00.PB0KW-DOT-1 = " ";
          PB0KW00.PB0KW-DOT-2 = " ";
        end
      end
      PB0KW01.PB0KM-CUS[PB0KW-IXM] = PB0KW00.PB0KW-CUST-STOR-DEPT;
    end
  end
  PB0KW01.PB0KM-STY[PB0KW-IXM] = VSTYSI01.SY1STNBR; /* Style*/
  PB0KW01.PB0KM-CLR[PB0KW-IXM] = VSTYSI01.SY2CLRID; /* color*/
  PB0KW01.PB0KM-DIM[PB0KW-IXM] = VSTYSI01.XDMCD; /* Dimension code*/
  PB0KW01.PB0KM-TYP[PB0KW-IXM] = VSTYSI01.PC4ORTYP; /* P.O. type code*/
  PB0KW01.PB0KM-DST[PB0KW-IXM] = VSTYSI01.PC6XCTCD; /* Dest ctry*/
  PB0KW01.PB0KM-MFG[PB0KW-IXM] = VSTYSI01.XCTCD; /* Mfg ctry*/
  if (VSTYSI01.OP1CUOID > 0) /* Order nbr exists*/
    PB0KW00.PB0KW-ORD-ID = VSTYSI01.OP1CUOID; /* Reformat order nbr*/
    PB0KW00.PB0KW-ORD-DOT = "."; /**/
    PB0KW00.PB0KW-NIKE-ID = VSTYSI01.OP1NORID; /**/
    PB0KW01.PB0KM-ORD[PB0KW-IXM] = PB0KW00.PB0KW-SALES-ORD-ID; /* s.o.*/
  else
    PB0KW01.PB0KM-ORD[PB0KW-IXM] = " "; /* s.o.*/
  end
  PB0KW01.PB0KM-STA[PB0KW-IXM] = VSTYSI01.XXXSTAT; /* Spcl inst desc*/
  PB0KW01.PB0KM-DSC[PB0KW-IXM] = VSTYSI01.PCASIDSC; /* Spcl inst desc*/
end // end PB0K-11500

// Add page to temp storage
Function PB0K-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  PB0KW01.XXXTSLEN = PB0KW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PB0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0KW01 empty; /* M001 display storage*/

    PB0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PB0KW00.PB0KW-IXM = 1; /* Line index*/
    TA5REC.TA5TSQIX = 0;

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-11600

// Close Set VSTYSI01
Function PB0K-11700()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("C1", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "11700"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSTYSI01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-11700

// Format and display the map
Function PB0K-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PB0KW00.PB0KW-SWF == "Y") /* Map must be formatted*/

      PB0K-12100(); /* Format the data on the map*/

    end
  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PCWREC.XXXMSGNO != 0) /* Message to display*/

      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end /* Message number*/

    else

      PB0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PB0KM001.XXXPRCNM = PB0KW00.XXXPRCNM; /* Module identification*/

    set PB0KM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0KM001 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PB0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0KM001.CAITEM; /* Application data*/

end // end PB0K-12000

// Format the selected data
Function PB0K-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PB0KM001 initial; /* M001 input/output area*/

  PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

  if (COMMAREA.CACHGFL == "Y")
    set PB0KM001.PB0KM-CHG bold, skip;
  end

  if (COMMAREA.CADELFL == "Y")
    set PB0KM001.PB0KM-DEL bold, skip;
  end

  if (COMMAREA.CAADDFL == "Y")
    set PB0KM001.PB0KM-ADD bold, skip;
    set PB0KM001.PB0KM-NKE bold, skip;
  end

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  PB0KM001.XGPCD = PB0KW00.XGPCD; /* Gpc code*/
  PB0KM001.XGPDESC = PB0KW00.XGPDESC; /* Gpc description*/
  PB0KM001.XXXSTAT = PB0KW00.XXXSTAT; /* Status*/
  PB0KM001.YSMXDV = PB0KW00.YSMXDV; /* Division*/
  PB0KM001.PC2CUXID = PB0KW00.PC2CUXID; /* Cust xref*/
  PB0KM001.SY1STNBR = PB0KW00.SY1STNBR; /* Style*/
  PB0KM001.SY2CLRID = PB0KW00.SY2CLRID; /* color*/
  PB0KM001.XDMCD = PB0KW00.XDMCD; /* Dimension code*/
  PB0KM001.PC4ORTYP = PB0KW00.PC4ORTYP; /* P.O. type code*/
  PB0KM001.XPRCD = PB0KW00.XPRCD; /* Product type code*/
  PB0KM001.XPCCD = PB0KW00.XPCCD; /* Product category code*/
  PB0KM001.XPLCD = PB0KW00.XPLCD; /* Product line code*/
  PB0KM001.PC6XCTCD = PB0KW00.PC6XCTCD; /* Destination country*/
  PB0KM001.XCTCD = PB0KW00.XCTCD; /* Manufacturing country*/
  PB0KM001.PB0KM-PO-ID-YY = PB0KW00.PB0KM-PO-ID-YY;
  PB0KM001.PB0KM-PO-ID-PM = PB0KW00.PB0KM-PO-ID-PM;
  PB0KM001.PB0KM-PO-ID-DM = PB0KW00.PB0KM-PO-ID-DM;
  PB0KM001.FY1FCTYC = PB0KW00.FY1FCTYC; /* Factory*/
  PB0KM001.OP1CUOID = PB0KW00.OP1CUOID; /* Order number*/
  PB0KM001.OP1NORID = PB0KW00.OP1NORID; /* Nike order number*/
  PB0KM001.KUCCOID = PB0KW00.KUCCOID; /* Customer number*/
  PB0KM001.KUMSTRID = PB0KW00.KUMSTRID; /* Customer number*/
  PB0KM001.XNXCD = PB0KW00.XNXCD; /* Department number*/

  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last changed stat-sfx field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.TA5TSQIX == 0) /* no data read ?*/

    set PB0KM001.YSMXDV cursor; /* Set cursor at division*/
    set PB0KM001.XXXLITPG invisible, skip; /* "PAGE" literal*/
    PB0KM001.XXXTSPAG = 0; /* Current page*/
    set PB0KM001.XXXLITOF invisible, skip; /* "OF" literal*/
    PB0KM001.TA5TSQIX = 0; /* Highest page*/

    return; /* Exit this process*/

  end

  /* ------------------------------------------------------------*/
  /* If we have just returned from change, delete, or add, we need*/
  /* to position the cursor on the last row maintenanced.*/
  /* The following code finds the tsq page that the key data is on.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SAVE-SI-NBR > 0) /* Key saved*/
    PB0KW00.PB0KW-SAVE-KEY-FOUND = "N"; /* Init save key*/
    while (PB0KW00.PB0KW-SAVE-KEY-FOUND == "N") /* Until key found*/
      PB0K-12110(); /* Obtain temp storage*/
      PB0K-12120(); /* Locate save key*/
    end
    if (PB0KW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Not desired page*/
      PB0KW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Get desired page*/
      PB0K-12110(); /* read tsq page*/
    end
    set PB0KM001.XXXLITPG skip; /* "PAGE" literal*/
    PB0KM001.XXXTSPAG = PB0KW00.XXXTSPAG; /* Current page*/
    set PB0KM001.XXXLITOF skip; /* "OF" literal*/
    PB0KM001.TA5TSQIX = PB0KW00.TA5TSQIX; /* Highest page*/
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (PB0KW00.XXXTSPAG > PB0KW00.TA5TSQIX) /* Desired greater highest*/
      PB0KW00.XXXTSPAG = PB0KW00.TA5TSQIX; /* Default to highest*/
    end
    PB0K-12110(); /* read tsq page*/

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

    set PB0KM001.XXXLITPG skip; /* "PAGE" literal*/
    PB0KM001.XXXTSPAG = PB0KW00.XXXTSPAG; /* Current page*/
    set PB0KM001.XXXLITOF skip; /* "OF" literal*/
    PB0KM001.TA5TSQIX = PB0KW00.TA5TSQIX; /* Highest page*/

  end

  PB0KW00.PB0KW-IXM = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IXM <= 11 /* Until screen is full*/
   && PB0KW01.PCASINBR[PB0KW-IXM] > 0) /* and more rows exist*/

    PB0KM001.PB0KM-SEL[PB0KW-IXM] = " ";
    set PB0KM001.PB0KM-SEL[PB0KW-IXM] normal;
    PB0KM001.PB0KM-CUS[PB0KW-IXM] = PB0KW01.PB0KM-CUS[PB0KW-IXM];
    PB0KM001.PB0KM-STY[PB0KW-IXM] = PB0KW01.PB0KM-STY[PB0KW-IXM];
    PB0KM001.PB0KM-CLR[PB0KW-IXM] = PB0KW01.PB0KM-CLR[PB0KW-IXM];
    PB0KM001.PB0KM-DIM[PB0KW-IXM] = PB0KW01.PB0KM-DIM[PB0KW-IXM];
    PB0KM001.PB0KM-TYP[PB0KW-IXM] = PB0KW01.PB0KM-TYP[PB0KW-IXM];
    PB0KM001.PB0KM-DST[PB0KW-IXM] = PB0KW01.PB0KM-DST[PB0KW-IXM];
    PB0KM001.PB0KM-MFG[PB0KW-IXM] = PB0KW01.PB0KM-MFG[PB0KW-IXM];
    PB0KM001.PB0KM-ORD[PB0KW-IXM] = PB0KW01.PB0KM-ORD[PB0KW-IXM];
    PB0KM001.PB0KM-STA[PB0KW-IXM] = PB0KW01.PB0KM-STA[PB0KW-IXM];
    PB0KM001.PB0KM-DSC[PB0KW-IXM] = PB0KW01.PB0KM-DSC[PB0KW-IXM];

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment line index*/

  end

  PB0KW00.PB0KW-SAVE-SI-NBR = 0; /* clear last save key*/

end // end PB0K-12100

// Obtain temp storage page
Function PB0K-12110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0KW01.XXXTSLEN = PB0KW00.XXXTSLEN; /* TS length*/
  TA5REC.TA5APPID = "PB0K"; /* Application identification*/
  TA5REC.TA5TSQIX = PB0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PB0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* Error was found*/
   && TA5REC.TA5RTNCD == 0)          /* Error was found*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PB0K-12110

// Locate save key
Function PB0K-12120()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize index*/

  while (PB0KW00.PB0KW-IXM <= 11 /* Until key is found*/
   && PB0KW00.PB0KW-SAVE-KEY-FOUND == "N")

    if (PB0KW01.PCASINBR[PB0KW-IXM] == 0 /* no more rows*/
     || PB0KW01.PCASINBR[PB0KW-IXM] > PB0KW00.PB0KW-SAVE-SI-NBR)
      if (PB0KW00.PB0KW-IXM <= 1) /* Key not on page*/
        if (PB0KW00.XXXTSPAG == 1) /* first page*/
          PB0KW00.PB0KW-IXM = 1; /* Reset index*/
        else
          PB0KW00.PB0KW-IXM = 11; /* Index to last entry*/
          PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG - 1; /* decrement page*/
        end
      else
        PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM - 1; /* Decrement index*/
      end
      set PB0KM001.PB0KM-SEL[PB0KW-IXM] cursor; /* Initial cursor*/
      PB0KW00.PB0KW-SAVE-KEY-FOUND = "Y"; /* Indicate page was found*/
    else
      if (PB0KW01.PCASINBR[PB0KW-IXM] == PB0KW00.PB0KW-SAVE-SI-NBR)
        set PB0KM001.PB0KM-SEL[PB0KW-IXM] cursor; /* Initial cursor*/
        PB0KW00.PB0KW-SAVE-KEY-FOUND = "Y"; /* Indicate key was found*/
      else
        PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment index*/
      end
    end
  end

  if (PB0KW00.PB0KW-SAVE-KEY-FOUND != "Y") /* Key not found*/
    if (PB0KW00.XXXTSPAG == PB0KW00.TA5TSQIX) /* Last page*/
      PB0KW00.PB0KW-IXM = 11; /* Set index to last entry*/
      set PB0KM001.PB0KM-SEL[PB0KW-IXM] cursor; /* Initial cursor*/
      PB0KW00.PB0KW-SAVE-KEY-FOUND = "Y"; /* Indicate page was found*/
    else
      PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG + 1; /* Increment page*/
    end
  end

end // end PB0K-12120

// Check attention identifier
Function PB0K-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0KW00.PB0KW-SWR == "Y") /* Request for data*/
      set PB0KW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.CATOAP > " " /* FAST PATH was requested*/
   || PB0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
      PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PB0KM001.CATOAP cursor, bold; /* Highlight*/
      PB0KM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0KW00.XXXPRCNM = "13000"; /* Module identification*/

    else

      PB0KW00.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* or PF4 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/


    /* ------------------------------------------------------------*/
     /* if PF3/PF21 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3 /* Selection map requested*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A";

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0G"; /* Application find code*/
    end

    PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
    PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PB0KM001.CATOAP cursor, bold; /* Highlight*/
    PB0KW00.XXXPRCNM = "13000"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    PB0KW00.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0k-13000 ********************/
end // end PB0K-13000

// Reset highlighted fields
Function PB0K-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/

  set PB0KM001.YSMXDV initialAttributes; /* Division*/
  set PB0KM001.PC2CUXID initialAttributes; /* Cust xref*/
  set PB0KM001.SY1STNBR initialAttributes; /* Style*/
  set PB0KM001.SY2CLRID initialAttributes; /* color*/
  set PB0KM001.XDMCD initialAttributes; /* Dimension code*/
  set PB0KM001.PC4ORTYP initialAttributes; /* P.O. type code*/
  set PB0KM001.XPRCD initialAttributes; /* Product type code*/
  set PB0KM001.XPCCD initialAttributes; /* Product category code*/
  set PB0KM001.XPLCD initialAttributes; /* Product line code*/
  set PB0KM001.PC6XCTCD initialAttributes; /* Destination country*/
  set PB0KM001.XCTCD initialAttributes; /* Manufacturing country*/
  set PB0KM001.PB0KM-PO-ID-YY initialAttributes;
  set PB0KM001.PB0KM-PO-ID-PM initialAttributes;
  set PB0KM001.PB0KM-PO-ID-DM initialAttributes;
  set PB0KM001.FY1FCTYC initialAttributes; /* Factory*/
  set PB0KM001.OP1CUOID initialAttributes; /* Order number*/
  set PB0KM001.OP1NORID initialAttributes; /* Nike order number*/
  set PB0KM001.KUCCOID initialAttributes; /* Customer number*/
  set PB0KM001.KUMSTRID initialAttributes; /* Customer number*/
  set PB0KM001.XNXCD initialAttributes; /* Department number*/

  PB0KW00.PB0KW-IXM = 1; /* Init index*/
  while (PB0KW00.PB0KW-IXM <= 11) /* while more rows*/
    if (PB0KW01.PCASINBR[PB0KW-IXM] > 0) /* Data entered*/
      set PB0KM001.PB0KM-SEL[PB0KW-IXM] normal;
    else
      set PB0KM001.PB0KM-SEL[PB0KW-IXM] initialAttributes;
    end
    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment index*/
  end

  set PB0KM001.CATOAP initialAttributes; /* TO application*/
  set PB0KM001.CAITEM initialAttributes; /* Application data*/


  if (PB0KM001.XDMCD == "?"    /* if any ? entered*/
   || PB0KM001.XPRCD == "?"    /* if ? in season code field*/
   || PB0KM001.XPCCD == "?"    /* if ? in quota code field*/
   || PB0KM001.XPLCD == "?"    /* if ? in status code field*/
   || PB0KM001.PC6XCTCD == "?" /* if ? in dest ctry code field*/
   || PB0KM001.XCTCD == "?")   /* if ? in problem code field*/


    if (PB0KM001.XDMCD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   DIM       "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the dimension  **/
       /* *  code table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PB0KM001.XDMCD = " "; /* clear fields*/
      end
      set PB0KM001.XDMCD cursor; /* Set cursor*/
    end

    if (PB0KM001.XPRCD == "?") /* if ? in prod type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           PRODUCT TYPE     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPR01(); /* perform product type window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the prod type  **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* move code*/
      else
        PB0KM001.XPRCD = " "; /* clear fields*/
      end
      set PB0KM001.XPRCD cursor; /* Set cursor*/
    end

    if (PB0KM001.XPCCD == "?") /* if ? in category code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      PRODUCT CATEGORY      "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPC01(); /* perform prod cat code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the category   **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX];
      else
        PB0KM001.XPCCD = " "; /* clear fields*/
      end
      set PB0KM001.XPCCD cursor; /* Set cursor*/
    end

    if (PB0KM001.XPLCD == "?") /* if ? in prod line code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      PRODUCT LINE CODE     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPL01(); /* perform status code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the prod line  **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX];
      else
        PB0KM001.XPLCD = " "; /* clear fields*/
      end
      set PB0KM001.XPLCD cursor; /* Set cursor*/
    end

    if (PB0KM001.PC6XCTCD == "?") /* if ? in origin code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   DESTINATION COUNTRY CODE "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform dest ctry code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.PC6XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      else
        PB0KM001.PC6XCTCD = " "; /* clear fields*/
      end
      set PB0KM001.PC6XCTCD cursor; /* Set cursor*/
    end

    if (PB0KM001.XCTCD == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  MANUFACTURING COUNTRY     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      else
        PB0KM001.XCTCD = " "; /* clear fields*/
      end
      set PB0KM001.XCTCD cursor; /* Set cursor*/
    end

    PB0KW00.PB0KW-SWR = "N"; /* Reset request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Reset format the map switch*/

    converseLib.clearScreen();
     /* Restore the original map*/

    exit stack; /* Exit to display map*/
  end


end // end PB0K-14000

// Verify the entered data
Function PB0K-15000()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-MOD = "N"; /* ===> data modified*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0KW00.XXXPRCNM = "15000"; /* Module identification*/
    set PB0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack; /* Flow to converse map*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0KW00.XXXTSPAG < 2)       /* and no previous pages*/
    PB0KW00.XXXPRCNM = "15000"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    exit stack;

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0KW00.XXXTSPAG >= PB0KW00.TA5TSQIX) /* and no more pages*/
    PB0KW00.XXXPRCNM = "15000"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    exit stack;

  end


  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    return; /* exit*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* otherwise, clear out the map data.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.XXXSTAT != PB0KM001.XXXSTAT   /* Status*/
   || PB0KW00.YSMXDV != PB0KM001.YSMXDV     /* Division*/
   || PB0KW00.PC2CUXID != PB0KM001.PC2CUXID /* Cust xref*/
   || PB0KW00.SY1STNBR != PB0KM001.SY1STNBR /* Style*/
   || PB0KW00.SY2CLRID != PB0KM001.SY2CLRID /* color*/
   || PB0KW00.XDMCD != PB0KM001.XDMCD       /* Dimension code*/
   || PB0KW00.PC4ORTYP != PB0KM001.PC4ORTYP /* P.O. type code*/
   || PB0KW00.XPRCD != PB0KM001.XPRCD       /* Product type code*/
   || PB0KW00.XPCCD != PB0KM001.XPCCD       /* Product category code*/
   || PB0KW00.XPLCD != PB0KM001.XPLCD       /* Product line code*/
   || PB0KW00.PC6XCTCD != PB0KM001.PC6XCTCD /* Destination country*/
   || PB0KW00.XCTCD != PB0KM001.XCTCD       /* Manufacturing country*/
   || PB0KW00.PB0KM-PO-ID-YY != PB0KM001.PB0KM-PO-ID-YY
   || PB0KW00.PB0KM-PO-ID-PM != PB0KM001.PB0KM-PO-ID-PM
   || PB0KW00.PB0KM-PO-ID-DM != PB0KM001.PB0KM-PO-ID-DM
   || PB0KW00.FY1FCTYC != PB0KM001.FY1FCTYC /* Factory*/
   || PB0KW00.OP1CUOID != PB0KM001.OP1CUOID /* Order number*/
   || PB0KW00.OP1NORID != PB0KM001.OP1NORID /* Nike order number*/
   || PB0KW00.KUCCOID != PB0KM001.KUCCOID   /* Customer number*/
   || PB0KW00.KUMSTRID != PB0KM001.KUMSTRID /* Customer number*/
   || PB0KW00.XNXCD != PB0KM001.XNXCD)      /* Department number*/

    PB0KW00.PB0KW-IXM = 1; /* Initialize line index*/

    while (PB0KW00.PB0KW-IXM <= 11 /* Until screen is full*/
     && PB0KW01.PCASINBR[PB0KW-IXM] > 0) /* and more rows exist*/

      set PB0KM001.PB0KM-SEL[PB0KW-IXM] initialAttributes;
      PB0KM001.PB0KM-SEL[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-CUS[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-STY[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-CLR[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-DIM[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-TYP[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-DST[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-MFG[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-ORD[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-STA[PB0KW-IXM] = " ";
      PB0KM001.PB0KM-DSC[PB0KW-IXM] = " ";

      PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment line index*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If enter was pressed and data was not modified, check for*/
     /* selection.*/
    /* ------------------------------------------------------------*/

    PB0KW00.PB0KW-SELECTION-FLAG = "N"; /* Initialize selection flag*/

    PB0KW00.PB0KW-IXM = 11; /* Initialize index*/

    while (PB0KW00.PB0KW-IXM > 0) /* Until end of lines*/
      if (PB0KM001.PB0KM-SEL[PB0KW-IXM] != " ") /* If selection not blank*/
        if (PB0KM001.PB0KM-SEL[PB0KW-IXM] == "S") /* Save the key*/
          PB0KW00.PB0KW-SELECTION-FLAG = "Y";
                                               /* Initialize selection flag*/
        else
          converseLib.validationFailed(13); /* Error message and highlight*/
          PB0KW00.XXXPRCNM = "15000"; /* Process name*/
          set PB0KM001.PB0KM-SEL[PB0KW-IXM] cursor, bold;
        end
      end
      PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM - 1; /* Decrement line index*/
    end

    if (converseVar.eventKey is pf14 /* PF14 was pressed*/
     && PB0KW00.PB0KW-SELECTION-FLAG == "N") /* and selection was not made*/
      converseLib.validationFailed(25); /* error message*/

    end

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ====> Exit to display map*/

    end

    return;

  end


    /* ------------------------------------------------------------*/
     /* If customer number changed, verify the entered data.*/
    /* ------------------------------------------------------------*/
  if (PB0KM001.KUCCOID != PB0KW00.KUCCOID
   || PB0KM001.KUMSTRID != PB0KW00.KUMSTRID
   || PB0KM001.XNXCD != PB0KW00.XNXCD)
    PB0K-15100(); /* =========> Customer number*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If sales order changed, verify the entered data.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.OP1CUOID != PB0KW00.OP1CUOID
   || PB0KM001.OP1NORID != PB0KW00.OP1NORID)
    PB0K-15200(); /* =========> Sales order*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If FCTY Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.FY1FCTYC != PB0KW00.FY1FCTYC)
    PB0K-15300(); /* =========> Verify FCTY Code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If p.o. id changed, verify entered data.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.PB0KM-PO-ID-YY != PB0KW00.PB0KM-PO-ID-YY
   || PB0KM001.PB0KM-PO-ID-PM != PB0KW00.PB0KM-PO-ID-PM
   || PB0KM001.PB0KM-PO-ID-DM != PB0KW00.PB0KM-PO-ID-DM)
    PB0K-15400(); /* =========> Verify P.O. Id*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If MFG country was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.XCTCD != PB0KW00.XCTCD) /* Country code*/
    PB0K-15500(); /* ===========> Verify country code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If DEST country changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.PC6XCTCD != PB0KW00.PC6XCTCD) /* Country code*/
    PB0K-15600(); /* ===========> Verify country code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product line changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.XPLCD != PB0KW00.XPLCD) /* product line code*/
    PB0K-15700(); /* ===> Verify product line code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product categorey changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.XPCCD != PB0KW00.XPCCD)
    PB0K-15800(); /* ===> Verify category on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product type changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.XPRCD != PB0KW00.XPRCD)
    PB0K-15900(); /* ===> Verify type on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If P.O. type changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.PC4ORTYP != PB0KW00.PC4ORTYP)
    PB0K-15A00(); /* ===> Verify type on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.XDMCD != PB0KW00.XDMCD)
    PB0K-15B00(); /* ===> Verify dim on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If color or style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.SY1STNBR != PB0KW00.SY1STNBR
   || PB0KM001.SY2CLRID != PB0KW00.SY2CLRID
   || PB0KM001.XDMCD != PB0KW00.XDMCD)
    PB0K-15C00(); /* ===> Verify style/color code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If cust xref was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.PC2CUXID != PB0KW00.PC2CUXID)
    PB0K-15D00(); /* ===> Verify cust xref on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM001.YSMXDV != PB0KW00.YSMXDV)
    PB0K-15E00(); /* ===> Verify division on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Status was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/


  if (PB0KM001.XXXSTAT != PB0KW00.XXXSTAT)
    PB0K-15F00(); /* ===> Verify status*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end
    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ====> Exit to display map*/

  end

  PB0K-15G00(); /* Do the relational edits NOW!*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ====> Exit to display map*/

  end
   /* **                                                        ***/
   /* ********************** End of PB0K-15000  *******************/
end // end PB0K-15000

// Validate customer number
Function PB0K-15100()
   /* ------------------------------------------------------------*/
   /* Validate the company/store/dept. as entered by the user.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.KUCCOID == 0
   && PB0KM001.KUMSTRID == 0
   && PB0KM001.XNXCD == 0)
    PB0KW00.KUCCOID = 0; /* ===> company*/
    PB0KW00.KUMSTRID = 0; /* ===> store*/
    PB0KW00.XNXCD = 0; /* ===> department*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* check if department entered, Cmpny/store must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XNXCD > 0)
    if (PB0KM001.KUCCOID == 0
     || PB0KM001.KUMSTRID == 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "15100"; /* Module identification*/
      set PB0KM001.KUCCOID cursor, bold; /* Highlight*/
      set PB0KM001.KUMSTRID bold; /* Highlight*/
      converseLib.validationFailed(47); /* combo invalid*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* check if store entered, company be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.KUMSTRID > 0
   && PB0KM001.KUCCOID == 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15100"; /* Module identification*/
    set PB0KM001.KUCCOID cursor, bold; /* Highlight*/
    set PB0KM001.KUMSTRID bold; /* Highlight*/
    converseLib.validationFailed(47); /* combo invalid*/
    return;

  end


  set KUNREC empty; /* Row storage area*/

  KUNREC.XGPCD = PB0KM001.XGPCD; /* ===> GPC*/
  KUNREC.KUCCOID = PB0KM001.KUCCOID; /* ===> Customer number*/

  if (PB0KM001.KUMSTRID == 0) /* ===> Not entered*/
    KUNREC.KUMSTRID = -1; /* ===> Wild card*/
  else
    KUNREC.KUMSTRID = PB0KM001.KUMSTRID; /* ===> Customer store*/
  end

  if (PB0KM001.XNXCD == 0) /* ===> Not entered*/
    KUNREC.XNXCD = -1; /* ===> Wild card*/
  else
    KUNREC.XNXCD = PB0KM001.XNXCD; /* ===> Department number*/
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15110(); /* Select Set dcust.vcust001*/

  PB0K-15120(); /* Fetch dcust.vcust001*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.KUCCOID = PB0KM001.KUCCOID; /* ===> company*/
    PB0KW00.KUMSTRID = PB0KM001.KUMSTRID; /* ===> store*/
    PB0KW00.XNXCD = PB0KM001.XNXCD; /* ===> department*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM001.KUCCOID cursor, bold;
    set PB0KM001.KUMSTRID bold;
    set PB0KM001.XNXCD bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(47);
  end

  PB0K-15130(); /* Close dcust.vcust001*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15100 *************************/
end // end PB0K-15100

// Select set dcust.vcust001
Function PB0K-15110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT A SET OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15110 *************************/
end // end PB0K-15110

// Fetch dcust.vcust001
Function PB0K-15120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15120 *************************/
end // end PB0K-15120

// Close dcust.vcust001
Function PB0K-15130()
   /* ------------------------------------------------------------*/
   /* Close the set of rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE SET OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15130 *************************/
end // end PB0K-15130

// validate sales order
Function PB0K-15200()

   /* ------------------------------------------------------------*/
   /* Validate the sales order as entered by the user.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If s.o. not entered, save and exit.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.OP1NORID == 0
   && PB0KM001.OP1CUOID == 0)
    PB0KW00.OP1CUOID = PB0KM001.OP1CUOID; /* ===> company*/
    PB0KW00.OP1NORID = PB0KM001.OP1NORID; /* ===> store*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* check if nike order entered, Sales order must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.OP1NORID > 0)
    if (PB0KM001.OP1CUOID == 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "15200"; /* Module identification*/
      set PB0KM001.OP1CUOID cursor, bold; /* Highlight*/
      set PB0KM001.OP1NORID bold; /* Highlight*/
      converseLib.validationFailed(70); /* combo invalid*/
      return;

    end
  end

  set OP1REC empty; /* Row storage area*/

  PB0KW00.PB0KW-CUST-ORD-ID = PB0KM001.OP1CUOID;
  OP1REC.OP1PARTN = PB0KW00.PB0KW-ORD-PART-CHAR; /* Part char*/
  OP1REC.OP1CUOID = PB0KM001.OP1CUOID; /* ===> Sales order*/
  OP1REC.OP1NORID = PB0KM001.OP1NORID; /* ===> Nike order*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15210(); /* Select Set dorder.vorhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.OP1CUOID = PB0KM001.OP1CUOID; /* ===> company*/
    PB0KW00.OP1NORID = PB0KM001.OP1NORID; /* ===> store*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM001.OP1CUOID cursor, bold;
    set PB0KM001.OP1NORID bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "15200"; /* Module identification*/
    converseLib.validationFailed(70);
  end

   /* **                                                        ***/
   /* ***************** End of PB0K-15200 *************************/

end // end PB0K-15200

// Select dorder.vorhdr01
Function PB0K-15210()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15210"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15210 *************************/
end // end PB0K-15210

// Validate factory
Function PB0K-15300()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PB0KM001.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PB0KM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15310(); /* Select unique dfcty.vfcty001*/

    /* ------------------------------------------------------------*/
     /* If row found, save factory in working storage*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.FY1FCTYC = PB0KM001.FY1FCTYC; /* ===> factory code*/
    return; /* Return to previous process*/
  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM001.FY1FCTYC cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "15300"; /* Module identification*/
    converseLib.validationFailed(32);
    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ***************** End of PB0K-15300 *************************/
end // end PB0K-15300

// Select dfcty.vfcty001
Function PB0K-15310()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15310"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-15310 *************************/
end // end PB0K-15310

// Validate p.o. id
Function PB0K-15400()
   /* ------------------------------------------------------------*/
   /* VERIFY THE P.O. ID DATE*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PB0KM-PO-ID-YY == 0 /* Nothing entered*/
   && PB0KM001.PB0KM-PO-ID-PM == 0 
   && PB0KM001.PB0KM-PO-ID-DM == 0)
    PB0KW00.PB0KM-PO-ID-YY = PB0KM001.PB0KM-PO-ID-YY;
    PB0KW00.PB0KM-PO-ID-PM = PB0KM001.PB0KM-PO-ID-PM;
    PB0KW00.PB0KM-PO-ID-DM = PB0KM001.PB0KM-PO-ID-DM;
    return;

  end

   /* ------------------------ y2k out -------------------*/
   /* IF PB0KM001.PB0KM-PO-ID-YY EQ 0; /* Nothing entered*/
   /* IF PB0KM001.PB0KM-PO-ID-PM GT 0*/
    /* OR PB0KM001.PB0KM-PO-ID-DM GT 0;*/
    /* MOVE 'N' TO PB0KW00.PB0KW-SWF;*/
    /* MOVE '15400' TO PB0KW00.XXXPRCNM;*/
    /* SET PB0KM001.PB0KM-PO-ID-YY CURSOR,BRIGHT;/* Highlight*/
    /* SET PB0KM001.PB0KM-PO-ID-PM BRIGHT;/* Highlight*/
    /* SET PB0KM001.PB0KM-PO-ID-DM BRIGHT;/* Highlight*/
    /* MOVE 313 TO EZEMNO;          /* Indicate month missing or invalid*/
    /* EZERTN;*/
    /* ;*/
   /* END;*/
   /* END;*/
   /* ------------------------ y2k out -------------------*/

   /* ------------------------ y2k out -------------------*/
   /* IF PB0KM001.PB0KM-PO-ID-YY GT 0*/
   /* ------------------------ y2k out -------------------*/
  if (PB0KM001.PB0KM-PO-ID-PM == 0) /* Nothing entered*/
    if (PB0KM001.PB0KM-PO-ID-DM > 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "15400";
      set PB0KM001.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
      set PB0KM001.PB0KM-PO-ID-PM bold; /* Highlight*/
      set PB0KM001.PB0KM-PO-ID-DM bold; /* Highlight*/
      converseLib.validationFailed(313); /* Indicate month missing or invalid*/
      return;

    end
  end

   /* ------------------------ y2k out -------------------*/
   /* IF PB0KM001.PB0KM-PO-ID-YY GT 0*/
   /* ------------------------ y2k out -------------------*/
  if (PB0KM001.PB0KM-PO-ID-DM == 0) /* Nothing entered*/
    if (PB0KM001.PB0KM-PO-ID-PM > 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "15400";
      set PB0KM001.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
      set PB0KM001.PB0KM-PO-ID-PM bold; /* Highlight*/
      set PB0KM001.PB0KM-PO-ID-DM bold; /* Highlight*/
      converseLib.validationFailed(313); /* Indicate month missing or invalid*/
      return;

    end
  end

  if (PB0KM001.PB0KM-PO-ID-DM < 1 /* ====> production delivery month*/
   || PB0KM001.PB0KM-PO-ID-DM > 12) /* ====> production delevery month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15400";
    set PB0KM001.PB0KM-PO-ID-DM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PB0KM001.PB0KM-PO-ID-PM < 1 /* ====> production month*/
   || PB0KM001.PB0KM-PO-ID-PM > 12) /* ====> production month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15400";
    set PB0KM001.PB0KM-PO-ID-PM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PB0KM001.PB0KM-PO-ID-YY > 99 /* ====> production year month*/
   || PB0KM001.PB0KM-PO-ID-YY < 00) /* ====> production year month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15400";
    set PB0KM001.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  PB0KW00.PB0KM-PO-ID-YY = PB0KM001.PB0KM-PO-ID-YY;
  PB0KW00.PB0KM-PO-ID-PM = PB0KM001.PB0KM-PO-ID-PM;
  PB0KW00.PB0KM-PO-ID-DM = PB0KM001.PB0KM-PO-ID-DM;

  if (PB0KW00.PB0KM-PO-ID-YY > 85)
    PB0KW00.PB0KW-PO-ID-CC = 19;
  else
    PB0KW00.PB0KW-PO-ID-CC = 20;
  end

  PB0KW00.PC3POIDT = PB0KW00.PB0KW-PO-ID; /* Save in ccyymmmm format*/

   /* **                                                        ***/
   /* ********************** End of PB0K-15400 ********************/
end // end PB0K-15400

// Validate mfg country
Function PB0K-15500()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XCTCD != " ") /* check country code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM001.XCTCD in XCTTBL.XCTCD /* Check valid code*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XCTCD = PB0KM001.XCTCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(49); /* error message*/
      PB0KW00.XXXPRCNM = "15500"; /* Process name*/
      set PB0KM001.XCTCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XCTCD = " ";

  end

end // end PB0K-15500

// Validate dest country
Function PB0K-15600()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE DESTINATION COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PC6XCTCD != " ") /* check country code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM001.PC6XCTCD in XCTTBL.XCTCD /* Check valid code*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.PC6XCTCD = PB0KM001.PC6XCTCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(49); /* error message*/
      PB0KW00.XXXPRCNM = "15600"; /* Process name*/
      set PB0KM001.PC6XCTCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.PC6XCTCD = " ";

  end

end // end PB0K-15600

// Validate product line
Function PB0K-15700()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT LINE*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XPLCD != " ") /* check product line*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    PB0KW00.PB0KW-GPC-CODE = "02";
    PB0KW00.PB0KW-TABLE-CODE = PB0KM001.XPLCD;
    if (PB0KW00.PB0KW-TABLE-KEY in XPLTBL.XPLKEY /* Check valid code*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPLCD = PB0KM001.XPLCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(93); /* error message*/
      PB0KW00.XXXPRCNM = "15700"; /* Process name*/
      set PB0KM001.XPLCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPLCD = " ";

  end

end // end PB0K-15700

// Validate product category
Function PB0K-15800()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT CATEGORY*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XPCCD != " ") /* check product cat*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    PB0KW00.PB0KW-GPC-CODE = "02";
    PB0KW00.PB0KW-TABLE-CODE = PB0KM001.XPCCD;
    if (PB0KW00.PB0KW-TABLE-KEY in XPCTBL.XPCKEY /* Check valid code*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPCCD = PB0KM001.XPCCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(94); /* error message*/
      PB0KW00.XXXPRCNM = "15800"; /* Process name*/
      set PB0KM001.XPCCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPCCD = " ";

  end

end // end PB0K-15800

// Validate product type
Function PB0K-15900()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT TYPE*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XPRCD != " ") /* check product type*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM001.XPRCD in XPRTBL.XPRCD /* Check valid code*/
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPRCD = PB0KM001.XPRCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(92); /* error message*/
      PB0KW00.XXXPRCNM = "15900"; /* Process name*/
      set PB0KM001.XPRCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPRCD = " ";

  end

end // end PB0K-15900

// Validate p.o. type
Function PB0K-15A00()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PC4ORTYP == " ")
    PB0KW00.PC4ORTYP = " "; /* ===> p.o. type code*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PB0KM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PB0KM001.PC4ORTYP; /* ===> p.o. type code*/

  PB0K-15A10(); /* Select unique dprodc.vpotyp01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.PC4ORTYP = PB0KM001.PC4ORTYP; /* ===> p.o. type code*/
    return; /* Return to previous process*/

  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM001.PC4ORTYP cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "15A00"; /* Module identification*/
    converseLib.validationFailed(33);
    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of 15A00 ***********************/
end // end PB0K-15A00

// Select dprodc.vpotyp01
Function PB0K-15A10()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the dprodc.vpotyp01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15A10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    if (PB0KW00.PB0KW-MAP == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      if (PB0KW00.PB0KW-MAP == "2")
  /* SET PB0KM002 PAGE;         /* Clear screen before display*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0K-15A10 ********************/
end // end PB0K-15A10

// Validate dimension
Function PB0K-15B00()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE DIMENSION*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XDMCD != " ") /* check dimension*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM001.XDMCD in XDMTBL.XDMCD /* Check valid code*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(53); /* error message*/
      PB0KW00.XXXPRCNM = "15B00"; /* Process name*/
      set PB0KM001.XDMCD cursor, modified, bold; /* highlt fld*/

    end
  end

end // end PB0K-15B00

// Validate style/color
Function PB0K-15C00()
   /* ------------------------------------------------------------*/
   /* If nothing entered, save fields and exit.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XDMCD == " "
   && PB0KM001.SY2CLRID == " "
   && PB0KM001.SY1STNBR == " ")
    PB0KW00.SY1STNBR = PB0KM001.SY1STNBR; /* ===> style code*/
    PB0KW00.SY2CLRID = PB0KM001.SY2CLRID; /* ===> color code*/
    PB0KW00.XDMCD = PB0KM001.XDMCD;
    return;

  end

   /* ------------------------------------------------------------*/
   /* check if dimension entered, Style/color must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.XDMCD > " ")
    if (PB0KM001.SY2CLRID == " "
     || PB0KM001.SY1STNBR == " ")
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "15C00"; /* Module identification*/
      if (PB0KM001.SY1STNBR == " ")
        set PB0KM001.SY1STNBR cursor, bold; /* Highlight*/
        set PB0KM001.SY2CLRID bold; /* Highlight*/
      else
        set PB0KM001.SY1STNBR bold; /* Highlight*/
        set PB0KM001.SY2CLRID cursor, bold; /* Highlight*/
      end
      converseLib.validationFailed(465); /* combo invalid*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* check if color entered, Style must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.SY2CLRID > " "
   && PB0KM001.SY1STNBR == " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15C00"; /* Module identification*/
    set PB0KM001.SY1STNBR cursor, bold; /* Highlight*/
    set PB0KM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(419); /* combo invalid*/
    return;

  end

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0KM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0KM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0KM001.SY1STNBR; /* ===> style code*/

  if (PB0KM001.XDMCD == " ")
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0KM001.XDMCD;
  end

  if (PB0KM001.SY2CLRID > " "
   && PB0KM001.SY1STNBR > " ")
    PB0K-15C10(); /* Check style/color combo*/

  else
    PB0K-15C20(); /* Check style*/

  end

  if (converseVar.validationMsgNum == 0)
    PB0KW00.SY1STNBR = PB0KM001.SY1STNBR; /* ===> style code*/
    PB0KW00.SY2CLRID = PB0KM001.SY2CLRID; /* ===> color code*/
    PB0KW00.XDMCD = PB0KM001.XDMCD;
  end

   /* **                                                        ***/
   /* ********************** End of PB0K-15C00 ********************/
end // end PB0K-15C00

// Check style/color combo
Function PB0K-15C10()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0KW00.SY2CLRID = PB0KM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0KW00.XXXPRCNM = "15C10"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PB0KM001.SY2CLRID cursor, bold;
      PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
      converseLib.validationFailed(197); /* ===>style,color,dim combination not*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0KM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

   /* *                                                        ***/
   /* ********************* End of 15C10 *************************/
end // end PB0K-15C10

// Check style
Function PB0K-15C20()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  XSPG201(); /* ====>subroutine to verify style/color*/
                                  /* code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0KW00.SY2CLRID = PB0KM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0KW00.XXXPRCNM = "15C20"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PB0KM001.SY2CLRID cursor, bold;
      PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
      converseLib.validationFailed(197); /* ===>style,color,dim combo invalid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0KM001.SY1STNBR cursor, bold;
  set PB0KM001.SY2CLRID bold;
  set PB0KM001.XDMCD bold;
  converseLib.validationFailed(10);

   /* *                                                        ***/
   /* ********************* End of 15C20 *************************/
end // end PB0K-15C20

// Validate customer xref
Function PB0K-15D00()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PC2CUXID == " ")
    PB0KW00.PC2CUXID = " ";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PB0KM001.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PB0KM001.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15D10(); /* Select unique dprodc.vprdcu01*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.PC2CUXID = PB0KM001.PC2CUXID;
    return; /* Return to previous process*/
  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM001.PC2CUXID cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "15D00"; /* Module identification*/
    converseLib.validationFailed(45);

    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of 15D00 ***********************/
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
end // end PB0K-15D00

// Select dprodc.vprdcu01
Function PB0K-15D10()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "15D10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    if (PB0KW00.PB0KW-MAP == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      if (PB0KW00.PB0KW-MAP == "2")
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0K-15D10 ******************/
end // end PB0K-15D10

// Validate division
Function PB0K-15E00()
  if (PB0KM001.YSMXDV == " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15E00"; /* Module identification*/
    set PB0KM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PB0KM001.YSMXDV;
  TA1REC.TA1PGMNM = "15E00";

  XSPCS02(); /* ===> verify division*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PB0KW00.YSMXDV = PB0KM001.YSMXDV;

  else
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15E00"; /* Module identification*/
    set PB0KM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of 15E00 ***********************/
end // end PB0K-15E00

// Validate status
Function PB0K-15F00()
   /* ------------------------------------------------------------------*/
   /* Validate the status*/
   /* ------------------------------------------------------------------*/
  if (PB0KM001.XXXSTAT == "A"
   || PB0KM001.XXXSTAT == "I"
   || PB0KM001.XXXSTAT == " ")
    PB0KW00.XXXSTAT = PB0KM001.XXXSTAT;

  else
    PB0KW00.PB0KW-SWF = "N";
    converseLib.validationFailed(37);
    PB0KW00.XXXPRCNM = "15F00";
    set PB0KM001.XXXSTAT cursor, bold;
  end

   /* **                                                            ***/
   /* ****************** End of process 15F00 **************************/
end // end PB0K-15F00

// Relational edits
Function PB0K-15G00()
   /* ------------------------------------------------------------*/
   /* Check cust xref/s.o.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PC2CUXID > " "
   && PB0KM001.OP1CUOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.PC2CUXID = " ";
    PB0KW00.OP1CUOID = 0;
    PB0KW00.OP1NORID = 0;
    set PB0KM001.PC2CUXID cursor, bold; /* Highlight*/
    set PB0KM001.OP1CUOID bold; /* Highlight*/
    set PB0KM001.OP1NORID bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check cust xref/customer nbr.*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.PC2CUXID > " "
   && PB0KM001.KUCCOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.PC2CUXID = " ";
    PB0KW00.KUCCOID = 0;
    PB0KW00.KUMSTRID = 0;
    PB0KW00.XNXCD = 0;
    set PB0KM001.PC2CUXID cursor, bold; /* Highlight*/
    set PB0KM001.KUCCOID bold; /* Highlight*/
    set PB0KM001.KUMSTRID bold; /* Highlight*/
    set PB0KM001.XNXCD bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check sales order/cust xref/cust nbr combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.OP1CUOID > 0
   && PB0KM001.KUCCOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.OP1CUOID = 0;
    PB0KW00.OP1NORID = 0;
    PB0KW00.KUCCOID = 0;
    PB0KW00.KUMSTRID = 0;
    PB0KW00.XNXCD = 0;
    set PB0KM001.OP1CUOID cursor, bold; /* Highlight*/
    set PB0KM001.KUCCOID bold; /* Highlight*/
    set PB0KM001.KUMSTRID bold; /* Highlight*/
    set PB0KM001.XNXCD bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/type combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.SY1STNBR > " "
   && PB0KM001.XPRCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM001.XPRCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/cat combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.SY1STNBR > " "
   && PB0KM001.XPCCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/line combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM001.SY1STNBR > " "
   && PB0KM001.XPLCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "15G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end


   /* **                                                        ***/
   /* ***************** End of PB0K-15G00 *************************/
end // end PB0K-15G00

// Process valid input request
Function PB0K-16000()
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PB0KW00.PB0KW-SWF = "Y";
    PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PB0KW00.PB0KW-SWF = "Y";
    PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/

  end

  PB0KW00.PCASIDSC = " ";
  PB0KW00.PB0KW-IX2 = 1;
  while (PB0KW00.PB0KW-IX2 <= 12)
    PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IX2] = 0;
    PB0KW00.PCBSITXT[PB0KW-IX2] = " ";
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1;

  end

  /* ------------------------------------------------------------*/
  /* If a inquiry or request for data, set up flags and*/
  /* map to be displayed.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PB0KW00.PB0KW-SWF = "Y"; /* Format map switch*/
    if (PB0KW00.PB0KW-MOD == "Y") /* Data has been modified*/
      PB0KW00.PB0KW-SWR = "Y";
    else
      if (PB0KW00.PB0KW-SELECTION-FLAG == "Y") /* Selection was made*/
        PB0KW00.PB0KW-FSW = "I"; /* 'inquiry' function*/
        PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
        PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
        PB0KW00.PB0KW-MAP = "2"; /* Map to be displayed switch*/
      end
    end
    return; /* return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* pf13*/
    PB0KW00.PB0KW-FSW = "A"; /* 'add' function*/
    PB0KW00.PB0KW-MAP = "2"; /* Map to be displayed switch*/
    PB0KW00.PB0KW-ADD-SW = "N"; /* Add switch*/
    PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
    PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
    return;

  end

  if (converseVar.eventKey is pf14) /* pf14 was pressed*/

    if (PB0KW00.PB0KW-SELECTION-FLAG == "Y") /* Selection was made*/
      PB0KW00.PB0KW-FSW = "C"; /* 'change' function*/
      PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
      PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
      PB0KW00.PB0KW-MAP = "2"; /* Map to be displayed switch*/
      return;
    end

  end

  if (converseVar.eventKey is pf15) /* pf15 was pressed*/

    if (PB0KW00.PB0KW-SELECTION-FLAG == "Y") /* Selection was made*/
      PB0KW00.PB0KW-FSW = "D"; /* 'delete' function*/
      PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
      PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
      PB0KW00.PB0KW-MAP = "2"; /* Map to be displayed switch*/
      return;

    end

  end

  if (converseVar.eventKey is pf16) /* pf16 was pressed*/
    PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
    PB0KW00.PB0KW-SWR = "Y"; /* request for data*/
    PB0KW00.PB0KW-MAP = "3"; /* Map to be displayed switch*/
    return;

  end


end // end PB0K-16000

// Process Add Screen
Function PB0K-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y") /* The request for data is yes*/
    PB0K-21000(); /* Obtain the data to display*/
  end

  PB0K-22000(); /* Format and display the map*/

  PB0K-23000(); /* Check attention identifier*/

  PB0K-24000(); /* Reset fields to normal intensity*/

  PB0K-25000(); /* Verify the entered data*/

  PB0K-26000(); /* Process valid input request*/


end // end PB0K-20000

// Obtain the data to display
Function PB0K-21000()
   /* ------------------------------------------------------------*/
     /* Set up the header information from the VSTYSI01 table.*/
     /* Select and open the cursor for the set to be formatted.*/
     /* Fetch and format the data in working storage.*/
     /* At end of rows, close the selected set cursor.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  set PCAREC empty; /* Clear table record*/

  PCAREC.XGPCD = PB0KW00.XGPCD;
  PCAREC.PCASINBR = PB0KW00.PCASINBR;

  PB0K-21500(); /* Select dprodc.vnkesi01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PB0KW00.PCASIDSC = PCAREC.PCASIDSC;
  end

  set PCBREC empty; /* Clear table record*/

  PCBREC.XGPCD = PCAREC.XGPCD;
  PCBREC.PCASINBR = PCAREC.PCASINBR;

  PB0K-21100(); /* Select cursor - sitxt*/

  PB0KW00.PB0KW-EOC = "N"; /* Initialize end of file switch*/
  PB0K-21200(); /* Fetch next row*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize display line number*/

  while (PB0KW00.PB0KW-EOC == "N" /* Until end of set or problem found*/
   && PB0KW00.PB0KW-IXM <= 12)

    PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IXM] = PCBREC.PCASINBR;
    PB0KW00.PCBSITXT[PB0KW-IXM] = PCBREC.PCBSITXT;

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1;

    PB0K-21200(); /* Fetch next row*/

  end

  PB0K-21400(); /* Close the selected set cursor*/

  PB0KW00.PB0KW-SWR = "N"; /* Initialize request for data*/

end // end PB0K-21000

// Select set dprodc.vsitxt01
Function PB0K-21100()
   /* ------------------------------------------------------------*/
   /* Select the set of rows to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "21100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT A SET OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-21100 *************************/

end // end PB0K-21100

// Fetch dprodc.vsitxt01
Function PB0K-21200()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0KW00.PB0KW-EOC = "Y"; /* End of cursor switch*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "21200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PB0KW00.PB0KW-MAP == "1") /* If map 1*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    else
      if (PB0KW00.PB0KW-MAP == "2") /* If map 2*/
        converseLib.clearScreen();
         /* Clear screen before display*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-21200 *************************/
end // end PB0K-21200

// Close set dprodc.vsitxt01
Function PB0K-21400()
   /* ------------------------------------------------------------*/
   /* Close the set of rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "21400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE SET OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-21400 *************************/
end // end PB0K-21400

// Close set dprodc.vsitxt01
Function PB0K-21500()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("S ", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "21500"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ***************** End of PB0K-21500 *************************/
end // end PB0K-21500

// Format and display the map
Function PB0K-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PB0KW00.PB0KW-SWF == "Y") /* Map must be formatted*/
      PB0K-22100(); /* Format the data on the map*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0KM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0KM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PCWREC.XXXMSGNO != 0) /* Message to display*/

      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end /* Message number*/
    else
      PB0KM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PB0KM002.XXXPRCNM = PB0KW00.XXXPRCNM; /* Module identification*/

    set PB0KM002 alarm; /* Indicate sound alarm*/

  end

  converse PB0KM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PB0KM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0KM002.CAITEM; /* Application data*/

end // end PB0K-22000

// Format the selected data
Function PB0K-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PB0KM002 initial; /* M002 input/output area*/

  PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  PB0KM002.PB0KM-MAP-DESC = "ADD"; /* title*/
  PB0KM002.XXXSTAT = "A"; /* status*/
  set PB0KM002.XXXSTAT skip; /* Protect status*/

  PB0KM002.XGPCD = PB0KW00.XGPCD; /* Gpc code*/
  PB0KM002.XGPDESC = PB0KW00.XGPDESC; /* Gpc description*/
  PB0KM002.PCASIDSC = PB0KW00.PCASIDSC; /* Inst description*/
  PB0KM002.YSMXDV = PB0KW00.YSMXDV; /* Division*/
  PB0KM002.PC2CUXID = PB0KW00.PC2CUXID; /* Cust xref*/
  PB0KM002.SY1STNBR = PB0KW00.SY1STNBR; /* Style*/
  PB0KM002.SY2CLRID = PB0KW00.SY2CLRID; /* color*/
  PB0KM002.XDMCD = PB0KW00.XDMCD; /* Dimension code*/
  PB0KM002.PC4ORTYP = PB0KW00.PC4ORTYP; /* P.O. type code*/
  PB0KM002.XPRCD = PB0KW00.XPRCD; /* Product type code*/
  PB0KM002.XPCCD = PB0KW00.XPCCD; /* Product category code*/
  PB0KM002.XPLCD = PB0KW00.XPLCD; /* Product line code*/
  PB0KM002.PC6XCTCD = PB0KW00.PC6XCTCD; /* Destination country*/
  PB0KM002.XCTCD = PB0KW00.XCTCD; /* Manufacturing country*/
  PB0KW00.PB0KW-PO-ID = PB0KW00.PC3POIDT; /* group level*/
  PB0KM002.PB0KM-PO-ID-YY = PB0KW00.PB0KM-PO-ID-YY;
  PB0KM002.PB0KM-PO-ID-PM = PB0KW00.PB0KM-PO-ID-PM;
  PB0KM002.PB0KM-PO-ID-DM = PB0KW00.PB0KM-PO-ID-DM;
  PB0KM002.FY1FCTYC = PB0KW00.FY1FCTYC; /* Factory*/
  PB0KM002.OP1CUOID = PB0KW00.OP1CUOID; /* Order number*/
  PB0KM002.OP1NORID = PB0KW00.OP1NORID; /* Nike order number*/
  PB0KM002.KUCCOID = PB0KW00.KUCCOID; /* Customer number*/
  PB0KM002.KUMSTRID = PB0KW00.KUMSTRID; /* Customer number*/
  PB0KM002.XNXCD = PB0KW00.XNXCD; /* Department number*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IXM <= 12 /* Until screen is full*/
   && PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IXM] > 0) /* more rows*/

    PB0KM002.PCBSITXT[PB0KW-IXM] = PB0KW00.PCBSITXT[PB0KW-IXM];

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment line index*/

  end


end // end PB0K-22100

// Check attention identifier
Function PB0K-23000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
      PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PB0KM002.CATOAP cursor, bold; /* Highlight*/
      PB0KM002.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0KW00.XXXPRCNM = "23000"; /* Module identification*/

    else

      PB0KW00.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* or PF4 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3/PF21 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/
      PB0KW00.PB0KW-MAP = "1";
      PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
      PB0KW00.PB0KW-SWF = "Y"; /* Request for data*/
      exit stack;

    end

    if (converseVar.eventKey is pf21) /* Selection map requested*/
      COMMAREA.CATOAP = "PC0A";

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0G"; /* Application find code*/
    end

    PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
    PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PB0KM002.CATOAP cursor, bold; /* Highlight*/
    PB0KW00.XXXPRCNM = "23000"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER    was not pressed*/

    PB0KW00.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0k-23000 ********************/
end // end PB0K-23000

// Reset field attributes
Function PB0K-24000()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  set PB0KM002.XGPCD initialAttributes; /* Gpc code*/
  set PB0KM002.XGPDESC initialAttributes; /* Gpc description*/
  set PB0KM002.YSMXDV initialAttributes; /* Division*/
  set PB0KM002.PC2CUXID initialAttributes; /* Cust xref*/
  set PB0KM002.SY1STNBR initialAttributes; /* Style*/
  set PB0KM002.SY2CLRID initialAttributes; /* color*/
  set PB0KM002.XDMCD initialAttributes; /* Dimension code*/
  set PB0KM002.PC4ORTYP initialAttributes; /* P.O. type code*/
  set PB0KM002.XPRCD initialAttributes; /* Product type code*/
  set PB0KM002.XPCCD initialAttributes; /* Product category code*/
  set PB0KM002.XPLCD initialAttributes; /* Product line code*/
  set PB0KM002.PC6XCTCD initialAttributes; /* Destination country*/
  set PB0KM002.XCTCD initialAttributes; /* Manufacturing country*/
  set PB0KM002.PB0KM-PO-ID-YY initialAttributes;
  set PB0KM002.PB0KM-PO-ID-PM initialAttributes;
  set PB0KM002.PB0KM-PO-ID-DM initialAttributes;
  set PB0KM002.FY1FCTYC initialAttributes; /* Factory*/
  set PB0KM002.OP1CUOID initialAttributes; /* Order number*/
  set PB0KM002.OP1NORID initialAttributes; /* Nike order number*/
  set PB0KM002.KUCCOID initialAttributes; /* Customer number*/
  set PB0KM002.KUMSTRID initialAttributes; /* Customer number*/
  set PB0KM002.XNXCD initialAttributes; /* Department number*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IXM <= 12) /* Until screen is full*/

    set PB0KM002.PCBSITXT[PB0KW-IXM] initialAttributes;

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment line index*/

  end

  set PB0KM002.CATOAP initialAttributes; /* TO application*/
  set PB0KM002.CAITEM initialAttributes; /* Application data*/

  if (PB0KM002.XDMCD == "?"    /* if any ? entered*/
   || PB0KM002.XPRCD == "?"    /* if ? in season code field*/
   || PB0KM002.XPCCD == "?"    /* if ? in quota code field*/
   || PB0KM002.XPLCD == "?"    /* if ? in status code field*/
   || PB0KM002.PC6XCTCD == "?" /* if ? in dest ctry code field*/
   || PB0KM002.XCTCD == "?")   /* if ? in problem code field*/

    if (PB0KM002.XDMCD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   DIM       "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the dimension  **/
       /* *  code table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PB0KM002.XDMCD = " "; /* clear fields*/
      end
      set PB0KM002.XDMCD cursor; /* Set cursor*/
    end

    if (PB0KM002.XPRCD == "?") /* if ? in prod type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "           PRODUCT TYPE     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPR01(); /* perform product type window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the prod type  **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* move code*/
      else
        PB0KM002.XPRCD = " "; /* clear fields*/
      end
      set PB0KM002.XPRCD cursor; /* Set cursor*/
    end

    if (PB0KM002.XPCCD == "?") /* if ? in category code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      PRODUCT CATEGORY      "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPC01(); /* perform prod cat code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the category   **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX];
      else
        PB0KM002.XPCCD = " "; /* clear fields*/
      end
      set PB0KM002.XPCCD cursor; /* Set cursor*/
    end

    if (PB0KM002.XPLCD == "?") /* if ? in prod line code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      PRODUCT LINE CODE     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPL01(); /* perform status code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the prod line  **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.XPLCD = XPLTBL.XPLCD[XX0XWPIX];
      else
        PB0KM002.XPLCD = " "; /* clear fields*/
      end
      set PB0KM002.XPLCD cursor; /* Set cursor*/
    end

    if (PB0KM002.PC6XCTCD == "?") /* if ? in origin code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "   DESTINATION COUNTRY CODE "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform dest ctry code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.PC6XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      else
        PB0KM002.PC6XCTCD = " "; /* clear fields*/
      end
      set PB0KM002.PC6XCTCD cursor; /* Set cursor*/
    end

    if (PB0KM002.XCTCD == "?") /* if ? in problem code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  MANUFACTURING COUNTRY     "; /* heading*/

      XX0XW02.XGPCD = "02"; /* Footwear only*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform problem code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the country    **/
      /* *  code table code and description to the map.          **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0KM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      else
        PB0KM002.XCTCD = " "; /* clear fields*/
      end
      set PB0KM002.XCTCD cursor; /* Set cursor*/
    end

    PB0KW00.PB0KW-SWR = "N"; /* Reset request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Reset format the map switch*/

    converseLib.clearScreen();
     /* Restore the original map*/

    exit stack; /* Exit to display map*/
  end


end // end PB0K-24000

// Verify the entered data
Function PB0K-25000()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-MOD = "N"; /* ===> data modified*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0KW00.XXXPRCNM = "25000"; /* Module identification*/
    set PB0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack; /* Flow to converse map*/

  end

   /* ------------------------------------------------------------*/
   /* Insure that at least one line of text was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IX2 = 12;
  while (PB0KW00.PB0KW-IX2 >= 1
   && PB0KM002.PCBSITXT[PB0KW-IX2] == " ")
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 - 1;
  end

  if (PB0KW00.PB0KW-IX2 == 0)
    PB0KW00.XXXPRCNM = "25000";
    set PB0KM002.PCBSITXT[1] cursor, bold;
    converseLib.validationFailed(464);
  end

    /* ------------------------------------------------------------*/
     /* Verfiy that description is entered.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PCASIDSC == " ") /* Description not entered*/
    PB0KW00.XXXPRCNM = "25000";
    set PB0KM002.PCASIDSC cursor, bold;
    converseLib.validationFailed(161);
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* otherwise, clear out the map data.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.YSMXDV != PB0KM002.YSMXDV       /* Division*/
   || PB0KW00.PC2CUXID != PB0KM002.PC2CUXID   /* Cust xref*/
   || PB0KW00.SY1STNBR != PB0KM002.SY1STNBR   /* Style*/
   || PB0KW00.SY2CLRID != PB0KM002.SY2CLRID   /* color*/
   || PB0KW00.XDMCD != PB0KM002.XDMCD         /* Dimension code*/
   || PB0KW00.PC4ORTYP != PB0KM002.PC4ORTYP   /* P.O. type code*/
   || PB0KW00.XPRCD != PB0KM002.XPRCD         /* Product type code*/
   || PB0KW00.XPCCD != PB0KM002.XPCCD         /* Product category code*/
   || PB0KW00.XPLCD != PB0KM002.XPLCD         /* Product line code*/
   || PB0KW00.PC6XCTCD != PB0KM002.PC6XCTCD   /* Destination country*/
   || PB0KW00.XCTCD != PB0KM002.XCTCD         /* Manufacturing country*/
   || PB0KW00.PC3POIDT != PB0KW00.PB0KW-PO-ID /* group level*/
   || PB0KW00.PB0KM-PO-ID-YY != PB0KM002.PB0KM-PO-ID-YY
   || PB0KW00.PB0KM-PO-ID-PM != PB0KM002.PB0KM-PO-ID-PM
   || PB0KW00.PB0KM-PO-ID-DM != PB0KM002.PB0KM-PO-ID-DM
   || PB0KW00.FY1FCTYC != PB0KM002.FY1FCTYC   /* Factory*/
   || PB0KW00.OP1CUOID != PB0KM002.OP1CUOID   /* Order number*/
   || PB0KW00.OP1NORID != PB0KM002.OP1NORID   /* Nike order number*/
   || PB0KW00.KUCCOID != PB0KM002.KUCCOID     /* Customer number*/
   || PB0KW00.KUMSTRID != PB0KM002.KUMSTRID   /* Customer number*/
   || PB0KW00.XNXCD != PB0KM002.XNXCD)        /* Department number*/

    PB0KW00.PB0KW-IXM = 1; /* Initialize line index*/

  else

    return;

  end


    /* ------------------------------------------------------------*/
     /* If customer number changed, verify the entered data.*/
    /* ------------------------------------------------------------*/
  if (PB0KM002.KUCCOID != PB0KW00.KUCCOID
   || PB0KM002.KUMSTRID != PB0KW00.KUMSTRID
   || PB0KM002.XNXCD != PB0KW00.XNXCD)
    PB0K-25100(); /* =========> Customer number*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If sales order changed, verify the entered data.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.OP1CUOID != PB0KW00.OP1CUOID
   || PB0KM002.OP1NORID != PB0KW00.OP1NORID)
    PB0K-25200(); /* =========> Sales order*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If FCTY Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.FY1FCTYC != PB0KW00.FY1FCTYC)
    PB0K-25300(); /* =========> Verify FCTY Code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If p.o. id changed, verify entered data.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PB0KM-PO-ID-YY != PB0KW00.PB0KM-PO-ID-YY
   || PB0KM002.PB0KM-PO-ID-PM != PB0KW00.PB0KM-PO-ID-PM
   || PB0KM002.PB0KM-PO-ID-DM != PB0KW00.PB0KM-PO-ID-DM)
    PB0K-25400(); /* =========> Verify P.O. Id*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If MFG country was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.XCTCD != PB0KW00.XCTCD) /* Country code*/
    PB0K-25500(); /* ===========> Verify country code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If DEST country changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PC6XCTCD != PB0KW00.PC6XCTCD) /* Country code*/
    PB0K-25600(); /* ===========> Verify country code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product line changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.XPLCD != PB0KW00.XPLCD) /* product line code*/
    PB0K-25700(); /* ===> Verify product line code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product categorey changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.XPCCD != PB0KW00.XPCCD)
    PB0K-25800(); /* ===> Verify category on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If Product type changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.XPRCD != PB0KW00.XPRCD)
    PB0K-25900(); /* ===> Verify type on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If P.O. type changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PC4ORTYP != PB0KW00.PC4ORTYP)
    PB0K-25A00(); /* ===> Verify type on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.XDMCD != PB0KW00.XDMCD)
    PB0K-25B00(); /* ===> Verify dim on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If color or style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.SY1STNBR != PB0KW00.SY1STNBR
   || PB0KM002.SY2CLRID != PB0KW00.SY2CLRID
   || PB0KM002.XDMCD != PB0KW00.XDMCD)
    PB0K-25C00(); /* ===> Verify style/color code*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If cust xref was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PC2CUXID != PB0KW00.PC2CUXID)
    PB0K-25D00(); /* ===> Verify cust xref on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.YSMXDV != PB0KW00.YSMXDV)
    PB0K-25E00(); /* ===> Verify division on table*/
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
  end

    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ====> Exit to display map*/

  end

  PB0K-25G00(); /* Do the relational edits NOW!*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ====> Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0K-25000  *******************/
end // end PB0K-25000

// Validate customer number
Function PB0K-25100()
   /* ------------------------------------------------------------*/
   /* Validate the company/store/dept. as entered by the user.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.KUCCOID == 0
   && PB0KM002.KUMSTRID == 0
   && PB0KM002.XNXCD == 0)
    PB0KW00.KUCCOID = 0; /* ===> company*/
    PB0KW00.KUMSTRID = 0; /* ===> store*/
    PB0KW00.XNXCD = 0; /* ===> department*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* check if department entered, Cmpny/store must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XNXCD > 0)
    if (PB0KM002.KUCCOID == 0
     || PB0KM002.KUMSTRID == 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "25100"; /* Module identification*/
      set PB0KM002.KUCCOID cursor, bold; /* Highlight*/
      set PB0KM002.KUMSTRID bold; /* Highlight*/
      converseLib.validationFailed(47); /* combo invalid*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* check if store entered, company be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.KUMSTRID > 0
   && PB0KM002.KUCCOID == 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25100"; /* Module identification*/
    set PB0KM002.KUCCOID cursor, bold; /* Highlight*/
    set PB0KM002.KUMSTRID bold; /* Highlight*/
    converseLib.validationFailed(47); /* combo invalid*/
    return;

  end


  set KUNREC empty; /* Row storage area*/

  KUNREC.XGPCD = PB0KM002.XGPCD; /* ===> GPC*/
  KUNREC.KUCCOID = PB0KM002.KUCCOID; /* ===> Customer number*/

  if (PB0KM002.KUMSTRID == 0) /* ===> Not entered*/
    KUNREC.KUMSTRID = -1; /* ===> Wild card*/
  else
    KUNREC.KUMSTRID = PB0KM002.KUMSTRID; /* ===> Customer store*/
  end

  if (PB0KM002.XNXCD == 0) /* ===> Not entered*/
    KUNREC.XNXCD = -1; /* ===> Wild card*/
  else
    KUNREC.XNXCD = PB0KM002.XNXCD; /* ===> Department number*/
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15110(); /* Select Set dcust.vcust001*/

  PB0K-15120(); /* Fetch dcust.vcust001*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.KUCCOID = PB0KM002.KUCCOID; /* ===> company*/
    PB0KW00.KUMSTRID = PB0KM002.KUMSTRID; /* ===> store*/
    PB0KW00.XNXCD = PB0KM002.XNXCD; /* ===> department*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM002.KUCCOID cursor, bold;
    set PB0KM002.KUMSTRID bold;
    set PB0KM002.XNXCD bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "25100"; /* Module identification*/
    converseLib.validationFailed(47);
  end

  PB0K-15130(); /* Close dcust.vcust001*/

   /* **                                                        ***/
   /* ***************** End of PB0K-25100 *************************/

end // end PB0K-25100

// validate sales order
Function PB0K-25200()

   /* ------------------------------------------------------------*/
   /* Validate the sales order as entered by the user.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If s.o. not entered, save and exit.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.OP1NORID == 0
   && PB0KM002.OP1CUOID == 0)
    PB0KW00.OP1CUOID = PB0KM002.OP1CUOID; /* ===> company*/
    PB0KW00.OP1NORID = PB0KM002.OP1NORID; /* ===> store*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* check if nike order entered, Sales order must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.OP1NORID > 0)
    if (PB0KM002.OP1CUOID == 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "25200"; /* Module identification*/
      set PB0KM002.OP1CUOID cursor, bold; /* Highlight*/
      set PB0KM002.OP1NORID bold; /* Highlight*/
      converseLib.validationFailed(70); /* combo invalid*/
      return;

    end
  end

  set OP1REC empty; /* Row storage area*/

  PB0KW00.PB0KW-CUST-ORD-ID = PB0KM002.OP1CUOID;
  OP1REC.OP1PARTN = PB0KW00.PB0KW-ORD-PART-CHAR; /* Part char*/
  OP1REC.OP1CUOID = PB0KM002.OP1CUOID; /* ===> Sales order*/

  OP1REC.OP1NORID = PB0KM002.OP1NORID; /* ===> Nike order*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15210(); /* Select dorder.vorhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.OP1CUOID = PB0KM002.OP1CUOID; /* ===> company*/
    PB0KW00.OP1NORID = PB0KM002.OP1NORID; /* ===> store*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM002.OP1CUOID cursor, bold;
    set PB0KM002.OP1NORID bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "25200"; /* Module identification*/
    converseLib.validationFailed(70);
  end

   /* **                                                        ***/
   /* ***************** End of PB0K-25200 *************************/

end // end PB0K-25200

// Validate factory
Function PB0K-25300()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PB0KM002.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PB0KM002.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15310(); /* Select unique dfcty.vfcty001*/

    /* ------------------------------------------------------------*/
     /* If row found, save factory in working storage*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.FY1FCTYC = PB0KM002.FY1FCTYC; /* ===> factory code*/
    return; /* Return to previous process*/
  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM002.FY1FCTYC cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "25300"; /* Module identification*/
    converseLib.validationFailed(32);
    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ***************** End of PB0K-25300 *************************/
end // end PB0K-25300

// Validate p.o. id
Function PB0K-25400()
   /* ------------------------------------------------------------*/
   /* VERIFY THE P.O. ID DATE*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PB0KM-PO-ID-YY == 0 /* Nothing entered*/
   && PB0KM002.PB0KM-PO-ID-PM == 0 
   && PB0KM002.PB0KM-PO-ID-DM == 0)
    PB0KW00.PB0KM-PO-ID-YY = PB0KM002.PB0KM-PO-ID-YY;
    PB0KW00.PB0KM-PO-ID-PM = PB0KM002.PB0KM-PO-ID-PM;
    PB0KW00.PB0KM-PO-ID-DM = PB0KM002.PB0KM-PO-ID-DM;
    return;

  end

   /* ------------------------ y2k out ---------------------*/
   /* IF PB0KM002.PB0KM-PO-ID-YY EQ 0; /* Nothing entered*/
   /* IF PB0KM002.PB0KM-PO-ID-PM GT 0*/
     /* OR PB0KM002.PB0KM-PO-ID-DM GT 0;*/
     /* MOVE 'N' TO PB0KW00.PB0KW-SWF;*/
     /* MOVE '25400' TO PB0KW00.XXXPRCNM;*/
     /* SET PB0KM002.PB0KM-PO-ID-YY CURSOR,BRIGHT;/* Highlight*/
     /* SET PB0KM002.PB0KM-PO-ID-PM BRIGHT;/* Highlight*/
     /* SET PB0KM002.PB0KM-PO-ID-DM BRIGHT;/* Highlight*/
     /* MOVE 313 TO EZEMNO;          /* Indicate month missing or invalid*/
     /* EZERTN;*/
     /* ;*/
   /* END;*/
   /* END;*/
   /* ------------------------ y2k out ---------------------*/

   /* ------------------------ y2k out ---------------------*/
   /* IF PB0KM002.PB0KM-PO-ID-YY GT 0*/
   /* ------------------------ y2k out ---------------------*/

  if (PB0KM002.PB0KM-PO-ID-PM == 0) /* Nothing entered*/
    if (PB0KM002.PB0KM-PO-ID-DM > 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "25400";
      set PB0KM002.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
      set PB0KM002.PB0KM-PO-ID-PM bold; /* Highlight*/
      set PB0KM002.PB0KM-PO-ID-DM bold; /* Highlight*/
      converseLib.validationFailed(313); /* Indicate month missing or invalid*/
      return;

    end
  end

   /* ------------------------ y2k out ---------------------*/
   /* IF PB0KM002.PB0KM-PO-ID-YY GT 0*/
   /* ------------------------ y2k out ---------------------*/
  if (PB0KM002.PB0KM-PO-ID-DM == 0) /* Nothing entered*/
    if (PB0KM002.PB0KM-PO-ID-PM > 0)
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "25400";
      set PB0KM002.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
      set PB0KM002.PB0KM-PO-ID-PM bold; /* Highlight*/
      set PB0KM002.PB0KM-PO-ID-DM bold; /* Highlight*/
      converseLib.validationFailed(313); /* Indicate month missing or invalid*/
      return;

    end
  end

  if (PB0KM002.PB0KM-PO-ID-DM < 1 /* ====> production delivery month*/
   || PB0KM002.PB0KM-PO-ID-DM > 12) /* ====> production delevery month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25400";
    set PB0KM002.PB0KM-PO-ID-DM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PB0KM002.PB0KM-PO-ID-PM < 1 /* ====> production month*/
   || PB0KM002.PB0KM-PO-ID-PM > 12) /* ====> production month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25400";
    set PB0KM002.PB0KM-PO-ID-PM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PB0KM002.PB0KM-PO-ID-YY > 99 /* ====> production year month*/
   || PB0KM002.PB0KM-PO-ID-YY < 00) /* ====> production year month*/

    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25400";
    set PB0KM002.PB0KM-PO-ID-YY cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  PB0KW00.PB0KM-PO-ID-YY = PB0KM002.PB0KM-PO-ID-YY;
  PB0KW00.PB0KM-PO-ID-PM = PB0KM002.PB0KM-PO-ID-PM;
  PB0KW00.PB0KM-PO-ID-DM = PB0KM002.PB0KM-PO-ID-DM;

  if (PB0KW00.PB0KM-PO-ID-YY > 85)
    PB0KW00.PB0KW-PO-ID-CC = 19;
  else
    PB0KW00.PB0KW-PO-ID-CC = 20;
  end

  PB0KW00.PC3POIDT = PB0KW00.PB0KW-PO-ID; /* Save in ccyymmmm format*/

   /* **                                                        ***/
   /* ********************** End of PB0K-25400 ********************/
end // end PB0K-25400

// Validate mfg country
Function PB0K-25500()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XCTCD != " ") /* check country code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM002.XCTCD in XCTTBL.XCTCD /* Check valid code*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XCTCD = PB0KM002.XCTCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(49); /* error message*/
      PB0KW00.XXXPRCNM = "25500"; /* Process name*/
      set PB0KM002.XCTCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XCTCD = " ";

  end

end // end PB0K-25500

// Validate dest country
Function PB0K-25600()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE DESTINATION COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PC6XCTCD != " ") /* check country code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM002.PC6XCTCD in XCTTBL.XCTCD /* Check valid code*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.PC6XCTCD = PB0KM002.PC6XCTCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(49); /* error message*/
      PB0KW00.XXXPRCNM = "25600"; /* Process name*/
      set PB0KM002.PC6XCTCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.PC6XCTCD = " ";

  end

end // end PB0K-25600

// Validate product line
Function PB0K-25700()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT LINE*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XPLCD != " ") /* check product line*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    PB0KW00.PB0KW-GPC-CODE = "02";
    PB0KW00.PB0KW-TABLE-CODE = PB0KM002.XPLCD;
    if (PB0KW00.PB0KW-TABLE-KEY in XPLTBL.XPLKEY /* Check valid code*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPLCD = PB0KM002.XPLCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(93); /* error message*/
      PB0KW00.XXXPRCNM = "25700"; /* Process name*/
      set PB0KM002.XPLCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPLCD = " ";

  end

end // end PB0K-25700

// Validate product category
Function PB0K-25800()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT CATEGORY*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XPCCD != " ") /* check product cat*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    PB0KW00.PB0KW-GPC-CODE = "02";
    PB0KW00.PB0KW-TABLE-CODE = PB0KM002.XPCCD;
    if (PB0KW00.PB0KW-TABLE-KEY in XPCTBL.XPCKEY /* Check valid code*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPCCD = PB0KM002.XPCCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(94); /* error message*/
      PB0KW00.XXXPRCNM = "25800"; /* Process name*/
      set PB0KM002.XPCCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPCCD = " ";

  end

end // end PB0K-25800

// Validate product type
Function PB0K-25900()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE PRODUCT TYPE*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XPRCD != " ") /* check product type*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM002.XPRCD in XPRTBL.XPRCD /* Check valid code*/
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XPRCD = PB0KM002.XPRCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(92); /* error message*/
      PB0KW00.XXXPRCNM = "25900"; /* Process name*/
      set PB0KM002.XPRCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XPRCD = " ";

  end

end // end PB0K-25900

// Validate p.o. type
Function PB0K-25A00()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PC4ORTYP == " ")
    PB0KW00.PC4ORTYP = " "; /* ===> p.o. type code*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PB0KM002.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PB0KM002.PC4ORTYP; /* ===> p.o. type code*/

  PB0K-15A10(); /* Select unique dprodc.vpotyp01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.PC4ORTYP = PB0KM002.PC4ORTYP; /* ===> p.o. type code*/
    return; /* Return to previous process*/

  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM002.PC4ORTYP cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "25A00"; /* Module identification*/
    converseLib.validationFailed(33);
    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of 25A00 ***********************/
end // end PB0K-25A00

// Validate dimension
Function PB0K-25B00()
   /* ------------------------------------------------------------*/
   /* VALIDATE THE DIMENSION*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XDMCD != " ") /* check dimension*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (PB0KM002.XDMCD in XDMTBL.XDMCD /* Check valid code*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PB0KW00.XDMCD = PB0KM002.XDMCD;

    else
      PB0KW00.PB0KW-SWF = "N"; /* Format map switch*/
      converseLib.validationFailed(53); /* error message*/
      PB0KW00.XXXPRCNM = "15900"; /* Process name*/
      set PB0KM002.XDMCD cursor, modified, bold; /* highlt fld*/

    end
  else
    PB0KW00.XDMCD = " ";

  end

end // end PB0K-25B00

// Validate style/color
Function PB0K-25C00()
   /* ------------------------------------------------------------*/
   /* check if dimension entered, Style/color must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.XDMCD > " ")
    if (PB0KM002.SY2CLRID == " "
     || PB0KM002.SY1STNBR == " ")
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "25C00"; /* Module identification*/
      set PB0KM002.SY1STNBR cursor, bold; /* Highlight*/
      set PB0KM002.SY2CLRID bold; /* Highlight*/
      converseLib.validationFailed(197); /* combo invalid*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* check if color entered, Style must be entered*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.SY2CLRID > " "
   && PB0KM002.SY1STNBR == " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25C00"; /* Module identification*/
    set PB0KM002.SY1STNBR cursor, bold; /* Highlight*/
    set PB0KM002.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(197); /* combo invalid*/
    return;

  end

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PB0KM002.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PB0KM002.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PB0KM002.SY1STNBR; /* ===> style code*/

  if (PB0KM002.XDMCD == " ")
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PB0KM002.XDMCD;
  end

  if (PB0KM002.SY2CLRID > " "
   && PB0KM002.SY1STNBR > " ")
    PB0K-25C10(); /* Check style/color combo*/

  else
    PB0K-25C20(); /* Check style*/

  end

  if (converseVar.validationMsgNum == 0)
    PB0KW00.SY1STNBR = PB0KM002.SY1STNBR; /* ===> style code*/
    PB0KW00.SY2CLRID = PB0KM002.SY2CLRID; /* ===> color code*/
    PB0KW00.XDMCD = PB0KM002.XDMCD;
  end

   /* **                                                        ***/
   /* ********************** End of PB0K-25C00 ********************/
end // end PB0K-25C00

// Check style/color combo
Function PB0K-25C10()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0KW00.SY2CLRID = PB0KM002.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0KW00.XXXPRCNM = "25C10"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PB0KM002.SY2CLRID cursor, bold;
      PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
      converseLib.validationFailed(197); /* ===>style,color,dim combination not*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0KM002.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

   /* *                                                        ***/
   /* ********************* End of 25C10 *************************/
end // end PB0K-25C10

// Check style
Function PB0K-25C20()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  XSPG201(); /* ====>subroutine to verify style/color*/
                                  /* code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0KW00.SY2CLRID = PB0KM002.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PB0KW00.XXXPRCNM = "25C20"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PB0KM002.SY2CLRID cursor, bold;
      PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
      converseLib.validationFailed(197); /* ===>style,color,dim combo invalid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PB0KM002.SY1STNBR cursor, bold;
  set PB0KM002.SY2CLRID bold;
  set PB0KM002.XDMCD bold;
  converseLib.validationFailed(10);

   /* *                                                        ***/
   /* ********************* End of 25C20 *************************/
end // end PB0K-25C20

// Validate customer xref
Function PB0K-25D00()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PC2CUXID == " ")
    PB0KW00.PC2CUXID = " ";
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PB0KM002.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PB0KM002.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PB0K-15D10(); /* Select unique dprodc.vprdcu01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PB0KW00.PC2CUXID = PB0KM002.PC2CUXID;
    return; /* Return to previous process*/
  end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.clearScreen();
    
    set PB0KM002.PC2CUXID cursor, bold;
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/
    PB0KW00.XXXPRCNM = "25D00"; /* Module identification*/
    converseLib.validationFailed(45);

    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of 25D00 ***********************/
end // end PB0K-25D00

// Validate division
Function PB0K-25E00()
  if (PB0KM002.YSMXDV == " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25E00"; /* Module identification*/
    set PB0KM002.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PB0KM002.YSMXDV;
  TA1REC.TA1PGMNM = "25E00";

  XSPCS02(); /* ===> verify division*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PB0KW00.YSMXDV = PB0KM002.YSMXDV;

  else
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25E00"; /* Module identification*/
    set PB0KM002.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of 25E00 ***********************/
end // end PB0K-25E00

// Relational edits
Function PB0K-25G00()
   /* ------------------------------------------------------------*/
   /* Check cust xref/s.o.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PC2CUXID > " "
   && PB0KM002.OP1CUOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.PC2CUXID = " ";
    PB0KW00.OP1CUOID = 0;
    PB0KW00.OP1NORID = 0;
    set PB0KM002.PC2CUXID cursor, bold; /* Highlight*/
    set PB0KM002.OP1CUOID bold; /* Highlight*/
    set PB0KM002.OP1NORID bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check cust xref/customer nbr.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.PC2CUXID > " "
   && PB0KM002.KUCCOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.PC2CUXID = " ";
    PB0KW00.KUCCOID = 0;
    PB0KW00.KUMSTRID = 0;
    PB0KW00.XNXCD = 0;
    set PB0KM002.PC2CUXID cursor, bold; /* Highlight*/
    set PB0KM002.KUCCOID bold; /* Highlight*/
    set PB0KM002.KUMSTRID bold; /* Highlight*/
    set PB0KM002.XNXCD bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check sales order/cust xref/cust nbr combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.OP1CUOID > 0
   && PB0KM002.KUCCOID > 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.OP1CUOID = 0;
    PB0KW00.OP1NORID = 0;
    PB0KW00.KUCCOID = 0;
    PB0KW00.KUMSTRID = 0;
    PB0KW00.XNXCD = 0;
    set PB0KM002.OP1CUOID cursor, bold; /* Highlight*/
    set PB0KM002.KUCCOID bold; /* Highlight*/
    set PB0KM002.KUMSTRID bold; /* Highlight*/
    set PB0KM002.XNXCD bold; /* Highlight*/
    converseLib.validationFailed(228); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/type combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.SY1STNBR > " "
   && PB0KM002.XPRCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM002.XPRCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/cat combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.SY1STNBR > " "
   && PB0KM002.XPCCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check style/line combo*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.SY1STNBR > " "
   && PB0KM002.XPLCD > " ")
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "25G00"; /* Module identification*/
    PB0KW00.SY1STNBR = " ";
    PB0KW00.XPRCD = " ";
    PB0KW00.XPCCD = " ";
    PB0KW00.XPLCD = " ";
    set PB0KM002.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(98); /* Cannot enter both*/
    return;
  end


   /* **                                                        ***/
   /* ***************** End of PB0K-25g00 *************************/
end // end PB0K-25G00

// Process valid input request
Function PB0K-26000()
   /* ------------------------------------------------------------*/
   /* Get next special instruction sequence nbr. before adding.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get current date and time*/

  PB0K-26100(); /* select/update dprodc.vsictl01*/

   /* ------------------------------------------------------------*/
   /* Add the new data in the table row.*/
   /* ------------------------------------------------------------*/

  set VSTYSI01 empty; /* Clear table record*/

  VSTYSI01.XGPCD = PB0KM002.XGPCD; /* Gpc code*/
  VSTYSI01.XXXSTAT = PB0KM002.XXXSTAT; /* Status*/
  VSTYSI01.PCASIDSC = PB0KM002.PCASIDSC; /* Description*/
  VSTYSI01.YSMXDV = PB0KM002.YSMXDV; /* Division*/
  VSTYSI01.PC2CUXID = PB0KM002.PC2CUXID; /* Cust xref*/
  VSTYSI01.SY1STNBR = PB0KM002.SY1STNBR; /* Style*/
  VSTYSI01.SY2CLRID = PB0KM002.SY2CLRID; /* color*/
  VSTYSI01.XDMCD = PB0KM002.XDMCD; /* Dimension code*/
  VSTYSI01.PC4ORTYP = PB0KM002.PC4ORTYP; /* P.O. type code*/
  VSTYSI01.XPRCD = PB0KM002.XPRCD; /* Product type code*/
  VSTYSI01.XPCCD = PB0KM002.XPCCD; /* Product category code*/
  VSTYSI01.XPLCD = PB0KM002.XPLCD; /* Product line code*/
  VSTYSI01.PC6XCTCD = PB0KM002.PC6XCTCD; /* Destination country*/
  VSTYSI01.XCTCD = PB0KM002.XCTCD; /* Manufacturing country*/
  VSTYSI01.PC3POIDT = PB0KW00.PC3POIDT; /* P.O. id*/
  VSTYSI01.FY1FCTYC = PB0KM002.FY1FCTYC; /* Factory*/
  VSTYSI01.OP1PARTN = PB0KW00.OP1PARTN; /* Part char*/
  VSTYSI01.OP1CUOID = PB0KM002.OP1CUOID; /* Order number*/
  VSTYSI01.OP1NORID = PB0KM002.OP1NORID; /* Nike order number*/
  VSTYSI01.KUCCOID = PB0KM002.KUCCOID; /* Customer number*/
  VSTYSI01.KUMSTRID = PB0KM002.KUMSTRID; /* Customer number*/
  VSTYSI01.XNXCD = PB0KM002.XNXCD; /* Department number*/

  VSTYSI01.PCASINBR = PCDREC.PCDSINBR;

  VSTYSI01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSTYSI01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSTYSI01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PB0K-26200(); /* add dprodc.vstysi01 table row*/

  PB0KW00.PB0KW-IX2 = 12; /* Init index*/
  while (PB0KW00.PB0KW-IX2 >= 1
   && PB0KM002.PCBSITXT[PB0KW-IX2] == " ")
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 - 1;
  end

  PB0KW00.PB0KW-IXM = 1; /* Init index*/

  while (PB0KW00.PB0KW-IXM <= PB0KW00.PB0KW-IX2)

    set PCBREC empty; /* Clear table record*/

    PCBREC.PCASINBR = PCDREC.PCDSINBR;
    PCBREC.PCBSISEQ = PB0KW00.PB0KW-IXM;
    PCBREC.XGPCD = PB0KM002.XGPCD;
    PCBREC.PCBSITXT = PB0KM002.PCBSITXT[PB0KW-IXM];

    PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
    PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PB0K-26300(); /* add dprodc.vsitxt01 table rows*/

    PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1;

  end

   /* ------------------------------------------------------------*/
   /* Clear the screen before next add.*/
   /* ------------------------------------------------------------*/

  set PB0KM002 initial;

  PB0KW00.PCASIDSC = " ";
  PB0KW00.PB0KW-IX2 = 1;
  while (PB0KW00.PB0KW-IX2 <= 12)
    PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IX2] = 0;
    PB0KW00.PCBSITXT[PB0KW-IX2] = " ";
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the table add was successfully completed.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
  PB0KW00.PB0KW-SWF = "Y"; /* Format map switch*/
  PB0KW00.PB0KW-ADD-SW = "Y"; /* Add occured switch*/
  PB0KW00.PB0KW-SAVE-SI-NBR = VSTYSI01.PCASINBR;

  PB0KW00.XXXPRCNM = "26000"; /* Module identification*/
  set PB0KM002.PCBSITXT[1] cursor; /* cursor to 1st line of text*/
  PCWREC.XXXMSGNO = 1; /* Table update was completed*/


   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end PB0K-26000

// Select/update dprodc.vsictl01
Function PB0K-26100()
  /* ------------------------------------------------------------*/
  /* Select the requested row from the table.*/
  /* ------------------------------------------------------------*/

  set PCDREC empty; /* Clear row storage area*/

  PCDREC.XGPCD = PB0KM002.XGPCD; /* gpc code*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* row already exists*/
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "26100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW BEFORE ADD        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PB0K-26100

// Add dprodc.vstysi01 row
Function PB0K-26200()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("A ", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "26200"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0KW00.XXXPRCNM = "26200"; /* Process name*/

  exit stack;

end // end PB0K-26200

// Add dprodc.vsitxt01 rows
Function PB0K-26300()
   /* ------------------------------------------------------------*/
   /* This module adds table row(s).*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "26300"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0KW00.XXXPRCNM = "26300"; /* Process name*/

  exit stack;

end // end PB0K-26300

// Process Inquiry Screen
Function PB0K-30000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* The request for data is yes*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0K-31000(); /* Obtain the data to display*/
  end

  PB0K-32000(); /* Format and display the map*/

  PB0K-33000(); /* Check attention identifier*/

  PB0K-34000(); /* Reset fields to normal intensity*/

  PB0K-35000(); /* Verify the entered data*/

  PB0K-36000(); /* Process valid input request*/


end // end PB0K-30000

// Obtain the data to display
Function PB0K-31000()
   /* ------------------------------------------------------------*/
     /* Set up the header information from the VSTYSI01 table.*/
     /* Select and open the cursor for the set to be formatted.*/
     /* Fetch and format the data in working storage.*/
     /* At end of rows, close the selected set cursor.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  set VSTYSI01 empty; /* Clear table record*/

  VSTYSI01.XGPCD = PB0KW00.XGPCD;
  VSTYSI01.PCASINBR = PB0KW01.PCASINBR[PB0KW-IXM];
  VSTYSI01.SY1STNBR = PB0KW01.PB0KM-STY[PB0KW-IXM];
  VSTYSI01.SY2CLRID = PB0KW01.PB0KM-CLR[PB0KW-IXM];
  PB0KW00.PB0KW-SALES-ORD-ID = PB0KW01.PB0KM-ORD[PB0KW-IXM];
  if (PB0KW00.PB0KW-ORD-ID == " ")
    VSTYSI01.OP1CUOID = 0;
    VSTYSI01.OP1NORID = 0;
  else
    VSTYSI01.OP1CUOID = PB0KW00.PB0KW-ORD-ID;
    VSTYSI01.OP1NORID = PB0KW00.PB0KW-NIKE-ID;
  end

  PB0K-31100(); /* Select row*/

  set PCBREC empty; /* Clear table record*/

  PB0KW00.PB0KW-IX2 = 1;
  while (PB0KW00.PB0KW-IX2 <= 12)
    PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IX2] = 0;
    PB0KW00.PCBSITXT[PB0KW-IX2] = " ";
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1;

  end

  PCBREC.XGPCD = PB0KW00.XGPCD;
  PCBREC.PCASINBR = PB0KW01.PCASINBR[PB0KW-IXM];

  PB0K-21100(); /* Select set and open the cursor*/

  PB0KW00.PB0KW-EOC = "N"; /* Initialize end of file switch*/
  PB0K-21200(); /* Fetch next row*/

  PB0KW00.PB0KW-IX2 = 1; /* Initialize display line number*/

  while (PB0KW00.PB0KW-EOC == "N" /* Until end of set or problem found*/
   && PB0KW00.PB0KW-IX2 <= 12)

    PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IX2] = PCBREC.PCASINBR;
    PB0KW00.PCBSITXT[PB0KW-IX2] = PCBREC.PCBSITXT;

    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1;

    PB0K-21200(); /* Fetch next row*/

  end

  PB0K-21400(); /* Close the selected set cursor*/

end // end PB0K-31000

// Select vstysi01
Function PB0K-31100()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("S ", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0KW00.XXXPRCNM = "31100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSTYSI01.VSTYSI01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ***************** End of PB0K-31100 *************************/
end // end PB0K-31100

// Format and display the map
Function PB0K-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PB0KW00.PB0KW-SWF == "Y") /* Map must be formatted*/
      PB0K-32100(); /* Format the data on the map*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0KM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0KM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PCWREC.XXXMSGNO != 0) /* Message to display*/

      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end /* Message number*/
    else
      PB0KM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PB0KM002.XXXPRCNM = PB0KW00.XXXPRCNM; /* Module identification*/

    set PB0KM002 alarm; /* Indicate sound alarm*/

  end

  if (PB0KW00.PB0KW-FSW == "I"
   || PB0KW00.PB0KW-FSW == "D")
    set PB0KM002.PCASIDSC skip; /* Description*/
    set PB0KM002.XXXSTAT skip; /* Status*/
    set PB0KM002.CATOAP cursor;

    PB0KW00.PB0KW-IX2 = 1; /* Initialize line index*/

    while (PB0KW00.PB0KW-IX2 <= 12) /* Until screen is full*/

      set PB0KM002.PCBSITXT[PB0KW-IX2] skip;

      PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment line index*/

    end
  end

  if (PB0KW00.PB0KW-FSW == "C"
   && converseVar.validationMsgNum == 0) /* and no error found*/
    set PB0KM002.PCBSITXT[1] cursor;
  end

  set PB0KM002.YSMXDV skip; /* Division*/
  set PB0KM002.PC2CUXID skip; /* Cust xref*/
  set PB0KM002.SY1STNBR skip; /* Style*/
  set PB0KM002.SY2CLRID skip; /* color*/
  set PB0KM002.XDMCD skip; /* Dimension code*/
  set PB0KM002.PC4ORTYP skip; /* P.O. type code*/
  set PB0KM002.XPRCD skip; /* Product type code*/
  set PB0KM002.XPCCD skip; /* Product category code*/
  set PB0KM002.XPLCD skip; /* Product line code*/
  set PB0KM002.PC6XCTCD skip; /* Destination country*/
  set PB0KM002.XCTCD skip; /* Manufacturing country*/
  set PB0KM002.PB0KM-PO-ID-YY skip;
  set PB0KM002.PB0KM-PO-ID-PM skip;
  set PB0KM002.PB0KM-PO-ID-DM skip;
  set PB0KM002.FY1FCTYC skip; /* Factory*/
  set PB0KM002.OP1CUOID skip; /* Order number*/
  set PB0KM002.OP1NORID skip; /* Nike order number*/
  set PB0KM002.KUCCOID skip; /* Customer number*/
  set PB0KM002.KUMSTRID skip; /* Customer number*/
  set PB0KM002.XNXCD skip; /* Department number*/

  converse PB0KM002 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PB0KM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0KM002.CAITEM; /* Application data*/

end // end PB0K-32000

// Format the selected data
Function PB0K-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PB0KM002 initial; /* M002 input/output area*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-FSW == "I")
    PB0KM002.PB0KM-MAP-DESC = "INQUIRY"; /* title*/
  else
    if (PB0KW00.PB0KW-FSW == "C")
      PB0KM002.PB0KM-MAP-DESC = "CHANGE "; /* title*/
    else
      PB0KM002.PB0KM-MAP-DESC = "DELETE "; /* title*/
    end
  end
  PB0KM002.XXXSTAT = VSTYSI01.XXXSTAT; /* status*/
  PB0KM002.PCASIDSC = VSTYSI01.PCASIDSC; /* DESCRIPTION*/
  PB0KM002.XGPCD = VSTYSI01.XGPCD; /* Gpc code*/
  PB0KM002.XGPDESC = PB0KW00.XGPDESC; /* Gpc description*/
  PB0KM002.YSMXDV = VSTYSI01.YSMXDV; /* Division*/
  PB0KM002.PC2CUXID = VSTYSI01.PC2CUXID; /* Cust xref*/
  PB0KM002.SY1STNBR = VSTYSI01.SY1STNBR; /* Style*/
  PB0KM002.SY2CLRID = VSTYSI01.SY2CLRID; /* color*/
  PB0KM002.XDMCD = VSTYSI01.XDMCD; /* Dimension code*/
  PB0KM002.PC4ORTYP = VSTYSI01.PC4ORTYP; /* P.O. type code*/
  PB0KM002.XPRCD = VSTYSI01.XPRCD; /* Product type code*/
  PB0KM002.XPCCD = VSTYSI01.XPCCD; /* Product category code*/
  PB0KM002.XPLCD = VSTYSI01.XPLCD; /* Product line code*/
  PB0KM002.PC6XCTCD = VSTYSI01.PC6XCTCD; /* Destination country*/
  PB0KM002.XCTCD = VSTYSI01.XCTCD; /* Manufacturing country*/
  PB0KW00.PB0KW-PO-ID = VSTYSI01.PC3POIDT; /* group level*/
  PB0KM002.PB0KM-PO-ID-YY = PB0KW00.PB0KM-PO-ID-YY;
  PB0KM002.PB0KM-PO-ID-PM = PB0KW00.PB0KM-PO-ID-PM;
  PB0KM002.PB0KM-PO-ID-DM = PB0KW00.PB0KM-PO-ID-DM;
  PB0KM002.FY1FCTYC = VSTYSI01.FY1FCTYC; /* Factory*/
  PB0KM002.OP1CUOID = VSTYSI01.OP1CUOID; /* Order number*/
  PB0KM002.OP1NORID = VSTYSI01.OP1NORID; /* Nike order number*/
  PB0KM002.KUCCOID = VSTYSI01.KUCCOID; /* Customer number*/
  PB0KM002.KUMSTRID = VSTYSI01.KUMSTRID; /* Customer number*/
  PB0KM002.XNXCD = VSTYSI01.XNXCD; /* Department number*/

  PB0KW00.PB0KW-IX2 = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IX2 <= 12 /* Until screen is full*/
   && PB0KW00.PB0KW-SPCL-INST-NBR[PB0KW-IX2] > 0) /* and more rows*/

    PB0KM002.PCBSITXT[PB0KW-IX2] = PB0KW00.PCBSITXT[PB0KW-IX2];

    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment line index*/

  end


end // end PB0K-32100

// Check attention identifier
Function PB0K-33000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
      PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PB0KM002.CATOAP cursor, bold; /* Highlight*/
      PB0KM002.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0KW00.XXXPRCNM = "33000"; /* Module identification*/

    else

      PB0KW00.XXXPRCNM = "33000"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* or PF4 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3/PF21 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/
      PB0KW00.PB0KW-MAP = "1";
      if (PB0KW00.PB0KW-ADD-SW == "Y") /* Add occured*/
        PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
      end
      PB0KW00.PB0KW-SWF = "Y"; /* Request for data*/
      exit stack;

    end

    if (converseVar.eventKey is pf21) /* Selection map requested*/
      COMMAREA.CATOAP = "PC0A";

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0G"; /* Application find code*/
    end

    PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
    PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PB0KM002.CATOAP cursor, bold; /* Highlight*/
    PB0KW00.XXXPRCNM = "33000"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER    was not pressed*/

    PB0KW00.XXXPRCNM = "33000"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0k-33000 ********************/
end // end PB0K-33000

// Reset field attributes
Function PB0K-34000()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  set PB0KM002.XGPCD initialAttributes; /* Gpc code*/
  set PB0KM002.XGPDESC initialAttributes; /* Gpc description*/
  set PB0KM002.YSMXDV initialAttributes; /* Division*/
  set PB0KM002.PC2CUXID initialAttributes; /* Cust xref*/
  set PB0KM002.SY1STNBR initialAttributes; /* Style*/
  set PB0KM002.SY2CLRID initialAttributes; /* color*/
  set PB0KM002.XDMCD initialAttributes; /* Dimension code*/
  set PB0KM002.PC4ORTYP initialAttributes; /* P.O. type code*/
  set PB0KM002.XPRCD initialAttributes; /* Product type code*/
  set PB0KM002.XPCCD initialAttributes; /* Product category code*/
  set PB0KM002.XPLCD initialAttributes; /* Product line code*/
  set PB0KM002.PC6XCTCD initialAttributes; /* Destination country*/
  set PB0KM002.XCTCD initialAttributes; /* Manufacturing country*/
  set PB0KM002.PB0KM-PO-ID-YY initialAttributes;
  set PB0KM002.PB0KM-PO-ID-PM initialAttributes;
  set PB0KM002.PB0KM-PO-ID-DM initialAttributes;
  set PB0KM002.FY1FCTYC initialAttributes; /* Factory*/
  set PB0KM002.OP1CUOID initialAttributes; /* Order number*/
  set PB0KM002.OP1NORID initialAttributes; /* Nike order number*/
  set PB0KM002.KUCCOID initialAttributes; /* Customer number*/
  set PB0KM002.KUMSTRID initialAttributes; /* Customer number*/
  set PB0KM002.XNXCD initialAttributes; /* Department number*/

  PB0KW00.PB0KW-IX2 = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IX2 <= 12) /* Until screen is full*/

    set PB0KM002.PCBSITXT[PB0KW-IX2] initialAttributes;

    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment line index*/

  end

  set PB0KM002.CATOAP initialAttributes; /* TO application*/
  set PB0KM002.CAITEM initialAttributes; /* Application data*/


end // end PB0K-34000

// Verify the entered data
Function PB0K-35000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-MOD = "N"; /* ===> data modified*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0KW00.XXXPRCNM = "35000"; /* Module identification*/
    set PB0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack; /* Flow to converse map*/

  end

  if (PB0KW00.PB0KW-FSW == "I"
   || PB0KW00.PB0KW-FSW == "D")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Insure that at least one line of text was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IX2 = 12;
  while (PB0KW00.PB0KW-IX2 >= 1
   && PB0KM002.PCBSITXT[PB0KW-IX2] == " ")
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 - 1;
  end

  if (PB0KW00.PB0KW-IX2 == 0)
    PB0KW00.PB0KW-SWF = "N";
    PB0KW00.XXXPRCNM = "35000";
    set PB0KM002.PCBSITXT[1] cursor, bold;
    converseLib.validationFailed(464);
  else
    PB0KW00.PB0KW-SAVE-IX2 = PB0KW00.PB0KW-IX2;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if code is updated.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IX2 = 12;
  while (PB0KW00.PB0KW-IX2 >= 1)
    if (PB0KM002.PCBSITXT[PB0KW-IX2] != PB0KW00.PCBSITXT[PB0KW-IX2])
      PB0KW00.PB0KW-MOD = "Y";
    end
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 - 1;
  end

    /* ------------------------------------------------------------*/
     /* Verfiy that description is entered.*/
    /* ------------------------------------------------------------*/

  if (PB0KM002.PCASIDSC != VSTYSI01.PCASIDSC)
    PB0KW00.PB0KW-MOD = "Y";
    if (PB0KM002.PCASIDSC == " ") /* Description not entered*/
      PB0KW00.PB0KW-SWF = "N";
      PB0KW00.XXXPRCNM = "35000";
      set PB0KM002.PCASIDSC cursor, bold;
      converseLib.validationFailed(161);
    end
  end

    /* ------------------------------------------------------------*/
     /* If Status was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/


  if (PB0KM002.XXXSTAT != VSTYSI01.XXXSTAT)
    PB0KW00.PB0KW-MOD = "Y"; /* ===> data modified*/
    if (PB0KM002.XXXSTAT == "A"
     || PB0KM002.XXXSTAT == "I")
       /* next senetence*/
    else
      PB0KW00.PB0KW-SWF = "N";
      converseLib.validationFailed(37);
      PB0KW00.XXXPRCNM = "35000";
      set PB0KM002.XXXSTAT cursor, bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* **                                                        ***/
   /* ********************** End of PB0K-35000  *******************/
end // end PB0K-35000

// Process valid input request
Function PB0K-36000()
  /* ------------------------------------------------------------*/
  /* if enter was pressed, continue*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* enter not pressed*/
    PB0KW00.XXXPRCNM = "36000"; /* module id*/
    converseLib.validationFailed(4); /* pa/pf key pressed is not valid*/
    exit stack; /* exit to display map*/

  end

  PB0KM001.PB0KM-SEL[PB0KW-IXM] = " ";
  PB0KW00.PB0KW-SAVE-SI-NBR = VSTYSI01.PCASINBR;

  if (PB0KW00.PB0KW-FSW == "I")
    return;

  end

  if (PB0KW00.PB0KW-MOD == "N"
   && PB0KW00.PB0KW-FSW == "C")
    return;

  end


  XX0XS01(); /* Get current date/time*/

  VSTYSI01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSTYSI01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSTYSI01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  VSTYSI01.XGPCD = PB0KW00.XGPCD; /* Gpc code*/
  VSTYSI01.PCASINBR = PB0KW01.PCASINBR[PB0KW-IXM]; /* Spcl Inst nbr*/
  VSTYSI01.SY1STNBR = PB0KW01.PB0KM-STY[PB0KW-IXM];
  VSTYSI01.SY2CLRID = PB0KW01.PB0KM-CLR[PB0KW-IXM];
  PB0KW00.PB0KW-SALES-ORD-ID = PB0KW01.PB0KM-ORD[PB0KW-IXM];
  if (PB0KW00.PB0KW-ORD-ID == " ")
    VSTYSI01.OP1CUOID = 0;
    VSTYSI01.OP1NORID = 0;
  else
    VSTYSI01.OP1CUOID = PB0KW00.PB0KW-ORD-ID;
    VSTYSI01.OP1NORID = PB0KW00.PB0KW-NIKE-ID;
  end
  VSTYSI01.PCASIDSC = PB0KM002.PCASIDSC; /* Spcl Inst description*/
  VSTYSI01.XXXSTAT = PB0KM002.XXXSTAT; /* Status*/

  if (PB0KW00.PB0KW-FSW == "C")
    PB0K-36100(); /* Update dprodc.vstysi01*/

  else
    PB0K-36200(); /* Delete dprodc.vsitxt01*/

  end

  PB0KW00.PB0KW-IX2 = 1; /* Initialize index*/
  PB0KW00.PB0KW-EOC = "N"; /* Init end of cursor switch*/
  PCBREC.XGPCD = VSTYSI01.XGPCD;
  PCBREC.PCASINBR = VSTYSI01.PCASINBR;

  PB0K-36300(); /* Delete dprodc.vsitxt01*/

  if (PB0KW00.PB0KW-FSW == "C")
    while (PB0KW00.PB0KW-IX2 <= PB0KW00.PB0KW-SAVE-IX2)

      PCBREC.XGPCD = PB0KW00.XGPCD;
      PCBREC.PCASINBR = VSTYSI01.PCASINBR;
      PCBREC.PCBSISEQ = PB0KW00.PB0KW-IX2;
      PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
      PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PCBREC.PCBSITXT = PB0KM002.PCBSITXT[PB0KW-IX2];
      PCBREC.ZZZCHGCT = 0;
      PB0K-26300(); /* Add dprodc.vsitxt01*/

      PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment index*/

    end
  end

  PCWREC.XXXMSGNO = 1;
  PB0KW00.PB0KW-SWR = "Y";
  PB0KW00.PB0KW-SWF = "Y";

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

end // end PB0K-36000

// Update dprodc.vstysi01
Function PB0K-36100()
   /* ------------------------------------------------------------*/
   /* Update the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("U ", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "36100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TO DPRODC.VSTYSI01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSTYSI01.VSTYSI01-GROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-36100

// Delete dprodc.vstysi01
Function PB0K-36200()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6450" ("D ", SQLCA, VSTYSI01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "36200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELTE ROW DPRODC.VSTYSI01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSTYSI01.VSTYSI01-GROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-36200

// Delete dprodc.vsitxt01
Function PB0K-36300()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("D ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "36300"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW DPRODC.VSITXT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-36300

// Process Nike Select Screen
Function PB0K-40000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* The request for data is yes*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PB0K-41000(); /* Obtain the data to display*/
  end

  PB0K-42000(); /* Format and display the map*/

  PB0K-43000(); /* Check attention identifier*/

  PB0K-44000(); /* Reset fields to normal intensity*/

  PB0K-45000(); /* Verify the entered data*/

  PB0K-46000(); /* Process valid input request*/


end // end PB0K-40000

// Obtain the data to display
Function PB0K-41000()
   /* ------------------------------------------------------------*/
     /* Set up the header information from the pcarec table.*/
     /* Select and open the cursor for the set to be formatted.*/
     /* Fetch and format the data in working storage.*/
     /* At end of rows, close the selected set cursor.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  PB0K-41100(); /* Purge temp storage*/

  set PCAREC empty; /* Clear table record*/

  PCAREC.XGPCD = PB0KW00.XGPCD;
  PCAREC.YSICD = "GN";

  PB0K-41200(); /* Select set and open the cursor*/

  PB0KW00.PB0KW-EOC = "N"; /* Initialize end of file switch*/
  PB0K-41300(); /* Fetch next row*/

  PB0KW00.PB0KW-IX2 = 1; /* Initialize display line number*/

  while (PB0KW00.PB0KW-EOC == "N") /* Until end of set or problem found*/

    if (PB0KW00.PB0KW-IX2 <= 10) /* Page is full*/
      PB0KW03.PCASINBR[PB0KW-IX2] = PCAREC.PCASINBR;
      PB0KW03.PCASIDSC[PB0KW-IX2] = PCAREC.PCASIDSC;
      PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1;
    else
      PB0K-41500(); /* Add page to temporary storage*/
      PB0KW00.PB0KW-SWR = "N"; /* Request for data completed*/
      PB0KW03.PCASINBR[PB0KW-IX2] = PCAREC.PCASINBR;
      PB0KW03.PCASIDSC[PB0KW-IX2] = PCAREC.PCASIDSC;
    end

    PB0K-41300(); /* Fetch next row*/

  end

  PB0K-41400(); /* Close the selected set cursor*/

  if (PB0KW00.PB0KW-IX2 > 1) /* Some of the page was formatted*/
    PB0K-41500(); /* Add page to temporary storage*/
    PB0KW00.XXXTSPAG = 1; /* Initialize page number*/
    PB0KW00.PB0KW-SWR = "N"; /* Request for data completed*/
  end

  if (PB0KW00.TA5TSQIX == 0) /* No data to display*/
    PB0KW00.XXXTSPAG = 0; /* Initialize page number*/
    PB0KW00.XXXPRCNM = "41000"; /* Process name*/
    set PCAREC empty; /* Clear record*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

  end

end // end PB0K-41000

// Purge any temporary storage
Function PB0K-41100()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  set PB0KW03 empty; /* Clear map working storage.*/

  TA5REC.TA5TSQIX = 0;
  PB0KW00.TA5TSQIX = 0;

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PB1K"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0KW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temp Storage*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* Error was found*/
    return; /* Return to previous process*/
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "41100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PB0K-41100

// Select set dprodc.vnkesi01
Function PB0K-41200()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("S1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "41100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VNKESI01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-41200

// Fetch dprodc.vnkesi01
Function PB0K-41300()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VSTYSI01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("N1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PB0KW00.PB0KW-EOC = "Y"; /* Indicate  end of cursor*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "41200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VNKESI01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-41300

// Close dprodc.vnkesi01
Function PB0K-41400()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("C1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0KW00.XXXPRCNM = "41300"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VNKESI01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-41400

// Add page to temporary storage
Function PB0K-41500()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/

  PB0KW03.XXXTSLEN = 340; /* Temporary storage length*/

  TA5REC.TA5APPID = "PB1K"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PB0KW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0KW03 empty; /* M003 display storage*/

    PB0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PB0KW00.PB0KW-IX2 = 1; /* Line index*/

    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "41500"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0K-41500

// Format and display the map
Function PB0K-42000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KW-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PB0KW00.PB0KW-SWF == "Y") /* Map must be formatted*/
      PB0K-42100(); /* Format the data on the map*/
    end

  end

  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0KM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0KM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PCWREC.XXXMSGNO != 0) /* Message to display*/

      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end /* Message number*/
    else
      PB0KM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PB0KM003.XXXPRCNM = PB0KW00.XXXPRCNM; /* Module identification*/

    set PB0KM003 alarm; /* Indicate sound alarm*/

  end

  set PB0KM003.YSMXDV skip; /* Division*/
  set PB0KM003.PC2CUXID skip; /* Cust xref*/
  set PB0KM003.SY1STNBR skip; /* Style*/
  set PB0KM003.SY2CLRID skip; /* color*/
  set PB0KM003.XDMCD skip; /* Dimension code*/
  set PB0KM003.PC4ORTYP skip; /* P.O. type code*/
  set PB0KM003.XPRCD skip; /* Product type code*/
  set PB0KM003.XPCCD skip; /* Product category code*/
  set PB0KM003.XPLCD skip; /* Product line code*/
  set PB0KM003.PC6XCTCD skip; /* Destination country*/
  set PB0KM003.XCTCD skip; /* Manufacturing country*/
  set PB0KM003.PB0KM-PO-ID-YY skip;
  set PB0KM003.PB0KM-PO-ID-PM skip;
  set PB0KM003.PB0KM-PO-ID-DM skip;
  set PB0KM003.FY1FCTYC skip; /* Factory*/
  set PB0KM003.OP1CUOID skip; /* Order number*/
  set PB0KM003.OP1NORID skip; /* Nike order number*/
  set PB0KM003.KUCCOID skip; /* Customer number*/
  set PB0KM003.KUMSTRID skip; /* Customer number*/
  set PB0KM003.XNXCD skip; /* Department number*/

  converse PB0KM003 ;

  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/

  PB0KW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PB0KM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0KM003.CAITEM; /* Application data*/

end // end PB0K-42000

// Format the selected data
Function PB0K-42100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/

  set PB0KM003 initial; /* M003 input/output area*/

  PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  PB0KM003.XGPCD = PB0KW00.XGPCD; /* Gpc code*/
  PB0KM003.XGPDESC = PB0KW00.XGPDESC; /* Gpc description*/
  PB0KM003.YSMXDV = PB0KW00.YSMXDV; /* Division*/
  PB0KM003.PC2CUXID = PB0KW00.PC2CUXID; /* Cust xref*/
  PB0KM003.SY1STNBR = PB0KW00.SY1STNBR; /* Style*/
  PB0KM003.SY2CLRID = PB0KW00.SY2CLRID; /* color*/
  PB0KM003.XDMCD = PB0KW00.XDMCD; /* Dimension code*/
  PB0KM003.PC4ORTYP = PB0KW00.PC4ORTYP; /* P.O. type code*/
  PB0KM003.XPRCD = PB0KW00.XPRCD; /* Product type code*/
  PB0KM003.XPCCD = PB0KW00.XPCCD; /* Product category code*/
  PB0KM003.XPLCD = PB0KW00.XPLCD; /* Product line code*/
  PB0KM003.PC6XCTCD = PB0KW00.PC6XCTCD; /* Destination country*/
  PB0KM003.XCTCD = PB0KW00.XCTCD; /* Manufacturing country*/
  PB0KW00.PB0KW-PO-ID = PB0KW00.PC3POIDT; /* group level*/
  PB0KM003.PB0KM-PO-ID-YY = PB0KW00.PB0KM-PO-ID-YY;
  PB0KM003.PB0KM-PO-ID-PM = PB0KW00.PB0KM-PO-ID-PM;
  PB0KM003.PB0KM-PO-ID-DM = PB0KW00.PB0KM-PO-ID-DM;
  PB0KM003.FY1FCTYC = PB0KW00.FY1FCTYC; /* Factory*/
  PB0KM003.OP1CUOID = PB0KW00.OP1CUOID; /* Order number*/
  PB0KM003.OP1NORID = PB0KW00.OP1NORID; /* Nike order number*/
  PB0KM003.KUCCOID = PB0KW00.KUCCOID; /* Customer number*/
  PB0KM003.KUMSTRID = PB0KW00.KUMSTRID; /* Customer number*/
  PB0KM003.XNXCD = PB0KW00.XNXCD; /* Department number*/

  /* ------------------------------------------------------------*/
  /* if we have just come back from a change and there is no data*/
  /* to display, set the last changed stat-sfx field to blanks in*/
  /* order by bypass the setting of the cursor routine which reads*/
  /* the TSQ.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.TA5TSQIX == 0) /* no data read ?*/

    set PB0KM003.PB0KM-SEARCH-KEY cursor;
    set PB0KM003.XXXLITPG invisible, skip; /* "PAGE" literal*/
    PB0KM003.XXXTSPAG = 0; /* Current page*/
    set PB0KM003.XXXLITOF invisible, skip; /* "OF" literal*/
    PB0KM003.TA5TSQIX = 0; /* Highest page*/

    return; /* Exit this process*/

  end


  /* ------------------------------------------------------------*/
  /* If the search key was entered, position the cursor on the*/
  /* row that is greater than the key.*/
  /* ------------------------------------------------------------*/

  if (PB0KW00.PB0KM-SEARCH-KEY > " ") /* Key entered*/
    PB0KW00.PB0KW-SAVE-KEY-FOUND = "N"; /* Init save key*/
    while (PB0KW00.PB0KW-SAVE-KEY-FOUND == "N") /* Until key found*/
      PB0K-42110(); /* Obtain temp storage*/
      PB0K-42120(); /* Locate save key*/
    end
    if (PB0KW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Not desired page*/
      PB0KW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Get desired page*/
      PB0K-42110(); /* read tsq page*/
    end
    set PB0KM003.XXXLITPG skip; /* "PAGE" literal*/
    PB0KM003.XXXTSPAG = PB0KW00.XXXTSPAG; /* Current page*/
    set PB0KM003.XXXLITOF skip; /* "OF" literal*/
    PB0KM003.TA5TSQIX = PB0KW00.TA5TSQIX; /* Highest page*/
    PB0KW00.PB0KM-SEARCH-KEY = " "; /* Clear search key*/
    PB0KM003.PB0KM-SEARCH-KEY = " ";
  else
    /* ------------------------------------------------------------*/
    /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (PB0KW00.XXXTSPAG > PB0KW00.TA5TSQIX) /* Desired greater highest*/
      PB0KW00.XXXTSPAG = PB0KW00.TA5TSQIX; /* Default to highest*/
    end
    PB0K-42110(); /* read tsq page*/

      /* ------------------------------------------------------------*/
      /* Display the page information on the screen.*/
      /* ------------------------------------------------------------*/

    set PB0KM003.XXXLITPG skip; /* "PAGE" literal*/
    PB0KM003.XXXTSPAG = PB0KW00.XXXTSPAG; /* Current page*/
    set PB0KM003.XXXLITOF skip; /* "OF" literal*/
    PB0KM003.TA5TSQIX = PB0KW00.TA5TSQIX; /* Highest page*/

  end


  PB0KW00.PB0KW-IX2 = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IX2 <= 10 /* Until screen is full*/
   && PB0KW03.PCASIDSC[PB0KW-IX2] > " ") /* and more rows*/

    PB0KM003.PCASIDSC[PB0KW-IX2] = PB0KW03.PCASIDSC[PB0KW-IX2];
    PB0KM003.PB0KM-SEL[PB0KW-IX2] = " ";
    set PB0KM003.PB0KM-SEL[PB0KW-IX2] normal;

    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment line index*/

  end

end // end PB0K-42100

// Read page from temp storage
Function PB0K-42110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0KW03.XXXTSLEN = 340; /* TS length*/
  TA5REC.TA5APPID = "PB1K"; /* Application identification*/
  TA5REC.TA5TSQIX = PB0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PB0KW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* Error was found*/
   && TA5REC.TA5RTNCD == 0)          /* Error was found*/
    return;
  end

  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0KW00.XXXPRCNM = "42110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end PB0K-42110

// Locate search key
Function PB0K-42120()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IXM = 1; /* Initialize index*/

  while (PB0KW00.PB0KW-IXM <= 10 /* Until key is found*/
   && PB0KW00.PB0KW-SAVE-KEY-FOUND == "N")

    if (PB0KW03.PCASIDSC[PB0KW-IXM] == " " /* no more rows*/
     || PB0KW03.PCASIDSC[PB0KW-IXM] >= PB0KW00.PB0KM-SEARCH-KEY)
      if (PB0KW00.PB0KW-IXM <= 1) /* Key not on page*/
        if (PB0KW00.XXXTSPAG == 1) /* first page*/
          PB0KW00.PB0KW-IXM = 1; /* Reset index*/
        else
          PB0KW00.PB0KW-IXM = 10; /* Index to last entry*/
          PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG - 1; /* decrement page*/
        end
      else
        if (PB0KW03.PCASIDSC[PB0KW-IXM] == PB0KW00.PB0KM-SEARCH-KEY)
          /* next sentence*/
        else
          PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM - 1; /* Decrement index*/
        end
      end
      set PB0KM003.PB0KM-SEL[PB0KW-IXM] cursor; /* Initial cursor*/
      PB0KW00.PB0KW-SAVE-KEY-FOUND = "Y"; /* Indicate page was found*/
    else
      PB0KW00.PB0KW-IXM = PB0KW00.PB0KW-IXM + 1; /* Increment index*/
    end
  end

  if (PB0KW00.PB0KW-SAVE-KEY-FOUND != "Y") /* Key not found*/
    if (PB0KW00.XXXTSPAG == PB0KW00.TA5TSQIX) /* Last page*/
      PB0KW00.PB0KW-IXM = 10; /* Set index to last entry*/
      set PB0KM003.PB0KM-SEL[PB0KW-IXM] cursor; /* Initial cursor*/
      PB0KW00.PB0KW-SAVE-KEY-FOUND = "Y"; /* Indicate page was found*/
    else
      PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG + 1; /* Increment page*/
    end
  end

end // end PB0K-42120

// Check attention identifier
Function PB0K-43000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0KW00.PB0KW-SWR = "N"; /* Request for data switch*/
    PB0KW00.PB0KW-SWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0KM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
      PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PB0KM003.CATOAP cursor, bold; /* Highlight*/
      PB0KM003.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0KW00.XXXPRCNM = "43000"; /* Module identification*/

    else

      PB0KW00.XXXPRCNM = "43000"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* or PF4 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3/PF21 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/
      PB0KW00.PB0KW-MAP = "1";
      PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
      PB0KW00.PB0KW-SWF = "Y"; /* Request for data*/
      exit stack;

    end

    if (converseVar.eventKey is pf21) /* Selection map requested*/
      COMMAREA.CATOAP = "PC0A";

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0G"; /* Application find code*/
    end

    PB0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0KW00.CAFROMAP;
    PCWREC.CAUSERA = PB0KW00.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PB0KM003.CATOAP cursor, bold; /* Highlight*/
    PB0KW00.XXXPRCNM = "43000"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* PF7    was not pressed*/
   && converseVar.eventKey not pf8)  /* PF8    was not pressed*/

    PB0KW00.XXXPRCNM = "43000"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pb0k-43000 ********************/
end // end PB0K-43000

// Reset field attributes
Function PB0K-44000()
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-IX2 = 1; /* Initialize line index*/

  while (PB0KW00.PB0KW-IX2 <= 10) /* Until screen is full*/

    set PB0KM003.PCASIDSC[PB0KW-IX2] initialAttributes;

    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 + 1; /* Increment line index*/

  end

end // end PB0K-44000

// Verify the entered data
Function PB0K-45000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  PB0KW00.PB0KW-MOD = "N"; /* Data modified flag*/
  PB0KW00.PB0KW-SELECTION-FLAG = "N"; /* ===> data modified*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0KW00.XXXPRCNM = "45000"; /* Module identification*/
    set PB0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    exit stack; /* Flow to converse map*/

  end

  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0KW00.XXXTSPAG < 2)       /* and no previous pages*/
    PB0KW00.XXXPRCNM = "45000"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    exit stack;

  end

  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0KW00.XXXTSPAG >= PB0KW00.TA5TSQIX) /* and no more pages*/
    PB0KW00.XXXPRCNM = "45000"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    exit stack;

  end

    /* ------------------------------------------------------------*/
     /* If enter was pressed and data was not modified, check for*/
     /* selection.*/
    /* ------------------------------------------------------------*/

  if (PB0KM003.PB0KM-SEARCH-KEY != PB0KW00.PB0KM-SEARCH-KEY)
    PB0KW00.PB0KM-SEARCH-KEY = PB0KM003.PB0KM-SEARCH-KEY;
    PB0KW00.PB0KW-MOD = "Y"; /* Data modified flag*/
    PB0KW00.PB0KW-SWF = "Y"; /* Format map switch*/

  end

  PB0KW00.PB0KW-IX2 = 10; /* Initialize index*/

  while (PB0KW00.PB0KW-IX2 > 0) /* Until end of lines*/
    if (PB0KM003.PB0KM-SEL[PB0KW-IX2] != " ") /* If selection not blank*/
      if (PB0KM003.PB0KM-SEL[PB0KW-IX2] == "S") /* Save the key*/
        PB0KW00.PB0KW-SELECTION-FLAG = "Y";
                                               /* Initialize selection flag*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        PB0KW00.XXXPRCNM = "45000"; /* Process name*/
        set PB0KM003.PB0KM-SEL[PB0KW-IX2] cursor, bold;
      end
    end
    PB0KW00.PB0KW-IX2 = PB0KW00.PB0KW-IX2 - 1; /* Decrement line index*/
  end
   /* **                                                        ***/
   /* ********************** End of PB0K-45000  *******************/
end // end PB0K-45000

// Process valid input request
Function PB0K-46000()
  /* ------------------------------------------------------------*/
  /* If a selection was made, set up flags and*/
  /* map to be displayed.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || PB0KW00.PB0KW-MOD == "Y")
    if (PB0KW00.PB0KW-MOD == "Y")
      PB0KW00.PB0KW-SWR = "N";
    end
    return;
  end

  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PB0KW00.PB0KW-SWF = "Y";
    PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/

  end

  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PB0KW00.PB0KW-SWF = "Y";
    PB0KW00.XXXTSPAG = PB0KW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/

  end

  if (PB0KW00.PB0KW-SELECTION-FLAG == "Y") /* Selection was made*/

    if ("S" in PB0KM003.PB0KM-SEL)
      PB0KW00.PCASINBR = PB0KW03.PCASINBR[sysVar.arrayIndex];
      PB0KW00.PB0KW-SWR = "Y"; /* Request for data*/
    else
      PB0KW00.PB0KW-SWR = "N"; /* Request for data*/
    end

  end

  PB0KW00.PB0KW-SWF = "Y"; /* yes format map*/
  PB0KW00.PB0KW-FSW = "A"; /* 'inquiry' function*/
  PB0KW00.PB0KW-MAP = "2"; /* Map to be displayed switch*/

end // end PB0K-46000

//*** RECORD=PB0KW00 ****
// *************** PG0K WORKING STORAGE ***********************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/24/92   GAMEN    New record.
// ***********************
Record PB0KW00 type basicRecord
  10 PB0KW-SWR PB0KW-SWR ; 
  10 PB0KW-SWF PB0KW-SWF ; 
  10 PB0KW-SELECTION-FLAG PB0KW-SELECTION-FLAG ; 
  10 PB0KW-ADD-SW PB0KW-ADD-SW ; 
  10 PB0KW-IXM PB0KW-IXM ; 
  10 PB0KW-IX2 PB0KW-IX2 ; 
  10 PB0KW-SAVE-IX2 PB0KW-SAVE-IX2 ; 
  10 PB0KW-EOC PB0KW-EOC ; 
  10 PB0KW-FSW PB0KW-FSW ; 
  10 PB0KW-MAP PB0KW-MAP ; 
  10 PB0KW-MOD PB0KW-MOD ; 
  10 PB0KW-SAVE-SI-NBR PB0KW-SAVE-SI-NBR ; 
  10 PB0KW-SAVE-KEY-FOUND PB0KW-SAVE-KEY-FOUND ; 
  10 PB0KM-SEARCH-KEY PB0KM-SEARCH-KEY ; 
  10 PB0KW-TABLE-KEY PB0KW-TABLE-KEY ; 
    15 PB0KW-TABLE-CODE PB0KW-TABLE-CODE ; 
    15 PB0KW-GPC-CODE PB0KW-GPC-CODE ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CAFROMAP CAFROMAP ; 
  10 PB0KW-SALES-ORD-ID PB0KW-SALES-ORD-ID ; 
    15 PB0KW-ORD-ID PB0KW-ORD-ID ; 
    15 PB0KW-ORD-DOT PB0KW-ORD-DOT ; 
    15 PB0KW-NIKE-ID PB0KW-NIKE-ID ; 
  10 PB0KW-PO-ID PB0KW-PO-ID ; 
    15 PB0KW-PO-ID-CC PB0KW-PO-ID-CC ; 
    15 PB0KM-PO-ID-YY PB0KM-PO-ID-YY ; 
    15 PB0KM-PO-ID-PM PB0KM-PO-ID-PM ; 
    15 PB0KM-PO-ID-DM PB0KM-PO-ID-DM ; 
  10 PB0KW-CUST-STOR-DEPT PB0KW-CUST-STOR-DEPT ; 
    15 PB0KW-CUST-NBR PB0KW-CUST-NBR ; 
    15 PB0KW-DOT-1 PB0KW-DOT-1 ; 
    15 PB0KW-STOR-NBR PB0KW-STOR-NBR ; 
    15 PB0KW-DOT-2 PB0KW-DOT-2 ; 
    15 PB0KW-DEPT-NBR PB0KW-DEPT-NBR ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 PCASINBR PCASINBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 YSMXDV YSMXDV ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XPRCD XPRCD ; 
  10 XPLCD XPLCD ; 
  10 XPCCD XPCCD ; 
  10 PCASIDSC PCASIDSC ; 
  10 PC6XCTCD PC6XCTCD ; 
  10 XCTCD XCTCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 XXXSTAT XXXSTAT ; 
  10 PB0KW-CUST-ORD-ID PB0KW-CUST-ORD-ID ; 
    15 * num(8) ; 
    15 PB0KW-ORD-PART-CHAR PB0KW-ORD-PART-CHAR ; 
  10 PB0KW-TEXT-GROUP PB0KW-TEXT-GROUP ; 
    15 PB0KW-SPCL-INST-NBR PB0KW-SPCL-INST-NBR [12] ; 
    15 PCBSITXT PCBSITXT [12] ; 
  10 CAUSERA CAUSERA ; 
end // end PB0KW00

//*** RECORD=PB0KW01 ****
// *************** PG0K MAP ONE STORAGE ***********************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/24/92   GAMEN    New record.
// ***********************
Record PB0KW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 PB0KW01-GROUP PB0KW01-GROUP [11] ; 
    10 XGPCD XGPCD ; 
    10 PCASINBR PCASINBR ; 
    10 PB0KM-CUS PB0KM-CUS ; 
    10 PB0KM-STY PB0KM-STY ; 
    10 PB0KM-CLR PB0KM-CLR ; 
    10 PB0KM-DIM PB0KM-DIM ; 
    10 PB0KM-TYP PB0KM-TYP ; 
    10 PB0KM-DST PB0KM-DST ; 
    10 PB0KM-MFG PB0KM-MFG ; 
    10 PB0KM-ORD PB0KM-ORD ; 
    10 PB0KM-STA PB0KM-STA ; 
    10 PB0KM-DSC PB0KM-DSC ; 
end // end PB0KW01

//*** RECORD=PB0KW03 ****
// ***************** PG0K MAP 3 STORAGE ***********************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/11/92   GAMEN    New record.
// ***********************
Record PB0KW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 PB0KW03-GROUP PB0KW03-GROUP ; 
    10 PCASINBR PCASINBR [10] ; 
    10 PCASIDSC PCASIDSC [10] ; 
end // end PB0KW03

//*** RECORD=VSTYSI01 ****
// ******* CUSTOMER/STYLE SPECIAL INSTRUCTIONS TABLE **********
// 
// DB2 TABLE VIEW:      DPRODC.VSTYSI01
// 
// COPYLIB MEMBER:      DCL01087
// 
// I/O MODULE:          IO6450
// 
// KEY TO DB2 TABLE:    XGPCD,
//                      PCASINBR
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/19/92   GAMEN    New record.
// ************************
Record VSTYSI01 type basicRecord
  5 VSTYSI01-GROUP VSTYSI01-GROUP ; 
    10 VSTYSI01-KEY VSTYSI01-KEY ; 
      15 XGPCD XGPCD ; 
      15 PCASINBR PCASINBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 YSMXDV YSMXDV ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 PCASIDSC PCASIDSC ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 XCTCD XCTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VSTYSI01

// COLOR
DataItem PB0KM-CLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUSTOMER XREF/NUMBER
DataItem PB0KM-CUS char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DIMENSION
DataItem PB0KM-DIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DESCRIPTION
DataItem PB0KM-DSC char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DESTINATION COUNTRY
DataItem PB0KM-DST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MANUFACTURING COUNTRY
DataItem PB0KM-MFG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SALES ORDER NUMBER
DataItem PB0KM-ORD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. id delivery month
DataItem PB0KM-PO-ID-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// p.o. id production month
DataItem PB0KM-PO-ID-PM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id year
DataItem PB0KM-PO-ID-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Search key
DataItem PB0KM-SEARCH-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STATUS
DataItem PB0KM-STA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE NUMBER
DataItem PB0KM-STY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. TYPE
DataItem PB0KM-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ADD OCCURED SWITCH
DataItem PB0KW-ADD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem PB0KW-CUST-NBR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer order id
DataItem PB0KW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust/stor/dept group level
DataItem PB0KW-CUST-STOR-DEPT char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept number
DataItem PB0KW-DEPT-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// '.' literal 1
DataItem PB0KW-DOT-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '.' literal 2
DataItem PB0KW-DOT-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// END OF CURSOR SWITCH
DataItem PB0KW-EOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FUNCTION SWITCH
DataItem PB0KW-FSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gpc code
DataItem PB0KW-GPC-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP INDEX 2
DataItem PB0KW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP INDEX
DataItem PB0KW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP NUMBER SWITCH
DataItem PB0KW-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DATA MODIFIED SWITCH
DataItem PB0KW-MOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike order id
DataItem PB0KW-NIKE-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// '.' literal
DataItem PB0KW-ORD-DOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order number
DataItem PB0KW-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Part char
DataItem PB0KW-ORD-PART-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id
DataItem PB0KW-PO-ID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem PB0KW-PO-ID-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales order group level
DataItem PB0KW-SALES-ORD-ID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVED MAP INDEX 2
DataItem PB0KW-SAVE-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save key found switch
DataItem PB0KW-SAVE-KEY-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SPECIAL INSTRUCTION NUMBER
DataItem PB0KW-SAVE-SI-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// SELECTION SWITCH
DataItem PB0KW-SELECTION-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SPECIAL INSTRUCTION NUMBER
DataItem PB0KW-SPCL-INST-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store number
DataItem PB0KW-STOR-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP FORMAT SWITCH
DataItem PB0KW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REQUEST FOR DATA SWITCH
DataItem PB0KW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table key code
DataItem PB0KW-TABLE-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem PB0KW-TABLE-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TEXT GROUP LEVEL
DataItem PB0KW-TEXT-GROUP char(768)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0KW01-GROUP char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level
DataItem PB0KW03-GROUP char(340)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VSTYSI01-GROUP char(106)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VSTYSI01-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

