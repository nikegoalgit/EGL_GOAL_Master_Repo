package pb0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0X ****
//                     P.P.R. Split
//                     ------------
// 
//    This program allows a user to perform P.O. split by
// ETS Date and/or Mode of Transportation.
//    The user will be able to get to the next selected row
// by pressing enter, and at the end will get a conformation
// of successful update. Hitting enter will then return to
// the previous screen.
//    The user will be able to transfer to other applications
// according to specified PF keys.
// 
// 
// 
// 
// 
// 
// ************************************************************
// **                                                        **
// *                                                          *
// *   DATE      NAME    DESCRIPTION OF CHANGE                *
// * --------   -------  ------------------------------------ *
// * 06/10/97   AELKIN   New application, cloned from PC0N.   *
// * 07/28/97   jniese   change io module task codes.
// * 10/21/97   jniese   pca414 - change to use fob from
// *                     original size record.
// * 04/16/98   KGRAHA   Initialize A/F nbr and A/F date on the
// *                     new Item rcd when splitting a PO.
// *                     Changes in PB0X730.
// * 08/04/98   KGRAHA   Correct select VPOSIZ02 code to Z
// *                     in PB0XS46.
// * 09/15/99   SBUNGO   CHANGED TO USE VIEW VPOITM04         *
// *                                                          *
// * 12/29/99   athela   y2k changes in pb0x580               *
// * 01/19/2000 vmatt    Cleaned up vpoitm03
// * 03/24/2000 SBUNGO   CHANGED TO USE VIEW VPOITM05
// * 04/14/2000 rmurth   corrected movements to
// *                     pc-rel-pln-ref-nbr
// * 05/17/2000 vramac   No spilt maintenace for SAP PO #
// *
// ************************************************************
// *********************
Program PB0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FYCREC FYCREC; // record
  PB0XW00 PB0XW00; // record
  PB0XW01 PB0XW01; // record
  PB0XW03 PB0XW03; // record
  PB0XW04 PB0XW04; // record
  PB0XW05 PB0XW05; // record
  PB0XW06 PB0XW06; // record
  PB0XW07 PB0XW07; // record
  PC5REC PC5REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFYPO002 VFYPO002; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  VPOTYP01 VPOTYP01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YACTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PB0XM.PB0XM001,  // forms
      PB0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0XM001 initial;

    set PB0XW00 empty;
    set PB0XW01 empty; /* ===> display/working storage record*/
    set PB0XW03 empty; /* ===> copy of pcwrec*/
    set PB0XW04 empty; /* ===> copy of selected item row before changes*/
    set PB0XW05 empty; /* ===> copy of selected item size row before changes*/
    set PB0XW06 empty; /* ===> copy of merge to item row*/
                                     /* (used for audits)*/
    set PB0XW07 empty; /* ===> copy of merge to item size row*/
                                     /* (used for audits)*/

    set VPOHDR02 empty;
    set PC5REC empty;
    set VPOITM05 empty;
    set VPOSIZ02 empty;
    set VPOAIT02 empty;
    set VPOASZ02 empty;
    set PCYREC empty;

    set FY1REC empty;
    set PG3REC empty;
    set TSOREC empty;
    set TSTREC empty;

    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PB0XW00.PB0XWSWR = "Y"; /* ===>request for data*/
    PB0XW00.PB0XWSWF = "Y"; /* ===>format map switch*/
    PB0XW00.PB0XWSWP = "N"; /* ===>format/protect map switch*/
    PB0XW00.PB0XWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PB0XW00.PB0XWMOD = "N"; /* ===>MODified data flag*/
    PB0XW00.PB0XW911 = "N"; /* ===>-911 flag*/
    PB0XW00.PB0XWUPF = "N"; /* ===>data base update flag*/
    PB0XW00.PB0XWTSY = 1; /* ===>total number of styles*/
    PB0XW00.PB0XWCSY = 1; /* ===>current style index*/
    PB0XW00.PB0XWIXS = 1; /* ===>size index*/

    PB0XW01.XGPCD = PCWREC.XGPCD;
    PB0XW03.XGPCD = PCWREC.XGPCD;
    PB0XW04.XGPCD = PCWREC.XGPCD;

    PB0XW00.PO-REG-CD = PCWREC.PO-REG-CD;

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end


    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end


     /* ------------------------------------------------------------*/
     /* Load the PC system common pass data to the display record*/
     /* and Set requested map*/
     /* ------------------------------------------------------------*/

    if (PB0XW00.PB0XWXIT == "N") /* ===>exit flag for invalid GPC*/

      if (COMMAREA.CAFROMAP == "PB0W") /* ===>item selection application*/

        PB0XW03.CAUSERA = PCWREC.CAUSERA; /* ===> save pass data*/
        /* ===> save style key pass data in "Display Rec 3"*/

        while (PB0XW00.PB0XWCSY <= 20
         && PCWREC.PC6ITMNB[PB0XWCSY] > 0)
          PB0XW03.PC6ITMNB[PB0XWCSY] = PCWREC.PC6ITMNB[PB0XWCSY];
          PB0XW00.PB0XWCSY = PB0XW00.PB0XWCSY + 1;
        end

        if (PB0XW00.PB0XWCSY > 1) /* ==> styles exist*/
          PB0XW00.PB0XWTSY = PB0XW00.PB0XWCSY - 1; /* ===>tot nbr of styles*/
          PB0XW00.PB0XWCSY = 1; /* ===>reset current style index*/
        else /* ==> no styles*/
          PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag for no seq nbrs*/
        end /* ==> style check*/

      else

        PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PB0XW00.PB0XWXIT = "Y"; /* ===>exit flag for no seq nbrs*/

      end

    end


     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0X001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PB0X001: PB0X001();
    goto PB0X001;
  end // end main
end // end PB0X


// ===> Application Main Line <==
Function PB0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* * Check to see if a SQL Code of -911 occurred in the*/
     /* obtain the data section.*/
      /* If it did set a 911 error flag so the program will*/
      /* process the same style for the user.*/

   /* * Check to see if the exit application flag was set.*/

   /* * Process Split Function Program Logic*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911
   && PB0XW00.PB0XWSWR == "Y") /* ===> request for data switch*/
    PB0XW00.PB0XW911 = "Y"; /* ===> set -911 flag*/
  else
    PB0XW00.PB0XW911 = "N"; /* ===> reset -911 flag*/
  end

  if (PB0XW00.PB0XWXIT == "Y")

    PB0XW00.CAFROMAP = COMMAREA.CAFROMAP;
    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0XW00.CAFROMAP;
    PB0XW00.PB0XWSWR = "N"; /* request for data switch*/
    PB0XW00.PB0XWSWF = "Y"; /* Format the map switch*/
    PB0XW00.XXXPRCNM = "PB0X001"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
    /* Process Split Function Program Logic*/
   /* ------------------------------------------------------------*/


  PB0X100(); /* Obtain the data to display*/

  PB0X200(); /* Format and display the map*/

  PB0X300(); /* Check attention identifier*/

  PB0X400(); /* Reset fields to normal intensity*/

  PB0X500(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0)
    PB0X600(); /* Process valid input request*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0X001 ***********************/
end // end PB0X001


// -->Obtain The Data To Display
Function PB0X100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  set PB0XM001 initial; /* ===> map display record*/
  set PB0XW01 empty; /* ===> map display record*/
  set PB0XW04 empty; /* ===> saved copy of Item record*/

  PB0X110(); /* ===> get data from P.O. Item Table*/

  PB0X120(); /* ===> calc. dates for display record*/

  PB0X130(); /* ===> get data from P.O. Size Table*/

  PB0X140(); /* ===> get data from Size Desc. Trans.*/
                                   /* subroutine*/

  PB0X160(); /* ===> get P.O. Header info*/

  PB0X170(); /* ===> save fob data*/

  PB0X180(); /* ===> calc. total value (QTY * FOB)*/

  PB0X190(); /* ===> calc the Balance to ship data*/

  PB0XS50(); /* ===> Get P.O. Type data*/


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWSWR = "N"; /* Request for data switch*/


   /* **                                                        ***/
   /* ********************** End of PB0X100 ***********************/
end // end PB0X100


// get data from P.O. Item Table
Function PB0X110()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOITM05.XGPCD = PB0XW03.XGPCD;
  VPOITM05.PC3PONBR = PB0XW03.PC3PONBR;
  VPOITM05.PC6ITMNB = PB0XW03.PC6ITMNB[PB0XWCSY];

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "ZA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0XS03(); /* ===> load display record "PB0XW01" from item row "VPOITM05"*/
    PB0XS04(); /* ===> save Split From item row*/

    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0X110"; /* Module identification*/
  set PB0XM001.CATOAP cursor, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> no data to display*/
    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0X110 ***********************/
end // end PB0X110


// calc. dates for display record
Function PB0X120()
   /* ------------------------------------------------------------*/
   /* ===> ETS date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PB0XS01(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PB0XM001.PB0XMEST cursor, skip, bold; /* ===>ETS Date display*/
      return;
    end

    PB0XW01.PB0XWDT1 = VPOITM05.PC6ETSDT; /* ===>ETS Date display*/
    PB0XW01.PB0XWSB1 = PB0XW01.PB0XWDT1;
                                  /* ===>split by ETS Date display*/

  else

    PB0XW01.PB0XWDT1 = " "; /* ===>ETS Date display*/

  end



   /* **                                                        ***/
   /* ********************** End of PB0X120 ***********************/
end // end PB0X120


// get data from P.O. Size Table
Function PB0X130()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOSIZ02.XGPCD = PB0XW01.XGPCD;
  VPOSIZ02.PC3PONBR = PB0XW01.PC3PONBR;
  VPOSIZ02.PC6ITMNB = PB0XW01.PC6ITMNB; /* ===> current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("Z ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0XS05(); /* ===>save copy split from size row*/
    /* ------------------------------------------------------------*/
     /* laod display record with siz data.*/
    /* ------------------------------------------------------------*/


    move 0 to PB0XW01.PB0XWSQT[1] for all; /* ===>load*/
    move VPOSIZ02.PC7ORDEQ to PB0XW01.PC7ORDEQ[1] for all; /* ===>load*/
    move VPOSIZ02.PC7FOBFL to PB0XW01.PC7FOBFL[1] for all; /* ===>load*/
    move VPOSIZ02.FY4FOBPR to PB0XW01.FY4FOBPR[1] for all; /* ===>load*/

    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0X130"; /* Module identification*/
  set PB0XM001.PC3PONBR cursor, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 18; /* =======> no data to display*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0X130 ***********************/
end // end PB0X130


// Get data from Size Desc Trans
Function PB0X140()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PB0XW01.XGPCD;
  PG3REC.SY1STNBR = PB0XW01.SY1STNBR;
  PG3REC.SY2CLRID = PB0XW01.SY2CLRID;
  PG3REC.XDMCD = PB0XW01.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301(); /* Get valid sizes*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    move PG3REC.SY4IDDSC to PB0XW01.SY4IDDSC[1] for 40; /* ===>load display record*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PB0XW00.XXXPRCNM = "PB0X140"; /* Module identification*/
  PB0XW00.PB0XWSWM = "1"; /* request for map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    PB0XW00.PB0XW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0X140 ***********************/
end // end PB0X140


// Select (z ) Unique VPOHDR02
Function PB0X160()
   /* ------------------------------------------------------------*/
   /* Initialize the secondary key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.PO-REG-CD = PB0XW00.PO-REG-CD;
  VPOHDR02.XGPCD = PB0XW01.XGPCD;
  VPOHDR02.PC3PONBR = PB0XW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Z ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PB0XW01.PC3CRDT = VPOHDR02.PC3CRDT;
    PB0XW01.XSECD = VPOHDR02.XSECD;
    PB0XW01.PCFSEYR = VPOHDR02.PCFSEYR;

    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0X160"; /* Module identification*/
  set PB0XM001.PC3PONBR skip, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PB0XW00.PB0XWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0X160 ***********************/
end // end PB0X160


// save fob data
Function PB0X170()
   /* ------------------------------------------------------------*/

   /* move fob info from size record to a work area.*/
   /* Note: The Override templete is made up of 3 arrays row*/

       /* PB0XW01.PB0XWVRD(PB0XWIXT)*/
        /* - loaded with po size Prices initially*/

       /* PB0XW01.PB0XWVRF(PB0XWIXT)*/
        /* - loaded with po size flags initially*/

       /* PB0XW01.PB0XWVRQ(PB0XWIXT)*/
        /* - accumulated on order QTYs for all items in item set*/

   /* ------------------------------------------------------------*/

  move "N" to PB0XW01.PB0XWVRF[1] for all; /* ===> initialize override flag*/
  move 0 to PB0XW01.PB0XWVRQ[1] for all; /* ===> initialize qtys*/


   /* ------------------------------------------------------------*/
   /* -  move FOB data asso. with the size row.*/
   /* -  Accumulate the total QTYs asso. with each row.*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWIXT = 1; /* ===> initialize temp. index*/

  while (PB0XW00.PB0XWIXT <= 40) /* Until all sizes read*/

    /* ------------------------------------------------------------*/
     /* accumulate FOB data asso. with the item row.*/
    /* ------------------------------------------------------------*/

    PB0XW01.PB0XWVRD[PB0XWIXT] = VPOSIZ02.FY4FOBPR[PB0XWIXT];
    PB0XW01.PB0XWVRF[PB0XWIXT] = VPOSIZ02.PC7FOBFL[PB0XWIXT];

    /* ------------------------------------------------------------*/
     /* accumulate the total on-order size QTYs asso. with each row*/
    /* ------------------------------------------------------------*/

    PB0XW00.PB0XWOR = VPOSIZ02.PC7ORDEQ[PB0XWIXT];
    PB0XW01.PB0XWVRQ[PB0XWIXT] = PB0XW01.PB0XWVRQ[PB0XWIXT] +     PB0XW00.PB0XWOR;
    PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1; /* ===> increment temp. index*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X170 ***********************/
end // end PB0X170


// Calc. the total value for QTYs
Function PB0X180()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all the valued size quanitites*/

   /* Programming Note:*/

           /* PB0XW00.PB0XWVAL is used to calculate the value*/
            /* (accum value)   on a single size level.*/

           /* PB0XW01.PB0XWTVL is used to calculate the total*/
            /* (total value)   value for all sizes and thus is*/
                            /* saved in the map display record.*/
                            /* It is recalculate when maintenance*/
                            /* to Sizes or FOBs occur.*/

   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWIXS = 1; /* ===> Initialize size index*/

  PB0XW00.PB0XWVAL = 0; /* ===> initialize quantity value*/
  PB0XW01.PB0XWTVL = 0; /* ===> initialize total value*/

  while (PB0XW00.PB0XWIXS <= 40) /* ===> and size index at max*/

    if (PB0XW01.PC7ORDEQ[PB0XWIXS] > 0)

      PB0XW00.FY4FOBPR = PB0XW01.FY4FOBPR[PB0XWIXS];
      PB0XW00.PC7ORDEQ = PB0XW01.PC7ORDEQ[PB0XWIXS];

      PB0XW00.PB0XWVAL = PB0XW00.PC7ORDEQ * PB0XW00.FY4FOBPR;
      PB0XW01.PB0XWTVL = PB0XW01.PB0XWTVL + PB0XW00.PB0XWVAL;

    end

    PB0XW00.PB0XWIXS = PB0XW00.PB0XWIXS + 1;

  end

  PB0XW00.PB0XWIXS = 1; /* ===> re-Initialize size index*/

  PB0XW01.PB0XWTVL = PB0XW01.PB0XWTVL + PB0XW01.PC6MICHG;

   /* **                                                        ***/
   /* ********************** End of PB0X180 ***********************/
end // end PB0X180


// Set-up/get "Balance To Ship"
Function PB0X190()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  set PC5REC empty; /* ===> initialize record*/

  PC5REC.XGPCD = PB0XW01.XGPCD; /* ===>*/
  PC5REC.PO-REG-CD = PB0XW01.PO-REG-CD;
  PC5REC.PC3PONBR = PB0XW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/

  PC5REC.SY1STNBR = PB0XW01.SY1STNBR; /* ===>*/
  PC5REC.SY2CLRID = PB0XW01.SY2CLRID; /* ===>*/
  PC5REC.XDMCD = PB0XW01.XDMCD; /* ===>*/
  PC5REC.XQACD = PB0XW01.XQACD; /* ===>*/
  PC5REC.XOWCD = PB0XW01.XOWCD; /* ===>*/
  PC5REC.PC2INSEG = PB0XW01.PC2INSEG; /* ===>*/
  PC5REC.XPGCD = PB0XW01.XPGCD; /* ===>*/
  PC5REC.XUMCD = PB0XW01.XUMCD; /* ===>*/
  PC5REC.OP1PARTN = PB0XW01.OP1PARTN; /* ===> so #*/
  PC5REC.OP1CUOID = PB0XW01.OP1CUOID; /* ===> so #*/
  PC5REC.OP1NORID = PB0XW01.OP1NORID; /* ===> so #*/
  PC5REC.PC5ERFL = "N";

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  PC5REC.PC2CUXID = PB0XW01.PC2CUXID; /* ===>*/
  PC5REC.XWHCD = PB0XW01.XWHCD; /* ===>*/
  PC5REC.YMTCD = PB0XW01.YMTCD; /* ===>*/

  XPPC030-DRDA(); /* ===> call subroutine to calc. "Balance to Ship"*/

  move PC5REC.PC5BALC to PB0XW00.PB0XWBAL[1] for all;

   /* **                                                        ***/
   /* ********************** End of PB0X190 ***********************/
end // end PB0X190


// -->Format And Converse Map 1
Function PB0X200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PB0XW00.PB0XWSWF == "Y") /* ===> Map must be formatted*/

      if (PB0XW00.PB0XWSWP == "Y") /* ===> Map data must be protected*/

        PB0X220(); /* ===> Format all display data*/
                                   /* protected*/

      else

        /* ------------------------------------------------------------*/
         /* Clear the fields in the map storage area to be formatted.*/
        /* ------------------------------------------------------------*/

        set PB0XM001 initial;


        if (PB0XW01.PC6STAT == "CX"
         || PB0XW01.PC-SAP-PO-NBR > " ")
          PB0X220(); /* ===> Format all display data*/
                                   /* protected*/
        end

        /* ------------------------------------------------------------*/
         /* Format the map data, excluding size data*/
        /* ------------------------------------------------------------*/

        PB0X210(); /* ===> Format the literals*/

        PB0X230(); /* ===> Format the display data*/

        PB0X240(); /* ===> Format pass record fields*/
        /* ------------------------------------------------------------*/
         /* Reset flags for new Split request and size data*/
        /* ------------------------------------------------------------*/


        PB0XW00.PB0XWSWF = "N"; /* ===> Format the map switch*/
        PB0XW00.PB0XWSWS = "Y"; /* ===> sizes must be formatted*/
        PB0XW00.PB0XWF20 = "Y"; /* ===> first 20 sizes flag*/
        PB0XW00.PB0XWIXS = 1; /* ===> initialize size index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Format the map data, size data*/
    /* ------------------------------------------------------------*/

    if (PB0XW00.PB0XWSWS == "Y") /* ===> sizes must be formated*/

      if (PB0XW00.PB0XWSWP == "Y") /* ===> Map data must be protected*/

        PB0X250(); /* ===> Format the valued size display*/
                                   /* data*/
        /* ===================> protected*/
      else

        PB0X260(); /* ===> Format the valued size display*/
                                   /* data*/
        /* ===================> unprotected*/

        if (PB0XW01.PC6STAT == "CX"
         || PB0XW01.PC-SAP-PO-NBR > " ")
          PB0X250(); /* ===> Format the valued size display*/
                                   /* data protected*/
        end /* ===> protect map data switch*/

      end /* ===> protect map data switch*/

    end


  else /* ===>error detected*/

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0XM001.XXXPRCNM = PB0XW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (PB0XW00.XXXPRCNM == " " /* Module identification*/
     && PC5REC.XXXPRCNM > " ")  /* Module identification*/
      PB0XM001.XXXPRCNM = PC5REC.XXXPRCNM; /* Module identification*/
    end /* ===> error detected in "Balance to*/
                                   /* Ship" process*/

    set PB0XM001 alarm; /* Indicate sound alarm*/

  end


  converse PB0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0XW00.XXXPRCNM = " "; /* Module identification*/
  PB0XM001.XXXPRCNM = "PB0X"; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0X290(); /* ===> pop up window routine*/
  end

  COMMAREA.CATOAP = PB0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0XM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0X200 ***********************/
end // end PB0X200


// Format the literals
Function PB0X210()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PB0XM001.PB0XMCSY = PB0XW00.PB0XWCSY; /* ===> current style index*/
  PB0XM001.PB0XMTSY = PB0XW00.PB0XWTSY; /* ===> total styles*/

  if (PB0XW01.XGPCD == "02")

    if (PB0XW01.PC4ORTYP == "FT"
     || PB0XW01.PC4ORTYP == "OR"
     || PB0XW01.PC4ORTYP == "S1"
     || PB0XW01.PC4ORTYP == "S4")
      set PB0XM001.PB0XMSL2 skip, invisible; /* ===> Split literal 2 "MODE"*/
    end

  end

  set PB0XM001.PB0XMPLL skip, invisible; /* ===> NEW PLAN LITERAL*/


  if (COMMAREA.CACLVL[10] == "N") /* ===> Price security flag*/
    set PB0XM001.PB0XMTTL skip, invisible; /* ====>  Total value literal*/
    set PB0XM001.PB0XMTVL skip, invisible; /* ====>  Total Value*/
  end

  if (PB0XW01.XGPCD != "03")
    set PB0XM001.PB0XMMCH skip, invisible; /* ====>  Misc charges literal*/
    set PB0XM001.PC6MICHG skip, invisible; /* ====>  Misc charges*/
  end

   /* ======================================================*/
   /* 12/11/90 - A51 - To activate misc charges, delete the*/
              /* following two lines of code.  ppeter.*/
  set PB0XM001.PB0XMMCH skip, invisible; /* ====>  Misc charges literal*/
  set PB0XM001.PC6MICHG skip, invisible; /* ====>  Misc charges*/
     /* A51 - to activate misc charges, delete the*/
           /* above two lines of code (and these comments).*/
   /* ======================================================*/
   /* **                                                        ***/
   /* ********************** End of PB0X210 ***********************/
end // end PB0X210


// Format data protected
Function PB0X220()
   /* ------------------------------------------------------------*/
   /* Format the data in the map protected for display on a*/
   /* conformation update.*/
   /* ------------------------------------------------------------*/

  set PB0XM001.CATOAP cursor; /* ====>*/

  set PB0XM001.PB0XMSB1 skip; /* ====>  Split by 1 ETS Date*/


  if (PB0XW01.XGPCD == "03")
    set PB0XM001.PB0XMSB2 skip; /* ====>  Split By 2 (Mode)*/
  end

  set PB0XM001.PB0XMSPT skip; /* ====>  Split By Total New quantity*/
  set PB0XM001.YACCD skip; /* ====>  Audit comment*/

  if (PB0XW01.PC6STAT == "CX"
   || PB0XW01.PC6STAT == "FC"
   || PB0XW01.PC6STAT == "NC")
    PCWREC.XXXMSGNO = 164; /* ====> can not change item's qtys*/
    PB0XW00.XXXPRCNM = "PB0X220"; /* Module identification*/
  end

  if (PB0XW01.PC-SAP-PO-NBR > " ")
    if (PCWREC.XXXMSGNO != 1)
      PCWREC.XXXMSGNO = 582; /* ====> can't do split for SAP PO#*/
      PB0XW00.XXXPRCNM = "PB0X220"; /* Module identification*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of PB0X220 ***********************/
end // end PB0X220


// Format the data (not sizes)
Function PB0X230()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Map ---> PB0XM001 ( the Header Info)*/
   /* ------------------------------------------------------------*/

  PB0XS02(); /* ===> load header data*/

   /* ------------------------------------------------------------*/
   /* Map ---> PB0XM001 (Load Split from fields) (non modifiable)*/
   /* ------------------------------------------------------------*/

  PB0XM001.PB0XMTVL = PB0XW01.PB0XWTVL; /* => Total Value*/
  PB0XM001.PB0XMQTY = PB0XW01.PC6TORDE; /* => Total Quantity*/

  PB0XM001.PC6MICHG = PB0XW01.PC6MICHG; /* => Misc charges*/

  PB0XM001.PB0XMEST = PB0XW01.PB0XWDT1; /* => ETS map display*/
  PB0XM001.PB0XMMOD = PB0XW01.YMTCD; /* => Mode*/


   /* ------------------------------------------------------------*/
   /* Map ---> PB0XM001 (Load Split by fields) (split to)*/
   /* ------------------------------------------------------------*/

  PB0XM001.PB0XMSB1 = PB0XW01.PB0XWSB1; /* ==> Split By 1 (ETS Date)*/
  PB0XM001.PB0XMSB2 = PB0XW01.PB0XWSB2; /* =====> Split By 2 (Mode)*/

   /* ********************** End of PB0X230 ***********************/
end // end PB0X230


// Format the pass record data
Function PB0X240()

   /* ------------------------------------------------------------*/
   /* If Unit of measure code, from pass record*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XUMCD > " ")
    set PB0XM001.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XPGCD > " ")
    set PB0XM001.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.PC2INSEG > " ")
    set PB0XM001.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XOWCD > " ") /* owner group code*/
    set PB0XM001.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XQACD > " ") /* quality code*/
    set PB0XM001.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XDMCD > " ")
    set PB0XM001.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.PC2CUXID > " ")
    set PB0XM001.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, from pass record*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.PC6ETSDT > 0)
    set PB0XM001.PB0XMETS skip, bold;
  end


   /* ------------------------------------------------------------*/
   /* If Trans mode, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.YMTCD > " ")
    PB0XM001.YMTCD = PB0XW03.YMTCD;
    set PB0XM001.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.XWHCD > " ")
    set PB0XM001.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.PC6PLAN > 0)
    set PB0XM001.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.SY2CLRID > " ")
    set PB0XM001.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PB0XW03.SY1STNBR > " ")
    set PB0XM001.SY1STNBR skip, bold;
  end


   /* ------------------------------------------------------------*/
   /* P.O. Number and Region, always valued, from pass record*/
   /* ------------------------------------------------------------*/

  set PB0XM001.PC3PONBR skip, bold;

  set PB0XM001.PO-REG-CD skip, bold;


   /* **                                                        ***/
   /* ********************** End of PB0X240 ***********************/
end // end PB0X240


// Format existing sizes protect
Function PB0X250()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWSWS = "N"; /* ===> format map sizes switch*/
  PB0XW00.PB0XWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PB0XW00.PB0XWIXM <= 20 /* ===> Until size screen is full*/
   && PB0XM001.SY4IDDSC[PB0XWIXM] > " ")

    set PB0XM001.PB0XMSQT[PB0XWIXM] skip; /* ==>new quantity*/
    PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/


  if (PB0XW00.PB0XWIXM <= 11) /* ===> size screen only half full*/
    set PB0XM001.PB0XMSZL[2] skip, invisible; /* ===> size literal*/
    set PB0XM001.PB0XMAML[2] skip, invisible; /* ===> new amount literal*/
    set PB0XM001.PB0XMORL[2] skip, invisible; /* ===> on order literal*/
    set PB0XM001.PB0XMFBL[2] skip, invisible; /* ===> FOB Literal*/
  end

  while (PB0XW00.PB0XWIXM <= 20) /* ===> Until size screen is full*/
    set PB0XM001.PB0XMSQT[PB0XWIXM] skip, invisible;
    PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment line index*/
  end



   /* **                                                        ***/
   /* ********************** End of PB0X250 ***********************/
end // end PB0X250


// Format existing sizes unprotec
Function PB0X260()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PB0XM001.PB0XMASK[1] for 20; /* ===> Initialize FOB ORVD ID*/
  move " " to PB0XM001.SY4IDDSC[1] for 20;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PB0XM001.PB0XMSQT[1] for 20;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PB0XM001.PB0XMOQT[1] for 20; /* ===> Initialize map "on order qty"*/
  move 0 to PB0XM001.PB0XMFOB[1] for 20;
                                   /* ===> Initialize map "FOB price"*/
  PB0XW00.PB0XWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PB0XW00.PB0XWIXM <= 20 /* ===> Until size screen is full*/
   && PB0XW00.PB0XWIXS <= 40) /* ===> and size index at max*/

    if (PB0XW01.PC7ORDEQ[PB0XWIXS] > 0)


      PB0XM001.SY4IDDSC[PB0XWIXM] = PB0XW01.SY4IDDSC[PB0XWIXS];
      PB0XM001.PB0XMSQT[PB0XWIXM] = PB0XW01.PB0XWSQT[PB0XWIXS];
      PB0XM001.PB0XMOQT[PB0XWIXM] = PB0XW01.PC7ORDEQ[PB0XWIXS];

      set PB0XM001.SY4IDDSC[PB0XWIXM] initialAttributes; /* ===> size desc.*/
      set PB0XM001.PB0XMSQT[PB0XWIXM] initialAttributes; /* ===> split QTY request*/
      set PB0XM001.PB0XMOQT[PB0XWIXM] initialAttributes; /* ===> On-order QTY request*/

      if (COMMAREA.CACLVL[10] == "Y") /* ===> FOB Security inquiry flag*/


        if (PB0XW00.PB0XWIXM == 1 /* ==> first display position*/
         || PB0XW01.PB0XWVRD[PB0XWIXS] != PB0XW00.PB0XWCB1
         /* ==> previous price*/
         || PB0XW01.PB0XWVRF[PB0XWIXS] != PB0XW00.PB0XWCB2)
                                   /* ==> previous price*/

          PB0XW00.PB0XWCB1 = PB0XW01.PB0XWVRD[PB0XWIXS];
                                   /* ==> previous price*/
          PB0XW00.PB0XWCB2 = PB0XW01.PB0XWVRF[PB0XWIXS];
                                   /* ==> previous price*/

          if (PB0XW01.PB0XWVRF[PB0XWIXS] == "Y") /* ===> FOB override flag*/
            set PB0XM001.PB0XMFOB[PB0XWIXM] skip, bold;
            PB0XM001.PB0XMFOB[PB0XWIXM] = PB0XW01.PB0XWVRD[PB0XWIXS];
            PB0XM001.PB0XMASK[PB0XWIXM] = "*";
          else /* ===> no override price*/
            PB0XM001.PB0XMFOB[PB0XWIXM] = PB0XW01.PB0XWVRD[PB0XWIXS];
            set PB0XM001.PB0XMFOB[PB0XWIXM] skip;
          end /* ===>QTYs > 0*/

        else /* ===> suppress FOB Price*/
          set PB0XM001.PB0XMFOB[PB0XWIXM] skip, invisible;
        end /* ===> control break check for FOB*/
                                   /* Suppression*/

      else /* ===> lack of security*/

        set PB0XM001.PB0XMFOB[PB0XWIXM] skip, invisible;

      end /* ===> security check*/


      PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment line index*/

    end

    PB0XW00.PB0XWIXS = PB0XW00.PB0XWIXS + 1; /* ===>Increment size index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/


  set PB0XM001.PB0XMAML[1] skip, invisible; /* ===> new amt Literal*/
  set PB0XM001.PB0XMAML[2] skip, invisible; /* ===> new amt Literal*/

  if (PB0XW00.PB0XWIXM <= 11) /* ===> size screen half full*/
    set PB0XM001.PB0XMSZL[2] skip, invisible; /* ===> size literal*/
    set PB0XM001.PB0XMORL[2] skip, invisible; /* ===> on order literal*/
    set PB0XM001.PB0XMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PB0XM001.PB0XMSZL[2] initialAttributes; /* ===> size literal*/
    set PB0XM001.PB0XMORL[2] initialAttributes; /* ===> on order literal*/
    set PB0XM001.PB0XMFBL[2] initialAttributes; /* ===> FOB Literal*/
  end

  while (PB0XW00.PB0XWIXM <= 20) /* Until size screen is full*/
    set PB0XM001.SY4IDDSC[PB0XWIXM] skip, invisible;
    set PB0XM001.PB0XMSQT[PB0XWIXM] skip, invisible;
    set PB0XM001.PB0XMOQT[PB0XWIXM] skip, invisible;
    set PB0XM001.PB0XMFOB[PB0XWIXM] skip, invisible;
    PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment line index*/
  end


   /* **                                                        ***/
   /* ********************** End of PB0X260 ***********************/
end // end PB0X260


// Pop-up window routine
Function PB0X290()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0XM001.PB0XMSB2 == "?" /* ===> Mode of Trans*/
   || PB0XM001.YACCD == "?")  



    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0XM001.PB0XMSB2 == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0XM001.PB0XMSB2 = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PB0XM001.PB0XMSB2 = PB0XW01.PB0XWSB2; /* ===> reset map field*/
      end
    end



    /* ------------------------------------------------------------*/
            /* Audit Comment Table Window*/
    /* ------------------------------------------------------------*/

    if (PB0XM001.YACCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " AUDIT COMMENT TABLE    "; /* heading*/
      XX0XW02.XGPCD = PB0XW01.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYAC01(); /* perform Audit comment  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0XW01.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PB0XM001.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PB0XM001.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* move code*/
      else
        PB0XM001.YACCD = PB0XW01.YACCD; /* ===> reset map field*/
        if (PB0XM001.YACCD in YACTBL.YACCD)
          PB0XM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
        end

      end
    end

    converseLib.clearScreen();
     /* ===> restore the map*/

    converseLib.validationFailed(84); /* ===> press same key to process*/
                                   /* request*/
    PB0XW00.XXXPRCNM = "PB0X290";

    exit stack;

  end


   /* **                                                        ***/
   /* ********************** End of PB0X290 ***********************/
end // end PB0X290


// -->Check Attention Identifier
Function PB0X300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0XW00.PB0XWSWR == "Y") /* Request for data*/
      set PB0XW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0XW00.PB0XWSWR = "N"; /* Request for data switch*/
    PB0XW00.PB0XWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.CATOAP > " " /* FAST PATH was requested*/
   || PB0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PB0XW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PB0XW00.CAFROMAP;
      PCWREC.CAUSERA = PB0XW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PB0XM001.CATOAP cursor, bold; /* Highlight*/
      PB0XW00.XXXPRCNM = "PB0X300"; /* Module identification*/

    else

      PB0XW00.XXXPRCNM = "PB0X300"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/


    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      COMMAREA.CATOAP = COMMAREA.CAFROMAP;

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end


    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PB0XW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PB0XW00.CAFROMAP;
    PCWREC.CAUSERA = PB0XW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PB0XM001.CATOAP cursor, bold; /* Highlight*/
    PB0XW00.XXXPRCNM = "PB0X300"; /* Module identification*/


    exit stack; /* Exit to display map*/

  end



   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
  )                                 
    PB0XW00.XXXPRCNM = "PB0X300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0X300 ***********************/
end // end PB0X300


// -->Reset Highlighted Fields
Function PB0X400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XWSWP != "Y" /* ===> map not protected*/
   && PB0XW01.PC6STAT != "CX") /* ===> map not protected*/

    set PB0XM001.PB0XMQTY initialAttributes; /* ===> Total QTY     (split from row)*/
    set PB0XM001.PB0XMSPT initialAttributes; /* ===> New/Add Total (split to   row)*/

    if (PB0XW01.XGPCD == "03"
     || PB0XW01.XGPCD == "01"
     || PB0XW01.XGPCD == "07")
      set PB0XM001.PB0XMSB1 initialAttributes; /* ===> ETS map display*/
      set PB0XM001.PB0XMSB2 initialAttributes; /* ===> Mode of Transportation*/
    end

    set PB0XM001.YACCD initialAttributes; /* ===>  Audit code*/

    PB0XW00.PB0XWIXM = 1; /* ===> Initialize map size index*/

    while (PB0XW00.PB0XWIXM <= 20 /* ===> Until size screen is full*/
     && PB0XM001.SY4IDDSC[PB0XWIXM] > " ") /* ===> more sizes available*/

      set PB0XM001.PB0XMSQT[PB0XWIXM] initialAttributes; /* ===> split QTYs field*/

      PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment line index*/

    end

  end /* ===> map not protected check*/


  set PB0XM001.CATOAP initialAttributes; /* TO application*/
  set PB0XM001.CAITEM initialAttributes; /* Application data*/



   /* **                                                        ***/
   /* ********************** End of PB0X400 ***********************/
end // end PB0X400


// -->Verify The Entered Data
Function PB0X500()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do an EZEFLO and try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XW911 == "Y" /* ===> -911 SQL*/
   && PB0XW00.PB0XWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether application data was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.CAITEM > " ") /* Application data was entered*/

    PB0XW00.XXXPRCNM = "PB0X500"; /* Module identification*/
    set PB0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      PB0X510(); /* Verify scroll*/

    else

      if (PB0XW01.PC-SAP-PO-NBR > " ")

        return; /* ===========> map protected no edit*/
                                   /* required*/
      end

      if (PB0XW00.PB0XWSWP == "Y"
       || PB0XW01.PC6STAT == "CX")

        return; /* ===========> map protected no edit*/
                                   /* required*/

      end


      /* ------------------------------------------------------------*/
       /* If none of the fields changed, return to previous process.*/
       /* Highlight any application data that was entered & in error*/
      /* ------------------------------------------------------------*/


      /* ------------------------------------------------------------*/
       /* Verify the total quantities against the size quantities*/
       /* to validate the split request is valid*/
          /* Also do other process required in Size/QTY processing*/
      /* ------------------------------------------------------------*/

      PB0X529(); /* ===========> do initial split check*/

      if (converseVar.eventKey is enter
       && converseVar.validationMsgNum == 0)

        if (PB0XM001.PB0XMSB2 == PB0XW01.YMTCD /* ===> Mode of Trans*/
         && PB0XM001.PB0XMSB1 == PB0XW01.PB0XWDT1C) /* ===> ETS Date*/

          if (PB0XM001.PB0XMSPT > 0 /* ===>split total request*/
           || PB0XW00.PB0XWFL1 == "Y") /* ===> size Split QTYs requested*/

            PB0XS09(); /* ===> set appropriate fields bright*/

            PB0XW00.XXXPRCNM = "PB0X500"; /* Module identification*/
            converseLib.validationFailed(265); /* ===> Key split criteria not entered*/
            exit stack; /* ===========> no split requested*/

          else

            PB0XW00.PB0XWMOD = "N"; /* ===> reset modified data tag*/
            return; /* ===========> no split requested*/

          end /* ===> total split request check*/


        end

        PB0X520(); /* ===========> Verify tot QTYs/size*/
                                   /* QTYs*/

      end



      /* ------------------------------------------------------------*/
       /* If trans mode changed, verify the entered code.*/
      /* ------------------------------------------------------------*/

      if (PB0XM001.PB0XMSB2 != PB0XW01.PB0XWSB2
       || PB0XM001.PB0XMSB2 == " ")
        PB0X570(); /* =========> Verify trans mode*/
      end


    end /* ===> pf7/pf8 if statement*/

  end /* ===> no error messages*/

   /* ------------------------------------------------------------*/
   /* Verify the audit comment field if data has been modified.*/
   /* --->   It is required!!!*/
   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XWMOD == "Y" /* ===> modified data tag*/
   || PB0XM001.YACCD != PB0XW01.YACCD)

    PB0X590(); /* ===========> Verify audit comment*/

  end

   /* ------------------------------------------------------------*/
   /* If ETS Date was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.PB0XMSB1 != PB0XW01.PB0XWSB1) /* est time of shipment*/

    PB0X580(); /* ===========> Verify date*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


   /* *                                                          ***/
   /* *********************** End of PB0X500 ***********************/
end // end PB0X500


// Verify scroll request
Function PB0X510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll sizes back request*/
   && PB0XW00.PB0XWF20 == "Y")    /* ===>First 20 sizes are displayed*/

    PB0XW00.XXXPRCNM = "PB0X510"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous sizes to display*/
    converseLib.clearScreen();
    
    set PB0XM001.CATOAP cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll sizes forward request*/

    if (PB0XW00.PB0XWF20 == "Y") /* ===>First 20 sizes are displayed*/

      /* ------------------------------------------------------------*/
      /* Verify more sizes for scroll request*/
      /* - if a size is found,  the finder index is used as the*/
        /* positioning index.  It is loaded to the size index in*/
        /* Scroll Request module PB0X610.*/
      /* ------------------------------------------------------------*/

      PB0XW00.PB0XWIXF = PB0XW00.PB0XWIXS; /* ===>load Finder index*/

      while (PB0XW00.PB0XWIXF <= 40) /* ===> Until end of sizes*/

        if (PB0XW01.PC7ORDEQ[PB0XWIXF] > 0)
          PB0XW00.PB0XWF20 = "N"; /* ===>First 20 sizes are displayed*/
          return; /* ===> exit to process valid scroll request*/
        end

        PB0XW00.PB0XWIXF = PB0XW00.PB0XWIXF + 1;
                                   /* ===>Increment line index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* scroll request invalid because:*/
            /* 1) last 20 styles displayed*/
        /* or  2) no more sizes to display*/
    /* ------------------------------------------------------------*/

    PB0XW00.XXXPRCNM = "PB0X510"; /* Module identification*/
    converseLib.validationFailed(76); /* No more sizes to display*/
    converseLib.clearScreen();
    
    set PB0XM001.CATOAP cursor;
    return;

  end

   /* **                                                        ***/
   /* ********************** End of PB0X510 ***********************/
end // end PB0X510


// Verify Split QTYS request
Function PB0X520()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWIXM = 1; /* ===> Initialize map size index*/
  PB0XW00.PB0XWIXR = 0; /* ===> Initialize record size index*/
  PB0XW00.PB0XWQTY = 0; /* ===> Initialize QTY Accumulator*/
  PB0XW01.PB0XWTVL = 0; /* ===> Initialize QTY value Accumulator*/


  PB0X521(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* set-up to verify the size qty split*/
   /* ------------------------------------------------------------*/

  while (PB0XW00.PB0XWIXR <= 40) /* ===> Until size all processed*/

    PB0X522(); /* ===> verify size split QTYs changed*/

  end

  PB0XW01.PB0XWTVL = PB0XW01.PB0XWTVL + PB0XW01.PC6MICHG; /* =>add misc chg*/

  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* ===> no errors detected*/

    if (PB0XW00.PB0XWQTY != PB0XM001.PB0XMSPT) /* ===> QTY accum vs entered*/
      converseLib.validationFailed(64); /* ===> total of all sizes must match request*/
      PB0XW00.XXXPRCNM = "PB0X520";
      set PB0XM001.PB0XMSPT cursor, bold;

    else

      if (PB0XW00.PB0XWQTY == 0)

        converseLib.validationFailed(165); /* ===> total split QTYs must be > zero*/
        PB0XW00.XXXPRCNM = "PB0X520";
        set PB0XM001.PB0XMSPT cursor, bold;

      else

        if (PB0XW00.PB0XWQTY == PB0XW04.PC6TORDE)

          converseLib.validationFailed(266);
          PB0XW00.XXXPRCNM = "PB0X520";
          PB0XM001.PB0XMQTY = 0; /* ===> map display*/
          set PB0XM001.PB0XMQTY skip, bold; /* ===> map display*/
          set PB0XM001.PB0XMSPT cursor, bold;

        else

          /* ------------------------------------------------------------*/
           /* Successful verification of Total Split QTYs vs. Size QTYs*/
          /* ------------------------------------------------------------*/

          PB0XM001.PB0XMTVL = PB0XW01.PB0XWTVL; /* ===> new tot value*/

          if (PB0XW01.PB0XWSPT != PB0XM001.PB0XMSPT)

            PB0XW01.PB0XWSPT = PB0XW00.PB0XWQTY; /* => New/Add QTYs*/
            PB0XW01.PC6TORDE = PB0XW04.PC6TORDE - PB0XW00.PB0XWQTY;

            PB0XM001.PB0XMQTY = PB0XW01.PC6TORDE; /* ===> map display*/

            PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
            PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirm*/

          end /* ===> New/add QTY's field modified*/

        end /* ===> qtys split = total on order*/

      end /* ===> total qtys split must be > 0*/

    end /* ===> temp QTY accum vs entered check*/

  end /* ===> <ENTER> pressed and no errors*/


   /* **                                                        ***/
   /* ********************** End of PB0X520 ***********************/
end // end PB0X520


// get the next valued size
Function PB0X521()
   /* ------------------------------------------------------------*/
   /* Get the next valued size desc. from the display record*/
   /* ------------------------------------------------------------*/
  PB0XW00.PB0XWIXR = PB0XW00.PB0XWIXR + 1; /* ===>Increment rec size index*/

  while (PB0XW00.PB0XWIXR <= 40 /* ===> Until all sizes read*/
   && PB0XW01.SY4IDDSC[PB0XWIXR] == " ") /* ===> and valued size found*/

    PB0XW00.PB0XWIXR = PB0XW00.PB0XWIXR + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X521 ***********************/
end // end PB0X521


// accumulate QTYs for all sizes
Function PB0X522()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.SY4IDDSC[PB0XWIXM] == PB0XW01.SY4IDDSC[PB0XWIXR])

    if (PB0XM001.PB0XMSQT[PB0XWIXM] != 0
     || PB0XM001.PB0XMSQT[PB0XWIXM] != PB0XW01.PB0XWSQT[PB0XWIXR])

      if (PB0XM001.PB0XMSQT[PB0XWIXM] != PB0XW01.PB0XWSQT[PB0XWIXR])

        PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
        PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirmation flag*/
        PB0XW01.PB0XWSQT[PB0XWIXR] = PB0XM001.PB0XMSQT[PB0XWIXM];

      end

      if (PB0XW01.PB0XWSQT[PB0XWIXR] > 0) /* ===> split requested*/

        /* ------------------------------------------------*/
         /* Check for split error QTYs error*/
        /* ===>  split QTYs request (item/size)*/
        /* ===>  - balance to ship > qty to split*/
        /* ------------------------------------------------*/


        if (PB0XW01.PB0XWSQT[PB0XWIXR] > PB0XW00.PB0XWBAL[PB0XWIXR])
          if (PB0XM001.PB0XMMOD != PB0XM001.PB0XMSB2) /* mode changed*/

            converseLib.validationFailed(233); /* ===> QTYs split invalid*/
            PB0XW00.XXXPRCNM = "PB0X522";
            set PB0XM001.PB0XMSQT[PB0XWIXM] cursor, bold;

          end

        end /* ===> reduction error check*/

      end /* ===> split requested*/

      PB0XW00.PB0XWQTY = PB0XW00.PB0XWQTY + PB0XW01.PB0XWSQT[PB0XWIXR];

    end

    PB0X523(); /* ===> calculate total value (SUM)*/

    PB0X521(); /* ===> get next record size desc*/

    if (PB0XW00.PB0XWIXM < 20) /* ===> map size index*/
      PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment size index*/
    end

    return;


  end /* ===> map and record size desc match*/


   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.SY4IDDSC[PB0XWIXM] != PB0XW01.SY4IDDSC[PB0XWIXR])

    if (PB0XW01.PB0XWSQT[PB0XWIXR] > 0) /* ===> split by QTY request*/

      PB0XW00.PB0XWQTY = PB0XW00.PB0XWQTY + PB0XW01.PB0XWSQT[PB0XWIXR];

    end


    PB0X523(); /* ===> calculate total value (SUM)*/

    PB0X521(); /* ===> get next record size desc*/

    return;

  end


   /* *                                                          ***/
   /* *********************** End of PB0X522 ***********************/
end // end PB0X522


// calc. QTYs values all sizes
Function PB0X523()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all sizes*/
   /* ------------------------------------------------------------*/
  if (PB0XW01.PC7ORDEQ[PB0XWIXR] > 0)

    PB0XW00.FY4FOBPR = PB0XW01.FY4FOBPR[PB0XWIXR];
    PB0XW00.PB0XWSQT = PB0XW01.PB0XWSQT[PB0XWIXR];

    PB0XW00.PC7ORDEQ = PB0XW01.PC7ORDEQ[PB0XWIXR] - PB0XW00.PB0XWSQT;

    PB0XW00.PB0XWVAL = PB0XW00.PC7ORDEQ * PB0XW00.FY4FOBPR;
    PB0XW01.PB0XWTVL = PB0XW01.PB0XWTVL + PB0XW00.PB0XWVAL;

  end

   /* **                                                        ***/
   /* ********************** End of PB0X523 ***********************/
end // end PB0X523


// Do initial QTYs Split Check
Function PB0X529()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWIXM = 20; /* ===> Initialize map size index*/
  PB0XW00.PB0XWFL1 = "N"; /* ===>initialize temp flag*/

   /* ------------------------------------------------------------*/
   /* Do initial check on QTYs Split request to see if split*/
   /* request is grater than on-order QTY.*/
   /* ------------------------------------------------------------*/

  while (PB0XW00.PB0XWIXM >= 1
   && PB0XM001.SY4IDDSC[PB0XWIXM] == " ")
                                   /* ===> get last valued size desc*/

    PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM - 1;

  end /* ===> while more map sizes desc.*/

  while (PB0XW00.PB0XWIXM >= 1
   && PB0XM001.SY4IDDSC[PB0XWIXM] > " ")

    if (PB0XM001.PB0XMSQT[PB0XWIXM] > PB0XM001.PB0XMOQT[PB0XWIXM])
      set PB0XM001.PB0XMSQT[PB0XWIXM] cursor, bold; /* ==>new quantity*/
      converseLib.validationFailed(249); /* ===> QTYs split invalid*/
      PB0XW00.XXXPRCNM = "PB0X529";
    end /* ===> sizes QTYs split requested*/

    if (PB0XM001.PB0XMSQT[PB0XWIXM] > 0
     && PB0XW00.PB0XWFL1 == "N") /* ===>temp flag*/
      PB0XW00.PB0XWFL1 = "Y"; /* ===>temp flag*/

    end /* ===> sizes QTYs split requested*/

    PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM - 1;

  end /* ===> while more map sizes desc.*/


  if (PB0XW01.PB0XWSPT != PB0XM001.PB0XMSPT /* ===> Split requested*/
   && converseVar.validationMsgNum == 0)    /* ===> initial QTYs split request valid*/

    PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
    PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirm*/

  end



   /* **                                                        ***/
   /* ********************** End of PB0X529 ***********************/
end // end PB0X529


// Verify Trans Mode
Function PB0X570()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.PB0XMSB2 in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PB0XW01.PB0XWSB2 = PB0XM001.PB0XMSB2;
    PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
    PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0XW00.XXXPRCNM = "PB0X570"; /* Module identification*/
    set PB0XM001.PB0XMSB2 cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X570 ***********************/
end // end PB0X570


// Verify ETS Date
Function PB0X580()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.PB0XMSB1 not numeric)
    PB0XW00.XXXPRCNM = "PB0X580"; /* Module identification*/
    converseLib.validationFailed(38); /* ===> required/ invalid date*/
    set PB0XM001.PB0XMSB1 cursor, bold; /* Highlight*/
    return;
  end

  if (PB0XM001.PB0XMSB1 == "000000"
   || PB0XM001.PB0XMSB1 == " ")
    PB0XM001.PB0XMSB1 = " "; /* ===> ETS Split By Date map display*/
    if (PB0XW01.XGPCD == "03")
      PB0XW00.XXXPRCNM = "PB0X580"; /* Module identification*/
      converseLib.validationFailed(38); /* ===> required/ invalid date*/
    else

      if (PB0XM001.PB0XMSB1 != PB0XW01.PB0XWSB1)
        PB0XW01.PB0XWSB1 = " "; /* ===> ETS Date map display*/
        PB0XW01.PB0XWETS = 0; /* ===> ETS Date display record*/
        PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
        PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirmation flag*/
      end

    end
    return;
  end


   /* ------------------------------------------------------------*/
   /* date validation (ccyymmdd)*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2GRGGN = PB0XM001.PB0XMSB1;
  TA2REC.TA2DYAOD = 0;
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                  /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    if (TA2REC.TA2GRGGN != PB0XW01.PB0XWETS) /* if date entered*/
      if (PB0XW01.XGPCD == "03") /* (aprl)           was changed*/
        PB0XW00.PB0XWFDT = VGVar.currentShortGregorianDate;
        if (PB0XW00.PB0XWFYY > 56)
          PB0XW00.PB0XWFCC = 19;
        else
          PB0XW00.PB0XWFCC = 20;
        end
    /* IF PB0XW00.PB0XWFDT > TA2REC.TA2GRGEN;*/
        if (PB0XW00.PB0XWFDT > TA2REC.TA2GRGGN)
          PB0XW00.XXXPRCNM = "PB0X580";
          set PB0XM001.PB0XMSB1 cursor, bold;
          converseLib.validationFailed(409);
        end
      end
      PB0XW01.PB0XWETS = TA2REC.TA2GRGGN; /* ===> save ETS*/
      PB0XW01.PB0XWSB1 = PB0XM001.PB0XMSB1; /* ===> load dsply rec*/
    end

    PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
    PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PB0XW00.XXXPRCNM = "PB0X580"; /* Module identification*/
    set PB0XM001.PB0XMSB1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X580 ***********************/
end // end PB0X580


// Verify Audit Comment Code
Function PB0X590()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.YACCD == " ")
    PB0XW01.YACCD = " ";
    PB0XW00.XXXPRCNM = "PB0X590"; /* Module identification*/
    set PB0XM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/
    return;
  end

  if (PB0XM001.YACCD in YACTBL.YACCD /* Code in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PB0XM001.YACCD != PB0XW01.YACCD) /* Code in table*/
      PB0XW00.PB0XWUPF = "N"; /* ===> reset update conformation flag*/
      PB0XW01.YACCD = PB0XM001.YACCD;
      PB0XM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0XM001.YACDESC = " ";
    PB0XW00.XXXPRCNM = "PB0X590"; /* Module identification*/
    set PB0XM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X590 ***********************/
end // end PB0X590


// -->Process Valid Input Request
Function PB0X600()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PB0X610(); /* ===> Process scroll request*/

    if (converseVar.validationMsgNum == 0) /* ===> no errors detected*/
      PB0XW00.PB0XWSWS = "Y"; /* Format the map switch*/
      PB0XW00.PB0XWF20 = "Y"; /* first 20 sizes*/
      PB0XW00.PB0XWIXS = 1; /* initialize size index*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PB0X610(); /* ===> Process scroll request*/

    if (converseVar.validationMsgNum == 0) /* ===> no errors detected*/
      PB0XW00.PB0XWSWS = "Y"; /* Format the map switch*/
      PB0XW00.PB0XWF20 = "N"; /* first 20 sizes*/
      PB0XW00.PB0XWIXS = PB0XW00.PB0XWIXF; /* ===> load new size index*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* process the entered data and get new plan if any item*/
   /* key data has changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Selection map requested*/
  )                                
    if (PB0XW00.PB0XWMOD == "Y")

      if (PB0XW00.PB0XWUPF == "N") /* ===> update comfirmation flag*/

        /* ------------------------------------------------------------*/
          /* IF Item key data has changed. (Map's modifiable data)*/
           /* ---> get new plan and check if an item in plan is open*/
        /* ------------------------------------------------------------*/

        if (PB0XW01.PB0XWETS != PB0XW01.PC6ETSDT /* ===>  ETS Date*/
         || PB0XW01.PB0XWSB2 != PB0XW01.YMTCD)   /* ===> Mode of Trans.*/

          PB0X620(); /* ===> get plan for split to item row*/

        else /* ===> item key data changed*/

          set PB0XM001.PB0XMPLL initialAttributes; /* ===> show new plan literal*/
          PB0XM001.PB0XMPLN = PB0XW01.PC6PLAN; /* ===> Load new plan*/

        end /* ===> item key data changed*/

        /* ------------------------------------------------------------*/
          /* IF Item destination changed. (Map's modifiable data)*/
           /* ---> calculate direct ship code*/
           /* ---> calculate spec diff code and dest country*/
          /* else*/
           /* ---> reset direct ship code*/
           /* ---> reset spec diff code and dest country*/
        /* ------------------------------------------------------------*/


      end /* ===> conformation flag set check*/


      /* ------------------------------------------------------------*/
        /* if no errors, process data base update routine.*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0)
        PB0X700(); /* ===> Do data base update routine*/
      end /* ===> no errors detected*/

    end /* ===> modified data flag*/

  end /* ===> if ENTER*/


   /* ------------------------------------------------------------*/
   /* if enter was pressed*/
       /* Set up for the next style or transfer to the*/
       /* 'from' application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ===> next style requested*/
  )                                
    PB0XW00.PB0XWCSY = PB0XW00.PB0XWCSY + 1;

    if (PB0XW00.PB0XWCSY > PB0XW00.PB0XWTSY) /* ===> no more styles*/

      if (PB0XW00.PB0XWSWP == "Y" /* ===> protect switch is set*/
       || PB0XW00.PB0XWMOD == "N") /* ===> protect switch is set*/
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        PB0XW00.PB0XWXIT = "Y"; /* ===> exit application flag*/
      else
        PB0XW00.PB0XWSWF = "Y"; /* ===> format data*/
        PB0XW00.PB0XWSWS = "Y"; /* ===> format sizes*/
        PB0XW00.PB0XWSWP = "Y"; /* ===> protect data*/
        PB0XW00.PB0XWMOD = "N"; /* ===> modified data*/
      end

    else /* ===> set up for next style*/

      PB0XS99(); /* ===> re-initialize indexes & flags*/

    end

  end



   /* *                                                          ***/
   /* *********************** End of PB0X600 ***********************/
end // end PB0X600


// Verify Split QTYS request
Function PB0X610()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PB0XW00.PB0XWIXM = 1; /* ===> Initialize map size index*/
  PB0XW00.PB0XWIXR = 0; /* ===> Initialize record size index*/


  PB0X611(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* set-up to verify the size qty split*/
   /* ------------------------------------------------------------*/

  while (PB0XW00.PB0XWIXR <= 40) /* ===> Until size all processed*/

    PB0X612(); /* ===> verify size split QTYs changed*/

  end



   /* **                                                        ***/
   /* ********************** End of PB0X610 ***********************/
end // end PB0X610


// get the next valued size
Function PB0X611()
   /* ------------------------------------------------------------*/
   /* Get the next valued size desc. from the display record*/
   /* ------------------------------------------------------------*/
  PB0XW00.PB0XWIXR = PB0XW00.PB0XWIXR + 1; /* ===>Increment rec size index*/

  while (PB0XW00.PB0XWIXR <= 40 /* ===> Until all sizes read*/
   && PB0XW01.SY4IDDSC[PB0XWIXR] == " ") /* ===> and valued size found*/

    PB0XW00.PB0XWIXR = PB0XW00.PB0XWIXR + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X611 ***********************/
end // end PB0X611


// process scroll request
Function PB0X612()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.SY4IDDSC[PB0XWIXM] == PB0XW01.SY4IDDSC[PB0XWIXR])

    if (PB0XM001.PB0XMSQT[PB0XWIXM] != 0
     || PB0XM001.PB0XMSQT[PB0XWIXM] != PB0XW01.PB0XWSQT[PB0XWIXR])

      if (PB0XM001.PB0XMSQT[PB0XWIXM] != PB0XW01.PB0XWSQT[PB0XWIXR])

        PB0XW00.PB0XWMOD = "Y"; /* ===>modified data flag*/
        PB0XW00.PB0XWUPF = "N"; /* ===> reset update confirmation flag*/
        PB0XW01.PB0XWSQT[PB0XWIXR] = PB0XM001.PB0XMSQT[PB0XWIXM];

      end

      if (PB0XW01.PB0XWSQT[PB0XWIXR] > 0) /* ===> split requested*/

        /* ------------------------------------------------*/
         /* Check for split error QTYs error*/
        /* ===>  split QTYs request (item/size)*/
        /* ===>  - balance to ship > split qty*/
        /* ------------------------------------------------*/


        if (PB0XW01.PB0XWSQT[PB0XWIXR] > PB0XW00.PB0XWBAL[PB0XWIXR])
          if (PB0XM001.PB0XMMOD != PB0XM001.PB0XMSB2) /* mode changed*/

            converseLib.validationFailed(233); /* ===> QTYs split invalid*/
            PB0XW00.XXXPRCNM = "PB0X612";
            set PB0XM001.PB0XMSQT[PB0XWIXM] cursor, bold;

          end

        end /* ===> reduction error check*/

      end /* ===> split requested*/


      PB0XW00.PB0XWQTY = PB0XW00.PB0XWQTY + PB0XW01.PB0XWSQT[PB0XWIXR];

    end

    PB0X611(); /* ===> get next record size desc*/

    if (PB0XW00.PB0XWIXM < 20) /* ===> map size index*/
      PB0XW00.PB0XWIXM = PB0XW00.PB0XWIXM + 1; /* ===>Increment size index*/
    end

    return;


  end /* ===> map and record size desc match*/


   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PB0XM001.SY4IDDSC[PB0XWIXM] != PB0XW01.SY4IDDSC[PB0XWIXR])

    if (PB0XW01.PB0XWSQT[PB0XWIXR] > 0) /* ===> split by QTY request*/

      PB0XW00.PB0XWQTY = PB0XW00.PB0XWQTY + PB0XW01.PB0XWSQT[PB0XWIXR];

    end

    PB0X611(); /* ===> get next record size desc*/

    return;

  end


   /* **                                                        ***/
   /* ********************** End of PB0X612 ***********************/
end // end PB0X612


// get & load (new plan)
Function PB0X620()
   /* ------------------------------------------------------------*/
   /* Get the next available plan numberous process.*/
   /* with new plan number.*/
   /* ------------------------------------------------------------*/


  PB0X622(); /* ===> get highest plan available*/

   /* ===>increment plan number & load to display record*/
  PB0XW01.PB0XWPLN = PCYREC.PCYCOUNT + 1; /* ===> increment plan number*/
  PB0XM001.PB0XMPLN = PB0XW01.PB0XWPLN; /* ===> plan to map 1*/
  set PB0XM001.PB0XMPLL initialAttributes; /* ===> plan literal on map 1*/



   /* **                                                        ***/
   /* ********************** End of PB0X620 ***********************/
end // end PB0X620


// get max plan for new item row
Function PB0X622()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>pass row storage area*/

  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOITM05.XGPCD = PB0XW01.XGPCD;
  VPOITM05.PC3PONBR = PB0XW01.PC3PONBR; /* ===> P.O. NBR*/
  VPOITM05.SY1STNBR = PB0XW04.SY1STNBR;
  VPOITM05.SY2CLRID = "*";
  PCYREC.PCYFUNC = "H1"; /* ===> P.O. NBR*/

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PB0XW00.XXXPRCNM = "PB0X622"; /* Module identification*/
  set PB0XM001.CATOAP cursor;


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX (M1) PLAN   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0X622 ***********************/
end // end PB0X622


// ---> Process Database update
Function PB0X700()
   /* ------------------------------------------------------------*/
   /* check update confirmation flag*/
   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XWUPF == "N") /* ===>update flag*/
    PCWREC.XXXMSGNO = 84; /* ===>update confirmation message*/
    PB0XW00.XXXPRCNM = "PB0X700"; /* ===> module identification*/
    set PB0XM001.PB0XMSB1 cursor; /* ===>position cursor*/
    PB0XW00.PB0XWUPF = "Y"; /* ===>update flag*/
    exit stack;
  end

  if (PB0XW00.PB0XWUPF == "Y") /* ===>update flag*/

    PB0XW00.PB0XWUPF = "N"; /* ===>update flag*/

    XX0XS01(); /* ==> get current date and time for D.B. Updates*/

    /* ------------------------------------------------------------*/
      /* - Check to see if an item row exist*/
         /* ** YES ***/
         /* - perform merge item routine if it exists*/
             /* & update row with the new key and modified data*/
         /* ** NO  ***/
         /* - add new item/size to table with new seq nbr*/
     /* In all cases:*/
      /* - update old item/size with old seq nbr & QTY Reduction*/
    /* ------------------------------------------------------------*/


    PB0XS56(); /* ===> select (S ) row for existence*/

    if (PB0XW00.PB0XWMRG == "Y") /* ===> merge item's flag*/

      /* ------------------------------------------------------------*/
       /* row exists therefore merge is required*/
         /* - VPOITM04 is now the merge to row and is save in PB0XW06*/
         /* - load any changes made to the update record (total QTYS)*/
         /* - by using the new sequence number update the D.B.*/
         /* - if Merge/update was successful (item level)*/
           /* - the split QTYs will be moved to the existing row*/
      /* ------------------------------------------------------------*/

      PB0X710(); /* ===> process merge items routine*/

      PB0XS81(); /* ===> update (UA) item row*/

      PB0X720(); /* ===> perform merge the size QTYs*/


    else /* ===> merge item flag is "N"*/

      /* ------------------------------------------------------------*/
        /* Row did not exist, therefore insert the item in the D.B.*/
        /* use a new sequence number.*/
            /* -  create FOB Price Templete if customer changed*/
            /* -  create/insert new rows with new sequence number*/
            /* -  update old row with old sequence number*/
      /* ------------------------------------------------------------*/



      PB0XS90(); /* ===> get/load new sequence number*/


      PB0X730(); /* ===> load changes to the insert*/
                                   /* record*/

      PB0XS06(); /* ===> save "merge to" row*/

      PB0XS91(); /* ===> insert (A ) item row*/

      PB0X740(); /* ===> perform add the size QTYs*/

    end /* ===> SQL = 0 check*/

    /* ------------------------------------------------------------*/
     /* (merge/update or insert/add) was successful*/
     /* in all cases:*/
     /* the old item must be updated (total QTYs)*/
       /* - initialize the update record*/
       /* - load the old copy of the row to the update record*/
       /* - load total QTYs criteria to the update record*/
       /* - update the D.B.*/
     /* the old item's size QTYs must be reduced.*/
    /* ------------------------------------------------------------*/

    PB0X750(); /* ===> load split criteria to update record*/

    PB0XS81(); /* ===> update/ (UA) item row*/
    /* =============================> using the old sequence number*/

    PB0X760(); /* ===> process update (u ) item's size row*/

    PB0XS82(); /* ===> update (UA) size row*/
    /* =============================> using the old sequence number*/


    if (PB0XW01.XGPCD == "03")
      PB0X900(); /* ===> process "APPAREL" audits routine*/
    end


    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    PB0XW00.XXXPRCNM = "PB0X700"; /* Module identification*/
    PCWREC.XXXMSGNO = 1; /* ===> update successful*/

  end /* ===> confirm update flag*/

   /* **                                                        ***/
   /* ********************** End of PB0X700 ***********************/
end // end PB0X700


// Do process "MERGE" item logic
Function PB0X710()
   /* ------------------------------------------------------------*/
    /* process the merge of two item plans*/
   /* ------------------------------------------------------------*/

  PB0XS06(); /* ===> save merge to item row in*/
                                   /* PB0XW06*/

   /* ------------------------------------------------------------*/
      /* - check to see either changed/merge item is open*/
        /* - cannot merge plans if either item is not open*/
   /* ------------------------------------------------------------*/


  if (PB0XW06.PC6STAT != "OP" /* ===>check status*/
   || PB0XW04.PC6STAT != "OP") /* ===>check status*/

    PB0XW00.XXXPRCNM = "PB0X710"; /* Module identification*/
    converseLib.validationFailed(368); /* ===>cannot merging plans with current*/
                                   /* status*/
    exit stack; /* ===> exit to display error on the map*/

  end



   /* ------------------------------------------------------------*/
   /* Load merge data from changed item to existing item*/
   /* ------------------------------------------------------------*/

  PB0X713(); /* ===>merge data to update record*/

   /* **                                                        ***/
   /* ********************** End of PB0X710 ***********************/
end // end PB0X710


// Do "load" item data    "MERGE"
Function PB0X713()
   /* ------------------------------------------------------------*/
   /* Merge the split request, "Split From" Item's QTYs*/
      /* to the "Merge To" Item's QTYs*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  PB0XS16(); /* ===> load saved copy of merge to row to update rec*/

  VPOITM05.PC6TORDE = PB0XW06.PC6TORDE + PB0XW01.PB0XWSPT;
  VPOITM05.PC6TADD = PB0XW06.PC6TADD + PB0XW01.PB0XWSPT;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PB0X713 ***********************/
end // end PB0X713


// Process Size QTYs "Merge"
Function PB0X720()
   /* ------------------------------------------------------------*/
   /* Process the merge of two item's Size QTYs.*/
      /* Select the size row that will merged to*/
         /* if it exist proceed to update it*/
         /* else error*/
   /* ------------------------------------------------------------*/

  PB0XS46(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    PB0XS07(); /* ===> save merge to size row for*/
                                   /* audits in PB0XW07*/

    /* ------------------------------------------------------------*/
     /* load the sizes to the size record & do update call*/
       /* - the QTYs loaded to the merged row are on the display*/
         /* record.  (ie: the old item row being split from.)*/
    /* ------------------------------------------------------------*/


    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


    PB0XW00.PB0XWIXT = 1; /* ===>initialize temp index*/

    while (PB0XW00.PB0XWIXT <= 40) /* ===>until all sizes processed*/

      if (PB0XW01.PB0XWSQT[PB0XWIXT] > 0)

        if (VPOSIZ02.PC7ORDEQ[PB0XWIXT] == 0)
          VPOSIZ02.PC7FOBFL[PB0XWIXT] = PB0XW01.PC7FOBFL[PB0XWIXT];
          VPOSIZ02.FY4FOBPR[PB0XWIXT] = PB0XW01.FY4FOBPR[PB0XWIXT];
        end

        PB0XW00.PC7ORDEQ = PB0XW01.PB0XWSQT[PB0XWIXT];
        VPOSIZ02.PC7ORDEQ[PB0XWIXT] = VPOSIZ02.PC7ORDEQ[PB0XWIXT] + PB0XW00.PC7ORDEQ;

      end

      PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1;

    end


    PB0XS82(); /* ===> update size row*/

  else

    converseLib.validationFailed(12); /* ===> updated by another*/
    PB0XW00.XXXPRCNM = "PB0X720"; /* ===> process identification*/

    PB0XS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> ROLL BACK ALL CHANGES*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PB0X720 ***********************/
end // end PB0X720


// Do "Load" Item record "INSERT"
Function PB0X730()
   /* ------------------------------------------------------------*/
   /* Load modified data from map*/
   /* and related load data necessary for creating new item*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  PB0XS14(); /* ===> load the saved copy of the split*/
                                   /* from item row*/



  if (PB0XW01.PB0XWSB2 != PB0XW04.YMTCD) /* => mode Code*/
    VPOITM05.YMTCD = PB0XW01.PB0XWSB2; /* => mode Code*/
  end


  VPOITM05.PC6ETSDT = PB0XW01.PB0XWETS;
  VPOITM05.PC6PLAN = PB0XW01.PB0XWPLN; /* ===> new plan*/
  VPOITM05.PC6ITMNB = PB0XW01.PB0XWSEQ;
                                   /* ===> new item sequence numbet*/
  VPOITM05.XDSCD = PB0XW01.PB0XWXDS; /* ===> calculated direct ship*/
  VPOITM05.PC3SIFL = "N"; /* ===> Special Insruction flag*/



  VPOITM05.PC6AIRDT = 0;
  VPOITM05.PC6AIRNB = 0;
  VPOITM05.PC-NIKE-AFRGT-PCT = 0;
  VPOITM05.PC-FCTY-AFRGT-PCT = 0;

  VPOITM05.PC6TORIG = PB0XW01.PB0XWSPT; /* ===> split total QTYs*/
  VPOITM05.PC6TORDE = PB0XW01.PB0XWSPT;
  VPOITM05.PC6TADD = 0;
  VPOITM05.PC6TCNCL = 0;
  VPOITM05.PC6MICHG = 0;
  VPOITM05.XIB-IBANK-CD = " "; /* Default bnk-cd for insert*/

   /* *************************************************************/
   /* ***new line because of DB2 changes 11-06-90 *****************/
  VPOITM05.PC6PREFL = "N";
   /* *************************************************************/

  VPOITM05.PC6PREFL = "N"; /* new pre-build flag 11-06-90*/
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;


   /* **                                                        ***/
   /* ********************** End of PB0X730 ***********************/
end // end PB0X730


// process add new Size QTYs
Function PB0X740()
   /* ------------------------------------------------------------*/
   /* Process the add of new item's Size QTYs row.*/
   /* Note:  If the customer was changed, resulting in a split,*/
             /* the source for the new item's size prices are*/
             /* in the FOB Price Templete.*/
          /* Otherwise, the new item carries with it the prices*/
             /* from the split from row.*/
   /* ------------------------------------------------------------*/

  PB0XS46(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    PB0XW00.XXXPRCNM = "PB0X740"; /* Module identification*/
    set PB0XM001.PC3PONBR cursor;
    converseLib.validationFailed(12); /* =======> data updated by another*/

    PB0XS99(); /* ===> re-initialize indexes and sizes*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  else

    /* ------------------------------------------------------------*/
     /* Initialize the key information for select call*/
    /* ------------------------------------------------------------*/

    set VPOSIZ02 empty; /* ====> row storage area*/

    VPOSIZ02.XGPCD = PB0XW01.XGPCD;
    VPOSIZ02.PC3PONBR = PB0XW01.PC3PONBR;
    VPOSIZ02.PC6ITMNB = PB0XW06.PC6ITMNB; /* save sequence nbr*/
    VPOSIZ02.ZFC-CRCY-CD = PB0XW05.ZFC-CRCY-CD;

    PB0XW00.PB0XWIXT = 1;

    while (PB0XW00.PB0XWIXT <= 40)

      if (PB0XW01.PB0XWSQT[PB0XWIXT] > 0)
        VPOSIZ02.PC7ORIGQ[PB0XWIXT] = PB0XW01.PB0XWSQT[PB0XWIXT];
        VPOSIZ02.PC7ORDEQ[PB0XWIXT] = PB0XW01.PB0XWSQT[PB0XWIXT];
        VPOSIZ02.PC7FOBFL[PB0XWIXT] = PB0XW01.PC7FOBFL[PB0XWIXT];
        VPOSIZ02.FY4FOBPR[PB0XWIXT] = PB0XW01.FY4FOBPR[PB0XWIXT];
      else
        VPOSIZ02.PC7FOBFL[PB0XWIXT] = "N";
      end

      PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1;

    end

    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PB0XS07(); /* ===> save copy of inserted size row*/

    PB0XS92(); /* ===> Insert (A ) size row*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0X740 ***********************/
end // end PB0X740


// Do "Load" update old Item
Function PB0X750()
   /* ------------------------------------------------------------*/
   /* Load appropriate data to split out an item's QTYs*/
   /* ------------------------------------------------------------*/

  PB0XS14(); /* ===> load saved split from item data*/

  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - PB0XW01.PB0XWSPT;
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PB0XW01.PB0XWSPT;
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PB0X750 ***********************/
end // end PB0X750


// "Load"  update old Size's QTYs
Function PB0X760()
   /* ------------------------------------------------------------*/
   /* Initialize the key information with saved copy of size row*/
   /* Process the reduction of the item's Size QTYs row.*/
   /* - load the size reductions to the size record*/
   /* - reset FOB Prices and flags if QTYs go to Zero*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty;

  PB0XS15(); /* ===> load saved copy of old items size row*/


  PB0XW00.PB0XWIXT = 1;

  while (PB0XW00.PB0XWIXT <= 40)

    if (PB0XW01.PB0XWSQT[PB0XWIXT] > 0)

      PB0XW00.PB0XWSQT = PB0XW01.PB0XWSQT[PB0XWIXT];
      PB0XW00.PC7ORDEQ = PB0XW01.PC7ORDEQ[PB0XWIXT];

      VPOSIZ02.PC7ORDEQ[PB0XWIXT] = PB0XW00.PC7ORDEQ - PB0XW00.PB0XWSQT;

      if (VPOSIZ02.PC7ORDEQ[PB0XWIXT] <= 0)
        VPOSIZ02.PC7FOBFL[PB0XWIXT] = "N";
        VPOSIZ02.FY4FOBPR[PB0XWIXT] = 0;
      end

    end

    PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1;

  end

  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


   /* **                                                        ***/
   /* ********************** End of PB0X760 ***********************/
end // end PB0X760


// ===> "APPAREL " Audit routine
Function PB0X900()
   /* ------------------------------------------------------------*/
   /* If the merge flag is set to yes*/

   /* ------------------------------------------------------------*/

  if (PB0XW00.PB0XWMRG == "Y") /* ===> Merge flag*/
    /* ------------------------------> therefore "Merge" occured*/

    /* ------------------------------------------------------------*/
     /* Process audit for the "MERGE TO " row.*/
        /* - process item audit process for merge to row.*/
        /* - process size audit process for merge to row.*/
    /* ------------------------------------------------------------*/


    PB0X920(); /* ===> process item audit routine*/

    PB0X930(); /* ===> process size level audit*/


  else /* ===> Do audit for Newly created Item*/

    /* ------------------------------------------------------------*/
     /* Process audit for newly created item.*/
        /* - process item audit process. (Item start up)*/
        /* - process size audit process. (Item size start up)*/
    /* ------------------------------------------------------------*/


    PB0X950(); /* ===> process item audit merge (inserted)*/

    PB0X960(); /* ===> process size level audit (inserted)*/


  end /* ===> end audit for split to item/size*/


   /* ------------------------------------------------------------*/
   /* Process audit for the "MERGE FROM " row.*/

   /* In both of the above cases, the Item was reduced in QTYs.*/
    /* * therefore write out an audit.*/
     /* - process change memo (for selected row that was reduced)*/
     /* - process item audit  (for selected row that was reduced)*/
     /* - process size audit  (for selected row that was reduced)*/

   /* ------------------------------------------------------------*/


  PB0X980(); /* ===> process item audit from cancel*/

  PB0X990(); /* ===> process size level audit cancel*/


   /* **                                                        ***/
   /* ********************** End of PB0X900 ***********************/
end // end PB0X900


// Process item  audit "Merge"
Function PB0X920()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - load copy of "merge to" row*/
     /* - get audit sequence number*/
     /* - load other common data used in audit processing*/
   /* - No item data changes since this is the merge to row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/


  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PB0XS26(); /* ==> load Saved "merge to" row*/

  PB0XSA0(); /* ===> get next audit item sequence number*/


  VPOAIT02.PCJSEQNO = PB0XW00.PCJSEQNO;


  VPOAIT02.PCIBFRN = PB0XW06.PC6TORDE;
  VPOAIT02.PCIAFTN = PB0XW06.PC6TORDE + PB0XW01.PB0XWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/

  PB0XSA4(); /* ===> Get and Load L/C Amend print indicator*/

  PB0XSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PB0X920 ***********************/
end // end PB0X920


// Process size audit "Merge"
Function PB0X930()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/

  PB0XS27(); /* ===> load saved, "before change", copy of merge to row*/

  VPOASZ02.PCJSEQNO = PB0XW00.PCJSEQNO; /* audit sequence number*/

  PB0XW00.PB0XWIXT = 1;

  while (PB0XW00.PB0XWIXT <= 40)

    VPOASZ02.PCIBFRN[PB0XWIXT] = PB0XW07.PC7ORDEQ[PB0XWIXT];
    VPOASZ02.PCKBFRPR[PB0XWIXT] = PB0XW07.FY4FOBPR[PB0XWIXT];


    if (PB0XW01.PB0XWSQT[PB0XWIXT] > 0) /* ===> split requested*/

      PB0XW00.PB0XWSQT = PB0XW01.PB0XWSQT[PB0XWIXT];
      PB0XW00.PC7ORDEQ = PB0XW07.PC7ORDEQ[PB0XWIXT];
      VPOASZ02.PCIAFTN[PB0XWIXT] = PB0XW00.PC7ORDEQ + PB0XW00.PB0XWSQT;

      if (VPOASZ02.PCIBFRN[PB0XWIXT] > 0) /* ===> new size QTY*/
        VPOASZ02.PCKAFTPR[PB0XWIXT] = PB0XW01.FY4FOBPR[PB0XWIXT];
      end

    else /* ===> no split of QTYs requested*/

      VPOASZ02.PCIAFTN[PB0XWIXT] = PB0XW07.PC7ORDEQ[PB0XWIXT];
      VPOASZ02.PCKAFTPR[PB0XWIXT] = PB0XW07.FY4FOBPR[PB0XWIXT];

    end


    PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


  PB0XSA2(); /* ===> insert the size audit record*/



   /* **                                                        ***/
   /* ********************** End of PB0X930 ***********************/
end // end PB0X930


// Process item audit "Created"
Function PB0X950()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - No item data changed since this is the created row.*/
     /* - Load the saved copy of the inserted item row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/


  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PB0XS26(); /* ================> format the item audit record*/
   /* ================> using the saved item row that was inserted*/

  PB0XSA0(); /* ===> get next audit item sequence number*/

  VPOAIT02.PCJSEQNO = PB0XW00.PCJSEQNO;


  VPOAIT02.PCIBFRN = 0;
  VPOAIT02.PCIAFTN = PB0XW06.PC6TORDE;
  VPOAIT02.PCJNETQT = PB0XW06.PC6TORDE;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/


  PB0XSA4(); /* ===> Get and Load audit record flags*/

  PB0XSA1(); /* ===> insert the item audit record*/



   /* **                                                        ***/
   /* ********************** End of PB0X950 ***********************/
end // end PB0X950


// process size audit "Created"
Function PB0X960()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/


  PB0XS27(); /* ===> load saved copy of inserted item  row*/


  VPOASZ02.PCJSEQNO = PB0XW00.PCJSEQNO; /* audit sequence number*/


  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;

  move PB0XW07.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;
  move PB0XW07.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;


  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


  PB0XSA2(); /* ===> insert the size audit record*/



   /* **                                                        ***/
   /* ********************** End of PB0X830 ***********************/
end // end PB0X960


// Process itm audit "Split From"
Function PB0X980()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - copy of merge from row*/
     /* - other common data used in audit processing*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/



  set VPOAIT02 empty;
  set PCYREC empty;


  PB0XS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/
   /* ========================> of the split from row*/


  PB0XSA0(); /* ===> get next audit item sequence number*/


   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = 0; /* no size audit related to these audits*/

   /* ------------------------------------------------------------*/
                      /* ETS SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PB0XW01.PB0XWETS != PB0XW04.PC6ETSDT) /* ===> ETS Date*/
    VPOAIT02.PCIBFRN = PB0XW04.PC6ETSDT; /* ===> ETS Date before*/
    VPOAIT02.PCIAFTN = PB0XW01.PB0XWETS; /* ===> ETS Date after*/
    VPOAIT02.YOACD = "63"; /* ETS SPLIT - NEW PLAN*/

    PB0XSA4(); /* ===> Get and Load audit record flags*/

    PB0XSA1(); /* ===> insert the item audit record*/

  end


   /* ------------------------------------------------------------*/
                      /* MODE SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PB0XW01.PB0XWSB2 != PB0XW04.YMTCD) /* ===> Mode of Trans.*/
    VPOAIT02.PCIBFRA = PB0XW04.YMTCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PB0XW01.PB0XWSB2; /* ===> after*/
    VPOAIT02.YOACD = "64"; /* MODE SPLIT - NEW PLAN*/

    PB0XSA4(); /* ===> Get and Load audit record flags*/

    PB0XSA1(); /* ===> insert the item audit record*/

  end



   /* ------------------------------------------------------------*/
   /* ===> process QTY reduction audit*/
       /* - audit sequence number needed to find appropriate*/
         /* size audit row.*/
   /* ------------------------------------------------------------*/


  VPOAIT02.PCJSEQNO = PB0XW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PB0XW04.PC6TORDE;
  VPOAIT02.PCIAFTN = PB0XW04.PC6TORDE - PB0XW01.PB0XWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/

  PB0XSA4(); /* ===> Get and Load audit record flags*/

  PB0XSA1(); /* ===> insert the item audit record*/



   /* **                                                        ***/
   /* ********************** End of PB0X980 ***********************/
end // end PB0X980


// Process siz audit "Split From"
Function PB0X990()
   /* ------------------------------------------------------------*/
      /* Write out a size audit for split from row*/
   /* ------------------------------------------------------------*/

  PB0XS29(); /* ===> load saved, "before change", copy of split from row*/

  VPOASZ02.PCJSEQNO = PB0XW00.PCJSEQNO; /* audit sequence number*/

  PB0XW00.PB0XWIXT = 1;

  while (PB0XW00.PB0XWIXT <= 40)

    VPOASZ02.PCIBFRN[PB0XWIXT] = PB0XW05.PC7ORDEQ[PB0XWIXT];
    VPOASZ02.PCKBFRPR[PB0XWIXT] = PB0XW05.FY4FOBPR[PB0XWIXT];
    VPOASZ02.PCKAFTPR[PB0XWIXT] = PB0XW05.FY4FOBPR[PB0XWIXT];

    if (PB0XW01.PB0XWSQT[PB0XWIXT] > 0) /* ===> split requested*/

      PB0XW00.PB0XWSQT = PB0XW01.PB0XWSQT[PB0XWIXT];
      PB0XW00.PC7ORDEQ = PB0XW05.PC7ORDEQ[PB0XWIXT];
      VPOASZ02.PCIAFTN[PB0XWIXT] = PB0XW00.PC7ORDEQ - PB0XW00.PB0XWSQT;

    else /* ===> no split of QTYs*/

      VPOASZ02.PCIAFTN[PB0XWIXT] = PB0XW05.PC7ORDEQ[PB0XWIXT];

    end

    PB0XW00.PB0XWIXT = PB0XW00.PB0XWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


  PB0XSA2(); /* ===> insert the size audit record*/


   /* **                                                        ***/
   /* ********************** End of PB0X890 ***********************/
end // end PB0X990


// call calc.  "date routine"
Function PB0XS01()
   /* ------------------------------------------------------------*/

               /* Calculate DATE difference*/

   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date*/

    return; /* === return with date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, error occured. Exit and display map*/
    /* ------------------------------------------------------------*/

    PB0XW00.PB0XWSWM = "1"; /* ===> map request switch*/
    PB0XW00.XXXPRCNM = "PB0XS01"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0XS01 ***********************/
end // end PB0XS01


// load header data to map
Function PB0XS02()
   /* ----------------------------------------------------------*/
    /* Load the map header data.*/
   /* ----------------------------------------------------------*/


  PB0XM001.PO-REG-CD = PB0XW00.PO-REG-CD; /* PO number*/

  PB0XM001.PC3PONBR = PB0XW04.PC3PONBR; /* PO number*/

  PB0XW00.TA2GRGGN = PB0XW04.PC3POIDT; /* ===>number form*/
  PB0XW00.TA2GRGG = PB0XW00.PB0XWDT; /* ===>char form*/

  PB0XM001.SY1STNBR = PB0XW04.SY1STNBR;
  PB0XM001.SY2CLRID = PB0XW04.SY2CLRID;
  PB0XM001.PC6PLAN = PB0XW04.PC6PLAN;
  PB0XM001.XWHCD = PB0XW04.XWHCD;
  PB0XM001.YMTCD = PB0XW04.YMTCD;
  PB0XM001.PB0XMETS = PB0XW01.PB0XWDT1; /* => ETS map display*/
  PB0XM001.PC2CUXID = PB0XW04.PC2CUXID;
  PB0XM001.XDMCD = PB0XW04.XDMCD;
  PB0XM001.XQACD = PB0XW04.XQACD;
  PB0XM001.XOWCD = PB0XW04.XOWCD;
  PB0XM001.PC2INSEG = PB0XW04.PC2INSEG;
  PB0XM001.XPGCD = PB0XW04.XPGCD;
  PB0XM001.XUMCD = PB0XW04.XUMCD;
   /* **                                                        ***/
   /* ********************** End of PB0XS02 ***********************/
end // end PB0XS02


// load display record item data
Function PB0XS03()
   /* ----------------------------------------------------------*/
    /* Save data, of the "Split From" item row, in the*/
    /* W.S. display record.*/
   /* ----------------------------------------------------------*/

  PB0XW01.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PB0XW01.PO-REG-CD = VPOITM05.PO-REG-CD; /* Region*/
  PB0XW01.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PB0XW01.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR; /* SAP PO #*/
  PB0XW01.PC6ITMNB = VPOITM05.PC6ITMNB;
  PB0XW01.PC3POIDT = VPOITM05.PC3POIDT;
  PB0XW01.PCFSECD = VPOITM05.PCFSECD;
  PB0XW01.FY1FCTYC = VPOITM05.FY1FCTYC;
  PB0XW01.SY1STNBR = VPOITM05.SY1STNBR;
  PB0XW01.SY2CLRID = VPOITM05.SY2CLRID;
  PB0XW01.XDMCD = VPOITM05.XDMCD;
  PB0XW01.XQACD = VPOITM05.XQACD;
  PB0XW01.XOWCD = VPOITM05.XOWCD;
  PB0XW01.PC2INSEG = VPOITM05.PC2INSEG;
  PB0XW01.XPGCD = VPOITM05.XPGCD;
  PB0XW01.XUMCD = VPOITM05.XUMCD;
  PB0XW01.PC6ETSDT = VPOITM05.PC6ETSDT;
  PB0XW01.PC6OETS = VPOITM05.PC6OETS;
  PB0XW01.PC6RTADT = VPOITM05.PC6RTADT;
  PB0XW01.YMTCD = VPOITM05.YMTCD;
  PB0XW01.PC6PLAN = VPOITM05.PC6PLAN;
  PB0XW01.XWHCD = VPOITM05.XWHCD;
  PB0XW01.PC2CUXID = VPOITM05.PC2CUXID;
  PB0XW01.YSMXDV = VPOITM05.YSMXDV;
  PB0XW01.PC4ORTYP = VPOITM05.PC4ORTYP;
  PB0XW01.XDSCD = VPOITM05.XDSCD;
  PB0XW01.PC6STAT = VPOITM05.PC6STAT;
  PB0XW01.PC6CXNBR = VPOITM05.PC6CXNBR;
  PB0XW01.PC6MICHG = VPOITM05.PC6MICHG;
  PB0XW01.PC6TORDE = VPOITM05.PC6TORDE;
  PB0XW01.OP1PARTN = VPOITM05.OP1PARTN;
  PB0XW01.OP1CUOID = VPOITM05.OP1CUOID;
  PB0XW01.OP1NORID = VPOITM05.OP1NORID;

   /* ====> load split by data to display storage ====>*/

  PB0XW01.PB0XWXSD = VPOITM05.PC2INSEG;
  PB0XW01.PB0XWXDS = VPOITM05.XDSCD;
  PB0XW01.PB0XWXDV = VPOITM05.YSMXDV;
  PB0XW01.PB0XWXCT = VPOITM05.PC6XCTCD;
  PB0XW01.PB0XWPLN = VPOITM05.PC6PLAN;
  PB0XW01.PB0XWETS = VPOITM05.PC6ETSDT;
  PB0XW01.PB0XWSB2 = VPOITM05.YMTCD;


   /* **                                                        ***/
   /* ********************** End of PB0XS03 ***********************/
end // end PB0XS03


// save (Split from) item row
Function PB0XS04()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split From" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PB0XW04 from VPOITM05.*/
   /* ----------------------------------------------------------*/

  PB0XW04.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PB0XW04.PO-REG-CD = VPOITM05.PO-REG-CD; /* Region*/
  PB0XW04.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PB0XW04.PC6ITMNB = VPOITM05.PC6ITMNB;
  PB0XW04.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PB0XW04.PC3POIDT = VPOITM05.PC3POIDT;
  PB0XW04.PCFSECD = VPOITM05.PCFSECD;
  PB0XW04.FY1FCTYC = VPOITM05.FY1FCTYC;
  PB0XW04.XCTCD = VPOITM05.XCTCD;
  PB0XW04.SY1STNBR = VPOITM05.SY1STNBR;
  PB0XW04.SY2CLRID = VPOITM05.SY2CLRID;
  PB0XW04.XDMCD = VPOITM05.XDMCD;
  PB0XW04.XQACD = VPOITM05.XQACD;
  PB0XW04.XOWCD = VPOITM05.XOWCD;
  PB0XW04.PC2INSEG = VPOITM05.PC2INSEG;
  PB0XW04.XPGCD = VPOITM05.XPGCD;
  PB0XW04.XUMCD = VPOITM05.XUMCD;
  PB0XW04.PC6ETSDT = VPOITM05.PC6ETSDT;
  PB0XW04.PC6OETS = VPOITM05.PC6OETS;
  PB0XW04.PC6RTADT = VPOITM05.PC6RTADT;
  PB0XW04.YMTCD = VPOITM05.YMTCD;
  PB0XW04.PC6CXNBR = VPOITM05.PC6CXNBR;
  PB0XW04.PC6PLAN = VPOITM05.PC6PLAN;
  PB0XW04.XPLCD = VPOITM05.XPLCD;
  PB0XW04.XPRCD = VPOITM05.XPRCD;
  PB0XW04.XPCCD = VPOITM05.XPCCD;
  PB0XW04.SYBSTGNB = VPOITM05.SYBSTGNB;
  PB0XW04.XGACD = VPOITM05.XGACD;
  PB0XW04.PG1SC4CD = VPOITM05.PG1SC4CD;
  PB0XW04.PC6CLVAR = VPOITM05.PC6CLVAR;
  PB0XW04.XWHCD = VPOITM05.XWHCD;
  PB0XW04.PC2CUXID = VPOITM05.PC2CUXID;
  PB0XW04.YSMXDV = VPOITM05.YSMXDV;
  PB0XW04.PC6XCTCD = VPOITM05.PC6XCTCD;
  PB0XW04.OP1CUPO = VPOITM05.OP1CUPO;
  PB0XW04.OP1PARTN = VPOITM05.OP1PARTN;
  PB0XW04.OP1CUOID = VPOITM05.OP1CUOID;
  PB0XW04.OP1NORID = VPOITM05.OP1NORID;
  PB0XW04.PC4ORTYP = VPOITM05.PC4ORTYP;
  PB0XW04.PC61TMSH = VPOITM05.PC61TMSH;
  PB0XW04.XDSCD = VPOITM05.XDSCD;
  PB0XW04.PC6STAT = VPOITM05.PC6STAT;
  PB0XW04.PC6STADT = VPOITM05.PC6STADT;
  PB0XW04.XFRCD = VPOITM05.XFRCD;
  PB0XW04.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PB0XW04.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PB0XW04.PC6AIRNB = VPOITM05.PC6AIRNB;
  PB0XW04.PC6AIRDT = VPOITM05.PC6AIRDT;
  PB0XW04.PC6NILRF = VPOITM05.PC6NILRF;
  PB0XW04.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PB0XW04.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PB0XW04.YOHCD = VPOITM05.YOHCD;
  PB0XW04.PC3SIFL = VPOITM05.PC3SIFL;
  PB0XW04.PC6SZAVL = VPOITM05.PC6SZAVL;
  PB0XW04.PC6CONNO = VPOITM05.PC6CONNO;
  PB0XW04.PC6PETS = VPOITM05.PC6PETS;
  PB0XW04.PC6OETAL = VPOITM05.PC6OETAL;
  PB0XW04.PC6ETALF = VPOITM05.PC6ETALF;
  PB0XW04.PC6MICHG = VPOITM05.PC6MICHG;
  PB0XW04.PC6TORIG = VPOITM05.PC6TORIG;
  PB0XW04.PC6TORDE = VPOITM05.PC6TORDE;
  PB0XW04.PC6TADD = VPOITM05.PC6TADD;
  PB0XW04.PC6TCNCL = VPOITM05.PC6TCNCL;
  PB0XW04.PC6PREFL = VPOITM05.PC6PREFL;
  PB0XW04.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PB0XW04.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PB0XW04.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PB0XW04.XXXUSRID = VPOITM05.XXXUSRID;
  PB0XW04.ZZZSDT = VPOITM05.ZZZSDT;
  PB0XW04.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PB0XW04.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PB0XW04.ZZZCHGCT = VPOITM05.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS04 ***********************/
end // end PB0XS04


// Save (Split From) size row
Function PB0XS05()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split from" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PB0XW05 from VPOSIZ02.*/
   /* ----------------------------------------------------------*/

  PB0XW05.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PB0XW05.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* Region*/
  PB0XW05.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PB0XW05.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PB0XW05.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/
  move VPOSIZ02.PC7ORIGQ to PB0XW05.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PB0XW05.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PB0XW05.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PB0XW05.FY4FOBPR[1] for all;
  PB0XW05.ZZZSDT = VPOSIZ02.ZZZSDT;
  PB0XW05.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PB0XW05.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PB0XW05.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS05 ***********************/
end // end PB0XS05


// Save ("Split To" item Row)
Function PB0XS06()
   /* ----------------------------------------------------------*/
    /* Save copy of the "Split to" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PB0XW06 from VPOITM05.*/
   /* ----------------------------------------------------------*/

  PB0XW06.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PB0XW06.PO-REG-CD = VPOITM05.PO-REG-CD; /* Region*/
  PB0XW06.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PB0XW06.PC6ITMNB = VPOITM05.PC6ITMNB;
  PB0XW06.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PB0XW06.PC3POIDT = VPOITM05.PC3POIDT;
  PB0XW06.PCFSECD = VPOITM05.PCFSECD;
  PB0XW06.FY1FCTYC = VPOITM05.FY1FCTYC;
  PB0XW06.XCTCD = VPOITM05.XCTCD;
  PB0XW06.SY1STNBR = VPOITM05.SY1STNBR;
  PB0XW06.SY2CLRID = VPOITM05.SY2CLRID;
  PB0XW06.XDMCD = VPOITM05.XDMCD;
  PB0XW06.XQACD = VPOITM05.XQACD;
  PB0XW06.XOWCD = VPOITM05.XOWCD;
  PB0XW06.PC2INSEG = VPOITM05.PC2INSEG;
  PB0XW06.XPGCD = VPOITM05.XPGCD;
  PB0XW06.XUMCD = VPOITM05.XUMCD;
  PB0XW06.PC6ETSDT = VPOITM05.PC6ETSDT;
  PB0XW06.PC6OETS = VPOITM05.PC6OETS;
  PB0XW06.PC6RTADT = VPOITM05.PC6RTADT;
  PB0XW06.YMTCD = VPOITM05.YMTCD;
  PB0XW06.PC6CXNBR = VPOITM05.PC6CXNBR;
  PB0XW06.PC6PLAN = VPOITM05.PC6PLAN;
  PB0XW06.XPLCD = VPOITM05.XPLCD;
  PB0XW06.XPRCD = VPOITM05.XPRCD;
  PB0XW06.XPCCD = VPOITM05.XPCCD;
  PB0XW06.SYBSTGNB = VPOITM05.SYBSTGNB;
  PB0XW06.XGACD = VPOITM05.XGACD;
  PB0XW06.PG1SC4CD = VPOITM05.PG1SC4CD;
  PB0XW06.PC6CLVAR = VPOITM05.PC6CLVAR;
  PB0XW06.XWHCD = VPOITM05.XWHCD;
  PB0XW06.PC2CUXID = VPOITM05.PC2CUXID;
  PB0XW06.YSMXDV = VPOITM05.YSMXDV;
  PB0XW06.PC6XCTCD = VPOITM05.PC6XCTCD;
  PB0XW06.OP1CUPO = VPOITM05.OP1CUPO;
  PB0XW06.OP1PARTN = VPOITM05.OP1PARTN;
  PB0XW06.OP1CUOID = VPOITM05.OP1CUOID;
  PB0XW06.OP1NORID = VPOITM05.OP1NORID;
  PB0XW06.PC4ORTYP = VPOITM05.PC4ORTYP;
  PB0XW06.PC61TMSH = VPOITM05.PC61TMSH;
  PB0XW06.XDSCD = VPOITM05.XDSCD;
  PB0XW06.PC6STAT = VPOITM05.PC6STAT;
  PB0XW06.PC6STADT = VPOITM05.PC6STADT;
  PB0XW06.XFRCD = VPOITM05.XFRCD;
  PB0XW06.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PB0XW06.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PB0XW06.PC6AIRNB = VPOITM05.PC6AIRNB;
  PB0XW06.PC6AIRDT = VPOITM05.PC6AIRDT;
  PB0XW06.PC6NILRF = VPOITM05.PC6NILRF;
  PB0XW06.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PB0XW06.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PB0XW06.YOHCD = VPOITM05.YOHCD;
  PB0XW06.PC3SIFL = VPOITM05.PC3SIFL;
  PB0XW06.PC6SZAVL = VPOITM05.PC6SZAVL;
  PB0XW06.PC6CONNO = VPOITM05.PC6CONNO;
  PB0XW06.PC6PETS = VPOITM05.PC6PETS;
  PB0XW06.PC6OETAL = VPOITM05.PC6OETAL;
  PB0XW06.PC6ETALF = VPOITM05.PC6ETALF;
  PB0XW06.PC6MICHG = VPOITM05.PC6MICHG;
  PB0XW06.PC6TORIG = VPOITM05.PC6TORIG;
  PB0XW06.PC6TORDE = VPOITM05.PC6TORDE;
  PB0XW06.PC6TADD = VPOITM05.PC6TADD;
  PB0XW06.PC6TCNCL = VPOITM05.PC6TCNCL;
  PB0XW06.PC6PREFL = VPOITM05.PC6PREFL;
  PB0XW06.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PB0XW06.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PB0XW06.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PB0XW06.XXXUSRID = VPOITM05.XXXUSRID;
  PB0XW06.ZZZSDT = VPOITM05.ZZZSDT;
  PB0XW06.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PB0XW06.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PB0XW06.ZZZCHGCT = VPOITM05.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS06 ***********************/
end // end PB0XS06


// Save ("Split To" size Row)
Function PB0XS07()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split to" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PB0XW07 from VPOSIZ02.*/
   /* ----------------------------------------------------------*/

  PB0XW07.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PB0XW07.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* Region*/
  PB0XW07.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PB0XW07.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PB0XW07.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/
  move VPOSIZ02.PC7ORIGQ to PB0XW07.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PB0XW07.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PB0XW07.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PB0XW07.FY4FOBPR[1] for all;
  PB0XW07.ZZZSDT = VPOSIZ02.ZZZSDT;
  PB0XW07.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PB0XW07.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PB0XW07.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS07 ***********************/
end // end PB0XS07


// set appropriate fields bright
Function PB0XS09()
   /* ------------------------------------------------------------*/
   /* Set appropriate fields bright*/
   /* ------------------------------------------------------------*/


  if (PB0XW01.XGPCD == "02")

    if (PB0XW01.PC4ORTYP == "FT"
     || PB0XW01.PC4ORTYP == "OR"
     || PB0XW01.PC4ORTYP == "S1"
     || PB0XW01.PC4ORTYP == "S4")
      set PB0XM001.PB0XMSB1 cursor, bold; /* ===> ETS Date*/
    else
      set PB0XM001.PB0XMSB1 cursor, bold; /* ===> ETS Date*/
      set PB0XM001.PB0XMSB2 bold; /* ===> Mode of Trans*/
    end

  end

  if (PB0XW01.XGPCD == "03"
   || PB0XW01.XGPCD == "01"
   || PB0XW01.XGPCD == "07")
    set PB0XM001.PB0XMSB1 cursor, bold; /* ===> ETS Date*/
    set PB0XM001.PB0XMSB2 bold; /* ===> Mode of Trans*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0XS09 ***********************/
end // end PB0XS09


// load saved (Split from Row)
Function PB0XS14()
   /* ----------------------------------------------------------*/
    /* load Saved copy of the "Split From" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PB0XW04.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PB0XW04.PO-REG-CD; /* Region*/
  VPOITM05.PC3PONBR = PB0XW04.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PB0XW04.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PB0XW04.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PB0XW04.PC3POIDT;
  VPOITM05.PCFSECD = PB0XW04.PCFSECD;
  VPOITM05.FY1FCTYC = PB0XW04.FY1FCTYC;
  VPOITM05.XCTCD = PB0XW04.XCTCD;
  VPOITM05.SY1STNBR = PB0XW04.SY1STNBR;
  VPOITM05.SY2CLRID = PB0XW04.SY2CLRID;
  VPOITM05.XDMCD = PB0XW04.XDMCD;
  VPOITM05.XQACD = PB0XW04.XQACD;
  VPOITM05.XOWCD = PB0XW04.XOWCD;
  VPOITM05.PC2INSEG = PB0XW04.PC2INSEG;
  VPOITM05.XPGCD = PB0XW04.XPGCD;
  VPOITM05.XUMCD = PB0XW04.XUMCD;
  VPOITM05.PC6ETSDT = PB0XW04.PC6ETSDT;
  VPOITM05.PC6OETS = PB0XW04.PC6OETS;
  VPOITM05.PC6RTADT = PB0XW04.PC6RTADT;
  VPOITM05.YMTCD = PB0XW04.YMTCD;
  VPOITM05.PC6CXNBR = PB0XW04.PC6CXNBR;
  VPOITM05.PC6PLAN = PB0XW04.PC6PLAN;
  VPOITM05.XPLCD = PB0XW04.XPLCD;
  VPOITM05.XPRCD = PB0XW04.XPRCD;
  VPOITM05.XPCCD = PB0XW04.XPCCD;
  VPOITM05.SYBSTGNB = PB0XW04.SYBSTGNB;
  VPOITM05.XGACD = PB0XW04.XGACD;
  VPOITM05.PG1SC4CD = PB0XW04.PG1SC4CD;
  VPOITM05.PC6CLVAR = PB0XW04.PC6CLVAR;
  VPOITM05.XWHCD = PB0XW04.XWHCD;
  VPOITM05.PC2CUXID = PB0XW04.PC2CUXID;
  VPOITM05.YSMXDV = PB0XW04.YSMXDV;
  VPOITM05.PC6XCTCD = PB0XW04.PC6XCTCD;
  VPOITM05.OP1CUPO = PB0XW04.OP1CUPO;
  VPOITM05.OP1PARTN = PB0XW04.OP1PARTN;
  VPOITM05.OP1CUOID = PB0XW04.OP1CUOID;
  VPOITM05.OP1NORID = PB0XW04.OP1NORID;
  VPOITM05.PC4ORTYP = PB0XW04.PC4ORTYP;
  VPOITM05.PC61TMSH = PB0XW04.PC61TMSH;
  VPOITM05.XDSCD = PB0XW04.XDSCD;
  VPOITM05.PC6STAT = PB0XW04.PC6STAT;
  VPOITM05.PC6STADT = PB0XW04.PC6STADT;
  VPOITM05.XFRCD = PB0XW04.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PB0XW04.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PB0XW04.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PB0XW04.PC6AIRNB;
  VPOITM05.PC6AIRDT = PB0XW04.PC6AIRDT;
  VPOITM05.PC6NILRF = PB0XW04.PC6NILRF;
  VPOITM05.PC-NIKE-AFRGT-PCT = PB0XW04.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PB0XW04.PC-FCTY-AFRGT-PCT;
  VPOITM05.YOHCD = PB0XW04.YOHCD;
  VPOITM05.PC3SIFL = PB0XW04.PC3SIFL;
  VPOITM05.PC6SZAVL = PB0XW04.PC6SZAVL;
  VPOITM05.PC6CONNO = PB0XW04.PC6CONNO;
  VPOITM05.PC6PETS = PB0XW04.PC6PETS;
  VPOITM05.PC6OETAL = PB0XW04.PC6OETAL;
  VPOITM05.PC6ETALF = PB0XW04.PC6ETALF;
  VPOITM05.PC6MICHG = PB0XW04.PC6MICHG;
  VPOITM05.PC6TORIG = PB0XW04.PC6TORIG;
  VPOITM05.PC6TORDE = PB0XW04.PC6TORDE;
  VPOITM05.PC6TADD = PB0XW04.PC6TADD;
  VPOITM05.PC6TCNCL = PB0XW04.PC6TCNCL;
  VPOITM05.PC6PREFL = PB0XW04.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PB0XW04.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PB0XW04.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PB0XW04.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PB0XW04.XXXUSRID;
  VPOITM05.ZZZSDT = PB0XW04.ZZZSDT;
  VPOITM05.ZZZCHGDT = PB0XW04.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PB0XW04.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PB0XW04.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS14 ***********************/
end // end PB0XS14


// load saved Split from size Row
Function PB0XS15()
   /* ----------------------------------------------------------*/
    /* Load Saved copy of the "Split from" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOSIZ02.*/
   /* ----------------------------------------------------------*/

  VPOSIZ02.XGPCD = PB0XW05.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PB0XW05.PO-REG-CD; /* Region*/
  VPOSIZ02.PC3PONBR = PB0XW05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PB0XW05.PC6ITMNB;
  VPOSIZ02.ZFC-CRCY-CD = PB0XW05.ZFC-CRCY-CD; /* new jun-93*/
  move PB0XW05.PC7ORIGQ to VPOSIZ02.PC7ORIGQ[1] for all;
  move PB0XW05.PC7ORDEQ to VPOSIZ02.PC7ORDEQ[1] for all;
  move PB0XW05.PC7FOBFL to VPOSIZ02.PC7FOBFL[1] for all;
  move PB0XW05.FY4FOBPR to VPOSIZ02.FY4FOBPR[1] for all;
  VPOSIZ02.ZZZSDT = PB0XW05.ZZZSDT;
  VPOSIZ02.ZZZCHGDT = PB0XW05.ZZZCHGDT;
  VPOSIZ02.ZZZCHGTM = PB0XW05.ZZZCHGTM;
  VPOSIZ02.ZZZCHGCT = PB0XW05.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS15 ***********************/
end // end PB0XS15


// load saved Split To item Row
Function PB0XS16()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split to" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05 from PB0XW06.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PB0XW06.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PB0XW06.PO-REG-CD; /* GPC code*/
  VPOITM05.PC3PONBR = PB0XW06.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PB0XW06.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PB0XW06.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PB0XW06.PC3POIDT;
  VPOITM05.PCFSECD = PB0XW06.PCFSECD;
  VPOITM05.FY1FCTYC = PB0XW06.FY1FCTYC;
  VPOITM05.XCTCD = PB0XW06.XCTCD;
  VPOITM05.SY1STNBR = PB0XW06.SY1STNBR;
  VPOITM05.SY2CLRID = PB0XW06.SY2CLRID;
  VPOITM05.XDMCD = PB0XW06.XDMCD;
  VPOITM05.XQACD = PB0XW06.XQACD;
  VPOITM05.XOWCD = PB0XW06.XOWCD;
  VPOITM05.PC2INSEG = PB0XW06.PC2INSEG;
  VPOITM05.XPGCD = PB0XW06.XPGCD;
  VPOITM05.XUMCD = PB0XW06.XUMCD;
  VPOITM05.PC6ETSDT = PB0XW06.PC6ETSDT;
  VPOITM05.PC6OETS = PB0XW06.PC6OETS;
  VPOITM05.PC6RTADT = PB0XW06.PC6RTADT;
  VPOITM05.YMTCD = PB0XW06.YMTCD;
  VPOITM05.PC6CXNBR = PB0XW06.PC6CXNBR;
  VPOITM05.PC6PLAN = PB0XW06.PC6PLAN;
  VPOITM05.XPLCD = PB0XW06.XPLCD;
  VPOITM05.XPRCD = PB0XW06.XPRCD;
  VPOITM05.XPCCD = PB0XW06.XPCCD;
  VPOITM05.SYBSTGNB = PB0XW06.SYBSTGNB;
  VPOITM05.XGACD = PB0XW06.XGACD;
  VPOITM05.PG1SC4CD = PB0XW06.PG1SC4CD;
  VPOITM05.PC6CLVAR = PB0XW06.PC6CLVAR;
  VPOITM05.XWHCD = PB0XW06.XWHCD;
  VPOITM05.PC2CUXID = PB0XW06.PC2CUXID;
  VPOITM05.YSMXDV = PB0XW06.YSMXDV;
  VPOITM05.PC6XCTCD = PB0XW06.PC6XCTCD;
  VPOITM05.OP1CUPO = PB0XW06.OP1CUPO;
  VPOITM05.OP1PARTN = PB0XW06.OP1PARTN;
  VPOITM05.OP1CUOID = PB0XW06.OP1CUOID;
  VPOITM05.OP1NORID = PB0XW06.OP1NORID;
  VPOITM05.PC4ORTYP = PB0XW06.PC4ORTYP;
  VPOITM05.PC61TMSH = PB0XW06.PC61TMSH;
  VPOITM05.XDSCD = PB0XW06.XDSCD;
  VPOITM05.PC6STAT = PB0XW06.PC6STAT;
  VPOITM05.PC6STADT = PB0XW06.PC6STADT;
  VPOITM05.XFRCD = PB0XW06.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PB0XW06.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PB0XW06.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PB0XW06.PC6AIRNB;
  VPOITM05.PC6AIRDT = PB0XW06.PC6AIRDT;
  VPOITM05.PC6NILRF = PB0XW06.PC6NILRF;
  VPOITM05.PC-NIKE-AFRGT-PCT = PB0XW06.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PB0XW06.PC-FCTY-AFRGT-PCT;
  VPOITM05.YOHCD = PB0XW06.YOHCD;
  VPOITM05.PC3SIFL = PB0XW06.PC3SIFL;
  VPOITM05.PC6SZAVL = PB0XW06.PC6SZAVL;
  VPOITM05.PC6CONNO = PB0XW06.PC6CONNO;
  VPOITM05.PC6PETS = PB0XW06.PC6PETS;
  VPOITM05.PC6OETAL = PB0XW06.PC6OETAL;
  VPOITM05.PC6ETALF = PB0XW06.PC6ETALF;
  VPOITM05.PC6MICHG = PB0XW06.PC6MICHG;
  VPOITM05.PC6TORIG = PB0XW06.PC6TORIG;
  VPOITM05.PC6TORDE = PB0XW06.PC6TORDE;
  VPOITM05.PC6TADD = PB0XW06.PC6TADD;
  VPOITM05.PC6TCNCL = PB0XW06.PC6TCNCL;
  VPOITM05.PC6PREFL = PB0XW06.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PB0XW06.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PB0XW06.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PB0XW06.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PB0XW06.XXXUSRID;
  VPOITM05.ZZZSDT = PB0XW06.ZZZSDT;
  VPOITM05.ZZZCHGDT = PB0XW06.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PB0XW06.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PB0XW06.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PB0XS16 ***********************/
end // end PB0XS16


// load saved "Split To" Item row
Function PB0XS26()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split To" item row.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PB0XW06.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PB0XW06.PO-REG-CD; /* Region*/
  VPOAIT02.PC3PONBR = PB0XW06.PC3PONBR; /* PO number*/
  VPOAIT02.PCJSEQNO = 0;
  VPOAIT02.SY1STNBR = PB0XW06.SY1STNBR;
  VPOAIT02.SY2CLRID = PB0XW06.SY2CLRID;
  VPOAIT02.XDMCD = PB0XW06.XDMCD;
  VPOAIT02.XQACD = PB0XW06.XQACD;
  VPOAIT02.XOWCD = PB0XW06.XOWCD;
  VPOAIT02.PC2INSEG = PB0XW06.PC2INSEG;
  VPOAIT02.XPGCD = PB0XW06.XPGCD;
  VPOAIT02.XUMCD = PB0XW06.XUMCD;
  VPOAIT02.PCFSECD = PB0XW06.PCFSECD;
  VPOAIT02.PC3POIDT = PB0XW06.PC3POIDT;
  VPOAIT02.FY1FCTYC = PB0XW06.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PB0XW06.PC6ETSDT;
  VPOAIT02.YMTCD = PB0XW06.YMTCD;
  VPOAIT02.XWHCD = PB0XW06.XWHCD;
  VPOAIT02.PC2CUXID = PB0XW06.PC2CUXID;
  VPOAIT02.PC6XCTCD = PB0XW06.PC6XCTCD;
  VPOAIT02.PC6OETS = PB0XW06.PC6OETS;
  VPOAIT02.PC6RTADT = PB0XW06.PC6RTADT;
  VPOAIT02.PC6CXNBR = PB0XW06.PC6CXNBR;

  VPOAIT02.OP1CUOID = PB0XW06.OP1CUOID;
  VPOAIT02.OP1NORID = PB0XW06.OP1NORID;
  VPOAIT02.OP1PARTN = PB0XW06.OP1PARTN;

  VPOAIT02.PC6PLAN = PB0XW06.PC6PLAN;
  VPOAIT02.XDSCD = PB0XW06.XDSCD;
  VPOAIT02.YSMXDV = PB0XW06.YSMXDV;
  VPOAIT02.PC4ORTYP = PB0XW06.PC4ORTYP;
  VPOAIT02.XPRCD = PB0XW06.XPRCD;


  VPOAIT02.PG1SC4CD = PB0XW06.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;


  VPOAIT02.YACCD = PB0XW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;


   /* **                                                        ***/
   /* ********************** End of PB0XS26 ***********************/
end // end PB0XS26


// load saved "Split To" Item row
Function PB0XS27()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PB0XW06.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PB0XW06.PO-REG-CD; /* Region*/
  VPOASZ02.PC3PONBR = PB0XW06.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = PB0XW06.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = PB0XW06.SY2CLRID;
  VPOASZ02.XDMCD = PB0XW06.XDMCD;
  VPOASZ02.XQACD = PB0XW06.XQACD;
  VPOASZ02.XOWCD = PB0XW06.XOWCD;
  VPOASZ02.PC2INSEG = PB0XW06.PC2INSEG;
  VPOASZ02.XPGCD = PB0XW06.XPGCD;
  VPOASZ02.XUMCD = PB0XW06.XUMCD;
  VPOASZ02.PC6ETSDT = PB0XW06.PC6ETSDT;
  VPOASZ02.PC6OETS = PB0XW06.PC6OETS;
  VPOASZ02.PC6RTADT = PB0XW06.PC6RTADT;
  VPOASZ02.YMTCD = PB0XW06.YMTCD;
  VPOASZ02.PC6CXNBR = PB0XW06.PC6CXNBR;
  VPOASZ02.XWHCD = PB0XW06.XWHCD;
  VPOASZ02.PC2CUXID = PB0XW06.PC2CUXID;
  VPOASZ02.ZFC-CRCY-CD = PB0XW07.ZFC-CRCY-CD;
  VPOASZ02.OP1CUOID = PB0XW06.OP1CUOID;
  VPOASZ02.OP1NORID = PB0XW06.OP1NORID;
  VPOASZ02.OP1PARTN = PB0XW06.OP1PARTN;


   /* **                                                        ***/
   /* ********************** End of PB0XS27 ***********************/
end // end PB0XS27


// load saved Split From item row
Function PB0XS28()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split to" item row.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PB0XW04.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PB0XW04.PO-REG-CD; /* Region*/
  VPOAIT02.PC3PONBR = PB0XW04.PC3PONBR; /* PO number*/
  VPOAIT02.PCJSEQNO = 0;
  VPOAIT02.SY1STNBR = PB0XW04.SY1STNBR;
  VPOAIT02.SY2CLRID = PB0XW04.SY2CLRID;
  VPOAIT02.XDMCD = PB0XW04.XDMCD;
  VPOAIT02.XQACD = PB0XW04.XQACD;
  VPOAIT02.XOWCD = PB0XW04.XOWCD;
  VPOAIT02.PC2INSEG = PB0XW04.PC2INSEG;
  VPOAIT02.XPGCD = PB0XW04.XPGCD;
  VPOAIT02.XUMCD = PB0XW04.XUMCD;
  VPOAIT02.PCFSECD = PB0XW04.PCFSECD;
  VPOAIT02.PC3POIDT = PB0XW04.PC3POIDT;
  VPOAIT02.FY1FCTYC = PB0XW04.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PB0XW04.PC6ETSDT;
  VPOAIT02.PC6OETS = PB0XW04.PC6OETS;
  VPOAIT02.PC6RTADT = PB0XW04.PC6RTADT;
  VPOAIT02.YMTCD = PB0XW04.YMTCD;
  VPOAIT02.XWHCD = PB0XW04.XWHCD;
  VPOAIT02.PC2CUXID = PB0XW04.PC2CUXID;
  VPOAIT02.PC6XCTCD = PB0XW04.PC6XCTCD;
  VPOAIT02.PC6CXNBR = PB0XW04.PC6CXNBR;
  VPOAIT02.PC6PLAN = PB0XW04.PC6PLAN;
  VPOAIT02.XDSCD = PB0XW04.XDSCD;
  VPOAIT02.YSMXDV = PB0XW04.YSMXDV;
  VPOAIT02.PC4ORTYP = PB0XW04.PC4ORTYP;
  VPOAIT02.XPRCD = PB0XW04.XPRCD;

  VPOAIT02.OP1CUOID = PB0XW04.OP1CUOID;
  VPOAIT02.OP1NORID = PB0XW04.OP1NORID;
  VPOAIT02.OP1PARTN = PB0XW04.OP1PARTN;

  VPOAIT02.PG1SC4CD = PB0XW04.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PB0XW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PB0XS28 ***********************/
end // end PB0XS28


// load saved Split From item row
Function PB0XS29()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PB0XW04.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PB0XW04.PO-REG-CD; /* Region*/
  VPOASZ02.PC3PONBR = PB0XW04.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = PB0XW04.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = PB0XW04.SY2CLRID;
  VPOASZ02.XDMCD = PB0XW04.XDMCD;
  VPOASZ02.XQACD = PB0XW04.XQACD;
  VPOASZ02.XOWCD = PB0XW04.XOWCD;
  VPOASZ02.PC2INSEG = PB0XW04.PC2INSEG;
  VPOASZ02.XPGCD = PB0XW04.XPGCD;
  VPOASZ02.XUMCD = PB0XW04.XUMCD;
  VPOASZ02.PC6ETSDT = PB0XW04.PC6ETSDT;
  VPOASZ02.PC6OETS = PB0XW04.PC6OETS;
  VPOASZ02.PC6RTADT = PB0XW04.PC6RTADT;
  VPOASZ02.YMTCD = PB0XW04.YMTCD;
  VPOASZ02.PC6CXNBR = PB0XW04.PC6CXNBR;
  VPOASZ02.XWHCD = PB0XW04.XWHCD;
  VPOASZ02.PC2CUXID = PB0XW04.PC2CUXID;
  VPOASZ02.ZFC-CRCY-CD = PB0XW05.ZFC-CRCY-CD;
  VPOASZ02.OP1CUOID = PB0XW04.OP1CUOID;
  VPOASZ02.OP1NORID = PB0XW04.OP1NORID;
  VPOASZ02.OP1PARTN = PB0XW04.OP1PARTN;


   /* **                                                        ***/
   /* ********************** End of PB0XS29 ***********************/
end // end PB0XS29


// Select (z ) Unique    VPOSIZ02
Function PB0XS46()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nb;*/
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("Z ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PB0XW00.XXXPRCNM = "PB0XS46"; /* Module identification*/
  set PB0XM001.PC3PONBR cursor;
  PB0XW00.PB0XWSWM = "1";


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0XS46 ***********************/
end // end PB0XS46


// Select (S ) Unique    VPOTYP01
Function PB0XS50()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOTYP01 empty; /* Row storage area*/

  VPOTYP01.XGPCD = PB0XW01.XGPCD; /* ===> GPC*/
  VPOTYP01.PC4ORTYP = PB0XW01.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0XW00.XXXPRCNM = "PB0XS50"; /* Module identification*/
      PCWREC.XXXMSGNO = 33; /* Indicate invalid or missing*/

      return; /* =============> Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0XW00.XXXPRCNM = "PB0XS50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* ================> Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0XS50 ***********************/
end // end PB0XS50


// Select (z ) Unique    VPOITM05
Function PB0XS56()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOITM05.XGPCD = PB0XW01.XGPCD; /* GPC code*/
  VPOITM05.PC3PONBR = PB0XW01.PC3PONBR; /* PO number*/
  VPOITM05.SY1STNBR = PB0XW01.SY1STNBR;
  VPOITM05.SY2CLRID = PB0XW01.SY2CLRID;
  VPOITM05.XDMCD = PB0XW01.XDMCD;
  VPOITM05.XQACD = PB0XW01.XQACD;
  VPOITM05.XOWCD = PB0XW01.XOWCD;
  VPOITM05.PC2INSEG = PB0XW01.PB0XWXSD;
  VPOITM05.XPGCD = PB0XW01.XPGCD;
  VPOITM05.XUMCD = PB0XW01.XUMCD;
  VPOITM05.XWHCD = PB0XW04.XWHCD;
  VPOITM05.XOWCD = PB0XW04.XOWCD;
  VPOITM05.PC2CUXID = PB0XW04.PC2CUXID;
  VPOITM05.YMTCD = PB0XW01.PB0XWSB2; /* ===> split by data*/
  VPOITM05.PC6RTADT = PB0XW01.PC6RTADT;
  VPOITM05.PC6CXNBR = PB0XW01.PC6CXNBR;
  VPOITM05.YSMXDV = PB0XW01.PB0XWXDV;

  if (PB0XW01.PB0XWETS == PB0XW01.PC6ETSDT) /* ===> ETS Date split request*/
    VPOITM05.PC6ETSDT = PB0XW01.PC6ETSDT; /* ===> ETS Date*/
    VPOITM05.PC6OETS = PB0XW01.PC6OETS; /* ===> Orig. ETS Date*/
  else
    VPOITM05.PC6ETSDT = PB0XW01.PB0XWETS; /* ===> ETS Date*/
    VPOITM05.PC6OETS = PB0XW01.PC6OETS; /* ===> Orig. ETS Date*/
  end


   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Z ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      PB0XW00.PB0XWMRG = "Y"; /* ===> merge items flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      PB0XW00.PB0XWMRG = "N"; /* ===> merge items flag*/

      return; /* Return to previous process*/

    end

  end

  PB0XW00.XXXPRCNM = "PB0XS56"; /* Module identification*/
  set PB0XM001.CATOAP cursor;


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/
                                  /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0XW00.PB0XWSWM = "1"; /* ===> request for map switch*/
  exit stack; /* Exit to display map*/



   /* **                                                        ***/
   /* ********************** End of PB0XS56 ***********************/
end // end PB0XS56


// Update (vA) item row  VPOITM05
Function PB0XS81()
   /* ------------------------------------------------------------*/
   /* Select & Update unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/


  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  PCYREC.PCYFUNC = "VA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0XS81"; /* Module identification*/
  set PB0XM001.CATOAP cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PB0XS99(); /* ===> reinituialize flags and indexes*/
    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Return to previous process*/

    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ALTENATE (UA) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0XS81 ***********************/
end // end PB0XS81


// Update 'v ' size D.B. VPOSIZ02
Function PB0XS82()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  VPOSIZ02.PO-REG-CD = PB0XW00.PO-REG-CD;

  try
    call "VPOSIZ02" ("V ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/


    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0XS82"; /* Module identification*/
  set PB0XM001.PC3PONBR cursor;
  PB0XW00.PB0XWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PB0XS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0XS82 ***********************/
end // end PB0XS82


// Select (h2) Seq nbr   VPOITM05
Function PB0XS90()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select max SEQ NBR*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>pass row storage area*/

  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  VPOITM05.XGPCD = PB0XW01.XGPCD;
  VPOITM05.PC3PONBR = PB0XW01.PC3PONBR; /* ===> P.O. NBR*/
  PCYREC.PCYFUNC = "H2";

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* load the display record with the new sequence number.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      PB0XW01.PB0XWSEQ = PCYREC.PCYCOUNT + 1; /* ===> seq number to changed row*/

      return; /* Return to previous process*/

    end

  end

  PB0XW00.XXXPRCNM = "PB0XS90"; /* Module identification*/
  set PB0XM001.CATOAP cursor;


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX (M2) SEQ. NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0XS90 ***********************/
end // end PB0XS90


// Insert  (i ) Item row VPOITM05
Function PB0XS91()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  VPOITM05.PO-REG-CD = PB0XW00.PO-REG-CD;

  PCYREC.PCYFUNC = "I ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0XS91"; /* Module identification*/
  set PB0XM001.PC3PONBR cursor;

   /* IF EZERT8 EQ '00000000'         ; Call successful*/
    /* AND SQLCA.SQLCODE EQ 100      ; and normal return code*/

    /* PB0Xs99     ;===> reset indexes & flags*/

    /* MOVE 12 TO EZEMNO   ;=======> data updated by another*/

    /* EZEFLO                        ; Return to previous process*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PB0XW00.PB0XW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PB0XW00.PB0XWSWM = "1"; /* ===> request for map switch*/

    set PB0XM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0XS91 ***********************/
end // end PB0XS91


// Insert (i ) size D.B. VPOSIZ02
Function PB0XS92()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  VPOSIZ02.PO-REG-CD = PB0XW00.PO-REG-CD;

  try
    call "VPOSIZ02" ("I ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/


    return; /* Return to previous process*/

  end

  PB0XW00.XXXPRCNM = "PB0XS92"; /* Module identification*/
  set PB0XM001.PC3PONBR cursor;
  PB0XW00.PB0XWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PB0XS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0XM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0XW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0XS92 ***********************/
end // end PB0XS92


// re-initialize indexes/flags
Function PB0XS99()
   /* ------------------------------------------------------------*/
   /* re-initialize indexes and flags for requested new data*/
   /* ------------------------------------------------------------*/


  PB0XW00.PB0XWUPF = "N"; /* ===>D.B. Update flag*/
  PB0XW00.PB0XWMOD = "N"; /* ===>reset modified flag*/
  PB0XW00.PB0XWSWR = "Y"; /* ===>request for data*/
  PB0XW00.PB0XWSWF = "Y"; /* ===>request for format map 1*/
  PB0XW00.PB0XWF20 = "Y"; /* ===>initialize first sizes*/
  PB0XW00.PB0XWIXS = 1; /* ===>initialize index*/


   /* **                                                        ***/
   /* ********************** End of PB0XS99 ***********************/
end // end PB0XS99


// Select (h1) seq. nbr  VPOAIT02
Function PB0XSA0()
   /* ----------------------------------------------------------*/
    /* Do a select max count on the item audit sequence number*/
    /* and add 1 to the count.*/
   /* ----------------------------------------------------------*/

  VPOAIT02.PO-REG-CD = PB0XW00.PO-REG-CD;

  PCYREC.PCYFUNC = "H1"; /* Select max count*/

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the SEQ NBR returned*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0XW00.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PB0XW00.PCJSEQNO = 1;
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PB0XW00.XXXPRCNM = "PB0XSA0";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0XSA0"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM AUDIT ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
   /* **                                                        ***/
   /* ********************** End of PB0XSA0 ***********************/
end // end PB0XSA0


// Insert (i) item audit VPOAIT02
Function PB0XSA1()
   /* ------------------------------------------------------------*/
    /* Add the formatted item audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PO-REG-CD = PB0XW00.PO-REG-CD;

  PCYREC.PCYFUNC = "I ";
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    VPOAIT02.PCJNETQT = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIAFTN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRA = " "; /* ===> reset audit field*/
    VPOAIT02.PCIAFTA = " "; /* ===> reset ausit field*/
    return;

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PB0XW00.XXXPRCNM = "PB0XSA1";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0XSA1"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PB0XSA1 ***********************/
end // end PB0XSA1


// Insert (i) size audit VPOASZ02
Function PB0XSA2()
   /* ------------------------------------------------------------*/
   /* Insert/add the formatted size audit record to the D.B.*/
   /* ------------------------------------------------------------*/


  VPOASZ02.PO-REG-CD = PB0XW00.PO-REG-CD;

  try
    call "VPOASZ02" ("I ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PB0XW00.XXXPRCNM = "PB0XSA2";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0XSA2"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PB0XSA2 ***********************/
end // end PB0XSA2


// Driver (set audit rec. flags)
Function PB0XSA4()
   /* ------------------------------------------------------------*/
   /* This module is preformed to process and load audits flags*/
   /* for an  audit on the "Maintenance From" item row.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* L/C Amend print indicator*/
   /* ------------------------------------------------------------*/
     /* If the destination changed*/
        /* The L/C Amendment print indicator need to be set*/
        /* (1,2,3,5)*/
     /* else*/
        /* The L/C Amendment print indicator need to be set*/
        /* (3,5)*/
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------------*/
                     /* Change Memo flag*/
   /* ------------------------------------------------------------*/

  PB0XSA8(); /* ===> Get and Load Change Memo Flag*/


   /* ------------------------------------------------------------*/
                    /* Order Adjustment flag*/
   /* ------------------------------------------------------------*/

  PB0XSA9(); /* ===> Get and Load Order adjustment*/
                                   /* flag*/


   /* **                                                        ***/
   /* ********************** End of PB0XSA4 ***********************/
end // end PB0XSA4


// Get & Load "Change Memo Flag"
Function PB0XSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> if po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        if (PB0XW01.PC6ETSDT != PB0XW04.PC6ETSDT /* IF ETS changed*/
         || PB0XW01.YMTCD != PB0XW04.YMTCD)      /* or mode changed*/
          if (PB0XW01.PC2CUXID == PB0XW04.PC2CUXID /* IF cust not changed*/
           && PB0XW01.XWHCD == PB0XW04.XWHCD)      /* and whse not changed*/
            VPOAIT02.PCJMEMO = "N";
          else
            VPOAIT02.PCJMEMO = " ";
          end
        else
          VPOAIT02.PCJMEMO = " ";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====> CUST flag = "Y" check*/

    else /* ===> code not in table*/

      PB0XW00.XXXPRCNM = "PB0XSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PB0XSA8 ***********************/
end // end PB0XSA8


// Get & Load "Order Adj. Flag"
Function PB0XSA9()
   /* ------------------------------------------------------------*/
   /* Determine if the Order Adjustment flag is set and load the*/
   /* appropriate Order Adjustment flag accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> Order adjustment flag*/
        if (PB0XW01.PC6ETSDT != PB0XW04.PC6ETSDT) /* if ETS changed*/
          if (PB0XW01.PC2CUXID == PB0XW04.PC2CUXID /* if cust not changed*/
           && PB0XW01.XWHCD == PB0XW04.XWHCD       /* and whse not changed*/
           && PB0XW01.YMTCD == PB0XW04.YMTCD)      /* and mode not changed*/
            VPOAIT02.PCJOAPRT = "N";
          else
            VPOAIT02.PCJOAPRT = " ";
          end
        else
          VPOAIT02.PCJOAPRT = " ";
        end
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====> check YOACD*/

    else /* ===> code not in table*/


      PB0XW00.XXXPRCNM = "PB0XSA9"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PB0XSA9 ***********************/
end // end PB0XSA9


// Calc. "Balance To Ship"
Function XPPC030-DRDA()
   /* ------------------------------------------------------------*/

                        /* X P P C 0 3 0*/
                       /* ---------------*/

       /* This process group will be called to obtain the*/
    /* remaining balance to ship for a given item.  The*/
    /* values returned to the calling program will contain*/
    /* accumulated values down to a size array level, in PC5REC.*/
    /* ----->(ie: Size( 1 - 40 ).*/

    /* NOTE:   10/15/91*/
    /* This routine has been modified to include the Sales*/
    /* Order fields in retrieving balance to ship data.*/

      /* The Balance To Ship array fields are calculated from*/
   /* three accummulated size(i) array totals by accessing the*/
   /* Transportation and Product Order D.B. systems.*/

    /* If successful, the PC5REC will contain 7 array and 7 total*/
    /* fields which are related to " Balance to Ship "*/

    /* Note: 1. Each array field has an occurance of 40.*/
    /* Note: 2. The "Balance To Ship" will never be negative.*/
             /* This subroutine forces zeros in negative cases.*/

   /* **** ---------------   --------   -------------------- *****/
   /* **** Balance to Ship = On Order - (Shipped + Received) *****/
   /* **** ---------------   --------   -------------------- *****/

    /* PC5REC.PC5TBALC      =  Total "Balance to Ship"*/
    /* PC5REC.PC5BALC array =  "Balance to Ship"*/

    /* PC5REC.PC5TORDR      =  Total "On Order QTYs"*/
    /* PC5REC.PC5ORDR array =  "On Order QTYs"*/
                            /* w/ status in ("OP","CL","FC","NC")*/

    /* PC5REC.PC5TSHIP      =  Total "Shipped QTYs"*/
    /* PC5REC.PC5SHIP array =  "Shipped QTYs"*/
                            /* w/ status in ("IT","CC")*/
                            /* -- includes 'er' & 'cr' if*/
                               /* pc5erfl set to 'y'*/
    /* PC5REC.PC5erfl       =  move a 'y' if you want  the*/
                            /* shipment total to include*/
                            /* status of ('er','cr')*/
    /* PC5REC.PC5yerfl      =  set to 'y' if shipments found*/
                            /* w/ status in ("er","cr")*/

    /* PC5REC.PC5TRV10      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV10 array=  "Received QTYs"*/
                            /* w/ status in ("10")*/

   /* **** ------------------------------------------------- *****/
   /* **** the following fields are also available for use:*****/
   /* **** ------------------------------------------------- *****/

    /* PC5REC.PC5TSRCV      =  Total "Shipped and Recieved QTYs"*/
    /* PC5REC.PC5SRCV array =  "Shipped and recieved QTYs"*/
                            /* w/ status in ("RC")*/

    /* PC5REC.PC5TRECV      =  Total "Received QTYs"*/
    /* PC5REC.PC5RECV array =  "Received QTYs"*/
                            /* w/ status in ("10","11","13")*/

    /* PC5REC.PC5TRV12      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV12 array=  "Received QTYs"*/
                            /* w/ status in ("12")*/
                                          /* --> receiving error*/

   /* ***                                                     ****/
   /* ******************* REQUIRED PASS DATA *********************/
   /* ***                                                     ****/

   /* ** The following records must be added to your*/
      /* application record list:*/

    /* PC5REC, PC6REC, PC7REC, PCMREC, TSTREC, TSOREC, and TSHREC*/
    /* and ts5rec*/

   /* ** The following fields must be moved to the PC5REC:*/
      /* use a "%GET" command to get/copy these fields.*/


   /* SET PC5REC EMPTY    ;===>initialize record*/

   /* MOVE PC??W??.XGPCD TO PC5REC.XGPCD     ;===>GPC Code*/
   /* MOVE PC??W??.PC3PONBR TO PC5REC.PC3PONBR;===>P.O. Number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

   /* MOVE PC??W??.SY1STNBR TO PC5REC.SY1STNBR;==> Style number*/
   /* MOVE PC??W??.SY2CLRID TO PC5REC.SY2CLRID;==> Color code*/
   /* MOVE PC??W??.XDMCD TO PC5REC.XDMCD      ;==> Dimension code*/
   /* MOVE PC??W??.XQACD TO PC5REC.XQACD      ;==> Quality code*/
   /* MOVE PC??W??.XOWCD TO PC5REC.XOWCD      ;==> Owner grp code*/
   /* MOVE PC??W??.XSDCD TO PC5REC.XSDCD      ;==> Spec Diff code*/
   /* MOVE PC??W??.XPGCD TO PC5REC.XPGCD      ;==> Package code*/
   /* MOVE PC??W??.XUMCD TO PC5REC.XUMCD      ;==> Unit of measure*/
   /* MOVE PC??W??.ymtCD TO PC5REC.ymtCD      ;==> Mode of Transportation*/

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
   /* MOVE PC??W??.XWHCD TO PC5REC.XWHCD      ;==> Warehouse code*/
   /* MOVE PC??W??.PC2CUXID TO PC5REC.PC2CUXID;==> Cust Xref ID*/
   /* MOVE 'y'           TO PC5REC.pc5erfl    ;==> incl. hard errs*/
                                           /* ==> default to 'n'*/

   /* ============>SALES ORDER FIELDS*/
   /* ============>-----------------*/
   /* MOVE PC??W??.OP1PARTN TO PC5REC.OP1PARTN   ;*/
   /* MOVE PC??W??.OP1CUOID TO PC5REC.OP1CUOID   ;*/
   /* MOVE PC??W??.OP1NORID TO PC5REC.OP1NORID   ;*/

   /* ----------------------------------------------------------*/
   /* PERFORM XPPC030;===> subroutine to calc. "Balance to Ship"*/
   /* ----------------------------------------------------------*/

    /* Any bad DB2 return codes will be handled by the*/
    /* executed statement groups.*/

    /* - If a  negative SQL Code is incountered, an EZEFLO*/
        /* will be performed and the process name where*/
        /* it occurred will be placed in PC5REC.XXXPRCNM.*/


                        /* X P P C 0 3 0*/
                       /* ---------------*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5TSHIP = 0; /* ===> Init Shipped  QTYs Total*/
  PC5REC.PC5TSRCV = 0; /* ===> Init Shipped & Received QTY*/
                                   /* Total*/
  PC5REC.PC5TRECV = 0; /* ===> Init Receipt Total status 10,12*/
  PC5REC.PC5TRV10 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 10*/
  PC5REC.PC5TRV12 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 12*/
  PC5REC.PC5TORDR = 0; /* ===> Init On-order QTYs Total*/
  PC5REC.PC5TBALC = 0; /* ===> Init Balance to Ship QTY Total*/

  move 0 to PC5REC.PC5SHIP[1] for all; /* ===> Init Shipped QTYs array*/
  move 0 to PC5REC.PC5SRCV[1] for all; /* ===> Init Shipped & Received QTYs*/
                                   /* array*/
  move 0 to PC5REC.PC5RECV[1] for all; /* ===> Init Receipt QTYs array status 10,12*/
  move 0 to PC5REC.PC5RCV10[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 10*/
  move 0 to PC5REC.PC5RCV12[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 12*/
  move 0 to PC5REC.PC5ORDR[1] for all; /* ===> Init On-order QTYs array*/
  move 0 to PC5REC.PC5BALC[1] for all; /* ===> Init Balance to Ship QTY array*/

  PC5REC.PC5YERFL = "N"; /* ===> init hard ship error flag*/

   /* ------------------------------------------------------------*/
   /* Set up to calculate all the quantities necessary to*/
   /* Calculate the remaining balance of QTYs still left to ship.*/
   /* These three calls will use the Transportation access key*/
   /* of (GPC, Product Key, and Destination Key) and accumulate*/
   /* QTY totals on a size level.*/
   /* ------------------------------------------------------------*/

  XPPC031(); /* ===> get Shipment QTYs from VCPLIT01*/

  XPPC032-DRDA(); /* ===> get Receipt QTYs  from VFYPO002*/

  XPPC033-DRDA(); /* ===> get On Order QTYs from VPOSIZ02*/


   /* ------------------------------------------------------------*/
   /* Calc. the remaining balance of QTYs still left to ship*/
   /* on a size level.*/

   /* Note:  Balance To Ship = On Order - (Shipped + Received)*/

   /* ------------------------------------------------------------*/

  PC5REC.PC5WIXT = 1;

  while (PC5REC.PC5WIXT <= 40)


    /* ------------------------------------------------------------*/
    /* ==> On Order  size QTYs  (on size level w/ status "OP")*/
    /* ==> Shipped   size QTYs  (on size level w/ status "IT","CC")*/
    /* ==> Received size QTYs  (on size level w/ status "10")*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5WORD = PC5REC.PC5ORDR[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WSHP = PC5REC.PC5SHIP[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WRCV = PC5REC.PC5RCV10[PC5WIXT]; /* ==> W.S*/

    PC5REC.PC5WSUM = PC5REC.PC5WSHP + PC5REC.PC5WRCV;

    /* ------------------------------------------------------------*/
    /* ===> Balance To Ship = On Order - (Shipped + Received)*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5BALC[PC5WIXT] = PC5REC.PC5WORD - PC5REC.PC5WSUM;

    if (PC5REC.PC5BALC[PC5WIXT] < 0) /* ==> balance is negative*/
      PC5REC.PC5BALC[PC5WIXT] = 0; /* ===> force to zero*/
    end

    PC5REC.PC5TBALC = PC5REC.PC5TBALC + PC5REC.PC5BALC[PC5WIXT];

    PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1;

  end

   /* **                                                        ***/
   /* ********************** End of XPPC030 ***********************/
end // end XPPC030-DRDA


// Get Received QTYs  (Prod/Dest)
Function XPPC032-DRDA()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  PC5REC.PC5WSWT = "N"; /* Set EOF Temp cursor flag to no*/

  set VFYPO002 empty;

  VFYPO002.XGPCD = PC5REC.XGPCD;
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD;
  VFYPO002.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VFYPO002.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VFYPO002.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VFYPO002.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VFYPO002.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VFYPO002.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VFYPO002.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VFYPO002.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VFYPO002.YMTCD = PC5REC.YMTCD; /* ==> Mode of Transportation*/

   /* ============> set owner group*/
   /* ============>-----------------*/
  VFYPO002.XOWCD = "*"; /* ==> Owner group code*/
  if (VFYPO002.XWHCD == "09") /* check for promo warehouse*/
         /* leave OG = '*'*/
  else
    if (VFYPO002.XGPCD == "03") /* check for finished good*/
      set PG2REC empty;
      PG2REC.XGPCD = PC5REC.XGPCD;
      PG2REC.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
      PG2REC.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
      PG2REC.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
      XSPG202(); /* read the style color rec*/
      if (PG2REC.XFMCD == "21" /* if this is a t-shirt*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
      end
    end
  end

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VFYPO002.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VFYPO002.PC2CUXID = PC5REC.PC2CUXID; /* ==> cust xref*/

   /* ============>SALES ORDER FIELD*/
   /* ============>-----------------*/
  VFYPO002.OP1PARTN = PC5REC.OP1PARTN; /**/
  VFYPO002.OP1CUOID = PC5REC.OP1CUOID; /**/
  VFYPO002.OP1NORID = PC5REC.OP1NORID; /**/

   /* Region*/
  VFYPO002.PO-REG-CD = PC5REC.PO-REG-CD;
  XSPCS-VFYPO002-Z8(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-G8(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC5REC.PC5WSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* accumulate them  by size position.*/
     /* ---> Three size arrays and totals are calc. in this loop*/
          /* 1. for both receiving status codes of (10,11,13)*/
          /* 2. for      receiving status code  of (10)*/
          /* 3. for      receiving status code  of (12)*/
    /* ------------------------------------------------------------*/

    if (VFYPO002.YRSCD == "10" /* ===> receiving status code*/
     || VFYPO002.YRSCD == "11" 
     || VFYPO002.YRSCD == "12" 
     || VFYPO002.YRSCD == "13")

      if (VFYPO002.PC2CUXID == " ")

        XSPCS74(); /* ===> accumulate the size QTYs*/

      else

        if (VFYPO002.PC2CUXID == PC5REC.PC2CUXID)

          XSPCS74(); /* ===> accumulate the size QTYs*/

        end /* ===> cust xref match check*/

      end /* ===> cust xref check*/

    end /* ===> receiving status code check*/

    XSPCS-VFYPO002-G8(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VFYPO002-Q8(); /* ===> Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC032 ***********************/
end // end XPPC032-DRDA


// Get On Order QTYs  (Prod/Dest)
Function XPPC033-DRDA()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  QTYs to be summed by*/
   /* using the same key that was used to get data from the*/
   /* Transportation System for shipped QTYs. (ie. the key:*/
   /* ---->  ( GPC, P.O. Number, Product, and Destination )*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/
  set PCYREC empty; /* ===>initialize record before loading*/
                                   /* it*/


  VPOITM05.XGPCD = PC5REC.XGPCD;
  VPOITM05.PO-REG-CD = PC5REC.PO-REG-CD;
  VPOITM05.PC3PONBR = PC5REC.PC3PONBR; /* ==>P.O. number*/


   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VPOITM05.SY1STNBR = PC5REC.SY1STNBR; /* ==> Style number*/
  VPOITM05.SY2CLRID = PC5REC.SY2CLRID; /* ==> Color code*/
  VPOITM05.XDMCD = PC5REC.XDMCD; /* ==> Dimension code*/
  VPOITM05.XQACD = PC5REC.XQACD; /* ==> Quality code*/
  VPOITM05.XOWCD = PC5REC.XOWCD; /* ==> Owner group code*/
  VPOITM05.PC2INSEG = PC5REC.PC2INSEG; /* ==> Spec Diff code*/
  VPOITM05.XPGCD = PC5REC.XPGCD; /* ==> Package code*/
  VPOITM05.XUMCD = PC5REC.XUMCD; /* ==> Unit of measure*/
  VPOITM05.YMTCD = PC5REC.YMTCD; /* ==> Mode of Transportation*/

   /* ============>DESTINATION FIELD*/
   /* ============>-----------------*/
  VPOITM05.XWHCD = PC5REC.XWHCD; /* ==> Warehouse code*/
  VPOITM05.PC2CUXID = PC5REC.PC2CUXID; /* ==> Customer Xref id*/

   /* ============>SALES ORDER FIELD*/
   /* ============>-----------------*/
  VPOITM05.OP1PARTN = PC5REC.OP1PARTN; /**/
  VPOITM05.OP1CUOID = PC5REC.OP1CUOID; /**/
  VPOITM05.OP1NORID = PC5REC.OP1NORID; /**/


   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";

  VPOITM05.PO-REG-CD = PC5REC.PO-REG-CD; /* Region*/

  XSPCS-VPOITM05-ZH(); /* ========> select set and open cursor*/

  XSPCS-VPOITM05-GH(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and sum the on order QTYs until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC5REC.PC5WSWT == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.PC6STAT == "OP"
     || VPOITM05.PC6STAT == "CL"
     || VPOITM05.PC6STAT == "FC"
     || VPOITM05.PC6STAT == "NC")


      XSPCS83-DRDA(); /* ==========> Select asso. size row*/

      PC5REC.PC5WIXT = 1; /* ===> initialize temp. index*/

      while (PC5REC.PC5WIXT <= 40) /* ===> Until all sizes processed*/
        /* -----------------------------;===> load on order QTYs*/

        PC5REC.PC5WORD = VPOSIZ02.PC7ORDEQ[PC5WIXT];
        PC5REC.PC5ORDR[PC5WIXT] = PC5REC.PC5ORDR[PC5WIXT] + PC5REC.PC5WORD;
        PC5REC.PC5TORDR = PC5REC.PC5TORDR + PC5REC.PC5WORD; /* ===> total*/

        PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1; /* ===> incr. temp. index*/

      end /* ===> Until all sizes processed*/

    end /* ===> item status code check*/

    XSPCS-VPOITM05-GH(); /* ==========> Fetch selected rows*/
    /* ========================================> driving read*/

  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS-VPOITM05-QH(); /* Close the selected set cursor*/


   /* **                                                        ***/
   /* ********************** End of XPPC033 ***********************/
end // end XPPC033-DRDA


// Fetch  (g8) Next row  VFYPO002
Function XSPCS-VFYPO002-G8()
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("G8", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC5REC.PC5WSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC5REC.XXXPRCNM = "XSPC-G8";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPC-G8"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of XSPCS-vfypo002-g8 *************/
end // end XSPCS-VFYPO002-G8


// Close  (q8) Set       VFYPO002
Function XSPCS-VFYPO002-Q8()
   /* ------------------------------------------------------------*/
   /* Close cursor for VFYPO002*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("Q8", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC5REC.XXXPRCNM = "XSPC-Q8"; /* ===> process identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPC-Q8"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of XSPCS-vfypo002-q8  ************/
end // end XSPCS-VFYPO002-Q8


// Select (z8) Set/Open  VFYPO002
Function XSPCS-VFYPO002-Z8()
   /* ------------------------------------------------------------*/
    /* Call on the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("Z8", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC5REC.XXXPRCNM = "XSPC-Z8"; /* Process name*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPC-Z8"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of XSPCs-vfypo002-z8 *************/
end // end XSPCS-VFYPO002-Z8


// Fetch  (gH) Next row  VPOITM05
Function XSPCS-VPOITM05-GH()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "GI";
  else
    PCYREC.PCYFUNC = "GH";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      PC5REC.PC5WSWT = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC5REC.XXXPRCNM = "XSPC-GH"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPC-GH"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCs-vPOITM05-gh *************/
end // end XSPCS-VPOITM05-GH


// Close  (qH) Set       VPOITM05
Function XSPCS-VPOITM05-QH()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "QI";
  else
    PCYREC.PCYFUNC = "QH";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC5REC.XXXPRCNM = "XSPC-QH"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPC-QH"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS-vPOITM05-qh *************/
end // end XSPCS-VPOITM05-QH


// Select (zH) Set/Open  VPOITM05
Function XSPCS-VPOITM05-ZH()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "ZI";
  else
    PCYREC.PCYFUNC = "ZH";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC5REC.XXXPRCNM = "XSPC-ZH"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPC-ZH"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS-vPOITM05-zh *************/
end // end XSPCS-VPOITM05-ZH


// Select (z ) Unique    VPOSIZ02
Function XSPCS83-DRDA()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/


  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nb;*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("Z ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC5REC.XXXPRCNM = "XSPCS83"; /* Module identification*/


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCS83"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS83 ***********************/
end // end XSPCS83-DRDA


//*** RECORD=PB0XW00 ****
// ------------------------------------------------------------
// 
// Record:   PB0XW00
// 
// Application working storage.
// 
// ------------------------------------------------------------
// ***********************
Record PB0XW00 type basicRecord
  10 PB0XWSWR PB0XWSWR ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PB0XWSWM PB0XWSWM ; 
  10 PB0XWSWS PB0XWSWS ; 
  10 PB0XWSWF PB0XWSWF ; 
  10 PB0XWSWP PB0XWSWP ; 
  10 PB0XWXIT PB0XWXIT ; 
  10 PB0XWSWT PB0XWSWT ; 
  10 PB0XWSW1 PB0XWSW1 ; 
  10 PB0XWSW2 PB0XWSW2 ; 
  10 * char(1) ; 
  10 PB0XWF20 PB0XWF20 ; 
  10 PB0XWMOD PB0XWMOD ; 
  10 PB0XWUPF PB0XWUPF ; 
  10 PB0XWMRG PB0XWMRG ; 
  10 PB0XWFL1 PB0XWFL1 ; 
  10 PB0XWFL2 PB0XWFL2 ; 
  10 PB0XWIOF PB0XWIOF ; 
  10 PB0XW911 PB0XW911 ; 
  10 * char(1) ; 
  10 PB0XWCSY PB0XWCSY ; 
  10 PB0XWTSY PB0XWTSY ; 
  10 * char(1) ; 
  10 PB0XWIXM PB0XWIXM ; 
  10 PB0XWIXF PB0XWIXF ; 
  10 PB0XWIXS PB0XWIXS ; 
  10 PB0XWIXZ PB0XWIXZ ; 
  10 PB0XWIXR PB0XWIXR ; 
  10 PB0XWIXT PB0XWIXT ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 PB0XWPRC PB0XWPRC ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 CAFROMAP CAFROMAP ; 
  10 PC6PLAN PC6PLAN ; 
  10 * char(1) ; 
  10 PB0XWDT PB0XWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 * char(1) ; 
  10 TA2GRGG TA2GRGG ; 
    15 PB0XWPCC PB0XWPCC ; 
    15 PB0XWPYR PB0XWPYR ; 
    15 PB0XWPMO PB0XWPMO ; 
    15 PB0XWPDM PB0XWPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PB0XWMM PB0XWMM ; 
    15 PB0XWDD PB0XWDD ; 
    15 PB0XWCC PB0XWCC ; 
    15 PB0XWYY PB0XWYY ; 
  10 * char(1) ; 
  10 PB0XW1DT PB0XW1DT ; 
    15 PB0XW1MM PB0XW1MM ; 
    15 PB0XW1DD PB0XW1DD ; 
    15 PB0XW1YY PB0XW1YY ; 
  10 * char(1) ; 
  10 PB0XWFDT PB0XWFDT ; 
    15 PB0XWFCC PB0XWFCC ; 
    15 PB0XWFYY PB0XWFYY ; 
    15 PB0XWFMM PB0XWFMM ; 
    15 PB0XWFDD PB0XWFDD ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 PB0XWRCP PB0XWRCP [40] ; 
  10 PB0XWRC PB0XWRC ; 
  10 PB0XWSHP PB0XWSHP [40] ; 
  10 PB0XWWSH PB0XWWSH ; 
  10 PB0XWORD PB0XWORD [40] ; 
  10 PB0XWOR PB0XWOR ; 
  10 PB0XWBAL PB0XWBAL [40] ; 
  10 PB0XWSUM PB0XWSUM ; 
  10 * char(1) ; 
  10 PB0XWVAL PB0XWVAL ; 
  10 PB0XWDIF PB0XWDIF ; 
  10 PB0XWSPT PB0XWSPT ; 
  10 PB0XWQTY PB0XWQTY ; 
  10 PB0XWSQT PB0XWSQT ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 PCJSEQNO PCJSEQNO ; 
  10 * char(1) ; 
  10 PB0XWCB1 PB0XWCB1 ; 
  10 PB0XWCB2 PB0XWCB2 ; 
  10 * char(1) ; 
  10 PB0XWDF1 PB0XWDF1 ; 
  10 PB0XWDF2 PB0XWDF2 ; 
  10 * char(1) ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PB0XWKA1 PB0XWKA1 ; 
      20 PB0XWKN1 PB0XWKN1 ; 
      20 * char(1) ; 
    15 PB0XWKA2 PB0XWKA2 ; 
      20 PB0XWKN2 PB0XWKN2 ; 
      20 * char(1) ; 
    15 PB0XWKA3 PB0XWKA3 ; 
      20 PB0XWKN3 PB0XWKN3 ; 
      20 * char(1) ; 
    15 PB0XWKA4 PB0XWKA4 ; 
      20 PB0XWKN4 PB0XWKN4 ; 
      20 * char(1) ; 
end // end PB0XW00


//*** RECORD=PB0XW01 ****
// 
//   RECORD NAME:      PB0XW01
// 
//      MAP NAME:      PB0XM001
// 
//      This is a working storage record to hold map data.
// 
// * 05/17/00 vramac  Included sap po
// ***********************
Record PB0XW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PCFSECD PCFSECD ; 
  10 PC3CRDT PC3CRDT ; 
  10 PC6STAT PC6STAT ; 
  10 PC6CXNBR PC6CXNBR ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC6ITMNB PC6ITMNB ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC3BLPO PC3BLPO ; 
  10 PCFSEYR PCFSEYR ; 
  10 * char(1) ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 YPCCD YPCCD ; 
  10 * char(1) ; 
  10 XSECD XSECD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XPGCD XPGCD ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 * char(1) ; 
  10 XWHCD XWHCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 YMTCD YMTCD ; 
  10 YOHCD YOHCD ; 
  10 YSMXDV YSMXDV ; 
  10 XDMCD XDMCD ; 
  10 XDSCD XDSCD ; 
  10 YACCD YACCD ; 
  10 YACDESC YACDESC ; 
  10 * char(1) ; 
  10 PB0XWTVL PB0XWTVL ; 
  10 PC6TORDE PC6TORDE ; 
  10 PC6MICHG PC6MICHG ; 
  10 * char(1) ; 
  10 SY4IDDSC SY4IDDSC [40] ; 
  10 PC7ORDEQ PC7ORDEQ [40] ; 
  10 PC7FOBFL PC7FOBFL [40] ; 
  10 FY4FOBPR FY4FOBPR [40] ; 
  10 * char(1) ; 
  10 PB0XWVRD PB0XWVRD [40] ; 
  10 PB0XWVRF PB0XWVRF [40] ; 
  10 PB0XWVRQ PB0XWVRQ [40] ; 
  10 * char(1) ; 
  10 PC6OETS PC6OETS ; 
  10 PC6RTADT PC6RTADT ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PB0XWDT1 PB0XWDT1 ; 
    15 PB0XWDT1C PB0XWDT1C ; 
  10 * char(1) ; 
  10 PB0XWETS PB0XWETS ; 
  10 PB0XWSB1 PB0XWSB1 ; 
  10 PB0XWSB2 PB0XWSB2 ; 
  10 * char(1) ; 
  10 PB0XWXSD PB0XWXSD ; 
  10 PB0XWXDS PB0XWXDS ; 
  10 PB0XWXDV PB0XWXDV ; 
  10 PB0XWPLN PB0XWPLN ; 
  10 PB0XWSQT PB0XWSQT [40] ; 
  10 PB0XWSPT PB0XWSPT ; 
  10 PB0XWXCT PB0XWXCT ; 
  10 PB0XWSEQ PB0XWSEQ ; 
end // end PB0XW01


//*** RECORD=PB0XW03 ****
//   This record contains commonly passed data for the
//   production order applications.
// 
//   This is a copy of PCWREC, and it must be changed when
//   PCWREC is modified.
// 
// ***************** po common pass data *********************
// 
// ***********************
Record PB0XW03 type basicRecord
  5 CAUSERA CAUSERA ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PCFSECD PCFSECD ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PCWITKEY PCWITKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 PC6ETSDT PC6ETSDT ; 
      15 YMTCD YMTCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 XSECD XSECD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PCWMAP PCWMAP ; 
    10 PCWFNC PCWFNC [4] ; 
    10 PCWSYIDX PCWSYIDX ; 
    10 PCWITMKY PCWITMKY [20] ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 PCWDEST PCWDEST [15] ; 
      15 PCWWHSE PCWWHSE ; 
      15 PCWCUST PCWCUST ; 
    10 YSICD YSICD ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 CAFROMAP CAFROMAP [4] ; 
    10 XGPCD XGPCD ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PCWFRDT PCWFRDT ; 
    10 PCWTODT PCWTODT ; 
    10 YOACD YOACD ; 
    10 PCWUSER1 PCWUSER1 ; 
    10 PCWUSER2 PCWUSER2 ; 
    10 PCWUSER3 PCWUSER3 ; 
    10 PCWUSER4 PCWUSER4 ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PCWSIZE PCWSIZE ; 
    10 PCWDEVCD PCWDEVCD ; 
    10 PCWAUDFL PCWAUDFL ; 
    10 PC6STAT PC6STAT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6OETS PC6OETS ; 
end // end PB0XW03


//*** RECORD=PB0XW04 ****
// *******           PO ITEM TABLE ROW                  *******
//                      (SAVED COPY)
// 
//    RECORD NAME:      PB0XW04
// 
//    THIS RECORD IS USED IN THE UPDATE PROCESSES.
// 
// 09/15/99    SBUNGO    CHANGED TO USE VIEW VPOITM04
// 03/24/00    SBUNGO    CHANGED TO USE VIEW VPOITM05
// 
// ***********************
Record PB0XW04 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0XW04


//*** RECORD=PB0XW05 ****
// 
//    This record holds data of the size table row.
// 
// ***********************
Record PB0XW05 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0XW05


//*** RECORD=PB0XW06 ****
// *******           PO ITEM TABLE ROW                  *******
//                      (SAVED COPY)
// 
//    RECORD NAME:      PB0XW06
// 
//    THIS RECORD IS USED IN THE UPDATE PROCESSES.
// 
//  09/15/99   SBUNGO   CHANGED TO USE VIEW VPOITM04
//  03/24/00   SBUNGO   CHANGED TO USE VIEW VPOITM05
// 
// 
// ***********************
Record PB0XW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0XW06


//*** RECORD=PB0XW07 ****
// 
//    This record holds data of the size table row.
// 
// 
// ***********************
Record PB0XW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0XW07


// date day map display
DataItem PB0XW1DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// wdate-greg-mmddccyy-num
DataItem PB0XW1DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// date month map display
DataItem PB0XW1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// date year map display
DataItem PB0XW1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// -911 flag
DataItem PB0XW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// W.S. balance to ship
DataItem PB0XWBAL num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// control break 1 (FY_FOB_PRC)
DataItem PB0XWCB1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// control break 2 (ovrd flag)
DataItem PB0XWCB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ETS date century
DataItem PB0XWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Current Style index
DataItem PB0XWCSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// date day map display
DataItem PB0XWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// diff QTYs   (temp accumulator)
DataItem PB0XWDF1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// diff QTYs   (temp accumulator)
DataItem PB0XWDF2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// diff QTYs   (temp accumulator)
DataItem PB0XWDIF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// CHAR data form
DataItem PB0XWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ets date display(num)
DataItem PB0XWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ets date display (cha)
DataItem PB0XWDT1C char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// split PC_EST_HDT (calc date)
DataItem PB0XWETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// first 20 sizes format switch
DataItem PB0XWF20 char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end


// Reformat year
DataItem PB0XWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Reformat day
DataItem PB0XWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Reformat date CCYYmmdd
DataItem PB0XWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Flag 1 (temp use)
DataItem PB0XWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Flag 2 (temp use)
DataItem PB0XWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Reformat month
DataItem PB0XWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Reformat year
DataItem PB0XWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// item open flag
DataItem PB0XWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Index for scroll Finder index
DataItem PB0XWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Index for map size fields
DataItem PB0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Index for size rec sort/match
DataItem PB0XWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Index for sizes
DataItem PB0XWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Index for temp index
DataItem PB0XWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Index for sizes (saved)
DataItem PB0XWIXZ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// 1st field of error key char
DataItem PB0XWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// 2nd field of error key char
DataItem PB0XWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// 3rd field of error key char
DataItem PB0XWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// 4th field of error key char
DataItem PB0XWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// 1st field of error key num
DataItem PB0XWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// 2nd field of error key num
DataItem PB0XWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// 3rd field of error key num
DataItem PB0XWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// 4th field of error key num
DataItem PB0XWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// date month map display
DataItem PB0XWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// modified data flag
DataItem PB0XWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Merged on items occured flag
DataItem PB0XWMRG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// W.S. on order size quantities
DataItem PB0XWOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// on order size quantity fields
DataItem PB0XWORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// P.O. ID Production century
DataItem PB0XWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// P.O. Id Delivery Month
DataItem PB0XWPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end


// split PC_PRDCTN_PLAN_NBR
DataItem PB0XWPLN smallint {
  upperCase = yes, currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// P.O. Id Month
DataItem PB0XWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end


// saved PROCESS NAME for PA2 Key
DataItem PB0XWPRC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// P.O. Id Year
DataItem PB0XWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end


// total QTYs  (temp accumulator)
DataItem PB0XWQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// W.S. receipted size quantities
DataItem PB0XWRC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// receipted size quantity fields
DataItem PB0XWRCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// split by 1st field (ETS Date)
DataItem PB0XWSB1 char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end


// split by 2nd field (Mode)
DataItem PB0XWSB2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// split PC_ITM_SEQ_NBR
DataItem PB0XWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// shipped size quantity fields
DataItem PB0XWSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// split total QTYs (temp accum.)
DataItem PB0XWSPT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// split size QTY
DataItem PB0XWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// W.S. (temp accumulator)
DataItem PB0XWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// Cursor end of file "temp use"
DataItem PB0XWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Cursor end of file "temp use"
DataItem PB0XWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Format the map 1 switch
DataItem PB0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Request for map switch
DataItem PB0XWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Format/protect map 1 switch
DataItem PB0XWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Request for data switch
DataItem PB0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Format the map 1 sizes switch
DataItem PB0XWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Cursor end of file "temp use"
DataItem PB0XWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Total Styles
DataItem PB0XWTSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// total value (temp accum.)
DataItem PB0XWTVL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// update confirm flag
DataItem PB0XWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// size level value (temp accum.)
DataItem PB0XWVAL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// FOB Override templete (price)
DataItem PB0XWVRD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// FOB Override templete (flag)
DataItem PB0XWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// FOB Override templete (QTYs)
DataItem PB0XWVRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// W.S. shipped size quantities
DataItem PB0XWWSH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// split destination XCT_CTRY_CD
DataItem PB0XWXCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// split direct ship code
DataItem PB0XWXDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// split XXX_SUM_XDV_CD
DataItem PB0XWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// exit application switch
DataItem PB0XWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// split spec difference code
DataItem PB0XWXSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// date year map display
DataItem PB0XWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


