package pb0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0P ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//                POID-SEASON  INQUIRY/MAINTENANCE
// 
//    This program will allow the user to INQ/CHG/DEL/ADD
// POID-SEASON information.  What the user will be doing is
// accessing a browse screen by entering Option 18 from the
// P.O. Order Menu.  In doing so, the user has the ability to
// browse all the valid POID-SEASON information currently on
// the system for apparel.
// 
//    From the browse screen, the program allows the user to
// perform different functions to POID verification records.
// 
//    The user may change, delete existing POID verification
// rows by placing a 'S' in the selection column field/
// fields and pressing an appropriate PF-Key. This action will
// place the user in the appropriate detailed screen, and the
// program will be ready for the desired process.  Certain
// fields will be protected and thus can not be changed.
// 
//    The user may also add a set of POID verification records
// (12) for a specific season code buy using add function.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 01/20/93   SDIFLE   New Application
// 06/10/97   PHARWO   PCA367 - PPR PROJECT - P.O. VIEWS
// 07/10/97   JNIESE   PCA367 - PPR corrections
// 06/12/00   MNADEL   Corrected the bug in XPPC001 FLOW
// 03/11/02   RSELVA   MODIFY TO USE VIEW VPOVFY02 INSTEAD OF
//                     IO4090.
// *********************
Program PB0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PB0PW00 PB0PW00; // record
  PB0PW01 PB0PW01; // record
  PB0PW02 PB0PW02; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOHDR03 VPOHDR03; // record
  VPOVFY02 VPOVFY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use PB0PM.PB0PM001,  // forms
      PB0PM.PB0PM002, 
      PB0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
    
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* -- 
                                                            --*/
    set PB0PM001 initial;
    set PB0PM002 initial;
    set PB0PW00 empty;
    set PB0PW01 empty;
    set PB0PW02 empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    PB0PW00.PB0PWSWF = "Y"; /* ===>format map switch*/
    PB0PW00.PB0PWSWR = "Y"; /* ===>request for data switch*/
    PB0PW00.PB0PWSWM = "1"; /* ===>map switch*/
    PB0PW00.PB0PWERR = "N"; /* ===>contention error flag*/
    PB0PW00.PB0PWDTA = "Y"; /* ===>is there data per gpc code*/
    PB0PW00.PB0PWXIT = "N"; /* ===>exit application flag*/
    PB0PW00.PO-REG-CD = "01"; /* ===>default to USA*/
    PCWREC.PCWMAP = 1;

    if (COMMAREA.XGPCD > " ")
      PB0PM001.XGPCD = COMMAREA.XGPCD;
    else
      PB0PM001.XGPCD = " ";
      COMMAREA.XGPCD = " ";
    end

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[1] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0PW00.PB0PWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[2] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0PW00.PB0PWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[3] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0PW00.PB0PWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[7] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PB0PW00.PB0PWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PB0PW00.PB0PWXIT = "Y";
    end

    if (PB0PM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PB0PM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PB0PW01.XGPCD = PB0PM001.XGPCD;
      set PB0PM001 initial;
      set PB0PM001.XGPCD cursor, bold; /* Highlight*/
      PB0PM001.XGPCD = PB0PW01.XGPCD;

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

      PB0PW00.XXXPRCNM = "XPPC001"; /* Module identification*/
      set PB0PM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end

     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0P-0001;

     /* **                                                        ***/
     /* ****************** End of XPPC001 FLOW **********************/
    PB0P-0001: PB0P-0001();
    goto PB0P-0001;
  end // end main
end // end PB0P

// Main process to display a map
Function PB0P-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, exit application.*/
   /* 2) If specified, display the first map.*/
   /* 3) If specified, display the second map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWXIT == "Y") /* exit application flag*/

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
    set PB0PM001 initial;
    set PB0PM001.CATOAP cursor, bold; /* Highlight*/
    set PB0PW01 empty; /* ==>reset map display record*/
    PB0PW00.XGPCD = COMMAREA.XGPCD;
    PB0PW00.PB0PWSWM = "1"; /* Map 1 was requested*/

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

  end

   /* ------------------------------------------------------------*/
    /* Process the maps*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWSWM == "1") /* Map 1 was requested*/
                                   /* inquire function type mode*/
    PB0P-0100(); /* Display map 1*/

  else

    if (PB0PW00.PB0PWSWM == "2") /* ===> Map 2 was requested*/

      if (PB0PW00.PB0PWMAP == "C") /* ===> change function type mode*/
        PB0P-0200(); /* ===> Display map 2*/
      end

      if (PB0PW00.PB0PWMAP == "D") /* ===> delete  function type mode*/
        PB0P-0400(); /* ===> Display map 2*/
      end

      if (PB0PW00.PB0PWMAP == "A") /* ===> add function type mode*/
        PB0P-0500(); /* ===> Display map 2*/
      end

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PB0PW00.XXXPRCNM = "PB0P001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PB0PW00.PB0PWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PB0PW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PB0PW00.PB0PWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0001**********************/
end // end PB0P-0001

// =======> List map function
Function PB0P-0100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0P-0110(); /* Obtain the data to display*/

  PB0P-0120(); /* Format and display the map*/

  PB0P-0130(); /* Check attention identifier*/

  PB0P-0140(); /* Reset fields to normal intensity*/

  PB0P-0150(); /* Verify the entered data*/

  PB0P-0160(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0100**********************/
end // end PB0P-0100

// -->Obtain the data to display
Function PB0P-0110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize map 1 display storage area*/
   /* Save the search info in map display storage area*/
   /* ------------------------------------------------------------*/
  set PB0PW01 empty;
  PB0PW00.XGPCD = PB0PM001.XGPCD;
  PB0PW01.XGPCD = PB0PM001.XGPCD;

  PB0PW00.PCFSECD = PB0PM001.PB0PMSEA; /* ===>season*/
  PB0PW01.PB0PWSEA = PB0PM001.PB0PMSEA;

  PB0PW00.PO-REG-CD = PB0PM001.PB0PMREG; /* ===>Region*/
  PB0PW01.PB0PWREG = PB0PM001.PB0PMREG;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* S1 selection (season, buy mo = *, status = *)*/
   /* ------------------------------------------------------------*/

  PB0P-0111(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until eoc(N1).*/
   /* ------------------------------------------------------------*/

  while (PB0PW00.PB0PWSWC == "N") /* Until end of cursor*/

    PB0PS-02(); /* Fetch next row, if successful save*/
                                   /* the data in map 1 display storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set(C1).*/
   /* ------------------------------------------------------------*/

  PB0PS-03(); /* Close the cursor*/

  PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0110**********************/
end // end PB0P-0110

// Select set and open cursor
Function PB0P-0111()

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the csp rec storage area and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWIXM = 1; /* Display line index*/
  PB0PW00.PB0PWSWC = "N"; /* End of cursor switch*/

  set VPOVFY02 empty; /* Clear CSP record area*/

  VPOVFY02.PCFSECD = PB0PM001.PB0PMSEA; /* search key - season*/
  VPOVFY02.PO-REG-CD = PB0PM001.PB0PMREG; /* search key - Reg cd*/
  VPOVFY02.PCFBUYMO = -1; /* buy month*/
  VPOVFY02.XXXSTAT = "*"; /* status*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PB0PS-01();

   /* **                                                        ***/
   /* ********************** End of PB0P-0111**********************/
end // end PB0P-0111

// Format and converse the map 1
Function PB0P-0120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0PW00.PB0PWSWF == "Y") /* Map must be formatted*/
      PB0P-0121(); /* Format the data on the map*/
      PB0P-0122(); /* Format the PF-keys on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0PM001.XXXPRCNM = PB0PW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end

   /* ET PB0PM001 ALARM;                         /* Indicate sound alarm*/

  end

  converse PB0PM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0PW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = PB0PM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0PM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0120**********************/
end // end PB0P-0120

// Format the map 1 display data
Function PB0P-0121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PB0PM001 initial;
  PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the basic data in the map.*/
   /* ------------------------------------------------------------*/

  PB0PW00.XXXPRCNM = "PB0P121";

  PB0PM001.XGPCD = PCWREC.XGPCD; /* gpc code*/
  PB0PM001.XGPDESC = "APPAREL"; /* gpc desc*/

  if (PB0PW00.PO-REG-CD == "  ")
    PB0PM001.PB0PMREG = "01"; /* Region code*/
  else
    PB0PM001.PB0PMREG = PB0PW00.PO-REG-CD; /* Region code*/
  end

  if (PB0PM001.PB0PMREG == "01")
    PB0PM001.PB0PMREGDESC = "USA   ";
  else
    if (PB0PM001.PB0PMREG == "02")
      PB0PM001.PB0PMREGDESC = "EHQ   ";
    else
      if (PB0PM001.PB0PMREG == "03")
        PB0PM001.PB0PMREGDESC = "APAO  ";
      end
    end
  end

  PB0PM001.PB0PMSEA = PB0PW00.PCFSECD; /* season code*/

   /* ---------------------------------------------------------------*/
   /* If no data to display, display only xgp code and description,*/
   /* no detail lines are displayed.*/
   /* Unprotect the SEASON field for input.*/
   /* ---------------------------------------------------------------*/

  if (PB0PW00.PB0PWDTA == "N" /* if no data to display*/
   || PB0PW01.PCFSECD == " ") /* first time thru*/

    if (PB0PW00.PB0PWDTA == "N")
      PCWREC.XXXMSGNO = 488; /* list not available for season*/
    else
      PCWREC.XXXMSGNO = 484; /* enter season code to display*/
    end
    set PB0PM001.PB0PMSEA cursor;

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

  else
    /* ---------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ---------------------------------------------------------*/
    PCWREC.XXXMSGNO = 487; /* ====> enter new season or 's'elect*/

    set PB0PM001.PB0PMSEA cursor;
   /* ET PB0PM001.PB0PMSEL(PB0PWIXM) CURSOR;*/

    PB0PW00.PB0PWIXM = 1; /* Initialize line index*/

    /* ------------------------------------------------------------*/
     /* format the storage area record to the map*/
    /* ------------------------------------------------------------*/

    while (PB0PW00.PB0PWIXM <= 12) /* Until screen is full*/

      PB0PM001.PB0PMSEL[PB0PWIXM] = PB0PW01.PB0PWSEL[PB0PWIXM];
      PB0PM001.PB0PMBSE[PB0PWIXM] = PB0PW01.PCFSECD[PB0PWIXM];
      PB0PM001.PB0PMBMM[PB0PWIXM] = PB0PW01.PCFBUYMO[PB0PWIXM];
      PB0PM001.PB0PMBYY[PB0PWIXM] = PB0PW01.PCFBUYYR[PB0PWIXM];
      PB0PM001.PB0PMSSE[PB0PWIXM] = PB0PW01.XSECD[PB0PWIXM];
      PB0PM001.PB0PMSYY[PB0PWIXM] = PB0PW01.PB0PWDYY[PB0PWIXM];
      PB0PM001.PB0PMSTA[PB0PWIXM] = PB0PW01.XXXSTAT[PB0PWIXM];

      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1; /* ===>Increment line index*/

    end

  end

   /* ********************** End of PB0P-0121**********************/
end // end PB0P-0121

// Check authorization & format
Function PB0P-0122()
   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "N") /* =======> not Authorized to change*/
      set PB0PM001.PB0PMCHG skip, invisible; /* ====> chg literal*/
      set PB0PM001.PB0PMADD skip, invisible; /* ====> add literal*/
      set PB0PM001.PB0PMDEL skip, invisible; /* ====> del literal*/
    end
  end

  if (PCWREC.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "N") /* =======> not Authorized to change*/
      set PB0PM001.PB0PMCHG skip, invisible; /* ====> chg literal*/
      set PB0PM001.PB0PMADD skip, invisible; /* ====> add literal*/
      set PB0PM001.PB0PMDEL skip, invisible; /* ====> del literal*/
    end
  end

  if (PCWREC.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "N") /* =======> not Authorized to change*/
      set PB0PM001.PB0PMCHG skip, invisible; /* ====> chg literal*/
      set PB0PM001.PB0PMADD skip, invisible; /* ====> add literal*/
      set PB0PM001.PB0PMDEL skip, invisible; /* ====> del literal*/
    end
  end

  if (PCWREC.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "N") /* =======> not Authorized to change*/
      set PB0PM001.PB0PMCHG skip, invisible; /* ====> chg literal*/
      set PB0PM001.PB0PMADD skip, invisible; /* ====> add literal*/
      set PB0PM001.PB0PMDEL skip, invisible; /* ====> del literal*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0122**********************/
end // end PB0P-0122

// -->Check attention identifier
Function PB0P-0130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0PW00.PB0PWSWR == "Y") /* Request for data*/
      set PB0PW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
    
    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PB0PW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0PM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPCS01(); /* Exit to another application*/

      set PB0PM001 initial;
      set PB0PM001.CATOAP cursor, bold; /* Highlight*/

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

      PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    else

      PB0PW00.XXXPRCNM = "PB0P130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0PM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* TO application*/
    end

    XSPCS01(); /* Exit to another application*/

    set PB0PM001 initial;
    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    PB0PW00.XXXPRCNM = "PC0B130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was  pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was  pressed*/

    PB0P-0131(); /* ===> Check security*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0130**********************/
end // end PB0P-0130

// Check PF Key security
Function PB0P-0131()
   /* ------------------------------------------------------------*/
   /* verify valid PF key pressed, if the user is authorized*/
   /* to perform various functions continue else error.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "N") /* =======> not Authorized to change*/
      PB0PW00.XXXPRCNM = "PB0P131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
      exit stack;
    end
  end

  if (PCWREC.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "N") /* =======> not Authorized to change*/
      PB0PW00.XXXPRCNM = "PB0P131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
      exit stack;
    end
  end

  if (PCWREC.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "N") /* =======> not Authorized to change*/
      PB0PW00.XXXPRCNM = "PB0P131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
    end
  end

  if (PCWREC.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "N") /* =======> not Authorized to change*/
      PB0PW00.XXXPRCNM = "PB0P131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0131**********************/
end // end PB0P-0131

// -->Reset highlighted fields
Function PB0P-0140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0PM001.PB0PMSEA initialAttributes; /* season code*/

  PB0PW00.PB0PWIXM = 1; /* Initialize line index*/

  while (PB0PW00.PB0PWIXM <= 12) /* Until end of lines*/

    set PB0PM001.PB0PMSEL[PB0PWIXM] initialAttributes; /* RESET SELECT FLAG*/

    PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1; /* Increment line index*/

  end

  set PB0PM001.CATOAP initialAttributes; /* TO application*/
  set PB0PM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  PB0P-0122(); /* ===> reset map security fields*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0140**********************/
end // end PB0P-0140

// -->Verify the entered data
Function PB0P-0150()
   /* ------------------------------------------------------------*/
   /* If the season  code has changed, list all buy months for*/
   /* the new season and other functions are not allowed.*/
   /*  */
   /* If season code has not changed and detail lines are selected*/
   /* only PF14 and PF15 are allowed.*/
   /* ------------------------------------------------------------*/

  if (PB0PM001.PB0PMREG == "01"
   || PB0PM001.PB0PMREG == "02"
   || PB0PM001.PB0PMREG == "03")
  else
    converseLib.validationFailed(593); /* Region code invalid*/
    PB0PW00.XXXPRCNM = "PB0P150";
    set PB0PM001.PB0PMREG cursor, bold; /* Highlight*/
    exit stack;
  end

  if (PB0PM001.PB0PMSEA > " "
   && PB0PW01.PB0PWSEA > " "
   && PB0PM001.PB0PMSEA != PB0PW01.PB0PWSEA) /* input season changed*/

    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15)
      converseLib.validationFailed(486); /* function not allowed. season changed*/
      PB0PW00.XXXPRCNM = "PB0P150";
      set PB0PM001.PB0PMSEA cursor, bold; /* Highlight*/
      exit stack;
    end

  else
    if (PB0PM001.PB0PMREG > " "
     && PB0PW01.PB0PWREG > " "
     && PB0PM001.PB0PMREG != PB0PW01.PB0PWREG) /* input Region changed*/

      if (converseVar.eventKey is pf13
       || converseVar.eventKey is pf14
       || converseVar.eventKey is pf15)
        converseLib.validationFailed(592); /* function not allowed. Region changed*/
        PB0PW00.XXXPRCNM = "PB0P150";
        set PB0PM001.PB0PMREG cursor, bold; /* Highlight*/
        exit stack;
      end

    else
      if ("S" in PB0PM001.PB0PMSEL) /* Line was selected*/
        if (converseVar.eventKey is pf13
         || converseVar.eventKey is enter)
          converseLib.validationFailed(485); /* function not allowed with 'S'*/
          PB0PW00.XXXPRCNM = "PB0P150";
          set PB0PM001.PB0PMSEA cursor, bold;
          exit stack;
        end
      else

        if (converseVar.eventKey is pf14
         || converseVar.eventKey is pf15)
          converseLib.validationFailed(25); /* select a line*/
          PB0PW00.XXXPRCNM = "PB0P150"; /* Module identification*/
          set PB0PM001.PB0PMSEA cursor, bold; /* Highlight*/
          exit stack;
        end
      end
    end
  end
   /*  */
   /* ------------------------------------------------------------*/
   /* Verify data in the line.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWIXM = 12; /* Initialize line index*/

  while (PB0PW00.PB0PWIXM > 0) /* Until end of lines*/

    PB0P-0151(); /* Verify data in the line*/

    PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0PM001.CAITEM > " ") /* Application data was entered*/

    PB0PW00.XXXPRCNM = "PB0P150"; /* Module identification*/
    set PB0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0150**********************/
end // end PB0P-0150

// Verify data in the line
Function PB0P-0151()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PB0PM001.PB0PMSEL[PB0PWIXM] != PB0PW01.PB0PWSEL[PB0PWIXM]
   && PB0PM001.PB0PMSEL[PB0PWIXM] != "S") /* and is not a 'S'*/

    if (PB0PM001.PB0PMSEL[PB0PWIXM] == " " /* and is a ' '*/
     && PB0PW01.PB0PWSEL[PB0PWIXM] == "V") /* display field = 'S'*/
      PB0PM001.PB0PMSEL[PB0PWIXM] = "V"; /* reset with 'V'*/
      return;
    end

    PB0PW00.XXXPRCNM = "PC0B151"; /* Module identification*/
    set PB0PM001.PB0PMSEL[PB0PWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/

  end

   /* **                                                        ***/
   /* ********************** End Of PB0P-0151**********************/
end // end PB0P-0151

// -->Process valid input request
Function PB0P-0160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (PB0PM001.PB0PMSEA != PB0PW01.PB0PWSEA /* season code changed*/
   || PB0PM001.PB0PMREG != PB0PW01.PB0PWREG) /* Region code changed*/

    PB0PW00.PCFSECD = PB0PM001.PB0PMSEA; /* / * save season code*/
    PB0PW00.PO-REG-CD = PB0PM001.PB0PMREG; /* / * save Region code*/
    PB0PW00.PB0PWDTA = "Y"; /* data exist for season*/

    /* ------------------------------------------------------------*/
     /* Format the search information in the map input/output area.*/
    /* ------------------------------------------------------------*/

    set PB0PM001 initial;
    set PB0PM001.PB0PMSEA cursor;

    PB0PM001.PB0PMSEA = PB0PW00.PCFSECD;
    PB0PM001.PB0PMREG = PB0PW00.PO-REG-CD;

    /* ------------------------------------------------------------*/
     /* Purge any existing data from the map 1 display storage.*/
    /* ------------------------------------------------------------*/

    set PB0PW01 empty;

    /* ------------------------------------------------------------*/
     /* Default request for data switch and COMMAREA information.*/
    /* ------------------------------------------------------------*/

    PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/
    PB0PW01.XGPCD = COMMAREA.XGPCD;
    PB0PW01.PB0PWSEA = PB0PW00.PCFSECD;
    PB0PW01.PB0PWREG = PB0PW00.PO-REG-CD;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields, and clear the map input/output area*/
   /* and save type of function flag.*/
   /* ------------------------------------------------------------*/

  PB0P-0161();

   /* **                                                        ***/
   /* ********************** End Of PB0P-0160**********************/
end // end PB0P-0160

// Process selected input request
Function PB0P-0161()

   /* ------------------------------------------------------------*/
             /* Set the add function request flag*/
              /* and skip save select fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* add mode requested*/

    PB0PW00.PB0PWSWM = "2"; /* ==>Map to be displayed switch*/
    PB0PW00.PB0PWMAP = "A"; /* ==>set the add function flag*/
    PB0PW00.PB0PWDTA = "Y"; /* ==>reset the data per season*/
    return;
  end

   /* ------------------------------------------------------------*/
             /* Set the change function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* change mode requested*/

    PB0PW00.PB0PWMAP = "C"; /* ==>set the change function flag*/
    PB0PW00.PB0PWMOD = "N"; /* ==>initialize modified data switch*/

  end

   /* ------------------------------------------------------------*/
                /* Set the delete function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* delete mode requested*/

    PB0PW00.PB0PWMAP = "D"; /* ==>set the change function flag*/
    PB0PW00.PB0PWMOD = "N"; /* ==>initialize modified data switch*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWIXM = 1; /* Initialize line index*/

  while (PB0PW00.PB0PWIXM <= 12) /* Until end of lines*/

    if (PB0PM001.PB0PMSEL[PB0PWIXM] != PB0PW01.PB0PWSEL[PB0PWIXM])

      PB0PW01.PB0PWSEL[PB0PWIXM] = PB0PM001.PB0PMSEL[PB0PWIXM];
      PB0PW00.PB0PWSWU = "Y"; /* Storage update switch*/

    end

    PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in PB0PW01.PB0PWSEL) /* Line was selected*/

    PB0PW00.PB0PWIXM = sysVar.arrayIndex; /* map index*/
    PB0PW00.PB0PWIXS = sysVar.arrayIndex; /* save map index*/

    PB0PM002.PB0PMBSS = PB0PW01.PCFSECD[PB0PWIXM]; /* buy season*/
    PB0PM002.PB0PMBMO = PB0PW01.PCFBUYMO[PB0PWIXM]; /* buy month*/

    PB0PW00.PB0PWSWM = "2"; /* Map to be displayed switch*/
    PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/
  else
    PB0PW00.XXXPRCNM = "PC0B161";
    PB0PM001.XGPCD = PCWREC.XGPCD;
    PB0PM001.XGPDESC = "APPAREL";
    set PB0PM001.PB0PMSEA cursor, bold;
   /* ET PB0PM001.PB0PMSEL(1) CURSOR,BRIGHT;*/
    converseLib.validationFailed(487);
    return; /* Return to previous process*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0161**********************/
end // end PB0P-0161

// =======> Change function type
Function PB0P-0200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0P-0210(); /* Obtain the data to display*/

  PB0P-0220(); /* Format and display the map*/

  PB0P-0230(); /* Check attention identifier*/

  PB0P-0240(); /* Reset fields to normal intensity*/

  PB0P-0250(); /* Verify the entered data*/

  PB0P-0260(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0200**********************/
end // end PB0P-0200

// -->Obtain the data to display
Function PB0P-0210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in the map display storage area.*/
   /* ------------------------------------------------------------*/

  set PB0PW02 empty; /* M002 display storage*/

  PB0PW02.PCFSECD = PB0PM002.PB0PMBSS; /* ==> buy season code*/
  PB0PW02.PCFBUYMO = PB0PM002.PB0PMBMO; /* ==> buy month*/
  PB0PW02.PO-REG-CD = PB0PM001.PB0PMREG; /* ==> Region code*/

   /* ------------------------------------------------------------*/
   /* Obtain the unigque table row to be displayed.*/
   /* ------------------------------------------------------------*/

  PB0P-0211(); /* ==========> Obtain the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PB0P-0212(); /* ==> Save data in W02 map T.S.*/

  if (PB0PW00.PB0PWERR == "Y") /* if contention flag = y*/
    PB0P-0213(); /* ==> Save data in W01 map  T.S*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0210**********************/
end // end PB0P-0210

// Select the table row
Function PB0P-0211()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOVFY02 empty; /* Row storage area*/

  VPOVFY02.PCFSECD = PB0PW02.PCFSECD; /* Season code*/
  VPOVFY02.PO-REG-CD = PB0PW02.PO-REG-CD; /* Region code*/
  VPOVFY02.PCFBUYMO = PB0PW02.PCFBUYMO; /* buy month*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("S ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0PM001 initial;
      set PB0PM001.PB0PMSEA cursor;

      PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PM001.XGPCD = COMMAREA.XGPCD;
      PB0PM001.XGPDESC = "APPAREL";

      PB0PW00.XXXPRCNM = "PC0B211"; /* Module identification*/
      PCWREC.XXXMSGNO = 26; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
  PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

  PB0PW00.XXXPRCNM = "PC0B211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE  ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0211**********************/
end // end PB0P-0211

// Save data in display rec W02
Function PB0P-0212()
   /* ------------------------------------------------------------*/
   /* Save the data in map2 display storage after db read*/
   /* ------------------------------------------------------------*/

  PB0PW02.PCFSECD = VPOVFY02.PCFSECD; /* season code*/
  PB0PW02.PCFBUYMO = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW02.PCFBUYYR = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW02.XSECD = VPOVFY02.XSECD; /* season desc*/
  PB0PW02.PB0PWDYY = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW02.XXXSTAT = VPOVFY02.XXXSTAT; /* status*/

  if (VPOVFY02.XXXSTAT == "A")
    PB0PW02.PB0PWSTA = "ACTIVE"; /* status literal*/
  else
    PB0PW02.PB0PWSTA = "INACTIVE";
  end

   /* ------------------------------------------------------------*/
   /* get season description from xsetbl.*/
   /* ------------------------------------------------------------*/

  if (VPOVFY02.XSECD in XSETBL.XSECD /* code in table*/
   && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    PB0PW02.XSECD = VPOVFY02.XSECD;
    PB0PW02.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
  else
    PB0PW02.XSEDESC = " ";
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0212**********************/
end // end PB0P-0212

// Save data in display rec W01
Function PB0P-0213()
   /* ------------------------------------------------------------*/
   /* Save the data in list map storage*/
   /* ------------------------------------------------------------*/

  PB0PW01.PCFSECD[PB0PWIXM] = VPOVFY02.PCFSECD; /* season*/
  PB0PW01.PCFBUYMO[PB0PWIXM] = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW01.PCFBUYYR[PB0PWIXM] = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW01.XSECD[PB0PWIXM] = VPOVFY02.XSECD; /* season desc*/
  PB0PW01.PB0PWDYY[PB0PWIXM] = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW01.XXXSTAT[PB0PWIXM] = VPOVFY02.XXXSTAT; /* status*/

   /*  */
   /* ********************** End of PB0P-0213***************************/
end // end PB0P-0213

// -->Format and converse the map
Function PB0P-0220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0PW00.PB0PWSWF == "Y") /* Map must be formatted*/
      PB0P-0221(); /* Format the data on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to change, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PB0P-0222(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0PM002.XXXPRCNM = PB0PW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

   /* ET PB0PM002 ALARM;                          /* Indicate sound alarm*/

  end

  converse PB0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0PW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0P-0223(); /* pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0PM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to 'V' to show that the line*/
   /* was selected and updted.*/
   /* ------------------------------------------------------------*/

  PB0PW01.PB0PWSEL[PB0PWIXM] = "V"; /* Select indicator*/

   /*  */
   /* ********************** End of PB0P-0220 *********************/
end // end PB0P-0220

// Format the display data
Function PB0P-0221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PB0PM002 initial; /* M002 display storage area*/

  PB0PM002.PB0PMTYP = "CHANGE"; /* map type literal*/
  PB0PW00.XXXPRCNM = "PB0P221";
  PCWREC.XXXMSGNO = 87; /* map type instruction msg*/

  PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the map2 display storage.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PB0PM002.XGPDESC = "APPAREL"; /* GPC desc*/

  set PB0PM002.PB0PMBMO cursor; /* curson on first input field*/
  set PB0PM002.PB0PMBSS skip; /* season code display only*/

  PB0PM002.PB0PMREG = PB0PM001.PB0PMREG; /* ==> Region code*/
  PB0PM002.PB0PMREGDESC = PB0PM001.PB0PMREGDESC; /* ==>Region code Desc*/

  PB0PM002.PB0PMBSS = PB0PW02.PCFSECD; /* buy season code*/
  PB0PM002.PB0PMBMO = PB0PW02.PCFBUYMO; /* buy month*/
  PB0PM002.PB0PMBYR = PB0PW02.PCFBUYYR; /* buy year*/
  PB0PM002.PB0PMSNM = PB0PW02.XSECD; /* season desc name*/
  PB0PM002.PB0PMDS1 = PB0PW02.XSEDESC; /* season description*/
  PB0PM002.PB0PMDYR = PB0PW02.PB0PWDYY; /* delivery year*/
  PB0PM002.PB0PMSST = PB0PW02.XXXSTAT; /* status*/
  PB0PM002.PB0PMDS2 = PB0PW02.PB0PWSTA; /* status literal*/

   /* ********************** End of PB0P-0221**********************/
end // end PB0P-0221

// Check authorization & format
Function PB0P-0222()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && PB0PW00.PB0PWMAP == "C") /* map function type flag*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to autoskip if not authorized.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(29); /* ===>not authorized message*/

  set PB0PM002.CATOAP cursor;

  set PB0PM002.PB0PMBSS skip; /* season code*/
  set PB0PM002.PB0PMBMO skip; /* buy month*/
  set PB0PM002.PB0PMBYR skip; /* buy year*/
  set PB0PM002.PB0PMSNM skip; /* season description name*/
  set PB0PM002.PB0PMDYR skip; /* delivery year*/
  set PB0PM002.PB0PMSST skip; /* row status*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0222**********************/
end // end PB0P-0222

// Check for ? inquiry by user
Function PB0P-0223()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0PM002.PB0PMSNM == "?") /* if ? in xsecd field*/
    XPXX001(); /* pop-up window init routine*/
    XX0XW02.XX0XWHDR = "     SEASON CODE TABLE    "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform xsecd window routine*/
    end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the*/
       /* passed table index 'XX0XWPIX' to move the xsecd and*/
       /* description to the map.*/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0PM002.PB0PMSNM = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      PB0PM002.PB0PMDS1 = XSETBL.XSEDESC[XX0XWPIX]; /* move desc*/
    else
      PB0PM002.PB0PMSNM = PB0PW02.XSECD;
      if (PB0PM002.PB0PMSNM in XSETBL.XSECD)
        PB0PM002.PB0PMDS1 = XSETBL.XSEDESC[sysVar.arrayIndex];
      end
    end
  end

  converseLib.clearScreen();
   /* restore the original map*/

  return;
   /* **                                                        ***/
   /* ********************** End of PB0P-0223**********************/
end // end PB0P-0223

// -->Check attention identifier
Function PB0P-0230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0PW00.PB0PWSWR == "Y") /* Request for data*/
      set PB0PW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* M002 display storage*/
    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPCS01(); /* Exit to another application*/

      PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

      set PB0PM001 initial;
      set PB0PM001.CATOAP cursor, bold; /* Highlight*/

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

    else

      PB0PW00.XXXPRCNM = "PB0P230"; /* Module identification*/
      converseLib.validationFailed(5); /* PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1)
      COMMAREA.CAITEM = "PC0BM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3)

      PB0PM001.PB0PMREG = PB0PM002.PB0PMREG;
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

      if (PB0PW00.PB0PWMOD == "Y")
        PB0PW00.PB0PWSWU = "Y"; /* update temp storage switch*/
      end

      if (PB0PW00.PB0PWERR == "Y") /* error occured*/
        PB0PW00.PB0PWSWU = "Y";
                                          /* update temp storage switch*/
        PB0PW00.PB0PWERR = "N";
      end

      PB0P-0231(); /* reset any changes prior to return*/
                                       /* to list map*/
      set PB0PM001.PB0PMSEL[PB0PWIXM] cursor;
      while ("S" in PB0PW01.PB0PWSEL)
                                                  /* removes remaining 'S's*/
        PB0PW01.PB0PWSEL[sysVar.arrayIndex] = " ";
      end

      exit stack; /* Exit to display map*/

    end

    XSPCS01(); /* Exit to another application*/

                                  /* -------------------------------------*/
                                   /* ---------------------------------*/
    /* if exit failed, reset and return to list map*/
                                  /* -------------------------------------*/
                                   /* ---------------------------------*/

    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    set PB0PM001 initial;
    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0PW00.XXXPRCNM = "PC0B230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0230**********************/
end // end PB0P-0230

// reset T.S map1 display record
Function PB0P-0231()
   /* ------------------------------------------------------------*/
   /* reset the data in display storage on return to list map*/
   /* ------------------------------------------------------------*/

  PB0PW01.PCFSECD[PB0PWIXM] = VPOVFY02.PCFSECD; /* season code*/
  PB0PW01.PCFBUYMO[PB0PWIXM] = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW01.PCFBUYYR[PB0PWIXM] = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW01.XSECD[PB0PWIXM] = VPOVFY02.XSECD; /* season desc*/
  PB0PW01.PB0PWDYY[PB0PWIXM] = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW01.XXXSTAT[PB0PWIXM] = VPOVFY02.XXXSTAT; /* row status*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0231**********************/
end // end PB0P-0231

// -->Reset highlighted fields
Function PB0P-0240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0PM002.PB0PMBSS skip; /* buy season code*/

  set PB0PM002.PB0PMBMO initialAttributes; /* buy month*/
  set PB0PM002.PB0PMBYR initialAttributes; /* buy year*/
  set PB0PM002.PB0PMDYR initialAttributes; /* delivery year*/
  set PB0PM002.PB0PMSST initialAttributes; /* row status*/

  set PB0PM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0PM002.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0240**********************/
end // end PB0P-0240

// Verify entered data for chng
Function PB0P-0250()

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PB0PW00.XXXPRCNM = "PB0P250"; /* Module identification*/
    set PB0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* season code is protected and not modifiable*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    /* ------------------------------------------------------------*/
     /* If fields are modified/entered, verify, set mod flag*/
    /* ------------------------------------------------------------*/

    if (PB0PM002.PB0PMBMO != PB0PW02.PCFBUYMO)
      PB0PW00.PB0PWMOD = "Y";
      PB0P-0252(); /* validate buy month*/
      PB0P-0253(); /* check for duplicate*/
    end

    if (PB0PM002.PB0PMDYR != PB0PW02.PB0PWDYY)
      PB0PW00.PB0PWMOD = "Y";
      PB0P-0254(); /* validate year*/
      PB0P-0255(); /* x-edit season code & dyr*/
      PB0P-0256(); /* x-edit bmo, byr, dyr*/
    end

    if (PB0PM002.PB0PMBYR != PB0PW02.PCFBUYYR)
      PB0PW00.PB0PWMOD = "Y";
      PB0P-0254(); /* validate year*/
      PB0P-0256(); /* x-edit bmo, byr, dyr*/
    end

    if (PB0PM002.PB0PMSST != PB0PW02.XXXSTAT)
      PB0PW00.PB0PWMOD = "Y";
      PB0P-0257(); /* validate status*/
    end

    /* --------------------------------------*/
     /* check modified field flag*/
    /* --------------------------------------*/
    if (PB0PW00.PB0PWMOD == "N")
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* Save the map data in map 2 display storage*/
   /* ------------------------------------------------------------*/

  PB0P-0251();

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ***/
   /* *******************  End of PB0P-0250 ****************************/
end // end PB0P-0250

// Save map data before converse
Function PB0P-0251()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PB0PW02.PCFSECD = PB0PM002.PB0PMBSS; /* season code*/
  PB0PW02.PCFBUYMO = PB0PM002.PB0PMBMO; /* buy month*/
  PB0PW02.PCFBUYYR = PB0PM002.PB0PMBYR; /* buy year*/
  PB0PW02.XSECD = PB0PM002.PB0PMSNM; /* season desc name*/
  PB0PW02.PB0PWDYY = PB0PM002.PB0PMDYR; /* delivery year*/
  PB0PW02.XXXSTAT = PB0PM002.PB0PMSST; /* row status*/
  PB0PW02.XSEDESC = PB0PM002.PB0PMDS1; /* xse description*/
  PB0PW02.PB0PWSTA = PB0PM002.PB0PMDS2; /* status literal*/
   /* ***/
   /* ******************** End of PB0P-0251 **************************/
end // end PB0P-0251

// edit buy month
Function PB0P-0252()
   /* ----------------------------------------------------------------*/
   /* edit buy month entered. ( must be 1 thru 12)*/
   /* ----------------------------------------------------------------*/

  if (PB0PM002.PB0PMBMO == 0) /* If buy month not entered*/
    PB0PW00.XXXPRCNM = "PB0P252";
    converseLib.validationFailed(475); /* month required*/
    set PB0PM002.PB0PMBMO cursor, bold; /* Highlight*/

  else
    PB0PW00.PB0PWMM = PB0PM002.PB0PMBMO;
    if (PB0PW00.PB0PWMM < 01 /* if not 01 - 12*/
     || PB0PW00.PB0PWMM > 12)
      PB0PW00.XXXPRCNM = "PB0P252"; /* Module identification*/
      converseLib.validationFailed(475); /* Invalid date*/
      set PB0PM002.PB0PMBMO cursor, bold; /* Highlight*/
    end

  end
   /*  */
   /* ***************** End of PB0P-0252 *********************************/
end // end PB0P-0252

// check for duplicate
Function PB0P-0253()
   /* --------------------------------------------------------------*/
   /* check to see if duplicate buy month exist for the season*/
   /* --------------------------------------------------------------*/

  set VPOVFY02 empty; /* Init csp rec*/
  VPOVFY02.PCFSECD = PB0PM002.PB0PMBSS; /* Season code*/
  VPOVFY02.PO-REG-CD = PB0PM002.PB0PMREG; /* Region code*/
  VPOVFY02.PCFBUYMO = PB0PM002.PB0PMBMO; /* From buy month*/

  PB0PS-04(); /* Select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* duplicate found*/

    set PB0PM002.PB0PMBMO cursor, bold; /* Highlight*/
    PB0PW00.XXXPRCNM = "PB0P253"; /* Module identification*/
    converseLib.validationFailed(479); /* buy month exists*/

  end
   /*  */
   /* ***************** End of PB0P-0253 ************************************/
end // end PB0P-0253

// edit year
Function PB0P-0254()
   /* ----------------------------------------------------------------*/
   /* edit buy year and delivery year (must be 1900 thru 2100)*/
   /* ----------------------------------------------------------------*/

  if (PB0PM002.PB0PMBYR == 0 /* If buy year not entered*/
   || PB0PM002.PB0PMDYR == 0) /* If del year not entered*/
    PB0PW00.XXXPRCNM = "PB0P254"; /* Module identification*/
    converseLib.validationFailed(365); /* Invalid year*/
    set PB0PM002.PB0PMBYR cursor, bold; /* Highlight*/

  else
    PB0PW00.PB0PWBYR = PB0PM002.PB0PMBYR;
    PB0PW00.PB0PWDYR = PB0PM002.PB0PMDYR;

    if (PB0PW00.PB0PWBYR < 1900
     || PB0PW00.PB0PWBYR > 2100)
      PB0PW00.XXXPRCNM = "PB0P254"; /* Module identification*/
      converseLib.validationFailed(365); /* Invalid year*/
      set PB0PM002.PB0PMBYR cursor, bold; /* Highlight*/
      exit stack;
    end

    if (PB0PW00.PB0PWDYR < 1900
     || PB0PW00.PB0PWDYR > 2100)
      PB0PW00.XXXPRCNM = "PB0P254"; /* Module identification*/
      converseLib.validationFailed(489); /* Invalid delivery year*/
      set PB0PM002.PB0PMDYR cursor, bold; /* Highlight*/
      exit stack;
    end

  end
   /*  */
   /* ***************** End of PB0P-0254 *********************************/
end // end PB0P-0254

// x-edit season code & deliv yr
Function PB0P-0255()
   /* ------------------------------------------------------------*/
   /* cross edit season code and the delivery  year.*/
   /* ------------------------------------------------------------*/

  PB0PW02.PB0PWYR = PB0PM002.PB0PMDYR;

  if (PB0PW02.PB0PWSE2 != PB0PW02.PB0PWYR4) /* if 2nd char of season &*/
    PB0PW00.XXXPRCNM = "PB0P255"; /* 4th char of dyr not =*/
    set PB0PM002.PB0PMDYR cursor, bold;
    converseLib.validationFailed(489); /* invalid delivery year*/
    exit stack;
  end
   /* ********************** End of PB0P-0255**********************/
end // end PB0P-0255

// x-edit buy mo, yr & deli yr
Function PB0P-0256()
   /* ------------------------------------------------------------*/
   /* x-edit buy month, year and delivery year.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWBYR = PB0PM002.PB0PMBYR;
  PB0PW00.PB0PWDYR = PB0PM002.PB0PMDYR;

   /* PB0PM002.PB0PMBMO EQ 01;                 /* If buy month = 01*/
  if (PB0PW00.PB0PWBYR > PB0PW00.PB0PWDYR) /* byr must LE dyr*/
    PB0PW00.XXXPRCNM = "PB0P256";
    set PB0PM002.PB0PMBYR cursor, bold;
    converseLib.validationFailed(477); /* invalid buy year*/
    exit stack;
  end
   /* E;                                          /* if buy mo = 02 - 12*/
   /* IF PB0PW00.PB0PWBYR GE PB0PW00.PB0PWDYR;    /* byr must LT dyr*/
   /* MOVE 'PB0P256' TO PB0PW00.XXXPRCNM;*/
   /* SET PB0PM002.PB0PMBYR CURSOR,BRIGHT;*/
   /* MOVE 477 TO EZEMNO;                      /* invalid buy year*/
   /* END;*/
   /* ;*/

   /* ********************** End of PB0P-0256**********************/
end // end PB0P-0256

// Verify the status code
Function PB0P-0257()

   /* ------------------------------------------------------------*/
      /* Status Required Flag        , verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PB0PM002.PB0PMSST == "A" /* only A/I allowed*/
   || PB0PM002.PB0PMSST == "I")

    PB0PW02.PB0PWSTA = PB0PM002.PB0PMSST;

    if (PB0PM002.PB0PMSST == "A")
      PB0PM002.PB0PMDS2 = "ACTIVE"; /* status literal*/
    else
      PB0PM002.PB0PMDS2 = "INACTIVE";
    end

  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PB0PM002.PB0PMDS2 = "        ";
    PB0PW02.PB0PWSTA = "        ";
    PB0PW00.XXXPRCNM = "PC0B257"; /* Module identification*/
    set PB0PM002.PB0PMSST cursor, bold; /* Highlight*/
    converseLib.validationFailed(37); /* invalid status message*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0257 *********************/
end // end PB0P-0257

// -->Process valid input request
Function PB0P-0260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWMOD == "Y") /* ===>modified data flag*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    PB0P-0261(); /* =======> Update table row*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/

    PB0PW00.XXXPRCNM = "PC0B260"; /* Module identification*/
    PCWREC.XXXMSGNO = 1; /* Indicate update completed*/

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/

  end

   /* ------------------------------------------------------------*/
    /* determine if any other selections were made.*/
   /* ------------------------------------------------------------*/

  PB0P-0262(); /* =======> Search for next selection*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0260**********************/
end // end PB0P-0260

// Update the table row
Function PB0P-0261()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  VPOVFY02.PCFSECD = PB0PM002.PB0PMBSS; /* season code*/
  VPOVFY02.PO-REG-CD = PB0PM002.PB0PMREG; /* Region code*/
  VPOVFY02.PCFBUYMO = PB0PM002.PB0PMBMO; /* buy month*/
  VPOVFY02.PCFBUYYR = PB0PM002.PB0PMBYR; /* buy year*/
  VPOVFY02.XSECD = PB0PM002.PB0PMSNM; /* season desc name*/
  VPOVFY02.PCFSEYR = PB0PM002.PB0PMDYR; /* deilivery year*/
  VPOVFY02.XXXSTAT = PB0PM002.PB0PMSST; /* row status*/

  VPOVFY02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOVFY02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  PB0PS-07(); /* /update vpovfy01 row*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0261**********************/
end // end PB0P-0261

// Search for next selection
Function PB0P-0262()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in PB0PW01.PB0PWSEL) /* Line was selected*/

    PB0PW00.PB0PWIXM = sysVar.arrayIndex; /* Map line index*/
    PB0PW00.PB0PWSWR = "Y";
   /* OVE 0 TO PCWREC.XXXMSGNO;*/

    PB0PM002.PB0PMBSS = PB0PW01.PCFSECD[PB0PWIXM]; /* season code*/
    PB0PM002.PB0PMBMO = PB0PW01.PCFBUYMO[PB0PWIXM]; /* buy month*/
    PB0PW00.PB0PWIXS = PB0PW00.PB0PWIXM; /* Save map index*/

  else

    PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/

   /* ET PB0PM001.PB0PMSEL(PB0PWIXS) CURSOR;*/
    PB0PM001.PB0PMSEA = PB0PM002.PB0PMBSS;

   /* ET PB0PM001 CLEAR;*/
    set PB0PM001.PB0PMSEA cursor;

    PB0PW00.PB0PWSWR = "Y"; /* request data switch*/

    if (PB0PW00.PB0PWMOD == "Y")
      PB0PW00.PB0PWSWU = "Y"; /* update data switch*/
    end

    if (PB0PW00.PB0PWERR == "Y") /* contention error switch*/
      PB0PW00.PB0PWSWU = "Y";
      PB0PW00.PB0PWERR = "N";
    end

  end

   /* **/
   /* ********************** End of PB0P-0262**********************/
end // end PB0P-0262

// ==> delete function type
Function PB0P-0400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify input data.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0P-0410(); /* Obtain the data to display*/

  PB0P-0420(); /* Format and display the map*/

  PB0P-0430(); /* Check attention identifier*/

  PB0P-0440(); /* Reset fields to normal intensity*/

  PB0P-0450(); /* Verify input data.*/

  PB0P-0460(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0400**********************/
end // end PB0P-0400

// -->Obtain the data to display
Function PB0P-0410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in the map display storage area.*/
   /* ------------------------------------------------------------*/

  set PB0PW02 empty; /* M002 display storage*/

  PB0PW02.PCFSECD = PB0PM002.PB0PMBSS; /* ==> buy season code*/
  PB0PW02.PCFBUYMO = PB0PM002.PB0PMBMO; /* ==> buy month*/
  PB0PW02.PO-REG-CD = PB0PM001.PB0PMREG; /* ==> Region code*/

   /* ------------------------------------------------------------*/
   /* Obtain the unigque table row to be displayed.*/
   /* ------------------------------------------------------------*/

  PB0P-0411(); /* ==========> Obtain the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PB0P-0412(); /* ==> Save data in W02 map T.S.*/

  if (PB0PW00.PB0PWERR == "Y") /* if contention flag = y*/
    PB0P-0413(); /* ==> Save data in W01 map  T.S*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0410**********************/
end // end PB0P-0410

// Select the table row
Function PB0P-0411()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOVFY02 empty; /* Row storage area*/

  VPOVFY02.PCFSECD = PB0PW02.PCFSECD; /* season code*/
  VPOVFY02.PO-REG-CD = PB0PW02.PO-REG-CD; /* Region code*/
  VPOVFY02.PCFBUYMO = PB0PW02.PCFBUYMO; /* buy month*/

   /* ------------------------------------------------------------*/
   /* Select the unique row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("S ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end /* Select a row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PB0PM001 initial;
      set PB0PM001.PB0PMSEA cursor;

      PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PM001.XGPCD = COMMAREA.XGPCD;
      PB0PM001.XGPDESC = "APPAREL";

      PB0PW00.XXXPRCNM = "PC0B411"; /* Module identification*/
      PCWREC.XXXMSGNO = 26; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
  PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

  PB0PW00.XXXPRCNM = "PC0B411"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE  ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0411**********************/
end // end PB0P-0411

// Save data in display rec W02
Function PB0P-0412()
   /* ------------------------------------------------------------*/
   /* Save the data in map2 display storage after db read*/
   /* ------------------------------------------------------------*/

  PB0PW02.PCFSECD = VPOVFY02.PCFSECD; /* season code*/
  PB0PW02.PO-REG-CD = VPOVFY02.PO-REG-CD; /* Region code*/
  PB0PW02.PCFBUYMO = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW02.PCFBUYYR = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW02.XSECD = VPOVFY02.XSECD; /* season desc*/
  PB0PW02.PB0PWDYY = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW02.XXXSTAT = VPOVFY02.XXXSTAT; /* status*/

  if (VPOVFY02.XXXSTAT == "A")
    PB0PW02.PB0PWSTA = "ACTIVE"; /* status literal*/
  else
    PB0PW02.PB0PWSTA = "INACTIVE";
  end

   /* ------------------------------------------------------------*/
   /* get season description from xsetbl.*/
   /* ------------------------------------------------------------*/

  if (VPOVFY02.XSECD in XSETBL.XSECD /* code in table*/
   && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    PB0PW02.XSECD = VPOVFY02.XSECD;
    PB0PW02.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
  else
    PB0PW02.XSEDESC = " ";
  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0412**********************/
end // end PB0P-0412

// Save data in display rec W01
Function PB0P-0413()
   /* ------------------------------------------------------------*/
   /* Save the data in list map storage*/
   /* ------------------------------------------------------------*/

  PB0PW01.PCFSECD[PB0PWIXM] = VPOVFY02.PCFSECD; /* season*/
  PB0PW01.PCFBUYMO[PB0PWIXM] = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW01.PCFBUYYR[PB0PWIXM] = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW01.XSECD[PB0PWIXM] = VPOVFY02.XSECD; /* season desc*/
  PB0PW01.PB0PWDYY[PB0PWIXM] = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW01.XXXSTAT[PB0PWIXM] = VPOVFY02.XXXSTAT; /* status*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0413***************************/
end // end PB0P-0413

// -->Format and converse the map
Function PB0P-0420()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0PW00.PB0PWSWF == "Y") /* Map must be formatted*/
      PB0P-0421(); /* Format the data on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to change, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PB0P-0422(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0PM002.XXXPRCNM = PB0PW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

   /* ET PB0PM002 ALARM;                          /* Indicate sound alarm*/

  end

  converse PB0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0PW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0PM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to 'v' to show that the line*/
   /* was selected and deleted.*/
   /* ------------------------------------------------------------*/

  PB0PW01.PB0PWSEL[PB0PWIXM] = "V"; /* Select indicator*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0420 *********************/
end // end PB0P-0420

// Format the display data
Function PB0P-0421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PB0PM002 initial; /* M002 display storage area*/

  PB0PM002.PB0PMTYP = "DELETE"; /* map type literal*/
  PB0PW00.XXXPRCNM = "PB0P421"; /* map type literal*/
  PCWREC.XXXMSGNO = 27; /* map type instruction msg*/

  PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the map2 display storage.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XGPCD = PCWREC.XGPCD; /* GPC code & description*/
  PB0PM002.XGPDESC = "APPAREL";

  set PB0PM002.PB0PMBSS skip; /* season code display only*/
  set PB0PM002.PB0PMBMO cursor; /* curson on first input field*/

  PB0PM002.PB0PMREG = PB0PM001.PB0PMREG; /* Region code*/
  PB0PM002.PB0PMREGDESC = PB0PM001.PB0PMREGDESC; /* Region code Desc*/

  PB0PM002.PB0PMBSS = PB0PW02.PCFSECD; /* buy season code*/
  PB0PM002.PB0PMBMO = PB0PW02.PCFBUYMO; /* buy month*/
  PB0PM002.PB0PMBYR = PB0PW02.PCFBUYYR; /* buy year*/
  PB0PM002.PB0PMSNM = PB0PW02.XSECD; /* season desc name*/
  PB0PM002.PB0PMDS1 = PB0PW02.XSEDESC; /* season description*/
  PB0PM002.PB0PMDYR = PB0PW02.PB0PWDYY; /* delivery year*/
  PB0PM002.PB0PMSST = PB0PW02.XXXSTAT; /* status*/
  PB0PM002.PB0PMDS2 = PB0PW02.PB0PWSTA; /* active/inactive*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0421**********************/
end // end PB0P-0421

// Check authorization & format
Function PB0P-0422()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change*/
   /* Set all modifiable fields to autoskip and  return to*/
   /* the previous process, otherwise indicate 'not authorized'*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && PB0PW00.PB0PWMAP == "D") /* map function type flag*/

    set PB0PM002.CATOAP cursor;

    set PB0PM002.PB0PMBSS skip; /* season code*/
    set PB0PM002.PB0PMBMO skip; /* buy month*/
    set PB0PM002.PB0PMBYR skip; /* buy year*/
    set PB0PM002.PB0PMSNM skip; /* season description name*/
    set PB0PM002.PB0PMDYR skip; /* delivery year*/
    set PB0PM002.PB0PMSST skip; /* row status*/

    return; /* Return to previous process*/

  else
    PB0PW00.XXXPRCNM = "PB0P422";
    converseLib.validationFailed(29); /* not authorized message*/
  end

   /* ********************** End of PB0P-0422**********************/
end // end PB0P-0422

// -->Check attention identifier
Function PB0P-0430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0PW00.PB0PWSWR == "Y") /* Request for data*/
      set PB0PW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* M002 display storage*/
    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPCS01(); /* Exit to another application*/

      PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

      set PB0PM001 initial;
      set PB0PM001.CATOAP cursor, bold; /* Highlight*/

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

    else

      PB0PW00.XXXPRCNM = "PC0B230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1)
      COMMAREA.CAITEM = "PC0BM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3)

      PB0PM001.PB0PMREG = PB0PM002.PB0PMREG;

      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

      if (PB0PW00.PB0PWMOD == "Y")
        PB0PW00.PB0PWSWU = "Y"; /* update temp storage switch*/
      end

      if (PB0PW00.PB0PWERR == "Y") /* error occured*/
        PB0PW00.PB0PWSWU = "Y"; /* update temp storage switch*/
        PB0PW00.PB0PWERR = "N";
      end

      PB0P-0431(); /* reset any changes prior to return*/
                                       /* to list map*/
      set PB0PM001.PB0PMSEL[PB0PWIXM] cursor;
      while ("S" in PB0PW01.PB0PWSEL)
                                       /* removes remaining 'S's*/
        PB0PW01.PB0PWSEL[sysVar.arrayIndex] = " ";
      end

      exit stack; /* Exit to display map*/

    end

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    set PB0PM001 initial;
    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0PW00.XXXPRCNM = "PB0P430"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0430**********************/
end // end PB0P-0430

// reset T.S map1 display record
Function PB0P-0431()
   /* ------------------------------------------------------------*/
   /* reset the data in display storage on return to list map*/
   /* ------------------------------------------------------------*/

  PB0PW01.PCFSECD[PB0PWIXM] = VPOVFY02.PCFSECD; /* season code*/
  PB0PW01.PCFBUYMO[PB0PWIXM] = VPOVFY02.PCFBUYMO; /* buy month*/
  PB0PW01.PCFBUYYR[PB0PWIXM] = VPOVFY02.PCFBUYYR; /* buy year*/
  PB0PW01.XSECD[PB0PWIXM] = VPOVFY02.XSECD; /* season desc*/
  PB0PW01.PB0PWDYY[PB0PWIXM] = VPOVFY02.PCFSEYR; /* delivery year*/
  PB0PW01.XXXSTAT[PB0PWIXM] = VPOVFY02.XXXSTAT; /* row status*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0431**********************/
end // end PB0P-0431

// -->Reset highlighted fields
Function PB0P-0440()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

   /* PB0PM002.PB0PMBMO defINED;    /* buy month*/

  set PB0PM002.PB0PMBSS skip; /* buy season code*/
  set PB0PM002.PB0PMBMO skip; /* buy month*/
  set PB0PM002.PB0PMBYR skip; /* buy year*/
  set PB0PM002.PB0PMSNM skip; /* season desc name*/
  set PB0PM002.PB0PMDYR skip; /* delivery year*/
  set PB0PM002.PB0PMSST skip; /* row status*/

  set PB0PM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0PM002.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0440**********************/
end // end PB0P-0440

// Verify the entered data
Function PB0P-0450()

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PB0PW00.XXXPRCNM = "PB0P450"; /* Module identification*/
    set PB0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Check to see if any po's exist with the same season code.*/
   /* If so, can't delete this row(s). Use IO3270-S3*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    PB0PS-10(); /* set cursor (S3)*/

    PB0PS-11(); /* fectch the row only*/
                                             /* one time to see if po*/
                                             /* exists with same season*/

   /* IF SQLCA.SQLCODE EQ 0;                  /* If a row exists for season*/
    if (PB0PW00.PB0PWDEL == "N")
      set PB0PM002.PB0PMBSS cursor, bold; /* Highlight*/
      PB0PW00.XXXPRCNM = "PB0P450"; /* Module identification*/
      converseLib.validationFailed(490); /* po exists for the season*/
    end

   /* ELSE;*/
   /* IF SQLCA.SQLCODE EQ 100;            /* If a row exists for season*/
   /* MOVE 'Y' TO PB0PW00.PB0PWDEL;        /* po exists for the season*/
   /* END;*/

    PB0PS-12(); /* close cursor*/

    if (PB0PW00.PB0PWDEL == "Y")
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ***/
   /* ****************  End of PB0P-0450 ******************************/
end // end PB0P-0450

// -->Process valid input request
Function PB0P-0460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Delete the selected data in the table row.*/
   /* ------------------------------------------------------------*/

  if (PB0PW00.PB0PWDEL == "Y") /* If ok to delete*/

    PB0PS-08(); /* Delete table row*/

    /* ------------------------------------------------------------*/
     /* Indicate that the delete was successfully completed.*/
    /* ------------------------------------------------------------*/

    PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/

    PB0PW00.XXXPRCNM = "PB0P460"; /* Module identification*/
    PCWREC.XXXMSGNO = 24; /* Indicate delete completed*/

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/
  end

   /* ------------------------------------------------------------*/
    /* determine if any other selections were made.*/
   /* ------------------------------------------------------------*/

  PB0P-0461(); /* Search for next selection*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0460**********************/
end // end PB0P-0460

// Search for next selection
Function PB0P-0461()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in PB0PW01.PB0PWSEL) /* Line was selected*/

    PB0PW00.PB0PWIXM = sysVar.arrayIndex; /* Map line index*/
    PB0PW00.PB0PWSWR = "Y";
   /* OVE 0 TO PCWREC.XXXMSGNO;*/

    PB0PM002.PB0PMBSS = PB0PW01.PCFSECD[PB0PWIXM]; /* season code*/
    PB0PM002.PB0PMBMO = PB0PW01.PCFBUYMO[PB0PWIXM]; /* buy month*/
    PB0PW00.PB0PWIXS = PB0PW00.PB0PWIXM; /* Save map indx*/

  else

    PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
    PB0PM001.PB0PMSEA = PB0PM002.PB0PMBSS;

   /* ET PB0PM001 CLEAR;*/
    set PB0PM001.PB0PMSEA cursor;

    PB0PW00.PB0PWSWR = "Y";

    if (PB0PW00.PB0PWDEL == "Y")
      PB0PW00.PB0PWSWU = "Y";
    end

    if (PB0PW00.PB0PWERR == "Y") /* if  error*/
      PB0PW00.PB0PWSWU = "Y";
      PB0PW00.PB0PWERR = "N"; /* reset err flag*/
    end

  end

   /* ********************** End of PB0P-0462**********************/
end // end PB0P-0461

// =======> Add function type
Function PB0P-0500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* ------------------------------------------------------------*/
   /* There is no 'obtain data to display' module in this function*/
   /* ------------------------------------------------------------*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0P-0520(); /* Format and display the map*/

  PB0P-0530(); /* Check attention identifier*/

  PB0P-0540(); /* Reset fields to normal intensity*/

  PB0P-0550(); /* Verify the entered data*/

  PB0P-0560(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0500**********************/
end // end PB0P-0500

// -->Format and converse map
Function PB0P-0520()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0PW00.PB0PWSWF == "Y") /* Map must be formatted*/
      PB0P-0521(); /* Format the data on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to add data, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PB0P-0522(); /* Check add authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0PM002.XXXPRCNM = PB0PW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

   /* ET PB0PM002 ALARM;                            /* Indicate sound alarm*/

  end

  converse PB0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0PW00.XXXPRCNM = "      "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0P-0523(); /* pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0PM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0520**********************/
end // end PB0P-0520

// Format the display data
Function PB0P-0521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PB0PM002 initial;

  PB0PM002.PB0PMTYP = "  ADD "; /* map type literal*/
  PCWREC.XXXMSGNO = 483; /* map type instruction msg*/

  PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PB0PM002.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PB0PM002.XGPDESC = "APPAREL"; /* GPC desc*/

  set PB0PM002.PB0PMBSS cursor, normal;

  PB0PM002.PB0PMREG = PB0PM001.PB0PMREG; /* Region code*/
  PB0PM002.PB0PMREGDESC = PB0PM001.PB0PMREGDESC; /* Region code Desc*/

  set PB0PM002.PB0PMSST skip; /* status flag*/
  PB0PM002.PB0PMSST = "A"; /* row status flag*/
  PB0PM002.PB0PMDS2 = "ACTIVE"; /* row status literal*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0521**********************/
end // end PB0P-0521

// Check authorization & format
Function PB0P-0522()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to add and there is modifiable*/
   /* data to add, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && PB0PW00.PB0PWMAP == "A") /* map function type flag*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to autoskip.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(29); /* ===>not authorized message*/

  set PB0PM002.CATOAP cursor;

  set PB0PM002.PB0PMBSS skip; /* season code*/
  set PB0PM002.PB0PMBMO skip; /* buy month*/
  set PB0PM002.PB0PMBYR skip; /* buy year*/
  set PB0PM002.PB0PMSNM skip; /* season desc*/
  set PB0PM002.PB0PMDYR skip; /* delivery year*/
  set PB0PM002.PB0PMSST skip; /* row status*/

   /* **                                                        ***/
   /* ********************** End of PB0P-0522**********************/
end // end PB0P-0522

// Check for ? inquiry by user
Function PB0P-0523()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/
  if (PB0PM002.PB0PMSNM == "?") /* if any ? entered*/

    XPXX001(); /* pop-up window initialize*/
    XX0XW02.XX0XWHDR = "  SEASON CODE TABLE   "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform xsecd window routine*/
    end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PB0PM002.PB0PMSNM = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      PB0PM002.PB0PMDS1 = XSETBL.XSEDESC[XX0XWPIX]; /* move desc*/
    else
      PB0PM002.PB0PMSNM = PB0PW02.XSECD;
      if (PB0PM002.PB0PMSNM in XSETBL.XSECD)
        PB0PM002.PB0PMDS1 = XSETBL.XSEDESC[sysVar.arrayIndex];
      end
    end
  end

  converseLib.clearScreen();
   /* restore the original map*/

  return;

   /* **                                                        ***/
   /* ********************** End of PB0P-0523**********************/
end // end PB0P-0523

// -->Check attention identifier
Function PB0P-0530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0PW00.PB0PWSWR == "Y") /* Request for data*/
      set PB0PW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* restore the map*/
    set PB0PM002.PB0PMBSS cursor, bold; /* Highlight*/
    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PB0PW00.XGPCD = COMMAREA.XGPCD;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPCS01(); /* Exit to another application*/

      PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

      set PB0PM001 initial;
      set PB0PM001.CATOAP cursor, bold; /* Highlight*/

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

    else

      PB0PW00.XXXPRCNM = "PB0P530"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0PM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PB0PM001 initial;
      PB0PW00.PB0PWSWR = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/
      PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
      PB0PM001.XGPCD = PB0PW00.XGPCD;
      PB0PM001.XGPDESC = "APPAREL";
      PB0PM001.PB0PMSEA = PB0PW00.PCFSECD;

      PB0PM001.PB0PMREG = PB0PM002.PB0PMREG;

      PB0PW00.PB0PWIXM = 1;
      while (PB0PW00.PB0PWIXM <= 12)
        set PB0PM001.PB0PMSEL[PB0PWIXM] initialAttributes;
        PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
      end

      exit stack; /* Exit to display map*/

    end

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWSWF = "N"; /* Format the map switch*/
    PB0PW00.PB0PWSWM = "1"; /* Map to be displayed switch*/
    PB0PW00.PB0PWSWR = "N"; /* Request for data switch*/

    set PB0PM001 initial;
    set PB0PM001.CATOAP cursor, bold; /* Highlight*/

    PB0PW00.PB0PWIXM = 1;
    while (PB0PW00.PB0PWIXM <= 12)
      set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
      PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0PW00.XXXPRCNM = "PB0P530"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0P-0530**********************/
end // end PB0P-0530

// -->Reset highlighted fields
Function PB0P-0540()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0PM002.PB0PMBSS initialAttributes; /* season code*/
  set PB0PM002.PB0PMBMO initialAttributes; /* buy month*/
  set PB0PM002.PB0PMBYR initialAttributes; /* buy year*/
  set PB0PM002.PB0PMDYR initialAttributes; /* delivery year*/

  set PB0PM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0PM002.CAITEM initialAttributes; /* Commarea application data*/

  set PB0PM002.PB0PMSST skip;

   /* **                                                        ***/
   /* ********************** End of PB0P-0540**********************/
end // end PB0P-0540

// Verify the entered data
Function PB0P-0550()

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PB0PW00.XXXPRCNM = "PB0P550"; /* Module identification*/
    set PB0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Verify fields entered for new season.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Determine that the new season is entered and valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PB0PM002.PB0PMBSS == " ") /* season is blank*/
      PB0PW00.XXXPRCNM = "PB0B550"; /* Module identification*/
      set PB0PM002.PB0PMBSS cursor, bold; /* Highlight*/
      converseLib.validationFailed(129); /* season missing*/
    else
      PB0PW02.PCFSECD = PB0PM002.PB0PMBSS;
      if (PB0PW02.PB0PWSE1 == "F"
       || PB0PW02.PB0PWSE1 == "H"
       || PB0PW02.PB0PWSE1 == "S"
       || PB0PW02.PB0PWSE1 == "U")
        PB0P-0552(); /* check for dup season*/
        PB0P-0558(); /* get xsecd and description*/
      else
        PB0PW00.XXXPRCNM = "PB0B550"; /* Module identification*/
        set PB0PM002.PB0PMBSS cursor, bold; /* Highlight*/
        converseLib.validationFailed(491); /* season invalid*/
      end
    end
   /* ------------------------------------------------------------*/
    /* Determine that the new buy month is entered and valid.*/
   /* (must be 1 thru 12)*/
   /* ----------------------------------------------------------------*/

    if (PB0PM002.PB0PMBMO == 0) /* If buy month not entered*/
      PB0PW00.XXXPRCNM = "PB0P550"; /* Module identification*/
      converseLib.validationFailed(475); /* Invalid date*/
      set PB0PM002.PB0PMBMO cursor, bold; /* Highlight*/
    else
      PB0P-0553(); /* check buy month*/
    end

   /* ----------------------------------------------------------------*/
    /* Determine that the new buy year is entered and valid.*/
   /* (must be 1900 thru 2100)*/
   /* ----------------------------------------------------------------*/

    if (PB0PM002.PB0PMBYR == 0) /* If buy year not entered*/
      PB0PW00.XXXPRCNM = "PB0P550"; /* Module identification*/
      converseLib.validationFailed(365); /* Invalid year*/
      set PB0PM002.PB0PMBYR cursor, bold; /* Highlight*/
    else
      PB0P-0554(); /* check buy year*/
    end

   /* ----------------------------------------------------------------*/
    /* Determine that the new delivery year is entered and valid.*/
   /* (must be 1900 thru 2100)*/
   /* ----------------------------------------------------------------*/

    if (PB0PM002.PB0PMDYR == 0) /* If del year not entered*/
      PB0PW00.XXXPRCNM = "PB0P550"; /* Module identification*/
      converseLib.validationFailed(489); /* Invalid delivery year*/
      set PB0PM002.PB0PMDYR cursor, bold; /* Highlight*/
    else
      PB0P-0555(); /* check delivery year*/
      PB0P-0556(); /* x-edit season & dyr*/
    end

   /* ------------------------------------------------------------*/
    /* x-edit buy month, year & delivery year.*/
   /* ------------------------------------------------------------*/

    PB0P-0557();

  end

   /* ------------------------------------------------------------*/
   /* Save the map data in map 2 display storage area*/
   /* ------------------------------------------------------------*/

  PB0P-0551();

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ***/
   /* ****************  End of PB0P-0550 ******************************/
end // end PB0P-0550

// Save map data before converse
Function PB0P-0551()
   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PB0PW02.PCFSECD = PB0PM002.PB0PMBSS; /* season code*/
  PB0PW02.PCFBUYMO = PB0PM002.PB0PMBMO; /* buy month*/
  PB0PW02.PCFBUYYR = PB0PM002.PB0PMBYR; /* buy year*/
  PB0PW02.XSECD = PB0PM002.PB0PMSNM; /* season desc name*/
  PB0PW02.PB0PWDYY = PB0PM002.PB0PMDYR; /* delivery year*/
  PB0PW02.XXXSTAT = PB0PM002.PB0PMSST; /* row status*/
  PB0PW02.PB0PWSTA = PB0PM002.PB0PMDS1; /* status literal*/
  PB0PW02.XSEDESC = PB0PM002.PB0PMDS2; /* xse description*/
   /*  */
   /* ****************  End of PB0P-0551 ********************************/
end // end PB0P-0551

// check for duplicate season
Function PB0P-0552()

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to check to see if*/
   /* the input season already exist(S1).*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWC = "N"; /* End of cursor switch*/

  set VPOVFY02 empty; /* Clear CSP record area*/

  VPOVFY02.PCFSECD = PB0PM002.PB0PMBSS; /* search key - season code*/
  VPOVFY02.PO-REG-CD = PB0PM002.PB0PMREG; /* search key - Region code*/
  VPOVFY02.PCFBUYMO = -1; /* buy month*/
  VPOVFY02.XXXSTAT = "*"; /* status*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PB0PS-01(); /* set up cursor of vpovfy01*/

  PB0PS-09(); /* fectch the row only*/
                                             /* one time to see if same*/
                                             /* input season exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If a row exists for season*/

    set PB0PM002.PB0PMBSS cursor, bold; /* Highlight*/
    PB0PW00.XXXPRCNM = "PB0P552"; /* Module identification*/
    converseLib.validationFailed(478); /* season exists*/

  end

  PB0PS-03(); /* close cursor*/

   /*  */
   /* ***************** End of PB0P-0552 *********************************/
end // end PB0P-0552

// edit buy month
Function PB0P-0553()
   /* ----------------------------------------------------------------*/
   /* edit buy month entered. ( must be 1 thru 12)*/
   /* ----------------------------------------------------------------*/

  PB0PW00.PB0PWMM = PB0PM002.PB0PMBMO;
  if (PB0PW00.PB0PWMM < 01
   || PB0PW00.PB0PWMM > 12)
    PB0PW00.XXXPRCNM = "PB0P553"; /* Module identification*/
    converseLib.validationFailed(475); /* Invalid date*/
    set PB0PM002.PB0PMBMO cursor, bold; /* Highlight*/
  end

   /* ***************** End of PB0P-0553 *********************************8*/
end // end PB0P-0553

// edit buy year
Function PB0P-0554()
   /* ----------------------------------------------------------------*/
   /* edit buy year (must be 1900 thru 2100)*/
   /* ----------------------------------------------------------------*/

  PB0PW00.PB0PWBYR = PB0PM002.PB0PMBYR;

  if (PB0PW00.PB0PWBYR < 1900
   || PB0PW00.PB0PWBYR > 2100)
    PB0PW00.XXXPRCNM = "PB0P554"; /* Module identification*/
    converseLib.validationFailed(365); /* Invalid year*/
    set PB0PM002.PB0PMBYR cursor, bold; /* Highlight*/
  end

   /*  */
   /* ***************** End of PB0P-0554 *********************************/
end // end PB0P-0554

// edit delivery year
Function PB0P-0555()
   /* ----------------------------------------------------------------*/
   /* edit delivery year (must be 1900 thru 2100)*/
   /* ----------------------------------------------------------------*/

  PB0PW00.PB0PWDYR = PB0PM002.PB0PMDYR;

  if (PB0PW00.PB0PWDYR < 1900
   || PB0PW00.PB0PWDYR > 2100)
    PB0PW00.XXXPRCNM = "PB0P555";
    converseLib.validationFailed(489);
    set PB0PM002.PB0PMDYR cursor, bold;
  end

   /* ***************** End of PB0P-0555 *********************************/
end // end PB0P-0555

// x-edit season code & deliv yr
Function PB0P-0556()
   /* ------------------------------------------------------------*/
   /* cross edit season code and the delivery  year.*/
   /* ------------------------------------------------------------*/

  PB0PW02.PB0PWYR = PB0PM002.PB0PMDYR;

  if (PB0PW02.PB0PWSE2 != PB0PW02.PB0PWYR4) /* if 2nd char of season &*/
    PB0PW00.XXXPRCNM = "PB0P556"; /* 4th char of dyr not =*/
    set PB0PM002.PB0PMDYR cursor, bold;
    converseLib.validationFailed(489); /* invalid delivery year*/
  end
   /* ********************** End of PB0P-0556**********************/
end // end PB0P-0556

// cross edit on buy yr & del yr
Function PB0P-0557()
   /* ------------------------------------------------------------*/
   /* x-edit buy month, year and delivery year.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWBYR = PB0PM002.PB0PMBYR;
  PB0PW00.PB0PWDYR = PB0PM002.PB0PMDYR;

  if (PB0PM002.PB0PMBMO == 01) /* If buy month = 01*/
    if (PB0PW00.PB0PWBYR > PB0PW00.PB0PWDYR) /* byr must LE dyr*/
      PB0PW00.XXXPRCNM = "PB0P557";
      set PB0PM002.PB0PMBYR cursor, bold;
      converseLib.validationFailed(477); /* invalid buy year*/
    end
  else /* if buy mo = 02 - 12*/
    if (PB0PW00.PB0PWBYR >= PB0PW00.PB0PWDYR) /* byr must LT dyr*/
      PB0PW00.XXXPRCNM = "PB0P557";
      set PB0PM002.PB0PMBYR cursor, bold;
      converseLib.validationFailed(477); /* invalid buy year*/
    end
  end

   /* ********************** End of PB0P-0557**********************/
end // end PB0P-0557

// get xsecd and xsedesc
Function PB0P-0558()

   /* ------------------------------------------------------------*/
    /* Assign xsecd according to the input season code and*/
    /* check the xsecd table.*/
   /* ------------------------------------------------------------*/

  if (PB0PW02.PB0PWSE1 == "F")
    PB0PM002.PB0PMSNM = "FA";
    PB0PW02.XSECD = "FA";
  end

  if (PB0PW02.PB0PWSE1 == "H")
    PB0PM002.PB0PMSNM = "HO";
    PB0PW02.XSECD = "HO";
  end

  if (PB0PW02.PB0PWSE1 == "S")
    PB0PM002.PB0PMSNM = "SP";
    PB0PW02.XSECD = "SP";
  end

  if (PB0PW02.PB0PWSE1 == "U")
    PB0PM002.PB0PMSNM = "SU";
    PB0PW02.XSECD = "SU";
  end

  if (PB0PM002.PB0PMSNM in XSETBL.XSECD /* code in table*/
   && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    PB0PM002.PB0PMDS1 = XSETBL.XSEDESC[sysVar.arrayIndex]; /* save desc*/
  else
    PB0PM002.PB0PMDS1 = "      ";
  end

   /* ****************  End of PB0P-0558 ******************************/
end // end PB0P-0558

// process valid input request
Function PB0P-0560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* add the table rows.*/
   /* ------------------------------------------------------------*/

  PB0P-0561(); /* Add table row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/

  PB0PW00.XXXPRCNM = "PC0B560"; /* Module identification*/
  PCWREC.XXXMSGNO = 480; /* Indicate add completed*/
  converseLib.validationFailed(480);

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

  PB0PW00.PCFSECD = PB0PM002.PB0PMBSS; /* pass the season*/
                                                  /* to display on map 1*/
   /* **                                                        ***/
   /* ********************** End of PB0P-0560**********************/
end // end PB0P-0560

// add the table row
Function PB0P-0561()
   /* ------------------------------------------------------------*/
   /* format the data from the map for the first record*/
   /* then, format the other 11 records (2nd --> 12th) by incrementing*/
   /* buy month by 1 and change buy year appropriately.*/
   /*  */
   /* other fields are common, and will have the same data.*/
   /* ------------------------------------------------------------*/

  PB0PW00.PB0PWIXM = 1; /* init the index*/

  PB0PW02.PB0PWMO = PB0PM002.PB0PMBMO; /* move start month & year*/
  PB0PW02.PB0PWYR = PB0PM002.PB0PMBYR; /* cal fields*/

  while (PB0PW00.PB0PWIXM <= 12)

    VPOVFY02.PO-REG-CD = PB0PM002.PB0PMREG; /* Region code*/
    VPOVFY02.PCFSECD = PB0PM002.PB0PMBSS; /* save all common fiels*/
    VPOVFY02.XSECD = PB0PM002.PB0PMSNM;
    VPOVFY02.PCFSEYR = PB0PM002.PB0PMDYR;
    VPOVFY02.XXXSTAT = PB0PM002.PB0PMSST;
    VPOVFY02.ZZZSDT = XX0XW01.XX0XWDAT; /* add date = current*/
    VPOVFY02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* chg date = current*/
    VPOVFY02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* chg time = current*/

    if (PB0PW02.PB0PWMO < 12) /* 1 - 11 as starting month*/
      if (PB0PW00.PB0PWIXM == 1) /* starting buy month as 1st rec*/
        PB0PW02.PB0PWMO = PB0PW02.PB0PWMO + 0; /* starting buy month*/
      else
        PB0PW02.PB0PWMO = PB0PW02.PB0PWMO + 1; /* increment by 1*/
      end
    else
      if (PB0PW00.PB0PWIXM == 1) /* Dec as starting month*/
        PB0PW02.PB0PWMO = PB0PW02.PB0PWMO + 0; /* starting buy month*/
      else
        PB0PW02.PB0PWMO = 1; /* new month, new year*/
        PB0PW02.PB0PWYR = PB0PW02.PB0PWYR + 1;
      end
    end

    VPOVFY02.PCFBUYMO = PB0PW02.PB0PWMO; /* move cal field*/
    VPOVFY02.PCFBUYYR = PB0PW02.PB0PWYR;

    /* ----------------------------------------------------------*/
     /* add a row to the table.*/
    /* ----------------------------------------------------------*/

    PB0PS-05(); /* add a row to vpovfy01 table*/

    PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;

  end
   /* **                                                        ***/
   /* ********************** End of PB0P-0561 *********************/
end // end PB0P-0561

// select set and open cursor
Function PB0PS-01()

   /* ------------------------------------------------------------*/
   /* select the requested set of rows from the table*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("S1", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  while (PB0PW00.PB0PWIXM <= 12)
    set PB0PM001.PB0PMSEL[PB0PWIXM] skip, invisible;
    PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET FROM DPRODC.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS01"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-01-----------------------------*/
end // end PB0PS-01

// fetch next row from the cursor
Function PB0PS-02()

   /* ------------------------------------------------------------*/
   /* fetch next row in the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("N1", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      PB0PS-06(); /* save in map 1 display storage*/

      return; /* Return to previous process*/

    end

    /* -------------------------------------------------------------*/
      /* if end of selected set, indicate end of cursor*/
    /* -------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* end of the cursor*/

      PB0PW00.PB0PWSWC = "Y"; /* indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT DPRODC.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-02-----------------------------*/
end // end PB0PS-02

// close the vpovfy01 cursor
Function PB0PS-03()

   /* ------------------------------------------------------------*/
   /* close selected set cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("C1", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS03"; /* Module identification*/

  converseLib.validationFailed(10); /* indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOVFY01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-03-----------------------------*/
end // end PB0PS-03

// Select unique PO ID - VPOVFY01
Function PB0PS-04()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("S ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  PB0PW00.PB0PWMAP = 1; /* Return to selection screen*/
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0PS04"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQ ROW FROM VPOVFY01 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  PB0PW00.PCFSECD = VPOVFY02.PCFSECD; /* Key field 1*/
  PB0PW00.PCFBUYMO = VPOVFY02.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PB0PW00.XXXPRCNM = "PB0PS04";
  exit stack;

end // end PB0PS-04

// add temporary storage page
Function PB0PS-05()

   /* ------------------------------------------------------------*/
   /* add row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("A ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD ROW TO DPRODC.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-05-----------------------------*/
end // end PB0PS-05

// Save data in display storage
Function PB0PS-06()

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the map1 display storage*/
   /* ------------------------------------------------------------*/

  PB0PW01.PCFSECD[PB0PWIXM] = VPOVFY02.PCFSECD; /* ==>season code*/
  PB0PW01.PCFBUYMO[PB0PWIXM] = VPOVFY02.PCFBUYMO; /* ==>buy month*/
  PB0PW01.PCFBUYYR[PB0PWIXM] = VPOVFY02.PCFBUYYR; /* ==>buy year*/
  PB0PW01.XSECD[PB0PWIXM] = VPOVFY02.XSECD; /* ==>season desc*/
  PB0PW01.PB0PWDYY[PB0PWIXM] = VPOVFY02.PCFSEYR; /* ==>delivery year*/
  PB0PW01.XXXSTAT[PB0PWIXM] = VPOVFY02.XXXSTAT; /* ==>row status*/

  PB0PW00.PB0PWIXM = PB0PW00.PB0PWIXM + 1; /* Increment line index*/

   /* ********************** End Of PB0PS-02***********************/
end // end PB0PS-06

// update temporary storage page
Function PB0PS-07()

   /* ------------------------------------------------------------*/
   /* update row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("U ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PB0PW00.PB0PWSWR = "Y"; /* Request for data switch*/
      PB0PW00.PB0PWERR = "Y"; /* error flag*/

      PB0PW00.XXXPRCNM = "PB0PS07"; /* Module identification*/
      PCWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW TO VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ----------------End of PB0PS-07-----------------------------*/
end // end PB0PS-07

// delete temporary storage row
Function PB0PS-08()

   /* ------------------------------------------------------------*/
   /* delete row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("D ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW FROM VPOVFY01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS08"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-08-----------------------------*/
end // end PB0PS-08

// fetch ist row to check season
Function PB0PS-09()

   /* ------------------------------------------------------------*/
   /* fetch next row in the cursor(only checking the first row)*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("N1", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, there is a duplicate season in the table*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end

    /* -------------------------------------------------------------*/
      /* if end of selected set, input season does not exist.*/
    /* -------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* end of the cursor*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.XXXPRCNM = "PB0PS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH FIRST DPRODC.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PB0PS09"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------------End of PB0PS-09-----------------------------*/
end // end PB0PS-09

// Select (S3) Set/Open  VPOHDR01
Function PB0PS-10()
   /* ------------------------------------------------------------*/
   /* Initialize the  key information for select set VPOHDR03*/
   /* ------------------------------------------------------------*/

  set VPOHDR03 empty; /* ====>row storage area(hdr)*/
  set PCYREC empty; /* ====>row storage area(date)*/

  VPOHDR03.PO-REG-CD = PB0PW00.PO-REG-CD;
  VPOHDR03.XGPCD = PB0PM002.XGPCD;
  VPOHDR03.PCFSECD = PB0PW02.PCFSECD;

  VPOHDR03.PC4ORTYP = "*";
  VPOHDR03.FY1FCTYC = "*";

  PCYREC.PCYFRDT = 0; /* load low  date*/
  PCYREC.PCYTODT = 999999999; /* load high date*/

  PCYREC.PCYFUNC = "S7";
  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.PB0PWSWM = "1"; /* request for map switch*/
  PB0PW00.XXXPRCNM = "PB0PS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF VPOHDR03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End of pb0ps-10***********************/
end // end PB0PS-10

// Fetch  (N3) Next row  VPOHDR01
Function PB0PS-11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR03" ("N7", SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PB0PW00.PB0PWDEL = "N";
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0PW00.PB0PWDEL = "Y";
   /* MOVE 'Y' TO PB0PW00.PB0PWSWC;        /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.PB0PWSWM = "1"; /* request for map switch*/
  PB0PW00.XXXPRCNM = "PB0PS11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VPOHDR03 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0PS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/

  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ps-11***********************/
end // end PB0PS-11

// Close  (C3) Set       VPOHDR01
Function PB0PS-12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  VPOHDR03.PO-REG-CD = PB0PW00.PO-REG-CD;

  PCYREC.PCYFUNC = "C7";
  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0PW00.PB0PWSWM = "1"; /* request for map switch*/
  PB0PW00.XXXPRCNM = "PB0PS12"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF VPOHDR03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0PS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY02.VPOVFY02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pb0ps-12***********************/
end // end PB0PS-12

// application initialization
Function XPPC001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The system*/
   /* work record is formatted upon initial application entry.*/
   /* SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* setting segmented trans id*/

  if (COMMAREA.CAFRMSYS == "PC"   /* Came from within the system*/
   || COMMAREA.CAFRMSYS == "PB"   /* Came from within the system*/
   || COMMAREA.CAFROMAP == "TS0P" /* Came from 'TS0P'*/
   || COMMAREA.CAFROMAP == "NY0P" /* Came from 'NY0P'*/
   || COMMAREA.CAFRMSYS == "PT")  /* Came from wip system*/

    if (COMMAREA.CAUSERA == " ")
      set PCWREC empty; /* Clear work record area*/
    else
      PCWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
    end

  else
    set PCWREC empty; /* Clear work record area*/
  end

  if (COMMAREA.XGPCD > " ")
    PCWREC.XGPCD = COMMAREA.XGPCD; /* save gpc code*/
  end
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/

end // end XPPC001

//*** RECORD=PB0PW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PB0PW00 type basicRecord
  10 PB0PWIXM PB0PWIXM ; 
  10 PB0PWIXS PB0PWIXS ; 
  10 PB0PWSWC PB0PWSWC ; 
  10 PB0PWSWF PB0PWSWF ; 
  10 PB0PWSWM PB0PWSWM ; 
  10 PB0PWSWR PB0PWSWR ; 
  10 PB0PWSWU PB0PWSWU ; 
  10 PB0PWMAP PB0PWMAP ; 
  10 PB0PWMOD PB0PWMOD ; 
  10 PB0PWDEL PB0PWDEL ; 
  10 PB0PWERR PB0PWERR ; 
  10 PB0PWDTA PB0PWDTA ; 
  10 PB0PWXIT PB0PWXIT ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PCFSECD PCFSECD ; 
  10 PCFBUYMO PCFBUYMO ; 
  10 PB0PWMM PB0PWMM ; 
  10 PB0PWBYR PB0PWBYR ; 
  10 PB0PWDYR PB0PWDYR ; 
end // end PB0PW00

//*** RECORD=PB0PW01 ****
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// **                      LIST SCREEN                       **
// **                                                        **
// 
//         Map:         PB0PM001
// 
// Record Name:         PB0PW01
// 
//    This record is a working storage record to load and
// extract data for the POID-SEASON list screen(Map1).
// It holds only the data which represents 12 rows of POID
// verification table rows that have same season code.
// 
// **                                                        **
// **                                                        **
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// ***********************
Record PB0PW01 type basicRecord
  5 XGPCD XGPCD ; 
  5 PB0PWSEA PB0PWSEA ; 
  5 PB0PWREG PB0PWREG ; 
  5 PB0PWRC1 PB0PWRC1 [12] ; 
    10 PB0PWSEL PB0PWSEL ; 
    10 PCFSECD PCFSECD ; 
    10 PCFBUYMO PCFBUYMO ; 
    10 PCFBUYYR PCFBUYYR ; 
    10 XSECD XSECD ; 
    10 PB0PWDYY PB0PWDYY ; 
    10 XXXSTAT XXXSTAT ; 
end // end PB0PW01

//*** RECORD=PB0PW02 ****
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// **                    DETAIL SCREEN                       **
// **                                                        **
// 
//         Map:         PB0PM002
// 
// Record Name:         PB0PW02
// 
//    This record is a working storage record to load and
// extract data for the POID-SEASON detail screens(Map 2).
// It holds only the data which represents selected on row of
// POID verification table.
// 
// **                                                        **
// **                                                        **
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// ***********************
Record PB0PW02 type basicRecord
  5 PB0PWRC2 PB0PWRC2 ; 
    10 PCFSECD PCFSECD ; 
      15 PB0PWSE1 PB0PWSE1 ; 
      15 PB0PWSE2 PB0PWSE2 ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PCFBUYMO PCFBUYMO ; 
    10 PCFBUYYR PCFBUYYR ; 
    10 XSECD XSECD ; 
    10 PB0PWDYY PB0PWDYY ; 
    10 XXXSTAT XXXSTAT ; 
    10 PB0PWMO PB0PWMO ; 
    10 PB0PWYR PB0PWYR ; 
      15 PB0PWYR3 PB0PWYR3 ; 
      15 PB0PWYR4 PB0PWYR4 ; 
    10 PB0PWSTA PB0PWSTA ; 
    10 XSEDESC XSEDESC ; 
end // end PB0PW02

// temp buy year for comp w/dyy
DataItem PB0PWBYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ok to delete flag
DataItem PB0PWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data exist for GPC code
DataItem PB0PWDTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp delivery year for compare
DataItem PB0PWDYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_SESN_YR
DataItem PB0PWDYY smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// contention error flag
DataItem PB0PWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PB0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved Index for map fields
DataItem PB0PWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem PB0PWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp month for edit
DataItem PB0PWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp month for calculation
DataItem PB0PWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PB0PWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data record for temp. storage
DataItem PB0PWRC1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data record for temp. storage
DataItem PB0PWRC2 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// input Region code
DataItem PB0PWREG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_SESN_CD, 1st digit
DataItem PB0PWSE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_SESN_CD, 2nd digit
DataItem PB0PWSE2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// input season code
DataItem PB0PWSEA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PB0PWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status desc(active/inactive)
DataItem PB0PWSTA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PB0PWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PB0PWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PB0PWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PB0PWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0PWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp year for calculation
DataItem PB0PWYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp year, first 3 digit
DataItem PB0PWYR3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp year, 4th digit
DataItem PB0PWYR4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end