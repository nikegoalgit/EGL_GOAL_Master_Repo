package pb0n;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0N ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//          PB0N - L/C NUMBER INQUIRY - SELECTION/LIST
// 
//    This program will allow the user to bring up a list of
// PO ID's for inquiry.  Access this application by entering
// option 25 from the L/C Menu screen (LC0A).
// 
// This screen will list for inquiry only; pair count,
// 100% $, Negotiable Percent, Negotiable $, and Reduction $.
// 
// A line is displayed on the list screen for each PO ID,
// (pc-po-id-mo-rng and fy-fcty-cd).  A single PO ID may be
// selected, or a range.  Multiple pages of data per select
// session is supported (i.e. paging is supported).
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 01/29/93   KSANFO   New Application
// 01/13/94   dhales   change size of map fields and working
//                     storage to prevent truncation
// 06/10/97   PHARWO   PCA367 - PPR PROJECT - P.O. VIEWS
// 07/08/97   jniese   PCA367 - PPR corrections
// 10/30/97   rgilli   Y2K MODIFICATIONS MADE TO:
//                     PB0N152: Change yy to ccyy compare, add
//                              century windowing.
// *********************
Program PB0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  PB0NW00 PB0NW00; // record
  PB0NW01 PB0NW01; // record
  PB0NW02 PB0NW02; // record
  PB0NW04 PB0NW04; // record
  PB0NW06 PB0NW06; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCOREC PCOREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSEREC TSEREC; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PB0NM.PB0NM001,  // forms
      PB0NM.PB0NM002, 
      PB0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PB0NM001 initial;
    set PB0NM002 initial;
    set PB0NW00 empty;
    set PB0NW01 empty;
    set PB0NW02 empty;
    set PB0NW04 empty;
    set PB0NW06 empty;
    set PC2REC empty;
    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM03 empty;
    set VPOSIZ02 empty;
    set PCFREC empty;
    set PCYREC empty;
    set FY1REC empty;
    set PG2REC empty;
    set TSEREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PB0NW00.PB0NWSWR = "Y"; /* ===>request for data*/
    PB0NW00.PB0NWSWF = "Y"; /* ===>format map switch*/
    PB0NW00.PB0NWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PB0NW00.PB0NWMOD = "N"; /* ===>MODified data flag*/
    PB0NW00.PB0NWMLT = "N"; /* ===>Multiple styles flag*/
    PB0NW00.PB0NWSWC = "N"; /* ===>end of hdr cursor switch*/
    PB0NW00.PB0NWIXM = 1; /* ===>Map row index*/
    PB0NW00.PB0NWIXR = 1; /* ===>Row index for selected row to*/
                                    /* pass record*/
    PB0NM001.PB0NMSTA = "ALL"; /* ===> status*/
    PB0NW01.PB0NWSTA = "ALL"; /* ===>  map 1 ws status*/
    PB0NM001.PB0NMDST = "ALL"; /* ===> dest*/
    PB0NW01.PB0NWDST = "ALL"; /* ===>  map 1 ws destination*/


     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[1] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "LC0A"; /* Return to menu*/
          PB0NW00.PB0NWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[2] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "LC0A"; /* Return to menu*/
          PB0NW00.PB0NWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[3] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "LC0A"; /* Return to menu*/
          PB0NW00.PB0NWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[7] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "LC0A"; /* Return to menu*/
          PB0NW00.PB0NWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "LC0A"; /* Return to menu*/
      PB0NW00.PB0NWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end


    PB0NW00.PB0NWSWM = "1";
    PB0NW01.XGPCD = PCWREC.XGPCD;
    PB0NW01.PO-REG-CD = "01";
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PB0N001;

     /* **                                                        ***/
     /* ******************** END OF XPPC001 FLOW ********************/
    PB0N001: PB0N001();
    goto PB0N001;
  end // end main
end // end PB0N

// Application main line
Function PB0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (PB0NW00.PB0NWXIT == "Y")

    XSPCS01(); /* =====>Exit to LC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PB0NW00.PB0NWSWF = "Y"; /* Format the map switch*/
    set PB0NM001 initial;
    set PB0NM001.CATOAP cursor, bold; /* Highlight*/
    set PB0NW01 empty; /* ==>reset map display record*/
    PB0NW01.XGPCD = COMMAREA.XGPCD;
    PB0NW00.PB0NWSWM = "1"; /* Map 1 was requested*/

  end


  if (PB0NW00.PB0NWSWM == "1") /* Map 1 was requested*/

    PB0N100(); /* ===> process Display map 1*/

  else

    if (PB0NW00.PB0NWSWM == "2") /* ===> Map 2 was requested*/

      PB0N200(); /* ===> process List map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PB0NW00.XXXPRCNM = "PB0N001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PB0NW00.PB0NWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PB0NW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "LC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PB0NW00.PB0NWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PB0N001 ***********************/
end // end PB0N001

// ========>Process map 1 logic
Function PB0N100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0N120(); /* Format and display the map*/

  PB0N130(); /* Check attention identifier*/

  PB0N140(); /* Reset fields to normal intensity*/

  PB0N150(); /* Verify the entered data*/

  PB0N160(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of PB0N100 ***********************/
end // end PB0N100

// -->Format and converse the map
Function PB0N120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0NW00.PB0NWSWF == "Y") /* Map must be formatted*/

      PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the data in the map from the display storage.*/
      /* ------------------------------------------------------------*/

      PB0NM001.PB0NMFYR = PB0NW01.PB0NMFYR;
      PB0NM001.PB0NMFM1 = PB0NW01.PB0NMFM1;
      PB0NM001.PB0NMFM2 = PB0NW01.PB0NMFM2;
      PB0NM001.PB0NMTYR = PB0NW01.PB0NMTYR;
      PB0NM001.PB0NMTM1 = PB0NW01.PB0NMFM1;
      PB0NM001.PB0NMTM2 = PB0NW01.PB0NMFM2;
      PB0NM001.FY1FCTYC = PB0NW01.FY1FCTYC;
      PB0NM001.XCTCD = PB0NW01.XCTCD;
      PB0NM001.PB0NMDST = PB0NW01.PB0NWDST;
      PB0NM001.PB0NMSTA = PB0NW01.PB0NWSTA;
      PB0NM001.PC4ORTYP = PB0NW01.PC4ORTYP;

    end

  else /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0NM001.XXXPRCNM = PB0NW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0NM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0NW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PB0N121(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PB0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0NM001.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of PB0N120 ***********************/
end // end PB0N120

// Check for ? inquiry by user
Function PB0N121()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PB0NM001.XCTCD == "?") /* ===> if any ? entered*/


    /* ------------------------------------------------------------*/
             /* COUNTRY CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.XCTCD == "?") /* if ? in country code*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " COUNTRY CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform ctry code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PB0NM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move ctry code*/
      else
        PB0NM001.XCTCD = PB0NW01.XCTCD; /* ===> reset map field*/
      end
      set PB0NM001.XCTCD cursor; /* ===> reset map field*/
    end



    converseLib.clearScreen();

    converseLib.validationFailed(84);

    exit stack;

  end /* end of if ? statements*/

   /* **                                                        ***/
   /* ********************** End of PB0N121 ***********************/
end // end PB0N121

// -->Check attention identifier
Function PB0N130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PB0NW00.PB0NWSWF = "Y"; /* Format the map switch*/
      set PB0NM001 initial;
      set PB0NM001.CATOAP cursor, bold; /* Highlight*/
      set PB0NW01 empty; /* ==>reset map display record*/
      PB0NW01.XGPCD = COMMAREA.XGPCD;
      PB0NW00.XXXPRCNM = "PB0N130"; /* Module identification*/

    else

      PB0NW00.XXXPRCNM = "PB0N130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5 /* or PF5  was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0NM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "LC0A"; /* Application to application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application to application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* Application to application*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end



    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PB0NW00.PB0NWSWF = "Y"; /* Format the map switch*/

    set PB0NM001 initial;
    set PB0NM001.CATOAP cursor, bold; /* Highlight*/
    PB0NW01.XGPCD = COMMAREA.XGPCD;
    PB0NW00.XXXPRCNM = "PC0S130"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PB0NW00.XXXPRCNM = "PB0N130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0N130 ***********************/
end // end PB0N130

// -->Reset highlighted fields
Function PB0N140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0NM001.PB0NMFYR initialAttributes; /* ====> production year*/
  set PB0NM001.PB0NMFM1 initialAttributes; /* ====> production month*/
  set PB0NM001.PB0NMFM2 initialAttributes; /* ====> delivery month*/
  set PB0NM001.PB0NMTYR initialAttributes; /* ====> production year*/
  set PB0NM001.PB0NMTM1 initialAttributes; /* ====> production month*/
  set PB0NM001.PB0NMTM2 initialAttributes; /* ====> delivery month*/
  set PB0NM001.FY1FCTYC initialAttributes; /* ====> factory code*/
  set PB0NM001.PB0NMSTA initialAttributes; /* status*/
  set PB0NM001.XCTCD initialAttributes; /* ctry code*/
  set PB0NM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
  set PB0NM001.PB0NMDST initialAttributes; /* destination*/


  set PB0NM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PB0NM001.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PB0N140 ***********************/
end // end PB0N140

// -->Verify the entered data
Function PB0N150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PB0NW00.XXXPRCNM = "PB0N150"; /* Module identification*/
    set PB0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If factory changed, verify factory.*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.FY1FCTYC != PB0NW01.FY1FCTYC)
      PB0N153(); /* =========> Verify factory*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* If Status was changed, verify it.*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.PB0NMSTA != PB0NW01.PB0NWSTA)
      PB0N158(); /* =========> Verify stat code*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* If ctry code changed, verify country code.*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.XCTCD != PB0NW01.XCTCD)
      PB0N154(); /* =========> Verify ctry*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* Verify status code*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.PB0NMDST != "SIDE1"
     && PB0NM001.PB0NMDST != "IE"
     && PB0NM001.PB0NMDST != "ALL")
      if (PB0NM001.PC4ORTYP == " ")
        set PB0NM001.PC4ORTYP cursor, bold; /* Highlight*/
        converseLib.validationFailed(33); /* po type required msg*/
      else
        if (PB0NM001.PC4ORTYP != PB0NW01.PC4ORTYP)
          PB0N159(); /* =========> Verify po typ*/
          PB0NW00.PB0NWMOD = "Y"; /* ===> data modified*/
        end
      end
    else
      if (PB0NM001.PB0NMDST == "SIDE1"
       || PB0NM001.PB0NMDST == "IE"
       || PB0NM001.PB0NMDST == "ALL")
        if (PB0NM001.PC4ORTYP != " ")
          set PB0NM001.PC4ORTYP cursor, bold; /* Highlight*/
          converseLib.validationFailed(469); /* po type not allowed msg*/
        end
      end
    end
    /* ------------------------------------------------------------*/
     /* If dest change, verify it.*/
    /* ------------------------------------------------------------*/

    if (PB0NM001.PB0NMDST != PB0NW01.PB0NWDST)
      PB0N155(); /* =========> Verify dest type*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> data modified*/
    end


    /* ------------------------------------------------------------*/
     /* verify to po id*/
    /* ------------------------------------------------------------*/

    PB0N152(); /* =========> Verify to   po id*/

    /* ------------------------------------------------------------*/
     /* verify from po id*/
    /* ------------------------------------------------------------*/

    PB0N151(); /* =========> Verify from po id*/


  end
    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end


   /* **                                                        ***/
   /* ********************** End of PB0N150  **********************/
end // end PB0N150

// Verify from PO ID
Function PB0N151()
   /* ---------------------------------------------------*/
   /* Validate the FROM PO ID*/
   /* --------------------------------------------------*/
  if (PB0NM001.PB0NMFYR == " " /* If From year not entered*/
   || PB0NM001.PB0NMFM1 == " " /* or From buy month not entered*/
   || PB0NM001.PB0NMFM2 == " ") /* or From dlv month not entered*/
    if (PB0NM001.PB0NMFYR == " " /* If From year not entered*/
     && PB0NM001.PB0NMFM1 == " " /* & From buy month not entered*/
     && PB0NM001.PB0NMFM2 == " ") /* & From dlv month not entered*/
      converseLib.validationFailed(89); /* From P.O. ID required*/
    else
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
    end
    PB0NW00.XXXPRCNM = "PB0N151"; /* Module identification*/
    set PB0NM001.PB0NMFYR cursor, bold; /* Highlight*/
    set PB0NM001.PB0NMFM1 bold; /* Highlight*/
    set PB0NM001.PB0NMFM2 bold; /* Highlight*/
    return; /* Return to calling process*/
  else
    PB0NW00.PB0NWNUM = PB0NM001.PB0NMFM2; /* Redefine month*/
    if (PB0NW00.PB0NWNM1 < "0" /* IF month not numeric*/
     || PB0NW00.PB0NWNM1 > "9" 
     || PB0NW00.PB0NWNM2 < "0" 
     || PB0NW00.PB0NWNM2 > "9" 
     || PB0NW00.PB0NWNUM < "01"
     || PB0NW00.PB0NWNUM > "12")
      PB0NW00.XXXPRCNM = "PB0N151"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PB0NM001.PB0NMFM2 cursor, bold; /* Highlight*/
    end
    PB0NW00.PB0NWNUM = PB0NM001.PB0NMFM1; /* Redefine month*/
    if (PB0NW00.PB0NWNM1 < "0" /* IF month not numeric*/
     || PB0NW00.PB0NWNM1 > "9" 
     || PB0NW00.PB0NWNM2 < "0" 
     || PB0NW00.PB0NWNM2 > "9" 
     || PB0NW00.PB0NWNUM < "01"
     || PB0NW00.PB0NWNUM > "12")
      PB0NW00.XXXPRCNM = "PB0N151"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PB0NM001.PB0NMFM1 cursor, bold; /* Highlight*/
    end
    PB0NW00.PB0NWRYY = PB0NM001.PB0NMFYR; /* Redefine year*/
    if (PB0NW00.PB0NWRY1 < "0" /* IF From year not numeric*/
     || PB0NW00.PB0NWRY1 > "9" 
     || PB0NW00.PB0NWRY2 < "0" 
     || PB0NW00.PB0NWRY2 > "9")
      PB0NW00.XXXPRCNM = "PB0N151"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid date*/
      set PB0NM001.PB0NMFYR cursor, bold; /* Highlight*/
    end
  end
  if (PB0NW00.XXXPRCNM != "PB0N151") /* If no errors found*/
    if (PB0NW00.PB0NWRYY < "80") /* If year is < 80*/
      PB0NW00.PB0NWRCC = 20; /* its the 21st century*/
    else
      PB0NW00.PB0NWRCC = 19; /* its the 20th century*/
    end
    PB0NW00.PB0NWRM1 = PB0NM001.PB0NMFM1; /* From PO ID buy month*/
    PB0NW00.PB0NWRM2 = PB0NM001.PB0NMFM2;
                                   /* From PO ID delivery month*/
    PB0NW01.PCYFRDT = PB0NW00.PB0NWRDT; /* From PO ID date*/
    if (PB0NM001.PB0NMTYR == " ") /* If To PO ID not entered*/
      PB0NW01.PCYTODT = PB0NW00.PB0NWRDT; /* To PO ID date*/
    end
  end
end // end PB0N151

// Verify to PO ID
Function PB0N152()
   /* ---------------------------------------------------*/
   /* Validate the TO PO ID*/
   /* --------------------------------------------------*/
  if (PB0NM001.PB0NMTYR == " ") /* If To PO ID year not entered*/
    if (PB0NM001.PB0NMTM2 != " " /* If To PO months entered*/
     || PB0NM001.PB0NMTM1 != " ")
      PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PB0NM001.PB0NMTYR cursor, bold; /* Highlight*/
      set PB0NM001.PB0NMTM1 bold; /* Highlight*/
      set PB0NM001.PB0NMTM2 bold; /* Highlight*/
    end
    return; /* Return to calling process*/
  else
    PB0NW00.PB0NWNUM = PB0NM001.PB0NMTM2; /* Redefine month*/
    if (PB0NW00.PB0NWNM1 < "0" /* If month not numeric*/
     || PB0NW00.PB0NWNM1 > "9" 
     || PB0NW00.PB0NWNM2 < "0" 
     || PB0NW00.PB0NWNM2 > "9" 
     || PB0NW00.PB0NWNUM < "01"
     || PB0NW00.PB0NWNUM > "12")
      PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PB0NM001.PB0NMTM2 cursor, bold; /* Highlight*/
    end
    PB0NW00.PB0NWNUM = PB0NM001.PB0NMTM1; /* Redefine month*/
    if (PB0NW00.PB0NWNM1 < "0" /* If month not numeric*/
     || PB0NW00.PB0NWNM1 > "9" 
     || PB0NW00.PB0NWNM2 < "0" 
     || PB0NW00.PB0NWNM2 > "9" 
     || PB0NW00.PB0NWNUM < "01"
     || PB0NW00.PB0NWNUM > "12")
      PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PB0NM001.PB0NMTM1 cursor, bold; /* Highlight*/
    end
    PB0NW00.PB0NWRYY = PB0NM001.PB0NMTYR; /* Redefine year*/
    if (PB0NW00.PB0NWRY1 < "0" /* IF To year not numeric*/
     || PB0NW00.PB0NWRY1 > "9" 
     || PB0NW00.PB0NWRY2 < "0" 
     || PB0NW00.PB0NWRY2 > "9")
      PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid year*/
      set PB0NM001.PB0NMTYR cursor, bold; /* Highlight*/
    end
  end
  if (PB0NW00.XXXPRCNM != "PB0N152") /* If no errors found*/
    /* ------------------- y2k in --------------------*/
    PB0NW00.PB0NW-TO-YY = PB0NM001.PB0NMTYR;
    if (PB0NW00.PB0NW-TO-YY > 60) /* Century windowing*/
      PB0NW00.PB0NW-TO-CC = 19;
    else
      PB0NW00.PB0NW-TO-CC = 20;
    end
    PB0NW00.PB0NW-FROM-YY = PB0NM001.PB0NMFYR;
    if (PB0NW00.PB0NW-FROM-YY > 60) /* Century windowing*/
      PB0NW00.PB0NW-FROM-CC = 19;
    else
      PB0NW00.PB0NW-FROM-CC = 20;
    end
    /* ------------------- y2k in --------------------*/
    /* ------------------- y2k out -------------------*/
    /* IF PB0NM001.PB0NMTYR LT PB0NM001.PB0NMFYR;/* If From yr > To yr*/
    /* ------------------- y2k out -------------------*/
    /* ------------------- y2k in --------------------*/
    if (PB0NW00.PB0NW-TO-CCYY < PB0NW00.PB0NW-FROM-CCYY)
    /* ------------------- y2k in --------------------*/
      PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
      converseLib.validationFailed(136); /* From cannot be > To*/
      set PB0NM001.PB0NMFYR cursor, bold; /* Highlight*/
      set PB0NM001.PB0NMFM1 bold; /* Highlight*/
      set PB0NM001.PB0NMFM2 bold; /* Highlight*/
      set PB0NM001.PB0NMTYR bold; /* Highlight*/
      set PB0NM001.PB0NMTM1 bold; /* Highlight*/
      set PB0NM001.PB0NMTM2 bold; /* Highlight*/
    else
      /* ------------------- y2k out -------------------*/
                                  /* IF PB0NM001.PB0NMTYR EQ*/
                                   /* PB0NM001.PB0NMFYR;/* If From year =*/
                                   /* To year*/
      /* ------------------- y2k out -------------------*/
      /* ------------------- y2k in --------------------*/
      if (PB0NW00.PB0NW-TO-CCYY == PB0NW00.PB0NW-FROM-CCYY)
      /* ------------------- y2k in --------------------*/
        if (PB0NM001.PB0NMFM1 > PB0NM001.PB0NMTM1) /* If From buy > To buy*/
          PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
          converseLib.validationFailed(136); /* From date cannot be > To date*/
          set PB0NM001.PB0NMFYR cursor, bold; /* Highlight*/
          set PB0NM001.PB0NMFM1 bold; /* Highlight*/
          set PB0NM001.PB0NMFM2 bold; /* Highlight*/
          set PB0NM001.PB0NMTYR bold; /* Highlight*/
          set PB0NM001.PB0NMTM1 bold; /* Highlight*/
          set PB0NM001.PB0NMTM2 bold; /* Highlight*/
        else
          if (PB0NM001.PB0NMFM1 == PB0NM001.PB0NMTM1
           /* If To buy = From buy*/
           && PB0NM001.PB0NMFM2 > PB0NM001.PB0NMTM2)
                                   /* & To dlv > Fr dlv*/
            PB0NW00.XXXPRCNM = "PB0N152"; /* Module identification*/
            converseLib.validationFailed(136); /* From cannot be > To*/
            set PB0NM001.PB0NMFYR cursor, bold; /* Highlight*/
            set PB0NM001.PB0NMFM1 bold; /* Highlight*/
            set PB0NM001.PB0NMFM2 bold; /* Highlight*/
            set PB0NM001.PB0NMTYR bold; /* Highlight*/
            set PB0NM001.PB0NMTM1 bold; /* Highlight*/
            set PB0NM001.PB0NMTM2 bold; /* Highlight*/
          end
        end
      end
    end
  end
  if (PB0NW00.XXXPRCNM != "PB0N152") /* If no errors found*/
    if (PB0NW00.PB0NWRYY < "80") /* If the year is < 20*/
      PB0NW00.PB0NWRCC = 20; /* its the 21st century*/
    else
      PB0NW00.PB0NWRCC = 19; /* its the 20th century*/
    end
    PB0NW00.PB0NWRM1 = PB0NM001.PB0NMTM1; /* To PO ID buy month*/
    PB0NW00.PB0NWRM2 = PB0NM001.PB0NMTM2; /* To PO ID delivery month*/
    PB0NW01.PB0NWTDT = PB0NW00.PB0NWRDT; /* To PO ID date*/
    PB0NW01.PCYTODT = PB0NW00.PB0NWRDT; /* To PO ID date*/
  end
   /* ********************** End of PB0N152 ***********************/
end // end PB0N152

// Verify factory
Function PB0N153()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PCWREC.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PB0NM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0NW01.FY1FCTYC = PB0NM001.FY1FCTYC; /* ===> factory code*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the factory code invalid*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0NM001.FY1FCTYC cursor, bold;
      PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/

      PB0NW00.XXXPRCNM = "PB0N153"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0NW00.XXXPRCNM = "PB0N153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0N153 ***********************/
end // end PB0N153

// Verify Country code
Function PB0N154()

    /* ------------------------------------------------------------*/
     /* Determine if country in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PB0NM001.XCTCD in XCTTBL.XCTCD /* Country in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    PB0NW01.XCTCD = PB0NM001.XCTCD;

  else

    if (PB0NM001.XCTCD != " ") /* If country entered*/
      PB0NW00.XXXPRCNM = "PB0N150"; /* Module identification*/
      set PB0NM001.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(49); /* Country invalid*/
    else
      PB0NW01.XCTCD = " ";
    end
  end

   /* ********************** End of PB0N154 ***********************/
end // end PB0N154

// Verify Destination code
Function PB0N155()
   /* ------------------------------------------------------------*/
   /* Determine if the destination code is valid.*/
   /* ------------------------------------------------------------*/

  if (PB0NM001.PB0NMDST == "ALL"
   || PB0NM001.PB0NMDST == "US"
   || PB0NM001.PB0NMDST == "EX"
   || PB0NM001.PB0NMDST == "BOTH"
   || PB0NM001.PB0NMDST == "SIDE1"
   || PB0NM001.PB0NMDST == "IE")
    PB0NW01.PB0NWDST = PB0NM001.PB0NMDST;

  else

    PB0NW00.XXXPRCNM = "PB0N155"; /* Module identification*/
    set PB0NM001.PB0NMDST cursor, bold; /* Highlight*/
    converseLib.validationFailed(468); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0N155 ***********************/
end // end PB0N155

// Verify Status Code
Function PB0N158()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PB0NM001.PB0NMSTA == "ALL"
   || PB0NM001.PB0NMSTA == "OPEN")
    PB0NW01.PB0NWSTA = PB0NM001.PB0NMSTA;
    return; /* next sentence*/
  else
    PB0NW00.XXXPRCNM = "PB0N158"; /* Module identification*/
    set PB0NM001.PB0NMSTA cursor, bold; /* Highlight*/
    converseLib.validationFailed(37); /* Indicate missing or invalid*/
    return;
  end

   /* **                                                        ***/
   /* ********************** End of PB0N158 ***********************/
end // end PB0N158

// Verify P.O.Type
Function PB0N159()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = "02"; /* ===> GPC*/
  PC4REC.PC4ORTYP = PB0NM001.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PB0NW01.PC4ORTYP = PB0NM001.PC4ORTYP; /* ===> p.o. type code*/
      PB0NW00.PB0NWMOD = "Y"; /* ===> modified data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PB0NM001.PC4ORTYP cursor, bold;
      PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/

      PB0NW00.XXXPRCNM = "PB0N159"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PB0NW00.XXXPRCNM = "PB0N159"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0N159 ***********************/
end // end PB0N159

// -->Process valid input request
Function PB0N160()
  if (converseVar.eventKey is enter)

    PB0NW00.PB0NWSWM = "2"; /* ==>map requested*/
    PB0NW00.PB0NWSWR = "Y"; /* ==>request for data*/
    PB0NW00.PB0NWSWF = "Y"; /* ==>format map requested*/

  end


   /* **                                                        ***/
   /* ********************** End of PB0N160 ***********************/
end // end PB0N160

// ========>Process Map 2 logic
Function PB0N200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0N210(); /* Obtain the data to display*/

  PB0N220(); /* Format and display the map*/

  PB0N230(); /* Check attention identifier*/

  PB0N240(); /* Reset fields to normal intensity*/

  PB0N250(); /* Verify the entered data*/

  PB0N260(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of PB0N200 ***********************/
end // end PB0N200

// -->Obtain the data to display
Function PB0N210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PB0NW00.PB0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PB0NW00.XXXTSLEN = 843; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PB0N211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PB0NW02.XGPCD = PB0NW01.XGPCD; /* ===> GPC code*/
  PB0NW02.PO-REG-CD = PB0NW01.PO-REG-CD; /* /===> po region*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Header Rows.*/
   /* ------------------------------------------------------------*/

  PB0NS10(); /* ===> Select set and open CURSOR*/

   /* ------------------------------------------------------------*/
   /* Fetch first row from cursor*/
   /* ------------------------------------------------------------*/

  PB0NS11(); /* ===> Fetch next hdr row*/

  if (PB0NW00.PB0NWSWC == "N") /* row returned*/
    PB0NW00.PC3POIDT = VPOHDR02.PC3POIDT; /* save po id mo rng*/
    PB0NW00.PO-REG-CD = VPOHDR02.PO-REG-CD; /* save po region*/
    PB0NW00.PC3PONBR = VPOHDR02.PC3PONBR; /* save po nbr*/
    PB0NW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* save pc po ot cd*/
    PB0NW00.FY1FCTYC = VPOHDR02.FY1FCTYC; /* save factory code*/
    PB0NW00.PB0NWIXM = 1; /* ===>initialize map index*/
  else
    PB0NW00.PB0NWIXM = 0; /* ===>initialize map index*/
  end

  set PB0NW02 empty; /* ===>reset the temp storage array*/
  PB0NW01.PB0NWPTT = 0; /* zero pair cnt page total accumulator*/
  PB0NW01.PB0NWDTT = 0; /* zero 100% $ page total accumulator*/
  PB0NW01.PB0NWNTT = 0; /* zero neg $ page total accumulator*/
  PB0NW01.PB0NWRTT = 0; /* zero reduction $ page ttl accumulator*/


   /* ------------------------------------------------------------*/
   /* MAIN PROCESS WHILE LOOP - UNTIL END OF ITEM CURSOR*/
   /* select items to process, perform calculations, format*/
   /* display lines, and add pages until end of item cursor*/
   /* ------------------------------------------------------------*/
  while (PB0NW00.PB0NWSWC == "N") /* ===> Until end of cursor*/

    /* -----------------------------------------------------------*/
       /* Process all the po items with same po id/factory*/
    /* -----------------------------------------------------------*/


    PB0N290(); /* ===> process all items*/
                                  /* ===> for current hdr*/

    PB0NW00.PC3POIDT = VPOHDR02.PC3POIDT;
    PB0NW00.FY1FCTYC = VPOHDR02.FY1FCTYC;

    PB0N216(); /* ===> format display line*/
    PB0NW00.PB0NWIXM = PB0NW00.PB0NWIXM + 1;
                                   /* increment map line index*/

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

    if (PB0NW00.PB0NWIXM > 12 /* ===> Page is full*/
     && PB0NW00.PB0NWSWC == "N") /* not end of item set*/
      PB0NW02.PB0NWPTT = PB0NW01.PB0NWPTT;
                                   /* pair cnt page total accum*/
      PB0NW02.PB0NWDTT = PB0NW01.PB0NWDTT; /* 100% $ page total accum*/
      PB0NW02.PB0NWNTT = PB0NW01.PB0NWNTT; /* neg $ page total accum*/
      PB0NW02.PB0NWRTT = PB0NW01.PB0NWRTT;
                                   /* reduction $ page ttl accum*/
      PB0N218(); /* Add page to temporary storage*/
      PB0NW00.PB0NWIXM = 1; /* set map line index to 1*/
    end

    PB0NS11(); /* Get next hdr row*/
  end /* end while hdr cursor not eof*/
   /* ------------------------------------------------------------*/
   /* If data found to display*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PB0NW00.PB0NWIXM > 0)
    PB0NW02.PB0NWPTT = PB0NW01.PB0NWPTT; /* pair cnt page total accum*/
    PB0NW02.PB0NWDTT = PB0NW01.PB0NWDTT; /* 100% $ page total accum*/
    PB0NW02.PB0NWNTT = PB0NW01.PB0NWNTT; /* neg $ page total accum*/
    PB0NW02.PB0NWRTT = PB0NW01.PB0NWRTT; /* reduction $ page ttl accum*/
    PB0N218(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0NS12(); /* Close po hdr set*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* and redisplay Map 1*/
   /* ------------------------------------------------------------*/

  if (PB0NW00.TA5TSQIX == 0) /* No pages formatted*/

    PB0NW00.PB0NWSWM = "1"; /* ======>set map switch to select map*/
    PB0NW00.PB0NWSWF = "N"; /* Request for data switch*/
    PB0NW00.XXXPRCNM = "PB0N210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PB0NM001.PB0NMFYR cursor;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PB0NW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PB0NW00.PB0NWSWR = "N"; /* Request for data switch*/


   /* **                                                        ***/
   /* ********************** End of PB0N210 ***********************/
end // end PB0N210

// purge any temporary storage
Function PB0N211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PB0NW02 empty; /* Map 2 display storage record*/

  PB0NW00.PB0NWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PB0NW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PB0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0NW00.XXXPRCNM = "PB0N211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  if (PB0NW00.PB0NWSWM == "2")
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0N211 ***********************/
end // end PB0N211

// format the display line
Function PB0N216()
   /* ------------------------------------------------------------*/
   /* CALCULATE LINE ITEM DISPLAY FIELDS*/
   /* ------------------------------------------------------------*/

  /* * calculate pair count                                            **/
  PB0NW02.PB0NWPRS[PB0NWIXM] = PB0NW01.PB0NWITL;

  /* * accum page total pair count                                     **/
  PB0NW01.PB0NWPTT = PB0NW01.PB0NWPTT + PB0NW01.PB0NWITL;
  PB0NW01.PB0NWITL = 0;

  /* * calculate 100% dollars                                          **/
  PB0NW02.PB0NWDOL[PB0NWIXM] = PB0NW01.PB0NWIND + PB0NW01.PB0NWIDD;

  /* * accum page total 100% dollars                                   **/
  PB0NW01.PB0NWDTT = PB0NW01.PB0NWDTT + PB0NW01.PB0NWIND +   PB0NW01.PB0NWIDD;
  /* * calculate negotiable dollars                                    **/
  if (PB0NM001.PB0NMDST == "US")
    PB0NW02.PB0NWNDL[PB0NWIXM] = PB0NW01.PB0NWDNG;
    PB0NW02.PB0NWPCT[PB0NWIXM] = VPOHDR02.PC3LCPCT;
  else
    if (PB0NM001.PB0NMDST == "EX")
      PB0NW02.PB0NWNDL[PB0NWIXM] = PB0NW01.PB0NNNGL;
      PB0NW02.PB0NWPCT[PB0NWIXM] = VPOHDR02.PC3LCNPC;
    else
      PB0NW02.PB0NWNDL[PB0NWIXM] = PB0NW01.PB0NWDNG + PB0NW01.PB0NNNGL;
      PB0NW02.PB0NWPCT[PB0NWIXM] = 0;
    end
  end
  /* ***/
  /* * calculate reduction dollars                                     **/
  PB0NW02.PB0NWRDL[PB0NWIXM] = PB0NW02.PB0NWDOL[PB0NWIXM] -   PB0NW02.PB0NWNDL[PB0NWIXM];
  /* ***/
  /* * accumulate page total negotiable dollars                        **/
  PB0NW01.PB0NWNTT = PB0NW01.PB0NWNTT +   PB0NW02.PB0NWNDL[PB0NWIXM];
  /* ***/
  /* * accumulate page total reduction  dollars                        **/
  PB0NW01.PB0NWRTT = PB0NW01.PB0NWRTT + PB0NW02.PB0NWRDL[PB0NWIXM];
  /* ***/
  PB0NW01.PB0NWIDD = 0;
  PB0NW01.PB0NWIND = 0;
  PB0NW01.PB0NWDNG = 0;
  PB0NW01.PB0NNNGL = 0;

   /* ------------------------------------------------------------*/
   /* format the line to be displayed into temp storage page*/
   /* ------------------------------------------------------------*/

  PB0NW02.XGPCD[PB0NWIXM] = VPOHDR02.XGPCD; /* gpc*/
  PB0NW02.PO-REG-CD[PB0NWIXM] = VPOHDR02.PO-REG-CD; /* po REGION CODE*/
  PB0NW02.PC3PONBR[PB0NWIXM] = VPOHDR02.PC3PONBR; /* po number*/
  PB0NW02.PC4ORTYP[PB0NWIXM] = VPOHDR02.PC4ORTYP; /* po type*/
  PB0NW00.TA2GRGGN = VPOHDR02.PC3POIDT;
  PB0NW00.TA2GRGG = PB0NW00.PB0NWDT;
  PB0NW02.PB0NWPYR[PB0NWIXM] = PB0NW00.PB0NMPYR; /* prod yr*/
  PB0NW02.PB0NWPMO[PB0NWIXM] = PB0NW00.PB0NMPMO; /* prod mo*/
  PB0NW02.PB0NWPDM[PB0NWIXM] = PB0NW00.PB0NMPDM; /* dlvry mo*/
  PB0NW02.PB0NWFCT[PB0NWIXM] = VPOHDR02.FY1FCTYC; /* factory*/

   /* **                                                        ***/
   /* ********************** End of PB0N216 ***********************/
end // end PB0N216

// add page to temp storage
Function PB0N218()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PB0NW02.XXXTSLEN = PB0NW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PB0NW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PB0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PB0NW02 empty; /* M002 save area*/

    PB0NW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PB0NW00.PB0NWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0NW00.XXXPRCNM = "PB0N218"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PB0N218 ***********************/
end // end PB0N218

// -->Format and converse map 2
Function PB0N220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PB0NW00.PB0NWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PB0NM002 initial;

      PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/
      /* ------------------------------------------------------------*/
       /* Format the MAP*/
      /* ------------------------------------------------------------*/


      PB0N221(); /* ===> Format the data from T.S.*/

      PB0N222(); /* ===> Format the literals*/

      PB0N223();
                                   /* ===> Format fields entered from map 1*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map*/
   /* ------------------------------------------------------------*/

  PB0N224(); /* ========> converse map*/

   /* **                                                        ***/
   /* ********************** End of PB0N220 ***********************/
end // end PB0N220

// Format the display data
Function PB0N221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PB0NW00.TA5TSQIX > 0) /* Pages were formatted*/


    if (PB0NW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PB0NW00.XXXTSPAG > PB0NW00.TA5TSQIX) /* Desired > highest*/
        PB0NW00.XXXTSPAG = PB0NW00.TA5TSQIX; /* Default to highest*/
      end

      PB0NS08(); /* Obtain temporary storage page*/

    end

  end


  PB0NW00.PB0NWIXM = 1; /* Initialize line index*/


   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PB0NW00.PB0NWIXM <= 12 /* Until screen is full*/
   && PB0NW02.XGPCD > " ") /* or end of data*/

    /* *******************************************************/
     /* format a complete line*/
    /* *******************************************************/

    if (PB0NW02.PC3PONBR[PB0NWIXM] > 0)
      PB0NM002.PB0NMPYR[PB0NWIXM] = PB0NW02.PB0NWPYR[PB0NWIXM];
      PB0NM002.PB0NMPMO[PB0NWIXM] = PB0NW02.PB0NWPMO[PB0NWIXM];
      PB0NM002.PB0NMPDM[PB0NWIXM] = PB0NW02.PB0NWPDM[PB0NWIXM];
      PB0NM002.PB0NMFCT[PB0NWIXM] = PB0NW02.PB0NWFCT[PB0NWIXM];
      PB0NM002.PB0NMPRS[PB0NWIXM] = PB0NW02.PB0NWPRS[PB0NWIXM];
      PB0NM002.PB0NMDOL[PB0NWIXM] = PB0NW02.PB0NWDOL[PB0NWIXM];
      PB0NM002.PB0NMNDL[PB0NWIXM] = PB0NW02.PB0NWNDL[PB0NWIXM];
      PB0NM002.PB0NMRDL[PB0NWIXM] = PB0NW02.PB0NWRDL[PB0NWIXM];
      if (PB0NM001.PB0NMDST == "US"
       || PB0NM001.PB0NMDST == "EX")
        PB0NM002.PB0NMPCT[PB0NWIXM] = PB0NW02.PB0NWPCT[PB0NWIXM] * 100;
      else
        set PB0NM002.PB0NMPCT[PB0NWIXM] protect, invisible;
      end
    end
    PB0NW00.PB0NWIXM = PB0NW00.PB0NWIXM + 1; /* ===>Increment line index*/
  end /* end while - screen index le 12*/

  PB0NM002.PB0NMPTT = PB0NW02.PB0NWPTT;
  PB0NM002.PB0NMDTT = PB0NW02.PB0NWDTT;
  PB0NM002.PB0NMNTT = PB0NW02.PB0NWNTT;
  PB0NM002.PB0NMRTT = PB0NW02.PB0NWRTT;
   /* **                                                        ***/
   /* ********************** End of PB0N221 ***********************/
end // end PB0N221

// Format the display literals
Function PB0N222()
   /* ------------------------------------------------------------*/
   /* Display the page information on both of the screens*/
   /* ------------------------------------------------------------*/

  set PB0NM002.XXXLITPG skip; /* "PAGE" literal*/
  set PB0NM002.XXXTSPAG skip; /* "Current PAGE" value*/
  set PB0NM002.XXXLITOF skip; /* "OF" literal*/
  set PB0NM002.TA5TSQIX skip; /* "Highest PAGE" value*/
  PB0NM002.XXXTSPAG = PB0NW00.XXXTSPAG; /* Current page*/
  PB0NM002.TA5TSQIX = PB0NW00.TA5TSQIX; /* Highest page*/


   /* ------------------------------------------------------------*/
   /* set negotiable % column heading dark if requested data*/
   /* includes more than a single division.*/
   /* ------------------------------------------------------------*/

  if (PB0NM001.PB0NMDST == "BOTH"
   || PB0NM001.PB0NMDST == "SIDE1"
   || PB0NM001.PB0NMDST == "IE"
   || PB0NM001.PB0NMDST == "ALL")
    set PB0NM002.PB0NMNLT protect, invisible;
  end

   /* ------------------------------------------------------------*/
   /* If displaying last page in set, undarken totals line*/
   /* and totals fields*/
   /* ------------------------------------------------------------*/
  if (PB0NW00.XXXTSPAG != PB0NW00.TA5TSQIX) /* last page*/
    set PB0NM002.PB0NMULT protect, invisible;
    set PB0NM002.PB0NMTLT protect, invisible;
    set PB0NM002.PB0NMPTT protect, invisible;
    set PB0NM002.PB0NMDTT protect, invisible;
    set PB0NM002.PB0NMNTT protect, invisible;
    set PB0NM002.PB0NMRTT protect, invisible;
  end

   /* **                                                        ***/
   /* ********************** End of PB0N222 ***********************/
end // end PB0N222

// format the map header data
Function PB0N223()
  PB0NM002.PB0NMFYR = PB0NM001.PB0NMFYR;
  PB0NM002.PB0NMFM1 = PB0NM001.PB0NMFM1;
  PB0NM002.PB0NMFM2 = PB0NM001.PB0NMFM2;
  PB0NM002.PB0NMDST = PB0NW01.PB0NWDST;
  set PB0NM002.PB0NMFYR skip, bold;
  set PB0NM002.PB0NMFM1 skip, bold;
  set PB0NM002.PB0NMFM2 skip, bold;
  set PB0NM002.PB0NMDST skip, bold;

   /* ------------------------------------------------------------*/
   /* If TO PO ID entered, move to map header display*/
   /* ------------------------------------------------------------*/

  if (PB0NM001.PB0NMTYR > " ")

    PB0NM002.PB0NMTYR = PB0NW01.PB0NMTYR;
    set PB0NM002.PB0NMTYR skip, bold;
    PB0NM002.PB0NMTM1 = PB0NW01.PB0NMTM1;
    set PB0NM002.PB0NMTM1 skip, bold;
    PB0NM002.PB0NMTM2 = PB0NW01.PB0NMTM2;
    set PB0NM002.PB0NMTM2 skip, bold;
  else
    set PB0NM002.PB0NMTYR skip, invisible;
    set PB0NM002.PB0NMTM1 skip, invisible;
    set PB0NM002.PB0NMTM2 skip, invisible;

  end

   /* ------------------------------------------------------------*/
   /* If Factory , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0NM001.FY1FCTYC > " ")

    PB0NM002.FY1FCTYC = PB0NW01.FY1FCTYC;
    set PB0NM002.FY1FCTYC skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If ctry, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.XCTCD > " ")

    PB0NM002.XCTCD = PB0NW01.XCTCD;
    set PB0NM002.XCTCD skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Order type , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PC4ORTYP > " ")

    PB0NM002.PC4ORTYP = PB0NW01.PC4ORTYP;
    set PB0NM002.PC4ORTYP skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Status, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PB0NWSTA > " ")
    PB0NM002.PB0NMSTA = PB0NW01.PB0NWSTA;
    set PB0NM002.PB0NMSTA skip, bold;
  end

   /* **                                                        ***/
   /* ********************** End of PB0N223 ***********************/
end // end PB0N223

// converse List Screen
Function PB0N224()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PB0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PB0NM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PB0NM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PB0NM002.XXXPRCNM = PB0NW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PB0NM002 alarm; /* Indicate sound alarm*/

  end

  converse PB0NM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PB0NW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PB0NM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PB0NM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PB0N224 ***********************/
end // end PB0N224

// -->Check attention identifier
Function PB0N230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PB0NW00.PB0NWSWR == "Y") /* Request for data*/
      set PB0NW02 empty; /* Map  display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/
    PB0NW00.PB0NWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PB0NM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PB0N211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PB0NM001 initial;
      set PB0NM001.CATOAP cursor, bold; /* Highlight*/
      PB0NW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PB0NW00.XXXPRCNM = "PB0N230"; /* Module identification*/

      PB0NW00.PB0NWSWM = "1"; /* request for map switch*/
      PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/
      PB0NW00.PB0NWSWR = "N"; /* Request for data switch*/

    else

      PB0NW00.XXXPRCNM = "PB0N230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0NM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    PB0N211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PB0NM001 initial;
    set PB0NM001.CATOAP cursor, bold; /* Highlight*/
    PB0NW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PB0NW00.XXXPRCNM = "PB0N230"; /* Module identification*/

    PB0NW00.PB0NWSWM = "1"; /* request for map switch*/
    PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/
    PB0NW00.PB0NWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PB0NW00.PB0NWSWM = "1"; /* ===> Set request for Sel map*/
    set PB0NM001.PB0NMFYR cursor;
    PB0NM001.XXXPRCNM = "PB0N"; /* ===> Reset field*/
    PB0NW00.PB0NWSWF = "N"; /* Format the map switch*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3  was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4  was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf21) /* and PF21 was not pressed*/

    PB0NW00.XXXPRCNM = "PB0N230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end



   /* **                                                        ***/
   /* ********************** End of PB0N230 ***********************/
end // end PB0N230

// -->Reset highlighted fields
Function PB0N240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0NM002.CATOAP initialAttributes; /* TO application*/
  set PB0NM002.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End Of PB0N240 ***********************/
end // end PB0N240

// -->Verify the entered data
Function PB0N250()

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PB0N251(); /* Verify scroll*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PB0NM002.CAITEM > " ") /* Application data was entered*/

    PB0NW00.XXXPRCNM = "PB0N250"; /* Module identification*/
    set PB0NM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PB0N250 ***********************/
end // end PB0N250

// Verify scroll request
Function PB0N251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PB0NW00.XXXTSPAG < 2)       /* and no previous pages*/


    PB0NW00.XXXPRCNM = "PB0N251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PB0NW00.XXXTSPAG >= PB0NW00.TA5TSQIX) /* and no more pages*/


    converseLib.clearScreen();
    
    PB0NW00.XXXPRCNM = "PB0N251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* **                                                        ***/
   /* ********************** End Of PB0N251 ***********************/
end // end PB0N251

// -->Process valid input request
Function PB0N260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PB0NW00.PB0NWSWF = "Y"; /* Format the map switch*/
    set PB0NM002 initial;
    PB0NW00.XXXTSPAG = PB0NW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PB0NW00.PB0NWSWF = "Y"; /* Format the map switch*/
    set PB0NM002 initial;
    PB0NW00.XXXTSPAG = PB0NW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* **                                                        ***/
   /* ********************** End of PB0N260 ***********************/
end // end PB0N260

// call PC4310
Function PB0N290()
   /* ********************** PB0N290 ******************************/

   /* ------------------------------------------------------------*/
   /* set up required fields for iomod*/
   /* ------------------------------------------------------------*/

  PB0NW04.XGPCD = "02";
  PB0NW04.PC3POIDT = VPOHDR02.PC3POIDT;

   /* ------------------------------------------------------------*/
   /* factory*/
   /* ------------------------------------------------------------*/

  PB0NW04.FY1FCTYC = VPOHDR02.FY1FCTYC;

   /* ------------------------------------------------------------*/
   /* country*/
   /* ------------------------------------------------------------*/

  PB0NW04.XCTCD = VPOHDR02.XCTCD;

   /* ------------------------------------------------------------*/
   /* status*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PB0NWSTA == "OPEN")
    PB0NW04.PB0NWSTA = "OPEN";
  else
    PB0NW04.PB0NWSTA = "*";
  end

   /* ------------------------------------------------------------*/
   /* po type*/
   /* ------------------------------------------------------------*/

  PB0NW04.PC4ORTYP = VPOHDR02.PC4ORTYP;

   /* ------------------------------------------------------------*/
   /* destination*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PB0NWDST == "ALL")
    PB0NW04.PB0NWDST = "ALL";
  else
    if (PB0NW01.PB0NWDST == "US")
      PB0NW04.PB0NWDST = "US";
    else
      if (PB0NW01.PB0NWDST == "EX")
        PB0NW04.PB0NWDST = "EX";
      else
        if (PB0NW01.PB0NWDST == "BOTH")
          PB0NW04.PB0NWDST = "BOTH";
        else
          if (PB0NW01.PB0NWDST == "SIDE1")
            PB0NW04.PB0NWDST = "SIDE1";
            PB0NW04.PC4ORTYP = "S1";
          else
            if (PB0NW01.PB0NWDST == "IE")
              PB0NW04.PB0NWDST = "IE";
              PB0NW04.PC4ORTYP = "S1";
            end
          end
        end
      end
    end
  end

    /* -----------------------------------------------------------*/
    /* get all quantities for all po items that match the inquiry*/
    /* select parameters, for the current po hdr*/
    /* -----------------------------------------------------------*/


  PB0NS13(); /* calls PC4310 io mod*/

  PB0NW01.PB0NWITL = PB0NW04.PB0NQTOT;
  PB0NW01.PB0NWIDD = PB0NW04.PB0NWIDD;
  PB0NW01.PB0NWIND = PB0NW04.PB0NWIND;
  PB0NW01.PB0NWDNG = PB0NW04.PB0NWDNG;
  PB0NW01.PB0NNNGL = PB0NW04.PB0NNNGL;
   /* **                                                        ***/
   /* ********************** End of PB0N290 ***********************/
end // end PB0N290

// Read temporary storage page
Function PB0NS08()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PB0NW02.XXXTSLEN = PB0NW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PB0NW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PB0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PB0NW00.XXXPRCNM = "PB0NS08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of PB0NS08 ***********************/
end // end PB0NS08

// Open PO Hdr Cursor
Function PB0NS10()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PB0NW00.PB0NWIXM = 1; /* Display line index*/
  PB0NW00.PB0NWSWC = "N"; /* End of cursor switch*/


  set VPOHDR02 empty; /* ===>initialize record before loading*/
  set PCYREC empty; /* ===>initialize record before loading*/


   /* ------------------------------------------------------------*/
   /* set up required fields for iomod*/
   /* ------------------------------------------------------------*/

  VPOHDR02.XGPCD = "02"; /* gpc*/
  VPOHDR02.PO-REG-CD = PB0NW01.PO-REG-CD; /* po region*/


   /* ------------------------------------------------------------*/
   /* PO ID*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFRDT = PB0NW01.PCYFRDT;
  PCYREC.PCYTODT = PB0NW01.PCYTODT;

   /* ------------------------------------------------------------*/
   /* If factory entered,*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.FY1FCTYC > " ")
    VPOHDR02.FY1FCTYC = PB0NM001.FY1FCTYC;
  else
    VPOHDR02.FY1FCTYC = "*";
  end

   /* ------------------------------------------------------------*/
   /* country*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.XCTCD != " ")
    VPOHDR02.XCTCD = PB0NW01.XCTCD;
  else
    VPOHDR02.XCTCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* status*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PB0NWSTA == "OPEN")
    VPOHDR02.YPUCD = "OP";
  else
    VPOHDR02.YPUCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If po type entered,*/
   /* ------------------------------------------------------------*/

  if (PB0NW01.PC4ORTYP > " ")
    VPOHDR02.PC4ORTYP = PB0NW01.PC4ORTYP;
  else
    VPOHDR02.PC4ORTYP = "*";
  end


   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S4";


  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0NW00.XXXPRCNM = "PB0NS10"; /* Module identification*/
  PB0NW00.PB0NWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0NW00.PB0NWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0NS10 ***********************/
end // end PB0NS10

// Get Next PO Hdr row
Function PB0NS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N4";

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0NW00.PB0NWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0NW00.XXXPRCNM = "PB0NS11"; /* Module identification*/
  PB0NW00.PB0NWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0NW00.PB0NWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0NS11 ***********************/
end // end PB0NS11

// Close PO Hdr cursor
Function PB0NS12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  set VPOHDR02 empty;

  PCYREC.PCYFUNC = "C4";

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0NW00.XXXPRCNM = "PB0NS12"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PB0NS12 ***********************/
end // end PB0NS12

// Calls PC4310 - get item sums
Function PB0NS13()
   /* ********************** PB0NS13 ******************************/
    /* -----------------------------------------------------------*/
    /* accum quantities and dollars for current po header*/
    /* -----------------------------------------------------------*/

  try
    call "PC4310" (PB0NW04, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0NW00.XXXPRCNM = "PB0NS13"; /* Module identification*/
  PB0NW00.PB0NWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PB0NW00.PB0NWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC4310 SUBRTINE CALL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PB0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "UNKNOWN "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "UNKNOWN "; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PB0NW04.PB0NRTCD; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
   /* **                                                        ***/
   /* ********************** End of PB0NS13 ***********************/
end // end PB0NS13

//*** RECORD=PB0NW00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -W.S. date fields
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PB0NW00 type basicRecord
  10 PB0NWSWR PB0NWSWR ; 
  10 PB0NWSWM PB0NWSWM ; 
  10 PB0NWSWF PB0NWSWF ; 
  10 PB0NWSWC PB0NWSWC ; 
  10 PB0NWSWU PB0NWSWU ; 
  10 PB0NWXIT PB0NWXIT ; 
  10 PB0NWMOD PB0NWMOD ; 
  10 PB0NWMLT PB0NWMLT ; 
  10 * char(1) ; 
  10 PB0NWIXR PB0NWIXR ; 
  10 PB0NWIXM PB0NWIXM ; 
  10 PB0NWIXT PB0NWIXT ; 
  10 PB0NWIXS PB0NWIXS ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PB0NWSTY PB0NWSTY ; 
  10 * char(1) ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XUMCD XUMCD ; 
  10 XPGCD XPGCD ; 
  10 * char(1) ; 
  10 PB0NWDT PB0NWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
    15 PB0NMPCC PB0NMPCC ; 
    15 PB0NMPYR PB0NMPYR ; 
    15 PB0NMPMO PB0NMPMO ; 
    15 PB0NMPDM PB0NMPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PB0NWMM PB0NWMM ; 
    15 PB0NWDD PB0NWDD ; 
    15 PB0NWCC PB0NWCC ; 
    15 PB0NWYY PB0NWYY ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PB0NWSUM PB0NWSUM ; 
  10 XWHPAD XWHPAD ; 
  10 PB0NWWK1 PB0NWWK1 ; 
    15 PB0NWWK2 PB0NWWK2 ; 
    15 PB0NWWK3 PB0NWWK3 ; 
  10 PB0NWWKN PB0NWWKN ; 
    15 * char(3) ; 
    15 PB0NWWKA PB0NWWKA ; 
  10 PB0NWRDT PB0NWRDT ; 
    15 PB0NWRYR PB0NWRYR ; 
      20 PB0NWRCC PB0NWRCC ; 
      20 PB0NWRYY PB0NWRYY ; 
        25 PB0NWRY1 PB0NWRY1 ; 
        25 PB0NWRY2 PB0NWRY2 ; 
    15 PB0NWRM1 PB0NWRM1 ; 
    15 PB0NWRM2 PB0NWRM2 ; 
  10 PB0NWRNM PB0NWRNM ; 
    15 PB0NWNUM PB0NWNUM ; 
      20 PB0NWNM1 PB0NWNM1 ; 
      20 PB0NWNM2 PB0NWNM2 ; 
  10 PB0NWDCF PB0NWDCF ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PB0NWKA1 PB0NWKA1 ; 
    15 PB0NWKN2 PB0NWKN2 ; 
    15 * char(21) ; 
  10 PB0NWCOR PB0NWCOR ; 
  10 PB0NWNOR PB0NWNOR ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PB0NW-TO-CCYY PB0NW-TO-CCYY ; 
    15 PB0NW-TO-CC PB0NW-TO-CC ; 
    15 PB0NW-TO-YY PB0NW-TO-YY ; 
  10 PB0NW-FROM-CCYY PB0NW-FROM-CCYY ; 
    15 PB0NW-FROM-CC PB0NW-FROM-CC ; 
    15 PB0NW-FROM-YY PB0NW-FROM-YY ; 
end // end PB0NW00

//*** RECORD=PB0NW01 ****
// ***** PRODUCTION ORDER PO ID SELECTION MAP RECORD **********
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PB0NM.PB0NM001
// 
//    RECORD NAME:      PB0NW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list map.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list map PB0NM001.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER PO ID SELECTION MAP RECORD **********
// ***********************
Record PB0NW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3POIDT PC3POIDT ; 
  10 TA2GRGE TA2GRGE ; 
    15 PB0NMPYR PB0NMPYR ; 
    15 PB0NMPMO PB0NMPMO ; 
    15 PB0NMPDM PB0NMPDM ; 
  10 PCFSECD PCFSECD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 XCTCD XCTCD ; 
  10 PB0NWSTA PB0NWSTA ; 
  10 PB0NWDST PB0NWDST ; 
  10 PB0NWTDT PB0NWTDT ; 
    15 PB0NMTYR PB0NMTYR ; 
    15 PB0NMTM1 PB0NMTM1 ; 
    15 PB0NMTM2 PB0NMTM2 ; 
  10 PB0NWFDT PB0NWFDT ; 
    15 PB0NMFYR PB0NMFYR ; 
    15 PB0NMFM1 PB0NMFM1 ; 
    15 PB0NMFM2 PB0NMFM2 ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 YSMXDV YSMXDV ; 
  10 PC2INSEG PC2INSEG ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 XUMCD XUMCD ; 
  10 PCYFRDT PCYFRDT ; 
  10 PCYTODT PCYTODT ; 
  10 PB0NWPDX PB0NWPDX ; 
  10 PB0NWPCX PB0NWPCX ; 
  10 PB0NWSDX PB0NWSDX ; 
  10 PB0NWCDX PB0NWCDX ; 
  10 PB0NWMDX PB0NWMDX ; 
  10 PB0NWTDX PB0NWTDX ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 PB0NWFOB PB0NWFOB ; 
  10 PB0NWPRE PB0NWPRE ; 
  10 PB0NWQT PB0NWQT ; 
  10 PB0NWQTY PB0NWQTY ; 
  10 PB0NWAMW PB0NWAMW ; 
  10 PB0NWAMT PB0NWAMT ; 
  10 PB0NWITL PB0NWITL ; 
  10 PB0NWIND PB0NWIND ; 
  10 PB0NWIDD PB0NWIDD ; 
  10 PB0NWSTL PB0NWSTL ; 
  10 PB0NWSND PB0NWSND ; 
  10 PB0NWSDD PB0NWSDD ; 
  10 PB0NWST1 PB0NWST1 ; 
  10 PB0NWST2 PB0NWST2 ; 
  10 PB0NWDDL PB0NWDDL ; 
  10 PB0NWNDL PB0NWNDL ; 
  10 PB0NWDNG PB0NWDNG ; 
  10 PB0NNNGL PB0NNNGL ; 
  10 PB0NWPFL PB0NWPFL ; 
  10 PB0NWPCL PB0NWPCL ; 
  10 PB0NWPSZ PB0NWPSZ ; 
  10 PB0NWVRD PB0NWVRD [40] ; 
  10 PB0NWVRF PB0NWVRF [40] ; 
  10 PB0NWVRQ PB0NWVRQ [40] ; 
  10 PB0NMESZ PB0NMESZ [40] ; 
  10 PB0NMBSZ PB0NMBSZ [40] ; 
  10 PB0NWDTT PB0NWDTT ; 
  10 PB0NWPTT PB0NWPTT ; 
  10 PB0NWNTT PB0NWNTT ; 
  10 PB0NWRTT PB0NWRTT ; 
end // end PB0NW01

//*** RECORD=PB0NW02 ****
// ************** PRODUCTION ORDER ITEM RECORD ****************
// **                  Display Record                        **
// **                                                        **
// 
//    RECORD NAME:      PB0NW02
// 
//    MAP   NAMES:      PB0NM002
// 
//       This record is a working storage record used to
//    hold data that is pertinent to map PB0NM002.
//       It holds information  that relates to a L/C Item.
//    It is used to load temp storage and the list map.
// 
// **                                                        **
// **                                                        **
// ************** PRODUCTION ORDER ITEM RECORD ****************
// ***********************
Record PB0NW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PB0NWRC2 PB0NWRC2 ; 
    10 PB0NWLIN PB0NWLIN [12] ; 
      15 PB0NWPOI PB0NWPOI ; 
        20 PB0NWPYR PB0NWPYR ; 
        20 PB0NWPMO PB0NWPMO ; 
        20 PB0NWPDM PB0NWPDM ; 
        20 PB0NWFCT PB0NWFCT ; 
      15 PB0NWPRS PB0NWPRS ; 
      15 PB0NWDOL PB0NWDOL ; 
      15 PB0NWPCT PB0NWPCT ; 
      15 PB0NWNDL PB0NWNDL ; 
      15 PB0NWRDL PB0NWRDL ; 
      15 * char(1) ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PB0NWSTA PB0NWSTA ; 
      15 PB0NWDST PB0NWDST ; 
    10 PB0NWPTT PB0NWPTT ; 
    10 PB0NWDTT PB0NWDTT ; 
    10 PB0NWNTT PB0NWNTT ; 
    10 PB0NWRTT PB0NWRTT ; 
end // end PB0NW02

//*** RECORD=PB0NW04 ****
// **************** PRODUCTION ORDER LINK  RECORD *************
// 
// ** LINKAGE RECORD FOR PC4310 CALL                         **
// 
//    RECORD NAME:  PB0NW04
// 
//       This record is a working storage record to send and
//    and receive information from an IOMOD call.
//    The call is to a specialized IOMOD, designed to accum
//    totals at the PO Item level.
// 
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER LINK  RECORD *************
// ***********************
Record PB0NW04 type basicRecord
  10 XGPCD XGPCD ; 
  10 PC3POIDT PC3POIDT ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 XCTCD XCTCD ; 
  10 PB0NWSTA PB0NWSTA ; 
  10 PB0NWDST PB0NWDST ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 PB0NRTCD PB0NRTCD ; 
  10 PB0NQTOT PB0NQTOT ; 
  10 PB0NWIDD PB0NWIDD ; 
  10 PB0NWIND PB0NWIND ; 
  10 PB0NWDNG PB0NWDNG ; 
  10 PB0NNNGL PB0NNNGL ; 
  10 * char(38) ; // filler
end // end PB0NW04

//*** RECORD=PB0NW06 ****
// ******* PRODUCTION ORDER LIST SCREEN DETAIL FIELD    *******
// 
//    Record Name:      PC0SW06
// 
//    This record formats the portion of the list screen
// line that has to be a group field.  it has to be a group
// field because there is another format to this line that
// is also found in the record.
// 
// ******* PRODUCTION ORDER LIST SCREEN DETAIL FIELD    *******
// ***********************
Record PB0NW06 type basicRecord
  5 PB0NWGRP PB0NWGRP ; 
    10 PC6STAT PC6STAT ; 
    10 * char(1) ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(1) ; 
    10 XWHCD XWHCD ; 
    10 * char(1) ; 
    10 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 PB0NWPLN PB0NWPLN ; 
    10 * char(1) ; 
    10 YMTCD YMTCD ; 
    10 * char(1) ; 
    10 PB0NMEST PB0NMEST ; 
    10 * char(1) ; 
    10 PB0NMETL PB0NMETL ; 
    10 * char(1) ; 
    10 PB0NMEDT PB0NMEDT ; 
  5 PB0NWGR2 PB0NWGR2 ; 
    10 PB0NWLIT PB0NWLIT ; 
    10 PB0NWNBR PB0NWNBR ; 
    10 * char(1) ; 
    10 PB0NWDIM PB0NWDIM ; 
    10 XDMCD XDMCD ; 
    10 * char(1) ; 
    10 PB0NWOWG PB0NWOWG ; 
    10 XOWCD XOWCD ; 
    10 * char(1) ; 
    10 PB0NWPKG PB0NWPKG ; 
    10 XPGCD XPGCD ; 
    10 * char(1) ; 
    10 PB0NWSOL PB0NWSOL ; 
    10 PB0NWSOF PB0NWSOF ; 
      15 PB0NWORD PB0NWORD ; 
      15 PB0NWDOT PB0NWDOT ; 
      15 PB0NWNRD PB0NWNRD ; 
end // end PB0NW06

DataItem PB0NMBSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// etal override date display
DataItem PB0NMEDT char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date display
DataItem PB0NMEST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NMESZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// etal date display
DataItem PB0NMETL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NMFM1 char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NMFM2 char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NMFYR char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// P.O. ID Production century
DataItem PB0NMPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PB0NMPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem PB0NMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production year
DataItem PB0NMPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NMTM1 char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NMTM2 char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NMTYR char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// nil negotiable dollars
DataItem PB0NNNGL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pair count
DataItem PB0NQTOT decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC4310 return code
DataItem PB0NRTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NW-FROM-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NW-FROM-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NW-FROM-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NW-TO-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NW-TO-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NW-TO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// accum color amt
DataItem PB0NWAMT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size amt
DataItem PB0NWAMW decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ETS date century
DataItem PB0NWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem PB0NWCDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer order number
DataItem PB0NWCOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor flag
DataItem PB0NWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date day map display
DataItem PB0NWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DOM dollars
DataItem PB0NWDDL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dimension literal
DataItem PB0NWDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dom negotiable dollars
DataItem PB0NWDNG decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 100% dollars
DataItem PB0NWDOL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// '.' literal
DataItem PB0NWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination
DataItem PB0NWDST char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHAR data form
DataItem PB0NWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 100% $ page ttl accum
DataItem PB0NWDTT decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FY_FCTY_CD
DataItem PB0NWFCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fob price
DataItem PB0NWFOB decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// list screen line 2 format
DataItem PB0NWGR2 char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// list screen line 1 format
DataItem PB0NWGRP char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item DOM 100% $ ttl
DataItem PB0NWIDD decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item NIL 100% $ ttl
DataItem PB0NWIND decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item cmbd 100% $ ttl
DataItem PB0NWITL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PB0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PB0NWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PB0NWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp array (break)
DataItem PB0NWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key char
DataItem PB0NWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key num
DataItem PB0NWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level array
DataItem PB0NWLIN char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank po or stk xfer literal
DataItem PB0NWLIT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem PB0NWMDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple styles flag
DataItem PB0NWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PB0NWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PB0NWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank po or stk xfer number
DataItem PB0NWNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL dollars
DataItem PB0NWNDL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Char 1 to test for numeric
DataItem PB0NWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Char 2 to test for numeric
DataItem PB0NWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike order number
DataItem PB0NWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Niike Order nbr
DataItem PB0NWNRD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// neg $ page ttl accum
DataItem PB0NWNTT decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales Order nbr
DataItem PB0NWORD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group literal
DataItem PB0NWOWG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem PB0NWPCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// negotiable %
DataItem PB0NWPCT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prc/sz index
DataItem PB0NWPCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PB0NWPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// fob price index
DataItem PB0NWPDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override prc flag
DataItem PB0NWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package literal
DataItem PB0NWPKG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_PLAN_NBR
DataItem PB0NWPLN char(2)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// po id production month
DataItem PB0NWPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem PB0NWPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev price
DataItem PB0NWPRE decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pair cnt
DataItem PB0NWPRS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size
DataItem PB0NWPSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pair cnt page ttl accum
DataItem PB0NWPTT decimal(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id production year
DataItem PB0NWPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// on order qty
DataItem PB0NWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color qty
DataItem PB0NWQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level array
DataItem PB0NWRC2 char(843)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PB0NWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reduction dollars
DataItem PB0NWRDL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Redefine PO ID date
DataItem PB0NWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID buy month
DataItem PB0NWRM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PB0NWRM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NWRNM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reduction $ page ttl accum
DataItem PB0NWRTT decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year 1
DataItem PB0NWRY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year 2
DataItem PB0NWRY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century & year
DataItem PB0NWRYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year
DataItem PB0NWRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style DOM 100% $ ttl
DataItem PB0NWSDD decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem PB0NWSDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style NIL 100% $ ttl
DataItem PB0NWSND decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// package literal
DataItem PB0NWSOF char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package literal
DataItem PB0NWSOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nil negotiable dollars
DataItem PB0NWST1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dom negotiable dollars
DataItem PB0NWST2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// STATUS
DataItem PB0NWSTA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style cmbd 100% $ ttl
DataItem PB0NWSTL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved/previous style number
DataItem PB0NWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MADD + ETT (temp accumulator)
DataItem PB0NWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PB0NWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PB0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PB0NWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PB0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PB0NWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem PB0NWTDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// template override price
DataItem PB0NWVRD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// template override flag
DataItem PB0NWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// template qty
DataItem PB0NWVRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem PB0NWWK1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0NWWK2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NWWK3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PB0NWWKA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem PB0NWWKN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PB0NWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PB0NWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

