package pb0v;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pa.common.*;
import pb.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PB0V ****
// This is P.P.R. Product Maintenance Program. It allows to
// update ETS DATE, MODE TRANS and STATUS on selected P.O.'s.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/22/97   AELKIN   New application.
// 09/04/97   jniese   pca365 - change to allow concurrent
//                     status, ets, and mode updates.
// 09/22/97   jniese   pca406 - add plan and total to screen
// 09/24/97   jniese   pca999 - change map 1 to left just po
// 10/22/97   kgraha   pca999 - move po nbr field on PB0VM001.
// 10/30/97   rgilli   Y2K MODIFICATIONS MADE TO:
//                     PB0V540: Changed or condition to an
//                              and condition.
// 02/10/98   jniese   correct y2k change in pb0v540
// 04/23/00   VGOTTI   Replaced vpoitm03 view with vpoitm05.
//                     Changed apl for not to allow maintenance
//                     for POs created in SAP( for NSC work).
//                     PB0V521,PB0V522 and PB0V540 are changed.
// 10/17/00   MNADEL   CHANGED TO DISPLAY THE MAP WHICH HAS
//                     SAP NUMBER THAT IS NOT BE UPDATED.
// 11/13/00   vramac   Fix bug to update ETS & FC together -
//                     PB0V552
// 12/12/01   spitch   changed not to merge sap pos
// 06/25/02    MRAGHU changed not to look for matching items
//  for merge
//                     SAP PO's - function changed -
//  PB0VS90,PB0V551
//      VAGEN version 1.1
// *********************
Program PB0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PB0VW01 PB0VW01; // record
  PB0VW02 PB0VW02; // record
  PB0VW03 PB0VW03; // record
  PB0VW05 PB0VW05; // record
  PB0VW06 PB0VW06; // record
  PB0VW07 PB0VW07; // record
  PC8REC PC8REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSTREC TSTREC; // record
  VFCTY002 VFCTY002; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOREG01 VPOREG01; // record
  VPOSIZ02 VPOSIZ02; // record
  VPOTYP01 VPOTYP01; // record
  VPOVFY01 VPOVFY01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YMTTBL {deleteAfterUse = yes}; // table
  use YACTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PB0VM.PB0VM001,  // forms
      PB0VM.PB0VM002, 
      PB0VM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Initialize maps and working storage records.*/
     /* ------------------------------------------------------------*/

    set PB0VM001 initial;
    set PB0VM002 initial;

    set VPOITM05 empty;
    set PB0VW01 empty;
    set PB0VW02 empty;
    set TA1REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set XX0XW02 empty;

    PB0VM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " ";

     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto PB0V001;

    PB0V001: PB0V001();
     /* ------------------------------------------------------------*/
     /* Execute the main process.*/
     /* ------------------------------------------------------------*/

    goto PB0V001;

  end // end main
end // end PB0V

// Main process
Function PB0V001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PB0VW01.MAP2SW != "Y")

    PB0V100(); /* Format and display MAP 1*/

    PB0V200(); /* Check attention identifier*/

    PB0V300(); /* Reset fields to normal intensity*/

    PB0V400(); /* Verify the data that was entered*/

  else

    PB0V500(); /* MAP 2 routine*/

  end

end // end PB0V001

// Display MAP 1
Function PB0V100()
   /* ------------------------------------------------------------*/
   /* Show the map.*/
   /* Indicate sound alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message*/

    PB0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  else

    set PB0VM001 alarm; /* Indicate sound alarm*/

  end

  if (PCWREC.XXXMSGNO != 0)

    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end
                                   /* Error message passed back from*/
                                  /* called application*/
    PCWREC.XXXMSGNO = 0;

    set PB0VM001 alarm; /* Indicate sound alarm*/

  end

  converse PB0VM001 ;

end // end PB0V100

// Check attention identifier
Function PB0V200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PB0VM001 initial; /* Clear MAP 1*/

    set VPOITM05 empty; /* Clear w.s. records*/
    set PB0VW01 empty;
    set PB0VW02 empty;
    PB0VS83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PB0VM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PB0VM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0VM001.CAITEM; /* Application data*/

      PB0VS83(); /* Purge tsq*/

      XSPCS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PB0VM001.CATOAP cursor, modified, bold; /* Highlight*/

    PB0VM001.XXXPRCNM = "PB0V200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (PB0VM001.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set PB0VM001.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        PB0VM001.XXXPRCNM = "PB0V200"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0VM001"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "PB0U"; /* Transfer to P.P.R. menu*/
      end
    end

    PB0VS83(); /* Purge tsq*/

    XSPCS01(); /* Exit to another application*/

    PB0VM001.XXXPRCNM = "PB0V200"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PB0VM001.XXXPRCNM = "PB0V200"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set PB0VM001 initial; /* Clear MAP 1*/

      set VPOITM05 empty; /* Clear w.s. records*/
      set PB0VW01 empty;
      set PB0VW02 empty;
      PB0VS83(); /* Purge tsq*/

    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0V200

// Reset highlighted fields
Function PB0V300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0VM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set PB0VM001.CAITEM initialAttributes; /* FAST PATH application data*/

  set PB0VM001.PO-REG-CD initialAttributes; /* Region*/
  set PB0VM001.PONBR initialAttributes; /* PO*/
  set PB0VM001.PB0VYR initialAttributes; /* Year*/
  set PB0VM001.PB0VSESN initialAttributes; /* Season*/
  set PB0VM001.PB0VBUYMO initialAttributes; /* Buy month*/
  set PB0VM001.PB0VDELMO initialAttributes; /* Delivery month*/
  set PB0VM001.FY1FCTYC initialAttributes; /* Factory*/
  set PB0VM001.SY1STNBR initialAttributes; /* Style*/
  set PB0VM001.SY2CLRID initialAttributes; /* Color*/
  set PB0VM001.PC4ORTYP initialAttributes; /* Type*/

end // end PB0V300

// Verify data that was entered
Function PB0V400()
   /* ------------------------------------------------------------*/
   /* Verify entered values on MAP 1.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (PB0VM001 is modified) /* If MAP 1 modified*/
    PB0VW01.MODSW = "Y"; /* set up mod. switch*/
    PB0VW01.WRITE-TSQ-SW = " "; /* init. 'data written to tsq' sw.*/
  end

  if (PB0VW01.MODSW == "Y")
    PB0VW01.UPDSW = " "; /* Init. 'ready to update' switch*/

    if (PB0VM001.PO-REG-CD == "? " /* If REGION pop up window requested*/
     || PB0VM001.PO-REG-CD == " ?")

      if (PB0VW01.REG-ARRAY-SW == " ")
        PB0VS15(); /* Load region array*/
      end

      PB0V410(); /* Pop up window routine*/

      set PB0VM001.PO-REG-CD cursor;

      exit stack; /* Exit to redisplay map*/

    end

    if (PB0VM001.PO-REG-CD > " ") /* If REGION entered*/
      PB0VW01.PO-REG-CD = PB0VM001.PO-REG-CD;
      if (PB0VW01.PO-REG-CHAR1 == " ") /* Zero edit*/
        PB0VW01.PO-REG-CHAR1 = "0";
      else
        if (PB0VW01.PO-REG-CHAR2 == " ")
          PB0VW01.PO-REG-CHAR2 = PB0VW01.PO-REG-CHAR1;
          PB0VW01.PO-REG-CHAR1 = "0";
        end
      end

      PB0VM001.PO-REG-CD = PB0VW01.PO-REG-CD;

      if (PB0VM001.PO-REG-CD == PB0VW01.PB0VREG) /* If this one was*/
        if (PB0VW01.REG-ERR-SW == "Y") /* already verified and in error*/
          set PB0VM001.PO-REG-CD cursor, bold;
          converseLib.validationFailed(528); /* Indicate invalid selection*/
          PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        PB0VW01.PB0VREG = " "; /* Initialize w.s. field*/
        PB0VW01.REG-ERR-SW = " "; /* and error switch*/

        PB0VS10(); /* Verify region*/

        PB0VW01.PB0VREG = PB0VM001.PO-REG-CD; /* Save the value*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.REG-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    if (PB0VM001.FY1FCTYC > " ") /* If FACTORY entered*/
      if (PB0VM001.FY1FCTYC == PB0VW01.FY1FCTYC) /* If this one was*/
        if (PB0VW01.FCTY-ERR-SW == "Y") /* already verified and in error*/
          set PB0VM001.FY1FCTYC cursor, bold;
          converseLib.validationFailed(32); /* Indicate invalid selection*/
          PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        PB0VW01.FY1FCTYC = " "; /* Initialize w.s. field*/
        PB0VW01.FCTY-ERR-SW = " "; /* and error switch*/

        PB0VS30(); /* Verify factory*/

        PB0VW01.FY1FCTYC = PB0VM001.FY1FCTYC; /* Save the value*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.FCTY-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    if (PB0VM001.PB0VSESN > " ") /* If SEASON/YEAR entered*/
      if (PB0VM001.PB0VSESN == PB0VW01.PB0VSESN /* If this season/year*/
      )                                         /* already verified*/
        if (PB0VW01.SESN-ERR-SW == "Y") /* and in error*/

          set PB0VM001.PB0VSESN cursor, bold;
          converseLib.validationFailed(129); /* Indicate invalid selection*/
          PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end

      else
        PB0VW01.PB0VSESN = " "; /* Initialize w.s. fields*/
        PB0VW01.SESN-ERR-SW = " "; /* Initialize error switch*/

        PB0VS20(); /* Verify season/year*/

        PB0VW01.PB0VSESN = PB0VM001.PB0VSESN; /* Save the values*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.SESN-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    if (PB0VM001.PB0VYR > 0) /* If YEAR entered*/
      if (PB0VM001.PB0VYR < 1980 /* If year in error*/
       || PB0VM001.PB0VYR > 2200)

        set PB0VM001.PB0VYR cursor, bold;
        converseLib.validationFailed(477); /* Indicate invalid selection*/
        PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end

    if (PB0VM001.PB0VBUYMO > 12) /* If BUY MONTH in error*/

      set PB0VM001.PB0VBUYMO cursor, bold;
      converseLib.validationFailed(31); /* Indicate invalid selection*/
      PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

    if (PB0VM001.PONBR == 0) /* If PO NUMBER not entered,*/
      if (PB0VM001.PO-REG-CD == " " /* REGION,*/
       || PB0VM001.FY1FCTYC == " "  /* FACTORY*/
       || PB0VM001.PB0VSESN == " "  /* SEASON,*/
       || PB0VM001.PB0VYR == 0      /* YEAR,*/
       || PB0VM001.PB0VBUYMO == 0)  /* and BUY MONTH required*/

        set PB0VM001.PO-REG-CD bold; /* Highlight required fields*/
        set PB0VM001.FY1FCTYC bold;
        set PB0VM001.PB0VSESN bold;
        set PB0VM001.PB0VYR bold;
        set PB0VM001.PB0VBUYMO bold;

        if (PB0VM001.PO-REG-CD == " ") /* REGION,*/
          set PB0VM001.PO-REG-CD cursor;
        else
          if (PB0VM001.FY1FCTYC == " ") /* FACTORY*/
            set PB0VM001.FY1FCTYC cursor;
          else
            if (PB0VM001.PB0VSESN == " ") /* SEASON,*/
              set PB0VM001.PB0VSESN cursor;
            else
              if (PB0VM001.PB0VYR == 0) /* YEAR,*/
                set PB0VM001.PB0VYR cursor;
              else
                if (PB0VM001.PB0VBUYMO == 0) /* and BUY MONTH required*/
                  set PB0VM001.PB0VBUYMO cursor;
                end
              end
            end
          end
        end

        converseLib.validationFailed(529); /* Indicate invalid selection*/
        PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end

    if (PB0VM001.PB0VDELMO > 12) /* If DELIVERY MONTH in error*/

      set PB0VM001.PB0VDELMO cursor, bold;
      converseLib.validationFailed(31); /* Indicate invalid selection*/
      PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

    if (PB0VM001.SY1STNBR > " " /* If STYLE entered*/
     && PB0VM001.SY2CLRID == " ") /* and color not entered*/
      if (PB0VM001.SY1STNBR == PB0VW01.SY1STNBR) /* If this one was*/
        if (PB0VW01.STY-ERR-SW == "Y") /* already verified and in error*/
          set PB0VM001.SY1STNBR cursor, bold;
          converseLib.validationFailed(196); /* Indicate invalid selection*/
          PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        PB0VW01.SY1STNBR = " "; /* Initialize w.s. field*/
        PB0VW01.STY-ERR-SW = " "; /* and error switch*/

        PB0VS50(); /* Verify style*/

        PB0VW01.SY1STNBR = PB0VM001.SY1STNBR; /* Save the value*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.STY-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    if (PB0VM001.SY2CLRID > " ") /* If COLOR entered*/
      if (PB0VM001.SY1STNBR == " ") /* but style not entered*/
        set PB0VM001.SY2CLRID cursor, bold;
        converseLib.validationFailed(419); /* Dislay error msg*/
        PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      else /* Both style and color entered*/
        if (PB0VM001.SY1STNBR == PB0VW01.STNBR
         && PB0VM001.SY2CLRID == PB0VW01.SY2CLRID) /* If style/color*/
          if (PB0VW01.COLR-ERR-SW == "Y") /* already verified and in error*/
            set PB0VM001.SY1STNBR bold;
            set PB0VM001.SY2CLRID cursor, bold;
            converseLib.validationFailed(52); /* Indicate invalid selection*/
            PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end
        else
          PB0VW01.STNBR = " "; /* Initialize w.s. fields*/
          PB0VW01.SY2CLRID = " ";
          PB0VW01.COLR-ERR-SW = " "; /* Initialize error switch*/

          PB0VS50(); /* Verify color*/

          PB0VW01.STNBR = PB0VM001.SY1STNBR; /* Save the values*/
          PB0VW01.SY2CLRID = PB0VM001.SY2CLRID;
          if (converseVar.validationMsgNum != 0) /* If error*/
            PB0VW01.COLR-ERR-SW = "Y";

            exit stack; /* Exit to redisplay map*/

          end
        end
      end
    end

    if (PB0VM001.PONBR > 0) /* If PO NUMBER entered*/
      if (PB0VM001.PO-REG-CD > " ") /* If region also entered*/
        if (PB0VM001.PONBR == PB0VW01.PONBR
         && PB0VM001.PO-REG-CD == PB0VW01.PB0VREGION) /* If this selection*/
          if (PB0VW01.PO-ERR-SW == "Y") /* already verified and in error*/
            set PB0VM001.PONBR cursor, bold;
            converseLib.validationFailed(69); /* Indicate invalid selection*/
            PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          else /* If po number valid*/
            if (PB0VM001.PB0VSESN > " " /* If season entered*/
             || PB0VM001.PB0VYR > 0     /* If year entered*/
             || PB0VM001.PB0VBUYMO > 0  /* If buy month entered*/
             || PB0VM001.PB0VDELMO > 0) /* If del. month entered*/
              PB0VM001.PB0VSESN = " "; /* erase them*/
              PB0VM001.PB0VYR = 0;
              PB0VM001.PB0VBUYMO = 0;
              PB0VM001.PB0VDELMO = 0;
              set PB0VM001.PB0VYR cursor;
              converseLib.validationFailed(418); /* Display message*/
              PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

              exit stack; /* Exit to redisplay map*/

            end
          end
        else /* New po or/and new region entered*/
          PB0VW01.PONBR = 0; /* Initialize w.s. fields*/
          PB0VW01.PB0VREGION = " ";
          PB0VW01.PO-ERR-SW = " "; /* and error switch*/

          PB0VW01.PC3PONBR = PB0VM001.PONBR;
          PB0VW01.PO-REG-CD = PB0VM001.PO-REG-CD;
          PB0VS60(); /* Verify po number*/

          PB0VW01.PONBR = PB0VM001.PONBR; /* Save the values*/
          PB0VW01.PB0VREGION = PB0VM001.PO-REG-CD;

          if (converseVar.validationMsgNum != 0) /* If error*/
            if (SQLCA.VAGen_SQLCODE == 100) /* If po not found*/
              PB0VW01.PO-ERR-SW = "Y";
            end

            exit stack; /* Exit to redisplay map*/

          else /* If po number valid*/
            if (PB0VM001.PB0VSESN > " " /* If season entered*/
             || PB0VM001.PB0VYR > 0     /* If year entered*/
             || PB0VM001.PB0VBUYMO > 0  /* If buy month entered*/
             || PB0VM001.PB0VDELMO > 0) /* If del. month entered*/
              PB0VM001.PB0VSESN = " "; /* erase them*/
              PB0VM001.PB0VYR = 0;
              PB0VM001.PB0VBUYMO = 0;
              PB0VM001.PB0VDELMO = 0;
              set PB0VM001.PB0VYR cursor;
              converseLib.validationFailed(418); /* Display message*/
              PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

              exit stack; /* Exit to redisplay map*/

            end
          end
        end
      else /* Region not entered*/
        set PB0VM001.PO-REG-CD cursor;
        converseLib.validationFailed(528); /* Display message*/
        PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

        exit stack; /* Exit to redisplay map*/
      end
    end

    if (PB0VM001.PC4ORTYP == "? " /* If PO TYPE pop up window requested*/
     || PB0VM001.PC4ORTYP == " ?")

      if (PB0VW01.TYP-ARRAY-SW == " ")
        PB0VS75(); /* Load po type array*/
      end

      PB0V410(); /* Pop up window routine*/

      set PB0VM001.PC4ORTYP cursor;

      exit stack; /* Exit to redisplay map*/

    end

    if (PB0VM001.PC4ORTYP > " ") /* If PO TYPE entered*/
      if (PB0VM001.PC4ORTYP == PB0VW01.PC4ORTYP) /* If this one was*/
        if (PB0VW01.TYP-ERR-SW == "Y") /* already verified and in error*/
          set PB0VM001.PC4ORTYP cursor, bold;
          converseLib.validationFailed(33); /* Indicate invalid selection*/
          PB0VM001.XXXPRCNM = "PB0V400"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else
        PB0VW01.PC4ORTYP = " "; /* Initialize w.s. field*/
        PB0VW01.TYP-ERR-SW = " "; /* and error switch*/

        PB0VS70(); /* Verify type*/

        PB0VW01.PC4ORTYP = PB0VM001.PC4ORTYP; /* Save the value*/
        if (converseVar.validationMsgNum != 0) /* If error*/
          PB0VW01.TYP-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    PB0VM001.XXXPRCNM = "PB0V   ";
    PB0VW01.MAP2SW = "Y"; /* Show MAP 2*/
    PB0VW01.MODSW = " "; /* Init. 'map modified' switch*/

  end

end // end PB0V400

// Pop-up window routine
Function PB0V410()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry. 'S' should be used to select*/
        /* the code.*/

     /* 2) Set map page after the window displayed*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
            /* REGION CODE TABLE WINDOW*/
   /* ------------------------------------------------------------*/

  if (PB0VM001.PO-REG-CD == "? " /* If ? in region field*/
   || PB0VM001.PO-REG-CD == " ?")

    XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
    XX0XW02.XX0XWHDR = " REGION CODE TABLE          ";

    while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
      XPYRG01(); /* perform region code window*/
    end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
      PB0VM001.PO-REG-CD = PB0VW01.PO-REG[XX0XWPIX]; /* move code*/
    else
      PB0VM001.PO-REG-CD = " "; /* Reset map field*/
    end

    converseLib.clearScreen();
     /* Restore map*/

  else

    /* ------------------------------------------------------------*/
            /* PO TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PB0VM001.PC4ORTYP == "? " /* If ? in po type field*/
     || PB0VM001.PC4ORTYP == " ?")

      XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
      XX0XW02.XX0XWHDR = " PO TYPE TABLE              ";

      while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
        XPYTP01(); /* perform po type window*/
      end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
        PB0VM001.PC4ORTYP = PB0VW01.PO-TYP[XX0XWPIX]; /* move code*/
      else
        PB0VM001.PC4ORTYP = " "; /* Reset map field*/
      end

      converseLib.clearScreen();
       /* Restore map*/

    end
  end

end // end PB0V410

// MAP 2 routine
Function PB0V500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PB0V510(); /* Format and display MAP 2*/

  PB0V520(); /* Check attention identifier*/

  PB0V530(); /* Reset fields to normal intensity*/

  PB0V540(); /* Verify the data that was entered*/

  PB0V550(); /* Process valid input request*/

end // end PB0V500

// Display MAP 2
Function PB0V510()
   /* ------------------------------------------------------------*/
   /* Write data selected from DPRODC.VPOITM05 to temporary*/
   /* storage queue.*/
   /* Display MAP 2.*/
   /* If error, display the returned message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    if (PB0VW01.WRITE-TSQ-SW == " ") /* If data is not written to tsq*/

      set PB0VM002 initial; /* Clear MAP 2*/
      set PB0VW02 empty; /* Clear w.s. tsq rec.*/

      PB0VW01.MAP2MODSW = " "; /* Init. MAP 2 modified switch*/

      PB0VW01.STOPSW = " "; /* Init. stop processing switch*/

                                  /* Init. update items*/
      PB0VW01.METSDT = 0; /* ETS date*/
      PB0VW01.MYMTCD = " "; /* Mode trans.*/
      PB0VW01.MPC6STAT = " "; /* Status*/

      PB0VW01.MYACCD = " "; /* Audit code*/
      PB0VW01.MYACDESC = " "; /* Audit code description*/

      PB0VM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

      PB0VS80(); /* Select rows from DPRODC.VPOITM05*/

      PB0VS81(); /* Fetch first row*/
      if (PB0VW01.STOPSW == "Y") /* If wrong selection*/
        set PB0VM001.PO-REG-CD cursor;
        PB0VM001.XXXPRCNM = "PB0V510"; /* Module name*/
        PB0VW01.MAP2SW = " "; /* Show MAP 1*/
        converseLib.validationFailed(276); /* Send error msg*/

        exit stack;

      end

      PB0VS83(); /* Purge tsq*/

      PB0VW01.PB0VSUB1 = 1;

      while (PB0VW01.STOPSW != "Y") /* Write VPOITM05 data to tsq*/

        if (PB0VW01.PB0VSUB1 > 12)

          PB0VS84(); /* Write page to tsq*/

          set PB0VW02 empty; /* Clear w.s. tsq rec*/

          PB0VW01.PB0VSUB1 = 1;
        end

        /* Move DB2 data to tsq rec.*/

        PB0VW02.PB0VW02-DATA[PB0VSUB1] = VPOITM05.VPOITM05-GROUP;

        PB0VW01.PB0VSUB1 = PB0VW01.PB0VSUB1 + 1;

        PB0VS81(); /* Fetch next row*/

      end

      PB0VS84(); /* Write page to tsq*/

      PB0VS82(); /* Close cursor*/

      PB0VW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' switch*/
                                  /* Save max. number of pages*/
      PB0VW01.PB0V-PAGE-COUNT-MAX = PB0VW01.PB0V-PAGE-COUNT;
      PB0VW01.PB0V-PAGE-COUNT = 1; /* Set page counter*/
      PB0V522(); /* Display tsq data on map*/
    end
  end

  converse PB0VM002 ;
end // end PB0V510

// Check attention identifier
Function PB0V520()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Pf10 was pressed (go to MAP 1)*/
    PB0VW01.MAP2SW = " "; /* Init. MAP 2 switch*/
    PB0VW01.MODSW = "Y"; /* Init. MAP 1 modified switch*/
                            /* Init. 'selected data written to tsq' switch*/
    PB0VW01.WRITE-TSQ-SW = " ";

    PB0VS83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf7) /* Pf7 was pressed (scroll back)*/
    PB0V521(); /* Check if rows were selected on map*/
                                  /* for update*/
    if (PB0VW01.PB0V-PAGE-COUNT < 2) /* If there is no previous page*/
      converseLib.validationFailed(2); /* display message*/
      PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/
    else
      PB0VW01.PB0V-PAGE-COUNT = PB0VW01.PB0V-PAGE-COUNT - 1;

                                  /* Save update items*/
      PB0VW01.METSDT = PB0VM002.ETSDT; /* ETS date*/
      PB0VW01.MYMTCD = PB0VM002.YMTCD; /* Mode trans.*/
      PB0VW01.MPC6STAT = PB0VM002.PC6STAT; /* Status*/

      PB0VW01.MYACCD = PB0VM002.YACCD; /* Audit code*/
      PB0VW01.MYACDESC = PB0VM002.YACDESC; /* Audit code description*/

      set PB0VM002 initial; /* Clear MAP 2*/
      PB0V522(); /* Display tsq data on map*/
    end

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf8) /* Pf8 was pressed (scroll forward)*/
    TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page number*/
    PB0VS86(); /* Read tsq page*/
    PB0V521(); /* Check if rows were selected on map*/
                                  /* for update*/
    if (PB0VW01.PB0V-PAGE-COUNT >= PB0VW01.PB0V-PAGE-COUNT-MAX)
                                  /* If there are no more pages*/
      converseLib.validationFailed(3); /* display message*/
      PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/
    else
      PB0VW01.PB0V-PAGE-COUNT = PB0VW01.PB0V-PAGE-COUNT + 1;

                                  /* Save update items*/
      PB0VW01.METSDT = PB0VM002.ETSDT; /* ETS date*/
      PB0VW01.MYMTCD = PB0VM002.YMTCD; /* Mode trans.*/
      PB0VW01.MPC6STAT = PB0VM002.PC6STAT; /* Status*/

      PB0VW01.MYACCD = PB0VM002.YACCD; /* Audit code*/
      PB0VW01.MYACDESC = PB0VM002.YACDESC; /* Audit code description*/

      set PB0VM002 initial; /* Clear MAP 2*/
      PB0V522(); /* Display tsq data on map*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PB0VM001 initial; /* Clear MAP 1*/
    set PB0VM002 initial; /* Clear MAP 2*/

    set VPOITM05 empty; /* Clear w.s. records*/
    set PB0VW01 empty;
    set PB0VW02 empty;
    PB0VS83(); /* Purge tsq*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PB0VM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PB0VM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = PB0VM002.CAITEM; /* Application data*/

      PB0VS83(); /* Purge tsq*/

      XSPCS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PB0VM002.CATOAP cursor, modified, bold; /* Highlight*/

    PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    if (PB0VM002.CAITEM > " ") /* Application data was entered*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        set PB0VM002.CAITEM cursor, modified, bold; /* Highlight*/

        converseLib.validationFailed(7); /* Indicate enter only with FAST PATH*/
        PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PB0VM002"; /* Move map name for help*/
    else

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "PB0U"; /* Transfer to P.P.R. menu*/
      end
    end

    PB0VS83(); /* Purge tsq*/

    XSPCS01(); /* Exit to another application*/

    PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* PF6 was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PB0VM002.XXXPRCNM = "PB0V520"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      set PB0VM001 initial; /* Clear MAP 1*/
      set PB0VM002 initial; /* Clear MAP 2*/

      set VPOITM05 empty; /* Clear w.s. records*/
      set PB0VW01 empty;
      set PB0VW02 empty;
      PB0VS83(); /* Purge tsq*/

    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0V520

// Check select code values
Function PB0V521()
   /* ------------------------------------------------------------*/
   /* Check if rows for update were selected on map.*/
   /* Make select values on map and on tsq match.*/
   /* ------------------------------------------------------------*/

                        /* Check if rows were selected on map for update*/
  PB0VW01.PB0VSUB1 = 1;
  while (PB0VSUB1 <= 12
   && PB0VM002.PO-DATA[PB0VSUB1] != " ")

    if (PB0VM002.PB0VSEL[PB0VSUB1] != " ")
      PB0VW01.MAP2MODSW = "Y"; /* Set 'map2 modified' switch*/
      if (PB0VM002.PB0VSEL[PB0VSUB1] != "S") /* Verify if 'S' was entered*/
        set PB0VM002.PB0VSEL[PB0VSUB1] cursor, bold;
        converseLib.validationFailed(13); /* Indicate invalid selection*/
        PB0VM002.XXXPRCNM = "PB0V521"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end
    PB0VSUB1 = PB0VSUB1 + 1;
  end

                                  /* Select code values on map*/
                                  /* should match tsq select values*/
  PB0VW01.SELSW = " ";
  PB0VW01.PB0VSUB1 = 1;
  while (PB0VSUB1 <= 12
   && PB0VM002.PO-DATA[PB0VSUB1] != " ")

    if (PB0VM002.PB0VSEL[PB0VSUB1] != PB0VW02.PB0VSEL[PB0VSUB1])
      if (PB0VM002.PB0VSEL[PB0VSUB1] == " ")
         /* NEXT SENTENCE;*/
      else
        if (PB0VW02.PB0VSEL[PB0VSUB1] == "P")
          PB0VM002.PB0VSEL[PB0VSUB1] = "S";
        end
      end
      PB0VW02.PB0VSEL[PB0VSUB1] = PB0VM002.PB0VSEL[PB0VSUB1];
      PB0VW01.SELSW = "Y";
    end

    PB0VSUB1 = PB0VSUB1 + 1;
  end

                                  /* If select values on map were*/
  if (PB0VW01.SELSW == "Y") /* changed,*/
    PB0VS85(); /* rewrite tsq page*/
  end

end // end PB0V521

// Format MAP 2
Function PB0V522()
   /* ------------------------------------------------------------*/
   /* Read tsq page.*/
   /* Move data from tsq page and w.s. to MAP 2.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page number*/
  PB0VS86(); /* Read tsq page*/

  PB0VSUB1 = 1;

  while (PB0VSUB1 <= 12
   && PB0VW02.PC3PONBR[PB0VSUB1] != 0)

    PB0VM002.PB0VSEL[PB0VSUB1] = PB0VW02.PB0VSEL[PB0VSUB1];
    PB0VW03.PO-DATA = " ";
    PB0VW03.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1];
    PB0VW01.REMOVE-LEAD-ZERO = PB0VW02.PC3PONBR[PB0VSUB1];
    PB0VS35(); /* remove leading zeros*/
    PB0VW03.PC3PONBR-CHAR = PB0VW01.REMOVE-LEAD-ZERO-9BYTES;
    PB0VW01.POID = " ";
    PB0VW01.POID-SESN = PB0VW02.PCFSECD[PB0VSUB1];
    PB0VW01.POIDT = PB0VW02.PC3POIDT[PB0VSUB1];
    PB0VW01.POID-MO-RNG = PB0VW01.POIDT-MO-RNG;
    PB0VW01.POID-FCTY = PB0VW02.FY1FCTYC[PB0VSUB1];
    PB0VW03.POID = PB0VW01.POID;
    PB0VW03.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
    PB0VW03.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
    PB0VW03.PC4ORTYP = PB0VW02.PC4ORTYP[PB0VSUB1];
    PB0VW03.XWHCD = PB0VW02.XWHCD[PB0VSUB1];
    PB0VW03.PC2CUXID = PB0VW02.PC2CUXID[PB0VSUB1];
    PB0VW03.PC6PLAN-NUMERIC = PB0VW02.PC6PLAN[PB0VSUB1];
    PB0VW03.PC6ETSDT-CCYYMMDD = PB0VW02.PC6ETSDT[PB0VSUB1];
    PB0VW01.REMOVE-LEAD-ZERO = PB0VW02.PC6TORDE[PB0VSUB1];
    PB0VS35(); /* remove leading zeros*/
    PB0VW03.PC6TORDE-CHAR = PB0VW01.REMOVE-LEAD-ZERO-7BYTES;
    PB0VW03.YMTCD = PB0VW02.YMTCD[PB0VSUB1];
    PB0VW03.PC6STAT = PB0VW02.PC6STAT[PB0VSUB1];
    PB0VM002.PO-DATA[PB0VSUB1] = PB0VW03.PO-DATA;
    PB0VM002.YMTCD = PB0VW01.MYMTCD; /* Mode trans.*/
    if (PB0VW02.PB0VSEL[PB0VSUB1] == "P")
      PB0VM002.PB0VSEL[PB0VSUB1] = "S";
      converseLib.validationFailed(578);
      set PB0VM002.PB0VSEL[PB0VSUB1] cursor, bold;
      set PB0VM002.YMTCD bold;
    end

    PB0VSUB1 = PB0VSUB1 + 1;
  end

  while (PB0VSUB1 <= 12) /* Protect select codes of empty map*/
                                  /* lines*/

    set PB0VM002.PB0VSEL[PB0VSUB1] skip, noHighLight;
    PB0VM002.PO-DATA[PB0VSUB1] = " ";

    PB0VSUB1 = PB0VSUB1 + 1;
  end

  PB0VM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Display current date*/

                                  /* Display update items*/
  PB0VM002.ETSDT = PB0VW01.METSDT; /* ETS date*/
  /* MOVE PB0VW01.MYMTCD TO PB0VM002.YMTCD;/* Mode trans.*/
  PB0VM002.PC6STAT = PB0VW01.MPC6STAT; /* Status*/

  PB0VM002.YACCD = PB0VW01.MYACCD; /* Audit code*/
  PB0VM002.YACDESC = PB0VW01.MYACDESC; /* Audit code description*/

  if (PB0VM002.ETSDT > 0   /* If ETS date*/
   || PB0VM002.YMTCD > " " /* or mode trans*/
   || PB0VM002.PC6STAT > " ") /* or status - entered*/
    PB0VW01.MAP2MODSW = "Y"; /* set up 'MAP 2 modified' switch*/
  end

end // end PB0V522

// Reset highlighted fields
Function PB0V530()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PB0VM002.CATOAP initialAttributes; /* FAST PATH to application*/
  set PB0VM002.CAITEM initialAttributes; /* FAST PATH application data*/

  set PB0VM002.ETSDT initialAttributes; /* ETS date*/
  set PB0VM002.YMTCD initialAttributes; /* Mode trans*/
  set PB0VM002.PC6STAT initialAttributes; /* Status*/
  set PB0VM002.YACCD initialAttributes; /* Audit cd*/

  PB0VW01.PB0VSUB2 = 1;

  while (PB0VSUB2 <= 12 /* Select code*/
   && PB0VM002.PO-DATA[PB0VSUB2] != " ")

    set PB0VM002.PB0VSEL[PB0VSUB2] initialAttributes;

    PB0VSUB2 = PB0VSUB2 + 1;
  end

end // end PB0V530

// Verify data that was entered
Function PB0V540()
   /* -------------------------------------------------------------*/
   /* Verify entered update items.*/
   /* Exit to redisplay map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (PB0VM002 is modified) /* If MAP 2 modified*/
    PB0VW01.MAP2MODSW = "Y"; /* Set 'map 2 modified' switch*/
    PB0VW01.UPDSW = " "; /* Init. 'ready to update ' switch*/
  end

  if (converseVar.eventKey is pf6)
    PB0V542(); /* Pf6 (select all) routine*/
    PB0VW01.MAP2MODSW = "Y"; /* Set 'map 2 modified' switch*/
  end

  if (PB0VW01.MAP2MODSW == "Y")

    if (converseVar.eventKey not pf6)
      PB0V521(); /* Check if rows were selected on map*/
                                  /* for update*/
    end
                                   /* If update items not entered:*/
    if (PB0VM002.ETSDT == 0   /* ETS DATE,*/
     && PB0VM002.YMTCD == " " /* MOD TRANS*/
     && PB0VM002.PC6STAT == " ") /* and STATUS*/

      set PB0VM002.ETSDT cursor;
      converseLib.validationFailed(21); /* Display 'data must be entered' msg*/
      PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

    if (PB0VM002.ETSDT > 0) /* If ETS DATE entered (CCYYMMDD)*/
      if (PB0VM002.ETSDT == PB0VW01.ETSDT) /* If date was verified*/
        if (PB0VW01.ETSDT-ERR-SW == "Y") /* If date invalid*/
          converseLib.validationFailed(38); /* Display error msg*/
          set PB0VM002.ETSDT cursor, bold; /* Highlight ETS date*/
          PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      else /* Verify date*/
        PB0VW01.ETSDT = 0; /* Initialize w.s. date*/
        PB0VW01.ETSDT-ERR-SW = " "; /* Initialize date error switch*/

        PB0VW01.EDITDT8 = PB0VM002.ETSDT; /* Check if year valid*/

        if (PB0VW01.EDITCC < 19)
          converseLib.validationFailed(38); /* Display error msg*/
          set PB0VM002.ETSDT cursor, bold; /* Highlight ETS date*/
          PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/
          PB0VW01.ETSDT = PB0VM002.ETSDT;
          PB0VW01.ETSDT-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end

        set TA2REC empty;
        TA2REC.TA2GRGGN = PB0VM002.ETSDT;
        TA2REC.TA2DYAOD = 0;

        PB0VS40(); /* Call date validation routine*/

        PB0VW01.ETSDT = PB0VM002.ETSDT;
        if (TA2REC.TA2RTNCD == 0) /* Date valid*/
          PB0VW01.EDITDT6 = VGVar.currentShortGregorianDate; /* Compare with current date*/
          if (EDITYY > 90)
            EDITCC = 19;
          else
            EDITCC = 20;
          end
          if (PB0VW01.EDITDT8 > PB0VM002.ETSDT)
            converseLib.validationFailed(409); /* Display error msg*/
            set PB0VM002.ETSDT cursor, bold; /* Highlight ETS date*/
            PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end
        else /* Invalid date*/
          set PB0VM002.ETSDT cursor, bold; /* Highlight ETS date*/
          PB0VW01.ETSDT-ERR-SW = "Y";

          exit stack; /* Exit to redisplay map*/

        end
      end
    else
      PB0VW01.ETSDT = 0;
      PB0VW01.ETSDT-ERR-SW = " ";
    end

    if (PB0VM002.YMTCD > " ") /* If MODE TRANS entered*/
      if (PB0VM002.YMTCD == "?") /* If pop up window requested*/

        PB0V541(); /* Pop up window routine*/

        set PB0VM002.YMTCD cursor;

        exit stack; /* Exit to redisplay map*/

      else
        if (PB0VM002.YMTCD in YMTTBL.YMTCD) /* If mode trans in YMTTBL table*/
          if (YMTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* but status not active*/

            set PB0VM002.YMTCD cursor, bold;
            converseLib.validationFailed(61); /* Indicate invalid selection*/
            PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end

        else /* If mode trans not in YMTTBL*/
          set PB0VM002.YMTCD cursor, bold; /* Highlight mod*/
          converseLib.validationFailed(61); /* Indicate invalid selection*/
          PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    if (PB0VM002.PC6STAT > " ") /* If STATUS entered*/
      if (PB0VM002.PC6STAT != "FC") /* If status in error*/

        set PB0VM002.PC6STAT cursor, bold;
        converseLib.validationFailed(37); /* Indicate invalid selection*/
        PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

        exit stack; /* Exit to redisplay map*/

      end
    end

    if (PB0VM002.YACCD == " ") /* If AUDIT CODE not entered*/

      set PB0VM002.YACCD cursor;
      converseLib.validationFailed(78); /* Indicate invalid selection*/
      PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    else
      if (PB0VM002.YACCD == "?") /* If pop up window requested*/
        PB0V541(); /* Pop up window routine*/
        set PB0VM002.YACCD cursor;

        exit stack; /* Exit to redisplay map*/

      else
        if (PB0VM002.YACCD in YACTBL.YACCD) /* If audit code in YACTBL*/
          PB0VM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
                                   /* Audit comment description*/
        else
          set PB0VM002.YACCD cursor, bold;
          converseLib.validationFailed(78); /* Indicate invalid selection*/
          PB0VM002.XXXPRCNM = "PB0V540"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      end
    end

    PB0VW01.MAP2MODSW = " "; /* Init. 'map 2 modified' switch*/
    PB0VW01.UPDSW = "Y"; /* Set update switch ('ready to update')*/
    PB0VM002.XXXPRCNM = "PB0V   ";
    /* ***;*/
    PB0VW01.PB0V-UPD-PAGE-COUNT = 1;
    while (PB0VW01.PB0V-UPD-PAGE-COUNT <= PB0VW01.PB0V-PAGE-COUNT-MAX)
      TA5REC.TA5TSQIX = PB0VW01.PB0V-UPD-PAGE-COUNT;
      PB0VS86(); /* Read tsq page*/

      PB0VW01.PB0VSUB1 = 1;
      while (PB0VW01.PB0VSUB1 <= 12
       && PB0VW02.PC3PONBR[PB0VSUB1] != 0)
        if ((PB0VW02.PB0VSEL[PB0VSUB1] == "S"
         || PB0VW02.PB0VSEL[PB0VSUB1] == "P"))
          if ((PB0VW02.PC-SAP-PO-NBR[PB0VSUB1] != " ")
           && ((PB0VM002.YMTCD > " "
           && PB0VW02.YMTCD[PB0VSUB1] != PB0VM002.YMTCD)))
            PB0VW01.PB0VWNSC = "Y";
            PB0VW02.PB0VSEL[PB0VSUB1] = "P";
            PB0VW01.PB0V-PAGE-COUNT = PB0VW01.PB0V-UPD-PAGE-COUNT;
          end
        end
        PB0VW01.PB0VSUB1 = PB0VW01.PB0VSUB1 + 1;
      end
      PB0VS85(); /* Rewrite into TSQ*/
      PB0VW01.PB0V-UPD-PAGE-COUNT = PB0VW01.PB0V-UPD-PAGE-COUNT + 1;
    end
    TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT;
    PB0VS86(); /* Read tsq page*/
    if (PB0VW01.PB0VWNSC == "Y")
      converseLib.validationFailed(578);
      PB0VW01.PB0VWNSC = "N";
      PB0VW01.MAP2MODSW = "Y";
      PB0VW01.MAP2SW = "Y";
      PB0VW01.METSDT = PB0VM002.ETSDT;
      PB0VW01.MYMTCD = PB0VM002.YMTCD;
      PB0VW01.MPC6STAT = PB0VM002.PC6STAT;
      PB0VW01.MYACCD = PB0VM002.YACCD;
      PB0VW01.MYACDESC = PB0VM002.YACDESC;
      PB0VW01.PB0V-UPD-PAGE-COUNT = 1;
      PB0V522();
      exit stack;
    end

    if (converseVar.eventKey is pf6)
      converseLib.validationFailed(531); /* Display 'updating all' msg*/
    else
      converseLib.validationFailed(384); /* Display 'pf9 to confirm request' msg*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0V540

// Pop-up window routine
Function PB0V541()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry. 'S' should be used to select*/
        /* the code.*/

     /* 2) Set map page after the window displayed*/

   /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

  if (PB0VM002.YMTCD == "?") /* If ? in transportation mode field*/

    XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
    XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  ";

    while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
      XPYMT01(); /* perform transportation mode window*/
    end

       /* **********************************************************/
       /* If the pass index is greater than zero, use the      **/
       /* passed table index 'XX0XWPIX' to move the data       **/
       /* type table code and description to the map.          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
      PB0VM002.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
    else
      PB0VM002.YMTCD = " "; /* Reset map field*/
    end
    converseLib.clearScreen();
     /* Restore map*/
  else

      /* ------------------------------------------------------------*/
            /* AUDIT COMMENT TABLE WINDOW*/
      /* ------------------------------------------------------------*/

    if (PB0VM002.YACCD == "?") /* If ? in audit comment code*/

      XPXX001(); /* Perform pop-up window*/
                                  /* Initialize heading*/
      XX0XW02.XX0XWHDR = " AUDIT COMMENT TABLE    ";
      XX0XW02.XGPCD = PCWREC.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* Until user hits enter*/
        XPYAC01(); /* perform audit comment window*/
      end

        /* **********************************************************/
        /* If the pass index is greater than zero, use the      **/
        /* passed table index 'XX0XWPIX' to move the data       **/
        /* type table code and description to the map.          **/
        /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* If user selected a code*/
        PB0VM002.YACCD = YACTBL.YACCD[XX0XWPIX]; /* Code*/
        PB0VM002.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* Desc.*/
      else
        PB0VM002.YACCD = " "; /* Reset map field*/
        PB0VM002.YACDESC = " "; /* Desc.*/

      end
      converseLib.clearScreen();
       /* Restore map*/
    end
  end

end // end PB0V541

// PF6 (select all) routine
Function PB0V542()
   /* ------------------------------------------------------------*/
   /* If PF6 pressed, show that all tsq data selected for update.*/
   /* ------------------------------------------------------------*/

                                  /* Process all tsq pages*/
  PB0VW01.PB0V-UPD-PAGE-COUNT = 1;
  while (PB0VW01.PB0V-UPD-PAGE-COUNT <= PB0VW01.PB0V-PAGE-COUNT-MAX)

    TA5REC.TA5TSQIX = PB0VW01.PB0V-UPD-PAGE-COUNT;
    PB0VS86(); /* Read tsq page*/

                                  /* Process all lines of a page*/
    PB0VW01.PB0VSUB1 = 1;
    while (PB0VW01.PB0VSUB1 <= 12
     && PB0VW02.PC3PONBR[PB0VSUB1] != 0)

      PB0VW02.PB0VSEL[PB0VSUB1] = "S";

      PB0VW01.PB0VSUB1 = PB0VW01.PB0VSUB1 + 1;

    end

    PB0VS85(); /* Rewrite tsq page*/

    PB0VW01.PB0V-UPD-PAGE-COUNT = PB0VW01.PB0V-UPD-PAGE-COUNT + 1;
  end

                                  /* Save update items*/
  PB0VW01.METSDT = PB0VM002.ETSDT; /* ETS date*/
  PB0VW01.MYMTCD = PB0VM002.YMTCD; /* Mode trans.*/
  PB0VW01.MPC6STAT = PB0VM002.PC6STAT; /* Status*/

  PB0VW01.MYACCD = PB0VM002.YACCD; /* Audit code*/
  PB0VW01.MYACDESC = PB0VM002.YACDESC; /* Audit code description*/

  set PB0VM002 initial; /* Clear MAP 2*/
  PB0V522(); /* Display tsq data on map*/

end // end PB0V542

// Process valid input request
Function PB0V550()
   /* ------------------------------------------------------------*/
   /* Process all TSQ pages.*/
   /* Update database.*/
   /* ------------------------------------------------------------*/

  if (PB0VW01.UPDSW == "Y") /* If ready to update*/
    if (converseVar.eventKey is pf9 /* If PF9 was pressed*/
    )                              
      PB0VW01.SELSW = " "; /* Init. select switch*/
      PB0VW01.MODSW = "Y"; /* Set MAP 1 modified switch*/
      PB0VW01.MAP2SW = " "; /* Init. MAP 2 switch*/
      PB0VW01.WRITE-TSQ-SW = " "; /* Init. 'data written to tsq' sw.*/

                                  /* Process all tsq pages*/
      PB0VW01.PB0V-UPD-PAGE-COUNT = 1;
      while (PB0VW01.PB0V-UPD-PAGE-COUNT <= PB0VW01.PB0V-PAGE-COUNT-MAX)

        TA5REC.TA5TSQIX = PB0VW01.PB0V-UPD-PAGE-COUNT;
        PB0VS86(); /* Read tsq page*/

                                  /* Process all lines of a page*/
        PB0VW01.PB0VSUB1 = 1;
        while (PB0VW01.PB0VSUB1 <= 12
         && PB0VW02.PC3PONBR[PB0VSUB1] != 0)

          if (PB0VW02.PB0VSEL[PB0VSUB1] == "S") /* If map line selected*/

            if ((PB0VM002.ETSDT > 0
             && PB0VW02.PC6ETSDT[PB0VSUB1] != PB0VM002.ETSDT)
             || (PB0VM002.YMTCD > " "
             && PB0VW02.YMTCD[PB0VSUB1] != PB0VM002.YMTCD)
             || (PB0VM002.PC6STAT > " "
             && PB0VW02.PC6STAT[PB0VSUB1] != PB0VM002.PC6STAT))

              PB0V551(); /* Database update routine*/

              PB0VW01.SELSW = "Y"; /* Set select switch*/
            end
          end

          PB0VW01.PB0VSUB1 = PB0VW01.PB0VSUB1 + 1;

        end

        PB0VW01.PB0V-UPD-PAGE-COUNT = PB0VW01.PB0V-UPD-PAGE-COUNT + 1;
      end

                                  /* If update requested*/
      if (PB0VW01.SELSW == " ") /* but no lines selected*/
        converseLib.validationFailed(530); /* display msg*/
        set PB0VM002.PB0VSEL[1] cursor;
        PB0VM002.XXXPRCNM = "PB0V550";
        PB0VW01.MAP2SW = "Y"; /* Set up switch to display MAP 2*/
        PB0VW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' sw.*/
        TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page nbr*/
        PB0VS86(); /* Read tsq page*/
        return;
      end

      PB0VS83(); /* Purge tsq*/
      converseLib.validationFailed(1); /* Display 'update successful' msg*/
      PB0VW01.UPDSW = " "; /* Init. 'ready to update' switch*/

    else /* If PF9 was not pressed*/
      if (converseVar.eventKey is pf6) /* If PF6 was pressed*/
        converseLib.validationFailed(531); /* Display 'updating all' msg*/
      else
        converseLib.validationFailed(384); /* Display 'pf9 to confirm request' msg*/
      end
    end
  end

end // end PB0V550

// Database update routine
Function PB0V551()
   /* --------------------------------------------------------------*/
   /*  */
   /* Before update, check if item row with the same key data (and*/
   /* different plan number) already exists on VPOITM05.*/
   /*  */
   /* --------------------------------------------------------------*/
   /*  */
   /* If it exists, item plans should be merged.*/
   /*  */
   /* Check VCPLHD02 and VFYPO002 to see if quantities have been*/
   /* shipped or item has receipt data: then plans can not be*/
   /* merged.*/
   /*  */
   /* To merge plans add item quantities, update po item row on*/
   /* VPOITM05.*/
   /*  */
   /* Add size quantities to merge size rows. Update VPOSIZ02.*/
   /*  */
   /* Load appropriate data to cancel maintenance row on VPOITM05*/
   /* and VPOSIZ02. Update (to cancel) VPOITM05 and VPOSIZ02.*/
   /*  */
   /* Update audit tables VPOAIT02 and VPOASZ02.*/
   /*  */
   /* --------------------------------------------------------------*/
   /*  */
   /* If the same key row does not exist, no merge needed.*/
   /*  */
   /* Update VPOITM05 and VPOAIT02.*/
   /*  */
   /* If item status was changed on VPOITM05, update if*/
   /* necessary po header status on VPOHDR02.*/
   /*  */
   /* --------------------------------------------------------------*/

                       /* Save values (before update)*/
  PB0VW01.WETSDT = PB0VW02.PC6ETSDT[PB0VSUB1];
  PB0VW01.YMTCD = PB0VW02.YMTCD[PB0VSUB1];
  PB0VW01.PC6STAT = PB0VW02.PC6STAT[PB0VSUB1];

                 /* Move before update data from tsq to VPOITM05*/
  VPOITM05.VPOITM05-GROUP = PB0VW02.PB0VW02-DATA[PB0VSUB1];

  XX0XS01(); /* Get date and time of update*/

  PB0VW01.MERGESW = " "; /* Initialize merge switch*/

  if ((PB0VM002.ETSDT > 0 /* If ETS or MOD changed*/
   && PB0VW02.PC6ETSDT[PB0VSUB1] != PB0VM002.ETSDT)
   || (PB0VM002.YMTCD > " "
   && PB0VW02.YMTCD[PB0VSUB1] != PB0VM002.YMTCD))
    /**/
    /**/
    if (PB0VM002.ETSDT > 0)
      VPOITM05.PC6ETSDT = PB0VM002.ETSDT; /* Update ETS date*/
    end
    /**/
    if (PB0VM002.YMTCD > " ")
      VPOITM05.YMTCD = PB0VM002.YMTCD; /* Update mode trans.*/
    end
    /**/
    /**/
    if (VPOITM05.PC-SAP-PO-NBR == " ")
      PB0VS90(); /* Check if the item row exists on*/
                                   /* VPOITM05*/
    end
    /**/
  end

  if (PB0VW01.MERGESW == "Y") /* If two plans should be merged*/
    /**/
    PB0VS91(); /* Check if qtys have been shipped*/
    /**/
    /**/
    PB0VS95(); /* Check if item has receipt data*/
    /**/
    /**/
     /* --------------------------------------------------------------*/
                  /* MERGE PO ITEM PLANS*/
     /* --------------------------------------------------------------*/
    /**/
     /* Save 'merge to' item row data in record PB0VW06 for audit rtn.*/
    PB0VW06.VPOITM05-GROUP = VPOITM05.VPOITM05-GROUP;
    /**/
    /**/
     /* Add item quantities to merge plans*/
    VPOITM05.PC6TORIG = VPOITM05.PC6TORIG + PB0VW02.PC6TORIG[PB0VSUB1];
    VPOITM05.PC6TORDE = VPOITM05.PC6TORDE + PB0VW02.PC6TORDE[PB0VSUB1];
    VPOITM05.PC6MICHG = VPOITM05.PC6MICHG + PB0VW02.PC6MICHG[PB0VSUB1];
    VPOITM05.PC6TADD = VPOITM05.PC6TADD + PB0VW02.PC6TADD[PB0VSUB1];
    VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PB0VW02.PC6TCNCL[PB0VSUB1];
    /**/
    PB0VS96(); /* Update (merge) po item (VPOITM05)*/
    /**/
    /**/
     /* --------------------------------------------------------------*/
                  /* MERGE SIZE ROWS*/
     /* --------------------------------------------------------------*/
    /**/
    set VPOSIZ02 empty;
                                  /* Get po size key data*/
    VPOSIZ02.XGPCD = PB0VW02.XGPCD[PB0VSUB1];
    VPOSIZ02.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1];
    VPOSIZ02.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1];
    VPOSIZ02.PC6ITMNB = PB0VW02.PC6ITMNB[PB0VSUB1];
    /**/
    PB0VS97(); /* Select VPOSIZ02 row (to cancel)*/
    /**/
     /* Save 'cancel' size row data in record PB0VW05*/
    PB0VW05.VPOSIZ02-GROUP = VPOSIZ02.VPOSIZ02-GROUP;
    /**/
    /**/
    set VPOSIZ02 empty;
                                  /* Get po size key data*/
    VPOSIZ02.XGPCD = VPOITM05.XGPCD;
    VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
    VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
    VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB;
    /**/
    PB0VS97(); /* Select VPOSIZ02 row (to merge)*/
    /**/
     /* Save 'merge to' size row data in record PB0VW07 for audit rtn.*/
    PB0VW07.VPOSIZ02-GROUP = VPOSIZ02.VPOSIZ02-GROUP;
    /**/
               /* Add size quantities to merge size rows*/
    PB0VW01.PB0VSUB2 = 1; /* Initialize subscript*/
    /**/
    while (PB0VW01.PB0VSUB2 <= 40) /* Until all sizes processed*/
      /**/
      VPOSIZ02.PC7ORIGQ[PB0VSUB2] = VPOSIZ02.PC7ORIGQ[PB0VSUB2] +       PB0VW05.PC7ORIGQ[PB0VSUB2];
      /**/
      VPOSIZ02.PC7ORDEQ[PB0VSUB2] = VPOSIZ02.PC7ORDEQ[PB0VSUB2] +       PB0VW05.PC7ORDEQ[PB0VSUB2];
      /**/
      PB0VW01.PB0VSUB2 = PB0VW01.PB0VSUB2 + 1;
      /**/
    end
    /**/
    /**/
    PB0VS98(); /* Update (merge) size row (VPOSIZ02)*/
    /**/
    /**/
     /* --------------------------------------------------------------*/
                  /* CANCEL PO ITEM*/
     /* --------------------------------------------------------------*/
    /**/
               /* Move before update data from tsq to VPOITM05*/
    VPOITM05.VPOITM05-GROUP = PB0VW02.PB0VW02-DATA[PB0VSUB1];
    /**/
               /* Load appropriate data to cancel item row*/
    VPOITM05.PC6STAT = "CX"; /* Cancel status*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
    VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE;
    VPOITM05.PC6TORDE = 0;
    VPOITM05.PC6MICHG = 0;
    VPOITM05.PC6CXNBR = 1;
    /**/
    PB0VS96(); /* Update (cancel) po item (VPOITM05)*/
    /**/
    /**/
     /* --------------------------------------------------------------*/
                  /* CANCEL SIZE ROW*/
     /* --------------------------------------------------------------*/
    /**/
               /* Move saved 'cancel' size row data to VPOSIZ02 record*/
    VPOSIZ02.VPOSIZ02-GROUP = PB0VW05.VPOSIZ02-GROUP;
    /**/
    /**/
               /* Load appropriate data to cancel size row*/
    move 0 to VPOSIZ02.PC7ORDEQ[1] for all;
    move 0 to VPOSIZ02.FY4FOBPR[1] for all;
    move "N" to VPOSIZ02.PC7FOBFL[1] for all;
    /**/
    PB0VS98(); /* Update (cancel) size row (VPOSIZ02)*/
    /**/
    /**/
    PB0V552(); /* Audit routine*/
    /**/
    /**/
    /**/
  else /* Row does not exist, no merge needed*/
    /**/
    /**/
    /**/
     /* --------------------------------------------------------------*/
                  /* UPDATE PO ITEM*/
     /* --------------------------------------------------------------*/
    /**/
                 /* Move before update data from tsq to VPOITM05*/
    VPOITM05.VPOITM05-GROUP = PB0VW02.PB0VW02-DATA[PB0VSUB1];
    /**/
    /**/
    if (PB0VM002.ETSDT > 0)
      VPOITM05.PC6ETSDT = PB0VM002.ETSDT; /* Update ETS date*/
    end
    /**/
    if (PB0VM002.YMTCD > " ")
      VPOITM05.YMTCD = PB0VM002.YMTCD; /* Update mode trans.*/
    end
    /**/
    if (PB0VM002.PC6STAT > " ")
      VPOITM05.PC6STAT = PB0VM002.PC6STAT; /* Update status*/
    end
    /**/
    PB0VS96(); /* Update po item (VPOITM05)*/
    /**/
    /**/
    if (PB0VM002.PC6STAT > " ") /* Status changed*/
      set PC8REC empty;
      PC8REC.XGPCD = VPOITM05.XGPCD; /* GPC*/
      PC8REC.PO-REG-CD = VPOITM05.PO-REG-CD; /* Region*/
      PC8REC.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
      PC8REC.YACCD = PB0VM002.YACCD; /* Audit code*/
      /**/
      XPPC010-DRDA(); /* Update PO header status rtn.*/
    end
    /**/
    /**/
    PB0V552(); /* Audit routine*/
    /**/
    /**/
  end

end // end PB0V551

// Audit routine
Function PB0V552()
   /* --------------------------------------------------------------*/
    /* Select PO header row in order to get value of*/
    /* amendment indicator based on PO header data*/
   /* --------------------------------------------------------------*/

  if (VPOHDR02.PC3PONBR == 0) /* If PO header was not obtained*/

    PB0VW01.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
    PB0VW01.PO-REG-CD = VPOITM05.PO-REG-CD; /* Region*/

    PB0VS60(); /* Select PO header*/

    if (converseVar.validationMsgNum != 0) /* If error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back changes*/
      exit stack; /* exit to display map*/
    end
  end

   /* --------------------------------------------------------------*/
   /* If item plans merged, update VPOAIT02 and VPOASZ02 audit*/
   /* tables, else update VPOAIT02.*/
   /* --------------------------------------------------------------*/

  if (PB0VW01.MERGESW == "Y") /* If merge was done*/

    PB0VSA0(); /* Get next audit item seq. number*/

    /* ----------------------------------------------------------*/
    /* INSERT 'CANCEL' PO ITEM AUDIT*/
    /* ----------------------------------------------------------*/

    /* Load data of maintenance item row (before changes)*/
    /* to po item audit record*/

    set VPOAIT02 empty;

    VPOAIT02.XGPCD = PB0VW02.XGPCD[PB0VSUB1]; /* GPC code*/
    VPOAIT02.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1]; /* PO reg*/
    VPOAIT02.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1]; /* PO number*/
    VPOAIT02.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
    VPOAIT02.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
    VPOAIT02.XDMCD = PB0VW02.XDMCD[PB0VSUB1];
    VPOAIT02.XQACD = PB0VW02.XQACD[PB0VSUB1];
    VPOAIT02.XOWCD = PB0VW02.XOWCD[PB0VSUB1];
    VPOAIT02.PC2INSEG = PB0VW02.PC2INSEG[PB0VSUB1];
    VPOAIT02.XPGCD = PB0VW02.XPGCD[PB0VSUB1];
    VPOAIT02.XUMCD = PB0VW02.XUMCD[PB0VSUB1];
    VPOAIT02.PCFSECD = PB0VW02.PCFSECD[PB0VSUB1];
    VPOAIT02.PC3POIDT = PB0VW02.PC3POIDT[PB0VSUB1];
    VPOAIT02.FY1FCTYC = PB0VW02.FY1FCTYC[PB0VSUB1];
    VPOAIT02.PC6ETSDT = PB0VW02.PC6ETSDT[PB0VSUB1];
    VPOAIT02.PC6OETS = PB0VW02.PC6OETS[PB0VSUB1];
    VPOAIT02.PC6RTADT = PB0VW02.PC6RTADT[PB0VSUB1];
    VPOAIT02.YMTCD = PB0VW02.YMTCD[PB0VSUB1];
    VPOAIT02.XWHCD = PB0VW02.XWHCD[PB0VSUB1];
    VPOAIT02.PC2CUXID = PB0VW02.PC2CUXID[PB0VSUB1];
    VPOAIT02.PC6XCTCD = PB0VW02.PC6XCTCD[PB0VSUB1];
    VPOAIT02.PC6CXNBR = PB0VW02.PC6CXNBR[PB0VSUB1];
    VPOAIT02.PC6PLAN = PB0VW02.PC6PLAN[PB0VSUB1];
    VPOAIT02.XDSCD = PB0VW02.XDSCD[PB0VSUB1];
    VPOAIT02.YSMXDV = PB0VW02.YSMXDV[PB0VSUB1];
    VPOAIT02.PC4ORTYP = PB0VW02.PC4ORTYP[PB0VSUB1];
    VPOAIT02.XPRCD = PB0VW02.XPRCD[PB0VSUB1];

    VPOAIT02.OP1CUOID = PB0VW02.OP1CUOID[PB0VSUB1];
    VPOAIT02.OP1NORID = PB0VW02.OP1NORID[PB0VSUB1];
    if (PB0VW02.OP1CUOID[PB0VSUB1] > 0)
      PB0VW01.PB0VW-FRMT-CUST-ORD = PB0VW02.OP1CUOID[PB0VSUB1];
      VPOAIT02.OP1PARTN = PB0VW01.PB0VW-FRMT-PART-NBR;
    else
      VPOAIT02.OP1PARTN = " ";
    end

    VPOAIT02.PG1SC4CD = PB0VW02.PG1SC4CD[PB0VSUB1];
    VPOAIT02.PCJGLOFL = "N";
    VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

    VPOAIT02.YACCD = PB0VM002.YACCD;

    /* --------------------------------------------------------------*/
    /* Get value of amendment indicator based on PO header data*/
    /* --------------------------------------------------------------*/

    if (VPOHDR02.PC3NISFL == "Y"
     || VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5";
    else
      VPOAIT02.PCJAMEND = "3";
    end

              /* ***** CANCEL PRODUCT QUANTITIES *******/

    VPOAIT02.PCJSEQNO = PB0VW01.PCJSEQNO; /* Audit sequence number*/
    VPOAIT02.PCIBFRN = PB0VW02.PC6TORDE[PB0VSUB1]; /* Before*/
    VPOAIT02.PCIAFTN = 0; /* After*/
    VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;
    VPOAIT02.YOACD = "61"; /* CANCEL PRODUCT QUANTITIES*/

    PB0VSA1(); /* Get audit record flags*/

    PB0VSA2(); /* Insert item audit row*/

    /* ----------------------------------------------------------*/
    /* INSERT 'CANCEL' SIZE AUDIT*/
    /* ----------------------------------------------------------*/

    /* Load data of maintenance item row (before changes)*/
    /* to size audit record*/

    set VPOASZ02 empty;

    VPOASZ02.XGPCD = PB0VW02.XGPCD[PB0VSUB1]; /* GPC code*/
    VPOASZ02.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1]; /* PO region*/
    VPOASZ02.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1]; /* PO number*/
    VPOASZ02.PCJSEQNO = PB0VW01.PCJSEQNO;
    VPOASZ02.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
    VPOASZ02.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
    VPOASZ02.XDMCD = PB0VW02.XDMCD[PB0VSUB1];
    VPOASZ02.XQACD = PB0VW02.XQACD[PB0VSUB1];
    VPOASZ02.XOWCD = PB0VW02.XOWCD[PB0VSUB1];
    VPOASZ02.PC2INSEG = PB0VW02.PC2INSEG[PB0VSUB1];
    VPOASZ02.XPGCD = PB0VW02.XPGCD[PB0VSUB1];
    VPOASZ02.XUMCD = PB0VW02.XUMCD[PB0VSUB1];
    VPOASZ02.PC6ETSDT = PB0VW02.PC6ETSDT[PB0VSUB1];
    VPOASZ02.PC6OETS = PB0VW02.PC6OETS[PB0VSUB1];
    VPOASZ02.PC6RTADT = PB0VW02.PC6RTADT[PB0VSUB1];
    VPOASZ02.YMTCD = PB0VW02.YMTCD[PB0VSUB1];
    VPOASZ02.PC6CXNBR = PB0VW02.PC6CXNBR[PB0VSUB1];
    VPOASZ02.XWHCD = PB0VW02.XWHCD[PB0VSUB1];
    VPOASZ02.PC2CUXID = PB0VW02.PC2CUXID[PB0VSUB1];
    VPOASZ02.OP1CUOID = PB0VW02.OP1CUOID[PB0VSUB1];
    VPOASZ02.OP1NORID = PB0VW02.OP1NORID[PB0VSUB1];

    if (PB0VW02.OP1CUOID[PB0VSUB1] == 0)
      VPOASZ02.OP1PARTN = " ";
    else
      PB0VW01.PB0VW-FRMT-CUST-ORD = PB0VW02.OP1CUOID[PB0VSUB1];
      VPOASZ02.OP1PARTN = PB0VW01.PB0VW-FRMT-PART-NBR;
    end

    move PB0VW05.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
    move 0 to VPOASZ02.PCIAFTN[1] for all;
    move PB0VW05.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all;
    move PB0VW05.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;
    VPOASZ02.ZFC-CRCY-CD = " ";

    VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PB0VSA3(); /* Insert size audit row*/

    /* ----------------------------------------------------------*/
    /* INSERT 'MERGE' PO ITEM AUDIT*/
    /* ----------------------------------------------------------*/

    /* Load saved copy of 'merge to' item row.*/

    set VPOAIT02 empty;

    VPOAIT02.XGPCD = PB0VW06.XGPCD; /* GPC code*/
    VPOAIT02.PO-REG-CD = PB0VW06.PO-REG-CD; /* PO number*/
    VPOAIT02.PC3PONBR = PB0VW06.PC3PONBR; /* PO number*/
    VPOAIT02.SY1STNBR = PB0VW06.SY1STNBR;
    VPOAIT02.SY2CLRID = PB0VW06.SY2CLRID;
    VPOAIT02.XDMCD = PB0VW06.XDMCD;
    VPOAIT02.XQACD = PB0VW06.XQACD;
    VPOAIT02.XOWCD = PB0VW06.XOWCD;
    VPOAIT02.PC2INSEG = PB0VW06.PC2INSEG;
    VPOAIT02.XPGCD = PB0VW06.XPGCD;
    VPOAIT02.XUMCD = PB0VW06.XUMCD;
    VPOAIT02.PCFSECD = PB0VW06.PCFSECD;
    VPOAIT02.PC3POIDT = PB0VW06.PC3POIDT;
    VPOAIT02.FY1FCTYC = PB0VW06.FY1FCTYC;
    VPOAIT02.PC6ETSDT = PB0VW06.PC6ETSDT;
    VPOAIT02.PC6OETS = PB0VW06.PC6OETS;
    VPOAIT02.PC6RTADT = PB0VW06.PC6RTADT;
    VPOAIT02.YMTCD = PB0VW06.YMTCD;
    VPOAIT02.XWHCD = PB0VW06.XWHCD;
    VPOAIT02.PC2CUXID = PB0VW06.PC2CUXID;
    VPOAIT02.PC6XCTCD = PB0VW06.PC6XCTCD;
    VPOAIT02.PC6CXNBR = PB0VW06.PC6CXNBR;
    VPOAIT02.PC6PLAN = PB0VW06.PC6PLAN;
    VPOAIT02.XDSCD = PB0VW06.XDSCD;
    VPOAIT02.YSMXDV = PB0VW06.YSMXDV;
    VPOAIT02.PC4ORTYP = PB0VW06.PC4ORTYP;

    VPOAIT02.OP1CUOID = PB0VW06.OP1CUOID;
    VPOAIT02.OP1NORID = PB0VW06.OP1NORID;
    if (PB0VW06.OP1CUOID > 0)
      PB0VW01.PB0VW-FRMT-CUST-ORD = PB0VW06.OP1CUOID;
      VPOAIT02.OP1PARTN = PB0VW01.PB0VW-FRMT-PART-NBR;
    else
      VPOAIT02.OP1PARTN = " ";
    end

    VPOAIT02.XPRCD = PB0VW06.XPRCD;

    VPOAIT02.PG1SC4CD = PB0VW06.PG1SC4CD;
    VPOAIT02.PCJGLOFL = "N";
    VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

    VPOAIT02.YACCD = PB0VM002.YACCD;

    PB0VW01.PCJSEQNO = PB0VW01.PCJSEQNO + 1;
    VPOAIT02.PCJSEQNO = PB0VW01.PCJSEQNO;

    /* --------------------------------------------------------------*/
    /* Get value of amendment indicator based on PO header data*/
    /* --------------------------------------------------------------*/

    if (VPOHDR02.PC3NISFL == "Y"
     || VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5";
    else
      VPOAIT02.PCJAMEND = "3";
    end

            /* **** ADD PRODUCT SIZE QUANTITIES ******/

    /* Before*/
    VPOAIT02.PCIBFRN = PB0VW06.PC6TORDE + 0;
    /* After*/
    VPOAIT02.PCIAFTN = PB0VW06.PC6TORDE + PB0VW02.PC6TORDE[PB0VSUB1];

    VPOAIT02.PCJNETQT = PB0VW02.PC6TORDE[PB0VSUB1];
    VPOAIT02.YOACD = "59"; /* ADD PRODUCT SIZE QUANTITIES*/

    PB0VSA1(); /* Get audit record flags*/

    PB0VSA2(); /* Insert item audit record*/

    /* ----------------------------------------------------------*/
    /* INSERT 'MERGE' SIZE AUDIT*/
    /* ----------------------------------------------------------*/

    /* Initialize size audit record and move data from saved*/
    /* 'merge to' row to the record.*/

    set VPOASZ02 empty;

    VPOASZ02.XGPCD = PB0VW06.XGPCD; /* GPC code*/
    VPOASZ02.PO-REG-CD = PB0VW06.PO-REG-CD; /* PO region code*/
    VPOASZ02.PC3PONBR = PB0VW06.PC3PONBR; /* PO number*/
    VPOASZ02.PCJSEQNO = PB0VW01.PCJSEQNO;
    VPOASZ02.SY1STNBR = PB0VW06.SY1STNBR;
    VPOASZ02.SY2CLRID = PB0VW06.SY2CLRID;
    VPOASZ02.XDMCD = PB0VW06.XDMCD;
    VPOASZ02.XQACD = PB0VW06.XQACD;
    VPOASZ02.XOWCD = PB0VW06.XOWCD;
    VPOASZ02.PC2INSEG = PB0VW06.PC2INSEG;
    VPOASZ02.XPGCD = PB0VW06.XPGCD;
    VPOASZ02.XUMCD = PB0VW06.XUMCD;
    VPOASZ02.PC6ETSDT = PB0VW06.PC6ETSDT;
    VPOASZ02.PC6OETS = PB0VW06.PC6OETS;
    VPOASZ02.PC6RTADT = PB0VW06.PC6RTADT;
    VPOASZ02.YMTCD = PB0VW06.YMTCD;
    VPOASZ02.PC6CXNBR = PB0VW06.PC6CXNBR;
    VPOASZ02.XWHCD = PB0VW06.XWHCD;
    VPOASZ02.PC2CUXID = PB0VW06.PC2CUXID;
    VPOASZ02.OP1CUOID = PB0VW06.OP1CUOID;
    VPOASZ02.OP1NORID = PB0VW06.OP1NORID;

    if (PB0VW06.OP1CUOID == 0)
      VPOASZ02.OP1PARTN = " ";
    else
      PB0VW01.PB0VW-FRMT-CUST-ORD = PB0VW06.OP1CUOID;
      VPOASZ02.OP1PARTN = PB0VW01.PB0VW-FRMT-PART-NBR;
    end

    PB0VW01.PB0VSUB2 = 1; /* Initialize subscript*/
    VPOASZ02.ZFC-CRCY-CD = " ";

    while (PB0VW01.PB0VSUB2 <= 40)

      VPOASZ02.PCIBFRN[PB0VSUB2] = PB0VW07.PC7ORDEQ[PB0VSUB2];
      VPOASZ02.PCIAFTN[PB0VSUB2] = PB0VW07.PC7ORDEQ[PB0VSUB2] +       PB0VW05.PC7ORDEQ[PB0VSUB2];

      VPOASZ02.PCKBFRPR[PB0VSUB2] = PB0VW07.FY4FOBPR[PB0VSUB2];
      VPOASZ02.PCKAFTPR[PB0VSUB2] = PB0VW07.FY4FOBPR[PB0VSUB2];

      if (PB0VW07.PC7ORDEQ[PB0VSUB2] == 0
       && PB0VW05.PC7ORDEQ[PB0VSUB2] > 0)
        VPOASZ02.PCKAFTPR[PB0VSUB2] = PB0VW05.FY4FOBPR[PB0VSUB2];
      end /* Load price check*/

      PB0VW01.PB0VSUB2 = PB0VW01.PB0VSUB2 + 1;

    end

    VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PB0VSA3(); /* Insert the size audit record*/

  else /* If no merge*/

    /* ----------------------------------------------------------*/
    /* INSERT 'NO MERGE' PO ITEM AUDIT*/
    /* ----------------------------------------------------------*/

    /* Load data of maintenance item row (before changes)*/
    /* to po item audit record*/

    set VPOAIT02 empty;

    VPOAIT02.XGPCD = PB0VW02.XGPCD[PB0VSUB1]; /* GPC code*/
    VPOAIT02.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1]; /* PO reg*/
    VPOAIT02.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1]; /* PO number*/
    VPOAIT02.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
    VPOAIT02.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
    VPOAIT02.XDMCD = PB0VW02.XDMCD[PB0VSUB1];
    VPOAIT02.XQACD = PB0VW02.XQACD[PB0VSUB1];
    VPOAIT02.XOWCD = PB0VW02.XOWCD[PB0VSUB1];
    VPOAIT02.PC2INSEG = PB0VW02.PC2INSEG[PB0VSUB1];
    VPOAIT02.XPGCD = PB0VW02.XPGCD[PB0VSUB1];
    VPOAIT02.XUMCD = PB0VW02.XUMCD[PB0VSUB1];
    VPOAIT02.PCFSECD = PB0VW02.PCFSECD[PB0VSUB1];
    VPOAIT02.PC3POIDT = PB0VW02.PC3POIDT[PB0VSUB1];
    VPOAIT02.FY1FCTYC = PB0VW02.FY1FCTYC[PB0VSUB1];
    VPOAIT02.PC6ETSDT = PB0VW02.PC6ETSDT[PB0VSUB1];
    VPOAIT02.PC6OETS = PB0VW02.PC6OETS[PB0VSUB1];
    VPOAIT02.PC6RTADT = PB0VW02.PC6RTADT[PB0VSUB1];
    VPOAIT02.YMTCD = PB0VW02.YMTCD[PB0VSUB1];
    VPOAIT02.XWHCD = PB0VW02.XWHCD[PB0VSUB1];
    VPOAIT02.PC2CUXID = PB0VW02.PC2CUXID[PB0VSUB1];
    VPOAIT02.PC6XCTCD = PB0VW02.PC6XCTCD[PB0VSUB1];
    VPOAIT02.PC6CXNBR = PB0VW02.PC6CXNBR[PB0VSUB1];
    VPOAIT02.PC6PLAN = PB0VW02.PC6PLAN[PB0VSUB1];
    VPOAIT02.XDSCD = PB0VW02.XDSCD[PB0VSUB1];
    VPOAIT02.YSMXDV = PB0VW02.YSMXDV[PB0VSUB1];
    VPOAIT02.PC4ORTYP = PB0VW02.PC4ORTYP[PB0VSUB1];
    VPOAIT02.XPRCD = PB0VW02.XPRCD[PB0VSUB1];

    VPOAIT02.OP1CUOID = PB0VW02.OP1CUOID[PB0VSUB1];
    VPOAIT02.OP1NORID = PB0VW02.OP1NORID[PB0VSUB1];
    if (PB0VW02.OP1CUOID[PB0VSUB1] > 0)
      PB0VW01.PB0VW-FRMT-CUST-ORD = PB0VW02.OP1CUOID[PB0VSUB1];
      VPOAIT02.OP1PARTN = PB0VW01.PB0VW-FRMT-PART-NBR;
    else
      VPOAIT02.OP1PARTN = " ";
    end

    VPOAIT02.PG1SC4CD = PB0VW02.PG1SC4CD[PB0VSUB1];
    VPOAIT02.PCJGLOFL = "N";
    VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

    VPOAIT02.YACCD = PB0VM002.YACCD;

    VPOAIT02.PCJSEQNO = 0; /* Audit sequence number*/

    /* --------------------------------------------------------------*/
    /* Get value of amendment indicator based on PO header data*/
    /* --------------------------------------------------------------*/

    if (VPOHDR02.PC3NISFL == "Y"
     || VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5";
    else
      VPOAIT02.PCJAMEND = "3";
    end

              /* ***** ETS DATE CHANGE *******/

    if (PB0VM002.ETSDT > 0) /* vramac*/
      /* IF PB0VW02.PC6ETSDT(PB0VSUB1) NE VPOITM05.PC6ETSDT;*/
      if (PB0VW02.PC6ETSDT[PB0VSUB1] != PB0VM002.ETSDT) /* vramac*/
        VPOAIT02.PCIBFRN = PB0VW02.PC6ETSDT[PB0VSUB1]; /* Before*/
        /* MOVE vpOITM05.PC6ETSDT TO VPOAIT02.PCIAFTN;/*  After*/
        VPOAIT02.PCIAFTN = PB0VM002.ETSDT; /* After*/
        VPOAIT02.YOACD = "65"; /* ETS CHANGE - NO SPLIT*/

        PB0VSA1(); /* Get audit record flags*/

        PB0VSA2(); /* Insert item audit row*/

        VPOAIT02.PCIBFRN = 0; /* Init. numeric chg. field 'before'*/
        VPOAIT02.PCIAFTN = 0; /* and 'after'*/

      end
    end

              /* ***** TRANS MODE CHANGE *******/

    if (PB0VM002.YMTCD != " ") /* vramac*/
      /* IF PB0VW02.YMTCD(PB0VSUB1) NE vpoitm05.YMTCD;*/
      if (PB0VW02.YMTCD[PB0VSUB1] != PB0VM002.YMTCD) /* vramac*/
        VPOAIT02.PCIBFRA = PB0VW02.YMTCD[PB0VSUB1]; /* Before*/
        /* MOVE VPOITM05.YMTCD TO VPOAIT02.PCIAFTA;/*  After*/
        VPOAIT02.PCIAFTA = PB0VM002.YMTCD; /* After*/
        VPOAIT02.YOACD = "67"; /* MODE CHANGE - NO SPLIT*/

        PB0VSA1(); /* Get audit record flags*/

        PB0VSA2(); /* Insert item audit row*/

        VPOAIT02.PCIBFRA = " "; /* Init. alpha chg. field 'before'*/
        VPOAIT02.PCIAFTA = " "; /* and 'after'*/

      end
    end

              /* ***** ITEM STATUS CHANGE *******/

    if (PB0VM002.PC6STAT != " ") /* vramac*/
      /* IF PB0VW02.PC6STAT(PB0VSUB1) NE VPOITM05.PC6STAT;*/
      if (PB0VW02.PC6STAT[PB0VSUB1] != PB0VM002.PC6STAT) /* vramac*/
        VPOAIT02.PCIBFRA = PB0VW02.PC6STAT[PB0VSUB1]; /* Before*/
        /* MOVE VPOITM05.PC6STAT TO VPOAIT02.PCIAFTA;/*  After*/
        VPOAIT02.PCIAFTA = PB0VM002.PC6STAT; /* After*/
        VPOAIT02.YOACD = "76"; /* ITEM STATUS CODE*/

        PB0VSA1(); /* Get audit record flags*/

        PB0VSA2(); /* Insert item audit row*/

        VPOAIT02.PCIBFRA = " "; /* Init. alpha chg. field 'before'*/
        VPOAIT02.PCIAFTA = " "; /* and 'after'*/

      end
    end
  end
end // end PB0V552

// Select unique from VPOREG01
Function PB0VS10()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/

  VPOREG01.PO-REG-CD = PB0VW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to verify REGION.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0VM001.PO-REG-CD cursor, bold;
        PB0VM001.XXXPRCNM = "PB0VS10"; /* Module name*/
        converseLib.validationFailed(528); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS10"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS10"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS10

// Access DPRODC.VPOREG01
Function PB0VS15()
   /* ------------------------------------------------------------*/
   /* Read DPRODC.VPOREG01. Load REGION array.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/

  PB0VW01.STOPSW = " ";

  PB0VS16(); /* Declare and open cursor*/

  PB0VS17(); /* Fetch first row*/

  if (PB0VW01.STOPSW == "Y") /* No data found*/
    converseLib.validationFailed(276); /* Display msg*/
    PB0VM001.XXXPRCNM = "PB0VS15"; /* Module name*/
    set PB0VM001.PO-REG-CD cursor, bold; /* Highlight field*/
  end

  PB0VW01.REGSUB = 1; /* Initialize region subscript*/

  while (PB0VW01.STOPSW != "Y" /* Load region array*/
   && PB0VW01.REGSUB <= 99)

    PB0VW01.PO-REG[REGSUB] = VPOREG01.PO-REG-CD;
    PB0VW01.PO-REG-DESC[REGSUB] = VPOREG01.PO-REG-DESC;

    PB0VW01.REGSUB = PB0VW01.REGSUB + 1; /* Increment region subscript*/

    PB0VS17(); /* Fetch next row*/

  end

  PB0VW01.REGSUBMAX = PB0VW01.REGSUB - 1; /* Save number of entries*/

  PB0VS18(); /* Close cursor*/

  PB0VW01.REG-ARRAY-SW = "Y"; /* Set up 'region array loaded' switch*/

end // end PB0VS15

// Select rows from VPOREG01
Function PB0VS16()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS16"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS16"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS16

// Fetch row from VPOREG01
Function PB0VS17()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOREG01.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("N1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS17"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS17"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS17

// Close cursor for VPOREG01
Function PB0VS18()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOREG01*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("C1", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS18"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS18"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS18

// Verify season/year
Function PB0VS20()
  set VPOVFY01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOVFY01.PCFSECD = PB0VM001.PB0VSESN; /* PC-PO-ID-SESN-CD*/
  VPOVFY01.XXXSTAT = "A"; /* Status*/
  VPOVFY01.PCFBUYMO = -1; /* Buy month*/

  PB0VS21(); /* Declare and open cursor*/

  PB0VS22(); /* Fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(129); /* Display error msg*/
    PB0VM001.XXXPRCNM = "PB0VS20"; /* Module name*/
    set PB0VM001.PB0VSESN cursor, bold; /* Highlight fields*/
  end

  PB0VS23(); /* Close cursor*/

end // end PB0VS20

// Select rows from VPOVFY01
Function PB0VS21()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOVFY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S1", SQLCA, VPOVFY01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS21"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS21"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY01.VPOVFY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS21

// Fetch row from VPOVFY01
Function PB0VS22()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOVFY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N1", SQLCA, VPOVFY01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS22"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS22"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY01.VPOVFY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS22

// Close cursor for VPOVFY01
Function PB0VS23()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOVFY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C1", SQLCA, VPOVFY01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS23"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS23"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOVFY01.VPOVFY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS23

// Select unique from VFCTY001
Function PB0VS30()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PCWREC.XGPCD; /* GPC*/

  FY1REC.FY1FCTYC = PB0VM001.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select row from DFCTY.VFCTY001 to verify FACTORY CODE.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0VM001.FY1FCTYC cursor, bold;
        PB0VM001.XXXPRCNM = "PB0VS30"; /* Module name*/
        converseLib.validationFailed(32); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS30"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS30"; /* Module name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS30

// removes leading zeros
Function PB0VS35()
   /* ------------------------------------------------------------*/
   /* removes the leading zeros from the first 8 characters of*/
   /* a 9 byte field.*/
   /* ------------------------------------------------------------*/

  PB0VW01.SIGNIFICANT-FOUND = "N";

  if (PB0VW01.REMOVE-LEAD-ZERO1 == "0")
    PB0VW01.REMOVE-LEAD-ZERO1 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO2 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO2 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO3 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO3 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO4 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO4 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO5 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO5 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO6 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO6 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO7 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO7 = " ";
  else
    PB0VW01.SIGNIFICANT-FOUND = "Y";
  end

  if (PB0VW01.REMOVE-LEAD-ZERO8 == "0"
   && PB0VW01.SIGNIFICANT-FOUND == "N")
    PB0VW01.REMOVE-LEAD-ZERO8 = " ";
  end

end // end PB0VS35

// Date routine
Function PB0VS40()
   /* ------------------------------------------------------------*/
   /* Set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* Move date type to record*/
                                   /* (ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Calculate date routine*/

  if (TA2REC.TA2RTNCD != 0) /* Invalid date*/

    PB0VM001.XXXPRCNM = "PB0VS40"; /* Module name*/
    converseLib.validationFailed(38); /* Display error msg*/

  end

end // end PB0VS40

// Verify style/color
Function PB0VS50()
  set PG2REC empty; /* Clear row storage area*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* Format key information*/
  PG2REC.SY1STNBR = PB0VM001.SY1STNBR;
  if (PB0VM001.SY2CLRID > " ")
    PG2REC.SY2CLRID = PB0VM001.SY2CLRID;
  else
    PG2REC.SY2CLRID = "***";
  end
  PG2REC.XDMCD = "**";

  PB0VS51(); /* Declare and open cursor*/

  PB0VS52(); /* Fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    if (PG2REC.SY2CLRID == "***")
      converseLib.validationFailed(196); /* Display error msg*/
      set PB0VM001.SY1STNBR cursor, bold; /* Highlight field*/
    else
      converseLib.validationFailed(52);
      set PB0VM001.SY1STNBR bold; /* Highlight field*/
      set PB0VM001.SY2CLRID cursor, bold;
    end
    PB0VM001.XXXPRCNM = "PB0VS50"; /* Module name*/
  end

  PB0VS53(); /* Close cursor*/

end // end PB0VS50

// Select rows from VSYCLR01
Function PB0VS51()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODG.VSYCLR01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS51"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS51"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS51

// Fetch row from VSYCLR01
Function PB0VS52()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODG.VSYCLR01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS52"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS52"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS52

// Close cursor for VSYCLR01
Function PB0VS53()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODG.VSYCLR01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C5", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS53"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS53"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS53

// Select unique from VPOHDR02
Function PB0VS60()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/

  VPOHDR02.XGPCD = PCWREC.XGPCD; /* GPC*/

  VPOHDR02.PC3PONBR = PB0VW01.PC3PONBR; /* PO number*/

  VPOHDR02.PO-REG-CD = PB0VW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOHDR02 to verify PO NUMBER.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("Z ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PB0VM001.PONBR cursor, bold;
        PB0VM001.XXXPRCNM = "PB0VS60"; /* Module name*/
        converseLib.validationFailed(69); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS60"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS60"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

end // end PB0VS60

// Select unique from VPOTYP01
Function PB0VS70()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOTYP01 empty; /* Row storage area*/

  VPOTYP01.XGPCD = PCWREC.XGPCD; /* GPC*/
  VPOTYP01.PC4ORTYP = PB0VM001.PC4ORTYP; /* PO type code*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOTYP01 to verify P.O. TYPE*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        set PB0VM001.PC4ORTYP cursor, bold;
        PB0VM001.XXXPRCNM = "PB0VS70"; /* Module name*/
        converseLib.validationFailed(33); /* Send error msg*/
        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS70"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS70"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS70

// Access DPRODC.VPOTYP01
Function PB0VS75()
   /* ------------------------------------------------------------*/
   /* Read DPRODC.VPOTYP01. Load PO TYPE array.*/
   /* ------------------------------------------------------------*/

  set VPOTYP01 empty; /* Clear row storage area*/
                                  /* Format key information*/
  VPOTYP01.XGPCD = PCWREC.XGPCD; /* GPC*/

  PB0VW01.STOPSW = " ";

  PB0VS76(); /* Declare and open cursor*/

  PB0VS77(); /* Fetch first row*/

  if (PB0VW01.STOPSW == "Y") /* No data found*/
    converseLib.validationFailed(276); /* Display msg*/
    PB0VM001.XXXPRCNM = "PB0VS75"; /* Module name*/
    set PB0VM001.PC4ORTYP cursor, bold; /* Highlight field*/
  end

  PB0VW01.TYPSUB = 1; /* Initialize type subscript*/

  while (PB0VW01.STOPSW != "Y" /* Load type array*/
   && PB0VW01.TYPSUB <= 99)

    PB0VW01.PO-TYP[TYPSUB] = VPOTYP01.PC4ORTYP;
    PB0VW01.PO-TYP-DESC[TYPSUB] = VPOTYP01.PC4DESC;

    PB0VW01.TYPSUB = PB0VW01.TYPSUB + 1; /* Increment type subscript*/

    PB0VS77(); /* Fetch next row*/

  end

  PB0VW01.TYPSUBMAX = PB0VW01.TYPSUB - 1; /* Save number of entries*/

  PB0VS78(); /* Close cursor*/

  PB0VW01.TYP-ARRAY-SW = "Y"; /* Set up 'type array loaded' switch*/

end // end PB0VS75

// Select rows from VPOTYP01
Function PB0VS76()
   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS76"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS76"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS76

// Fetch row from VPOTYP01
Function PB0VS77()
   /* ------------------------------------------------------------*/
   /* Fetch the row from DPRODC.VPOTYP01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("N1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set stop processing switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS77"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS77"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS77

// Close cursor for VPOTYP01
Function PB0VS78()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("C1", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS78"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS78"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS78

// Select rows from VPOITM05
Function PB0VS80()
   /* --------------------------------------------------------------*/
   /* Clear the row storage area and format the select information.*/
   /* --------------------------------------------------------------*/

  set VPOITM05 empty;
  set PCYREC empty;

  VPOITM05.XGPCD = PCWREC.XGPCD; /* GPC*/

  if (PB0VM001.PONBR > 0) /* PO number entered*/

    PB0VW01.POSELSW = "Y"; /* Set 'PO selected' switch*/

    VPOITM05.PC3PONBR = PB0VM001.PONBR;

    if (PB0VM001.PO-REG-CD > " ") /* Region entered*/
      VPOITM05.PO-REG-CD = PB0VW01.PO-REG-CD;
    else
      VPOITM05.PO-REG-CD = "*";
    end

    if (PB0VM001.FY1FCTYC > " ") /* Factory entered*/
      VPOITM05.FY1FCTYC = PB0VM001.FY1FCTYC;
    else
      VPOITM05.FY1FCTYC = "*";
    end

    if (PB0VM001.SY1STNBR > " ") /* Style entered*/
      VPOITM05.SY1STNBR = PB0VM001.SY1STNBR;
    else
      VPOITM05.SY1STNBR = "*";
    end

    if (PB0VM001.SY2CLRID > " ") /* Color entered*/
      VPOITM05.SY2CLRID = PB0VM001.SY2CLRID;
    else
      VPOITM05.SY2CLRID = "*";
    end

    if (PB0VM001.PC4ORTYP > " ") /* Type entered*/
      VPOITM05.PC4ORTYP = PB0VM001.PC4ORTYP;
    else
      VPOITM05.PC4ORTYP = "*";
    end

    PCYREC.PCYFUNC = "ZT";

  else /* No PO entered*/

    PB0VW01.POSELSW = " "; /* Init. 'PO selected' switch*/

    set VPOHDR02 empty;

    VPOITM05.PO-REG-CD = PB0VW01.PO-REG-CD; /* Region*/

    VPOITM05.FY1FCTYC = PB0VM001.FY1FCTYC; /* Factory*/

    VPOITM05.PCFSECD = PB0VM001.PB0VSESN; /* PC-PO-ID-SESN-CD*/

                                  /* Format PC-PO-ID-MO-RNG*/
    PB0VW01.PB0VYEAR = PB0VM001.PB0VYR;
    PB0VW01.PB0VBUYMO = PB0VM001.PB0VBUYMO;
    if (PB0VM001.PB0VDELMO > 0) /* Delivery month entered*/
      PB0VW01.PB0VDELMO = PB0VM001.PB0VDELMO;
      PB0VW01.PB0VPOIDT = PB0VW01.PB0VPOIDT8;
      PCYREC.PCYFRDT = PB0VW01.PB0VPOIDT;
      PCYREC.PCYTODT = PB0VW01.PB0VPOIDT;
    else
      PB0VW01.PB0VDELMO = 1;
      PB0VW01.PB0VPOIDT = PB0VW01.PB0VPOIDT8;
      PCYREC.PCYFRDT = PB0VW01.PB0VPOIDT;
      PB0VW01.PB0VDELMO = 12;
      PB0VW01.PB0VPOIDT = PB0VW01.PB0VPOIDT8;
      PCYREC.PCYTODT = PB0VW01.PB0VPOIDT;
    end

    if (PB0VM001.SY1STNBR > " ") /* Style entered*/
      VPOITM05.SY1STNBR = PB0VM001.SY1STNBR;
    else
      VPOITM05.SY1STNBR = "*";
    end

    if (PB0VM001.SY2CLRID > " ") /* Color entered*/
      VPOITM05.SY2CLRID = PB0VM001.SY2CLRID;
    else
      VPOITM05.SY2CLRID = "*";
    end

    if (PB0VM001.PC4ORTYP > " ") /* Type entered*/
      VPOITM05.PC4ORTYP = PB0VM001.PC4ORTYP;
    else
      VPOITM05.PC4ORTYP = "*";
    end

    PCYREC.PCYFUNC = "ZU";

  end

   /* ------------------------------------------------------------*/
   /* Select rows from DPRODC.VPOITM05*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PB0VW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS80"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS80"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS80

// Fetch row from VPOITM05
Function PB0VS81()
   /* ------------------------------------------------------------*/
   /* Fetch row from DPRODC.VPOITM05.*/
   /* ------------------------------------------------------------*/

  if (PB0VW01.POSELSW == "Y") /* If PO selected*/
    PCYREC.PCYFUNC = "GT";
  else
    PCYREC.PCYFUNC = "GU";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VW01.STOPSW = "Y"; /* Set up stop switch*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PB0VW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS81"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS81"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS81

// Close cursor for VPOITM05
Function PB0VS82()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOITM05*/
   /* ------------------------------------------------------------*/

  if (PB0VW01.POSELSW == "Y") /* If PO selected*/
    PCYREC.PCYFUNC = "QT";
  else
    PCYREC.PCYFUNC = "QU";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PB0VW01.MAP2SW = " "; /* Show MAP 1*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS82"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS82"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS82

// Purge temp. storage queue
Function PB0VS83()
   /* ------------------------------------------------------------*/
   /* Purge a temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PB0V"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (PB0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PB0VS83"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0VM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PB0VW01.PB0V-PAGE-COUNT = 0; /* Reset current page number*/
  PB0VW01.PB0V-PAGE-COUNT-MAX = 0; /* Reset highest page number*/

end // end PB0VS83

// Write a page to temp. storage
Function PB0VS84()
   /* ------------------------------------------------------------*/
   /* Write a page to temporary storage queue.*/
   /* ------------------------------------------------------------*/

  /* MOVE 3268 TO PB0VW02.PB0VLEN;    /* Temporary storage length*/
  PB0VW02.PB0VLEN = 3592; /* Temporary storage length*/
  TA5REC.TA5APPID = "PB0V"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PB0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* Return code normal*/
    PB0VW01.PB0V-PAGE-COUNT = TA5REC.TA5TSQIX; /* Page number*/
  else /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0VS84"; /* Module name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0VM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0VM002.XXXPRCNM = "PB0VS84"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to display map*/

  end

end // end PB0VS84

// Rewrite temp. storage page
Function PB0VS85()
   /* ------------------------------------------------------------*/
   /* Rewrite a temporary storage page*/
   /* ------------------------------------------------------------*/

  /* MOVE 3268 TO PB0VW02.PB0VLEN;     /* Temporary storage length*/
  PB0VW02.PB0VLEN = 3592; /* Temporary storage length*/
  TA5REC.TA5APPID = "PB0V"; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PB0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0VS85"; /* Process name*/
    TA1REC.TA1LOC = "REWRITE TEMPORARY STORAGE PAGE";
    TA1REC.TA1MAP = "PB0VM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0VM001.XXXPRCNM = "PB0VS85"; /* Module name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0VS85

// Read temp. storage queue
Function PB0VS86()
   /* ------------------------------------------------------------*/
   /* Read a temporary storage page of data*/
   /* ------------------------------------------------------------*/

  /* MOVE 3268 TO PB0VW02.PB0VLEN;     /* Temporary storage length*/
  PB0VW02.PB0VLEN = 3592; /* Temporary storage length*/
  TA5REC.TA5APPID = "PB0V"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PB0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PB0VS86"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PB0VM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PB0VM001.XXXPRCNM = "PB0VS86"; /* Module name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PB0VS86

// Check if row is on VPOITM05
Function PB0VS90()
   /* ------------------------------------------------------------*/
   /* Check if the row exists on DPRODC.VPOITM05.*/
   /* Select unique po item row.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "ZE";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Found row*/
      if (VPOITM05.PC6STAT != "OP" /* If not open status*/
       && VPOITM05.PC6STAT != "FC") /* or not factory closed*/
        PB0VM002.XXXPRCNM = "PB0VS90"; /* Module identification*/
        move PB0VSUB1 to PB0VSUB2 withV60Compat;
        set PB0VM002.PB0VSEL[PB0VSUB1] cursor, bold;
        PB0VW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' sw.*/
        TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page nbr*/
        PB0VS86(); /* Read tsq page*/
        PB0VW01.MAP2SW = "Y"; /* Show MAP 2*/
        converseLib.validationFailed(368); /* Cannot merge plans if*/
                                   /* status not 'OP'*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back changes*/
        exit stack; /* Exit to display error on the map*/

      else
  /*      IF VPOITM05.PC-SAP-PO-NBR GT ' ';*/
  /*       MOVE 'N' TO PB0VW01.MERGESW; /* Set up merge switch*/
  /*      ELSE;*/
        if (VPOITM05.PC6STAT == "FC") /* do not merge factory closed*/
          PB0VW01.MERGESW = "N"; /* Set up merge switch*/
        else
          PB0VW01.MERGESW = "Y"; /* Set up merge switch*/
        end
  /*      END;*/
      end

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100)

        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0VM001.XXXPRCNM = "PB0VS90"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE  SE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS90"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack; /* Exit to display map*/

end // end PB0VS90

// Check if qtys shipped
Function PB0VS91()
   /* ------------------------------------------------------------*/
   /* Check VCPLHD02 to see if qtys have been shipped:*/
   /* can not merge plans if products have been shipped*/
   /* ------------------------------------------------------------*/

  PB0VW01.TSISHPQT = 0; /* Init. total shipped qtys*/
  PB0VW01.STOPSW = " "; /* Init. stop processing switch*/
   /* ------------------------------------------------------------*/
   /* Open cursor to select shipped quantities.*/
   /* Accumulate the total quantities shipped for*/
   /* the product & destination*/
   /* ------------------------------------------------------------*/

  PB0VS92(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Balance to Ship"*/
   /* ------------------------------------------------------------*/

  PB0VS93(); /* Fetch the first selected row*/

  while (PB0VW01.STOPSW == " ") /* Until end of cursor data*/

    if (TSTREC.TSISTAT == "IT" /* Shipped quantities*/
     || TSTREC.TSISTAT == "RC" /* Received quantities*/
     || TSTREC.TSISTAT == "CC") /* Custom carried quantities*/

      PB0VW01.TSISHPQT = PB0VW01.TSISHPQT + TSTREC.TSISHPQT;

    end

    PB0VS93(); /* Fetch next selected row*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PB0VS94(); /* Close the cursor*/

  if (PB0VW01.TSISHPQT != 0) /* Products have been shipped*/

    PB0VM002.XXXPRCNM = "PB0VS91"; /* Module identification*/
    set PB0VM002.PB0VSEL[PB0VSUB1] cursor, bold;
    PB0VW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' sw.*/
    TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page nbr*/
    PB0VS86(); /* Read tsq page*/
    PB0VW01.MAP2SW = "Y"; /* Show MAP 2*/
    converseLib.validationFailed(218); /* Cannot merge when products have*/
                                   /* been shipped*/
    exit stack; /* Exit to display error on the map*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back changes*/

  end

end // end PB0VS91

// Select rows from VCPLHD02
Function PB0VS92()
   /* ------------------------------------------------------------*/
    /* Set up key for select, open cursor*/
   /* ------------------------------------------------------------*/

  set TSTREC empty; /* Initialize record*/

  TSTREC.XGPCD = PB0VW02.XGPCD[PB0VSUB1];
  TSTREC.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1];

       /* Destination fields*/
  TSTREC.PC2CUXID = PB0VW02.PC2CUXID[PB0VSUB1];
  TSTREC.XWHCD = PB0VW02.XWHCD[PB0VSUB1];

       /* Product fields*/
  TSTREC.PC2INSEG = PB0VW02.PC2INSEG[PB0VSUB1];
  TSTREC.XOWCD = PB0VW02.XOWCD[PB0VSUB1];
  TSTREC.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
  TSTREC.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
  TSTREC.XDMCD = PB0VW02.XDMCD[PB0VSUB1];
  TSTREC.XQACD = PB0VW02.XQACD[PB0VSUB1];
  TSTREC.XPGCD = PB0VW02.XPGCD[PB0VSUB1];
  TSTREC.XUMCD = PB0VW02.XUMCD[PB0VSUB1];

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("S1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0VM001.XXXPRCNM = "PB0VS92"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS92"; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack; /* Exit to display map*/

end // end PB0VS92

// Fetch VCPLHD02 row
Function PB0VS93()
   /* ------------------------------------------------------------*/
   /* Fetch a row from VCPLHD02*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("N1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch a row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of processing.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PB0VW01.STOPSW = "Y"; /* Indicate end of cursor data*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0VM001.XXXPRCNM = "PB0VS93"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS93"; /* Module name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack; /* Exit to display map*/

end // end PB0VS93

// Close cursor - VCPLHD02
Function PB0VS94()
   /* ------------------------------------------------------------*/
   /* Close cursor for VCPLHD02*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("C1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PB0VM001.XXXPRCNM = "PB0VS94"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS94"; /* Module name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack; /* Exit to display map*/

end // end PB0VS94

// Check receipt data
Function PB0VS95()
   /* ------------------------------------------------------------*/
   /* Check VFYPO002 to see if item has reicept data:*/
   /* can not merge plans if products have receipt data*/
   /* ------------------------------------------------------------*/

  set VFYPO002 empty;

  VFYPO002.PC2INSEG = PB0VW02.PC2INSEG[PB0VSUB1];

   /* Owner group field*/
  VFYPO002.XOWCD = "*";
  if (PB0VW02.XWHCD[PB0VSUB1] == "09") /* Apparel*/
         /* leave OG '*'*/
  else
    if (PB0VW02.XGPCD[PB0VSUB1] == "03") /* Apparel*/
      set PG2REC empty;
      PG2REC.XGPCD = PB0VW02.XGPCD[PB0VSUB1];
      PG2REC.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1];
      PG2REC.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1];
      PG2REC.XDMCD = PB0VW02.XDMCD[PB0VSUB1];
      XSPG202(); /* Read the syclr rec*/
      if (PG2REC.XFMCD == "21" /* If finished good*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PB0VW02.XOWCD[PB0VSUB1]; /* Owner group*/
      end
    end
  end

  VFYPO002.XWHCD = PB0VW02.XWHCD[PB0VSUB1];

  PB0VW01.PCMRCPTQ = 0; /* Receipt data accumulator*/
  PB0VW01.STOPSW = " "; /* Initialize stop processing switch*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - process the set of rows for value in receipt array*/
   /* - cannot merge plans if receipt data exists*/
   /* ------------------------------------------------------------*/

  PB0VSB1(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch first receipt data row*/
   /* ------------------------------------------------------------*/

  PB0VSB2(); /* Fetch first selected row*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* for received data in working storage set end of cursor and*/
     /* signify error for merging plans not allowed if either plan*/
     /* has receipt data.*/
    /* ------------------------------------------------------------*/

  while (PB0VW01.STOPSW == " ") /* Until end of cursor data*/

    if (VFYPO002.YRSCD == "10") /* Good status code*/

      PB0VW01.PB0VSUB2 = 1; /* Initialize general index*/

      while (PB0VW01.PB0VSUB2 <= 40
       && PB0VW01.STOPSW == " ") /* ===> Until end of cursor data*/
        if (VFYPO002.PCMRCPTQ[PB0VSUB2] != 0)
          PB0VW01.PCMRCPTQ = VFYPO002.PCMRCPTQ[PB0VSUB2];
          PB0VW01.STOPSW = "Y";
        end
        PB0VW01.PB0VSUB2 = PB0VW01.PB0VSUB2 + 1;
      end

    end

    PB0VSB2(); /* Fetch next selected row*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/

  PB0VSB3(); /* Close the selected set cursor*/

  if (PB0VW01.PCMRCPTQ != 0) /* Products has receipt data*/

    PB0VM002.XXXPRCNM = "PB0VS95"; /* Module identification*/
    set PB0VM002.PB0VSEL[PB0VSUB1] cursor, bold;
    PB0VW01.WRITE-TSQ-SW = "Y"; /* Set 'data written to tsq' sw.*/
    TA5REC.TA5TSQIX = PB0VW01.PB0V-PAGE-COUNT; /* Page nbr*/
    PB0VS86(); /* Read tsq page*/
    PB0VW01.MAP2SW = "Y"; /* Show MAP 2*/
    converseLib.validationFailed(218); /* Cannot merge: products*/
                                   /* shipped/received*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back changes*/
    exit stack; /* Exit to display error on the map*/

  end

end // end PB0VS95

// Update row on VPOITM05
Function PB0VS96()
   /* ------------------------------------------------------------*/
   /* Update row of DPRODC.VPOITM05*/
   /* ------------------------------------------------------------*/

  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/

  PCYREC.PCYFUNC = "VA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PB0VM001.XXXPRCNM = "PB0VS96"; /* Module name*/
        converseLib.validationFailed(12); /* Send message*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back changes*/
        exit stack; /* Exit to display map*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PB0VM001.XXXPRCNM = "PB0VS96"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ITEM ROW           ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VS96"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/

  exit stack; /* Exit to display map*/

end // end PB0VS96

// Select row from VPOSIZ02
Function PB0VS97()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table (VPOSIZ02).*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("Z ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(12); /* 'Updated by another user' msg*/
        PB0VM001.XXXPRCNM = "PB0VS97"; /* Module identification*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back all changes*/
        exit stack; /* Exit to display map*/
      end
    end

  end

  PB0VM001.XXXPRCNM = "PB0VS97"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS97"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS97

// Update row on VPOSIZ02
Function PB0VS98()
   /* ------------------------------------------------------------*/
   /* Update unique row on the P.O. Size Table (VPOSIZ02)*/
   /* ------------------------------------------------------------*/

  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/

  try
    call "VPOSIZ02" ("V ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PB0VM001.XXXPRCNM = "PB0VS98"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 12; /* Data updated by another user*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all D.B changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all D.B changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PB0VS98"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PB0VS98

// Get audit item seq. number
Function PB0VSA0()
   /* ----------------------------------------------------------*/
    /* Select max. item audit sequence number (from VPOAIT02)*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "H1";

   /* ------------------------------------------------------------*/
   /* -305 return code indicates that null value retrieved -- make*/
   /* plan number 1, otherwise add one to the seq. nbr returned*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PB0VW01.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Null value retrieved*/
      PB0VW01.PCJSEQNO = 1;
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0VM001 initial;
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all d.b. changes*/

  PB0VM001.XXXPRCNM = "PB0VSA0";
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0VSA0"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM AUDIT ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PB0VSA0

// Load chg memo and oa memo flag
Function PB0VSA1()
   /* ------------------------------------------------------------*/
   /* Determine if the change memo flag is set and load the*/
   /* appropriate change memo flag accordingly.*/
   /* Do the same for order ajustment memo flag.*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* PO is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* Change memo flag*/
        if (PB0VW01.WETSDT != PB0VM002.ETSDT /* IF ETS changed*/
         || PB0VW01.YMTCD != PB0VM002.YMTCD) /* or mode changed*/
          VPOAIT02.PCJMEMO = "N";
        else
          VPOAIT02.PCJMEMO = " ";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* Order Adjustment flag*/
        if (PB0VW01.WETSDT != PB0VM002.ETSDT) /* IF ETS changed*/
          if (PB0VW01.YMTCD == PB0VM002.YMTCD) /* Mode not changed*/
            VPOAIT02.PCJOAPRT = "N";
          else
            VPOAIT02.PCJOAPRT = " ";
          end
        else
          VPOAIT02.PCJOAPRT = " ";
        end
      else
        VPOAIT02.PCJOAPRT = "N";
      end

    else /* Code not in table*/

      PB0VM001.XXXPRCNM = "PB0VSA1"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end

end // end PB0VSA1

// Update po item audit table
Function PB0VSA2()

   /* ------------------------------------------------------------*/
   /* Insert a row into DPRODC.VPOAIT02*/
   /* ------------------------------------------------------------*/

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date of change*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time of change*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

  try
    call "VPOAIT02" ("I ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VPOAIT02.PCJNETQT = 0; /* Reset audit fields*/
      VPOAIT02.PCIBFRN = 0;
      VPOAIT02.PCIAFTN = 0;
      VPOAIT02.PCIBFRA = " ";
      VPOAIT02.PCIAFTA = " ";

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PB0VM001.XXXPRCNM = "PB0VSA2"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PB0VM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT ITEM AUDIT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PB0VSA2"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/

  exit stack; /* Exit to display map*/

end // end PB0VSA2

// Insert size audit row VPOASZ02
Function PB0VSA3()
   /* ------------------------------------------------------------*/
   /* Insert size audit row into data base*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("I ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0VM001 initial;
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PB0VM001.XXXPRCNM = "PB0VSA3";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0VSA3"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PB0VSA3

// Select rows from VFYPO002
Function PB0VSB1()
   /* ------------------------------------------------------------*/
    /* Set up key for select from VFYPO002, open cursor*/
   /* ------------------------------------------------------------*/

  VFYPO002.XGPCD = PB0VW02.XGPCD[PB0VSUB1];
  VFYPO002.PO-REG-CD = PB0VW02.PO-REG-CD[PB0VSUB1]; /* PO Region*/
  VFYPO002.PC3PONBR = PB0VW02.PC3PONBR[PB0VSUB1]; /* PO number*/
  VFYPO002.SY1STNBR = PB0VW02.SY1STNBR[PB0VSUB1]; /* Style number*/
  VFYPO002.SY2CLRID = PB0VW02.SY2CLRID[PB0VSUB1]; /* Color code*/
  VFYPO002.XDMCD = PB0VW02.XDMCD[PB0VSUB1]; /* Dimension code*/
  VFYPO002.XQACD = PB0VW02.XQACD[PB0VSUB1]; /* Quality code*/
  VFYPO002.XPGCD = PB0VW02.XPGCD[PB0VSUB1]; /* Package code*/
  VFYPO002.XUMCD = PB0VW02.XUMCD[PB0VSUB1]; /* Unit of measure*/

  try
    call "VFYPO002" ("Z1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0VM001 initial;
  end

  PB0VM001.XXXPRCNM = "PB0VSB1"; /* Module name*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0VSB1"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack;

end // end PB0VSB1

// Fetch a row from VFYPO002
Function PB0VSB2()
   /* ------------------------------------------------------------*/
   /* Fetch a row from VFYPO002*/
   /* If row not found return to previous process.*/
   /* If system error, display a message*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("G1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PB0VW01.STOPSW = "Y"; /* Indicate end of cursor data*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0VM001 initial;
  end

  PB0VM001.XXXPRCNM = "PB0VSB2";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0VSB2"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack;

end // end PB0VSB2

// Close cursor for VFYPO002
Function PB0VSB3()
   /* ------------------------------------------------------------*/
   /* Close cursor for VFYPO002*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("Q1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set PB0VM001 initial;
  end

  PB0VM001.XXXPRCNM = "PB0VSB3"; /* Module identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PB0VSB3"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back changes*/
  exit stack;

end // end PB0VSB3

// Do P.O. Header "Status" Update
Function XPPC010-DRDA()
   /* ------------------------------------------------------------*/

                        /* X P P C 0 1 0*/
                       /* ---------------*/

       /* This process group will be called to select all*/
    /* items within a certain P.O. Number and do necessary*/
    /* processing to set the Status of the P.O. Header row*/
    /* accordingly. It is only designed for GPC = "01" & "02",*/
                                  /* and GPC = "03" & "07"*/

    /* If successful, the P.O. Header will be updated and an*/
    /* audit will be written if needed.*/

   /* ***                                                     ****/
   /* ******************* REQUIRED PASS DATA *********************/
   /* ***                                                     ****/

   /* ** The following records must be added to your*/
      /* application record list:*/

    /* VPOHDR02, PC8REC, VPOAHD02 and xx0xw01*/

   /* ** You must call xx0xs01 prior to calling this routine -*/
      /* this routine will move the date/time from xx0xw01 to*/
      /* the VPOHDR02.*/

   /* ** The following fields must be moved to the PC8REC:*/
      /* use a "%GET" command to get/copy these fields.*/

   /* SET PC8REC EMPTY    ;===>initialize record*/

   /* MOVE PC??W??.XGPCD TO PC8REC.XGPCD     ;===>GPC Code*/
   /* MOVE PC??W??.PC3PONBR TO PC8REC.PC3PONBR;===>P.O. Number*/
   /* --->if  Audit comment entered on screen*/
   /* MOVE PC??W??.YACCD TO PC8REC.YACCD;===>audit comment*/

    /* Any bad DB2 return codes will be handled by the*/
    /* executed statement groups.*/

    /* Note: This process group will not do a CALL EZECOMIT*/
          /* command.  It will have to be done by the calling*/
          /* program.  It will however do a CALL EZEROLLB in*/
          /* the cases where a Data Base error was detected.*/

        /* - If a  negative SQL Code is incountered, an EZEFLO*/
            /* be performed and the process name where it*/
            /* occurred will be placed in PC8REC.XXXPRCNM.*/

                        /* X P P C 0 1 0*/
                       /* ---------------*/
   /* ------------------------------------------------------------*/

  if (PC8REC.XGPCD == "01" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "03" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "07") /* ===> valid GPC Code*/

    XPPC011-DRDA(); /* ===> set appropriate status flags*/

    XPPC012(); /* ===> Load appropriate status code*/

    set VPOHDR02 empty; /* ===>initialize D.B. Call record*/

    VPOHDR02.PO-REG-CD = PC8REC.PO-REG-CD; /* Region*/
    VPOHDR02.XGPCD = PC8REC.XGPCD;
    VPOHDR02.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. Number*/

    XSPCS14-DRDA(); /* ===> Get P.O. Header row*/

    /* ------------------------------------------------------------*/
      /* If the Current Header Status in the D.B. is not the same*/
      /* as the status calculated in this process, then:*/
        /* 1. Update the P.O. Header row.*/
        /* 2. Insert a P.O. Header Audit row.*/
    /* ------------------------------------------------------------*/

    if (VPOHDR02.YPUCD != PC8REC.YPUCD)

      set VPOAHD02 empty; /* ===> intialize Header Audit record*/
      VPOAHD02.PCIBFRA = VPOHDR02.YPUCD; /* ===> Status before*/
      VPOAHD02.PCIAFTA = PC8REC.YPUCD; /* ===> Status after*/

      VPOHDR02.YPUCD = PC8REC.YPUCD; /* ===> Load D.B. Call record*/
      VPOHDR02.PC3STADT = XX0XW01.XX0XWDAT; /* ===> update status dt*/
      VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ===> update change dt*/
      VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> update change time*/

      XSPCS15-DRDA(); /* ===> Update P.O. Header row*/

      if (PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
       || PC8REC.XGPCD == "03") /* ===> valid GPC Code*/

        XSPCS16-DRDA(); /* ===> insert P.O. Header audit row*/

      end

    end

  end /* ===>Valid GPC Code check*/

   /* **                                                        ***/
   /* ********************** End of XPPC010 ***********************/
end // end XPPC010-DRDA

// Set appropriate status flags
Function XPPC011-DRDA()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  set of all items*/
   /* within the  pass data. (ie. GPC, P.O. Number.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC8REC.PC8WSWT = "N"; /* ===> initialize temp. cursor "ITEM"*/
  PC8FLOP = "N";
  PC8FLCL = "N";
  PC8FLNC = "N";
  PC8FLFC = "N";
  PC8FLCX = "N";
  PC8FLTN = "N";

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.PO-REG-CD = PC8REC.PO-REG-CD; /* Region*/
  VPOITM05.XGPCD = PC8REC.XGPCD;
  VPOITM05.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. number*/

  XSPCS11-DRDA(); /* ========> select set and open cursor*/

  XSPCS12-DRDA(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and set status flags  until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC8REC.PC8WSWT == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.XGPCD == "02"
     || VPOITM05.XGPCD == "01"
     || VPOITM05.XGPCD == "07")
      if (VPOITM05.PC6STAT == "OP")
        PC8FLOP = "Y";
      else /* ===> item status code check*/
        if (VPOITM05.PC6STAT == "NC")
          PC8FLNC = "Y";
        else /* ===> item status code check*/
          if (VPOITM05.PC6STAT == "CL")
            PC8FLCL = "Y";
          else /* ===> item status code check*/
            if (VPOITM05.PC6STAT == "CX")
              PC8FLCX = "Y";
            else /* ===> item status code check*/
              if (VPOITM05.PC6STAT == "TN")
                PC8FLTN = "Y";
              end /* ===> item status code check*/
            end /* ===> item status code check*/
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> GPC Code check*/

    if (VPOITM05.XGPCD == "03")
      if (VPOITM05.PC6STAT == "OP")
        PC8FLOP = "Y";
      else /* ===> item status code check*/
        if (VPOITM05.PC6STAT == "FC")
          PC8FLFC = "Y";
        else /* ===> item status code check*/
          if (VPOITM05.PC6STAT == "NC")
            PC8FLNC = "Y";
          else /* ===> item status code check*/
            if (VPOITM05.PC6STAT == "CX")
              PC8FLCX = "Y";
            end /* ===> item status code check*/
          end /* ===> item status code check*/
        end /* ===> item status code check*/
      end /* ===> item status code check*/
    end /* ===> GPC Code check*/

    if (PC8REC.PC8FLOP == "Y" /* ===> no further D.B. reads necessary*/
     || PC8REC.PC8FLTN == "Y") /* ===> no further D.B. reads necessary*/
      PC8REC.PC8WSWT = "Y"; /* ===> set EOF cursor*/
    else
      XSPCS12-DRDA(); /* ==========> Fetch selected rows*/
      /* ========================================> driving read*/
    end /* ===> Status Flag 'OP' set*/

  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  XSPCS13-DRDA(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of XPPC011 ***********************/
end // end XPPC011-DRDA

// Select (S2) Set/Open  VPOITM05
Function XSPCS11-DRDA()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "Z2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> Roll Back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC8REC.XXXPRCNM = "XSPCS11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS11 ***********************/
end // end XSPCS11-DRDA

// Fetch  (N2) Next row  VPOITM05
Function XSPCS12-DRDA()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "G2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC8REC.PC8WSWT = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC8REC.XXXPRCNM = "XSPCS12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS12 ***********************/
end // end XSPCS12-DRDA

// Close  (C2) Set       VPOITM05
Function XSPCS13-DRDA()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Q2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC8REC.XXXPRCNM = "XSPCS13"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCS13"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS13 ***********************/
end // end XSPCS13-DRDA

// Select (S ) Unique    VPOHDR02
Function XSPCS14-DRDA()
   /* ------------------------------------------------------------*/
   /* Select the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Z ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PC8REC.XXXPRCNM = "XSPCS14"; /* Process name*/
      converseLib.validationFailed(12); /* Updated by Another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      return; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC8REC.XXXPRCNM = "XSPCS14"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPCS14"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of XSPCS14 ***********************/
end // end XSPCS14-DRDA

// Update (U ) Header    VPOHDR02
Function XSPCS15-DRDA()
   /* ------------------------------------------------------------*/
   /* Update the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "V ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PC8REC.XXXPRCNM = "XSPCS15"; /* Process name*/
      converseLib.validationFailed(12); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      return; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC8REC.XXXPRCNM = "XSPCS15"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPCS15"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1LOC = "UPDATE P.O. HEADER ROW";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of XSPCS15 ***********************/
end // end XSPCS15-DRDA

// Insert (A ) Audit     VPOAHD02
Function XSPCS16-DRDA()
   /* ------------------------------------------------------------*/
    /* Load and Insert Header Audit row*/
   /* ------------------------------------------------------------*/

  VPOAHD02.XGPCD = VPOHDR02.XGPCD; /* Gpc code*/
  VPOAHD02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAHD02.PC3PONBR = VPOHDR02.PC3PONBR; /* P.O. number*/
  VPOAHD02.PC3POIDT = VPOHDR02.PC3POIDT; /* P.O. id*/
  VPOAHD02.FY1FCTYC = VPOHDR02.FY1FCTYC; /* P.O. Factory code*/
  VPOAHD02.PCFSECD = VPOHDR02.PCFSECD; /* Apparel season code*/
  VPOAHD02.PC3BUYMO = VPOHDR02.PC3BUYMO; /* Apparel buy month*/
  VPOAHD02.PC4ORTYP = VPOHDR02.PC4ORTYP; /* P.O. type code*/

  VPOAHD02.XXXPGUID = COMMAREA.CAUSERID; /* User id.*/
  VPOAHD02.YACCD = PC8REC.YACCD; /* Audit comment code*/

  if (PC8REC.XGPCD == "02") /* GPC Code 'FOOTWEAR'*/
    VPOAHD02.YOACD = "02"; /* PO STATUS - PO HEADER*/
  end

  if (PC8REC.XGPCD == "03") /* GPC Code 'APPAREL'*/
    if (VPOAHD02.PCIAFTA == "CX") /* Status of cancel*/
      VPOAHD02.YOACD = "50"; /* PO STATUS - PO HEADER*/
    else
      VPOAHD02.YOACD = "79"; /* PO STATUS - PO HEADER*/
    end
  end

  XSPCSA8(); /* set change and oa memo flags*/

  VPOAHD02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAHD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAHD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOAHD02" ("I ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC8REC.XXXPRCNM = "XSPCS16"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XSPCS16"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  TA1REC.TA1LOC = "INSERT P.O. HEADER AUDIT ROW";
  TA1REC.TA1TBLKE = VPOAHD02.VPOAHD02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of XSPCS16 ***********************/
end // end XSPCS16-DRDA

//*** RECORD=PB0VW01 ****
// Working storage for application PB0V.
// ***********************
Record PB0VW01 type basicRecord
  10 PB0VPOIDT num(9) ; // PC_PO_ID_MO_RNG
  10 PB0VPOIDT8 num(8) ; // PO ID date
    15 PB0VYEAR num(4) ; // year
      20 PB0VYEAR-CC num(2) ; // year (cc)
      20 PB0VYEAR-Y1 num(1) ; // year(y1)
      20 PB0VYEAR-Y2 num(1) ; // year(y2)
    15 PB0VBUYMO num(2) ; // buy month
    15 PB0VDELMO num(2) ; // delivery month
  10 PC6ETSDT PC6ETSDT ; 
  10 PB0VREG char(2) ; // region
  10 PB0VREGION char(2) ; // region
  10 PO-REG-CD PO-REG-CD ; 
    15 PO-REG-CHAR1 PO-REG-CHAR1 ; 
    15 PO-REG-CHAR2 PO-REG-CHAR2 ; 
  10 EDITDT8 num(8) ; // edit date (8 digits)
    15 EDITCC num(2) ; // edit date - cent.
    15 EDITDT6 num(6) ; // edit date (6 digits)
      20 EDITYY num(2) ; // edit date - year
        25 EDITYY1 num(1) ; // edit date - year - digit1
        25 EDITYY2 num(1) ; // edit date - year- digit2
      20 EDITMM num(2) ; // edit date - month
      20 EDITDD num(2) ; // edit date - day
  10 MODSW char(1) ; // MAP 1 modify switch
  10 MERGESW char(1) ; // MAP 1 modify switch
  10 MAP2MODSW char(1) ; // MAP 2 modify switch
  10 MAP2SW char(1) ; // MAP 2 switch
  10 SELSW char(1) ; // select row switch
  10 UPDSW char(1) ; // update switch
  10 PB0VWNSC char(1) ; // Flag for SAP'PO
  10 STOPSW char(1) ; // stop processing switch
  10 WRITE-TSQ-SW char(1) ; // write selected data to tsq sw.
  10 REG-ARRAY-SW char(1) ; // 'region array loaded' switch
  10 TYP-ARRAY-SW char(1) ; // 'type array loaded' switch
  10 POSELSW char(1) ; // PO selected switch
  10 YMTCD YMTCD ; 
  10 MYMTCD char(2) ; // YMT_MODE_CD
  10 YACCD char(2) ; // YAC-COMNT-CD
  10 MYACCD char(2) ; // YAC-COMNT-CD
  10 MYACDESC char(30) ; // audit code description
  10 ETSDT num(8) ; // ETS date
  10 METSDT num(8) ; // ETS date
  10 WETSDT num(8) ; // ETS date
  10 PO-REG-DATA char(32) [99] ; // region array data
    15 PO-REG char(2) ; // region
    15 PO-REG-DESC char(30) ; // PO_REG_DESC
  10 PO-TYP-DATA char(32) [99] ; // po type array data
    15 PO-TYP char(2) ; // po type
    15 PO-TYP-DESC char(30) ; // po type description
  10 PB0VSUB1 smallint ; // subscript 1
  10 PB0VSUB2 smallint ; // subscript 2
  10 PB0V-PAGE-COUNT num(4) ; // page count
  10 PB0V-UPD-PAGE-COUNT num(4) ; // page count (for update)
  10 PB0V-PAGE-COUNT-MAX num(4) ; // tsq max. page nbr
  10 REGSUB num(2) ; // region subscript
  10 REGSUBMAX num(2) ; // region array nbr of entries
  10 TYPSUB num(2) ; // po type subscript
  10 TYPSUBMAX num(2) ; // po type array nbr of entries
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 STNBR char(6) ; // SY_STY_NBR
  10 SY2CLRID SY2CLRID ; 
  10 PONBR num(9) ; // PO number
  10 PC3PONBR PC3PONBR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCFSECD PCFSECD ; 
  10 PC6STAT PC6STAT ; 
  10 MPC6STAT char(2) ; // PC_ITM_STAT_CD
  10 UPDSTAT char(2) ; // PC_ITM_STAT_CD
  10 PB0VSESN char(2) ; // season cd
  10 PB0VYR num(4) ; // year
  10 POID char(10) ; // po id
    15 POID-SESN char(2) ; // po id (season)
    15 POID-MO-RNG char(4) ; // po id (month range)
    15 POID-FCTY char(4) ; // po id (factory)
  10 POIDT num(8) ; // PC_PO_ID_MO_RNG
    15 POIDT-YR num(4) ; // PC_PO_ID_MO_RNG(year)
    15 POIDT-MO-RNG num(4) ; // PC_PO_ID_MO_RNG(month range)
  10 ETSDT-ERR-SW char(1) ; // ETS date error switch
  10 REG-ERR-SW char(1) ; // region error switch
  10 PO-ERR-SW char(1) ; // po error switch
  10 FCTY-ERR-SW char(1) ; // factory error switch
  10 STY-ERR-SW char(1) ; // style error switch
  10 COLR-ERR-SW char(1) ; // color error switch
  10 SESN-ERR-SW char(1) ; // season/year error switch
  10 TYP-ERR-SW char(1) ; // type error switch
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 PB0VW-FRMT-CUST-ORD PB0VW-FRMT-CUST-ORD ; 
    15 * num(8) ; // ws for op1cuoid
    15 PB0VW-FRMT-PART-NBR PB0VW-FRMT-PART-NBR ; 
  10 PCJSEQNO PCJSEQNO ; 
  10 REMOVE-LEAD-ZERO num(9) ; // PC_EST_HDT
    15 REMOVE-LEAD-ZERO-9BYTES char(9) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO1 char(1) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO2 char(1) ; // PC_EST_HDT
      20 REMOVE-LEAD-ZERO-7BYTES char(7) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO3 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO4 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO5 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO6 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO7 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO8 char(1) ; // PC_EST_HDT
        25 REMOVE-LEAD-ZERO9 char(1) ; // PC_EST_HDT
  10 SIGNIFICANT-FOUND char(1) ; // PC_EST_HDT
end // end PB0VW01

//*** RECORD=PB0VW02 ****
// Working storage used to send data to tsq.
// 
// ***********************
Record PB0VW02 type basicRecord
  5 PB0VLEN PB0VLEN ; 
  5 PB0VSEL PB0VSEL [12] ; 
  5 PB0VW02-DATA PB0VW02-DATA [12] ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0VW02

//*** RECORD=PB0VW03 ****
// Working storage display po data on the map
// 
// ***********************
Record PB0VW03 type basicRecord
  5 PO-DATA PO-DATA ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC3PONBR-CHAR char(9) ; // PC_PO_NBR
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 POID char(10) ; // PC_PO_ID_MO_RNG
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 SY1STNBR SY1STNBR ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 SY2CLRID SY2CLRID ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 XWHCD XWHCD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC2CUXID PC2CUXID ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6PLAN-NUMERIC num(3) ; // PC_PO_PLAN_NBR
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6ETSDT-CCYYMMDD num(8) ; // PC_EST_HDT
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6TORDE-CHAR char(7) ; // PC_TOT_ON_ORD_QTY
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 YMTCD YMTCD ; 
    10 * char(1) ; // PC_TOT_ON_ORD_QTY
    10 PC6STAT PC6STAT ; 
end // end PB0VW03

//*** RECORD=PB0VW05 ****
// 
//    This record holds data of the size table row.
// 
// ***********************
Record PB0VW05 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0VW05

//*** RECORD=PB0VW06 ****
// ************************************************************
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0KW06   (Copies VPOITM05)
// 
//    This record is a mirror image of the merge to item row
// when the selected item change has warranted a merge process.
//   It is used in the update and audit processes to maximize
// coding and D.B. resources.
// 
// ************************************************************
// ***********************
Record PB0VW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0VW06

//*** RECORD=PB0VW07 ****
// ************************************************************
// 
// DB2 TABLE VIEW:      DPRODC.VPOSIZ02
// 
// COPYLIB MEMBER:      DPOSIZ02
// 
// I/O MODULE:          VPOSIZ02
// 
// KEY TO DB2 TABLE:    VPOSIZ02-KEY
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/05/88   MCHRIS   New record.
// 06/15/93   gamen    Add zfc-crcy-cd.
// --------   ------   ---------------------------------------
// 
//    This record is a copy of the size record associated with
// the merge to item row and is used in audit processing.
// 
// ************************************************************
// ***********************
Record PB0VW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PB0VW07

// TSQ length
DataItem PB0VLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line select
DataItem PB0VSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws for op1cuoid
DataItem PB0VW-FRMT-CUST-ORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws to get ord-part-char
DataItem PB0VW-FRMT-PART-NBR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PB0VW02-DATA char(298)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end