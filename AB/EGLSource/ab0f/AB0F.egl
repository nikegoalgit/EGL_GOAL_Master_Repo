package ab0f;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0F ****
// This application allows the user to submit a report request
// batch job depending on the option selected. Report options
// are:
//                  1) Buy Plan
//                  2) Color Break
//                  3) Preliminary Size Break
//                  4) Completed Size Break
//                  5) BPR Report
//                  6) FAX Format
// 
// The user is allowed only one (1) selection per submit
// request.
// 
// This application will validate the information entered by
// the user, and then write and submit jcl (job control
// language) statements.
// 
// JCL statements are formatted and submitted through the
// Internal Reader Transient Data Queue (INTR). The job
// executes in batch mode and all output is routed to the
// remote destination specified through XPTAOP - the CSP
// canned routine which functions as the submit facility.
// 
// The JCL for each job is stored as a table, classified as
// either a fixed format or a variable format statement.
// 
// A fixed statement is identified in the table by a blank
// JCL statement type (TARTYPE). These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted. They are identified
// by a non-blank statement type. The type determines the data
// that is to be substituted and the columns into which it is
// to be placed. After substitution, the statement is then
// written to the internal reader.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key from the menu only.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/23/89   JRAMOS   New application.
// 08/13/90   MLUCHT   Added an option to create the apparel
//                     buy summary report.
// 02/12/93   lrein    changes
// 09/17/93   SWHITA   ADDED HELP SCREEN LINK TO AB0F130.
// --------   ------   ----------------------------------------
// 12/17/97   NGANGO   Y2K MODIFICATION WITH TABLE CHANGE.
//                     Changed Map AB0FM001 (Season year to re-
//                     move leading zero suppression) and Proc.
//                     AB0F152 and Stmt. Grp. AB0FS14.
// --------   ------   ----------------------------------------
// *********************
Program AB0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0FW01 AB0FW01; // record
  AB0FW02 AB0FW02; // record
  AB3REC AB3REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY6REC FY6REC; // record
  PC4REC PC4REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB0FT02 {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XQTTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use AB0FM.AB0FM001,  // forms
      AB0FM.TA0PM001, 
      AB0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AB0FW01 empty; /* Initialize working storage*/
    set AB0FW02 empty; /* Initialize working storage*/
    set ABPREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set FY1REC empty; /* Initialize working storage*/
    set FY6REC empty; /* Initialize working storage*/
    set PC4REC empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set TA6REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/

    set AB0FM001 initial; /* Initialize map output area*/


                    /* (Define Map Environment)*/

    ABWREC.ABWAPPL = "AB0F"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "M001"; /* Indicate Map one*/
    ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to ABWREC*/


                      /* (Set Map Item Values)*/

    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "N"; /* Indicate request for data*/

    AB0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


                       /* (Process COMMAREA Items)*/

    if (COMMAREA.CAFROMAP == "AB0B") /* Set cursor based on calling applic*/
      set AB0FM001.AB0FMBP cursor;
    end

    if (COMMAREA.CAFROMAP == "AB0D")
      set AB0FM001.AB0FMCB cursor;
    end

    if (COMMAREA.CAFROMAP == "AB0J")
      set AB0FM001.AB0FMPSB cursor;
    end

     /* IF COMMAREA.CAFROMAP EQ 'AB0O';*/
      /* SET AB0FM001.AB0FMBPR CURSOR;*/
     /* END;*/


    if (COMMAREA.CAITEM > " ") /* Application data exists*/

      AB0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
      set AB0FM001.CAITEM modified; /* Set MDT on*/
      COMMAREA.CAITEM = " "; /* Clear application data*/

    end


                      /* (Converse Main Process)*/

    goto AB0F001; /* Converse Apparel Buy Prototype*/


    AB0F001: AB0F001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0F001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0F

// Choose which map to display
Function AB0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  AB0F100(); /* Display map 1*/



end // end AB0F001

// Driver process for 100 map
Function AB0F100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* PERFORM AB0F110  ; Obtain the data to display (Not required)*/

  AB0F120(); /* Format and display the map*/

  AB0F130(); /* Check attention identifier*/

  AB0F140(); /* Reset fields to normal intensity*/

  AB0F150(); /* Verify the entered data*/

  AB0F160(); /* Process valid input request*/


end // end AB0F100

// Format and display the map
Function AB0F120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/



  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/

           /* (Move Wk Storage Flds to Map)*/

    AB0FM001.XXXUSER = XP1REC.XXXUSER; /* Scheduler id to map*/
    AB0FM001.XSECD = XP1REC.XSECD; /* Season cd*/
    AB0FM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
    AB0FM001.AB0FMDVC = XP1REC.XDVCD; /* Div Cd*/
    AB0FM001.AB3BUYMO = XP1REC.XP1CBYMO; /* Buy month/yr*/
    AB0FM001.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
    AB0FM001.XGAABRV = XP1REC.XGAABRV; /* XGA Abrv*/
    AB0FM001.XPCCD = XP1REC.XPCCD; /* Category cd*/
    AB0FM001.XPCABRV = XP1REC.XPCABRV; /* XPC Abrv*/
    AB0FM001.XSUCD = XP1REC.XSUCD; /* Sihouette cd*/
    AB0FM001.XSUABRV = XP1REC.XSUABRV; /* XSU Abrv*/
    AB0FM001.XQTCD = XP1REC.XQTCD; /* Quota Cat cd*/
    AB0FM001.FY1FCTYC = XP1REC.FY1FCTYC; /* Factory cd*/
    AB0FM001.FY1FCTSN = AB0FW01.FY1FCTSN; /* Factory name*/
    AB0FM001.FY6FOCD = XP1REC.FY6FOCD; /* Lia/Fld Off cd*/
    AB0FM001.FY6FOABR = XP1REC.FY6FOABR; /* Off arbv*/
    AB0FM001.FY1FRGN = XP1REC.FY1FRGN; /* Dom/Off cd*/
    AB0FM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB0FM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
    AB0FM001.PC4ORTYP = XP1REC.PC4ORTYP; /* PO type*/
    AB0FM001.PC4ABRV = XP1REC.PC4ABRV; /* PO abrv*/
    AB0FM001.XXXSTAT = XP1REC.XP1STAT; /* Status*/
    AB0FM001.AB0FMCUI = XP1REC.PC2CUXID; /* Cust*/


    ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/


    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end


  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AB0FM001 alarm; /* Indicate sound alarm*/
    AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  end



  ABWREC.ABWNMO = 0; /* Reset information message number*/

  converse AB0FM001 ;


end // end AB0F120

// Check attention identifier
Function AB0F130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AB0FM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end


  if (AB0FM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0FM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0FM001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
    end

    set AB0FM001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB0FM001.CAITEM > " ") /* Application data was entered*/
    set AB0FM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0FM001"; /* Appl find code*/
    end

    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0F130

// Reset highlighted fields
Function AB0F140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AB0FM001.XXXUSER initialAttributes; /* Reset Scheduler cd*/
  set AB0FM001.XSECD initialAttributes; /* Reset XSECD*/
  set AB0FM001.XSNYR initialAttributes; /* Reset XSNYR*/
  set AB0FM001.AB0FMDVC initialAttributes; /* Reset xdvcd*/
  set AB0FM001.AB3BUYMO initialAttributes; /* Reset Buy month*/
  set AB0FM001.XGACD initialAttributes; /* Reset XGACD*/
  set AB0FM001.XGAABRV initialAttributes; /* Reset XGAABRV*/
  set AB0FM001.XPCCD initialAttributes; /* Reset XPCCD*/
  set AB0FM001.XPCABRV initialAttributes; /* Reset XPCABRV*/
  set AB0FM001.XSUCD initialAttributes; /* Reset XSUCD*/
  set AB0FM001.XSUABRV initialAttributes; /* Reset XSUABRV*/
  set AB0FM001.XQTCD initialAttributes; /* Reset XQTCD*/
  set AB0FM001.FY1FCTYC initialAttributes; /* Reset Factory cd*/
  set AB0FM001.FY1FCTSN initialAttributes; /* Reset Factory name*/
  set AB0FM001.FY6FOCD initialAttributes; /* Reset Lia/Fld Off cd*/
  set AB0FM001.FY6FOABR initialAttributes; /* Reset Lia/Fld Off abrv*/
  set AB0FM001.FY1FRGN initialAttributes; /* Reset DOM/OFF*/
  set AB0FM001.SY1STNBR initialAttributes; /* Reset Styleno.*/
  set AB0FM001.SY1SSTNM initialAttributes; /* Reset Style name*/
  set AB0FM001.PC4ORTYP initialAttributes; /* Reset PO type*/
  set AB0FM001.PC4ABRV initialAttributes; /* Reset PO abrv*/
  set AB0FM001.XXXSTAT initialAttributes; /* Reset Buy status*/
  set AB0FM001.AB0FMCUI initialAttributes; /* Reset Customer*/

  set AB0FM001.AB0FMBP initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FMCB initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FMPSB initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FMCSB initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FMFAX initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FMRSL initialAttributes; /* Reset selection fld*/
  set AB0FM001.AB0FNBSR initialAttributes; /* Reset selection fld*/

  set AB0FM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0FM001.CAITEM initialAttributes; /* Commarea application data*/


  AB0FM001.XXXPRCNM = "AB0F    "; /* Reset process name*/


end // end AB0F140

// Verify the entered data
Function AB0F150()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  AB0F152(); /* Verify selection criteria*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  else
    if (AB0FW01.AB0FWSLI == 0) /* No valid report request found*/
      exit stack; /* Exit to redisplay map*/
    end
  end



end // end AB0F150

// Edit selection criteria
Function AB0F152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* =====  validate all selection criteria fields.         =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


  ABWREC.ABWSWR = "N"; /* Reset data select ind*/
  XP1REC.XP1MNO = 0; /* Reset error ind*/


          /* (Check Selection Criteria)*/

  if (AB0FM001.XXXSTAT != XP1REC.XP1STAT) /* Status cd*/
    XP1REC.XP1STAT = AB0FM001.XXXSTAT; /* Move to XP1REC Field*/
    ABWREC.ABWSWR = "Y"; /* Set data select ind on*/
  end

  if (AB0FM001.PC4ORTYP != XP1REC.PC4ORTYP) /* PO type*/
    XP1REC.PC4ORTYP = AB0FM001.PC4ORTYP;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.SY1STNBR != XP1REC.SY1STNBR) /* Style no.*/
    XP1REC.SY1STNBR = AB0FM001.SY1STNBR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.FY1FRGN != XP1REC.FY1FRGN) /* DOM/OFF*/
    XP1REC.FY1FRGN = AB0FM001.FY1FRGN;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.FY6FOCD != XP1REC.FY6FOCD) /* LIA/FLD OFF*/
    XP1REC.FY6FOCD = AB0FM001.FY6FOCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.FY1FCTYC != XP1REC.FY1FCTYC) /* Factory cd*/
    XP1REC.FY1FCTYC = AB0FM001.FY1FCTYC;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XQTCD != XP1REC.XQTCD) /* Quota Cat cd*/
    XP1REC.XQTCD = AB0FM001.XQTCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XSUCD != XP1REC.XSUCD) /* Silhouette cd*/
    XP1REC.XSUCD = AB0FM001.XSUCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XPCCD != XP1REC.XPCCD) /* Category cd*/
    XP1REC.XPCCD = AB0FM001.XPCCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XGACD != XP1REC.XGACD) /* Gender/Age cd*/
    XP1REC.XGACD = AB0FM001.XGACD;
    ABWREC.ABWSWR = "Y";
  end


  /* Check Buy Month and Year for Numerics*/

  AB0FW01.AB0FW-CHAR-BUY-DATE = AB0FM001.AB3BUYMO;

  if (AB0FW01.AB0FW-CHAR-BUY-MM is numeric
   && AB0FW01.AB0FW-CHAR-BUY-YY is numeric)

    if (AB0FM001.AB3BUYMO != XP1REC.XP1CBYMO) /* Buy Month*/
      XP1REC.XP1CBYMO = AB0FM001.AB3BUYMO;
      XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
      XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  /*  */
  /* ---------------- y2k in begin --------------*/
  /*  */
      if (XP1REC.XP1CBYYY > 60)
        XP1REC.XP1BUYCC = 19;
      else
        XP1REC.XP1BUYCC = 20;
      end
  /*  */
  /* ---------------- y2k in end ----------------*/
  /*  */
      XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
      ABWREC.ABWSWR = "Y";
    else
      XP1REC.XP1CBYMO = AB0FM001.AB3BUYMO;
      XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
      XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  /*  */
  /* ---------------- y2k in begin --------------*/
  /*  */
      if (XP1REC.XP1CBYYY > 60)
        XP1REC.XP1BUYCC = 19;
      else
        XP1REC.XP1BUYCC = 20;
      end
  /*  */
  /* ---------------- y2k in end ----------------*/
  /*  */
      XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
      if (XP1REC.XP1CBYMM == "00") /* Buy month eq zeroes*/
  /*  */
  /* ---------------- y2k out begin -------------*/
  /*  */
  /* OR XP1REC.XP1CBYYY EQ '00';/* Buy year eq zeroes*/
  /*  */
  /* ---------------- y2k out end  -----------------*/
  /*  */
        ABWREC.ABWSWR = "Y"; /* Consider it as new data*/
      end

    end

  else

    set AB0FM001.AB3BUYMO cursor, bold;
    XP1REC.AB3BUYMO = 0;
    XP1REC.XP1BUYMO = 0;
    XP1REC.XP1CBYMO = " ";
    XP1REC.XP1MNO = 34;

  end


  if (AB0FM001.XSNYR != XP1REC.XSNYR) /* NE Saved Season yr*/
  /*  */
  /* --------------- y2k out begin ------------------*/
  /*  */
  /* OR AB0FM001.XSNYR EQ 0;        /* or Cleared out*/
  /*  */
  /* --------------- y2k out end --------------------*/
  /*  */
    XP1REC.XP1XSNYY = AB0FM001.XSNYR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XSECD != XP1REC.XSECD /* NE Saved Season cd*/
   || AB0FM001.XSECD == " ")         /* or Cleared out*/
    XP1REC.XSECD = AB0FM001.XSECD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.XXXUSER != XP1REC.XXXUSER) /* User id*/
    XP1REC.XXXUSER = AB0FM001.XXXUSER;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0FM001.AB0FMCUI != XP1REC.PC2CUXID) /* Customer Xref*/
    XP1REC.PC2CUXID = AB0FM001.AB0FMCUI;
    ABWREC.ABWSWR = "Y";
  end

          /* (Space-out Description Fields)*/

  if (AB0FM001.PC4ORTYP == " ") /* PO type*/
    XP1REC.PC4ABRV = " "; /* Space out desc*/
    AB0FM001.PC4ABRV = " "; /* Space out desc*/
  end

  if (AB0FM001.SY1STNBR == " ") /* Style no.*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0FM001.SY1SSTNM = " "; /* Space out desc*/
  end

  if (AB0FM001.FY6FOCD == " ") /* LIA/FLD OFF*/
    XP1REC.FY6FOABR = " "; /* Space out desc*/
    AB0FM001.FY6FOABR = " "; /* Space out desc*/
  end

  if (AB0FM001.FY1FCTYC == " ") /* Factory cd*/
    AB0FW01.FY1FCTSN = " "; /* Space out desc*/
    AB0FM001.FY1FCTSN = " "; /* Space out desc*/
  end

  if (AB0FM001.XSUCD == " ") /* Silhouette cd*/
    XP1REC.XSUABRV = " "; /* Space out desc*/
    AB0FM001.XSUABRV = " "; /* Space out desc*/
  end

  if (AB0FM001.XPCCD == " ") /* Category cd*/
    XP1REC.XPCABRV = " "; /* Space out desc*/
    AB0FM001.XPCABRV = " "; /* Space out desc*/
  end

  if (AB0FM001.XGACD == " ") /* Gender/Age cd*/
    XP1REC.XGAABRV = " "; /* Space out desc*/
    AB0FM001.XGAABRV = " "; /* Space out desc*/
  end


  if (AB0FM001.AB0FMDVC == " ") /* Division Code*/
    XP1REC.XDVABRV = " "; /* Space out xp1 abrv*/
    AB0FM001.AB0FMABR = " "; /* Space out map desc*/
  end

  if (AB0FM001.AB0FMCUI == " ") /* Customer Cross Reference*/
    XP1REC.PC2CUXID = " "; /* Space out xp1 cust*/
  end

              /* (Validate Selection Criteria)*/

  if (ABWREC.ABWSWR == "Y") /* If any selection criteria changed*/

    AB0FS20(); /* Validate division cd*/
    AB0FS01(); /* Validate Status cd*/
    AB0FS02(); /* Validate PO type*/
    AB0FS03(); /* Validate Style no*/
    AB0FS07(); /* Validate DOM/OFF*/
    AB0FS08(); /* Validate LIA/FLD OFF*/
    AB0FS09(); /* Validate Factory cd*/
    AB0FS10(); /* Validate Quota Cat cd*/
    AB0FS11(); /* Validate Silhouette cd*/
    AB0FS12(); /* Validate Category cd*/
    AB0FS13(); /* Validate Gender/Age cd*/

    if (XP1REC.XP1MNO == 0) /* If Buy month numeric*/
      AB0FS14(); /* Validate Buy Month*/
    end

    AB0FS17(); /* Validate Scheduler cd*/

  end


              /* (Validate Report Request Selection)*/

  if (XP1REC.XP1MNO == 0) /* No errors found so far*/

    AB0FW01.AB0FWSLI = 0; /* Reset rpt req indicator*/

    AB0FS18(); /* Validate report selection*/

  end


              /* (Set-up Exit Requirements)*/

  converseLib.clearScreen();
  
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end



end // end AB0F152

// Process valid input request
Function AB0F160()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors are present*/
    exit stack; /* Redisplay map with message*/
  end



   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  AB0FW01.AB0FWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* IF TA3REC.TA3RGNID = '03';       /* PRODUCTION Region*/
   /* mOVE 1 TO AB0FW01.AB0FWIXT;  /* PRODUCTION JCL*/
   /* ELSE;*/
    /* IF '/*EOF' IN AB0FT02.TARJCL;*/
      /* MOVE EZETST TO AB0FW01.AB0FWIXT;*/
      /* AB0FW01.AB0FWIXT = AB0FW01.AB0FWIXT + 1;  /* TEST JCL*/
    /* ELSE;*/
      /* MOVE 1 TO AB0FW01.AB0FWIXT;*/
    /* END;*/
   /* END;*/


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AB0FW01.AB0FWIXT > 0) /* Until end of table*/


    if (AB0FT02.TARTYPE[AB0FWIXT] == "J") /* JOB program ID stmt*/

      /* ------------------------------------------------------------*/
       /* Move JOB name to Job statement for submission*/
      /* ------------------------------------------------------------*/

      set AB0FW02 empty; /* Reset parameters work area*/

      AB0FW02.TARJCL = AB0FT02.TARJCL[AB0FWIXT]; /* Move to wk area*/

      if (AB0FM001.AB0FMBP != " ") /* Buy Plan selected*/
        AB0FW02.AB0FWJOB = "AB2001"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCB != " ") /* Color Break selected*/
        AB0FW02.AB0FWJOB = "AB2101"; /* Move job name*/
      end

      if (AB0FM001.AB0FMPSB != " ") /* Prelim Size Break selected*/
        AB0FW02.AB0FWJOB = "AB2601"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCSB != " ") /* Comp Size Break selected*/
        AB0FW02.AB0FWJOB = "AB2201"; /* Move job name*/
      end

     /* IF AB0FM001.AB0FMBPR NE ' '; /* BPR Report selected*/
       /* MOVE 'AB2401' TO AB0FW02.AB0FWJOB;/* Move job name*/
     /* END;*/

      if (AB0FM001.AB0FMFAX != " ") /* FAX Format selected*/
        AB0FW02.AB0FWJOB = "AB2501"; /* Move job name*/
      end

      if (AB0FM001.AB0FMFBC != " ") /* fcst to buy comparison*/
        AB0FW02.AB0FWJOB = "AB3001"; /* Move job name*/
      end

      if (AB0FM001.AB0FMABS != " ") /* appl buy summ rpt*/
        AB0FW02.AB0FWJOB = "AB3011"; /* move job name*/
      end

      if (AB0FM001.AB0FNBSR != " ") /* nil buy rpt*/
        AB0FW02.AB0FWJOB = "AB3041"; /* move jo*/
      end

      if (AB0FM001.AB0FM-MULT-FCTY-STY != " ")
        AB0FW02.AB0FWJOB = "AB1901";
      end

      if (AB0FW02.AB0FWJOB == " ")
        AB0FW02.AB0FWJOB = "ABXXXX";
      end

      AB0FT02.TARJCL[AB0FWIXT] = AB0FW02.TARJCL; /* Move to table*/

    end


    if (AB0FT02.TARTYPE[AB0FWIXT] == "E") /* proc exec stmt*/

      /* ------------------------------------------------------------*/
       /* Move EXEC name to EXEC statement for submission*/
      /* ------------------------------------------------------------*/

      set AB0FW02 empty; /* Reset parameters work area*/

      AB0FW02.TARJCL = AB0FT02.TARJCL[AB0FWIXT]; /* Move to wk area*/

      if (AB0FM001.AB0FMBP != " ") /* Buy Plan selected*/
        AB0FW02.AB0FWEXC = "AB2001"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCB != " ") /* Color Break selected*/
        AB0FW02.AB0FWEXC = "AB2101"; /* Move job name*/
      end

      if (AB0FM001.AB0FMPSB != " ") /* Prelim Size Break selected*/
        AB0FW02.AB0FWEXC = "AB2601"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCSB != " ") /* Comp Size Break selected*/
        AB0FW02.AB0FWEXC = "AB2201"; /* Move job name*/
      end

     /* IF AB0FM001.AB0FMBPR NE ' '; /* BPR Report selected*/
       /* MOVE 'AB2401' TO AB0FW02.AB0FWEXC;/* Move job name*/
     /* END;*/

      if (AB0FM001.AB0FMFAX != " ") /* FAX Format selected*/
        AB0FW02.AB0FWEXC = "AB2501"; /* Move job name*/
      end

      if (AB0FM001.AB0FMFBC != " ") /* fcst to buy comparison*/
        AB0FW02.AB0FWEXC = "AB3001"; /* Move job name*/
      end

      if (AB0FM001.AB0FMABS != " ") /* buy summary*/
        AB0FW02.AB0FWEXC = "AB3011"; /* Move job name*/
      end

      if (AB0FM001.AB0FNBSR != " ") /* nil buy rpt*/
        AB0FW02.AB0FWEXC = "AB3041";
      end

      if (AB0FM001.AB0FM-MULT-FCTY-STY != " ")
        AB0FW02.AB0FWEXC = "AB1901";
      end

      if (AB0FW02.AB0FWEXC == " ")
        AB0FW02.AB0FWEXC = "ABXXXX";
      end

      AB0FT02.TARJCL[AB0FWIXT] = AB0FW02.TARJCL; /* Move to table*/

    end


    if (AB0FT02.TARTYPE[AB0FWIXT] == "D") /* dd name     ID stmt*/

      /* ------------------------------------------------------------*/
       /* Move DD name to DD CARD statement for submission*/
      /* ------------------------------------------------------------*/

      set AB0FW02 empty; /* Reset parameters work area*/

      AB0FW02.TARJCL = AB0FT02.TARJCL[AB0FWIXT]; /* Move to wk area*/

      if (AB0FM001.AB0FMBP != " ") /* Buy Plan selected*/
        AB0FW02.AB0FWDD = "AB200D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCB != " ") /* Color Break selected*/
        AB0FW02.AB0FWDD = "AB210D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMPSB != " ") /* Prelim Size Break selected*/
        AB0FW02.AB0FWDD = "AB260D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMCSB != " ") /* Comp Size Break selected*/
        AB0FW02.AB0FWDD = "AB220D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMFAX != " ") /* FAX Format selected*/
        AB0FW02.AB0FWDD = "AB250D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMFBC != " ") /* fcst to buy comparison*/
        AB0FW02.AB0FWDD = "AB300D"; /* Move job name*/
      end

      if (AB0FM001.AB0FMABS != " ")
        AB0FW02.AB0FWDD = "AB301D"; /* Move job name*/
      end

      if (AB0FM001.AB0FNBSR != " ")
        AB0FW02.AB0FWDD = "AB304D";
      end

      if (AB0FM001.AB0FM-MULT-FCTY-STY != " ")
        AB0FW02.AB0FWDD = "AB190D";
      end

      if (AB0FW02.AB0FWDD == " ")
        AB0FW02.AB0FWDD = "ABXXXX";
      end

      AB0FT02.TARJCL[AB0FWIXT] = AB0FW02.TARJCL; /* Move to table*/

    end


    if (AB0FT02.TARTYPE[AB0FWIXT] == "P") /* Report request stmt*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the Report Request for submission*/
      /* ------------------------------------------------------------*/

      set ABPREC empty; /* Reset parameters work area*/

      ABPREC.XSECD = XP1REC.XSECD; /* Season cd*/
      ABPREC.ABPXSNYR = XP1REC.XSNYR; /* move season year*/
      ABPREC.XDVCD = XP1REC.XDVCD; /* move division code*/
      ABPREC.ABPBUYMO = XP1REC.XP1BUYMO; /* Buy month*/
      ABPREC.XGACD = XP1REC.XGACD; /* XGA cd*/
      ABPREC.XPCCD = XP1REC.XPCCD; /* XPC cd*/
      ABPREC.XSUCD = XP1REC.XSUCD; /* XSU cd*/
      ABPREC.XQTCD = XP1REC.XQTCD; /* XSU cd*/
      ABPREC.FY1FCTYC = XP1REC.FY1FCTYC; /* Factory cd*/
      ABPREC.FY6FOCD = XP1REC.FY6FOCD; /* LIA/FLD OFF*/
      ABPREC.FY1FRGN = XP1REC.FY1FRGN; /* DOM/OFF*/
      ABPREC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
      ABPREC.PC4ORTYP = XP1REC.PC4ORTYP; /* PO Type*/
      ABPREC.AB3BUYST = XP1REC.XP1STAT; /* Status*/
      ABPREC.PC2CUXID = XP1REC.PC2CUXID; /* Status*/
      if (AB0FM001.XXXUSER != " ")
        /* ----- if scheduler specified, pass it along -----*/
        ABPREC.PG1SC4CD = XP1REC.PG1SC4CD; /* USER ID*/
      end
      ABPREC.XGPCD = XP1REC.XGPCD; /* GPC code*/

      if (AB0FM001.AB0FMRSL == " ")
        ABPREC.ABPRSL = "1"; /* move report select*/
      else
        ABPREC.ABPRSL = AB0FM001.AB0FMRSL;
      end

      AB0FT02.TARJCL[AB0FWIXT] = ABPREC.TARJCL;
                                   /* Parameter variables*/

    end


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AB0FT02.TARJCL[AB0FWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AB0FT02.TARTYPE[AB0FWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AB0FT02.TARJCL[AB0FWIXT] == "/*EOF") /* End of table*/
      AB0FW01.AB0FWIXT = 0; /* Indicate end of table*/
    else
      AB0FW01.AB0FWIXT = AB0FW01.AB0FWIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AB0F161(); /* Submit the JCL*/


end // end AB0F160

// Submit formatted JCL stmts
Function AB0F161()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* SEND messege to CICS terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "151 "; /* Process number*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ABWREC.ABWNMO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ABWREC.ABWNMO = 23; /* Indicate user cancelled*/
  else
    ABWREC.ABWNMO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/



end // end AB0F161

// Edit status cd
Function AB0FS01()
  if (XP1REC.XP1STAT == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.XP1STAT == "?") /* Pop-window requested*/
    XP1REC.XP1STAT = " "; /* Space out wk area*/
    set AB0FM001.XXXSTAT cursor, bold; /* Indicate pop-up window not avail*/
    XP1REC.XP1MNO = 42; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S01 "; /* Process number*/
    return;
  end


  if (XP1REC.XP1STAT != "S"
   && XP1REC.XP1STAT != "B"
   && XP1REC.XP1STAT != "C"
   && XP1REC.XP1STAT != "Z"
   && XP1REC.XP1STAT != "T"
   && XP1REC.XP1STAT != "L"
   && XP1REC.XP1STAT != "K")

    XP1REC.XP1STAT = " "; /* Space out wk area*/
    set AB0FM001.XXXSTAT cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 36; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S01 "; /* Process number*/

  end



end // end AB0FS01

// Edit PO type
Function AB0FS02()
  if (XP1REC.PC4ORTYP == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end



  if (XP1REC.PC4ORTYP == "?") /* Pop-up window requested*/
    XP1REC.PC4ORTYP = " "; /* Move blank PO type*/
    XP1REC.PC4ABRV = " "; /* Space out desc*/
    AB0FM001.PC4ABRV = " "; /* Space out desc*/
    set AB0FM001.PC4ORTYP cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not avail*/
    ABWREC.ABWPRCSN = "S02 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = XP1REC.PC4ORTYP; /* PO type*/


   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.PC4ABRV = PC4REC.PC4SDESC; /* To save area*/
      AB0FM001.PC4ABRV = PC4REC.PC4SDESC; /* To save area*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.PC4ORTYP = " "; /* Move blank PO type*/
      XP1REC.PC4ABRV = " "; /* Space out desc*/
      AB0FM001.PC4ABRV = " "; /* Space out desc*/
      set AB0FM001.PC4ORTYP cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 37; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S02 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0FS02

// Edit Style no.
Function AB0FS03()
  if (XP1REC.SY1STNBR == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.SY1STNBR == "?") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0FM001.SY1SSTNM = " "; /* Space out desc*/
    set AB0FM001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up not available*/
    ABWREC.ABWPRCSN = "S03 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0FS04(); /* Select set style*/

  AB0FS05(); /* Validate style*/

  AB0FS06(); /* Close style cursor*/



end // end AB0FS03

// Select Set Style
Function AB0FS04()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0FS04

// Process Style row
Function AB0FS05()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0FM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      XP1REC.SY1SSTNM = " "; /* Space out desc*/
      AB0FM001.SY1SSTNM = " "; /* Space out desc*/
      set AB0FM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S05 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0FS05

// Close Style cursor
Function AB0FS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AB0FS06

// Edit DOM/OFF
Function AB0FS07()
  if (XP1REC.FY1FRGN == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FRGN == "?") /* Pop-up window requested*/
    XP1REC.FY1FRGN = " "; /* Space out wk area*/
    set AB0FM001.FY1FRGN cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S07 "; /* Process number*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FRGN != "Y"
   && XP1REC.FY1FRGN != "N")

    XP1REC.FY1FRGN = " "; /* Space out wk area*/
    set AB0FM001.FY1FRGN cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 39; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S07 "; /* Process number*/

  end



end // end AB0FS07

// Edit LIA/FLD OFF
Function AB0FS08()
  if (XP1REC.FY6FOCD == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY6FOCD == "?") /* Pop-up window requested*/
    XP1REC.FY6FOCD = " "; /* Move blank Fld office*/
    XP1REC.FY6FOABR = " "; /* Space out desc*/
    AB0FM001.FY6FOABR = " "; /* Space out desc*/
    set AB0FM001.FY6FOCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S08"; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Fld office entered is found in DFCTY.VFDOFC01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY6REC empty; /* initialize db record*/
  FY6REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY6REC.FY6FOCD = XP1REC.FY6FOCD; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFDOFC01 DB   **/
   /* *=============================**/

  try
    call "IO2790" ("S ", SQLCA, FY6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.FY6FOABR = FY6REC.FY6FOABR; /* To save area*/
      AB0FM001.FY6FOABR = FY6REC.FY6FOABR; /* To save area*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.FY6FOCD = " "; /* Move blank Fld office*/
      XP1REC.FY6FOABR = " "; /* Space out desc*/
      AB0FM001.FY6FOABR = " "; /* Space out desc*/
      set AB0FM001.FY6FOCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 40; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S08 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFDOFC01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0FS08

// Edit Factory cd
Function AB0FS09()
  if (XP1REC.FY1FCTYC == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FCTYC == "?") /* Pop-up window requested*/
    XP1REC.FY1FCTYC = " "; /* Move blank Factory cd*/
    AB0FW01.FY1FCTSN = " "; /* Space out Factory name*/
    AB0FM001.FY1FCTSN = " "; /* Space out Factory name*/
    set AB0FM001.FY1FCTYC cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S09 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = XP1REC.FY1FCTYC; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0FW01.FY1FCTSN = FY1REC.FY1FCTSN; /* Move fcty name to save*/
      AB0FM001.FY1FCTSN = FY1REC.FY1FCTSN; /* Move fcty name to save*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.FY1FCTYC = " "; /* Move blank Factory cd*/
      AB0FW01.FY1FCTSN = " "; /* Space out Factory name*/
      AB0FM001.FY1FCTSN = " "; /* Space out Factory name*/
      set AB0FM001.FY1FCTYC cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 41; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S09 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0FM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0FS09

// Edit XQTCD
Function AB0FS10()
  if (XP1REC.XQTCD == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSQT();
                                   /* Standard XQT validation/pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/

    XP1REC.XQTCD = " "; /* Space out wk area*/
    set AB0FM001.XQTCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 30; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S10 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XQTCD = " "; /* Space out wk area*/
      set AB0FM001.XQTCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S10 "; /* Process number*/

    else

      AB0FM001.XQTCD = XP1REC.XQTCD; /* Move valid code to map*/

    end

  end



end // end AB0FS10

// Edit XSUCD
Function AB0FS11()
  if (XP1REC.XSUCD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSSU();
                                   /* Standard XSU validation/pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/

    XP1REC.XSUCD = " "; /* Space out save field*/
    XP1REC.XSUABRV = " "; /* Space out desc*/
    AB0FM001.XSUABRV = " "; /* Space out desc*/
    set AB0FM001.XSUCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 31; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S11 "; /* Process number*/

  else

    AB0FM001.XSUABRV = XP1REC.XSUABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XSUCD = " "; /* Space out save field*/
      XP1REC.XSUABRV = " "; /* Space out desc*/
      AB0FM001.XSUABRV = " "; /* Space out desc*/
      set AB0FM001.XSUABRV bold; /* Highlight field*/
      set AB0FM001.XSUCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S11 "; /* Process number*/

    else

      AB0FM001.XSUCD = XP1REC.XSUCD; /* Move valid data to map*/

    end

  end



end // end AB0FS11

// Edit XPCCD
Function AB0FS12()
  if (XP1REC.XPCCD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSPC(); /* Standard XPC pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/

    XP1REC.XPCCD = " "; /* Space out save area*/
    XP1REC.XPCABRV = " "; /* Space out desc*/
    AB0FM001.XPCABRV = " "; /* Space out desc*/
    set AB0FM001.XPCCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 32; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S12 "; /* Process number*/

  else

    AB0FM001.XPCABRV = XP1REC.XPCABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/

      XP1REC.XPCCD = " "; /* Space out save area*/
      XP1REC.XPCABRV = " "; /* Space out desc*/
      AB0FM001.XPCABRV = " "; /* Space out desc*/
      set AB0FM001.XPCABRV bold; /* Highlight field*/
      set AB0FM001.XPCCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S12 "; /* Process number*/

    else

      AB0FM001.XPCCD = XP1REC.XPCCD; /* Move valid code to map*/

    end

  end



end // end AB0FS12

// Edit XGACD
Function AB0FS13()
  if (XP1REC.XGACD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSGA(); /* Standard XGA pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/

    XP1REC.XGACD = " "; /* Space out save area*/
    XP1REC.XGAABRV = " "; /* Space out desc*/
    AB0FM001.XGAABRV = " "; /* Space out desc*/
    set AB0FM001.XGACD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S13 "; /* Process number*/

  else

    AB0FM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XGACD = " "; /* Space out save area*/
      XP1REC.XGAABRV = " "; /* Space out desc*/
      AB0FM001.XGAABRV = " "; /* Space out desc*/
      set AB0FM001.XGAABRV bold; /* Highlight field*/
      set AB0FM001.XGACD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S13 "; /* Process number*/

    else

      AB0FM001.XGACD = XP1REC.XGACD; /* Move valid code to map*/

    end

  end



end // end AB0FS13

// Edit Buy mo
Function AB0FS14()
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  if (AB0FM001.AB0FMBP > " ") /* Bypass edit on AB200d*/
     /* next sentence                ;*/
    XSABSSN();
  else

    if (AB0FM001.AB0FMABS > " ") /* buy summary report*/

      if (XP1REC.XP1CBYMM >= 1 /* buy month between 1 & 12*/
       && XP1REC.XP1CBYMM <= 12)
  /*  */
  /* ---------------- y2k out begin -----------------------*/
  /*  */
  /* AND XP1REC.XP1CBYYY GT 85; /* buy year*/
  /*  */
  /* ---------------- y2k out end -------------------------*/
  /*  */
        /* next sentence*/
      else
        XP1REC.XP1ERRFL = 1; /* bad buy mo*/
      end

    else
      XSABSMO(); /* EDIT Buy-Month/XSNYR/XSECD*/
    end

  end

   /* ***** if error was with XSECD ******/
  if (XP1REC.XP1ERRFL == "3") /* Invalid season code*/

    XP1REC.XSECD = " "; /* Space out save area*/
    set AB0FM001.XSECD cursor, bold; /* Highlight field*/
    /* ***** if code was inactive ******/
    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
    else
      XP1REC.XP1MNO = 16; /* Indicate error message*/
    end
    ABWREC.ABWPRCSN = "S14 "; /* Process number*/

  else

    /* ***** if error was with XSNYR ******/
    if (XP1REC.XP1ERRFL == "2") /* Invalid season-year*/

      set AB0FM001.XSNYR cursor, bold; /* Highlight field*/
      XP1REC.XSNYR = 0; /* Space out save area*/
      XP1REC.XP1XSNYR = 0; /* Space out save area*/
      if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
        XP1REC.XP1MNO = 35; /* Indicate error message*/
      else
        XP1REC.XP1MNO = 26; /* Indicate error message*/
      end
      ABWREC.ABWPRCSN = "S14 "; /* Process number*/

    else

      if (XP1REC.XP1ERRFL == "1") /* Invalid BUY-MONTH*/

        set AB0FM001.AB3BUYMO cursor, bold; /* Highlight field*/
        XP1REC.AB3BUYMO = 0; /* Space out save area*/
        XP1REC.XP1BUYMO = 0; /* Space out save area*/
        XP1REC.XP1CBYMO = " "; /* Space out save area*/
        if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
          XP1REC.XP1MNO = 35; /* Indicate error message*/
        else
          XP1REC.XP1MNO = 34; /* Indicate error message*/
        end
        ABWREC.ABWPRCSN = "S14 "; /* Process number*/

      end
    end
  end

  if (XP1REC.XP1MNO > 0)
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Indicate error message*/
  else
    XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  end



end // end AB0FS14

// Edit Scheduler cd
Function AB0FS17()
  if (XP1REC.XXXUSER == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end



  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.PG1SC4CD = " "; /* Space out save area*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0FM001.XXXUSER cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S17 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.PG1SC4CD = " "; /* Space out save area*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0FM001.XXXUSER cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 21; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S17 "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/

      end

    end

  end



end // end AB0FS17

// Edit report request selection
Function AB0FS18()

                /* (Check request selection options)*/

  if (AB0FM001.AB0FMBP != " ") /* Buy plan option NE spaces*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end


  if (AB0FM001.AB0FMCB != " ") /* Color break option NE spaces*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end


  if (AB0FM001.AB0FMPSB != " ") /* Prelim size break option NE spaces*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end


  if (AB0FM001.AB0FMCSB != " ")
                                   /* Completed size break option NE spaces*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end


   /* IF AB0FM001.AB0FMBPR NE ' ';      /* BPR report option NE spaces*/
    /* AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
   /* END;*/


  if (AB0FM001.AB0FMFAX != " ") /* FAX format option NE spaces*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end

  if (AB0FM001.AB0FMFBC != " ") /* Fcst to buy comparison*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end

  if (AB0FM001.AB0FMABS != " ") /* Apparel buy summary report*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* Accumulate selections*/
  end

  if (AB0FM001.AB0FNBSR != " ") /* nil buy summary report*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* accumulate selections*/
  end

  if (AB0FM001.AB0FM-MULT-FCTY-STY != " ") /* mult fcty sty report*/
    AB0FW01.AB0FWSLI = AB0FW01.AB0FWSLI + 1; /* accumulate selections*/
  end
                /* (Check request selection options)*/

  if (AB0FW01.AB0FWSLI > 1) /* Multiple selections entered*/
    set AB0FM001.AB0FMBP cursor, bold; /* Highlight field*/
    set AB0FM001.AB0FMCB bold; /* Highlight field*/
    set AB0FM001.AB0FMPSB bold; /* Highlight field*/
    set AB0FM001.AB0FMCSB bold; /* Highlight field*/
    set AB0FM001.AB0FMFAX bold; /* Highlight field*/
    set AB0FM001.AB0FMFBC bold; /* highlight field*/
    set AB0FM001.AB0FMABS bold; /* highlight field*/
    set AB0FM001.AB0FNBSR bold; /* highlight field*/
    set AB0FM001.AB0FM-MULT-FCTY-STY bold; /* highlight field*/
    XP1REC.XP1MNO = 9; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S18"; /* Process number*/
  end



end // end AB0FS18

// Edit Division Code
Function AB0FS20()
  XP1REC.XDVCD = AB0FM001.AB0FMDVC; /* prepare work rec for edit*/

  if (XP1REC.XDVCD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  if (XP1REC.XDVCD == "?") /* XP1REC field eq spaces*/
    XSABSDV();
                                   /* Standard XSU validation/pop-up module*/
  end


  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/

    XP1REC.XDVCD = " "; /* Space out save field*/
    XP1REC.XDVABRV = " "; /* Space out desc*/
    AB0FM001.AB0FMABR = " "; /* Space out desc*/
    set AB0FM001.AB0FMDVC cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 75; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S20 "; /* Process number*/
  else
    AB0FM001.AB0FMDVC = XP1REC.XDVCD; /* Move code to map*/
    AB0FM001.AB0FMABR = XP1REC.XDVABRV; /* Move desc to map*/
  end

  if (XP1REC.XDVCD in XDVTBL.XDVCD) /* IF code in XP1REC is on table*/
    /* -------- MOVE values from CSP Table to XP1REC -------*/
    XP1REC.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
    XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
  else /* ELSE(CODE is not on table)*/
    XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
  end /* END of 'IF' statement*/


   /* ***************  end of division code retrieval ***********/
end // end AB0FS20

// Division Codes Pop-up window
Function XSABSDV()

                      /* Division Codes pop-up window*/

  XP1REC.XXXSTAT = " ";

  if (XP1REC.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "DIVISION CODES";

    while (XX0XW02.XX0XWEND == "N")

      XPXDV01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
      XP1REC.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
    end

  end


   /* *********  end of Division Code retrieval  *************/
end // end XSABSDV

// quota category retrieval
Function XSABSQT()



                    /* quota category retrieval*/



  XP1REC.XQTDESC2 = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XQTCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "QUOTA CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXQT01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XQTCD = XQTTBL.XQTCD[XX0XWPIX];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[XX0XWPIX];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (XP1REC.XQTCD in XQTTBL.XQTCD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XQTCD = XQTTBL.XQTCD[sysVar.arrayIndex];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* ***************  end of quota category retrieval ***********/
end // end XSABSQT

//*** RECORD=AB0FW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB0FW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 AB0FWSLI AB0FWSLI ; 
  10 AB0FWSWS AB0FWSWS ; 
  10 AB0FWXSA AB0FWXSA ; 
    15 AB0FWXSS AB0FWXSS ; 
    15 AB0FWXYR AB0FWXYR ; 
  10 AB0FWIXT AB0FWIXT ; 
  10 AB0FWXSY AB0FWXSY ; 
  10 AB0FWDTW AB0FWDTW ; 
    15 AB0FWDTC AB0FWDTC ; 
    15 AB0FWDTY AB0FWDTY ; 
    15 AB0FWDTM AB0FWDTM ; 
    15 AB0FWDTD AB0FWDTD ; 
  10 AB0FWBYM AB0FWBYM ; 
    15 AB0FWBYY AB0FWBYY ; 
    15 AB0FWBMM AB0FWBMM ; 
  10 AB0FWBOD AB0FWBOD ; 
    15 AB0FWBOY AB0FWBOY ; 
    15 AB0FWBOM AB0FWBOM ; 
  10 AB0FWEOD AB0FWEOD ; 
    15 AB0FWEOY AB0FWEOY ; 
    15 AB0FWEOM AB0FWEOM ; 
  10 AB0FW-CHAR-BUY-DATE AB0FW-CHAR-BUY-DATE ; 
    15 AB0FW-CHAR-BUY-MM AB0FW-CHAR-BUY-MM ; 
    15 * char(1) ; // Character buy slash
    15 AB0FW-CHAR-BUY-YY AB0FW-CHAR-BUY-YY ; 
end // end AB0FW01

//*** RECORD=AB0FW02 ****
// ********************************
// Application Working Storage (2).
// ********************************
// ***********************
Record AB0FW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(2) ; 
    15 AB0FWJOB AB0FWJOB ; 
    15 AB0FWDD AB0FWDD ; 
    15 * char(1) ; 
    15 AB0FWEXC AB0FWEXC ; 
    15 * char(59) ; 
end // end AB0FW02

// Character buy date
DataItem AB0FW-CHAR-BUY-DATE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character buy month
DataItem AB0FW-CHAR-BUY-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character buy year
DataItem AB0FW-CHAR-BUY-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy mo
DataItem AB0FWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy yr/mo wk
DataItem AB0FWBOD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy mo
DataItem AB0FWBOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy yr
DataItem AB0FWBOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy yr/mo wk
DataItem AB0FWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy yr
DataItem AB0FWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage DD card
DataItem AB0FWDD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date wk century
DataItem AB0FWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk day
DataItem AB0FWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk month
DataItem AB0FWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area
DataItem AB0FWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk year
DataItem AB0FWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy yr/mo wk
DataItem AB0FWEOD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy mo
DataItem AB0FWEOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy yr
DataItem AB0FWEOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage EXEC card name
DataItem AB0FWEXC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AB0FWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage JOB name
DataItem AB0FWJOB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rpt Request Select Ctr
DataItem AB0FWSLI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted switch
DataItem AB0FWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB0FWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0FWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB0FWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0FWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

