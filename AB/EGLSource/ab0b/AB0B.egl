package ab0b;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0B ****
//  DATE    USERID    COMMENT
// ------   ------    -----------------------------------------
// 071393   TDODSO    CORRECTED BUG IN PROCESS AB0B117
// 091793   SWHITA    ADDED HELP SCREEN LINK TO AB0B130,
//                    AB0B230, AB0B330.
// 112293   SBABCO    ADD WAREHOUSE CODE TO SCREEN.
// 020394   lrein     fix bug blow up if last on prev screen
//                    multiple row
// 021496   kj        fix bug for sesn > 7 months
// Y2KFIX   01/13/98  KSUMME  Y2K MODIFICATIONS MADE TO:
//   y2k changes and table changes: AB0BW00, AB0BW02, AB0BW04,
//     AB0BW05, AB0BW07, AB0B110, AB0B117, AB0B111, AB0B112,
//     AB0B115, AB0B114, AB0B130, AB0B153, AB0B161, AB0B230,
//     AB0B253, AB0B330, AB0B352, AB0B528, AB0BS-007,
//     AB0BS74, AB0BS-008, AB0BS40, AB0BS94
//   map changes to show the '00' as the yr 2000:
//     AB0BM001, AB0BM002, AB0BM003
//   global changes from Y2KMSL:  AB3REC, AB4REC, ABWREC,
//     XP1REC, XPAB020, XSABSMO
// Y2KFIX   02/10/98  tthan1  Y2K fix additional errors.
// *********************
Program AB0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0BW00 AB0BW00; // record
  AB0BW01 AB0BW01; // record
  AB0BW02 AB0BW02; // record
  AB0BW03 AB0BW03; // record
  AB0BW04 AB0BW04; // record
  AB0BW05 AB0BW05; // record
  AB0BW06 AB0BW06; // record
  AB0BW07 AB0BW07; // record
  AB0BW08 AB0BW08; // record
  AB0BW09 AB0BW09; // record
  AB0BW99 AB0BW99; // record
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  ABWREC ABWREC; // record
  AF2REC AF2REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  FY4REC FY4REC; // record
  FY6REC FY6REC; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XQTTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AB0BM.AB0BM001,  // forms
      AB0BM.AB0BM002, 
      AB0BM.AB0BM003, 
      AB0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
    set AB0BW00 empty;
    set AB0BW01 empty;
    set AB0BW02 empty;
    set AB0BW03 empty;
    set AB0BW04 empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set XX0XW02 empty;
    set ABWREC empty;
    set FY1REC empty;
    set FY4REC empty;
    set FY6REC empty;
    set PC2REC empty;
    set PC4REC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set AB0BM001 initial;
    set AB0BM002 initial;
    set AB0BM003 initial;

    ABWREC.ABWMAP = "1"; /* map number to process*/
    AB0BW00.AB0BWKCS = "Y"; /* new key*/
    AB0BW00.AB0BWDCS = "Y"; /* data changed*/

    AB0BM001.XSECD = XP1REC.XSECD;
    AB0BM001.XSNYR = XP1REC.XSNYR;
    AB0BM001.AB0BMBYY = XP1REC.XP1BUYYY;
    AB0BM001.AB0BMBMM = XP1REC.XP1BUYMM;
    AB0BM001.AB0BMXGA = XP1REC.XGACD;
    AB0BM001.AB0BMXPC = XP1REC.XPCCD;
    AB0BM001.XQTCD = XP1REC.XQTCD;
    AB0BM001.AB0BMFTY = XP1REC.FY1FCTYC;
    AB0BM001.AB0BMPOT = XP1REC.PC4ORTYP;
    AB0BM001.AB0BMSTN = XP1REC.SY1STNBR;

    XP1REC.XSECD = " ";
    XP1REC.XSNYR = 0;
    XP1REC.XP1BUYYY = 0;
    XP1REC.XP1BUYMM = 0;
    XP1REC.XGACD = " ";
    XP1REC.XPCCD = " ";
    XP1REC.XQTCD = " ";
    XP1REC.FY1FCTYC = " ";
    XP1REC.PC4ORTYP = " ";
    XP1REC.SY1STNBR = " ";

    if (COMMAREA.CACLVL[2] != "Y") /* cant look at all schedulers*/
      set AB0BM001.XXXUSER skip;
      set AB0BM002.XXXUSER skip;
      set AB0BM003.XXXUSER skip;
      AB0BM001.XXXUSER = COMMAREA.CAUSERID;
      AB0BM002.XXXUSER = COMMAREA.CAUSERID;
      AB0BM003.XXXUSER = COMMAREA.CAUSERID;
    else
      AB0BM001.XXXUSER = " ";
      AB0BM002.XXXUSER = " ";
      AB0BM003.XXXUSER = " ";
    end

    if (COMMAREA.CACLVL[1] == "Y"
     && COMMAREA.CACLVL[2] != "Y")
      set AB0BM001.AB0BMBMM skip;
      set AB0BM001.AB0BMBYY skip;
      set AB0BM002.AB0BMBMM skip;
      set AB0BM002.AB0BMBYY skip;
      set AB0BM003.AB0BMBMM skip;
      set AB0BM003.AB0BMBYY skip;
    end


    if (XP1REC.ZZZSDT != 0 /* Beg and End dates were passed*/
     && XP1REC.ZZZCHGDT != 0)
      AB0BW00.AB0BW-BEG-DATE = XP1REC.ZZZSDT;
      AB0BM001.AB0BM-BEG-MM = AB0BW00.AB0BW-BEG-MM;
      AB0BM001.AB0BM-BEG-YY = AB0BW00.AB0BW-BEG-YY;
      AB0BW00.AB0BW-END-DATE = XP1REC.ZZZCHGDT;
      AB0BM001.AB0BM-END-MM = AB0BW00.AB0BW-END-MM;
      AB0BM001.AB0BM-END-YY = AB0BW00.AB0BW-END-YY;
    end

    ABWREC.ABWSWR = "N"; /* dont obtain data*/
    AB0BW00.AB0BWFMS = "N"; /* dont format map*/
     /* END ;*/

    move " " to AB0BM001.FY1FCTYC[1] for all; /* these two lines of code*/
    ABWREC.ABWMPMAX = sysVar.arrayIndex; /* determine the max nbr of map lines*/
    move 0 to AB0BW01.AB0BWPNB[1] for all; /* these two lines of code determine*/
    AB0BW00.AB0BWAPG = sysVar.arrayIndex; /* the max nbr of saved overall scrn*/
                                     /* lines*/

    goto AB0B001; /* converse main process*/
    AB0B001: AB0B001();
    goto AB0B001;
  end // end main
end // end AB0B

// main process
Function AB0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, if specified, display the third map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (ABWREC.ABWMAP == "1") /* Map 1 was requested*/
    ABWREC.XXXMAPNM = "AB0BM001"; /* Move map name to abwrec*/
    AB0B100(); /* process map 1*/
  else

    if (ABWREC.ABWMAP == "2") /* Map 2 was requested*/
      ABWREC.XXXMAPNM = "AB0BM002"; /* Move map name to abwrec*/
      AB0B200(); /* process map 2*/
    else

      if (ABWREC.ABWMAP == "3") /* Map 3 was requested*/
        ABWREC.XXXMAPNM = "AB0BM010"; /* Move map name to abwrec*/
        AB0B300(); /* Display map 3*/
      else
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ABWREC.ABWPRCSN = "001 "; /* Process number*/
        TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = ABWREC.ABWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
        XSPF4(); /* Exit to Master Menu*/
      end

    end

  end

end // end AB0B001

// process map 1
Function AB0B100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  AB0B110(); /* Obtain the data to display*/

  AB0B120(); /* Format and display the map*/

  AB0B130(); /* Check attention identifier*/

  AB0B140(); /* Reset fields to normal intensity*/

  AB0B150(); /* Verify the entered data*/

  AB0B160(); /* Process valid input request*/


end // end AB0B100

// obtain data to display
Function AB0B110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* At end of rows, close the selected set cursor,*/
   /* Indicate that the request for data was completed.*/

   /* *** NOTE: AB0B does not use temporary storage...it uses*/
              /* an internal array to format selected data*/
              /* The array is limited to 1000 rows (for now)*/
   /* ------------------------------------------------------------*/

  if (ABWREC.ABWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* Or error has occured*/
    return; /* Return to previous process*/
  end

   /* IF AB0BW00.AB0BWKCS = 'Y'       ; new key*/
  set AB0BW01 empty;
  set AB0BW02 empty;
  set AB0BW03 empty;
  set AB0BW06 empty;
  set AB0BW07 empty;
  set AB0BW08 empty;
  set AB0BW09 empty;
  AB0BW00.AB0BWAIX = 1;
  AB0BW00.AB0BWPNB = 1; /* array page number*/
   /* MOVE 1 TO AB0BW00.AB0BWPTD    ; page to display*/
  AB0BW00.AB0BWSPG = 1; /* start page*/
  AB0BM001.XGAABRV = " ";
  AB0BM001.XPCABRV = " ";
  AB0BM001.FY1FCTSN = " ";
  AB0BM001.FY6FOABR = " ";
  AB0BM001.PC4ABRV = " ";
  AB0BW00.AB0BWFGI = 1;

  move " " to AB0BW00.AB0BWFGS[1] for all;
  AB0BW00.AB0BWFGI = 1;

  while (AB0BW00.AB0BWAIX <= AB0BW00.AB0BWAPG)
    AB0BW07.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R;
    AB0BW08.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R;
    AB0BW09.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R;
    AB0BW00.AB0BWAIX = AB0BW00.AB0BWAIX + 1;
  end

  AB0BW00.AB0BWAIX = 1; /* reinitialise array index*/

   /* --------------Y2K OUT BEGIN ----------------------*/
   /* IF AB0BM001.AB0BM-BEG-MM NE 0*/
   /* AND AB0BM001.AB0BM-BEG-YY NE 0*/
   /* AND AB0BM001.AB0BM-END-MM NE 0*/
   /* AND AB0BM001.AB0BM-END-YY NE 0;*/
   /* --------------Y2K OUT END ------------------------*/
   /* --------------Y2K IN BEGIN -----------------------*/
  if (AB0BM001.AB0BM-BEG-MM != 0
   && AB0BM001.AB0BM-END-MM != 0)
   /* --------------Y2K IN END -------------------------*/
    AB0B117(); /* set up entered date range*/
  else
    AB0B111(); /* get season months*/
  end

  if (AB0BM001.XXXUSER != XP1REC.XXXUSER) /* scheduler changed*/
    AB0B112(); /* get buy date for scheduler*/
  end

  if (AB0BW00.AB0BWKCS == "Y") /* new key*/
    AB0BW00.AB0BWPTD = 1; /* page to display*/
  end

  if (AB0BM001.AB0BMBST != " ") /* blank style entered*/
    AB0BW00.AB0BMBST = AB0BM001.AB0BMBST;
    AB0B115(); /* get finished goods styles*/
  end

   /* *********/
  AB0B113(); /* build absty key*/
  AB0BW03.AB2KEY = AB2REC.AB2KEY; /* start absty key*/
  AB0BS01(); /* open absty cursor for first fg*/
  AB0BS02(); /* fetch first row from cursor;*/

  AB0B114(); /* fetch and save data*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ABWREC.ABWSWR = "N"; /* Request for data completed*/
  end


end // end AB0B110

// get season months
Function AB0B111()
   /* *************************************************************/
   /* ***** This process will determine the BUY-MONTHS for   ******/
   /* ***** the current season as defined in XP1REC.         ******/
   /* *************************************************************/

  XP1REC.XSECD = AB0BM001.XSECD;
  if (AB0BM001.XSNYR < 85)
    XP1REC.XSNYR = 2000 + AB0BM001.XSNYR;
  else
    XP1REC.XSNYR = 1900 + AB0BM001.XSNYR;
  end

   /* *************************************************************/
   /* ***** Loop thru procedure until both XSE AND XSN values *****/
   /* ***** found on a single table row.                      *****/
   /* *************************************************************/

  ABWREC.ABWIDX5 = 0; /* SET SEASON INDEX TO 0*/
  ABWREC.ABWIDX1 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX1 != 9999
   && ABWREC.ABWIDX1 != 0) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX1] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX1] == XP1REC.XSNYR
     && YSNTBL.XGPCD[ABWIDX1] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX1] == "01")
      ABWREC.ABWIDX5 = ABWREC.ABWIDX1; /* SET SEASON INDEX*/
      ABWREC.ABWIDX1 = 0; /* END SEARCH*/
    else
      if (YSNTBL.XGPCD[ABWIDX1] != "99")
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      else
        ABWREC.ABWIDX1 = 9999; /* END OF TABLE*/
        AB0BM001.XXXMODID = "111"; /* Process number*/
        converseLib.validationFailed(71); /* Sesn/year not in table*/
        set AB0BM001.XSNYR cursor;
        set AB0BM001.XSECD cursor, bold;
        exit stack;
      end
    end
  end

  set AB0BW04 empty; /* Initialize working storage*/
  set AB0BW05 empty; /* Initialize working storage*/
   /* ********** move values to ab0bw04 **********/
  AB0BW04.AB0BWFOB = YSNTBL.XSNFOBDT[ABWIDX5];
  AB0BW04.AB0BWFOX = YSNTBL.XSNFOXDT[ABWIDX5];
  AB0BW04.AB0BWIDX = 0; /* initialize index to zero*/
  while (AB0BW04.AB0BWFOB <= AB0BW04.AB0BWFOX
   && AB0BW04.AB0BWIDX <= 6)
    AB0BW04.AB0BWIDX = AB0BW04.AB0BWIDX + 1;
   /* -----------------Y2K IN BEGIN---------------------------*/
    AB0BW04.AB0BWCCC[AB0BWIDX] = AB0BW04.AB0BWBCC;
   /* -----------------Y2K IN END-----------------------------*/
    AB0BW04.AB0BWYYY[AB0BWIDX] = AB0BW04.AB0BWBYY;
    AB0BW04.AB0BWBYM[AB0BWIDX] = AB0BW04.AB0BWBMM;
    AB0BW04.AB0BWCYY[AB0BWIDX] = AB0BW04.AB0BWBYY;
    AB0BW04.AB0BWCMM[AB0BWIDX] = AB0BW04.AB0BWBMM;
    AB0BW04.AB0BWCSL[AB0BWIDX] = "/";
    /* ----- increment BUY-MONTH by one -----*/
    if (AB0BW04.AB0BWBMM >= 12)
      AB0BW04.AB0BWBMM = 1;
      AB0BW04.AB0BWYER = AB0BW04.AB0BWYER + 1;
    else
      AB0BW04.AB0BWBMM = AB0BW04.AB0BWBMM + 1;
    end
  end
   /* ----- set MAX-MONTHS field to correct value -----*/
  AB0BW04.AB0BWMXM = AB0BW04.AB0BWIDX;

  set AB0BW05 empty; /* Initialize record*/

  AB0BW04.AB0BWIDX = 1; /* Initialize index*/
  while (AB0BW04.AB0BWIDX <= AB0BW04.AB0BWMXM) /* Loop thru table*/
    AB0BW05.AB3BUYMO[AB0BWIDX] = AB0BW04.AB0BWBMO[AB0BWIDX];
    AB0BW04.AB0BWIDX = AB0BW04.AB0BWIDX + 1; /* Increment index*/
  end

  move AB0BW05.AB0BWMPD to AB0BW04.AB0BWMPD[1] for all; /* Initialize AB0BW04 table*/


end // end AB0B111

// get buy date for scheduler
Function AB0B112()
   /* ------------------------------------------------------------*/
   /* Get Two Charactor Scheduler Code From DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/
  if (XP1REC.PG1SC4CD == "  ") /* If SCHEDULER CODE BLANK*/
    XP1REC.XXXUSER = COMMAREA.CAUSERID; /* Move CICS SIGNON ID*/
    XPAB010(); /* Get 2 Digit Sched Code*/
  end /* End of "IF" statement*/

   /* ------------------------------------------------------------*/
   /* Get current season, year, and buy month if not passed*/
   /* ------------------------------------------------------------*/
  set AB3REC empty; /* Initialize AB3REC*/
  if (XP1REC.XSECD == "  " /* If SEASON CODE BLANK*/
   /* -------------Y2K OUT BEGIN------------------------*/
   /**/
   /* OR XP1REC.XSNYR EQ 0                    /* OR SEASON-YEAR is zero*/
   /**/
   /* -------------Y2K OUT END--------------------------*/
   || XP1REC.AB3BUYMO == 0) /* OR BUY-MONTH is zero*/
    XPAB020(); /* Get Current XSE/XSN/BUY-MO*/
  end /* End of "IF" statement*/

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


   /* ----------------------------------------**/
    /* Obtain userid and system information  **/
   /* ----------------------------------------**/

  set TA3REC empty; /* Initialize subroutine params*/
  TA3REC.TA3OPTN = "ALLFLDS"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user info*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || TA3REC.TA3RTNCD != 0)          /* or non-zero return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Post error to diagnosis fcty*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine params*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Error type*/
    TA1REC.TA1LOC = "UNABLE TO OBTAIN USER INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = "XPAB001"; /* Program name*/
    TA1REC.TA1PGMNO = "001"; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    COMMAREA.CATOAP = "AB0A"; /* Application menu*/

    XSABS01(); /* Exit to application*/

    exit program; /* Severe error return to cics*/

  end


end // end AB0B112

// build absty key
Function AB0B113()
  if (AB0BM001.XSNYR < 80)
    AB2REC.XSNYR = AB0BM001.XSNYR + 2000;
  else
    AB2REC.XSNYR = AB0BM001.XSNYR + 1900;
  end

  AB2REC.XSECD = AB0BM001.XSECD;

  if (AB0BM001.AB0BMSTN != " ")
    AB2REC.SY1STNBR = AB0BM001.AB0BMSTN;
  else
    AB2REC.SY1STNBR = "******";
  end

  if (AB0BW00.AB0BWFGS[AB0BWFGI] != " ")
    AB2REC.SY1STNBR = AB0BW00.AB0BWFGS[AB0BWFGI];
  end

  if (AB0BM001.AB0BMFTY != " ")
    AB2REC.FY1FCTYC = AB0BM001.AB0BMFTY;
  else
    AB2REC.FY1FCTYC = "****";
  end

  if (AB0BM001.AB0BMXOW != " ")
    AB2REC.XOWCD = AB0BM001.AB0BMXOW;
  else
    AB2REC.XOWCD = "**";
  end

  if (AB0BM001.AB0BMPOT != " ")
    AB2REC.PC4ORTYP = AB0BM001.AB0BMPOT;
  else
    AB2REC.PC4ORTYP = "**";
  end

  if (AB0BM001.AB0BMCUX != " ")
    AB2REC.PC2CUXID = AB0BM001.AB0BMCUX;
  else
    AB2REC.PC2CUXID = "*****";
  end

   /* IF XP1REC.PG1SC4CD NE ' ';*/
    /* MOVE XP1REC.PG1SC4CD TO AB2REC.PG1SC4CD;*/
  if (AB0BM001.XXXUSER != " "
   && XP1REC.PG1SC4CD != " ")
    AB2REC.PG1SC4CD = XP1REC.PG1SC4CD;
  else
    AB2REC.PG1SC4CD = "**";
  end

  if (AB0BM001.AB0BMXGA != "  ")
    AB2REC.XGACD = AB0BM001.AB0BMXGA;
  else
    AB2REC.XGACD = "**";
  end

  if (AB0BM001.AB0BMXPC != " ")
    AB2REC.XPCCD = AB0BM001.AB0BMXPC;
  else
    AB2REC.XPCCD = "**";
  end

  if (AB0BM001.XQTCD != " ")
    AB2REC.XQTCD[1] = AB0BM001.XQTCD;
    AB2REC.XQTCD[2] = AB0BM001.XQTCD;
  else
    AB2REC.XQTCD[1] = "***";
    AB2REC.XQTCD[2] = "***";
  end

  if (AB0BM001.FY6FOCD != " ")
    AB2REC.FY6FOCD = AB0BM001.FY6FOCD;
  else
    AB2REC.FY6FOCD = "**";
  end

  if (AB0BM001.XDVCD != " ")
    AB2REC.XDVCD = AB0BM001.XDVCD;
  else
    AB2REC.XDVCD = "**";
  end


end // end AB0B113

// fetch and save data
Function AB0B114()
  AB0BW00.AB0BWFMS = "Y"; /* format map*/
  AB0BW00.AB0BWLCT = 0; /* screen line count*/
  AB0BW00.AB0BWAIX = 1; /* RESET INDEX*/


  while (SQLCA.VAGen_SQLCODE == 100 /* check for first fg w absty rec*/
   && AB0BWFGI < 200)

    AB0BW00.AB0BWFGI = AB0BW00.AB0BWFGI + 1;

    if (AB0BW00.AB0BWFGS[AB0BWFGI] != " ")
      AB0BS08(); /* close absty cursor*/
      AB0B113(); /* build key*/
      AB0BS01(); /* open absty cursor*/
      AB0BS02(); /* fetch absty row*/
    else
      AB0BW00.AB0BWFGI = 200; /* FORCE LOOP END*/
    end

  end

  while (SQLCA.VAGen_SQLCODE != 100) /* not end of rows*/

    while (SQLCA.VAGen_SQLCODE != 100 /* not end of rows*/
     && AB0BW00.AB0BWLCT < ABWREC.ABWMPMAX) /* page not full*/
      AB0BS03(); /* process absty rows*/
      AB0BW00.AB0BWLFT = ABWREC.ABWMPMAX - AB0BW00.AB0BWLCT;
      AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAIX - 1;

      if (SQLCA.VAGen_SQLCODE == 100)
        AB0BW00.AB0BWFGI = AB0BW00.AB0BWFGI + 1;

        if (AB0BWFGI <= 200
         && AB0BW00.AB0BWFGS[AB0BWFGI] != " ")
          AB0BS08(); /* close absty cursor*/
          AB0B113(); /* build key*/
          AB0BS01(); /* open absty cursor*/
          AB0BS02(); /* fetch absty row*/
        end

      end

      if (AB0BW00.AB0BWLFT < 0)
        AB0BW00.AB0BWLCT = 99;
        AB0BW01.AB0BWPNB[AB0BWAX2] = AB0BW01.AB0BWPNB[AB0BWAX2] + 1;
      end

    end

    if (AB0BW00.AB0BWLFT < 0)

      if (AB0BW00.AB0BWB3S == "Y")
        AB0BW00.AB0BWLCT = 3;
      else

        if (AB0BW00.AB0BWB2S == "Y")
          AB0BW00.AB0BWLCT = 2;
        else

          if (AB0BW00.AB0BWB1S == "Y")
            AB0BW00.AB0BWLCT = 1;
          end

        end

      end

    else
      AB0BW00.AB0BWLCT = 0;
    end

    AB0BW00.AB0BWPNB = AB0BW00.AB0BWPNB + 1;
  end


  if (AB0BW00.AB0BWAIX == 1) /* no entries in array*/
    AB0B121(); /* format map heading*/
    AB0B221(); /* format map heading*/
    AB0B321(); /* format map heading*/
    converseLib.validationFailed(5); /* msg no data to display*/
    AB0BM001.XXXMODID = "114";
    AB0BM002.XXXMODID = "114";
    AB0BM003.XXXMODID = "114";
    AB0BW00.AB0BWFMS = "N"; /* dont format map*/
  end

   /* ********* save screen key **************/

  XP1REC.XXXUSER = AB0BM001.XXXUSER;
  XP1REC.XSECD = AB0BM001.XSECD;
  XP1REC.XSNYR = AB0BM001.XSNYR;

  if (XP1REC.XSNYR < 80)
    XP1REC.XSNYR = XP1REC.XSNYR + 2000;
  else
    XP1REC.XSNYR = XP1REC.XSNYR + 1900;
  end

   /* ------------------Y2K IN BEGIN--------------------*/
   /*  */
  if (AB0BM001.AB0BMBMM > 00)
    if (AB0BM001.AB0BMBYY > 60)
      XP1REC.XP1BUYCC = 19;
    else
      XP1REC.XP1BUYCC = 20;
    end
  else
    XP1REC.XP1BUYCC = 00;
  end
   /*  */
   /* ------------------Y2K IN END----------------------*/
  XP1REC.XP1BUYYY = AB0BM001.AB0BMBYY;
  XP1REC.XP1BUYMM = AB0BM001.AB0BMBMM;
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  XP1REC.XGACD = AB0BM001.AB0BMXGA;
  XP1REC.XPCCD = AB0BM001.AB0BMXPC;
  XP1REC.PC2CUXID = AB0BM001.AB0BMCUX;
  XP1REC.XQTCD = AB0BM001.XQTCD;
  XP1REC.FY1FCTYC = AB0BM001.AB0BMFTY;
  XP1REC.FY6FOCD = AB0BM001.FY6FOCD;
  XP1REC.PC4ORTYP = AB0BM001.AB0BMPOT;
   /* ------------------Y2K IN BEGIN--------------------*/
   /*  */
  if (AB0BM001.AB0BM-BEG-MM > 00)
    if (AB0BM001.AB0BM-BEG-YY > 60)
      AB0BW00.AB0BW-BEG-CC = 19;
    else
      AB0BW00.AB0BW-BEG-CC = 20;
    end
  else
    AB0BW00.AB0BW-BEG-CC = 00;
  end
   /*  */
   /* ------------------Y2K IN END----------------------*/
  AB0BW00.AB0BW-BEG-MM = AB0BM001.AB0BM-BEG-MM;
  AB0BW00.AB0BW-BEG-YY = AB0BM001.AB0BM-BEG-YY;
   /* ------------------Y2K IN BEGIN--------------------*/
   /*  */
  if (AB0BM001.AB0BM-END-MM > 00)
    if (AB0BM001.AB0BM-END-YY > 60)
      AB0BW00.AB0BW-END-CC = 19;
    else
      AB0BW00.AB0BW-END-CC = 20;
    end
  else
    AB0BW00.AB0BW-END-CC = 00;
  end
   /*  */
   /* ------------------Y2K IN END----------------------*/
  AB0BW00.AB0BW-END-MM = AB0BM001.AB0BM-END-MM;
  AB0BW00.AB0BW-END-YY = AB0BM001.AB0BM-END-YY;
  XP1REC.ZZZSDT = AB0BW00.AB0BW-BEG-DATE;
  XP1REC.ZZZCHGDT = AB0BW00.AB0BW-END-DATE;
  XP1REC.SY1STNBR = AB0BM001.AB0BMSTN;
  AB0BW00.AB0BMBST = AB0BM001.AB0BMBST;
  AB0BW00.XDVCD = AB0BM001.XDVCD;

  AB0BS08(); /* close absty cursor*/


end // end AB0B114

// get finished good style nbrs
Function AB0B115()
  set PG2REC empty;
  AB0BW00.AB0BWAIX = 1;

  PG2REC.XGPCD = "03";
  PG2REC.SY1BSTNB = AB0BM001.AB0BMBST;
  PG2REC.XSECD = AB0BM001.XSECD;
   /* --------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* PG2REC.XSNYR = 1900 + AB0BM001.XSNYR;*/
   /* ;*/
   /* IF PG2REC.XSNYR < 1980;*/
   /* PG2REC.XSNYR = PG2REC.XSNYR + 1000;*/
   /* END;*/
   /*  */
   /* -------------Y2K OUT END----------------------*/
   /* --------------Y2K IN BEGIN--------------------*/
   /*  */
  PG2REC.XSNYR = AB0BM001.XSNYR;

  if (PG2REC.XSNYR > 60)
    PG2REC.XSNYR = PG2REC.XSNYR + 1900;
  else
    PG2REC.XSNYR = PG2REC.XSNYR + 2000;
  end
   /*  */
   /* -------------Y2K IN END----------------------*/
  AB0BSA1(); /* select set*/
  AB0BW00.AB0BWAIX = 1;

  while (SQLCA.VAGen_SQLCODE == 0
   && AB0BW00.AB0BWAIX < 200)
    AB0BSA2(); /* fetch finished good*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (PG2REC.SY1STNBR != AB0BW00.AB0BWFGS[AB0BWAIX])
        if (AB0BW00.AB0BWFGS[AB0BWAIX] > " ")
          AB0BW00.AB0BWAIX = AB0BW00.AB0BWAIX + 1;
        end
        AB0BW00.AB0BWFGS[AB0BWAIX] = PG2REC.SY1STNBR;
      end
    end

  end

  AB0BSA3(); /* close cursor*/
end // end AB0B115

// Set up entered date range
Function AB0B117()
  set AB0BW04 empty; /* Initialize working storage*/

  AB0BW04.AB0BW-BEG-DATE = AB0BW00.AB0BW-BEG-DATE;
  AB0BW04.AB0BWIDX = 0; /* initialize index to zero*/

  while (AB0BW04.AB0BW-BEG-DATE <= AB0BW00.AB0BW-END-DATE)
    AB0BW04.AB0BWIDX = AB0BW04.AB0BWIDX + 1;
   /* ---------------Y2K IN BEGIN----------------------------*/
    AB0BW04.AB0BWCCC[AB0BWIDX] = AB0BW04.AB0BW-BEG-CC;
   /* ---------------Y2K IN END------------------------------*/
    AB0BW04.AB0BWYYY[AB0BWIDX] = AB0BW04.AB0BW-BEG-YY;
    AB0BW04.AB0BWBYM[AB0BWIDX] = AB0BW04.AB0BW-BEG-MM;
    AB0BW04.AB0BWCYY[AB0BWIDX] = AB0BW04.AB0BW-BEG-YY;
    AB0BW04.AB0BWCMM[AB0BWIDX] = AB0BW04.AB0BW-BEG-MM;
    AB0BW04.AB0BWCSL[AB0BWIDX] = "/";

    if (AB0BW04.AB0BW-BEG-MM >= 12)
      AB0BW04.AB0BW-BEG-MM = 1;
      AB0BW04.AB0BW-BEG-YY = AB0BW04.AB0BW-BEG-YY + 1;
   /* --------------Y2K IN BEGIN------------------------------*/
      if (AB0BW04.AB0BW-BEG-YY > 60)
        AB0BW04.AB0BW-BEG-CC = 19;
      else
        AB0BW04.AB0BW-BEG-CC = 20;
      end
   /* --------------Y2K IN END--------------------------------*/
    else
      AB0BW04.AB0BW-BEG-MM = AB0BW04.AB0BW-BEG-MM + 1;
    end

  end

   /* ----- set MAX-MONTHS field to correct value -----*/

  AB0BW04.AB0BWMXM = AB0BW04.AB0BWIDX;

  set AB0BW05 empty; /* Initialize record*/

  AB0BW04.AB0BWIDX = 1; /* Initialize index*/
  while (AB0BW04.AB0BWIDX <= AB0BW04.AB0BWMXM) /* Loop thru table*/
    AB0BW05.AB3BUYMO[AB0BWIDX] = AB0BW04.AB0BWBMO[AB0BWIDX];
    AB0BW04.AB0BWIDX = AB0BW04.AB0BWIDX + 1; /* Increment index*/
  end

  move AB0BW05.AB0BWMPD to AB0BW04.AB0BWMPD[1] for all; /* Initialize AB0BW04 table*/


end // end AB0B117

// format and display map 1
Function AB0B120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  AB0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  if (AB0BW00.AB0BWFMS == "Y") /* map to be formatted*/
    if (converseVar.validationMsgNum == 0 
     || converseVar.validationMsgNum == 2 /* pf7 and top of data*/
     || converseVar.validationMsgNum == 3 /* pf8 and bottom of data*/
     || converseVar.validationMsgNum == 70) /* restrict selection criteria*/
      AB0B121(); /* format heading*/
      ABWREC.ABWIXM = 1; /* first screen line*/

      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
  /* MOVE ' ' TO AB0BM001.XOWCD(ABWIXM);*/
        AB0BM001.XWH-WHSE-CD[ABWIXM] = " ";
        AB0BM001.FY1FCTYC[ABWIXM] = " ";
        AB0BM001.SY1STNBR[ABWIXM] = " ";
        AB0BM001.PC4ORTYP[ABWIXM] = " ";
        AB0BM001.PG1SC4CD[ABWIXM] = " ";
        AB0BM001.AB4BQCFL[ABWIXM] = " ";
        AB0BM001.AB0BMQT1[ABWIXM] = 0;
        AB0BM001.AB0BMBS1[ABWIXM] = " ";
        AB0BM001.AB0BMQT2[ABWIXM] = 0;
        AB0BM001.AB0BMBS2[ABWIXM] = " ";
        AB0BM001.AB0BMQT3[ABWIXM] = 0;
        AB0BM001.AB0BMBS3[ABWIXM] = " ";
        AB0BM001.AB0BMQT4[ABWIXM] = 0;
        AB0BM001.AB0BMBS4[ABWIXM] = " ";
        AB0BM001.AB0BMQT5[ABWIXM] = 0;
        AB0BM001.AB0BMBS5[ABWIXM] = " ";
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
      end

      ABWREC.ABWIXM = 1; /* first screen line*/

      if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in array*/
        AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start at this element*/
      else
        AB0BW00.AB0BWPTD = 1; /* display page 1*/
        AB0BW00.AB0BWAX2 = 1; /* start at first element*/
      end

      if (AB0BW01.AB0BWPNB[AB0BWAX2] > 0)
        while (AB0BW00.AB0BWAX2 <= 425)
          if (AB0BW00.AB0BWPTD == AB0BW01.AB0BWPNB[AB0BWAX2] /* gtr*/
           && AB0BW01.AB0BWPNB[AB0BWAX2] != 0)              
            AB0B122(); /* format detail lines*/
          else
            AB0BW00.AB0BWAX2 = +999; /* end loop*/
          end
          AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1;
        end
      end

      ABWREC.ABWIXM = 1; /* first screen line*/

      if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in array*/
        AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start at this element*/
      else
        AB0BW00.AB0BWPTD = 1; /* display page 1*/
        AB0BW00.AB0BWAX2 = 1; /* start at first element*/
      end

      if (AB0BW01.AB0BWPNB[AB0BWAX2] > 0)
        while (AB0BW00.AB0BWAX2 <= 425)
          if (AB0BW00.AB0BWPTD == AB0BW01.AB0BWPNB[AB0BWAX2] /* gtx*/
           && AB0BW01.AB0BWPNB[AB0BWAX2] != 0)              
            AB0B222(); /* format detail lines*/
          else
            AB0BW00.AB0BWAX2 = +999; /* end loop*/
          end
          AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1;
        end
      end

    end

  end

  if (AB0BW00.AB0BWKCS == "Y"           /* new key*/
   && converseVar.validationMsgNum != 0 /* errors (no data found)*/
   && converseVar.validationMsgNum != 2 /* pf7 and top of data*/
   && converseVar.validationMsgNum != 3 /* pf8 and bottom of data*/
   && converseVar.validationMsgNum != 70) /* restrict data*/
    ABWREC.ABWIXM = 1; /* first screen line*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
  /* MOVE ' ' TO AB0BM001.XOWCD(ABWIXM);*/
      AB0BM001.XWH-WHSE-CD[ABWIXM] = " ";
      AB0BM001.FY1FCTYC[ABWIXM] = " ";
      AB0BM001.SY1STNBR[ABWIXM] = " ";
      AB0BM001.PC4ORTYP[ABWIXM] = " ";
      AB0BM001.PG1SC4CD[ABWIXM] = " ";
      AB0BM001.AB4BQCFL[ABWIXM] = " ";
      AB0BM001.AB0BMQT1[ABWIXM] = 0;
      AB0BM001.AB0BMBS1[ABWIXM] = " ";
      AB0BM001.AB0BMQT2[ABWIXM] = 0;
      AB0BM001.AB0BMBS2[ABWIXM] = " ";
      AB0BM001.AB0BMQT3[ABWIXM] = 0;
      AB0BM001.AB0BMBS3[ABWIXM] = " ";
      AB0BM001.AB0BMQT4[ABWIXM] = 0;
      AB0BM001.AB0BMBS4[ABWIXM] = " ";
      AB0BM001.AB0BMQT5[ABWIXM] = 0;
      AB0BM001.AB0BMBS5[ABWIXM] = " ";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

  end

  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* screen index to max*/

  while (ABWREC.ABWIXM >= 1) /* for each screen line*/
    if (AB0BM001.SY1STNBR[ABWIXM] == " ") /* with no entry*/
  /* SET AB0BM001.XOWCD(ABWIXM) AUTOSKIP,DARK;*/
      set AB0BM001.XWH-WHSE-CD[ABWIXM] skip, invisible;
      set AB0BM001.FY1FCTYC[ABWIXM] skip, invisible;
      set AB0BM001.SY1STNBR[ABWIXM] skip, invisible;
      set AB0BM001.PC4ORTYP[ABWIXM] skip, invisible;
      set AB0BM001.PC2CUXID[ABWIXM] skip, invisible;
      set AB0BM001.PG1SC4CD[ABWIXM] skip, invisible;
      set AB0BM001.AB4BQCFL[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMQT1[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMBS1[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMQT2[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMBS2[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMQT3[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMBS3[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMQT4[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMBS4[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMQT5[ABWIXM] skip, invisible;
      set AB0BM001.AB0BMBS5[ABWIXM] skip, invisible;
    end

    AB0BS-006();

    if (AB0BW00.AB0BWATR[ABWIXM] == "D")
  /* SET AB0BM001.XOWCD(ABWIXM) AUTOSKIP,DARK;*/
      set AB0BM001.XWH-WHSE-CD[ABWIXM] skip, invisible;
      set AB0BM001.FY1FCTYC[ABWIXM] skip, invisible;
      set AB0BM001.SY1STNBR[ABWIXM] skip, invisible;
      set AB0BM001.PC4ORTYP[ABWIXM] skip, invisible;
      set AB0BM001.PC2CUXID[ABWIXM] skip, invisible;
      set AB0BM001.PG1SC4CD[ABWIXM] skip, invisible;
      set AB0BM001.AB4BQCFL[ABWIXM] skip, invisible;
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* prev screen line*/
  end

  ABWREC.ABWIDX1 = 1; /* first column*/

  while (ABWREC.ABWIDX1 <= 5) /* for each qty column*/
    if (AB0BW04.AB0BWCMO[ABWIDX1] > " ")
      AB0BM001.AB0BMBYM[ABWIDX1] = AB0BW04.AB0BWCMO[ABWIDX1];
      set AB0BM001.AB0BMBYM[ABWIDX1] initialAttributes;
    else
      AB0BM001.AB0BMBYM[ABWIDX1] = "     ";
    end
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* next column*/
  end

  if (converseVar.validationMsgNum == 0)
    if (ABWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(ABWREC.XXXMSGNO);
    end
  end
  ABWREC.XXXMSGNO = 0;

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0BM001 alarm; /* Indicate sound alarm*/
  end

   /* MOVE 'N' TO AB0BW00.AB0BWFMS    ; dont format map*/
  converseLib.clearScreen();
  
  converse AB0BM001 ;

  AB0BW00.AB0BWKCS = "N";
end // end AB0B120

// format map 1 heading
Function AB0B121()
  AB0BM001.XGAABRV = " ";
  AB0BM001.XPCABRV = " ";
  AB0BM001.XDVDESC = " ";
  AB0BM001.PC4ABRV = " ";
  AB0BM001.FY6FOABR = " ";
  AB0BM001.FY1FCTSN = " ";
  AB0BM001.AB0BMSTD = " ";
  AB0BM001.XOWABRV = " ";

  if (AB0BM001.AB0BMXGA in XGATBL.XGACD)
    AB0BM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
  else

    if (AB0BM001.AB0BMXGA != " ")
      AB0BM001.XGAABRV = "UNKNOWN";
    end

  end

  if (AB0BM001.AB0BMXPC in XPCTBL.XPCCD)
    AB0BM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    if (AB0BM001.AB0BMXPC != " ")
      AB0BM001.XPCABRV = "UNKNOWN";
    end

  end

  if (AB0BM001.XDVCD in XDVTBL.XDVCD)
    AB0BM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  else
    if (AB0BM001.XDVCD != " ")
      AB0BM001.XDVDESC = "UNKNOWN";
    end

  end

  AB0BW00.XWHCD = "51";
  AB0BW00.XOWCD = AB0BM001.AB0BMXOW;

  if (AB0BW00.XOWKEY in XOWTBL.XOWKEY)
    AB0BM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    if (AB0BM001.AB0BMXOW != " ")
      AB0BM001.XOWABRV = "UNKNOWN";
    end

  end

  if (AB0BM001.AB0BMPOT != " ")
    AB0BM001.PC4ABRV = XP1REC.PC4ABRV;
  end

  if (AB0BM001.FY6FOCD != " ")
    AB0BM001.FY6FOABR = XP1REC.FY6FOABR;
  end

  if (AB0BM001.AB0BMFTY != " ")
    AB0BS20(); /* get factory short name*/
    AB0BM001.FY1FCTSN = AB0BW00.FY1FCTSN;
  end

  if (AB0BM001.AB0BMSTN != " ")
    AB0BS15(); /* get style short name*/
  end

  if (COMMAREA.CACLVL[2] != "Y") /* cant look at all schedulers*/
    set AB0BM001.XXXUSER skip;
    AB0BM001.XXXUSER = XP1REC.XXXUSER;
  end

  if (COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] != "Y") /* these correspond to prof &ab4*/
    set AB0BM001.AB0BMBMM skip;
    set AB0BM001.AB0BMBYY skip;
  end

end // end AB0B121

// format map 1 detail lines
Function AB0B122()

  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BS-005(); /* load map1 qtys*/
  AB0BW00.AB0BWBIX = 1; /* first entry this season*/

  while (AB0BW00.AB0BWBIX <= 7 /* for each entry*/
   && AB0BM001.AB4BQCFL[ABWIXM] != "C") /* or qty changed*/

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
      AB0BM001.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next entry*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first entry this season*/

  while (AB0BW00.AB0BWBIX <= 7 /* for each entry*/
   && AB0BM001.AB4BQCFL[ABWIXM] != "C") /* or qty changed*/

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
      AB0BM001.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next entry*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first entry this season*/

  while (AB0BW00.AB0BWBIX <= 7 /* for each entry*/
   && AB0BM001.AB4BQCFL[ABWIXM] != "C") /* or qty changed*/

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
      AB0BM001.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next entry*/
  end

  AB0BS09(); /* protect screen line*/
  ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")

    AB0BS-005(); /* load map1 qtys*/

    /* SET AB0BM001.AB0BMSCD(ABWIXM) AUTOSKIP,DARK;*/
    /* SET AB0BM001.XOWCD(ABWIXM) AUTOSKIP,DARK;*/
    set AB0BM001.XWH-WHSE-CD[ABWIXM] skip, invisible;
    set AB0BM001.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM001.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM001.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM001.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM001.PG1SC4CD[ABWIXM] skip, invisible;
    AB0BW00.AB0BWATR[ABWIXM] = "D";
    AB0BS09(); /* protect screen line*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end
  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")

    AB0BS-005(); /* load map1 qtys*/

    /* SET AB0BM001.AB0BMSCD(ABWIXM) AUTOSKIP,DARK;*/
    /* SET AB0BM001.XOWCD(ABWIXM) AUTOSKIP,DARK;*/
    set AB0BM001.XWH-WHSE-CD[ABWIXM] skip, invisible;
    set AB0BM001.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM001.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM001.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM001.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM001.PG1SC4CD[ABWIXM] skip, invisible;
    AB0BW00.AB0BWATR[ABWIXM] = "D";
    AB0BS09(); /* protect screen line*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end

end // end AB0B122

// check attention identifier
Function AB0B130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AB0BM001 initial; /* Clear the map fields*/
    AB0BW00.AB0BWFMS = "Y"; /* redisplay page data from WS*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AB0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0BM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0BM001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set AB0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    AB0BM001.XXXMODID = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0BM001"; /* Appl find code*/
    end
    XSABS01(); /* Exit to another application*/
    AB0BM001.XXXMODID = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "AB0F";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey is pf13)

    if (XP1REC.AB3BUYMO == 0)
   /* ---------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* MOVE 9999 TO XP1REC.AB3BUYMO;*/
   /*  */
   /* ---------------Y2K OUT END---------------------*/
   /* ---------------Y2K IN BEGIN-------------------*/
   /*  */
      XP1REC.AB3BUYMO = 999999;
   /*  */
   /* ---------------Y2K IN END---------------------*/
    end

    COMMAREA.CATOAP = "AB0E";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* scroll forward*/
   && converseVar.eventKey not pf8   /* scroll backward*/
   && converseVar.eventKey not pf9   /* reset all chg ind*/
   && converseVar.eventKey not pf11  /* screen two*/
   && converseVar.eventKey not pf12) /* screen three*/
    AB0BM001.XXXMODID = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end AB0B130

// reset highlighted fields
Function AB0B140()
  set AB0BM001.XXXUSER initialAttributes;
  set AB0BM001.XSECD initialAttributes;
  set AB0BM001.XSNYR initialAttributes;
  set AB0BM001.AB0BMBMM initialAttributes;
  set AB0BM001.AB0BMBYY initialAttributes;
  set AB0BM001.AB0BMXGA initialAttributes;
  set AB0BM001.AB0BMXPC initialAttributes;
  set AB0BM001.AB0BMXOW initialAttributes;
  set AB0BM001.XQTCD initialAttributes;
  set AB0BM001.AB0BMCUX initialAttributes;
  set AB0BM001.AB0BMFTY initialAttributes;
  set AB0BM001.FY6FOCD initialAttributes;
  set AB0BM001.AB0BMSTN initialAttributes;
  set AB0BM001.AB0BMBST initialAttributes;
  set AB0BM001.AB0BMPOT initialAttributes;
  set AB0BM001.AB0BM-BEG-MM initialAttributes;
  set AB0BM001.AB0BM-BEG-YY initialAttributes;
  set AB0BM001.AB0BM-END-MM initialAttributes;
  set AB0BM001.AB0BM-END-YY initialAttributes;
  set AB0BM001.XDVCD initialAttributes;
  ABWREC.ABWIXM = 1; /* first screen line*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
    /* SET AB0BM001.XOWCD(ABWIXM) DEFINED;*/
    set AB0BM001.XWH-WHSE-CD[ABWIXM] initialAttributes;
    set AB0BM001.FY1FCTYC[ABWIXM] initialAttributes;
    set AB0BM001.SY1STNBR[ABWIXM] initialAttributes;
    set AB0BM001.PC4ORTYP[ABWIXM] initialAttributes;
    set AB0BM001.PC2CUXID[ABWIXM] initialAttributes;
    set AB0BM001.PG1SC4CD[ABWIXM] initialAttributes;
    set AB0BM001.AB4BQCFL[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMQT1[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMBS1[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMQT2[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMBS2[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMQT3[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMBS3[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMQT4[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMBS4[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMQT5[ABWIXM] initialAttributes;
    set AB0BM001.AB0BMBS5[ABWIXM] initialAttributes;
    AB0BS09(); /* protect detail line fields*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end

end // end AB0B140

// validate entered data
Function AB0B150()

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    AB0B151(); /* validate pf keys*/
  else
    AB0B152(); /* check if key or data changed*/

    if (AB0BW00.AB0BWKCS == "Y") /* key changed*/
      AB0B153(); /* validate new key*/
    else

      if (AB0BW00.AB0BWDCS == "Y")
        AB0B154(); /* validate line data*/
      end

    end

  end

  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

end // end AB0B150

// validate pf keys
Function AB0B151()
  if (converseVar.eventKey is pf8) /* scroll forward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1;

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB /* page to disp in array*/
     && AB0BW00.AB0BWPTD <= 464)             /* less max possible*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
    else
      converseLib.validationFailed(3); /* no more scrolling*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
      AB0BM001.XXXMODID = "151"; /* process number*/
      AB0BW00.AB0BWFMS = "Y"; /* format map*/
      exit stack; /* return to flow*/
    end

  else

    if (converseVar.eventKey is pf7) /* scroll backward request*/

      if (AB0BW00.AB0BWPTD <= 1) /* already on first page*/
        converseLib.validationFailed(2); /* top of data already*/
        AB0BM001.XXXMODID = "151"; /* process number*/
        AB0BW00.AB0BWFMS = "Y"; /* format map*/
        exit stack; /* return to flow*/
      end

    end

  end

end // end AB0B151

// check if key or data changed
Function AB0B152()
  AB0BW00.AB0BWKCS = "N"; /* key didnt change*/

  if (AB0BM001.XSNYR > 80)
    AB0BW00.AB0BWSYR = 1900 + AB0BM001.XSNYR;
  else
    AB0BW00.AB0BWSYR = 2000 + AB0BM001.XSNYR;
  end

  if (AB0BM001.XXXUSER != XP1REC.XXXUSER
   || AB0BM001.XSECD != XP1REC.XSECD
   || AB0BW00.AB0BWSYR != XP1REC.XSNYR
   || AB0BM001.AB0BMBMM != XP1REC.XP1BUYMM
   || AB0BM001.AB0BMBYY != XP1REC.XP1BUYYY
   || AB0BM001.AB0BMXGA != XP1REC.XGACD
   || AB0BM001.AB0BMXPC != XP1REC.XPCCD
   || AB0BM001.AB0BMCUX != XP1REC.PC2CUXID
   || AB0BM001.AB0BMFTY != XP1REC.FY1FCTYC
   || AB0BM001.AB0BMSTN != XP1REC.SY1STNBR
   || AB0BM001.FY6FOCD != XP1REC.FY6FOCD
   || AB0BM001.XQTCD != XP1REC.XQTCD
   || AB0BM001.AB0BMPOT != XP1REC.PC4ORTYP
   || AB0BM001.AB0BM-BEG-MM != AB0BW00.AB0BW-BEG-MM
   || AB0BM001.AB0BM-BEG-YY != AB0BW00.AB0BW-BEG-YY
   || AB0BM001.AB0BM-END-MM != AB0BW00.AB0BW-END-MM
   || AB0BM001.AB0BM-END-YY != AB0BW00.AB0BW-END-YY
   || AB0BM001.AB0BMXOW != AB0BW00.XOWCD
   || AB0BM001.AB0BMBST != AB0BW00.AB0BMBST
   || AB0BM001.XDVCD != AB0BW00.XDVCD)
    AB0BW00.AB0BWKCS = "Y"; /* key changed*/
    return;
  end

  ABWREC.ABWIXM = 1; /* first screen line*/
  AB0BW00.AB0BWDCS = "N"; /* data didnt change*/

  if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in page array*/
    AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start with this element*/
  else
    AB0BW00.AB0BWAX2 = 0; /* reset*/
  end

  if (AB0BW00.AB0BWAX2 > 0)
    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX /* for each map line*/
     && AB0BW00.AB0BWDCS != "Y"          /* while data didnt change*/
     && AB0BW01.AB0BWPNB[AB0BWAX2] == AB0BW00.AB0BWPTD)
                                   /* array pg = disp pg*/

      if (AB0BW01.FY1FCTYC[AB0BWAX2] != AB0BM001.FY1FCTYC[ABWIXM]
       || AB0BW01.PC4ORTYP[AB0BWAX2] != AB0BM001.PC4ORTYP[ABWIXM]
       || AB0BW01.PC2CUXID[AB0BWAX2] != AB0BM001.PC2CUXID[ABWIXM]
       || AB0BW01.PG1SC4CD[AB0BWAX2] != AB0BM001.PG1SC4CD[ABWIXM]
       || AB0BW01.XWH-WHSE-CD[AB0BWAX2] != AB0BM001.XWH-WHSE-CD[ABWIXM])
        /* OR AB0BM001.AB0BMSCD(ABWIXM) NE ' ';*/
        AB0BW00.AB0BWDCS = "Y"; /* data changed*/
      else /* data didnt change yet*/
        AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/

        if (AB0BM001.AB0BMQT1[ABWIXM] != AB0BW02.AB4SMBQT[1]
         || AB0BM001.AB0BMQT2[ABWIXM] != AB0BW02.AB4SMBQT[2]
         || AB0BM001.AB0BMQT3[ABWIXM] != AB0BW02.AB4SMBQT[3]
         || AB0BM001.AB0BMQT4[ABWIXM] != AB0BW02.AB4SMBQT[4]
         || AB0BM001.AB0BMQT5[ABWIXM] != AB0BW02.AB4SMBQT[5])
          AB0BW00.AB0BWDCS = "Y"; /* data changed*/
        else /* data didnt change yet*/
          AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
          AB0BS10(); /* bucket 2, 3 exists & changed*/
          AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
          AB0BS10(); /* bucket 2, 3 exists & changed*/
        end

      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
      AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next array element*/
    end
  end

end // end AB0B152

// validate new key
Function AB0B153()
  if (AB0BM001.AB0BMXOW != AB0BW00.XOWCD)

    if (AB0BM001.AB0BMXOW != " ")
      AB0BS-001(); /* Validate owner group code*/
    else
      AB0BM001.XOWABRV = " ";
    end

  end

  if (AB0BM001.XDVCD != AB0BW00.XDVCD)

    if (AB0BM001.XDVCD != " ")
      AB0BS11(); /* Validate division code*/
    else
      AB0BM001.XDVDESC = " ";
    end

  end

  if (AB0BM001.AB0BMPOT != XP1REC.PC4ORTYP)

    if (AB0BM001.AB0BMPOT != " ")
      AB0BS14(); /* Validate PO type*/
    else
      XP1REC.PC4ABRV = " ";
      XP1REC.PC4ORTYP = " ";
    end

  end

  if (AB0BM001.AB0BMSTN != XP1REC.SY1STNBR)

    if (AB0BM001.AB0BMSTN != " ")
      AB0BS15(); /* Validate Style no*/
    else
      AB0BM001.AB0BMSTD = " ";
      AB0BW00.SY1SSTNM = " ";
    end

  end

  if (AB0BM001.AB0BMSTN != " "
   && AB0BM001.AB0BMBST != " ")
    converseLib.validationFailed(100);
    set AB0BM001.AB0BMBST cursor, bold;
    AB0BM001.XXXMODID = "153";
  end

  if (AB0BM001.AB0BMBST != " ")
    set PG2REC empty;
    PG2REC.SY1BSTNB = AB0BM001.AB0BMBST;
    PG2REC.XSECD = AB0BM001.XSECD;
    PG2REC.XGPCD = "03";
   /* ----------Y2K OUT BEGIN---------------------*/
   /*  */
   /* PG2REC.XSNYR = 1900 + AB0BM001.XSNYR;*/
   /* ;*/
   /* IF PG2REC.XSNYR < 1980;*/
   /* PG2REC.XSNYR = PG2REC.XSNYR + 1000;*/
   /* END;*/
   /*  */
   /* ----------Y2K OUT END-----------------------*/
   /* ----------Y2K IN BEGIN---------------------*/
   /*  */
    PG2REC.XSNYR = AB0BM001.XSNYR;

    if (PG2REC.XSNYR > 60)
      PG2REC.XSNYR = PG2REC.XSNYR + 1900;
    else
      PG2REC.XSNYR = PG2REC.XSNYR + 2000;
    end
   /*  */
   /* ----------Y2K IN END-----------------------*/

    AB0BSA0();

    if (SQLCA.VAGen_SQLCODE == 100)
      set AB0BM001.AB0BMBST cursor, bold;
    end

  end

  if (AB0BM001.FY6FOCD != XP1REC.FY6FOCD)

    if (AB0BM001.FY6FOCD != " ")
      AB0BS19(); /* Validate lia/field office*/
    else
      AB0BM001.FY6FOABR = " ";
      XP1REC.FY6FOABR = " ";
      XP1REC.FY6FOCD = " ";
    end

  end

  if (AB0BM001.AB0BMFTY != XP1REC.FY1FCTYC)

    if (AB0BM001.AB0BMFTY != " ")
      AB0BS20(); /* Validate Factory cd*/
    else
      AB0BW00.FY1FCTSN = " ";
      XP1REC.FY1FCTYC = " ";
    end

  end

  if (AB0BM001.XQTCD != XP1REC.XQTCD)

    if (AB0BM001.XQTCD != " ")
      AB0BS21(); /* Validate Quota cat cd*/
    else
      XP1REC.XQTCD = " ";
    end

  end

  if (AB0BM001.AB0BMXPC != XP1REC.XPCCD)

    if (AB0BM001.AB0BMXPC != " ")
      AB0BS23(); /* Validate prod Category cd*/
    else
      AB0BM001.XPCABRV = " ";
      XP1REC.XPCABRV = " ";
      XP1REC.XPCCD = " ";
    end

  end

  if (AB0BM001.AB0BMXGA != XP1REC.XGACD)

    if (AB0BM001.AB0BMXGA != " ")
      AB0BS25(); /* Validate Gender/Age cd*/
    else
      AB0BM001.XGAABRV = " ";
      XP1REC.XGAABRV = " ";
      XP1REC.XGACD = " ";
    end

  end

  if (AB0BM001.XSNYR != XP1REC.XSNYR)
    AB0BS27(); /* Validate season/year*/
  end

  if (AB0BM001.XSECD != XP1REC.XSECD
   && AB0BM001.XXXMODID != "S27") /* valid sesn/year*/
    AB0BS28(); /* Validate Season/year/buy-mth*/
  end

  if (AB0BM001.XXXMODID != "S27") /* valid sesn/year*/

    if (AB0BM001.AB0BMBMM != XP1REC.XP1BUYMM
     || AB0BM001.AB0BMBYY != XP1REC.XP1BUYYY)
      AB0BS28(); /* Validate Season/year/buy-mth*/
    end

  end

  if (AB0BM001.XXXUSER != XP1REC.XXXUSER)
    if (AB0BM001.XXXUSER != " ")
      AB0BS29(); /* Validate Scheduler cd*/
    else
      XP1REC.XXXUSER = " ";
    end

  end

  if (AB0BM001.AB0BM-BEG-MM != AB0BW00.AB0BW-BEG-MM
   || AB0BM001.AB0BM-BEG-YY != AB0BW00.AB0BW-BEG-YY
   || AB0BM001.AB0BM-END-MM != AB0BW00.AB0BW-END-MM
   || AB0BM001.AB0BM-END-YY != AB0BW00.AB0BW-END-YY)

   /* --------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* /IF AB0BM001.AB0BM-BEG-MM NE 0*/
   /* /  AND AB0BM001.AB0BM-BEG-YY NE 0*/
   /* /  AND AB0BM001.AB0BM-END-MM NE 0*/
   /* /  AND AB0BM001.AB0BM-END-YY NE 0;*/
   /*  */
   /* --------------Y2K OUT END---------------------*/
   /* --------------Y2K IN BEGIN-------------------*/
   /*  */
    if (AB0BM001.AB0BM-BEG-MM != 0
     && AB0BM001.AB0BM-END-MM != 0)
   /*  */
   /* --------------Y2K IN END---------------------*/
      AB0BS-007(); /* Validate entered range*/
    else

      if (AB0BM001.AB0BM-BEG-MM == 0
       && AB0BM001.AB0BM-BEG-YY == 0
       && AB0BM001.AB0BM-END-MM == 0
       && AB0BM001.AB0BM-END-YY == 0)
        AB0BW00.AB0BW-BEG-DATE = 0;
        AB0BW00.AB0BW-END-DATE = 0;
      else
        set AB0BM001.AB0BM-BEG-MM cursor, bold;
        set AB0BM001.AB0BM-BEG-YY bold;
        set AB0BM001.AB0BM-END-MM bold;
        set AB0BM001.AB0BM-END-YY bold;
        converseLib.validationFailed(34); /* Need to enter all four dates*/
        AB0BM001.XXXMODID = "151";
      end

    end

  end

end // end AB0B153

// validate line data
Function AB0B154()
  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* last line on screen*/

  while (ABWREC.ABWIXM > 0) /* for each line on screen*/

    if (AB0BM001.SY1STNBR[ABWIXM] != " ")
      AB0BS30(); /* validate scheduler code*/
      AB0BS31(); /* validate factory code*/
      AB0BS32(); /* validate cust xref*/
      AB0BS33(); /* validate po type*/
      AB0BS3F(); /* validate warehouse code*/
     /* AB0BS34;                      /* validate delete code*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* previous screen line*/
  end

end // end AB0B154

// process valid request
Function AB0B160()
  if (converseVar.eventKey is pf7) /* scroll backward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* display prev page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    ABWREC.ABWIXM = 1;

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      AB0BW00.AB0BWATR[ABWIXM] = " ";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1; /* display next page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    ABWREC.ABWIXM = 1;

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      AB0BW00.AB0BWATR[ABWIXM] = " ";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    return; /* return to calling process*/
  end

  if (converseVar.eventKey is pf11) /* display map 2*/
    ABWREC.ABWMAP = "2"; /* map 2 process*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return;
  end

  if (converseVar.eventKey is pf12) /* display map 3*/
    ABWREC.ABWMAP = "3"; /* map 3 process*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return;
  end

  if (converseVar.eventKey is pf9) /* reset all ind*/
    AB0B161(); /* reset all changed indicators process*/
    ABWREC.ABWSWR = "Y"; /* request data*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWIXM = 1;

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      AB0BW00.AB0BWATR[ABWIXM] = " ";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    return;
  end

  if (AB0BW00.AB0BWKCS == "Y") /* key changed*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "Y"; /* request data*/
    ABWREC.ABWIXM = 1;

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      AB0BW00.AB0BWATR[ABWIXM] = " ";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    return;
  end


  if (AB0BW00.AB0BWKCS == "N" /* key didnt change*/
   && AB0BW00.AB0BWDCS == "N") /* data didnt change*/
    AB0BW00.AB0BWFMS = "Y"; /* no pf keys*/
    ABWREC.ABWSWR = "N"; /* aint nothin happened*/
    return; /* dont do nothin (just refmt map)*/
  end

   /* ------------------------------------------------------------*/
   /* this is now the update pass.  The progie only gets here if*/
   /* data was changed & the data bases need updating*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

  if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* find page in array*/
    AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start here*/
  else
     /* this should never happen. prog should prob blow up*/
  end

  ABWREC.ABWIXM = 1; /* first screen line*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX /* for each screen line*/
   && AB0BM001.SY1STNBR[ABWIXM] != " ") /* with an entry on it*/
    AB0B162(); /* process line data*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
    AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next array line*/
  end

  ABWREC.XXXMSGNO = 45;

  ABWREC.ABWIXM = 1; /* first screen line*/
  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
    AB0BW00.AB0BWATR[ABWIXM] = " ";
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end

end // end AB0B160

// reset all changed indicators
Function AB0B161()
  set AB4REC empty;
  AB4REC.AB4BQCFL = "C";
  AB4REC.XDMCD = "*";

  if (ABWREC.ABWMAP == "1")

    if (AB0BM001.AB0BMSTN != " ")
      AB4REC.SY1STNBR = AB0BM001.AB0BMSTN;
    else
      AB4REC.SY1STNBR = "*";
    end

    if (AB0BM001.AB0BMXOW != " ")
      AB4REC.XOWCD = AB0BM001.AB0BMXOW;
    else
      AB4REC.XOWCD = "*";
    end

    if (AB0BM001.AB0BMFTY != " ")
      AB4REC.FY1FCTYC = AB0BM001.AB0BMFTY;
    else
      AB4REC.FY1FCTYC = "*";
    end

    if (AB0BM001.AB0BMCUX != " ")
      AB4REC.PC2CUXID = AB0BM001.AB0BMCUX;
    else
      AB4REC.PC2CUXID = "*";
    end

    if (AB0BM001.AB0BMPOT != " ")
      AB4REC.PC4ORTYP = AB0BM001.AB0BMPOT;
    else
      AB4REC.PC4ORTYP = "*";
    end

    if (AB0BM001.XDVCD != " ")
      AB4REC.XDVCD = AB0BM001.XDVCD;
    else
      AB4REC.XDVCD = "*";
    end

    AB4REC.XSECD = AB0BM001.XSECD;
    AB4REC.XSNYR = AB0BM001.XSNYR + 1900;
  else

    if (ABWREC.ABWMAP == "2")

      if (AB0BM002.AB0BMSTN != " ")
        AB4REC.SY1STNBR = AB0BM002.AB0BMSTN;
      else
        AB4REC.SY1STNBR = "*";
      end

      if (AB0BM002.AB0BMXOW != " ")
        AB4REC.XOWCD = AB0BM002.AB0BMXOW;
      else
        AB4REC.XOWCD = "*";
      end

      if (AB0BM002.AB0BMFTY != " ")
        AB4REC.FY1FCTYC = AB0BM002.AB0BMFTY;
      else
        AB4REC.FY1FCTYC = "*";
      end

      if (AB0BM002.AB0BMCUX != " ")
        AB4REC.PC2CUXID = AB0BM002.AB0BMCUX;
      else
        AB4REC.PC2CUXID = "*";
      end

      if (AB0BM002.AB0BMPOT != " ")
        AB4REC.PC4ORTYP = AB0BM002.AB0BMPOT;
      else
        AB4REC.PC4ORTYP = "*";
      end

      if (AB0BM002.XDVCD != " ")
        AB4REC.XDVCD = AB0BM002.XDVCD;
      else
        AB4REC.XDVCD = "*";
      end

      AB4REC.XSECD = AB0BM002.XSECD;
   /* ----------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* AB4REC.XSNYR = AB0BM002.XSNYR + 1900;*/
   /*  */
   /* ----------------Y2K OUT END----------------------*/
   /* ----------------Y2K IN BEGIN--------------------*/
   /*  */
      if (AB0BM002.XSNYR > 60)
        AB4REC.XSNYR = AB0BM002.XSNYR + 1900;
      else
        AB4REC.XSNYR = AB0BM002.XSNYR + 2000;
      end
   /*  */
   /* ----------------Y2K IN END----------------------*/
    else

      if (ABWREC.ABWMAP == "3")

        if (AB0BM003.AB0BMSTN != " ")
          AB4REC.SY1STNBR = AB0BM003.AB0BMSTN;
        else
          AB4REC.SY1STNBR = "*";
        end

        if (AB0BM003.AB0BMXOW != " ")
          AB4REC.XOWCD = AB0BM003.AB0BMXOW;
        else
          AB4REC.XOWCD = "*";
        end

        if (AB0BM003.AB0BMFTY != " ")
          AB4REC.FY1FCTYC = AB0BM003.AB0BMFTY;
        else
          AB4REC.FY1FCTYC = "*";
        end

        if (AB0BM003.AB0BMCUX != " ")
          AB4REC.PC2CUXID = AB0BM003.AB0BMCUX;
        else
          AB4REC.PC2CUXID = "*";
        end

        if (AB0BM003.AB0BMPOT != " ")
          AB4REC.PC4ORTYP = AB0BM003.AB0BMPOT;
        else
          AB4REC.PC4ORTYP = "*";
        end

        if (AB0BM003.XDVCD != " ")
          AB4REC.XDVCD = AB0BM003.XDVCD;
        else
          AB4REC.XDVCD = "*";
        end

        AB4REC.XSECD = AB0BM003.XSECD;
   /* ---------------Y2K OUT BEGIN------------------*/
   /*  */
   /* AB4REC.XSNYR = AB0BM003.XSNYR + 1900;*/
   /*  */
   /* ---------------Y2K OUT END--------------------*/
   /* ---------------Y2K IN BEGIN------------------*/
   /*  */
        if (AB0BM003.XSNYR > 60)
          AB4REC.XSNYR = AB0BM003.XSNYR + 1900;
        else
          AB4REC.XSNYR = AB0BM003.XSNYR + 2000;
        end
   /*  */
   /* ---------------Y2K IN END--------------------*/
      end

    end

  end

  AB0BS35(); /* select set vb plan*/
  AB0BS36(); /* fetch next vbplan*/

  while (SQLCA.VAGen_SQLCODE != 100) /* for each vbplan row*/
    AB4REC.AB4BQCFL = " "; /* reset changed indicator*/
    AB0BS37(); /* update vbplan*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      AB0BM001.XXXMODID = "161";
      AB0BM002.XXXMODID = "161";
      AB0BM003.XXXMODID = "161";
      converseLib.validationFailed(13); /* updated since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous changes*/
      exit stack; /* redisplay map*/
    end


    AB0BS36(); /* fetch next vbplan*/
  end

  AB0BS38(); /* close set vbplan*/
  AB0BW00.AB0BWAX2 = 1;

  while (AB0BW00.AB0BWAX2 <= AB0BW00.AB0BWAIX)
    AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2];
    AB0BW00.AB0BWBIX = 1;

    while (AB0BW00.AB0BWBIX <= 7)
      AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
      AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
    end

    AB0BW07.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
    AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];
    AB0BW00.AB0BWBIX = 1;

    while (AB0BW00.AB0BWBIX <= 7)
      AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
      AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
    end

    AB0BW08.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
    AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];
    AB0BW00.AB0BWBIX = 1;

    while (AB0BW00.AB0BWBIX <= 7)
      AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
      AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
    end

    AB0BW09.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
    AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1;
  end

  ABWREC.XXXMSGNO = 45;

end // end AB0B161

// process line data
Function AB0B162()
  AB0BS39(); /* check for buy type m, l*/

  AB0BS44(); /* update line process*/

  AB0BW00.AB0BWFMS = "Y"; /* format map*/
  ABWREC.ABWSWR = "Y"; /* request data*/
end // end AB0B162

// process map 2
Function AB0B200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  AB0B110(); /* obtain data to display*/

  AB0B220(); /* Format and display the map*/

  AB0B230(); /* Check attention identifier*/

  AB0B240(); /* Reset fields to normal intensity*/

  AB0B250(); /* Verify the entered data*/

  AB0B260(); /* Process valid input request*/


end // end AB0B200

// format and display map 2
Function AB0B220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  AB0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  if (AB0BW00.AB0BWFMS == "Y") /* map to be formatted*/
    AB0B221(); /* format heading*/
    ABWREC.ABWIXM = 1; /* first screen line*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
      AB0BM002.XOWCD[ABWIXM] = " ";
      AB0BM002.AB0BMSCD[ABWIXM] = " ";
      AB0BM002.FY1FCTYC[ABWIXM] = " ";
      AB0BM002.SY1STNBR[ABWIXM] = " ";
      AB0BM002.PC4ORTYP[ABWIXM] = " ";
      AB0BM002.PG1SC4CD[ABWIXM] = " ";
      AB0BM002.AB4BQCFL[ABWIXM] = " ";
      AB0BM002.FY1FRGN[ABWIXM] = " ";
      AB0BM002.AB0BMQT1[ABWIXM] = 0;
      AB0BM002.AB0BMBS1[ABWIXM] = " ";
      AB0BM002.AB0BMQT2[ABWIXM] = 0;
      AB0BM002.AB0BMBS2[ABWIXM] = " ";
      AB0BM002.AB0BMBTD[ABWIXM] = 0;
      AB0BM002.AB0BMFST[ABWIXM] = 0;
      /* MOVE 0 TO AB0BM002.AB0BMBAL(ABWIXM);*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    ABWREC.ABWIXM = 1; /* first screen line*/

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in array*/
      AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start at this element*/
    else
      AB0BW00.AB0BWPTD = 1; /* display page 1*/
      AB0BW00.AB0BWAX2 = 1; /* start at first element*/
    end

    while (AB0BW00.AB0BWPTD == AB0BW01.AB0BWPNB[AB0BWAX2])
      AB0B122(); /* format detail lines*/
      AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next table entry*/
    end

    ABWREC.ABWIXM = 1; /* first screen line*/

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in array*/
      AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start at this element*/
    else
      AB0BW00.AB0BWPTD = 1; /* display page 1*/
      AB0BW00.AB0BWAX2 = 1; /* start at first element*/
    end

    while (AB0BW00.AB0BWPTD == AB0BW01.AB0BWPNB[AB0BWAX2])
      AB0B222(); /* format detail lines*/
      AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next table entry*/
    end

  end

  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* screen index to max*/

  while (ABWREC.ABWIXM >= 1) /* for each screen line*/
    if (AB0BM002.SY1STNBR[ABWIXM] == " ") /* with no entry*/
      set AB0BM002.FY1FCTYC[ABWIXM] skip, invisible;
      set AB0BM002.SY1STNBR[ABWIXM] skip, invisible;
      set AB0BM002.PC4ORTYP[ABWIXM] skip, invisible;
      set AB0BM002.PC2CUXID[ABWIXM] skip, invisible;
      set AB0BM002.PG1SC4CD[ABWIXM] skip, invisible;
      set AB0BM002.AB4BQCFL[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMQT1[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS1[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMQT2[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS2[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBTD[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMFST[ABWIXM] skip, invisible;
    /* SET AB0BM002.AB0BMBAL(ABWIXM) AUTOSKIP,DARK;*/
      set AB0BM002.AB0BMBSN[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMSCD[ABWIXM] skip, invisible;
    end
    if (AB0BW04.AB0BWCMO[6] == " ")
      set AB0BM002.AB0BMQT1[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS1[ABWIXM] skip, invisible;
    end
    if (AB0BW04.AB0BWCMO[7] == " ")
      set AB0BM002.AB0BMQT2[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS2[ABWIXM] skip, invisible;
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* prev screen line*/
  end

  if (AB0BW04.AB0BWCMO[6] > " ")
    AB0BM002.AB0BMBYM[1] = AB0BW04.AB0BWCMO[6];
    set AB0BM002.AB0BMBYM[1] initialAttributes;
  else
    AB0BM002.AB0BMBYM[1] = "     ";
  end
  if (AB0BW04.AB0BWCMO[7] > " ")
    AB0BM002.AB0BMBYM[2] = AB0BW04.AB0BWCMO[7];
    set AB0BM002.AB0BMBYM[2] initialAttributes;
  else
    AB0BM002.AB0BMBYM[2] = "     ";
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    if (ABWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(ABWREC.XXXMSGNO);
    end /* Indicate message*/
  end
  ABWREC.XXXMSGNO = 0;

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0BM002 alarm; /* Indicate sound alarm*/
  end

  converseLib.clearScreen();
  
  converse AB0BM002 ;
end // end AB0B220

// format map 2 heading
Function AB0B221()
  AB0B121();
  AB0BM002.XXXUSER = AB0BM001.XXXUSER;
  AB0BM002.XSECD = AB0BM001.XSECD;
  AB0BM002.XSNYR = AB0BM001.XSNYR;
  AB0BM002.AB0BMBMM = AB0BM001.AB0BMBMM;
  AB0BM002.AB0BMBYY = AB0BM001.AB0BMBYY;
  AB0BM002.AB0BMXGA = AB0BM001.AB0BMXGA;
  AB0BM002.XGAABRV = AB0BM001.XGAABRV;
  AB0BM002.AB0BMXPC = AB0BM001.AB0BMXPC;
  AB0BM002.XPCABRV = AB0BM001.XPCABRV;
  AB0BM002.AB0BMXOW = AB0BM001.AB0BMXOW;
  AB0BM002.XOWABRV = AB0BM001.XOWABRV;
  AB0BM002.XDVCD = AB0BM001.XDVCD;
  AB0BM002.XDVDESC = AB0BM001.XDVDESC;
  AB0BM002.AB0BMCUX = AB0BM001.AB0BMCUX;
  AB0BM002.XQTCD = AB0BM001.XQTCD;
  AB0BM002.AB0BMFTY = AB0BM001.AB0BMFTY;
  AB0BM002.AB0BMSTN = AB0BM001.AB0BMSTN;
  AB0BM002.AB0BMSTD = AB0BM001.AB0BMSTD;
  AB0BM002.AB0BMPOT = AB0BM001.AB0BMPOT;
  AB0BM002.AB0BMBST = AB0BM001.AB0BMBST;
  AB0BM002.FY6FOCD = AB0BM001.FY6FOCD;
  AB0BM002.AB0BM-BEG-MM = AB0BM001.AB0BM-BEG-MM;
  AB0BM002.AB0BM-BEG-YY = AB0BM001.AB0BM-BEG-YY;
  AB0BM002.AB0BM-END-MM = AB0BM001.AB0BM-END-MM;
  AB0BM002.AB0BM-END-YY = AB0BM001.AB0BM-END-YY;
  AB0BM002.PC4ABRV = XP1REC.PC4ABRV;
  AB0BM002.FY6FOABR = XP1REC.FY6FOABR;
  AB0BM002.FY1FCTSN = AB0BW00.FY1FCTSN;

  if (COMMAREA.CACLVL[2] != "Y") /* cant look at all schedulers*/
    set AB0BM002.XXXUSER skip;
  end

  if (COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] != "Y")
    set AB0BM002.AB0BMBMM skip;
    set AB0BM002.AB0BMBYY skip;
  end

end // end AB0B221

// format map 2 detail lines
Function AB0B222()
  AB0BS98(); /* get forecast qty*/

  if (AB0BW01.FY1FRGN[AB0BWAX2] == "N") /* not foreign*/
    AB0BM002.FY1FRGN[ABWIXM] = "D"; /* domestic*/
  else
    AB0BM002.FY1FRGN[ABWIXM] = "O"; /* off shore*/
  end

  AB0BM002.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
  AB0BM002.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
  AB0BM002.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
  AB0BM002.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];
  AB0BM002.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
  AB0BM002.XOWCD[ABWIXM] = AB0BW01.XOWCD[AB0BWAX2];
  AB0BS96(); /* get blank style nbr*/
  AB0BM002.AB0BMBSN[ABWIXM] = PG2REC.SY1BSTNB;
  ABWREC.ABWIDX1 = 5; /* first column*/

  AB0BW00.AB0BWBIX = 1; /* first column*/
  AB0BW00.AB0BWKQT = 0; /* initialise work area*/
  AB0BW00.AB0BWQT2 = 0; /* initialise work area*/
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "M"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "L")
      AB0BW00.AB0BWKQT = AB0BW00.AB0BWKQT + AB0BW02.AB4SMBQT[AB0BWBIX];
    end

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
        /* AND AB0BW00.AB0BWBIX NE 1;*/
      AB0BM002.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first column*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "M"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "L")
      AB0BW00.AB0BWKQT = AB0BW00.AB0BWKQT + AB0BW02.AB4SMBQT[AB0BWBIX];
    end

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
         /* AND AB0BW00.AB0BWBIX NE 1;*/
      AB0BM002.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first column*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "M"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "L")
      AB0BW00.AB0BWKQT = AB0BW00.AB0BWKQT + AB0BW02.AB4SMBQT[AB0BWBIX];
    end

    if (AB0BW02.AB4BQCFL[AB0BWBIX] == "C")
         /* AND AB0BW00.AB0BWBIX NE 1;*/
      AB0BM002.AB4BQCFL[ABWIXM] = "C";
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BM002.AB0BMFST[ABWIXM] = AB0BW00.AB0BWQT2;
  AB0BM002.AB0BMBTD[ABWIXM] = AB0BW00.AB0BWKQT;
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWKQT = AB0BW00.AB0BWQT2 - AB0BW00.AB0BWKQT;

  if (AB0BW04.AB0BWCMO[6] > " ")
    AB0BM002.AB0BMQT1[ABWIXM] = AB0BW02.AB4SMBQT[6];
    AB0BM002.AB0BMBS1[ABWIXM] = AB0BW02.AB3BUYST[6];
  else
    set AB0BM002.AB0BMQT1[ABWIXM] skip, invisible;
    set AB0BM002.AB0BMBS1[ABWIXM] skip, invisible;
  end
  if (AB0BW04.AB0BWCMO[7] > " ")
    AB0BM002.AB0BMQT2[ABWIXM] = AB0BW02.AB4SMBQT[7];
    AB0BM002.AB0BMBS2[ABWIXM] = AB0BW02.AB3BUYST[7];
  else
    set AB0BM002.AB0BMQT2[ABWIXM] skip, invisible;
    set AB0BM002.AB0BMBS2[ABWIXM] skip, invisible;
  end
  AB0B241(); /* protect screen line*/
  ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")
    if (AB0BW04.AB0BWCMO[6] > " ")
      AB0BM002.AB0BMQT1[ABWIXM] = AB0BW02.AB4SMBQT[6];
      AB0BM002.AB0BMBS1[ABWIXM] = AB0BW02.AB3BUYST[6];
    else
      set AB0BM002.AB0BMQT1[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS1[ABWIXM] skip, invisible;
    end
    if (AB0BW04.AB0BWCMO[7] > " ")
      AB0BM002.AB0BMQT2[ABWIXM] = AB0BW02.AB4SMBQT[7];
      AB0BM002.AB0BMBS2[ABWIXM] = AB0BW02.AB3BUYST[7];
    else
      set AB0BM002.AB0BMQT2[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS2[ABWIXM] skip, invisible;
    end

    AB0BM002.XOWCD[ABWIXM] = AB0BW01.XOWCD[AB0BWAX2];
    AB0BM002.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB0BM002.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM002.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB0BM002.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
    AB0BM002.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];

    set AB0BM002.XOWCD[ABWIXM] skip, invisible;
    set AB0BM002.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM002.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM002.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM002.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM002.PG1SC4CD[ABWIXM] skip, invisible;
    AB0B241(); /* protect screen line*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end
  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")
    if (AB0BW04.AB0BWCMO[6] > " ")
      AB0BM002.AB0BMQT1[ABWIXM] = AB0BW02.AB4SMBQT[6];
      AB0BM002.AB0BMBS1[ABWIXM] = AB0BW02.AB3BUYST[6];
    else
      set AB0BM002.AB0BMQT1[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS1[ABWIXM] skip, invisible;
    end
    if (AB0BW04.AB0BWCMO[7] > " ")
      AB0BM002.AB0BMQT2[ABWIXM] = AB0BW02.AB4SMBQT[7];
      AB0BM002.AB0BMBS2[ABWIXM] = AB0BW02.AB3BUYST[7];
    else
      set AB0BM002.AB0BMQT2[ABWIXM] skip, invisible;
      set AB0BM002.AB0BMBS2[ABWIXM] skip, invisible;
    end

    AB0BM002.XOWCD[ABWIXM] = AB0BW01.XOWCD[AB0BWAX2];
    AB0BM002.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB0BM002.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM002.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB0BM002.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
    AB0BM002.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];

    set AB0BM002.XOWCD[ABWIXM] skip, invisible;
    set AB0BM002.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM002.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM002.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM002.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM002.PG1SC4CD[ABWIXM] skip, invisible;
    AB0B241(); /* protect screen line*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end

end // end AB0B222

// check attention identifier
Function AB0B230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AB0BM002 initial; /* Clear the map fields*/
    AB0BW00.AB0BWFMS = "Y"; /* redisplay page data from WS*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AB0BM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0BM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0BM002.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set AB0BM002.CATOAP cursor, modified, bold; /* Highlight*/
    AB0BM002.XXXMODID = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0BM002"; /* Appl find code*/
    end
    XSABS01(); /* Exit to another application*/
    AB0BM002.XXXMODID = "230 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "AB0F";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey is pf13)

    if (XP1REC.AB3BUYMO == 0)
   /* -------------Y2K OUT BEGIN-----------------*/
   /*  */
   /* MOVE 9999 TO XP1REC.AB3BUYMO;*/
   /*  */
   /* -------------Y2K OUT END-------------------*/
   /* -------------Y2K IN BEGIN-----------------*/
   /*  */
      XP1REC.AB3BUYMO = 999999;
   /*  */
   /* -------------Y2K IN END-------------------*/
    end

    COMMAREA.CATOAP = "AB0E";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* scroll forward*/
   && converseVar.eventKey not pf8   /* scroll backward*/
   && converseVar.eventKey not pf9   /* reset all chg ind*/
   && converseVar.eventKey not pf10  /* screen one*/
   && converseVar.eventKey not pf12) /* screen three*/
    AB0BM002.XXXMODID = "230 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end AB0B230

// reset highlighted fields
Function AB0B240()
  set AB0BM002.XXXUSER initialAttributes;
  set AB0BM002.XSECD initialAttributes;
  set AB0BM002.XSNYR initialAttributes;
  set AB0BM002.AB0BMBMM initialAttributes;
  set AB0BM002.AB0BMBYY initialAttributes;
  set AB0BM002.AB0BMXGA initialAttributes;
  set AB0BM002.AB0BMXPC initialAttributes;
  set AB0BM002.XQTCD initialAttributes;
  set AB0BM002.AB0BMCUX initialAttributes;
  set AB0BM002.AB0BMFTY initialAttributes;
  set AB0BM002.FY6FOCD initialAttributes;
  set AB0BM002.AB0BMSTN initialAttributes;
  set AB0BM002.AB0BMBST initialAttributes;
  set AB0BM002.AB0BMPOT initialAttributes;
  set AB0BM002.AB0BM-BEG-MM initialAttributes;
  set AB0BM002.AB0BM-BEG-YY initialAttributes;
  set AB0BM002.AB0BM-END-MM initialAttributes;
  set AB0BM002.AB0BM-END-YY initialAttributes;
  set AB0BM002.XDVCD initialAttributes;
  set AB0BM002.AB0BMXOW initialAttributes;
  ABWREC.ABWIXM = 1; /* first screen line*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
    set AB0BM002.AB0BMQT1[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMBS1[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMQT2[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMBS2[ABWIXM] initialAttributes;
    set AB0BM002.FY1FCTYC[ABWIXM] initialAttributes;
    set AB0BM002.XOWCD[ABWIXM] initialAttributes;
    set AB0BM002.SY1STNBR[ABWIXM] initialAttributes;
    set AB0BM002.PC4ORTYP[ABWIXM] initialAttributes;
    set AB0BM002.PC2CUXID[ABWIXM] initialAttributes;
    set AB0BM002.PG1SC4CD[ABWIXM] initialAttributes;
    set AB0BM002.AB4BQCFL[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMBTD[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMFST[ABWIXM] initialAttributes;
    /* SET AB0BM002.AB0BMBAL(ABWIXM) DEFINED;*/
    set AB0BM002.AB0BMBSN[ABWIXM] initialAttributes;
    set AB0BM002.AB0BMSCD[ABWIXM] initialAttributes;
    AB0B241(); /* protect detail line fields*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end
end // end AB0B240

// protect map 2 detail lines
Function AB0B241()

  if (XP1REC.AB3BUYMO == AB0BW04.AB0BWBMO[6] /* find which col is curr*/
   && XP1REC.AB3BUYMO > 0)                  
    ABWREC.ABWIDX1 = 1; /* buy mo to unprotect*/
  else

    if (XP1REC.AB3BUYMO == AB0BW04.AB0BWBMO[7] /* find which col is curr*/
     && XP1REC.AB3BUYMO > 0)                  
      ABWREC.ABWIDX1 = 2; /* buy mo to unprotect*/
    else

      if (XP1REC.AB3BUYMO == 0) /* no buy mo entered*/
        ABWREC.ABWIDX1 = 9;
      else
        ABWREC.ABWIDX1 = 0; /* value to never be =*/
      end

    end

  end

  if (AB0BW04.AB0BWBMO[6] > 0)
    set AB0BM002.AB0BMQT1[ABWIXM] skip;
  end
  if (AB0BW04.AB0BWBMO[7] > 0)
    set AB0BM002.AB0BMQT2[ABWIXM] skip;
  end

  if (ABWREC.ABWIDX1 == 1
   && COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] == "Y"
   && AB0BM002.AB0BMBS1[ABWIXM] != "M"
   && AB0BM002.AB0BMBS1[ABWIXM] != "L")
    set AB0BM002.AB0BMQT1[ABWIXM] normal;
  else

    if (ABWREC.ABWIDX1 == 2
     && COMMAREA.CACLVL[1] == "Y"
     && COMMAREA.CACLVL[2] == "Y"
     && AB0BM002.AB0BMBS2[ABWIXM] != "M"
     && AB0BM002.AB0BMBS2[ABWIXM] != "L")
      set AB0BM002.AB0BMQT2[ABWIXM] normal;
    end

  end

  if (ABWREC.ABWIDX1 == 9
   && COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] == "Y")

    if (AB0BM002.AB0BMBS1[ABWIXM] != "M"
     && AB0BM002.AB0BMBS1[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[6] > 0)
      set AB0BM002.AB0BMQT1[ABWIXM] normal;
    end

    if (AB0BM002.AB0BMBS2[ABWIXM] != "M"
     && AB0BM002.AB0BMBS2[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[7] > 0)
      set AB0BM002.AB0BMQT2[ABWIXM] normal;
    end

  end

  if (COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] != "Y")
    set AB0BM002.AB0BMSCD[ABWIXM] skip;
  end

end // end AB0B241

// validate entered data
Function AB0B250()

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    AB0B251(); /* validate pf keys*/
  else

    if (converseVar.eventKey is enter)
      AB0B252(); /* check if key or data changed*/

      if (AB0BW00.AB0BWKCS == "Y") /* key changed*/
        AB0B253(); /* validate new key*/
      end

    end

  end

  AB0B254(); /* validate line data*/
  if (converseVar.validationMsgNum != 0) /* errors found*/
    AB0BW00.AB0BWFMS = "N"; /* dont format map*/
    exit stack;
  end

end // end AB0B250

// validate pf keys
Function AB0B251()
  if (converseVar.eventKey is pf8) /* scroll forward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1;

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB /* page to disp in array*/
     && AB0BW00.AB0BWPTD <= 464)             /* less max pgs possible*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
    else
      converseLib.validationFailed(3); /* no more scrolling*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
      AB0BM002.XXXMODID = "251"; /* process number*/
      AB0BW00.AB0BWFMS = "Y"; /* format map*/
      exit stack; /* return to flow*/
    end

  else

    if (converseVar.eventKey is pf7) /* scroll backward request*/

      if (AB0BW00.AB0BWPTD <= 1) /* already on first page*/
        converseLib.validationFailed(2); /* top of data already*/
        AB0BM002.XXXMODID = "251"; /* process number*/
        AB0BW00.AB0BWFMS = "Y"; /* format map*/
        exit stack; /* return to flow*/
      end

    end

  end

end // end AB0B251

// check if key or data changed
Function AB0B252()
  AB0BW00.AB0BWKCS = "N"; /* key didnt change*/

  if (AB0BM001.XSNYR > 80)
    AB0BW00.AB0BWSYR = 1900 + AB0BM001.XSNYR;
  else
    AB0BW00.AB0BWSYR = 2000 + AB0BM001.XSNYR;
  end


  if (AB0BM002.XXXUSER != XP1REC.XXXUSER
   || AB0BM002.XSECD != XP1REC.XSECD
   || AB0BW00.AB0BWSYR != XP1REC.XSNYR
   || AB0BM002.AB0BMBMM != XP1REC.XP1BUYMM
   || AB0BM002.AB0BMBYY != XP1REC.XP1BUYYY
   || AB0BM002.AB0BMXGA != XP1REC.XGACD
   || AB0BM002.AB0BMXPC != XP1REC.XPCCD
   || AB0BM002.AB0BMCUX != XP1REC.PC2CUXID
   || AB0BM002.AB0BMFTY != XP1REC.FY1FCTYC
   || AB0BM002.FY6FOCD != XP1REC.FY6FOCD
   || AB0BM002.XQTCD != XP1REC.XQTCD
   || AB0BM002.AB0BMPOT != XP1REC.PC4ORTYP
   || AB0BM002.AB0BM-BEG-MM != AB0BW00.AB0BW-BEG-MM
   || AB0BM002.AB0BM-BEG-YY != AB0BW00.AB0BW-BEG-YY
   || AB0BM002.AB0BM-END-MM != AB0BW00.AB0BW-END-MM
   || AB0BM002.AB0BM-END-YY != AB0BW00.AB0BW-END-YY
   || AB0BM002.AB0BMBST != AB0BW00.AB0BMBST
   || AB0BM002.AB0BMSTN != XP1REC.SY1STNBR
   || AB0BM002.XDVCD != AB0BW00.XDVCD
   || AB0BM002.AB0BMXOW != AB0BW00.XOWCD)
    AB0BW00.AB0BWKCS = "Y"; /* key changed*/
  end

  ABWREC.ABWIXM = 1; /* first screen line*/
  AB0BW00.AB0BWDCS = "N"; /* data didnt change*/

  if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in page array*/
    AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start with this element*/
  else
    AB0BW00.AB0BWAX2 = 0;
  end

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX /* for each map line*/
   && AB0BW00.AB0BWDCS != "Y"          /* while data didnt change*/
   && AB0BW01.AB0BWPNB[AB0BWAX2] == AB0BW00.AB0BWPTD)
                                   /* array pg = disp pg*/

     /* IF ab0bW01.FY1FCTYC(AB0BWAX2) NE AB0BM002.FY1FCTYC(ABWIXM);*/
       /* OR ab0bW01.PC4ORTYP(AB0BWAX2) NE AB0BM002.PC4ORTYP(ABWIXM*/
       /* OR ab0bW01.PC2CUXID(AB0BWAX2) NE AB0BM002.PC2CUXID(ABWIXM*/
       /* OR ab0bW01.PG1SC4CD(AB0BWAX2) NE AB0BM002.PG2SC4CD(ABWIXM*/
       /* MOVE 'Y' TO ab0bW00.AB0BWDCS       ; data changed*/
     /* ELSE                          ;        data didnt change ye*/
    AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/

    if (AB0BM002.AB0BMQT1[ABWIXM] != AB0BW02.AB4SMBQT[6]
     || AB0BM002.AB0BMQT2[ABWIXM] != AB0BW02.AB4SMBQT[7])
      AB0BW00.AB0BWDCS = "Y"; /* data changed*/
    else /* data didnt change yet*/
      AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
      AB0BS56(); /* bucket 2, 3 exists & changed*/
      AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
      AB0BS56(); /* bucket 2, 3 exists & changed*/
    end

     /* END ;*/

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
    AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next array element*/
  end

end // end AB0B252

// validate new keys
Function AB0B253()
  if (AB0BM002.AB0BMXOW != AB0BW00.XOWCD)
    if (AB0BM002.AB0BMXOW != " ")
      AB0BS-002(); /* Validate owner group*/
    else
      AB0BM001.AB0BMXOW = " ";
      AB0BM001.XOWABRV = " ";
    end

  end

  if (AB0BM002.XDVCD != AB0BW00.XDVCD)
    if (AB0BM002.XDVCD != " ")
      AB0BS57(); /* Validate division code*/
    else
      AB0BM001.XDVCD = " ";
      AB0BM001.XDVDESC = " ";
         /* MOVE ' ' TO XP1REC.XDVCD;*/
         /* MOVE ' ' TO XP1REC.XDVDESC;*/
    end

  end

  if (AB0BM002.AB0BMPOT != XP1REC.PC4ORTYP)
    if (AB0BM002.AB0BMPOT != " ")
      AB0BS60(); /* Validate PO type*/
    else
      AB0BM001.AB0BMPOT = " ";
      AB0BM001.PC4ABRV = " ";
      XP1REC.PC4ORTYP = " ";
      XP1REC.PC4ABRV = " ";
    end

  end

  if (AB0BM002.AB0BMSTN != XP1REC.SY1STNBR)
    if (AB0BM002.AB0BMSTN != " ")
      AB0BS61(); /* Validate Style no*/
    else
      AB0BM001.AB0BMSTN = " ";
      AB0BM001.AB0BMSTD = " ";
      AB0BM002.AB0BMSTD = " ";
      AB0BW00.SY1SSTNM = " ";
    end

  end

  if (AB0BM002.AB0BMSTN != " "
   && AB0BM002.AB0BMBST != " ")
    set AB0BM002.AB0BMBST cursor, bold;
    AB0BM002.XXXMODID = "253";
    converseLib.validationFailed(100);
  end

  if (AB0BM002.AB0BMBST != " ")
    set PG2REC empty;
    PG2REC.SY1BSTNB = AB0BM002.AB0BMBST;
    PG2REC.XSECD = AB0BM002.XSECD;
    PG2REC.XGPCD = "03";
   /* --------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* PG2REC.XSNYR = 1900 + AB0BM002.XSNYR;*/
   /* ;*/
   /* IF PG2REC.XSNYR < 1980;*/
   /* PG2REC.XSNYR = PG2REC.XSNYR + 1000;*/
   /* END;*/
   /*  */
   /* --------------Y2K OUT END----------------------*/
   /* --------------Y2K IN BEGIN--------------------*/
   /*  */
    if (AB0BM002.XSNYR > 60)
      PG2REC.XSNYR = AB0BM002.XSNYR + 1900;
    else
      PG2REC.XSNYR = AB0BM002.XSNYR + 2000;
    end
   /*  */
   /* --------------Y2K IN END----------------------*/

    AB0BSA0();

    if (SQLCA.VAGen_SQLCODE == 100)
      set AB0BM002.AB0BMBST cursor, bold;
    end

  end

  if (AB0BM002.FY6FOCD != XP1REC.FY6FOCD)
    if (AB0BM002.FY6FOCD != " ")
      AB0BS65(); /* Validate lia/field office*/
    else
      AB0BM001.FY6FOCD = " ";
      XP1REC.FY6FOCD = " ";
      AB0BM001.FY6FOABR = " ";
      AB0BM002.FY6FOABR = " ";
      XP1REC.FY6FOABR = " ";
    end

  end

  if (AB0BM002.AB0BMFTY != XP1REC.FY1FCTYC)
    if (AB0BM002.AB0BMFTY != " ")
      AB0BS66(); /* Validate Factory cd*/
    else
      AB0BM001.AB0BMFTY = " ";
      XP1REC.FY1FCTYC = " ";
      AB0BW00.FY1FCTSN = " ";
    end

  end

  if (AB0BM002.XQTCD != XP1REC.XQTCD)
    if (AB0BM002.XQTCD != " ")
      AB0BS67(); /* Validate Quota cat cd*/
      AB0BM001.XQTCD = " ";
      XP1REC.XQTCD = " ";
    end

  end

  if (AB0BM002.AB0BMXPC != XP1REC.XPCCD)
    if (AB0BM002.AB0BMXPC != " ")
      AB0BS69(); /* Validate prod Category cd*/
    else
      AB0BM001.AB0BMXPC = " ";
      XP1REC.XPCCD = " ";
      AB0BM001.XPCABRV = " ";
      AB0BM002.XPCABRV = " ";
      XP1REC.XPCABRV = " ";
    end

  end

  if (AB0BM002.AB0BMXGA != XP1REC.XGACD)

    if (AB0BM002.AB0BMXGA != " ")
      AB0BS71(); /* Validate Gender/Age cd*/
    else
      AB0BM001.AB0BMXGA = " ";
      XP1REC.XGACD = " ";
      AB0BM001.XGAABRV = " ";
      AB0BM002.XGAABRV = " ";
      XP1REC.XGAABRV = " ";
    end

  end

  if (AB0BM002.XSNYR != XP1REC.XSNYR)
    AB0BS73(); /* Validate season/year*/
  end

  if (AB0BM002.XSECD != XP1REC.XSECD
   && AB0BM002.XXXMODID != "S73") /* valid sesn/year*/
    AB0BS74(); /* Validate Season/year/buy-mth*/
  end

  if (AB0BM002.XXXMODID != "S73") /* valid sesn/year*/

    if (AB0BM002.AB0BMBYY != XP1REC.XP1BUYYY
     || AB0BM002.AB0BMBMM != XP1REC.XP1BUYMM)
      AB0BS74(); /* Validate Season/year/buy-mth*/
    end

  end

  if (AB0BM002.XXXUSER != XP1REC.XXXUSER)
    if (AB0BM002.XXXUSER != " ")
      AB0BS75(); /* Validate Scheduler cd*/
    else
      AB0BM001.XXXUSER = " ";
      XP1REC.XXXUSER = " ";
    end

  end

  if (AB0BM002.AB0BM-BEG-MM != AB0BW00.AB0BW-BEG-MM
   || AB0BM002.AB0BM-BEG-YY != AB0BW00.AB0BW-BEG-YY
   || AB0BM002.AB0BM-END-MM != AB0BW00.AB0BW-END-MM
   || AB0BM002.AB0BM-END-YY != AB0BW00.AB0BW-END-YY)

   /* ----------------Y2K OUT BEGIN---------------*/
   /*  */
   /* IF AB0BM002.AB0BM-BEG-MM NE 0*/
   /* AND AB0BM002.AB0BM-BEG-YY NE 0*/
   /* AND AB0BM002.AB0BM-END-MM NE 0*/
   /* AND AB0BM002.AB0BM-END-YY NE 0;*/
   /*  */
   /* ----------------Y2K OUT END-----------------*/
   /* ----------------Y2K IN BEGIN---------------*/
   /*  */
    if (AB0BM002.AB0BM-BEG-MM != 0
     && AB0BM002.AB0BM-END-MM != 0)
   /*  */
   /* ----------------Y2K IN END-----------------*/
      AB0BS-008(); /* Validate entered range*/
    else

      if (AB0BM002.AB0BM-BEG-MM == 0
       && AB0BM002.AB0BM-BEG-YY == 0
       && AB0BM002.AB0BM-END-MM == 0
       && AB0BM002.AB0BM-END-YY == 0)
        AB0BW00.AB0BW-BEG-DATE = 0;
        AB0BW00.AB0BW-END-DATE = 0;
      else
        set AB0BM002.AB0BM-BEG-MM cursor, bold;
        set AB0BM002.AB0BM-BEG-YY bold;
        set AB0BM002.AB0BM-END-MM bold;
        set AB0BM002.AB0BM-END-YY bold;
        converseLib.validationFailed(34);
        AB0BM002.XXXMODID = "151";
      end

    end

  end

end // end AB0B253

// validate delete code
Function AB0B254()
  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* last line on screen*/

  while (ABWREC.ABWIXM > 0) /* for each line on screen*/

    if (AB0BM002.SY1STNBR[ABWIXM] != " ")

      if (AB0BM002.AB0BMSCD[ABWIXM] != " " /* no action*/
       && AB0BM002.AB0BMSCD[ABWIXM] != "D" /* delete line*/
       && AB0BM002.AB0BMSCD[ABWIXM] != "R") /* reset chged inds on line*/
        converseLib.validationFailed(19);
        AB0BM002.XXXMODID = "254";
        set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
             /* EZERTN;*/
      end

      if (AB0BM002.AB0BMSCD[ABWIXM] == "D")

        if (AB0BM002.AB0BMQT1[ABWIXM] > 0
         && AB0BM002.AB0BMBS1[ABWIXM] != "L"
         && AB0BM002.AB0BMBS1[ABWIXM] != "M")
          converseLib.validationFailed(76);
          AB0BM002.XXXMODID = "254";
          set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
        else

          if (AB0BM002.AB0BMQT2[ABWIXM] > 0
           && AB0BM002.AB0BMBS2[ABWIXM] != "L"
           && AB0BM002.AB0BMBS2[ABWIXM] != "M")
            converseLib.validationFailed(76);
            AB0BM002.XXXMODID = "254";
            set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;

          end

        end

        if (AB0BM001.AB0BMQT1[ABWIXM] > 0
         && AB0BM001.AB0BMBS1[ABWIXM] != "L"
         && AB0BM001.AB0BMBS1[ABWIXM] != "M")
          converseLib.validationFailed(76);
          AB0BM001.XXXMODID = "254";
          set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
        else

          if (AB0BM001.AB0BMQT2[ABWIXM] > 0
           && AB0BM001.AB0BMBS2[ABWIXM] != "L"
           && AB0BM001.AB0BMBS2[ABWIXM] != "M")
            converseLib.validationFailed(76);
            AB0BM001.XXXMODID = "254";
            set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
          else

            if (AB0BM001.AB0BMQT3[ABWIXM] > 0
             && AB0BM001.AB0BMBS3[ABWIXM] != "L"
             && AB0BM001.AB0BMBS3[ABWIXM] != "M")
              converseLib.validationFailed(76);
              AB0BM001.XXXMODID = "254";
              set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
            end

          end

        end

        if (AB0BM001.AB0BMQT4[ABWIXM] > 0
         && AB0BM001.AB0BMBS4[ABWIXM] != "L"
         && AB0BM001.AB0BMBS4[ABWIXM] != "M")
          converseLib.validationFailed(76);
          AB0BM001.XXXMODID = "254";
          set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
        else

          if (AB0BM001.AB0BMQT5[ABWIXM] > 0
           && AB0BM001.AB0BMBS5[ABWIXM] != "L"
           && AB0BM001.AB0BMBS5[ABWIXM] != "M")
            converseLib.validationFailed(76);
            AB0BM001.XXXMODID = "254";
            set AB0BM002.AB0BMSCD[ABWIXM] cursor, bold;
          end

        end

      end

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* previous screen line*/
  end

end // end AB0B254

// process valid request
Function AB0B260()
  if (converseVar.eventKey is pf7) /* scroll backward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* display prev page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1; /* display next page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return; /* return to calling process*/
  end

  if (converseVar.eventKey is pf10) /* display map 1*/
    ABWREC.ABWMAP = "1"; /* map 1 process*/
    return;
  end

  if (converseVar.eventKey is pf12) /* display map 3*/
    ABWREC.ABWMAP = "3"; /* map 3 process*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return;
  end

  if (converseVar.eventKey is pf9) /* reset all ind*/
    AB0B161(); /* reset all changed indicators process*/
  end

  if (AB0BW00.AB0BWKCS == "Y") /* key changed*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "Y"; /* request data*/
    ABWREC.ABWMAP = "2"; /* map 2 process*/
    AB0B263(); /* save new map key*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* this is now the update pass.  The progie only gets here if*/
   /* data was changed & the data bases need updating*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

  if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* find page in array*/
    AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start here*/
  else
     /* this should never happen. prog should prob blow up*/
  end

  ABWREC.ABWIXM = 1; /* first screen line*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX /* for each screen line*/
   && AB0BM002.SY1STNBR[ABWIXM] != " ") /* with an entry on it*/
    AB0B262(); /* process line data*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
    AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1; /* next array line*/
  end

  converseLib.validationFailed(45); /* updates have completed*/

end // end AB0B260

// process map 2 line data
Function AB0B262()
  AB0BS39(); /* check for buy type m, l*/
   /* *******************/

  if (AB0BM002.AB0BMSCD[ABWIXM] == "R") /* reset qty chgd ind this line*/
    AB0BS40(); /* reset line process*/
  else

    if (AB0BM002.AB0BMSCD[ABWIXM] == "D") /* delete this row*/
      AB0BS41(); /* delete row process*/
    else
      /* *******************/
      AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2];
      set AB4REC empty; /* clear buy plan record*/

      /* -------------------------------------------------*/
        /* build vbplan key from absty array*/
      /* -------------------------------------------------*/

      AB4REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
      AB4REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
      AB4REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
      AB4REC.XWHCD = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
      AB4REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
      AB4REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
      AB4REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];
      AB4REC.FY1FCTYC = AB0BW01.FY1FCTYC[AB0BWAX2];
      AB4REC.PC4ORTYP = AB0BW01.PC4ORTYP[AB0BWAX2];
      AB4REC.PC2CUXID = AB0BW01.PC2CUXID[AB0BWAX2];

      AB0BS76(); /* process vbplan row*/
      AB0BW07.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
      AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];

      if (AB0BW02.AB3BUYST[6] != " " /* an entry for scrn*/
       || AB0BW02.AB3BUYST[7] != " ") /* line 2 this key*/
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
        AB0BS76(); /* process vbplan row*/
        AB0BW08.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
      end

      AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];

      if (AB0BW02.AB3BUYST[6] != " " /* an entry for screen*/
       || AB0BW02.AB3BUYST[7] != " ") /* line this key*/
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
        AB0BS76(); /* process vbplan row*/
        AB0BW09.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
      end

    end

  end

   /* ABWREC.ABWIXM = ABWREC.ABWIXM + 1      ; next screen row*/
  ABWREC.ABWSWR = "Y"; /* request data*/
  AB0BW00.AB0BWFMS = "Y"; /* format map*/
  AB0BW00.AB0BWUSW = "Y"; /* update switch*/
end // end AB0B262

// save new map key
Function AB0B263()
  set AB0BM001 initial;
  AB0BM001.XXXUSER = AB0BM002.XXXUSER;
  AB0BM001.XSECD = AB0BM002.XSECD;
  AB0BM001.XSNYR = AB0BM002.XSNYR;
  AB0BM001.AB0BMBMM = AB0BM002.AB0BMBMM;
  AB0BM001.AB0BMBYY = AB0BM002.AB0BMBYY;
  AB0BM001.AB0BMXGA = AB0BM002.AB0BMXGA;
  AB0BM001.AB0BMXPC = AB0BM002.AB0BMXPC;
  AB0BM001.XDVCD = AB0BM002.XDVCD;
  AB0BM001.AB0BMXOW = AB0BM002.AB0BMXOW;
  AB0BM001.AB0BMCUX = AB0BM002.AB0BMCUX;
  AB0BM001.XQTCD = AB0BM002.XQTCD;
  AB0BM001.AB0BMFTY = AB0BM002.AB0BMFTY;
  AB0BM001.AB0BMSTN = AB0BM002.AB0BMSTN;
  AB0BM001.AB0BMBST = AB0BM002.AB0BMBST;
  AB0BM001.AB0BMPOT = AB0BM002.AB0BMPOT;
  AB0BM001.FY6FOCD = AB0BM002.FY6FOCD;
  AB0BM001.AB0BM-BEG-MM = AB0BM002.AB0BM-BEG-MM;
  AB0BM001.AB0BM-BEG-YY = AB0BM002.AB0BM-BEG-YY;
  AB0BM001.AB0BM-END-MM = AB0BM002.AB0BM-END-MM;
  AB0BM001.AB0BM-END-YY = AB0BM002.AB0BM-END-YY;
  set AB0BM002 initial;
end // end AB0B263

// process map 3
Function AB0B300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  AB0B110(); /* Obtain data to display*/

  AB0B320(); /* Format and display the map*/

  AB0B330(); /* Check attention identifier*/

  AB0B340(); /* Reset fields to normal intensity*/

  AB0B350(); /* Verify the entered data*/

  AB0B360(); /* Process valid input request*/


end // end AB0B300

// format map 3
Function AB0B320()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0BM003 alarm; /* Indicate sound alarm*/
  end

  AB0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  if (AB0BW00.AB0BWFMS == "Y") /* map to be formatted*/
    set AB0BM003 initial;
    AB0B321(); /* format heading*/
    ABWREC.ABWIXM = 1; /* first screen line*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* for each screen line*/
      AB0BM003.FY1FCTYC[ABWIXM] = " ";
      AB0BM003.SY1STNBR[ABWIXM] = " ";
      AB0BM003.PC4ORTYP[ABWIXM] = " ";
      AB0BM003.PG1SC4CD[ABWIXM] = " ";
      AB0BM003.SY1SSTNM[ABWIXM] = " ";
      AB0BM003.XQTCD1[ABWIXM] = " ";
      AB0BM003.XQTCD2[ABWIXM] = " ";
      AB0BM003.XPRCD[ABWIXM] = " ";
      AB0BM003.XPLCD[ABWIXM] = " ";
      AB0BM003.XPCCD[ABWIXM] = " ";
      AB0BM003.XSUCD[ABWIXM] = " ";
      AB0BM003.XGACD[ABWIXM] = " ";
      AB0BM003.AB0BMFOD[ABWIXM] = " ";
      AB0BM003.AB0BMFST[ABWIXM] = 0;
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

    ABWREC.ABWIXM = 1; /* first screen line*/

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB) /* display page in array*/
      AB0BW00.AB0BWAX2 = sysVar.arrayIndex; /* start at this element*/
    else
      AB0BW00.AB0BWPTD = 1; /* display page 1*/
      AB0BW00.AB0BWAX2 = 1; /* start at first element*/
    end

    while (AB0BW00.AB0BWPTD == AB0BW01.AB0BWPNB[AB0BWAX2])
      AB0B322(); /* format detail lines*/
      AB0BW00.AB0BWAX2 = AB0BW00.AB0BWAX2 + 1;
    end

  end

  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* screen index to max*/

  while (ABWREC.ABWIXM >= 1 /* for each screen line*/
   && AB0BM003.SY1STNBR[ABWIXM] == " ") /* with no entry*/
    set AB0BM003.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM003.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM003.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM003.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM003.PG1SC4CD[ABWIXM] skip, invisible;
    set AB0BM003.AB0BMFST[ABWIXM] skip, invisible;
    set AB0BM003.SY1SSTNM[ABWIXM] skip, invisible;
    set AB0BM003.XQTCD1[ABWIXM] skip, invisible;
    set AB0BM003.XQTCD2[ABWIXM] skip, invisible;
    set AB0BM003.XPCCD[ABWIXM] skip, invisible;
    set AB0BM003.XPRCD[ABWIXM] skip, invisible;
    set AB0BM003.XPLCD[ABWIXM] skip, invisible;
    set AB0BM003.XSUCD[ABWIXM] skip, invisible;
    set AB0BM003.XGACD[ABWIXM] skip, invisible;
    set AB0BM003.AB0BMFOD[ABWIXM] skip, invisible;
    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* prev screen line*/
  end

  converseLib.clearScreen();
  
  converse AB0BM003 ;
end // end AB0B320

// format map 3 heading
Function AB0B321()
  AB0B121();
  AB0BM003.XXXUSER = AB0BM001.XXXUSER;
  AB0BM003.XSECD = AB0BM001.XSECD;
  AB0BM003.XSNYR = AB0BM001.XSNYR;
  AB0BM003.AB0BMBMM = AB0BM001.AB0BMBMM;
  AB0BM003.AB0BMBYY = AB0BM001.AB0BMBYY;
  AB0BM003.AB0BMXGA = AB0BM001.AB0BMXGA;
  AB0BM003.XGAABRV = AB0BM001.XGAABRV;
  AB0BM003.AB0BMXOW = AB0BM001.AB0BMXOW;
  AB0BM003.XOWABRV = AB0BM001.XOWABRV;
  AB0BM003.AB0BMXPC = AB0BM001.AB0BMXPC;
  AB0BM003.XPCABRV = AB0BM001.XPCABRV;
  AB0BM003.XDVCD = AB0BM001.XDVCD;
  AB0BM003.XDVDESC = AB0BM001.XDVDESC;
  AB0BM003.AB0BMCUX = AB0BM001.AB0BMCUX;
  AB0BM003.XQTCD = AB0BM001.XQTCD;
  AB0BM003.AB0BMFTY = AB0BM001.AB0BMFTY;
  AB0BM003.AB0BMSTN = AB0BM001.AB0BMSTN;
  AB0BM003.AB0BMSTD = AB0BM001.AB0BMSTD;
  AB0BM003.AB0BMPOT = AB0BM001.AB0BMPOT;
  AB0BM003.AB0BMBST = AB0BM001.AB0BMBST;
  AB0BM003.FY6FOCD = AB0BM001.FY6FOCD;
  AB0BM003.PC4ABRV = XP1REC.PC4ABRV;
  AB0BM003.FY6FOABR = XP1REC.FY6FOABR;
  AB0BM003.FY1FCTSN = AB0BW00.FY1FCTSN;

  if (COMMAREA.CACLVL[2] != "Y") /* cant look at all schedulers*/
    set AB0BM003.XXXUSER skip;
  end

  if (COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] != "Y")
    set AB0BM003.AB0BMBMM skip;
    set AB0BM003.AB0BMBYY skip;
  end

end // end AB0B321

// format map 3 detail line
Function AB0B322()
  AB0BM003.XOWCD[ABWIXM] = AB0BW01.XOWCD[AB0BWAX2];
  AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
  AB0BM003.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
  AB0BM003.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
  AB0BM003.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];
  AB0BM003.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
  AB0BM003.XQTCD1[ABWIXM] = AB0BW01.XQTCD1[AB0BWAX2];
  AB0BM003.XQTCD2[ABWIXM] = AB0BW01.XQTCD2[AB0BWAX2];

  if (AB0BM003.XQTCD1[ABWIXM] == "000")
    AB0BM003.XQTCD1[ABWIXM] = " ";
  end

  if (AB0BM003.XQTCD2[ABWIXM] == "000")
    AB0BM003.XQTCD2[ABWIXM] = " ";
  end

  AB0BM003.XPCCD[ABWIXM] = AB0BW01.XPCCD[AB0BWAX2];
  AB0BM003.XPRCD[ABWIXM] = AB0BW01.XPRCD[AB0BWAX2];
  AB0BM003.XPLCD[ABWIXM] = AB0BW01.XPLCD[AB0BWAX2];
  AB0BM003.XSUCD[ABWIXM] = AB0BW01.XSUCD[AB0BWAX2];
  AB0BM003.XGACD[ABWIXM] = AB0BW01.XGACD[AB0BWAX2];
  AB0BS96(); /* get short style name*/
  AB0BS98(); /* get first offer date*/
  AB0BW00.AB0BWQT2 = 0;
  AB0BW00.AB0BWBIX = 1; /* first column*/
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first column*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first column*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each qty column*/
    AB0BW00.AB0BWQT2 = AB0BW00.AB0BWQT2 + AB0BW02.AB4SMBQT[AB0BWBIX];
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next column*/
  end

  AB0BM003.AB0BMFST[ABWIXM] = AB0BW00.AB0BWQT2;
  ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")
    AB0BM003.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM003.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB0BM003.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
    AB0BM003.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];

    set AB0BM003.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM003.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM003.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM003.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM003.PG1SC4CD[ABWIXM] skip, invisible;
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " "
   || AB0BW02.AB3BUYST[2] != " "
   || AB0BW02.AB3BUYST[3] != " "
   || AB0BW02.AB3BUYST[4] != " "
   || AB0BW02.AB3BUYST[5] != " "
   || AB0BW02.AB3BUYST[6] != " "
   || AB0BW02.AB3BUYST[7] != " ")
    AB0BM003.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM003.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
    AB0BM003.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB0BM003.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
    AB0BM003.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];

    set AB0BM003.FY1FCTYC[ABWIXM] skip, invisible;
    set AB0BM003.SY1STNBR[ABWIXM] skip, invisible;
    set AB0BM003.PC4ORTYP[ABWIXM] skip, invisible;
    set AB0BM003.PC2CUXID[ABWIXM] skip, invisible;
    set AB0BM003.PG1SC4CD[ABWIXM] skip, invisible;
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/
  end

end // end AB0B322

// validate pf keys
Function AB0B330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AB0BM003 initial; /* Clear the map fields*/
    AB0BW00.AB0BWFMS = "Y"; /* redisplay page data from WS*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AB0BM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0BM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0BM003.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set AB0BM003.CATOAP cursor, modified, bold; /* Highlight*/
    AB0BM003.XXXMODID = "330 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0BM003"; /* Appl find code*/
    end
    XSABS01(); /* Exit to another application*/
    AB0BM003.XXXMODID = "330 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "AB0F";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey is pf13)

    if (XP1REC.AB3BUYMO == 0)
   /* ---------------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* MOVE 9999 TO XP1REC.AB3BUYMO;*/
   /*  */
   /* ---------------------Y2K OUT END----------------------*/
   /* ---------------------Y2K IN BEGIN-------------------*/
   /*  */
      XP1REC.AB3BUYMO = 999999;
   /*  */
   /* ---------------------Y2K IN END----------------------*/
    end

    COMMAREA.CATOAP = "AB0E";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* scroll forward*/
   && converseVar.eventKey not pf8   /* scroll backward*/
   && converseVar.eventKey not pf9   /* reset all chg ind*/
   && converseVar.eventKey not pf10  /* screen one*/
   && converseVar.eventKey not pf11) /* screen two*/
    AB0BM003.XXXMODID = "330 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end AB0B330

// reset highlighted fields
Function AB0B340()
  set AB0BM003.XXXUSER initialAttributes;
  set AB0BM003.XSECD initialAttributes;
  set AB0BM003.XSNYR initialAttributes;
  set AB0BM003.AB0BMBMM initialAttributes;
  set AB0BM003.AB0BMBYY initialAttributes;
  set AB0BM003.AB0BMXGA initialAttributes;
  set AB0BM003.AB0BMXPC initialAttributes;
  set AB0BM003.XQTCD initialAttributes;
  set AB0BM003.AB0BMCUX initialAttributes;
  set AB0BM003.AB0BMFTY initialAttributes;
  set AB0BM003.FY6FOCD initialAttributes;
  set AB0BM003.AB0BMSTN initialAttributes;
  set AB0BM003.AB0BMBST initialAttributes;
  set AB0BM003.AB0BMPOT initialAttributes;
  set AB0BM003.XDVCD initialAttributes;

end // end AB0B340

// validate entered key data
Function AB0B350()

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    AB0B351(); /* validate pf keys*/
  else
    AB0BW00.AB0BWKCS = "N"; /* key didnt change*/

    if (AB0BM003.XSNYR > 80)
      AB0BW00.AB0BWSYR = 1900 + AB0BM003.XSNYR;
    else
      AB0BW00.AB0BWSYR = 2000 + AB0BM003.XSNYR;
    end

    if (AB0BM003.XXXUSER != XP1REC.XXXUSER
     || AB0BM003.XSECD != XP1REC.XSECD
     || AB0BW00.AB0BWSYR != XP1REC.XSNYR
     || AB0BM003.AB0BMBMM != XP1REC.XP1BUYMM
     || AB0BM003.AB0BMBYY != XP1REC.XP1BUYYY
     || AB0BM003.AB0BMXGA != XP1REC.XGACD
     || AB0BM003.AB0BMXPC != XP1REC.XPCCD
     || AB0BM003.AB0BMCUX != XP1REC.PC2CUXID
     || AB0BM003.AB0BMFTY != XP1REC.FY1FCTYC
     || AB0BM003.FY6FOCD != XP1REC.FY6FOCD
     || AB0BM003.XQTCD != XP1REC.XQTCD
     || AB0BM003.AB0BMPOT != XP1REC.PC4ORTYP
     || AB0BM003.AB0BMSTN != XP1REC.SY1STNBR
     || AB0BM003.AB0BMBST != AB0BW00.AB0BMBST
     || AB0BM003.XDVCD != AB0BW00.XDVCD
     || AB0BM003.AB0BMXOW != AB0BW00.XOWCD)
      AB0BW00.AB0BWKCS = "Y"; /* key changed*/
      AB0B352(); /* validate new key*/
    end

  end

  if (converseVar.validationMsgNum != 0)
    AB0BW00.AB0BWFMS = "N"; /* dont format map*/
    exit stack; /* redisplay map*/
  end

end // end AB0B350

// validate scroll request
Function AB0B351()
  if (converseVar.eventKey is pf8) /* scroll forward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1;

    if (AB0BW00.AB0BWPTD in AB0BW01.AB0BWPNB /* page to disp in array*/
     && AB0BW00.AB0BWPTD <= 464)             /* less max pages possible*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
    else
      converseLib.validationFailed(3); /* no more scrolling*/
      AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* restore old value*/
      AB0BM003.XXXMODID = "351"; /* process number*/
      AB0BW00.AB0BWFMS = "Y"; /* format map*/
      exit stack; /* return to flow*/
    end

  else

    if (converseVar.eventKey is pf7) /* scroll backward request*/

      if (AB0BW00.AB0BWPTD <= 1) /* already on first page*/
        converseLib.validationFailed(2); /* top of data already*/
        AB0BM003.XXXMODID = "351"; /* process number*/
        AB0BW00.AB0BWFMS = "Y"; /* format map*/
        exit stack; /* return to flow*/
      end

    end

  end

end // end AB0B351

// validate new key
Function AB0B352()
  if (AB0BM003.AB0BMXOW != AB0BW00.XOWCD)
    AB0BS-003(); /* Validate owner group*/
  end

  if (AB0BM003.XDVCD != AB0BW00.XDVCD)
    AB0BS77(); /* Validate division code*/
  end

  if (AB0BM003.AB0BMPOT != XP1REC.PC4ORTYP)
    AB0BS80(); /* Validate PO type*/
  end

  if (AB0BM003.AB0BMSTN != XP1REC.SY1STNBR)
    AB0BS81(); /* Validate Style no*/
  end

  if (AB0BM003.AB0BMSTN != " "
   && AB0BM003.AB0BMBST != " ")
    converseLib.validationFailed(100);
    set AB0BM003.AB0BMBST cursor, bold;
    AB0BM003.XXXMODID = "352";
  end

  if (AB0BM003.AB0BMBST != " ")
    set PG2REC empty;
    PG2REC.SY1BSTNB = AB0BM003.AB0BMBST;
    PG2REC.XSECD = AB0BM003.XSECD;
    PG2REC.XGPCD = "03";
   /* ----------------Y2K OUT BEGIN-----------------*/
   /*  */
   /* PG2REC.XSNYR = 1900 + AB0BM003.XSNYR;*/
   /* ;*/
   /* IF PG2REC.XSNYR < 1980;*/
   /* PG2REC.XSNYR = PG2REC.XSNYR + 1000;*/
   /* END;*/
   /*  */
   /* ----------------Y2K OUT END--------------------*/
   /* ----------------Y2K IN BEGIN-----------------*/
   /*  */
    if (AB0BM003.XSNYR > 60)
      PG2REC.XSNYR = AB0BM003.XSNYR + 1900;
    else
      PG2REC.XSNYR = AB0BM003.XSNYR + 2000;
    end
   /*  */
   /* ----------------Y2K IN END--------------------*/

    AB0BSA0();

    if (SQLCA.VAGen_SQLCODE == 100)
      set AB0BM003.AB0BMBST cursor, bold;
    end

  end

  if (AB0BM003.FY6FOCD != XP1REC.FY6FOCD)
    AB0BS85(); /* Validate lia/field office*/
  end

  if (AB0BM003.AB0BMFTY != XP1REC.FY1FCTYC)
    AB0BS86(); /* Validate Factory cd*/
  end

  if (AB0BM003.XQTCD != XP1REC.XQTCD)
    AB0BS87(); /* Validate Quota cat cd*/
  end

  if (AB0BM003.AB0BMXPC != XP1REC.XPCCD)
    AB0BS89(); /* Validate prod Category cd*/
  end

  if (AB0BM003.AB0BMXGA != XP1REC.XGACD)
    AB0BS91(); /* Validate Gender/Age cd*/
  end

  if (AB0BM003.XSNYR != XP1REC.XSNYR)
    AB0BS93(); /* Validate season/year*/
  end

  if (AB0BM003.XSECD != XP1REC.XSECD
   && AB0BM003.XXXMODID != "S93") /* valid sesn/year*/
    AB0BS94(); /* Validate Season/year/buy-mth*/
  end

  if (AB0BM003.XXXMODID != "S93") /* valid sesn/year*/

    if (AB0BM003.AB0BMBYY != XP1REC.XP1BUYYY
     || AB0BM003.AB0BMBMM != XP1REC.XP1BUYMM)
      AB0BS94(); /* Validate Season/year/buy-mth*/
    end

  end

  if (AB0BM003.XXXUSER != XP1REC.XXXUSER)
    AB0BS95(); /* Validate Scheduler cd*/
  end

end // end AB0B352

// process valid request
Function AB0B360()
  if (converseVar.eventKey is pf7) /* scroll backward request*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD - 1; /* display prev page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    AB0BW00.AB0BWPTD = AB0BW00.AB0BWPTD + 1; /* display next page*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "N"; /* dont get data*/
    return; /* return to calling process*/
  end

  if (converseVar.eventKey is pf10) /* display map 1*/
    ABWREC.ABWMAP = "1"; /* map 1 process*/
    return;
  end

  if (converseVar.eventKey is pf11) /* display map 2*/
    ABWREC.ABWMAP = "2"; /* map 2 process*/
    return;
  end

  if (converseVar.eventKey is pf9) /* reset all ind*/
    AB0B161(); /* reset all changed indicators process*/
  end

  if (AB0BW00.AB0BWKCS == "Y") /* key changed*/
    AB0BW00.AB0BWFMS = "Y"; /* format map*/
    ABWREC.ABWSWR = "Y"; /* request data*/
    ABWREC.ABWMAP = "3"; /* map 3 process*/
    AB0B361(); /* save new map key*/
    return;
  end

end // end AB0B360

// save new map key
Function AB0B361()
  set AB0BM001 initial;
  AB0BM001.XXXUSER = AB0BM003.XXXUSER;
  AB0BM001.XSECD = AB0BM003.XSECD;
  AB0BM001.XSNYR = AB0BM003.XSNYR;
  AB0BM001.AB0BMBMM = AB0BM003.AB0BMBMM;
  AB0BM001.AB0BMBYY = AB0BM003.AB0BMBYY;
  AB0BM001.AB0BMXGA = AB0BM003.AB0BMXGA;
  AB0BM001.AB0BMXPC = AB0BM003.AB0BMXPC;
  AB0BM001.XDVCD = AB0BM003.XDVCD;
  AB0BM001.AB0BMXOW = AB0BM003.AB0BMXOW;
  AB0BM001.AB0BMCUX = AB0BM003.AB0BMCUX;
  AB0BM001.XQTCD = AB0BM003.XQTCD;
  AB0BM001.AB0BMFTY = AB0BM003.AB0BMFTY;
  AB0BM001.AB0BMSTN = AB0BM003.AB0BMSTN;
  AB0BM001.AB0BMBST = AB0BM003.AB0BMBST;
  AB0BM001.AB0BMPOT = AB0BM003.AB0BMPOT;
  AB0BM001.FY6FOCD = AB0BM003.FY6FOCD;
  set AB0BM003 initial;
end // end AB0B361

// validate owner group
Function AB0BS-001()
  AB0BW00.XOWCD = " ";
  AB0BW00.XOWABRV = " ";

  if (AB0BM001.AB0BMXOW == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "OWNER GROUP          ";
    XX0XW02.XWHCD = "51";
    while (XX0XW02.XX0XWEND == "N")

      XPXOW01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM001.AB0BMXOW = XOWTBL.XOWCD[XX0XWPIX];
      AB0BW00.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
    else
      AB0BM001.AB0BMXOW = " ";
      AB0BW00.XOWABRV = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    AB0BW00.XOWCD = AB0BM001.AB0BMXOW;

    if (AB0BW00.XOWKEY in XOWTBL.XOWKEY) /* IF code is on table*/
      AB0BM001.AB0BMXOW = XOWTBL.XOWCD[sysVar.arrayIndex];
      AB0BM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS-001

// validate owner group
Function AB0BS-002()
  AB0BW00.XOWCD = " ";
  AB0BW00.XOWABRV = " ";

  if (AB0BM002.AB0BMXOW == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "OWNER GROUP          ";

    while (XX0XW02.XX0XWEND == "N")

      XX0XW02.XWHCD = "51";
      XPXOW01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM002.AB0BMXOW = XOWTBL.XOWCD[XX0XWPIX];
      AB0BW00.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
    else
      AB0BM002.AB0BMXOW = " ";
      AB0BW00.XOWABRV = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    AB0BW00.XOWCD = AB0BM002.AB0BMXOW;
    if (AB0BW00.XOWKEY in XOWTBL.XOWKEY) /* IF code is on table*/
      AB0BM002.AB0BMXOW = XOWTBL.XOWCD[sysVar.arrayIndex];
      AB0BM002.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS-002

// validate owner group
Function AB0BS-003()
  if (AB0BM003.AB0BMXOW == " ") /* ab0bm003 field eq spaces*/
    AB0BM001.AB0BMXOW = " ";
    AB0BM001.XOWABRV = " ";
    AB0BM003.XOWABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS-004(); /* Standard xow pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM003.AB0BMXOW cursor, bold; /* Highlight field*/
    AB0BM003.XOWABRV = " "; /* space out map field*/
    converseLib.validationFailed(44); /* Indicate error message*/
    AB0BM003.XXXMODID = "S003"; /* Process number*/
  end

end // end AB0BS-003

// owner group popup
Function AB0BS-004()
  AB0BW00.XOWCD = " ";
  AB0BW00.XOWABRV = " ";

  if (AB0BM003.AB0BMXOW == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "     OWNER GROUP     ";

    while (XX0XW02.XX0XWEND == "N")
      XX0XW02.XWHCD = "51";
      XPXOW01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM003.AB0BMXOW = XOWTBL.XOWCD[XX0XWPIX];
      AB0BW00.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
    else
      AB0BM003.AB0BMXOW = " ";
      AB0BW00.XOWABRV = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    AB0BW00.XOWCD = AB0BM003.AB0BMXOW;

    if (AB0BW00.XOWKEY in XOWTBL.XOWKEY) /* IF code is on table*/
      AB0BM003.AB0BMXOW = XOWTBL.XOWCD[sysVar.arrayIndex];
      AB0BM003.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS-004

// Move map1 qtys
Function AB0BS-005()

  /* MOVE AB0BW01.XOWCD(AB0BWAX2) TO AB0BM001.XOWCD(ABWIXM);*/
  AB0BM001.XWH-WHSE-CD[ABWIXM] = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
  AB0BM001.FY1FCTYC[ABWIXM] = AB0BW01.FY1FCTYC[AB0BWAX2];
  AB0BM001.SY1STNBR[ABWIXM] = AB0BW01.SY1STNBR[AB0BWAX2];
  AB0BM001.PC4ORTYP[ABWIXM] = AB0BW01.PC4ORTYP[AB0BWAX2];
  AB0BM001.PC2CUXID[ABWIXM] = AB0BW01.PC2CUXID[AB0BWAX2];
  AB0BM001.PG1SC4CD[ABWIXM] = AB0BW01.PG1SC4CD[AB0BWAX2];

  AB0BM001.AB0BMQT1[ABWIXM] = AB0BW02.AB4SMBQT[1];
  AB0BM001.AB0BMBS1[ABWIXM] = AB0BW02.AB3BUYST[1];
  AB0BM001.AB0BMQT2[ABWIXM] = AB0BW02.AB4SMBQT[2];
  AB0BM001.AB0BMBS2[ABWIXM] = AB0BW02.AB3BUYST[2];
  AB0BM001.AB0BMQT3[ABWIXM] = AB0BW02.AB4SMBQT[3];
  AB0BM001.AB0BMBS3[ABWIXM] = AB0BW02.AB3BUYST[3];
  AB0BM001.AB0BMQT4[ABWIXM] = AB0BW02.AB4SMBQT[4];
  AB0BM001.AB0BMBS4[ABWIXM] = AB0BW02.AB3BUYST[4];
  AB0BM001.AB0BMQT5[ABWIXM] = AB0BW02.AB4SMBQT[5];
  AB0BM001.AB0BMBS5[ABWIXM] = AB0BW02.AB3BUYST[5];

end // end AB0BS-005

// Protect unused columns
Function AB0BS-006()

  if (AB0BW04.AB0BWCMO[1] == " ")
    set AB0BM001.AB0BMQT1[ABWIXM] skip, invisible;
    set AB0BM001.AB0BMBS1[ABWIXM] skip, invisible;
  end
  if (AB0BW04.AB0BWCMO[2] == " ")
    set AB0BM001.AB0BMQT2[ABWIXM] skip, invisible;
    set AB0BM001.AB0BMBS2[ABWIXM] skip, invisible;
  end
  if (AB0BW04.AB0BWCMO[3] == " ")
    set AB0BM001.AB0BMQT3[ABWIXM] skip, invisible;
    set AB0BM001.AB0BMBS3[ABWIXM] skip, invisible;
  end
  if (AB0BW04.AB0BWCMO[4] == " ")
    set AB0BM001.AB0BMQT4[ABWIXM] skip, invisible;
    set AB0BM001.AB0BMBS4[ABWIXM] skip, invisible;
  end
  if (AB0BW04.AB0BWCMO[5] == " ")
    set AB0BM001.AB0BMQT5[ABWIXM] skip, invisible;
    set AB0BM001.AB0BMBS5[ABWIXM] skip, invisible;
  end

end // end AB0BS-006

// Edit Buy Month Beg and End
Function AB0BS-007()

  AB0BW00.AB0BW-BEG-DATE = 0;
  AB0BW00.AB0BW-END-DATE = 0;
  AB0BW00.AB0BW-BEG-MM = AB0BM001.AB0BM-BEG-MM;
  AB0BW00.AB0BW-BEG-YY = AB0BM001.AB0BM-BEG-YY;
  AB0BW00.AB0BW-END-MM = AB0BM001.AB0BM-END-MM;
  AB0BW00.AB0BW-END-YY = AB0BM001.AB0BM-END-YY;
   /* -------------Y2K IN BEGIN---------------------*/
   /*  */
  if (AB0BM001.AB0BM-BEG-MM > 00)
    if (AB0BM001.AB0BM-BEG-YY > 60)
      AB0BW00.AB0BW-BEG-CC = 19;
    else
      AB0BW00.AB0BW-BEG-CC = 20;
    end
  else
    AB0BW00.AB0BW-BEG-CC = 00;
  end

  if (AB0BM001.AB0BM-END-MM > 00)
    if (AB0BM001.AB0BM-END-YY > 60)
      AB0BW00.AB0BW-END-CC = 19;
    else
      AB0BW00.AB0BW-END-CC = 20;
    end
  else
    AB0BW00.AB0BW-END-CC = 00;
  end
   /*  */
   /* ------------Y2K IN END------------------------*/

  if (AB0BW00.AB0BW-BEG-MM < 1
   || AB0BW00.AB0BW-BEG-MM > 12)
    set AB0BM001.AB0BM-BEG-MM cursor, bold;
    converseLib.validationFailed(167); /* month must be between 1 and 12*/
    AB0BM001.XXXMODID = "007";
    AB0BW00.AB0BW-BEG-MM = 0;
  else

    /* --------------Y2K OUT BEGIN--------------------*/
    /*  */
    /* IF AB0BW00.AB0BW-BEG-YY LT 90;*/
    /*  */
    /* --------------Y2K OUT END----------------------*/
    /* --------------Y2K IN BEGIN--------------------*/
    /*  */
    if (AB0BW00.AB0BW-BEG-YY < 90
     && AB0BW00.AB0BW-BEG-CC <= 19)
      /*  */
      /* --------------Y2K IN END----------------------*/
      set AB0BM001.AB0BM-BEG-YY cursor, bold;
      converseLib.validationFailed(168); /* year is invalid*/
      AB0BM001.XXXMODID = "007";
      AB0BW00.AB0BW-BEG-YY = 0;
    else

      if (AB0BW00.AB0BW-END-MM < 1
       || AB0BW00.AB0BW-END-MM > 12)
        set AB0BM001.AB0BM-END-MM cursor, bold;
        converseLib.validationFailed(167); /* month must be between 1 and 12*/
        AB0BM001.XXXMODID = "007";
        AB0BW00.AB0BW-END-MM = 0;
      else

        /* --------------------Y2K OUT BEGIN-----------------*/
        /*  */
        /* IF AB0BW00.AB0BW-END-YY LT 90;*/
        /*  */
        /* --------------------Y2K OUT END-------------------*/
        /* --------------------Y2K OUT BEGIN-----------------*/
        /*  */
        if (AB0BW00.AB0BW-END-YY < 90
         && AB0BW00.AB0BW-END-CC <= 19)
          /*  */
          /* --------------------Y2K OUT END-------------------*/
          set AB0BM001.AB0BM-END-YY cursor, bold;
          converseLib.validationFailed(168); /* year is invalid*/
          AB0BM001.XXXMODID = "007";
        else

          if (AB0BW00.AB0BW-END-DATE < AB0BW00.AB0BW-BEG-DATE)
            set AB0BM001.AB0BM-BEG-MM cursor, bold;
            set AB0BM001.AB0BM-BEG-YY bold;
            set AB0BM001.AB0BM-END-MM bold;
            set AB0BM001.AB0BM-END-YY bold;
            converseLib.validationFailed(137); /* end date cannot be le beg date*/
            AB0BM001.XXXMODID = "007";
            AB0BW00.AB0BW-BEG-DATE = 0;
            AB0BW00.AB0BW-END-DATE = 0;
          else

            AB0BW00.AB0BW-NBR-OF-MONTHS = 0;

            if (AB0BW00.AB0BW-BEG-YY == AB0BW00.AB0BW-END-YY)
              AB0BW00.AB0BW-NBR-OF-MONTHS = AB0BW00.AB0BW-END-MM - AB0BW00.AB0BW-BEG-MM + 1;
            else
              AB0BW00.AB0BW-NBR-OF-MONTHS = 12 + AB0BW00.AB0BW-END-MM - AB0BW00.AB0BW-BEG-MM + 1;
            end

            if (AB0BW00.AB0BW-NBR-OF-MONTHS > 7)
              set AB0BM001.AB0BM-BEG-MM cursor, bold;
              set AB0BM001.AB0BM-BEG-YY bold;
              set AB0BM001.AB0BM-END-MM bold;
              set AB0BM001.AB0BM-END-YY bold;
              converseLib.validationFailed(169); /* date range cannot exceed seven months*/
              AB0BM001.XXXMODID = "007";
              AB0BW00.AB0BW-BEG-DATE = 0;
              AB0BW00.AB0BW-END-DATE = 0;
            end

          end

        end

      end

    end

  end
end // end AB0BS-007

// Edit Month Ranges on Map 2
Function AB0BS-008()
  AB0BW00.AB0BW-BEG-DATE = 0;
  AB0BW00.AB0BW-END-DATE = 0;
  AB0BW00.AB0BW-BEG-MM = AB0BM002.AB0BM-BEG-MM;
  AB0BW00.AB0BW-BEG-YY = AB0BM002.AB0BM-BEG-YY;
  AB0BW00.AB0BW-END-MM = AB0BM002.AB0BM-END-MM;
  AB0BW00.AB0BW-END-YY = AB0BM002.AB0BM-END-YY;
   /* -------------------Y2K IN BEGIN------------------*/
   /*  */
  if (AB0BW00.AB0BW-BEG-MM > 00)
    if (AB0BW00.AB0BW-BEG-YY > 60)
      AB0BW00.AB0BW-BEG-CC = 19;
    else
      AB0BW00.AB0BW-BEG-CC = 20;
    end
  else
    AB0BW00.AB0BW-BEG-CC = 00;
  end

  if (AB0BW00.AB0BW-END-MM > 00)
    if (AB0BW00.AB0BW-END-YY > 60)
      AB0BW00.AB0BW-END-CC = 19;
    else
      AB0BW00.AB0BW-END-CC = 20;
    end
  else
    AB0BW00.AB0BW-END-CC = 00;
  end
   /*  */
   /* -------------------Y2K IN END-------------------*/

  if (AB0BW00.AB0BW-BEG-MM < 1
   || AB0BW00.AB0BW-BEG-MM > 12)
    set AB0BM002.AB0BM-BEG-MM cursor, bold;
    converseLib.validationFailed(167); /* month must be between 1 and 12*/
    AB0BM002.XXXMODID = "007";
    AB0BW00.AB0BW-BEG-MM = 0;
  else

    /* -----------------------Y2K OUT BEGIN----------------------*/
    /*  */
    /* IF AB0BW00.AB0BW-BEG-YY LT 90;*/
    /* SET AB0BM002.AB0BM-BEG-YY CURSOR,BRIGHT;*/
    /* MOVE 168 TO EZEMNO;          /* year is invalid*/
    /* MOVE '007' TO AB0BM002.XXXMODID;*/
    /* MOVE 0 TO AB0BW00.AB0BW-BEG-YY;*/
    /* ELSE;*/
    /*  */
    /* -----------------------Y2K OUT END-------------------------*/

    if (AB0BW00.AB0BW-END-MM < 1
     || AB0BW00.AB0BW-END-MM > 12)
      set AB0BM002.AB0BM-END-MM cursor, bold;
      converseLib.validationFailed(167); /* month must be between 1 and 12*/
      AB0BM002.XXXMODID = "007";
      AB0BW00.AB0BW-END-MM = 0;
    else

      /* ---------------------Y2K OUT BEGIN-----------------*/
      /*  */
      /* IF AB0BW00.AB0BW-END-YY LT 90;*/
      /* SET AB0BM002.AB0BM-END-YY CURSOR,BRIGHT;*/
      /* MOVE 168 TO EZEMNO;      /* year is invalid*/
      /* MOVE '007' TO AB0BM001.XXXMODID;*/
      /* ELSE;*/
      /*  */
      /* ----------------------Y2K OUT END-------------------*/

      if (AB0BW00.AB0BW-END-DATE < AB0BW00.AB0BW-BEG-DATE)
        set AB0BM002.AB0BM-BEG-MM cursor, bold;
        set AB0BM002.AB0BM-BEG-YY bold;
        set AB0BM002.AB0BM-END-MM bold;
        set AB0BM002.AB0BM-END-YY bold;
        converseLib.validationFailed(137); /* end date cannot be le beg date*/
        AB0BM002.XXXMODID = "007";
        AB0BW00.AB0BW-BEG-DATE = 0;
        AB0BW00.AB0BW-END-DATE = 0;
      else

        AB0BW00.AB0BW-NBR-OF-MONTHS = 0;

        if (AB0BW00.AB0BW-BEG-YY == AB0BW00.AB0BW-END-YY)
          AB0BW00.AB0BW-NBR-OF-MONTHS = AB0BW00.AB0BW-END-MM - AB0BW00.AB0BW-BEG-MM + 1;
        else
          AB0BW00.AB0BW-NBR-OF-MONTHS = 12 + AB0BW00.AB0BW-END-MM - AB0BW00.AB0BW-BEG-MM + 1;
        end

        if (AB0BW00.AB0BW-NBR-OF-MONTHS > 7)
          set AB0BM002.AB0BM-BEG-MM cursor, bold;
          set AB0BM002.AB0BM-BEG-YY bold;
          set AB0BM002.AB0BM-END-MM bold;
          set AB0BM002.AB0BM-END-YY bold;
          converseLib.validationFailed(169); /* date range cannot exceed seven months*/
          AB0BM002.XXXMODID = "007";
          AB0BW00.AB0BW-BEG-DATE = 0;
          AB0BW00.AB0BW-END-DATE = 0;
        end

      end

      /* ------------Y2K OUT BEGIN---------*/
      /*  */
      /* END;*/
      /*  */
      /* ------------Y2K OUT END----------*/

    end

    /* -----Y2K OUT BEGIN------*/
    /*  */
    /* END;*/
    /*  */
    /* -----Y2K OUT END--------*/

  end
end // end AB0BS-008

// open absty cursor
Function AB0BS01()
  AB0BW99.AB0BWIOT = "S4"; /* scan 4*/

  if (AB0BM001.AB0BMPOT == "IL")
    AB0BW99.AB0BWIOT = "S5"; /* scan 5*/
  end

  if (AB0BM001.AB0BMPOT == "SD")
    AB0BW99.AB0BWIOT = "S5"; /* scan 5*/
  end

  try
    call "IO3560" (AB0BW99, SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen for redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S01"; /* Process number*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB0BW99.AB0BWGP9; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y"; /* Request obtain data*/
  exit stack; /* Return to flow*/



end // end AB0BS01

// fetch next absty row
Function AB0BS02()
  if (AB0BW99.AB0BWIOT == "S4")
    AB0BW99.AB0BWIOT = "N4";
  else

    if (AB0BW99.AB0BWIOT == "S5")
      AB0BW99.AB0BWIOT = "N5";
    end

  end

  try
    call "IO3560" (AB0BW99, SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS02"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y"; /* request data*/

  exit stack; /* Return to flow*/

end // end AB0BS02

// process absty rows
Function AB0BS03()
  AB0BW01.AB2GROUP[AB0BWAIX] = AB2REC.AB2GROUP; /* save absty row*/
  AB0BW01.AB0BWPNB[AB0BWAIX] = AB0BW00.AB0BWPNB; /* page on screen*/
  AB0BW00.AB0BWB1S = "N"; /* nothing in bucket 1*/
  AB0BW00.AB0BWB2S = "N"; /* nothing in bucket 2*/
  AB0BW00.AB0BWB3S = "N"; /* nothing in bucket 3*/
  AB0BS04(); /* open vbplan cursor*/
  AB0BS05(); /* fetch next vbplan row*/

   /* F SQLCA.SQLCODE EQ 100;          /* row not found*/
   /* MOVE ' ' TO AB0BW01.AB2GROUP(AB0BWAIX); /* clear absty row*/
   /* MOVE 0 TO AB0BW01.AB0BWPNB(AB0BWAIX);  /* page to display*/
   /* AB0BW00.AB0BWAIX = AB0BW00.AB0BWAIX - 1; /* not use this absty*/
   /* ND;*/

  while (SQLCA.VAGen_SQLCODE != 100) /* until no more rows*/
    AB0BS06(); /* save vbplan row*/
    AB0BS05(); /* fetch next vbplan row*/
  end

  AB0BS07(); /* close vbplan cursor*/
  if (AB0BW00.AB0BWB1S == "Y" /* VBPLAN ROWS WERE FOUND*/
   || AB0BW00.AB0BWB2S == "Y" /* VBPLAN ROWS WERE FOUND*/
   || AB0BW00.AB0BWB3S == "Y") /* VBPLAN ROWS WERE FOUND*/
    AB0BW00.AB0BWAIX = AB0BW00.AB0BWAIX + 1; /* index up 1*/
  else
    AB0BW01.AB2GROUP[AB0BWAIX] = " "; /* clear absty row 2*/
    AB0BW01.AB0BWPNB[AB0BWAIX] = 0; /* page to display*/
  end

  if (AB0BW00.AB0BWAIX > AB0BW00.AB0BWAPG) /* gt max in array*/
    AB0BW00.AB0BWAIX = AB0BW00.AB0BWAIX - 1; /* decrement index.*/
    converseLib.validationFailed(70); /* restrict selection criteria*/
    AB0BM001.XXXMODID = "S03";
    exit stack;
  end


  AB0BS02(); /* fetch next absty row*/
end // end AB0BS03

// open vbplan cursor
Function AB0BS04()
  set AB4REC empty;
  AB4REC.SY1STNBR = AB2REC.SY1STNBR;
  AB4REC.XDMCD = AB2REC.XDMCD;
  AB4REC.XWHCD = AB2REC.XWHCD;
  AB4REC.XDVCD = AB2REC.XDVCD;
  AB4REC.XSECD = AB2REC.XSECD;
  AB4REC.XSNYR = AB2REC.XSNYR;
  AB4REC.FY1FCTYC = AB2REC.FY1FCTYC;
  AB4REC.XOWCD = AB2REC.XOWCD;
  AB4REC.PC4ORTYP = AB2REC.PC4ORTYP;
  AB4REC.PC2CUXID = AB2REC.PC2CUXID;

  try
    call "IO3570" ("S1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS04"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/


end // end AB0BS04

// fetch next vbplan row
Function AB0BS05()

  try
    call "IO3570" ("N1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      /* IF XP1REC.XP1STAT EQ AB4REC.AB3BUYST; Specific status reqstd*/
           /* OR XP1REC.XP1STAT EQ ' '  ; or all (global) requested*/
           /* ;  (next sentence)*/
         /* ELSE ;*/
           /* ;*/
           /* IF ab0bW00.AB0BMBST EQ AB4REC.PIGSNOT;*/
             /* OR ab0bW00.AB0BMBST EQ ' ';*/
             /* ; next sentence*/
          /* ELSE ;*/
            /* EZERTN                  ; else bypass row*/
          /* END ;*/
          /* ;*/
        /* END ;*/
          /* ;*/
      return; /* Return to previous process*/

    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS05"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";

  exit stack; /* Return to previous process*/

end // end AB0BS05

// save vbplan row
Function AB0BS06()

   /* ------------------------------------------------------------*/
    /* group 1 processing*/
   /* ------------------------------------------------------------*/

  if (AB4REC.AB3BUYMO in AB0BW05.AB3BUYMO) /* a month we want*/
    AB0BW00.AB0BWBIX = sysVar.arrayIndex; /* set month subscript*/
    AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAIX]; /* first grp*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] == " ") /* not already an entry*/
      AB0BW02.AB3BUYMO[AB0BWBIX] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[AB0BWBIX] = AB4REC.AB3BUYST;
      AB0BW02.AB3BYSDT[AB0BWBIX] = AB4REC.AB3BYSDT;
      AB0BW02.AB4SMBQT[AB0BWBIX] = AB4REC.AB4SMBQT;
      AB0BW02.AB4BQCFL[AB0BWBIX] = AB4REC.AB4BQCFL;
      AB0BW02.XOWCD[AB0BWBIX] = AB4REC.XOWCD;
      AB0BW02.ZZZCHGDT[AB0BWBIX] = AB4REC.ZZZCHGDT;
      AB0BW02.ZZZCHGTM[AB0BWBIX] = AB4REC.ZZZCHGTM;
      AB0BW02.ZZZCHGCT[AB0BWBIX] = AB4REC.ZZZCHGCT;
      AB0BW07.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R; /* back to array*/

      if (AB0BW00.AB0BWB1S != "Y") /* first entry this line*/
        AB0BW00.AB0BWLCT = AB0BW00.AB0BWLCT + 1; /* add 1 to line count*/
        AB0BW00.AB0BWB1S = "Y"; /* not first entry anymore*/
      end

    else

      /* ------------------------------------------------------------*/
        /* group 2 processing*/
      /* ------------------------------------------------------------*/

      AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAIX]; /* 2nd grp*/

      if (AB0BW02.AB3BUYST[AB0BWBIX] == " ") /* not already an entry*/
        AB0BW02.AB3BUYMO[AB0BWBIX] = AB4REC.AB3BUYMO;
        AB0BW02.AB3BUYST[AB0BWBIX] = AB4REC.AB3BUYST;
        AB0BW02.AB3BYSDT[AB0BWBIX] = AB4REC.AB3BYSDT;
        AB0BW02.AB4SMBQT[AB0BWBIX] = AB4REC.AB4SMBQT;
        AB0BW02.AB4BQCFL[AB0BWBIX] = AB4REC.AB4BQCFL;
        AB0BW02.XOWCD[AB0BWBIX] = AB4REC.XOWCD;
        AB0BW02.ZZZCHGDT[AB0BWBIX] = AB4REC.ZZZCHGDT;
        AB0BW02.ZZZCHGTM[AB0BWBIX] = AB4REC.ZZZCHGTM;
        AB0BW02.ZZZCHGCT[AB0BWBIX] = AB4REC.ZZZCHGCT;
        AB0BW08.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R; /* back*/

        if (AB0BW00.AB0BWB2S != "Y") /* first entry this line*/
          AB0BW00.AB0BWLCT = AB0BW00.AB0BWLCT + 1; /* add 1 to line count*/
          AB0BW00.AB0BWB2S = "Y"; /* not first entry anymore*/
        end

      else

        /* ------------------------------------------------------------*/
          /* group 3 processing*/
        /* ------------------------------------------------------------*/

        AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAIX]; /* 3rd grp*/

        if (AB0BW02.AB3BUYST[AB0BWBIX] == " ") /* not already an entry*/
          AB0BW02.AB3BUYMO[AB0BWBIX] = AB4REC.AB3BUYMO;
          AB0BW02.AB3BUYST[AB0BWBIX] = AB4REC.AB3BUYST;
          AB0BW02.AB3BYSDT[AB0BWBIX] = AB4REC.AB3BYSDT;
          AB0BW02.AB4SMBQT[AB0BWBIX] = AB4REC.AB4SMBQT;
          AB0BW02.AB4BQCFL[AB0BWBIX] = AB4REC.AB4BQCFL;
          AB0BW02.XOWCD[AB0BWBIX] = AB4REC.XOWCD;
          AB0BW02.ZZZCHGDT[AB0BWBIX] = AB4REC.ZZZCHGDT;
          AB0BW02.ZZZCHGTM[AB0BWBIX] = AB4REC.ZZZCHGTM;
          AB0BW02.ZZZCHGCT[AB0BWBIX] = AB4REC.ZZZCHGCT;
          AB0BW09.AB0BWBG[AB0BWAIX] = AB0BW02.AB0BW02R; /* back*/

          if (AB0BW00.AB0BWB3S != "Y") /* first entry this line*/
            AB0BW00.AB0BWLCT = AB0BW00.AB0BWLCT + 1; /* add 1 to line count*/
            AB0BW00.AB0BWB3S = "Y"; /* not first entry anymore*/
          end

        end

      end

    end

  end

end // end AB0BS06

// close vbplan cursor
Function AB0BS07()

  try
    call "IO3570" ("C1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S07 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS07"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/


end // end AB0BS07

// close absty cursor
Function AB0BS08()
  if (AB0BW99.AB0BWIOT == "N4")
    AB0BW99.AB0BWIOT = "C4";
  else
    AB0BW99.AB0BWIOT = "C5";
  end

  try
    call "IO3560" (AB0BW99, SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      return; /* return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS08"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y"; /* request data*/

  exit stack; /* Return to flow*/

end // end AB0BS08

// protect map 1 detail fields
Function AB0BS09()
  if (XP1REC.AB3BUYMO == 0) /* no buy month entered*/
    ABWIDX1 = 9;
  else

    if (XP1REC.AB3BUYMO in AB0BW04.AB0BWBMO) /* find which col is curr*/
      ABWREC.ABWIDX1 = sysVar.arrayIndex; /* buy mo to unprotect*/
    else
      ABWREC.ABWIDX1 = 0; /* value to never be =*/
    end

  end

  if (AB0BW04.AB0BWBMO[1] > 0)
    set AB0BM001.AB0BMQT1[ABWIXM] skip;
  end
  if (AB0BW04.AB0BWBMO[2] > 0)
    set AB0BM001.AB0BMQT2[ABWIXM] skip;
  end
  if (AB0BW04.AB0BWBMO[3] > 0)
    set AB0BM001.AB0BMQT3[ABWIXM] skip;
  end
  if (AB0BW04.AB0BWBMO[4] > 0)
    set AB0BM001.AB0BMQT4[ABWIXM] skip;
  end
  if (AB0BW04.AB0BWBMO[5] > 0)
    set AB0BM001.AB0BMQT5[ABWIXM] skip;
  end

  if (ABWREC.ABWIDX1 == 1
   && COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] == "Y"
   && AB0BM001.AB0BMBS1[ABWIXM] != "M"
   && AB0BM001.AB0BMBS1[ABWIXM] != "L")
    set AB0BM001.AB0BMQT1[ABWIXM] normal;
  else

    if (ABWREC.ABWIDX1 == 2
     && COMMAREA.CACLVL[1] == "Y"
     && COMMAREA.CACLVL[2] == "Y"
     && AB0BM001.AB0BMBS2[ABWIXM] != "M"
     && AB0BM001.AB0BMBS2[ABWIXM] != "L")
      set AB0BM001.AB0BMQT2[ABWIXM] normal;
    else

      if (ABWREC.ABWIDX1 == 3
       && COMMAREA.CACLVL[1] == "Y"
       && COMMAREA.CACLVL[2] == "Y"
       && AB0BM001.AB0BMBS3[ABWIXM] != "M"
       && AB0BM001.AB0BMBS3[ABWIXM] != "L")
        set AB0BM001.AB0BMQT3[ABWIXM] normal;
      else

        if (ABWREC.ABWIDX1 == 4
         && COMMAREA.CACLVL[1] == "Y"
         && COMMAREA.CACLVL[2] == "Y"
         && AB0BM001.AB0BMBS4[ABWIXM] != "M"
         && AB0BM001.AB0BMBS4[ABWIXM] != "L")
          set AB0BM001.AB0BMQT4[ABWIXM] normal;
        else

          if (ABWREC.ABWIDX1 == 5
           && COMMAREA.CACLVL[1] == "Y"
           && COMMAREA.CACLVL[2] == "Y"
           && AB0BM001.AB0BMBS5[ABWIXM] != "M"
           && AB0BM001.AB0BMBS5[ABWIXM] != "L")
            set AB0BM001.AB0BMQT5[ABWIXM] normal;
          end

        end

      end

    end

  end

  if (ABWREC.ABWIDX1 == 9
   && COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] == "Y")

    if (AB0BM001.AB0BMBS1[ABWIXM] != "M"
     && AB0BM001.AB0BMBS1[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[1] > 0)
      set AB0BM001.AB0BMQT1[ABWIXM] normal;
    end

    if (AB0BM001.AB0BMBS2[ABWIXM] != "M"
     && AB0BM001.AB0BMBS2[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[2] > 0)
      set AB0BM001.AB0BMQT2[ABWIXM] normal;
    end

    if (AB0BM001.AB0BMBS3[ABWIXM] != "M"
     && AB0BM001.AB0BMBS3[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[3] > 0)
      set AB0BM001.AB0BMQT3[ABWIXM] normal;
    end

    if (AB0BM001.AB0BMBS4[ABWIXM] != "M"
     && AB0BM001.AB0BMBS4[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[4] > 0)
      set AB0BM001.AB0BMQT4[ABWIXM] normal;
    end

    if (AB0BM001.AB0BMBS5[ABWIXM] != "M"
     && AB0BM001.AB0BMBS5[ABWIXM] != "L"
     && AB0BW04.AB0BWBMO[5] > 0)
      set AB0BM001.AB0BMQT5[ABWIXM] normal;
    end

  end

  if (COMMAREA.CACLVL[1] != "Y" /* inquiry only authority*/
   || COMMAREA.CACLVL[2] != "Y") /* inquiry only authority*/
    set AB0BM001.XWH-WHSE-CD[ABWIXM] skip;
    set AB0BM001.FY1FCTYC[ABWIXM] skip;
    set AB0BM001.PC4ORTYP[ABWIXM] skip;
    set AB0BM001.PC2CUXID[ABWIXM] skip;
    set AB0BM001.PG1SC4CD[ABWIXM] skip;
  end


end // end AB0BS09

// check if qty exists and chg
Function AB0BS10()
  if (AB0BW02.AB3BUYST[1] == " " /* no entries*/
   && AB0BW02.AB3BUYST[2] == " " /* for this*/
   && AB0BW02.AB3BUYST[3] == " " /* line for*/
   && AB0BW02.AB3BUYST[4] == " " /* this key*/
   && AB0BW02.AB3BUYST[5] == " ")
    return; /* return to calling process*/
  else /* additional line for this key*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/

    if (AB0BM001.AB0BMQT1[ABWIXM] != AB0BW02.AB4SMBQT[1]
     || AB0BM001.AB0BMQT2[ABWIXM] != AB0BW02.AB4SMBQT[2]
     || AB0BM001.AB0BMQT3[ABWIXM] != AB0BW02.AB4SMBQT[3]
     || AB0BM001.AB0BMQT4[ABWIXM] != AB0BW02.AB4SMBQT[4]
     || AB0BM001.AB0BMQT5[ABWIXM] != AB0BW02.AB4SMBQT[5])
      AB0BW00.AB0BWDCS = "Y"; /* data changed*/
    end

  end

end // end AB0BS10

// validate division
Function AB0BS11()
  if (AB0BM001.XDVCD == " ") /* ab0bm001 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS12(); /* Standard xdv pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM001.XDVCD cursor, bold; /* Highlight field*/
    AB0BM001.XDVDESC = " "; /* space out map field*/
    converseLib.validationFailed(75); /* Indicate error message*/
    AB0BM001.XXXMODID = "S11 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM001.XDVCD cursor, bold; /* Highlight field*/
      AB0BM001.XDVDESC = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM001.XXXMODID = "S11 "; /* Process number*/
    end

  end

end // end AB0BS11

// division code retrieval
Function AB0BS12()
  AB0BW00.XDVCD = " ";
  AB0BW00.XDVABRV = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM001.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "DIVISION CODE        ";

    while (XX0XW02.XX0XWEND == "N")

      XPXDV01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
      AB0BW00.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM001.XDVCD = " ";
      AB0BW00.XDVABRV = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    if (AB0BM001.XDVCD in XDVTBL.XDVCD) /* IF code is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM001.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
      AB0BM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS12

// validate po type
Function AB0BS14()
  if (AB0BM001.AB0BMPOT == " ") /* ab0bm001 Field eq spaces*/
    XP1REC.PC4ABRV = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end



  if (AB0BM001.AB0BMPOT == "?") /* Pop-up window requested*/
    set AB0BM001.AB0BMPOT cursor, bold; /* Highlight field*/
    AB0BM001.PC4ABRV = " "; /* Space out desc*/
    converseLib.validationFailed(42); /* Indicate pop-up window not avail*/
    ABWREC.ABWPRCSN = "S14 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = AB0BM001.AB0BMPOT; /* PO type*/

   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.PC4ABRV = PC4REC.PC4ABRV;
      return;
                                   /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM001.PC4ABRV = " "; /* Space out desc*/
      set AB0BM001.AB0BMPOT cursor, bold; /* Highlight field*/
      converseLib.validationFailed(37); /* Indicate error message*/
      AB0BM001.XXXMODID = "S14 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS14"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS14

// validate style
Function AB0BS15()
  if (AB0BM001.AB0BMSTN != " ")
    AB0BS16(); /* select set style row*/
    AB0BS17(); /* get one style row*/
    AB0BS18(); /* close set*/
  else
    XP1REC.SY1STYNM = " ";
    XP1REC.SY1SSTNM = " ";
    AB0BW00.SY1SSTNM = " ";
  end
end // end AB0BS15

// select set style
Function AB0BS16()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/
  XP1REC.XGPCD = "03"; /* default gpc cd*/
  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0BM001.AB0BMSTN; /* Style no.*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS16"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0BS16

// get next style row
Function AB0BS17()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0BM001.AB0BMSTD = PG2REC.SY1SSTNM; /* move style desc*/
      AB0BW00.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM001.AB0BMBST; blank style nbr*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BW00.AB0BMBST; blank style nbr*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM001.AB0BMSTD = " "; /* Space out desc*/
      set AB0BM001.AB0BMSTN cursor, bold; /* Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AB0BM001.XXXMODID = "S17 "; /* Process number*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS17"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS17

// close set style
Function AB0BS18()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AB0BM001.XXXMODID = "S18 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS18"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AB0BS18

// validate lia/field office
Function AB0BS19()
  if (AB0BM001.FY6FOCD == " ") /* ab0bm001 Field eq spaces*/
    return; /* Return to calling process*/
  end

  if (AB0BM001.FY6FOCD == "?") /* Pop-up window requested*/
    set AB0BM001.FY6FOCD cursor, bold; /* Highlight field*/
    AB0BM001.FY6FOABR = " "; /* space description*/
    converseLib.validationFailed(40); /* Indicate pop-up window not available*/
    AB0BM001.XXXMODID = "S19 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY6REC empty; /* initialize db record*/
  FY6REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY6REC.FY6FOCD = AB0BM001.FY6FOCD; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.Vfdofc01 DB   **/
   /* *=============================**/

  try
    call "IO2790" ("S ", SQLCA, FY6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.FY6FOABR = FY6REC.FY6FOABR;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM001.FY6FOCD cursor, bold; /* Highlight field*/
      AB0BM001.FY6FOABR = " "; /* space description*/
      converseLib.validationFailed(40); /* Indicate error message*/
      AB0BM001.XXXMODID = "S19 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S19 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS19"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFDOFC01 ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/

  exit stack; /* Exit to redisplay map*/

end // end AB0BS19

// validate factory
Function AB0BS20()
  if (AB0BM001.AB0BMFTY == " ") /* ab0bm001 Field eq spaces*/
    AB0BW00.FY1FCTSN = " "; /* space out short name*/
    return; /* Return to calling process*/
  end


  if (AB0BM001.AB0BMFTY == "?") /* Pop-up window requested*/
    set AB0BM001.AB0BMFTY cursor, bold; /* Highlight field*/
    AB0BM001.FY1FCTSN = " "; /* space screen description*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM001.XXXMODID = "S20 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0BM001.AB0BMFTY; /* factory code*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0BW00.FY1FCTSN = FY1REC.FY1FCTSN;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM001.AB0BMFTY cursor, bold; /* Highlight field*/
      AB0BM001.FY1FCTSN = " "; /* space screen description*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AB0BM001.XXXMODID = "S20 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S20 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS20"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS20

// validate quota cat code
Function AB0BS21()
  if (AB0BM001.XQTCD == " ") /* ab0bm001 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS22();
                                   /* Standard xqt validation/pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/
     /* MOVE ' ' TO AB0BM001.XQTCD    ; Space out save field*/
    set AB0BM001.XQTCD cursor, bold; /* Highlight field*/
    converseLib.validationFailed(30); /* Indicate error message*/
    AB0BM001.XXXMODID = "S21 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      set AB0BM001.XQTCD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM001.XXXMODID = "S21 "; /* Process number*/
    else
      AB0BM001.XQTCD = AB0BM001.XQTCD; /* Move valid data to map*/
    end

  end

end // end AB0BS21

// quota category retrieval
Function AB0BS22()
  XP1REC.XQTDESC2 = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM001.XQTCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "QUOTA CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")
      XPXQT01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM001.XQTCD = XQTTBL.XQTCD[XX0XWPIX];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[XX0XWPIX];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM001.XQTCD = " ";
      XP1REC.XQTDESC2 = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* ELSE(POP-UP not requested)*/

    if (AB0BM001.XQTCD in XQTTBL.XQTCD)
                                   /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM001.XQTCD = XQTTBL.XQTCD[sysVar.arrayIndex];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS22

// validate category
Function AB0BS23()
  if (AB0BM001.AB0BMXPC == " ") /* ab0bm001 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS24(); /* Standard XPC pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM001.AB0BMXPC cursor, bold; /* Highlight field*/
    AB0BM001.XPCABRV = " "; /* space out map field*/
    converseLib.validationFailed(32); /* Indicate error message*/
    AB0BM001.XXXMODID = "S23 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM001.AB0BMXPC cursor, bold; /* Highlight field*/
      AB0BM001.XPCABRV = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM001.XXXMODID = "S23 "; /* Process number*/
    end

  end

end // end AB0BS23

// product category retrieval
Function AB0BS24()
  XP1REC.XPCABRV = " ";
  XP1REC.XPCDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM001.AB0BMXPC == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXPC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM001.AB0BMXPC = XPCTBL.XPCCD[XX0XWPIX];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM001.AB0BMXPC = " ";
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    if (AB0BM001.AB0BMXPC in XPCTBL.XPCCD) /* map value in tables on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
       /* MOVE XPCTBL.XPCCD(EZETST) TO AB0BM001.AB0BMXPC;*/
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS24

// validate gender/age
Function AB0BS25()
  if (AB0BM001.AB0BMXGA == " ") /* ab0bm001 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS26(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    AB0BM001.XGAABRV = " "; /* Space out desc*/
    set AB0BM001.AB0BMXGA cursor, bold; /* Highlight field*/
    converseLib.validationFailed(33); /* Indicate error message*/
    AB0BM001.XXXMODID = "S25 "; /* Process number*/
  else

  /* IF AB0BM001.XXXSTAT EQ 'I';     /* Inactive data obtained*/
  /* MOVE ' ' TO AB0BM001.XGAABRV;        /* Space out desc*/
  /* SET AB0BM001.AB0BMXGA CURSOR,BRIGHT; /* Highlight field*/
  /* MOVE 35 TO EZEMNO;            /* Indicate error message*/
  /* MOVE 'S25 ' TO AB0BM001.XXXMODID;    /* Process number*/
  /* END;*/

  end



end // end AB0BS25

// gender/age retrieval
Function AB0BS26()
  XP1REC.XGAABRV = " "; /* Init abbr desc*/
  XP1REC.XGADESC = " "; /* Init Desc*/
  XP1REC.XXXSTAT = " "; /* Init status of code*/

  if (AB0BM001.AB0BMXGA == "?") /* If POP-UP window requested*/
    XPXX001(); /* Init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Move code to POP-UP rec*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES";
                                 /* ;       Init POP-UP header*/
    while (XX0XW02.XX0XWEND == "N") /* Loop thru POP-UP until done*/
                                 /* ;*/
      XPXGA01(); /* Perform POP-UP routine*/
                                 /* ;*/
    end /* End of Loop*/

    if (XX0XW02.XX0XWPIX > 0) /* If Selection made in POP-UP*/
      /* -------- MOVE values from CSP Table to XP1rec -------*/
      AB0BM001.AB0BMXGA = XGATBL.XGACD[XX0XWPIX];
      XP1REC.XGAABRV = XGATBL.XGAABRV[XX0XWPIX];
      XP1REC.XGADESC = XGATBL.XGADESC[XX0XWPIX];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[XX0XWPIX];
    else /* ELSE(No Selection made)*/
      AB0BM001.AB0BMXGA = " ";
      XP1REC.XGAABRV = " ";
      XP1REC.XGADESC = " ";
      XP1REC.XXXSTAT = " ";
    end /* END of 'IF' statement*/
  else /* ELSE(POP-UP not requseted)*/
    if (AB0BM001.AB0BMXGA in XGATBL.XGACD)
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[sysVar.arrayIndex];
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS26

// validate season/yr
Function AB0BS27()
  XP1REC.XSECD = AB0BM001.XSECD;
  AB0BW00.AB0BWSYY = AB0BM001.XSNYR;

  if (AB0BW00.AB0BWSYY == 0 /* Year 2000*/
   || AB0BW00.AB0BWSYY < 70) /* Year 2001-2069*/
    AB0BW00.AB0BWSCC = 20; /* Set century to 20th*/
  else
    AB0BW00.AB0BWSCC = 19; /* Set century to 19th*/
  end

  XP1REC.XSNYR = AB0BW00.AB0BWSYR;

      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  ABWREC.ABWIDX1 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX1 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX1] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX1] == XP1REC.XSNYR
     && YSNTBL.XGPCD[ABWIDX1] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX1] == "01")
      return; /* return*/
    else
      if (YSNTBL.XGPCD[ABWIDX1] != "99")
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      else
        ABWREC.ABWIDX1 = 9999; /* END OF TABLE*/
      end
    end
  end

  AB0BM001.XXXMODID = "S27"; /* Process number*/
  converseLib.validationFailed(71);
                                   /* Season code missing or invalid*/
  set AB0BM001.XSNYR cursor, bold; /* Position cursor*/

  if (AB0BM001.XSECD == " ") /* Map Season Code not entered*/
    AB0BM001.XXXMODID = "S27"; /* Process number*/
    converseLib.validationFailed(16);
                                   /* Season code missing or invalid*/
    set AB0BM001.XSECD cursor, bold; /* Position cursor*/
  end


end // end AB0BS27

// validate buy month
Function AB0BS28()
  AB0BW00.AB0BMBMM = AB0BM001.AB0BMBMM;
  AB0BW00.AB0BMBYY = AB0BM001.AB0BMBYY;

  if (AB0BW00.AB0BWBMY == " ") /* buy month eq    spaces*/
    return; /* Return to calling process*/
  end
   /* --------------------Y2K IN BEGIN--------------------*/
   /*  */
  if (AB0BW00.AB0BMBMM > 00)
    if (AB0BW00.AB0BMBYY > 60)
      AB0BW00.AB0BMBCC = 19;
    else
      AB0BW00.AB0BMBCC = 20;
    end
  else
    AB0BW00.AB0BMBCC = 00;
  end
   /*  */
   /* --------------------Y2K IN END----------------------*/

  XP1REC.XSECD = AB0BM001.XSECD;
  AB0BW00.AB3BUYMO = AB0BW00.AB0BWBMN;
  XP1REC.AB3BUYMO = AB0BW00.AB3BUYMO;
  XP1REC.XP1XSNYR = XP1REC.XSNYR;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  XSABSMO(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid buy month*/
    /* -------------------Y2K OUT BEGIN------------------*/
    /*  */
    /* AB0BW00.AB0BWSBD = ABWREC.ABWFOBDT - 1;*/
    /*  */
    /* -------------------Y2K OUT END--------------------*/
    /* -------------------Y2K IN BEGIN-------------------*/
    /*  */
    if (ABWREC.ABWFOBMM == 1)
      ABWREC.ABWFOBCCYY = ABWREC.ABWFOBCCYY - 1;
      ABWREC.ABWFOBMM = 12;
    else
      ABWREC.ABWFOBMM = ABWREC.ABWFOBMM - 1;
    end

    AB0BW00.AB0BWSBD = ABWREC.ABWFOBDT;
    /*  */
    /* -------------------Y2K IN END---------------------*/

    if (XP1REC.AB3BUYMO == AB0BW00.AB0BWSBD)
      XP1REC.XP1ERRFL = " ";
    end

  end

  if (XP1REC.XP1ERRFL == "1") /* Invalid buy month*/

    if (AB0BM001.AB0BMBMM != 0
     || AB0BM001.AB0BMBYY != 0)
      set AB0BM001.AB0BMBMM cursor, bold; /* Highlight field*/
      set AB0BM001.AB0BMBYY bold; /* Highlight field*/
      converseLib.validationFailed(34); /* Indicate error message*/
      AB0BM001.XXXMODID = "S28"; /* Process number*/
    end

  else

    if (XP1REC.XP1ERRFL == "2") /* Invalid season/year*/
      set AB0BM001.XSNYR cursor, bold; /* Highlight field*/
      set AB0BM001.XSECD bold; /* Highlight field*/
      converseLib.validationFailed(71); /* Indicate error message*/
      AB0BM001.XXXMODID = "S28"; /* Process number*/
    end
  end

end // end AB0BS28

// validate scheduler code
Function AB0BS29()
  if (AB0BM001.XXXUSER == "?") /* Pop-up window requested*/
    set AB0BM001.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM001.XXXMODID = "S22 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/

  if (AB0BM001.XXXUSER == " ") /* If no scheduler entered*/
    return; /* Return to calling process*/
  end

  XP1REC.XXXUSER = AB0BM001.XXXUSER;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    set AB0BM001.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    AB0BM001.XXXMODID = "S22 "; /* Process number*/
    return; /* Return to calling process*/
  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/
      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/
    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      end

    end

  end

end // end AB0BS29

// validate line scheduler code
Function AB0BS30()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = AB0BM001.PG1SC4CD[ABWIXM];
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call ok*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return; /* Return to 'CALLING' Process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set AB0BM001.PG1SC4CD[ABWIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(21); /* scheduler bad*/
      AB0BM001.XXXMODID = "S30"; /* process number*/
      return; /* Return to 'CALLING' Process*/
    end

  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
    converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
    TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
  else
    converseLib.validationFailed(10); /* IF Unknown DB2 Error occured*/
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AB0BS30"; /* Process name*/
  TA1REC.TA1LOC = "VALIDATE SCHECULER";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB0BM001.PG1SC4CD[ABWIXM];
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  return; /* Return to previous process*/


end // end AB0BS30

// validate line factory code
Function AB0BS31()

   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM]; /* factory code*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold; /* Highlight field*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AB0BM001.XXXMODID = "S31 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S31 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS31"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS31

// validate line cust xref
Function AB0BS32()
   /* *************************************************************/
   /* ***** V A L I D A T E     C U S T O M E R    X _ R E F ******/
   /* *****                                                  ******/
   /* ***** this process will validate the customer x-ref    ******/
   /* *************************************************************/

  set PC2REC empty;

  PC2REC.XGPCD = XP1REC.XGPCD;
  PC2REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(48);
        AB0BM001.XXXMODID = "S32 "; /* Process number*/
        set AB0BM001.PC2CUXID[ABWIXM] cursor, bold;
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S32 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS32"; /* Error location*/
  TA1REC.TA1LOC = "VALIDATE CUST X-REF";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  exit stack; /* Return to previous process*/



end // end AB0BS32

// validate line po type
Function AB0BS33()

   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM]; /* PO type*/

   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (AB0BM001.PC4ORTYP[ABWIXM] != AB0BW01.PC4ORTYP[ABWIXM])
        AB0BM001.XWH-WHSE-CD[ABWIXM] = PC4REC.XWHCD;
      end

      return;
                                   /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM001.PC4ORTYP[ABWIXM] cursor, bold; /* Highlight field*/
      converseLib.validationFailed(37); /* Indicate error message*/
      AB0BM001.XXXMODID = "S33 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S33 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS33"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS33

// select set vbplan chng ind
Function AB0BS35()

  try
    call "IO3570" ("S2", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S35 "; /* Process number*/
  AB0BM002.XXXMODID = "S35 "; /* Process number*/
  AB0BM003.XXXMODID = "S35 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS35"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  exit stack; /* Return to previous process*/


end // end AB0BS35

// fetch next vbplan chng ind
Function AB0BS36()

  try
    call "IO3570" ("N2", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      /* IF XP1REC.XP1STAT EQ AB4REC.AB3BUYST; Specific status reqstd*/
           /* OR XP1REC.XP1STAT EQ ' '  ; or all (global) requested*/
           /* ;  (next sentence)*/
         /* ELSE ;*/
           /* ;*/
           /* IF ab0bW00.AB0BMBST EQ AB4REC.PIGSNOT;*/
             /* OR ab0bW00.AB0BMBST EQ ' ';*/
             /* ; next sentence*/
          /* ELSE ;*/
            /* EZERTN                  ; else bypass row*/
          /* END ;*/
          /* ;*/
        /* END ;*/
          /* ;*/
      return; /* Return to previous process*/

    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back changes*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S36 "; /* Process number*/
  AB0BM002.XXXMODID = "S36 "; /* Process number*/
  AB0BM003.XXXMODID = "S36 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS36"; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";

  exit stack; /* Return to previous process*/

end // end AB0BS36

// update vbplan row
Function AB0BS37()
   /* *************************************************************/
   /* *****   U P D A T E     D A B U Y . V B P L A N 0 1    ******/
   /* *****                                                  ******/
   /* ***** This statement group will update a row in the    ******/
   /* ***** DB2 table DABUY.VBPLAN01.                        ******/
   /* *************************************************************/

  AB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  AB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  try
    call "IO3570" ("U ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S37 "; /* Process number*/
  AB0BM002.XXXMODID = "S37 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS37"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE DABUY.VBPLAN01 TABLE ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/

end // end AB0BS37

// close cursor vbplan chng ind
Function AB0BS38()

  try
    call "IO3570" ("C2", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S38 "; /* Process number*/
  AB0BM002.XXXMODID = "S38 "; /* Process number*/
  AB0BM003.XXXMODID = "S38 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS01"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE  SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/


end // end AB0BS38

// check for buy type m, l
Function AB0BS39()
  AB0BW00.AB0BWMSW = "N"; /* no m or l buy types*/
  AB0BW00.AB0BWNMS = "N"; /* no non m buy types*/
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first mo in season*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each column*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "L"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "M")
      AB0BW00.AB0BWMSW = "Y"; /* an m or l record exists*/
    else

      if (AB0BW02.AB3BUYST[AB0BWBIX] != " ")
        AB0BW00.AB0BWNMS = "Y"; /* a non m record exists*/
      end

    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  if (AB0BW00.AB0BWMSW == "Y" /* buy type m, l found*/
   && AB0BW00.AB0BWNMS == "Y") /* non m buy type found*/
    return; /* return ,skip rest of logic*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first mo in season*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each column*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "L"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "M")
      AB0BW00.AB0BWMSW = "Y"; /* an m or l record exists*/
    else

      if (AB0BW02.AB3BUYST[AB0BWBIX] != " ")
        AB0BW00.AB0BWNMS = "Y"; /* a non m record exists*/
      end

    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  if (AB0BW00.AB0BWMSW == "Y" /* buy type m, l found*/
   && AB0BW00.AB0BWNMS == "Y") /* non m buy type found*/
    return; /* return ,skip rest of logic*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first mo in season*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each column*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] == "L"
     || AB0BW02.AB3BUYST[AB0BWBIX] == "M")
      AB0BW00.AB0BWMSW = "Y"; /* an m or l record exists*/
    else

      if (AB0BW02.AB3BUYST[AB0BWBIX] != " ")
        AB0BW00.AB0BWNMS = "Y"; /* a non m record exists*/
      end

    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

end // end AB0BS39

// validate warehouse
Function AB0BS3F()
  if (AB0BM001.XWH-WHSE-CD[ABWIXM] == " ") /* ab0bm001 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  if (AB0BM001.XWH-WHSE-CD[ABWIXM] in XWHTBL.XWHCD)
    AB0BM001.XWH-WHSE-CD[ABWIXM] = XWHTBL.XWHCD[sysVar.arrayIndex];
  else
    XP1REC.XP1ERRFL = "1";
  end

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM001.XWH-WHSE-CD[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(43); /* Indicate error message*/
    AB0BM001.XXXMODID = "S3F "; /* Process number*/
  end

end // end AB0BS3F

// reset line change ind
Function AB0BS40()
  set AB4REC empty;
  AB4REC.AB4BQCFL = "C";
  if (ABWREC.ABWMAP == "1")
    AB4REC.SY1STNBR = AB0BM001.SY1STNBR[ABWIXM];
    AB4REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
    AB4REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
    AB4REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
    AB4REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];
  /* MOVE AB0BM001.XOWCD(ABWIXM) TO AB4REC.XOWCD;*/

    if (AB0BM001.XDVCD == " ")
      AB4REC.XDVCD = "*";
    else
      AB4REC.XDVCD = AB0BM001.XDVCD;
    end

    AB4REC.XDMCD = "*";
    AB4REC.XSECD = AB0BM001.XSECD;
   /* ------------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* AB4REC.XSNYR = AB0BM001.XSNYR + 1900;*/
   /*  */
   /* ------------------Y2K OUT END---------------------*/
   /* ------------------Y2K IN BEGIN-------------------*/
   /*  */
    if (AB0BM001.XSNYR > 60)
      AB4REC.XSNYR = AB0BM001.XSNYR + 1900;
    else
      AB4REC.XSNYR = AB0BM001.XSNYR + 2000;
    end
   /*  */
   /* ------------------Y2K IN END-------------------*/
  else
    AB4REC.SY1STNBR = AB0BM002.SY1STNBR[ABWIXM];
    AB4REC.FY1FCTYC = AB0BM002.FY1FCTYC[ABWIXM];
    AB4REC.PC2CUXID = AB0BM002.PC2CUXID[ABWIXM];
    AB4REC.PC4ORTYP = AB0BM002.PC4ORTYP[ABWIXM];
    AB4REC.XOWCD = AB0BM002.XOWCD[ABWIXM];

    if (AB0BM002.XDVCD == " ")
      AB4REC.XDVCD = "*";
    else
      AB4REC.XDVCD = AB0BM002.XDVCD;
    end

    AB4REC.XDMCD = "*";
    AB4REC.XSECD = AB0BM002.XSECD;
   /* ------------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* AB4REC.XSNYR = AB0BM002.XSNYR + 1900;*/
   /*  */
   /* ------------------Y2K OUT END---------------------*/
   /* ------------------Y2K IN BEGIN-------------------*/
   /*  */
    if (AB0BM002.XSNYR > 60)
      AB4REC.XSNYR = AB0BM002.XSNYR + 1900;
    else
      AB4REC.XSNYR = AB0BM002.XSNYR + 2000;
    end
   /*  */
   /* ------------------Y2K IN END-------------------*/
  end

  AB0BS35(); /* select set vb plan*/
  AB0BS36(); /* fetch next vbplan*/

  while (SQLCA.VAGen_SQLCODE != 100) /* for each vbplan row*/
    AB4REC.AB4BQCFL = " "; /* reset changed indicator*/
    AB0BM001.AB4BQCFL[ABWIXM] = " ";
    AB0BM002.AB4BQCFL[ABWIXM] = " ";
    AB0BS37(); /* update vbplan*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      AB0BM001.XXXMODID = "S40";
      AB0BM002.XXXMODID = "S40";
      AB0BM003.XXXMODID = "S40";
      converseLib.validationFailed(13); /* updated since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous changes*/
      exit stack; /* redisplay map*/
    end

    AB0BS36(); /* fetch next vbplan*/
  end

  AB0BS38(); /* close set vbplan*/
  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " " /* an entry*/
   || AB0BW02.AB3BUYST[2] != " " /* an entry*/
   || AB0BW02.AB3BUYST[3] != " " /* for screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line 2*/
   || AB0BW02.AB3BUYST[5] != " " /* this key*/
   || AB0BW02.AB3BUYST[6] != " " 
   || AB0BW02.AB3BUYST[7] != " ")
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " " 
   || AB0BW02.AB3BUYST[2] != " " /* an entry*/
   || AB0BW02.AB3BUYST[3] != " " /* for screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line 2*/
   || AB0BW02.AB3BUYST[5] != " " /* this key*/
   || AB0BW02.AB3BUYST[6] != " " 
   || AB0BW02.AB3BUYST[7] != " ")
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
  end

  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1;

  while (AB0BW00.AB0BWBIX <= 7)
    AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
  end

  AB0BW07.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1;

  while (AB0BW00.AB0BWBIX <= 7)
    AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
  end

  AB0BW08.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1;

  while (AB0BW00.AB0BWBIX <= 7)
    AB0BW02.AB4BQCFL[AB0BWBIX] = " ";
    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1;
  end

  AB0BW09.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
end // end AB0BS40

// delete rows
Function AB0BS41()
  if (AB0BW00.AB0BWMSW != "Y") /* no m or l buy type rows*/
    set AB2REC empty; /* clear record*/
    AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2];
    AB0BS42(); /* delete absty row*/
  end

  set AB4REC empty; /* clear record*/
  AB4REC.AB4KEY = AB0BW01.AB2KEY[AB0BWAX2]; /* beginning of key*/
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first month of season*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each month*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* l and m are both*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* history, cannot be deleted*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* no entry dont delete*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS43(); /* delete vbplan row*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first month of season*/

  if (AB0BW02.AB3BUYST[1] != " " 
   || AB0BW02.AB3BUYST[2] != " " /* an entry for*/
   || AB0BW02.AB3BUYST[3] != " " /* this screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line*/
   || AB0BW02.AB3BUYST[5] != " " 
   || AB0BW02.AB3BUYST[6] != " " 
   || AB0BW02.AB3BUYST[7] != " ")
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
  end

  while (AB0BW00.AB0BWBIX <= 7) /* for each month*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* l and m are both*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* history, cannot be deleted*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* no entry dont delete*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS43(); /* delete vbplan row*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2]; /* separate*/
  AB0BW00.AB0BWBIX = 1; /* first month of season*/

  if (AB0BW02.AB3BUYST[1] != " " 
   || AB0BW02.AB3BUYST[2] != " " /* an entry for*/
   || AB0BW02.AB3BUYST[3] != " " /* this screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line*/
   || AB0BW02.AB3BUYST[5] != " " 
   || AB0BW02.AB3BUYST[6] != " " 
   || AB0BW02.AB3BUYST[7] != " ")
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
  end

  while (AB0BW00.AB0BWBIX <= 7) /* for each month*/

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* l and m are both*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* history, cannot be deleted*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* no entry dont delete*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS43(); /* delete vbplan row*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

end // end AB0BS41

// delete absty row
Function AB0BS42()
   /* ------------------------------------------------------------*/
   /* Delete the ABSTY01 row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("D ", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S42 "; /* Process number*/
  AB0BM002.XXXMODID = "S42 "; /* Process number*/
  TA1REC.TA1PGMNM = "S42"; /* Error location*/
  TA1REC.TA1LOC = "DELETE A ABSTY ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  exit stack; /* redisplay map*/



end // end AB0BS42

// delete vbplan row
Function AB0BS43()
   /* *************************************************************/
   /* *****    D E L E T E     B U Y _ P L A N     R O W     ******/
   /* *****                                                  ******/
   /* ***** this process will DELETE ONE BUY_PLAN ROW.       ******/
   /* *************************************************************/

  try
    call "IO3570" ("D ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)
      ABWREC.ABWSWR = "Y"; /* request data*/
      AB0BW00.AB0BWFMS = "Y"; /* format map*/
      AB0BW00.AB0BWUSW = "Y"; /* data updated*/
    end

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S43 "; /* Process number*/
  AB0BM002.XXXMODID = "S43 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS43"; /* Error location*/
  TA1REC.TA1LOC = "DELETE OLD B-PLAN ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  exit stack; /* Redisplay map*/



end // end AB0BS43

// update line process
Function AB0BS44()
  if (AB0BW01.SY1STNBR[AB0BWAX2] != AB0BM001.SY1STNBR[ABWIXM]
   || AB0BW01.FY1FCTYC[AB0BWAX2] != AB0BM001.FY1FCTYC[ABWIXM]
   || AB0BW01.PC4ORTYP[AB0BWAX2] != AB0BM001.PC4ORTYP[ABWIXM]
   || AB0BW01.PC2CUXID[AB0BWAX2] != AB0BM001.PC2CUXID[ABWIXM]
   || AB0BW01.PG1SC4CD[AB0BWAX2] != AB0BM001.PG1SC4CD[ABWIXM]
   || AB0BW01.XWH-WHSE-CD[AB0BWAX2] != AB0BM001.XWH-WHSE-CD[ABWIXM])
    AB0BS45(); /* key data changed process*/
  end

  AB0BS53(); /* quantity changed process*/
end // end AB0BS44

// key data changed process
Function AB0BS45()

   /* ------------------------------------------------------------*/
    /* build absty key for changed values*/
   /* ------------------------------------------------------------*/

  set AB2REC empty;
  AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2];
  AB2REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
  AB2REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
  AB2REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
  AB2REC.PG1SC4CD = AB0BM001.PG1SC4CD[ABWIXM];
  AB2REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
  AB2REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];

  AB0BS46(); /* fetch unique absty rec*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   && AB2REC.PG1SC4CD == AB0BM001.PG1SC4CD[ABWIXM])
    AB0BW00.AB0BWNFF = "Y";
  else
    AB0BW00.AB0BWNFF = "N"; /* row not found*/
  end

  if (AB0BM001.FY1FCTYC[ABWIXM] == AB0BW01.FY1FCTYC[AB0BWAX2] 
   && AB0BM001.PC4ORTYP[ABWIXM] == AB0BW01.PC4ORTYP[AB0BWAX2] /* only*/
   && AB0BM001.PC2CUXID[ABWIXM] == AB0BW01.PC2CUXID[AB0BWAX2] /* change*/
   && AB0BM001.XWH-WHSE-CD[ABWIXM] == AB0BW01.XWH-WHSE-CD[AB0BWAX2]
   && AB0BM001.PG1SC4CD[ABWIXM] != AB0BW01.PG1SC4CD[AB0BWAX2])

    if (AB0BW00.AB0BWNFF == "Y") /* new key absty row found*/
      set AB2REC empty;
      AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2];
      AB0BS42(); /* delete (old) absty row*/
    else /* no absty row for new key*/
      AB0BS47(); /* change absty row (to new key)*/
    end

  else /* more than scheduler changed*/
    AB0BS49(); /* change key process*/
  end

end // end AB0BS45

// fetch absty row
Function AB0BS46()

  try
    call "IO3560" ("S ", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == +100) /* no sql errors*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S46 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS46"; /* Error location*/
  TA1REC.TA1LOC = "SELECT A ABSTY ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0BS46

// update absty process
Function AB0BS47()
  set AB2REC empty;
  AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2];
  AB0BS46(); /* fetch (old) absty row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    AB0BM001.XXXMODID = "S47"; /* process nbr*/
    converseLib.validationFailed(13); /* updated since last displayed*/
    set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold;
    set AB0BM001.PC4ORTYP[ABWIXM] bold;
    set AB0BM001.PC2CUXID[ABWIXM] bold;
    set AB0BM001.PG1SC4CD[ABWIXM] bold;
    set AB0BM001.XWH-WHSE-CD[ABWIXM] bold;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    exit stack;
  end

  AB0BS42(); /* delete (old) absty row*/
  AB2REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
  AB2REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
  AB2REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
  AB2REC.PG1SC4CD = AB0BM001.PG1SC4CD[ABWIXM];
  AB2REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];
   /* AB0BS48                         ; update absty row*/
  AB0BS50(); /* insert (new key) absty row*/
end // end AB0BS47

// key change process
Function AB0BS49()
  if (AB0BW00.AB0BWMSW == "Y") /* an m or l buy stat exists this absty*/

    if (AB0BW00.AB0BWNFF == "Y") /* absty row exists new key*/
      /* next sentence*/
    else /* absty row does not exist new key*/
      set AB2REC empty;
      AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2]; /* old key*/
      AB0BS46(); /* fetch (old) absty row*/

      if (SQLCA.VAGen_SQLCODE == 100)
        AB0BM001.XXXMODID = "S49"; /* process nbr*/
        converseLib.validationFailed(13); /* updated since last displayed*/
        set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold;
        set AB0BM001.PC4ORTYP[ABWIXM] bold;
        set AB0BM001.PC2CUXID[ABWIXM] bold;
        set AB0BM001.PG1SC4CD[ABWIXM] bold;
        set AB0BM001.XWH-WHSE-CD[ABWIXM] bold;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back any changes*/
        exit stack;
      else /* old key found*/
        AB2REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
        AB2REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
        AB2REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
        AB2REC.PG1SC4CD = AB0BM001.PG1SC4CD[ABWIXM];
        AB2REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];
        AB2REC.XOWCD = AB0BW01.XOWCD[ABWIXM];
        AB0BS50(); /* insert absty row (for new key)*/
      end

    end

  else /* no m or l buy stats exist old absty key*/

    if (AB0BW00.AB0BWNFF == "Y") /* absty row exists new key*/
      AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2]; /* old key*/
      AB0BS42(); /* delete (old key) absty row*/
    else /* absty row does not exist new key*/
      set AB2REC empty;
      AB2REC.AB2KEY = AB0BW01.AB2KEY[AB0BWAX2]; /* old key*/
      AB0BS46(); /* fetch (old) absty row*/

      if (SQLCA.VAGen_SQLCODE == 100)
        AB0BM001.XXXMODID = "S49"; /* process nbr*/
        converseLib.validationFailed(13); /* updated since last displayed*/
        set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold;
        set AB0BM001.PC4ORTYP[ABWIXM] bold;
        set AB0BM001.PC2CUXID[ABWIXM] bold;
        set AB0BM001.PG1SC4CD[ABWIXM] bold;
        set AB0BM001.XWH-WHSE-CD[ABWIXM] bold;
  /* SET AB0BM001.XOWCD(ABWIXM) BRIGHT;*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back any changes*/
        exit stack;
      else /* old key found*/
        AB0BS42(); /* delete absty row (old key)*/
        AB2REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
        AB2REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
        AB2REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
        AB2REC.PG1SC4CD = AB0BM001.PG1SC4CD[ABWIXM];
        AB2REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];
        AB2REC.XOWCD = AB0BW01.XOWCD[ABWIXM];
        /* AB0BS48                  ; change absty row (to new key)*/
        AB0BS50(); /* add absty row (new key)*/

        if (SQLCA.VAGen_SQLCODE == 100)
          AB0BM001.XXXMODID = "S49"; /* process nbr*/
          converseLib.validationFailed(13); /* updated since last displayed*/
          set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold;
          set AB0BM001.PC4ORTYP[ABWIXM] bold;
          set AB0BM001.PC2CUXID[ABWIXM] bold;
          set AB0BM001.PG1SC4CD[ABWIXM] bold;
          set AB0BM001.XWH-WHSE-CD[ABWIXM] bold;
   /* SET AB0BM001.XOWCD(ABWIXM) BRIGHT;*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* roll back any changes*/
          exit stack;
        end

      end

    end

  end

  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1; /* 1st mo of sesn*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each bucket*/
    set AB4REC empty; /* clear buy plan record*/

    /* -------------------------------------------------*/
      /* build vbplan key from absty array*/
    /* -------------------------------------------------*/

    AB4REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
    AB4REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
    AB4REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
    AB4REC.XWHCD = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
    AB4REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
    AB4REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
    AB4REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];
    AB4REC.FY1FCTYC = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB4REC.PC4ORTYP = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB4REC.PC2CUXID = AB0BW01.PC2CUXID[AB0BWAX2];

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* not a*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* history row*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* but an entry*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS51(); /* update vbplan key process*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1; /* 1st mo of sesn*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each bucket*/
    set AB4REC empty; /* clear buy plan record*/

    /* -------------------------------------------------*/
      /* build vbplan key from absty array*/
    /* -------------------------------------------------*/

    AB4REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
    AB4REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
    AB4REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
    AB4REC.XWHCD = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
    AB4REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
    AB4REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
    AB4REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];
    AB4REC.FY1FCTYC = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB4REC.PC4ORTYP = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB4REC.PC2CUXID = AB0BW01.PC2CUXID[AB0BWAX2];

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* not a*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* history row*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* but an entry*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS51(); /* update vbplan key process*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];
  AB0BW00.AB0BWBIX = 1; /* 1st mo of sesn*/

  while (AB0BW00.AB0BWBIX <= 7) /* for each bucket*/
    set AB4REC empty; /* clear buy plan record*/

    /* -------------------------------------------------*/
      /* build vbplan key from absty array*/
    /* -------------------------------------------------*/

    AB4REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
    AB4REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
    AB4REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
    AB4REC.XWHCD = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
    AB4REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
    AB4REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
    AB4REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];
    AB4REC.FY1FCTYC = AB0BW01.FY1FCTYC[AB0BWAX2];
    AB4REC.PC4ORTYP = AB0BW01.PC4ORTYP[AB0BWAX2];
    AB4REC.PC2CUXID = AB0BW01.PC2CUXID[AB0BWAX2];

    if (AB0BW02.AB3BUYST[AB0BWBIX] != "M" /* not a*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != "L" /* history row*/
     && AB0BW02.AB3BUYST[AB0BWBIX] != " ") /* but an entry*/
      AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[AB0BWBIX];
      AB4REC.AB3BUYST = AB0BW02.AB3BUYST[AB0BWBIX];
      AB0BS51(); /* update vbplan key process*/
    end

    AB0BW00.AB0BWBIX = AB0BW00.AB0BWBIX + 1; /* next month*/
  end

end // end AB0BS49

// insert absty row
Function AB0BS50()
   /* *************************************************************/
   /* *****   I N S E R T     D A B U Y . V A B S T Y 0 1    ******/
   /* *****                                                  ******/
   /* ***** This statement group will insert a row in the    ******/
   /* ***** DB2 table DABUY.ABSTY01.                        ******/
   /* *************************************************************/

  AB2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  AB2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  try
    call "IO3560" ("A ", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S50 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS50"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE DABUY.ABSTY01 TABLE ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "ABSTY01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ABWREC.ABWSWR = "N";
  exit stack; /* Return to previous process*/

end // end AB0BS50

// update vbplan key process
Function AB0BS51()
  AB0BS52(); /* fetch vbplan row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    AB0BM001.XXXMODID = "S51";
    converseLib.validationFailed(77); /* record deleted since last displayed*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  else
    AB0BS43(); /* delete vbplan row (old key)*/
    AB4REC.FY1FCTYC = AB0BM001.FY1FCTYC[ABWIXM];
    AB4REC.PC4ORTYP = AB0BM001.PC4ORTYP[ABWIXM];
    AB4REC.PC2CUXID = AB0BM001.PC2CUXID[ABWIXM];
    AB4REC.XWHCD = AB0BM001.XWH-WHSE-CD[ABWIXM];
    AB0BS52(); /* fetch vbplan row(new key)*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found - dup record*/
      AB0BM001.XXXMODID = "S51";
      converseLib.validationFailed(148); /* duplicate reow*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      set AB0BM001.FY1FCTYC[ABWIXM] cursor, bold;
      set AB0BM001.PC4ORTYP[ABWIXM] bold;
      set AB0BM001.PC2CUXID[ABWIXM] bold;
      set AB0BM001.XWH-WHSE-CD[ABWIXM] bold;
      exit stack;
    end

    AB0BS97(); /* insert vbplan row (new key)*/
    /* AB0BS37                      ; update vbplan row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      AB0BM001.XXXMODID = "S51";
      converseLib.validationFailed(13); /* updated since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end

  end

end // end AB0BS51

// fetch vbplan row
Function AB0BS52()
   /* *************************************************************/
   /* *****   SELECT UNIQUE   D A B U Y . V B P L A N 0 1    ******/
   /* *************************************************************/


  try
    call "IO3570" ("S ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return; /* return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S52 "; /* Process number*/
  AB0BM002.XXXMODID = "S52 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS52"; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE VBPLAN01 TABLE ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "N";
  exit stack; /* Return to previous process*/


end // end AB0BS52

// quantity changed process
Function AB0BS53()
  AB0BW02.AB0BW02R = AB0BW07.AB0BWBG[AB0BWAX2];
  set AB4REC empty; /* clear buy plan record*/

   /* -------------------------------------------------*/
    /* build vbplan key from absty array*/
   /* -------------------------------------------------*/

  AB4REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
  AB4REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
  AB4REC.XOWCD = AB0BW01.XOWCD[AB0BWAX2];
  AB4REC.XWHCD = AB0BW01.XWH-WHSE-CD[AB0BWAX2];
  AB4REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
  AB4REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
  AB4REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];
  AB4REC.FY1FCTYC = AB0BW01.FY1FCTYC[AB0BWAX2];
  AB4REC.PC4ORTYP = AB0BW01.PC4ORTYP[AB0BWAX2];
  AB4REC.PC2CUXID = AB0BW01.PC2CUXID[AB0BWAX2];

  AB0BS54(); /* process vbplan row*/
  AB0BW07.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;

  AB0BW02.AB0BW02R = AB0BW08.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " " 
   || AB0BW02.AB3BUYST[2] != " " /* an entry*/
   || AB0BW02.AB3BUYST[3] != " " /* for screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line 2*/
   || AB0BW02.AB3BUYST[5] != " ") /* this key*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
    AB0BS54(); /* process vbplan row*/
    AB0BW08.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
  end

  AB0BW02.AB0BW02R = AB0BW09.AB0BWBG[AB0BWAX2];

  if (AB0BW02.AB3BUYST[1] != " " 
   || AB0BW02.AB3BUYST[2] != " " /* an entry*/
   || AB0BW02.AB3BUYST[3] != " " /* for screen*/
   || AB0BW02.AB3BUYST[4] != " " /* line 3*/
   || AB0BW02.AB3BUYST[5] != " ") /* this key*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen row*/
    AB0BW09.AB0BWBG[AB0BWAX2] = AB0BW02.AB0BW02R;
    AB0BS54(); /* process vbplan row*/
  end

end // end AB0BS53

// process vbplan row
Function AB0BS54()
  if (AB0BW02.AB4SMBQT[1] != AB0BM001.AB0BMQT1[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM001.AB0BMQT1[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[1] = AB0BM001.AB0BMQT1[ABWIXM];
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[1];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[1];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[1];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[1] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[1] = "S";
      AB0BW02.AB4SMBQT[1] = AB0BM001.AB0BMQT1[ABWIXM];
    end

    AB0BW02.AB4BQCFL[1] = "C";
    AB0BS55(); /* update vbplan process*/
  end

  if (AB0BW02.AB4SMBQT[2] != AB0BM001.AB0BMQT2[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM001.AB0BMQT2[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[2] = AB0BM001.AB0BMQT2[ABWIXM];
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[2];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[2];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[2];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[2] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[2] = "S";
      AB0BW02.AB4SMBQT[2] = AB0BM001.AB0BMQT2[ABWIXM];
    end

    AB0BW02.AB4BQCFL[2] = "C";
    AB0BS55(); /* update vbplan process*/
  end

  if (AB0BW02.AB4SMBQT[3] != AB0BM001.AB0BMQT3[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM001.AB0BMQT3[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[3] = AB0BM001.AB0BMQT3[ABWIXM];
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[3];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[3];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[3];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[3] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[3] = "S";
      AB0BW02.AB4SMBQT[3] = AB0BM001.AB0BMQT3[ABWIXM];
    end

    AB0BW02.AB4BQCFL[3] = "C";
    AB0BS55(); /* update vbplan process*/
  end

  if (AB0BW02.AB4SMBQT[4] != AB0BM001.AB0BMQT4[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM001.AB0BMQT4[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[4] = AB0BM001.AB0BMQT4[ABWIXM];
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[4];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[4];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[4];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[4] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[4] = "S";
      AB0BW02.AB4SMBQT[4] = AB0BM001.AB0BMQT4[ABWIXM];
    end

    AB0BW02.AB4BQCFL[4] = "C";
    AB0BS55(); /* update vbplan process*/
  end

  if (AB0BW02.AB4SMBQT[5] != AB0BM001.AB0BMQT5[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM001.AB0BMQT5[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[5] = AB0BM001.AB0BMQT5[ABWIXM];
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[5];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[5];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[5];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[5] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[5] = "S";
      AB0BW02.AB4SMBQT[5] = AB0BM001.AB0BMQT5[ABWIXM];
    end

    AB0BW02.AB4BQCFL[5] = "C";
    AB0BS55(); /* update vbplan process*/
  end

end // end AB0BS54

// update vbplan process
Function AB0BS55()
  AB0BS52(); /* fetch vbplan row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    AB4REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* buy status date*/
    AB4REC.AB4SMBQT = AB0BW00.AB0BWKQT; /* move screen quantity*/
    AB4REC.AB4BQCFL = "C"; /* quantity changed*/
    AB0BS97(); /* insert vbplan row*/
     /* MOVE 'S55' TO AB0BM001.XXXMODID;*/
     /* MOVE 'S55' TO AB0BM002.XXXMODID;*/
     /* CALL EZEROLLB;*/
  else
    AB4REC.AB4SMBQT = AB0BW00.AB0BWKQT; /* move screen quantity*/
    AB4REC.AB4BQCFL = "C"; /* quantity changed*/
    AB0BS37(); /* update vbplan row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(13); /* updated since last displayed*/
      AB0BM001.XXXMODID = "S55";
      AB0BM002.XXXMODID = "S55";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end

  end

end // end AB0BS55

// check if qty exists & chged
Function AB0BS56()
  if (AB0BW02.AB3BUYST[6] == " " /* no entries this line*/
   && AB0BW02.AB3BUYST[7] == " ") /* for this key*/
    return; /* return to calling process*/
  else /* additional line for this key*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* next screen line*/

    if (AB0BM002.AB0BMQT1[ABWIXM] != AB0BW02.AB4SMBQT[6]
     || AB0BM002.AB0BMQT2[ABWIXM] != AB0BW02.AB4SMBQT[7])
      AB0BW00.AB0BWDCS = "Y"; /* data changed*/
    end

  end

end // end AB0BS56

// validate division code
Function AB0BS57()
  if (AB0BM002.XDVCD == " ") /* ab0bm002 field eq spaces*/
    AB0BM001.XDVDESC = " ";
    AB0BM002.XDVDESC = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS58(); /* Standard xdv pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM002.XDVCD cursor, bold; /* Highlight field*/
    AB0BM002.XDVDESC = " "; /* space out map field*/
    converseLib.validationFailed(75); /* Indicate error message*/
    AB0BM002.XXXMODID = "S57 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM002.XDVCD cursor, bold; /* Highlight field*/
      AB0BM002.XDVDESC = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM002.XXXMODID = "S57 "; /* Process number*/
    end

  end

end // end AB0BS57

// division code retrieval
Function AB0BS58()
  AB0BW00.XDVCD = " ";
  AB0BW00.XDVABRV = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM002.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "DIVISION CODE        ";

    while (XX0XW02.XX0XWEND == "N")

      XPXDV01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM002.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
      AB0BW00.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (AB0BM002.XDVCD in XDVTBL.XDVCD) /* IF code is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM002.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
      AB0BM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS58

// validate P O type
Function AB0BS60()
  if (AB0BM002.AB0BMPOT == " ") /* ab0bm002 Field eq spaces*/
    XP1REC.PC4ABRV = " ";
    AB0BM002.PC4ABRV = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end



  if (AB0BM002.AB0BMPOT == "?") /* Pop-up window requested*/
    set AB0BM002.AB0BMPOT cursor, bold; /* Highlight field*/
    AB0BM002.PC4ABRV = " "; /* Space out desc*/
    converseLib.validationFailed(42); /* Indicate pop-up window not avail*/
    ABWREC.ABWPRCSN = "S60 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = AB0BM002.AB0BMPOT; /* PO type*/

   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.PC4ABRV = PC4REC.PC4ABRV;
      return;
                                   /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM002.PC4ABRV = " "; /* Space out desc*/
      set AB0BM002.AB0BMPOT cursor, bold; /* Highlight field*/
      converseLib.validationFailed(37); /* Indicate error message*/
      AB0BM002.XXXMODID = "S60 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM002.XXXMODID = "S60 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS60"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = "AB0BM002"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS60

// validate style
Function AB0BS61()
  if (AB0BM002.AB0BMSTN != " ")
    AB0BS62(); /* select set style row*/
    AB0BS63(); /* get one style row*/
    AB0BS64(); /* close set*/
  else
    XP1REC.SY1STYNM = " ";
    XP1REC.SY1SSTNM = " ";
    AB0BW00.SY1SSTNM = " ";
  end
end // end AB0BS61

// select set style
Function AB0BS62()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/
  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0BM002.AB0BMSTN; /* Style no.*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM002.XXXMODID = "S62 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS62"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AB0BM002"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0BS62

// get next style
Function AB0BS63()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0BW00.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM001.AB0BMBST; blank style nbr*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM002.AB0BMBST; blank style nbr*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM003.AB0BMBST; blank style nbr*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM001.AB0BMSTD = " "; /* Space out desc*/
      AB0BM002.AB0BMSTD = " "; /* Space out desc*/
      AB0BM003.AB0BMSTD = " "; /* Space out desc*/
      set AB0BM002.AB0BMSTN cursor, bold; /* Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AB0BM002.XXXMODID = "S63 "; /* Process number*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM002.XXXMODID = "S78 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS78"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0BM002"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS63

// close cursor style
Function AB0BS64()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AB0BM002.XXXMODID = "S64 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS64"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AB0BM002"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AB0BS64

// validate lia/field office
Function AB0BS65()
  if (AB0BM002.FY6FOCD == " ") /* ab0bm002 Field eq spaces*/
    XP1REC.FY6FOABR = " ";
    return; /* Return to calling process*/
  end

  if (AB0BM002.FY6FOCD == "?") /* Pop-up window requested*/
    set AB0BM002.FY6FOCD cursor, bold; /* Highlight field*/
    AB0BM002.FY6FOABR = " "; /* space description*/
    converseLib.validationFailed(40); /* Indicate pop-up window not available*/
    AB0BM002.XXXMODID = "S65 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY6REC empty; /* initialize db record*/
  FY6REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY6REC.FY6FOCD = AB0BM002.FY6FOCD; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.Vfdofc01 DB   **/
   /* *=============================**/

  try
    call "IO2790" ("S ", SQLCA, FY6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.FY6FOABR = FY6REC.FY6FOABR;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM002.FY6FOCD cursor, bold; /* Highlight field*/
      AB0BM002.FY6FOABR = " "; /* space description*/
      converseLib.validationFailed(40); /* Indicate error message*/
      AB0BM002.XXXMODID = "S65 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM002.XXXMODID = "S65 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS65"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFDOFC01 ROW";
  TA1REC.TA1MAP = "AB0BM002"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/

  exit stack; /* Exit to redisplay map*/

end // end AB0BS65

// validate factory code
Function AB0BS66()
  if (AB0BM002.AB0BMFTY == " ") /* ab0bm002 Field eq spaces*/
    AB0BW00.FY1FCTSN = " ";
    return; /* Return to calling process*/
  end


  if (AB0BM002.AB0BMFTY == "?") /* Pop-up window requested*/
    set AB0BM002.AB0BMFTY cursor, bold; /* Highlight field*/
    AB0BM002.FY1FCTSN = " "; /* space screen description*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM002.XXXMODID = "S66 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0BM002.AB0BMFTY; /* factory code*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0BW00.FY1FCTSN = FY1REC.FY1FCTSN;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM002.AB0BMFTY cursor, bold; /* Highlight field*/
      AB0BM002.FY1FCTSN = " "; /* space screen description*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AB0BM002.XXXMODID = "S66 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM002.XXXMODID = "S66 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS66"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS66

// validate quota cat code
Function AB0BS67()
  if (AB0BM002.XQTCD == " ") /* ab0bm002 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS68();
                                   /* Standard xqt validation/pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/
     /* MOVE ' ' TO AB0BM002.XQTCD    ; Space out save field*/
    set AB0BM002.XQTCD cursor, bold; /* Highlight field*/
    converseLib.validationFailed(30); /* Indicate error message*/
    AB0BM002.XXXMODID = "S67 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      set AB0BM002.XQTCD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM002.XXXMODID = "S67 "; /* Process number*/
    else
      AB0BM002.XQTCD = AB0BM002.XQTCD; /* Move valid data to map*/
    end

  end

end // end AB0BS67

// quota category retrieval
Function AB0BS68()
  XP1REC.XQTDESC2 = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM002.XQTCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "QUOTA CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")
      XPXQT01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM002.XQTCD = XQTTBL.XQTCD[XX0XWPIX];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[XX0XWPIX];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/

    if (AB0BM002.XQTCD in XQTTBL.XQTCD)
                                   /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM002.XQTCD = XQTTBL.XQTCD[sysVar.arrayIndex];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS68

// validate product categ code
Function AB0BS69()
  if (AB0BM002.AB0BMXPC == " ") /* ab0bm002 field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS70(); /* Standard XPC pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM002.AB0BMXPC cursor, bold; /* Highlight field*/
    AB0BM002.XPCABRV = " "; /* space out map field*/
    converseLib.validationFailed(32); /* Indicate error message*/
    AB0BM002.XXXMODID = "S69 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM002.AB0BMXPC cursor, bold; /* Highlight field*/
      AB0BM002.XPCABRV = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM002.XXXMODID = "S69 "; /* Process number*/
    end

  end

end // end AB0BS69

// product category retrieval
Function AB0BS70()
  XP1REC.XPCABRV = " ";
  XP1REC.XPCDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM002.AB0BMXPC == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXPC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM002.AB0BMXPC = XPCTBL.XPCCD[XX0XWPIX];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM002.AB0BMXPC = " ";
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* POP-UP not requested*/
    if (AB0BM002.AB0BMXPC in XPCTBL.XPCCD)
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM002.AB0BMXPC = XPCTBL.XPCCD[sysVar.arrayIndex];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS70

// validate gender/age code
Function AB0BS71()
  if (AB0BM002.AB0BMXGA == " ") /* ab0bm002 field eq spaces*/
    XP1REC.XGAABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS72(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    AB0BM002.XGAABRV = " "; /* Space out desc*/
    set AB0BM002.AB0BMXGA cursor, bold; /* Highlight field*/
    converseLib.validationFailed(33); /* Indicate error message*/
    AB0BM002.XXXMODID = "S71 "; /* Process number*/
  else

  /* IF AB0BM002.XXXSTAT EQ 'I';     /* Inactive data obtained*/
  /* MOVE ' ' TO AB0BM002.XGAABRV;        /* Space out desc*/
  /* SET AB0BM002.AB0BMXGA CURSOR,BRIGHT; /* Highlight field*/
  /* MOVE 35 TO EZEMNO;            /* Indicate error message*/
  /* MOVE 'S71 ' TO AB0BM002.XXXMODID;    /* Process number*/
  /* END;*/

  end



end // end AB0BS71

// gender/age retrieval
Function AB0BS72()
  XP1REC.XGAABRV = " "; /* Init abbr desc*/
  XP1REC.XGADESC = " "; /* Init Desc*/
  XP1REC.XXXSTAT = " "; /* Init status of code*/

  if (AB0BM002.AB0BMXGA == "?") /* If POP-UP window requested*/
    XPXX001(); /* Init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Move code to POP-UP rec*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES";
                                 /* ;       Init POP-UP header*/
    while (XX0XW02.XX0XWEND == "N") /* Loop thru POP-UP until done*/
                                 /* ;*/
      XPXGA01(); /* Perform POP-UP routine*/
                                 /* ;*/
    end /* End of Loop*/

    if (XX0XW02.XX0XWPIX > 0) /* If Selection made in POP-UP*/
      /* -------- MOVE values from CSP Table to XP1rec -------*/
      AB0BM002.AB0BMXGA = XGATBL.XGACD[XX0XWPIX];
      XP1REC.XGAABRV = XGATBL.XGAABRV[XX0XWPIX];
      XP1REC.XGADESC = XGATBL.XGADESC[XX0XWPIX];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[XX0XWPIX];
    else /* ELSE(No Selection made)*/
      XP1REC.XP1ERRFL = "1"; /* Move error code to XP1REC*/
    end /* END of 'IF' statement*/
  else /* ELSE(POP-UP not requseted)*/
    if (AB0BM002.AB0BMXGA in XGATBL.XGACD) /* IF code is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM002.AB0BMXGA = XGATBL.XGACD[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[sysVar.arrayIndex];
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS72

// validate season/year
Function AB0BS73()
  XP1REC.XSECD = AB0BM002.XSECD;
  AB0BW00.AB0BWSYY = AB0BM002.XSNYR;

  if (AB0BW00.AB0BWSYY == 0 /* Year 2000*/
   || AB0BW00.AB0BWSYY < 70) /* Year 2001-2069*/
    AB0BW00.AB0BWSCC = 20; /* Set century to 20th*/
  else
    AB0BW00.AB0BWSCC = 19; /* Set century to 19th*/
  end
  XP1REC.XSNYR = AB0BW00.AB0BWSYR;

      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  ABWREC.ABWIDX1 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX1 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX1] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX1] == XP1REC.XSNYR
     && YSNTBL.XGPCD[ABWIDX1] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX1] == "01")
      return; /* return*/
    else
      if (YSNTBL.XGPCD[ABWIDX1] != "99")
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      else
        ABWREC.ABWIDX1 = 9999; /* END OF TABLE*/
      end
    end
  end

  AB0BM002.XXXMODID = "S73"; /* Process number*/
  converseLib.validationFailed(71);
                                   /* Season code missing or invalid*/
  set AB0BM002.XSNYR cursor, bold; /* Position cursor*/

  if (AB0BM002.XSECD == " ") /* Map Season Code not entered*/
    AB0BM002.XXXMODID = "S73"; /* Process number*/
    converseLib.validationFailed(16);
                                   /* Season code missing or invalid*/
    set AB0BM002.XSECD cursor, bold; /* Position cursor*/
  end


end // end AB0BS73

// validate sesn/yr/buy mo
Function AB0BS74()
  AB0BW00.AB0BMBMM = AB0BM002.AB0BMBMM;
  AB0BW00.AB0BMBYY = AB0BM002.AB0BMBYY;

   /* --------------------Y2K OUT BEGIN---------------------*/
   /*  */
   /* IF AB0BW00.AB0BWBMY EQ '0000';  /* buy month eq    spaces*/
   /*  */
   /* --------------------Y2K OUT END-----------------------*/
   /* --------------------Y2K IN BEGIN---------------------*/
   /*  */
  if (AB0BW00.AB0BMBMM > 00)
    if (AB0BW00.AB0BMBYY > 60)
      AB0BW00.AB0BMBCC = 19;
    else
      AB0BW00.AB0BMBCC = 20;
    end
  else
    AB0BW00.AB0BMBCC = 00;
  end

  if (AB0BW00.AB0BMBMM == "00") /* buy month eq    spaces*/
    /*  */
    /* --------------------Y2K IN END------------------------*/
    return; /* Return to calling process*/
  end

  AB0BW00.AB3BUYMO = AB0BW00.AB0BWBMN;
  XP1REC.AB3BUYMO = AB0BW00.AB3BUYMO;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  XSABSMO(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid buy month*/
    set AB0BM002.AB0BMBMM cursor, bold; /* Highlight field*/
    set AB0BM002.AB0BMBYY bold; /* Highlight field*/
    converseLib.validationFailed(34); /* Indicate error message*/
    AB0BM002.XXXMODID = "S74"; /* Process number*/

  else

    if (XP1REC.XP1ERRFL == "2") /* Invalid season/year*/
      set AB0BM002.XSNYR cursor, bold; /* Highlight field*/
      set AB0BM002.XSECD bold; /* Highlight field*/
      converseLib.validationFailed(71); /* Indicate error message*/
      AB0BM002.XXXMODID = "S74"; /* Process number*/
    end
  end

end // end AB0BS74

// validate scheduler code
Function AB0BS75()
  if (AB0BM002.XXXUSER == "?") /* Pop-up window requested*/
    set AB0BM001.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM002.XXXMODID = "S75 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/

  if (AB0BM002.XXXUSER == " ") /* If no scheduler entered*/
    return; /* Return to calling process*/
  end

  XP1REC.XXXUSER = AB0BM002.XXXUSER;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    set AB0BM001.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    AB0BM002.XXXMODID = "S75 "; /* Process number*/
    return; /* Return to calling process*/
  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/
      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/
    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      end

    end

  end

end // end AB0BS75

// process vbplan row map 2
Function AB0BS76()
  if (AB0BW02.AB4SMBQT[6] != AB0BM002.AB0BMQT1[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM002.AB0BMQT1[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[6] = AB0BM002.AB0BMQT1[ABWIXM];
    AB0BW02.AB4BQCFL[6] = "C";
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[6];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[6];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[6];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[6] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[6] = "S";
      AB0BW02.AB4SMBQT[6] = AB0BM002.AB0BMQT1[ABWIXM];
    end

    AB0BS55(); /* update vbplan process*/
  end

  if (AB0BW02.AB4SMBQT[7] != AB0BM002.AB0BMQT2[ABWIXM])
    AB0BW00.AB0BWKQT = AB0BM002.AB0BMQT2[ABWIXM]; /* work quantity*/
    AB0BW02.AB4SMBQT[7] = AB0BM002.AB0BMQT2[ABWIXM];
    AB0BW02.AB4BQCFL[7] = "C";
    AB4REC.AB3BUYMO = AB0BW02.AB3BUYMO[7];
    AB4REC.AB3BUYST = AB0BW02.AB3BUYST[7];

    if (AB4REC.AB3BUYMO == 0)
      AB4REC.AB3BUYMO = AB0BW04.AB0BWBMO[7];
      AB4REC.AB3BUYST = "S";
      AB0BW02.AB3BUYMO[7] = AB4REC.AB3BUYMO;
      AB0BW02.AB3BUYST[7] = "S";
      AB0BW02.AB4SMBQT[7] = AB0BM002.AB0BMQT2[ABWIXM];
    end

    AB0BS55(); /* update vbplan process*/
  end
end // end AB0BS76

// validate division
Function AB0BS77()
  if (AB0BM003.XDVCD == " ") /* ab0bm003 field eq spaces*/
    AB0BM001.XDVCD = " ";
     /* MOVE ' ' TO XP1REC.XDVCD;*/
    AB0BM001.XDVDESC = " ";
    AB0BM003.XDVDESC = " ";
     /* MOVE ' ' TO XP1REC.XDVDESC;*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS78(); /* Standard xdv pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM003.XDVCD cursor, bold; /* Highlight field*/
    AB0BM003.XDVDESC = " "; /* space out map field*/
    converseLib.validationFailed(75); /* Indicate error message*/
    AB0BM003.XXXMODID = "S77 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM003.XDVCD cursor, bold; /* Highlight field*/
      AB0BM003.XDVDESC = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM003.XXXMODID = "S77 "; /* Process number*/
    end

  end

end // end AB0BS77

// division code retreval
Function AB0BS78()
  AB0BW00.XDVCD = " ";
  AB0BW00.XDVABRV = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM003.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "DIVISION CODE        ";

    while (XX0XW02.XX0XWEND == "N")

      XPXDV01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM003.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
      AB0BW00.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM003.XDVCD = " ";
      AB0BW00.XDVABRV = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* ELSE(POP-UP not requested)*/
    if (AB0BM003.XDVCD in XDVTBL.XDVCD) /* IF code is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM003.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
      AB0BM003.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XDVTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS78

// validate P O type
Function AB0BS80()
  if (AB0BM003.AB0BMPOT == " ") /* ab0bm003 Field eq spaces*/
    AB0BM001.AB0BMPOT = " ";
    XP1REC.PC4ORTYP = " ";
    XP1REC.PC4ABRV = " ";
    AB0BM001.PC4ABRV = " ";
    AB0BM003.PC4ABRV = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end



  if (AB0BM003.AB0BMPOT == "?") /* Pop-up window requested*/
    set AB0BM003.AB0BMPOT cursor, bold; /* Highlight field*/
    AB0BM003.PC4ABRV = " "; /* Space out desc*/
    converseLib.validationFailed(42); /* Indicate pop-up window not avail*/
    ABWREC.ABWPRCSN = "S80 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = AB0BM003.AB0BMPOT; /* PO type*/

   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.PC4ABRV = PC4REC.PC4ABRV;
      return;
                                   /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM003.PC4ABRV = " "; /* Space out desc*/
      set AB0BM003.AB0BMPOT cursor, bold; /* Highlight field*/
      converseLib.validationFailed(37); /* Indicate error message*/
      AB0BM003.XXXMODID = "S80 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S80 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS80"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS80

// validate style nbr
Function AB0BS81()
  if (AB0BM003.AB0BMSTN != " ")
    set PG2REC empty;
    PG2REC.XGPCD = XP1REC.XGPCD;
    PG2REC.SY1STNBR = AB0BM003.AB0BMSTN;
    AB0BS82(); /* select set style row*/
    AB0BS83(); /* get one style row*/
    AB0BS84(); /* close set*/
  else
    AB0BW00.SY1SSTNM = " ";
    AB0BM001.AB0BMSTN = " ";
    AB0BM002.AB0BMSTD = " ";
    AB0BM003.AB0BMSTD = " ";
  end
end // end AB0BS81

// select set style table
Function AB0BS82()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S82 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS82"; /* Error location*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0BS82

// fetch style row
Function AB0BS83()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0BW00.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM001.AB0BMBST; blank style nbr*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM002.AB0BMBST; blank style nbr*/
      /* MOVE PG2REC.SY1BSTNB TO AB0BM003.AB0BMBST; blank style nbr*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM003.AB0BMSTD = " "; /* Space out desc*/
      set AB0BM003.AB0BMSTN cursor, bold; /* Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AB0BM003.XXXMODID = "S83 "; /* Process number*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S78 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS78"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS83

// close cursor style table
Function AB0BS84()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AB0BM003.XXXMODID = "S84 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS84"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AB0BS84

// validate lia/field office
Function AB0BS85()
  if (AB0BM003.FY6FOCD == " ") /* ab0bm003 Field eq spaces*/
    AB0BM001.FY6FOCD = " ";
    XP1REC.FY6FOCD = " ";
    AB0BM001.FY6FOABR = " ";
    AB0BM003.FY6FOABR = " ";
    XP1REC.FY6FOABR = " ";
    return; /* Return to calling process*/
  end

  if (AB0BM003.FY6FOCD == "?") /* Pop-up window requested*/
    set AB0BM003.FY6FOCD cursor, bold; /* Highlight field*/
    AB0BM003.FY6FOABR = " "; /* space description*/
    converseLib.validationFailed(40); /* Indicate pop-up window not available*/
    AB0BM003.XXXMODID = "S85 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY6REC empty; /* initialize db record*/
  FY6REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY6REC.FY6FOCD = AB0BM003.FY6FOCD; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.Vfdofc01 DB   **/
   /* *=============================**/

  try
    call "IO2790" ("S ", SQLCA, FY6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.FY6FOABR = FY6REC.FY6FOABR;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM003.FY6FOCD cursor, bold; /* Highlight field*/
      AB0BM003.FY6FOABR = " "; /* space description*/
      converseLib.validationFailed(40); /* Indicate error message*/
      AB0BM003.XXXMODID = "S85 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S85 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS85"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFDOFC01 ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/

  exit stack; /* Exit to redisplay map*/

end // end AB0BS85

// validate factory
Function AB0BS86()
  if (AB0BM003.AB0BMFTY == " ") /* ab0bm003 Field eq spaces*/
    AB0BM001.AB0BMFTY = " ";
    XP1REC.FY1FCTYC = " ";
    AB0BW00.FY1FCTSN = " ";
    return; /* Return to calling process*/
  end


  if (AB0BM003.AB0BMFTY == "?") /* Pop-up window requested*/
    set AB0BM003.AB0BMFTY cursor, bold; /* Highlight field*/
    AB0BM003.FY1FCTSN = " "; /* space screen description*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM003.XXXMODID = "S86 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0BM003.AB0BMFTY; /* factory code*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0BW00.FY1FCTSN = FY1REC.FY1FCTSN;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0BM003.AB0BMFTY cursor, bold; /* Highlight field*/
      AB0BM003.FY1FCTSN = " "; /* space screen description*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AB0BM003.XXXMODID = "S86 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S86 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS86"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS86

// validate quota cat code
Function AB0BS87()
  if (AB0BM003.XQTCD == " ") /* ab0bm003 field eq spaces*/
    AB0BM001.XQTCD = " ";
    XP1REC.XQTCD = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS88();
                                   /* Standard xqt validation/pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/
     /* MOVE ' ' TO AB0BM003.XQTCD    ; Space out save field*/
    set AB0BM003.XQTCD cursor, bold; /* Highlight field*/
    converseLib.validationFailed(30); /* Indicate error message*/
    AB0BM003.XXXMODID = "S87 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      set AB0BM003.XQTCD cursor, bold; /* Highlight field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM003.XXXMODID = "S87 "; /* Process number*/
    else
      AB0BM003.XQTCD = AB0BM003.XQTCD; /* Move valid data to map*/
    end

  end

end // end AB0BS87

// quota cat code retrieval
Function AB0BS88()
  XP1REC.XQTDESC2 = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM003.XQTCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "QUOTA CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")
      XPXQT01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM003.XQTCD = XQTTBL.XQTCD[XX0XWPIX];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[XX0XWPIX];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM003.XQTCD = " ";
      XP1REC.XQTDESC2 = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* ELSE(POP-UP not requested)*/

    if (AB0BM003.XQTCD in XQTTBL.XQTCD)
                                   /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM003.XQTCD = XQTTBL.XQTCD[sysVar.arrayIndex];
      XP1REC.XQTDESC2 = XQTTBL.XQTDESC2[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XQTTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS88

// validate prod categ code
Function AB0BS89()
  if (AB0BM003.AB0BMXPC == " ") /* ab0bm003 field eq spaces*/
    AB0BM001.AB0BMXPC = " ";
    XP1REC.XPCCD = " ";
    AB0BM001.XPCABRV = " ";
    AB0BM003.XPCABRV = " ";
    XP1REC.XPCABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS90(); /* Standard XPC pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    set AB0BM003.AB0BMXPC cursor, bold; /* Highlight field*/
    AB0BM003.XPCABRV = " "; /* space out map field*/
    converseLib.validationFailed(32); /* Indicate error message*/
    AB0BM003.XXXMODID = "S89 "; /* Process number*/
  else

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/
      set AB0BM003.AB0BMXPC cursor, bold; /* Highlight field*/
      AB0BM003.XPCABRV = " "; /* space out map field*/
      converseLib.validationFailed(35); /* Indicate error message*/
      AB0BM003.XXXMODID = "S89 "; /* Process number*/
    end

  end

end // end AB0BS89

// categ code retrieval
Function AB0BS90()
  XP1REC.XPCABRV = " ";
  XP1REC.XPCDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (AB0BM003.AB0BMXPC == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXPC01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      AB0BM003.AB0BMXPC = XPCTBL.XPCCD[XX0XWPIX];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[XX0XWPIX];
    else
      AB0BM003.AB0BMXPC = " ";
      XP1REC.XPCABRV = " ";
      XP1REC.XPCDESC = " ";
      XP1REC.XXXSTAT = " ";
    end

  else /* POP-UP not requested*/
    if (AB0BM003.AB0BMXPC in XPCTBL.XPCCD)
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM003.AB0BMXPC = XPCTBL.XPCCD[sysVar.arrayIndex];
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XPCTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS90

// validate gender/age code
Function AB0BS91()
  if (AB0BM003.AB0BMXGA == " ") /* ab0bm003 field eq spaces*/
    AB0BM001.AB0BMXGA = " ";
    XP1REC.XGACD = " ";
    AB0BM003.XGAABRV = " ";
    AB0BM001.XGAABRV = " ";
    XP1REC.XGAABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  AB0BS92(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/
    AB0BM003.XGAABRV = " "; /* Space out desc*/
    set AB0BM003.AB0BMXGA cursor, bold; /* Highlight field*/
    converseLib.validationFailed(33); /* Indicate error message*/
    AB0BM003.XXXMODID = "S91 "; /* Process number*/
  else

  /* IF AB0BM003.XXXSTAT EQ 'I';     /* Inactive data obtained*/
  /* MOVE ' ' TO AB0BM003.XGAABRV;        /* Space out desc*/
  /* SET AB0BM003.AB0BMXGA CURSOR,BRIGHT; /* Highlight field*/
  /* MOVE 35 TO EZEMNO;            /* Indicate error message*/
  /* MOVE 'S91 ' TO AB0BM003.XXXMODID;    /* Process number*/
  /* END;*/

  end



end // end AB0BS91

// gender/age retrieval
Function AB0BS92()
  XP1REC.XGAABRV = " "; /* Init abbr desc*/
  XP1REC.XGADESC = " "; /* Init Desc*/
  XP1REC.XXXSTAT = " "; /* Init status of code*/

  if (AB0BM003.AB0BMXGA == "?") /* If POP-UP window requested*/
    XPXX001(); /* Init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD; /* Move code to POP-UP rec*/
    XX0XW02.XX0XWHDR = "GENDER/AGE CODES";
                                 /* ;       Init POP-UP header*/
    while (XX0XW02.XX0XWEND == "N") /* Loop thru POP-UP until done*/
                                 /* ;*/
      XPXGA01(); /* Perform POP-UP routine*/
                                 /* ;*/
    end /* End of Loop*/

    if (XX0XW02.XX0XWPIX > 0) /* If Selection made in POP-UP*/
      /* -------- MOVE values from CSP Table to XP1rec -------*/
      AB0BM003.AB0BMXGA = XGATBL.XGACD[XX0XWPIX];
      XP1REC.XGAABRV = XGATBL.XGAABRV[XX0XWPIX];
      XP1REC.XGADESC = XGATBL.XGADESC[XX0XWPIX];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[XX0XWPIX];
    else /* ELSE(No Selection made)*/
      AB0BM003.AB0BMXGA = " ";
      XP1REC.XGAABRV = " ";
      XP1REC.XGADESC = " ";
      XP1REC.XXXSTAT = " ";
    end /* END of 'IF' statement*/
  else /* ELSE(POP-UP not requseted)*/
    if (AB0BM003.AB0BMXGA in XGATBL.XGACD) /* IF code is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      AB0BM003.AB0BMXGA = XGATBL.XGACD[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XGATBL.XXXSTAT[sysVar.arrayIndex];
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/

end // end AB0BS92

// validate season/year
Function AB0BS93()
  XP1REC.XSECD = AB0BM003.XSECD;
  AB0BW00.AB0BWSYY = AB0BM003.XSNYR;

  if (AB0BW00.AB0BWSYY == 0 /* Year 2000*/
   || AB0BW00.AB0BWSYY < 70) /* Year 2001-2069*/
    AB0BW00.AB0BWSCC = 20; /* Set century to 20th*/
  else
    AB0BW00.AB0BWSCC = 19; /* Set century to 19th*/
  end
  XP1REC.XSNYR = AB0BW00.AB0BWSYR;

      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  ABWREC.ABWIDX1 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX1 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX1] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX1] == XP1REC.XSNYR
     && YSNTBL.XGPCD[ABWIDX1] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX1] == "01")
      return; /* return*/
    else
      if (YSNTBL.XGPCD[ABWIDX1] != "99")
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      else
        ABWREC.ABWIDX1 = 9999; /* END OF TABLE*/
      end
    end
  end

  AB0BM003.XXXMODID = "S93"; /* Process number*/
  converseLib.validationFailed(71);
                                   /* Season code missing or invalid*/
  set AB0BM003.XSNYR cursor, bold; /* Position cursor*/

  if (AB0BM003.XSECD == " ") /* Map Season Code not entered*/
    AB0BM003.XXXMODID = "S93"; /* Process number*/
    converseLib.validationFailed(16);
                                   /* Season code missing or invalid*/
    set AB0BM003.XSECD cursor, bold; /* Position cursor*/
  end

end // end AB0BS93

// validate season/year buy mo
Function AB0BS94()
  AB0BW00.AB0BMBMM = AB0BM003.AB0BMBMM;
  AB0BW00.AB0BMBYY = AB0BM003.AB0BMBYY;

   /* ----------------Y2K OUT BEGIN---------------------*/
   /*  */
   /* IF AB0BW00.AB0BWBMY EQ '0000';      /* buy month eq    spaces*/
   /*  */
   /* ----------------Y2K OUT END-----------------------*/
   /* ----------------Y2K IN BEGIN----------------------*/
   /*  */
  if (AB0BW00.AB0BMBMM > 00)
    if (AB0BW00.AB0BMBYY > 60)
      AB0BW00.AB0BMBCC = 19;
    else
      AB0BW00.AB0BMBCC = 20;
    end
  else
    AB0BW00.AB0BMBCC = 00;
  end

  if (AB0BW00.AB0BMBMM == "00")
    /*  */
    /* -----------------Y2K IN END-----------------------*/
    return; /* Return to calling process*/
  end

  AB0BW00.AB3BUYMO = AB0BW00.AB0BWBMN;
  XP1REC.AB3BUYMO = AB0BW00.AB3BUYMO;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  XSABSMO(); /* Standard XGA pop-up module*/

  if (XP1REC.XP1ERRFL == "1") /* Invalid buy month*/
    set AB0BM003.AB0BMBMM cursor, bold; /* Highlight field*/
    set AB0BM003.AB0BMBYY bold; /* Highlight field*/
    converseLib.validationFailed(34); /* Indicate error message*/
    AB0BM003.XXXMODID = "S94"; /* Process number*/

  else

    if (XP1REC.XP1ERRFL == "2") /* Invalid season/year*/
      set AB0BM003.XSNYR cursor, bold; /* Highlight field*/
      set AB0BM003.XSECD bold; /* Highlight field*/
      converseLib.validationFailed(71); /* Indicate error message*/
      AB0BM003.XXXMODID = "S94"; /* Process number*/
    end
  end

end // end AB0BS94

// validate scheduler code
Function AB0BS95()
  if (AB0BM003.XXXUSER == "?") /* Pop-up window requested*/
    set AB0BM003.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    AB0BM003.XXXMODID = "S95 "; /* Process number*/
    return; /* Return to calling process*/
  end

   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/

  if (AB0BM003.XXXUSER == " ") /* If no scheduler entered*/
    XP1REC.XXXUSER = " ";
    AB0BM001.XXXUSER = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XXXUSER = AB0BM003.XXXUSER;
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    set AB0BM003.XXXUSER cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    AB0BM003.XXXMODID = "S95 "; /* Process number*/
    return; /* Return to calling process*/
  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/
      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/
    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      end

    end

  end

end // end AB0BS95

// get short style name
Function AB0BS96()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
  AB0BS82(); /* open cursor*/
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0BM003.SY1SSTNM[ABWIXM] = PG2REC.SY1SSTNM;
      AB0BS84(); /* close cursor*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0BM003.SY1SSTNM[ABWIXM] = " "; /* Space out desc*/
      AB0BS84(); /* close cursor*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "S96 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS78"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0BS84(); /* close cursor*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BS96

// insert vbplan row
Function AB0BS97()
   /* *************************************************************/
   /* *****    I N S E R T     B U Y _ P L A N     R O W     ******/
   /* *****                                                  ******/
   /* ***** this process will INSERT ONE BUY_PLAN ROW.       ******/
   /* *************************************************************/

  AB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AB4REC.ZZZCHGCT = 0;

  try
    call "IO3570" ("A ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S97 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS97"; /* Error location*/
  TA1REC.TA1LOC = "INSERT NEW B-PLAN ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0BS97

// get first offer date
Function AB0BS98()
  set AF2REC empty;
  AF2REC.SY1STNBR = AB0BW01.SY1STNBR[AB0BWAX2];
  AF2REC.XDVCD = AB0BW01.XDVCD[AB0BWAX2];
  AF2REC.XDMCD = AB0BW01.XDMCD[AB0BWAX2];
  AF2REC.XSECD = AB0BW01.XSECD[AB0BWAX2];
  AF2REC.XSNYR = AB0BW01.XSNYR[AB0BWAX2];

   /* move default value for owner group*/
  AF2REC.XOWCD = 00;

   /* *************************************************************/
   /* *****   SELECT UNIQUE   D A C A S T . V A F S T Y 0 1  ******/
   /* *************************************************************/

  try
    call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      if (AF2REC.AF2SFODT == 0)
        AB0BM003.AB0BMFOD[ABWIXM] = AF2REC.AF2SFODT;
      else

        if (AF2REC.AF2SFODT < 20000000)
          AB0BM003.AB0BMFOD[ABWIXM] = AF2REC.AF2SFODT - 19000000;
        else
          AB0BM003.AB0BMFOD[ABWIXM] = AF2REC.AF2SFODT - 20000000;
        end

      end

      return; /* return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      AB0BM003.AB0BMFOD[ABWIXM] = 0;
      return; /* return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "S98 "; /* Process number*/
  AB0BM002.XXXMODID = "S98 "; /* Process number*/
  AB0BM003.XXXMODID = "S98 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS98"; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE VAFSTY01 TABLE ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  ABWREC.ABWSWR = "N";
  exit stack; /* Return to previous process*/


end // end AB0BS98

// validate blank style nbr
Function AB0BSA0()

   /* *===================================**/
   /* *  Select exist from DPRODG.VSYCLR01**/
   /* *===================================**/

  try
    call "IO3120" ("E2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(101);
      AB0BM001.XXXMODID = "SA0";
      AB0BM002.XXXMODID = "SA0";
      AB0BM003.XXXMODID = "SA0";
      return; /* Return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "SA0 "; /* Process number*/
  AB0BM002.XXXMODID = "SA0 "; /* Process number*/
  AB0BM003.XXXMODID = "SA0 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BSA0"; /* Error location*/
  TA1REC.TA1LOC = "SELECT EXIST";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0BSA0

// select set blank sty nbr
Function AB0BSA1()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("S4", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM001.XXXMODID = "SA1 "; /* Process number*/
  AB0BM002.XXXMODID = "SA1 "; /* Process number*/
  AB0BM003.XXXMODID = "SA1 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BSA1"; /* Error location*/
  TA1REC.TA1LOC = "SELECT BLANK ROW";
  TA1REC.TA1MAP = "AB0BM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0BSA1

// fetch next finished good sty
Function AB0BSA2()

  try
    call "IO3120" ("N4", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0BM003.XXXMODID = "SA2 "; /* Process number*/
  AB0BM002.XXXMODID = "SA2 "; /* Process number*/
  AB0BM001.XXXMODID = "SA2 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BS78"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0BM003"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0BS84(); /* close cursor*/
  exit stack; /* Exit to redisplay map*/

end // end AB0BSA2

// close cursor VSYCLR01
Function AB0BSA3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C4", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AB0BM003.XXXMODID = "SA3 "; /* Process number*/
  AB0BM002.XXXMODID = "SA3 "; /* Process number*/
  AB0BM001.XXXMODID = "SA3 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0BSA3"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AB0BM003"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AB0BSA3

Record AB0BW00 type basicRecord
  10 AB0BWAPG AB0BWAPG ; 
  10 AB0BWAIX AB0BWAIX ; 
  10 AB0BWAX2 AB0BWAX2 ; 
  10 AB0BWBIX AB0BWBIX ; 
  10 AB0BWFGI AB0BWFGI ; 
  10 AB0BWSPG AB0BWSPG ; 
  10 AB0BWLCT AB0BWLCT ; 
  10 AB0BWLFT AB0BWLFT ; 
  10 AB0BWKQT AB0BWKQT ; 
  10 AB0BWQT2 AB0BWQT2 ; 
  10 AB0BWPNB AB0BWPNB ; 
  10 AB0BWPTD AB0BWPTD ; 
  10 AB0BWFMS AB0BWFMS ; 
  10 AB0BWKCS AB0BWKCS ; 
  10 AB0BWDCS AB0BWDCS ; 
  10 AB0BWUSW AB0BWUSW ; 
  10 AB0BWMSW AB0BWMSW ; 
  10 AB0BWNMS AB0BWNMS ; 
  10 AB0BWNFF AB0BWNFF ; 
  10 AB0BWB1S AB0BWB1S ; 
  10 AB0BWB2S AB0BWB2S ; 
  10 AB0BWB3S AB0BWB3S ; 
  10 XDVCD XDVCD ; 
  10 XDVABRV XDVABRV ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 AB0BMBST AB0BMBST ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 AB0BWSYR AB0BWSYR ; 
    15 AB0BWSCC AB0BWSCC ; 
    15 AB0BWSYY AB0BWSYY ; 
  10 AB3BUYMO AB3BUYMO ; 
  10 AB0BWBMN AB0BWBMN ; 
    15 AB0BWBMY AB0BWBMY ; 
      20 AB0BMBCC AB0BMBCC ; 
      20 AB0BMBYY AB0BMBYY ; 
      20 AB0BMBMM AB0BMBMM ; 
  10 AB0BWSBD AB0BWSBD ; 
  10 AB0BWATR AB0BWATR [10] ; 
  10 AB0BWFGS AB0BWFGS [200] ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XOWABRV XOWABRV ; 
  10 AB0BW-END-DATE AB0BW-END-DATE ; 
    15 AB0BW-END-CC AB0BW-END-CC ; 
    15 AB0BW-END-YY AB0BW-END-YY ; 
    15 AB0BW-END-MM AB0BW-END-MM ; 
  10 AB0BW-BEG-DATE AB0BW-BEG-DATE ; 
    15 AB0BW-BEG-CC AB0BW-BEG-CC ; 
    15 AB0BW-BEG-YY AB0BW-BEG-YY ; 
    15 AB0BW-BEG-MM AB0BW-BEG-MM ; 
  10 AB0BW-NBR-OF-MONTHS AB0BW-NBR-OF-MONTHS ; 
end // end AB0BW00

//*** RECORD=AB0BW01 ****
// ************************************************************
// This record holds the data for creating the maps for AB0B.
// It has an image of ab2rec (absty) and selected data from
// ab4rec (bplan).
// 
// DATE CREATED:        09-24-90
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 09-24-90  LREIN      INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AB0BW01 type basicRecord
  5 AB0BWPNB AB0BWPNB [425] ; 
  5 AB2GROUP AB2GROUP [425] ; 
    10 AB2KEY AB2KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 XPCCD XPCCD ; 
      15 XPLCD XPLCD ; 
      15 XPRCD XPRCD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQTCD1 XQTCD1 ; 
    10 XQTCD2 XQTCD2 ; 
    10 YQT-QOTA-CAT-CD YQT-QOTA-CAT-CD ; 
    10 FY1FRGN FY1FRGN ; 
    10 FY6FOCD FY6FOCD ; 
    10 AB6BKFNI AB6BKFNI ; 
    10 AB2BYQTY AB2BYQTY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end AB0BW01

//*** RECORD=AB0BW02 ****
// ************************************************************
// This record is used for formatting the maps and updating
// buy plan data in AB0B.  It is used for two dimensional sub-
// scripting, and it contains selected data from the buy plan
// 
// DATE CREATED:        09-24-90
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 09-24-90  LREIN      INITIAL RECORD CREATION
// 
// ***********************
Record AB0BW02 type basicRecord
  5 AB0BW02R AB0BW02R ; 
    10 AB0BWBGP AB0BWBGP [7] ; 
      15 AB3BUYMO AB3BUYMO ; 
      15 AB3BUYST AB3BUYST ; 
      15 AB3BYSDT AB3BYSDT ; 
      15 AB4BQCFL AB4BQCFL ; 
      15 AB4SMBQT AB4SMBQT ; 
      15 XOWCD XOWCD ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AB0BW02

//*** RECORD=AB0BW03 ****
// ************************************************************
// This record holds the page start absty key
// 
// DATE CREATED:        09-26-90
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 09-26-90  LREIN      INITIAL RECORD CREATION
// 
// ***********************
Record AB0BW03 type basicRecord
  5 * char(50) ; 
    10 AB2KEY AB2KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 XPCCD XPCCD ; 
      15 XPLCD XPLCD ; 
      15 XPRCD XPRCD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQTCD XQTCD [2] ; 
    10 FY1FRGN FY1FRGN ; 
    10 FY6FOCD FY6FOCD ; 
end // end AB0BW03

//*** RECORD=AB0BW04 ****
//                        A B 0 B W 0 4
// 
// This record contains the internal table of values which
// match the values on the map for ab0bm001.
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 11/21/89  G Gilray   INITIAL RECORD CREATION
// 
// ***********************
Record AB0BW04 type basicRecord
  5 AB0BWGP4 AB0BWGP4 ; 
    10 AB0BWIDX AB0BWIDX ; 
    10 AB0BWMXM AB0BWMXM ; 
    10 AB0BWFOB AB0BWFOB ; 
      15 AB0BWYER AB0BWYER ; 
        20 AB0BWBCC AB0BWBCC ; 
        20 AB0BWBYY AB0BWBYY ; 
      15 AB0BWBMM AB0BWBMM ; 
      15 AB0BWBDD AB0BWBDD ; 
    10 AB0BWFOX AB0BWFOX ; 
    10 AB0BWBTL AB0BWBTL [7] ; 
      15 AB0BWBMO AB0BWBMO ; 
        20 AB0BWCCC AB0BWCCC ; 
        20 AB0BWYYY AB0BWYYY ; 
        20 AB0BWBYM AB0BWBYM ; 
      15 AB0BWCMO AB0BWCMO ; 
        20 AB0BWCMM AB0BWCMM ; 
        20 AB0BWCSL AB0BWCSL ; 
        20 AB0BWCYY AB0BWCYY ; 
    10 AB0BW-BEG-DATE AB0BW-BEG-DATE ; 
      15 AB0BW-BEG-CC AB0BW-BEG-CC ; 
      15 AB0BW-BEG-YY AB0BW-BEG-YY ; 
      15 AB0BW-BEG-MM AB0BW-BEG-MM ; 
    10 AB0BWMPD AB0BWMPD [11] ; 
end // end AB0BW04

//*** RECORD=AB0BW05 ****
// ************************************************************
// *****                  A B 0 B W 0 5                   *****
// *****                                                  *****
// ***** This record is a redefines of a field in AB0BW04 *****
// ***** so that a 2-dimensional array can be created.    *****
// ***** This record descibes all the data used on each   *****
// ***** line of maps AB0BM001 & AB0BM005.                *****
// *****                                                  *****
// *****     M A I N T E N A N C E     H I S T O R Y      *****
// *****     ---------------------------------------      *****
// *****                                                  *****
// *****   DATE    NAME          COMMENT                  *****
// ***** --------  ------------  ------------------------ *****
// ***** 11/28/89  G Gilray      Initial record creation. *****
// ***** 07/18/90  E Smith       Add PG1SC4CD.            *****
// *****                                                  *****
// ************************************************************
// ***********************
Record AB0BW05 type basicRecord
  5 AB0BWMPD AB0BWMPD ; 
    10 AB4GROUP AB4GROUP [7] ; 
      15 AB4KEY AB4KEY ; 
        20 SY1STNBR SY1STNBR ; 
        20 XDMCD XDMCD ; 
        20 XOWCD XOWCD ; 
        20 XWHCD XWHCD ; 
        20 XDVCD XDVCD ; 
        20 XSECD XSECD ; 
        20 XSNYR XSNYR ; 
        20 FY1FCTYC FY1FCTYC ; 
        20 PC4ORTYP PC4ORTYP ; 
        20 PC2CUXID PC2CUXID ; 
        20 AB3BUYMO AB3BUYMO ; 
      15 AB3BUYST AB3BUYST ; 
      15 AB3BYSDT AB3BYSDT ; 
      15 AB4BQCFL AB4BQCFL ; 
      15 AB4SMBQT AB4SMBQT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 FY1FRGN FY1FRGN ; 
    10 XXXUSER XXXUSER ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 AB0BWTTL AB0BWTTL ; 
    10 AB0BWBBY AB0BWBBY ; 
    10 AB0BWBTO AB0BWBTO ; 
    10 XQTCD XQTCD [2] ; 
    10 XPCCD XPCCD ; 
    10 SY1BSTNB SY1BSTNB ; 
end // end AB0BW05

//*** RECORD=AB0BW06 ****
// ************************************************************
// This record holds the page end absty key
// 
// DATE CREATED:        09-26-90
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 09-26-90  LREIN      INITIAL RECORD CREATION
// 
// ***********************
Record AB0BW06 type basicRecord
  5 * char(50) ; 
    10 AB2KEY AB2KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 XPCCD XPCCD ; 
      15 XPLCD XPLCD ; 
      15 XPRCD XPRCD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XGACD XGACD ; 
    10 XSUCD XSUCD ; 
    10 XQTCD XQTCD [2] ; 
    10 FY1FRGN FY1FRGN ; 
    10 FY6FOCD FY6FOCD ; 
end // end AB0BW06

//*** RECORD=AB0BW07 ****
// ab0b storage for first buy plan row per absty key
// ***********************
Record AB0BW07 type basicRecord
  10 AB0BWBG AB0BWBG [425] ; 
end // end AB0BW07

//*** RECORD=AB0BW08 ****
// ab0b storage for second buy plan row per absty key
// ***********************
Record AB0BW08 type basicRecord
  10 AB0BWBG AB0BWBG [425] ; 
end // end AB0BW08

//*** RECORD=AB0BW09 ****
// ab0b storage for third buy plan row per absty key
// ***********************
Record AB0BW09 type basicRecord
  10 AB0BWBG AB0BWBG [425] ; 
end // end AB0BW09

//*** RECORD=AB0BW99 ****
// ************************************************************
// This record is used to pass the selection criteria between
// AB0B on an S4 or S5 call and IO3560, the absty iomod.
// 
// DATE CREATED:  09-25-90
// 
// MAINTENANCE LOG:
// 
//   DATE      INIT   COMMENTS
// --------   ------  -----------------------------------------
// 09-25-90   LREIN   Initial creation
// ***********************
Record AB0BW99 type basicRecord
  5 AB0BWGP9 AB0BWGP9 ; 
    10 AB0BWIOT AB0BWIOT ; 
    10 AB0BWLSY AB0BWLSY ; 
    10 AB0BWHSY AB0BWHSY ; 
    10 AB0BWLFC AB0BWLFC ; 
    10 AB0BWHFC AB0BWHFC ; 
    10 AB0BWLPT AB0BWLPT ; 
    10 AB0BWHPT AB0BWHPT ; 
    10 AB0BWLXR AB0BWLXR ; 
    10 AB0BWHXR AB0BWHXR ; 
    10 AB0BWLSC AB0BWLSC ; 
    10 AB0BWHSC AB0BWHSC ; 
    10 AB0BWLGA AB0BWLGA ; 
    10 AB0BWHGA AB0BWHGA ; 
    10 AB0BWLPC AB0BWLPC ; 
    10 AB0BWHPC AB0BWHPC ; 
    10 AB0BWLQT AB0BWLQT ; 
    10 AB0BWHQT AB0BWHQT ; 
    10 AB0BWLFO AB0BWLFO ; 
    10 AB0BWHFO AB0BWHFO ; 
    10 AB0BWLDV AB0BWLDV ; 
    10 AB0BWHDV AB0BWHDV ; 
end // end AB0BW99

// buy century
DataItem AB0BMBCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy month
DataItem AB0BMBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank style name
DataItem AB0BMBST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy year
DataItem AB0BMBYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0BW-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date to display
DataItem AB0BW-BEG-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning month to display
DataItem AB0BW-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning year to display
DataItem AB0BW-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0BW-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date to display
DataItem AB0BW-END-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending month to display
DataItem AB0BW-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending year to display
DataItem AB0BW-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning month to display
DataItem AB0BW-NBR-OF-MONTHS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0BW02R char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page array index
DataItem AB0BWAIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max occurences page array
DataItem AB0BWAPG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dark attribute ind
DataItem AB0BWATR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page array index 2
DataItem AB0BWAX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row 1 exists this key sw
DataItem AB0BWB1S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row 2 exists this key sw
DataItem AB0BWB2S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row 3 exists this key sw
DataItem AB0BWB3S char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Balance-to-Buy not 'l'
DataItem AB0BWBBY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-CENTURY
DataItem AB0BWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-DAY
DataItem AB0BWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dabuy.vbplan image for line
DataItem AB0BWBG char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work areas for buy groups
DataItem AB0BWBGP char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy plan array index
DataItem AB0BWBIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-MONTH
DataItem AB0BWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month yymm
DataItem AB0BWBMN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric buy-month Value
DataItem AB0BWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month alpha yymm
DataItem AB0BWBMY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TABLE OF BUY-MONTHS in SEASON
DataItem AB0BWBTL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL Forecast(ALL MONTHS)
DataItem AB0BWBTO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric Buy Month
DataItem AB0BWBYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-YEAR
DataItem AB0BWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0BWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Character BUY-MONTH
DataItem AB0BWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character BUY-MONTH
DataItem AB0BWCMO char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash '/' (used for display)
DataItem AB0BWCSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character BUY-YEAR
DataItem AB0BWCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem AB0BWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// finished goods array index
DataItem AB0BWFGI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// finished good style nbr
DataItem AB0BWFGS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map switch
DataItem AB0BWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FCTY-ORD-BEGIN-DT
DataItem AB0BWFOB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-END-DT
DataItem AB0BWFOX num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0BWGP4 char(4437)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0BWGP9 char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high division
DataItem AB0BWHDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high fACTORY nbr
DataItem AB0BWHFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high field office
DataItem AB0BWHFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high gender age code
DataItem AB0BWHGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high category
DataItem AB0BWHPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high po type
DataItem AB0BWHPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high quota type 1
DataItem AB0BWHQT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high scheduler code
DataItem AB0BWHSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high style nbr
DataItem AB0BWHSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high cust xref
DataItem AB0BWHXR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index used for manipulating
DataItem AB0BWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io task
DataItem AB0BWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key changed switch
DataItem AB0BWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work quantity
DataItem AB0BWKQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line count
DataItem AB0BWLCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low division
DataItem AB0BWLDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low fACTORY nbr
DataItem AB0BWLFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low field office
DataItem AB0BWLFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lines left on screen
DataItem AB0BWLFT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low gender age code
DataItem AB0BWLGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low category
DataItem AB0BWLPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low po type
DataItem AB0BWLPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low quota type 1
DataItem AB0BWLQT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low scheduler code
DataItem AB0BWLSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low style nbr
DataItem AB0BWLSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low cust xref
DataItem AB0BWLXR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Duplicate data as on Map line
DataItem AB0BWMPD char(394)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// m, l exists switch
DataItem AB0BWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max Buy-Months in Season
DataItem AB0BWMXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new absty row found sw
DataItem AB0BWNFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// non m,l exists switch
DataItem AB0BWNMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen page of this array elem
DataItem AB0BWPNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page to display
DataItem AB0BWPTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work quantity
DataItem AB0BWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season buy date yymm
DataItem AB0BWSBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work season cc
DataItem AB0BWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start page
DataItem AB0BWSPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work season year
DataItem AB0BWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work season yy
DataItem AB0BWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Bought (status 'l')
DataItem AB0BWTTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update switch
DataItem AB0BWUSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FCTY-ORD-BEGIN-CCYY
DataItem AB0BWYER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric Buy Year
DataItem AB0BWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

