package ab06;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AB06 ****
// This application allows the user to submit a batch job which
// will download the Size Break data to mapper
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06-05-91  lrein   New application.
// Y2KFIX   12-??-97  DBETTR  RECOMPILE TO PICK  UP NEW IO
//                            MODULE. (SEE PROC XPAB020.)
// *********************
Program AB06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB06W01 AB06W01; // record
  AB06W04 AB06W04; // record
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB06T01; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AB06M.AB06M001,  // forms
      AB06M.TA0PM001, 
      AB06M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/

    set AB06M001 initial; /* Initialize map output area*/
    set AB06W01 empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA6REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AB06"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/

                     /* (Set map item values)*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AB06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

                     /* (Process COMMAREA items:)*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AB06M001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AB06M001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end



    goto AB06001; /* Converse the main process*/


    AB06001: AB06001();

    goto AB06001; /* Converse the main process*/

  end // end main
end // end AB06

// Application main process
Function AB06001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* -- Display the first (and only) map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/

  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to abwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/


  if (ABWREC.ABWFIRST == " ") /* First time through*/

    if (XP1REC.XP1MNO == 0) /* No errors found*/
      ABWREC.ABWPRCSN = "001 "; /* Process number*/
      AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    end

  end


   /* *===============**/
   /* *  Display map  **/
   /* *===============**/

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB06200(); /* Format and display the map*/

  AB06300(); /* Check attention identifier*/

  AB06400(); /* Reset fields to normal intensity*/

  AB06600(); /* Process valid input request*/



end // end AB06001

// Format and display the map
Function AB06200()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/


  if (XP1REC.XP1MNO != 0) /* Error message to display*/
    set AB06M001 alarm; /* Indicate sound alarm*/
  end

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move message no. for display*/

  XP1REC.XP1MNO = 0; /* Reset work message area*/



  converse AB06M001 ;

  ABWREC.ABWFIRST = "N"; /* Set first time switch off*/


end // end AB06200

// Check attention identifier
Function AB06300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (AB06M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB06M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB06M001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end

    set AB06M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB06M001.CAITEM > " ") /* Application data was entered*/
    set AB06M001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0MM001"; /* Appl find code*/
    end

    XSABS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end
end // end AB06300

// Reset highlighted fields
Function AB06400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set AB06M001.CATOAP initialAttributes; /* TO application*/
  set AB06M001.CAITEM initialAttributes; /* Application data*/


end // end AB06400

// Process valid input request
Function AB06600()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 79) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set AB06W04 empty;
  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AB06610(); /* find region*/

  if (TA3REC.TA3RGNID == "03")
    AB06W01.AB06WIXT = 1;
  else
    if ("/*EOF" in AB06T01.TARJCL)
      AB06W01.AB06WIXT = sysVar.arrayIndex;
      AB06W01.AB06WIXT = AB06W01.AB06WIXT + 1;
      AB06W04.AB06WSLH = "//"; /* // to indicate jcl*/
      AB06W04.AB06WNTF = "NOTIFY="; /* notify jcl keyword*/
      AB06W04.TA3USRID = TA3REC.TA3USRID; /* logon id*/
    else
      AB06W01.AB06WIXT = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AB06W01.AB06WIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (AB06T01.TARTYPE[AB06WIXT] == "N") /* notify statement*/
      TA6REC.TARJCL[TA6INDEX] = AB06W04.AB06WJCL; /* jcl*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
    else
      TA6REC.TARJCL[TA6INDEX] = AB06T01.TARJCL[AB06WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = AB06T01.TARTYPE[AB06WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AB06T01.TARJCL[AB06WIXT] == "/*EOF") /* End of table*/
      AB06W01.AB06WIXT = 0; /* Indicate end of table*/
    else
      AB06W01.AB06WIXT = AB06W01.AB06WIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AB06620(); /* Submit the JCL*/


end // end AB06600

// determine OS region
Function AB06610()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ALLFLDS";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    ABWREC.ABWPRCSN = "610"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = ABWREC.ABWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end

  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    ABWREC.ABWPRCSN = "610"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = ABWREC.ABWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end



end // end AB06610

// Submit Job/Select Printer
Function AB06620()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "620 "; /* Process number*/
  AB06M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AB06620

//*** RECORD=AB06W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB06W01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AB06WSWS AB06WSWS ; 
  10 AB06WBAL AB06WBAL ; 
  10 AB06WXSA AB06WXSA ; 
    15 AB06WXSS AB06WXSS ; 
    15 AB06WXYR AB06WXYR ; 
  10 AB06WIXT AB06WIXT ; 
  10 AB06WXSY AB06WXSY ; 
end // end AB06W01

//*** RECORD=AB06W04 ****
// ********************************
// Application Working Storage (4).
// ********************************
// ***********************
Record AB06W04 type basicRecord
  10 AB06WJCL AB06WJCL ; 
    15 AB06WSLH AB06WSLH ; 
    15 * char(13) ; // Job submitted switch
    15 AB06WNTF AB06WNTF ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; // XSN wk season cd
end // end AB06W04

DataItem AB06WBAL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AB06WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job Control Language statement
DataItem AB06WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB06WNTF char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem AB06WSLH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AB06WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB06WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB06WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB06WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB06WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

