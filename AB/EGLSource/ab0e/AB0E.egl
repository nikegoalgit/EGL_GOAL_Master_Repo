package ab0e;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0E ****
// this application acts as the add function for AB0B, buy plan
// maint.
//   DATE    NAME   DESCRIPTION OF CHANGE
// --------  ------ ------------------------------------------
// 06-24-93  LREIN  Added PO type 'AD'
// 07-08-93  LREIN  AB0229 when adding style with cust xref,
//                  don't assign a whse cd
// 09-23-93  LREIN  Check for dup bplan or absty row each time
//                  to keep from adding dups
// 09-27-93  LREIN  Clear screen when table updated, only get
//                  in from AB0B, not allow entry if season bad
// 12-17-93  sbabco Change le to lt in ab0e-105. Correct abend.
//  1-12-94  KJOHN2 Chnged LT back to LE, corrected month logic
//                  in AB0E100 so idx = nbr months.
//  5-03-96  kj     fix > 7 month prob
// 04-09-97  sames  corrected division code
// Y2KFIX   01/27/98  KSUMME  Y2K MODIFICATIONS MADE TO:
//     Y2K TABLE CHANGES: AB0EW01, AB0EW04, AB0EW05, AB0E-105,
//                        AB0E100, AB0E200, AB0EM001, AB0E300
//       GLOBAL CHNG: ABWREC, AB3REC, AB4REC, XP1REC, XPAB020
// *********************
Program AB0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0EW01 AB0EW01; // record
  AB0EW02 AB0EW02; // record
  AB0EW03 AB0EW03; // record
  AB0EW04 AB0EW04; // record
  AB0EW05 AB0EW05; // record
  AB0EW06 AB0EW06; // record
  AB0EW07 AB0EW07; // record
  AB0EW08 AB0EW08; // record
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  FY4REC FY4REC; // record
  FY6REC FY6REC; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XQTTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use AB0EM.AB0EM001,  // forms
      AB0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
    set AB0EW01 empty;
    set AB0EW02 empty;
    set AB0EW03 empty;
    set AB0EW04 empty;
    set AB0EW05 empty;
    set AB0EW06 empty;
    set AB0EW07 empty;
    set AB0EW08 empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set XX0XW01 empty;
    set ABWREC empty;
    set AB0EM001 initial;

    if (XP1REC.XSNYR > 0)
      AB0EM001.XSNYR = XP1REC.XSNYR;
      AB0EM001.XSECD = XP1REC.XSECD;
    end

    if (COMMAREA.CACLVL[2] == "Y") /* can look at all schedulers*/
      XP1REC.XXXUSER = " ";
    end

    if (XP1REC.XXXUSER != " ") /* an entry in workrec*/
      AB0EM001.XXXUSER = XP1REC.XXXUSER; /* last scheduler to screen*/
    else
      AB0EM001.XXXUSER = " "; /* sign on scheduler*/
    end

    if (XP1REC.ZZZSDT != 0 /* A Beg and End date range exists*/
     && XP1REC.ZZZCHGDT != 0)
      AB0EW01.AB0EW-BEG-DATE = XP1REC.ZZZSDT;
      AB0EM001.AB0EM-BEG-MM = AB0EW01.AB0EW-BEG-MM;
      AB0EM001.AB0EM-BEG-YY = AB0EW01.AB0EW-BEG-YY;
      AB0EW01.AB0EW-END-DATE = XP1REC.ZZZCHGDT;
      AB0EM001.AB0EM-END-MM = AB0EW01.AB0EW-END-MM;
      AB0EM001.AB0EM-END-YY = AB0EW01.AB0EW-END-YY;
    end

    move " " to AB0EM001.AB0EMDOS[1] for all;
    ABWREC.ABWMPMAX = sysVar.arrayIndex;
    goto AB0E001;
    AB0E001: AB0E001();
    goto AB0E001;
  end // end main
end // end AB0E

// Find Dates Between Beg & End
Function AB0E-105()
  set AB0EW04 empty; /* Initialize working storage*/

  AB0EW04.AB0EW-BEG-DATE = AB0EW01.AB0EW-BEG-DATE;
  AB0EW04.AB0EWIDX = 0; /* initialize index to zero*/

  while (AB0EW04.AB0EW-BEG-DATE <= AB0EW01.AB0EW-END-DATE)
    AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + 1;
   /* ---------------------Y2K IN BEGIN--------------------*/
   /*  */
    AB0EW04.AB0EWCCC[AB0EWIDX] = AB0EW04.AB0EW-BEG-CC;
   /*  */
   /* ---------------------Y2K IN END----------------------*/
    AB0EW04.AB0EWYYY[AB0EWIDX] = AB0EW04.AB0EW-BEG-YY;
    AB0EW04.AB0EWBYM[AB0EWIDX] = AB0EW04.AB0EW-BEG-MM;
    AB0EW04.AB0EWCYY[AB0EWIDX] = AB0EW04.AB0EW-BEG-YY;
    AB0EW04.AB0EWCMM[AB0EWIDX] = AB0EW04.AB0EW-BEG-MM;
    AB0EW04.AB0EWCSL[AB0EWIDX] = "/";

    if (AB0EW04.AB0EW-BEG-MM >= 12)
      AB0EW04.AB0EW-BEG-MM = 1;
   /* --------------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* AB0EW04.AB0EW-BEG-YY = AB0EW04.AB0EW-BEG-YY + 1;*/
   /*  */
   /* --------------------Y2K OUT END----------------------*/
   /* --------------------Y2K IN BEGIN--------------------*/
   /*  */
      AB0EW04.AB0EW-BEG-CCYY = AB0EW04.AB0EW-BEG-CCYY + 1;
   /*  */
   /* --------------------Y2K IN END----------------------*/
    else
      AB0EW04.AB0EW-BEG-MM = AB0EW04.AB0EW-BEG-MM + 1;
    end

  end

   /* ----- set MAX-MONTHS field to correct value -----*/

  AB0EW04.AB0EWMXM = AB0EW04.AB0EWIDX;

  AB0E110();

end // end AB0E-105

// Driver process for 100 map
Function AB0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* PROCESSING UNDER ERROR CONDITIONS.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "AB0B"
   && COMMAREA.CAFROMAP != "AB0E")
    COMMAREA.CATOAP = "CANNOT FASTPATH TO AB0E";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
  end

  if (AB0EM001.AB0EM-BEG-MM != " " /* Beg & End dates passed from AB*/
   && AB0EM001.AB0EM-BEG-YY != " " 
   && AB0EM001.AB0EM-END-YY != " " 
   && AB0EM001.AB0EM-END-YY != " ")
    AB0E-105(); /* obtain dates between Beg and End*/
  else
    AB0E100(); /* obtain season dates*/
  end

  AB0E200(); /* Format and display the map*/

  AB0E300(); /* Check attention identifier*/

  AB0E400(); /* Reset fields to normal intensity*/

  AB0E500(); /* Verify the entered data*/

  AB0E600(); /* Process valid input request*/


end // end AB0E001

// Determine buy-months this seas
Function AB0E100()
   /* *************************************************************/
   /* ***** This process will determine the BUY-MONTHS for   ******/
   /* ***** the current season as defined in XP1REC.         ******/
   /* *************************************************************/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* *************************************************************/
   /* ***** Loop thru procedure until both XSE AND XSN values *****/
   /* ***** found on a single table row.                      *****/
   /* *************************************************************/

  ABWREC.ABWIDX5 = 0; /* SET SEASON INDEX TO 0*/
  ABWREC.ABWIDX1 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX1 != 9999
   && ABWREC.ABWIDX1 != 0) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX1] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX1] == XP1REC.XSNYR
     && YSNTBL.XGPCD[ABWIDX1] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX1] == "01")
      ABWREC.ABWIDX5 = ABWREC.ABWIDX1; /* SET SEASON INDEX*/
      ABWREC.ABWIDX1 = 0; /* END SEARCH*/
    else
      if (YSNTBL.XGPCD[ABWIDX1] != "99")
        ABWREC.ABWIDX1 = ABWIDX1 + 1;
      else
        ABWREC.ABWIDX1 = 9999; /* END OF TABLE*/
        AB0EM001.XXXPRCNM = "AB0E100"; /* Process number*/
        converseLib.validationFailed(71); /* Sesn/year not in table*/
        set AB0EM001.XSNYR cursor;
        set AB0EM001.XSECD cursor, bold;
        exit stack;
      end
    end
  end


  set AB0EW04 empty; /* Initialize working storage*/
  set AB0EW05 empty; /* Initialize working storage*/
   /* ********** move values to ab0ew04 **********/
  AB0EW04.AB0EWFOB = YSNTBL.XSNFOBDT[ABWIDX5];
  AB0EW04.AB0EWFOX = YSNTBL.XSNFOXDT[ABWIDX5];
  AB0EW04.AB0EWIDX = 0; /* initialize index*/
  while (AB0EW04.AB0EWFOB <= AB0EW04.AB0EWFOX
   && AB0EW04.AB0EWIDX <= 6)
    AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + 1;
   /* ---------------------Y2K IN BEGIN-------------------*/
   /*  */
    AB0EW04.AB0EWCCC[AB0EWIDX] = AB0EW04.AB0EWBCC;
   /*  */
   /* ---------------------Y2K IN END---------------------*/
    AB0EW04.AB0EWYYY[AB0EWIDX] = AB0EW04.AB0EWBYY;
    AB0EW04.AB0EWBYM[AB0EWIDX] = AB0EW04.AB0EWBMM;
    AB0EW04.AB0EWCYY[AB0EWIDX] = AB0EW04.AB0EWBYY;
    AB0EW04.AB0EWCMM[AB0EWIDX] = AB0EW04.AB0EWBMM;
    AB0EW04.AB0EWCSL[AB0EWIDX] = "/";
    /* ----- increment BUY-MONTH by one -----*/
    if (AB0EW04.AB0EWBMM >= 12)
      AB0EW04.AB0EWBMM = 1;
      AB0EW04.AB0EWYER = AB0EW04.AB0EWYER + 1;
    else
      AB0EW04.AB0EWBMM = AB0EW04.AB0EWBMM + 1;
    end
  end
   /* ----- set MAX-MONTHS field to correct value -----*/
  AB0EW04.AB0EWMXM = AB0EW04.AB0EWIDX;

  AB0E110(); /* Initialize BUY-MONTHS in ab0eW04*/

end // end AB0E100

// Initialise buy months
Function AB0E110()

   /* *************************************************************/
   /* ***** A B 0 B 1 1 0  -  I N I T I A L I Z E     B U Y  ******/
   /* *****      M O N T H S     I N     A B 0 E W 0 4       ******/
   /* *****                                                  ******/
   /* ***** this statement group will move the correct BUY-  ******/
   /* ***** MONTHS to the array within ab0eW05 and then to   ******/
   /* ***** ab0eW04.                                         ******/
   /* *************************************************************/

  set AB0EW05 empty; /* Initialize record*/

  AB0EW04.AB0EWIDX = 1; /* Initialize index*/
  while (AB0EW04.AB0EWIDX <= AB0EW04.AB0EWMXM
   && AB0EW04.AB0EWIDX <= 7)
    AB0EW05.AB3BUYMO[AB0EWIDX] = AB0EW04.AB0EWBMO[AB0EWIDX];
    AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + 1; /* Increment index*/
  end

  move AB0EW05.AB0EWMPD to AB0EW04.AB0EWMPD[1] for all; /* Initialize ab0eW04 table*/

end // end AB0E110

// Format and display the map
Function AB0E200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  AB0EW04.AB0EWIDX = 1;
  while (AB0EW04.AB0EWIDX <= AB0EW04.AB0EWMXM)
    AB0EM001.AB0EMBYM[AB0EWIDX] = AB0EW04.AB0EWCMO[AB0EWIDX];
    AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + 1;
  end
   /* *************************************************************/
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0EM001 alarm; /* Indicate sound alarm*/
    ABWREC.ABWAPPL = "AB0E";
    AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process ID*/

    if (converseVar.validationMsgNum != 45)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end

  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || converseVar.validationMsgNum == 45
   /* OR ABWREC.ABWFIRST EQ ' ';     /* or*/
   /* first time through*/
  )                                    
    set AB0EM001 initial;
    AB0EW04.AB0EWIDX = 1;

    while (AB0EW04.AB0EWIDX <= AB0EW04.AB0EWMXM)
      AB0EM001.AB0EMBYM[AB0EWIDX] = AB0EW04.AB0EWCMO[AB0EWIDX];
      AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + 1;
    end

    AB0EM001.XXXUSER = XP1REC.XXXUSER;
    AB0EM001.XSECD = XP1REC.XSECD;
    AB0EM001.XSNYR = XP1REC.XSNYR;

    if (XP1REC.ZZZSDT != 0
     && XP1REC.ZZZCHGDT != 0)
      AB0EW01.AB0EW-BEG-DATE = XP1REC.ZZZSDT;
      AB0EM001.AB0EM-BEG-MM = AB0EW01.AB0EW-BEG-MM;
      AB0EM001.AB0EM-BEG-YY = AB0EW01.AB0EW-BEG-YY;
      AB0EW01.AB0EW-END-DATE = XP1REC.ZZZCHGDT;
      AB0EM001.AB0EM-END-MM = AB0EW01.AB0EW-END-MM;
      AB0EM001.AB0EM-END-YY = AB0EW01.AB0EW-END-YY;
    end

   /* -----------------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* F XP1REC.AB3BUYMO NE 0*/
   /* AND XP1REC.AB3BUYMO NE 9999;*/
   /*  */
   /* -----------------------Y2K OUT END---------------------*/
   /* -----------------------Y2K OUT BEGIN-------------------*/
   /*  */
    if (XP1REC.AB3BUYMO != 0
     && XP1REC.AB3BUYMO != 999999)
   /*  */
   /* -----------------------Y2K OUT END---------------------*/
      AB0EM001.AB0EMBMM = XP1REC.XP1CBYMM;
      AB0EM001.AB0EMBYY = XP1REC.XP1CBYYY;
    end

    AB0EM001.XGACD = XP1REC.XGACD;
    AB0EM001.XGAABRV = XP1REC.XGAABRV;
    AB0EM001.XPCCD = XP1REC.XPCCD;
    AB0EM001.XPCABRV = XP1REC.XPCABRV;
    AB0EM001.XSUCD = XP1REC.XSUCD;
    AB0EM001.XSUABRV = XP1REC.XSUABRV;
    AB0EM001.XQTCD = XP1REC.XQTCD;
    AB0EM001.FY1FCTYC = XP1REC.FY1FCTYC;
    AB0EM001.FY6FOCD = XP1REC.FY6FOCD;
    AB0EM001.FY6FOABR = XP1REC.FY6FOABR;
    AB0EM001.FY1FRGN = XP1REC.FY1FRGN;
    AB0EM001.SY1STNBR = XP1REC.SY1STNBR;
    AB0EM001.SY1SSTNM = XP1REC.SY1SSTNM;
    AB0EM001.PC4ORTYP = XP1REC.PC4ORTYP;
    AB0EM001.PC4ABRV = XP1REC.PC4ABRV;
    AB0EM001.XXXSTAT = XP1REC.XP1STAT;
    /* *******************************************/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/

      AB0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
      set AB0EM001.CAITEM modified; /* Set MDT on*/
      COMMAREA.CAITEM = " "; /* Clear application data*/

         /* END ;*/
    end

    AB0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  end
  if (converseVar.validationMsgNum == 0)
    ABWREC.ABWIXM = 1; /* Initialize index to 1*/
    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      if (AB0EM001.AB0EMSTY[ABWIXM] != " ") /* If line is NOT blank*/
        set AB0EM001.AB0EMDOS[ABWIXM] skip, invisible; /* protect field*/
        set AB0EM001.AB0EMFTY[ABWIXM] skip; /* protect field*/
        set AB0EM001.AB0EMSTY[ABWIXM] skip; /* protect field*/
        set AB0EM001.AB0EMSCD[ABWIXM] skip; /* protect field*/
        set AB0EM001.AB0EMPOT[ABWIXM] skip; /* protect field*/
        set AB0EM001.AB0EMCUS[ABWIXM] skip; /* protect field*/
        ABWREC.ABWIDX1 = ABWREC.ABWIXM - 1; /* calculate quantity*/
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 * 7; /* field nbr*/
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
        ABWREC.ABWIDX2 = ABWREC.ABWIDX1 + 6; /* determine end of loop*/
        ABWREC.ABWIDX3 = 1;
        while (ABWREC.ABWIDX1 <= ABWREC.ABWIDX2)
          if (AB0EW04.AB0EWCMO[ABWIDX3] > " ")
            set AB0EM001.AB0EMQTY[ABWIDX1] skip; /* protect field*/
          else
            set AB0EM001.AB0EMQTY[ABWIDX1] skip, invisible;
          end
          ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
          ABWREC.ABWIDX3 = ABWREC.ABWIDX3 + 1;
        end
      else
        set AB0EM001.AB0EMDOS[ABWIXM] skip, invisible; /* protect field*/
        set AB0EM001.AB0EMFTY[ABWIXM] normal; /* protect field*/
        set AB0EM001.AB0EMSCD[ABWIXM] normal; /* protect field*/
        set AB0EM001.AB0EMSTY[ABWIXM] normal; /* protect field*/
        set AB0EM001.AB0EMPOT[ABWIXM] normal; /* protect field*/
        set AB0EM001.AB0EMCUS[ABWIXM] normal; /* protect field*/
        ABWREC.ABWIDX1 = ABWREC.ABWIXM - 1; /* calculate quantity*/
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 * 7; /* field nbr*/
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
        ABWREC.ABWIDX2 = ABWREC.ABWIDX1 + 6; /* determine end of loop*/
        ABWREC.ABWIDX3 = 1;
        while (ABWREC.ABWIDX1 <= ABWREC.ABWIDX2)
          if (AB0EW04.AB0EWCMO[ABWIDX3] > " ")
            set AB0EM001.AB0EMQTY[ABWIDX1] normal; /* protect field*/
          else
            set AB0EM001.AB0EMQTY[ABWIDX1] skip, invisible;
          end
          ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
          ABWREC.ABWIDX3 = ABWREC.ABWIDX3 + 1;
        end
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end
  end

  if (converseVar.validationMsgNum == 71) /* invalid season*/
    ABWREC.ABWIXM = 1;

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
      set AB0EM001.AB0EMDOS[ABWIXM] skip, invisible;
      set AB0EM001.AB0EMFTY[ABWIXM] skip, invisible;
      set AB0EM001.AB0EMSTY[ABWIXM] skip, invisible;
      set AB0EM001.AB0EMSCD[ABWIXM] skip, invisible;
      set AB0EM001.AB0EMPOT[ABWIXM] skip, invisible;
      set AB0EM001.AB0EMCUS[ABWIXM] skip, invisible;
      set AB0EM001.XOWCD[ABWIXM] skip, invisible;
      ABWREC.ABWIDX1 = ABWREC.ABWIXM - 1;
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 * 7;
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      ABWREC.ABWIDX2 = ABWREC.ABWIDX1 + 6; /* end of loop*/

      while (ABWREC.ABWIDX1 <= ABWREC.ABWIDX2)
        set AB0EM001.AB0EMQTY[ABWIDX1] skip, invisible;
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    end

  end

   /* ----- reset all 'S' codes to 'A' codes -----*/
  ABWREC.ABWIXM = 1;
  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)
    if (AB0EW01.AB0EWDEL[ABWIXM] == "S")
      AB0EW01.AB0EWDEL[ABWIXM] = "A";
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end

  set AB0EM001.XXXUSER skip; /* reset field attributes*/
  set AB0EM001.XSECD skip; /* reset field attributes*/
  set AB0EM001.XSNYR skip; /* reset field attributes*/
  set AB0EM001.AB0EMBMM skip; /* reset field attributes*/
  set AB0EM001.AB0EMBYY skip; /* reset field attributes*/
  set AB0EM001.XGACD skip; /* reset field attributes*/
  set AB0EM001.XGAABRV skip; /* reset field attributes*/
  set AB0EM001.XPCCD skip; /* reset field attributes*/
  set AB0EM001.XPCABRV skip; /* reset field attributes*/
  set AB0EM001.XSUCD skip; /* reset field attributes*/
  set AB0EM001.XSUABRV skip; /* reset field attributes*/
  set AB0EM001.XQTCD skip; /* reset field attributes*/
  set AB0EM001.FY1FCTYC skip; /* reset field attributes*/
  set AB0EM001.FY6FOCD skip; /* reset field attributes*/
  set AB0EM001.FY6FOABR skip; /* reset field attributes*/
  set AB0EM001.FY1FRGN skip; /* reset field attributes*/
  set AB0EM001.SY1STNBR skip; /* reset field attributes*/
  set AB0EM001.SY1SSTNM skip; /* reset field attributes*/
  set AB0EM001.PC4ORTYP skip; /* reset field attributes*/
  set AB0EM001.PC4ABRV skip; /* reset field attributes*/
  set AB0EM001.XXXSTAT skip; /* reset field attributes*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    if (ABWREC.ABWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(ABWREC.ABWNMO);
    end /* Information message number*/
    set AB0EM001 alarm; /* Indicate sound alarm*/
  end
  AB0EM001.AB0EMPFK = "14:MAINT";
  set AB0EM001.AB0EMPFB skip, invisible;
  set AB0EM001.AB0EMPFM skip, invisible;
  ABWREC.ABWNMO = 0; /* Reset information message number*/

  if (AB0EM001.SY1STNBR != " ")
    AB0E210(); /* select set style row*/
    AB0E220(); /* get one style row*/
    AB0E230(); /* close set*/
  else
    XP1REC.SY1STYNM = " ";
    AB0EW01.SY1SSTNM = " ";
  end

  if (AB0EM001.FY1FCTYC != " ")
    AB0E240();
    AB0EM001.FY1FCTSN = AB0EW01.FY1FCTSN;
  else
    AB0EW01.FY1FCTSN = " ";
  end

  converse AB0EM001 ;


end // end AB0E200

// select set VSYCLR01
Function AB0E210()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/
  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0EM001.SY1STNBR; /* Style no.*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0EM001.XXXPRCNM = "AB0E210"; /* PROCESS NUMBER*/
  TA1REC.TA1PGMNM = "AB0E210"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AB0EM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AB0E210

// Get short style name
Function AB0E220()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0EM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0EW01.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0EM001.SY1SSTNM = " "; /* Space out desc*/
         /* SET AB0EM001.sy1stnbr CURSOR,BRIGHT; Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AB0EM001.XXXPRCNM = "AB0E220"; /* Process number*/
      return; /* Exit to calling rtn*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0EM001.XXXPRCNM = "AB0E220"; /* Process number*/
  TA1REC.TA1PGMNM = "AB0E220"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AB0EM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/

end // end AB0E220

// close cursor VSYCLR01
Function AB0E230()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AB0EM001.XXXPRCNM = "AB0E230 "; /* Process number*/
  TA1REC.TA1PGMNM = "AB0E230"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AB0EM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AB0E230

// get factory desc
Function AB0E240()
  if (AB0EM001.FY1FCTYC == " ") /* ab0em001 Field eq spaces*/
    AB0EW01.FY1FCTSN = " "; /* space out short name*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0EM001.FY1FCTYC; /* factory code*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0EW01.FY1FCTSN = FY1REC.FY1FCTSN;
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
         /* SET AB0EM001.AB0EMFTY CURSOR,BRIGHT; Highlight field*/
      AB0EM001.FY1FCTSN = " "; /* space screen description*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AB0EM001.XXXPRCNM = "ABOE240 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AB0EM001.XXXPRCNM = "AB0E240"; /* Process number*/
  TA1REC.TA1PGMNM = "AB0E240"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/

end // end AB0E240

// Check attention identifier
Function AB0E300()
   /* --------------------Y2K OUT BEGIN------------------*/
   /*  */
   /* IF XP1REC.AB3BUYMO EQ 9999;*/
   /*  */
   /* --------------------Y2K OUT END--------------------*/
   /* --------------------Y2K OUT BEGIN------------------*/
   /*  */
  if (XP1REC.AB3BUYMO == 999999)
   /*  */
   /* --------------------Y2K OUT END--------------------*/
    XP1REC.AB3BUYMO = 0;
  end

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AB0EM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AB0EM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = AB0EM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0EM001.CAITEM; /* Application data*/

      XSABS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AB0EM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/


    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "AB0F";
    XSABS01(); /* Exit to another application*/
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "AB0B";
    XSABS01(); /* Exit to another application*/
  end

  if (AB0EM001.XXXUSER == " ") /* reset xp1rec user*/
    XP1REC.PG1SC4CD = " "; /* for data selection on return*/
  end

   /* ******************************************************/
   /* SET AB0EM001.XXXUSER DEFINED    ; reset field attributes*/
   /* SET AB0EM001.XSECD DEFINED      ; reset field attributes*/
   /* SET AB0EM001.XSNYR DEFINED      ; reset field attributes*/
   /* SET AB0EM001.AB0EMBMM DEFINED   ; reset field attributes*/
   /* SET AB0EM001.AB0EMBYY DEFINED   ; reset field attributes*/
   /* SET AB0EM001.XGACD DEFINED      ; reset field attributes*/
   /* SET AB0EM001.XGAABRV DEFINED    ; reset field attributes*/
   /* SET AB0EM001.XPCCD DEFINED      ; reset field attributes*/
   /* SET AB0EM001.XPCABRV DEFINED    ; reset field attributes*/
   /* SET AB0EM001.XSUCD DEFINED      ; reset field attributes*/
   /* SET AB0EM001.XSUABRV DEFINED    ; reset field attributes*/
   /* SET AB0EM001.XQTCD DEFINED      ; reset field attributes*/
   /* SET AB0EM001.FY1FCTYC DEFINED   ; reset field attributes*/
   /* SET AB0EM001.FY6FOCD DEFINED    ; reset field attributes*/
   /* SET AB0EM001.FY6FOABR DEFINED   ; reset field attributes*/
   /* SET AB0EM001.FY1FRGN DEFINED    ; reset field attributes*/
   /* SET AB0EM001.SY1STNBR DEFINED   ; reset field attributes*/
   /* SET AB0EM001.SY1SSTNM DEFINED   ; reset field attributes*/
   /* SET AB0EM001.PC4ORTYP DEFINED   ; reset field attributes*/
   /* SET AB0EM001.PC4ABRV DEFINED    ; reset field attributes*/
   /* SET AB0EM001.XXXSTAT DEFINED    ; reset field attributes*/
   /* ******************************************************/
   /* EZEFLO;*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   /* note - PF7 and PF8 not valid keys on add screen*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    ABWREC.ABWPRCSN = "300 "; /* Process number*/
    AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0E300

// Reset highlighted fields
Function AB0E400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX)

    set AB0EM001.AB0EMDOS[ABWIXM] normal; /* Reset select flag*/
    set AB0EM001.AB0EMFTY[ABWIXM] normal; /* Reset factory code*/
    set AB0EM001.AB0EMSTY[ABWIXM] normal; /* Reset style number*/
    set AB0EM001.AB0EMSCD[ABWIXM] normal; /* reset scheduler code*/
    set AB0EM001.AB0EMPOT[ABWIXM] normal; /* Reset purch order type*/
    set AB0EM001.AB0EMCUS[ABWIXM] normal; /* Reset cust xref*/
    set AB0EM001.XOWCD[ABWIXM] normal; /* Reset owner group*/
    ABWREC.ABWIDX1 = ABWREC.ABWIXM - 1;
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 * 7;
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
    ABWREC.ABWIDX2 = ABWREC.ABWIDX1 + 6;
    ABWREC.ABWIDX3 = 1;
    while (ABWREC.ABWIDX1 <= ABWREC.ABWIDX2)
      if (AB0EW04.AB0EWCMO[ABWIDX3] > " ")
        set AB0EM001.AB0EMQTY[ABWIDX1] normal;
      else
        set AB0EM001.AB0EMQTY[ABWIDX1] skip, invisible;
      end
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      ABWREC.ABWIDX3 = ABWREC.ABWIDX3 + 1;
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end

  set AB0EM001.XXXUSER initialAttributes; /* reset field attributes*/
  set AB0EM001.XSECD initialAttributes; /* reset field attributes*/
  set AB0EM001.XSNYR initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EMBMM initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EMBYY initialAttributes; /* reset field attributes*/
  set AB0EM001.XGACD initialAttributes; /* reset field attributes*/
  set AB0EM001.XGAABRV initialAttributes; /* reset field attributes*/
  set AB0EM001.XPCCD initialAttributes; /* reset field attributes*/
  set AB0EM001.XPCABRV initialAttributes; /* reset field attributes*/
  set AB0EM001.XSUCD initialAttributes; /* reset field attributes*/
  set AB0EM001.XSUABRV initialAttributes; /* reset field attributes*/
  set AB0EM001.XQTCD initialAttributes; /* reset field attributes*/
  set AB0EM001.FY1FCTYC initialAttributes; /* reset field attributes*/
  set AB0EM001.FY6FOCD initialAttributes; /* reset field attributes*/
  set AB0EM001.FY6FOABR initialAttributes; /* reset field attributes*/
  set AB0EM001.FY1FRGN initialAttributes; /* reset field attributes*/
  set AB0EM001.SY1STNBR initialAttributes; /* reset field attributes*/
  set AB0EM001.SY1SSTNM initialAttributes; /* reset field attributes*/
  set AB0EM001.PC4ORTYP initialAttributes; /* reset field attributes*/
  set AB0EM001.PC4ABRV initialAttributes; /* reset field attributes*/
  set AB0EM001.XXXSTAT initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EM-BEG-MM initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EM-BEG-YY initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EM-END-MM initialAttributes; /* reset field attributes*/
  set AB0EM001.AB0EM-END-YY initialAttributes; /* reset field attributes*/

  set AB0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0EM001.CAITEM initialAttributes; /* Commarea application data*/

  ABWREC.ABWERLOC = "AB0E    "; /* Reset error location fld*/


end // end AB0E400

// Verify the entered data
Function AB0E500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AB0EM001.CAITEM > " ") /* Application data was entered*/

    set AB0EM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "500 "; /* Process number*/
    AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* Initialize line index*/
  while (ABWREC.ABWIXM > 0) /* Until end of lines*/
    AB0E510(); /* Verify any changed data*/
    ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end AB0E500

// Verify each entered line on ma
Function AB0E510()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/


  AB0EW03.AB0EWVAL = "Y"; /* initialize validation switch to 'Y'*/

  if (AB0EM001.AB0EMFTY[ABWIXM] == " "
   && AB0EM001.AB0EMSTY[ABWIXM] == " "
   && AB0EM001.AB0EMSCD[ABWIXM] == " "
   && AB0EM001.AB0EMCUS[ABWIXM] == " "
   && AB0EM001.XOWCD[ABWIXM] == " ")
    AB0EW01.AB0EWDEL[ABWIXM] = " ";
  end

  if (AB0EM001.AB0EMFTY[ABWIXM] != " "
   || AB0EM001.AB0EMSTY[ABWIXM] != " "
   || AB0EM001.AB0EMSCD[ABWIXM] != " "
   || AB0EM001.AB0EMCUS[ABWIXM] != " "
   || AB0EM001.XOWCD[ABWIXM] != " "
   || AB0EW01.AB0EWDEL[ABWIXM] != " ")

    AB0E518(); /* Validate OWNER GROUP*/
    AB0E511(); /* Validate SCHEDULER CODE*/
    AB0E512(); /* Validate FACTORY CODE*/
    AB0E514(); /* Validate PO TYPE*/

    if (PC4REC.PC4CUSFL == "N") /* customer xref NOT required*/
      if (AB0EM001.AB0EMCUS[ABWIXM] == " ")
        /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(48);
        AB0EW03.AB0EWVAL = "N"; /* Don't validate if error*/
        set AB0EM001.AB0EMCUS[ABWIXM] cursor, bold;
      end
    else /* ELSE customer xref IS required*/
      if (AB0EM001.AB0EMCUS[ABWIXM] == " ")
        converseLib.validationFailed(48);
        AB0EW03.AB0EWVAL = "N"; /* Don't validate if error*/
        set AB0EM001.AB0EMCUS[ABWIXM] cursor, bold;
      else
        AB0E513(); /* Verify CUST X-REF*/
      end
    end

    AB0E515(); /* Verify style*/
    AB0E512(); /* verify factory*/

    if (AB0EW03.AB0EWVAL == "Y") /* IF Validation SW = 'y'*/
      AB0E516(); /* Is this a duplicate ABSTY entry ?*/
      if (SQLCA.VAGen_SQLCODE == 100)
        /* NEXT SENTENCE (NOT A DUPLICATE BUY)*/
      else
        AB0EW01.AB0EWDEL[ABWIXM] = "S"; /* Do NOT insert ABSTY Row*/
      end
       /* --- remove vsctl001 controls*/
      /* IF PG1REC.PG1SC4CD NE AB3REC.PG1SC4CD;*/
        /* ab0eS51                 ;      get this sched curr mth*/
      /* END ;*/
      /* IF AB3REC.AB3BUYMO NE 0;*/
      ABWREC.ABWIDX5 = 6;
      while (ABWREC.ABWIDX5 > 0)
        AB0EW04.AB0EWIDX = ABWREC.ABWIXM - 1;
        AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX * 6;
        AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + ABWREC.ABWIDX5;
        if (AB0EM001.AB0EMQTY[AB0EWIDX] != 0)
          AB0E517(); /* Validate against dup BUY-PLAN Row*/
        end
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 - 1;
      end
      if (converseVar.validationMsgNum == 0
       && AB0EW01.AB0EWDEL[ABWIXM] != "S") /* do not insert dup absty row*/
        AB0EW01.AB0EWDEL[ABWIXM] = "A";
      end
      /* END ;*/
    end
    /* END ;*/
  end

end // end AB0E510

// validate scheduler
Function AB0E511()
   /* *************************************************************/
   /* *****  V A L I D A T E     S C H E D U L E R  C O D E  ******/
   /* *****                                                  ******/
   /* *****  this process will validate the scheduler code   ******/
   /* *************************************************************/

  set PG1REC empty;

  PG1REC.XGPCD = XP1REC.XGPCD;
  PG1REC.PG1SC4CD = AB0EM001.AB0EMSCD[ABWIXM]; /* scheduler*/
   /* ---- note: pg1rec.pg1fctcd (forcaster) SHOULD be blank when*/
   /* ----       scheduler is present*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PG1REC.XXXSTAT != "A") /* inactive status*/
        converseLib.validationFailed(69);
        ABWREC.ABWPRCSN = "511 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* do not validate if error*/
        set AB0EM001.AB0EMSCD[ABWIXM] cursor, bold;
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(69);
        ABWREC.ABWPRCSN = "511 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* do not validate if error*/
        set AB0EM001.AB0EMSCD[ABWIXM] cursor, bold;
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "511 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "VALIDATE SCHEDULER CODE";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E511

// validate factory
Function AB0E512()
   /* *************************************************************/
   /* *****  V A L I D A T E     F A C T O R Y  C O D E      ******/
   /* *****                                                  ******/
   /* *****  this process will validate the factory code     ******/
   /* *************************************************************/

  if (AB0EM001.AB0EMFTY[ABWIXM] == " ")
    converseLib.validationFailed(72); /* Invalid or missing*/
    ABWREC.ABWPRCSN = "512 "; /* Process number*/
    AB0EW03.AB0EWVAL = "N"; /* do not validate if error*/
    set AB0EM001.AB0EMFTY[ABWIXM] cursor, bold;
    return;
  end
  set FY1REC empty;

     /* format key*/
  FY1REC.XGPCD = XP1REC.XGPCD;
  FY1REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT != "A") /* inactive status*/
        converseLib.validationFailed(72); /* invalid or missing msg*/
        ABWREC.ABWPRCSN = "512 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* do not validate if error*/
        set AB0EM001.AB0EMFTY[ABWIXM] cursor, bold;
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(72); /* Invalid or missing*/
        ABWREC.ABWPRCSN = "512 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* do not validate if error*/
        set AB0EM001.AB0EMFTY[ABWIXM] cursor, bold;
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "512 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "VALIDATE FACTORY CODE";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY"; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E512

// validate cust xref
Function AB0E513()
   /* *************************************************************/
   /* ***** V A L I D A T E     C U S T O M E R    X _ R E F ******/
   /* *****                                                  ******/
   /* ***** this process will validate the customer x-ref    ******/
   /* *************************************************************/

  set PC2REC empty;

  PC2REC.XGPCD = XP1REC.XGPCD;
  PC2REC.PC2CUXID = AB0EM001.AB0EMCUS[ABWIXM];

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(48);
        ABWREC.ABWPRCSN = "513 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* Do not validate if error*/
        set AB0EM001.AB0EMCUS[ABWIXM] cursor, bold;
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "513 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "VALIDATE CUST X-REF";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E513

// validate po type
Function AB0E514()
   /* *************************************************************/
   /* *****        V A L I D A T E     P O - T Y P E         ******/
   /* *****                                                  ******/
   /* ***** this process will validate PO-TYPE               ******/
   /* *************************************************************/

  set PC4REC empty;

  PC4REC.XGPCD = XP1REC.XGPCD;
  PC4REC.PC4ORTYP = AB0EM001.AB0EMPOT[ABWIXM];

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(37);
        ABWREC.ABWPRCSN = "514 "; /* Process number*/
        AB0EW03.AB0EWVAL = "N"; /* No validation if error*/
        set AB0EM001.AB0EMPOT[ABWIXM] cursor, bold;
        return;
      end
    end
  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "514 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "VALIDATE CUST X-REF";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E514

// verify style nbr
Function AB0E515()
  AB0ES01(); /* SELECT SET STYLE*/
  AB0ES02(); /* GET ROW*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(38);
    set AB0EM001.AB0EMSTY[ABWIXM] cursor, bold;
  end
  AB0ES03(); /* CLOSE SET*/
end // end AB0E515

// check for dup vabsty row
Function AB0E516()
  AB2REC.SY1STNBR = AB0EM001.AB0EMSTY[ABWIXM];
  AB2REC.XDMCD = PG2REC.XDMCD;
  AB2REC.XSECD = XP1REC.XSECD;
  AB2REC.XSNYR = XP1REC.XSNYR;
  AB2REC.XOWCD = AB0EM001.XOWCD[ABWIXM];
  AB2REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];
  AB2REC.PC4ORTYP = AB0EM001.AB0EMPOT[ABWIXM];
  AB2REC.PC2CUXID = AB0EM001.AB0EMCUS[ABWIXM];
  AB2REC.PG1SC4CD = AB0EM001.AB0EMSCD[ABWIXM];

  if (AB0EM001.AB0EMCUS[ABWIXM] != " ")
    AB2REC.XWHCD = " ";
  else
    AB2REC.XWHCD = "51";
  end

  try
    call "IO3560" ("S ", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* no sql errors*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return; /* return*/
    end
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "516 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT A ABSTY ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E516

// check for dup buy month
Function AB0E517()
  AB4REC.SY1STNBR = AB0EM001.AB0EMSTY[ABWIXM];
  AB4REC.XDMCD = PG2REC.XDMCD;
  AB4REC.XSECD = XP1REC.XSECD;
  AB4REC.XSNYR = XP1REC.XSNYR;
  AB4REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];
  AB4REC.PC4ORTYP = AB0EM001.AB0EMPOT[ABWIXM];
  AB4REC.PC2CUXID = AB0EM001.AB0EMCUS[ABWIXM];
  AB4REC.XOWCD = AB0EM001.XOWCD[ABWIXM];
  AB4REC.AB3BUYMO = AB0EW04.AB0EWBMO[ABWIDX5];
  AB4REC.AB3BUYST = "S";

  if (AB0EM001.AB0EMCUS[ABWIXM] == " ")
    AB4REC.XWHCD = "51";
  else
    AB4REC.XWHCD = "  ";
  end

  try
    call "IO3570" ("S ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(53);
      set AB0EM001.AB0EMQTY[AB0EWIDX] cursor, bold;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        return;
      end
    end
  end
   /* eND ;*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "517 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CHECK FOR DUP BUY-PLAN";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E517

// Verify owner group
Function AB0E518()
  if (AB0EM001.XOWCD[ABWIXM] == " ")
    AB0EM001.XOWCD[ABWIXM] = "00";
  end

  AB0EW01.XWHCD = "51";
  AB0EW01.XOWCD = AB0EM001.XOWCD[ABWIXM];

  if (AB0EW01.XOWKEY in XOWTBL.XOWKEY)
   /* next sentence*/
  else
    set AB0EM001.XOWCD[ABWIXM] cursor, bold;
    AB0EM001.XXXPRCNM = "AB0E518";
    converseLib.validationFailed(44);
  end


end // end AB0E518

// Process valid input request
Function AB0E600()

  XX0XS01(); /* GET SYSTEM DATE & TIME*/

  ABWREC.ABWIXM = 1; /* Initialize LINE nbr index*/
  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* LOOP thru entire MAP*/
    if (AB0EW01.AB0EWDEL[ABWIXM] != " ") /* if data to add*/
      AB0ES01(); /* SELECT SET STYLE*/
      AB0ES02(); /* GET ROW*/
      AB0ES03(); /* CLOSE SET*/
      set AB2REC empty;
      set AB4REC empty;
      AB2REC.SY1STNBR = AB0EM001.AB0EMSTY[ABWIXM];
      AB4REC.SY1STNBR = AB0EM001.AB0EMSTY[ABWIXM];
      AB4REC.XDMCD = PG2REC.XDMCD;

      if (AB0EM001.AB0EMCUS[ABWIXM] != " ") /* a cust xref*/
        AB4REC.XWHCD = " "; /* dont assign a whse*/
      else
        AB4REC.XWHCD = "51";
      end

      AB4REC.XSECD = XP1REC.XSECD;
      AB4REC.XSNYR = XP1REC.XSNYR;
      AB4REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];
      AB4REC.PC4ORTYP = AB0EM001.AB0EMPOT[ABWIXM];
      AB4REC.PC2CUXID = AB0EM001.AB0EMCUS[ABWIXM];
      AB4REC.XOWCD = AB0EM001.XOWCD[ABWIXM];

      if (AB4REC.PC4ORTYP == "XI"
       || AB4REC.PC4ORTYP == "XD"
       || AB4REC.PC4ORTYP == "AD"
       || AB4REC.PC4ORTYP == "S8"
       || AB4REC.PC4ORTYP == "S9"
       || AB4REC.PC4ORTYP == "SX")
        AB4REC.XDVCD = "02"; /* international*/
        AB2REC.XDVCD = "02"; /* international*/
      else
        AB4REC.XDVCD = "01";
        AB2REC.XDVCD = "01";
      end

      ABWREC.ABWIDX5 = 1;
      AB0EW06.AB0EWDSW = "Y";
      AB0E516(); /* check if absty row there*/

      if (SQLCA.VAGen_SQLCODE == 0) /* absty row there*/
        AB0EW01.AB0EWDEL[ABWIXM] = "S"; /* don't add absty row*/
      end

      while (ABWREC.ABWIDX5 <= 7)
        AB0EW04.AB0EWIDX = ABWREC.ABWIXM - 1;
        AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX * 7;
        AB0EW04.AB0EWIDX = AB0EW04.AB0EWIDX + ABWREC.ABWIDX5;
        if (AB0EM001.AB0EMQTY[AB0EWIDX] != 0)
          if (AB0EW06.AB0EWDSW == "Y"
           && AB0EW01.AB0EWDEL[ABWIXM] != "S")
            AB2REC.XDMCD = PG2REC.XDMCD;

            if (PG2REC.PG2SCRFL == "I")
              AB2REC.AB6BKFNI = "B";
            else
              if (PG2REC.PG2SCRFL == "U")
                AB2REC.AB6BKFNI = "R";
              else
                AB2REC.AB6BKFNI = PG2REC.PG2SCRFL;
              end
            end

            if (AB0EM001.AB0EMCUS[ABWIXM] != " ") /* a cust xref*/
              AB2REC.XWHCD = " "; /* dont assign a whse*/
            else
              AB2REC.XWHCD = "51";
            end

            AB2REC.XSECD = XP1REC.XSECD;
            AB2REC.XSNYR = XP1REC.XSNYR;
            AB2REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];
            AB2REC.PG1SC4CD = AB0EM001.AB0EMSCD[ABWIXM];
            AB2REC.XOWCD = AB0EM001.XOWCD[ABWIXM];
            AB2REC.XGACD = PG2REC.XGACD;
            AB2REC.XPCCD = PG2REC.XPCCD;
            AB2REC.XPRCD = PG2REC.XPRCD;
            AB2REC.XPLCD = PG2REC.XPLCD;

            if (AB2REC.XPRCD == " ")
              AB2REC.XPRCD = "00";
            end

            if (AB2REC.XPLCD == " ")
              AB2REC.XPLCD = "00";
            end

            AB2REC.XSUCD = PG2REC.XSUCD;
            AB2REC.FY1FRGN = FY1REC.FY1FRGN;
            AB2REC.FY6FOCD = FY1REC.FY6FOCD;
            AB2REC.XQTCD[1] = PG2REC.XQTCD1;
            AB2REC.XQTCD[2] = PG2REC.XQTCD2;

            if (AB4REC.PC4ORTYP == "XD"
             || AB4REC.PC4ORTYP == "AD"
             || AB4REC.PC4ORTYP == "XI")
              AB2REC.XQTCD[1] = " ";
              AB2REC.XQTCD[2] = " ";
            end

            if (AB2REC.FY1FRGN == "N")
              AB2REC.XQTCD[1] = " ";
              AB2REC.XQTCD[2] = " ";
            end

            if (AB2REC.XQTCD[1] == "000")
              AB2REC.XQTCD[1] = " ";
            end

            if (AB2REC.XQTCD[2] == "000")
              AB2REC.XQTCD[2] = " ";
            end

            AB0E610(); /* INSERT ABSTY01 Row*/
            if (SQLCA.VAGen_SQLCODE == 0)
              ABWREC.ABWNMO = 45; /* Update successful msg*/
            end
          end
          AB4REC.AB4SMBQT = AB0EM001.AB0EMQTY[AB0EWIDX];
          AB4REC.AB3BUYMO = AB0EW04.AB0EWBMO[ABWIDX5];
          AB4REC.AB3BUYST = "S";
          AB4REC.AB4BQCFL = "C";
          AB4REC.AB3BYSDT = XX0XW01.XX0XWDAT;
          AB0E517(); /* check for duplicate vbplan row*/
          if (SQLCA.VAGen_SQLCODE == 100) /* no dup row*/
            AB0E620(); /* insert new buy plan row*/
            if (SQLCA.VAGen_SQLCODE == 0)
              ABWREC.ABWNMO = 45; /* Update successful msg*/
            end
          end
        end
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1;
      end
    end
    if (converseVar.validationMsgNum == 0)
      AB0EW01.AB0EWDEL[ABWIXM] = " ";
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end


end // end AB0E600

// insert vabsty01 row
Function AB0E610()
   /* ------------------------------------------------------------*/
   /* INSERT the ABSTY01 row.*/
   /* ------------------------------------------------------------*/

  AB0EW06.AB0EWDSW = "N"; /* SHOW THAT ABSTY inserted.*/

  AB2REC.PC4ORTYP = AB4REC.PC4ORTYP;
  AB2REC.PC2CUXID = AB4REC.PC2CUXID;
  AB2REC.PG1SC4CD = AB0EM001.AB0EMSCD[ABWIXM];
  AB2REC.FY1FCTYC = AB0EM001.AB0EMFTY[ABWIXM];
  AB2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AB2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AB2REC.ZZZCHGCT = AB2REC.ZZZCHGCT + 1;

  try
    call "IO3560" ("A ", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "610 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "INSERT A ABSTY ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E610

// insert vbplan01 row
Function AB0E620()
   /* *************************************************************/
   /* *****    I N S E R T     B U Y _ P L A N     R O W     ******/
   /* *****                                                  ******/
   /* ***** this process will INSERT ONE BUY_PLAN ROW.       ******/
   /* *************************************************************/

  AB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  AB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  AB4REC.ZZZCHGCT = 0;

  try
    call "IO3570" ("A ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "620 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "INSERT OLD B-PLAN ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0EM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0E620

// SELECT SET STYLE DATA
Function AB0ES01()
   /* *************************************************************/
   /* *****        G E T     S T Y L E     D A T A           ******/
   /* *****                                                  ******/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* Indicate GPC code*/
  PG2REC.XSECD = XP1REC.XSECD;
  PG2REC.XSNYR = XP1REC.XSNYR;
  PG2REC.SY1STNBR = AB0EM001.AB0EMSTY[ABWIXM];

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      /* THIS SHOULD NOT HAPPEN !!!*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT STATEMENT GROUP HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE WHEN ALL IS OKAY ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AB0ES01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT STYLE DATA";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AB0ES01

// GET ONE ROW
Function AB0ES02()
   /* *************************************************************/
   /* *****          G E T     O N E     R O W               ******/
   /* *****                                                  ******/
   /* *************************************************************/


   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      /* THIS SHOULD NOT HAPPEN !!!*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT STATEMENT GROUP HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE WHEN ALL IS OKAY ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AB0ES02"; /* Process name*/
  TA1REC.TA1LOC = "GET ONE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AB0ES02

// CLOSE SET
Function AB0ES03()
   /* *************************************************************/
   /* *****         C L O S E     C U R S O R                ******/
   /* *****                                                  ******/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      /* THIS SHOULD NOT HAPPEN !!!*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT STATEMENT GROUP HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE WHEN ALL IS OKAY ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AB0ES03"; /* Process name*/
  TA1REC.TA1LOC = "GET ONE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AB0ES03

//*** RECORD=AB0EW01 ****
// WORKING storage record for AB0B - APPAREL BUY PLAN MAINT
// 
// REQ NBR     USERID     MAINTENANCE
// -------     ------     -------------------------------------
//             TDODSO     Added Beginning and Ending Month Date
//                        Ranges
// ***********************
Record AB0EW01 type basicRecord
  10 AB0EWMAX AB0EWMAX ; 
  10 XQTCD XQTCD ; 
  10 XSUCD XSUCD ; 
  10 XPCCD XPCCD ; 
  10 XGACD XGACD ; 
  10 * char(11) ; 
    15 AB0EWDEL AB0EWDEL [11] ; 
  10 AB0EWIXX AB0EWIXX ; 
  10 AB0EWASN AB0EWASN ; 
  10 AB0EWFCO AB0EWFCO ; 
  10 AB0EWCAS AB0EWCAS ; 
  10 AB0EWPGS AB0EWPGS ; 
  10 AB0EWIES AB0EWIES ; 
  10 AB0EWSYR AB0EWSYR ; 
    15 AB0EWSCC AB0EWSCC ; 
    15 AB0EWSYY AB0EWSYY ; 
  10 AB0EWIX4 AB0EWIX4 ; 
  10 AB0EWIX5 AB0EWIX5 ; 
  10 AB0EWIX6 AB0EWIX6 ; 
  10 AB0EWSIX AB0EWSIX ; 
  10 AB0EWNSB AB0EWNSB ; 
  10 AB0EWBSW AB0EWBSW ; 
  10 AB0EWKCS AB0EWKCS ; 
  10 AB0EWSWP AB0EWSWP ; 
  10 SY1STNBR SY1STNBR ; 
  10 PC2CUXID PC2CUXID ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 AB0EW-BEG-DATE AB0EW-BEG-DATE ; 
    15 AB0EW-BEG-CCYY AB0EW-BEG-CCYY ; 
      20 AB0EW-BEG-CC AB0EW-BEG-CC ; 
      20 AB0EW-BEG-YY AB0EW-BEG-YY ; 
    15 AB0EW-BEG-MM AB0EW-BEG-MM ; 
  10 AB0EW-END-DATE AB0EW-END-DATE ; 
    15 AB0EW-END-CCYY AB0EW-END-CCYY ; 
      20 AB0EW-END-CC AB0EW-END-CC ; 
      20 AB0EW-END-YY AB0EW-END-YY ; 
    15 AB0EW-END-MM AB0EW-END-MM ; 
end // end AB0EW01

//*** RECORD=AB0EW02 ****
// Working storage record for AB0B - APPAREL BUY PLAN MAINT
// ***********************
Record AB0EW02 type basicRecord
  10 ABWLEN ABWLEN ; 
  10 * char(4092) ; 
end // end AB0EW02

//*** RECORD=AB0EW03 ****
//                        A B 0 B W 0 3
// 
// This record contains the internal table of keys to rows
// in DABUY.VABSTY01 which meet selection criteria.
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 04/05/89  G Gilray   INITIAL RECORD CREATION
// 
// ***********************
Record AB0EW03 type basicRecord
  10 AB0EWIXM AB0EWIXM ; 
  10 AB0EWIXW AB0EWIXW ; 
  10 AB0EWIXS AB0EWIXS [100] ; 
  10 AB0EWIX1 AB0EWIX1 ; 
  10 AB0EWIXC AB0EWIXC ; 
  10 AB0EWIXP AB0EWIXP ; 
  10 AB0EWVAL AB0EWVAL ; 
  10 AB0EWADD AB0EWADD [1000] ; 
  10 AB2KEY AB2KEY [1000] ; 
    15 SY1STNBR SY1STNBR ; 
    15 XDMCD XDMCD ; 
    15 XOWCD XOWCD ; 
    15 XWHCD XWHCD ; 
    15 XDVCD XDVCD ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC2CUXID PC2CUXID ; 
    15 XPCCD XPCCD ; 
    15 XPLCD XPLCD ; 
    15 XPRCD XPRCD ; 
  10 PG1SC4CD PG1SC4CD [1000] ; 
  10 XQTCD1 XQTCD1 [1000] ; 
  10 XQTCD2 XQTCD2 [1000] ; 
  10 AB0EWMTC AB0EWMTC [1000] ; 
  10 AB0EWDOM AB0EWDOM [1000] ; 
  10 SY1BSTNB SY1BSTNB [1000] ; 
end // end AB0EW03

//*** RECORD=AB0EW04 ****
//                        A B 0 B W 0 4
// 
// This record contains the internal table of values which
// match the values on the map for ab0bm001.
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 11/21/89  G Gilray   INITIAL RECORD CREATION
// 04/27/93  TDODSO     ADDED BEG DATE WORK AREA FIELDS
// ***********************
Record AB0EW04 type basicRecord
  5 AB0EWGP4 AB0EWGP4 ; 
    10 AB0EWIDX AB0EWIDX ; 
    10 AB0EWMXM AB0EWMXM ; 
    10 AB0EWFOB AB0EWFOB ; 
      15 AB0EWYER AB0EWYER ; 
        20 AB0EWBCC AB0EWBCC ; 
        20 AB0EWBYY AB0EWBYY ; 
      15 AB0EWBMM AB0EWBMM ; 
      15 AB0EWBDD AB0EWBDD ; 
    10 AB0EWFOX AB0EWFOX ; 
    10 AB0EWBTL AB0EWBTL [7] ; 
      15 AB0EWBMO AB0EWBMO ; 
        20 AB0EWCCC AB0EWCCC ; 
        20 AB0EWYYY AB0EWYYY ; 
        20 AB0EWBYM AB0EWBYM ; 
      15 AB0EWCMO AB0EWCMO ; 
        20 AB0EWCMM AB0EWCMM ; 
        20 AB0EWCSL AB0EWCSL ; 
        20 AB0EWCYY AB0EWCYY ; 
    10 AB0EWMPD AB0EWMPD [11] ; 
    10 AB0EW-BEG-DATE AB0EW-BEG-DATE ; 
      15 AB0EW-BEG-CCYY AB0EW-BEG-CCYY ; 
        20 AB0EW-BEG-CC AB0EW-BEG-CC ; 
        20 AB0EW-BEG-YY AB0EW-BEG-YY ; 
      15 AB0EW-BEG-MM AB0EW-BEG-MM ; 
end // end AB0EW04

//*** RECORD=AB0EW05 ****
// ************************************************************
// *****                  A B 0 B W 0 5                   *****
// *****                                                  *****
// ***** This record is a redefines of a field in AB0BW04 *****
// ***** so that a 2-dimensional array can be created.    *****
// ***** This record descibes all the data used on each   *****
// ***** line of maps AB0BM001 & AB0BM005.                *****
// *****                                                  *****
// *****     M A I N T E N A N C E     H I S T O R Y      *****
// *****     ---------------------------------------      *****
// *****                                                  *****
// *****   DATE    NAME          COMMENT                  *****
// ***** --------  ------------  ------------------------ *****
// ***** 11/28/89  G Gilray      Initial record creation. *****
// ***** 07/18/90  E Smith       Add PG1SC4CD.            *****
// *****                                                  *****
// ************************************************************
// ***********************
Record AB0EW05 type basicRecord
  5 AB0EWMPD AB0EWMPD ; 
    10 AB4GROUP AB4GROUP [7] ; 
      15 AB4KEY AB4KEY ; 
        20 SY1STNBR SY1STNBR ; 
        20 XDMCD XDMCD ; 
        20 XOWCD XOWCD ; 
        20 XWHCD XWHCD ; 
        20 XDVCD XDVCD ; 
        20 XSECD XSECD ; 
        20 XSNYR XSNYR ; 
        20 FY1FCTYC FY1FCTYC ; 
        20 PC4ORTYP PC4ORTYP ; 
        20 PC2CUXID PC2CUXID ; 
        20 AB3BUYMO AB3BUYMO ; 
      15 AB3BUYST AB3BUYST ; 
      15 AB3BYSDT AB3BYSDT ; 
      15 AB4BQCFL AB4BQCFL ; 
      15 AB4SMBQT AB4SMBQT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 FY1FRGN FY1FRGN ; 
    10 XXXUSER XXXUSER ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 AB0EWTTL AB0EWTTL ; 
    10 AB0EWBBY AB0EWBBY ; 
    10 AB0EWBTO AB0EWBTO ; 
    10 XQTCD XQTCD [2] ; 
    10 XPCCD XPCCD ; 
    10 SY1BSTNB SY1BSTNB ; 
end // end AB0EW05

//*** RECORD=AB0EW06 ****
// ************************************************************
// *****                  A B 0 B W 0 6                   *****
// *****                                                  *****
// ***** This record contains the signon for all styles   *****
// ***** in AB0BW03.                                      *****
// *****                                                  *****
// *****     M A I N T E N A N C E     H I S T O R Y      *****
// *****     ---------------------------------------      *****
// *****                                                  *****
// *****   DATE    NAME          COMMENT                  *****
// ***** --------  ------------  ------------------------ *****
// ***** 12/05/89  G Gilray      Initial record creation. *****
// *****                                                  *****
// ************************************************************
// ***********************
Record AB0EW06 type basicRecord
  10 XXXUSER XXXUSER [1500] ; 
  10 AB0EWDSW AB0EWDSW ; 
end // end AB0EW06

//*** RECORD=AB0EW07 ****
// ************************************************************
// *****                  A B 0 B W 0 7                   *****
// *****                                                  *****
// ***** This record an internal table of factories and   *****
// ***** subtotals for all buy months.                    *****
// *****                                                  *****
// *****     M A I N T E N A N C E     H I S T O R Y      *****
// *****     ---------------------------------------      *****
// *****                                                  *****
// *****   DATE    NAME          COMMENT                  *****
// ***** --------  ------------  ------------------------ *****
// ***** 12/06/89  G Gilray      Initial record creation. *****
// *****                                                  *****
// ************************************************************
// ***********************
Record AB0EW07 type basicRecord
  10 AB0EW5DX AB0EW5DX ; 
  10 AB0EWLST AB0EWLST ; 
  10 AB0EWLFY AB0EWLFY ; 
  10 FY1FCTYC FY1FCTYC [1000] ; 
  10 AB0EWCOR AB0EWCOR [1000] ; 
  10 AB0EWTL1 AB0EWTL1 [1000] ; 
  10 AB0EWTL2 AB0EWTL2 [1000] ; 
  10 AB0EWTL3 AB0EWTL3 [1000] ; 
  10 AB0EWTL4 AB0EWTL4 [1000] ; 
  10 AB0EWTL5 AB0EWTL5 [1000] ; 
  10 AB0EWTL6 AB0EWTL6 [1000] ; 
  10 AB0EWTL7 AB0EWTL7 [1000] ; 
  10 AB0EWTL8 AB0EWTL8 [1000] ; 
  10 AB0EWTL9 AB0EWTL9 [1000] ; 
end // end AB0EW07

//*** RECORD=AB0EW08 ****
// ************************************************************
// *****                  A B 0 B W 0 8                   *****
// *****                                                  *****
// ***** This record an internal table of factory sub-    *****
// ***** totals which occur as the first ine on a new     *****
// ***** page.                                            *****
// *****                                                  *****
// *****     M A I N T E N A N C E     H I S T O R Y      *****
// *****     ---------------------------------------      *****
// *****                                                  *****
// *****   DATE    NAME          COMMENT                  *****
// ***** --------  ------------  ------------------------ *****
// ***** 01/04/90  G Gilray      Initial record creation. *****
// *****                                                  *****
// ************************************************************
// ***********************
Record AB0EW08 type basicRecord
  10 AB0EW8IX AB0EW8IX ; 
  10 AB0EW8XP AB0EW8XP [200] ; 
  10 FY1FCTYC FY1FCTYC [200] ; 
end // end AB0EW08

DataItem AB0EW-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0EW-BEG-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning Date Range
DataItem AB0EW-BEG-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning Date Month
DataItem AB0EW-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning Date Year
DataItem AB0EW-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0EW-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0EW-END-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending Date Range
DataItem AB0EW-END-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending Date Month
DataItem AB0EW-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending Date Year
DataItem AB0EW-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED FOR THIS TBL
DataItem AB0EW5DX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX USED FOR THIS TBL
DataItem AB0EW8IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page to displayed
DataItem AB0EW8XP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row added to factory subtotal
DataItem AB0EWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ABSTY01 row needed sw
DataItem AB0EWASN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Balance-to-Buy not 'l'
DataItem AB0EWBBY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-CENTURY
DataItem AB0EWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-DAY
DataItem AB0EWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-MONTH
DataItem AB0EWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric buy-month Value
DataItem AB0EWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// status check switch
DataItem AB0EWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TABLE OF BUY-MONTHS in SEASON
DataItem AB0EWBTL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL Forecast(ALL MONTHS)
DataItem AB0EWBTO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric Buy Month
DataItem AB0EWBYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-BEGIN-YEAR
DataItem AB0EWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Position Cursor at style sw
DataItem AB0EWCAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0EWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Character BUY-MONTH
DataItem AB0EWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character BUY-MONTH
DataItem AB0EWCMO char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cooresponding ab0eW03 Row
DataItem AB0EWCOR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// slash '/' (used for display)
DataItem AB0EWCSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character BUY-YEAR
DataItem AB0EWCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0EWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Domestic/Offshore Indicator
DataItem AB0EWDOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ABSTY01 already inserted sw
DataItem AB0EWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FACTORY change only sw
DataItem AB0EWFCO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FCTY-ORD-BEGIN-DT
DataItem AB0EWFOB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCTY-ORD-END-DT
DataItem AB0EWFOX num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GROUP LEVEL
DataItem AB0EWGP4 char(4437)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index used for manipulating
DataItem AB0EWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// initial entry switch
DataItem AB0EWIES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line index
DataItem AB0EWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work line index
DataItem AB0EWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem AB0EWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem AB0EWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem AB0EWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max styles in style array
DataItem AB0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page to displayed
DataItem AB0EWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First line in ABW3 for page
DataItem AB0EWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index work field
DataItem AB0EWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page to displayed
DataItem AB0EWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem AB0EWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LAST FACTORY READ
DataItem AB0EWLFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NBR OF LAST ROW IN TBL
DataItem AB0EWLST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Length of TSQ record
DataItem AB0EWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Duplicate data as on Map line
DataItem AB0EWMPD char(394)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rows for this style found
DataItem AB0EWMTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max Buy-Months in Season
DataItem AB0EWMXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// status check switch
DataItem AB0EWNSB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page display switch
DataItem AB0EWPGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season cc
DataItem AB0EWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save current page
DataItem AB0EWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reobtain from updte sw
DataItem AB0EWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season year
DataItem AB0EWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work season yy
DataItem AB0EWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 1
DataItem AB0EWTL1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 2
DataItem AB0EWTL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 3
DataItem AB0EWTL3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 4
DataItem AB0EWTL4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 5
DataItem AB0EWTL5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL FOR MONTH 6
DataItem AB0EWTL6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL BOUGHT TO DATE
DataItem AB0EWTL7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL BALANCE TO BUY
DataItem AB0EWTL8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUB TOTAL SEASON FORECAST
DataItem AB0EWTL9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Bought (status 'l')
DataItem AB0EWTTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Validate Selection Switch
DataItem AB0EWVAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FCTY-ORD-BEGIN-CCYY
DataItem AB0EWYER num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric Buy Year
DataItem AB0EWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

