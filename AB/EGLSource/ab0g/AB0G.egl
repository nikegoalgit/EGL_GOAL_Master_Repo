package ab0g;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0G ****
// This application allows the user to maintain the quantity
// values of existing rows in the Safety Stock Table (DABUY.
// VSAFTY01). The user may change the value of the quantity/ies
// of each style/color/size for the style specified, as well
// as add new colors for each style being processed. The user
// can also delete colors from a specified style by moving
// zeroes to all applicable sizes. An Apparel Scheduler Super-
// visor will use this application to adjust to the quantity
// of each size of each color for each style for the style of
// blank t-shirt specified.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view and/or update the rows that were
// selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL   DATE   USERID DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
//         06/01/89 JRAMOS New application.
// AB#132  11/17/92 RCHINI Add a second screen to hold last 3
//                         sizes that will not fit on the 1st
//                         screen.  This change adds PF Keys
//                         10 and 11 (left and and right).
//                         Also modified map 1 to hold first 7
//                         sizes.  Map 2 displays last 3 sizes.
//                         The size qty fields were enlarged to
//                         hold the colorways accumulated size
//                         quantities.
// AB#141  11/17/92 RCHINI Add grand total line accumulating
//                         safety stock for all colorways.
//         09/17/93 SWHITA ADDED HELP SCREEN LINK TO AB0G130.
// ------- -------- ------ ------------------------------------
// ------- -------- ------ ------------------------------------
//         12/18/97 NGANGO Y2K MODIFICATIONS AND TABLE  CHANGE
//                         MODIFICATIONS. Changed Map AB0GM001
//                         and AB0GM002 (field name - XSNYR )
//                         to remove zero suppression for Sea-
//                         son Year. Also changed Process
//                         AB0G152, AB0G154, AB0G161, AB0G162,
//                         AB0G163 and Stmt. Grp. AB0GS01,
//                         AB0GS09 and AB0GS20.
// ------- -------- ------ ------------------------------------
// *********************
Program AB0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0GW01 AB0GW01; // record
  AB0GW02 AB0GW02; // record
  AB0GW03 AB0GW03; // record
  AB1REC AB1REC; // record
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AF2REC AF2REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use AB0GM.AB0GM001,  // forms
      AB0GM.AB0GM002, 
      AB0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AB0GW01 empty; /* Initialize working storage*/
    set AB0GW02 empty; /* Initialize working storage*/
    set AB0GW03 empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG3REC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/

    set AB0GM001 initial; /* Initialize map output area*/
    set AB0GM002 initial; /* Initialize map output area*/


                   /* (Define Map Environment)*/

    ABWREC.ABWAPPL = "AB0G"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "M001"; /* Indicate map one*/
    ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to abwrec*/


                    /* (Set Map Item Values)*/

    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/

    AB0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


              /* (Process Passed Items from XP1REC)*/

    AB0GM001.XSECD = XP1REC.XSECD; /* Season cd*/
    AB0GM001.XSNYR = XP1REC.XSNYR; /* Season yr*/

     /* *************************************************************/
     /* ***** The following code commented by Grant Gilray on  ******/
     /* ***** 7/10/89. Since AB0G does not use XGA or XSU as   ******/
     /* ***** selection criteria, there is no need to pass the ******/
     /* ***** data from XP1REC to the MAP.                     ******/
     /* *************************************************************/
     /* MOVE XP1REC.XGACD TO AB0GM001.XGACD    ; Gender/Age cd*/
     /* MOVE XP1REC.XGAABRV TO AB0GM001.XGAABRV; Gender/Age abrv*/
     /* MOVE XP1REC.XSUCD TO AB0GM001.XSUCD    ; Silhouette cd*/
     /* MOVE XP1REC.XSUABRV TO AB0GM001.XSUABRV; Silhouette abrv*/
     /* ***** END of code commented by Grant Gilray 7/10/89    ******/

    AB0GM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB0GM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
    AB0GM001.XWHCD = XP1REC.XWHCD; /* Warehouse cd*/
    AB0GM001.XWHABRV = XP1REC.XWHABRV; /* Warehouse abrv*/
    AB0GM001.XOWCD = XP1REC.XOWCD; /* XOT Own cd*/
    AB0GM001.XOWABRV = XP1REC.XOWABRV; /* XOT Own cd abrv*/

    AB0GM002.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB0GM002.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
    AB0GM002.XWHCD = XP1REC.XWHCD; /* Warehouse cd*/
    AB0GM002.XWHABRV = XP1REC.XWHABRV; /* Warehouse abrv*/
    AB0GM002.XOWCD = XP1REC.XOWCD; /* XOT Own cd*/
    AB0GM002.XOWABRV = XP1REC.XOWABRV; /* XOT Own cd abrv*/


    if (AB0GM001.XSECD != " ") /* Non-space XSECD passed*/
    /*  */
    /* -------------- Y2K OUT BEGIN ---------------------*/
    /*  */
    /* AND AB0GM001.XSNYR NE 0;       /* and non-zero XSNYR passed*/
    /*  */
    /* -------------- Y2K OUT END -----------------------*/
    /*  */

      ABWREC.ABWSWR = "Y"; /* Obtain data from keys passed*/

    else

      ABWREC.ABWSWR = "N"; /* Do not obtain data*/

    end


              /* (Assign Constant Fields)*/

    AB0GW01.XDMCD = "00"; /* Dimension cd*/
    AB0GW01.XQACD = "01"; /* Qual cd*/


                /* (Set Update Flag)*/
    AB0GW01.AB0GWUPD = "N"; /* Set flag off*/



           /* (Compute for Maximum Map Dtl Lines)*/

    move " " to AB0GM002.AB0GMCLR[1] for all; /* Move spaces to color fld*/
    ABWREC.ABWMPMAX = sysVar.arrayIndex; /* Obtain max lines from EZETST*/

    move " " to AB0GM001.AB0GMCLR[1] for all; /* Move spaces to color fld*/
    ABWREC.ABWMPMAX = sysVar.arrayIndex; /* Obtain max lines from EZETST*/


           /* (Calculate for Temporary Storage Size)*/

    ABWREC.ABWTSL = ABWREC.ABWMPMAX * 124; /* Max lines * TSQ data length*/
    ABWREC.ABWTSL = ABWREC.ABWTSL + 4; /* Add 4 bytes for TSQ info*/


           /* (Set Protect,Dark all Map Dtl Items)*/

    set AB0GM001.AB0GMCLH skip, invisible; /* Protect,darken hdgs*/
    set AB0GM001.AB0GMTLH skip, invisible; /* Protect,darken hdgs*/
    set AB0GM002.AB0GMCLH skip, invisible; /* Protect,darken hdgs*/
    set AB0GM002.AB0GMTLH skip, invisible; /* Protect,darken hdgs*/

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 7) /* Process all size descriptions*/
      set AB0GM001.SY4IDDSC[ABWIXM] skip, invisible;
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 3) /* Process all size descriptions*/
      set AB0GM002.SY4IDDSC[ABWIXM] skip, invisible;
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end


    ABWREC.ABWIDX1 = 1; /* Initialize loop index*/

    while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Protect,dark map dtl lines*/

      set AB0GM001.AB0GMCLR[ABWIDX1] skip, invisible; /* Color cd*/
      set AB0GM001.AB0GMQ1[ABWIDX1] skip, invisible; /* Qty 1*/
      set AB0GM001.AB0GMQ2[ABWIDX1] skip, invisible; /* Qty 2*/
      set AB0GM001.AB0GMQ3[ABWIDX1] skip, invisible; /* Qty 3*/
      set AB0GM001.AB0GMQ4[ABWIDX1] skip, invisible; /* Qty 4*/
      set AB0GM001.AB0GMQ5[ABWIDX1] skip, invisible; /* Qty 5*/
      set AB0GM001.AB0GMQ6[ABWIDX1] skip, invisible; /* Qty 6*/
      set AB0GM001.AB0GMQ7[ABWIDX1] skip, invisible; /* Qty 7*/
      set AB0GM001.AB0GMTOT[ABWIDX1] skip, invisible; /* Qty totals*/
      set AB0GM002.AB0GMQ1[ABWIDX1] skip, invisible; /* Qty 1*/
      set AB0GM002.AB0GMQ2[ABWIDX1] skip, invisible; /* Qty 2*/
      set AB0GM002.AB0GMQ3[ABWIDX1] skip, invisible; /* Qty 3*/
      set AB0GM002.AB0GMTOT[ABWIDX1] skip, invisible; /* Qty totals*/

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/

    end


                    /* (Converse Main Process)*/

    goto AB0G001; /* Converse Apparel Buy Application*/


    AB0G001: AB0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0G001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0G

// Choose which map to display
Function AB0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  AB0G100(); /* Display map 1*/



end // end AB0G001

// Driver process for 100 map
Function AB0G100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB0G110(); /* Obtain the data to display*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2:*/
    AB0G120(); /* Format and display the map 1*/
  else
    AB0G125(); /* Format and display the map 2*/
  end

  AB0G130(); /* Check attention identifier*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2:*/
    AB0G140(); /* Reset fields to normal intensity -*/
                                   /* map 1*/
  else
    AB0G145(); /* Reset fields to normal intensity -*/
                                   /* map 2*/
  end

  AB0G150(); /* Verify the entered data*/

  AB0G160(); /* Process valid input request*/


end // end AB0G100

// Obtain the data to display
Function AB0G110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || ABWREC.ABWSWR != "Y")             /* or Data was not requested*/
    if (converseVar.eventKey not pf19 /* previous style*/
     && converseVar.eventKey not pf20) /* next style*/
      return; /* Return to previous process*/
    end
  end

  if (converseVar.eventKey is pf19) /* previous style*/
    if (AB0GW03.AB0GW-STYLE-IDX > 1)
      AB0GW03.AB0GW-STYLE-IDX = AB0GW03.AB0GW-STYLE-IDX - 1;
      AB0GW01.AB0GW-PF13-MODE = "N"; /* pf13 not selected*/
    else
      ABWREC.ABWNMO = 46;
      return;
    end
  end

  if (converseVar.eventKey is pf20) /* next style*/
    if (AB0GW03.AB0GW-STYLE-IDX < AB0GW03.AB0GW-STYLE-CNT)
      AB0GW03.AB0GW-STYLE-IDX = AB0GW03.AB0GW-STYLE-IDX + 1;
      AB0GW01.AB0GW-PF13-MODE = "N"; /* pf13 not selected*/
    else
      ABWREC.ABWNMO = 47;
      return;
    end
  end

  move 0 to AB0GW-SIZE-QTY-TOTAL[1] for all; /* Initialize size qty accums*/
  AB0GW-COLOR-QTY-TOTAL = 0; /* Initialize color qty accum*/

  AB0G111(); /* Purge any temporary storage*/

  if (ABWREC.ABWSWR == "Y"           /* or Data was not requested*/
   && AB0GW01.AB0GW-PF13-MODE != "Y" /* pf13 not selected*/
   && AB0GW01.AB0GWUPD != "Y")      
    AB0G112(); /* load style list*/
  end

  if (ABWREC.ABWSWR == "Y"         /* Data was requested*/
   || converseVar.eventKey is pf19 /* prev style*/
   || converseVar.eventKey is pf20) /* next style*/
    if (AB0GW01.AB0GW-PF13-MODE != "Y" /* pf13 not selected*/
     && AB0GW03.AB0GW-STYLE-CNT > 0    
     && AB0GW01.AB0GWUPD != "Y")      
      AB0G113(); /* validate current style*/
    end
  end
   /* ------------------------------------------------------------*/
   /* - If EZEAID not PF13, Obtain and format rows from the*/
       /* Safety Stock Data Base (DABUY.VSAFTY01)*/
    /* Otherwise, Obtain and format all colors for the style*/
      /* being processed from DPRODG.VSYCLR01. If some colors*/
      /* for the style exists in DABUY.VSAFTY01, then retrieve*/
      /* the quantities (per size) and format in map for possible*/
      /* update.*/
    /* Note that although there are two (2) possible primary*/
     /* input databases in this application, this is transparent*/
     /* to the update process since there is only one common save*/
     /* area for data to be updated or deleted.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /**/
   && AB0GW03.AB0GW-STYLE-CNT == 0) /**/
    if (XP1REC.SY1STNBR == " "
     || XP1REC.XWHCD == " "
     || XP1REC.XOWCD == " ")
      converseLib.validationFailed(119);
      if (XP1REC.SY1STNBR == " ")
        if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
          set AB0GM001.SY1STNBR cursor, bold;
        else
          set AB0GM002.SY1STNBR cursor, bold;
        end
      end
      if (XP1REC.XWHCD == " ")
        if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
          set AB0GM001.XWHCD cursor, bold;
        else
          set AB0GM002.XWHCD cursor, bold;
        end
      end
      if (XP1REC.XOWCD == " ")
        if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
          set AB0GM001.XOWCD cursor, bold;
        else
          set AB0GM002.XOWCD cursor, bold;
        end
      end
      return;
    end
  end

  if (converseVar.eventKey not pf13 /* Process Safety Stock rows*/
   && AB0GW01.AB0GW-PF13-MODE != "Y") /* pf13 not selected*/

    if (AB0GW03.AB0GW-STYLE-CNT > 0)
      AB0G116(); /* Process DABUY.VSAFTY01 rows*/
    end

  else /* (else process Style/Color rows)*/

    AB0G117(); /* Process DPRODG.VSYCLR01 rows*/
  end




   /* ------------------------------------------------------------*/
   /* Check Obtain Data Status.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    if (AB0GW01.AB0GWUPD == "Y") /* Successful updates done*/

      if (AB0GW01.AB0GWTSP > ABWREC.TA5TSQIX) /* Less pages obtained*/
        ABWREC.ABWTSP = ABWREC.TA5TSQIX; /* Max page for display*/
      else
        ABWREC.ABWTSP = AB0GW01.AB0GWTSP; /* Saved page for display*/
      end

    else

      ABWREC.ABWTSP = 1; /* Page one for display*/

    end

  end


  ABWREC.ABWSWR = "N"; /* Request for data completed*/
  AB0GW01.AB0GWUPD = "N"; /* Reset update flag*/


end // end AB0G110

// Purge any temporary storage
Function AB0G111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/


  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/



  call "TA0050" (AB0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/
                                        /* ; subroutine*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end



  ABWREC.ABWTSP = 0; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AB0G111

// build style list
Function AB0G112()
   /* ------------------------------------------------------------*/
           /* *** Process DABUY.VSAFTY01 Rows ****/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/



  AB0GS20(); /* Select set and open the cursor*/



  if (converseVar.validationMsgNum == 0) /* No errors were found*/


    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/

    set AB0GW03 empty; /* Clear temporary storage record*/

    AB0GW03.AB0GW-STYLE-CNT = 0; /* Initialize STYLE COUNT*/
    AB0GW03.AB0GW-STYLE-IDX = 1; /* Initialize STYLE INDEX*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0GS21(); /* Obtain data*/

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end


  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0GS22(); /* Close the selected set cursor*/
  end



end // end AB0G112

// get xga/xsu for curr style
Function AB0G113()
  if (AB0GW03.SY1STNBR[AB0GW-STYLE-IDX] == " ")
    return; /* Return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0GS24(); /* Select set style*/

  AB0GS25(); /* Validate style*/

  AB0GS16(); /* Close style cursor*/



end // end AB0G113

// Process DABUY.VSAFTY01 rows
Function AB0G116()
   /* ------------------------------------------------------------*/
           /* *** Process DABUY.VSAFTY01 Rows ****/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/



  AB0GS01(); /* Select set and open the cursor*/



  if (converseVar.validationMsgNum == 0) /* No errors were found*/


    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    ABWREC.ABWIXM = 1; /* Initialize display line number*/

    set AB0GW02 empty; /* Clear temporary storage record*/


    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0GS02(); /* Obtain data and format page*/

      if (ABWREC.ABWIXM > ABWREC.ABWMPMAX) /* Page is full*/
        AB0GS05(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end


  end



  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && ABWREC.ABWIXM > 1)                /* and page was formatted*/

    ABWREC.ABWIDX1 = ABWREC.ABWIXM; /* Determine start line*/
    while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Until end of lines*/

      AB0GW02.AB0GWCLR[ABWIDX1] = "***"; /* Indicate unused line*/

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

    end

    if (ABWREC.ABWIXM == 12) /* was the page filled up?*/

      AB0GS05(); /* Add page to temporary storage*/

      AB0GW02.AB0GWCLR[1] = "TTL"; /* Indicate total line*/
      AB0GW02.AB0GWQ1[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[1];
                                   /* qty 1*/
      AB0GW02.AB0GWQ2[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[2];
                                   /* qty 2*/
      AB0GW02.AB0GWQ3[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[3];
                                   /* qty 3*/
      AB0GW02.AB0GWQ4[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[4];
                                   /* qty 4*/
      AB0GW02.AB0GWQ5[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[5];
                                   /* qty 5*/
      AB0GW02.AB0GWQ6[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[6];
                                   /* qty 6*/
      AB0GW02.AB0GWQ7[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[7];
                                   /* qty 7*/
      AB0GW02.AB0GWQ8[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[8];
                                   /* qty 8*/
      AB0GW02.AB0GWQ9[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[9];
                                   /* qty 9*/
      AB0GW02.AB0GWQ10[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[10];
                                   /* qty 10*/
      AB0GW02.AB0GWTOT[1] = AB0GW01.AB0GW-COLOR-QTY-TOTAL; /* total*/

      ABWREC.ABWIDX1 = 2; /* Determine start line*/
      while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Until end of lines*/

        AB0GW02.AB0GWCLR[ABWIDX1] = "***"; /* Indicate unused line*/

        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

      end

      AB0GS05(); /* Add page to temporary storage*/

    else /* else move the total line to the temp*/
                                   /* storage record*/
      AB0GW02.AB0GWCLR[ABWIXM] = "TTL"; /* Indicate total line*/
      AB0GW02.AB0GWQ1[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[1]; /* qty 1*/
      AB0GW02.AB0GWQ2[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[2]; /* qty 2*/
      AB0GW02.AB0GWQ3[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[3]; /* qty 3*/
      AB0GW02.AB0GWQ4[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[4]; /* qty 4*/
      AB0GW02.AB0GWQ5[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[5]; /* qty 5*/
      AB0GW02.AB0GWQ6[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[6]; /* qty 6*/
      AB0GW02.AB0GWQ7[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[7]; /* qty 7*/
      AB0GW02.AB0GWQ8[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[8]; /* qty 8*/
      AB0GW02.AB0GWQ9[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[9]; /* qty 9*/
      AB0GW02.AB0GWQ10[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[10]; /* qty 10*/
      AB0GW02.AB0GWTOT[ABWIXM] = AB0GW01.AB0GW-COLOR-QTY-TOTAL; /* total*/

      AB0GS05(); /* Add page to temporary storage*/

    end

  end



  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0GS06(); /* Close the selected set cursor*/
  end



end // end AB0G116

// Process DPRODG.VSYCLR01 rows
Function AB0G117()
   /* ------------------------------------------------------------*/
           /* *** Process DPRODG.VSYCLR01 Rows ****/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/



  AB0GS07(); /* Select set and open the cursor*/



  if (converseVar.validationMsgNum == 0) /* No errors were found*/


    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    ABWREC.ABWIXM = 1; /* Initialize display line number*/

    set AB0GW02 empty; /* Clear temporary storage record*/


    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0GS08(); /* Obtain data and format page*/

      if (ABWREC.ABWIXM > ABWREC.ABWMPMAX) /* Page is full*/
        AB0GS05(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end


  end


  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && ABWREC.ABWIXM > 1)                /* and page was formatted*/

    ABWREC.ABWIDX1 = ABWREC.ABWIXM; /* Determine start line*/
    while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Until end of lines*/

      AB0GW02.AB0GWCLR[ABWIDX1] = "***"; /* Indicate unused line*/

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

    end

    if (ABWREC.ABWIXM == 12) /* was the page filled up?*/

      AB0GS05(); /* Add page to temporary storage*/

      AB0GW02.AB0GWCLR[1] = "TTL"; /* Indicate total line*/
      AB0GW02.AB0GWQ1[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[1];
                                   /* qty 1*/
      AB0GW02.AB0GWQ2[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[2];
                                   /* qty 2*/
      AB0GW02.AB0GWQ3[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[3];
                                   /* qty 3*/
      AB0GW02.AB0GWQ4[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[4];
                                   /* qty 4*/
      AB0GW02.AB0GWQ5[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[5];
                                   /* qty 5*/
      AB0GW02.AB0GWQ6[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[6];
                                   /* qty 6*/
      AB0GW02.AB0GWQ7[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[7];
                                   /* qty 7*/
      AB0GW02.AB0GWQ8[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[8];
                                   /* qty 8*/
      AB0GW02.AB0GWQ9[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[9];
                                   /* qty 9*/
      AB0GW02.AB0GWQ10[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[10];
                                   /* qty 10*/
      AB0GW02.AB0GWTOT[1] = AB0GW01.AB0GW-COLOR-QTY-TOTAL; /* total*/

      ABWREC.ABWIDX1 = 2; /* Determine start line*/
      while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Until end of lines*/

        AB0GW02.AB0GWCLR[ABWIDX1] = "***"; /* Indicate unused line*/

        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

      end

      AB0GS05(); /* Add page to temporary storage*/

    else /* else move the total line to the temp*/
                                   /* storage record*/
      AB0GW02.AB0GWCLR[ABWIXM] = "TTL"; /* Indicate total line*/
      AB0GW02.AB0GWQ1[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[1]; /* qty 1*/
      AB0GW02.AB0GWQ2[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[2]; /* qty 2*/
      AB0GW02.AB0GWQ3[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[3]; /* qty 3*/
      AB0GW02.AB0GWQ4[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[4]; /* qty 4*/
      AB0GW02.AB0GWQ5[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[5]; /* qty 5*/
      AB0GW02.AB0GWQ6[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[6]; /* qty 6*/
      AB0GW02.AB0GWQ7[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[7]; /* qty 7*/
      AB0GW02.AB0GWQ8[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[8]; /* qty 8*/
      AB0GW02.AB0GWQ9[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[9]; /* qty 9*/
      AB0GW02.AB0GWQ10[ABWIXM] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[10]; /* qty 10*/
      AB0GW02.AB0GWTOT[ABWIXM] = AB0GW01.AB0GW-COLOR-QTY-TOTAL; /* total*/

      AB0GS05(); /* Add page to temporary storage*/

    end

  end




  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0GS10(); /* Close the selected set cursor*/
  end



end // end AB0G117

// Format and display map 1
Function AB0G120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/



  if (ABWREC.ABWFIRST != " ") /* Not first time through*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/

      AB0G121(); /* Format map page data from TSQ*/

      if (converseVar.validationMsgNum == 0) /* No error message to display*/
        if (ABWREC.ABWNMO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(ABWREC.ABWNMO);
        end /* Information message number*/
      end

    end

  end



  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && ABWREC.ABWFIRST != " ")           /* Not first time*/
    set AB0GM001.AB0GMQ1[1] cursor; /* Set cursor at map dtl area*/
  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AB0GM001 alarm; /* Indicate sound alarm*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  end


  AB0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AB0GM001.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  AB0GM001.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  set AB0GM001.XGACD skip; /* Protect XGACD map field*/
  set AB0GM001.XSUCD skip; /* Protect XsuCD map field*/

  ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/



   /* *==============================**/
   /* * Check security authorization **/
   /* *==============================**/

  if (COMMAREA.CACLVL[1] == "N") /* No data changes allowed*/

               /* (User has Inquiry Profile)*/

    if (converseVar.validationMsgNum == 0 /* No errors found*/
     || converseVar.validationMsgNum == 5) /* No data found to display*/
      set AB0GM001.XSECD cursor; /* Position cursor at userid fld*/
    end

    if (ABWREC.TA5TSQIX == 0) /* No data to display*/

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0GM001.AB0GMQ1[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ2[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ3[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ4[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ5[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ6[ABWIX2] skip, invisible;
        set AB0GM001.AB0GMQ7[ABWIX2] skip, invisible;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    else

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0GM001.AB0GMQ1[ABWIX2] skip;
        set AB0GM001.AB0GMQ2[ABWIX2] skip;
        set AB0GM001.AB0GMQ3[ABWIX2] skip;
        set AB0GM001.AB0GMQ4[ABWIX2] skip;
        set AB0GM001.AB0GMQ5[ABWIX2] skip;
        set AB0GM001.AB0GMQ6[ABWIX2] skip;
        set AB0GM001.AB0GMQ7[ABWIX2] skip;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    end

  else

           /* (User has Scheduler/Supervisor Profile)*/

    if (COMMAREA.CACLVL[1] == "Y") /* Data changes allowed*/

      if (converseVar.validationMsgNum == 5 /* No data to display*/
       || ABWREC.ABWSWU == " ")             /* First time security chk*/
        set AB0GM001.XSECD cursor; /* Cursor position*/
      else
        if (converseVar.validationMsgNum == 0) /* No errors found*/
          set AB0GM001.AB0GMQ1[1] cursor; /* Cursor position*/
        end
      end

    end
  end

   /* msg 119 - new styles require style, whse, og.  enter and retry pf13*/

  if (converseVar.validationMsgNum == 119) /**/
    ABWREC.ABWIX2 = 1; /* Initialize loop index*/
    while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
      set AB0GM001.AB0GMQ1[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ2[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ3[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ4[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ5[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ6[ABWIX2] skip, invisible;
      set AB0GM001.AB0GMQ7[ABWIX2] skip, invisible;
      ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
    end
  end

  converse AB0GM001 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  COMMAREA.CATOAP = AB0GM001.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = AB0GM001.CAITEM; /* Fast path information*/


end // end AB0G120

// Format selected data- map 1
Function AB0G121()
   /* ------------------------------------------------------------*/
    /* Clear Map for New Data to Display*/
   /* ------------------------------------------------------------*/

  set AB0GM001 initial;



   /* ------------------------------------------------------------*/
    /* Format Map Header Information from XP1REC fields.*/
   /* ------------------------------------------------------------*/

   /* ***** SELECTION CRITERIA *************/
  AB0GM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AB0GM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AB0GM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AB0GM001.XWHCD = XP1REC.XWHCD; /* Whse cd*/
  AB0GM001.XOWCD = XP1REC.XOWCD; /* Own group cd*/

  AB0GM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style desc*/
  AB0GM001.XWHABRV = XP1REC.XWHABRV; /* Whse desc*/
  AB0GM001.XOWABRV = XP1REC.XOWABRV; /* Own group desc*/

   /* ***** CURRENT STYLE *************/
  if (AB0GW03.AB0GW-STYLE-IDX >= 1)
    AB0GM001.AB0GM-CURR-STYLE = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX];
    AB0GM001.AB0GM-CURR-WHSE = AB0GW03.XWHCD[AB0GW-STYLE-IDX];
    AB0GM001.AB0GM-CURR-OG = AB0GW03.XOWCD[AB0GW-STYLE-IDX];
    AB0GM001.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
    AB0GM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
  end


   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    set AB0GM001.AB0GMCLH skip, invisible; /* Darken hdgs*/
    set AB0GM001.AB0GMTLH skip, invisible; /* Darken hdgs*/

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 7) /* Process all size descriptions*/
      set AB0GM001.SY4IDDSC[ABWIXM] skip, invisible; /* Darken hdgs*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

      set AB0GM001.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM001.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
      set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
      set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
      set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      set AB0GM001.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end

    set AB0GM001.XSECD cursor; /* Set cursor position*/
    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(5); /* Indicate no data to display*/

    return; /* Return to previous process*/

  end


  set AB0GM001.AB0GMQ1[1] cursor; /* Set cursor position*/


   /* ------------------------------------------------------------*/
   /* Display the Size Descriptions.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWIXM = 1; /* Initialize loop index*/


  while (ABWREC.ABWIXM <= 7) /* Display all sizes*/

    AB0GM001.SY4IDDSC[ABWIXM] = AB0GW01.SY4IDDSC[ABWIXM];
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end



   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  AB0G122(); /* Obtain TSQ page*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Not Unused line*/
      AB0GM001.AB0GMCLR[ABWIXM] = AB0GW02.AB0GWCLR[ABWIXM]; /* Clr*/
      AB0GM001.AB0GMQ1[ABWIXM] = AB0GW02.AB0GWQ1[ABWIXM]; /* Qty 1*/
      AB0GM001.AB0GMQ2[ABWIXM] = AB0GW02.AB0GWQ2[ABWIXM]; /* Qty 2*/
      AB0GM001.AB0GMQ3[ABWIXM] = AB0GW02.AB0GWQ3[ABWIXM]; /* Qty 3*/
      AB0GM001.AB0GMQ4[ABWIXM] = AB0GW02.AB0GWQ4[ABWIXM]; /* Qty 4*/
      AB0GM001.AB0GMQ5[ABWIXM] = AB0GW02.AB0GWQ5[ABWIXM]; /* Qty 5*/
      AB0GM001.AB0GMQ6[ABWIXM] = AB0GW02.AB0GWQ6[ABWIXM]; /* Qty 6*/
      AB0GM001.AB0GMQ7[ABWIXM] = AB0GW02.AB0GWQ7[ABWIXM]; /* Qty 7*/
      AB0GM001.AB0GMTOT[ABWIXM] = AB0GW02.AB0GWTOT[ABWIXM]; /* Totals*/
      if (AB0GW02.AB0GWCLR[ABWIXM] == "TTL") /* if total line*/
        set AB0GM001.AB0GMQ1[ABWIXM] skip; /* Qty 1*/
        set AB0GM001.AB0GMQ2[ABWIXM] skip; /* Qty 2*/
        set AB0GM001.AB0GMQ3[ABWIXM] skip; /* Qty 3*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip; /* Qty 7*/
        set AB0GM001.AB0GMTOT[ABWIXM] skip; /* Totals*/
      end
    else /* (Unused line)*/
      set AB0GM001.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM001.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
      set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
      set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
      set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      set AB0GM001.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



   /* ------------------------------------------------------------*/
   /* Protect all unused columns on all map detail lines.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = AB0GW01.AB0GWSZC; /* Initialize loop index*/

  while (ABWREC.ABWIXM <= 7) /* process all columns from start pt.*/
    set AB0GM001.SY4IDDSC[ABWIXM] skip, invisible; /* Size desc*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end



  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Not Unused line*/

      if (AB0GW01.AB0GWSZC == 2) /* One size obtained*/
        set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
        set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 3) /* two sizes obtained*/
        set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 4) /* three sizes obtained*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 5) /* four  sizes obtained*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 6) /* five  sizes obtained*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 7) /* six   sizes obtained*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end



    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end



end // end AB0G121

// Read temporary storage page
Function AB0G122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/


  AB0GW02.AB0GWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/


  call "TA0050" (AB0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0G122

// Format and display map 2
Function AB0G125()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/



  if (ABWREC.ABWFIRST != " ") /* Not first time through*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/

      AB0G126(); /* Format map page data from TSQ*/

      if (converseVar.validationMsgNum == 0) /* No error message to display*/
        if (ABWREC.ABWNMO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(ABWREC.ABWNMO);
        end /* Information message number*/
      end

    end

  end



  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && ABWREC.ABWFIRST != " ")           /* Not first time*/
    set AB0GM002.AB0GMQ1[1] cursor; /* Set cursor at map dtl area*/
  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AB0GM002 alarm; /* Indicate sound alarm*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  end


  AB0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AB0GM002.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  AB0GM002.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  set AB0GM002.XGACD skip; /* Protect XGACD map field*/
  set AB0GM002.XSUCD skip; /* Protect XSUCD map field*/

  ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/



   /* *==============================**/
   /* * Check security authorization **/
   /* *==============================**/

  if (COMMAREA.CACLVL[1] == "N") /* No data changes allowed*/

               /* (User has Inquiry Profile)*/

    if (converseVar.validationMsgNum == 0 /* No errors found*/
     || converseVar.validationMsgNum == 5) /* No data found to display*/
      set AB0GM002.XSECD cursor; /* Position cursor at userid fld*/
    end

    if (ABWREC.TA5TSQIX == 0) /* No data to display*/

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0GM002.AB0GMQ1[ABWIX2] skip, invisible;
        set AB0GM002.AB0GMQ2[ABWIX2] skip, invisible;
        set AB0GM002.AB0GMQ3[ABWIX2] skip, invisible;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    else

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0GM002.AB0GMQ1[ABWIX2] skip;
        set AB0GM002.AB0GMQ2[ABWIX2] skip;
        set AB0GM002.AB0GMQ3[ABWIX2] skip;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    end

  else

           /* (User has Scheduler/Supervisor Profile)*/

    if (COMMAREA.CACLVL[1] == "Y") /* Data changes allowed*/

      if (converseVar.validationMsgNum == 5 /* No data to display*/
       || ABWREC.ABWSWU == " ")             /* First time security chk*/
        set AB0GM002.XSECD cursor; /* Cursor position*/
      else
        if (converseVar.validationMsgNum == 0) /* No errors found*/
          set AB0GM002.AB0GMQ1[1] cursor; /* Cursor position*/
        end
      end

    end
  end

   /* msg 119:  new styles require style, whse, og.  enter and retry pf13.*/

  if (converseVar.validationMsgNum == 119) /**/
    ABWREC.ABWIX2 = 1; /* Initialize loop index*/
    while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
      set AB0GM002.AB0GMQ1[ABWIX2] skip, invisible;
      set AB0GM002.AB0GMQ2[ABWIX2] skip, invisible;
      set AB0GM002.AB0GMQ3[ABWIX2] skip, invisible;
      ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
    end
  end

  converse AB0GM002 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  COMMAREA.CATOAP = AB0GM002.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = AB0GM002.CAITEM; /* Fast path information*/


end // end AB0G125

// Format selected data - map 2
Function AB0G126()
   /* ---------------------------------------------------------------*/
    /* Clear Map for New Data to Display*/
   /* ------------------------------------------------------------*/

  set AB0GM002 initial;



   /* ------------------------------------------------------------*/
    /* Format Map Header Information from XP1REC fields.*/
   /* ------------------------------------------------------------*/

   /* ***** SELECTION CRITERIA *************/
  AB0GM002.XSECD = XP1REC.XSECD; /* Season cd*/
  AB0GM002.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AB0GM002.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AB0GM002.XWHCD = XP1REC.XWHCD; /* Whse cd*/
  AB0GM002.XOWCD = XP1REC.XOWCD; /* Own group cd*/

  AB0GM002.SY1SSTNM = XP1REC.SY1SSTNM; /* Style desc*/
  AB0GM002.XWHABRV = XP1REC.XWHABRV; /* Whse desc*/
  AB0GM002.XOWABRV = XP1REC.XOWABRV; /* Own group desc*/

   /* ***** CURRENT STYLE *************/
  if (AB0GW03.AB0GW-STYLE-IDX >= 1)
    AB0GM002.AB0GM-CURR-STYLE = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX];
    AB0GM002.AB0GM-CURR-WHSE = AB0GW03.XWHCD[AB0GW-STYLE-IDX];
    AB0GM002.AB0GM-CURR-OG = AB0GW03.XOWCD[AB0GW-STYLE-IDX];
    AB0GM002.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
    AB0GM002.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
  end


   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    set AB0GM002.AB0GMCLH skip, invisible; /* Darken hdgs*/
    set AB0GM002.AB0GMTLH skip, invisible; /* Darken hdgs*/

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 3) /* Process all size descriptions*/
      set AB0GM002.SY4IDDSC[ABWIXM] skip, invisible; /* Darken hdgs*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

      set AB0GM002.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM002.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM002.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end

    set AB0GM002.XSECD cursor; /* Set cursor position*/
    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(5); /* Indicate no data to display*/

    return; /* Return to previous process*/

  end


  set AB0GM002.AB0GMQ1[1] cursor; /* Set cursor position*/


   /* ------------------------------------------------------------*/
   /* Display the Size Descriptions.*/
   /* ------------------------------------------------------------*/


  AB0GM002.SY4IDDSC[1] = AB0GW01.SY4IDDSC[8];
  AB0GM002.SY4IDDSC[2] = AB0GW01.SY4IDDSC[9];
  AB0GM002.SY4IDDSC[3] = AB0GW01.SY4IDDSC[10];


   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  AB0G122(); /* Obtain TSQ page*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Not Unused line*/
      AB0GM002.AB0GMCLR[ABWIXM] = AB0GW02.AB0GWCLR[ABWIXM]; /* Clr*/
      AB0GM002.AB0GMQ1[ABWIXM] = AB0GW02.AB0GWQ8[ABWIXM]; /* Qty 8*/
      AB0GM002.AB0GMQ2[ABWIXM] = AB0GW02.AB0GWQ9[ABWIXM]; /* Qty 9*/
      AB0GM002.AB0GMQ3[ABWIXM] = AB0GW02.AB0GWQ10[ABWIXM]; /* Qty 10*/
      AB0GM002.AB0GMTOT[ABWIXM] = AB0GW02.AB0GWTOT[ABWIXM]; /* Totals*/

      if (AB0GW02.AB0GWCLR[ABWIXM] == "TTL") /* If total line, protect flds*/
        set AB0GM002.AB0GMQ1[ABWIXM] skip; /* Qty 1*/
        set AB0GM002.AB0GMQ2[ABWIXM] skip; /* Qty 2*/
        set AB0GM002.AB0GMQ3[ABWIXM] skip; /* Qty 3*/
        set AB0GM002.AB0GMTOT[ABWIXM] skip; /* Totals*/
      end

    else /* (Unused line)*/
      set AB0GM002.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM002.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM002.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end


   /* ------------------------------------------------------------*/
   /* Protect all unused columns on all map detail lines.*/
   /* ------------------------------------------------------------*/


  if (AB0GW01.AB0GWSZC == 9) /* 8 sizes obtained*/

    set AB0GM002.SY4IDDSC[2] skip, invisible; /* Size desc*/
    set AB0GM002.SY4IDDSC[3] skip, invisible; /* Size desc*/

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

      set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

    end

  end

  if (AB0GW01.AB0GWSZC == 10) /* 9 sizes obtained*/

    set AB0GM002.SY4IDDSC[3] skip, invisible; /* Size desc*/

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

    end

  end



end // end AB0G126

// Check attention identifier
Function AB0G130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      set AB0GM001 initial; /* Clear the map fields*/
    else
      set AB0GM002 initial; /* Clear the map fields*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (ABWREC.ABWMAP == "1") /* map 1?*/
    if (AB0GM001.CATOAP > " ") /* FAST PATH was requested*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        COMMAREA.CATOAP = AB0GM001.CATOAP; /* TO application*/
        COMMAREA.CAITEM = AB0GM001.CAITEM; /* Application data*/
        XSABS01(); /* Exit to another application*/
      else
        converseLib.validationFailed(4); /* Indicate PF key not valid*/
      end

      set AB0GM001.CATOAP cursor, modified, bold; /* Highlight*/
      ABWREC.ABWPRCSN = "130 "; /* Process number*/
      AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      exit stack; /* Exit to redisplay map*/

    end
  else /* map 2*/
    if (AB0GM002.CATOAP > " ") /* FAST PATH was requested*/

      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        COMMAREA.CATOAP = AB0GM002.CATOAP; /* TO application*/
        COMMAREA.CAITEM = AB0GM002.CAITEM; /* Application data*/
        XSABS01(); /* Exit to another application*/
      else
        converseLib.validationFailed(4); /* Indicate PF key not valid*/
      end

      set AB0GM002.CATOAP cursor, modified, bold; /* Highlight*/
      ABWREC.ABWPRCSN = "130 "; /* Process number*/
      AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      exit stack; /* Exit to redisplay map*/

    end
  end


  if (AB0GM001.CAITEM > " ") /* Application data was entered*/
    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      set AB0GM001.CAITEM cursor, modified, bold; /* Highlight data*/
    else
      set AB0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    end
    converseLib.validationFailed(7); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0GM001"; /* Appl find code*/
    end

    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0G130

// Reset highlighted flds - map 1
Function AB0G140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AB0GM001.XSECD initialAttributes; /* Reset XSECD*/
  set AB0GM001.XSNYR initialAttributes; /* Reset XSNYR*/
  set AB0GM001.SY1STNBR initialAttributes; /* Reset Styleno.*/
  set AB0GM001.SY1SSTNM initialAttributes; /* Reset Style name*/
  set AB0GM001.XWHCD initialAttributes; /* Reset XWHCD*/
  set AB0GM001.XWHABRV initialAttributes; /* Reset XWHABRV*/
  set AB0GM001.XOWCD initialAttributes; /* Reset XOWCD*/
  set AB0GM001.XOWABRV initialAttributes; /* Reset XOWABRV*/
  set AB0GM001.AB0GM-CURR-STYLE initialAttributes; /* RESET CURR STYLE*/
  set AB0GM001.AB0GM-CURR-WHSE initialAttributes; /* RESET CURR STYLE*/
  set AB0GM001.AB0GM-CURR-OG initialAttributes; /* RESET CURR STYLE*/
  set AB0GM001.XGACD initialAttributes; /* Reset XGACD*/
  set AB0GM001.XSUCD initialAttributes; /* Reset XSUCD*/

  set AB0GM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0GM001.CAITEM initialAttributes; /* Commarea application data*/

  AB0GM001.XXXPRCNM = "AB0G    "; /* Reset process name*/
  ABWREC.ABWERLOC = "AB0G    "; /* Reset process name*/


  set AB0GM001.AB0GMCLH initialAttributes; /* Reset hdgs*/
  set AB0GM001.AB0GMTLH initialAttributes; /* Reset hdgs*/


  ABWREC.ABWIXM = 1; /* Reset loop index*/
  while (ABWREC.ABWIXM <= 7) /* Process all size descriptions*/
    set AB0GM001.SY4IDDSC[ABWIXM] initialAttributes; /* Reset hdgs*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    set AB0GM001.AB0GMCLR[ABWIXM] initialAttributes; /* Clr*/
    set AB0GM001.AB0GMQ1[ABWIXM] initialAttributes; /* Qty 1*/
    set AB0GM001.AB0GMQ2[ABWIXM] initialAttributes; /* Qty 2*/
    set AB0GM001.AB0GMQ3[ABWIXM] initialAttributes; /* Qty 3*/
    set AB0GM001.AB0GMQ4[ABWIXM] initialAttributes; /* Qty 4*/
    set AB0GM001.AB0GMQ5[ABWIXM] initialAttributes; /* Qty 5*/
    set AB0GM001.AB0GMQ6[ABWIXM] initialAttributes; /* Qty 6*/
    set AB0GM001.AB0GMQ7[ABWIXM] initialAttributes; /* Qty 7*/
    set AB0GM001.AB0GMTOT[ABWIXM] initialAttributes; /* Totals*/

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



   /* ------------------------------------------------------------*/
   /* Protect all unused columns/lines on map detail area.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] == "***") /* Unused line*/
      set AB0GM001.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM001.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
      set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
      set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
      set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      set AB0GM001.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



  if (AB0GW01.AB0GWSZC > 1) /* Sizes obtained*/
    ABWREC.ABWIXM = AB0GW01.AB0GWSZC; /* Initialize loop index*/
  else
    return; /* Return to calling process*/
  end


  while (ABWREC.ABWIXM <= 7) /* process all columns from start pt.*/
    set AB0GM001.SY4IDDSC[ABWIXM] skip, invisible; /* Size desc*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end



  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Not Unused line*/

      if (AB0GW01.AB0GWSZC == 2) /* One size obtained*/
        set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
        set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 3) /* two sizes obtained*/
        set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 4) /* three sizes obtained*/
        set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 5) /* four  sizes obtained*/
        set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 6) /* five  sizes obtained*/
        set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end

      if (AB0GW01.AB0GWSZC == 7) /* six   sizes obtained*/
        set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7*/
      end


    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end



end // end AB0G140

// Reset highlighted flds - map 2
Function AB0G145()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AB0GM002.XSECD initialAttributes; /* Reset XSECD*/
  set AB0GM002.XSNYR initialAttributes; /* Reset XSNYR*/
  set AB0GM002.SY1STNBR initialAttributes; /* Reset Styleno.*/
  set AB0GM002.SY1SSTNM initialAttributes; /* Reset Style name*/
  set AB0GM002.XWHCD initialAttributes; /* Reset XWHCD*/
  set AB0GM002.XWHABRV initialAttributes; /* Reset XWHABRV*/
  set AB0GM002.XOWCD initialAttributes; /* Reset XOWCD*/
  set AB0GM002.XOWABRV initialAttributes; /* Reset XOWABRV*/
  set AB0GM002.AB0GM-CURR-STYLE initialAttributes; /* RESET CURR STYLE*/
  set AB0GM002.AB0GM-CURR-WHSE initialAttributes; /* RESET CURR STYLE*/
  set AB0GM002.AB0GM-CURR-OG initialAttributes; /* RESET CURR STYLE*/
  set AB0GM002.XGACD initialAttributes; /* Reset XGACD*/
  set AB0GM002.XSUCD initialAttributes; /* Reset XSUCD*/

  set AB0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0GM002.CAITEM initialAttributes; /* Commarea application data*/

  AB0GM002.XXXPRCNM = "AB0G    "; /* Reset process name*/
  ABWREC.ABWERLOC = "AB0G    "; /* Reset process name*/


  set AB0GM002.AB0GMCLH initialAttributes; /* Reset hdgs*/
  set AB0GM002.AB0GMTLH initialAttributes; /* Reset hdgs*/


  ABWREC.ABWIXM = 1; /* Reset loop index*/
  while (ABWREC.ABWIXM <= 3) /* Process all size descriptions*/
    set AB0GM002.SY4IDDSC[ABWIXM] initialAttributes; /* Reset hdgs*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    set AB0GM002.AB0GMCLR[ABWIXM] initialAttributes; /* Clr*/
    set AB0GM002.AB0GMQ1[ABWIXM] initialAttributes; /* Qty 1*/
    set AB0GM002.AB0GMQ2[ABWIXM] initialAttributes; /* Qty 2*/
    set AB0GM002.AB0GMQ3[ABWIXM] initialAttributes; /* Qty 3*/
    set AB0GM002.AB0GMTOT[ABWIXM] initialAttributes; /* Totals*/

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



   /* ------------------------------------------------------------*/
   /* Protect all unused columns/lines on map detail area.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] == "***") /* Unused line*/
      set AB0GM002.AB0GMCLR[ABWIXM] skip, invisible; /* Clr*/
      set AB0GM002.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1*/
      set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      set AB0GM002.AB0GMTOT[ABWIXM] skip, invisible; /* Totals*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end


  if (AB0GW01.AB0GWSZC > 1) /* Sizes obtained*/

    if (AB0GW01.AB0GWSZC == 9) /* nine sizes obtained*/
      ABWREC.ABWIXM = 2; /* move 2 to index*/
    end

    if (AB0GW01.AB0GWSZC == 10) /* ten sizes obtained*/
      ABWREC.ABWIXM = 3; /* move 3 to index*/
    end

  else
    return; /* Return to calling process*/
  end


  while (ABWREC.ABWIXM <= 3) /* process all columns from start pt.*/
    set AB0GM002.SY4IDDSC[ABWIXM] skip, invisible; /* Size desc*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end



  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Not Unused line*/

      if (AB0GW01.AB0GWSZC == 9) /* eight sizes obtained*/
        set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2*/
        set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      end

      if (AB0GW01.AB0GWSZC == 10) /* nine sizes obtained*/
        set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3*/
      end

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end



end // end AB0G145

// Verify the entered data
Function AB0G150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or Scroll forward request*/
   || converseVar.eventKey is pf10 /* or Scroll left request*/
   || converseVar.eventKey is pf11) /* or Scroll right request*/

    AB0G151(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      AB0G152(); /* Verify selection criteria for map 1*/
    else
      AB0G154(); /* Verify selection criteria for map 2*/
    end

  end



  if (converseVar.validationMsgNum != 0) /* Errors found*/

    set AB0GM001.AB0GMCLH skip, invisible; /* Darken hdgs*/
    set AB0GM001.AB0GMTLH skip, invisible; /* Darken hdgs*/
    set AB0GM002.AB0GMCLH skip, invisible; /* Darken hdgs*/
    set AB0GM002.AB0GMTLH skip, invisible; /* Darken hdgs*/


    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 7) /* Process all size descriptions*/
      set AB0GM001.SY4IDDSC[ABWIXM] skip, invisible; /* Darken hdgs*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 3) /* Process all size descriptions*/
      set AB0GM002.SY4IDDSC[ABWIXM] skip, invisible; /* Darken hdgs*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

      set AB0GM001.AB0GMCLR[ABWIXM] skip, invisible; /* Clr map 1*/
      set AB0GM001.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1 map 1*/
      set AB0GM001.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2 map 1*/
      set AB0GM001.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3 map 1*/
      set AB0GM001.AB0GMQ4[ABWIXM] skip, invisible; /* Qty 4 map 1*/
      set AB0GM001.AB0GMQ5[ABWIXM] skip, invisible; /* Qty 5 map 1*/
      set AB0GM001.AB0GMQ6[ABWIXM] skip, invisible; /* Qty 6 map 1*/
      set AB0GM001.AB0GMQ7[ABWIXM] skip, invisible; /* Qty 7 map 1*/
      set AB0GM001.AB0GMTOT[ABWIXM] skip, invisible; /* Totals map 1*/
      set AB0GM002.AB0GMCLR[ABWIXM] skip, invisible; /* Clr map 2*/
      set AB0GM002.AB0GMQ1[ABWIXM] skip, invisible; /* Qty 1 map 2*/
      set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* Qty 2 map 2*/
      set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* Qty 3 map 2*/
      set AB0GM002.AB0GMTOT[ABWIXM] skip, invisible; /* Totals map 2*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end

    exit stack; /* Exit to redisplay map*/

  else
    if (ABWREC.ABWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    else /* (Selection criteria unchanged)*/
      if (converseVar.eventKey not pf7  /* Not scroll request - backward*/
       && converseVar.eventKey not pf8  /* Not scroll request - forward*/
       && converseVar.eventKey not pf10 /* Not scroll request - left*/
       && converseVar.eventKey not pf11 /* Not scroll request - right*/
       && converseVar.eventKey not pf13) /* Not show all colors request*/
        AB0G153(); /* Verify any changed dtl data*/
        if (AB0GW01.AB0GWUPI != "Y") /* Valid updates not found*/
          exit stack; /* Exit to redisplay map*/
        else /* (Process updates)*/
        end

      end
    end
  end



end // end AB0G150

// Verify scroll request
Function AB0G151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end


  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && ABWREC.ABWMAP == "1")        /* and left screen already displayed*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* No more pages to display*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && ABWREC.ABWMAP == "2")        /* and right screen already displayed*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* No more pages to display*/

    if (AB0GW01.AB0GWSZC == 9) /* 8 sizes obtained, re-protect qty 2&3*/

      set AB0GM002.SY4IDDSC[2] skip, invisible; /* size desc*/
      set AB0GM002.SY4IDDSC[3] skip, invisible; /* size desc*/

      ABWREC.ABWIXM = 1; /* initialize line index*/

      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* until end of lines*/

        set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* qty 2*/
        set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* qty 3*/
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* loop through*/

      end

    end

    if (AB0GW01.AB0GWSZC == 10) /* 9 sizes obtained  re-protect qty 2*/

      set AB0GM002.SY4IDDSC[2] skip, invisible; /* size desc*/

      ABWREC.ABWIXM = 1; /* initialize line index*/

      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* until end of lines*/

        set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* qty 2*/
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* loop through*/

      end

    end

  end

    /* If PF11 is entered and there are no sizes to diplay to the right,*/
    /* display an error msg indicating no more sizes.*/

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && AB0GW01.AB0GWSZC <= 8)       /* and only 7 or less sizes*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(149); /* No more pages to display*/

  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  if (ABWREC.ABWMAP == "1") /* if map 1*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Check for map modifications*/

      if (AB0GM001.AB0GMQ1[ABWIXM] != AB0GW02.AB0GWQ1[ABWIXM])
        set AB0GM001.AB0GMQ1[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ2[ABWIXM] != AB0GW02.AB0GWQ2[ABWIXM])
        set AB0GM001.AB0GMQ2[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ3[ABWIXM] != AB0GW02.AB0GWQ3[ABWIXM])
        set AB0GM001.AB0GMQ3[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ4[ABWIXM] != AB0GW02.AB0GWQ4[ABWIXM])
        set AB0GM001.AB0GMQ4[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ5[ABWIXM] != AB0GW02.AB0GWQ5[ABWIXM])
        set AB0GM001.AB0GMQ5[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ6[ABWIXM] != AB0GW02.AB0GWQ6[ABWIXM])
        set AB0GM001.AB0GMQ6[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM001.AB0GMQ7[ABWIXM] != AB0GW02.AB0GWQ7[ABWIXM])
        set AB0GM001.AB0GMQ7[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line number*/

    end

  end


  if (ABWREC.ABWMAP == "2") /* if map 2*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Check for map modifications*/

      if (AB0GM002.AB0GMQ1[ABWIXM] != AB0GW02.AB0GWQ8[ABWIXM])
        set AB0GM002.AB0GMQ1[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM002.AB0GMQ2[ABWIXM] != AB0GW02.AB0GWQ9[ABWIXM])
        set AB0GM002.AB0GMQ2[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (AB0GM002.AB0GMQ3[ABWIXM] != AB0GW02.AB0GWQ10[ABWIXM])
        set AB0GM002.AB0GMQ3[ABWIXM] cursor, modified, bold; /* Highlight*/
        ABWREC.ABWPRCSN = "151 "; /* Process number*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end

      if (converseVar.validationMsgNum == 14) /* was an error found? protect qtys if*/
                                   /* error*/

        if (AB0GW01.AB0GWSZC == 9) /* 8 sizes obtained  re-protect qty 2&3*/

          set AB0GM002.SY4IDDSC[2] skip, invisible; /* size desc*/
          set AB0GM002.SY4IDDSC[3] skip, invisible; /* size desc*/

          ABWREC.ABWIXM = 1; /* initialize line index*/

          while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* until end of lines*/

            set AB0GM002.AB0GMQ2[ABWIXM] skip, invisible; /* qty 2*/
            set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* qty 3*/
            ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* loop through*/

          end

        end

        if (AB0GW01.AB0GWSZC == 10) /* 9 sizes obtained  re-protect qty 3*/

          set AB0GM002.SY4IDDSC[3] skip, invisible; /* size desc*/

          ABWREC.ABWIXM = 1; /* initialize line index*/

          while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* until end of lines*/

            set AB0GM002.AB0GMQ3[ABWIXM] skip, invisible; /* qty 3*/
            ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* loop through*/

          end

        end

      end


      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line number*/

    end

  end


  if (ABWREC.TA5TSQIX > 0) /* Data formatted into TSQ*/
    /* *************************************************************/
    /* *** the following code commented by G Gilray because appl ***/
    /* *** would not page forward on ADD function                ***/
    /* *************************************************************/
    /* EZEFLO                        ; Exit to redisplay map*/
    /* *** end of commented code by G Gilray 1/15/90 ***************/
  end



end // end AB0G151

// Edit selection criteria map 1
Function AB0G152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* =====  validate all selection criteria fields.         =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


  XP1REC.XP1MNO = 0; /* Reset error ind*/


          /* (Check Selection Criteria)*/

  if (AB0GM001.XOWCD != XP1REC.XOWCD) /* Own grp cd*/
    XP1REC.XOWCD = AB0GM001.XOWCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM001.XWHCD != XP1REC.XWHCD) /* Whse cd*/
    XP1REC.XWHCD = AB0GM001.XWHCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM001.SY1STNBR != XP1REC.SY1STNBR) /* Style no.*/
    XP1REC.SY1STNBR = AB0GM001.SY1STNBR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM001.XSNYR != XP1REC.XSNYR) /* NE Saved Season yr*/
  /*  */
  /* ------------- y2k out begin ----------------------*/
  /*  */
  /* OR AB0GM001.XSNYR EQ 0;        /* or Cleared out*/
  /*  */
  /* ------------- y2k out end ------------------------*/
  /*  */
    XP1REC.XSNYR = AB0GM001.XSNYR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM001.XSECD != XP1REC.XSECD /* NE Saved Season cd*/
   || AB0GM001.XSECD == " ")         /* or Cleared out*/
    XP1REC.XSECD = AB0GM001.XSECD;
    ABWREC.ABWSWR = "Y";
  end



              /* (Validate Selection Criteria)*/

  AB0GS11(); /* Validate Own Grp cd*/
  AB0GS12(); /* Validate Warehouse cd*/
  AB0GS13(); /* Validate Style no*/
  AB0GS17(); /* Validate Season yr*/
  AB0GS18(); /* Validate Season cd*/


              /* (Validate Map Detail Data)*/

  if (ABWREC.ABWSWR == "N" /* Selection criteria unchanged*/
   && XP1REC.XP1MNO == 0)  /* And no errors found so far*/

    AB0GS19(); /* Validate map detail data*/
  else
    set AB0GW03 empty;
    AB0GW01.AB0GW-PF13-MODE = "N";
    ABWREC.ABWMAP = "1"; /* set map flag to map 1*/

  end


              /* (Set-up Exit Requirements)*/

  converseLib.clearScreen();
  
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end


           /* (Purge Old Data if Errors Exist)*/

  if (converseVar.validationMsgNum != 0) /* Errors detected*/
    AB0G111(); /* Purge any temporary storage*/
  end



end // end AB0G152

// Verify changed detail data
Function AB0G153()
   /* ------------------------------------------------------------*/
    /* Check all record status indicators for a valid update tag.*/
    /* if found, then indicate that valid updates present for*/
      /* current style/color being processed.*/
   /* ------------------------------------------------------------*/


  AB0GW01.AB0GWUPI = " "; /* Reset update indicator*/

  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AB0GW02.AB0GWSTA[ABWIXM] == "A" /* Record for Insertion*/
     || AB0GW02.AB0GWSTA[ABWIXM] == "U" /* or Record for Change(upd)*/
     || AB0GW02.AB0GWSTA[ABWIXM] == "D") /* or Record for Deletion*/

      AB0GW01.AB0GWUPI = "Y"; /* Indicate valid updates fnd*/

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



end // end AB0G153

// Edit selection criteria map 2
Function AB0G154()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* =====  validate all selection criteria fields.         =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


  XP1REC.XP1MNO = 0; /* Reset error ind*/


          /* (Check Selection Criteria)*/

  if (AB0GM002.XOWCD != XP1REC.XOWCD) /* Own grp cd*/
    XP1REC.XOWCD = AB0GM002.XOWCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM002.XWHCD != XP1REC.XWHCD) /* Whse cd*/
    XP1REC.XWHCD = AB0GM002.XWHCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM002.SY1STNBR != XP1REC.SY1STNBR) /* Style no.*/
    XP1REC.SY1STNBR = AB0GM002.SY1STNBR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM002.XSNYR != XP1REC.XSNYR) /* NE Saved Season yr*/
  /*  */
  /* ----------------- y2k out begin -----------------*/
  /*  */
  /* OR AB0GM002.XSNYR EQ 0;        /* or Cleared out*/
  /*  */
  /* ----------------- y2k out end  -----------------*/
  /*  */
    XP1REC.XSNYR = AB0GM002.XSNYR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0GM002.XSECD != XP1REC.XSECD /* NE Saved Season cd*/
   || AB0GM002.XSECD == " ")         /* or Cleared out*/
    XP1REC.XSECD = AB0GM002.XSECD;
    ABWREC.ABWSWR = "Y";
  end



              /* (Validate Selection Criteria)*/

  AB0GS33(); /* Validate Own Grp cd*/
  AB0GS34(); /* Validate Warehouse cd*/
  AB0GS35(); /* Validate Style no*/
  AB0GS36(); /* Validate Season yr*/
  AB0GS37(); /* Validate Season cd*/


              /* (Validate Map Detail Data)*/

  if (ABWREC.ABWSWR == "N" /* Selection criteria unchanged*/
   && XP1REC.XP1MNO == 0)  /* And no errors found so far*/
    AB0GS38(); /* Validate map detail data*/
  else
    set AB0GW03 empty;
    AB0GW01.AB0GW-PF13-MODE = "N";
    ABWREC.ABWMAP = "1"; /* set map flag to map 1*/
    AB0GM001.SY1STNBR = AB0GM002.SY1STNBR; /* move sy nbr to map 1*/
    AB0GM001.XSECD = AB0GM002.XSECD; /* move sesn cd to map 1*/
    AB0GM001.XSNYR = AB0GM002.XSNYR; /* move sesn yr to map 1*/
    AB0GM001.XWHCD = AB0GM002.XWHCD; /* move whse cd to map 1*/
    AB0GM001.XWHABRV = AB0GM002.XWHABRV; /* move whse cd to map 1*/
    AB0GM001.XOWCD = AB0GM002.XOWCD; /* move xow cd to map 1*/
    AB0GM001.XOWABRV = AB0GM002.XOWABRV; /* move xow cd to map 1*/
  end


              /* (Set-up Exit Requirements)*/

  converseLib.clearScreen();
  
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end


           /* (Purge Old Data if Errors Exist)*/

  if (converseVar.validationMsgNum != 0) /* Errors detected*/
    AB0G111(); /* Purge any temporary storage*/
  end



end // end AB0G154

// Process valid input request
Function AB0G160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* If a scroll right or left, set the map selection flag.*/
   /* If display all colors of a style requested, indicate a*/
      /* new selection of data is required.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    ABWREC.ABWMAP = "1"; /* move 1 to map selection flag*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    ABWREC.ABWMAP = "2"; /* move 2 to map selection flag*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf13) /* Display all colors requested*/

    ABWREC.ABWSWR = "Y"; /* Force new data reselection*/
    AB0GW01.AB0GW-PF13-MODE = "Y";
    return; /* Return to previous process*/
  end



  if (converseVar.eventKey is enter) /* Update DABUY.VSAFTY01 DB*/


    XX0XS01(); /* Get system date/time*/


    ABWREC.ABWIXM = 1; /* Reset loop index*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Process all line data*/

      if (AB0GW02.AB0GWCLR[ABWIXM] != "***" /* Valid color*/
       && AB0GW02.AB0GWCLR[ABWIXM] != "TTL") /* or total line*/

        if (AB0GW02.AB0GWSTA[ABWIXM] == "A") /* Record for insertion*/
          AB0G161(); /* Create new DB record*/
        else
          if (AB0GW02.AB0GWSTA[ABWIXM] == "U") /* Record for update*/
            AB0G162(); /* Change Qty/s of existing DB recd*/
          else
            if (AB0GW02.AB0GWSTA[ABWIXM] == "D") /* Record for update*/
              AB0G163(); /* Delete existing DB record*/
            else /* (Bypass map detail line)*/
            end
          end
        end

      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end


    if (converseVar.validationMsgNum == 0) /* Update successful*/
      AB0GW01.AB0GWTSP = ABWREC.ABWTSP; /* Save curr page*/
      AB0GW01.AB0GWUPD = "Y"; /* Indicate successful update*/
      ABWREC.ABWPRCSN = "160 "; /* Process number*/
      ABWREC.ABWSWR = "Y"; /* Reselect updated data*/
      ABWREC.ABWNMO = 45; /* Indicate update sucessful*/
    end


  end


end // end AB0G160

// Create new DABUY.VSAFTY01 row
Function AB0G161()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual create DB record process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set AB1REC empty; /* Reset Wk Storage field*/

  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.SY2CLRID = AB0GW02.AB0GWCLR[ABWIXM]; /* Color*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/
  if (AB0GW03.AB0GW-STYLE-CNT > 0) /* UPDATE DURING SCROLL*/
    AB1REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* Style no.*/
    AB1REC.XWHCD = AB0GW03.XWHCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
    AB1REC.XOWCD = AB0GW03.XOWCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
  else
    AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB1REC.XWHCD = XP1REC.XWHCD; /* Whse cd*/
    AB1REC.XOWCD = XP1REC.XOWCD; /* Own Group cd*/
  end

  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* ------------- y2k out begin -----------------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* ------------- y2k out end -------------------*/
  /*  */
  /*  */
  /* ------------- y2k in begin -----------------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* ------------- y2k in end -------------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* *=================================**/
   /* *  Move Update Items into AB1REC  **/
   /* *=================================**/

  ABWREC.ABWIDX1 = 1; /* Reset loop index*/

  while (ABWREC.ABWIDX1 <= 10) /* Process all sizes*/
    AB1REC.SY5SZID[ABWIDX1] = AB0GW01.SY5SZID[ABWIDX1];
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/
  end


  AB1REC.AB1SSQTY[1] = AB0GW02.AB0GWQ1[ABWIXM]; /* Move Qty1*/
  AB1REC.AB1SSQTY[2] = AB0GW02.AB0GWQ2[ABWIXM]; /* Move Qty2*/
  AB1REC.AB1SSQTY[3] = AB0GW02.AB0GWQ3[ABWIXM]; /* Move Qty3*/
  AB1REC.AB1SSQTY[4] = AB0GW02.AB0GWQ4[ABWIXM]; /* Move Qty4*/
  AB1REC.AB1SSQTY[5] = AB0GW02.AB0GWQ5[ABWIXM]; /* Move Qty5*/
  AB1REC.AB1SSQTY[6] = AB0GW02.AB0GWQ6[ABWIXM]; /* Move Qty6*/
  AB1REC.AB1SSQTY[7] = AB0GW02.AB0GWQ7[ABWIXM]; /* Move Qty7*/
  AB1REC.AB1SSQTY[8] = AB0GW02.AB0GWQ8[ABWIXM]; /* Move Qty8*/
  AB1REC.AB1SSQTY[9] = AB0GW02.AB0GWQ9[ABWIXM]; /* Move Qty9*/
  AB1REC.AB1SSQTY[10] = AB0GW02.AB0GWQ10[ABWIXM]; /* Move Qty10*/


  AB1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/



   /* *==============================**/
   /* *  Insert DABUY.VSAFTY01  Row  **/
   /* *==============================**/

  try
    call "IO3200" ("A ", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "INSERT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0G161

// Update DABUY.VSAFTY01 row
Function AB0G162()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set AB1REC empty; /* Reset Wk Storage field*/

  AB1REC.SY2CLRID = AB0GW02.AB0GWCLR[ABWIXM]; /* Color*/
  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.XSECD = XP1REC.XSECD; /* xsecd*/

  if (AB0GW03.AB0GW-STYLE-CNT > 0) /* UPDATE DURING SCROLL*/
    AB1REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* Style no.*/
    AB1REC.XWHCD = AB0GW03.XWHCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
    AB1REC.XOWCD = AB0GW03.XOWCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
  else
    AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB1REC.XWHCD = XP1REC.XWHCD; /* Whse cd*/
    AB1REC.XOWCD = XP1REC.XOWCD; /* Own Group cd*/
  end

  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* -------------------- y2k out begin -------------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* -------------------- y2k out end  -------------*/
  /*  */
  /*  */
  /* -------------------- y2k in  begin -------------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60) /* Add Century*/
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* -------------------- y2k in  end  -------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* *=================================**/
   /* *  Move Update Items into AB1REC  **/
   /* *=================================**/

  ABWREC.ABWIDX1 = 1; /* Reset loop index*/

  while (ABWREC.ABWIDX1 <= 10) /* Process all sizes*/
    AB1REC.SY5SZID[ABWIDX1] = AB0GW01.SY5SZID[ABWIDX1];
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/
  end


  AB1REC.AB1SSQTY[1] = AB0GW02.AB0GWQ1[ABWIXM]; /* Move Qty1*/
  AB1REC.AB1SSQTY[2] = AB0GW02.AB0GWQ2[ABWIXM]; /* Move Qty2*/
  AB1REC.AB1SSQTY[3] = AB0GW02.AB0GWQ3[ABWIXM]; /* Move Qty3*/
  AB1REC.AB1SSQTY[4] = AB0GW02.AB0GWQ4[ABWIXM]; /* Move Qty4*/
  AB1REC.AB1SSQTY[5] = AB0GW02.AB0GWQ5[ABWIXM]; /* Move Qty5*/
  AB1REC.AB1SSQTY[6] = AB0GW02.AB0GWQ6[ABWIXM]; /* Move Qty6*/
  AB1REC.AB1SSQTY[7] = AB0GW02.AB0GWQ7[ABWIXM]; /* Move Qty7*/
  AB1REC.AB1SSQTY[8] = AB0GW02.AB0GWQ8[ABWIXM]; /* Move Qty8*/
  AB1REC.AB1SSQTY[9] = AB0GW02.AB0GWQ9[ABWIXM]; /* Move Qty9*/
  AB1REC.AB1SSQTY[10] = AB0GW02.AB0GWQ10[ABWIXM]; /* Move Qty10*/


  AB1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB1REC.ZZZCHGCT = AB0GW02.AB0GWCCT[ABWIXM]; /* Change count*/



   /* *==============================**/
   /* *  Update DABUY.VSAFTY01  Row  **/
   /* *==============================**/

  try
    call "IO3200" ("U ", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user/s*/
      ABWREC.ABWSWR = "Y"; /* Reselect same rows*/
      ABWREC.ABWPRCSN = "162 "; /* Process number*/
      ABWREC.ABWNMO = 13; /* Indicate concurrent update*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        else
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0G162

// Delete DABUY.VSAFTY01 row
Function AB0G163()
   /* ------------------------------------------------------------*/
   /* Build the keys for DACAST.VAFSTY01 row to be deleted.*/
   /* Call IO module to perform actual delete process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set AB1REC empty; /* Reset Wk Storage field*/

  AB1REC.SY2CLRID = AB0GW02.AB0GWCLR[ABWIXM]; /* Color*/
  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/

  if (AB0GW03.AB0GW-STYLE-CNT > 0) /* UPDATE DURING SCROLL*/
    AB1REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* Style no.*/
    AB1REC.XWHCD = AB0GW03.XWHCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
    AB1REC.XOWCD = AB0GW03.XOWCD[AB0GW-STYLE-IDX]; /* WAREHOUSE*/
  else
    AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB1REC.XWHCD = XP1REC.XWHCD; /* Whse cd*/
    AB1REC.XOWCD = XP1REC.XOWCD; /* Own Group cd*/
  end


  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* ----------------- y2k out begin -----------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* ----------------- y2k out end --------------*/
  /*  */
  /*  */
  /* ----------------- y2k in begin -----------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* ----------------- y2k in end --------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* *==============================**/
   /* *  Delete DABUY.VSAFTY01  Row  **/
   /* *==============================**/

  try
    call "IO3200" ("D ", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "DELETE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0G163

// Select Set Safety Stock
Function AB0GS01()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AB1REC empty; /* Reset rec work area*/

   /* MOVE IN CURRENT DATA  .....*/
  AB1REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* CRR STYLE*/
  AB1REC.XWHCD = AB0GW03.XWHCD[AB0GW-STYLE-IDX]; /* CRR Whse cd*/
  AB1REC.XOWCD = AB0GW03.XOWCD[AB0GW-STYLE-IDX]; /* CRR og cd*/

  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/

  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* --------------------- y2k out begin ----------------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* --------------------- y2k out end ------------------*/
  /*  */
  /*  */
  /* --------------------- y2k in  begin ----------------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* --------------------- y2k in end ------------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* *===================================**/
   /* *  Select Set from DABUY.VSAFTY01   **/
   /* *===================================**/

  try
    call "IO3200" ("SS", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS01

// Process Safety Stock Row
Function AB0GS02()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.VSAFTY01 ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO3200" ("SN", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      if (ABWREC.ABWIXM == 1 /* First row retrieved*/
       && ABWREC.TA5TSQIX <= 1) /* and First page to fill*/

        XP1REC.SY2CLRID = AB1REC.SY2CLRID; /* Color id to save*/
        AB0GS03(); /* Obtain size descriptions*/

      end

      AB0GS04(); /* Store Safety Stock Data*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSAFTY01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS02

// Obtain size descriptions
Function AB0GS03()
   /* ------------------------------------------------------------*/
   /* Obtain valid sizes and size descriptions for a given style.*/
   /* ASSUMPTION: Sizes and size descriptions obtained are VALID*/
               /* for ALL colors within the given style.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "AB0GS03 "; /* program name*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
    TA1REC.TA1MAP = "AB0GM001"; /* processing map*/
  else
    TA1REC.TA1MAP = "AB0GM002"; /* processing map*/
  end

  ABWREC.ABWIDX4 = 1; /* Reset loop index*/
  ABWREC.ABWIDX5 = 0; /* Reset store index*/


  move 0 to AB0GW01.SY5SZID[1] for all; /* Reset Size Id Array*/
  move " " to AB0GW01.SY4IDDSC[1] for all; /* Reset Size Desc Array*/

  AB0GS31(); /* get sizes from afsty*/

   /* ------------------------------------------------------------*/
   /* Store all retrieved size descriptions.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* reset error msg*/
  ABWREC.ABWIDX4 = 1; /* Reset loop index*/
  ABWREC.ABWIDX5 = 0; /* Reset store index*/
  move 0 to AB0GW01.SY5SZID[1] for all; /* Reset Size Id Array*/

  while (ABWREC.ABWIDX4 <= 10) /* Find valid sizes*/
    if (AF2REC.SY5SZID[ABWIDX4] > 0)
      AB0GW01.SY5SZID[ABWIDX4] = AF2REC.SY5SZID[ABWIDX4];
      ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Add store index*/
    end
    ABWREC.ABWIDX4 = ABWREC.ABWIDX4 + 1; /* Loop through*/
  end

  AB0GW01.AB0GWSZC = ABWREC.ABWIDX5 + 1; /* Save size count + 1*/

  AB0GS32(); /* get size descriptions*/

   /* ------------------------------------------------------------*/
   /* Center all retrieved size descriptions within save field*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIDX5 = 1; /* Set loop index*/


  while (ABWREC.ABWIDX5 <= 10) /* Center size descriptions*/

    AB0GW01.AB0GWSDS = " "; /* Initialize wk area*/
    AB0GW01.AB0GWSDC = " "; /* Initialize wk area*/
    AB0GW01.AB0GWSDS = AB0GW01.SY4IDDSC[ABWIDX5];

    if (AB0GW01.AB0GWSD5 != " ")
      if (AB0GW01.AB0GWSD4 != " ")
        if (AB0GW01.AB0GWSD3 != " ")
          if (AB0GW01.AB0GWSD2 != " ")
            if (AB0GW01.AB0GWSD1 != " ")
            else
              AB0GW01.AB0GWSC2 = AB0GW01.AB0GWSD2;
              AB0GW01.AB0GWSC3 = AB0GW01.AB0GWSD3;
              AB0GW01.AB0GWSC4 = AB0GW01.AB0GWSD4;
              AB0GW01.AB0GWSC5 = AB0GW01.AB0GWSD5;
            end
          else
            AB0GW01.AB0GWSC3 = AB0GW01.AB0GWSD3;
            AB0GW01.AB0GWSC4 = AB0GW01.AB0GWSD4;
            AB0GW01.AB0GWSC5 = AB0GW01.AB0GWSD5;
          end
        else
          AB0GW01.AB0GWSC3 = AB0GW01.AB0GWSD4;
          AB0GW01.AB0GWSC4 = AB0GW01.AB0GWSD5;
        end
      else
        AB0GW01.AB0GWSC3 = AB0GW01.AB0GWSD5;
      end
      AB0GW01.SY4IDDSC[ABWIDX5] = AB0GW01.AB0GWSDC;

    end

    ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Loop through*/

  end




end // end AB0GS03

// Store Safety Stock data
Function AB0GS04()
   /* ------------------------------------------------------------*/
   /* Store DABUY.VSAFTY01 data into program save area for*/
     /* display and possible update.*/
   /* ------------------------------------------------------------*/


  AB0GW02.AB0GWCLR[ABWIXM] = AB1REC.SY2CLRID; /* Color cd*/
  AB0GW02.AB0GWSTA[ABWIXM] = " "; /* Indicate from VSAFTY01 db*/


  ABWREC.ABWIDX1 = 1; /* Reset loop ctr*/
  while (ABWREC.ABWIDX1 <= 10) /* Move size/qty to wk area*/

    if (AB1REC.SY5SZID[ABWIDX1] > 0) /* Valid Size*/

      if (AB1REC.SY5SZID[ABWIDX1] in AB0GW01.SY5SZID) /* Size found?*/

        if (sysVar.arrayIndex == 1) /* To Qty Array 1*/
          AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
          AB0GW02.AB0GWQ1[ABWIXM] = AB0GW01.AB0GWQTW;
          AB0GW01.AB0GW-SIZE-QTY-TOTAL[1] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[1] + AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
        else
          if (sysVar.arrayIndex == 2) /* To Qty Array 2*/
            AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
            AB0GW02.AB0GWQ2[ABWIXM] = AB0GW01.AB0GWQTW;
            AB0GW01.AB0GW-SIZE-QTY-TOTAL[2] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[2] + AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
          else
            if (sysVar.arrayIndex == 3) /* To Qty Array 3*/
              AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
              AB0GW02.AB0GWQ3[ABWIXM] = AB0GW01.AB0GWQTW;
              AB0GW01.AB0GW-SIZE-QTY-TOTAL[3] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[3] + AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
            else
              if (sysVar.arrayIndex == 4) /* To Qty Array 4*/
                AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                AB0GW02.AB0GWQ4[ABWIXM] = AB0GW01.AB0GWQTW;
                AB0GW01.AB0GW-SIZE-QTY-TOTAL[4] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[4] + AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
              else
                if (sysVar.arrayIndex == 5) /* To Qty Array 5*/
                  AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                  AB0GW02.AB0GWQ5[ABWIXM] = AB0GW01.AB0GWQTW;
                  AB0GW01.AB0GW-SIZE-QTY-TOTAL[5] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[5] +                   AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                else
                  if (sysVar.arrayIndex == 6) /* To Qty Array 6*/
                    AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                    AB0GW02.AB0GWQ6[ABWIXM] = AB0GW01.AB0GWQTW;
                    AB0GW01.AB0GW-SIZE-QTY-TOTAL[6] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[6] +                     AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                  else
                    if (sysVar.arrayIndex == 7) /* To Qty Array 7*/
                      AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                      AB0GW02.AB0GWQ7[ABWIXM] = AB0GW01.AB0GWQTW;
                      AB0GW01.AB0GW-SIZE-QTY-TOTAL[7] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[7] +                       AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                    else
                      if (sysVar.arrayIndex == 8) /* To Qty Array 8*/
                        AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                        AB0GW02.AB0GWQ8[ABWIXM] = AB0GW01.AB0GWQTW;
                        AB0GW01.AB0GW-SIZE-QTY-TOTAL[8] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[8] +                         AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                      else
                        if (sysVar.arrayIndex == 9) /* To Qty Array 9*/
                          AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                          AB0GW02.AB0GWQ9[ABWIXM] = AB0GW01.AB0GWQTW;
                          AB0GW01.AB0GW-SIZE-QTY-TOTAL[9] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[9] +                           AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                        else
                          if (sysVar.arrayIndex == 10) /* To Qty Array 10*/
                            AB0GW01.AB0GWQTW = AB1REC.AB1SSQTY[ABWIDX1];
                            AB0GW02.AB0GWQ10[ABWIXM] = AB0GW01.AB0GWQTW;
                            AB0GW01.AB0GW-SIZE-QTY-TOTAL[10] = AB0GW01.AB0GW-SIZE-QTY-TOTAL[10] +                             AB0GW01.AB0GWQTW;
                                   /* accum qty to total*/
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end

        end

                     /* (Accumulate qty totals/color)*/
        AB0GW01.AB0GWQTT = AB0GW02.AB0GWTOT[ABWIXM]; /* To wk fld*/
        AB0GW01.AB0GWQTT = AB0GW01.AB0GWQTT + AB1REC.AB1SSQTY[ABWIDX1];
        AB0GW02.AB0GWTOT[ABWIXM] = AB0GW01.AB0GWQTT; /* To save*/
        AB0GW01.AB0GW-COLOR-QTY-TOTAL = AB0GW01.AB0GW-COLOR-QTY-TOTAL + AB0GW01.AB0GWQTW;
                                   /* accum to color total*/


        AB0GW02.AB0GWCCT[ABWIXM] = AB1REC.ZZZCHGCT; /* Change count*/


      end

    end


    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/


  end



end // end AB0GS04

// Add page to TSQ
Function AB0GS05()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/



  AB0GW02.AB0GWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/



  call "TA0050" (AB0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/
                                  /* ;subroutine*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "S05 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    converseLib.validationFailed(10); /* Indicate system error*/

    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    else
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    return; /* Return to previous process*/

  end



  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  ABWREC.ABWIXM = 1; /* Reset display line number*/

  set AB0GW02 empty; /* Clear temporary storage record*/



end // end AB0GS05

// Close Safety Stock cursor
Function AB0GS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3200" ("CS", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  else
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end



end // end AB0GS06

// Select Set Style
Function AB0GS07()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/

  if (AB0GW03.AB0GW-STYLE-CNT > 0)
    PG2REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX];
  else
    PG2REC.SY1STNBR = XP1REC.SY1STNBR;
  end


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S07 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS07

// Process Style row
Function AB0GS08()
   /* ------------------------------------------------------------*/
             /* *** Process DPRODG.VSYCLR01 Rows ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      if (PG2REC.XLCCD1 != "10")
        return;
      end

      if (ABWREC.ABWIXM == 1 /* First row retrieved*/
       && ABWREC.TA5TSQIX <= 1) /* and First page to fill*/

        XP1REC.SY2CLRID = PG2REC.SY2CLRID; /* Color id to save*/
        AB0GS03(); /* Obtain size descriptions*/

      end

      AB0GW02.AB0GWCLR[ABWIXM] = PG2REC.SY2CLRID;
      XP1REC.SY2CLRID = PG2REC.SY2CLRID;
      AB0GW02.AB0GWSTA[ABWIXM] = "M"; /* Indicate from VSYCLR01 db*/
      AB0GW02.AB0GWQ1[ABWIXM] = 0; /* Qty 1*/
      AB0GW02.AB0GWQ2[ABWIXM] = 0; /* Qty 2*/
      AB0GW02.AB0GWQ3[ABWIXM] = 0; /* Qty 3*/
      AB0GW02.AB0GWQ4[ABWIXM] = 0; /* Qty 4*/
      AB0GW02.AB0GWQ5[ABWIXM] = 0; /* Qty 5*/
      AB0GW02.AB0GWQ6[ABWIXM] = 0; /* Qty 6*/
      AB0GW02.AB0GWQ7[ABWIXM] = 0; /* Qty 7*/
      AB0GW02.AB0GWQ8[ABWIXM] = 0; /* Qty 8*/
      AB0GW02.AB0GWQ9[ABWIXM] = 0; /* Qty 9*/
      AB0GW02.AB0GWQ10[ABWIXM] = 0; /* Qty 10*/
      AB0GW02.AB0GWTOT[ABWIXM] = 0; /* Qty totals*/

      AB0GS09(); /* Check Safety Stock Data*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS08

// Check Safety Stock data
Function AB0GS09()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.VSAFTY01 ****/
   /* Select the target row on a 'SELECT UNIQUE' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/


   /* *================**/
   /* * Build DB keys  **/
   /* *================**/

  if (AB0GW03.AB0GW-STYLE-CNT > 0)
    AB1REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* Style no.*/
    AB1REC.XWHCD = AB0GW03.XWHCD[AB0GW-STYLE-IDX]; /* Warehouse cd*/
    AB1REC.XOWCD = AB0GW03.XOWCD[AB0GW-STYLE-IDX]; /* Own grp cd*/
  else
    AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB1REC.XWHCD = XP1REC.XWHCD; /* Warehouse cd*/
    AB1REC.XOWCD = XP1REC.XOWCD; /* Own grp cd*/
  end

  AB1REC.SY2CLRID = XP1REC.SY2CLRID; /* Color cd*/
  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/

  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* --------------- y2k out begin ----------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* --------------- y2k out end ------------*/
  /*  */
  /*  */
  /* --------------- y2k in  begin ----------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60) /* Add Century*/
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* --------------- y2k in  end ------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* ------------------------------------------------------------*/
   /* Access Database.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3200" ("S ", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      AB0GS04(); /* Store Safety Stock Data*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSAFTY01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS09

// Close Style cursor
Function AB0GS10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S10 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  else
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end



end // end AB0GS10

// Edit Own Grp cd - map 1
Function AB0GS11()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  if (XP1REC.XOWCD == " ") /* No data displayed/selected by pop-up*/
    XP1REC.XOWABRV = " "; /* Space out save area*/
    return;
  end

  XSABSOW(); /* Standard XSE pop-up module*/


  if (XP1REC.XOWCD == "?") /* No data displayed/selected by pop-up*/
    AB0GM001.XOWCD = " "; /* Space-out map field*/
    XP1REC.XP1ERRFL = "1"; /* Indicate field in error*/
  end


  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XOWCD = " "; /* Space out save area*/
    XP1REC.XOWABRV = " "; /* Space out save area*/
    AB0GM001.XOWABRV = " "; /* Space out map area*/
    set AB0GM001.XOWCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 44; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S11 "; /* Process number*/

  else

    AB0GM001.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/

    if (XP1REC.XP1ERRFL == "3" /* Warehouse has no XOW cds*/
     && XP1REC.XWHCD != " ")   /* warehouse selected*/

      set AB0GM001.XOWCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 12; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S11 "; /* Process number*/

    else

      if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

        XP1REC.XOWCD = " "; /* Space out save area*/
        XP1REC.XOWABRV = " "; /* Space out save area*/
        AB0GM001.XOWABRV = " "; /* Space out map area*/
        set AB0GM001.XOWCD cursor, bold; /* Highlight field*/
        XP1REC.XP1MNO = 35; /* Indicate error message*/
        ABWREC.ABWPRCSN = "S11 "; /* Process number*/

      else

        AB0GM001.XOWCD = XP1REC.XOWCD; /* Move valid cd to map*/

      end

    end

  end

  if (XP1REC.XP1ERRFL == "3" /* Warehouse has no XOW cds*/
   && XP1REC.XWHCD == " ")   /* warehouse selected*/
    if (XP1REC.XOWCD in XOWTBL.XOWCD)
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      return;
    else
      XP1REC.XOWCD = " "; /* Space out save area*/
      XP1REC.XOWABRV = " "; /* Space out save area*/
      AB0GM001.XOWABRV = " "; /* Space out map area*/
      set AB0GM001.XOWCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 44; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S11 "; /* Process number*/
    end
  end
end // end AB0GS11

// Edit Warehouse cd - map 1
Function AB0GS12()
  if (XP1REC.XWHCD == " ") /* Warehouse cd eq spaces*/
    XP1REC.XWHABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSWH(); /* Standard XSE pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XWHCD = " "; /* Space out save area*/
    XP1REC.XWHABRV = " "; /* Space out save area*/
    AB0GM001.XWHABRV = " "; /* Space out map area*/
    set AB0GM001.XWHCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 43; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S12 "; /* Process number*/
    return; /* Return to calling process*/

  else

    AB0GM001.XWHABRV = XP1REC.XWHABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XWHCD = " "; /* Space out save area*/
      XP1REC.XWHABRV = " "; /* Space out map area*/
      AB0GM001.XWHABRV = " "; /* Space out map area*/
      set AB0GM001.XWHCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S12 "; /* Process number*/
      return; /* Return to calling process*/

    else

      AB0GM001.XWHCD = XP1REC.XWHCD; /* Move valid code to map*/

    end

  end



end // end AB0GS12

// Edit Style no. - map 1
Function AB0GS13()
  if (XP1REC.SY1STNBR == "?") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0GM001.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end

  if (XP1REC.SY1STNBR == " ") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0GM001.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0GS14(); /* Select set style*/

  AB0GS15(); /* Validate style*/

  AB0GS16(); /* Close style cursor*/



end // end AB0GS13

// Select Set Style
Function AB0GS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS14

// Process Style row
Function AB0GS15()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0GM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0GM002.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/

      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      XP1REC.SY1SSTNM = " "; /* Space out desc*/
      AB0GM001.SY1SSTNM = " "; /* Space out desc*/
      AB0GM002.SY1SSTNM = " "; /* Space out desc*/

      set AB0GM001.SY1STNBR cursor, bold; /* Highlight field*/
      set AB0GM002.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S15 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS15

// Close Style cursor
Function AB0GS16()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  else
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end



end // end AB0GS16

// Edit XSNYR - map 1
Function AB0GS17()

  AB0GW01.AB0GWXSY = 0; /* initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* move to wk area*/
  if (XP1REC.XSNYR > 75)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* move century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* move century*/
  end


      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  ABWREC.ABWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX5] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX5] == AB0GW01.AB0GWXSY
     && YSNTBL.XGPCD[ABWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX5] == "01")
      XP1REC.XXXSTAT = YSNTBL.XXXSTAT[ABWIDX5]; /* Move status*/
      if (YSNTBL.XXXSTAT[ABWIDX5] == "I") /* Inactive status*/
                       /* (field in error)*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        set AB0GM001.XSNYR cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 35; /* indicate error message*/
        ABWREC.ABWPRCSN = "S17 "; /* Process number*/
      end
      return; /* return*/
    else
      if (YSNTBL.XGPCD[ABWIDX5] != "99")
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1;
      else
        ABWREC.ABWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  XP1REC.XSNYR = 0; /* Reset working storage*/
  set AB0GM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  ABWREC.ABWPRCSN = "S17 "; /* Process number*/

end // end AB0GS17

// Edit XSECD - map 1
Function AB0GS18()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSSE(); /* Standard XSE pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XSECD = " "; /* Space out save area*/
    set AB0GM001.XSECD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 16; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S18 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XSECD = " "; /* Space out save area*/
      set AB0GM001.XSECD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S18 "; /* Process number*/

    else

      AB0GM001.XSECD = XP1REC.XSECD; /* Move valid code to map*/

    end

  end



end // end AB0GS18

// Validate map detail data
Function AB0GS19()
   /* ------------------------------------------------------------*/
    /* Evaluate map detail data to determine the kind of data*/
     /* base update action necessary for each line. If valid*/
     /* update found, then assign update code. Otherwise, ignore*/
     /* map detail line.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/



  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/


    if (AB0GW02.AB0GWCLR[ABWIXM] != "***" /* Valid line*/
     && AB0GW02.AB0GWCLR[ABWIXM] != "TTL") /* Valid line*/

      AB0GW01.AB0GWQTM = 0; /* Reset line qty total*/
      AB0GW01.AB0GWCIN = " "; /* Reset change indicator*/

                    /* (Compute Map Line Qty Totals)*/
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ1[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ2[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ3[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ4[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ5[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ6[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM001.AB0GMQ7[ABWIXM];

                      /* (Check for Qty Entered)*/
      if (AB0GM001.AB0GMQ1[ABWIXM] == AB0GW02.AB0GWQ1[ABWIXM]
       && AB0GM001.AB0GMQ2[ABWIXM] == AB0GW02.AB0GWQ2[ABWIXM]
       && AB0GM001.AB0GMQ3[ABWIXM] == AB0GW02.AB0GWQ3[ABWIXM]
       && AB0GM001.AB0GMQ4[ABWIXM] == AB0GW02.AB0GWQ4[ABWIXM]
       && AB0GM001.AB0GMQ5[ABWIXM] == AB0GW02.AB0GWQ5[ABWIXM]
       && AB0GM001.AB0GMQ6[ABWIXM] == AB0GW02.AB0GWQ6[ABWIXM]
       && AB0GM001.AB0GMQ7[ABWIXM] == AB0GW02.AB0GWQ7[ABWIXM])
      else

        AB0GW01.AB0GWCIN = "Y"; /* Indicate that updates entered*/

      end

             /* (Assign Valid Update Code Where Applicable)*/

      if (AB0GW01.AB0GWCIN == "Y") /* Changes were entered*/

                    /* (Move map data to save arrays)*/
        AB0GW02.AB0GWCLR[ABWIXM] = AB0GM001.AB0GMCLR[ABWIXM];
        AB0GW02.AB0GWQ1[ABWIXM] = AB0GM001.AB0GMQ1[ABWIXM];
        AB0GW02.AB0GWQ2[ABWIXM] = AB0GM001.AB0GMQ2[ABWIXM];
        AB0GW02.AB0GWQ3[ABWIXM] = AB0GM001.AB0GMQ3[ABWIXM];
        AB0GW02.AB0GWQ4[ABWIXM] = AB0GM001.AB0GMQ4[ABWIXM];
        AB0GW02.AB0GWQ5[ABWIXM] = AB0GM001.AB0GMQ5[ABWIXM];
        AB0GW02.AB0GWQ6[ABWIXM] = AB0GM001.AB0GMQ6[ABWIXM];
        AB0GW02.AB0GWQ7[ABWIXM] = AB0GM001.AB0GMQ7[ABWIXM];
        AB0GW02.AB0GWTOT[ABWIXM] = AB0GM001.AB0GMTOT[ABWIXM];


        if (AB0GW02.AB0GWSTA[ABWIXM] == " ") /* Data from DABUY.VSAFTY01*/

          if (AB0GW01.AB0GWQTM == 0) /* Qty zeroed out*/
            AB0GW02.AB0GWSTA[ABWIXM] = "D"; /* Tag for deletion*/
          else
            AB0GW02.AB0GWSTA[ABWIXM] = "U"; /* Tag for change*/
          end

        else

          if (AB0GW02.AB0GWSTA[ABWIXM] == "M") /* Data from DPRODG.VSYCLR01*/

            if (AB0GW01.AB0GWQTM != 0) /* Non-Zero Qty entered*/
              AB0GW02.AB0GWSTA[ABWIXM] = "A"; /* Tag for insertion*/
              AB0GS26(); /* check for row same key diff xow*/
            end

          end

        end

      end /* (Ignore line data; no updating*/
                                   /* necessary)*/

    end


    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/


  end



end // end AB0GS19

// Select safty style list
Function AB0GS20()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AB1REC empty; /* Reset rec work area*/

  if (XP1REC.SY1STNBR > " ")
    AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  else /**/
    AB1REC.SY1STNBR = "*"; /* Style no.*/
  end

  if (XP1REC.XWHCD > " ") /* Whse cd specified*/
    AB1REC.XWHCD = XP1REC.XWHCD; /* Whse cd*/
  else
    AB1REC.XWHCD = "*"; /* Whse cd*/
  end

  if (XP1REC.XOWCD > " ") /* og specified*/
    AB1REC.XOWCD = XP1REC.XOWCD; /* og code*/
  else
    AB1REC.XOWCD = "*"; /* Owner grp cd*/
  end

  AB1REC.XDMCD = "00"; /* Dimension cd*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/

  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/
  /*  */
  /* ------------ y2k out begin ---------------*/
  /*  */
  /* AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900;/* Add Century*/
  /*  */
  /* ------------ y2k out end  ---------------*/
  /*  */
  /*  */
  /* ------------ y2k in begin ---------------*/
  /*  */
  if (AB0GW01.AB0GWXSY > 60)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end
  /*  */
  /* ------------ y2k in end ------------------*/
  /*  */
  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/



   /* *===================================**/
   /* *  Select Set from DABUY.VSAFTY01   **/
   /* *===================================**/

  try
    call "IO3200" ("S1", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S20 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS20

// process style list
Function AB0GS21()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.VSAFTY01 ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO3200" ("N1", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      if (AB0GW03.AB0GW-STYLE-CNT > 0)
        if (AB1REC.SY1STNBR != AB0GW03.SY1STNBR[AB0GW-STYLE-CNT]
         || AB1REC.XOWCD != AB0GW03.XOWCD[AB0GW-STYLE-CNT]
         || AB1REC.XWHCD != AB0GW03.XWHCD[AB0GW-STYLE-CNT])
           /* new combination..*/
          AB0GW03.AB0GW-STYLE-CNT = AB0GW03.AB0GW-STYLE-CNT + 1;

          AB0GW03.SY1STNBR[AB0GW-STYLE-CNT] = AB1REC.SY1STNBR;
          AB0GW03.XOWCD[AB0GW-STYLE-CNT] = AB1REC.XOWCD;
          AB0GW03.XWHCD[AB0GW-STYLE-CNT] = AB1REC.XWHCD;

        end
      else
        AB0GW03.AB0GW-STYLE-CNT = AB0GW03.AB0GW-STYLE-CNT + 1;

        AB0GW03.SY1STNBR[AB0GW-STYLE-CNT] = AB1REC.SY1STNBR;
        AB0GW03.XOWCD[AB0GW-STYLE-CNT] = AB1REC.XOWCD;
        AB0GW03.XWHCD[AB0GW-STYLE-CNT] = AB1REC.XWHCD;
      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSAFTY01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS21

// close style cursor
Function AB0GS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3200" ("C1", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  else
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end



end // end AB0GS22

// select style set
Function AB0GS24()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX]; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S24 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS24

// select next -vsyclr01
Function AB0GS25()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      XP1REC.XSUCD = PG2REC.XSUCD; /* Save silhouette cd*/
      if (XP1REC.XSUCD in XSUTBL.XSUCD) /* Obtain XSU abrv*/
        XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
      else
        XP1REC.XSUCD = " "; /* Space out wk storage*/
        XP1REC.XSUABRV = " "; /* else space out*/
      end

      XP1REC.XGACD = PG2REC.XGACD; /* Save Gender/Age cd*/
      if (XP1REC.XGACD in XGATBL.XGACD) /* Obtain XGA abrv*/
        XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
      else
        XP1REC.XGACD = " "; /* Space out wk storage*/
        XP1REC.XGAABRV = " "; /* else space out*/
      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/

      XP1REC.XSUCD = " "; /* Space out wk storage*/
      XP1REC.XSUABRV = " "; /* Space out desc*/
      XP1REC.XGACD = " "; /* Space out wk storage*/
      XP1REC.XGAABRV = " "; /* Space out desc*/

      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        set AB0GM001.AB0GM-CURR-STYLE cursor, bold; /* Highlight field*/
      else
        set AB0GM002.AB0GM-CURR-STYLE cursor, bold; /* Highlight field*/
      end
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S25 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S25 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS25

// Check for existing row
Function AB0GS26()

   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set AB1REC empty; /* Reset Wk Storage field*/
  AB1REC.XSECD = XP1REC.XSECD; /* Season cd*/
  AB1REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AB1REC.XWHCD = XP1REC.XWHCD; /* Whse cd*/
  AB1REC.XOWCD = XP1REC.XOWCD; /* Own Group cd*/
  AB1REC.SY2CLRID = AB0GW02.AB0GWCLR[ABWIXM]; /* color code*/
  AB0GW01.AB0GWXSY = 0; /* Initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* Move to wk area*/

  if (AB0GW01.AB0GWXSY > 85)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* Add Century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* Add Century*/
  end

  AB1REC.XSNYR = AB0GW01.AB0GWXSY; /* Season yr*/

   /* *==============================**/
   /* *  Select DABUY.VSAFTY01  Row  **/
   /* *==============================**/

  try
    call "IO3200" ("SA", SQLCA, AB1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
      ABWREC.ABWPRCSN = "S26";
      XP1REC.XP1MNO = 144; /* row with diff og exists*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S26 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT TABLE ROW         ";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSAFTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0GS26

// GET AFSTY ROW
Function AB0GS31()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set AF2REC empty;

  if (AB0GW03.AB0GW-STYLE-CNT > 0)
    AF2REC.SY1STNBR = AB0GW03.SY1STNBR[AB0GW-STYLE-IDX];
  else /* ADD FUNCTIOM*/
    AF2REC.SY1STNBR = XP1REC.SY1STNBR;
  end

  AF2REC.XDVCD = "01";
  AF2REC.XDMCD = "00";
  AF2REC.XSECD = XP1REC.XSECD;
  AF2REC.XSNYR = AB0GW01.AB0GWXSY;

  AF2REC.XOWCD = "00"; /* DEFAULT OG TO 00 FOR  AF CALL*/

   /* ------------------------------------------------------------*/
   /* Select unique the DACAST.VAFSTY01 row to be updated.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE != 0)      /* BAD SQL*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* If not successful, go to flow*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || SQLCA.VAGen_SQLCODE != 0)      /* and normal return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "S31 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";

    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      TA1REC.TA1MAP = "AB0GM001"; /* Map name*/
    else
      TA1REC.TA1MAP = "AB0GM002"; /* Map name*/
    end

    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end AB0GS31

// GET SIZE DESCRIPTIONS
Function AB0GS32()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set SY4REC empty;
  SY4REC.SY4SZSCL = AF2REC.SY4SZSCL;

   /* ------------------------------------------------------------*/
   /* Select unique the Dprod.Vscale01 row*/
   /* ------------------------------------------------------------*/


  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE != 0)      /**/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      else
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* If not successful, go to flow*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call successful*/
   || SQLCA.VAGen_SQLCODE != 0)      /* and normal return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "S32 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";

    if (ABWREC.ABWMAP == "1") /* map 1 or map 2?*/
      TA1REC.TA1MAP = "AB0GM001"; /* Map name*/
    else
      TA1REC.TA1MAP = "AB0GM002"; /* Map name*/
    end

    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AB0GM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0GM002.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Store all retrieved size descriptions.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWIDX4 = 1; /* Reset loop index*/
  move " " to AB0GW01.SY4IDDSC[1] for all; /* Reset Size desc array*/

  while (ABWREC.ABWIDX4 <= 10) /* Find valid sizes*/
    ABWREC.ABWIDX5 = AB0GW01.SY5SZID[ABWIDX4];
    if (ABWREC.ABWIDX5 != 0)
      AB0GW01.SY4IDDSC[ABWIDX4] = SY4REC.SY4IDDSC[ABWIDX5];
    end
    ABWREC.ABWIDX4 = ABWREC.ABWIDX4 + 1; /* Loop through*/
  end

end // end AB0GS32

// Edit Own Grp cd - map 2
Function AB0GS33()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  if (XP1REC.XOWCD == " ") /* No data displayed/selected by pop-up*/
    XP1REC.XOWABRV = " "; /* Space out save area*/
    return;
  end

  XSABSOW(); /* Standard XSE pop-up module*/


  if (XP1REC.XOWCD == "?") /* No data displayed/selected by pop-up*/
    AB0GM002.XOWCD = " "; /* Space-out map field*/
    XP1REC.XP1ERRFL = "1"; /* Indicate field in error*/
  end


  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XOWCD = " "; /* Space out save area*/
    XP1REC.XOWABRV = " "; /* Space out save area*/
    AB0GM002.XOWABRV = " "; /* Space out map area*/
    set AB0GM002.XOWCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 44; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S33 "; /* Process number*/

  else

    AB0GM002.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/

    if (XP1REC.XP1ERRFL == "3" /* Warehouse has no XOW cds*/
     && XP1REC.XWHCD != " ")   /* warehouse selected*/

      set AB0GM002.XOWCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 12; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S33 "; /* Process number*/

    else

      if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

        XP1REC.XOWCD = " "; /* Space out save area*/
        XP1REC.XOWABRV = " "; /* Space out save area*/
        AB0GM002.XOWABRV = " "; /* Space out map area*/
        set AB0GM002.XOWCD cursor, bold; /* Highlight field*/
        XP1REC.XP1MNO = 35; /* Indicate error message*/
        ABWREC.ABWPRCSN = "S33 "; /* Process number*/

      else

        AB0GM002.XOWCD = XP1REC.XOWCD; /* Move valid cd to map*/

      end

    end

  end

  if (XP1REC.XP1ERRFL == "3" /* Warehouse has no XOW cds*/
   && XP1REC.XWHCD == " ")   /* warehouse selected*/
    if (XP1REC.XOWCD in XOWTBL.XOWCD)
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      return;
    else
      XP1REC.XOWCD = " "; /* Space out save area*/
      XP1REC.XOWABRV = " "; /* Space out save area*/
      AB0GM002.XOWABRV = " "; /* Space out map area*/
      set AB0GM002.XOWCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 44; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S33 "; /* Process number*/
    end
  end
end // end AB0GS33

// Edit Warehouse cd - map 2
Function AB0GS34()
  if (XP1REC.XWHCD == " ") /* Warehouse cd eq spaces*/
    XP1REC.XWHABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSWH(); /* Standard XSE pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XWHCD = " "; /* Space out save area*/
    XP1REC.XWHABRV = " "; /* Space out save area*/
    AB0GM002.XWHABRV = " "; /* Space out map area*/
    set AB0GM002.XWHCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 43; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S34 "; /* Process number*/
    return; /* Return to calling process*/

  else

    AB0GM002.XWHABRV = XP1REC.XWHABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XWHCD = " "; /* Space out save area*/
      XP1REC.XWHABRV = " "; /* Space out map area*/
      AB0GM002.XWHABRV = " "; /* Space out map area*/
      set AB0GM002.XWHCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S34 "; /* Process number*/
      return; /* Return to calling process*/

    else

      AB0GM002.XWHCD = XP1REC.XWHCD; /* Move valid code to map*/

    end

  end



end // end AB0GS34

// Edit Style no. - map 2
Function AB0GS35()
  if (XP1REC.SY1STNBR == "?") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0GM002.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end

  if (XP1REC.SY1STNBR == " ") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0GM002.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0GS14(); /* Select set style*/

  AB0GS15(); /* Validate style*/

  AB0GS16(); /* Close style cursor*/



end // end AB0GS35

// Edit XSNYR - map 2
Function AB0GS36()

  AB0GW01.AB0GWXSY = 0; /* initialize xsnyr wk area*/
  AB0GW01.AB0GWXSY = XP1REC.XSNYR; /* move to wk area*/
  if (XP1REC.XSNYR > 75)
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 1900; /* move century*/
  else
    AB0GW01.AB0GWXSY = AB0GW01.AB0GWXSY + 2000; /* move century*/
  end


      /* *************************************************************/
      /* ***** Loop thru procedure until both XSE AND XSN values *****/
      /* ***** found on a single table row.                      *****/
      /* *************************************************************/

  ABWREC.ABWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSECD[ABWIDX5] == XP1REC.XSECD
     && YSNTBL.XSNYR[ABWIDX5] == AB0GW01.AB0GWXSY
     && YSNTBL.XGPCD[ABWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX5] == "01")
      XP1REC.XXXSTAT = YSNTBL.XXXSTAT[ABWIDX5]; /* Move status*/
      if (YSNTBL.XXXSTAT[ABWIDX5] == "I") /* Inactive status*/
                       /* (field in error)*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        set AB0GM002.XSNYR cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 35; /* indicate error message*/
        ABWREC.ABWPRCSN = "S17 "; /* Process number*/
      end
      return; /* return*/
    else
      if (YSNTBL.XGPCD[ABWIDX5] != "99")
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1;
      else
        ABWREC.ABWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  XP1REC.XSNYR = 0; /* Reset working storage*/
  set AB0GM002.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  ABWREC.ABWPRCSN = "S17 "; /* Process number*/


end // end AB0GS36

// Edit XSECD - map 2
Function AB0GS37()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSSE(); /* Standard XSE pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XSECD = " "; /* Space out save area*/
    set AB0GM002.XSECD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 16; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S37 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XSECD = " "; /* Space out save area*/
      set AB0GM002.XSECD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S37 "; /* Process number*/

    else

      AB0GM002.XSECD = XP1REC.XSECD; /* Move valid code to map*/

    end

  end



end // end AB0GS37

// Validate map detail data
Function AB0GS38()
   /* ------------------------------------------------------------*/
    /* Evaluate map detail data to determine the kind of data*/
     /* base update action necessary for each line. If valid*/
     /* update found, then assign update code. Otherwise, ignore*/
     /* map detail line.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/



  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/


    if (AB0GW02.AB0GWCLR[ABWIXM] != "***") /* Valid line*/

      AB0GW01.AB0GWQTM = 0; /* Reset line qty total*/
      AB0GW01.AB0GWCIN = " "; /* Reset change indicator*/

                    /* (Compute Map Line Qty Totals)*/
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM002.AB0GMQ1[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM002.AB0GMQ2[ABWIXM];
      AB0GW01.AB0GWQTM = AB0GW01.AB0GWQTM + AB0GM002.AB0GMQ3[ABWIXM];

                      /* (Check for Qty Entered)*/
      if (AB0GM002.AB0GMQ1[ABWIXM] == AB0GW02.AB0GWQ8[ABWIXM]
       && AB0GM002.AB0GMQ2[ABWIXM] == AB0GW02.AB0GWQ9[ABWIXM]
       && AB0GM002.AB0GMQ3[ABWIXM] == AB0GW02.AB0GWQ10[ABWIXM])
                 /* (then no changes were entered....)*/
      else

        AB0GW01.AB0GWCIN = "Y"; /* Indicate that updates entered*/

      end

             /* (Assign Valid Update Code Where Applicable)*/

      if (AB0GW01.AB0GWCIN == "Y") /* Changes were entered*/

                    /* (Move map data to save arrays)*/
        AB0GW02.AB0GWCLR[ABWIXM] = AB0GM002.AB0GMCLR[ABWIXM];
        AB0GW02.AB0GWQ8[ABWIXM] = AB0GM002.AB0GMQ1[ABWIXM];
        AB0GW02.AB0GWQ9[ABWIXM] = AB0GM002.AB0GMQ2[ABWIXM];
        AB0GW02.AB0GWQ10[ABWIXM] = AB0GM002.AB0GMQ3[ABWIXM];
        AB0GW02.AB0GWTOT[ABWIXM] = AB0GM002.AB0GMTOT[ABWIXM];


        if (AB0GW02.AB0GWSTA[ABWIXM] == " ") /* Data from DABUY.VSAFTY01*/

          if (AB0GW01.AB0GWQTM == 0) /* Qty zeroed out*/
            AB0GW02.AB0GWSTA[ABWIXM] = "D"; /* Tag for deletion*/
          else
            AB0GW02.AB0GWSTA[ABWIXM] = "U"; /* Tag for change*/
          end

        else

          if (AB0GW02.AB0GWSTA[ABWIXM] == "M") /* Data from DPRODG.VSYCLR01*/

            if (AB0GW01.AB0GWQTM != 0) /* Non-Zero Qty entered*/
              AB0GW02.AB0GWSTA[ABWIXM] = "A"; /* Tag for insertion*/
              AB0GS26(); /* check for row same key diff xow*/
            end

          end

        end

      end /* (Ignore line data; no updating*/
                                   /* necessary)*/

    end


    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/


  end



end // end AB0GS38

// converse pop up window
Function XPAB900()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOWTBL.XOWCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XOWTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XOWTBL.XWHCD[XX0XWCT1] == XP1REC.XWHCD
           || XP1REC.XWHCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XOWTBL.XOWCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOWTBL.XOWDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      if (XX0XW02.XX0XWFFL == "Y" /* if first time thru*/
       && XX0XW02.XX0XWCT2 == 1)  /* and no rows on CSP table*/
        XX0XW02.XX0XWERR = "1";
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        return;
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end


     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOWTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XOWTBL.XWHCD[XX0XWCT1] == XP1REC.XWHCD
           || XP1REC.XWHCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XOWTBL.XOWCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOWTBL.XOWDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOWTBL.XOWCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPAB900

// owner group retrieval
Function XSABSOW()



                    /* owner group retrieval*/



  XP1REC.XOWABRV = " ";
  XP1REC.XOWDESC = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XOWCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "OWNER GROUP CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPAB900(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWERR == "1")
      XP1REC.XP1ERRFL = "N";
    else
      if (XX0XW02.XX0XWPIX > 0)
        XP1REC.XOWCD = XOWTBL.XOWCD[XX0XWPIX];
        XP1REC.XOWABRV = XOWTBL.XOWABRV[XX0XWPIX];
        XP1REC.XOWDESC = XOWTBL.XOWDESC[XX0XWPIX];
        XP1REC.XXXSTAT = XOWTBL.XXXSTAT[XX0XWPIX];
      end
    end

  else /* ELSE(POP-UP not requested)*/
    /* *************************************************************/
    /* ***** First check the WAREHOUSE table (XWH) to see if  ******/
    /* ***** this warehouse has owner groups, if not, the     ******/
    /* ***** only valid XOW is '00'. If this warehouse does   ******/
    /* ***** have owner groups then see if the owner group is ******/
    /* ***** valid for this warehouse.                        ******/
    /* *************************************************************/
    if (XP1REC.XWHCD in XWHTBL.XWHCD) /* IF warehouse is valid*/
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] != "Y") /* IF OWNER GROUP FLAG is 'NO'*/
        if (XP1REC.XOWCD == "00") /* IF XOW code = '00'*/
          /* NEXT SENTENCE          ;          This is OKAY*/
        else /* ELSE(XOW not = '00')*/
          XP1REC.XP1ERRFL = "3"; /* MOVE error code to XP1REC*/
        end /* END of "IF" statement*/
      else
                                   /* ELSE(XWH OWNER GROUP FL not 'Y')*/
        if (XP1REC.XOWKEY in XOWTBL.XOWKEY) /* IF code in XP1REC is on table*/
          /* -------- MOVE values from CSP Table to XP1REC -------*/
          XP1REC.XOWCD = XOWTBL.XOWCD[sysVar.arrayIndex];
          XP1REC.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
          XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
          XP1REC.XXXSTAT = XOWTBL.XXXSTAT[sysVar.arrayIndex];
        else /* ELSE(CODE is not on table)*/
          XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
        end /* END of 'IF' statement*/
      end /* END of 'IF' statement*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* ***************  end of owner group retrieval **************/
end // end XSABSOW

// warehouse retrieval
Function XSABSWH()



                    /* warehouse retrieval*/



  XP1REC.XP1ERRFL = " "; /* set error flag to found status*/

  XP1REC.XWHABRV = " ";
  XP1REC.XWHNM = " ";
  XP1REC.XXXSTAT = " ";

  if (XP1REC.XWHCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XGPCD = XP1REC.XGPCD;
    XX0XW02.XX0XWHDR = "WAREHOUSE CODE";

    while (XX0XW02.XX0XWEND == "N")

      XPXWH01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XWHCD = XWHTBL.XWHCD[XX0XWPIX];
      XP1REC.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      XP1REC.XWHNM = XWHTBL.XWHNM[XX0XWPIX];
      XP1REC.XXXSTAT = XWHTBL.XXXSTAT[XX0XWPIX];
    end

  else /* ELSE(POP-UP not requested)*/
    if (XP1REC.XWHCD in XWHTBL.XWHCD) /* IF code in XP1REC is on table*/
      /* -------- MOVE values from CSP Table to XP1REC -------*/
      XP1REC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
      XP1REC.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
      XP1REC.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      XP1REC.XXXSTAT = XWHTBL.XXXSTAT[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      XP1REC.XP1ERRFL = "1"; /* MOVE error code to XP1REC*/
    end /* END of 'IF' statement*/
  end /* END of 'IF' statement*/


   /* ***************  end of warehouse retrieval ****************/
end // end XSABSWH

//*** RECORD=AB0GW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB0GW01 type basicRecord
  10 SY4IDDSC SY4IDDSC [10] ; 
  10 SY5SZID SY5SZID [10] ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 AB0GWCIN AB0GWCIN ; 
  10 AB0GWQTM AB0GWQTM ; 
  10 AB0GWQTT AB0GWQTT ; 
  10 AB0GWQTW AB0GWQTW ; 
  10 AB0GWSDS AB0GWSDS ; 
    15 AB0GWSD1 AB0GWSD1 ; 
    15 AB0GWSD2 AB0GWSD2 ; 
    15 AB0GWSD3 AB0GWSD3 ; 
    15 AB0GWSD4 AB0GWSD4 ; 
    15 AB0GWSD5 AB0GWSD5 ; 
  10 AB0GWSDC AB0GWSDC ; 
    15 AB0GWSC1 AB0GWSC1 ; 
    15 AB0GWSC2 AB0GWSC2 ; 
    15 AB0GWSC3 AB0GWSC3 ; 
    15 AB0GWSC4 AB0GWSC4 ; 
    15 AB0GWSC5 AB0GWSC5 ; 
  10 AB0GWSZC AB0GWSZC ; 
  10 AB0GWTSP AB0GWTSP ; 
  10 AB0GWUPD AB0GWUPD ; 
  10 AB0GW-PF13-MODE AB0GW-PF13-MODE ; 
  10 AB0GWUPI AB0GWUPI ; 
  10 AB0GWXSA AB0GWXSA ; 
    15 AB0GWXSS AB0GWXSS ; 
    15 AB0GWXYR AB0GWXYR ; 
  10 AB0GWXSY AB0GWXSY ; 
  10 AB0GW-SIZE-QTY-TOTAL AB0GW-SIZE-QTY-TOTAL [10] ; 
  10 AB0GW-COLOR-QTY-TOTAL AB0GW-COLOR-QTY-TOTAL ; 
end // end AB0GW01

//*** RECORD=AB0GW02 ****
// *****************************************************
// Application Working Storage (2): Map Detail Save Area
// *****************************************************
// ***********************
Record AB0GW02 type basicRecord
  10 AB0GWLEN AB0GWLEN ; 
  10 AB0GWSTA AB0GWSTA [12] ; 
  10 AB0GWSTC AB0GWSTC [12] ; 
  10 AB0GWCLR AB0GWCLR [12] ; 
  10 AB0GWQ1 AB0GWQ1 [12] ; 
  10 AB0GWQ2 AB0GWQ2 [12] ; 
  10 AB0GWQ3 AB0GWQ3 [12] ; 
  10 AB0GWQ4 AB0GWQ4 [12] ; 
  10 AB0GWQ5 AB0GWQ5 [12] ; 
  10 AB0GWQ6 AB0GWQ6 [12] ; 
  10 AB0GWQ7 AB0GWQ7 [12] ; 
  10 AB0GWQ8 AB0GWQ8 [12] ; 
  10 AB0GWQ9 AB0GWQ9 [12] ; 
  10 AB0GWQ10 AB0GWQ10 [12] ; 
  10 AB0GWTOT AB0GWTOT [12] ; 
  10 AB0GWCCT AB0GWCCT [12] ; 
end // end AB0GW02

//*** RECORD=AB0GW03 ****
// *****************************************************
// Application Working Storage (2): Map Detail Save Area
// *****************************************************
// ***********************
Record AB0GW03 type basicRecord
  10 AB0GW-STYLE-CNT AB0GW-STYLE-CNT ; 
  10 AB0GW-STYLE-IDX AB0GW-STYLE-IDX ; 
  10 SY1STNBR SY1STNBR [1000] ; 
  10 XOWCD XOWCD [1000] ; 
  10 XWHCD XWHCD [1000] ; 
end // end AB0GW03

// size quantity accumulators
DataItem AB0GW-COLOR-QTY-TOTAL num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF13 MODE INDICATOR
DataItem AB0GW-PF13-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size quantity accumulators
DataItem AB0GW-SIZE-QTY-TOTAL num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style counter
DataItem AB0GW-STYLE-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// STYLE INDEX
DataItem AB0GW-STYLE-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count
DataItem AB0GWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map Qty change indicator
DataItem AB0GWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color cd
DataItem AB0GWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem AB0GWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 1
DataItem AB0GWQ1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 10
DataItem AB0GWQ10 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 2
DataItem AB0GWQ2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 3
DataItem AB0GWQ3 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 4
DataItem AB0GWQ4 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 5
DataItem AB0GWQ5 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 6
DataItem AB0GWQ6 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 7
DataItem AB0GWQ7 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 8
DataItem AB0GWQ8 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty 9
DataItem AB0GWQ9 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map Qty accum wk
DataItem AB0GWQTM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty totals wk
DataItem AB0GWQTT num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Qty accum wk
DataItem AB0GWQTW num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size wk area 2 fld 1
DataItem AB0GWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 2 fld 2
DataItem AB0GWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 2 fld 3
DataItem AB0GWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 2 fld 4
DataItem AB0GWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 2 fld 5
DataItem AB0GWSC5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 1 fld 1
DataItem AB0GWSD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 1 fld 2
DataItem AB0GWSD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 1 fld 3
DataItem AB0GWSD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 1 fld 4
DataItem AB0GWSD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size wk area 1 fld 5
DataItem AB0GWSD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk area 2
DataItem AB0GWSDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc wk area 1
DataItem AB0GWSDS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row status indicator 1
DataItem AB0GWSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row status indicator 2
DataItem AB0GWSTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size count + 1
DataItem AB0GWSZC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty totals
DataItem AB0GWTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved curr TSQ page
DataItem AB0GWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update successful flag
DataItem AB0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid update indicator
DataItem AB0GWUPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB0GWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0GWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB0GWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0GWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

