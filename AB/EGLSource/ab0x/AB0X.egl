package ab0x;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0X ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/28/88   userid   New application.
// 08/15/90   cross    fix to totals and pf7, pf8
// 06/24/93   LREIN    added PO type 'AD'
// 07-19-93   LREIN    when fcty changed, chg po type to 'AD'
//                     if appropriate
// 11-15-93   SBABCO   Take out 07-19-93 change. DO NOT change
//                     PO type.  Pull data for logon scheduler.
// 09-20-95   rprado   added pf14 and pf15 to global updte
//                     action to 's' and 'b' corresp.
// 02-28-97   klee     added scheduler code to screen.
// 04-07-97   klee     added scheduler code to AB0XW06
// 04-21-97   sames    highlighted factory/style errors
// 04-21-97   sames    corrected tsq length
// Y2KFIX   01/29/98  KSUMME  Y2K MODIFICATIONS MADE TO:
//       Y2K TABLE CHANGE: AB0X120, AB0X130, AB0X150
//       GLOBAL CHANGES:  AB3REC, AB4REC, AB5REC, AB7REC,
//                        ABWREC, AFEREC, XP1REC, XPAB020
//                        ABWREC, AFEREC, XP1REC, XPAB020
// 02-14-98  oricha    y2k modifications:  change calls to
//           y2kproj   vnilpb02 - ab0x612, 617.
// 06-18-98  schen     changed for generic buy maintenance.
// 07-16-98  RHARAT    changed map AB0XM001:
//                     added source location flag.
//                     changed logic to work for promo, smu,
//                     direct ship apart from nil.
//                     Changed IOMOD references to AB500D.
//                     Used AB7REC.XDMCD and AB7REC.OP1PARTN
//                     to send process type and source location
//                     flag to IOMOD. These two valeues are not
//                     referenced in appliction as dimension cd
//                     and part char.
// *********************
Program AB0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0XW01 AB0XW01; // record
  AB0XW02 AB0XW02; // record
  AB0XW03 AB0XW03; // record
  AB0XW04 AB0XW04; // record
  AB0XW05 AB0XW05; // record
  AB0XW06 AB0XW06; // record
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  AB5REC AB5REC; // record
  AB7REC AB7REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  AFEREC AFEREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  PC2REC PC2REC; // record
  PC6REC PC6REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use AB0XM.AB0XM001,  // forms
      AB0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();

     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AB0XW01 empty; /* Initialize working storage*/
    set AB0XW02 empty; /* Initialize working storage*/
    set AB0XW03 empty; /* Initialize working storage*/
    set AB0XW04 empty; /* Initialize working storage*/
    set AB0XW05 empty; /* Initialize working storage*/
    set AB0XW06 empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set AB2REC empty; /* Initialize rec*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AB0XM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AB0X"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/
    AB0XW01.AB0XWSZM = 10; /* set index maximum for screen array*/
    move " " to AB0XW03.XSECD[1] for all;
    AB0XW01.AB0XWSZT = sysVar.arrayIndex; /* set index max for internal table*/

    XP1REC.XGPCD = "03"; /* gpc cd*/
    ABPREC.TARJCL = COMMAREA.CA-USER-WORKAREA-2K-B; /* move commarea*/
    ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
    ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
    ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "N"; /* Indicate request for data*/
    ABWREC.ABWTSL = +496; /* set the tsq size*/

    goto AB0X001; /* Converse Apparel Buy Prototype*/




    AB0X001: AB0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0X001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0X

// Choose which map to display
Function AB0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB0X100(); /* Obtain the data to display*/

  AB0X200(); /* Format and display the map*/

  AB0X300(); /* Check attention identifier*/

  AB0X400(); /* Reset fields to normal intensity*/

  AB0X500(); /* Verify the entered data*/

  AB0X600(); /* Process valid input request*/



end // end AB0X001

// create new tsq data for new sy
Function AB0X100()

   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0
   || AB0XW01.AB0XWUPD == "Y") /* update pending*/
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* create new tsq data for style change*/
   /* ------------------------------------------------------------*/
  AB0X110(); /* Purge any temporary storage*/

  AB0X120(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/

    set AB0XW04 empty; /* Clear temporary storage record*/
    AB0XW04.AB0XWMX4 = 0; /* Initialize tsq array number*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0X130(); /* Obtain data and format page*/

      if (AB0XW04.AB0XWMX4 >= AB0XW01.AB0XWSZM) /* Page is full*/
        AB0X140(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && AB0XW04.AB0XWMX4 > 0)             /* Page contains data to be written*/
    AB0X140(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0X150(); /* Close the selected set cursor*/
  end

  ABWREC.ABWTSP = 1; /* use first page*/
  set AB2REC empty; /* Clear temporary storage record*/

  AB0XW01.AB0X-GLOBAL-UPD = "    ";
end // end AB0X100

// Purge any temporary storage
Function AB0X110()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (AB0XW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                         /* ; subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  end

  ABWREC.ABWTSP = 0; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AB0X110

// Open cursor for Vnilpb01
Function AB0X120()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  set AB7REC empty;

  AB7REC.PG1SC4CD = "*"; /* Scheduler code*/
  AB7REC.SY1STNBR = "*"; /* style number*/
  AB7REC.SY2CLRID = "*"; /* style color*/
  AB7REC.FY1FCTYC = "*"; /* factory code*/
  AB7REC.PC2CUXID = "*"; /* cust x-ref code*/
  AB7REC.AB7PBYTP = "*"; /* buy type*/
  AB7REC.AB7PBYST = "*"; /* status*/
  AB7REC.OP1PARTN = "*"; /* field being used for source location*/

  if (AB0XW05.PG-SCHED-SPCLT-CD > " ")
    AB7REC.PG1SC4CD = AB0XW05.PG-SCHED-SPCLT-CD; /* sched cd*/
  end

  if (AB0XW05.SY1STNBR > " ")
    AB7REC.SY1STNBR = AB0XW05.SY1STNBR; /* style number*/
  end

  if (AB0XW05.SY2CLRID > " ")
    AB7REC.SY2CLRID = AB0XW05.SY2CLRID; /* style color*/
  end

  if (AB0XW05.FY1FCTYC > " ")
    AB7REC.FY1FCTYC = AB0XW05.FY1FCTYC; /* factory code*/
  end

  if (AB0XW05.PC2CUXID > " ")
    AB7REC.PC2CUXID = AB0XW05.PC2CUXID; /* cust x-ref code*/
  end

  if (AB0XW05.AB0XWACT > " "
   && AB0XW05.AB0XWACT != "AB"
   && AB0XW05.AB0XWACT != "NB")
    AB7REC.AB7PBYTP = AB0XW05.AB0XWACT; /* buy type*/
  end

  if (AB0XW05.SRCLOCATION > " ")
    AB7REC.OP1PARTN = AB0XW05.SRCLOCATION; /* source location*/
  end

  if (AB0XW05.AB7PBYST > " ")
    AB7REC.AB7PBYST = AB0XW05.AB7PBYST; /* status*/
  end

  AB7REC.XDMCD = AB0XW05.PROCESS-TYPE; /* Process type*/

   /* -------------------Y2K OUT BEGIN-----------------------*/
   /*  */
   /* CALL IO5730 'S1',SQLCA,AB7REC (NOMAPS,NONCSP,REPLY; /*Select table set*/
   /*  */
   /* -------------------Y2K OUT END-------------------------*/
   /* -------------------Y2K IN BEGIN-----------------------*/
   /*  */
  try
    call "AB500D" ("S1", SQLCA, AB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
   /*  */
   /* -------------------Y2K IN END-------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VNILPB01"; /* Table view name*/
    TA1REC.TA1TBLKE = AB7REC.AB7KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AB0X120

// Fetch row & process Vnilpb01
Function AB0X130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set AB7REC empty;

   /* -----------------Y2K OUT BEGIN-------------------*/
   /*  */
   /* CALL IO5730 'N1',SQLCA,AB7REC (NOMAPS,NONCSP,REPLY;/* Fetch next row*/
   /*  */
   /* -----------------Y2K OUT END---------------------*/
   /* -----------------Y2K IN BEGIN-------------------*/
   /*  */
  try
    call "AB500D" ("N1", SQLCA, AB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
   /*  */
   /* -----------------Y2K IN END---------------------*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VNILPB01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end

  AB0XW04.AB0XWMX4 = AB0XW04.AB0XWMX4 + 1; /* Increment line index*/
  AB0XW01.AB0XWIDX = 1;
  AB0XW04.AB0XWQTY[AB0XWMX4] = 0;
  AB0XW01.AB0XWQTY = 0;
  while (AB0XW01.AB0XWIDX <= 10)
    AB0XW01.AB0XWQTY = AB0XW01.AB0XWQTY + AB7REC.AB7PBYQY[AB0XWIDX];
    AB0XW01.AB0XWIDX = AB0XW01.AB0XWIDX + 1;
  end

  AB0XW04.AB0XWQTY[AB0XWMX4] = AB0XW01.AB0XWQTY;

  if (AB0XW01.AB0XWQTY >= AB0XW05.AB0XWMIN)

    if (AB0XW05.AB0XWACT == "AB" /* ALL RECORDS NOT BOUGHT*/
     && AB7REC.AB7PBYTP != "B"   
     && AB7REC.AB7PBYTP != "R") 
      AB0XW04.AB0XWMX4 = AB0XW04.AB0XWMX4 - 1; /* DECrement line index*/
      return; /* SKIP RECORD*/
    end

    if (AB0XW05.AB0XWACT == "NB" /* ALL RECORDS NOT BOUGHT*/
     && AB7REC.AB7PBYTP != " "   
     && AB7REC.AB7PBYTP != "P"   
     && AB7REC.AB7PBYTP != "S") 
      AB0XW04.AB0XWMX4 = AB0XW04.AB0XWMX4 - 1; /* DECrement line index*/
      return; /* SKIP RECORD*/
    end

  /* IF AB7REC.PC4ORTYP NE 'XD'*/
  /* AND AB7REC.PC4ORTYP NE 'AD'*/
  /* AND AB7REC.PC4ORTYP NE 'XI';*/
  /* AB0XW04.AB0XWMX4 = AB0XW04.AB0XWMX4 - 1;/* DECrement line index*/
  /* EZERTN;                      /* SKIP RECORD*/
  /* END;*/

     /* Save data to display*/
    AB0XW04.AB0XWQTY[AB0XWMX4] = AB0XW01.AB0XWQTY;
    AB0XW04.AB7PBYTP[AB0XWMX4] = AB7REC.AB7PBYTP;
    AB0XW04.AB7PBSDT[AB0XWMX4] = AB7REC.AB7PBSDT;
    AB0XW04.AB7PBYST[AB0XWMX4] = AB7REC.AB7PBYST;
    AB0XW04.AB7PBADT[AB0XWMX4] = AB7REC.AB7PBADT;
    AB0XW04.SY1STNBR[AB0XWMX4] = AB7REC.SY1STNBR;
    AB0XW04.SY2CLRID[AB0XWMX4] = AB7REC.SY2CLRID;
    AB0XW04.FY1FCTYC[AB0XWMX4] = AB7REC.FY1FCTYC;
    AB0XW04.PC2CUXID[AB0XWMX4] = AB7REC.PC2CUXID;
    AB0XW04.PC4ORTYP[AB0XWMX4] = AB7REC.PC4ORTYP;
    AB0XW04.PC3PONBR[AB0XWMX4] = AB7REC.PC3PONBR;
    AB0XW04.PG-SCHED-SPCLT-CD[AB0XWMX4] = AB7REC.PG1SC4CD;
    AB0XW04.XSECD[AB0XWMX4] = AB7REC.XSECD;
    AB0XW04.XSNYR[AB0XWMX4] = AB7REC.XSNYR;
    AB0XW04.ZZZCHGCT[AB0XWMX4] = AB7REC.ZZZCHGCT;

    AB0XW03.AB0XWMX3 = AB0XW03.AB0XWMX3 + 1;
  else /* DO NOT SAVE*/

    AB0XW04.AB0XWMX4 = AB0XW04.AB0XWMX4 - 1; /* DECrement line index*/

  end

end // end AB0X130

// Add page to temporary storage
Function AB0X140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AB0XW04.AB0XWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AB0XW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  AB0XW01.AB0XWTBX = TA5REC.TA5TSQIX; /* ws highest pg number*/

  set AB0XW04 empty; /* Clear temporary storage record*/


end // end AB0X140

// Close cursor for Vnilpb01
Function AB0X150()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* ---------------------------Y2K OUT BEGIN------------------------*/
   /*  */
   /* CALL IO5730 'C1',SQLCA,AB7REC (NOMAPS,NONCSP,REPLY; /* Close table set*/
   /*  */
   /* ---------------------------Y2K OUT END--------------------------*/
   /* ---------------------------Y2K IN BEGIN------------------------*/
   /*  */
  try
    call "AB500D" ("C1", SQLCA, AB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
   /*  */
   /* ---------------------------Y2K IN END--------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "125 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VNILPB01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AB0X150

// Format and display the map
Function AB0X200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0XM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/
    if (AB0XW01.AB0XWUPD != "Y") /* update not pending*/
      set AB0XM001 initial; /* Clear map output area*/
      AB0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
      if (converseVar.validationMsgNum == 0) /* No error message to display*/
        AB0X210(); /* Format the data on the page*/
      end
      ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  if (converseVar.validationMsgNum == 9999)
    converseLib.validationFailed(0); /* Information message number*/
    if (AB0XW01.AB0XWUPD != "Y")
      set AB0XM001 initial; /* Clear map output area*/
      AB0X210(); /* Format the data on the page*/
    else
      AB0XW01.AB0XWUPD = "N";
      ABWREC.ABWIXM = 1;
      while (ABWREC.ABWIXM <= 10)
        if (AB0XW04.SY1STNBR[ABWIXM] == " ")
          AB0X212();
        else
          AB0X215();
        end
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
      end
    end
  end
  ABWREC.ABWNMO = 0; /* Reset information message number*/

  if (converseVar.validationMsgNum != 0) /* With message to display*/
    set AB0XM001 alarm; /* Sound alarm*/
  end

  if (AB0XW01.AB0XWUPD == "Y")
    set AB0XM001.PF7MAP skip, invisible;
    set AB0XM001.PF8MAP skip, invisible;
  else
    set AB0XM001.PF7MAP initialAttributes;
    set AB0XM001.PF8MAP initialAttributes;
  end

  AB0XM001.PROCTYP = ABPREC.PROCESS-TYP;
  AB0XM001.SRCLOC = AB0XW05.SRCLOCATION;

  if (AB0XM001.PROCTYP == "N"
   || AB0XM001.PROCTYP == "P"
   || AB0XM001.PROCTYP == "S"
   || AB0XM001.PROCTYP == "D") /* valid process type*/
    set AB0XM001.PROCTYP skip;
  end

  if (AB0XM001.SRCLOC == "B" /* has a user entered valid value*/
   || AB0XM001.SRCLOC == "D" 
   || AB0XM001.SRCLOC == "F") /* valid source code*/
    set AB0XM001.SRCLOC skip;
  end
  converse AB0XM001 ;


end // end AB0X200

// Format the selected data
Function AB0X210()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  AB0XM001.XXX-USER-ID = AB0XW05.XXX-USER-ID;
  AB0XM001.SY1STNBR = AB0XW05.SY1STNBR;
  AB0XM001.SY2CLRID = AB0XW05.SY2CLRID;
  AB0XM001.FY1FCTYC = AB0XW05.FY1FCTYC;
  AB0XM001.AB0XMMIN = AB0XW05.AB0XWMIN;
  AB0XM001.PC2CUXID = AB0XW05.PC2CUXID;
  AB0XM001.AB7PBYTP = AB0XW05.AB0XWACT;
  AB0XM001.AB7PBYST = AB0XW05.AB7PBYST;

  AB0XM001.AB0XMPGN = ABWREC.ABWTSP;
  AB0XM001.AB0XMPGS = ABWREC.TA5TSQIX;

  if (AB0XW03.AB0XWMX3 <= 0)
    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    if (ABWREC.ABWFIRST != " ")
      converseLib.validationFailed(05); /* Indicate no data to display*/
    else
      converseLib.validationFailed(0);
    end
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= 10) /* Until end of lines*/
      AB0X211(); /* clear fields*/
      AB0X212(); /* protect fields*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    end
    return; /* Return to previous process*/
  end

              /* (Process scroll request)*/

  if (ABWREC.ABWTSP != ABWREC.TA5TSQIX /* desired page not current*/
   || AB0XW04.AB0XWMX4 <= 0)           /* no data contained in ab0xw04record*/
    AB0X213(); /* obtain temporary storage page;*/
  end

  /* SET AB0XM001.SY1STNBR CURSOR;*/
  set AB0XM001.XXX-USER-ID cursor;
  ABWREC.ABWIXM = 1; /* Initialize line index*/
  while (ABWREC.ABWIXM <= 10) /* Until end of lines*/
    if (AB0XW04.SY1STNBR[ABWIXM] > " ")
      AB0XM001.AB0XMACT[ABWIXM] = AB0XW04.AB7PBYTP[ABWIXM];
      AB0XM001.AB0XMSTT[ABWIXM] = AB0XW04.AB7PBYST[ABWIXM];
      AB0XM001.AB0XMSTY[ABWIXM] = AB0XW04.SY1STNBR[ABWIXM];
      AB0XM001.AB0XMCLR[ABWIXM] = AB0XW04.SY2CLRID[ABWIXM];
      AB0XM001.AB0XMMFG[ABWIXM] = AB0XW04.FY1FCTYC[ABWIXM];
      AB0XM001.AB0XMCXR[ABWIXM] = AB0XW04.PC2CUXID[ABWIXM];
      AB0XM001.AB0XMOTO[ABWIXM] = AB0XW04.PC4ORTYP[ABWIXM];
      AB0XM001.AB0XMQTY[ABWIXM] = AB0XW04.AB0XWQTY[ABWIXM];
      AB0XM001.AB0XMPON[ABWIXM] = AB0XW04.PC3PONBR[ABWIXM];
      AB0XM001.AB0XMSCD[ABWIXM] = AB0XW04.PG-SCHED-SPCLT-CD[ABWIXM];
     /* IF AB0XW05.XXX-USER-ID NE COMMAREA.CAUSERID;*/
        /* MOVE 'Y' TO AB0XW01.AB0X-RESTRICT-GLOBAL;*/
        /* PERFORM AB0X214;          /* protect fields*/
     /* END;*/
    else
      AB0X211(); /* clear fields*/
      AB0X212(); /* protect fields*/
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end


end // end AB0X210

// clear lower map fields
Function AB0X211()
  AB0XM001.AB0XMACT[ABWIXM] = " ";
  AB0XM001.AB0XMSTT[ABWIXM] = " ";
  AB0XM001.AB0XMSTY[ABWIXM] = " ";
  AB0XM001.AB0XMCLR[ABWIXM] = " ";
  AB0XM001.AB0XMMFG[ABWIXM] = " ";
  AB0XM001.AB0XMSCD[ABWIXM] = " ";
  AB0XM001.AB0XMCXR[ABWIXM] = " ";
  AB0XM001.AB0XMOTO[ABWIXM] = " ";
  AB0XM001.AB0XMQTY[ABWIXM] = 0;
  AB0XM001.AB0XMPON[ABWIXM] = 0;

end // end AB0X211

// protect lower map fields
Function AB0X212()
  set AB0XM001.AB0XMACT[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMSTT[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMSTY[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMCLR[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMMFG[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMSCD[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMCXR[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMOTO[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMQTY[ABWIXM] skip, invisible;
  set AB0XM001.AB0XMPON[ABWIXM] skip, invisible;

end // end AB0X212

// obtain tsq record
Function AB0X213()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AB0XW04.AB0XWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AB0XW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "21F "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0X213

// protect lower map fields
Function AB0X215()
  set AB0XM001.AB0XMACT[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMSTT[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMSTY[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMCLR[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMMFG[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMSCD[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMCXR[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMOTO[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMQTY[ABWIXM] initialAttributes;
  set AB0XM001.AB0XMPON[ABWIXM] initialAttributes;

end // end AB0X215

// Check attention identifier
Function AB0X300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* Clear the map fields*/

    converseLib.validationFailed(); /* bypass all processing.*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = AB0XM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0XM001.CAITEM; /* Application data*/

      XSABS02(); /* Exit to another application*/

    else

      converseLib.validationFailed(4); /* Indicate PF key not valid*/

    end

    set AB0XM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    XSABS02(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end





  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end
  if (converseVar.eventKey not enter && 
  AB0XW01.AB0XWUPD == "Y")
    converseLib.validationFailed(4);
    exit stack;
  end


  if (AB0XM001.PROCTYP != "N"
   && AB0XM001.PROCTYP != "P"
   && AB0XM001.PROCTYP != "S"
   && AB0XM001.PROCTYP != "D") /* invalid process type*/
    ABPREC.PROCESS-TYP = AB0XM001.PROCTYP; /* invalid process type*/
    AB0XW05.SRCLOCATION = AB0XM001.SRCLOC; /* move to work area*/
    set AB0XM001.PROCTYP cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(146); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  else
    ABPREC.PROCESS-TYP = AB0XM001.PROCTYP; /* move to work area*/
    AB0XW05.PROCESS-TYPE = AB0XM001.PROCTYP; /* temp work area*/
  end

  if (AB0XM001.SRCLOC != "D"
   && AB0XM001.SRCLOC != "F"
   && AB0XM001.SRCLOC != "B"
   && AB0XM001.SRCLOC != " ") /* invalid source location*/
    AB0XW05.SRCLOCATION = AB0XM001.SRCLOC; /* move to work area*/
    set AB0XM001.SRCLOC cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(195); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  else
    AB0XW05.SRCLOCATION = AB0XM001.SRCLOC; /* move to work area*/
  end

  if (AB0XM001.SRCLOC == " ") /* both domestic and foreign*/
    AB0XW05.SRCLOCATION = "B"; /* move to work area*/
  end

end // end AB0X300

// Reset highlighted fields
Function AB0X400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/



  set AB0XM001.SY1STNBR initialAttributes;
  set AB0XM001.SY2CLRID initialAttributes;
  set AB0XM001.FY1FCTYC initialAttributes;
  set AB0XM001.AB0XMMIN initialAttributes;
  set AB0XM001.PC2CUXID initialAttributes;
  set AB0XM001.AB7PBYTP initialAttributes;
  set AB0XM001.AB7PBYST initialAttributes;
  set AB0XM001.XXX-USER-ID initialAttributes;


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= 10) /* Until end of lines*/
    set AB0XM001.AB0XMACT[ABWIXM] initialAttributes;
    set AB0XM001.AB0XMMFG[ABWIXM] initialAttributes;
    set AB0XM001.AB0XMPON[ABWIXM] initialAttributes;
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end


  set AB0XM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0XM001.CAITEM initialAttributes; /* Commarea application data*/


end // end AB0X400

// Verify the entered data
Function AB0X500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AB0XM001.CAITEM > " ") /* Application data was entered*/

    set AB0XM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  if (AB0XW01.AB0XWUPD == "Y")
    return;
  end
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AB0X510(); /* Verify scroll request*/
  else
    AB0X520(); /* Verify selection criteria*/
    if (ABWREC.ABWSWR == "N")
      AB0X530(); /* Verify any changed data*/
      if (AB0XW01.AB0XW-CHANGE-FLAG == "N")
        if (ABWREC.TA5TSQIX == 0) /* no data selected yet*/
          ABWREC.ABWSWR = "Y"; /* select data*/
        end
        exit stack;
      end
    end
    if (ABWREC.ABWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end AB0X500

// Verify scroll request
Function AB0X510()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end




end // end AB0X510

// Edit selection criteria
Function AB0X520()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

   /* *************************************************************/
  if (AB0XM001.XXX-USER-ID != AB0XW05.XXX-USER-ID)
    AB0XW05.XXX-USER-ID = AB0XM001.XXX-USER-ID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.SY1STNBR != AB0XW05.SY1STNBR)
    AB0XW05.SY1STNBR = AB0XM001.SY1STNBR;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.SY2CLRID != AB0XW05.SY2CLRID)
    if (AB0XW05.SY1STNBR == " "
     && AB0XM001.SY2CLRID != " ")
      XP1REC.XP1MNO = 54;
      set AB0XM001.SY2CLRID bold;
      set AB0XM001.SY1STNBR cursor, bold;
    end
    AB0XW05.SY2CLRID = AB0XM001.SY2CLRID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.FY1FCTYC != AB0XW05.FY1FCTYC)
    AB0XW05.FY1FCTYC = AB0XM001.FY1FCTYC;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.AB0XMMIN != AB0XW05.AB0XWMIN)
    AB0XW05.AB0XWMIN = AB0XM001.AB0XMMIN;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.PC2CUXID != AB0XW05.PC2CUXID)
    AB0XW05.PC2CUXID = AB0XM001.PC2CUXID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.AB7PBYTP != AB0XW05.AB0XWACT)
    AB0XW05.AB0XWACT = AB0XM001.AB7PBYTP;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end

  if (AB0XM001.AB7PBYST != AB0XW05.AB7PBYST)
    AB0XW05.AB7PBYST = AB0XM001.AB7PBYST;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
  end


   /* *************************************************************/

  if (ABWREC.ABWSWR == "Y") /* if any selection criteria changed*/
    /* ============================================================*/
    /* ===       Put in edits of selection criteria HERE        ===*/
    /* ===  (If any errors found turn re-select switch 'OFF')   ===*/
    /* ============================================================*/
    set AB0XW04 empty; /* clear array*/
    XP1REC.XGPCD = "03"; /* gpc cd*/
    AB0X528(); /* edit scheduler code*/
    AB0X527(); /* edit action/special action codes*/
    AB0X526(); /* edit CUSTOMER code*/
    AB0X525(); /* edit factory code*/
    AB0X521(); /* edit style number*/
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= 10) /* Until end of lines*/
      AB0X211(); /* clear fields*/
      AB0X212(); /* protect fields*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    end

    set AB0XW03 empty;
  end
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  converseLib.clearScreen();

   /* ====================== END OF PROCESS ======================*/
end // end AB0X520

// Edit STYLE
Function AB0X521()
  if (AB0XW05.SY1STNBR == " ") /* ab0xw05 Field eq spaces*/
    AB0XW01.SY1STNBR = " "; /* Space out specific style wk*/
    AB0XM001.SY1SSTNM = " "; /* Space out desc*/
    AB0XW05.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0X522(); /* Select set style*/

  if (AB0XM001.SY2CLRID > " ")
    while (AB0XM001.SY2CLRID != PG2REC.SY2CLRID
     && SQLCA.VAGen_SQLCODE != 100)
      AB0X523(); /* Validate style*/
    end
  else
    AB0X523(); /* Validate style*/
  end

  AB0X524(); /* Close style cursor*/



end // end AB0X521

// select set style cursor
Function AB0X522()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0XW05.SY1STNBR; /* Style no.*/



   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "52B "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNILPB01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0X522

// process style row
Function AB0X523()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0XW05.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0XM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0XW01.AB0XWFND = "Y"; /* STYLE FOUND*/
      if (AB0XW05.SY2CLRID > " ")
        AB0XW05.SY2CLRAB = PG2REC.SY2CLRAB; /* move COLOR desc*/
        AB0XM001.SY2CLRAB = PG2REC.SY2CLRAB; /* move COLOR desc*/
      end
      return; /* Return to calling process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      if (AB0XW01.AB0XWFND != "Y") /* Style was not valid*/
        AB0XW05.SY1STNBR = " "; /* Space out wk storage*/
        AB0XW05.SY1SSTNM = " "; /* Space out desc*/
        AB0XM001.SY1SSTNM = " "; /* Space out desc*/
        set AB0XM001.SY1STNBR cursor, bold; /* Highlight field*/
        XP1REC.XP1MNO = 38; /* Indicate error message*/
      end
      if (AB0XW05.SY2CLRID > " "
       && AB0XW01.AB0XWFND == "Y") /* Style was valid*/
        AB0XW05.SY2CLRID = " "; /* Space out wk storage*/
        AB0XW05.SY2CLRAB = " "; /* Space out desc*/
        AB0XM001.SY2CLRAB = " "; /* Space out desc*/
        XP1REC.XP1MNO = 91; /* Indicate error message*/
        set AB0XM001.SY2CLRID cursor, bold; /* Highlight field*/
      end
      ABWREC.ABWPRCSN = "143 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "52C "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0X523

// close style cursor
Function AB0X524()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "52D "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AB0X524

// edit Factory Code
Function AB0X525()
  if (AB0XW05.FY1FCTYC == " ") /* ab0xw05 Field eq spaces*/
    AB0XM001.FY1FCTYC = " "; /* Move blank Factory cd*/
    return; /* Return to calling process*/
  end


  if (AB0XW05.FY1FCTYC == "?") /* Pop-up window requested*/
    AB0XW05.FY1FCTYC = " "; /* Move blank Factory cd*/
    set AB0XM001.FY1FCTYC cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "52G "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0XW05.FY1FCTYC; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0XW05.FY1FCTYC = " "; /* Move blank Factory cd*/
      set AB0XM001.FY1FCTYC cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 41; /* Indicate error message*/
      ABWREC.ABWPRCSN = "525 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "525 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0X525

// edit customer nbr
Function AB0X526()
  if (AB0XW05.PC2CUXID == " ") /* ab0xw05 Field eq spaces*/
    AB0XM001.PC2CUXID = " "; /* Move blank customer cd*/
    return; /* Return to calling process*/
  end


  if (AB0XW05.PC2CUXID == "?") /* Pop-up window requested*/
    AB0XW05.PC2CUXID = " "; /* Move blank customer cd*/
    set AB0XM001.PC2CUXID cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "525 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if customer cd entered is found in dprodc.vprdcu01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC2REC empty; /* initialize db record*/
  PC2REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC2REC.PC2CUXID = AB0XW05.PC2CUXID; /* customer*/


   /* *=============================**/
   /* *  Access Dprodc.vprdcu01     **/
   /* *=============================**/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0XW05.PC2CUXID = " "; /* Move blank customer cd*/
      set AB0XM001.PC2CUXID cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 48; /* Indicate error message*/
      ABWREC.ABWPRCSN = "525 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "525 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPRDCU01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0X526

// edit action/special acion cds
Function AB0X527()
             /* ----------------------------*/
             /* |edit special action codes |*/
             /* ----------------------------*/

  if (AB0XW05.AB7PBYST == " ") /* ab0xw05 Field eq spaces*/
    AB0XM001.AB7PBYST = " "; /* Move blank Factory cd*/
  else

    if (AB0XW05.AB7PBYST != "F" /* Pop-up window requested*/
     && AB0XW05.AB7PBYST != "C" /* Pop-up window requested*/
     && AB0XW05.AB7PBYST != "T" /* Pop-up window requested*/
     && AB0XW05.AB7PBYST != "M") /* Pop-up window requested*/
      AB0XW05.AB7PBYST = " "; /* Move blank action  cd*/
      set AB0XM001.AB7PBYST cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 81; /* Indicate pop-up window not available*/
      ABWREC.ABWPRCSN = "525 "; /* Process number*/
    end
  end

             /* ----------------------------*/
             /* |edit special/action codes |*/
             /* ----------------------------*/
  if (AB0XW05.AB0XWACT == " ") /* ab0xw05 Field eq spaces*/
    AB0XM001.AB7PBYTP = " "; /* Move blank ACTION CODE*/
  else

    if (AB0XW05.AB0XWACT != "B"  /* BOUGHT*/
     && AB0XW05.AB0XWACT != "P"  /* PULL FROM STOCK*/
     && AB0XW05.AB0XWACT != "R"  /* REDIRECT*/
     && AB0XW05.AB0XWACT != "S"  /* SKIP*/
     && AB0XW05.AB0XWACT != "AB" /* ALL BUY (b,R)*/
     && AB0XW05.AB0XWACT != "NB") /* NO BUY (P, S, BLANK)*/
      AB0XW05.AB0XWACT = " "; /* Move blank action*/
      set AB0XM001.AB7PBYTP cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 80;
      ABWREC.ABWPRCSN = "525 "; /* Process number*/
    end
  end


end // end AB0X527

// Edit scheduler name
Function AB0X528()
  if (AB0XM001.XXX-USER-ID == " ")
    AB0XW05.XXX-USER-ID = " ";
    AB0XW05.PG-SCHED-SPCLT-CD = " ";
  else
    XP1REC.XP1ERRFL = " "; /* Reset error flag*/
    XP1REC.XXXUSER = AB0XM001.XXX-USER-ID;

    XPAB010(); /* Obtain Scheduler Code*/

    /* ***** If a new scheduler is entered, get correct season/year*/

    if (XP1REC.XP1ERRFL == " ") /* IF scheduler code okay*/
      AB0XW05.PG-SCHED-SPCLT-CD = XP1REC.PG1SC4CD;

      return; /* redisplay MAP*/

    end


    if (XP1REC.XP1ERRFL != " ") /* Scheduler Code not found*/
                   /* (field in error)*/
      ABWREC.ABWPRCSN = "528 "; /* Process number*/
      AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      XP1REC.XXXUSER = " "; /* Reset wk storage*/
      XP1REC.PG1SC4CD = " "; /* Reset save area*/
      AB0XW05.XXX-USER-ID = " ";
      AB0XW05.PG-SCHED-SPCLT-CD = " ";

      set AB0XM001.XXX-USER-ID cursor, bold; /* highlight field*/

      XP1REC.XP1MNO = 21; /* indicate error message*/
      return; /* Return to calling process*/

    end
  end


end // end AB0X528

// Verify any changed data
Function AB0X530()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/


  AB0XW01.AB0XW-CHANGE-FLAG = "N";
  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX1 = 1; /* Initialize line index*/
  AB0XW03.AB0XWTRQ = 0; /* Initialize wk tot qty*/

  while (ABWREC.ABWIXM <= 10) /* Until end of lines*/
    if (converseVar.eventKey is pf14
     && AB0XW01.AB0X-RESTRICT-GLOBAL != "Y")
      AB0XM001.AB0XMACT[ABWIXM] = "S";
    else
      if (converseVar.eventKey is pf15
       && AB0XW01.AB0X-RESTRICT-GLOBAL != "Y")
        AB0XM001.AB0XMACT[ABWIXM] = "B";
      end
    end
    if (AB0XW04.PC3PONBR[ABWIDX1] != AB0XM001.AB0XMPON[ABWIXM]
     || AB0XW04.AB7PBYTP[ABWIDX1] != AB0XM001.AB0XMACT[ABWIXM]
     || AB0XW04.FY1FCTYC[ABWIDX1] != AB0XM001.AB0XMMFG[ABWIXM])
      if (AB0XM001.AB0XMACT[ABWIXM] != "B"
       && AB0XM001.AB0XMACT[ABWIXM] != "R"
       && AB0XM001.AB0XMACT[ABWIXM] != "S"
       && AB0XM001.AB0XMACT[ABWIXM] != "P")
        XP1REC.XP1MNO = 84;
        set AB0XM001.AB0XMACT[ABWIXM] cursor, bold; /* highlight fld*/
        ABWREC.ABWPRCSN = "530 "; /* process number*/
      else
        if (AB0XM001.AB0XMACT[ABWIXM] == "R")
          if (AB0XM001.AB0XMPON[ABWIXM] > 0)
            AB0XS10(); /* verify po number*/
          else
            XP1REC.XP1MNO = 82;
            set AB0XM001.AB0XMPON[ABWIXM] cursor, bold; /* highlight f*/
            ABWREC.ABWPRCSN = "530 "; /* process number*/
          end
        else
          if (AB0XM001.AB0XMPON[ABWIXM] > 0)
            XP1REC.XP1MNO = 85;
            set AB0XM001.AB0XMPON[ABWIXM] cursor, bold;
            ABWREC.ABWPRCSN = "530 "; /* process number*/
          else
            if (AB0XM001.AB0XMMFG[ABWIXM] > "    ")
              AB0XS20();
              if (AB0XW01.AB0XW-VALID-FCTY == "Y")
                AB0XS21(); /* declare cursor*/
                AB0XS22(); /* fetch cursor*/
                AB0XS23(); /* close cursor*/
              end
            else
              AB0XS14(); /* get fcty*/
            end
          end
        end
      end
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

  end

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end

   /* EZERTN                        ; Return to previous process*/



end // end AB0X530

// Process valid input request
Function AB0X600()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* Decrement page number*/
    AB0XW04.AB0XWMX4 = 0;

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Scroll FWRD requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* Increment page number*/
    AB0XW04.AB0XWMX4 = 0;

    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is enter ||  /* update requested*/
  converseVar.eventKey is pf14 ||       /* global 's'*/
  converseVar.eventKey is pf15)         /* global 'b'*/

    if (AB0XW01.AB0XWUPD != "Y")
      if (converseVar.validationMsgNum != 88)
        ABWREC.ABWNMO = 89;
      end
      set AB0XM001.SY1STNBR skip;
      set AB0XM001.SY2CLRID skip;
      set AB0XM001.FY1FCTYC skip;
      set AB0XM001.AB0XMMIN skip;
      set AB0XM001.PC2CUXID skip;
      set AB0XM001.AB7PBYTP skip;
      set AB0XM001.AB7PBYST skip;
      set AB0XM001.XXX-USER-ID skip;
      ABWREC.ABWIXM = 1;
      while (ABWREC.ABWIXM <= 10
       && AB0XM001.AB0XMSTY[ABWIXM] > " ")
        if (converseVar.eventKey is pf14
         && AB0XW01.AB0X-RESTRICT-GLOBAL != "Y")
          AB0XM001.AB0XMACT[ABWIXM] = "S";
          AB0XW01.AB0X-GLOBAL-UPD = "PF14";
        else
          if (converseVar.eventKey is pf15
           && AB0XW01.AB0X-RESTRICT-GLOBAL != "Y")
            AB0XM001.AB0XMACT[ABWIXM] = "B";
            AB0XW01.AB0X-GLOBAL-UPD = "PF15";
          else
            AB0XW01.AB0X-GLOBAL-UPD = "    ";
          end
        end
        set AB0XM001.AB0XMACT[ABWIXM] skip;
        set AB0XM001.AB0XMSTT[ABWIXM] skip;
        set AB0XM001.AB0XMSTY[ABWIXM] skip;
        set AB0XM001.AB0XMCLR[ABWIXM] skip;
        set AB0XM001.AB0XMMFG[ABWIXM] skip;
        set AB0XM001.AB0XMCXR[ABWIXM] skip;
        set AB0XM001.AB0XMOTO[ABWIXM] skip;
        set AB0XM001.AB0XMQTY[ABWIXM] skip;
        set AB0XM001.AB0XMPON[ABWIXM] skip;
        ABWIXM = ABWIXM + 1;
      end
      AB0XW01.AB0XWUPD = "Y";
      return;
    end

    AB0XW01.AB0XWUPD = "N";
    ABWREC.ABWNMO = 0;

    AB0X610(); /* Update  data - dabuy.vnilpb01 table*/

    if (AB0XW01.AB0X-GLOBAL-UPD == "PF14" || 
    AB0XW01.AB0X-GLOBAL-UPD == "PF15")
      AB0X615(); /* update global*/
      AB0XW01.AB0X-GLOBAL-UPD = "    ";
    end

    ABWREC.ABWNMO = 045;
  end
end // end AB0X600

// update vnilpb01 table
Function AB0X610()

  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX1 = 1; /* Initialize line index*/


  while (ABWREC.ABWIXM <= AB0XW04.AB0XWMX4) /* Until end of lines*/
    if (AB0XW04.PC3PONBR[ABWIDX1] != AB0XM001.AB0XMPON[ABWIXM]
     || AB0XW04.AB7PBYTP[ABWIDX1] != AB0XM001.AB0XMACT[ABWIXM]
     || AB0XW04.AB7PBYST[ABWIDX1] != AB0XM001.AB0XMSTT[ABWIXM]
     || AB0XW04.FY1FCTYC[ABWIDX1] != AB0XM001.AB0XMMFG[ABWIXM])

     /* PERFORM AB0X611;               /* obtain unique record*/
      AB0X612(); /* change record/update record*/
      AB0X613(); /* update row in array*/

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

  end

  AB0X614(); /* Update TSQ record.*/

   /* EZERTN                        ; Return to previous process*/



end // end AB0X610

// update vnilpb01 row
Function AB0X612()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AB7REC empty;
  AB7REC.SY1STNBR = AB0XW04.SY1STNBR[ABWIDX1]; /* style number*/
  AB7REC.SY2CLRID = AB0XW04.SY2CLRID[ABWIDX1]; /* color id*/
  AB7REC.PC2CUXID = AB0XW04.PC2CUXID[ABWIDX1]; /* cust x-ref code*/
  AB7REC.XGPCD = "03"; /* GPC CODE*/
  if (ABPREC.PROCESS-TYP == "N")
    AB7REC.XDVCD = "02"; /* DIVISION CODE*/
  else
    if (ABPREC.PROCESS-TYP == "P")
      AB7REC.XDVCD = "03"; /* DIVISION CODE*/
    else
  /* IF ABPREC.PROCESS-TYP EQ 'S'OR ABPREC.PROCESS-TYP EQ 'D';*/
      AB7REC.XDVCD = "01"; /* DIVISION CODE*/
    end
  end
  AB7REC.XSECD = AB0XW04.XSECD[ABWIDX1]; /* SEASON CODE*/
  AB7REC.XSNYR = AB0XW04.XSNYR[ABWIDX1]; /* SEASON YEAR*/
  set FY1REC empty;
  FY1REC.XGPCD = "03";
  FY1REC.FY1FCTYC = AB0XM001.AB0XMMFG[ABWIXM]; /* facotory*/
  AB0XS31();

  /* IF FY1REC.FY6FOCD = 'S1';*/
  /* MOVE 'AD' TO AB7REC.PC4ORTYP;*/
  /* ELSE;*/
  AB7REC.PC4ORTYP = AB0XW04.PC4ORTYP[ABWIDX1]; /* order type*/
  /* END;*/

  AB7REC.AB7PBYST = AB0XW04.AB7PBYST[ABWIDX1]; /* status*/
  AB7REC.AB7PBSDT = AB0XW04.AB7PBSDT[ABWIDX1]; /* status dt*/

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  AB7REC.AB7PBYTP = AB0XM001.AB0XMACT[ABWIXM]; /* action type*/
  if (AB0XM001.AB0XMACT[ABWIXM] != AB0XW04.AB7PBYTP[ABWIDX1]) /**/
    AB7REC.AB7PBADT = XX0XW01.XX0XWDAT; /* update type date*/
  else
    AB7REC.AB7PBADT = AB0XW04.AB7PBADT[ABWIDX1]; /* move type date*/
  end

  AB7REC.ZZZCHGCT = AB0XW04.ZZZCHGCT[ABWIDX1];
  AB7REC.FY1FCTYC = AB0XM001.AB0XMMFG[ABWIXM]; /* facotory*/
  AB7REC.PC3PONBR = AB0XM001.AB0XMPON[ABWIXM]; /* po nbr*/
   /* UPDATE WITH PROPER WAREHOUSE CODE*/
   /* IF AB0XM001.AB0XMOTO(ABWIXM) EQ 'XI';*/
   /* AB0XM001.AB0XMMFG(ABWIXM) EQ 'XXX';/* special mult factory execption*/
   /* MOVE '51' TO AB7REC.XWHCD;      /* warehouse code*/
   /* ELSE;*/
   /* MOVE '  ' TO AB7REC.XWHCD;      /* warehouse code*/
   /* END;*/
   /* ------------------------------------------------------------*/
   /* update row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

   /* ****************************************************/
   /* -------- y2k out begin -------*/
   /* CALL IO5730 'U ',SQLCA,AB7REC (NOMAPS,NONCSP,REPLY;*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  try
    call "AB500D" ("U ", SQLCA, AB7REC) {isNoRefresh = yes, isExternal = yes};
  end
   /* -------- y2k in end ----------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "612 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE NILPB02 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNILPB02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0X612

// update row to ws array
Function AB0X613()
   /* ------------------------------------------------------------*/
   /* Format the data to the internal array.*/
   /* ------------------------------------------------------------*/

  AB0XW04.ZZZCHGCT[ABWIDX1] = AB0XW04.ZZZCHGCT[ABWIDX1] + 1;
  AB0XW04.AB7PBYTP[ABWIDX1] = AB7REC.AB7PBYTP; /* action type*/
  AB0XW04.AB7PBYST[ABWIDX1] = AB7REC.AB7PBYST; /* buy status*/
  AB0XW04.FY1FCTYC[ABWIDX1] = AB7REC.FY1FCTYC; /* facotory*/
  AB0XW04.PC4ORTYP[ABWIDX1] = AB7REC.PC4ORTYP; /* order type*/
  AB0XW04.PC3PONBR[ABWIDX1] = AB7REC.PC3PONBR; /* po number*/
  AB0XW04.XWHCD[ABWIDX1] = AB7REC.XWHCD; /* warehouse code*/


end // end AB0X613

// update page to temp. storage
Function AB0X614()
   /* ------------------------------------------------------------*/
   /* Update the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AB0XW04.AB0XWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Highest page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AB0XW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "614 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  set AB0XW04 empty; /* Clear temporary storage record*/


end // end AB0X614

// vnilpb01 table global update
Function AB0X615()

  AB0XW01.AB0XWTBX1 = 1;
  AB0XW01.AB0X-TA5TSQIX-SV = TA5REC.TA5TSQIX;
  while (AB0XW01.AB0XWTBX1 <= AB0XW01.AB0XWTBX)

    set AB0XW06 empty;
    AB0X616(); /* retrieve tsq page*/

    ABWREC.ABWIXM = 1;
    while (ABWREC.ABWIXM <= AB0XW06.AB0XWMX6) /* Until end of lines*/
      if ((AB0XW06.AB7PBYTP[ABWIXM] != "S" && 
      AB0XW01.AB0X-GLOBAL-UPD == "PF14") || 
      (AB0XW06.AB7PBYTP[ABWIXM] != "B" && 
      AB0XW01.AB0X-GLOBAL-UPD == "PF15"))

        AB0X617(); /* change record/update record*/
        AB0X619(); /* update row in array*/

      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end

    AB0X618(); /* Update TSQ record.*/

    /* EZERTN                        ; Return to previous process*/

    AB0XW01.AB0XWTBX1 = AB0XW01.AB0XWTBX1 + 1;


  end
  TA5REC.TA5TSQIX = AB0XW01.AB0X-TA5TSQIX-SV;
end // end AB0X615

// retrieve tsq page
Function AB0X616()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AB0XW06.AB0XWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = AB0XW01.AB0XWTBX1; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AB0XW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "21F "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0X616

// vnilpb01 row update (global)
Function AB0X617()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AB7REC empty;
  AB7REC.SY1STNBR = AB0XW06.SY1STNBR[ABWIXM]; /* style number*/
  AB7REC.SY2CLRID = AB0XW06.SY2CLRID[ABWIXM]; /* color id*/
  AB7REC.PC2CUXID = AB0XW06.PC2CUXID[ABWIXM]; /* cust x-ref code*/
  AB7REC.XGPCD = "03"; /* GPC CODE*/
  if (ABPREC.PROCESS-TYP == "N")
    AB7REC.XDVCD = "02"; /* DIVISION CODE*/
  else
    if (ABPREC.PROCESS-TYP == "P")
      AB7REC.XDVCD = "03"; /* DIVISION CODE*/
    else
  /* IF ABPREC.PROCESS-TYP EQ 'S'OR ABPREC.PROCESS-TYP EQ 'D';*/
      AB7REC.XDVCD = "01"; /* DIVISION CODE*/
    end
  end
  AB7REC.XSECD = AB0XW06.XSECD[ABWIXM]; /* SEASON CODE*/
  AB7REC.XSNYR = AB0XW06.XSNYR[ABWIXM]; /* SEASON YEAR*/

  AB7REC.PC4ORTYP = AB0XW06.PC4ORTYP[ABWIXM]; /* order type*/

  AB7REC.AB7PBYST = AB0XW06.AB7PBYST[ABWIXM]; /* status*/
  AB7REC.AB7PBSDT = AB0XW06.AB7PBSDT[ABWIXM]; /* status dt*/

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  if (AB0XW01.AB0X-GLOBAL-UPD == "PF14")
    AB7REC.AB7PBYTP = "S"; /* action type*/
  else
    if (AB0XW01.AB0X-GLOBAL-UPD == "PF15")
      AB7REC.AB7PBYTP = "B"; /* action type*/
    end
  end
  AB7REC.AB7PBADT = XX0XW01.XX0XWDAT; /* update type date*/

  AB7REC.ZZZCHGCT = AB0XW06.ZZZCHGCT[ABWIXM];
  AB7REC.FY1FCTYC = AB0XW06.FY1FCTYC[ABWIXM];
  AB7REC.PC3PONBR = AB0XW06.PC3PONBR[ABWIXM];
   /* ------------------------------------------------------------*/
   /* update row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

   /* -------- y2k out begin --------*/
   /* CALL IO5730 'U ',SQLCA,AB7REC (NOMAPS,NONCSP,REPLY;*/
   /* -------- y2k out end ----------*/
   /* -------- y2k in  begin --------*/
  try
    call "AB500D" ("U ", SQLCA, AB7REC) {isNoRefresh = yes, isExternal = yes};
  end
   /* -------- y2k in end ----------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "617 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE NILPB02 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNILPB02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0X617

// update temp storage page
Function AB0X618()
   /* ------------------------------------------------------------*/
   /* Update the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AB0XW06.AB0XWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = AB0XW01.AB0XWTBX1; /* Highest page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AB0XW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "614 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  set AB0XW06 empty; /* Clear temporary storage record*/


end // end AB0X618

Function AB0X619()
   /* ------------------------------------------------------------*/
   /* Format the data to the internal array.*/
   /* ------------------------------------------------------------*/

  AB0XW06.ZZZCHGCT[ABWIXM] = AB0XW06.ZZZCHGCT[ABWIXM] + 1;
  AB0XW06.AB7PBYTP[ABWIXM] = AB7REC.AB7PBYTP; /* action type*/

end // end AB0X619

// VERIFY REDIRECT PO
Function AB0XS10()

  if (AB0XM001.AB0XMPON[ABWIXM] < 000000
   || AB0XM001.AB0XMPON[ABWIXM] > 999999)
    XP1REC.XP1MNO = 61;
    set AB0XM001.AB0XMPON[ABWIXM] cursor, bold;
    ABWREC.ABWPRCSN = "S10";
  else
    if (AB0XM001.AB0XMPON[ABWIXM] != AB0XW04.PC3PONBR[ABWIDX1])

      AB0XS11(); /* select set po number*/

      while (PC6REC.PC4ORTYP != "IL"
       && PC6REC.PC4ORTYP != "ST"
       && PC6REC.PC4ORTYP != "OR"
       && PC6REC.PC6STAT != "OP"
       && SQLCA.VAGen_SQLCODE != 100)
        AB0XS12(); /* fetch one row*/
      end

      if (SQLCA.VAGen_SQLCODE == +100) /* IF PO number is found*/
        /* ***** this is an error ******/
        XP1REC.XP1MNO = 61;
        set AB0XM001.AB0XMPON[ABWIXM] cursor, bold;
        ABWREC.ABWPRCSN = "S10";
      else
        AB0XW01.AB0XW-CHANGE-FLAG = "Y";
      end
      AB0XS13(); /* close set po number*/

    else
      if (AB0XM001.AB0XMMFG[ABWIXM] != AB0XW04.FY1FCTYC[ABWIDX1])
        if (AB0XM001.AB0XMMFG[ABWIXM] > "    ")
          AB0XS20();
          if (XP1REC.XP1MNO == 0)
            AB0XS21();
            AB0XS22();
            AB0XS23();
          end
        else
          AB0XS14(); /* get factory*/
        end
      end
    end


  end

end // end AB0XS10

// SELECT SET PO Number
Function AB0XS11()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select cursor' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/


   /* ----- move values to record before insert -----*/
  set PC6REC empty;

  PC6REC.XGPCD = XP1REC.XGPCD;
  PC6REC.PC3PONBR = AB0XM001.AB0XMPON[ABWIXM];
  PC6REC.SY1STNBR = AB0XW04.SY1STNBR[ABWIDX1];
  PC6REC.SY2CLRID = AB0XW04.SY2CLRID[ABWIDX1];
  PC6REC.PC2CUXID = " ";

   /* ----- wildcard unknown values ------*/
  PC6REC.XDMCD = "*";
  PC6REC.PC2INSEG = "*";
  PC6REC.XWHCD = "*";
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = "*";
  PC6REC.XPGCD = "*";
  PC6REC.XUMCD = "*";
  PC6REC.PC6ETSDT = -1;
  PC6REC.PC6OETS = -1;
  PC6REC.PC6RTADT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.YSMXDV = "*";
  PC6REC.XDSCD = "*";

   /* *===================================**/
   /* *  Select Set from DPRODc.Vpoitm01  **/
   /* *===================================**/

  try
    call "IO3310" ("S7", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, Return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S11 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS11

// FETCH ONE PO-NUMBER
Function AB0XS12()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===================================**/
   /* *  Select Next from DPRODc.Vpoitm01  **/
   /* *===================================**/

  try
    call "IO3310" ("N7", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, save style name, then return to calling*/
                  /* process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      AB0XM001.AB0XMMFG[ABWIDX1] = PC6REC.FY1FCTYC;
      return; /* Return to calling process*/

    end
    if (SQLCA.VAGen_SQLCODE == +100) /* If no PO found for this style/color*/
      converseLib.validationFailed(61);
      set AB0XM001.AB0XMPON[ABWIXM] cursor, bold;
      ABWREC.ABWPRCSN = "S12";

      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS12

// CLOSE SET PO-NUMBER
Function AB0XS13()
   /* ------------------------------------------------------------*/
   /* Close set on Dprodc.Vpoitm01*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/


  try
    call "IO3310" ("C7", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, save style name, then return to calling*/
                  /* process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SET TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS13

// get new factory
Function AB0XS14()
  AB0XW01.AB0XW-FLAG = "CC";
  ABWREC.ABWSWC = "Y";
  AB0XW01.FY1FCTYC = "    ";
  AB0XW01.AB0XW-FY2FCTYC = "    ";
  AB0XS28(); /* declare cursor*/
  AB0XS29(); /* fetch cursor*/
  if (ABWREC.ABWSWC == "Y")
    AB0XW01.FY1FCTYC = AB4REC.FY1FCTYC;
    AB0XW01.AB0XW-FY2FCTYC = AB4REC.FY1FCTYC;
    while (ABWREC.ABWSWC == "Y")
      AB0XS29(); /* fetch cursor*/
      if (ABWREC.ABWSWC == "Y")
        AB0XW01.AB0XW-FY2FCTYC = AB4REC.FY1FCTYC;
      end
    end
    AB0XS30(); /* close cursor*/
  else
    AB0XS30(); /* close cursor*/
    ABWREC.ABWSWC = "Y";
    AB0XW01.AB0XW-FLAG = "OT";
    AB0XS28(); /* declare cursor*/
    AB0XS29(); /* fetch cursor*/
    if (ABWREC.ABWSWC == "Y")
      AB0XW01.FY1FCTYC = AB4REC.FY1FCTYC;
      AB0XW01.AB0XW-FY2FCTYC = AB4REC.FY1FCTYC;
      while (ABWREC.ABWSWC == "Y")
        AB0XS29(); /* fetch cursor*/
        if (ABWREC.ABWSWC == "Y")
          AB0XW01.AB0XW-FY2FCTYC = AB4REC.FY1FCTYC;
        end
      end
    end
    AB0XS30(); /* close cursor*/
  end

  if (AB0XW01.FY1FCTYC > "    ")
    if (AB0XW01.FY1FCTYC == AB0XW01.AB0XW-FY2FCTYC)
      AB0XM001.AB0XMMFG[ABWIXM] = AB0XW01.FY1FCTYC;
    else
      AB0XS24(); /* foreign factory flag 1*/
      AB0XS25(); /* foreign factory flag 2*/
      if (AB0XW01.FY1FRGN == "Y"
       && AB0XW01.AB0XW-FY2FRGN == "Y")
        AB0XM001.AB0XMMFG[ABWIXM] = "XOF";
      else
        if (AB0XW01.FY1FRGN == "N"
         && AB0XW01.AB0XW-FY2FRGN == "N")
          AB0XM001.AB0XMMFG[ABWIXM] = "XDM";
        else
          AB0XM001.AB0XMMFG[ABWIXM] = "XXX";
        end
      end
    end
  else
    AB0XM001.AB0XMMFG[ABWIXM] = "XXX";
  end

  if (AB0XW04.FY1FCTYC[ABWIDX1] != AB0XM001.AB0XMMFG[ABWIXM])
    AB0XW01.AB0XW-CHANGE-FLAG = "Y";
  end

  return;

end // end AB0XS14

// Verify factory code
Function AB0XS20()


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0XM001.AB0XMMFG[ABWIXM]; /* Fld office*/

  AB0XW01.AB0XW-VALID-FCTY = "Y"; /* reset flag*/

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0XW01.AB0XW-CHANGE-FLAG = "Y";
  /* MOVE 'XD' TO AB0XM001.AB0XMOTO(ABWIXM);*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AB0XM001.AB0XMMFG[ABWIXM] cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 41; /* Indicate error message*/
      AB0XW01.AB0XW-VALID-FCTY = "N";
      ABWREC.ABWPRCSN = "S20 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "52G "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS20

// select factory\style cursor
Function AB0XS21()
   /* ------------------------------------------------------------*/
   /* Verify if Factory/Style combination is valid*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY2REC empty; /* initialize db record*/
  FY2REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY2REC.FY1FCTYC = AB0XM001.AB0XMMFG[ABWIXM]; /* factory*/
  FY2REC.SY1STNBR = AB0XM001.AB0XMSTY[ABWIXM]; /* style*/
  FY2REC.XSECD = "*"; /* season code*/
  FY2REC.XSNYR = -1; /* season code*/
  FY2REC.XXXSTAT = "*"; /* season code*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2980" ("S1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
      return;
    end


  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFYSTY01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYSTY01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS21

// select one fcty\style comb
Function AB0XS22()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===================================**/
   /* *  Select Next from Dfcty.Vfcty001  **/
   /* *===================================**/

  try
    call "IO2980" ("N1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, save style name, then return to calling*/
                  /* process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* If no row found for fcty/style*/

      XP1REC.XP1MNO = 88;
      set AB0XM001.AB0XMMFG[ABWIXM] bold;
      set AB0XM001.AB0XMACT[ABWIXM] cursor, bold;
      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S12 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS22

// close fysty01 cursor
Function AB0XS23()
   /* ------------------------------------------------------------*/
   /* Close set on Dprodc.Vpoitm01*/
   /* ------------------------------------------------------------*/



  try
    call "IO2980" ("C1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes};
  end



  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
    /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "D02 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S23 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SET TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS23

// get foreign fcty flag
Function AB0XS24()


   /* ------------------------------------------------------------*/
   /* retrieve foreign factory flag from DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0XW01.FY1FCTYC; /* fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0XW01.FY1FRGN = FY1REC.FY1FRGN;
      return;
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S24 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS24

// get foreign fcty flag
Function AB0XS25()


   /* ------------------------------------------------------------*/
   /* retrieve foreign factory flag from DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB0XW01.AB0XW-FY2FCTYC; /* fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AB0XW01.AB0XW-FY2FRGN = FY1REC.FY1FRGN;
      return;
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S24 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS25

// declare vbplan01 cursor
Function AB0XS28()
   /* ------------------------------------------------------------*/
   /* declare dabuy.vbplan01 cursor*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set AB4REC empty; /* initialize db record*/
  AB4REC.XSECD = XP1REC.XSECD; /* season code*/
  AB4REC.XSNYR = XP1REC.XSNYR; /* season year*/
  AB4REC.AB3BUYMO = XP1REC.AB3BUYMO; /* buy month*/
  AB4REC.SY1STNBR = AB0XM001.AB0XMSTY[ABWIXM]; /* style*/
  if (AB0XW01.AB0XW-FLAG == "OT")
    AB4REC.PC4ORTYP = "IL"; /* order type*/
    AB4REC.PC2CUXID = "*"; /* cust code*/
  else
    AB4REC.PC2CUXID = AB0XM001.AB0XMCXR[ABWIXM]; /* cust code*/
    AB4REC.PC4ORTYP = "*"; /* order type*/
  end


   /* *=============================**/
   /* *  Access dabuy.vbplan01 DB   **/
   /* *=============================**/

  try
    call "IO3570" ("S4", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
      return;
    end


  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S28 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VBPLAN01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS28

// fetch vbplan01 cursor
Function AB0XS29()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===================================**/
   /* *  Select Next from Dabuy.vbplan01   **/
   /* *===================================**/

  try
    call "IO3570" ("N4", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, save factory, then return to calling*/
                  /* process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* If no row found for style*/
      ABWREC.ABWSWC = "N";
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S29 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS29

// close vbplan01 cursor
Function AB0XS30()
   /* ------------------------------------------------------------*/
   /* Close set on Dabuy.Vbplan01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("C4", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end



  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
    /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "D02 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S30 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SET TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0XS30

// SELECT DFCTY.VFCTY001 ROW
Function AB0XS31()

   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful call, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* no row found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S31 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0XM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0XS31

//*** RECORD=AB0XW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AB0XW01 type basicRecord
  10 AB0XWMFS AB0XWMFS ; 
  10 AB0XWAJQ AB0XWAJQ ; 
  10 AB0XWBEG AB0XWBEG ; 
  10 AB0XWMNO AB0XWMNO ; 
  10 AB0XWNOU AB0XWNOU ; 
  10 AB0XWNXT AB0XWNXT ; 
  10 AB0XWSZM AB0XWSZM ; 
  10 AB0XWIDX AB0XWIDX ; 
  10 AB0XWTBX AB0XWTBX ; 
  10 AB0XWTBX1 AB0XWTBX1 ; 
  10 AB0XWQTY AB0XWQTY ; 
  10 AB0XWSZT AB0XWSZT ; 
  10 AB0XWSZQ AB0XWSZQ ; 
  10 AB0XWSZ1 AB0XWSZ1 ; 
  10 AB0X-TA5TSQIX-SV num(4) ; // TSQ rel rec no./index
  10 AB0XWDT1 AB0XWDT1 ; 
    15 AB0XWCC1 AB0XWCC1 ; 
    15 AB0XWYY1 AB0XWYY1 ; 
    15 AB0XWMM1 AB0XWMM1 ; 
  10 AB0XWDT2 AB0XWDT2 ; 
    15 AB0XWCC2 AB0XWCC2 ; 
    15 AB0XWYY2 AB0XWYY2 ; 
  10 AB0XWDT3 AB0XWDT3 ; 
    15 AB0XWYY3 AB0XWYY3 ; 
    15 AB0XWMM3 AB0XWMM3 ; 
  10 AB0XWPN AB0XWPN ; 
  10 AB0XFCTY AB0XFCTY ; 
  10 AB0XWUPD AB0XWUPD ; 
  10 AB0X-RESTRICT-GLOBAL AB0X-RESTRICT-GLOBAL ; 
  10 AB0X-GLOBAL-UPD char(4) ; // XSN wk abrv
  10 AB0XWSA AB0XWSA ; 
    15 AB0XWSS AB0XWSS ; 
    15 AB0XWYR AB0XWYR ; 
  10 AB0XWXSY AB0XWXSY ; 
  10 AB0XWVSD AB0XWVSD ; 
  10 AB0XWFND AB0XWFND ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 AB0XW-FY2FCTYC AB0XW-FY2FCTYC ; 
  10 FY1FRGN FY1FRGN ; 
  10 AB0XW-FY2FRGN AB0XW-FY2FRGN ; 
  10 AB0XW-FLAG AB0XW-FLAG ; 
  10 AB0XW-CHANGE-FLAG AB0XW-CHANGE-FLAG ; 
  10 SY1STNBR SY1STNBR ; 
  10 AB0XWSDQ AB0XWSDQ ; 
  10 AB3BUYMO AB3BUYMO ; 
  10 AB0XW-VALID-FCTY AB0XW-VALID-FCTY ; 
end // end AB0XW01

//*** RECORD=AB0XW02 ****
// Temporary storage record for TSXX - Transportation Prototype
// ***********************
Record AB0XW02 type basicRecord
  10 ABWLEN ABWLEN ; 
  10 * char(4092) ; 
end // end AB0XW02

//*** RECORD=AB0XW03 ****
// ************************************************************
// Temporary storage record - for color breakout maintenance
// ************************************************************
// ***********************
Record AB0XW03 type basicRecord
  5 AB0XWGP3 AB0XWGP3 ; 
    10 AB0XWIX3 AB0XWIX3 ; 
    10 AB0XWWXS AB0XWWXS ; 
    10 AB0XWMX3 AB0XWMX3 ; 
    10 AB0XWTRQ AB0XWTRQ ; 
    10 AB0XWTTQ AB0XWTTQ ; 
    10 AB0XWLST AB0XWLST ; 
    10 AB0XWBLT AB0XWBLT ; 
    10 AB0XWNBT AB0XWNBT ; 
    10 AB0XWAY3 AB0XWAY3 [5] ; 
      15 SY1STNBR SY1STNBR ; 
      15 AB3BUYST AB3BUYST ; 
      15 XDMCD XDMCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 ZZZCHGCT ZZZCHGCT ; 
      15 AB0XWCLI AB0XWCLI ; 
end // end AB0XW03

//*** RECORD=AB0XW04 ****
// Temporary storage record for AB0D
// ***********************
Record AB0XW04 type basicRecord
  5 * char(496) ; 
    10 AB0XWLEN AB0XWLEN ; 
    10 AB0XWMX4 AB0XWMX4 ; 
    10 * char(49) [10] ; 
      15 AB7PBYTP AB7PBYTP ; 
      15 AB7PBADT AB7PBADT ; 
      15 AB7PBYST AB7PBYST ; 
      15 AB7PBSDT AB7PBSDT ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XWHCD XWHCD ; 
      15 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
      15 PC2CUXID PC2CUXID ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 AB0XWQTY AB0XWQTY ; 
      15 PC3PONBR PC3PONBR ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AB0XW04

//*** RECORD=AB0XW05 ****
// Temporary table record for AB0x - top Half
// MAINTENANCE LOG:
// 
//   DATE      INIT.      COMMENT
// --------    --------   -------------------------------------
// 07/17/1998  RHARAT     ADDED PROCESS-TYPE(PROCESS TYPE) AND
//                        SRCLOCATION(SOURCE LOCATION) AS PART
//                        OF GENERIC BUY MODIFICATIONS(AB0312).
// ***********************
Record AB0XW05 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 AB0XWMIN AB0XWMIN ; 
  10 PC2CUXID PC2CUXID ; 
  10 AB0XWACT AB0XWACT ; 
  10 AB7PBYST AB7PBYST ; 
  10 XXX-USER-ID XXX-USER-ID ; 
  10 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
  10 PROCESS-TYPE PROCESS-TYPE ; 
  10 SRCLOCATION SRCLOCATION ; 
end // end AB0XW05

//*** RECORD=AB0XW06 ****
// Temporary storage record for AB0D
// ***********************
Record AB0XW06 type basicRecord
  5 * char(496) ; 
    10 AB0XWLEN AB0XWLEN ; 
    10 AB0XWMX6 AB0XWMX6 ; 
    10 * char(49) [10] ; 
      15 AB7PBYTP AB7PBYTP ; 
      15 AB7PBADT AB7PBADT ; 
      15 AB7PBYST AB7PBYST ; 
      15 AB7PBSDT AB7PBSDT ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XWHCD XWHCD ; 
      15 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
      15 PC2CUXID PC2CUXID ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 AB0XWQTY AB0XWQTY ; 
      15 PC3PONBR PC3PONBR ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AB0XW06

//*** RECORD=AB7REC ****
// ****** SEASON/FACTORY/STYLE/COLOR/BUY MONTH/SIZE ***********
// 
// DB2 TABLE:           DABUY.VBnilpb01
// 
// COPYLIB MEMBER:      DCL00860
// 
// I/O MOD:             IO5730
// DATE CREATED:        03/22/91
// 
// MAINTENANCE LOG:
// 
//   DATE      INIT.      COMMENT
// --------    --------   -------------------------------------
// 03/22/91    kj         INITIAL RECORD CREATION
// 06/07/91    kj         added op1partn and op1norid for june
//                        table changes
// 12/06/1997  TTHAN1     Y2KFIX - CHANGE SIZE OF AB3BUYMO FROM
//                        4 TO 9.
// **********************
Record AB7REC type basicRecord
  5 AB7GROUP AB7GROUP ; 
    10 AB7KEY AB7KEY ; 
      15 XGPCD XGPCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 XDVCD XDVCD ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 AB3BUYMO AB3BUYMO ; 
      15 SY1STNBR SY1STNBR ; 
      15 XDMCD XDMCD ; 
      15 SY2CLRID SY2CLRID ; 
    10 AB7PBYTP AB7PBYTP ; 
    10 AB7PBADT AB7PBADT ; 
    10 AB7PBYST AB7PBYST ; 
    10 AB7PBSDT AB7PBSDT ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PC3PONBR PC3PONBR ; 
    10 SY5SZID SY5SZID [10] ; 
    10 AB7PBYQY AB7PBYQY [10] ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end AB7REC

// update flag
DataItem AB0X-RESTRICT-GLOBAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0XFCTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change flag
DataItem AB0XW-CHANGE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB0XW-FLAG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD
DataItem AB0XW-FY2FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_FRGN_FL
DataItem AB0XW-FY2FRGN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid factory flag
DataItem AB0XW-VALID-FCTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRPS_ACTN_TYP
DataItem AB0XWACT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment quantity
DataItem AB0XWAJQ smallint {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// array for temp. record
DataItem AB0XWAY3 char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning member in array
DataItem AB0XWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// total bla qty for style
DataItem AB0XWBLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working century
DataItem AB0XWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working century
DataItem AB0XWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color existence indicator
DataItem AB0XWCLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date - buy stat date
DataItem AB0XWDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date  - sesn yr range
DataItem AB0XWDT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date - buy month
DataItem AB0XWDT3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style found
DataItem AB0XWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temporary record
DataItem AB0XWGP3 char(181)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX
DataItem AB0XWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// index for this array
DataItem AB0XWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length
DataItem AB0XWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total long/short qty for style
DataItem AB0XWLST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple factory style
DataItem AB0XWMFS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MINIMUMS
DataItem AB0XWMIN int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working month
DataItem AB0XWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem AB0XWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message number
DataItem AB0XWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum array size
DataItem AB0XWMX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max. loaded into the array
DataItem AB0XWMX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max. loaded into the array
DataItem AB0XWMX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total next buy qty for style
DataItem AB0XWNBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no changes made
DataItem AB0XWNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AB0XWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Pop-up window processing ind
DataItem AB0XWPN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-quantity
DataItem AB0XWQTY int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// XSN wk abrv
DataItem AB0XWSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number from ab0q
DataItem AB0XWSDQ char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0XWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size of aferec array
DataItem AB0XWSZ1 num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// ab0x map array size
DataItem AB0XWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// TSQ record length
DataItem AB0XWSZQ num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// array size of temp. record
DataItem AB0XWSZT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// INDEX
DataItem AB0XWTBX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// INDEX
DataItem AB0XWTBX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// total running qty for this sty
DataItem AB0XWTRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total buy qty this style
DataItem AB0XWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag
DataItem AB0XWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style search indicator
DataItem AB0XWVSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved index for this array
DataItem AB0XWWXS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsnyr work area
DataItem AB0XWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0XWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0XWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0XWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0XWYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item for record level
DataItem AB7GROUP char(128)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AB7KEY char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_SCHED_SPCLT_CD
DataItem PROCESS-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_SCHED_SPCLT_CD
DataItem SRCLOCATION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

