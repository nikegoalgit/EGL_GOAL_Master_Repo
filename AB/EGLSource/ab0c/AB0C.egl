package ab0c;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB0C ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/28/88   userid   New application.
// 09/17/93   SWHITA   ADDED HELP SCREEN LINK TO AB0C130.
// 08/25/95   RPRADO   Removed edit for buy month field.
// Y2KFIX   01/21/98  KSUMME  Y2K MODIFICATIONS MADE TO:
//       global changes in Y2KMSL:  AB3REC, AB4REC, ABWREC,
//                     XP1REC, XPAB020, XSABSMO
//       y2k and table changes: AB0CM001, AB0C152
// Y2KFIX   02/12/98  TTHAN1  Y2K SPECIAL FIX AB0C152.
// *********************
Program AB0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0CW01 AB0CW01; // record
  AB0CW03 AB0CW03; // record
  AB1REC AB1REC; // record
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AB0CM.AB0CM001,  // forms
      AB0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AB0CW01 empty; /* Initialize working storage*/
    set AB0CW03 empty; /* Initialize working storage*/
    set AB1REC empty;
    set AB2REC empty;
    set AB3REC empty;
    set AB4REC empty;
    set ERRSQLCA empty; /* Initialize working storage*/
    set FY1REC empty;
    set PC2REC empty;
    set PC4REC empty;
    set PG1REC empty;
    set PG2REC empty;
    set SQLCA empty; /* Initialize working storage*/
    set SY1REC empty;
    set TAEREC empty;
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AB0CM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AB0C"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    move " " to AB0CM001.AB0CMSYL[1] for all; /* Initialize screen array fields*/
    ABWREC.ABWMPMAX = sysVar.arrayIndex; /* Set the the screen array default*/
    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "N"; /* Indicate request for data*/


    goto AB0C001; /* Converse Apparel Buy Prototype*/


    AB0C001: AB0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0C001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0C

// Choose which map to display
Function AB0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to abwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/

  AB0C100(); /* Display map 1*/



end // end AB0C001

// Driver process for 100 map
Function AB0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB0C110(); /* Obtain the data to display*/

  AB0C120(); /* Format and display the map*/

  AB0C130(); /* Check attention identifier*/

  AB0C140(); /* Reset fields to normal intensity*/

  AB0C150(); /* Verify the entered data*/

  AB0C160(); /* Process valid input request*/


end // end AB0C100

// Obtain the data to display
Function AB0C110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* clear internal array*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and move the data to the corresponding array*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* NOTE:  temporary storage is not used in this process.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWSWR != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  else
    if (ABWREC.ABWSWR == "Y" /* Data was requested*/
     && converseVar.validationMsgNum != 0) /* but errors have occurred*/
      return; /* Return to previous process*/
    end
  end

  AB0C112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    ABWREC.ABWIXM = 1; /* Initialize display line number*/
    AB0CW03.AB0CWIX1 = 0; /* Initialize array index*/
    AB0CW03.AB0CWIXM = 0; /* Initialize array index*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0C113(); /* Obtain data and format page*/

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0C115(); /* Close the selected set cursor*/
  end


  if (AB0CW01.AB0CWUPD == "Y") /* Database update done*/
    AB0CW03.AB0CWIXS = AB0CW01.AB0CWSIX; /* Restore current page*/
  else
    AB0CW03.AB0CWIXS = 1; /* Set page to 1*/
  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ABWREC.ABWSWR = "N"; /* Request for data completed*/
    AB0CW01.AB0CWUPD = "N"; /* Reset update indicator*/
  end

end // end AB0C110

// Select set and open cursor
Function AB0C112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  AB2REC.XDVCD = "**"; /* division code*/

  if (XP1REC.SY1STNBR != " ")
    AB2REC.SY1STNBR = XP1REC.SY1STNBR; /* style code*/
  else
    AB2REC.SY1STNBR = "******"; /* style code*/
  end
  AB2REC.XWHCD = "**"; /* warehouse code*/
   /* ***********************/
   /* ***  factory code*/
   /* ***********************/
  if (XP1REC.FY1FCTYC != " ")
    AB2REC.FY1FCTYC = XP1REC.FY1FCTYC; /* factory code*/
  else
    AB2REC.FY1FCTYC = "****"; /* factory code*/
  end
   /* ***********************/
   /* ***  PO type*/
   /* ***********************/
  if (XP1REC.PC4ORTYP != " ")
    AB2REC.PC4ORTYP = XP1REC.PC4ORTYP; /* PO type*/
  else
    AB2REC.PC4ORTYP = "**"; /* PO type*/
  end
   /* ***********************/
   /* ***  customer id*/
   /* ***********************/
  if (XP1REC.PC2CUXID != " ")
    AB2REC.PC2CUXID = XP1REC.PC2CUXID;
  else
    AB2REC.PC2CUXID = "*****";
  end
   /* ***********************************/
   /* ****   sched/avail-specialist code*/
   /* ***********************************/
  if (XP1REC.PG1SC4CD != " ")
    AB2REC.PG1SC4CD = XP1REC.PG1SC4CD; /* sched/avail-specialist code*/
  else
    AB2REC.PG1SC4CD = "**"; /* sched/avail-specialist code*/
  end
   /* ******************/
   /* ****  gender age*/
   /* ******************/
  if (XP1REC.XGACD == "  " /* gender age*/
   || XP1REC.SY1STNBR != " ") /* style number*/
    AB2REC.XGACD = "**"; /* gender age*/
  else
    AB2REC.XGACD = XP1REC.XGACD; /* gender age*/
  end
   /* ******************************/
   /* *****    product category*/
   /* ******************************/
  if (XP1REC.XPCCD == " "
   || XP1REC.SY1STNBR != " ") /* style number*/
    AB2REC.XPCCD = "**"; /* product category*/
  else
    AB2REC.XPCCD = XP1REC.XPCCD; /* product category*/
  end
   /* ******************************/
   /* *****    silhouette*/
   /* ******************************/
  if (XP1REC.XSUCD == " "
   || XP1REC.SY1STNBR != " ") /* style number*/
    AB2REC.XSUCD = "**"; /* silhouette code*/
  else
    AB2REC.XSUCD = XP1REC.XSUCD; /* silhouette code*/
  end
   /* ******************************/
  AB2REC.XQTCD[1] = "***"; /* quota category code*/
  AB2REC.XQTCD[2] = "***"; /* quota category code*/
   /* ******************************/
   /* ******/
   /* ******************************/
  if (XP1REC.FY1FRGN != " ") /* fy fcty prgn fl*/
    AB2REC.FY1FRGN = XP1REC.FY1FRGN; /* fy fcty prgn fl*/
  else
    AB2REC.FY1FRGN = "*"; /* fy fcty prgn fl*/
  end
  AB2REC.FY6FOCD = "**";
  AB2REC.AB6BKFNI = "*";
  AB2REC.XSECD = XP1REC.XSECD;
  AB2REC.XSNYR = XP1REC.XSNYR;
  try
    call "IO3560" ("S1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
  ABWREC.ABWSWR = "Y";
  exit stack; /* Return to previous process*/



end // end AB0C112

// Fetch next row and format
Function AB0C113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("N1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      AB0CS22(); /* Store style/buy plan data*/

      return; /* return*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
      AB0CW03.AB0CWIXM = AB0CW03.AB0CWIX1;

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  ABWREC.ABWSWR = "Y";

  exit stack; /* Return to previous process*/

end // end AB0C113

// Close selected set cursor
Function AB0C115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("C1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  else

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ABWREC.ABWSWR = "Y";

    exit stack; /* Return to previous process*/

  end


end // end AB0C115

// Format and display the map
Function AB0C120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0CM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/

    if (ABWREC.ABWFIRST == " ") /* First time through*/
      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        AB0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AB0CM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      /* SET AB0CM001 CLEAR          ; Clear map output area*/

    end

    AB0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/

      /* *************************************************************/
      AB0CM001.XXXUSER = XP1REC.XXXUSER;
      AB0CM001.XSECD = XP1REC.XSECD;
      /* ***** code changed by Grant Gilray 7/11/89 ******/
      /* MOVE XP1REC.XSNYR TO AB0CM001.XSNYR;*/
      AB0CM001.XSNYR = XP1REC.XP1XSNYY;
      /* ***** END of code changed by Grant Gilray 7/11/89 ******/
      AB0CM001.AB3BUYMO = XP1REC.XP1CBYMO;
      AB0CM001.XGACD = XP1REC.XGACD;
      AB0CM001.XGAABRV = XP1REC.XGAABRV;
      AB0CM001.XPCCD = XP1REC.XPCCD;
      AB0CM001.XPCABRV = XP1REC.XPCABRV;
      AB0CM001.XSUCD = XP1REC.XSUCD;
      AB0CM001.XSUABRV = XP1REC.XSUABRV;
      AB0CM001.FY1FCTYC = XP1REC.FY1FCTYC;
      AB0CM001.FY1FRGN = XP1REC.FY1FRGN;
      AB0CM001.SY1STNBR = XP1REC.SY1STNBR;
      AB0CM001.SY1STYNM = XP1REC.SY1STYNM;
      AB0CM001.PC4ORTYP = XP1REC.PC4ORTYP;
      AB0CM001.PC4ABRV = XP1REC.PC4ABRV;
      AB0CM001.XXXSTAT = XP1REC.XP1STAT;
      ABWREC.ABWIXM = 1; /* Initialize line index*/

      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

        if (AB0CM001.AB0CMSYL[ABWIXM] > " ") /* Line was formatted*/
          set AB0CM001.AB0CMSTS[ABWIXM] initialAttributes; /* Reset select flag*/
        else
          set AB0CM001.AB0CMSTS[ABWIXM] skip, invisible; /* Reset select flag*/
        end

        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      end
      /* *************************************************************/

      AB0C121(); /* Format the data on the page*/

    end

    ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AB0CM001 alarm; /* sound alarm*/
  end



   /* *==============================**/
   /* * Check security authorization **/
   /* *==============================**/

  if (COMMAREA.CACLVL[1] == "N" /* No data changes allowed*/
   && COMMAREA.CACLVL[2] == "Y") /* May change Scheduler cd*/

               /* (User has Inquiry Profile)*/

    if (converseVar.validationMsgNum == 0 /* No errors found*/
     || converseVar.validationMsgNum == 5) /* No data found for display*/
      set AB0CM001.XXXUSER cursor; /* Position cursor at userid fld*/
    end

    if (AB0CW03.AB0CWIXM == 0) /* No data to display*/

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0CM001.AB0CMSTS[ABWIX2] skip, invisible;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    else

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 12) /* Protect map dtl flds*/
        set AB0CM001.AB0CMSTS[ABWIX2] skip;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    end

  else

                /* (User has Scheduler Profile)*/

    if (COMMAREA.CACLVL[1] == "Y" /* Data changes allowed*/
     && COMMAREA.CACLVL[2] == "N") /* May not change Scheduler cd*/

      set AB0CM001.XXXUSER skip; /* Protect userid fld*/

      if (converseVar.validationMsgNum == 5 /* No data to display*/
       || ABWREC.ABWSWU == " ")             /* First time security chk*/
        set AB0CM001.FY1FRGN cursor; /* Cursor position*/
      else
        if (converseVar.validationMsgNum == 0) /* No errors found*/
          set AB0CM001.AB0CMSTS[1] cursor; /* Cursor position*/
        end
      end

    else

                  /* (User has Supervisory Profile)*/

      if (COMMAREA.CACLVL[1] == "Y" /* Data changes allowed*/
       && COMMAREA.CACLVL[2] == "Y") /* May change Scheduler cd*/

        if (converseVar.validationMsgNum == 5 /* No data to display*/
         || ABWREC.ABWSWU == " ")             /* First time security chk*/
          set AB0CM001.XXXUSER cursor; /* Position cursor*/
        else
          if (converseVar.validationMsgNum == 0) /* No errors found*/
            set AB0CM001.AB0CMSTS[1] cursor; /* Cursor position*/
          end
        end

      end
    end
  end


  ABWREC.ABWSWU = "N"; /* Set security flag*/


  converse AB0CM001 ;


end // end AB0C120

// Format the selected data
Function AB0C121()
   /* ------------------------------------------------------------*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (AB0CW03.AB0CWIXM == 0) /* No data to display*/

    if (ABWREC.ABWFIRST != " ")
      ABWREC.ABWPRCSN = "121 "; /* Process number*/
      AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      converseLib.validationFailed(05); /* Indicate no data to display*/

    end
    return; /* Return to previous process*/

  end

  AB0C122(); /* format data on map*/

  ABWREC.ABWIXM = 2; /* initialize map index*/
  AB0CW01.AB0CWSYL = AB0CM001.AB0CMSYL[1]; /* Set start style*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* process all map lines*/

    if (AB0CM001.AB0CMSYL[ABWIXM] == AB0CW01.AB0CWSYL) /* Dup style*/
      set AB0CM001.AB0CMSYL[ABWIXM] skip, invisible;
         /* move ' ' to  AB0CM001.AB0CMSYL(ABWIXM); Suppress style*/
      set AB0CM001.AB0CMSNM[ABWIXM] skip, invisible;
        /* MOVE ' ' TO AB0CM001.AB0CMSNM(ABWIXM); Suppress style name*/
    else
      AB0CW01.AB0CWSYL = AB0CM001.AB0CMSYL[ABWIXM]; /* Replace*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end

end // end AB0C121

// Populate the map
Function AB0C122()
   /* ------------------------------------------------------------*/
  AB0C123(); /* clear bottom half of screen*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ABWREC.ABWIXM = 0; /* initialize map index*/
  AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIXS; /* initialize array index*/
  while (ABWREC.ABWIXM < ABWREC.ABWMPMAX
   && AB0CW03.AB0CWIX1 <= AB0CW03.AB0CWIXM)
    if (AB0CW03.AB0CWMTC[AB0CWIX1] != "N") /* do if data in table*/
      /* --------------------------------------------------------*/
      /* - get the buy/plan row*/
      /* --------------------------------------------------------*/
      AB0CS19(); /* GET ADDITIONAL STYLE ITEMS*/

    end
    /* --------------------------------*/
    /* -  advance indexes          ----*/
    /* --------------------------------*/
    AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX1 + 1;
  end
  if (ABWREC.ABWIXM == 0
   && AB0CW03.AB0CWIX1 >= AB0CW03.AB0CWIXM)

    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(05); /* Indicate no data to display*/

  end
  AB0CW03.AB0CWIXN = AB0CW03.AB0CWIX1;
end // end AB0C122

// Clear bottom half of screen
Function AB0C123()
   /* ------------------------------------------------------------*/
  ABWREC.ABWIXM = 0; /* initialize map index*/
  while (ABWREC.ABWIXM < ABWREC.ABWMPMAX)
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
    AB0CW03.ZZZCHGCT[ABWIXM] = 0; /* save change count*/
    AB0CM001.AB0CMSYL[ABWIXM] = " "; /* style nbr*/
    AB0CM001.AB0CMSNM[ABWIXM] = " "; /* style name*/
    AB0CM001.AB0CMFCT[ABWIXM] = " ";
    AB0CM001.AB0CMPOT[ABWIXM] = " ";
    AB0CM001.AB0CMPON[ABWIXM] = " "; /* p o name*/
    AB0CM001.AB0CMCNB[ABWIXM] = " "; /* cust nbr*/
    AB0CM001.AB0CMCNM[ABWIXM] = " "; /* cust name*/
    AB0CM001.AB0CMSTS[ABWIXM] = " "; /* buy status*/
    AB0CW03.AB0CWSTS[ABWIXM] = " "; /* buy status*/
    AB0CM001.XOWCD[ABWIXM] = " "; /* owner grp*/
    AB0CM001.AB0CMQTY[ABWIXM] = 0; /* buy quantity*/
    AB0CW03.AB0CWIX2[ABWIXM] = 0; /* buy quantity*/
    set AB0CM001.AB0CMSTS[ABWIXM] skip, invisible; /* reset sts fld*/
  end
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
end // end AB0C123

// Check attention identifier
Function AB0C130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AB0CM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AB0CM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = AB0CM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0CM001.CAITEM; /* Application data*/

      XSABS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AB0CM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0CM001"; /* Appl find code*/
    end

    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf16) /* Activate Inquiry Mode*/

    if (COMMAREA.CACLVL[1] == "Y" /* Profile is scheduler*/
     && COMMAREA.CACLVL[2] == "N")

      ABWREC.ABWINQF = "Y"; /* Indicate inquiry mode activated*/
      set AB0CM001.XXXUSER initialAttributes; /* Unprotect Sched cd fld*/
      COMMAREA.CACLVL[1] = "N"; /* Cannot update dtl flds*/
      COMMAREA.CACLVL[2] = "Y"; /* May change Sched cd fld*/
      ABWREC.ABWNMO = 67; /* Indicate message*/
      exit stack; /* Exit to redisplay map*/

    else

      converseLib.validationFailed(4); /* Indicate invalid function*/
      exit stack; /* Exit to redisplay map*/

    end

  end


  if (converseVar.eventKey is pf17) /* Deactivate Inquiry Mode*/

    if (ABWREC.ABWINQF == "Y") /* Inquiry mode activated*/

      ABWREC.ABWINQF = " "; /* Reset inquiry mode flag*/
      ABWREC.ABWNMO = 68; /* Indicate message*/
      set AB0CM001.XXXUSER skip; /* Protect Sched cd fld*/
      AB0CM001.XXXUSER = COMMAREA.CAUSERID; /* Restore orig userid*/
      COMMAREA.CACLVL[1] = "Y"; /* Can update dtl flds*/
      COMMAREA.CACLVL[2] = "N"; /* Cannot change Sched cd fld*/

    else

      converseLib.validationFailed(4); /* Indicate invalid function*/
      exit stack; /* Exit to redisplay map*/

    end

  end



end // end AB0C130

// Reset highlighted fields
Function AB0C140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    set AB0CM001.AB0CMSYL[ABWIXM] initialAttributes;
    set AB0CM001.AB0CMSNM[ABWIXM] initialAttributes;

    if (AB0CM001.AB0CMSYL[ABWIXM] > " ") /* Line was formatted*/
      set AB0CM001.AB0CMSTS[ABWIXM] initialAttributes; /* Reset select flag*/
    else
      set AB0CM001.AB0CMSTS[ABWIXM] skip, invisible; /* Reset select flag*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end


  set AB0CM001.XSECD initialAttributes; /* reset field attributes*/
  set AB0CM001.XSNYR initialAttributes; /* reset field attributes*/
  set AB0CM001.AB3BUYMO initialAttributes; /* reset field attributes*/
  set AB0CM001.XGACD initialAttributes; /* reset field attributes*/
  set AB0CM001.XGAABRV initialAttributes; /* reset field attributes*/
  set AB0CM001.XPCCD initialAttributes; /* reset field attributes*/
  set AB0CM001.XPCABRV initialAttributes; /* reset field attributes*/
  set AB0CM001.XSUCD initialAttributes; /* reset field attributes*/
  set AB0CM001.XSUABRV initialAttributes; /* reset field attributes*/
  set AB0CM001.FY1FCTYC initialAttributes; /* reset field attributes*/
  set AB0CM001.FY1FRGN initialAttributes; /* reset field attributes*/
  set AB0CM001.SY1STNBR initialAttributes; /* reset field attributes*/
  set AB0CM001.SY1STYNM initialAttributes; /* reset field attributes*/
  set AB0CM001.PC4ORTYP initialAttributes; /* reset field attributes*/
  set AB0CM001.PC4ABRV initialAttributes; /* reset field attributes*/
  set AB0CM001.XXXSTAT initialAttributes; /* reset field attributes*/
   /* *************************************************************/
  set AB0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0CM001.CAITEM initialAttributes; /* Commarea application data*/


end // end AB0C140

// Verify the entered data
Function AB0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AB0CM001.CAITEM > " ") /* Application data was entered*/

    set AB0CM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AB0C151(); /* Verify scroll request*/
  else
    AB0C152(); /* Verify selection criteria*/
    if (ABWREC.ABWSWR == "Y" /* If new selection criteria entered*/
     || AB0CW03.AB0CWIXM <= 0)
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      ABWREC.ABWIXM = 01; /* Initialize line index*/
      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX /* Until end of lines*/
       && AB0CM001.AB0CMSYL[ABWIXM] != " ")
        AB0C153(); /* Verify any changed data*/
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* increment line number*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end AB0C150

// Verify scroll request
Function AB0C151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    /* AB0CW03.ABW3INX1 = AB0CW03.ABW3INXS - 1;*/
    AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIXS;
    ABWREC.ABWIXM = ABWREC.ABWMPMAX;
    while (AB0CW03.AB0CWIX1 > 0
     && ABWREC.ABWIXM > 0)
      if (AB0CW03.SY1STNBR[AB0CWIX1] != " ")
        ABWREC.ABWIXM = ABWREC.ABWIXM - 1;
      end
      AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX1 - 1;
    end
    if (AB0CW03.AB0CWIX1 <= 0)
      ABWREC.ABWPRCSN = "151 "; /* Process number*/
      AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AB0CW03.AB0CWIXN > AB0CW03.AB0CWIXM) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ----------------------------------------------------------*/
   /* NOTE: input data will be ignored if pf7 or 8 was pressed*/
   /* ----------------------------------------------------------*/

end // end AB0C151

// Edit selection criteria
Function AB0C152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* =====  validate all selection criteria fields.         =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


  ABWREC.ABWSWR = "N"; /* Reset data select ind*/
  XP1REC.XP1MNO = 0; /* Reset error ind*/


          /* (Check Selection Criteria)*/

  if (AB0CM001.FY1FRGN != XP1REC.FY1FRGN) /* DOM/OFF*/
    XP1REC.FY1FRGN = AB0CM001.FY1FRGN;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.XSUCD != XP1REC.XSUCD) /* Silhouette cd*/
    XP1REC.XSUCD = AB0CM001.XSUCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.XPCCD != XP1REC.XPCCD) /* Category cd*/
    XP1REC.XPCCD = AB0CM001.XPCCD;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.XGACD != XP1REC.XGACD) /* Gender/Age cd*/
    XP1REC.XGACD = AB0CM001.XGACD;
    ABWREC.ABWSWR = "Y";
  end


  if (AB0CM001.AB3BUYMO != XP1REC.XP1CBYMO /* Buy Month*/
   || AB0CM001.AB3BUYMO == " ")            /* Buy Month*/
    XP1REC.XP1CBYMO = AB0CM001.AB3BUYMO;
    XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
    XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
    /* -----------Y2K IN BEGIN-----------------------*/
    /*  */
    if (XP1REC.XP1CBYMM > 0
     && XP1REC.XP1CBYMM < 13)
      if (XP1REC.XP1BUYYY > 60)
        XP1REC.XP1BUYCC = 19;
      else
        XP1REC.XP1BUYCC = 20;
      end
    else
      XP1REC.XP1BUYCC = 00;
    end
    /*  */
    /* -----------Y2K IN END-------------------------*/
    XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
    ABWREC.ABWSWR = "Y";
  else
    XP1REC.XP1CBYMO = AB0CM001.AB3BUYMO;
    if (XP1REC.XP1CBYMM == 0) /* Buy month eq zeroes*/
      ABWREC.ABWSWR = "Y"; /* Consider it as new data*/
    end
  end


  if (AB0CM001.XSNYR != XP1REC.XP1XSNYY) /* NE Saved Season yr*/
    XP1REC.XP1XSNYY = AB0CM001.XSNYR;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.XSECD != XP1REC.XSECD /* NE Saved Season cd*/
   || AB0CM001.XSECD == " ")         /* or Cleared out*/
    XP1REC.XSECD = AB0CM001.XSECD;
    ABWREC.ABWSWR = "Y";
  end
  if (AB0CM001.FY1FCTYC != XP1REC.FY1FCTYC) /* Factory cd*/
    XP1REC.FY1FCTYC = AB0CM001.FY1FCTYC;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.PC4ORTYP != XP1REC.PC4ORTYP) /* PO type*/
    XP1REC.PC4ORTYP = AB0CM001.PC4ORTYP;
    ABWREC.ABWSWR = "Y";
  end

  if (AB0CM001.XXXSTAT != XP1REC.XP1STAT) /* Status cd*/
    XP1REC.XP1STAT = AB0CM001.XXXSTAT; /* Move to XP1REC Field*/
    ABWREC.ABWSWR = "Y"; /* Set data select ind on*/
  end

  if (AB0CM001.SY1STNBR != XP1REC.SY1STNBR) /* Style no.*/
    XP1REC.SY1STNBR = AB0CM001.SY1STNBR;
    ABWREC.ABWSWR = "Y";
  end


  if (AB0CM001.XXXUSER != XP1REC.XXXUSER /* User id*/
   || AB0CM001.XXXUSER == " ")          
    XP1REC.XXXUSER = AB0CM001.XXXUSER;
    XP1REC.PG1SC4CD = " ";
    ABWREC.ABWSWR = "Y";
  end


          /* (Space-out Description Fields)*/

  if (AB0CM001.PC4ORTYP == " ") /* PO type*/
    XP1REC.PC4ABRV = " "; /* Space out desc*/
    AB0CM001.PC4ABRV = " "; /* Space out desc*/
  end

  if (AB0CM001.SY1STNBR == " ") /* Style no.*/
    XP1REC.SY1STYNM = " "; /* Space out desc*/
    AB0CM001.SY1STYNM = " "; /* Space out desc*/
  end

  if (AB0CM001.XSUCD == " ") /* Silhouette cd*/
    XP1REC.XSUABRV = " "; /* Space out desc*/
    AB0CM001.XSUABRV = " "; /* Space out desc*/
  end

  if (AB0CM001.XPCCD == " ") /* Category cd*/
    XP1REC.XPCABRV = " "; /* Space out desc*/
    AB0CM001.XPCABRV = " "; /* Space out desc*/
  end

  if (AB0CM001.XGACD == " ") /* Gender/Age cd*/
    XP1REC.XGAABRV = " "; /* Space out desc*/
    AB0CM001.XGAABRV = " "; /* Space out desc*/
  end


  if (AB0CW03.AB0CWIXM <= 0)
    ABWREC.ABWSWR = "Y";
  end

              /* (Validate Selection Criteria)*/

  if (ABWREC.ABWSWR == "Y") /* If any selection criteria changed*/

    AB0CS11(); /* Validate Style no*/
    AB0CS10(); /* Validate Status cd*/
    AB0CS09(); /* Validate PO type*/
    AB0CS08(); /* Validate Factory cd*/
    AB0CS07(); /* Validate Silhouette cd*/
    AB0CS06(); /* Validate Category cd*/
    AB0CS05(); /* Validate Gender/Age cd*/
    AB0CS04(); /* Validate DOM/OFF*/
    AB0CS01(); /* Validate Season/year/buy month*/
      /* IF XP1REC.XP1ERRFL EQ ' '     ; IF XSEYR was okay*/
    /* AB0CS03                     ;   Validate XSE/XSN combination*/
        /* IF XP1REC.XP1ERRFL EQ ' '   ;   IF XSNYR was okay*/
          /* AB0CS23                   ;     validate BUY MONTH*/
          /* ;                         ;     Only if XSNYR was okay*/
        /* END                         ;   END of "IF" statement*/
      /* END                           ; END of "IF" statement*/
    /* AB0CS02                       ; Validate Season yr*/
    AB0CS12(); /* Validate Scheduler cd*/
    AB0CW03.AB0CWIXM = 0; /* initialize max style recs*/
    AB0C123(); /* clear bottom half of screen*/

  end

              /* (Set-up Exit Requirements)*/

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  converseLib.clearScreen();

end // end AB0C152

// Verify any changed data
Function AB0C153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (AB0CM001.AB0CMSTS[ABWIXM] == AB0CW03.AB0CWSTS[ABWIXM]
   && AB0CM001.AB0CMSTS[ABWIXM] != " ")
    return; /* Return to previous process*/
  else
    if (AB0CM001.AB0CMSTS[ABWIXM] != "S"
     && AB0CM001.AB0CMSTS[ABWIXM] != "B")
      set AB0CM001.AB0CMSTS[ABWIXM] cursor, bold; /* Highlight field*/
      converseLib.validationFailed(36); /* Indicate error msg*/
      ABWREC.ABWPRCSN = "153 "; /* Process number*/

    end
  end

  return; /* Return to previous process*/
end // end AB0C153

// Process valid input request
Function AB0C160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AB0CW03.AB0CWIXS = AB0CW03.AB0CWIXN + 0;

    return; /* Return to previous process*/

  else
    if (converseVar.eventKey is pf7) /* Scroll backward requested*/

      AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIXS - 1;
      ABWREC.ABWIXM = ABWREC.ABWMPMAX;
      while (AB0CW03.AB0CWIX1 > 0
       && ABWREC.ABWIXM > 0)
        if (AB0CW03.SY1STNBR[AB0CWIX1] != " ")
          AB0CW03.AB0CWIXS = AB0CW03.AB0CWIX1 + 0; /* calc next page line*/
          ABWREC.ABWIXM = ABWREC.ABWIXM - 1;
        end
        AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX1 - 1;
      end
      if (AB0CW03.AB0CWIX1 <= 0)
        AB0CW03.AB0CWIXS = 1;
      end

      return; /* Return to previous process*/

    else
      if (converseVar.eventKey is pf14 /* change status to "s"*/
       || converseVar.eventKey is pf15) /* change status to "b"*/

        AB0C163(); /* perform global status change*/

        return; /* Return to previous process*/

      else
        AB0C161(); /* change status of indv. fields*/
      end
    end
  end


end // end AB0C160

// check indv status and change
Function AB0C161()
  ABWREC.ABWIXM = 1;
  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* do until end of recs loaded*/

    if (AB0CM001.AB0CMSYL[ABWIXM] > " ") /* style code exists*/

      if (AB0CW03.AB0CWSTS[ABWIXM] != AB0CM001.AB0CMSTS[ABWIXM]) /* Upd*/

        AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX2[ABWIXM]; /* Load idx*/
        AB0CW01.AB0CWSTA = AB0CM001.AB0CMSTS[ABWIXM]; /* upd status*/

        AB0C162(); /* Update Buy/Plan row*/

        if (converseVar.validationMsgNum == 0) /* No errors found*/
          ABWREC.ABWSWR = "Y"; /* Reselect updated data*/
          AB0CW01.AB0CWUPD = "Y"; /* Indicate successful update*/
          AB0CW01.AB0CWSIX = AB0CW03.AB0CWIXS; /* Save curr page*/
          ABWREC.ABWNMO = 045; /* Update was successful*/
          set AB0CM001.XXXUSER cursor; /* Set cursor*/
        else
          ABWREC.ABWSWR = "N"; /* Reselect updated data*/
          AB0CW01.AB0CWUPD = "N"; /* Indicate successful update*/
          exit stack; /* Redisplay map*/
        end

      end

    else

      ABWREC.ABWIXM = ABWREC.ABWMPMAX; /* Terminate loop*/

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end


end // end AB0C161

// update with new status
Function AB0C162()
   /* ------------------------------------------------------------*/
   /* Since a primary key (buy status) is required to be updated,*/
   /* A Select Unique/Delete/Insert update operation will be*/
   /* performed.*/
   /* ------------------------------------------------------------*/


  AB0CS25(); /* Select unique row to be updated*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    AB0CS26(); /* Delete row*/

    if (converseVar.validationMsgNum == 0) /* Delete successful*/

      AB0CS27(); /* Reflect updates and reinsert row*/

    end

  end


end // end AB0C162

// process global chg status
Function AB0C163()
  AB0CW03.AB0CWIX1 = 1; /* initialize array index*/

  while (AB0CW03.AB0CWIX1 <= AB0CW03.AB0CWIXM)

    if (AB0CW03.AB0CWMTC[AB0CWIX1] != "N") /* do if data in table*/

      AB0C162(); /* update DABUY.VBPLAN01*/

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        ABWREC.ABWSWR = "Y"; /* Reselect updated data*/
        AB0CW01.AB0CWUPD = "Y"; /* Indicate successful update*/
        AB0CW01.AB0CWSIX = 1; /* Set saved curr page*/
        ABWREC.ABWNMO = 045; /* Update was successful*/
        set AB0CM001.XXXUSER cursor; /* Set cursor*/
      else
        ABWREC.ABWSWR = "N"; /* Do not select new data*/
        AB0CW01.AB0CWUPD = "N"; /* Reset update indicator*/
        exit stack; /* Redisplay map*/
      end


    end

    /* --------------------------------*/
    /* -  advance indexes          ----*/
    /* --------------------------------*/
    AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX1 + 1;

  end


end // end AB0C163

// Edit XSECD/XSNYR/BUY MONTH
Function AB0CS01()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSMO(); /* EDIT Buy-Month/XSNYR/XSECD*/


   /* ***** if error was with XSECD ******/
  if (XP1REC.XP1ERRFL == "3") /* Invalid season code*/

    XP1REC.XSECD = " "; /* Space out save area*/
    set AB0CM001.XSECD cursor, bold; /* Highlight field*/
    /* ***** if code was inactive ******/
    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
    else
      XP1REC.XP1MNO = 16; /* Indicate error message*/
    end
    ABWREC.ABWPRCSN = "S01 "; /* Process number*/

  else

    AB0CM001.XSECD = XP1REC.XSECD; /* Move valid code to map*/

    /* ***** if error was with XSNYR ******/
    if (XP1REC.XP1ERRFL == "2") /* Invalid season-year*/

      XP1REC.XSNYR = 0; /* Space out save area*/
      XP1REC.XP1XSNYR = 0; /* Space out save area*/
      set AB0CM001.XSNYR bold; /* Highlight field*/
      set AB0CM001.XSECD cursor, bold; /* Highlight field*/
      if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
        XP1REC.XP1MNO = 35; /* Indicate error message*/
      else
        XP1REC.XP1MNO = 26; /* Indicate error message*/
      end
      ABWREC.ABWPRCSN = "S01 "; /* Process number*/

    else

      AB0CM001.XSNYR = XP1REC.XP1XSNYY; /* Move valid code to map*/

      AB0CM001.AB3BUYMO = XP1REC.XP1CBYMO;
                                             /* Move valid code to map*/

    end
  end



end // end AB0CS01

// Edit DOM/OFF
Function AB0CS04()
  if (XP1REC.FY1FRGN == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FRGN == "?") /* Pop-up window requested*/
    XP1REC.FY1FRGN = " "; /* Space out wk area*/
    set AB0CM001.FY1FRGN cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S04 "; /* Process number*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FRGN != "Y"
   && XP1REC.FY1FRGN != "N")

    XP1REC.FY1FRGN = " "; /* Space out wk area*/
    set AB0CM001.FY1FRGN cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 39; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S04 "; /* Process number*/

  end



end // end AB0CS04

// Edit XGACD
Function AB0CS05()
  if (XP1REC.XGACD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSGA(); /* Standard XGA pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/

    XP1REC.XGACD = " "; /* Space out save area*/
    XP1REC.XGAABRV = " "; /* Space out desc*/
    AB0CM001.XGAABRV = " "; /* Space out desc*/
    set AB0CM001.XGACD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S05 "; /* Process number*/

  else

    AB0CM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XGACD = " "; /* Space out save area*/
      XP1REC.XGAABRV = " "; /* Space out desc*/
      AB0CM001.XGAABRV = " "; /* Space out desc*/
      set AB0CM001.XGAABRV bold; /* Highlight field*/
      set AB0CM001.XGACD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S05 "; /* Process number*/

    else

      AB0CM001.XGACD = XP1REC.XGACD; /* Move valid code to map*/

    end

  end



end // end AB0CS05

// Edit XPCCD
Function AB0CS06()
  if (XP1REC.XPCCD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSPC(); /* Standard XPC pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data detected*/

    XP1REC.XPCCD = " "; /* Space out save area*/
    XP1REC.XPCABRV = " "; /* Space out desc*/
    AB0CM001.XPCABRV = " "; /* Space out desc*/
    set AB0CM001.XPCCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 32; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S06 "; /* Process number*/

  else

    AB0CM001.XPCABRV = XP1REC.XPCABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive code obtained*/

      XP1REC.XPCCD = " "; /* Space out save area*/
      XP1REC.XPCABRV = " "; /* Space out desc*/
      AB0CM001.XPCABRV = " "; /* Space out desc*/
      set AB0CM001.XPCABRV bold; /* Highlight field*/
      set AB0CM001.XPCCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S06 "; /* Process number*/

    else

      AB0CM001.XPCCD = XP1REC.XPCCD; /* Move valid code to map*/

    end

  end



end // end AB0CS06

// Edit XSUCD
Function AB0CS07()
  if (XP1REC.XSUCD == " ") /* XP1REC field eq spaces*/
    return; /* Return to calling process*/
  end

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/



  XSABSSU();
                                   /* Standard XSU validation/pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Erroneous data detected*/

    XP1REC.XSUCD = " "; /* Space out save field*/
    XP1REC.XSUABRV = " "; /* Space out desc*/
    AB0CM001.XSUABRV = " "; /* Space out desc*/
    set AB0CM001.XSUCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 31; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S07 "; /* Process number*/

  else

    AB0CM001.XSUABRV = XP1REC.XSUABRV; /* Move desc to map*/

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XSUCD = " "; /* Space out save field*/
      XP1REC.XSUABRV = " "; /* Space out desc*/
      AB0CM001.XSUABRV = " "; /* Space out desc*/
      set AB0CM001.XSUABRV bold; /* Highlight field*/
      set AB0CM001.XSUCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S07 "; /* Process number*/

    else

      AB0CM001.XSUCD = XP1REC.XSUCD; /* Move valid data to map*/

    end

  end



end // end AB0CS07

// Edit Factory cd
Function AB0CS08()
  if (XP1REC.FY1FCTYC == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.FY1FCTYC == "?") /* Pop-up window requested*/
    XP1REC.FY1FCTYC = " "; /* Move blank Factory cd*/
    set AB0CM001.FY1FCTYC cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S08 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = XP1REC.FY1FCTYC; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.FY1FCTYC = " "; /* Move blank Factory cd*/
      set AB0CM001.FY1FCTYC cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 41; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S08 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0CS08

// Edit PO type
Function AB0CS09()
  if (XP1REC.PC4ORTYP == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end



  if (XP1REC.PC4ORTYP == "?") /* Pop-up window requested*/
    XP1REC.PC4ORTYP = " "; /* Move blank PO type*/
    XP1REC.PC4ABRV = " "; /* Space out desc*/
    AB0CM001.PC4ABRV = " "; /* Space out desc*/
    set AB0CM001.PC4ORTYP cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not avail*/
    ABWREC.ABWPRCSN = "S09 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
   /* Verify if PO type entered is found in DPRODC.VPOTYP01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC4REC empty; /* initialize db record*/
  PC4REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC4REC.PC4ORTYP = XP1REC.PC4ORTYP; /* PO type*/


   /* *=============================**/
   /* *  Access DPRODc.VPOTYP01 DB  **/
   /* *=============================**/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XP1REC.PC4ABRV = PC4REC.PC4SDESC; /* To save area*/
      AB0CM001.PC4ABRV = PC4REC.PC4SDESC; /* To save area*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.PC4ORTYP = " "; /* Move blank PO type*/
      XP1REC.PC4ABRV = " "; /* Space out desc*/
      AB0CM001.PC4ABRV = " "; /* Space out desc*/
      set AB0CM001.PC4ORTYP cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 37; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S09 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPOTYP01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0CS09

// Edit status cd
Function AB0CS10()
  if (XP1REC.XP1STAT == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.XP1STAT == "?") /* Pop-window requested*/
    XP1REC.XP1STAT = " "; /* Space out wk area*/
    set AB0CM001.XXXSTAT cursor, bold; /* Indicate pop-up window not avail*/
    XP1REC.XP1MNO = 42; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S10 "; /* Process number*/
    return;
  end


  if (XP1REC.XP1STAT != "S"
   && XP1REC.XP1STAT != "B")

    XP1REC.XP1STAT = " "; /* Space out wk area*/
    set AB0CM001.XXXSTAT cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 36; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S10 "; /* Process number*/

  end



end // end AB0CS10

// Edit Style no.
Function AB0CS11()
  if (XP1REC.SY1STNBR == " ") /* XP1REC Field eq spaces*/
    return; /* Return to calling process*/
  end


  if (XP1REC.SY1STNBR == "?") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1STYNM = " "; /* Space out desc*/
    AB0CM001.SY1STYNM = " "; /* Space out desc*/
    set AB0CM001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up not available*/
    ABWREC.ABWPRCSN = "S11 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0CS13(); /* Select set style*/

  AB0CS14(); /* Validate style*/

  AB0CS15(); /* Close style cursor*/



end // end AB0CS11

// Edit Scheduler cd
Function AB0CS12()

  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0CM001.XXXUSER cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "S12 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0CM001.XXXUSER cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 21; /* Indicate error msg*/
    ABWREC.ABWPRCSN = "S12 "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/

        /* ***** code added by Grant Gilray 10/23/89 ******/
        /* ***** if scheduler code changed, get correct buy-dates ******/

        XPAB020(); /* Get correct season/year/buy-month*/

        AB0CM001.XSECD = XP1REC.XSECD;
        AB0CM001.XSNYR = XP1REC.XP1XSNYY;
        AB0CM001.AB3BUYMO = XP1REC.XP1CBYMO;

        /* ***** END of code added by Grant Gilray   ******/

      end

    end

  end



end // end AB0CS12

// Select Set Style
Function AB0CS13()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0CS13

// Process Style row
Function AB0CS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      XP1REC.SY1STYNM = PG2REC.SY1STYNM; /* move style desc*/
      AB0CM001.SY1STYNM = PG2REC.SY1STYNM; /* move style desc*/
      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      XP1REC.SY1STYNM = " "; /* Space out desc*/
      AB0CM001.SY1STYNM = " "; /* Space out desc*/
      set AB0CM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S14 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0CS14

// Close Style cursor
Function AB0CS15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AB0CS15

// Select Set Style
Function AB0CS16()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB0CW03.SY1STNBR[AB0CWIX1]; /* style no.*/

   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end AB0CS16

// Process Style row
Function AB0CS17()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB0CM001.AB0CMSNM[ABWIXM] = PG2REC.SY1SSTNM; /* style name*/
      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB0CM001.AB0CMSNM[ABWIXM] = " "; /* style name*/
      set AB0CM001.AB0CMSYL[ABWIXM] cursor, skip, bold; /* Hlite field*/
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S17 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S17 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0CS17

// Get the buy/plan row
Function AB0CS19()
  AB4REC.SY1STNBR = AB0CW03.SY1STNBR[AB0CWIX1]; /* style number*/
  AB4REC.AB3BUYST = AB0CW03.AB3BUYST[AB0CWIX1]; /* buy status*/
  AB4REC.XDMCD = AB0CW03.XDMCD[AB0CWIX1]; /* dimension code*/
  AB4REC.XWHCD = AB0CW03.XWHCD[AB0CWIX1]; /* warehouse code*/
  AB4REC.XDVCD = AB0CW03.XDVCD[AB0CWIX1]; /* division code*/
  AB4REC.XSECD = AB0CW03.XSECD[AB0CWIX1]; /* season code*/
  AB4REC.XSNYR = AB0CW03.XSNYR[AB0CWIX1]; /* season year range*/
  AB4REC.FY1FCTYC = AB0CW03.FY1FCTYC[AB0CWIX1]; /* factory code*/
  AB4REC.PC4ORTYP = AB0CW03.PC4ORTYP[AB0CWIX1]; /* p.o. type*/
  AB4REC.PC2CUXID = AB0CW03.PC2CUXID[AB0CWIX1];
  AB4REC.XOWCD = AB0CW03.XOWCD[AB0CWIX1]; /* owner group code*/
  AB4REC.AB3BUYMO = XP1REC.XP1BUYMO; /* buy month*/
   /* --------------------------------------------------------*/
   /* - get the buy/plan row*/
   /* --------------------------------------------------------*/
  try
    call "IO3570" ("S ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get unique call*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      if (AB0CM001.XXXSTAT > " "
       && AB4REC.AB3BUYST != AB0CM001.XXXSTAT) /* buy status*/
        AB0CW03.AB0CWMTC[AB0CWIX1] = "N";
        return; /* Return to calling process*/
      end
      AB0CW03.AB0CWMTC[AB0CWIX1] = "Y";
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
      if (ABWREC.ABWIXM == 1)
        AB0CW03.AB0CWIXS = AB0CW03.AB0CWIX1;
      end
      AB0CW03.AB0CWIX2[ABWIXM] = AB0CW03.AB0CWIX1;
      AB0CW03.ZZZCHGCT[ABWIXM] = AB4REC.ZZZCHGCT;
                                   /* save change count*/
      AB0CM001.AB0CMSYL[ABWIXM] = AB4REC.SY1STNBR; /* style nbr*/
      AB0CM001.AB0CMFCT[ABWIXM] = AB4REC.FY1FCTYC;
      AB0CM001.AB0CMPOT[ABWIXM] = AB4REC.PC4ORTYP;
      AB0CM001.AB0CMCNB[ABWIXM] = AB4REC.PC2CUXID; /* cust nbr*/
      AB0CM001.AB0CMSTS[ABWIXM] = AB4REC.AB3BUYST; /* buy status*/
      AB0CW03.AB0CWSTS[ABWIXM] = AB4REC.AB3BUYST; /* buy status*/
      AB0CM001.AB0CMQTY[ABWIXM] = AB4REC.AB4SMBQT; /* buy quantity*/
      AB0CM001.XOWCD[ABWIXM] = AB4REC.XOWCD; /* owner grp*/
      set AB0CM001.AB0CMSTS[ABWIXM] initialAttributes; /* Reset select flag*/
      AB0CS20(); /* get po abrv*/
      AB0CS21(); /* get customer name*/
      /* --------------------------------------------------------*/
      /* - get style description*/
      /* --------------------------------------------------------*/
      AB0CS16(); /* Select set style*/
      AB0CS17(); /* Validate style*/
      AB0CS15(); /* Close style cursor*/

      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/
        AB0CW03.AB0CWMTC[AB0CWIX1] = "N";
        return; /* Return to calling process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S19 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET THE BUY/PLAN ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/
end // end AB0CS19

// Get pc abrv
Function AB0CS20()
  set PC4REC empty;
  PC4REC.PC4ORTYP = AB4REC.PC4ORTYP; /* po type*/
  PC4REC.XGPCD = XP1REC.XGPCD;
  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get table*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AB0CM001.AB0CMPON[ABWIXM] = PC4REC.PC4ABRV; /* po abrv*/
      return; /* Return to calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/
        AB0CM001.AB0CMPON[ABWIXM] = "**"; /* po abrv*/
        return; /* Return to calling process*/
      end
    end
  end
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end



  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "GET"; /* Termination function*/
  ABWREC.ABWPRCSN = "S20 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET PC ABRV";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Return to previous process*/
end // end AB0CS20

// Get the customer name
Function AB0CS21()
  set PC2REC empty;
  if (AB4REC.PC2CUXID == " ")
    return; /* Return to calling process*/
  end
  PC2REC.PC2CUXID = AB4REC.PC2CUXID; /* cust nbr*/
  PC2REC.XGPCD = XP1REC.XGPCD;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get table*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AB0CM001.AB0CMCNM[ABWIXM] = PC2REC.PC2NAME; /* customer name*/
      return; /* Return to calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/
        AB0CM001.AB0CMCNM[ABWIXM] = "**"; /* customer name*/
        return; /* Return to calling process*/
      end
    end
  end
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "GET"; /* Termination function*/
  ABWREC.ABWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET CUSTOMER NAME";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Return to previous process*/
end // end AB0CS21

// Select plan rows for style
Function AB0CS22()
   /* ---------------------------------------------------------*/
    /* Select set DABUY.VBPLAN01 rows for the style. All rows*/
   /* with the buy month being processed will be stored for*/
   /* processing. Thus AB0CW03 may contain duplicate products*/
   /* but with different buy statuses.*/
   /* ---------------------------------------------------------*/

   /* IF AB2REC.XOWCD NE '00';*/
    /* EZERTN;*/
   /* END;*/

  AB4REC.SY1STNBR = AB2REC.SY1STNBR; /* style number*/
  AB4REC.XDMCD = AB2REC.XDMCD; /* dimension code*/
  AB4REC.XOWCD = AB2REC.XOWCD; /* owner group code*/
  AB4REC.XWHCD = AB2REC.XWHCD; /* warehouse code*/
  AB4REC.XDVCD = AB2REC.XDVCD; /* division code*/
  AB4REC.XSECD = AB2REC.XSECD; /* season code*/
  AB4REC.XSNYR = AB2REC.XSNYR; /* season year range*/
  AB4REC.FY1FCTYC = AB2REC.FY1FCTYC; /* factory code*/
  AB4REC.PC4ORTYP = AB2REC.PC4ORTYP; /* p.o. type*/
  AB4REC.PC2CUXID = AB2REC.PC2CUXID; /* cust id*/



   /* --------------------------------------------------------*/
    /* Access database.*/
   /* --------------------------------------------------------*/

  try
    call "IO3570" ("S1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* select call*/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      AB0CW01.AB0CWBPS = "N"; /* Reset eof indicator*/

      while (AB0CW01.AB0CWBPS != "Y") /* Process all rows*/

        AB0CS23(); /* Load array elements*/

      end

      if (converseVar.validationMsgNum == 0) /* No errors found*/
        AB0CS24(); /* Close DABUY.VBPLAN01 cursor*/
      end

      return; /* return to calling process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S22 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET BUY/PLAN ";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end AB0CS22

// Process all plan rows
Function AB0CS23()
   /* ------------------------------------------------------------*/
              /* * Process DABUY.VBPLAN01 Rows **/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("N1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

     /* IF AB4REC.XOWCD NE '00';*/
       /* EZERTN;*/
     /* END;*/

      if (XP1REC.XP1BUYMO == AB4REC.AB3BUYMO) /* Buy month matched*/
        if (AB4REC.AB3BUYST == "B"
         || AB4REC.AB3BUYST == "C"
         || AB4REC.AB3BUYST == "S"
         || AB4REC.AB3BUYST == "T"
         || AB4REC.AB3BUYST == "Z")
          /* --------------------------*/
          /* -- Save data to display*/
          /* --------------------------*/

          AB0CW03.AB0CWIX1 = AB0CW03.AB0CWIX1 + 1; /* Increment line idx*/

          AB0CW03.SY1STNBR[AB0CWIX1] = AB2REC.SY1STNBR; /* style*/
          AB0CW03.AB3BUYST[AB0CWIX1] = AB4REC.AB3BUYST; /* BUY STATUS*/
          AB0CW03.XDMCD[AB0CWIX1] = AB2REC.XDMCD; /* dimension*/
          AB0CW03.XWHCD[AB0CWIX1] = AB2REC.XWHCD; /* warehouse*/
          AB0CW03.XDVCD[AB0CWIX1] = AB2REC.XDVCD; /* division*/
          AB0CW03.XSECD[AB0CWIX1] = AB2REC.XSECD; /* season*/
          AB0CW03.XSNYR[AB0CWIX1] = AB2REC.XSNYR; /* season yr*/
          AB0CW03.FY1FCTYC[AB0CWIX1] = AB2REC.FY1FCTYC; /* factory*/
          AB0CW03.PC4ORTYP[AB0CWIX1] = AB2REC.PC4ORTYP; /* p.o.*/
          AB0CW03.PC2CUXID[AB0CWIX1] = AB2REC.PC2CUXID; /* x-ref*/
          AB0CW03.XOWCD[AB0CWIX1] = AB2REC.XOWCD; /* owner grp*/
          AB0CW03.AB0CWMTC[AB0CWIX1] = " "; /* no match*/

          return; /* return to calling process*/

        else

          return; /* return to calling process*/

        end

      else

        return; /* return to calling process*/

      end

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      AB0CW01.AB0CWBPS = "Y"; /* Indicate end of file*/

      return; /* Return to previous process*/

    end

  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S23 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Return to previous process*/


end // end AB0CS23

// Close Buy/Plan cursor
Function AB0CS24()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("C1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  else

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "S24 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ABWREC.ABWSWR = "Y";

    exit stack; /* Return to previous process*/

  end


end // end AB0CS24

// Select unique buy/plan row
Function AB0CS25()
   /* ------------------------------------------------------------*/
   /* Select unique the buy/plan row to be updated.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* -----------------------------------------------------------*/
   /* Format DABUY.VBPLAN01 key*/
   /* -----------------------------------------------------------*/

  AB4REC.SY1STNBR = AB0CW03.SY1STNBR[AB0CWIX1]; /* style number*/
  AB4REC.AB3BUYST = AB0CW03.AB3BUYST[AB0CWIX1]; /* buy status*/
  AB4REC.XDMCD = AB0CW03.XDMCD[AB0CWIX1]; /* dimension code*/
  AB4REC.XWHCD = AB0CW03.XWHCD[AB0CWIX1]; /* warehouse code*/
  AB4REC.XDVCD = AB0CW03.XDVCD[AB0CWIX1]; /* division code*/
  AB4REC.XSECD = AB0CW03.XSECD[AB0CWIX1]; /* season code*/
  AB4REC.XSNYR = AB0CW03.XSNYR[AB0CWIX1]; /* season year range*/
  AB4REC.FY1FCTYC = AB0CW03.FY1FCTYC[AB0CWIX1]; /* factory code*/
  AB4REC.PC4ORTYP = AB0CW03.PC4ORTYP[AB0CWIX1]; /* p.o. type*/
  AB4REC.PC2CUXID = AB0CW03.PC2CUXID[AB0CWIX1]; /* cust x-ref code*/
  AB4REC.XOWCD = AB0CW03.XOWCD[AB0CWIX1]; /* owner group code*/
  AB4REC.AB3BUYMO = XP1REC.XP1BUYMO; /* buy month*/


   /* ------------------------------------------------------------*/
   /* Access DABUY.VBPLAN01 database.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("S ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get unique call*/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      AB0CW01.AB3BYSDT = AB4REC.AB3BYSDT; /* Save buy date*/
      AB0CW01.AB4SMBQT = AB4REC.AB4SMBQT; /* Save buy qty*/

      return; /* return to calling process*/

    end

  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S25 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE DATABASE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/


end // end AB0CS25

// Delete buy/plan row
Function AB0CS26()
   /* ------------------------------------------------------------*/
   /* Delete the buy/plan row to be updated.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* -----------------------------------------------------------*/
   /* Format DABUY.VBPLAN01 key*/
   /* -----------------------------------------------------------*/

  AB4REC.SY1STNBR = AB0CW03.SY1STNBR[AB0CWIX1]; /* style number*/
  AB4REC.AB3BUYST = AB0CW03.AB3BUYST[AB0CWIX1]; /* buy status*/
  AB4REC.XDMCD = AB0CW03.XDMCD[AB0CWIX1]; /* dimension code*/
  AB4REC.XWHCD = AB0CW03.XWHCD[AB0CWIX1]; /* warehouse code*/
  AB4REC.XDVCD = AB0CW03.XDVCD[AB0CWIX1]; /* division code*/
  AB4REC.XSECD = AB0CW03.XSECD[AB0CWIX1]; /* season code*/
  AB4REC.XSNYR = AB0CW03.XSNYR[AB0CWIX1]; /* season year range*/
  AB4REC.FY1FCTYC = AB0CW03.FY1FCTYC[AB0CWIX1]; /* factory code*/
  AB4REC.PC4ORTYP = AB0CW03.PC4ORTYP[AB0CWIX1]; /* p.o. type*/
  AB4REC.PC2CUXID = AB0CW03.PC2CUXID[AB0CWIX1]; /* cust x-ref code*/
  AB4REC.XOWCD = AB0CW03.XOWCD[AB0CWIX1]; /* owner group code*/
  AB4REC.AB3BUYMO = XP1REC.XP1BUYMO; /* buy month*/


   /* ------------------------------------------------------------*/
   /* Access DABUY.VBPLAN01 database.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("D ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* delete call*/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      return; /* return to calling process*/

    end

  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S26 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "DELETE DATABASE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/


end // end AB0CS26

// Insert updated buy/plan row
Function AB0CS27()
   /* -----------------------------------------------------------*/
   /* Format DABUY.VBPLAN01 keys/data*/
   /* -----------------------------------------------------------*/

  AB4REC.SY1STNBR = AB0CW03.SY1STNBR[AB0CWIX1]; /* style number*/


  if (converseVar.eventKey is pf14) /* global change to 's'*/

    if (AB0CW03.AB3BUYST[AB0CWIX1] != "S")
      AB4REC.AB3BUYST = "S"; /* change to 's'*/
      AB0CW03.AB3BUYST[AB0CWIX1] = "S"; /* change to 's'*/
    end

  else

    if (converseVar.eventKey is pf15) /* global change to 'b'*/

      if (AB0CW03.AB3BUYST[AB0CWIX1] != "B")
        AB4REC.AB3BUYST = "B"; /* change to 'b'*/
        AB0CW03.AB3BUYST[AB0CWIX1] = "B"; /* change to 'b'*/
      end

    else

      AB4REC.AB3BUYST = AB0CW01.AB0CWSTA; /* buy status*/

    end

  end


  AB4REC.XDMCD = AB0CW03.XDMCD[AB0CWIX1]; /* dimension code*/
  AB4REC.XWHCD = AB0CW03.XWHCD[AB0CWIX1]; /* warehouse code*/
  AB4REC.XDVCD = AB0CW03.XDVCD[AB0CWIX1]; /* division code*/
  AB4REC.XSECD = AB0CW03.XSECD[AB0CWIX1]; /* season code*/
  AB4REC.XSNYR = AB0CW03.XSNYR[AB0CWIX1]; /* season year range*/
  AB4REC.FY1FCTYC = AB0CW03.FY1FCTYC[AB0CWIX1]; /* factory code*/
  AB4REC.PC4ORTYP = AB0CW03.PC4ORTYP[AB0CWIX1]; /* p.o. type*/
  AB4REC.PC2CUXID = AB0CW03.PC2CUXID[AB0CWIX1]; /* cust x-ref code*/
  AB4REC.XOWCD = AB0CW03.XOWCD[AB0CWIX1]; /* owner group code*/
  AB4REC.AB3BUYMO = XP1REC.XP1BUYMO; /* buy month*/

  AB4REC.AB3BYSDT = AB0CW01.AB3BYSDT; /* buy status date*/
  AB4REC.AB4SMBQT = AB0CW01.AB4SMBQT; /* buy quantity*/


   /* ------------------------------------------------------------*/
   /* Get update date/time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* invoke date/time routine*/

  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  AB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  AB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


   /* ------------------------------------------------------------*/
   /* Access DABUY.VBPLAN01 database.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("A ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row call*/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      return; /* return to calling process*/

    end

  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S27 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "ADD DATABASE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0CM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/


end // end AB0CS27

//*** RECORD=AB0CW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB0CW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AB3BYSDT AB3BYSDT ; 
  10 AB4SMBQT AB4SMBQT ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 AB0CWUPD AB0CWUPD ; 
  10 AB0CWBPS AB0CWBPS ; 
  10 AB0CWCCT AB0CWCCT ; 
  10 AB0CWSIX AB0CWSIX ; 
  10 AB0CWSTA AB0CWSTA ; 
  10 AB0CWSLI AB0CWSLI ; 
  10 AB0CWSYL AB0CWSYL ; 
  10 AB0CWSNM AB0CWSNM ; 
  10 AB0CWSWS AB0CWSWS ; 
  10 AB0CWXSA AB0CWXSA ; 
    15 AB0CWXSS AB0CWXSS ; 
    15 AB0CWXYR AB0CWXYR ; 
  10 AB0CWIXT AB0CWIXT ; 
  10 AB0CWXSY AB0CWXSY ; 
  10 AB0CWDTW AB0CWDTW ; 
    15 AB0CWDTC AB0CWDTC ; 
    15 AB0CWDTY AB0CWDTY ; 
    15 AB0CWDTM AB0CWDTM ; 
    15 AB0CWDTD AB0CWDTD ; 
  10 AB0CWBYM AB0CWBYM ; 
    15 AB0CWBYY AB0CWBYY ; 
    15 AB0CWBMM AB0CWBMM ; 
  10 AB0CWBOD AB0CWBOD ; 
    15 AB0CWBOY AB0CWBOY ; 
    15 AB0CWBOM AB0CWBOM ; 
  10 AB0CWEOD AB0CWEOD ; 
    15 AB0CWEOY AB0CWEOY ; 
    15 AB0CWEOM AB0CWEOM ; 
  10 AB0CWXSN AB0CWXSN ; 
    15 AB0CWSNC AB0CWSNC ; 
    15 AB0CWSNY AB0CWSNY ; 
end // end AB0CW01

//*** RECORD=AB0CW03 ****
// ************************************************************
// Temporary storage record - for style buy selection screen
// ************************************************************
// ***********************
Record AB0CW03 type basicRecord
  5 AB0CWGRP AB0CWGRP ; 
    10 * char(31) [1000] ; 
      15 SY1STNBR SY1STNBR ; 
      15 AB3BUYST AB3BUYST ; 
      15 XDMCD XDMCD ; 
      15 XOWCD XOWCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 AB0CWMTC AB0CWMTC ; 
    10 * char(5) [12] ; 
      15 AB0CWIX2 AB0CWIX2 ; 
      15 ZZZCHGCT ZZZCHGCT ; 
      15 AB0CWSTS AB0CWSTS ; 
    10 AB0CWIX1 AB0CWIX1 ; 
    10 AB0CWIXM AB0CWIXM ; 
    10 AB0CWIXS AB0CWIXS ; 
    10 AB0CWIXN AB0CWIXN ; 
end // end AB0CW03

// Buy mo
DataItem AB0CWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy yr/mo wk
DataItem AB0CWBOD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy mo
DataItem AB0CWBOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning buy yr
DataItem AB0CWBOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy/Plan eof indicator
DataItem AB0CWBPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy yr/mo wk
DataItem AB0CWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy yr
DataItem AB0CWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy/plan chg count
DataItem AB0CWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk century
DataItem AB0CWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk day
DataItem AB0CWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk month
DataItem AB0CWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk area
DataItem AB0CWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date wk year
DataItem AB0CWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy yr/mo wk
DataItem AB0CWEOD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy mo
DataItem AB0CWEOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending buy yr
DataItem AB0CWEOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0CWGRP char(31072)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for style array
DataItem AB0CWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index to the above
DataItem AB0CWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max styles in style array
DataItem AB0CWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next page to displayed
DataItem AB0CWIXN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start of styles displayed
DataItem AB0CWIXS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL table index
DataItem AB0CWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working-Storage STATUS KEY
DataItem AB0CWMTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page save area
DataItem AB0CWSIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Rpt Request Select Ctr
DataItem AB0CWSLI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century part of XSNYR
DataItem AB0CWSNC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style name wk area
DataItem AB0CWSNM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year part of XSNYR
DataItem AB0CWSNY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy/plan saved status
DataItem AB0CWSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved status field
DataItem AB0CWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AB0CWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style wk area
DataItem AB0CWSYL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update indicator
DataItem AB0CWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB0CWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Non-Binary XSNYR
DataItem AB0CWXSN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season cd
DataItem AB0CWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB0CWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0CWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

