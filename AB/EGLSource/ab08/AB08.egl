package ab08;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AB08 ****
// This application is menu driver for the crested buy process.
// The menu order depicts the appropriate sequence of steps
// required in the buy in order to aid the user.
// 
// This process is intended for use by schedulers responsible
// for the crested/tour buy. scheduler (19)
// 
//   DATE      NAME         DESCRIPTION OF CHANGE
// --------   -----------   -----------------------------------
// 12/21/92   SW            New application.
// 12/??/97   DBETTR        RECOMPILE TO PICK UP NEW IO MODULE
//                          SEE PROC XPAB020
// *********************
Program AB08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB08T01; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use AB08M.AB08M001,  // forms
      AB08M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set PG1REC empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA3REC empty;
    set SQLCA empty;

    set AB08M001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AB08"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "Y"; /* Indicate request for data*/

    goto AB08-0001; /* Converse Transportation Prototype*/


    AB08-0001: AB08-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB08-0001; /* Converse Transportation Prototype*/


  end // end main
end // end AB08

// Choose which map to display
Function AB08-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  AB08-1000(); /* Display map 1*/



end // end AB08-0001

// Driver process for 100 map
Function AB08-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  AB08-1200(); /* Format and display the map*/

  AB08-1300(); /* Check attention identifier*/

  AB08-1400(); /* Reset fields to normal intensity*/

  AB08-1500(); /* Verify the entered data*/


end // end AB08-1000

// Format and display the map
Function AB08-1200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB08M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/

    if (ABWREC.ABWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        AB08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AB08M001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set AB08M001 initial; /* Clear map output area*/

    end

    ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/

    AB08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  ABWREC.ABWNMO = 0; /* Reset information message number*/

   /* *************************************************************/

  converse AB08M001 ;


end // end AB08-1200

// Check attention identifier
Function AB08-1300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AB08M001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AB08M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = AB08M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB08M001.CAITEM; /* Application data*/

      XSABS03(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AB08M001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB08M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    XSABS03(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB08M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB08M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AB08-1300

// Reset highlighted fields
Function AB08-1400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  ABWREC.ABWIXM = 1; /* Initialize line index*/

  set AB08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB08M001.CAITEM initialAttributes; /* Commarea application data*/


end // end AB08-1400

// Verify the entered data
Function AB08-1500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AB08M001.CAITEM > " ") /* Application data was entered*/

    set AB08M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AB08M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  AB08-1520(); /* Verify selection criteria*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end AB08-1500

// Edit selection criteria
Function AB08-1520()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/


  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/

  if (AB08M001.AB08MSEL == 0)
      /* next sentence*/
  else
    if (AB08M001.AB08MSEL in AB08T01.AB08MELT) /* if entry in table*/
      COMMAREA.CATOAP = AB08T01.AB08MPRM[sysVar.arrayIndex];
      COMMAREA.CAUSERA = XP1REC.XP1GROUP;
      XSEXIT();
      AB08M001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      set AB08M001.AB08MSEL cursor, bold;
      converseLib.validationFailed(9); /* invalid selection*/
    end
  end


   /* ====================== END OF PROCESS ======================*/

end // end AB08-1520

