package ab0h;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AB0H ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/28/88   userid   New application.
// 09/17/93   SWHITA   ADDED HELP SCREEN LINK TO AB0H130.
// --------   ------   ----------------------------------------
// --------   ------   ----------------------------------------
// 12/18/97   NGANGO   Y2K MODIFICATIONS WITH TABLE CHANGE.
//                     Changed Map AB0HM001,(to remove zero
//                     suppression) and Process AB0H112,AB0H113
//                     AB0H115,AB0H153,AB0H154,AB0H161,AB0H162
//                     and AB0H163,AB0H156 AND AB0H157.
// --------   ------   ----------------------------------------
// --------   ------   ----------------------------------------
// *********************
Program AB0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0HW00 AB0HW00; // record
  AB0HW02 AB0HW02; // record
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AB0HM.AB0HM001,  // forms
      AB0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/


    set ABWREC empty; /* Initialize working storage*/
    set AB0HW00 empty; /* Initialize working storage*/
    set AB0HW02 empty; /* Initialize working storage*/
    set AB3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AB0HM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AB0H"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "Y"; /* Indicate request for data*/
    AB0HW00.AB0HWAS1 = "** ";
    AB0HW00.AB0HWAS2 = " **";
    move " " to AB0HM001.AB0HMSEL[1] for all;
    AB0HW00.AB0HWSZM = sysVar.arrayIndex; /* calculate the size of the map*/
    move " " to AB0HW02.AB0HWBST[1] for all;
    AB0HW00.AB0HWSZA = sysVar.arrayIndex; /* calculate array size for tsq rec*/
    /*  */
    /* --------------- Y2K OUT BEGIN ---------------*/
    /*  */
    /* MOVE 0244 TO ABWREC.ABWTSL;*/
    /*  */
    /* --------------- Y2K OUT END -----------------*/
    /*  */
    /*  */
    /* --------------- Y2K OUT BEGIN ---------------*/
    /*  */
    ABWREC.ABWTSL = 0272;
    /*  */
    /* --------------- Y2K OUT END -----------------*/
    /*  */
                                     /* the calculated size of tsq rec*/

    goto AB0H001; /* Converse Apparel Buy Prototype*/


    AB0H001: AB0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0H001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0H

// Choose which map to display
Function AB0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/

  AB0H100(); /* Display map 1*/



end // end AB0H001

// Driver process for 100 map
Function AB0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB0H110(); /* Obtain the data to display*/

  AB0H120(); /* Format and display the map*/

  AB0H130(); /* Check attention identifier*/

  AB0H140(); /* Reset fields to normal intensity*/

  AB0H150(); /* Verify the entered data*/

  AB0H160(); /* Process valid input request*/


end // end AB0H100

// Obtain the data to display
Function AB0H110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWSWR != "Y") /* Data was not requested*/

    return; /* Return to previous process*/
  end
  if (AB0HW00.AB0HWOPT == "A") /* add option requested*/
    AB0H111(); /* Purge any temporary storage*/
    ABWREC.ABWIXM = 0; /* Initialize display line number*/
    ABWREC.ABWIDX1 = 0; /* Initialize tsq array number*/
    set AB0HW02 empty; /* Clear temporary storage record*/
    return; /* Return to previous process*/
  end

  AB0H111(); /* Purge any temporary storage*/

  AB0H112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    AB0HW02.AB0HWIDX = 0; /* Initialize tsq array number*/

    set AB0HW02 empty; /* Clear temporary storage record*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AB0H113(); /* Obtain data and format page*/

      if (AB0HW02.AB0HWIDX == AB0HW00.AB0HWSZM) /* Page is full*/
        AB0H114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && AB0HW02.AB0HWIDX > 0)             /* and page was formatted*/
    AB0H114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AB0H115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWTSP = 1; /* Initialize page number*/
    ABWREC.ABWSWR = "N"; /* Request for data completed*/

  end


end // end AB0H110

// Purge any temporary storage
Function AB0H111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AB0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                         /* ; subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag routine*/

  end

  ABWREC.ABWTSP = 1; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AB0H111

// Select set and open cursor
Function AB0H112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ----------------- Y2K OUT BEGIN ---------------*/
  /*  */
  /* CALL IO3600 'S1',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Select table set*/
  /*  */
  /* ----------------- Y2K OUT END -----------------*/
  /*  */
  /*  */
  /* ----------------- Y2K IN  BEGIN ---------------*/
  /*  */
  try
    call "VSCTL002" ("S1", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  /*  */
  /* ----------------- Y2K IN END ------------------*/
  /*  */

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/
    TA1REC.TA1TBLKE = AB3REC.AB3KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AB0H112

// Fetch next row and format
Function AB0H113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ------------------- Y2K OUT BEGIN ------------------*/
  /*  */
  /* CALL IO3600 'N1',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Fetch the next*/
  /*  */
  /* ------------------- Y2K OUT END  -------------------*/
  /*  */
  /*  */
  /* ------------------- Y2K IN  BEGIN ------------------*/
  /*  */
  try
    call "VSCTL002" ("N1", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  /*  */
  /* ------------------- Y2K IN  END  -------------------*/
  /*  */
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AB0HW02.AB0HWIDX = AB0HW02.AB0HWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AB0HW02.AB0HWKEY[AB0HWIDX] = AB3REC.AB3KEY;
  AB0HW02.AB0HWBST[AB0HWIDX] = AB3REC.AB3BUYST;
  AB0HW02.AB0HWBDT[AB0HWIDX] = AB3REC.AB3BYSDT;
  AB0HW02.AB0HWBBF[AB0HWIDX] = AB3REC.AB3BALBF;
  AB0HW02.ZZZCHGCT[AB0HWIDX] = AB3REC.ZZZCHGCT;



end // end AB0H113

// Add page to temporary storage
Function AB0H114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AB0HW02.AB0HWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AB0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  AB0HW02.AB0HWIDX = 0; /* Reset display line number*/

  set AB0HW02 empty; /* Clear temporary storage record*/


end // end AB0H114

// Close selected set cursor
Function AB0H115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* -------- Y2K OUT BEGIN ----------*/
  /*  */
  /* CALL IO3600 'C1',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Close table set*/
  /*  */
  /* -------- Y2K OUT END  ----------*/
  /*  */
  /*  */
  /* -------- Y2K IN BEGIN ----------*/
  /*  */
  try
    call "VSCTL002" ("C1", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  /*  */
  /* -------- Y2K IN END  ----------*/
  /*  */

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AB0H115

// Format and display the map
Function AB0H120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AB0HM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/

    if (ABWREC.ABWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        AB0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AB0HM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set AB0HM001 initial; /* Clear map output area*/

    end

    ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/

    AB0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AB0HW00.AB0HWOPT != "A")
        AB0H121(); /* Format the data on the page*/
        AB0HM001.AB0HMPFT = "13:ADD";
      else
        set AB0HM001.AB0HMDEL skip, invisible; /* hide title*/
        ABWREC.ABWIXM = 1; /* Initialize line index*/

        while (ABWREC.ABWIXM <= AB0HW00.AB0HWSZM) /* Until end of lines*/

          set AB0HM001.AB0HMSEL[ABWIXM] skip, invisible;
                                   /* set to default scr*/
          set AB0HM001.AB0HMSCH[ABWIXM] normal;
          set AB0HM001.AB0HMSCD[ABWIXM] normal;
          set AB0HM001.AB0HMSYR[ABWIXM] normal;
          set AB0HM001.AB0HMBMM[ABWIXM] normal;
          set AB0HM001.AB0HMBYY[ABWIXM] normal;
          set AB0HM001.AB0HMBLA[ABWIXM] normal;
          AB0H124(); /* clear fields*/
          ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
        end
        set AB0HM001.AB0HMSCH[1] cursor, normal;
        AB0HM001.AB0HMPFT = "13:MAINT.";

      end
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  converse AB0HM001 ;


end // end AB0H120

// Format the selected data
Function AB0H121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (AB0HW00.AB0HWOPT == "A") /* option not equal to add*/

    return; /* Return to previous process*/
  end
  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(5); /* Indicate no data to display*/

    return; /* Return to previous process*/

  end

  if (ABWREC.ABWTSP != TA5REC.TA5TSQIX /* Desired page not current*/
   || AB0HW02.AB0HWIDX <= 0)           /* no data contained in ab0hw02 rec      x*/
    AB0H122(); /* Obtain temporary storage page*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX1 = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= AB0HW02.AB0HWIDX) /* Until end of lines*/

    set AB0HM001.AB0HMSEL[ABWIXM] normal; /* Display select flag*/
    set AB0HM001.AB0HMSCH[ABWIXM] skip; /* Display select flag*/
    set AB0HM001.AB0HMSCD[ABWIXM] normal; /* Display select flag*/
    set AB0HM001.AB0HMSYR[ABWIXM] normal; /* Display select flag*/
    set AB0HM001.AB0HMBMM[ABWIXM] normal; /* Display select flag*/
    set AB0HM001.AB0HMBYY[ABWIXM] normal; /* Display select flag*/
    set AB0HM001.AB0HMBLA[ABWIXM] normal; /* Display select flag*/
    AB0HM001.AB0HMSEL[ABWIXM] = " ";
    AB0H123();
    AB0HM001.AB0HMSCD[ABWIXM] = AB0HW02.XSECD[ABWIDX1];
    AB0HW00.AB0HWDT2 = AB0HW02.XSNYR[ABWIDX1];
    AB0HM001.AB0HMSYR[ABWIXM] = AB0HW00.AB0HWYY2;
    AB0HW00.AB0HWDT3 = AB0HW02.AB0HWBMO[ABWIDX1];
    AB0HM001.AB0HMBMM[ABWIXM] = AB0HW00.AB0HWMM3;
    AB0HM001.AB0HMBYY[ABWIXM] = AB0HW00.AB0HWYY3;
    AB0HM001.AB0HMBLA[ABWIXM] = AB0HW02.AB0HWBBF[ABWIDX1];

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

  end
  set AB0HM001.AB0HMSEL[1] cursor, normal; /* Display select flag*/

  while (ABWREC.ABWIXM <= AB0HW00.AB0HWSZM) /* Until end of lines*/
    AB0H124(); /* clear fields*/
    AB0H125(); /* protect fields*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end

end // end AB0H121

// Read temporary storage page
Function AB0H122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AB0HW02.AB0HWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AB0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0H122

// Get SCHEDULER CODE For Sched.
Function AB0H123()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A B 0 H S 0 4                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on a valid CICS SIGNON ID. In order to  ****/
   /* ***** use this process the APPLICATION must use the      ****/
   /* ***** following CSP records:                             ****/
   /* *****           AFWREC...AB, AF COMMON RECORD            ****/
   /* *****           PG1REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** To use this process move the SIGNON in question to ****/
   /* ***** XP1REC.XXXUSER and PERFORM XPAB010. This process   ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = AB0HW02.PG1SC4CD[ABWIXM];
                                   /* Indicate 'SCHED name'*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If CALL  successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      AB0HM001.AB0HMSCH[ABWIXM] = PG1REC.XXXUSER; /* scheduler name*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
        AB0HW00.AB0HWSCH = AB0HW02.PG1SC4CD[ABWIXM];
        AB0HM001.AB0HMSCH[ABWIXM] = AB0HW00.AB0HWSMG;
      end
    end
    return; /* Return to 'CALLING' Process*/
  end
  if (sysVar.errorCode == "00000000" /* If CALL successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* IF Resource not available*/
    converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
    TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
  else /* ELSE*/
    converseLib.validationFailed(10); /* Indicate 'DATA BASE BUSY' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Process name*/
  ABWREC.ABWPRCSN = "123"; /* Process number*/
  TA1REC.TA1LOC = "SELECT SCHEDULER  FROM PG1";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to previous process*/



end // end AB0H123

// clear unused fields
Function AB0H124()
  AB0HM001.AB0HMSEL[ABWIXM] = " ";
  AB0HM001.AB0HMSCH[ABWIXM] = " ";
  AB0HM001.AB0HMSCD[ABWIXM] = " ";
  AB0HM001.AB0HMSYR[ABWIXM] = "  ";
  AB0HM001.AB0HMBMM[ABWIXM] = "  ";
  AB0HM001.AB0HMBYY[ABWIXM] = "  ";
  AB0HM001.AB0HMBLA[ABWIXM] = "  ";
end // end AB0H124

// protect unused fields
Function AB0H125()
  set AB0HM001.AB0HMSEL[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMSCH[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMSCD[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMSYR[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMBMM[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMBYY[ABWIXM] skip, invisible; /* Display select flag*/
  set AB0HM001.AB0HMBLA[ABWIXM] skip, invisible; /* Display select flag*/
end // end AB0H125

// Check attention identifier
Function AB0H130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AB0HM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AB0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      AB0H111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = AB0HM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0HM001.CAITEM; /* Application data*/

      XSABS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AB0HM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0HM001"; /* Appl find code*/
    end

    AB0H111(); /* Purge any temporary storage*/

    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0H130

// Reset highlighted fields
Function AB0H140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (AB0HW00.AB0HWOPT == "A")
    set AB0HM001.AB0HMDEL skip, invisible; /* Display select flag*/
  end
  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= AB0HW00.AB0HWSZM) /* Until end of lines*/

    if (AB0HW00.AB0HWOPT == "A")
      set AB0HM001.AB0HMSEL[ABWIXM] skip, invisible; /* set default attrs*/
      set AB0HM001.AB0HMSCH[ABWIXM] skip;
      set AB0HM001.AB0HMSCD[ABWIXM] normal;
      set AB0HM001.AB0HMSYR[ABWIXM] normal;
      set AB0HM001.AB0HMBMM[ABWIXM] normal;
      set AB0HM001.AB0HMBYY[ABWIXM] normal;
      set AB0HM001.AB0HMBLA[ABWIXM] normal;
    else
      if (AB0HM001.AB0HMSCH[ABWIXM] != " ")
        set AB0HM001.AB0HMSEL[ABWIXM] normal; /* set default attrs*/
        set AB0HM001.AB0HMSCH[ABWIXM] skip;
        set AB0HM001.AB0HMSCD[ABWIXM] normal;
        set AB0HM001.AB0HMSYR[ABWIXM] normal;
        set AB0HM001.AB0HMBMM[ABWIXM] normal;
        set AB0HM001.AB0HMBYY[ABWIXM] normal;
        set AB0HM001.AB0HMBLA[ABWIXM] normal;
      else
        AB0H124(); /* clear fields*/
        AB0H125(); /* protect fields*/
      end
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end



  set AB0HM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0HM001.CAITEM initialAttributes; /* Commarea application data*/


end // end AB0H140

// Verify the entered data
Function AB0H150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AB0HM001.CAITEM > " ") /* Application data was entered*/

    set AB0HM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AB0H151(); /* Verify scroll request*/
  else
    AB0H152(); /* Verify selection criteria*/
    if (ABWREC.ABWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      AB0HW00.AB0HWNOU = 0; /* count of screen changes*/
      if (AB0HW00.AB0HWOPT == "A") /* if add option selected*/
        ABWREC.ABWIXM = AB0HW00.AB0HWSZM; /* Initialize line index*/
        while (ABWREC.ABWIXM > 0) /* Until end of lines*/
          AB0H153(); /* Verify any add data*/
          ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Increment line index*/

        end
      else
        ABWREC.ABWIXM = AB0HW02.AB0HWIDX; /* Initialize line index*/
        while (ABWREC.ABWIXM > 0) /* Until end of lines*/
          AB0H154(); /* Verify any change  data*/
          ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Increment line index*/

        end
      end
      if (AB0HW00.AB0HWNOU <= 0) /* no changes made*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end AB0H150

// Verify scroll request
Function AB0H151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end AB0H151

// Edit selection criteria
Function AB0H152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storage record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/

  if (converseVar.eventKey is pf13)
    if (AB0HW00.AB0HWOPT == "A")
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
      AB0HW00.AB0HWOPT = " ";
    else
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
      AB0HW00.AB0HWOPT = "A";
    end
    return; /* return to previous process*/
  end

   /* ====================== END OF PROCESS ======================*/

end // end AB0H152

// Verify any add data
Function AB0H153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (AB0HM001.AB0HMBLA[ABWIXM] == " "
   /**/
   /* --------------- Y2K OUT BEGIN*/
   /* ---------------*/
   /**/
   /* AND AB0HM001.AB0HMSYR(ABWIXM) EQ 0*/
   /**/
   /* --------------- Y2K OUT END*/
   /* ---------------*/
   /**/
   && AB0HM001.AB0HMSCD[ABWIXM] == "  "
   && AB0HM001.AB0HMBMM[ABWIXM] == 0
   /**/
   /* --------------- Y2K OUT BEGIN*/
   /* -------------*/
   /**/
   /* AND AB0HM001.AB0HMBYY(ABWIXM) EQ 0*/
   /**/
   /* --------------- Y2K OUT END*/
   /* ---------------*/
   /**/
   && AB0HM001.AB0HMSCH[ABWIXM] == " ")
    return;
  end
  AB0HW00.AB0HWNOU = AB0HW00.AB0HWNOU + 1;
   /* -------------------------------------------*/
   /* -- validate balance against BLA flag*/
   /* -------------------------------------------*/
  if (AB0HM001.AB0HMBLA[ABWIXM] == "Y"
   || AB0HM001.AB0HMBLA[ABWIXM] == "N")
  else
    set AB0HM001.AB0HMBLA[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(08); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "154 "; /* Process number*/
  end
   /* -------------------------------------------*/
   /* -- validate buy month and year*/
   /* -- validate season code and year*/
   /* -------------------------------------------*/
  XP1REC.XP1CBYMM = AB0HM001.AB0HMBMM[ABWIXM];
  XP1REC.XP1CBYYY = AB0HM001.AB0HMBYY[ABWIXM];
  XP1REC.XSECD = AB0HM001.AB0HMSCD[ABWIXM];
  XP1REC.XP1XSNYY = AB0HM001.AB0HMSYR[ABWIXM];
  XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
  XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;

  AB0H155(); /* Validate Season/year/buy month*/

   /* -------------------------------------------*/
   /* -- validate scheduler*/
   /* -------------------------------------------*/
  XP1REC.XXXUSER = AB0HM001.AB0HMSCH[ABWIXM];
  XP1REC.PG1SC4CD = " ";

  /*  */
  /* --------------- Y2K OUT BEGIN ----------------*/
  /*  */
  /* This Process AB0D156 and AB0D157 are no longer being called*/
  /* from application AB0D. So they are renamed as AB0H156 and AB0H157*/
  /* respectively.*/
  /* Running the 'Where used' utility ( OPTION A.CS.4 ) It has been found*/
  /* that they are being called only from AB0H153.*/
  /*  */
  /* PERFORM AB0D156;                  /* Validate Scheduler cd*/
  /*  */
  /* --------------- Y2K OUT END ---------------*/
  /*  */
  /*  */
  /* --------------- Y2K IN BEGIN --------------*/
  /*  */
  AB0H156(); /* Validate Scheduler cd*/
  /*  */
  /* --------------- Y2K IN END ----------------*/
  /*  */

   /* -------------------------------------------*/
   /* -- validate existing scheduler*/
   /* -------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* Indicate error msg*/
  /*  */
  /* --------------- Y2K OUT BEGIN ----------------*/
  /*  */
  /* This Process AB0D156 and AB0D157 are no longer being called*/
  /* from application AB0D. So they are renamed as AB0H156 and AB0H157*/
  /* respectively.*/
  /* Running the 'Where used' utility ( OPTION A.CS.4 ) It has been found*/
  /* that they are being called only from AB0H153.*/
  /*  */
  /* PERFORM AB0D157;                /* Validate Scheduler does not exist*/
  /*  */
  /* --------------- Y2K OUT END  ----------------*/
  /*  */
  /*  */
  /* --------------- Y2K IN  BEGIN ----------------*/
  /*  */
  /*  */
    AB0H157(); /* Validate Scheduler does not exist*/
  /*  */
  /* --------------- Y2K IN  END  ----------------*/
  /*  */
  end
end // end AB0H153

// verify any changed data
Function AB0H154()

  ABWREC.ABWIDX1 = ABWREC.ABWIXM;
  if (AB0HM001.AB0HMSEL[ABWIXM] == "D")
    AB0HW02.AB0HWATT[ABWIDX1] = "D";
    AB0HW00.AB0HWNOU = AB0HWNOU + 1;
    return; /* return to previous process*/
  end
  if (AB0HM001.AB0HMSEL[ABWIXM] != " ")
    set AB0HM001.AB0HMSEL[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(01); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "154 "; /* Process number*/
    return; /* return to previous process*/
  end

  AB0HW00.AB0HWDT2 = AB0HW02.XSNYR[ABWIDX1];
  AB0HW00.AB0HWDT3 = AB0HW02.AB0HWBMO[ABWIDX1];

  if (AB0HW02.XSECD[ABWIDX1] == AB0HM001.AB0HMSCD[ABWIXM]
   && AB0HW00.AB0HWYY2 == AB0HM001.AB0HMSYR[ABWIXM]
   && AB0HW00.AB0HWMM3 == AB0HM001.AB0HMBMM[ABWIXM]
   && AB0HW00.AB0HWYY3 == AB0HM001.AB0HMBYY[ABWIXM]
   && AB0HW02.AB0HWBBF[ABWIDX1] == AB0HM001.AB0HMBLA[ABWIXM])
    return; /* return to previous process*/
  end
  AB0HW02.AB0HWATT[ABWIDX1] = "C";
  AB0HW00.AB0HWNOU = AB0HWNOU + 1;
   /* -------------------------------------------*/
   /* -- validate balance against BLA flag*/
   /* -------------------------------------------*/
  if (AB0HM001.AB0HMBLA[ABWIXM] == "Y"
   || AB0HM001.AB0HMBLA[ABWIXM] == "N")
  else
    set AB0HM001.AB0HMBLA[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(08); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "154 "; /* Process number*/
  end
   /* -------------------------------------------*/
   /* -- validate buy month and year*/
   /* -- validate season code and year*/
   /* -------------------------------------------*/
  XP1REC.XP1CBYMM = AB0HM001.AB0HMBMM[ABWIXM];
  XP1REC.XP1CBYYY = AB0HM001.AB0HMBYY[ABWIXM];
  XP1REC.XSECD = AB0HM001.AB0HMSCD[ABWIXM];
  XP1REC.XP1XSNYY = AB0HM001.AB0HMSYR[ABWIXM];
  XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
  XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  /*  */
  /* ------------------ y2k in begin --------------------*/
  /*  */
  if (XP1REC.XP1CBYYY > 60)
    XP1REC.XP1BUYCC = 19;
  else
    XP1REC.XP1BUYCC = 20;
  end
  /*  */
  /* ------------------ y2k in end ----------------------*/
  /*  */
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  AB0H155(); /* Validate Season/year/buy month*/
end // end AB0H154

// edit XSECD/XSNTBL/BUY TABLE.
Function AB0H155()

  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  XP1REC.XP1MNO = 0; /* Indicate error message*/


  XSABSSN(); /* EDIT XSNYR/XSECD*/

   /* ***** if no errors with XSECD & XSNYR ******/
  if (XP1REC.XP1ERRFL == " ")
    /* ***** reformat AB3BUYMO to a non-binary field ******/
    XP1REC.XP1BUYMO = XP1REC.AB3BUYMO;

    if (XP1REC.XP1BUYMM >= 1 /* IF month > January*/
     && XP1REC.XP1BUYMM <= 12) /* AND month < December*/
      /* NEXT SENTENCE              ;              Date is OKAY !*/
    else /* ELSE(Date is invalid)*/
      XP1REC.XP1ERRFL = 1; /* Invalid dt code*/
    end /* End of "IF" statement*/
  end /* END of "IF" statement*/

   /* ***** if error was with XSECD ******/
  if (XP1REC.XP1ERRFL == "3") /* Invalid season code*/

    XP1REC.XSECD = " "; /* Space out save area*/
    set AB0HM001.AB0HMSCD[ABWIXM] cursor, bold; /* Highlight field*/
    /* ***** if code was inactive ******/
    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
    else
      XP1REC.XP1MNO = 16; /* Indicate error message*/
    end
    ABWREC.ABWPRCSN = "53A "; /* Process number*/

  else

    /* ***** if error was with XSNYR ******/
    if (XP1REC.XP1ERRFL == "2") /* Invalid season-year*/

      XP1REC.XSNYR = 0; /* Space out save area*/
      XP1REC.XP1XSNYR = 0; /* Space out save area*/
      set AB0HM001.AB0HMSYR[ABWIXM] bold; /* Highlight field*/
      set AB0HM001.AB0HMSCD[ABWIXM] cursor, bold; /* Highlight field*/
      if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
        XP1REC.XP1MNO = 35; /* Indicate error message*/
      else
        XP1REC.XP1MNO = 26; /* Indicate error message*/
      end
      ABWREC.ABWPRCSN = "53A "; /* Process number*/

    else

      if (XP1REC.XP1ERRFL == "1") /* Invalid BUY-MONTH*/

        XP1REC.AB3BUYMO = 0; /* Space out save area*/
        XP1REC.XP1BUYMO = 0; /* Space out save area*/
        set AB0HM001.AB0HMBMM[ABWIXM] cursor, bold; /* Highlight field*/
        set AB0HM001.AB0HMBYY[ABWIXM] bold; /* Highlight field*/
        if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/
          XP1REC.XP1MNO = 35; /* Indicate error message*/
        else
          XP1REC.XP1MNO = 34; /* Indicate error message*/
        end
        ABWREC.ABWPRCSN = "53A "; /* Process number*/

      end
    end
  end

  if (XP1REC.XP1MNO > 0)
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Indicate error message*/
  else
    AB0HW02.XSNYR[ABWIXM] = XP1REC.XP1XSNYR;
  end

end // end AB0H155

// edit scheduler name
Function AB0H156()
  /* ----------- Y2K COMMENTS BEGIN ----*/
  /*  */
  /* This process is copied from AB0D156. Since it is not being called*/
  /* from anywhere else other than AB0H153, so its name is changed from*/
  /* AB0D156 to AB0H156. by NGANGO. No modification is done.*/
  /*  */
  /* ----------- Y2K COMMENTS END ------*/

  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0HM001.AB0HMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AB0HM001.AB0HMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/
        AB0HW02.PG1SC4CD[ABWIXM] = PG1REC.PG1SC4CD;

      end

    end

  end



end // end AB0H156

// find duplicate scheduler on db
Function AB0H157()
  /*  */
  /* --------- Y2K COMMENTS BEGIN ---------------------*/
  /*  */
  /* This Process is copied from AB0D157. This is not being called from*/
  /* anywhere else other than AB0H153. So it is renamed from AB0D157 to*/
  /* AB0H157.*/
  /*  */
  /* --------- Y2K COMMENTS END -----------------------*/
  /*  */

  set AB3REC empty;

  AB3REC.PG1SC4CD = AB0HW02.PG1SC4CD[ABWIXM];
  AB3REC.ZZZCHGCT = AB0HW02.ZZZCHGCT[ABWIXM];

   /* ------------------------------------------------------------*/
   /* find row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* --------- y2k out begin ------------------*/
  /*  */
  /* CALL IO3600 'S ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* --------- y2k out end --------------------*/
  /*  */
  /*  */
  /* --------- y2k in  begin ------------------*/
  /*  */
  try
    call "VSCTL002" ("S ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* --------- y2k in  end --------------------*/
  /*  */
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      converseLib.validationFailed(15); /* duplicate exists*/
      set AB0HM001.AB0HMSCH[ABWIXM] cursor, bold;
      return; /* return*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not on database*/
        return; /* return*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "53C "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0H157

// Process valid input request
Function AB0H160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end
  if (converseVar.eventKey is pf13) /* Scroll forward requested*/

    return; /* Return to previous process*/

  end
  if (AB0HW00.AB0HWOPT == "A") /* if add option selected*/
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AB0HW00.AB0HWSZM) /* Until end of lines*/
      if (AB0HM001.AB0HMSCH[ABWIXM] != " ")
        ABWREC.ABWNMO = 045;
        AB0H161(); /* Update add data*/
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end
    AB0HW00.AB0HWOPT = " ";
    ABWREC.ABWSWR = "Y";
  else
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AB0HW02.AB0HWIDX) /* Until end of lines*/
      if (AB0HW02.AB0HWATT[ABWIXM] == "D")
        AB0H162(); /* Delete  data*/
        ABWREC.ABWNMO = 045;
      else
        if (AB0HW02.AB0HWATT[ABWIXM] == "C")
          AB0H163(); /* Update  change  data*/
          ABWREC.ABWNMO = 045;
        end
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end
    ABWREC.ABWSWR = "Y";
  end


end // end AB0H160

// Add data to database
Function AB0H161()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AB3REC empty;

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB3REC.XSECD = AB0HM001.AB0HMSCD[ABWIXM];
  AB3REC.XSNYR = AB0HW02.XSNYR[ABWIXM];
  AB3REC.PG1SC4CD = AB0HW02.PG1SC4CD[ABWIXM];
  XP1REC.XP1CBYMM = AB0HM001.AB0HMBMM[ABWIXM];
  XP1REC.XP1CBYYY = AB0HM001.AB0HMBYY[ABWIXM];
  XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
  XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  /*  */
  /* ---------------- y2k in begin ---------------------*/
  /*  */
  if (XP1REC.XP1CBYYY > 60)
    XP1REC.XP1BUYCC = 19;
  else
    XP1REC.XP1BUYCC = 20;
  end
  /*  */
  /* ---------------- y2k in end -----------------------*/
  /*  */
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  AB3REC.AB3BUYMO = XP1REC.AB3BUYMO;
  AB3REC.AB3BUYST = " ";
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB3REC.AB3BYSDT = XX0XW01.XX0XWDAT;
  AB3REC.AB3BALBF = AB0HM001.AB0HMBLA[ABWIXM];

   /* ------------------------------------------------------------*/
   /* Add new row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ---------------- y2k out begin --------------------*/
  /*  */
  /* CALL IO3600 'A ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ---------------- y2k out end ----------------------*/
  /*  */
  /*  */
  /* ---------------- y2k in begin --------------------*/
  /*  */
  try
    call "VSCTL002" ("A ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* ---------------- y2k in end ----------------------*/
  /*  */
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0H161

// Delete data from database
Function AB0H162()
  set AB3REC empty;

  AB3REC.PG1SC4CD = AB0HW02.PG1SC4CD[ABWIXM];
  AB3REC.ZZZCHGCT = AB0HW02.ZZZCHGCT[ABWIXM];

   /* ------------------------------------------------------------*/
   /* delete row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* --------------- y2k out begin --------------------*/
  /*  */
  /* CALL IO3600 'D ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* --------------- y2k out end ----------------------*/
  /*  */
  /*  */
  /* --------------- y2k in  begin --------------------*/
  /*  */
  try
    call "VSCTL002" ("D ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* --------------- y2k in  end ----------------------*/
  /*  */
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0H162

// Change data on database
Function AB0H163()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AB3REC empty;

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AB3REC.ZZZCHGCT = AB0HW02.ZZZCHGCT[ABWIXM];
  AB3REC.XSECD = AB0HM001.AB0HMSCD[ABWIXM];
  AB3REC.XSNYR = AB0HW02.XSNYR[ABWIXM];
  XP1REC.XP1CBYMM = AB0HM001.AB0HMBMM[ABWIXM];
  XP1REC.XP1CBYYY = AB0HM001.AB0HMBYY[ABWIXM];
  XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
  XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
  /*  */
  /* ----------------- y2k in begin -----------------*/
  /*  */
  if (XP1REC.XP1CBYYY > 60)
    XP1REC.XP1BUYCC = 19;
  else
    XP1REC.XP1BUYCC = 20;
  end
  /*  */
  /* ----------------- y2k in end -------------------*/
  /*  */
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  AB3REC.AB3BUYMO = XP1REC.AB3BUYMO;
  AB3REC.AB3BUYST = AB0HW02.AB0HWBST[ABWIXM];
  AB3REC.PG1SC4CD = AB0HW02.PG1SC4CD[ABWIXM];
  AB3REC.AB3BYSDT = XX0XW01.XX0XWDAT;
  AB3REC.AB3BALBF = AB0HM001.AB0HMBLA[ABWIXM];

   /* ------------------------------------------------------------*/
   /* update row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ----------------- y2k out begin -----------------*/
  /*  */
  /* CALL IO3600 'U ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY;*/
  /*  */
  /* ----------------- y2k out end -------------------*/
  /*  */
  /*  */
  /* ----------------- y2k in  begin -----------------*/
  /*  */
  try
    call "VSCTL002" ("U ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* ----------------- y2k in  end -------------------*/
  /*  */
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0HM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AB0H163

//*** RECORD=AB0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AB0HW00 type basicRecord
  10 AB0HWACT AB0HWACT ; 
  10 AB0HWBEG AB0HWBEG ; 
  10 AB0HWMAX AB0HWMAX ; 
  10 AB0HWMNO AB0HWMNO ; 
  10 AB0HWNOU AB0HWNOU ; 
  10 AB0HWOPT AB0HWOPT ; 
  10 AB0HWNXT AB0HWNXT ; 
  10 AB0HWSZA AB0HWSZA ; 
  10 AB0HWSZM AB0HWSZM ; 
  10 AB0HWDT1 AB0HWDT1 ; 
    15 AB0HWCC1 AB0HWCC1 ; 
    15 AB0HWYY1 AB0HWYY1 ; 
    15 AB0HWMM1 AB0HWMM1 ; 
  10 AB0HWDT2 AB0HWDT2 ; 
    15 AB0HWCC2 AB0HWCC2 ; 
    15 AB0HWYY2 AB0HWYY2 ; 
  10 AB0HWDT3 AB0HWDT3 ; 
    15 AB0HWYY3 AB0HWYY3 ; 
    15 AB0HWMM3 AB0HWMM3 ; 
  10 AB0HWPN AB0HWPN ; 
  10 AB0HWSA AB0HWSA ; 
    15 AB0HWSS AB0HWSS ; 
    15 AB0HWYR AB0HWYR ; 
  10 AB0HWXSY AB0HWXSY ; 
  10 AB0HW1ST AB0HW1ST ; 
  10 AB0HWSMG AB0HWSMG ; 
    15 AB0HWAS1 AB0HWAS1 ; 
    15 AB0HWSCH AB0HWSCH ; 
    15 AB0HWAS2 AB0HWAS2 ; 
end // end AB0HW00

//*** RECORD=AB0HW02 ****
// Temporary storage record for AB0H - Scheduler Buy Control
// ***********************
Record AB0HW02 type basicRecord
  5 * char(272) ; 
    10 AB0HWLEN AB0HWLEN ; 
    10 AB0HWIDX AB0HWIDX ; 
    10 * char(19) [14] ; 
      15 AB0HWKEY AB0HWKEY ; 
        20 XSECD XSECD ; 
        20 XSNYR XSNYR ; 
        20 PG1SC4CD PG1SC4CD ; 
        20 AB0HWBMO AB0HWBMO ; 
      15 AB0HWBST AB0HWBST ; 
      15 AB0HWBDT AB0HWBDT ; 
      15 AB0HWBBF AB0HWBBF ; 
      15 AB0HWATT AB0HWATT ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AB0HW02

// first time thru indicator
DataItem AB0HW1ST char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// number of active snapshots
DataItem AB0HWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// asterisks
DataItem AB0HWAS1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// asterisks
DataItem AB0HWAS2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Action to be taken
DataItem AB0HWATT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Balance Against BLA Flag
DataItem AB0HWBBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy Status Date
DataItem AB0HWBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning member in array
DataItem AB0HWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Buy Month, Format CCYYMM
DataItem AB0HWBMO int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Buy Status
DataItem AB0HWBST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem AB0HWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working century
DataItem AB0HWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date - buy stat date
DataItem AB0HWDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date  - sesn yr range
DataItem AB0HWDT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date - buy month
DataItem AB0HWDT3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0HWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key
DataItem AB0HWKEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem AB0HWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AB0HWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// working month
DataItem AB0HWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem AB0HWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message number
DataItem AB0HWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no changes made
DataItem AB0HWNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AB0HWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// option requested
DataItem AB0HWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AB0HWPN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB0HWSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pg1sc4cd
DataItem AB0HWSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler error msg
DataItem AB0HWSMG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0HWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AB0HWSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AB0HWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// xsnyr work area
DataItem AB0HWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0HWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0HWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0HWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AB0HWYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

