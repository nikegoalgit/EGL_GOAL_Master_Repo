package ab0l;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AB0L ****
// This application allows the user to submit a batch job which
// will create the Buy Plan Table.
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/23/89  JRAMOS  New application.
//          07/16/90  Jwood   removed ut2rec from t&r list
//          04/22/91  trober  add month to map
//          05/05/93  WDRAKE  CHANGED MAP HEADING
//          12/29/97  nfield  Y2K compliance - change to
//                            AB0LM001.XSNYr
// *********************
Program AB0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0LW00 AB0LW00; // record
  AB0LW01 AB0LW01; // record
  AB3REC AB3REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB0LT02 {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AB0LM.AB0LM001,  // forms
      AB0LM.TA0PM001, 
      AB0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/

    set AB0LM001 initial; /* Initialize map output area*/
    set AB0LW01 empty; /* Initialize working storage*/
    set ABPREC empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AB0L"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/

                     /* (Set map item values)*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AB0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

                     /* (Process COMMAREA items:)*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AB0LM001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AB0LM001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end

                     /* (Process passed items:)*/

    AB0LM001.XSECD = XP1REC.XSECD; /* Passed data to map*/
    AB0LM001.XSNYR = XP1REC.XSNYR; /* Passed data to map*/
    XP1REC.XSECD = " ";
    XP1REC.XSNYR = 00;
    XP1REC.XP1BUYMM = 00;


    goto AB0L001; /* Converse the main process*/


    AB0L001: AB0L001();

    goto AB0L001; /* Converse the main process*/

  end // end main
end // end AB0L

// Application main process
Function AB0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* -- Display the first (and only) map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/

  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/


  converseLib.clearScreen();
  
  AB0L100(); /* Display map*/


end // end AB0L001

// Driver process for application
Function AB0L100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[1] == "Y"
   && COMMAREA.CACLVL[2] == "Y")
    set AB0LM001.XSECD initialAttributes;
    set AB0LM001.XSNYR initialAttributes;
    AB0L110(); /* Format and display the map*/
    AB0L120(); /* Check attention identifier*/
    AB0L130(); /* Reset fields to normal intensity*/
    AB0L140(); /* Verify the data that was entered*/
    AB0L150(); /* Process valid input request*/
  else
    set AB0LM001.XSECD cursor, protect;
    set AB0LM001.XSNYR protect;
    XP1REC.XP1MNO = 96;
    AB0L110(); /* Format and display the map*/
    AB0L120(); /* Check attention identifier*/
  end

end // end AB0L100

// Format and display the map
Function AB0L110()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/


  if (XP1REC.XP1MNO != 0) /* Error message to display*/
    set AB0LM001 alarm; /* Indicate sound alarm*/
  end


  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move message no. for display*/

  XP1REC.XP1MNO = 0; /* Reset work message area*/


  converse AB0LM001 ;

  ABWREC.ABWFIRST = "N"; /* Set first time switch off*/


end // end AB0L110

// Check attention identifier
Function AB0L120()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    AB0LM001.XSECD = XP1REC.XSECD; /* Restore map field*/
    AB0LM001.XSNYR = XP1REC.XSNYR; /* Restore map field*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (AB0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0LM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0LM001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end

    set AB0LM001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB0LM001.CAITEM > " ") /* Application data was entered*/
    set AB0LM001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0LM001"; /* Appl find code*/
    end

    XSABS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/

    if (AB0LM001.XSECD == "?") /* Check xsecd for pop-up*/
      set AB0LM001.XSECD cursor; /* Position cursor*/
    end

    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end
end // end AB0L120

// Reset highlighted fields
Function AB0L130()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set AB0LM001.XSECD normal; /* Reset season cd*/
  set AB0LM001.XSNYR normal; /* Reset season yr*/

  set AB0LM001.CATOAP initialAttributes; /* TO application*/
  set AB0LM001.CAITEM initialAttributes; /* Application data*/


end // end AB0L130

// Verify the entered data
Function AB0L140()
   /* *=====================**/
   /* *  Edit entered data  **/
   /* *=====================**/

  AB0L143(); /* Edit season cd/yr*/
  AB0L141(); /* Edit season yr*/
  AB0L142(); /* Edit season cd/yr*/
  AB0L144(); /* Edit sesn cd yr combination*/

end // end AB0L140

// Edit season year
Function AB0L141()

  if (AB0LM001.XSNYR > 0)
    AB0LW01.AB0LWXSY = 0; /* init work*/
    XP1REC.XSNYR = AB0LM001.XSNYR;
    AB0LW01.AB0LWXSY = AB0LM001.XSNYR; /* move to work area*/

    if (XP1REC.XSNYR > 75)
      AB0LW01.AB0LWXSY = AB0LW01.AB0LWXSY + 1900;
    else
      AB0LW01.AB0LWXSY = AB0LW01.AB0LWXSY + 2000;
    end

    ABWREC.ABWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
    while (ABWREC.ABWIDX5 != 9999) /* end of search condition*/
      if (YSNTBL.XSNYR[ABWIDX5] == AB0LW01.AB0LWXSY
       && YSNTBL.XGPCD[ABWIDX5] == "03"
       && YSNTBL.XDR-PROD-REG-CD[ABWIDX5] == "01")
        XP1REC.XXXSTAT = YSNTBL.XXXSTAT[ABWIDX5]; /* Move status*/
        return; /* return*/
      else
        if (YSNTBL.XGPCD[ABWIDX5] != "99")
          ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1;
        else
          ABWREC.ABWIDX5 = 9999; /* END OF TABLE*/
        end
      end
    end
    ABWREC.ABWPRCSN = "141 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XSNYR = 0; /* Reset working storage*/
    set AB0LM001.XSNYR cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 26; /* indicate error message*/
  else
    ABWREC.ABWPRCSN = "141 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AB0LM001.XSNYR = AB0LW01.AB0LWXSY; /* Restore map*/
    XP1REC.XSNYR = 0; /* Reset working storage*/
    set AB0LM001.XSNYR cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 26; /* indicate error message*/
  end

end // end AB0L141

// Edit season cd/yr
Function AB0L142()

  XP1REC.XSECD = AB0LM001.XSECD; /* save to working storage*/
  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/
  XSABSSE(); /* retrieve season code*/

  if (XP1REC.XP1ERRFL == "1" /* Error flag on*/
   || XP1REC.XXXSTAT != "A") /* or XSECD status not active*/
    ABWREC.ABWPRCSN = "142 "; /* Process number*/
    AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XSECD = " "; /* Reset working storage*/
    XP1REC.XSNYR = 0; /* Reset working storage*/
    set AB0LM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
  else /* XSECD is valid*/
    AB0LM001.XSECD = XP1REC.XSECD;
  end

end // end AB0L142

// Edit month
Function AB0L143()

  if (AB0LM001.XSECD == "?")
    AB0L142();
  end

end // end AB0L143

// Edit sesn cd yr combination
Function AB0L144()

  AB0LW01.AB0LWXSS = AB0LM001.XSECD;
  AB0LW01.AB0LWXYR = 0;
  AB0LW01.AB0LWXYR = AB0LM001.XSNYR;


  ABWREC.ABWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (ABWREC.ABWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[ABWIDX5] == AB0LW01.AB0LWXSA
     && YSNTBL.XGPCD[ABWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[ABWIDX5] == "01")
      AB0LW00.AB0LW-SESN-BEG-DT = YSNTBL.XSNFOBDT[ABWIDX5];
      AB0LW00.AB0LW-SESN-END-DT = YSNTBL.XSNFOXDT[ABWIDX5];
      return;
    else
      if (YSNTBL.XGPCD[ABWIDX5] != "99")
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1;
      else
        ABWREC.ABWIDX5 = 9999; /* END OF TABLE*/
        XP1REC.XSECD = " "; /* Reset working storage*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        XP1REC.XP1BUYMM = 0; /* Reset working storage*/
        ABWREC.ABWPRCSN = "144 "; /* Process number*/
        AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
        set AB0LM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 94; /* indicate error message*/
        return;
      end
    end
  end


end // end AB0L144

// Process valid input request
Function AB0L150()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 24) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  AB0L153(); /* determine cics region*/
  set TA6REC empty; /* Subroutine work area*/

  AB0LW01.AB0LWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

  if (TA3REC.TA3RGNID == "03")
    AB0LW01.AB0LWIXT = 1;
  else
    if ("/*EOF" in AB0LT02.TARJCL)
      AB0LW01.AB0LWIXT = sysVar.arrayIndex;
      AB0LW01.AB0LWIXT = AB0LW01.AB0LWIXT + 1;
    else
      AB0LW01.AB0LWIXT = 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AB0LW01.AB0LWIXT > 0) /* Until end of table*/

    if (AB0LT02.TARTYPE[AB0LWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      set ABPREC empty; /* Reset parameters work area*/

      ABPREC.XSECD = XP1REC.XSECD; /* Season cd*/
      ABPREC.ABPXSNYR = 0;
      ABPREC.ABPXSNYR = ABPREC.ABPXSNYR + 1900;
      ABPREC.ABPXSNYR = ABPREC.ABPXSNYR + XP1REC.XSNYR; /* Season yr*/
      ABPREC.ABPBUYMO = 0;
      ABPREC.ABPBUYMO = ABPREC.ABPBUYMO + XP1REC.XP1BUYMO; /* ab_buy_mo*/

      AB0LW01.TARJCL = ABPREC.TARJCL; /* Parameter variables*/

      AB0LT02.TARJCL[AB0LWIXT] = AB0LW01.TARJCL;

    end


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AB0LT02.TARJCL[AB0LWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AB0LT02.TARTYPE[AB0LWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AB0LT02.TARJCL[AB0LWIXT] == "/*EOF") /* End of table*/
      AB0LW01.AB0LWIXT = 0; /* Indicate end of table*/
    else
      AB0LW01.AB0LWIXT = AB0LW01.AB0LWIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AB0L151(); /* Submit the JCL*/


end // end AB0L150

// Submit Job/Select Printer
Function AB0L151()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send eoj back to user*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "151 "; /* Process number*/
  AB0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AB0L151

// Determine cics region
Function AB0L153()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    ABWREC.ABWPRCSN = "153"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = ABWREC.ABWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end

  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    ABWREC.ABWPRCSN = "153"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = ABWREC.ABWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/


  end



end // end AB0L153

Record AB0LW00 type basicRecord
  10 AB0LW-SESN-BEG-DT AB0LW-SESN-BEG-DT ; 
    15 * char(4) ; 
    15 AB0LW-SESN-BEG-MO AB0LW-SESN-BEG-MO ; 
    15 * char(2) ; 
  10 AB0LW-SESN-END-DT AB0LW-SESN-END-DT ; 
    15 * char(4) ; 
    15 AB0LW-SESN-END-MO AB0LW-SESN-END-MO ; 
    15 * char(2) ; 
  10 AB0LW-VALID-MO AB0LW-VALID-MO [12] ; 
  10 AB0LW-SESN-BEG-MM AB0LW-SESN-BEG-MM ; 
end // end AB0LW00

//*** RECORD=AB0LW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB0LW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AB0LWSWS AB0LWSWS ; 
  10 AB0LWXSA AB0LWXSA ; 
    15 AB0LWXSS AB0LWXSS ; 
    15 AB0LWXYR AB0LWXYR ; 
  10 AB0LWXMM AB0LWXMM ; 
  10 AB0LWIXT AB0LWIXT ; 
  10 AB0LWXSY AB0LWXSY ; 
end // end AB0LW01

// factory order beg date
DataItem AB0LW-SESN-BEG-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory order beg mo (1)
DataItem AB0LW-SESN-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory order beg mo
DataItem AB0LW-SESN-BEG-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory order end date
DataItem AB0LW-SESN-END-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory order end mo
DataItem AB0LW-SESN-END-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid month array
DataItem AB0LW-VALID-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL table index
DataItem AB0LWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted switch
DataItem AB0LWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work buy month
DataItem AB0LWXMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk abrv
DataItem AB0LWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0LWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB0LWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0LWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

