package ab0q;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import pt.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=AB0Q ****
// This application allows the user to maintain the value of
// Actual Buy quantities per valid factory in the Apparel Buy
// Color database (DABUY.VBCOLR01).
// 
// The user may change the value of the quantity/ies of each
// style/color/factory which meet the selection criteria.
// An Apparel Scheduler will use this application to adjust the
// quantity of each factory for each color w/in a style meeting
// selection criteria. This application will use a combination
// of stored internal keys for styles which meet the selection
// criteria, and the TSQ which will contain all the color/sizes
// for a given style. The user may PF7 or PF8 to page through
// all the colors for a style (if multiple pages for a single
// style) or PF19 to go backward to the previous style or PF20
// to go forward to the next style. He may also use PF10 to
// shift left or PF11 to shift right to view all the factories
// for the color.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view and/or update the rows that were
// selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/10/90   JRAMOS   New application.
// 08/20/90   cross    chg to display data upon init entry
// 12/16/92   RCHINI   ab#27.  add totals to screen for the
//                     Long/Short qtys and the Bottom Line
//                     Availability qtys.  Only the negative
//                     qtys will be accumulated and displayed.
// 09/17/93   SWHITA   ADDED HELP SCREEN LINK TO AB0Q130.
// 04-21-94   LREIN    Fixed to get owner grp '**' from AFCLR
// 11-14-95   kj       added whse 51 processing.
// 02-22-96   KJblank tshirt L&S
// 07-08-96   KJ       VAFCLR02 - CHANGES
// 11-11-97   aabra1   fix ab0qs18
// Y2KFIX   01/29/98  KSUMME  Y2K MODIFICATIONS MADE TO:
//     Y2K AND TABLE CHANGES: AB0QW01, AB0QW03, AB0QW04,
//         XPAB001 (FLOW), AB0Q115, AB0Q116, AB0Q117, AB0QM001
//         AB0QS21, AB0QS22, AB0QS23, AB0QS09, AB0QS18,
//         AB0QS25, AB0QS19, AB0QS20
//     GLOBAL CHANGES:  ABWREC, AB3REC, AB4REC, VBCOLR02,
//                      AFEREC, XP1REC, XPAB020
// Y2KFIX   02/12/98  TTHAN1  Y2K SPECIAL FIX FOR AB0QS18
// 08-13-98   craymo  added whse 27 processing.
// *********************
Program AB0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB0QW01 AB0QW01; // record
  AB0QW02 AB0QW02; // record
  AB0QW03 AB0QW03; // record
  AB0QW04 AB0QW04; // record
  AB1REC AB1REC; // record
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  ABWREC ABWREC; // record
  AFEREC AFEREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAFCLR02 VAFCLR02; // record
  VBCOLR02 VBCOLR02; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XSUTBL; // table
  use AB0QM.AB0QM001,  // forms
      AB0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AB0QW01 empty; /* Initialize working storage*/
    set AB0QW02 empty; /* Initialize working storage*/
    set AB0QW03 empty; /* Initialize working storage*/
    set AB0QW04 empty; /* Initialize working storage*/
    set AB2REC empty; /* Initialize working storage*/
    set AB3REC empty; /* Initialize working storage*/
    set AB4REC empty; /* Initialize working storage*/
    set VBCOLR02 empty; /* Initialize working storage*/
    set VAFCLR02 empty; /* Initialize working storage*/
    set AFEREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/

    set AB0QM001 initial; /* Initialize map output area*/


                   /* (Define Map Environment)*/

    ABWREC.ABWAPPL = "AB0Q"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "M001"; /* Indicate map one*/
    ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to abwrec*/


                    /* (Set Map Item Values)*/

    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/
    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AB0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

    ABWREC.ABWSWR = "Y"; /* Obtain initial data*/
    AB0QW01.AB0QWSTS = "Y"; /* select new style*/

                    /* (Set Constants)*/

    AB0QW01.AB0QWSLM = +1500; /* Set 1500 as max style array limit*/
    ABWREC.ABWMPMAX = +10; /* Max logical lines per map*/
    AB0QW01.AB0QWFSZ = +20; /* Max no. of factories*/

              /* (Process Passed Items from XP1REC)*/

    AB0QM001.PG1SC4CD = XP1REC.XXXUSER; /* Userid*/
    AB0QM001.XSECD = XP1REC.XSECD; /* Season cd*/
    AB0QM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
    AB0QM001.AB3BUYMO = XP1REC.XP1CBYMO; /* Character Buy/Mo*/
    AB0QM001.XGACD = XP1REC.XGACD; /* Gender/Age cd*/
    AB0QM001.XGAABRV = XP1REC.XGAABRV; /* Gender/Age abrv*/
    AB0QM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
    AB0QM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
    AB0QM001.XPCCD = XP1REC.XPCCD; /* Category cd*/
    AB0QM001.XPCABRV = XP1REC.XPCABRV; /* Category abrv*/
    AB0QM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
    AB0QM001.XSUABRV = XP1REC.XSUABRV; /* Silhouette abrv*/

           /* (Calculate for Temporary Storage Size)*/

     /* --------------------Y2K OUT BEGIN-------------------------*/
     /*  */
     /* ABWREC.ABWTSL = ABWREC.ABWMPMAX * 180;/* Max lines * TSQ data length*/
     /*  */
     /* --------------------Y2K OUT END---------------------------*/
     /* --------------------Y2K IN BEGIN-------------------------*/
     /*  */
    ABWREC.ABWTSL = ABWREC.ABWMPMAX * 182; /* Max lines * TSQ data length*/
     /*  */
     /* --------------------Y2K IN END---------------------------*/
    ABWREC.ABWTSL = ABWREC.ABWTSL + 4; /* Add 4 bytes for TSQ info*/


           /* (Set Protect,Dark all Map Dtl Items)*/

    set AB0QM001.AB0QMLFI skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMRTI skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD1 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD2 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD3 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD4 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD5 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD6 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD7 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMHD8 skip, invisible; /* Protect,darken hdgs*/
  
    set AB0QM001.AB0QM-BLAHD1 skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QM-BLAHD2 skip, invisible; /* Protect,darken hdgs*/
  
    set AB0QM001.AB0QMFYH[1] skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMFYH[2] skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMFYH[3] skip, invisible; /* Protect,darken hdgs*/
    set AB0QM001.AB0QMFYH[4] skip, invisible; /* Protect,darken hdgs*/

    set AB0QM001.AB0QMFGT skip, invisible; /* Total field*/
    set AB0QM001.AB0QMBPT skip, invisible; /* Total field*/
    set AB0QM001.AB0QMNBT skip, invisible; /* Total field*/


    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= 10) /* Protect all detail lines*/
      set AB0QM001.AB0QMCLR[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMPCT[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMFLT[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMFY1[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMFY2[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMFY3[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMFY4[ABWIXM] skip, invisible;
      set AB0QM001.AB0QM-BLA-MONTH[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMLS[ABWIXM] skip, invisible;
      set AB0QM001.AB0QMBLA[ABWIXM] skip, invisible;
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
    end


    ABWREC.ABWIXM = 1; /* Initialize loop index*/
    while (ABWREC.ABWIXM <= 4) /* Protect,dark map footing lines*/

      set AB0QM001.AB0QMUSC[ABWIXM] skip, invisible; /* Underscores*/
      set AB0QM001.AB0QMFSM[ABWIXM] skip, invisible; /* Fcty grand totals*/
      set AB0QM001.AB0QMBP[ABWIXM] skip, invisible; /* Fcty buy plan totals*/
      set AB0QM001.AB0QMNBP[ABWIXM] skip, invisible; /* Fcty next buy plan*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

    end

    set AB0QM001.AB0QMUSC[5] skip, invisible; /* Underscores*/
    set AB0QM001.AB0QMUSC[6] skip, invisible; /* Underscores*/
    set AB0QM001.AB0QMUSC[7] skip, invisible; /* Last underscore*/

    set AB0QM001.AB0QMFGT skip, invisible; /* Total field*/
    set AB0QM001.AB0QMBPT skip, invisible; /* Total field*/
    set AB0QM001.AB0QMNBT skip, invisible; /* Total field*/

                    /* (Converse Main Process)*/

    goto AB0Q001; /* Converse Apparel Buy Application*/

    AB0Q001: AB0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AB0Q001; /* Converse Transportation Prototype*/


  end // end main
end // end AB0Q

// Choose which map to display
Function AB0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  AB0Q100(); /* Display map 1*/



end // end AB0Q001

// Driver process for 100 map
Function AB0Q100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB0Q110(); /* Obtain the data to display*/

  AB0Q120(); /* Format and display the map*/

  AB0Q130(); /* Check attention identifier*/

  AB0Q140(); /* Reset fields to normal intensity*/

  AB0Q150(); /* Verify the entered data*/

  AB0Q160(); /* Process valid input request*/


end // end AB0Q100

// Obtain The Data to Display
Function AB0Q110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || ABWREC.ABWSWR != "Y")             /* or Data was not requested*/
    return; /* Return to previous process*/
  end


  ABWREC.ABWFIRST = "N"; /* Set first time ind off*/



   /* ------------------------------------------------------------*/
    /* Obtain Style data from DABUY.VABSTY01*/
   /* ------------------------------------------------------------*/


  if (AB0QW01.AB0QWSTS == "Y") /* Select new style set*/


    AB0Q112(); /* Select Set DABUY.VABSTY01 data*/

    if (converseVar.validationMsgNum == 0) /* No errors found*/

      set AB0QW02 empty; /* Clear style data wk area*/

      AB0Q122(); /* Clear all TSQ's*/

      ABWREC.ABWSWC = "N"; /* Reset EOF indicator*/
      ABWREC.ABWIDX1 = 0; /* Set store pointer*/

                /* (Store All Styles Retrieved)*/

      while (ABWREC.ABWSWC == "N") /* Until all rows processed*/

        AB0Q113(); /* Process style rows*/

        if (converseVar.validationMsgNum != 0) /* Errors found*/
          return; /* Exit to display map*/
        end

      end

      AB0QW01.AB0QWMST = ABWREC.ABWIDX1; /* Save max style count*/

      AB0Q114(); /* Close style cursor*/


    end


    ABWREC.ABWIDX2 = 1; /* Initialize loop index*/

    while (ABWREC.ABWIDX2 <= AB0QW01.AB0QWMST) /* Process all styles*/

      AB0Q118(); /* Check colors per style stored*/

      ABWREC.ABWIDX2 = ABWREC.ABWIDX2 + 1; /* Loop through*/

    end


  end



   /* ------------------------------------------------------------*/
    /* Check for specific style to retrieve.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is enter) /* Enter key pressed*/

    if (AB0QW01.AB0QWUPD == " ") /* DB update indicator inactive*/

      if (XP1REC.SY1STNBR != " ") /* Specific style requested*/

        if (XP1REC.SY1STNBR in AB0QW02.SY1STNBR) /* Style found*/

          AB0QW01.AB0QWCST = sysVar.arrayIndex; /* Set current style*/

        else /* Style not found*/

          AB0QS01(); /* Clear map detail*/

          set AB0QM001.SY1STNBR cursor; /* Set cursor position*/
          ABWREC.ABWPRCSN = "110 "; /* Process number*/
          converseLib.validationFailed(5); /* Indicate no data to display*/
          return; /* Exit to next process*/

        end

      else

        if (AB0QW01.AB0QWSTS == "Y") /* Select new style set*/
          AB0QW01.AB0QWCST = 1; /* Set current style to 1*/
        else /* Redisplay current style*/
        end

      end

    end


  end


  if (converseVar.eventKey is pf19) /* Previous valid style requested*/
    AB0QW01.AB0QWVSD = "B"; /* Indicate backward style search*/
  else
    AB0QW01.AB0QWVSD = "F"; /* Indicate forward style search*/
  end


  set AB0QW03 empty; /* Clear map work area*/
  set AB0QW04 empty; /* Clear TSQ work area*/

  ABWREC.ABWIDX1 = AB0QW01.AB0QWCST; /* Set start point*/

  AB0Q119(); /* Get next or previous valid style*/


  if (ABWREC.ABWIDX1 <= 0) /* No valid current style found*/

    if (converseVar.eventKey is pf19) /* Previous style requested*/
      AB0QW01.AB0QWCST = AB0QW01.AB0QWCSS; /* Restore current style*/
      ABWREC.ABWNMO = 46; /* Indicate no prev style to display*/
    else
      if (converseVar.eventKey is pf20) /* Next style requested*/
        AB0QW01.AB0QWCST = AB0QW01.AB0QWCSS; /* Restore current style*/
        ABWREC.ABWNMO = 47; /* Indicate no next style to display*/
      else
        ABWREC.TA5TSQIX = 0; /* Indicate no data to display*/
        ABWREC.ABWSWR = "N"; /* Reset request for data*/
        AB0QW01.AB0QWSTS = " "; /* Reset style select indicator*/
        AB0QW01.AB0QWUPD = " "; /* Reset update indicator*/
        return;
      end
    end

  else

    AB0QW01.AB0QWCST = ABWREC.ABWIDX1; /* Set current style*/

  end



   /* ------------------------------------------------------------*/
             /* Obtain Data from DABUY.VBCOLR01.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At the end of the set, add any partial page to the queue,*/
      /* then close the selected set cursor.*/
   /* ------------------------------------------------------------*/

  AB0Q122(); /* Purge any temporary storage*/

  AB0QS24(); /* determine next buy mth*/
  AB0Q115(); /* Select Set DABUY.VBCOLR01 data*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    move " " to AB0QW01.AB0QWFRA[1] for all; /* Clear Factory reference array*/
    AB0QW01.AB0QWFCP = 0; /* Reset Factory reference ptr*/
    AB0QW01.AB0QWFMX = 0; /* Reset Factory reference max ptr*/
    move 0 to AB0QW01.AB0QWFSM[1] for all; /* Clear Factory qty grand tot array*/
    move 0 to AB0QW01.AB0QWBP[1] for all; /* Clear Factory buy plan array*/
    move 0 to AB0QW01.AB0QWNBP[1] for all; /* Clear Factory buy plan array*/
    AB0QW01.AB0QWFGT = 0; /* Initialize Factory grand tot field*/
    AB0QW01.AB0QWBPT = 0; /* Initialize Fcty Buy Plan total*/
    AB0QW01.AB0QWNBT = 0; /* Initialize Fcty Next Buy Plan total*/
    AB0QW01.AB0QW-LONG-SHORT-TOTAL = 0; /* init long short accum*/
    AB0QW01.AB0QW-BOTTOM-LINE-TOTAL = 0; /* init bottom line accum*/

    move " " to AB0QW01.AB0QWCRA[1] for all; /* Clear Color reference array*/
    AB0QW01.AB0QWCRP = 0; /* Reset Color reference ptr*/
    AB0QW01.AB0QWCMX = 0; /* Reset Color reference max ptr*/

    ABWREC.ABWSWC = "N"; /* Reset EOF indicator*/
    ABWREC.ABWIXM = 0; /* Set store pointer to first elem*/
    AB0QW01.AB0QWSIX = 0; /* Initialize pointer save area*/

           /* (Store All Color Break Rows Retrieved)*/

    while (ABWREC.ABWSWC == "N") /* Until all rows processed*/

      AB0Q116(); /* Process size rows*/

      if (converseVar.validationMsgNum != 0) /* Errors found*/
        ABWREC.ABWSWC = "Y"; /* Force loop end*/
      end

    end

  end


  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && AB0QW01.AB0QWSIX > 1)             /* Page was formatted*/

    ABWREC.ABWIDX2 = AB0QW01.AB0QWSIX; /* Set start line*/
    while (ABWREC.ABWIDX2 <= ABWREC.ABWMPMAX) /* Until end of lines*/

      AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIDX2]; /* Move TSQ to wk*/
      AB0QW03.AB0QWRST = "*"; /* Indicate unused line*/
      AB0QW04.AB0QWTSR[ABWIDX2] = AB0QW03.AB0QWTSW; /* Move wk to TSQ*/

      ABWREC.ABWIDX2 = ABWREC.ABWIDX2 + 1; /* Increment line index*/

    end

    AB0Q126(); /* Add page to temporary storage*/

  end


  if (converseVar.validationMsgNum == 0) /* No errors found*/
    AB0Q117(); /* Close color cursor*/
  end




   /* ------------------------------------------------------------*/
   /* Set Map page, Factory reference ptr window to display.*/
   /* ------------------------------------------------------------*/

  if (AB0QW01.AB0QWUPD == " ") /* DB update indicator inactive*/

    ABWREC.ABWTSP = 1; /* Set TSQ page to 1*/
    AB0QW01.AB0QWFCP = 1; /* Set Fcty ref ptr to 1*/

  else /* DB update indicator active*/

    ABWREC.ABWTSP = AB0QW01.AB0QWTSP; /* Restore curr TSQ page*/
    AB0QW01.AB0QWFCP = AB0QW01.AB0QWSCP; /* Restore curr fcty ptr*/
    AB0QW01.AB0QWCST = AB0QW01.AB0QWSST; /* Restore curr style ptr*/

  end

   /* ------------------------------------------------------------*/
   /* Check Obtain Data Status.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWR = "N"; /* Request for data completed*/
    AB0QW01.AB0QWSTS = " "; /* Reset style select indicator*/
    AB0QW01.AB0QWUPD = " "; /* Reset DB update indicator*/

  end


end // end AB0Q110

// Select set DABUY.VABSTY01
Function AB0Q112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set AB2REC empty; /* Clear record work area*/

         /* (Style No.)*/
  if (XP1REC.SY1STNBR != " ") /* Specific style set requested*/
    AB2REC.SY1STNBR = XP1REC.SY1STNBR;
  else
    AB2REC.SY1STNBR = "******"; /* Obtain all styles*/
  end

         /* (Whse cd)*/
  AB2REC.XWHCD = "**";

         /* (Season code)*/
  AB2REC.XSECD = XP1REC.XSECD;

         /* (Season year)*/
  AB2REC.XSNYR = XP1REC.XSNYR;

         /* (Fcty cd)*/
  AB2REC.FY1FCTYC = "****";

         /* (PO type)*/
  AB2REC.PC4ORTYP = "IL";

         /* (Customer id)*/
  AB2REC.PC2CUXID = "     ";

         /* (Category cd)*/
  AB2REC.XPCCD = "**";

         /* (Scheduler cd)*/
  if (XP1REC.PG1SC4CD != " ")
    AB2REC.PG1SC4CD = XP1REC.PG1SC4CD;
  else
    AB2REC.PG1SC4CD = "**";
  end

         /* (Gender Age)*/
  if (XP1REC.XGACD != "  ")
    AB2REC.XGACD = XP1REC.XGACD;
  else
    AB2REC.XGACD = "**";
  end

          /* (Product Category)*/
  if (XP1REC.XPCCD != " ")
    AB2REC.XPCCD = XP1REC.XPCCD;
  else
    AB2REC.XPCCD = "**";
  end

          /* (Silhouette)*/
  if (XP1REC.XSUCD != " ")
    AB2REC.XSUCD = XP1REC.XSUCD;
  else
    AB2REC.XSUCD = "**";
  end

         /* (Qota cd)*/
  AB2REC.XQTCD[1] = "***";
  AB2REC.XQTCD[2] = "***";

         /* (Fcty frgn cd)*/
  AB2REC.FY1FRGN = "*";

         /* (Fld ofc cd)*/
  AB2REC.FY6FOCD = "**";

         /* (Blank Finish ind)*/
  AB2REC.AB6BKFNI = "*";


   /* *==========================**/
   /* *  Access DABUY.VABSTY01   **/
   /* *==========================**/

  try
    call "IO3560" ("S1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  exit stack; /* Return to previous process*/



end // end AB0Q112

// Process DABUY.VABSTY01
Function AB0Q113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VABSTY01  **/
   /* *=========================**/

  try
    call "IO3560" ("N1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      if (AB2REC.XOWCD != "00")
        return; /* return to calling process*/
      end

      if (AB2REC.XWHCD != "51"
       && AB2REC.XWHCD != "25"
       && AB2REC.XWHCD != "27")
        return; /* return to calling process*/
      else

        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment store ptr*/

        if (ABWREC.ABWIDX1 > AB0QW01.AB0QWSLM) /* Max style array size*/
          AB0QS01(); /* Clear map detail area*/
          converseLib.validationFailed(17); /* Indicate limit exceeded*/
          ABWREC.ABWPRCSN = "113 "; /* Process number*/
          return; /* Return to calling process*/
        end

        AB0QW02.SY1STNBR[ABWIDX1] = AB2REC.SY1STNBR; /* style*/
        AB0QW02.XDMCD[ABWIDX1] = AB2REC.XDMCD; /* dimension*/
        AB0QW02.XWHCD[ABWIDX1] = AB2REC.XWHCD; /* whse*/
        AB0QW02.XDVCD[ABWIDX1] = AB2REC.XDVCD; /* div*/
        AB0QW02.XSECD[ABWIDX1] = AB2REC.XSECD; /* sesn cd*/
        AB0QW02.XSNYR[ABWIDX1] = AB2REC.XSNYR; /* sesn yr*/
        AB0QW02.PC4ORTYP[ABWIDX1] = AB2REC.PC4ORTYP; /* p.o.type*/
        AB0QW02.PC2CUXID[ABWIDX1] = AB2REC.PC2CUXID; /* cust x-ref*/
        AB0QW02.FY1FCTYC[ABWIDX1] = AB2REC.FY1FCTYC; /* factory cd*/
        AB0QW02.AB6BKFNI[ABWIDX1] = AB2REC.AB6BKFNI; /* blnk fnsh ind*/

        return; /* Return to calling process*/

      end

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

      return; /* Return to previous process*/

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "113 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Return to previous process*/


end // end AB0Q113

// Close DABUY.VABSTY01 cursor
Function AB0Q114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VABSTY01  **/
   /* *=========================**/

  try
    call "IO3560" ("C1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AB0Q114

// Select set DABUY.VBCOLR01
Function AB0Q115()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set VBCOLR02 empty; /* Clear record work area*/

          /* (Style No.)*/
  VBCOLR02.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST]; /* style code*/

          /* (Dimension Cd)*/
  VBCOLR02.XDMCD = AB0QW02.XDMCD[AB0QWCST];

          /* (Warehouse Cd)*/
  VBCOLR02.XWHCD = AB0QW02.XWHCD[AB0QWCST];

          /* (Division Cd)*/
  VBCOLR02.XDVCD = AB0QW02.XDVCD[AB0QWCST];

         /* (Season code)*/
  VBCOLR02.XSECD = AB0QW02.XSECD[AB0QWCST];

         /* (Season year)*/
  VBCOLR02.XSNYR = AB0QW02.XSNYR[AB0QWCST];

          /* (Factory code)*/
  VBCOLR02.FY1FCTYC = "****";
   /* MOVE AB0QW02.FY1FCTYC TO AB5REC.FY1FCTYC;*/

           /* (PO type)*/
  VBCOLR02.PC4ORTYP = AB0QW02.PC4ORTYP[AB0QWCST];

          /* (Customer id)*/
  VBCOLR02.PC2CUXID = AB0QW02.PC2CUXID[AB0QWCST];

           /* (Buy Month)*/
  VBCOLR02.AB3BUYMO = XP1REC.AB3BUYMO;



   /* *==========================**/
   /* *  Access DABUY.VBCOLR01   **/
   /* *==========================**/

   /* --------------------Y2K OUT BEGIN-------------------------*/
   /*  */
   /* CALL VBCOLR02 'S1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;/* Select*/
   /*  */
   /* --------------------Y2K OUT END---------------------------*/
   /* --------------------Y2K IN BEGIN-------------------------*/
   /*  */
  try
    call "VBCOLR03" ("S1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
   /*  */
   /* --------------------Y2K IN END---------------------------*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "115 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VBCOLR02.VBCOLR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0Q115

// Process DABUY.VBCOLR01 rows
Function AB0Q116()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal array display line for*/
      /* TSQ storage.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VBCOLR01  **/
   /* *=========================**/

   /* -------------------Y2K OUT BEGIN---------------------*/
   /*  */
   /* CALL VBCOLR02 'N1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;*/
   /*  */
   /* -------------------Y2K OUT END-----------------------*/
   /* -------------------Y2K IN BEGIN---------------------*/
   /*  */
  try
    call "VBCOLR03" ("N1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end
   /*  */
   /* -------------------Y2K IN END-----------------------*/
                                   /* Fetch the next row*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      AB0QS02(); /* Store size/color data*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
      AB0QW01.AB0QWSIX = ABWREC.ABWIXM + 1; /* Save index next line*/

      return; /* Return to previous process*/

    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "116 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Return to previous process*/


end // end AB0Q116

// Close DABUY.VBCOLR01 cursor
Function AB0Q117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VBCOLR01  **/
   /* *=========================**/

   /* --------------------------Y2K OUT BEGIN-----------------------*/
   /*  */
   /* CALL VBCOLR02 'C1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;/* Close set*/
   /*  */
   /* --------------------------Y2K OUT END-------------------------*/
   /* --------------------------Y2K IN BEGIN-----------------------*/
   /*  */
  try
    call "VBCOLR03" ("C1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
   /*  */
   /* --------------------------Y2K IN END-------------------------*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "117 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end



end // end AB0Q117

// Check colors of styles
Function AB0Q118()
   /* ------------------------------------------------------------*/
   /* Select set DABUY.VBCOLR01, keys= style stored.*/
   /* Fetch first row from the selected set.*/
   /* Indicate colors exist for the style if found.*/
   /* Close color cursor.*/
   /* ------------------------------------------------------------*/


  AB0QS21(); /* Select Set DABUY.VBCOLR01 data*/


  if (converseVar.validationMsgNum == 0) /* No errors found*/

    AB0QS22(); /* Process first size row*/

    if (converseVar.validationMsgNum == 0) /* No errors found*/
      AB0QS23(); /* Close color cursor*/
    end

  end


end // end AB0Q118

// Get next/prev valid style
Function AB0Q119()
   /* ------------------------------------------------------------*/
   /* This process finds the next or previous valid style from*/
    /* the styles stored in AB0QW02 wk area. Search starts from*/
    /* the value of AB0QWCST (current style pointer) passed and*/
    /* continues on until a valid style is found or array limits*/
    /* are reached. The address of the valid style found is*/
    /* passed back to the calling process.*/
   /* ------------------------------------------------------------*/


  if (AB0QW01.AB0QWVSD == "F") /* Forward search specified*/

    while (ABWREC.ABWIDX1 <= AB0QW01.AB0QWMST) /* Process rem styles*/

      if (AB0QW02.AB0QWCLI[ABWIDX1] == "Y") /* Style w/ colors*/
        return; /* Return to calling process*/
      end

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/

    end

    ABWREC.ABWIDX1 = 0; /* No valid styles found*/
    return; /* Return to calling process*/

  end


  if (AB0QW01.AB0QWVSD == "B") /* Backward search specified*/

    while (ABWREC.ABWIDX1 >= 1) /* Process rem styles*/

      if (AB0QW02.AB0QWCLI[ABWIDX1] == "Y") /* Style w/ colors*/
        return; /* Return to calling process*/
      end

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 - 1; /* Loop through*/

    end

    ABWREC.ABWIDX1 = 0; /* No valid styles found*/
    return; /* Return to calling process*/

  end


end // end AB0Q119

// Format and display the map
Function AB0Q120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/



  if (ABWREC.ABWFIRST != " ") /* Not first time through*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/

      AB0Q121(); /* Format map page data from TSQ*/

      if (converseVar.validationMsgNum == 0) /* No error message to display*/
        if (ABWREC.ABWNMO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(ABWREC.ABWNMO);
        end /* Information message number*/
      end

   /* ELSE;*/
     /* MOVE ' ' TO ABWREC.ABWFIRST; /* force data selections*/
    end

  end



  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && ABWREC.ABWFIRST != " ")           /* Not first time*/
    set AB0QM001.AB0QMFY1[1] cursor; /* Set cursor at map dtl area*/
  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AB0QM001 alarm; /* Indicate sound alarm*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  end


  AB0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AB0QM001.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  AB0QM001.CAITEM = COMMAREA.CAITEM; /* Fast path information*/



   /* *==============================**/
   /* * Check security authorization **/
   /* *==============================**/

  if (COMMAREA.CACLVL[1] == "N" /* No data changes allowed*/
   && COMMAREA.CACLVL[2] == "Y") /* May change Scheduler cd*/

               /* (User has Inquiry Profile)*/

    if (converseVar.validationMsgNum == 0 /* No errors found*/
     || converseVar.validationMsgNum == 5) /* No data found to display*/
      set AB0QM001.PG1SC4CD cursor; /* Position cursor at userid fld*/
    end

    if (ABWREC.TA5TSQIX == 0) /* No data to display*/

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 10) /* Protect map dtl flds*/
        set AB0QM001.AB0QMFY1[ABWIX2] skip, invisible;
        set AB0QM001.AB0QMFY2[ABWIX2] skip, invisible;
        set AB0QM001.AB0QMFY3[ABWIX2] skip, invisible;
        set AB0QM001.AB0QMFY4[ABWIX2] skip, invisible;
        set AB0QM001.AB0QM-BLA-MONTH[ABWIX2] skip, invisible;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    else

      ABWREC.ABWIX2 = 1; /* Initialize loop index*/
      while (ABWREC.ABWIX2 <= 10) /* Protect map dtl flds*/
        set AB0QM001.AB0QMFY1[ABWIX2] skip;
        set AB0QM001.AB0QMFY2[ABWIX2] skip;
        set AB0QM001.AB0QMFY3[ABWIX2] skip;
        set AB0QM001.AB0QMFY4[ABWIX2] skip;
        set AB0QM001.AB0QM-BLA-MONTH[ABWIX2] skip;
        ABWREC.ABWIX2 = ABWREC.ABWIX2 + 1; /* Loop through*/
      end

    end

  else

                /* (User has Scheduler Profile)*/

    if (COMMAREA.CACLVL[1] == "Y" /* Data changes allowed*/
     && COMMAREA.CACLVL[2] == "N") /* May not change Scheduler cd*/

      set AB0QM001.PG1SC4CD skip; /* Protect userid fld*/

      if (converseVar.validationMsgNum == 5 /* No data to display*/
       || ABWREC.ABWSWU == " ")             /* First time security chk*/
        set AB0QM001.XPCCD cursor; /* Cursor position*/
      else
        if (converseVar.validationMsgNum == 0)
          set AB0QM001.AB0QMFY1[1] cursor; /* Cursor position*/
        end
      end

    else

                  /* (User has Supervisory Profile)*/

      if (COMMAREA.CACLVL[1] == "Y" /* Data changes allowed*/
       && COMMAREA.CACLVL[2] == "Y") /* May change Scheduler cd*/

        if (converseVar.validationMsgNum == 5 /* No data to display*/
         || ABWREC.ABWSWU == " ")             /* First time security chk*/
          set AB0QM001.PG1SC4CD cursor; /* Cursor position*/
        else
          if (converseVar.validationMsgNum == 0)
            set AB0QM001.AB0QMFY1[1] cursor; /* Cursor position*/
          end
        end

      end
    end
  end


  ABWREC.ABWSWU = "N"; /* Set security ind*/


  converse AB0QM001 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  COMMAREA.CATOAP = AB0QM001.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = AB0QM001.CAITEM; /* Fast path information*/


end // end AB0Q120

// Format Map Data
Function AB0Q121()
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/

  set AB0QM001 initial; /* Clear map for display*/


   /* ------------------------------------------------------------*/
   /* Format Map Header Information from XP1REC fields.*/
   /* ------------------------------------------------------------*/

  AB0QM001.PG1SC4CD = XP1REC.XXXUSER; /* Userid*/
  AB0QM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AB0QM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AB0QM001.AB3BUYMO = XP1REC.XP1CBYMO; /* Buy mo*/
  AB0QM001.XGACD = XP1REC.XGACD; /* G/A cd*/
  AB0QM001.XGAABRV = XP1REC.XGAABRV; /* G/A abrv*/
  AB0QM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AB0QM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style name*/
  AB0QM001.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AB0QM001.XPCABRV = XP1REC.XPCABRV; /* Category abrv*/
  AB0QM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
  AB0QM001.XSUABRV = XP1REC.XSUABRV; /* Silhouette abrv*/

  AB0QM001.AB0QMCSY = AB0QW02.SY1STNBR[AB0QWCST]; /* Current style*/

   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/

  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    AB0QS01(); /* Clear detail data from map*/

    set AB0QM001.XPCCD cursor; /* Set cursor position*/
    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(5); /* Indicate no data to display*/
    return; /* Return to calling process*/

  end



  set AB0QM001.AB0QMFY1[1] cursor; /* Set cursor position*/



   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  AB0Q127(); /* Obtain TSQ page*/



  ABWREC.ABWIDX1 = 1; /* Initialize fcty map index*/
  ABWREC.ABWIDX2 = AB0QW01.AB0QWFCP; /* Set fcty ref idx wk*/

  while (ABWREC.ABWIDX1 <= 4) /* Format fctys for display*/

    if (AB0QW01.AB0QWFRA[ABWIDX2] != " ") /* Valid factory*/

      AB0QW01.AB0QWCFL = " "; /* Initialize centering flds*/
      AB0QW01.AB0QWCRL = " "; /* Initialize centering flds*/

      AB0QW01.AB0QWCFL = AB0QW01.AB0QWFRA[ABWIDX2]; /* Center fcty*/
      if (AB0QW01.AB0QWCF2 == " ") /* 1-char fcty desc*/
        AB0QW01.AB0QWCR4 = AB0QW01.AB0QWCF1;
      else
        if (AB0QW01.AB0QWCF2 != " " /* 2-char fcty desc*/
         && AB0QW01.AB0QWCF3 == " ")
          AB0QW01.AB0QWCR4 = AB0QW01.AB0QWCF1;
          AB0QW01.AB0QWCR5 = AB0QW01.AB0QWCF2;
        else
          if (AB0QW01.AB0QWCF2 != " " /* 3-char fcty desc*/
           && AB0QW01.AB0QWCF3 != " " 
           && AB0QW01.AB0QWCF4 == " ")
            AB0QW01.AB0QWCR3 = AB0QW01.AB0QWCF1;
            AB0QW01.AB0QWCR4 = AB0QW01.AB0QWCF2;
            AB0QW01.AB0QWCR5 = AB0QW01.AB0QWCF3;
          else
            if (AB0QW01.AB0QWCF2 != " " /* 4-char fcty desc*/
             && AB0QW01.AB0QWCF3 != " " 
             && AB0QW01.AB0QWCF4 != " " 
             && AB0QW01.AB0QWCF5 == " ")
              AB0QW01.AB0QWCR3 = AB0QW01.AB0QWCF1;
              AB0QW01.AB0QWCR4 = AB0QW01.AB0QWCF2;
              AB0QW01.AB0QWCR5 = AB0QW01.AB0QWCF3;
              AB0QW01.AB0QWCR6 = AB0QW01.AB0QWCF4;
            else
              AB0QW01.AB0QWCRL = AB0QW01.AB0QWCFL; /* Move all*/
            end
          end
        end
      end

      AB0QM001.AB0QMFYH[ABWIDX1] = AB0QW01.AB0QWCRL; /* Centered*/

    else

      set AB0QM001.AB0QMFYH[ABWIDX1] skip, invisible; /* Darken fld*/

    end

    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/
    ABWREC.ABWIDX2 = ABWREC.ABWIDX2 + 1; /* Address next fcty for display*/

  end



  ABWREC.ABWIXM = 1; /* Initialize line index*/
  move "=======" to AB0QM001.AB0QMUSC[1] for all; /* All underscores*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/

    if (AB0QW03.AB0QWRST != "*") /* Not Unused line*/

      AB0QM001.AB0QMCLR[ABWIXM] = AB0QW03.AB0QWCLR; /* Color*/
      AB0QM001.AB0QMPCT[ABWIXM] = AB0QW03.AB0QWPCT; /* Color Pct*/
      AB0QM001.AB0QMFLT[ABWIXM] = AB0QW03.AB0QWFLT; /* Line totals*/
      AB0QM001.AB0QMLS[ABWIXM] = AB0QW03.AB0QWLS; /* Long/Short qty*/
      AB0QM001.AB0QMBLA[ABWIXM] = AB0QW03.AB0QWBLA; /* BLA qty*/
      AB0QM001.AB0QM-BLA-MONTH[ABWIXM] = AB0QW03.PT3YYMM; /* BLA month*/

                       /* (Factory map qty 1)*/
      ABWREC.ABWIDX1 = AB0QW01.AB0QWFCP; /* Set fcty qty ref address*/
      if (AB0QW01.AB0QWFRA[ABWIDX1] == " ") /* No valid fcty stored*/
        set AB0QM001.AB0QMFY1[ABWIXM] skip, invisible; /* Protect qty fld*/
      else

        if (AB0QW03.AB0QWABQ[ABWIDX1] == 9999999) /* N/A qty*/
          AB0QM001.AB0QMFY1[ABWIXM] = 0; /* Zeroes to map fld*/
          set AB0QM001.AB0QMFY1[ABWIXM] skip, invisible; /* Prot map fld*/
        else
          AB0QM001.AB0QMFY1[ABWIXM] = AB0QW03.AB0QWABQ[ABWIDX1];
        end

      end

                       /* (Factory map qty 2)*/
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Set next fcty qty ref address*/
      if (AB0QW01.AB0QWFRA[ABWIDX1] == " ") /* No valid fcty stored*/
        set AB0QM001.AB0QMFY2[ABWIXM] skip, invisible; /* Protect qty fld*/
      else

        if (AB0QW03.AB0QWABQ[ABWIDX1] == 9999999) /* N/A qty*/
          AB0QM001.AB0QMFY2[ABWIXM] = 0; /* Zeroes to map fld*/
          set AB0QM001.AB0QMFY2[ABWIXM] skip, invisible; /* Prot map fld*/
        else
          AB0QM001.AB0QMFY2[ABWIXM] = AB0QW03.AB0QWABQ[ABWIDX1];
        end

      end

                       /* (Factory map qty 3)*/
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Set next fcty qty ref address*/
      if (AB0QW01.AB0QWFRA[ABWIDX1] == " ") /* No valid fcty stored*/
        set AB0QM001.AB0QMFY3[ABWIXM] skip, invisible; /* Protect qty fld*/
      else

        if (AB0QW03.AB0QWABQ[ABWIDX1] == 9999999) /* N/A qty*/
          AB0QM001.AB0QMFY3[ABWIXM] = 0; /* Zeroes to map fld*/
          set AB0QM001.AB0QMFY3[ABWIXM] skip, invisible; /* Prot map fld*/
        else
          AB0QM001.AB0QMFY3[ABWIXM] = AB0QW03.AB0QWABQ[ABWIDX1];
        end

      end

                       /* (Factory map qty 4)*/
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Set next fcty qty ref address*/
      if (AB0QW01.AB0QWFRA[ABWIDX1] == " ") /* No valid fcty stored*/
        set AB0QM001.AB0QMFY4[ABWIXM] skip, invisible; /* Protect qty fld*/
      else

        if (AB0QW03.AB0QWABQ[ABWIDX1] == 9999999) /* N/A qty*/
          AB0QM001.AB0QMFY4[ABWIXM] = 0; /* Zeroes to map fld*/
          set AB0QM001.AB0QMFY4[ABWIXM] skip, invisible; /* Prot map fld*/
        else
          AB0QM001.AB0QMFY4[ABWIXM] = AB0QW03.AB0QWABQ[ABWIDX1];
        end

      end


    else

      set AB0QM001.AB0QMCLR[ABWIXM] skip, invisible; /* Color*/
      set AB0QM001.AB0QMPCT[ABWIXM] skip, invisible; /* Color pct*/
      set AB0QM001.AB0QMFLT[ABWIXM] skip, invisible; /* Line totals*/
      set AB0QM001.AB0QMLS[ABWIXM] skip, invisible; /* Long/Short qty*/
      set AB0QM001.AB0QMBLA[ABWIXM] skip, invisible; /* BLA qty*/
      set AB0QM001.AB0QMFY1[ABWIXM] skip, invisible; /* Fcty Qty1*/
      set AB0QM001.AB0QMFY2[ABWIXM] skip, invisible; /* Fcty Qty2*/
      set AB0QM001.AB0QMFY3[ABWIXM] skip, invisible; /* Fcty Qty3*/
      set AB0QM001.AB0QMFY4[ABWIXM] skip, invisible; /* Fcty Qty4*/
      set AB0QM001.AB0QM-BLA-MONTH[ABWIXM] skip, invisible; /* BLA month*/

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



   /* ------------------------------------------------------------*/
   /* Display Grand Totals colors/factories displayed.*/
   /* ------------------------------------------------------------*/

  AB0QM001.AB0QMFGT = AB0QW01.AB0QWFGT; /* Grand total*/
  AB0QM001.AB0QMBPT = AB0QW01.AB0QWBPT; /* Buy Plan Total*/
  set AB0QM001.AB0QMBPT initialAttributes;
  AB0QM001.AB0QMNBT = AB0QW01.AB0QWNBT; /* New Buy Plan Total*/
  set AB0QM001.AB0QMNBT initialAttributes;

  if (AB0QW01.AB0QW-LONG-SHORT-TOTAL != 0) /* if long short not = zero*/
    AB0QM001.AB0QMLST = AB0QW01.AB0QW-LONG-SHORT-TOTAL; /* move to map*/
  else
    set AB0QM001.AB0QMLST skip, invisible; /* else darken field*/
  end

  if (AB0QW01.AB0QW-BOTTOM-LINE-TOTAL != 0) /* if bottom line not = zero*/
    AB0QM001.AB0QMBLT = AB0QW01.AB0QW-BOTTOM-LINE-TOTAL;
                                   /* move to map*/
  else
    set AB0QM001.AB0QMBLT skip, invisible; /* else darken field*/
  end


  ABWREC.ABWIDX1 = AB0QW01.AB0QWFCP; /* Set fcty qty ref address*/
  ABWREC.ABWIDX2 = 1; /* Set Loop index*/

  while (ABWREC.ABWIDX2 <= 4) /* Display fcty qty totals*/

    if (AB0QW01.AB0QWFRA[ABWIDX1] == " ") /* No valid fcty stored*/
      AB0QM001.AB0QMFSM[ABWIDX2] = 0; /* Clear qty field*/
      AB0QM001.AB0QMBP[ABWIDX2] = 0; /* Clear qty field*/
      set AB0QM001.AB0QMBP[ABWIDX2] skip, invisible;
      AB0QM001.AB0QMNBP[ABWIDX2] = 0; /* Clear qty field*/
      set AB0QM001.AB0QMNBP[ABWIDX2] skip, invisible;
    else
      AB0QM001.AB0QMFSM[ABWIDX2] = AB0QW01.AB0QWFSM[ABWIDX1];
      AB0QM001.AB0QMBP[ABWIDX2] = AB0QW01.AB0QWBP[ABWIDX1];
      set AB0QM001.AB0QMBP[ABWIDX2] initialAttributes;
      AB0QM001.AB0QMNBP[ABWIDX2] = AB0QW01.AB0QWNBP[ABWIDX1];
      set AB0QM001.AB0QMNBP[ABWIDX2] initialAttributes;
    end

    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Next fcty qty ref address*/
    ABWREC.ABWIDX2 = ABWREC.ABWIDX2 + 1; /* Next map fie1d*/

  end



   /* ------------------------------------------------------------*/
   /* Display appropriate shift scroll prompts.*/
   /* ------------------------------------------------------------*/


  if (AB0QW01.AB0QWFCP <= 1)

    set AB0QM001.AB0QMLFI skip, invisible; /* Shift left n/a*/

  end


  ABWREC.ABWIDX1 = AB0QW01.AB0QWFCP + 4; /* Check last frame*/
  if (ABWREC.ABWIDX1 > AB0QW01.AB0QWFMX) /* On last frame*/

    set AB0QM001.AB0QMRTI skip, invisible; /* Shift right n/a*/

  end



end // end AB0Q121

// Purge any temporary storage
Function AB0Q122()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/


  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/



  call "TA0050" (AB0QW04, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ; subroutine*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  end



  ABWREC.ABWTSP = 0; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AB0Q122

// Write map storage to TSQ
Function AB0Q126()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/



  AB0QW04.AB0QWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/



  call "TA0050" (AB0QW04, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ;subroutine*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "126 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end



  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  set AB0QW04 empty; /* Clear temporary storage record*/

  move " " to AB0QW01.AB0QWCRA[1] for all; /* Clear Color reference array*/
  AB0QW01.AB0QWCRP = 0; /* Reset Color reference ptr*/
  AB0QW01.AB0QWCMX = 0; /* Reset Color reference max ptr*/
  ABWREC.ABWIXM = 0; /* Reset display line number*/



end // end AB0Q126

// Read temporary storage page
Function AB0Q127()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/


  AB0QW04.AB0QWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/


  call "TA0050" (AB0QW04, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/


  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "127 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(5); /* Indicate no data to display*/
    set AB0QM001.PG1SC4CD cursor; /* Fix cursor position*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AB0Q127

// Check attention identifier
Function AB0Q130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AB0QM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is enter)
                                   /* fastpath exit or key change requested*/
    if (AB0QM001.SY1STNBR != XP1REC.SY1STNBR) /* Style no. has been changed*/
      XP1REC.XP1MISC2 = " "; /* clear ab0d-ab0q indicator*/
    end
  end

  if (AB0QM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB0QM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB0QM001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
    end

    set AB0QM001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB0QM001.CAITEM > " ") /* Application data was entered*/
    set AB0QM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0QM001"; /* Appl find code*/
    end

    XP1REC.XP1MISC2 = " "; /* clear ab0d-ab0q indicator*/
    XSABS01(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf9) /* Go to Color Breakout Application*/

    AB0Q131(); /* XFER to AB0D*/

  end


  if (converseVar.eventKey is pf16) /* Activate Inquiry Mode*/

    if (COMMAREA.CACLVL[1] == "Y" /* Profile is scheduler*/
     && COMMAREA.CACLVL[2] == "N")

      ABWREC.ABWINQF = "Y"; /* Indicate inquiry mode activated*/
      set AB0QM001.PG1SC4CD initialAttributes; /* Unprotect Sched cd fld*/
      COMMAREA.CACLVL[1] = "N"; /* Cannot update dtl flds*/
      COMMAREA.CACLVL[2] = "Y"; /* May change Sched cd fld*/
      ABWREC.ABWNMO = 67; /* Indicate message*/
      exit stack; /* Exit to redisplay map*/

    else

      converseLib.validationFailed(4); /* Indicate invalid function*/
      exit stack; /* Exit to redisplay map*/

    end

  end


  if (converseVar.eventKey is pf17) /* Deactivate Inquiry Mode*/

    if (ABWREC.ABWINQF == "Y") /* Inquiry mode activated*/

      ABWREC.ABWINQF = " "; /* Reset inquiry mode flag*/
      ABWREC.ABWNMO = 68; /* Indicate message*/
      set AB0QM001.PG1SC4CD skip; /* Protect Sched cd fld*/
      AB0QM001.PG1SC4CD = COMMAREA.CAUSERID; /* Restore orig userid*/
      COMMAREA.CACLVL[1] = "Y"; /* Can update dtl flds*/
      COMMAREA.CACLVL[2] = "N"; /* Cannot change Sched cd fld*/

    else

      converseLib.validationFailed(4); /* Indicate invalid function*/
      exit stack; /* Exit to redisplay map*/

    end

  end

end // end AB0Q130

// Transfer to Color Breakout App
Function AB0Q131()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF9.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "AB0D"; /* Indicate Color Breakout Appl.*/


   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == "AB") /* Transfer within same system*/

    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;

  else

    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end



end // end AB0Q131

// Reset highlighted fields
Function AB0Q140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AB0QM001.XGACD initialAttributes; /* Reset XGACD*/
  set AB0QM001.SY1STNBR initialAttributes; /* Reset Style no.*/
  set AB0QM001.XPCCD initialAttributes; /* Reset XPCCD*/
  set AB0QM001.XSUCD initialAttributes; /* Reset XSUCD*/

  set AB0QM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AB0QM001.CAITEM initialAttributes; /* Commarea application data*/

  AB0QM001.XXXPRCNM = "AB0Q    "; /* Reset process name*/
  ABWREC.ABWERLOC = "AB0Q    "; /* Reset process name*/


end // end AB0Q140

// Verify the entered data
Function AB0Q150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or Scroll forward request*/
   || converseVar.eventKey is pf10 /* or Shift Left request*/
   || converseVar.eventKey is pf11 /* or Shift Right request*/
   || converseVar.eventKey is pf19 /* or Previous Style request*/
   || converseVar.eventKey is pf20) /* or Next Style request*/

    AB0Q151(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* Errors found*/

      if (ABWREC.TA5TSQIX > 0) /* Data formatted into TSQ*/
        exit stack; /* then exit to redisplay map*/
      end

    end

  else

    if (AB0QW01.AB0QWDCI != "Y") /* Data contention not in effect*/
      AB0Q152(); /* Verify selection criteria*/
    end

  end



  if (converseVar.validationMsgNum != 0) /* Errors found*/

    AB0QS01(); /* Clear Map detail data*/

    exit stack; /* Exit to redisplay map*/

  else

    if (ABWREC.ABWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    else /* (Selection criteria unchanged)*/

      if (converseVar.eventKey is enter) /* Enter key pressed*/

        AB0Q153(); /* Verify any changed dtl data*/

        if (AB0QW01.AB0QWUPI != "Y") /* Valid updates not found*/
          exit stack; /* Exit to redisplay map*/
        else /* Else (Process updates)*/
        end

      end

    end

  end



end // end AB0Q150

// Verify scroll request
Function AB0Q151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back; or,*/
   /* Ensure that frames exist to shift screen left or right; or,*/
   /* Ensure that styles exist to go from one style to another.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

                  /* (Check Scroll Request)*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(2); /* No previous page to display*/

    ABWREC.ABWTSP = 1; /* Default to first TSQ page*/

  end


  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(3); /* No more pages to display*/

    ABWREC.ABWTSP = ABWREC.TA5TSQIX; /* Default to last TSQ page*/

  end


            /* (Check Shift Screen Left/Right Request)*/

  if (converseVar.eventKey is pf10 /* Shift screen left request*/
   && AB0QW01.AB0QWFCP < 6)        /* and first screen displayed*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(49); /* No previous frame to display*/

    AB0QW01.AB0QWFCP = 1; /* Default to first page*/

  end


  if (converseVar.eventKey is pf11) /* Shift screen right request*/

    ABWREC.ABWIDX1 = AB0QW01.AB0QWFCP + 5; /* Next frame address*/

    if (ABWREC.ABWIDX1 > AB0QW01.AB0QWFMX) /* and no next frame*/

      ABWREC.ABWPRCSN = "151 "; /* Process number*/
      converseLib.validationFailed(50); /* No more frames to display*/

    end

  end


               /* (Check Prev/Next Style Request)*/

  if (converseVar.eventKey is pf19 /* Previous style request*/
   && AB0QW01.AB0QWCST < 2)        /* and no previous style*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(46); /* No previous style to display*/

    AB0QW01.AB0QWCST = 1; /* Default to first page*/

  end


  if (converseVar.eventKey is pf20 /* Next style request*/
   && AB0QW01.AB0QWCST >= AB0QW01.AB0QWMST) /* and no previous style*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    converseLib.validationFailed(47); /* No more styles to display*/

    AB0QW01.AB0QWCST = AB0QW01.AB0QWMST; /* Default to last page*/

  end

                 /* (Check for Map Modifications)*/

  if (ABWREC.TA5TSQIX <= 0) /* No data formatted into TSQ*/
    return; /* Return to calling process*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX5 = AB0QW01.AB0QWFCP; /* Initialize fcty ref wk index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Check for map modifications*/

    AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/

    if (AB0QW03.AB0QWRST != "*") /* Valid map line*/

      if (AB0QM001.AB0QMFY1[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])
        if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* Valid qty*/
          set AB0QM001.AB0QMFY1[ABWIXM] cursor, modified, bold;
          ABWREC.ABWPRCSN = "151 "; /* Process number*/
          converseLib.validationFailed(14); /* Modifications not allowed*/
        end
      end

      ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref index*/
      if (AB0QM001.AB0QMFY2[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])
        if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* Valid qty*/
          set AB0QM001.AB0QMFY2[ABWIXM] cursor, modified, bold;
          ABWREC.ABWPRCSN = "151 "; /* Process number*/
          converseLib.validationFailed(14); /* Modifications not allowed*/
        end
      end

      ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref index*/
      if (AB0QM001.AB0QMFY3[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])
        if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* Valid qty*/
          set AB0QM001.AB0QMFY3[ABWIXM] cursor, modified, bold;
          ABWREC.ABWPRCSN = "151 "; /* Process number*/
          converseLib.validationFailed(14); /* Modifications not allowed*/
        end
      end

      ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref index*/
      if (AB0QM001.AB0QMFY4[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])
        if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* Valid qty*/
          set AB0QM001.AB0QMFY4[ABWIXM] cursor, modified, bold;
          ABWREC.ABWPRCSN = "151 "; /* Process number*/
          converseLib.validationFailed(14); /* Modifications not allowed*/
        end
      end


    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line number*/
    ABWREC.ABWIDX5 = AB0QW01.AB0QWFCP; /* Restore fcty ref wk index*/

  end



end // end AB0Q151

// Edit selection criteria
Function AB0Q152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* ===== Set data select switch to 'on'.                  =====*/
   /* ===== Validate all selection criteria fields.          =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


            /* (Reset Edit Indicators)*/

  if (ABWREC.ABWFIRST == " ") /* First time through*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/
  else
    ABWREC.ABWSWR = "N"; /* Reset data select ind*/
  end

  XP1REC.XP1MNO = 0; /* Reset error ind*/


          /* (Check Selection Criteria)*/

  if (AB0QM001.XPCCD != XP1REC.XPCCD) /* Category cd*/
    XP1REC.XPCCD = AB0QM001.XPCCD; /* To save area*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/
  end

  if (AB0QM001.SY1STNBR != XP1REC.SY1STNBR) /* Style no.*/
    XP1REC.SY1STNBR = AB0QM001.SY1STNBR; /* To save area*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/
  end

  if (AB0QM001.XGACD != XP1REC.XGACD) /* Gender/Age cd*/
    XP1REC.XGACD = AB0QM001.XGACD; /* To save area*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/
  end

  if (AB0QM001.XSUCD != XP1REC.XSUCD) /* Silhouette cd*/
    XP1REC.XSUCD = AB0QM001.XSUCD; /* To save area*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/
  end


     /* (This field is accessible only to the supervisor -*/
       /* the program automatically protects it if a non-*/
       /* supervisory userid is logged on)*/

  if (AB0QM001.PG1SC4CD != XP1REC.XXXUSER) /* Forecaster cd*/

    XP1REC.XXXUSER = AB0QM001.PG1SC4CD; /* To save area*/
    ABWREC.ABWSWR = "Y"; /* Request for data*/
    AB0QW01.AB0QWSTS = "Y"; /* Select new style set*/

  end


              /* (Validate Selection Criteria)*/

  AB0QS10(); /* Validate Silhouette cd*/
  AB0QS11(); /* Validate Gender/Age*/
  AB0QS12(); /* Validate Style no*/
  AB0QS16(); /* Validate Category cd*/
  AB0QS17(); /* Edit userid, get derived data*/


              /* (Validate Map Detail Data)*/

  if (ABWREC.ABWSWR == "N" /* Selection criteria unchanged*/
   && XP1REC.XP1MNO == 0)  /* And no errors found so far*/

    AB0QW01.AB0QWUPI = " "; /* Reset updates present indicator*/

    if (AB0QW01.AB0QWCST > 0) /* Valid style assigned*/
      AB0QS18(); /* then Validate map detail data*/
    end

  end


              /* (Set-up Exit Requirements)*/

  converseLib.clearScreen();
  
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end


           /* (Purge Old Data if Errors Exist)*/

  if (converseVar.validationMsgNum != 0) /* Errors detected*/

    AB0Q122(); /* Purge any temporary storage*/
    AB0QW01.AB0QWCST = 0; /* Initialize current style ptr*/
    AB0QW01.AB0QWMST = 0; /* Initialize maximum style ptr*/
    XP1REC.XXXUSER = " "; /* Clear wk fld*/
    XP1REC.XPCCD = " "; /* Clear wk fld*/
    XP1REC.SY1STNBR = " "; /* Clear wk fld*/
    XP1REC.XGACD = " "; /* Clear wk fld*/
    XP1REC.XSUCD = " "; /* Clear wk fld*/

  end



end // end AB0Q152

// Verify any changed dtl data
Function AB0Q153()
   /* ------------------------------------------------------------*/
    /* Check all record status indicators for a valid update tag.*/
    /* if found, then indicate that valid updates present for*/
      /* current style/color being processed.*/
   /* ------------------------------------------------------------*/


  AB0QW01.AB0QWUPI = " "; /* Reset update indicator*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/

    if (AB0QW03.AB0QWRST == "U") /* Record for Change(upd)*/

      AB0QW01.AB0QWUPI = "Y"; /* Indicate valid updates fnd*/

    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



end // end AB0Q153

// Process valid input request
Function AB0Q160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust scroll index(es).*/
   /* If Enter key pressed, Update any changed data.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf10) /* Shift left requested*/

    AB0QW01.AB0QWFCP = AB0QW01.AB0QWFCP - 5;
                                   /* Decrement window by 1 frames*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf11) /* Shift right requested*/

    AB0QW01.AB0QWFCP = AB0QW01.AB0QWFCP + 5;
                                   /* Increment window by 1 frames*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf19) /* Previous style requested*/

    AB0QW01.AB0QWCSS = AB0QW01.AB0QWCST; /* Save orig pointer*/
    AB0QW01.AB0QWCST = AB0QW01.AB0QWCST - 1; /* Decrement style pointer*/
    ABWREC.ABWSWR = "Y"; /* Obtain new data to display*/
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf20) /* Next style requested*/

    AB0QW01.AB0QWCSS = AB0QW01.AB0QWCST; /* Save orig pointer*/
    AB0QW01.AB0QWCST = AB0QW01.AB0QWCST + 1; /* Increment style pointer*/
    ABWREC.ABWSWR = "Y"; /* Obtain new data to display*/
    return; /* Return to previous process*/

  end



  if (converseVar.eventKey is enter) /* Update Apparel Buy Databases*/

    XX0XS01(); /* Get system date/time*/

    ABWREC.ABWIXM = 1; /* Reset loop index*/
    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Process all line data*/

      AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/

      if (AB0QW03.AB0QWRST == "U") /* Factory/ies for update*/

        AB0Q161(); /* Update DABUY.VBCOLR01 db*/

        if (converseVar.validationMsgNum == 0) /* Update successful*/

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit all updates*/

          AB0QW01.AB0QWDCI = " "; /* Reset data contention ind*/
          AB0QW01.AB0QWTSP = ABWREC.ABWTSP; /* Curr TSQ page*/
          AB0QW01.AB0QWSCP = AB0QW01.AB0QWFCP; /* Curr fcty ptr*/
          AB0QW01.AB0QWSST = AB0QW01.AB0QWCST; /* Curr style ptr*/
          ABWREC.ABWPRCSN = "160 "; /* Process number*/
          ABWREC.ABWSWR = "Y"; /* Reselect updated data*/
          AB0QW01.AB0QWUPD = "Y"; /* Indicate DB update*/
          ABWREC.ABWNMO = 45; /* Indicate update message*/

        else

          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Rollback all updates*/
          ABWREC.ABWIXM = +9999; /* Terminate update process*/

        end

      end

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end


  end



end // end AB0Q160

// Update DABUY.VSIZE01 db
Function AB0Q161()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set VBCOLR02 empty; /* Reset Wk Storage field*/

  VBCOLR02.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST]; /* Style*/
  VBCOLR02.SY2CLRID = AB0QW03.AB0QWCLR; /* Color*/
  VBCOLR02.XDMCD = AB0QW02.XDMCD[AB0QWCST]; /* Dimension*/
  VBCOLR02.XWHCD = AB0QW02.XWHCD[AB0QWCST]; /* Whse*/
  VBCOLR02.XDVCD = AB0QW02.XDVCD[AB0QWCST]; /* Division*/
  VBCOLR02.XSECD = AB0QW02.XSECD[AB0QWCST]; /* Season cd*/
  VBCOLR02.XSNYR = AB0QW02.XSNYR[AB0QWCST]; /* Season yr*/
  VBCOLR02.PC4ORTYP = AB0QW02.PC4ORTYP[AB0QWCST]; /* Ord type*/
  VBCOLR02.PC2CUXID = AB0QW02.PC2CUXID[AB0QWCST]; /* Cust ID*/
  VBCOLR02.AB3BUYMO = XP1REC.AB3BUYMO; /* Buy Month*/



   /* *==============================**/
   /* *  Scan Factories for Updates  **/
   /* *==============================**/


  ABWREC.ABWIDX1 = 1; /* Initialize Factory index*/

  while (ABWREC.ABWIDX1 <= AB0QW01.AB0QWFSZ) /* Process all factories*/


    if (AB0QW03.AB0QWFUS[ABWIDX1] == "U" /* Factory for update*/
     && AB0QW01.AB0QWFRA[ABWIDX1] > "  ")

                    /* (select unique DB row)*/
      VBCOLR02.FY1FCTYC = AB0QW01.AB0QWFRA[ABWIDX1]; /* Factory key*/
      VBCOLR02.AB3BUYST = AB0QW03.AB0QWBST[ABWIDX1]; /* Buy Status*/
      AB0QS19(); /* Select color row*/

                 /* (move fields for update)*/
      VBCOLR02.AB5ACTBY = AB0QW03.AB0QWABQ[ABWIDX1]; /* Fcty qty*/
      VBCOLR02.PT3YYMM = AB0QW03.PT3YYMM; /* bla month*/
      VBCOLR02.ZZZCHGCT = AB0QW03.AB0QWCHC[ABWIDX1]; /* Chg cnt*/

                 /* (move timestamp fields)*/
      VBCOLR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Chg date*/
      VBCOLR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Chg time*/
      VBCOLR02.ZZZCHGCT = AB0QW03.AB0QWCHC[ABWIDX1]; /* Chg cnt*/

      AB0QS20(); /* Update DABUY.VBCOLR01*/

    end

    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/

  end

end // end AB0Q161

// Clear map detail data
Function AB0QS01()
   /* ------------------------------------------------------------*/
         /* (Set Protect,Dark all Map Hdg/Dtl Items)*/
   /* ------------------------------------------------------------*/

  set AB0QM001.AB0QMLFI skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMRTI skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD1 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD2 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD3 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD4 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD5 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD6 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD7 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD8 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMHD9 skip, invisible; /* Protect,darken hdgs*/

  set AB0QM001.AB0QM-BLAHD1 skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QM-BLAHD2 skip, invisible; /* Protect,darken hdgs*/

  set AB0QM001.AB0QMFYH[1] skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMFYH[2] skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMFYH[3] skip, invisible; /* Protect,darken hdgs*/
  set AB0QM001.AB0QMFYH[4] skip, invisible; /* Protect,darken hdgs*/


  ABWREC.ABWIXM = 1; /* Reset loop index*/
  while (ABWREC.ABWIXM <= 10) /* Protect all detail lines*/
    set AB0QM001.AB0QMCLR[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMPCT[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMFLT[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMFY1[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMFY2[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMFY3[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMFY4[ABWIXM] skip, invisible;
    set AB0QM001.AB0QM-BLA-MONTH[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMLS[ABWIXM] skip, invisible;
    set AB0QM001.AB0QMBLA[ABWIXM] skip, invisible;
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/
  end


  ABWREC.ABWIXM = 1; /* Initialize loop index*/
  while (ABWREC.ABWIXM <= 4) /* Protect,dark map footing lines*/

    set AB0QM001.AB0QMUSC[ABWIXM] skip, invisible; /* Underscores*/
    set AB0QM001.AB0QMFSM[ABWIXM] skip, invisible; /* Fcty grand totals*/
    set AB0QM001.AB0QMBP[ABWIXM] skip, invisible; /* Fcty buy plan totals*/
    set AB0QM001.AB0QMNBP[ABWIXM] skip, invisible; /* Fcty next buy plan*/

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Loop through*/

  end

  set AB0QM001.AB0QMUSC[5] skip, invisible; /* Underscores*/
  set AB0QM001.AB0QMUSC[6] skip, invisible; /* Underscores*/
  set AB0QM001.AB0QMUSC[7] skip, invisible; /* Last underscore*/

  set AB0QM001.AB0QMFGT skip, invisible; /* Totals*/
  set AB0QM001.AB0QMBPT skip, invisible; /* Totals*/
  set AB0QM001.AB0QMNBT skip, invisible; /* Totals*/



end // end AB0QS01

// Store map detail data into TSQ
Function AB0QS02()
   /* ------------------------------------------------------------*/
    /* Check Color ID: Create TSQ map line for each unique ID*/
   /* ------------------------------------------------------------*/

  set AB0QW03 empty; /* Initialize TSQ wk area*/

  AB0QW03.AB0QWABQ = +9999999; /* Initialize actual buy qtys*/

  AB0QW01.AB0QWCID = " "; /* Reset Color locate ind*/

  if (VBCOLR02.SY2CLRID in AB0QW01.AB0QWCRA) /* Color found?*/
    AB0QW01.AB0QWCID = "Y"; /* Indicate Color located*/
    AB0QW01.AB0QWCRP = sysVar.arrayIndex; /* Get color array address*/
    AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[AB0QWCRP]; /* Move TSQ to wk*/
  else

    if (ABWREC.ABWIXM == ABWREC.ABWMPMAX) /* page is full*/
      AB0Q126(); /* add page to TSQ*/
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Next Map line*/
    AB0QW01.AB0QWCRP = ABWREC.ABWIXM; /* Get color array address*/
    AB0QW01.AB0QWCRA[ABWIXM] = VBCOLR02.SY2CLRID; /* Store it*/
  end


   /* ------------------------------------------------------------*/
    /* Check Factory Cd: Store in Fcty Ref Array each unique cd*/
   /* ------------------------------------------------------------*/

  if (VBCOLR02.FY1FCTYC in AB0QW01.AB0QWFRA) /* Factory found?*/

    AB0QW01.AB0QWFCP = sysVar.arrayIndex; /* Get factory array address*/

  else


    AB0QW01.AB0QWFMX = AB0QW01.AB0QWFMX + 1; /* Array elem address*/
    if (AB0QW01.AB0QWFMX > AB0QW01.AB0QWFSZ) /* Allocation exceeded*/
      AB0QW01.AB0QWFMX = 1; /* Wrap-around*/
    end
    AB0QW01.AB0QWFCP = AB0QW01.AB0QWFMX; /* Get factory array address*/
    AB0QW01.AB0QWFRA[AB0QWFMX] = VBCOLR02.FY1FCTYC; /* Ref array*/

    /* ------------------------------------------------------*/
     /* Obtain Current and Next Buy Plan data for factories*/
    /* ------------------------------------------------------*/

    AB0QS04();

  end



   /* ------------------------------------------------------------*/
    /* Check if Color is existing (in reference array)*/
   /* ------------------------------------------------------------*/

  if (AB0QW01.AB0QWCID == " ") /* Color not found*/

    AB0QW03.AB0QWCLR = VBCOLR02.SY2CLRID; /* Color id*/

    /* ------------------------------------------------------*/
      /* Obtain data requirements from other databases.*/
    /* ------------------------------------------------------*/

    AB0QS08(); /* Get required DACAST.VAFCLR01 data*/

    if (VAFCLR02.PG2SCRFL == "B") /* CHECK FOR BLANK STYLES*/
      if (VAFCLR02.AF-LGSH-TS-QTY <= 0) /* if long/short < zero, accumulate*/
        AB0QW01.AB0QW-LONG-SHORT-TOTAL = AB0QW01.AB0QW-LONG-SHORT-TOTAL +         VAFCLR02.AF-LGSH-TS-QTY; /* accum long short qty to total*/
      end
    else
      if (VAFCLR02.AF5LGSHQ <= 0) /* if long/short < zero, accumulate*/
        AB0QW01.AB0QW-LONG-SHORT-TOTAL = AB0QW01.AB0QW-LONG-SHORT-TOTAL +         VAFCLR02.AF5LGSHQ; /* accum long short qty to total*/
      end
    end

    if (AB0QW01.AB0QWBLQ <= 0) /* if bottom line < zero, accumulate*/
      AB0QW01.AB0QW-BOTTOM-LINE-TOTAL = AB0QW01.AB0QW-BOTTOM-LINE-TOTAL +       AB0QW01.AB0QWBLQ; /* accum bottom line availability*/
    end

    AB0QS09(); /* Get required DACAST.VDMANA01 data*/

    /* -------------------------------------------------------*/
      /* Assemble TSQ sub-record data elements (1 map line).*/
    /* -------------------------------------------------------*/

    AB0QW03.AB0QWPCT = VAFCLR02.AF5FSCPT; /* Color percentage*/
    if (VAFCLR02.PG2SCRFL == "B") /* CHECK FOR BLANK STYLES*/
      AB0QW03.AB0QWLS = VAFCLR02.AF-LGSH-TS-QTY;
                                   /* Blank L/S Qty*/
    else
      AB0QW03.AB0QWLS = VAFCLR02.AF5LGSHQ; /* Long/Short Qty*/
    end
    AB0QW03.AB0QWBLA = AB0QW01.AB0QWBLQ; /* BLA Qty*/
    AB0QW03.PT3YYMM = VBCOLR02.PT3YYMM; /* move bla selection*/
       /* month*/
  end



   /* ------------------------------------------------------------*/
    /* Store Actual Buy Qty per factory relative position.*/
                 /* (Field for update)*/
   /* ------------------------------------------------------------*/

  AB0QW03.AB0QWABQ[AB0QWFCP] = VBCOLR02.AB5ACTBY; /* Store Fcty qty*/
  AB0QW03.AB0QWBST[AB0QWFCP] = VBCOLR02.AB3BUYST; /* Store Buy stat*/
  AB0QW03.AB0QWCHC[AB0QWFCP] = VBCOLR02.ZZZCHGCT; /* Store Chg cnt*/
  AB0QW03.AB0QWFUS[AB0QWFCP] = " "; /* Reset status*/

  AB0QW03.AB0QWFLT = AB0QW03.AB0QWFLT + VBCOLR02.AB5ACTBY; /* Line total*/



   /* ------------------------------------------------------------*/
    /* Compute Grand fcty totals.*/
   /* ------------------------------------------------------------*/


  AB0QW01.AB0QWQTW = AB0QW01.AB0QWFSM[AB0QWFCP]; /* Move grnd tot to wk*/
  AB0QW01.AB0QWQTW = AB0QW01.AB0QWQTW + VBCOLR02.AB5ACTBY; /* Add fcty qty*/
  AB0QW01.AB0QWFSM[AB0QWFCP] = AB0QW01.AB0QWQTW; /* Move back grnd*/

  AB0QW01.AB0QWFGT = AB0QW01.AB0QWFGT + VBCOLR02.AB5ACTBY; /* Sum Grand tot*/


   /* ------------------------------------------------------------*/
    /* Move TSQ sub-record back to the TSQ wk area.*/
   /* ------------------------------------------------------------*/

  AB0QW04.AB0QWTSR[AB0QWCRP] = AB0QW03.AB0QWTSW; /* TSQ record*/



end // end AB0QS02

// Get Current and Next Buy Plan
Function AB0QS04()
   /* ------------------------------------------------------------*/
   /* Get Current and Next Buy Plan for specific factory*/
   /* ------------------------------------------------------------*/

  AB0QS05(); /* Select set DABUY.VBPLAN01 row/s*/

  AB0QW01.AB0QWBP[AB0QWFCP] = 0; /* Clear buy plan field*/
  AB0QW01.AB0QWNBP[AB0QWFCP] = 0; /* Clear next buy plan field*/
  AB0QW01.AB0QWEND = "N"; /* init end of file*/
  while (SQLCA.VAGen_SQLCODE == 0
   && AB0QW01.AB0QWEND == "N")

    AB0QS06(); /* fetch next*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (AB4REC.AB3BUYMO > XP1REC.XP1BUYMO)
        if (AB4REC.AB3BUYST == "B" /* stat must be b, s*/
         || AB4REC.AB3BUYST == "S")
          if (AB4REC.AB3BUYMO == AB0QW01.AB3BUYMO)
            AB0QW01.AB0QWNBP[AB0QWFCP] = AB4REC.AB4SMBQT + AB0QW01.AB0QWNBP[AB0QWFCP];
            AB0QW01.AB0QWNBT = AB0QW01.AB0QWNBT + AB4REC.AB4SMBQT; /* Total*/
          else
            AB0QW01.AB0QWEND = "Y"; /* force end of file*/
          end
        end
      else
        if (AB4REC.AB3BUYMO == XP1REC.XP1BUYMO)
          if (AB4REC.AB3BUYST == "B" /* stat must be b, t, c, z*/
           || AB4REC.AB3BUYST == "T" 
           || AB4REC.AB3BUYST == "C" 
           || AB4REC.AB3BUYST == "Z")
            AB0QW01.AB0QWBP[AB0QWFCP] = AB4REC.AB4SMBQT; /* Buy Plan*/
            AB0QW01.AB0QWBPT = AB0QW01.AB0QWBPT + AB4REC.AB4SMBQT; /* Total*/
          end
        end
      end
    end
  end

  AB0QS07(); /* Close set cursor*/

end // end AB0QS04

// Get Buy Plan for Fcty(sel set)
Function AB0QS05()
   /* ------------------------------------------------------------*/
   /* Select set DABUY.VBPLAN01 table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set AB4REC empty; /* Clear record work area*/

          /* (Style No.)*/
  AB4REC.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST];

          /* (Dimension Cd)*/
  AB4REC.XDMCD = AB0QW02.XDMCD[AB0QWCST];

          /* (Warehouse Cd)*/
  AB4REC.XWHCD = AB0QW02.XWHCD[AB0QWCST];

          /* (Division Cd)*/
  AB4REC.XDVCD = AB0QW02.XDVCD[AB0QWCST];

         /* (Season code)*/
  AB4REC.XSECD = AB0QW02.XSECD[AB0QWCST];

         /* (Season year)*/
  AB4REC.XSNYR = AB0QW02.XSNYR[AB0QWCST];

           /* (Factory)*/
  AB4REC.FY1FCTYC = VBCOLR02.FY1FCTYC;

          /* (Order Type)*/
  AB4REC.PC4ORTYP = AB0QW02.PC4ORTYP[AB0QWCST];

          /* (Customer ID)*/
  AB4REC.PC2CUXID = AB0QW02.PC2CUXID[AB0QWCST];

          /* (Owner Group)*/
  AB4REC.XOWCD = "00";



   /* *==========================**/
   /* *  Access DABUY.VBPLAN01   **/
   /* *==========================**/

  try
    call "IO3570" ("S1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return; /* return to calling process*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0QS05

// Process DABUY.VBPLAN01 rows
Function AB0QS06()
   /* ------------------------------------------------------------*/
   /* Process DABUY.VBPLAN01 table row.*/
   /* ------------------------------------------------------------*/

   /* *===========**/
   /* *  DB Call  **/
   /* *===========**/

  try
    call "IO3570" ("N1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/
      return; /* return to calling process*/
    end
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0QS06

// Close DABUY.VBPLAN01 cursor
Function AB0QS07()
   /* ------------------------------------------------------------*/
   /* Close DABUY.VBPLAN01 cursor.*/
   /* ------------------------------------------------------------*/

   /* *===========**/
   /* *  DB Call  **/
   /* *===========**/

  try
    call "IO3570" ("C1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/



  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "S07 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET ROW/S";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
    TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

    return; /* Return to previous process*/

  end



end // end AB0QS07

// Get DACAST.VAFCLR01 data
Function AB0QS08()
   /* ------------------------------------------------------------*/
   /* Select unique a table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set VAFCLR02 empty; /* Clear record work area*/

          /* (Style No.)*/
  VAFCLR02.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST];

          /* (Color Id)*/
  VAFCLR02.SY2CLRID = AB0QW03.AB0QWCLR;

          /* (Dimension Cd)*/
  VAFCLR02.XDMCD = AB0QW02.XDMCD[AB0QWCST];

          /* (Division Cd)*/
  VAFCLR02.XDVCD = AB0QW02.XDVCD[AB0QWCST];

         /* (Season code)*/
  VAFCLR02.XSECD = AB0QW02.XSECD[AB0QWCST];

         /* (Season year)*/
  VAFCLR02.XSNYR = AB0QW02.XSNYR[AB0QWCST];

         /* (owner group)*/
  if (AB0QW02.AB6BKFNI[AB0QWCST] == "B")
    VAFCLR02.XOWCD = "**";
  else
    VAFCLR02.XOWCD = "00";
  end


   /* *==========================**/
   /* *  Access DACAST.VAFCLR01  **/
   /* *==========================**/

  try
    call "IO3520" ("S ", SQLCA, VAFCLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AB0QW01.AB0QWBLQ = VAFCLR02.AF5BLAQ; /* BLA qty from AF*/
      return; /* return to calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        VAFCLR02.AF5FSCPT = 0; /* clear color pcent*/
        VAFCLR02.AF5LGSHQ = 0; /* clear long/short qty*/
        VAFCLR02.AF-LGSH-TS-QTY = 0; /* clear BLANK long/short*/
        AB0QW01.AB0QWBLQ = 0; /* clear wk BLA qty*/
        return; /* return to calling process*/
      end

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S08 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAFCLR02.VAFCLR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0QS08

// Get DACAST.VDMANA01 data
Function AB0QS09()
   /* ------------------------------------------------------------*/
   /* Select unique a table row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set AFEREC empty; /* Clear record work area*/

          /* (Style No.)*/
  AFEREC.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST];

          /* (Color Id)*/
  AFEREC.SY2CLRID = AB0QW03.AB0QWCLR;

          /* (Dimension Cd)*/
  AFEREC.XDMCD = AB0QW02.XDMCD[AB0QWCST];

          /* (Warehouse Cd)*/
  AFEREC.XWHCD = AB0QW02.XWHCD[AB0QWCST];

          /* (Division Cd)*/
  AFEREC.XDVCD = AB0QW02.XDVCD[AB0QWCST];

         /* (Season code)*/
  AFEREC.XSECD = AB0QW02.XSECD[AB0QWCST];

         /* (Season year)*/
  AFEREC.XSNYR = AB0QW02.XSNYR[AB0QWCST];

          /* (Other Defaulted Keys)*/
  AFEREC.AFBNDTPR = +9999;
  AFEREC.YSMSUMCD = " ";
  AFEREC.AFEADJT = "2";



   /* *==========================**/
   /* *  Access DACAST.VDMANA01  **/
   /* *==========================**/

   /* -------------------Y2K OUT BEGIN---------------------*/
   /*  */
   /* CALL IO3140 'S ',SQLCA,AFEREC (NOMAPS,NONCSP,REPLY; /* Select set*/
   /*  */
   /* -------------------Y2K OUT END-----------------------*/
   /* -------------------Y2K IN BEGIN---------------------*/
   /*  */
  try
    call "VDMANA02" ("S ", SQLCA, AFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /*  */
   /* -------------------Y2K IN END-----------------------*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      ABWREC.ABWIDX1 = 1; /* Reset loop index*/
      while (ABWREC.ABWIDX1 <= 10) /* Accumulate all adjustments*/
        AB0QW01.AB0QWBLQ = AB0QW01.AB0QWBLQ + AFEREC.AFEADJQ[ABWIDX1];
        ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/
      end

      return; /* return to calling process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return; /* return to calling process*/
      end

    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANA01"; /* Table view name*/
  TA1REC.TA1TBLKE = AFEREC.AFEKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0QS09

// Edit silhouette cd
Function AB0QS10()

  if (XP1REC.XSUCD == " ") /* xsucd eq spaces*/
    XP1REC.XSUABRV = " "; /* Space out save area*/
    AB0QM001.XSUABRV = " "; /* Space out abrv*/
    return; /* Return to calling process*/
  end


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSSU(); /* Standard XSU pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XSUCD = " "; /* Space out save area*/
    XP1REC.XSUABRV = " "; /* Space out save area*/
    AB0QM001.XSUABRV = " "; /* Space out abrv*/
    set AB0QM001.XSUCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 31; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S10 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XSUCD = " "; /* Space out save area*/
      XP1REC.XSUABRV = " "; /* Space out save area*/
      AB0QM001.XSUABRV = " "; /* Space out abrv*/
      set AB0QM001.XSUCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S10 "; /* Process number*/

    else

      AB0QM001.XSUCD = XP1REC.XSUCD; /* Move valid code to map*/
      AB0QM001.XSUABRV = XP1REC.XSUABRV; /* Move abrv to map*/

    end

  end



end // end AB0QS10

// Edit Gender/Age cd
Function AB0QS11()

  if (XP1REC.XGACD == " ") /* xgacd eq spaces*/
    XP1REC.XGAABRV = " "; /* Space out save area*/
    AB0QM001.XGAABRV = " "; /* Move spaces to abrv*/
    return; /* Return to calling process*/
  end


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSGA(); /* Standard XGA pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XGACD = " "; /* Space out save area*/
    XP1REC.XGAABRV = " "; /* Space out save area*/
    AB0QM001.XGAABRV = " "; /* Space out abrv*/
    set AB0QM001.XGACD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 33; /* Indicate error message*/
    ABWREC.ABWPRCSN = "S11 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XGACD = " "; /* Space out save area*/
      XP1REC.XGAABRV = " "; /* Space out save area*/
      AB0QM001.XGAABRV = " "; /* Move spaces to abrv*/
      set AB0QM001.XGACD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "S11 "; /* Process number*/

    else

      AB0QM001.XGACD = XP1REC.XGACD; /* Move valid code to map*/
      AB0QM001.XGAABRV = XP1REC.XGAABRV; /* Move abrv code to map*/

    end

  end



end // end AB0QS11

// Edit Style no.
Function AB0QS12()
  if (XP1REC.SY1STNBR == " ") /* Style eq spaces*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    XP1REC.SY1STYNM = " "; /* Space out desc*/
    AB0QM001.SY1SSTNM = " "; /* Space out desc*/
    return; /* Exit to calling process*/
  end


  if (XP1REC.SY1STNBR == "?") /* Pop-up window requested*/
    XP1REC.SY1STNBR = " "; /* Space out wk storage*/
    XP1REC.SY1SSTNM = " "; /* Space out desc*/
    AB0QM001.SY1SSTNM = " "; /* Space out desc*/
    set AB0QM001.SY1STNBR cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up not available*/
    ABWREC.ABWPRCSN = "S12 "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB0QS13(); /* Select set style*/

  AB0QS14(); /* Validate style*/

  AB0QS15(); /* Close style cursor*/



end // end AB0QS12

// Select Set Style
Function AB0QS13()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/


   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0QS13

// Validate Style retrieved
Function AB0QS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB0QM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/

      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      XP1REC.SY1SSTNM = " "; /* Space out desc*/
      AB0QM001.SY1SSTNM = " "; /* Space out desc*/

      set AB0QM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 38; /* Indicate error message*/
      ABWREC.ABWPRCSN = "V21 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0QS14

// Close Style Cursor
Function AB0QS15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AB0QS15

// Edit category cd
Function AB0QS16()

  if (XP1REC.XPCCD == " ") /* XPCCD eq spaces*/
    XP1REC.XPCABRV = " "; /* Space out save area*/
    AB0QM001.XPCABRV = " "; /* Space out abrv*/
    return; /* Return to calling process*/
  end


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/


  XSABSPC(); /* Standard XPC pop-up module*/



  if (XP1REC.XP1ERRFL == "1") /* Invalid data encountered*/

    XP1REC.XPCCD = " "; /* Space out save area*/
    XP1REC.XPCABRV = " "; /* Space out save area*/
    AB0QM001.XPCABRV = " "; /* Space out abrv*/
    set AB0QM001.XPCCD cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 32; /* Indicate error message*/
    ABWREC.ABWPRCSN = "V01 "; /* Process number*/

  else

    if (XP1REC.XXXSTAT == "I") /* Inactive data obtained*/

      XP1REC.XPCCD = " "; /* Space out save area*/
      XP1REC.XPCABRV = " "; /* Space out save area*/
      AB0QM001.XPCABRV = " "; /* Space out abrv*/
      set AB0QM001.XPCCD cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 35; /* Indicate error message*/
      ABWREC.ABWPRCSN = "V01 "; /* Process number*/

    else

      AB0QM001.XPCCD = XP1REC.XPCCD; /* Move valid code to map*/
      AB0QM001.XPCABRV = XP1REC.XPCABRV; /* Move abrv to map*/

    end

  end



end // end AB0QS16

// Edit scheduler id
Function AB0QS17()
   /* ------------------------------------------------------------*/
   /* Get Two Charactor Scheduler Code From DPRODG.VSUSER01,*/
    /* then obtain valid Season, Year and Buy Month as assigned.*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XXXUSER == " ") /* Eq spaces*/

    set AB0QM001.PG1SC4CD cursor, bold; /* Highlight field*/
    ABWREC.ABWPRCSN = "S17 "; /* Process number*/
    XP1REC.XP1MNO = 21; /* Indicate error msg*/
    XP1REC.PG1SC4CD = " "; /* Space out save area*/
    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Get Two Charactor Scheduler Code From DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/


  XP1REC.XP1ERRFL = " "; /* Reset error flag*/


  XPAB010(); /* Get 2 Digit Sched Code*/


  if (XP1REC.XP1ERRFL != " ") /* Edit error found*/
                  /* (Field in Error)*/
    set AB0QM001.PG1SC4CD cursor, bold; /* Highlight field*/
    ABWREC.ABWPRCSN = "S17 "; /* Process number*/
    XP1REC.XP1MNO = 21; /* Indicate error msg*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    XP1REC.PG1SC4CD = " "; /* Space out save area*/
    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Get new current season, year, and buy month*/
   /* ------------------------------------------------------------*/

  set AB3REC empty; /* Initialize AB3REC*/

  XPAB020(); /* Get Current XSE/XSN/BUY-MO*/


end // end AB0QS17

// Edit map detail adjustments
Function AB0QS18()
   /* ------------------------------------------------------------*/
    /* Evaluate map detail data to determine the kind of data*/
     /* base update action necessary for each line. If valid*/
     /* update found, then assign update code. Otherwise, ignore*/
     /* map detail line.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX5 = AB0QW01.AB0QWFCP; /* Initialize fcty ref wk index*/
  AB0QW03.AB0QWRST = " "; /* Reset Sub-record status*/
   /* MOVEA ' ' TO AB0QW03.AB0QWFUS(ABWIDX5);/* No update for field*/
  move " " to AB0QW03.AB0QWFUS[1] for all; /* No update for field*/
  AB0QW01.AB0QWUPI = " "; /* Reset Valid update ind*/

  AB0QS25();

  if (ABWREC.TA5TSQIX > 0) /* data formatted to TSQ*/

    /* Check BLA Months first*/
    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Check for map modifications*/

      AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/
                          /* (bla month selection)*/
      if (AB0QW03.AB0QWRST != "*") /* Valid map line*/
        /* ------------------Y2K OUT BEGIN-------------------------*/
        /*  */
        /* IF AB0QM001.AB0QM-BLA-MONTH(ABWIXM) NE AB0QW03.PT3YYMM;*/
        /*  */
        /* ------------------Y2K OUT END---------------------------*/
        /* ------------------Y2K IN BEGIN------------------------*/
        /*  */
        AB0QW01.AB0QW-PT3YYMM = AB0QM001.AB0QM-BLA-MONTH[ABWIXM];
  /* *******************Y2K IN 02-12-98 BEGIN***********************/
        if (AB0QW01.AB0QW-PT3YYMM > 0)
  /* *******************Y2K IN 02-12-98 END*************************/
          if (AB0QW01.AB0QW-PT3YYMM > 6000)
            AB0QW01.AB0QW-PT3YYMM = AB0QW01.AB0QW-PT3YYMM + 190000;
          else
            AB0QW01.AB0QW-PT3YYMM = AB0QW01.AB0QW-PT3YYMM + 200000;
          end
  /* *******************Y2K IN 02-12-98 BEGIN***********************/
        end
  /* *******************Y2K IN 02-12-98 END*************************/

        if (AB0QW01.AB0QW-PT3YYMM != AB0QW03.PT3YYMM)
          /*  */
          /* ------------------Y2K IN END--------------------------*/
          AB0QS26();
        end
                    /* (Restore wk record back to TSQ)*/
        AB0QW04.AB0QWTSR[ABWIXM] = AB0QW03.AB0QWTSW; /* Move wk to TSQ*/
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment map line no.*/
    end

    if (converseVar.validationMsgNum > 0) /* exit routine if BLA months errors*/
      exit stack;
    end

    ABWREC.ABWIXM = 1; /* Initialize line index*/

    /* IF NO PROBLEM WITH BLA MONTHS,  check quantities*/

    while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Check for map modifications*/


      AB0QW03.AB0QWTSW = AB0QW04.AB0QWTSR[ABWIXM]; /* Move TSQ to wk*/


      if (AB0QW03.AB0QWRST != "*") /* Valid map line*/

        /* ; move bla months for updates*/
        AB0QW03.PT3YYMM = AB0QM001.AB0QM-BLA-MONTH[ABWIXM];
        /* ----------------------Y2K IN BEGIN-------------------------*/
        /*  */
  /* *******************Y2K IN 02-12-98 BEGIN***********************/
        if (AB0QW01.AB0QW-PT3YYMM > 0)
  /* *******************Y2K IN 02-12-98 END*************************/
          if (AB0QW03.PT3YYMM > 6000)
            AB0QW03.PT3YYMM = AB0QW03.PT3YYMM + 190000;
          else
            AB0QW03.PT3YYMM = AB0QW03.PT3YYMM + 200000;
          end
  /* *******************Y2K IN 02-12-98 BEGIN***********************/
        end
  /* *******************Y2K IN 02-12-98 END*************************/
        /*  */
        /* ----------------------Y2K IN END----------------------------*/

                          /* (Factory 1 qty field)*/
        if (AB0QM001.AB0QMFY1[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])

          if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* valid qty*/
            AB0QW03.AB0QWABQ[ABWIDX5] = AB0QM001.AB0QMFY1[ABWIXM];
            AB0QW03.AB0QWFUS[ABWIDX5] = "U"; /* Tag field for update*/
            AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/
          else
            AB0QW03.AB0QWFUS[ABWIDX5] = " "; /* No update for field*/
          end

        end

                          /* (Factory 2 qty field)*/
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref idx*/
        if (AB0QM001.AB0QMFY2[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])

          if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* valid qty*/
            AB0QW03.AB0QWABQ[ABWIDX5] = AB0QM001.AB0QMFY2[ABWIXM];
            AB0QW03.AB0QWFUS[ABWIDX5] = "U"; /* Tag field for update*/
            AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/
          else
            AB0QW03.AB0QWFUS[ABWIDX5] = " "; /* No update for field*/
          end

        end

                          /* (Factory 3 qty field)*/
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref idx*/
        if (AB0QM001.AB0QMFY3[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])

          if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* valid qty*/
            AB0QW03.AB0QWABQ[ABWIDX5] = AB0QM001.AB0QMFY3[ABWIXM];
            AB0QW03.AB0QWFUS[ABWIDX5] = "U"; /* Tag field for update*/
            AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/
          else
            AB0QW03.AB0QWFUS[ABWIDX5] = " "; /* No update for field*/
          end

        else
          AB0QW03.AB0QWFUS[ABWIDX5] = " "; /* No update for field*/
        end

                          /* (Factory 4 qty field)*/
        ABWREC.ABWIDX5 = ABWREC.ABWIDX5 + 1; /* Increment fcty ref index*/
        if (AB0QM001.AB0QMFY4[ABWIXM] != AB0QW03.AB0QWABQ[ABWIDX5])

          if (AB0QW03.AB0QWABQ[ABWIDX5] != +9999999) /* valid qty*/
            AB0QW03.AB0QWABQ[ABWIDX5] = AB0QM001.AB0QMFY4[ABWIXM];
            AB0QW03.AB0QWFUS[ABWIDX5] = "U"; /* Tag field for update*/
            AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/
          else
            AB0QW03.AB0QWFUS[ABWIDX5] = " "; /* No update for field*/
          end
        end


      end

                    /* (Restore wk record back to TSQ)*/
      AB0QW04.AB0QWTSR[ABWIXM] = AB0QW03.AB0QWTSW; /* Move wk to TSQ*/

                      /* (Increment Loop indexes)*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment map line no.*/
      ABWREC.ABWIDX5 = AB0QW01.AB0QWFCP;
                                   /* Restore fcty ref wk index*/

    end

  end

end // end AB0QS18

// Select DABUY.VBCOLR01 row
Function AB0QS19()

   /* *==============================**/
   /* *  Select DABUY.VBCOLR01  Row  **/
   /* *==============================**/

   /* ------------------Y2K OUT BEGIN---------------------*/
   /*  */
   /* CALL VBCOLR02 'S ',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;*/
   /*  */
   /* ------------------Y2K OUT END------------------------*/
   /* ------------------Y2K IN BEGIN---------------------*/
   /*  */
  try
    call "VBCOLR03" ("S ", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end
   /*  */
   /* ------------------Y2K IN END------------------------*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Data Contention detected*/

    AB0QW01.AB0QWDCI = "Y"; /* Set indicator*/
    converseLib.validationFailed(11); /* Indicate data contention*/
    exit stack; /* Redisplay map*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S19 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0QS19

// Update DABUY.VBCOLR01 row
Function AB0QS20()

   /* *==============================**/
   /* *  Update DABUY.VBCOLR01  Row  **/
   /* *==============================**/

   /* ---------------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* CALL VBCOLR02 'U ',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;*/
   /*  */
   /* ---------------------Y2K OUT END-----------------------*/
   /* ---------------------Y2K IN BEGIN--------------------*/
   /*  */
  try
    call "VBCOLR03" ("U ", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end
   /*  */
   /* ---------------------Y2K IN END-----------------------*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user/s*/
      ABWREC.ABWSWR = "Y"; /* Reselect same rows*/
      ABWREC.ABWPRCSN = "161 "; /* Process number*/
      ABWREC.ABWNMO = 13; /* Indicate concurrent update*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        AB0QW01.AB0QWDCI = "Y"; /* Set indicator*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        exit stack; /* Exit to redisplay map*/
      else

        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Rollback all db updates*/

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S20 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB0QS20

// Select set DABUY.VBCOLR01 rows
Function AB0QS21()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/

  set VBCOLR02 empty; /* Clear record work area*/

          /* (Style No.)*/
  VBCOLR02.SY1STNBR = AB0QW02.SY1STNBR[ABWIDX2]; /* style code*/

          /* (Dimension Cd)*/
  VBCOLR02.XDMCD = AB0QW02.XDMCD[ABWIDX2];

          /* (Warehouse Cd)*/
  VBCOLR02.XWHCD = AB0QW02.XWHCD[ABWIDX2];

          /* (Division Cd)*/
  VBCOLR02.XDVCD = AB0QW02.XDVCD[ABWIDX2];

         /* (Season code)*/
  VBCOLR02.XSECD = AB0QW02.XSECD[ABWIDX2];

         /* (Season year)*/
  VBCOLR02.XSNYR = AB0QW02.XSNYR[ABWIDX2];

          /* (Factory code)*/
   /* MOVE '****' TO AB5REC.FY1FCTYC;*/
  VBCOLR02.FY1FCTYC = AB0QW02.FY1FCTYC[ABWIDX2];

           /* (PO type)*/
  VBCOLR02.PC4ORTYP = AB0QW02.PC4ORTYP[ABWIDX2];

          /* (Customer id)*/
  VBCOLR02.PC2CUXID = AB0QW02.PC2CUXID[ABWIDX2];

           /* (Buy Month)*/
  VBCOLR02.AB3BUYMO = XP1REC.AB3BUYMO;



   /* *==========================**/
   /* *  Access DABUY.VBCOLR01   **/
   /* *==========================**/

   /* -------------------------Y2K OUT BEGIN-------------------------*/
   /*  */
   /* CALL VBCOLR02 'S1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;/* Select*/
   /*  */
   /* -------------------------Y2K OUT END---------------------------*/
   /* -------------------------Y2K IN BEGIN-------------------------*/
   /*  */
  try
    call "VBCOLR03" ("S1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
   /*  */
   /* -------------------------Y2K IN END---------------------------*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VBCOLR02.VBCOLR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/

  return; /* Return to previous process*/



end // end AB0QS21

// Process 1st DABUY.VBCOLR01 row
Function AB0QS22()
   /* ------------------------------------------------------------*/
   /* Fetch the first row from the selected set of rows.*/
   /* If found, set color indicator.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VBCOLR02  **/
   /* *=========================**/

   /* ----------------------Y2K OUT BEGIN--------------------*/
   /*  */
   /* CALL VBCOLR02 'N1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;*/
   /*  */
   /* ----------------------Y2K OUT END----------------------*/
   /* ----------------------Y2K IN BEGIN--------------------*/
   /*  */
  try
    call "VBCOLR03" ("N1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end
   /*  */
   /* ----------------------Y2K IN END----------------------*/
                                                      /* Fetch the next row*/

   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/

      AB0QW02.AB0QWCLI[ABWIDX2] = "Y"; /* Indicate colors exist*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to calling process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S22 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Return to previous process*/
end // end AB0QS22

// Close DABUY.VBCOLR01 cursor
Function AB0QS23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=========================**/
   /* *  Access DABUY.VBCOLR02  **/
   /* *=========================**/

   /* -------------------------Y2K OUT BEGIN-------------------------*/
   /*  */
   /* CALL VBCOLR02 'C1',SQLCA,VBCOLR02 (NOMAPS,NONCSP,REPLY;/* Close set*/
   /*  */
   /* -------------------------Y2K OUT END---------------------------*/
   /* -------------------------Y2K IN BEGIN-------------------------*/
   /*  */
  try
    call "VBCOLR03" ("C1", SQLCA, VBCOLR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
   /*  */
   /* -------------------------Y2K IN END---------------------------*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "S23 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBCOLR02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AB0QS23

// determine next buy month
Function AB0QS24()
   /* ------------------------------------------------------------*/
   /* determine next buy month*/
   /* ------------------------------------------------------------*/

   /* Select set DABUY.VBPLAN01 table row.*/

  set AB4REC empty; /* Clear record work area*/
  AB4REC.SY1STNBR = AB0QW02.SY1STNBR[AB0QWCST];
  AB4REC.XDMCD = AB0QW02.XDMCD[AB0QWCST];
  AB4REC.XWHCD = AB0QW02.XWHCD[AB0QWCST];
  AB4REC.XDVCD = AB0QW02.XDVCD[AB0QWCST];
  AB4REC.XSECD = AB0QW02.XSECD[AB0QWCST];
  AB4REC.XSNYR = AB0QW02.XSNYR[AB0QWCST];
  AB4REC.FY1FCTYC = "*"; /* for all factories*/
  AB4REC.PC4ORTYP = AB0QW02.PC4ORTYP[AB0QWCST];
  AB4REC.PC2CUXID = AB0QW02.PC2CUXID[AB0QWCST];
  AB4REC.XOWCD = "00";

  try
    call "IO3570" ("S1", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
     /* next sentence                 ; return to calling process*/
  else
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    if (sysVar.errorCode == "00000000" /* successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "S24 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
    TA1REC.TA1TBLKE = AB4REC.AB4KEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    AB0QM001.XXXPRCNM = ABWREC.ABWERLOC; /* process name*/
    return; /* Return to previous process*/
  end

   /* select set successful - begin fetch of data*/

  AB0QW01.AB3BUYMO = 0; /* init save next buy mth*/
  ABWREC.ABWSWC = "N"; /* Init end of file switch*/
  while (ABWREC.ABWSWC == "N")
    AB0QS06(); /* fetch ab4rec*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
    else
      if (AB4REC.AB3BUYMO > XP1REC.XP1BUYMO
       && AB4REC.XOWCD == "00")
        if (AB4REC.AB3BUYST == "B" /* stat must be b, s*/
         || AB4REC.AB3BUYST == "S")
          AB0QW01.AB3BUYMO = AB4REC.AB3BUYMO; /* save next buy mth*/
          ABWREC.ABWSWC = "Y"; /* Force end of file*/
        end
      end
    end
  end

  AB0QS07(); /* close cursor*/
end // end AB0QS24

// Setup BLA month range
Function AB0QS25()
   /* ------------------------------------------------------------*/
    /* Setup acceptable date range for bla month processing*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  XX0XW01.XX0XWDD = 01;
  AB0QW01.AB0QW-MIN-MONTH-SELECT = XX0XW01.XX0XWDAT;

  XX0XW01.XX0XWMM = XX0XW01.XX0XWMM + 7;
  if (XX0XW01.XX0XWMM > 12)
    XX0XW01.XX0XWMM = XX0XW01.XX0XWMM - 12;
    if (XX0XW01.XX0XWYY == 99)
   /* ----------------Y2K OUT BEGIN------------------*/
   /*  */
   /* MOVE 1 TO XX0XW01.XX0XWYY;*/
   /*  */
   /* ----------------Y2K OUT END--------------------*/
   /* ----------------Y2K IN BEGIN------------------*/
   /*  */
      XX0XW01.XX0XWYY = 0;
   /*  */
   /* ----------------Y2K IN END--------------------*/
      XX0XW01.XX0XW19 = XX0XW01.XX0XW19 + 1;
    else
      XX0XW01.XX0XWYY = XX0XW01.XX0XWYY + 1;
    end
  end

  XX0XW01.XX0XWDD = 99;
  AB0QW01.AB0QW-MAX-MONTH-SELECT = XX0XW01.XX0XWDAT;

end // end AB0QS25

// Edit BLA month
Function AB0QS26()
   /* -----------------------------------------------------*/
   /* VERFIFY MONTH IS WITHIN THE MIN AND MAX BOUNDARIES*/
   /* -----------------------------------------------------*/

  if (AB0QM001.AB0QM-BLA-MONTH[ABWIXM] == 0) /* bla month removed*/
    /* UPDATE IS VALID*/
    move "U" to AB0QW03.AB0QWFUS[1] for all; /* * Tag ALL factories for update*/
    AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/

    return;
  end

   /* Build Date*/
  AB0QW01.AB0QW-BM-YYMM-WORK-DATE = AB0QM001.AB0QM-BLA-MONTH[ABWIXM];
  if (AB0QW01.AB0QW-BM-YYMM-WORK-DATE > 7500)
    AB0QW01.AB0QW-BM-CC-WORK-DATE = 19;
  else
    AB0QW01.AB0QW-BM-CC-WORK-DATE = 20;
  end

  AB0QW01.AB0QW-BM-DD-WORK-DATE = 15;

  if (AB0QW01.AB0QW-BLA-MONTH-WORK-DATE < AB0QW01.AB0QW-MIN-MONTH-SELECT)
    converseLib.validationFailed(191);
    set AB0QM001.AB0QM-BLA-MONTH[ABWIXM] cursor, bold;
    return;
  else
    if (AB0QW01.AB0QW-BLA-MONTH-WORK-DATE > AB0QW01.AB0QW-MAX-MONTH-SELECT)
      converseLib.validationFailed(192);
      set AB0QM001.AB0QM-BLA-MONTH[ABWIXM] cursor, bold;
      return;
    end
  end

   /* UPDATE IS VALID*/
  move "U" to AB0QW03.AB0QWFUS[1] for all; /* * Tag ALL factories for update*/
  AB0QW03.AB0QWRST = "U "; /* Tag for updates present*/

end // end AB0QS26

//*** RECORD=AB0QW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB0QW01 type basicRecord
  10 AB0QWCID AB0QWCID ; 
  10 AB0QWEND AB0QWEND ; 
  10 AB0QWDCI AB0QWDCI ; 
  10 AB0QWBLQ AB0QWBLQ ; 
  10 AB3BUYMO AB3BUYMO ; 
  10 AB0QWBP AB0QWBP [50] ; 
  10 AB0QWBPT AB0QWBPT ; 
  10 AB0QWCFL AB0QWCFL ; 
    15 AB0QWCF1 AB0QWCF1 ; 
    15 AB0QWCF2 AB0QWCF2 ; 
    15 AB0QWCF3 AB0QWCF3 ; 
    15 AB0QWCF4 AB0QWCF4 ; 
    15 AB0QWCF5 AB0QWCF5 ; 
    15 AB0QWCF6 AB0QWCF6 ; 
    15 AB0QWCF7 AB0QWCF7 ; 
  10 AB0QWCRL AB0QWCRL ; 
    15 AB0QWCR1 AB0QWCR1 ; 
    15 AB0QWCR2 AB0QWCR2 ; 
    15 AB0QWCR3 AB0QWCR3 ; 
    15 AB0QWCR4 AB0QWCR4 ; 
    15 AB0QWCR5 AB0QWCR5 ; 
    15 AB0QWCR6 AB0QWCR6 ; 
    15 AB0QWCR7 AB0QWCR7 ; 
  10 AB0QWCIN AB0QWCIN ; 
  10 AB0QWCMX AB0QWCMX ; 
  10 AB0QWCRA AB0QWCRA [10] ; 
  10 AB0QWCRP AB0QWCRP ; 
  10 AB0QWCST AB0QWCST ; 
  10 AB0QWCSS AB0QWCSS ; 
  10 AB0QWFGT AB0QWFGT ; 
  10 AB0QWFCP AB0QWFCP ; 
  10 AB0QWSCP AB0QWSCP ; 
  10 AB0QWFMX AB0QWFMX ; 
  10 AB0QWFRA AB0QWFRA [50] ; 
  10 AB0QWFSM AB0QWFSM [50] ; 
  10 AB0QWFSZ AB0QWFSZ ; 
  10 AB0QWMST AB0QWMST ; 
  10 AB0QWNBP AB0QWNBP [50] ; 
  10 AB0QWNBT AB0QWNBT ; 
  10 AB0QWQCT AB0QWQCT ; 
  10 AB0QWQTM AB0QWQTM ; 
  10 AB0QWQTT AB0QWQTT ; 
  10 AB0QWQTW AB0QWQTW ; 
  10 AB0QWSCH AB0QWSCH ; 
  10 AB0QWSIX AB0QWSIX ; 
  10 AB0QWSLM AB0QWSLM ; 
  10 AB0QWSST AB0QWSST ; 
  10 AB0QWSTS AB0QWSTS ; 
  10 AB0QWSZC AB0QWSZC ; 
  10 AB0QWTSP AB0QWTSP ; 
  10 AB0QWUPI AB0QWUPI ; 
  10 AB0QWUPD AB0QWUPD ; 
  10 AB0QWVSD AB0QWVSD ; 
  10 AB0QWXSA AB0QWXSA ; 
    15 AB0QWXSS AB0QWXSS ; 
    15 AB0QWXYR AB0QWXYR ; 
  10 AB0QWXSY AB0QWXSY ; 
  10 AB0QW-LONG-SHORT-TOTAL AB0QW-LONG-SHORT-TOTAL ; 
  10 AB0QW-BOTTOM-LINE-TOTAL AB0QW-BOTTOM-LINE-TOTAL ; 
  10 AB0QW-BLA-MONTH-WORK-DATE AB0QW-BLA-MONTH-WORK-DATE ; 
    15 AB0QW-BM-CC-WORK-DATE AB0QW-BM-CC-WORK-DATE ; 
    15 AB0QW-BM-YYMM-WORK-DATE AB0QW-BM-YYMM-WORK-DATE ; 
    15 AB0QW-BM-DD-WORK-DATE AB0QW-BM-DD-WORK-DATE ; 
  10 AB0QW-MAX-MONTH-SELECT AB0QW-MAX-MONTH-SELECT ; 
  10 AB0QW-MIN-MONTH-SELECT AB0QW-MIN-MONTH-SELECT ; 
  10 AB0QW-PT3YYMM AB0QW-PT3YYMM ; 
end // end AB0QW01

//*** RECORD=AB0QW02 ****
// *****************************************************
// Application Working Storage (2): Map Detail Save Area
// *****************************************************
// ***********************
Record AB0QW02 type basicRecord
  5 AB0QWSTY AB0QWSTY [1500] ; 
    10 SY1STNBR SY1STNBR ; 
    10 XDMCD XDMCD ; 
    10 XWHCD XWHCD ; 
    10 XDVCD XDVCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC2CUXID PC2CUXID ; 
    10 AB0QWCLI AB0QWCLI ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 AB6BKFNI AB6BKFNI ; 
end // end AB0QW02

//*** RECORD=AB0QW03 ****
// *****************************************************
// Application Working Storage (3): Map Detail Work Area
// *****************************************************
// ***********************
Record AB0QW03 type basicRecord
  5 AB0QWTSW AB0QWTSW ; 
    10 AB0QWRST AB0QWRST ; 
    10 AB0QWCLR AB0QWCLR ; 
    10 AB0QWPCT AB0QWPCT ; 
    10 AB0QWFLT AB0QWFLT ; 
    10 AB0QWLS AB0QWLS ; 
    10 AB0QWBLA AB0QWBLA ; 
    10 PT3YYMM PT3YYMM ; 
    10 AB0QWABQ AB0QWABQ [20] ; 
    10 AB0QWBST AB0QWBST [20] ; 
    10 AB0QWCHC AB0QWCHC [20] ; 
    10 AB0QWFUS AB0QWFUS [20] ; 
end // end AB0QW03

//*** RECORD=AB0QW04 ****
// *****************************************************
// Application Working Storage (4): TSQ Record Layout
// *****************************************************
// ***********************
Record AB0QW04 type basicRecord
  10 AB0QWLEN AB0QWLEN ; 
  10 AB0QWTS AB0QWTS ; 
    15 AB0QWTSR AB0QWTSR [10] ; 
end // end AB0QW04

//*** RECORD=VBCOLR02 ****
// ********* SEASON/FACTORY/STYLE/COLOR/BUY MONTH *************
// 
// DB2 TABLE:           DABUY.VBCOLR02
// 
// COPYLIB MEMBER:      Dbcolr02
// 
// I/O MOD:             vbcolr02
// 
// KEY TO DB2 TABLE:    SY1STNBR
//                      SY2CLRID
//                      XDMCD
//                      XWHCD
//                      XDVCD
//                      XSECD
//                      XSNYR
//                      FY1FCTCD
//                      PC4ORTYP
//                      PC2CUXCD
//                      AB3BUYMO
// 
// DATE CREATED:        09/13/96
// 
// MAINTENANCE LOG:
// 
//   DATE      INIT.      COMMENT
// --------    --------   -------------------------------------
// 09/13/96    KJ         INITIAL RECORD CREATION
// 12/06/1997  TTHAN1     Y2KFIX - CHANGE SIZE OF AB3BUYMO
//                        FROM 4  TO 9.
// 12/06/1997  TTHAN1     Y2KFIX - CHANGE SIZE OF PT3YYMM
//                        FROM 4  TO 9.
// ************************
Record VBCOLR02 type basicRecord
  5 VBCOLR02-GROUP VBCOLR02-GROUP ; 
    10 VBCOLR02-KEY VBCOLR02-KEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XWHCD XWHCD ; 
      15 XDVCD XDVCD ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 PC2CUXID PC2CUXID ; 
      15 AB3BUYMO AB3BUYMO ; 
    10 XPCCD XPCCD ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 AB3BUYST AB3BUYST ; 
    10 AB3BYSDT AB3BYSDT ; 
    10 PT3YYMM PT3YYMM ; 
    10 AB5ACTBY AB5ACTBY ; 
    10 AB5ABLAQ AB5ABLAQ ; 
    10 AB5BUYPC AB5BUYPC ; 
    10 AB5DEBLA AB5DEBLA ; 
    10 AB5DEBUY AB5DEBUY ; 
    10 AB5EXQTY AB5EXQTY ; 
    10 AB5DTQTY AB5DTQTY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VBCOLR02

// Bla Month Work Area
DataItem AB0QW-BLA-MONTH-WORK-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bla month century
DataItem AB0QW-BM-CC-WORK-DATE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bla month day
DataItem AB0QW-BM-DD-WORK-DATE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bla month/yymm
DataItem AB0QW-BM-YYMM-WORK-DATE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line availability accum
DataItem AB0QW-BOTTOM-LINE-TOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// long short total accumulator
DataItem AB0QW-LONG-SHORT-TOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max range BLA month out can go
DataItem AB0QW-MAX-MONTH-SELECT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Min range BLA month out can go
DataItem AB0QW-MIN-MONTH-SELECT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AB0QW-PT3YYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory Actual buy qty
DataItem AB0QWABQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory BLA qty
DataItem AB0QWBLA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BLA qty wk
DataItem AB0QWBLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory Buy Plan qty
DataItem AB0QWBP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory Buy Plan total
DataItem AB0QWBPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory Buy status
DataItem AB0QWBST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 1
DataItem AB0QWCF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 2
DataItem AB0QWCF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 3
DataItem AB0QWCF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 4
DataItem AB0QWCF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 5
DataItem AB0QWCF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 6
DataItem AB0QWCF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center fld 7
DataItem AB0QWCF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center desc wk 1
DataItem AB0QWCFL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color/factory change count
DataItem AB0QWCHC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color locate ind
DataItem AB0QWCID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map Qty change indicator
DataItem AB0QWCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color row indicator
DataItem AB0QWCLI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color cd id
DataItem AB0QWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color reference max ptr
DataItem AB0QWCMX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory center rcv fld 1
DataItem AB0QWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 2
DataItem AB0QWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 3
DataItem AB0QWCR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 4
DataItem AB0QWCR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 5
DataItem AB0QWCR5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 6
DataItem AB0QWCR6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center rcv fld 7
DataItem AB0QWCR7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color reference array
DataItem AB0QWCRA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory center desc wk 2
DataItem AB0QWCRL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Color reference ptr
DataItem AB0QWCRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style in process save
DataItem AB0QWCSS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style in process
DataItem AB0QWCST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Contention ind
DataItem AB0QWDCI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end process switch
DataItem AB0QWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory reference ptr
DataItem AB0QWFCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory Qty Grand Total
DataItem AB0QWFGT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory qty line total
DataItem AB0QWFLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory reference max ptr
DataItem AB0QWFMX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory reference array
DataItem AB0QWFRA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory qty grand totals
DataItem AB0QWFSM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max. no. of factories
DataItem AB0QWFSZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color/Factory update status
DataItem AB0QWFUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ record length
DataItem AB0QWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory long/short qty
DataItem AB0QWLS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max styles retrieved
DataItem AB0QWMST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory New Buy Plan Qtys
DataItem AB0QWNBP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory New Buy Plan total
DataItem AB0QWNBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color pct
DataItem AB0QWPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty Style/Color Total
DataItem AB0QWQCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map Qty accum wk
DataItem AB0QWQTM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty totals wk
DataItem AB0QWQTT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved Qty accum wk
DataItem AB0QWQTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ sub-record status
DataItem AB0QWRST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit scheduler id indicator
DataItem AB0QWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory reference ptr save
DataItem AB0QWSCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size row store index
DataItem AB0QWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style array max size
DataItem AB0QWSLM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current style in process save
DataItem AB0QWSST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style select indicator
DataItem AB0QWSTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style save area
DataItem AB0QWSTY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size count + 1
DataItem AB0QWSZC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ record
DataItem AB0QWTS char(1820)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem AB0QWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ record description
DataItem AB0QWTSR char(182)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ sub-record work area
DataItem AB0QWTSW char(182)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update status indicator
DataItem AB0QWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Updates present indicator
DataItem AB0QWUPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid style search indicator
DataItem AB0QWVSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB0QWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB0QWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB0QWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB0QWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group item for record level
DataItem VBCOLR02-GROUP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ab5rec key
DataItem VBCOLR02-KEY char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

