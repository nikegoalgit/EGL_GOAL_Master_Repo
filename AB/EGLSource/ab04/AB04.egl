package ab04;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=AB04 ****
// This application allows the user to submit a batch job which
// will create the Size Break Table.
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/23/89  JRAMOS  New application.
//          03/21/90  wkinca  modify notify on job card in jcl.
//          07/16/90  jwood   removed ut2rec from t&r list
//          11/04/93  sbabco  add parameter card
// Y2KFIX   12/??/97  DBETTR  zero fill year input on map
//                            AB04M001. recompile.
// ab0312a  06/24/98  schen   change to carry over new parms
//                            for generic buy.
// ab0312a  08/24/98  rharat  change to AB04140 to submit PROD
//                            JCL in production region.
// *********************
Program AB04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB04W01 AB04W01; // record
  AB3REC AB3REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB04T01; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AB04M.AB04M001,  // forms
      AB04M.TA0PM001, 
      AB04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/

    set AB04M001 initial; /* Initialize map output area*/
    set AB04W01 empty; /* Initialize working storage*/
    set ABPREC empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AB04"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/

                     /* (Set map item values)*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AB04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

                     /* (Process COMMAREA items:)*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AB04M001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AB04M001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end


    AB04M001.XSE-SESN-CD = XP1REC.XSECD; /* Pass data to map*/
    AB04M001.XSN-SESN-YR-RNG = XP1REC.XSNYR; /* Pass data to map*/
    XP1REC.XXXUSER = COMMAREA.CAUSERID; /* Get logon id*/
    AB04M001.XXX-USER-ID = COMMAREA.CAUSERID; /* Pass data to map*/

    goto AB04001; /* Converse the main process*/


    AB04001: AB04001();

    goto AB04001; /* Converse the main process*/

  end // end main
end // end AB04

// Application main process
Function AB04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* -- Display the first (and only) map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/

  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/


  if (ABWREC.ABWFIRST == " ") /* First time through*/

    XPAB010(); /* Get scheduler code*/

    if (XP1REC.XP1MNO == 0) /* No errors found*/
      ABWREC.ABWPRCSN = "001 "; /* Process number*/
      AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      XP1REC.XP1MNO = 79; /* Indicate ready to submit*/
    end

  end


   /* *===============**/
   /* *  Display map  **/
   /* *===============**/

  AB04100(); /* Display map*/


end // end AB04001

// Driver process for application
Function AB04100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB04110(); /* Format and display the map*/

  AB04120(); /* Check attention identifier*/

  AB04130(); /* Reset fields to normal intensity*/

  AB04140(); /* Process valid input request*/


end // end AB04100

// Format and display the map
Function AB04110()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/


  if (XP1REC.XP1MNO != 0) /* Error message to display*/
    set AB04M001 alarm; /* Indicate sound alarm*/
  end

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move message no. for display*/

  XP1REC.XP1MNO = 0; /* Reset work message area*/

  ABPREC.TARJCL = COMMAREA.CA-USER-WORKAREA-2K-B; /* restore parms*/


  converse AB04M001 ;

  ABWREC.ABWFIRST = "N"; /* Set first time switch off*/


end // end AB04110

// Check attention identifier
Function AB04120()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (AB04M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB04M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB04M001.CAITEM; /* Application data*/
      XSABS02(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end

    set AB04M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB04M001.CAITEM > " ") /* Application data was entered*/
    set AB04M001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0MM001"; /* Appl find code*/
    end

    XSABS02(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end
end // end AB04120

// Reset highlighted fields
Function AB04130()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set AB04M001.CATOAP initialAttributes; /* TO application*/
  set AB04M001.CAITEM initialAttributes; /* Application data*/


end // end AB04130

// Process valid input request
Function AB04140()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 24) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

  if (COMMAREA.XCTH-THEATER-RUNTYPE == "PROD") /* If CICS Production Region*/
    AB04W01.AB04WIXT = 1;
  else
    if ("/*EOF" in AB04T01.TARJCL)
      AB04W01.AB04WIXT = sysVar.arrayIndex;
      AB04W01.AB04WIXT = AB04W01.AB04WIXT + 1;
    else
      AB04W01.AB04WIXT = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AB04W01.AB04WIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameters for the nil supply w/o demand submission*/
    /* ------------------------------------------------------------*/

    if (AB04T01.TARTYPE[AB04WIXT] == "P") /* Parameters statement*/
      set ABPREC empty; /* Reset parameters work ar*/
      ABPREC.TARJCL = COMMAREA.CA-USER-WORKAREA-2K-B; /**/
      ABPREC.PG1SC4CD = XP1REC.PG1SC4CD; /* Scheduler cd*/
      AB04W01.TARJCL = ABPREC.TARJCL; /* Parameter variables*/
      AB04T01.TARJCL[AB04WIXT] = AB04W01.TARJCL; /**/
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AB04T01.TARJCL[AB04WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AB04T01.TARTYPE[AB04WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AB04T01.TARJCL[AB04WIXT] == "/*EOF") /* End of table*/
      AB04W01.AB04WIXT = 0; /* Indicate end of table*/
    else
      AB04W01.AB04WIXT = AB04W01.AB04WIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AB04141(); /* Submit the JCL*/


end // end AB04140

// Submit Job/Select Printer
Function AB04141()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "151 "; /* Process number*/
  AB04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AB04141

//*** RECORD=AB04W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB04W01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AB04WSWS AB04WSWS ; 
  10 AB04WBAL AB04WBAL ; 
  10 AB04WXSA AB04WXSA ; 
    15 AB04WXSS AB04WXSS ; 
    15 AB04WXYR AB04WXYR ; 
  10 AB04WIXT AB04WIXT ; 
  10 AB04WXSY AB04WXSY ; 
end // end AB04W01

DataItem AB04WBAL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AB04WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted switch
DataItem AB04WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB04WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB04WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB04WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB04WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

