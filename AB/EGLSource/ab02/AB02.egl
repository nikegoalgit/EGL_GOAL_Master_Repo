package ab02;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=AB02 ****
// This application allows the user to submit a batch job which
// will create the Size Break Table.
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/23/89  JRAMOS  New application.
//          03/21/90  wkinca  modify notify on job card in jcl.
//          07/16/90  jwood   removed ut2rec from t&r list
//          11/11/93  SBABCO  Add scheduler code to the
//                            existing parameter card.
//          02/28/97  klee    Made scheduler modifiable so that
//                            reports may be done for any
//                            scheduler.
// Y2KFIX   01/05/98  dbettr  Altered Length of working storage
//                            record AB02W03 by 2 bytes to
//                            accommodate new AB3BUYMO length.
//          06/29/98  schen   change to pass parms from AB0T.
//          07/29/98  vswamy  replaced NIl with Gen on map.
//          08/26/98  rharat  modified AB02150 to submit PROD
//                            JCL in Prod region.
// *********************
Program AB02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB02W01 AB02W01; // record
  AB02W02 AB02W02; // record
  AB02W03 AB02W03; // record
  AB3REC AB3REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AB02T01; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AB02M.AB02M001,  // forms
      AB02M.TA0PM001, 
      AB02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/

    set AB02M001 initial; /* Initialize map output area*/
    set AB02W01 empty; /* Initialize working storage*/
    set AB02W02 empty; /* Initialize working storage*/
    set ABPREC empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set FY1REC empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AB02"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/

                     /* (Set map item values)*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AB02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

                     /* (Process COMMAREA items:)*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AB02M001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AB02M001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end

    AB02M001.XXX-USER-ID = COMMAREA.CAUSERID; /* Pass data to map*/
    XP1REC.XXXUSER = COMMAREA.CAUSERID;

    goto AB02001; /* Converse the main process*/


    AB02001: AB02001();

    goto AB02001; /* Converse the main process*/

  end // end main
end // end AB02

// Application main process
Function AB02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* -- Display the first (and only) map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/

  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/


  if (ABWREC.ABWFIRST == " ") /* First time through*/

    XPAB010();

    if (XP1REC.XP1MNO == 0) /* No errors found*/
      ABWREC.ABWPRCSN = "001 "; /* Process number*/
      AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    end

  end


   /* *===============**/
   /* *  Display map  **/
   /* *===============**/

  AB02100(); /* Display map*/


end // end AB02001

// Driver process for application
Function AB02100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AB02110(); /* Format and display the map*/

  AB02120(); /* Check attention identifier*/

  AB02130(); /* Reset fields to normal intensity*/

  AB02140(); /* Validate selection criteria*/

  AB02150(); /* Process valid input request*/


end // end AB02100

// Format and display the map
Function AB02110()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/


  if (XP1REC.XP1MNO != 0) /* Error message to display*/
    set AB02M001 alarm; /* Indicate sound alarm*/
  end

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move message no. for display*/

  XP1REC.XP1MNO = 0; /* Reset work message area*/



  converse AB02M001 ;

  ABWREC.ABWFIRST = "N"; /* Set first time switch off*/


end // end AB02110

// Check attention identifier
Function AB02120()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (AB02M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AB02M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AB02M001.CAITEM; /* Application data*/
      XSABS02(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end

    set AB02M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AB02M001.CAITEM > " ") /* Application data was entered*/
    set AB02M001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0MM001"; /* Appl find code*/
    end

    XSABS02(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end
end // end AB02120

// Reset highlighted fields
Function AB02130()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set AB02M001.SY1STNBR initialAttributes; /* STYLE NUMBER*/
  set AB02M001.SY2CLRID initialAttributes; /* STYLE COLOR*/
  set AB02M001.FY1FCTYC initialAttributes; /* FACTORY*/
  set AB02M001.AB02MMIN initialAttributes; /* MINIMUM*/
  set AB02M001.PC2CUXID initialAttributes; /* CUSTOMER*/
  set AB02M001.XXX-USER-ID initialAttributes; /* SCHEDULER*/
  set AB02M001.AB7PBYTP initialAttributes; /* ACTION TYPE*/
  set AB02M001.AB7PBYST initialAttributes; /* BUY STATUS*/
  set AB02M001.AB02MSEL initialAttributes; /* selection field*/

  set AB02M001.CATOAP initialAttributes; /* TO application*/
  set AB02M001.CAITEM initialAttributes; /* Application data*/





end // end AB02130

// Edit selection criteria
Function AB02140()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

   /* *************************************************************/
  if (AB02M001.XXX-USER-ID != AB02W02.PG1SC4CD)
    AB02W02.PG1SC4CD = AB02M001.XXX-USER-ID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.SY1STNBR != AB02W02.SY1STNBR)
    AB02W02.SY1STNBR = AB02M001.SY1STNBR;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.SY2CLRID != AB02W02.SY2CLRID)
    if (AB02W02.SY1STNBR == " "
     && AB02M001.SY2CLRID != " ")
      XP1REC.XP1MNO = 54;
      set AB02M001.SY2CLRID bold;
      set AB02M001.SY1STNBR cursor, bold;
    end
    AB02W02.SY2CLRID = AB02M001.SY2CLRID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.FY1FCTYC != AB02W02.FY1FCTYC)
    AB02W02.FY1FCTYC = AB02M001.FY1FCTYC;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.AB02MMIN != AB02W02.AB02WMIN)
    AB02W02.AB02WMIN = AB02M001.AB02MMIN;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.PC2CUXID != AB02W02.PC2CUXID)
    AB02W02.PC2CUXID = AB02M001.PC2CUXID;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.AB7PBYTP != AB02W02.AB02WACT)
    AB02W02.AB02WACT = AB02M001.AB7PBYTP;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.AB7PBYST != AB02W02.AB7PBYST)
    AB02W02.AB7PBYST = AB02M001.AB7PBYST;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end

  if (AB02M001.AB02MSEL != AB02W02.AB02WSEL)
    AB02W02.AB02WSEL = AB02M001.AB02MSEL;
    ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to verify*/
  end


   /* *************************************************************/

  AB02148(); /* edit sort selection code*/
  if (ABWREC.ABWSWR == "Y") /* if any selection criteria changed*/
    /* ============================================================*/
    /* ===       Put in edits of selection criteria HERE        ===*/
    /* ============================================================*/
    AB02147(); /* edit action/special action codes*/
    AB02146(); /* edit CUSTOMER code*/
    AB02145(); /* edit factory code*/
    AB02141(); /* edit style number*/
    AB02149(); /* edit scheduler*/
    AB02W01.AB02WSUB = "N";
  end
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  converseLib.clearScreen();

   /* ====================== END OF PROCESS ======================*/
end // end AB02140

// Edit STYLE
Function AB02141()
  if (AB02W02.SY1STNBR == " ") /* AB02w05 Field eq spaces*/
    AB02M001.SY1SSTNM = " "; /* Space out desc*/
    AB02W02.SY1SSTNM = " "; /* Space out desc*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/

  AB02142(); /* Select set style*/

  if (AB02M001.SY2CLRID > " ")
    while (AB02M001.SY2CLRID != PG2REC.SY2CLRID
     && SQLCA.VAGen_SQLCODE != 100)
      AB02143(); /* Validate style*/
    end
  else
    AB02143(); /* Validate style*/
  end

  AB02144(); /* Close style cursor*/



end // end AB02141

// select set style cursor
Function AB02142()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PG2REC empty; /* Reset rec work area*/

  PG2REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PG2REC.SY1STNBR = AB02W02.SY1STNBR; /* Style no.*/



   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "142 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNILPB01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB02142

// process style row
Function AB02143()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AB02W02.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB02M001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      AB02W01.AB02WSTF = "Y"; /* STYLE FOUND*/
      if (AB02W02.SY2CLRID > " "
       && AB02W02.SY2CLRID == PG2REC.SY2CLRID)
        AB02W02.SY2CLRAB = PG2REC.SY2CLRAB; /* move COLOR desc*/
        AB02M001.SY2CLRAB = PG2REC.SY2CLRAB; /* move COLOR desc*/
      end
      return; /* Return to calling process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      if (AB02W01.AB02WSTF != "Y") /* Style was not valid*/
        AB02W02.SY1STNBR = " "; /* Space out wk storage*/
        AB02W02.SY1SSTNM = " "; /* Space out desc*/
        AB02M001.SY1SSTNM = " "; /* Space out desc*/
        set AB02M001.SY1STNBR cursor, bold; /* Highlight field*/
        XP1REC.XP1MNO = 38; /* Indicate error message*/
      end
      if (AB02W02.SY2CLRID > " "
       && AB02W01.AB02WSTF == "Y") /* Style was valid*/
        AB02W02.SY2CLRID = " "; /* Space out wk storage*/
        AB02W02.SY2CLRAB = " "; /* Space out desc*/
        AB02M001.SY2CLRAB = " "; /* Space out desc*/
        XP1REC.XP1MNO = 91; /* Indicate error message*/
        set AB02M001.SY2CLRID cursor, bold; /* Highlight field*/
      end
      ABWREC.ABWPRCSN = "143 "; /* Process number*/
      return; /* Exit to calling rtn*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "143 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB02143

// close style cursor
Function AB02144()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "144 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AB02144

// edit Factory Code
Function AB02145()
  if (AB02W02.FY1FCTYC == " ") /* AB02W02 Field eq spaces*/
    AB02M001.FY1FCTYC = " "; /* Move blank Factory cd*/
    return; /* Return to calling process*/
  end


  if (AB02W02.FY1FCTYC == "?") /* Pop-up window requested*/
    AB02W02.FY1FCTYC = " "; /* Move blank Factory cd*/
    set AB02M001.FY1FCTYC cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "52G "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  FY1REC.FY1FCTYC = AB02W02.FY1FCTYC; /* Fld office*/


   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB02W02.FY1FCTYC = " "; /* Move blank Factory cd*/
      set AB02M001.FY1FCTYC cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 41; /* Indicate error message*/
      ABWREC.ABWPRCSN = "525 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "525 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB02145

// edit customer nbr
Function AB02146()
  if (AB02W02.PC2CUXID == " ") /* AB02W02 Field eq spaces*/
    AB02M001.PC2CUXID = " "; /* Move blank customer cd*/
    return; /* Return to calling process*/
  end


  if (AB02W02.PC2CUXID == "?") /* Pop-up window requested*/
    AB02W02.PC2CUXID = " "; /* Move blank customer cd*/
    set AB02M001.PC2CUXID cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 42; /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "146 "; /* Process number*/
    return; /* Return to calling process*/
  end


   /* ------------------------------------------------------------*/
   /* Verify if customer cd entered is found in dprodc.vprdcu01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set PC2REC empty; /* initialize db record*/
  PC2REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC2REC.PC2CUXID = AB02W02.PC2CUXID; /* customer*/


   /* *=============================**/
   /* *  Access Dprodc.vprdcu01     **/
   /* *=============================**/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AB02W02.PC2CUXID = " "; /* Move blank customer cd*/
      set AB02M001.PC2CUXID cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 48; /* Indicate error message*/
      ABWREC.ABWPRCSN = "146 "; /* Process number*/
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "146 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPRDCU01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AB02146

// edit action/special acion cds
Function AB02147()
             /* --------------------*/
             /* |edit Status  codes |*/
             /* --------------------*/

  if (AB02W02.AB7PBYST == " ") /* AB02W02 Field eq spaces*/
    AB02M001.AB7PBYST = " "; /* Move blank action cd*/
  else

    if (AB02W02.AB7PBYST != "F" /* did not meet factory minimum*/
     && AB02W02.AB7PBYST != "C" /* did not meet cust min*/
     && AB02W02.AB7PBYST != "T" /* tee shirt*/
     && AB02W02.AB7PBYST != "M") /* multiple factory*/
      AB02W02.AB7PBYST = " "; /* Move blank action  cd*/
      set AB02M001.AB7PBYST cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 81; /* Indicate pop-up window not available*/
      ABWREC.ABWPRCSN = "147 "; /* Process number*/
    end
  end

             /* ----------------------------*/
             /* |edit action codes |*/
             /* ----------------------------*/
  if (AB02W02.AB02WACT == " ") /* AB02W02 Field eq spaces*/
    AB02M001.AB7PBYTP = " "; /* Move blank ACTION CODE*/
  else

    if (AB02W02.AB02WACT != "B"  /* BOUGHT*/
     && AB02W02.AB02WACT != "P"  /* PULL FROM STOCK*/
     && AB02W02.AB02WACT != "R"  /* REDIRECT*/
     && AB02W02.AB02WACT != "S"  /* SKIP*/
     && AB02W02.AB02WACT != "AB" /* ALL BUY (b,R)*/
     && AB02W02.AB02WACT != "NB") /* NO BUY (P, S, BLANK)*/
      AB02W02.AB02WACT = " "; /* Move blank action*/
      set AB02M001.AB7PBYTP cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 80;
      ABWREC.ABWPRCSN = "147 "; /* Process number*/
    end
  end


end // end AB02147

// edit sort selection
Function AB02148()
             /* ----------------------------*/
             /* |edit sort selection codes |*/
             /* ----------------------------*/

  if (AB02W02.AB02WSEL != "1"
   && AB02W02.AB02WSEL != "2")
    AB02W02.AB02WSEL = " "; /* Move blank action  cd*/
    set AB02M001.AB02MSEL cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 90; /* Indicate sort selection not valid*/
    ABWREC.ABWPRCSN = "148 "; /* Process number*/
  end

end // end AB02148

// edit sort selection
Function AB02149()
             /* ----------------------------*/
             /* edit scheduler*/
             /* ----------------------------*/

  if (AB02M001.XXX-USER-ID == " ")
    AB02W03.PG1SC4CD = "*";
  else
    XP1REC.XP1ERRFL = " "; /* Reset error flag*/
    XP1REC.XXXUSER = AB02M001.XXX-USER-ID;

    XPAB010(); /* Obtain Scheduler Code*/

    /* ***** If a new scheduler is entered, get correct season/year*/

    if (XP1REC.XP1ERRFL == " ") /* IF scheduler code okay*/
      AB02W03.PG1SC4CD = XP1REC.PG1SC4CD;

      return; /* redisplay MAP*/

    end


    if (XP1REC.XP1ERRFL != " ") /* Scheduler Code not found*/
                   /* (field in error)*/
      ABWREC.ABWPRCSN = "528 "; /* Process number*/
      AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      XP1REC.XXXUSER = " "; /* Reset wk storage*/
      XP1REC.PG1SC4CD = " "; /* Reset save area*/
      AB02W03.PG1SC4CD = " ";

      set AB02M001.XXX-USER-ID cursor, bold; /* highlight field*/

      XP1REC.XP1MNO = 21; /* indicate error message*/
      return; /* Return to calling process*/

    end
  end


end // end AB02149

// Process valid input request
Function AB02150()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 24) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end

  AB02S01(); /* PERFORM PREPARE SUBMIT SCREEN*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

  if (COMMAREA.XCTH-THEATER-RUNTYPE == "PROD") /* If CICS Production reg*/
    AB02W01.AB02WIXT = 1;
  else
    if ("/*EOF" in AB02T01.TARJCL)
      AB02W01.AB02WIXT = sysVar.arrayIndex;
      AB02W01.AB02WIXT = AB02W01.AB02WIXT + 1;
    else
      AB02W01.AB02WIXT = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AB02W01.AB02WIXT > 0) /* Until end of table*/

    if (AB02T01.TARTYPE[AB02WIXT] == "P") /* Parameters statement*/

      AB02T01.TARJCL[AB02WIXT] = AB02W03.TARJCL;

    end

    AB02W03.PROC-TYPE = ABPREC.PROCESS-TYP; /* process type*/
    AB02W03.XOB-BASE-CD = ABPREC.XOB-BASE-OT-CD; /* base order cd*/
    AB02W03.XOT-ORD-TYP = ABPREC.XOT-ORD-TYP-CD; /* order typ cd*/
    AB02W03.XSO-SLS-OFC = ABPREC.XSO-SLS-OFC-ID; /* sales office cd*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AB02T01.TARJCL[AB02WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AB02T01.TARTYPE[AB02WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AB02T01.TARJCL[AB02WIXT] == "/*EOF") /* End of table*/
      AB02W01.AB02WIXT = 0; /* Indicate end of table*/
    else
      AB02W01.AB02WIXT = AB02W01.AB02WIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AB02151(); /* Submit the JCL*/


end // end AB02150

// Submit Job/Select Printer
Function AB02151()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "151 "; /* Process number*/
  AB02M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AB02151

// Set up batch parameters
Function AB02S01()

  set ABPREC empty;
  ABPREC.TARJCL = COMMAREA.CA-USER-WORKAREA-2K-B; /* parms*/
  /* MOVE ABPREC.PROCESS-TYP TO AB02W03.PROC-TYPE; /* process type*/
  /* MOVE ABPREC.XOB-BASE-OT-CD TO AB02W03.XOB-BASE-CD; /* base order cd*/
  /* MOVE ABPREC.XOT-ORD-TYP-CD TO AB02W03.XOT-ORD-TYP; /* order typ cd*/
  /* MOVE ABPREC.XSO-SLS-OFC-ID TO AB02W03.XSO-SLS-OFC; /* sales office cd*/

  set AB02W03 empty;


  if (AB02W02.SY1STNBR > " ")
    AB02W03.SY1STNBR = AB02W02.SY1STNBR;
  end

  if (AB02W02.SY2CLRID > " ")
    AB02W03.SY2CLRID = AB02W02.SY2CLRID;
  end

  if (AB02W02.FY1FCTYC > " ")
    AB02W03.FY1FCTYC = AB02W02.FY1FCTYC;
  end

  if (AB02W02.AB02WMIN > 0)
    AB02W03.AB02WMIN = AB02W02.AB02WMIN;
  end

  if (AB02W02.PC2CUXID > " ")
    AB02W03.PC2CUXID = AB02W02.PC2CUXID;
  end

  if (AB02W02.AB02WACT > " ")
    AB02W03.AB02WACT = AB02W02.AB02WACT;
  end

  if (AB02W02.AB7PBYST > " ")
    AB02W03.AB02WBST = AB02W02.AB7PBYST;
  end

  AB02W03.AB02WSEL = AB02W02.AB02WSEL;
  AB02W03.XSECD = XP1REC.XSECD;
  AB02W03.XSNYR = XP1REC.XSNYR;
  AB02W03.AB3BUYMO = XP1REC.AB3BUYMO;
  AB02W03.PG1SC4CD = XP1REC.PG1SC4CD;


end // end AB02S01

//*** RECORD=AB02W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AB02W01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AB02WSWS AB02WSWS ; 
  10 AB02WSTF AB02WSTF ; 
  10 AB02WSUB AB02WSUB ; 
  10 AB02WXSA AB02WXSA ; 
    15 AB02WXSS AB02WXSS ; 
    15 AB02WXYR AB02WXYR ; 
  10 AB02WIXT AB02WIXT ; 
  10 AB02WXSY AB02WXSY ; 
end // end AB02W01

//*** RECORD=AB02W02 ****
// selection criteria for abo2
// ***********************
Record AB02W02 type basicRecord
  15 SY1STNBR SY1STNBR ; 
  15 SY1SSTNM SY1SSTNM ; 
  15 FY1FCTYC FY1FCTYC ; 
  15 SY2CLRID SY2CLRID ; 
  15 SY2CLRAB SY2CLRAB ; 
  15 AB02WMIN AB02WMIN ; 
  15 PC2CUXID PC2CUXID ; 
  15 AB02WACT AB02WACT ; 
  15 AB7PBYST AB7PBYST ; 
  15 AB02WSEL AB02WSEL ; 
  15 AB02SNCD AB02SNCD ; 
  15 AB02SNYR AB02SNYR ; 
  15 AB02BYMO AB02BYMO ; 
  15 PG1SC4CD PG1SC4CD ; 
end // end AB02W02

//*** RECORD=AB02W03 ****
// Online->Batch parameter layout
// ***********************
Record AB02W03 type basicRecord
  10 TARJCL TARJCL ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY1SSTNM SY1SSTNM ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 AB02WMIN AB02WMIN ; 
    15 PC2CUXID PC2CUXID ; 
    15 AB02WACT AB02WACT ; 
    15 AB02WBST AB02WBST ; 
    15 AB02WSEL AB02WSEL ; 
    15 XSECD XSECD ; 
    15 XSNYR XSNYR ; 
    15 AB3BUYMO AB3BUYMO ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 PROC-TYPE PROC-TYPE ; 
    15 XOB-BASE-CD XOB-BASE-CD ; 
    15 XOT-ORD-TYP XOT-ORD-TYP ; 
    15 XSO-SLS-OFC XSO-SLS-OFC ; 
    15 * char(12) ; 
end // end AB02W03

// SORT SELECTION OPTION
DataItem AB02BYMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SORT SELECTION OPTION
DataItem AB02SNCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SORT SELECTION OPTION
DataItem AB02SNYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AB_PRPS_ACTN_TYP
DataItem AB02WACT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRPS_BUY_STAT
DataItem AB02WBST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AB02WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MINIMUMS
DataItem AB02WMIN int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SORT SELECTION OPTION
DataItem AB02WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE FOUND INDICATIOR
DataItem AB02WSTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// READY TO SUBMIT SWITCH
DataItem AB02WSUB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem AB02WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AB02WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AB02WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AB02WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AB02WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PROC-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XOB-BASE-CD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XOT-ORD-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XSO-SLS-OFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

