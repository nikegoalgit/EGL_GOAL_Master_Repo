package pv0f;
import corpcom3.XPPV001;
import corpcom3.XPPV440;
import corpcom3.XPPV960;
import corpcom3.XPPV970;
import corpcom3.XPPV990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSPVS58;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import fy.common.FY1REC;
import ku.common.KULREC;
import ku.common.KUMREC;
import pc.common.PC2REC;
import pc.common.PC3REC;
import pc.common.PC6REC;
import pc.common.PC7REC;
import pc.common.PCMIVQTY;
import pc.common.PCMREC;
import pv.common.*;
import sy.common.SY1REC;
import sy.common.SY4REC;
import sy.common.SY6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSHRCTDT;
import vv.common.VPVPMT01;
import xx.common.*;
import xx.common.YSRSLSRG;
import xx02.*;
import xx02.XFATBL;
import xx05.*;
import xx05.XSTTBL;
import xx06.*;
import xx06.XWHTBL;
//*** PROGRAM=PV0F ****
// ************************************************************
// *
// *   PV0F - Received/Shipped Not Invoiced Resolution
// *
// *   This application will be used to 'FORCE' the receiving
// *   where inventory has been shipped (Direct Ship) or
// *   received at the warehouse but an invoice has not been
// *   received.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       04-11-91  HVARGA  Initial Construction
// *       03-03-94  Mmalin  Chg sy6rec.sy6cstfl to
// *                         sy6rec.xqacd per table chgs
// *       07-18-94  CHELLM  Change DPROD.VDCOST001 msg.
// *       07-17-96  JLoyer  install bbasha mods to replace
// *                         pvovndsn with pvovndnm.
// *       11-23-99  GDECKE  NISSHO CONTINGENCY - WRITE PAYMENT
// *                         LINE TO DATABASE.
// *       02-22-00  JKUNDU  NISSHO CONTINGENCY - CHANGED IN
// *                         PV0FS-ADD-VPVPMT01  TO SET THE PMT
// *                         STATUS TO 'UN' WHEN HDR STAUS NOT
// *                         IN 'ER'.
// *       02-02-00  JKUNDU  CHANGED IN XSPVS56 TO ALLOW TO
// *                         CLOSE W/A ADJUSTMENTS OR DUMMY
// *                         CLOSE EVEN IF $ DIFF IS LESS THAN
// *                         1000.00 OR GREATER THAN -1000.00
// *       04-25-00  JKUNDU  CHANGED IN PV0KS11 TO MOVE
// *                         PV-IVC-ID TO PV-REF-IVC-ID
// ************************************************************
// *********************
Program PV0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PC7REC PC7REC; // record
  PCMREC PCMREC; // record
  PV0FW01 PV0FW01; // record
  PV0FW02 PV0FW02; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVFREC PVFREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVYREC PVYREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY4REC SY4REC; // record
  SY6REC SY6REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPVPMT01 VPVPMT01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFATBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PV0FM.PV0FM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0F000: PV0F000();
  end // end main
end // end PV0F

// PROCESS  Main Logic
Function PV0F000()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0F    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0F001(); /* Initialization Logic*/
  ;
  PV0FS01(); /* Check Who Invoked me*/
  ;
  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    PV0F100(); /* Converse PV0FM100*/
    PV0F110(); /* Check PF Keys and Exits*/
    PV0F120(); /* Check what to do next*/
  end
  ;
  exit program;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F000  ****/
end // end PV0F000

// INIT     Routine
Function PV0F001()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0FW01 empty;
  set TA2REC empty;
  set PVFREC empty;
  set PVLREC empty;
  set FY1REC empty;
  set PCMREC empty;
  set PC3REC empty;
  set PC6REC empty;
  set PC7REC empty;
  set SY1REC empty;
  set SY4REC empty;
  ;
  set PV0FM100 initial;
  ;
  XSPVS01(); /* Initialize PV Common Routine Fields*/
  PVUREC.PVUERROR[PVUERIVC] = " ";
  PVUREC.PVUERROR[PVUERVND] = " ";
  ;
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0FM100";
  ;
   /* Get System Date and Time*/
  PV0FS09();
  ;
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0F001  ****/
end // end PV0F001

// CONVERSE RCVD/SHPD not IVCD
Function PV0F100()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUINQRY == "Y")
    set PV0FM100.CATOAP cursor;
  end
  ;
  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0FM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0FM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0FM100.TA2TIMED = VGVar.currentFormattedTime;
  ;
  converse PV0FM100 ;
  ;
  if (PVUREC.PVUINQRY == "Y")
     /* next sentence*/
  else
    set PV0FM100.PC3PONBR cursor, initialAttributes;
    set PV0FM100.XGPCD initialAttributes;
    set PV0FM100.SY1STNBR initialAttributes;
    set PV0FM100.SY2CLRID initialAttributes;
    set PV0FM100.FY1FCTYC initialAttributes;
    set PV0FM100.SL1RCRNO initialAttributes;
    ;
    set PV0FM100.XUMCD initialAttributes;
    set PV0FM100.XQACD initialAttributes;
    set PV0FM100.XDMCD initialAttributes;
    set PV0FM100.PC2INSEG initialAttributes;
    set PV0FM100.XPGCD initialAttributes;
    set PV0FM100.PC2CUXID initialAttributes;
    set PV0FM100.YMTCD initialAttributes;
    set PV0FM100.XOWCD initialAttributes;
    set PV0FM100.XWHCD initialAttributes;
    set PV0FM100.TSHRCTDT initialAttributes;
    set PV0FM100.TSHCNTNR initialAttributes;
    set PV0FM100.PVBLNQTY initialAttributes;
    set PV0FM100.PV0FMCLO initialAttributes;
    set PV0FM100.PV0FMADJ initialAttributes;
    set PV0FM100.PVOVENDR initialAttributes;
    set PV0FM100.PVOVENDG initialAttributes;
    set PV0FM100.PV0FMDUM initialAttributes;
  end
  ;
  PV0FM100.PVAIVCID = " ";
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F100  ****/
end // end PV0F100

// CHECK    PF Keys and Exits
Function PV0F110()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XPPV001(); /* Check PV Standard PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pa1 /* CLEAR Fields*/
     || converseVar.eventKey is pf15) /* FORCE*/
       /* next sentence*/
    else
       /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F110  ****/
end // end PV0F110

// CHECK    What to do next
Function PV0F120()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0FS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0F150(); /* Check if allowed to continue*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F120  ****/
end // end PV0F120

// CHECK    if allowed to continu
Function PV0F150()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PVUREC.PVUENDOA = "Y"; /* Make sure we get out*/
      PV0FS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf15
       || converseVar.eventKey is pa1)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15)
      PV0FS60(); /* Validate Data Keyed in*/
      if (PVUREC.PVUERROR[PVUERKEY] == "Y")
         /* next sentence*/
      else
        PV0FS62(); /* Check Adj Type*/
        if (PVUREC.PVUERROR[PVUERGEN] == "Y")
           /* next sentence*/
        else
          PV0FS64(); /* Check Adj Consistency*/
          if (PVUREC.PVUERROR[PVUERGEN] == "Y")
             /* next sentence*/
          else
            if (converseVar.eventKey is pf15)
               /* FORCE*/
              PV0FS66(); /* One Adj Type needed*/
              if (PVUREC.PVUERROR[PVUERGEN] == "Y")
                 /* next sentence*/
              else
                if (PVUREC.PVUERROR[PVUERKEY] == "Y")
                   /* Enter Invoice Key Fields and Press Enter.*/
                  PVUREC.PVUERNBR = 3;
                  return;
                else
                  PV0F160(); /* Create Adjustment*/
                end
              end
            end
          end
        end
      end
    else
      if (converseVar.eventKey is pa1)
        PV0FM100.XUMCD = " ";
        PV0FM100.XQACD = " ";
        PV0FM100.XDMCD = " ";
        PV0FM100.PC2INSEG = " ";
        PV0FM100.XPGCD = " ";
        PV0FM100.PC2CUXID = " ";
        PV0FM100.YMTCD = " ";
        PV0FM100.XOWCD = " ";
        PV0FM100.XWHCD = " ";
        PV0FM100.TSHRCTDT = 0;
        PV0FM100.TSHCNTNR = " ";
        PV0FM100.PVBLNQTY = 0;
        PV0FM100.PCMIVQTY = 0;
        PV0FM100.PVAIVAMT = 0;
        PV0FM100.PV0FMCLO = " ";
        PV0FM100.PV0FMADJ = " ";
        PV0FM100.PV0FMDUM = " ";
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F150  ****/
end // end PV0F150

// CREATE   Adjustment
Function PV0F160()
   /* PV0F160*/
   /*  */
   /* 11-23-99  GDECKE  NISSHO CONTINGENCY - WRITE PAYMENT LINE TO*/
   /* DATABASE, CHG HDR REFERENCE FIELD*/
   /*  */
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Create Adjustment.                                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0F990(); /* Get Next Invoice Number*/
  PV0FM100.PVAIVCID = PVUREC.PVAIVCID;
  ;
  set PVAREC empty; /* Clear PVAREC for Accumulation*/
  PV0FS09(); /* Get System Date and Time*/
  PV0FS10(); /* Build Adjustment record*/
  ;
  if (PV0FM100.PV0FMCLO == "Y"
   || PV0FM100.PV0FMDUM == "Y")
    PVBREC.PVOVENDR = " ";
    PVBREC.PVOVENDG = " ";
  end
  ;
   /* This portion of the code will allow logic to split the line*/
   /* items into several rows if the FOB Price of the different*/
   /* sizes change.  PCMOSQTY and PCMIVQTY presents a problem in*/
   /* determining the breakdown of the Received Quantities into*/
   /* several line item rows.  For now, only one line item row is*/
   /* generated and the FOB Price of the Received biggest size is*/
   /* used for the line item FOB Price.  For a DUMMY CLOSE, only*/
   /* the quantity is filled out and the amount is set to zero.*/
  ;
  PVBREC.PVBLNINB = PVBREC.PVBLNINB + 1;
  PV0FM100.PVBLNQTY = PV0FM100.PVBLNQTY - PV0FM100.PCMIVQTY;
  PVBREC.PVBLNQTY = PV0FW01.PVBLNQTY;
  ;
  if (PV0FM100.PV0FMDUM == "Y")
    if (PCMREC.XRICD == "CL"
     || PCMREC.XRICD == "FC"
     || PCMREC.XRICD == "CA"
     || PCMREC.XRICD == "DC")
      PVBREC.PVBLNQTY = PVBREC.PVBLNQTY * -1;
    end
  end
  ;
  if (PV0FM100.PCMIVQTY == 0)
     /* next sentence*/
  else
    PVBREC.PVBLNQTY = PV0FM100.PCMIVQTY;
  end
  ;
  sysVar.arrayIndex = PV0FW01.PVBBSZNK;
  PVBREC.PVBBSZNK = sysVar.arrayIndex;
  PVBREC.PVBBSZDS = SY4REC.SY4IDDSC[sysVar.arrayIndex];
  ;
  sysVar.arrayIndex = PV0FW01.PVBESZNK;
  PVBREC.PVBESZNK = sysVar.arrayIndex;
  PVBREC.PVBESZDS = SY4REC.SY4IDDSC[sysVar.arrayIndex];
  PVBREC.PVBLNFOB = PC7REC.FY4FOBPR[sysVar.arrayIndex];
  ;
  if (PV0FM100.PV0FMDUM == "Y")
    PVBREC.PVBLNAMT = 0;
  else
    PVBREC.PVBLNAMT = PVBREC.PVBLNQTY * PVBREC.PVBLNFOB;
  end
  ;
  if (PV0FM100.PV0FMCLO == "Y")
    PVBREC.PCMOSQTY = PVBREC.PVBLNQTY * -1;
    PVBREC.PVBLNQTY = 0;
  end
  ;
  PVAREC.PVAIVAMT = PVAREC.PVAIVAMT + PVBREC.PVBLNAMT;
  PVAREC.PVATQTY = PVAREC.PVATQTY + PVBREC.PVBLNQTY;
  PV0F970(); /* Insert VPVITM01 Row*/
  ;
  PV0FS12(); /* Build Force Entry Record*/
  PV0F440(); /* Insert VFORCE01 Row*/
  ;
  PV0FS11(); /* Build Adjustment Header*/
  PV0FM100.PVAIVAMT = PVAREC.PVAIVAMT;
  ;
  PV0F960(); /* Insert VPVHDR01 Row*/
  ;
  PV0FS85(); /* Update VFYPO001 Row*/
  PV0FM100.XRICD = PCMREC.XRICD;
  ;
  PV0FS-ADD-VPVPMT01();
  ;
   /* Function Requested was successfully applied*/
  PVUREC.PVUERNBR = 92;
  PVUREC.PVUERROR[PVUERKEY] = "Y";
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F160  ****/
end // end PV0F160

// READ     VPOHDR01  (IO3270)
Function PV0F270()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VPOHDR01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PCMREC to PC3REC withV60Compat;
  ;
  set SQLCA empty;
  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.PC3PONBR cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* PO Header not found*/
      PVUREC.PVUERNBR = 112;
    else
      TA1REC.TA1LOC = "PV0F270";
      TA1REC.TA1DBASE = "DPRODC";
      TA1REC.TA1TBLVU = "VPOHDR01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F270  ****/
end // end PV0F270

// READ     VPOITM01  (IO3310)
Function PV0F310()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VPOITM01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PCMREC to PC6REC withV60Compat;
  PC6REC.PC6STAT = "CX";
  PC6REC.XPGCD = "*";
  PC6REC.PC2INSEG = "*";
  ;
  set SQLCA empty;
  call "IO3310" ("SF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  set SQLCA empty;
  call "IO3310" ("NF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      set SQLCA empty;
      call "IO3310" ("CF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
      ;
      move PCMREC to PC6REC withV60Compat;
      PC6REC.PC6STAT = "CX";
      PC6REC.XPGCD = "*";
      PC6REC.PC2INSEG = "*";
      if (PC6REC.XQACD == "01")
        PC6REC.XQACD = "02";
      else
        if (PC6REC.XQACD == "02")
          PC6REC.XQACD = "01";
        else
          PVUREC.PVUERROR[PVUERKEY] = "Y";
          set PV0FM100.PC3PONBR cursor;
           /* PO Item not found*/
          PVUREC.PVUERNBR = 90;
          return;
        end
      end
      ;
      set SQLCA empty;
      call "IO3310" ("SF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
      ;
      set SQLCA empty;
      call "IO3310" ("NF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        PVUREC.PVUERROR[PVUERKEY] = "Y";
        set PV0FM100.PC3PONBR cursor;
        if (SQLCA.VAGen_SQLCODE == +100)
           /* PO Item not found*/
          PVUREC.PVUERNBR = 90;
        else
          TA1REC.TA1LOC = "PV0F310";
          TA1REC.TA1DBASE = "DPRODC";
          TA1REC.TA1TBLVU = "VPOITM01";
          TA1REC.TA1TBLKE = PCMREC.PCMKEY;
          XSPVS52();
        end
      end
    else
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.PC3PONBR cursor;
      TA1REC.TA1LOC = "PV0F310";
      TA1REC.TA1DBASE = "DPRODC";
      TA1REC.TA1TBLVU = "VPOITM01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  set SQLCA empty;
  call "IO3310" ("CF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F310  ****/
end // end PV0F310

// READ     VDCOST01  (IO0360)
Function PV0F360()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VDCOST01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PCMREC to SY6REC withV60Compat;
  SY6REC.XCOCD = "01";
  SY6REC.XQACD = PCMREC.XQACD;
  ;
  set SQLCA empty;
  call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0FW01.PV0FWCT1 = 0;
    set PC7REC empty;
    while (PV0FW01.PV0FWCT1 < 40)
      PV0FW01.PV0FWCT1 = PV0FW01.PV0FWCT1 + 1;
      PC7REC.FY4FOBPR[PV0FWCT1] = SY6REC.SY6CSTUN[1];
    end
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.SY1STNBR cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* Style Cost not found*/
      PVUREC.PVUERNBR = 89;
    else
      TA1REC.TA1LOC = "PV0F360";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VDCOST01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F360  ****/
end // end PV0F360

// INSERT   FORCE ENTRY Row
Function PV0F440()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert VFORCE01 Row                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "A ";
  XPPV440(); /* IOMOD VFORCE01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F440  ****/
end // end PV0F440

// READ     VPOSIZ01  (IO3640)
Function PV0F640()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VDCOST01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PC6REC to PC7REC withV60Compat;
  ;
  set SQLCA empty;
  PV0F360();
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0FW01.PV0FWCT2 = 1;
    while (PV0FW01.PV0FWCT2 < 40)
      PV0FW01.PV0FWCT2 = PV0FW01.PV0FWCT2 + 1;
      PV0FW01.PV0FWCT1 = PV0FW01.PV0FWCT2 - 1;
      if (PC7REC.FY4FOBPR[PV0FWCT2] == 0)
        PC7REC.FY4FOBPR[PV0FWCT2] = PC7REC.FY4FOBPR[PV0FWCT1];
      end
    end
    sysVar.arrayIndex = PV0FW01.PVBESZNK;
    PV0FM100.PVAIVAMT = PV0FM100.PVBLNQTY * PC7REC.FY4FOBPR[sysVar.arrayIndex];
    /* JKUNDU CHANGE BEGIN - 02/29/00*/
    if (PV0FM100.PVAIVAMT < PVUREC.PVULIMT1
     || PV0FM100.PVAIVAMT > PVUREC.PVULIMT2)
       /* Adjustment memo amount exceeds your authorized limit*/
      PVUREC.PVUERNBR = 73;
      /* MOVE 230 TO PVUREC.PVUERNBR; /* COMMENTED ON 03/06/00*/
      /* JKUNDU CHANGE END   - 02/29/00*/
      PVUREC.PVUERROR[PVUERKEY] = "Y";
    else
      PVUREC.PVUERROR[PVUERKEY] = " ";
    end
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.PC3PONBR cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* PO Size not found*/
      PVUREC.PVUERNBR = 089;
    else
      TA1REC.TA1LOC = "PV0F640";
      TA1REC.TA1DBASE = "DPRODC";
      TA1REC.TA1TBLVU = "VPOSIZ01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F640  ****/
end // end PV0F640

// READ     VFYPO001  (IO3680)
Function PV0F680()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VFYPO001 (Receipts)                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PV0FM100 to PCMREC withV60Compat;
  ;
  PV0FS61(); /* Check Wildcards*/
  ;
  PV0FS80(); /* Convert Dates*/
  ;
  PVYREC.PVYFNC = "SA";
  set SQLCA empty;
  call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
  PV0FW01.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0FS81(); /* Compute Quantity*/
    move PCMREC to PV0FM100 withV60Compat;
    PV0FM100.PCMIVQTY = 0;
    PV0FS82(); /* Convert Dates*/
    if (PVUREC.PVUERROR[PVUERKEY] == " ")
      PVUREC.PVURCRD6 = "PCMREC";
      move PV0FM100 to PVUREC withV60Compat;
      COMMAREA.CAUSERA = PVUREC.PVUGROUP;
      if (PCMREC.XQACD == "02")
        PV0FW01.YSRSLSRG = "01"; /* GET BGRADE YSR_SLS_GEO_REG_CD*/
      else
        if (PCMREC.XWHCD == " ")
          PV0FS18(); /* GET DIRECT SHIP YSR_SLS_GEO_REG_CD*/
        else
          PV0FS17(); /* Get YSR_SLS_REG_GEO_CD*/
        end
      end
      if (PVUREC.PVUERROR[PVUERKEY] == " ")
        PV0F920(); /* Get Style*/
        if (PVUREC.PVUERROR[PVUERKEY] == " ")
          PV0F270(); /* Read POHDR Row*/
          if (PVUREC.PVUERROR[PVUERKEY] == " ")
            PV0F310(); /* Read POITM Row*/
            if (PVUREC.PVUERROR[PVUERKEY] == " ")
              PV0F640(); /* Read POSIZ Row*/
              if (PVUREC.PVUERROR[PVUERKEY] == " ")
                PV0F810(); /* Read Factory Code*/
              end
            end
          end
        end
        if (PVUREC.PVUERROR[PVUERKEY] == " ")
          set PV0FM100.PV0FMCLO cursor;
        end
      end
    end
  else
    PV0FM100.PVBLNQTY = 0;
    if (PV0FW01.VAGen_SQLCODE == +100)
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      PV0FW01.VAGen_SQLCODE = 0;
       /* Receipt not found*/
      PVUREC.PVUERNBR = 94;
    else
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple Row?*/
        if (PV0FW01.VAGen_SQLCODE == 0) /* First time?*/
           /* Please Enter Additional Qualifiers*/
          PVUREC.PVUERNBR = 83;
          PV0FS87(); /* Brighten additional fields*/
        else
           /* Multiple Row Found*/
          PVUREC.PVUERNBR = 84;
          PV0FW01.VAGen_SQLCODE = 0;
        end
      else
        TA1REC.TA1LOC = "PV0F680";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VFYPO001";
        TA1REC.TA1TBLKE = PCMREC.PCMKEY;
        XSPVS52();
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F680  ****/
end // end PV0F680

// UPDATE   VFYPO001 Row
Function PV0F685()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Update VFYPO001 Record                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO3680" ("U ", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOC = "PV0F685";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VFYPO001";
    TA1REC.TA1TBLKE = PCMREC.PCMKEY;
    XSPVS52();
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F685  ****/
end // end PV0F685

// READ     VFCTY001  (IO2810)
Function PV0F810()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VFCTY001 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  FY1REC.XGPCD = PCMREC.XGPCD;
  FY1REC.FY1FCTYC = PC6REC.FY1FCTYC;
  ;
  set SQLCA empty;
  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.FY1FCTYC cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* Factory Code not Found*/
      PVUREC.PVUERNBR = 91;
    else
      TA1REC.TA1LOC = "PV0F810";
      TA1REC.TA1DBASE = "DFCTY";
      TA1REC.TA1TBLVU = "VFCTY001";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F810  ****/
end // end PV0F810

// READ     VSTYLE01  (IO0120)
Function PV0F920()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VSTYLE01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PCMREC to SY1REC withV60Compat;
  ;
  set SQLCA empty;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0F940(); /* Read VSCALE01 Table*/
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.SY1STNBR cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* Style Not found*/
      PVUREC.PVUERNBR = 113;
    else
      TA1REC.TA1LOC = "PV0F920";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F920  ****/
end // end PV0F920

// READ     VSCALE01  (IO0040)
Function PV0F940()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VSCALE01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move SY1REC to SY4REC withV60Compat;
  ;
  set SQLCA empty;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.SY1STNBR cursor;
    if (SQLCA.VAGen_SQLCODE == +100)
       /* SCALE/SIZE Not found*/
      PVUREC.PVUERNBR = 114;
    else
      TA1REC.TA1LOC = "PV0F940";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSCALE01";
      TA1REC.TA1TBLKE = PCMREC.PCMKEY;
      XSPVS52();
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F940  ****/
end // end PV0F940

// INSERT   IVC HEADER
Function PV0F960()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Header                            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "A ";
  XPPV960(); /* IOMOD VPVHDR01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F960  ****/
end // end PV0F960

// INSERT   IVC ITEM
Function PV0F970()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Item                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "A ";
  XPPV970(); /* IOMOD VPVITM01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F970  ****/
end // end PV0F970

// READ     VENDOR NAME IO5680
Function PV0F980()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVOREC.PVOVENDR = PV0FM100.PVOVENDR;
  PVOREC.PVOVENDG = PV0FM100.PVOVENDG;
  ;
  set SQLCA empty;
  call "IO5680" ("S ", SQLCA, PVOREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PVOREC.PVOVENDR == "2577"
     && PVOREC.PVOVENDG == " ")
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* ADJ. Memos not Permitted for NISSHO Invoices*/
      PVUREC.PVUERNBR = 81;
      set PV0FM100.PVOVENDR cursor;
    end
  else
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    if (SQLCA.VAGen_SQLCODE == 100)
      PVOREC.PVOVNDNM = "*** NO NAME ***";
       /* Valid Vendor Required*/
      PVUREC.PVUERNBR = 88;
      set PV0FM100.PVOVENDR cursor;
    else
      TA1REC.TA1LOC = "PV0F980";
      TA1REC.TA1DBASE = "DPINVC";
      TA1REC.TA1TBLVU = "VPVEND01";
      TA1REC.TA1TBLKE = PV0FM100.PVOVENDR;
      XSPVS52();
    end
  end
  ;
  move PVOREC to PV0FM100 withV60Compat; /* Show Vendor Name*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F980  ****/
end // end PV0F980

// GET NEXT Invoice IO5690
Function PV0F990()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Next Invoice Number                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "S ";
  XPPV990(); /* IOMOD VPVCTL01*/
  ;
  XSPVS58(); /* Format Invoice Number*/
  ;
  PVFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVFREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PVYREC.PVYFNC = "U ";
  XPPV990(); /* IOMOD VPVCTL01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0F990  ****/
end // end PV0F990

// Load Pvarec for Update
Function PV0FS-ADD-VPVPMT01()
   /* Maintenance log:*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* 02-22-00  JKUNDU  NISSHO CONTINGENCY - CHANGED IN*/
   /* PV0FS-ADD-VPVPMT01  TO SET THE PMT*/
   /* STATUS TO 'UN' WHEN HDR STAUS NOT*/
   /* IN 'ER'.*/
   /* ******************************************************/
  ;
  set VPVPMT01 empty;
  ;
   /* FIND THE STATUS CODE THAT SHOULD BE ON THE PAYMENT LINES*/
  if (PVAREC.XIPCD == "IP")
    VPVPMT01.XIP-IVC-STAT-CD = "UN";
  else
    if (PVAREC.XIPCD == "NP")
      VPVPMT01.XIP-IVC-STAT-CD = "ER";
    else
   /* JKUNDU CHANGE BEGIN - 02/22/00*/
   /* MOVE 'ER' TO VPVPMT01.XIP-IVC-STAT-CD;*/
      VPVPMT01.XIP-IVC-STAT-CD = "UN";
   /* JKUNDU CHANGE END   - 02/22/00*/
    end
  end
  ;
   /* UPDATE FOB PAYMENT LINE - TYPE CODE 'FB'*/
  ;
   /* IF PVAREC.PVATFOB NE 0;*/
  if (PVAREC.PVAIVAMT != 0)
    ;
   /* cannot use the following because no valid source available*/
   /* for the fields. use pvarec values to fill in the fields.*/
   /* MOVE PVAREC.PVAIVCID TO VPVPMT01.PV-PMT-VEND-IVC-ID;*/
   /* MOVE PV0FW01.PV-PMT-VEND-NBR TO VPVPMT01.PV-PMT-VEND-NBR;*/
   /* MOVE PV0FW01.PV-PMT-VEND-GRP TO VPVPMT01.PV-PMT-VEND-GRP;*/
    ;
    VPVPMT01.PV-PMT-VEND-IVC-ID = PVAREC.PVAIVCID;
    VPVPMT01.PV-PMT-VEND-NBR = PVAREC.PVOVENDR;
    VPVPMT01.PV-PMT-VEND-GRP = PVAREC.PVOVENDG;
    ;
    VPVPMT01.PV-IVC-ID = PVAREC.PVAIVCID;
    VPVPMT01.PV-MSA-VEND-NBR = PVAREC.PVOVENDR;
    VPVPMT01.PV-MSA-VEND-GRP = PVAREC.PVOVENDG;
    ;
    VPVPMT01.XPV-IVC-TYP-CD = "FB";
   /* MOVE PVAREC.PVATFOB TO VPVPMT01.PV-PMT-IVC-AMT;*/
    VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVAIVAMT;
    VPVPMT01.PV-IVC-TO-AP-DT = 0;
    VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
    VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
    VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
    VPVPMT01.ZZ-CHNG-CNT = 0;
    PV0FW02.PV0FW-DBIO-FUNCTION = "A ";
    PV0FS-CALL-VPVPMT(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  end
  ;
end // end PV0FS-ADD-VPVPMT01

// Load Pvarec for Update
Function PV0FS-CALL-VPVPMT()
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UPDATE VPVPMT01 LINES*/
   /* FOR FOB.*/
   /* ******************/
   /* update PV0AM100 PAYMENT CHANGES*/
   /* ******************/
  ;
  ;
  set SQLCA empty;
  call "VPVPMT01" (PV0FW02, SQLCA, VPVPMT01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0   /* PAYMENT found--> UPDATE*/
   || SQLCA.VAGen_SQLCODE == 100 /* PAYMENT not found*/
   || SQLCA.VAGen_SQLCODE == -911
  )                              /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1LOCAT[2] = "SELECT DB2 PVPMT01";
    TA1REC.TA1LOC = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1DBASE = "DPINVC";
    TA1REC.TA1TBLVU = "VPVPMT01";
    TA1REC.TA1TBLKE = VPVPMT01.PV-IVC-ID;
    XSPVS52();
  end
  ;
end // end PV0FS-CALL-VPVPMT

// CHECK    Who Invoked me
Function PV0FS01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if the call was Legitimate                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  if (PVUREC.PVURCRD6 == "PCMREC")
    move PVUREC to PV0FM100 withV60Compat;
    PV0FM100.PVOVENDR = " ";
    PV0FM100.PVOVENDG = " ";
    PV0FM100.PVAIVCID = " ";
    PV0F680(); /* Read VFYPO001*/
  end
  ;
  PV0FS04(); /* Check Security Access Type*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS01  ****/
end // end PV0FS01

// GO BACK  to Calling Applicatio
Function PV0FS03()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSPVS60(); /* PV Common Exit*/
  PV0FS50(); /* Exit Routine*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS03  ****/
end // end PV0FS03

// CHECK    Security Access Type
Function PV0FS04()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **    This routine will set Inquiry only Flag if needed.  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (COMMAREA.CAADDFL == "N")
    PVUREC.PVUINQRY = "Y"; /* Set Inquiry mode*/
    PV0FS51(); /* Set fields to AUTOSKIP*/
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS04  ****/
end // end PV0FS04

// GET      System Date and Time
Function PV0FS09()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0FM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0FM100.TA2TIMED = TA2REC.TA2TIMED;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS09  ****/
end // end PV0FS09

// BUILD    Adjustment Item Rec
Function PV0FS10()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Adjustment Record                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PVBREC empty;
  move PVOREC to PVBREC withV60Compat;
  move PC3REC to PVBREC withV60Compat;
  move PC6REC to PVBREC withV60Compat;
  move PCMREC to PVBREC withV60Compat;
  PVBREC.YSRSLSRG = PV0FW01.YSRSLSRG;
  ;
  PVBREC.PVAIVCID = PV0FM100.PVAIVCID;
  ;
  PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS10  ****/
end // end PV0FS10

// BUILD    Adjustment Header Rec
Function PV0FS11()
   /* PV0FS11*/
   /* 11-23-99  GDECKE  NISSHO CONTINGENCY - REFERENCE INVOICE*/
   /*  */
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Adjustment Header Record                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PVOREC to PVAREC withV60Compat;
  move PC6REC to PVAREC withV60Compat;
  move PCMREC to PVAREC withV60Compat;
  ;
  if (PV0FW01.PV0FW-FOB-REC-FOUND == "Y")
    /* JKUNDU CHANGE BEGINS - 04/25/00*/
    /* MOVE PV0FW01.PV-PMT-VEND-IVC-ID TO PVAREC.PVARIVID;*/
    PVAREC.PVARIVID = PV0FW01.PV-IVC-ID;
    /* JKUNDU CHANGE BEGINS - 04/25/00*/
  else
    PVAREC.PVARIVID = " ";
  end
  ;
  PVAREC.PVAIVCID = PV0FM100.PVAIVCID;
  PVAREC.XIPCD = "MT";
  PVAREC.XIVCD = "AR";
  PVAREC.PVAFRMIN = " ";
  ;
  if (PV0FM100.PV0FMCLO == "Y"
   || PV0FM100.PV0FMDUM == "Y")
    PVAREC.PVOVENDR = " ";
    PVAREC.PVOVENDG = " ";
    if (PV0FM100.PV0FMDUM == "Y")
      PVAREC.XIVCD = "DC";
      PVAREC.XIPCD = "EX";
    else
      PVAREC.XIVCD = "RI";
    end
  end
  ;
  if (PC6REC.PC6XCTCD == "USA ")
    if (PC6REC.XGPCD == "02")
      PVAREC.PVAACRSP = "F";
    else
      if (PC6REC.XGPCD == "03")
        PVAREC.PVAACRSP = "A";
      end
    end
  else
    PVAREC.PVAACRSP = "N";
  end
  ;
  if (FY1REC.XCTCD == "USA ")
    PVAREC.PVAFDIND = "D";
  else
    PVAREC.PVAFDIND = "F";
  end
  ;
  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN;
  PVAREC.PVAIVCDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  PV0FS15(); /* Check Due Date*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS11  ****/
end // end PV0FS11

// CREATE   VFORCE01 Entry
Function PV0FS12()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Create VFORCE01 Entry                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PVLREC empty;
  move PVBREC to PVLREC withV60Compat;
  sysVar.arrayIndex = 18;
  PVLREC.XFAIND = XFATBL.XFAIND[sysVar.arrayIndex];
  PVLREC.XFACD = XFATBL.XFACD[sysVar.arrayIndex];
  PVLREC.PVLFRAMT = PVBREC.PVBLNAMT;
  PVLREC.XXXUSID1 = COMMAREA.CAUSERID;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS12  ****/
end // end PV0FS12

// DECIDE   Invoice Due Date
Function PV0FS15()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Determine the Invoice Due Date                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVAREC.PVADUEDT >= TA2REC.TA2GRGGN)
     /* next sentence*/
  else
    PVAREC.PVADUEDT = TA2REC.TA2GRGGN;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0DS15  ****/
end // end PV0FS15

// GET      YSR_SLS_REG_GEO_CD
Function PV0FS17()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Determine YSR_SLS_REG_GEO_CD (YSRSLSRG)          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PCMREC.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XSTCD[sysVar.arrayIndex] != " ")
      if (XWHTBL.XSTCD[sysVar.arrayIndex] in XSTTBL.XSTCD)
        PV0FW01.YSRSLSRG = XSTTBL.YSRSLSRG[sysVar.arrayIndex];
      else
        PVUREC.PVUERROR[PVUERKEY] = "Y";
        set PV0FM100.XWHCD cursor;
        /* State Code not found*/
        PVUREC.PVUERNBR = 117;
      end
    end
  else
    PVUREC.PVUERROR[PVUERKEY] = "Y";
    set PV0FM100.XWHCD cursor;
     /* Warehouse Code not found*/
    PVUREC.PVUERNBR = 116;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0DS17  ****/
end // end PV0FS17

// GET YSR CODE FOR DIRECT SHIPS
Function PV0FS18()
  ;
   /* ******************************************************************/
   /* **                                                             ***/
   /* **    GET YSR_SLS_GEO_REG_CD FOR DIRECT SHIPS. FIRST, READ     ***/
   /* **    READ DPRODC.VPRDCU01 USING PC_PRDCU_ID TO GET COMPANY    ***/
   /* **    NUMBER. THEN, READ DCUST.VCMPNY01 TO GET XST_ST_CD.      ***/
   /* **                                                             ***/
   /* ******************************************************************/
  ;
  set PC2REC empty;
  set SQLCA empty;
  ;
  PC2REC.XGPCD = PCMREC.XGPCD;
  PC2REC.PC2CUXID = PCMREC.PC2CUXID;
  ;
  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.XWHCD cursor;
      /* CUSTOMER XREF NOT FOUND*/
      PVUREC.PVUERNBR = 020;
      return;
    else
      TA1REC.TA1LOC = "PV0FS18";
      TA1REC.TA1DBASE = "DPRODC";
      TA1REC.TA1TBLVU = "VPRDCU01";
      TA1REC.TA1TBLKE = PCMREC.PC2CUXID;
      XSPVS52(); /* DB2 ERROR HANDLER*/
      return;
    end
  end
  ;
  set SQLCA empty;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = PC2REC.KUCCOID;
  KUMREC.KUMSTRID = PC2REC.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.XWHCD cursor;
      /* CUSTOMER NOT FOUND*/
      PVUREC.PVUERNBR = 020;
      return;
    else
      TA1REC.TA1LOC = "PV0FS18";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1TBLKE = KUMREC.KUMGRP;
      XSPVS52(); /* DB2 ERROR HANDLER*/
      return;
    end
  end
  ;
  set KULREC empty;
  set SQLCA empty;
  ;
  KULREC.KUCCOID = KUMREC.KUCCOID;
  KULREC.KULAAID = KUMREC.KUMSHAID;
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.XWHCD cursor;
      /* CUSTOMER NOT FOUND*/
      PVUREC.PVUERNBR = 020;
      return;
    else
      TA1REC.TA1LOC = "PV0FS18";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1TBLKE = KUMREC.KUMGRP;
      XSPVS52(); /* DB2 ERROR HANDLER*/
      return;
    end
  end
  ;
  if (KULREC.XSTCD != " ")
    if (KULREC.XSTCD in XSTTBL.XSTCD)
      PV0FW01.YSRSLSRG = XSTTBL.YSRSLSRG[sysVar.arrayIndex];
    else
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.XWHCD cursor;
      /* STATE CODE NOT FOUND*/
      PVUREC.PVUERNBR = 117;
    end
  end
end // end PV0FS18

// CHECK    FASTPATH
Function PV0FS30()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0FM100.CATOAP == " ")
       /* next sentence*/
    else
      if (PV0FM100.PC3PONBR == 0
       && PV0FM100.XGPCD == " "
       && PV0FM100.SY1STNBR == " "
       && PV0FM100.SY2CLRID == " "
       && PV0FM100.XUMCD == " "
       && PV0FM100.XQACD == " "
       && PV0FM100.XDMCD == " "
       && PV0FM100.PC2INSEG == " "
       && PV0FM100.XPGCD == " "
       && PV0FM100.YMTCD == " "
       && PV0FM100.PC2CUXID == " "
       && PV0FM100.XWHCD == " "
       && PV0FM100.SL1RCRNO == 0
       && PV0FM100.TSHRCTDT == 0
       && PV0FM100.TSHCNTNR == " "
       && PV0FM100.PV0FMCLO == " "
       && PV0FM100.PV0FMADJ == " "
       && PV0FM100.PVOVENDR == " "
       && PV0FM100.PVOVENDG == " "
       && PV0FM100.PV0FMDUM == " ")
        COMMAREA.CATOAP = PV0FM100.CATOAP;
        COMMAREA.CAITEM = PV0FM100.CAITEM;
        PV0FS50(); /* Exit Routine*/
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
         /* Cannot FASTPATH with data keyed in*/
        PVUREC.PVUERNBR = 63;
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS30  ****/
end // end PV0FS30

// EXIT     Routine (XSEXIT)
Function PV0FS50()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSEXIT();
  ;
  set PV0FM100.CATOAP cursor;
  PV0FM100.VAGen_EZEMSG = COMMAREA.CAMSG;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FSXT  ****/
end // end PV0FS50

// SET      Fields to AUTOSKIP
Function PV0FS51()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **    Set all fields to AUTOSKIP except FASTPATH.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0FM100.PC3PONBR skip;
  set PV0FM100.XGPCD skip;
  set PV0FM100.SY1STNBR skip;
  set PV0FM100.SY2CLRID skip;
  set PV0FM100.FY1FCTYC skip;
  set PV0FM100.SL1RCRNO skip;
  ;
  set PV0FM100.XUMCD skip;
  set PV0FM100.XQACD skip;
  set PV0FM100.XDMCD skip;
  set PV0FM100.PC2INSEG skip;
  set PV0FM100.XPGCD skip;
  set PV0FM100.PC2CUXID skip;
  set PV0FM100.YMTCD skip;
  set PV0FM100.XOWCD skip;
  set PV0FM100.XWHCD skip;
  set PV0FM100.TSHRCTDT skip;
  set PV0FM100.TSHCNTNR skip;
  set PV0FM100.PVBLNQTY skip;
  set PV0FM100.PV0FMCLO skip;
  set PV0FM100.PV0FMADJ skip;
  set PV0FM100.PVOVENDR skip;
  set PV0FM100.PVOVENDG skip;
  set PV0FM100.PV0FMDUM skip;
  set PV0FM100.PCMIVQTY skip;
  set PV0FM100.CATOAP cursor;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FSSK  ****/
end // end PV0FS51

// VALIDATE Data Keyed In
Function PV0FS60()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.PC3PONBR == PCMREC.PC3PONBR
   && PV0FM100.XGPCD == PCMREC.XGPCD
   && PV0FM100.SY1STNBR == PCMREC.SY1STNBR
   && PV0FM100.SY2CLRID == PCMREC.SY2CLRID
   && PV0FM100.XUMCD == PCMREC.XUMCD
   && PV0FM100.XQACD == PCMREC.XQACD
   && PV0FM100.XDMCD == PCMREC.XDMCD
   && PV0FM100.PC2INSEG == PCMREC.PC2INSEG
   && PV0FM100.XPGCD == PCMREC.XPGCD
   && PV0FM100.PC2CUXID == PCMREC.PC2CUXID
   && PV0FM100.YMTCD == PCMREC.YMTCD
   && PV0FM100.XOWCD == PCMREC.XOWCD
   && PV0FM100.XWHCD == PCMREC.XWHCD
   && PV0FM100.SL1RCRNO == PCMREC.SL1RCRNO
   && PV0FM100.TSHRCTDT == PV0FW01.TSHRCTDT
   && PV0FM100.TSHCNTNR == PCMREC.TSHCNTNR
   && PV0FM100.PC3PONBR not modified
   && PV0FM100.XGPCD not modified
   && PV0FM100.SY1STNBR not modified
   && PV0FM100.SY2CLRID not modified
   && PV0FM100.XUMCD not modified
   && PV0FM100.XQACD not modified
   && PV0FM100.XDMCD not modified
   && PV0FM100.PC2INSEG not modified
   && PV0FM100.XPGCD not modified
   && PV0FM100.PC2CUXID not modified
   && PV0FM100.YMTCD not modified
   && PV0FM100.XOWCD not modified
   && PV0FM100.XWHCD not modified
   && PV0FM100.SL1RCRNO not modified
   && PV0FM100.TSHRCTDT not modified
   && PV0FM100.TSHCNTNR not modified
   && PVUREC.PVUERRTB == " ")
    set PV0FM100.PV0FMCLO cursor;
  else
    PV0F680(); /* Read VFYPO001*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS60  ****/
end // end PV0FS60

// CHECK    Wildcards
Function PV0FS61()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check wildcards                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.XGPCD == " ")
    PCMREC.XGPCD = "*";
  end
  ;
  if (PV0FM100.SY1STNBR == " ")
    PCMREC.SY1STNBR = "*";
  end
  ;
  if (PV0FM100.SY2CLRID == " ")
    PCMREC.SY2CLRID = "*";
  end
  ;
  if (PV0FM100.FY1FCTYC == " ")
    PCMREC.FY1FCTYC = "*";
  end
  ;
  if (PV0FM100.XUMCD == " ")
    PCMREC.XUMCD = "*";
  end
  ;
  if (PV0FM100.XQACD == " ")
    PCMREC.XQACD = "*";
  end
  ;
  if (PV0FM100.XDMCD == " ")
    PCMREC.XDMCD = "*";
  end
  ;
  if (PV0FM100.PC2INSEG == " ")
    PCMREC.PC2INSEG = "*";
  end
  ;
  if (PV0FM100.XPGCD == " ")
    PCMREC.XPGCD = "*";
  end
  ;
  if (PV0FM100.PC2CUXID == " ")
    PCMREC.PC2CUXID = "*";
  end
  ;
  if (PV0FM100.YMTCD == " ")
    PCMREC.YMTCD = "*";
  end
  ;
  if (PV0FM100.XOWCD == " ")
    PCMREC.XOWCD = "*";
  end
  ;
  if (PV0FM100.XWHCD == " ")
    PCMREC.XWHCD = "*";
  end
  ;
  if (PV0FM100.TSHCNTNR == " ")
    PCMREC.TSHCNTNR = "*";
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS61  ****/
end // end PV0FS61

// VALIDATE Adjustment Type
Function PV0FS62()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Adjustment Type                        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.PV0FMCLO == "Y"
   || PV0FM100.PV0FMCLO == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0FM100.PV0FMCLO cursor;
    return;
  end
  ;
  if (PV0FM100.PV0FMADJ == "Y"
   || PV0FM100.PV0FMADJ == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0FM100.PV0FMADJ cursor;
    return;
  end
  ;
  if (PV0FM100.PV0FMDUM == "Y"
   || PV0FM100.PV0FMDUM == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0FM100.PV0FMDUM cursor;
    return;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS62  ****/
end // end PV0FS62

// VALIDATE Adj Consistency
Function PV0FS64()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Adjustment Consistency                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.PV0FMCLO == "Y")
    set PV0FM100.PV0FMCLO cursor;
    if (PV0FM100.PV0FMADJ == " "
     && PV0FM100.PV0FMDUM == " "
     && PV0FM100.PCMIVQTY == 0)
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      if (PV0FM100.PCMIVQTY > 0)
        set PV0FM100.PCMIVQTY cursor;
      end
      return;
    end
  end
  ;
  if (PV0FM100.PV0FMADJ == "Y")
    set PV0FM100.PV0FMADJ cursor;
    if (PV0FM100.PV0FMCLO == " "
     && PV0FM100.PV0FMDUM == " "
     && PV0FM100.PCMIVQTY == 0)
      PV0FS68(); /* Check Vendor*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      if (PV0FM100.PCMIVQTY > 0)
        set PV0FM100.PCMIVQTY cursor;
      end
      return;
    end
  else
    PV0FM100.PVOVENDR = " ";
    PV0FM100.PVOVENDG = " ";
    PV0FM100.PVOVNDNM = " ";
  end
  ;
  if (PV0FM100.PV0FMDUM == "Y")
    set PV0FM100.PV0FMDUM cursor;
    if (PV0FM100.PV0FMCLO == " "
     && PV0FM100.PV0FMADJ == " ")
      if (PCMREC.XRICD == "CL"
       || PCMREC.XRICD == "FC"
       || PCMREC.XRICD == "CA"
       || PCMREC.XRICD == "DC")
        if (PV0FM100.PCMIVQTY > 0)
           /* Receipt is already closed*/
          PVUREC.PVUERNBR = 93;
          PVUREC.PVUERROR[PVUERGEN] = "Y";
          return;
        else
          PV0FW01.PCMIVQTY = PCMREC.PCMIVQTY + PV0FM100.PCMIVQTY;
          if (PV0FW01.PCMIVQTY < 0)
             /* Conflict in data entered*/
            PVUREC.PVUERNBR = 86;
            PVUREC.PVUERROR[PVUERGEN] = "Y";
            set PV0FM100.PCMIVQTY cursor;
          end
        end
      else
        if (PV0FM100.PCMIVQTY > 0) /* Close*/
          if (PV0FM100.PVBLNQTY >= PV0FM100.PCMIVQTY)
             /* next sentence*/
          else
             /* Conflict in data entered*/
            PVUREC.PVUERNBR = 86;
            PVUREC.PVUERROR[PVUERGEN] = "Y";
            set PV0FM100.PCMIVQTY cursor;
          end
        else
          if (PV0FM100.PCMIVQTY < 0) /* Open*/
            PV0FW01.PCMIVQTY = PCMREC.PCMIVQTY + PV0FM100.PCMIVQTY;
            if (PV0FW01.PCMIVQTY < 0)
               /* Conflict in data entered*/
              PVUREC.PVUERNBR = 86;
              PVUREC.PVUERROR[PVUERGEN] = "Y";
              set PV0FM100.PCMIVQTY cursor;
            end
          end
        end
      end
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end
  ;
  if (PV0FM100.PV0FMCLO == "Y"
   || PV0FM100.PV0FMADJ == "Y")
    if (PCMREC.XRICD == "CL"
     || PCMREC.XRICD == "FC"
     || PCMREC.XRICD == "CA"
     || PCMREC.XRICD == "DC")
       /* Receipt is already closed*/
      PVUREC.PVUERNBR = 93;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS64  ****/
end // end PV0FS64

// MAKE     Sure Adj was selected
Function PV0FS66()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Make sure one adjustment type was selected      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.PV0FMCLO == "Y"
   || PV0FM100.PV0FMADJ == "Y"
   || PV0FM100.PV0FMDUM == "Y")
     /* next sentence*/
  else
     /* Please Select one adjustment type*/
    PVUREC.PVUERNBR = 87;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0FM100.PV0FMCLO cursor;
    return;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS66  ****/
end // end PV0FS66

// CHECK    Vendor Field
Function PV0FS68()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Valid Vendor is required for CLOSE w/Adj        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0F980(); /* Check Vendor code*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS66  ****/
end // end PV0FS68

// CONVERT  Input Dates
Function PV0FS80()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Convert Input Dates                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFRDT = 0;
  PVYREC.PVYTODT = 99999999;
  if (PV0FM100.TSHRCTDT > 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = PV0FM100.TSHRCTDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PCMREC.TSHRCTDT = TA2REC.TA2GRGGN;
      PVYREC.PVYFRDT = PCMREC.TSHRCTDT;
      PVYREC.PVYTODT = PCMREC.TSHRCTDT;
    else
       /* invalid date*/
      PVUREC.PVUERNBR = 82;
      set PV0FM100.TSHRCTDT cursor;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS80  ****/
end // end PV0FS80

// COMPUTE  Quantity
Function PV0FS81()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Compute Quantity                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0FW01.PV0FWCT1 = 0;
  PV0FW01.PVBBSZNK = 0;
  PV0FW01.PVBESZNK = 0;
  PV0FM100.PVBLNQTY = 0;
  while (PV0FW01.PV0FWCT1 < 40)
    PV0FW01.PV0FWCT1 = PV0FW01.PV0FWCT1 + 1;
    PV0FM100.PVBLNQTY = PV0FM100.PVBLNQTY + PCMREC.PCMRCPTQ[PV0FWCT1];
    if (PCMREC.PCMRCPTQ[PV0FWCT1] > 0)
      if (PV0FW01.PVBBSZNK == 0)
        PV0FW01.PVBBSZNK = PV0FW01.PV0FWCT1;
      end
      if (PV0FW01.PVBBSZNK > 0)
        PV0FW01.PVBESZNK = PV0FW01.PV0FWCT1;
      end
    end
  end
  ;
  PV0FM100.PVBLNQTY = PV0FM100.PVBLNQTY - PCMREC.PCMIVQTY;
  PV0FW01.PVBLNQTY = PV0FM100.PVBLNQTY;
  if (PCMREC.XRICD == "CL"
   || PCMREC.XRICD == "FC"
   || PCMREC.XRICD == "CA"
   || PCMREC.XRICD == "DC")
    PV0FM100.PVBLNQTY = 0;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS81  ****/
end // end PV0FS81

// CONVERT  Input Dates
Function PV0FS82()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Convert Dates from FYPO Row                      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PCMREC.TSHRCTDT > 0)
    set TA2REC empty;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = PCMREC.TSHRCTDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PV0FM100.TSHRCTDT = TA2REC.TA2GRGAN;
      PV0FW01.TSHRCTDT = TA2REC.TA2GRGAN;
      PVUREC.PVUERROR[PVUERKEY] = " ";
    else
       /* invalid date*/
      PVUREC.PVUERNBR = 82;
      PVUREC.PVUERROR[PVUERKEY] = "Y";
      set PV0FM100.TSHRCTDT cursor;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS80  ****/
end // end PV0FS82

// BUILD    VFYPO001 Update Row
Function PV0FS85()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       BUILD VFYPO001 Update Record                     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0FM100.PV0FMCLO == "Y")
    PCMREC.XRICD = "FC";
  else
    if (PV0FM100.PV0FMADJ == "Y")
      PCMREC.XRICD = "CA";
    else
      if (PV0FM100.PV0FMDUM == "Y")
        PCMREC.PCMIVQTY = PCMREC.PCMIVQTY + PV0FM100.PCMIVQTY;
        if (PCMREC.XRICD == "CL"
         || PCMREC.XRICD == "FC"
         || PCMREC.XRICD == "CA"
         || PCMREC.XRICD == "DC")
          PCMREC.PCMOSQTY = 0;
          PCMREC.XRICD = "PA";
          if (PCMREC.PCMIVQTY == 0)
            PCMREC.XRICD = "  ";
          end
        else
          if (PV0FM100.PCMIVQTY < 0)
            if (PCMREC.PCMIVQTY == 0)
              PCMREC.XRICD = "  ";
            else
              if (PCMREC.PCMIVQTY > 0)
                PCMREC.XRICD = "PA";
              end
            end
          else
            PCMREC.XRICD = "DC";
          end
        end
      end
    end
  end
  PCMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PCMREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  PV0F685(); /* Update VFYPO001 Row*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS85  ****/
end // end PV0FS85

// BRIGHTEN Add'l Info fields
Function PV0FS87()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Brighten Additional Information Key fields      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0FM100.XUMCD cursor, bold;
  set PV0FM100.XQACD bold;
  set PV0FM100.XDMCD bold;
  set PV0FM100.PC2INSEG bold;
  set PV0FM100.XPGCD bold;
  set PV0FM100.PC2CUXID bold;
  set PV0FM100.YMTCD bold;
  set PV0FM100.XOWCD bold;
  set PV0FM100.XWHCD bold;
  set PV0FM100.TSHRCTDT bold;
  set PV0FM100.TSHCNTNR bold;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0FS60  ****/
end // end PV0FS87

//*** RECORD=PV0FW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0FW01 type basicRecord
  5 VAGen_SQLCODE VAGen_SQLCODE ; 
  5 PCMIVQTY PCMIVQTY ; 
  5 TSHRCTDT TSHRCTDT ; 
  5 PVBBSZNK PVBBSZNK ; 
  5 PVBESZNK PVBESZNK ; 
  5 PVBLNQTY PVBLNQTY ; 
  5 YSRSLSRG YSRSLSRG ; 
  5 PV0FWCT1 PV0FWCT1 ; 
  5 PV0FWCT2 PV0FWCT2 ; 
  5 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
  5 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
  5 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
  5 PV0FW-FOB-REC-FOUND PV0FW-FOB-REC-FOUND ; 
  5 PV-IVC-ID PV-IVC-ID ; 
  5 PV0FW-IVC-ID-CHAR PV0FW-IVC-ID-CHAR ; 
  5 PV0FW-IVIDX PV0FW-IVIDX ; 
  5 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
  5 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
end // end PV0FW01

//*** RECORD=PV0FW02 ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - PV0BW-DBIO-FUNCTION *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   EACH IOMOD. THE ONE CALL WILL HANDLE ANY FUNCTION CODE *
// *   AS LONG AS THE VALUE IS MOVED TO THE FUNCTION FIELD    *
// *   IN THIS RECORD BEFORE THE IOMOD ROUTINE IS USED.       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 10-19-99  gdecke  ADD FOR CALL TO VPVPMT01 CALL IN PV0A  *
// ************************************************************
// ***********************
Record PV0FW02 type basicRecord
  5 PV0FW-DBIO-FUNCTION PV0FW-DBIO-FUNCTION ; 
end // end PV0FW02

// iomod function to perform
DataItem PV0FW-DBIO-FUNCTION char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND ORIG VENDOR IVC FOB PMT
DataItem PV0FW-FOB-REC-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BREAK INVOICE NBR INTO BYTES
DataItem PV0FW-IVC-ID-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX TO IVC NBR REDEFINITION
DataItem PV0FW-IVIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 1
DataItem PV0FWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 2
DataItem PV0FWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

