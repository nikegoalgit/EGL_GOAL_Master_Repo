package pv0r;
import corpcom2.XZCREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.USERID;
import corpcom6.VAGen_SQLCODE;
import corpx1.XIP-IVC-STAT-CD;
import fy.common.FY1REC;
import pc.common.PC2REC;
import pc.common.PC3REC;
import pc.common.PCMIVQTY;
import pv.common.PV-CURR-STAT-CD;
import pv.common.PV-IVC-AMT;
import pv.common.PV-IVC-ID;
import pv.common.PV-MSA-VEND-GRP;
import pv.common.PV-MSA-VEND-NBR;
import pv.common.PV-PMT-VEND-GRP;
import pv.common.PV-PMT-VEND-IVC-ID;
import pv.common.PV-PMT-VEND-NBR;
import pv.common.PV-PMT-VEND-NM;
import pv.common.PV0BT01;
import pv.common.PV0BW01;
import pv.common.PV0BW02;
import pv.common.PV0BW03;
import pv.common.PV0BW04;
import pv.common.PV0BW05;
import pv.common.PVABANKC;
import pv.common.PVABRKRY;
import pv.common.PVADSCT;
import pv.common.PVAINT1;
import pv.common.PVAINT2;
import pv.common.PVAINT3;
import pv.common.PVAOCHG1;
import pv.common.PVAOCHG2;
import pv.common.PVAREC;
import pv.common.PVASCHG1;
import pv.common.PVASCHG2;
import pv.common.PVATCOMM;
import pv.common.PVBREC;
import pv.common.PVDREC;
import pv.common.PVEREC;
import pv.common.PVGREC;
import pv.common.PVLREC;
import pv.common.PVOREC;
import pv.common.PVUREC;
import pv.common.PVWREC;
import pv.common.PVYREC;
import pv.common.PVZREC;
import sy.common.SY1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA2TIME;
import ta.common.TA2TIMEN;
import ta.common.TA2TIMHM;
import ta.common.TA2TIMSS;
import vv.common.VPOITM04;
import vv.common.VPVERR01;
import vv.common.VPVPMT01;
import vv.common.VXIBGL01;
import xx.common.*;
import xx.common.XSTCD;
import xx.common.ZZ-CHNG-DT;
import xx02.*;
import xx03.*;
import xx06.*;
import xx06.XUMCD;
Program PV0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PV0BW01 PV0BW01; // record
  PV0BW02 PV0BW02; // record
  PV0BW03 PV0BW03; // record
  PV0BW04 PV0BW04; // record
  PV0BW05 PV0BW05; // record
  PV0RW01 PV0RW01; // record
  PV0RW02 PV0RW02; // record
  PV0RW03 PV0RW03; // record
  PV0RW04 PV0RW04; // record
  PV0RW05 PV0RW05; // record
  PV0RW06 PV0RW06; // record
  PV0RW07 PV0RW07; // record
  PV0RW08 PV0RW08; // record
  PV0RW09 PV0RW09; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVDREC PVDREC; // record
  PVEREC PVEREC; // record
  PVGREC PVGREC; // record
  PVHREC PVHREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVWREC PVWREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPOITM04 VPOITM04; // record
  VPVERR01 VPVERR01; // record
  VPVPMT01 VPVPMT01; // record
  VXIBGL01 VXIBGL01; // record
  XZCREC XZCREC; // record
  PV0RW-PV0RW02-GROUP PV0RW-PV0RW02-GROUP;

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PV0BT01 {deleteAfterUse = yes}; // table
  use XFATBL {deleteAfterUse = yes}; // table
  use XIBTBL {deleteAfterUse = yes}; // table
  use PV0RM.PV0RM001,  // forms
      PV0RM.PV0RM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0R000: PV0R000();
  end // end main
end // end PV0R

// CHECK    PV Standard PF Keys
Function PV0R-PFKEY-ACTION()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      CHECK PV PF Keys and Exit Requests                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
  else
    if (converseVar.eventKey is enter)
      converseLib.validationFailed(1);
      return;
    else
      if (converseVar.eventKey is pf5)
        if (PV0RW01.PV0RWMAP == "1")
          ;

            /* MOVE '2' TO PV0RW01.PV0RWMAP;*/
        end
        if (PV0RW01.PV0RWMAP == "2")
          ;
        end
      else
        if (converseVar.eventKey is pf3)
          if (PV0RW01.PV0RWMAP == "1")
      /* MOVE 'Y' TO PVWREC.PVWERRF;*/
            PV0RW01.PV0RWMDF = "N";
            COMMAREA.CATOAP = "MN0M";
            COMMAREA.CAUSERA = PVUREC.PVUGROUP;
            XSEXIT();
            return;
          else
            if (PV0RW01.PV0RWMAP == "2")
              PV0RW01.PV0RWMAP = "1";
              PV0RW01.PV0RWMDF = "N";
              return;
            end
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ****  End of XPPV001  ****/
end // end PV0R-PFKEY-ACTION

// Update dpinv.vpverr01
Function PV0R-UPD-VPVERR01()
  SQLCA.VAGen_SQLCODE = 0;
  PV0RW01.PV0RWIX2 = 0;
  PV0RW01.PV0RWUP2 = "N";
  PV0RW01.PV0RWUPF1 = "N";
  ;
  while ((PV0RW01.PV0RWUP2 == "N")
   && (PV0RW01.PV0RWIX2 < 3))
    ;
    PV0RW01.PV0RWIX2 = PV0RW01.PV0RWIX2 + 1;
    PV0RW01.PV0RWIX5 = PV0RW01.PV0RWIX5 + 1;
    ;
    if (PV0RM002.PV-ERR-SEQ-NBR[PV0RWIX2] == 0
     && PV0RM002.PV-ERR-ACT-DESC[PV0RWIX2] == " "
     && PV0RM002.PV-CURR-STAT-CD[PV0RWIX2] == " ")
      /* AND PV0RM002.PV-ERR-CSTMS-TXT(PV0RWIX2) = ' ';*/
      PV0RW01.PV0RWUP2 = "Y";
      PV0RW01.PV0RWMDF = "N";
    else
      if (
      (PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2]
       != PV0RW07.PV0R-PV-ERR-CSTMS-TXT[PV0RWIX5]))
        /* NE PV0RW03.PV0R-PV-ERR-CSTMS-TXT(PV0RWIX5));*/
        VPVERR01.PV-CSTMS-TXT = PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2];
        VPVERR01.PV-ERR-SEQ-NBR = PV0RM002.PV-ERR-SEQ-NBR[PV0RWIX2];
        VPVERR01.PV-IVC-ID = PV0RM002.PV-IVC-ID[PV0RWIX2];
        VPVERR01.PV-MSA-VEND-NBR = PV0RM002.PV-MSA-VEND-NBR[PV0RWIX2];
        VPVERR01.PV-MSA-VEND-GRP = PV0RM002.PV-MSA-VEND-GRP[PV0RWIX2];
        VPVERR01.PV-PMT-VEND-NBR = PV0RM002.PV-PMT-VEND-NBR[PV0RWIX2];
        VPVERR01.PV-PMT-VEND-GRP = PV0RM002.PV-PMT-VEND-GRP[PV0RWIX2];
        VPVERR01.PV-PMT-VEND-IVC-ID = PV0RM002.PV-PMT-VEND-IVC-ID[PV0RWIX2];
        /* MOVE PV0RW03.PV0R-PV-ERR-LD-DT(PV0RWIX2) TO*/
        /* VPVERR01.PV-ERR-LD-DT;*/
        VPVERR01.PV-ERR-LD-DT = PV0RM002.PV-ERR-LD-DT[PV0RWIX2];
        VPVERR01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
        VPVERR01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
        VPVERR01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVERR01.ZZ-SDT = TA2REC.TA2GRGGN;
        call "VPVERR01" ("U ", SQLCA, VPVERR01) {isNoRefresh = yes, isExternal = yes};
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          /* NEXT SENTENCE*/
          PV0RW01.PV0RWUPF = "Y";
          PV0RW01.PV0RWMDF = "N";
          converseLib.validationFailed(231);
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
            set VPVERR01 empty;
            converseLib.validationFailed(44);
            return;
          else
            PVWREC.PVWERRF = "Y";
            PV0RW01.PV0RWMDF = "N";
            TA1REC.TA1LOCAT[1] = "XPPV-VPVERR01";
            TA1REC.TA1LOCAT[2] = "READING DB2 VPVERR01";
            TA1REC.TA1TBLVU = "VPVERR01";
            XSPVS52();
            PVWREC.PVWERRF = "Y";
            return;
                                /*  */
          end
        end
      else
        PV0RW01.PV0RWUP2 = "N";
        /* /next sentence*/
      end
    end
  end
end // end PV0R-UPD-VPVERR01

// IOMOD    DPINVC.VPVERR01
Function PV0R-VPVERR01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for Payment records            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  ;
  call "VPVERR01" (PVYREC, SQLCA, VPVERR01, PVHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    if (PVYREC.PVYFNC == "S1"
     || PVYREC.PVYFNC == "S2"
     || PVYREC.PVYFNC == "S3"
     || PVYREC.PVYFNC == "S4"
     || PVYREC.PVYFNC == "C1"
     || PVYREC.PVYFNC == "C2"
     || PVYREC.PVYFNC == "C3"
     || PVYREC.PVYFNC == "C4"
     || PVYREC.PVYFNC == "S "
     || PVYREC.PVYFNC == "A "
     || PVYREC.PVYFNC == "D "
     || PVYREC.PVYFNC == "U ")
      /* next sentence*/
    else
      PVUREC.PVUERNBR = 97;
    end
    ;
    PVUREC.PVUERROR[PVUERVND] = " ";
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      if (PVYREC.PVYFNC == "N1"
       || PVYREC.PVYFNC == "N2"
       || PVYREC.PVYFNC == "N3"
       || PVYREC.PVYFNC == "N4"
       || PVYREC.PVYFNC == "S "
      ) /* NEXT SENTENCE*/
      else
        PVUREC.PVUERNBR = 200;
        PVUREC.PVUERROR[PVUERVND] = "Y";
        PVUREC.PVUERROR[PVUERIVC] = "Y";
      end
    else
      PVUREC.PVUERROR[PVUERVND] = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "PV0R-VPVERR01";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVERR01";
          TA1REC.TA1TBLKE = VPVERR01.PV-MSA-VEND-NBR;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV-VPVPMT01  ****/
end // end PV0R-VPVERR01

// READ     VPVERR01
Function PV0R-VPVERR01-MAP2()
   /* *************************************************************/
  PV0RW02.PV0RWDT2 = PV0RM001.FROM-DATE; /* in*/
  PV0RW02.PV0RWDT1 = PV0RM001.TO-DATE;
  if (PV0RM001.STATUS == " ")
    PV0RM002.PV-STATUS = "ALL";
  else
    PV0RM002.PV-STATUS = PV0RM001.STATUS;
  end
  set PV0RM002.PV-STATUS bold, protect;
  ;
  PV0RW02.PV0RWDT3 = 0;
  PV0RW02.PV0RWDT4 = 0;
  PV0RW02.PV0RWYR3 = PV0RW02.PV0RWYR1;
  PV0RW02.PV0RWMT3 = PV0RW02.PV0RWMT1;
  PV0RW02.PV0RWDA3 = PV0RW02.PV0RWDA1;
  PV0RW02.PV0RWYR4 = PV0RW02.PV0RWYR2;
  PV0RW02.PV0RWMT4 = PV0RW02.PV0RWMT2;
  PV0RW02.PV0RWDA4 = PV0RW02.PV0RWDA2;
   /* century field validation for due date field*/
  if (PV0RW02.PV0RWYR3 > 59)
    PV0RW02.PV0RWCN3 = 19;
  else
    PV0RW02.PV0RWCN3 = 20;
  end
  ;
   /* century field validation for inv date field*/
  if (PV0RW02.PV0RWYR4 > 59)
    PV0RW02.PV0RWCN4 = 19;
  else
    PV0RW02.PV0RWCN4 = 20;
  end
  ;
  PVHREC.PV0R-FROM-DATE = PV0RW02.PV0RWDT4;
  PVHREC.PV0R-TO-DATE = PV0RW02.PV0RWDT3;
  if (PV0RM001.STATUS != " ")
    VPVERR01.PV-CURR-STAT-CD = PV0RM001.STATUS;
  else
    VPVERR01.PV-CURR-STAT-CD = "*";
  end
  /* MOVE PV0RM001.STATUS TO VPVERR01.PV-CURR-STAT-CD;*/
   /* OPEN CURSOR FOR SCREEN 2*/
  PVYREC.PVYFNC = "S3";
  PV0R-VPVERR01(); /* IOMOD VPVERR01*/
  ;
  PV0RW-PV0RW02-GROUP = " ";
  PV0RW01.PV0RWIX2 = 0;
  while (SQLCA.VAGen_SQLCODE == 0
   && PV0RWIX2 < 650)
    /* FETCH LINES FROM VPVERR01*/
    PVYREC.PVYFNC = "N3";
    PV0R-VPVERR01(); /* IOMOD VPVPMT01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      PV0RWIX2 = PV0RWIX2 + 1;
      /* MOVE VPVERR01.PV-IVC-ID TO*/
      /* PV0RW03.PV0R-PV-IVC-ID(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-MSA-VEND-NBR TO*/
      /* PV0RW03.PV0R-PV-MSA-VEND-NBR(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-MSA-VEND-GRP TO*/
      /* PV0RW03.PV0R-PV-MSA-VEND-GRP(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-PMT-VEND-NBR*/
      /* TO PV0RW03.PV0R-PV-PMT-VEND-NBR(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-PMT-VEND-GRP TO*/
      /* PV0RW03.PV0R-PV-PMT-VEND-GRP(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-PMT-VEND-IVC-ID*/
      /* TO PV0RW03.PV0R-PV-PMT-VEND-IVC-ID(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-ERR-SEQ-NBR*/
      /* TO PV0RW03.PV0R-PV-ERR-SEQ-NBR(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-ERR-LD-DT*/
      /* TO PV0RW03.PV0R-PV-ERR-LD-DT(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-ERR-ACT-DESC TO*/
      /* PV0RW03.PV0R-PV-ERR-ACT-DESC(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-CURR-STAT-CD TO*/
      /* PV0RW03.PV0R-PV-ERR-CURR-STAT-CD(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-CSTMS-TXT TO*/
      /* PV0RW03.PV0R-PV-ERR-CSTMS-TXT(PV0RWIX2);*/
      /* MOVE VPVERR01.PV-ERR-MSG-ID TO*/
      /* CHANGES DUE TO STAORAGE*/
      PV0RW03.PV0R-PV-IVC-ID[PV0RWIX2] = VPVERR01.PV-IVC-ID;
      PV0RW03.PV0R-PV-MSA-VEND-NBR[PV0RWIX2] = VPVERR01.PV-MSA-VEND-NBR;
      PV0RW03.PV0R-PV-MSA-VEND-GRP[PV0RWIX2] = VPVERR01.PV-MSA-VEND-GRP;
      PV0RW04.PV0R-PV-PMT-VEND-NBR[PV0RWIX2] = VPVERR01.PV-PMT-VEND-NBR;
      PV0RW04.PV0R-PV-PMT-VEND-GRP[PV0RWIX2] = VPVERR01.PV-PMT-VEND-GRP;
      PV0RW04.PV0R-PV-PMT-VEND-IVC-ID[PV0RWIX2] = VPVERR01.PV-PMT-VEND-IVC-ID;
      PV0RW05.PV0R-PV-ERR-SEQ-NBR[PV0RWIX2] = VPVERR01.PV-ERR-SEQ-NBR;
      PV0RW06.PV0R-PV-ERR-LD-DT[PV0RWIX2] = VPVERR01.PV-ERR-LD-DT;
      PV0RW08.PV0R-PV-ERR-ACT-DESC[PV0RWIX2] = VPVERR01.PV-ERR-ACT-DESC;
      PV0RW06.PV0R-PV-ERR-CURR-STAT-CD[PV0RWIX2] = VPVERR01.PV-CURR-STAT-CD;
      PV0RW07.PV0R-PV-ERR-CSTMS-TXT[PV0RWIX2] = VPVERR01.PV-CSTMS-TXT;
      PV0RW06.PV0R-PV-ERR-MSG-ID[PV0RWIX2] = VPVERR01.PV-ERR-MSG-ID;
      PV0RW09.USERID[PV0RWIX2] = VPVERR01.ZZ-CHNG-USER-ID;
      PV0RW09.ZZ-CHNG-DT[PV0RWIX2] = VPVERR01.ZZ-CHNG-DT;
      /* CHANGES DUE TO STAORAGE*/
      PV0R-VPVOWN01();
      ;
      PV0RW01.PV0RWBOT = PV0RW01.PV0RWIX2;
    else
      if (PV0RW01.PV0RWIX2 == 0)
        /* Requested Record Not Found*/
    /* MOVE 98 TO PVUREC.PVUERNBR;*/
        converseLib.validationFailed(98);
      end
    end
  end
   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C3";
  PV0R-VPVERR01(); /* IOMOD VPVPMT01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R-VPVPMT01  ****/
end // end PV0R-VPVERR01-MAP2

// IOMOD    DPINVC.VPVown01
Function PV0R-VPVOWN01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for ERROR DESCRIPTION          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  ;
  /* MOVE PV0RW03.PV0R-PV-ERR-MSG-ID(PV0RWIX2) TO PVGREC.PV-ERR-MSG-ID;*/
  PVGREC.PV-ERR-MSG-ID = PV0RW06.PV0R-PV-ERR-MSG-ID[PV0RWIX2];
  call "VPVOWN01" ("S ", SQLCA, PVGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0RW05.PV0R-PV-ERR-MSG[PV0RWIX2] = PVGREC.PV-ERR-MSG-DESC;
    PV0RW05.PV0R-PV-ERR-OWN-GRP[PV0RWIX2] = PVGREC.PV-ERR-OWN-DESC;
    /* Next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
   /* MOVE 238 TO PVUREC.PVUERNBR;*/
      PV0RW05.PV0R-PV-ERR-MSG[PV0RWIX2] = " ";
   /* MOVE ' ' TO PV0RW03.PV-ERR-OWN-GRP(PVWLINEX);*/
      SQLCA.VAGen_SQLCODE = 0;
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PVGREC empty;
        converseLib.validationFailed(44);
        return;
      else
        PVWREC.PVWERRF = "Y";
        TA1REC.TA1LOCAT[1] = "XPPV-VPVOWN01";
        TA1REC.TA1LOCAT[2] = "READING DB2 VPVOWN01";
        TA1REC.TA1TBLVU = "VPVOWN01";
        XSPVS52();
        PVWREC.PVWERRF = "Y";
        return;
                        /*  */
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV-VPVPMT01  ****/
end // end PV0R-VPVOWN01

// PROCESS  Main Logic
Function PV0R000()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0R    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0R001(); /* Initialization Logic*/
  ;
  PV0RS01(); /* Check Who Invoked me*/
  ;
  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    if (PV0RW01.PV0RWMAP == "1")
      PV0R100(); /* Converse PV0RM001*/
      PV0R110(); /* Check PF Keys and Exits*/
      PV0R120(); /* Check what to do next*/
    else
      if (PV0RW01.PV0RWMAP == "2")
        PV0R200();
        PV0R210();
        if (PVWREC.PVWERRF != "Y")
          PV0R250();
        else
          ;
        end
      end
    end
  end
  ;
  exit program;
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0R000  ****/
end // end PV0R000

// INIT     Routine
Function PV0R001()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0RW01 empty;
  set PV0RW02 empty;
  set PV0RW03 empty;
  set PV0RW04 empty;
  set PV0RW05 empty;
  set PV0RW06 empty;
  set PV0RW07 empty;
  set PV0RW08 empty;
  set PV0RW09 empty;
  set PV0RM001 initial;
  set PVYREC empty;
  set PVUREC empty;
  ;
   /* SET FY1REC EMPTY;*/
  set TA2REC empty;
  ;
  XSPVS01(); /* Initialize PV Common Routine Fields*/
  ;
  TA1REC.TA1PGMNM = "PV0R"; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0RM001";
  ;
    /* Get System Date and Time*/
  PV0RS09();
  ;
    /* Set Maximum Scroll Lines*/
  PV0RW01.PV0RWMAX = 3;
  PV0RW01.PV0RWIX5 = 0;
  /* MOVE 10 TO PV0RW01.PV0RWMAX-MAP3;*/
  ;
   /* Set Active Screen*/
  PV0RW01.PV0RWTOP = 1;
  PV0RW01.PV0RWMAP = "1";
  PV0RW01.PV0RWPRV = "1";
  PV0RW01.PV0RWMDF = "N";
  PVWREC.PVWERRF = "N";
  PV0RW01.PV0RWLST = "2";
  PV0RW01.PV0RWMDF = "N";
  return; /* Last Statement*/
  ;
   /* ***  End of PV0R001  ****/
end // end PV0R001

// CONVERSE PV0RM001 SCREEN
Function PV0R100()
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0RM001.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0RM001.TA2GRGB = TA2REC.TA2GRGB;
  PV0RM001.TA2TIMED = VGVar.currentFormattedTime;
  ;
  converse PV0RM001 ;
  PVUREC.PVUERNBR = 0;
  PVUREC.PVUERROR[PVUERGEN] = " ";
  PVUREC.PVUERROR[PVUERVND] = " ";
  PVUREC.PVUERROR[PVUERIVC] = " ";
  PVUREC.PVUERROR[PVUERKEY] = " ";
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0R100 *****/
end // end PV0R100

// CHECK    PF Keys and Exits
Function PV0R110()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0R-PFKEY-ACTION(); /* Check PV Standard PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0) /* Check for Security Error*/
    if (
    converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf5
    ) /* next sentence*/
    else
       /* Invalid PF Key*/
      converseLib.validationFailed(1);
      return;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R110  ****/
end // end PV0R110

// CHECK    What to do next
Function PV0R120()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0RS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0R150(); /* Check if allowed to continue*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of pv0r120  ****/
end // end PV0R120

// CHECK    if allowed to continu
Function PV0R150()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0RS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf5)
        /* NEXT SENTENCE*/
      end
    end
  else
    if (converseVar.eventKey is enter)
      PV0RS60(); /* Validate Data Keyed in*/
    else
      if (converseVar.eventKey is pf5)
        PV0RS60(); /* Validate Data Keyed in*/
        if (
        PVUREC.PVUERROR[PVUERIVC] != "Y")
          PV0RW01.PV0RWMAP = "2";
          PV0R-VPVERR01-MAP2(); /* BUILD TABLE FOR MAP2*/
          if (PV0RW01.PV0RWIX2 == 0)
            PVUREC.PVUERNBR = 186;
            PV0RW01.PV0RWMAP = "1";
            return;
          end
          /* SHOW FIRST PAGE OF DATA FROM MAP2 TABLE*/
          PV0RW01.PV0RWCUR = 2;
          PV0R270(); /* Go Back One Screen*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0B150  ****/
end // end PV0R150

// CONVERSE PV0RM002 SCREEN
Function PV0R200()
  ;
  XSPVS57(); /* Deliver a message*/
  if (COMMAREA.CASECRC == 0)
     /* next sentence*/
  else
    PV0RM002.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PVWREC.PVWLINEX = 0;
  while ((PVWREC.PVWLINEX < 3))
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PV0RM002.PV-ERR-SEQ-NBR[PVWLINEX] == 0
     && PV0RM002.PV-ERR-ACT-DESC[PVWLINEX] == " "
     && PV0RM002.PV-CURR-STAT-CD[PVWLINEX] == " ")
      set PV0RM002.PV-ERR-CSTMS-TXT[PVWLINEX] skip;
    end
  end
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0RM002.TA2GRGB = TA2REC.TA2GRGB;
  PV0RM002.TA2TIMED = TA2REC.TA2TIMED;
  ;
  converse PV0RM002 ;
end // end PV0R200

// CHECK    PF Keys and Exits
Function PV0R210()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  if (PV0RW01.PV0RWMAP == "2" && PV0RW01.PV0RWMDF == "N")
    PV0RW01.PV0RWIX2 = 0;
    while ((PV0RWIX2 < 3))
      PV0RW01.PV0RWIX2 = PV0RW01.PV0RWIX2 + 1;
      if (PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2] is modified)
        PV0RW01.PV0RWMDF = "Y";
      end
    end
  end
  if (PV0RW01.PV0RWMDF == "Y")
    if (converseVar.eventKey is pf7 || converseVar.eventKey is pf8)
      converseLib.validationFailed(237);
      PVWREC.PVWERRF = "Y";
      return;
    else
      PVWREC.PVWERRF = "N";
      ;
    end
  end
  ;
  PV0R-PFKEY-ACTION(); /* Check PV PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0) /* Check Security Error*/
    if (converseVar.eventKey is enter
     /* OR EZEAID IS PF9*/
     /* OR EZEAID IS PF10*/
     /* OR EZEAID IS PF11*/
     /* OR EZEAID IS PF21;*/
    ) /* next sentence*/
    else
      if (converseVar.eventKey is pf7)
         /* BACKWARD Performed. Please proceed.*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8)
           /* FORWARD Performed. Please proceed.*/
          PVUREC.PVUERNBR = 4;
        else
          if (
          converseVar.eventKey is pf5)
            /* next sentence*/
          else
            /* Invalid PF Key*/
            PVUREC.PVUERNBR = 1;
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R210  ****/
end // end PV0R210

// CHECK    if allowed to continu
Function PV0R250()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is pf3) /* Check if ENTER key was pressed.*/
      PV0RW01.PV0RWMAP = "1";
      PV0RW01.PV0RWMDF = "N";
    else
      if (converseVar.eventKey is pf5
       /* OR EZEAID IS PF6*/
       || converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
      ) /* next sentence*/
      end
    end
  end
  if (converseVar.eventKey is pf5)
    if (COMMAREA.CACLVL[3] == "N")
      converseLib.validationFailed(129);
      PVWREC.PVWERRF = "Y";
      return;
    end
    PV0RW01.PV0RWIX2 = 0;
    while ((PV0RWIX2 < 3))
      PV0RW01.PV0RWIX2 = PV0RW01.PV0RWIX2 + 1;
      if (
      PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2] is modified)
        set PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2] bold;
        PV0RW01.PV0RWMDF = "Y";
      else
        set PV0RM002.PV-ERR-CSTMS-TXT[PV0RWIX2] initialAttributes;
        ;
      end
    end
    if (PV0RW01.PV0RWMDF == "N")
      converseLib.validationFailed(53);
      PVWREC.PVWERRF = "Y";
      return;
    end
    if (PV0RW01.PV0RWUPF1 != "Y") /* First time*/
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf1
      ) /* next sentence*/
      else
        PV0RW01.PV0RWUPF = "N"; /* make pf5 update possible*/
        converseLib.validationFailed(232); /* /*/
        PV0RW01.PV0RWUPF1 = "Y";
        return;
              /* NEXT SENTENCE*/
      end
    end
    if (PVWREC.PVWERRF == "N")
      PV0R-UPD-VPVERR01();
    else
      return;
    end
  else
    if (converseVar.eventKey is pf3)
      PV0RW01.PV0RWMAP = "1";
    else
      if (converseVar.eventKey is pf7)
        PV0R270(); /* Go Back One Screen*/
      else
        if (converseVar.eventKey is pf8)
          PV0R280(); /* Go Forward One Screen*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R250  ****/
end // end PV0R250

// BACK     One Page Routine
Function PV0R270()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0RW01.PV0RWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0RW01.PV0RWTOP = PV0RW01.PV0RWCUR - PV0RW01.PV0RWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0RW01.PV0RWTOP = 1;
        /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0RW01.PV0RWTOP = PV0RW01.PV0RWCUR - PV0RW01.PV0RWMAX;
      end
    end
    PV0RW01.PV0RWTOP = PV0RW01.PV0RWCUR - PV0RW01.PV0RWMAX;
    if (PV0RW01.PV0RWTOP <= 0)
      PV0RW01.PV0RWTOP = 1;
    end
    PV0RS92(); /* Build Scroll Lines*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R270  ****/
end // end PV0R270

// FORWARD  One Page Routine
Function PV0R280()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf8)
    PV0RW01.PV0RWTOP = PV0RW01.PV0RWCUR     + PV0RW01.PV0RWMAX;
  else
    if (converseVar.eventKey is pf20)
      PV0RW01.PV0RWTOP = PV0RW01.PV0RWCUR + PV0RW01.PV0RWMAX / 2;
    else
      if (converseVar.eventKey is pf12)
        /* Bottom of Screen Displayed.*/
        PVUREC.PVUERNBR = 62;
        PV0RW01.PV0RWTOP = PV0RW01.PV0RWBOT - PV0RW01.PV0RWMAX;
      end
    end
  end
  ;
  if (PV0RW01.PV0RWTOP >= PV0RW01.PV0RWBOT)
    PV0RW01.PV0RWTOP = PV0RW01.PV0RWBOT - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end
  ;
  if (PV0RW01.PV0RWTOP <= 0)
    PV0RW01.PV0RWTOP = 1;
  end
  ;
  PV0RS92(); /* Build Scroll Lines*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0R280  ****/
end // end PV0R280

// PV APPL  Common Exit Routine
Function PV0RS-XFER-TO-PV()
  ;
   /* 10-20-99  GDECKE  NISSHO CONTINGENCY - MODIFY XSPVS60*/
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf3)
    if (PV0BW01.PV0BWMAP == "2")
      PV0BW01.PV0BWMAP = "1";
      set PV0RM002 empty;
      return;
    end
  else
    if (converseVar.eventKey is pf5)
      ;
    end
    ;
  end
  ;
  if (COMMAREA.CATOAP == " ")
     /* next sentence*/
  else
    XSEXIT();
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0BS-XFER-TO-PV ****/
end // end PV0RS-XFER-TO-PV

// CHECK    Passed Information
Function PV0RS01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if Caller passed any Information          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  ;
    /* IF PV0RW01.PV0RWMAP = '1';*/
    /* MOVE PV0BM001.PV-PMT-VEND-IVC-ID TO PV0BW01.PV-PMT-VEND-IVC-ID;*/
    /* MOVE PV0BM001.PV-PMT-VEND-NBR TO PV0BW01.PV-PMT-VEND-NBR;*/
   /* MOVE PV0BM001.PV-PMT-VEND-GRP TO PV0BW01.PV-PMT-VEND-GRP;*/
   /* END;*/
  ;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0BS01  ****/
end // end PV0RS01

// GO BACK  to Calling Applicatio
Function PV0RS03()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0RS-XFER-TO-PV(); /* PV Common Exit*/
  PV0RS50(); /* Exit Routine*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0BS03  ****/
end // end PV0RS03

// GET      System Date and Time
Function PV0RS09()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0RM001.TA2GRGB = TA2REC.TA2GRGB;
  PV0RM001.TA2TIMED = TA2REC.TA2TIMED;
  /* MOVE TA2REC.TA2GRGB TO PV0RM002.TA2GRGB;*/
  /* MOVE TA2REC.TA2TIMED TO PV0RM002.TA2TIMED;*/
  VPVERR01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0RS09  ****/
end // end PV0RS09

// CHECK    FASTPATH
Function PV0RS30()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* *** FIGURE OUT WHAT FASTPATH CODE SHOULD LOOK LIKE, MODIFY***/
   /* *** COMMENTED OUT CODE TO MATCH PV0R STRATEGY             ***/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0RW01.PV0RWMAP == "1")
      if (PV0RM001.CATOAP == " ")
             /* next sentence*/
      else
        if (PV0RM001.FROM-DATE == " "
         && PV0RM001.TO-DATE == " "
         && PV0RM001.STATUS == " ")
          COMMAREA.CATOAP = PV0RM001.CATOAP;
          COMMAREA.CAITEM = PV0RM001.CAITEM;
          PV0RS50(); /* Exit Routine*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set*/
                                  /* General Error Flag*/
          /* ; /* Cannot FASTPATH with data keyed in*/
          PVUREC.PVUERNBR = 63;
        end
      end
    else
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      PV0RS50(); /* Exit Routine*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0RS30  ****/
end // end PV0RS30

// EXIT     Routine (XSEXIT)
Function PV0RS50()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSEXIT();
  ;
  if (PV0RW01.PV0RWMAP == "1")
    set PV0RM001.CATOAP cursor;
    PV0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0RS50  ****/
end // end PV0RS50

// VALIDATE Data Keyed In (ENTER)
Function PV0RS60()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0RM001.FROM-DATE == 0
   || PV0RM001.TO-DATE == 0)
    converseLib.validationFailed(240);
    PVWREC.PVWERRF = "Y";
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    if (PV0RM001.FROM-DATE == 0)
      set PV0RM001.FROM-DATE cursor, bold;
    else
      set PV0RM001.TO-DATE cursor, bold;
      set PV0RM001.FROM-DATE initialAttributes;
    end
    return;
  else
    set PV0RM001.FROM-DATE cursor, initialAttributes;
    set PV0RM001.TO-DATE cursor, initialAttributes;
    PV0RW02.PV0RWDT2 = 0;
    ;
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    PV0RW02.PV0RWDT2 = PV0RM001.FROM-DATE; /* date edit*/
    PV0RW02.PV0RWDT1 = PV0RM001.TO-DATE; /* date edit*/
    TA2REC.TA2GRGAN = PV0RW02.PV0RWDT2;
    ;
    /* call date routine for validation*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD != 0)
      PVWREC.PVWERRF = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      set PV0RM001.FROM-DATE cursor, bold;
      converseLib.validationFailed(082); /* INVALID DATE FORMAT*/
    else
      set PV0RM001.FROM-DATE cursor, initialAttributes;
      ;
    end
    ;
    TA2REC.TA2GRGAN = PV0RW02.PV0RWDT1;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD != 0)
      PVWREC.PVWERRF = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      set PV0RM001.TO-DATE cursor, bold;
      converseLib.validationFailed(082); /* INVALID DATE FORMAT*/
      return;
    else
      set PV0RM001.TO-DATE cursor, initialAttributes;
      ;
    end
  end
  if ((PV0RW02.PV0RWDT2 > PV0RW02.PV0RWDT1))
    converseLib.validationFailed(244);
    set PV0RM001.TO-DATE cursor, bold;
    set PV0RM001.FROM-DATE cursor, bold;
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    return;
  else
    set PV0RM001.TO-DATE initialAttributes;
    set PV0RM001.FROM-DATE initialAttributes;
    ;
  end
  if (PV0RM001.STATUS != " ")
    if (PV0RM001.STATUS == "UNR"
     || PV0RM001.STATUS == "RES")
      set PV0RM001.STATUS cursor, initialAttributes;
      ;
    else
      converseLib.validationFailed(236);
      PVWREC.PVWERRF = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      set PV0RM001.STATUS cursor, bold;
      /* next sentence*/
    end
  else
    ;
  end
  return; /* Last Statement*/
  ;
   /* ***  End of PV0RS60  ****/
end // end PV0RS60

// BUILD    Item Scroll Lines
Function PV0RS92()
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Line Item Scroll Lines FOR PV0RM002       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  PV0RW01.PV0RWCUR = PV0RW01.PV0RWTOP;
  PV0RW01.PV0RWCNT = 0;
  /* SET PV0RM002 EMPTY;*/
  ;
  while (PV0RW01.PV0RWCNT < PV0RW01.PV0RWMAX)
    /* INITIALIZE MAP 2 ROWS AS NEEDED*/
    PV0RW01.PV0RWCNT = PV0RW01.PV0RWCNT + 1;
    /* IF PV0RW01.PV0RWTOP EQ PV0RW01.PV0RWBOT;*/
    /* OVE PV0RW03.PV0R-PV-IVC-ID(PV0RWTOP) TO*/
    /* PV0RM002.PV-IVC-ID(PV0RWCNT);*/
    /* OVE PV0RW03.PV0R-PV-MSA-VEND-NBR(PV0RWTOP) TO*/
    /* PV0RM002.PV-MSA-VEND-NBR(PV0RWCNT);*/
    /* OVE PV0RW03.PV0R-PV-MSA-VEND-GRP(PV0RWTOP) TO*/
    /* PV0RM002.PV-MSA-VEND-GRP(PV0RWCNT);*/
    /* MOVE PV0RW03.PV0R-PV-PMT-VEND-IVC-ID(PV0RWTOP) TO*/
    /* PV0RM002.PV-PMT-VEND-IVC-ID(PV0RWCNT);*/
    /* MOVE PV0RW03.PV0R-PV-PMT-VEND-GRP(PV0RWTOP)*/
    /* TO PV0RM002.PV-PMT-VEND-GRP(PV0RWCNT);*/
    /* OVE PV0RW03.PV0R-PV-PMT-VEND-NBR(PV0RWTOP)*/
    /* TO PV0RM002.PV-PMT-VEND-NBR(PV0RWCNT);*/
    /* OVE PV0RW03.PV0R-PV-ERR-SEQ-NBR(PV0RWTOP)*/
    /* TO PV0RM002.PV-ERR-SEQ-NBR(PV0RWCNT);*/
    /* OVE PV0RW03.PV0R-PV-ERR-ACT-DESC(PV0RWTOP)*/
    /* TO PV0RM002.PV-ERR-ACT-DESC(PV0RWCNT);*/
    /* MOVE PV0RW03.PV0R-PV-ERR-CURR-STAT-CD(PV0RWTOP)*/
    /* ;/*    TO PV0RM002.PV-CURR-STAT-CD(PV0RWCNT);*/
    /* ;/*  MOVE PV0RW03.PV0R-PV-ERR-CSTMS-TXT(PV0RWTOP)*/
    /* ;/*    TO PV0RM002.PV-ERR-CSTMS-TXT(PV0RWCNT);*/
    /* MOVE PV0RW03.PV0R-PV-ERR-MSG(PV0RWTOP)*/
    /* TO PV0RM002.PV-ERR-MSG(PV0RWCNT);*/
    /* CHANGES DUE TO STORAGE*/
    PV0RM002.PV-IVC-ID[PV0RWCNT] = PV0RW03.PV0R-PV-IVC-ID[PV0RWTOP];
    PV0RM002.PV-MSA-VEND-NBR[PV0RWCNT] = PV0RW03.PV0R-PV-MSA-VEND-NBR[PV0RWTOP];
    PV0RM002.PV-MSA-VEND-GRP[PV0RWCNT] = PV0RW03.PV0R-PV-MSA-VEND-GRP[PV0RWTOP];
    PV0RM002.PV-PMT-VEND-IVC-ID[PV0RWCNT] = PV0RW04.PV0R-PV-PMT-VEND-IVC-ID[PV0RWTOP];
    PV0RM002.PV-PMT-VEND-GRP[PV0RWCNT] = PV0RW04.PV0R-PV-PMT-VEND-GRP[PV0RWTOP];
    PV0RM002.PV-PMT-VEND-NBR[PV0RWCNT] = PV0RW04.PV0R-PV-PMT-VEND-NBR[PV0RWTOP];
    PV0RM002.PV-ERR-SEQ-NBR[PV0RWCNT] = PV0RW05.PV0R-PV-ERR-SEQ-NBR[PV0RWTOP];
    PV0RM002.PV-ERR-ACT-DESC[PV0RWCNT] = PV0RW08.PV0R-PV-ERR-ACT-DESC[PV0RWTOP];
    PV0RM002.PV-CURR-STAT-CD[PV0RWCNT] = PV0RW06.PV0R-PV-ERR-CURR-STAT-CD[PV0RWTOP];
    PV0RM002.PV-ERR-CSTMS-TXT[PV0RWCNT] = PV0RW07.PV0R-PV-ERR-CSTMS-TXT[PV0RWTOP];
    PV0RM002.PV-ERR-MSG[PV0RWCNT] = PV0RW05.PV0R-PV-ERR-MSG[PV0RWTOP];
    PV0RM002.OWNER-GRP[PV0RWCNT] = PV0RW05.PV0R-PV-ERR-OWN-GRP[PV0RWTOP];
    PV0RM002.PV-ERR-LD-DT[PV0RWCNT] = PV0RW06.PV0R-PV-ERR-LD-DT[PV0RWTOP];
    PV0RM002.USER-ID[PV0RWCNT] = PV0RW09.USERID[PV0RWTOP];
    PV0RM002.ZZ-CHNG-DT[PV0RWCNT] = PV0RW09.ZZ-CHNG-DT[PV0RWTOP];
    ;
    PV0RW01.PV0RWTOP = PV0RW01.PV0RWTOP + 1;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0RS92  ****/
end // end PV0RS92

//*** RECORD=PV0RW01 ****
// ************************************************************
// *  PV0BW01 - WORKING STORAGE RECORD FOR PV0B APPLICATION   *
// *            MISCELLANEOUS FIELDS - INDEXES, FLAGS, ETC.   *
// *                                                          *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW01 type basicRecord
  5 PV0RW-PV0RW01-GROUP PV0RW-PV0RW01-GROUP ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 PV0RWMAP PV0RWMAP ; 
    10 PV0RWLST PV0RWLST ; 
    10 PV0RWPRV PV0RWPRV ; 
    10 PV0RWMAX PV0RWMAX ; 
    10 PV0RWMAX-MAP3 PV0RWMAX-MAP3 ; 
    10 PV0RWNUM PV0RWNUM ; 
    10 PV0RW-CALC-TOLERANCE PV0RW-CALC-TOLERANCE ; 
    10 PV0RWTOP PV0RWTOP ; 
    10 PV0RWTOP-MAP3 PV0RWTOP-MAP3 ; 
    10 PV0RWTOP-MAP2 PV0RWTOP-MAP2 ; 
    10 PV0RWBOT PV0RWBOT ; 
    10 PV0RWBOT-MAP3 PV0RWBOT-MAP3 ; 
    10 PV0RWBOT-MAP2 PV0RWBOT-MAP2 ; 
    10 PV0RWCNT PV0RWCNT ; 
    10 PV0RWCNT-MAP2 PV0RWCNT-MAP2 ; 
    10 PV0RWCUR PV0RWCUR ; 
    10 PV0RWCUR-MAP3 PV0RWCUR-MAP3 ; 
    10 PV0RWSCP PV0RWSCP ; 
    10 PV0RWIMX PV0RWIMX ; 
    10 PV0RWIDX PV0RWIDX ; 
    10 PV0RWIX2 PV0RWIX2 ; 
    10 PV0RWIX3 PV0RWIX3 ; 
    10 PV0RWIX4 PV0RWIX4 ; 
    10 PV0RWIX5 PV0RWIX5 ; 
    10 PV0RW-FIELD-CT PV0RW-FIELD-CT ; 
    10 PV-IVC-ID PV-IVC-ID ; 
    10 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
    10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
    10 PV-PMT-VEND-NM PV-PMT-VEND-NM ; 
    10 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
    10 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
    10 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
    10 PV-IVC-AMT PV-IVC-AMT ; 
    10 PV-CURR-STAT-CD PV-CURR-STAT-CD ; 
    10 PV0R-FROM-DT PV0R-FROM-DT ; 
    10 PV0R-TO-DT PV0R-TO-DT ; 
    10 PV0R-STATUS PV0R-STATUS ; 
    10 PV0RWUPF PV0RWUPF ; 
    10 PV0RWUP2 PV0RWUP2 ; 
    10 PV0RWUPF1 PV0RWUPF1 ; 
    10 PV0RWMDF PV0RWMDF ; 
end // end PV0RW01

//*** RECORD=PV0RW02 ****
//    This record contains the working storage fields that
// are unique to the application Pv0A - online coding.
// 
// Maintenance log:
// 08-19-94 BCourt  Add pv0awmax, init in pv0as00, see pv0aw01.
// 11-18-97 NJana   Add pv0adt3,pv0adt4 group variable for
//                  century field(Y2K validation)
// ***********************
Record PV0RW02 type basicRecord
  5 PV0RWMDF PV0RWMDF ; 
  5 PV0RWOSF PV0RWOSF ; 
  5 PV0RWFYF PV0RWFYF ; 
  5 PV0RWSZF PV0RWSZF ; 
  5 PV0RWEDF PV0RWEDF ; 
  5 PV0RWLLF PV0RWLLF ; 
  5 PV0RWBLD PV0RWBLD ; 
  5 PV0RWSCP PV0RWSCP ; 
  5 XSTCD XSTCD ; 
  5 PV0RWIDX PV0RWIDX ; 
  5 PV0RWFYX PV0RWFYX ; 
  5 PV0RWID2 PV0RWID2 ; 
  5 PV0RWIMX PV0RWIMX ; 
  5 PV0RWSIX PV0RWSIX ; 
  5 PV0RWLRX PV0RWLRX ; 
  5 PV0RWQY PV0RWQY ; 
  5 PV0RWINV PV0RWINV ; 
  5 PV0RW1DA PV0RW1DA ; 
  5 PV0RW1DB PV0RW1DB ; 
  5 PV0RW1DC PV0RW1DC ; 
  5 PV0RW1DD PV0RW1DD ; 
  5 PV0RW1DE PV0RW1DE ; 
  5 PV0RW1DG PV0RW1DG ; 
  5 PV0RWMT PV0RWMT ; 
  5 PV0RWFYP PV0RWFYP [50] ; 
    10 XUMCD XUMCD ; 
    10 PV0RWCDF PV0RWCDF ; 
    10 PCMIVQTY PCMIVQTY ; 
  5 PV0RWDTE PV0RWDTE ; 
    10 PV0RWCEN PV0RWCEN ; 
    10 PV0RWYR PV0RWYR ; 
    10 PV0RWMTH PV0RWMTH ; 
    10 PV0RWDAY PV0RWDAY ; 
  5 PV0RWDT2 PV0RWDT2 ; 
    10 PV0RWCN2 PV0RWCN2 ; 
    10 PV0RWMT2 PV0RWMT2 ; 
    10 PV0RWDA2 PV0RWDA2 ; 
    10 PV0RWYR2 PV0RWYR2 ; 
  5 PV0RWDT1 PV0RWDT1 ; 
    10 PV0RWCN1 PV0RWCN1 ; 
    10 PV0RWMT1 PV0RWMT1 ; 
    10 PV0RWDA1 PV0RWDA1 ; 
    10 PV0RWYR1 PV0RWYR1 ; 
  5 PV0RWDT3 PV0RWDT3 ; 
    10 PV0RWCN3 PV0RWCN3 ; 
    10 PV0RWYR3 PV0RWYR3 ; 
    10 PV0RWMT3 PV0RWMT3 ; 
    10 PV0RWDA3 PV0RWDA3 ; 
  5 PV0RWDT4 PV0RWDT4 ; 
    10 PV0RWCN4 PV0RWCN4 ; 
    10 PV0RWYR4 PV0RWYR4 ; 
    10 PV0RWMT4 PV0RWMT4 ; 
    10 PV0RWDA4 PV0RWDA4 ; 
  5 PV0RWMAX PV0RWMAX ; 
  5 PV0RWCDT PV0RWCDT ; 
  5 XIP-IVC-STAT-CD XIP-IVC-STAT-CD ; 
  5 TA2TIME TA2TIME ; 
    10 TA2TIMEN TA2TIMEN ; 
      15 TA2TIMHM TA2TIMHM ; 
      15 TA2TIMSS TA2TIMSS ; 
  5 PVADSCT PVADSCT ; 
  5 PVABANKC PVABANKC ; 
  5 PVAINT1 PVAINT1 ; 
  5 PVAINT2 PVAINT2 ; 
  5 PVAINT3 PVAINT3 ; 
  5 PVATCOMM PVATCOMM ; 
  5 PVAOCHG1 PVAOCHG1 ; 
  5 PVAOCHG2 PVAOCHG2 ; 
  5 PVASCHG1 PVASCHG1 ; 
  5 PVASCHG2 PVASCHG2 ; 
  5 PVABRKRY PVABRKRY ; 
  5 WS-PV-CSTMS-COMNT WS-PV-CSTMS-COMNT ; 
    10 WS-CSTMS-COMNT-1 WS-CSTMS-COMNT-1 ; 
    10 WS-CSTMS-COMNT-2 WS-CSTMS-COMNT-2 ; 
end // end PV0RW02

//*** RECORD=PV0RW03 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW03 type basicRecord
  3 PV0RW-PV0RW03-GROUP PV0RW-PV0RW03-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP1 PV0RW-MAP3-LINE-GROUP1 ; 
    5 PV0R-PV-IVC-ID PV0R-PV-IVC-ID [650] ; 
    5 PV0R-PV-MSA-VEND-NBR PV0R-PV-MSA-VEND-NBR [650] ; 
    5 PV0R-PV-MSA-VEND-GRP PV0R-PV-MSA-VEND-GRP [650] ; 
end // end PV0RW03

//*** RECORD=PV0RW04 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW04 type basicRecord
  3 PV0RW-PV0RW04-GROUP PV0RW-PV0RW04-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP4 PV0RW-MAP3-LINE-GROUP4 ; 
    5 PV0R-PV-PMT-VEND-NBR PV0R-PV-PMT-VEND-NBR [650] ; 
    5 PV0R-PV-PMT-VEND-GRP PV0R-PV-PMT-VEND-GRP [650] ; 
    5 PV0R-PV-PMT-VEND-IVC-ID PV0R-PV-PMT-VEND-IVC-ID [650] ; 
end // end PV0RW04

//*** RECORD=PV0RW05 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW05 type basicRecord
  3 PV0RW-PV0RW05-GROUP PV0RW-PV0RW05-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP5 PV0RW-MAP3-LINE-GROUP5 ; 
    5 PV0R-PV-ERR-MSG PV0R-PV-ERR-MSG [650] ; 
    5 PV0R-PV-ERR-SEQ-NBR PV0R-PV-ERR-SEQ-NBR [650] ; 
    5 PV0R-PV-ERR-OWN-GRP PV0R-PV-ERR-OWN-GRP [650] ; 
end // end PV0RW05

//*** RECORD=PV0RW06 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW06 type basicRecord
  3 PV0RW-PV0RW06-GROUP PV0RW-PV0RW06-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP6 PV0RW-MAP3-LINE-GROUP6 ; 
    5 PV0R-PV-ERR-CURR-STAT-CD PV0R-PV-ERR-CURR-STAT-CD [650] ; 
    5 PV0R-PV-ERR-MSG-ID PV0R-PV-ERR-MSG-ID [650] ; 
    5 PV0R-PV-ERR-LD-DT PV0R-PV-ERR-LD-DT [650] ; 
end // end PV0RW06

//*** RECORD=PV0RW07 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW07 type basicRecord
  3 PV0RW-PV0RW07-GROUP PV0RW-PV0RW07-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP7 PV0RW-MAP3-LINE-GROUP7 ; 
    5 PV0R-PV-ERR-CSTMS-TXT PV0R-PV-ERR-CSTMS-TXT [650] ; 
end // end PV0RW07

//*** RECORD=PV0RW08 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW08 type basicRecord
  3 PV0RW-PV0RW08-GROUP PV0RW-PV0RW08-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP8 PV0RW-MAP3-LINE-GROUP8 ; 
    5 PV0R-PV-ERR-ACT-DESC PV0R-PV-ERR-ACT-DESC [650] ; 
end // end PV0RW08

//*** RECORD=PV0RW09 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0RW09 type basicRecord
  3 PV0RW-PV0RW09-GROUP PV0RW-PV0RW09-GROUP ; 
    5 PV0RW-MAP3-LINE-GROUP9 PV0RW-MAP3-LINE-GROUP9 ; 
    5 USERID USERID [650] ; 
    5 ZZ-CHNG-DT ZZ-CHNG-DT [650] ; 
end // end PV0RW09

//*** RECORD=PVHREC ****
// PVGREC
// **********************
Record PVHREC type basicRecord
  10 PV0R-PVHREC-GROUP PV0R-PVHREC-GROUP ; 
    15 PV0R-FROM-DATE PV0R-FROM-DATE ; 
    15 PV0R-TO-DATE PV0R-TO-DATE ; 
end // end PVHREC

DataItem PV0R-FROM-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PV0R-FROM-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ACTION TAKEN
DataItem PV0R-PV-ERR-ACT-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-ERR-CSTMS-TXT
DataItem PV0R-PV-ERR-CSTMS-TXT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-PV-ERR-CURR-STAT-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-PV-ERR-LD-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PV0R-PV-ERR-MSG char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-PV-ERR-MSG-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-PV-ERR-OWN-GRP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV ERROR SEQUENCE NUMBER
DataItem PV0R-PV-ERR-SEQ-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PV-IVC-ID
DataItem PV0R-PV-IVC-ID char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-MSA-VEND-GRP
DataItem PV0R-PV-MSA-VEND-GRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike business entity
DataItem PV0R-PV-MSA-VEND-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-PMT-VEND-GRP
DataItem PV0R-PV-PMT-VEND-GRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-PMT-VEND-IVC-ID
DataItem PV0R-PV-PMT-VEND-IVC-ID char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-PMT-VEND-NBR
DataItem PV0R-PV-PMT-VEND-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-PVHREC-GROUP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-STATUS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV ERROR MESSAGE DESCRIPTION
DataItem PV0R-TO-DATE int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0R-TO-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Calculated Tolerance
DataItem PV0RW-CALC-TOLERANCE decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COUNT NUMBER OF FIELDS ENTERED
DataItem PV0RW-FIELD-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP3 ROW GROUP ITEM
DataItem PV0RW-MAP3-LINE-GROUP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP3 ROW GROUP ITEM
DataItem PV0RW-MAP3-LINE-GROUP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP3 ROW GROUP ITEM
DataItem PV0RW-MAP3-LINE-GROUP5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RW-MAP3-LINE-GROUP6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RW-MAP3-LINE-GROUP7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RW-MAP3-LINE-GROUP8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RW-MAP3-LINE-GROUP9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM-PV0RW01 WORK STORAG
DataItem PV0RW-PV0RW01-GROUP char(187)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PV0RW-PV0RW02-GROUP char(187)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW03-GROUP char(18201)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW04-GROUP char(18201)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW05-GROUP char(27301)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW06-GROUP char(7801)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW07-GROUP char(32501)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM008 DATA
DataItem PV0RW-PV0RW08-GROUP char(19501)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0RM002 DATA
DataItem PV0RW-PV0RW09-GROUP char(6501)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// totals ws field
DataItem PV0RW1DA bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// totals ws field
DataItem PV0RW1DB bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// totals ws field
DataItem PV0RW1DC bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// totals ws field
DataItem PV0RW1DD bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// totals ws field
DataItem PV0RW1DE bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commission working storage
DataItem PV0RW1DG bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Build Screen Array (Y/N)
DataItem PV0RWBLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointerfor sumry
DataItem PV0RWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer for pmts
DataItem PV0RWBOT-MAP2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer for pmts
DataItem PV0RWBOT-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// processed flag (y/n)
DataItem PV0RWCDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp storage for current date
DataItem PV0RWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PV0RWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PV0RWCN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PV0RWCN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PV0RWCN3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PV0RWCN4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Scroll Counter for sumr
DataItem PV0RWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter for pmts
DataItem PV0RWCNT-MAP2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for sumry
DataItem PV0RWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for pmts
DataItem PV0RWCUR-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PV0RWDA1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PV0RWDA2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PV0RWDA3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PV0RWDA4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PV0RWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit for screen
DataItem PV0RWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit for screen
DataItem PV0RWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit for screen
DataItem PV0RWDT3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit for screen
DataItem PV0RWDT4 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit for dbase
DataItem PV0RWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error exists (y/n)
DataItem PV0RWEDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fypo processed (y/n)
DataItem PV0RWFYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fypo table
DataItem PV0RWFYP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fypo index for select scan
DataItem PV0RWFYX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index used for repeat
DataItem PV0RWID2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index USED IN PF17 DELETE PROC
DataItem PV0RWIDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index max
DataItem PV0RWIMX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// totals fob + freight
DataItem PV0RWINV bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 list table
DataItem PV0RWIX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 3 pmt details
DataItem PV0RWIX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE SELECTION
DataItem PV0RWIX4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE UPDATE
DataItem PV0RWIX5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line item found (y/n)
DataItem PV0RWLLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// left right index
DataItem PV0RWLRX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Item Screen
DataItem PV0RWLST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Active Screen
DataItem PV0RWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0RWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0RWMAX-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// modified(y/n)
DataItem PV0RWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line total
DataItem PV0RWMT bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PV0RWMT1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PV0RWMT2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PV0RWMT3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PV0RWMT4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PV0RWMTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric Work Area
DataItem PV0RWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// over and short flag (y/n)
DataItem PV0RWOSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev Active Screen
DataItem PV0RWPRV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fypo remainder
DataItem PV0RWQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scratch Pad Written(Y/N)
DataItem PV0RWSCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style index
DataItem PV0RWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size flag (y/n)
DataItem PV0RWSZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for sumry
DataItem PV0RWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for pmts
DataItem PV0RWTOP-MAP2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for pmts
DataItem PV0RWTOP-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RWUP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0RWUPF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PV0RWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PV0RWYR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PV0RWYR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PV0RWYR3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PV0RWYR4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem WS-CSTMS-COMNT-1 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WS-CSTMS-COMNT-2 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WS-PV-CSTMS-COMNT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

