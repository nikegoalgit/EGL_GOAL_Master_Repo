package pv0d;
import corpcom2.XSRREC;
import corpcom3.XPPV-VPVPMT01;
import corpcom3.XPPV001;
import corpcom3.XPPV400;
import corpcom3.XPPV440;
import corpcom3.XPPV960;
import corpcom3.XPPV970;
import corpcom3.XPPV980;
import corpcom3.XPPV990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS54;
import corpcom4.XSPVS57;
import corpcom4.XSPVS58;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import pc.common.PCMOSQTY;
import pv.common.*;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VPVPMT01;
import xx.common.*;
import xx.common.XQACD;
import xx02.*;
import xx02.XFATBL;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=PV0D ****
// ************************************************************
// *
// *   PV0D - Matching Errors and Force Matching
// *
// *   This application will be used to display on-line
// *   match errors and will allow the 'FORCE' match process
// *   if requested by an authorized user.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       03-14-91  HVARGA  Initial Construction
// *       07-17-96  JLoyer  Install Bhasha mods to replace
// *                         pvovndsn with pvovndnm.
// *       11-24-99  GDECKE  NISSHO CONTINGENCY - WRITE PAYMENT
// *                         LINE TO DATABASE.
// *       01-27-00  JKUNDU  NISSHO CONTINGENCY - TO GO BACK TO
// *                         PV0B WHILE PRESSING PF3 PER USER
// *                         REQUEST. CHANGED IN XSPVS60
// *       02-28-00  JKUNDU  Changed in SGRP PV0DS64 to show an
// *                         error message if the adjustment
// *                         amount is not within +/- 1000.00
// *       04-25-00  JKUNDU  Changed in SGRP PV0DS11 to move
// *                         pv-ivc-id to ref-ivc-id.
// *       06-09-00  PSARKA  Changed in SGRP PV0DS64 to prevent
// *                         the error msg if adjustment amt
// *                         is not within +/- 1000.00 for
// *                         price adjustment.
// ************************************************************
// *********************
Program PV0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PV0DW01 PV0DW01; // record
  PV0DW02 PV0DW02; // record
  PV0DW03 PV0DW03; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVFREC PVFREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVXREC PVXREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPVPMT01 VPVPMT01; // record
  XSRREC XSRREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PVDTBL {deleteAfterUse = yes}; // table
  use PVFTBL {deleteAfterUse = yes}; // table
  use XFATBL {deleteAfterUse = yes}; // table
  use PV0DM.PV0DM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0D000: PV0D000();
  end // end main
end // end PV0D

// READ     VENDOR NAME IO5680
Function PV0D-GET-FOB-PMT()

   /* *************************************************************/
   /* ***  CHECK ON FACTORY INVOICE PAYMENT RECORDS. FIND THE  ****/
   /* ***  FOB PAYMENT. IF FOUND, USE THE VENDOR INVOICE NUMBER****/
   /* ***  AS THE PV-REV-IVC-ID ON THE HEADER, AND USE THE VENDOR**/
   /* ***  IVC ID, VENDOR NUMBER, AND VENDOR GROUP ON THE NEW  ****/
   /* ***  FOB RECORD FOR THE ADJUSTMENT FACTORY INVOICE       ****/
   /* *************************************************************/


  PV0DW01.PV-IVC-ID = PV0DM100.PVAIVCID;

  VPVPMT01.PV-IVC-ID = PV0DM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0DM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0DM100.PVOVENDG;

  PV0DW01.PV-IVC-ID = PV0DM100.PVAIVCID;
  PV0DW01.PV-MSA-VEND-NBR = PV0DM100.PVOVENDR;
  PV0DW01.PV-MSA-VEND-GRP = PV0DM100.PVOVENDG;

   /* OPEN CURSOR FOR PAYMENT RECORDS*/
  PVYREC.PVYFNC = "S1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/

  PV0DW01.PV0DW-FOB-REC-FOUND = "N";
  PV0DW01.PV-PMT-VEND-IVC-ID = " ";
  PV0DW01.PV-PMT-VEND-NBR = " ";
  PV0DW01.PV-PMT-VEND-GRP = " ";
  while (SQLCA.VAGen_SQLCODE == 0
   && PV0DW01.PV0DW-FOB-REC-FOUND == "N")
    /* FETCH LINES FROM VPVPMT01*/
    PVYREC.PVYFNC = "N1";
    XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VPVPMT01.PV-MSA-VEND-GRP == PV0DW01.PV-MSA-VEND-GRP)
      if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
        PV0DW01.PV0DW-FOB-REC-FOUND = "Y";
        PV0DW01.PV-PMT-VEND-IVC-ID = VPVPMT01.PV-PMT-VEND-IVC-ID;
        PV0DW01.PV-PMT-VEND-NBR = VPVPMT01.PV-PMT-VEND-NBR;
        PV0DW01.PV-PMT-VEND-GRP = VPVPMT01.PV-PMT-VEND-GRP;
      end
    end
  end

   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C1";


   /* ***  End of PV0B-VPVPMT01  ****/
end // end PV0D-GET-FOB-PMT

// PROCESS  Main Logic
Function PV0D000()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0D    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0D001(); /* Initialization Logic*/

  PV0DS01(); /* Check Who Invoked this Application*/

  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    PV0D100(); /* Converse PV0DM100*/
    PV0D110(); /* Check PF Keys and Exits*/
    PV0D120(); /* Check what to do next*/
    PV0D130(); /* Determine next Map action*/
  end

  exit program;

  return; /* Last Statement*/


   /* ***  End of PV0D000  ****/
end // end PV0D000

// INIT     Routine
Function PV0D001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0DW01 empty;
  set PV0DW02 empty;
  set PV0DM100 initial;

  set PVFREC empty;
  set PVLREC empty;
  set PVXREC empty;
  set PVZREC empty;
  set TA2REC empty;
  set XSRREC empty;

  XSPVS01(); /* Initialize PV Common Routine Fields*/

  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAPAP = TA1REC.TA1PGMNM;
  TA1REC.TA1MAPNO = "M100";

    /* Get System Date and Time*/
  PV0DS09();

    /* Set Maximum Scroll Lines*/
  PV0DW01.PV0DWMAX = 13;

   /* Set Successful Flag*/
  PV0DW01.PV0DWSUC = 0;

  return; /* Last Statement*/

   /* ***  End of PV0D001  ****/
end // end PV0D001

// CONVERSE MATCH Errors Screen
Function PV0D100()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse MATCH Errors Screen                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0DM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0DM100.TA2TIMED = VGVar.currentFormattedTime;

  if (PVUREC.PVUINQRY == "Y")
    set PV0DM100.CATOAP cursor;
  end

  converse PV0DM100 ;

  return; /* Last Statement*/


   /* ***  End of PV0D100  ****/
end // end PV0D100

// CHECK    PF Keys and Exits
Function PV0D110()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)
    PV0D401(); /* Purge Scratch Pad*/
    PV0DS08(); /* CLEAR COMMAREA Flags*/
  end
  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter)
       /* OK, Please proceed*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
         /* BACKWARD performed. Please proceed*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
           /* FORWARD performed. Please proceed*/
          PVUREC.PVUERNBR = 4;
        else
          if (converseVar.eventKey is pf15)
            PVUREC.PVUERNBR = PV0DW01.PV0DWSUC;
          else
             /* Invalid PF Key*/
            PVUREC.PVUERNBR = 1;
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D110  ****/
end // end PV0D110

// CHECK    What to do next
Function PV0D120()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0DS30(); /* Check if ENTER key was pressed*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0D150(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D120  ****/
end // end PV0D120

// DECIDE   Next Map Action
Function PV0D130()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Determine the Next Map Action           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DW01.PV0DWPFM == "Y")
    if (PVZREC.PVZMCHER == "1"
     && PVZREC.PVZCODER == "1")
       /* Successful Force Match and Coding*/
      PVUREC.PVUERNBR = 76;
    end
    PV0DM100.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CATOAP = PV0DM100.CATOAP;
    PVUREC.PVUPVZRC = PVZREC.PVZGRP;
    COMMAREA.CAUSERA = PVUREC.PVUGROUP;
    PV0DW02.PV0DWTOP = PV0DW02.PV0DWBOT;
    PV0DS92(); /* Clear Scroll Lines*/
    set PV0DM100.PV0DMPAM skip;
    set PV0DM100.PV0DMQAM skip;
    set PV0DM100.CATOAP skip;
    set PV0DM100.CAITEM skip;
  end


  return; /* Last Statement*/


   /* ***  End of PV0D130  ****/
end // end PV0D130

// CHECK    if allowed to continu
Function PV0D150()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0DS03(); /* Send the user back to PV0A.*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf15
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf24)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter)
      PV0D160(); /* Validate Data Keyed in*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
        PV0D170(); /* Go Back One Screen*/
        PV0DS68(); /* Check if fields were modified*/
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
          PV0D180(); /* Go Forward One Screen*/
          PV0DS68(); /* Check if fields were modified*/
        else
          if (converseVar.eventKey is pf15)
            if (PVUREC.PVUINQRY == "Y")
               /* Insufficient Authority for Function Requested*/
              PVUREC.PVUERNBR = 2;
            else
              PV0D190(); /* Force Match*/
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D150  ****/
end // end PV0D150

// ENTER    KEY Routine
Function PV0D160()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check INPUT Fields.                               ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0DS60(); /* Validate Data Keyed In*/

  return; /* Last Statement*/


   /* ***  End of PV0D160  ****/
end // end PV0D160

// BACK     One Page Routine
Function PV0D170()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DW02.PV0DWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0DW02.PV0DWTOP = PV0DW02.PV0DWCUR - PV0DW01.PV0DWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0DW02.PV0DWTOP = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0DW02.PV0DWTOP = PV0DW02.PV0DWCUR - PV0DW01.PV0DWMAX;
      end
    end
    if (PV0DW02.PV0DWTOP <= 0)
      PV0DW02.PV0DWTOP = 1;
    end
    PV0DS92(); /* Build Scroll Lines*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0D170  ****/
end // end PV0D170

// FORWARD  One Page Routine
Function PV0D180()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf20)
    PV0DW02.PV0DWTOP = PV0DW02.PV0DWCUR + PV0DW01.PV0DWMAX / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0DW02.PV0DWTOP = PV0DW02.PV0DWBOT - PV0DW01.PV0DWMAX;
    end
  end

  if (PV0DW02.PV0DWTOP >= PV0DW02.PV0DWBOT)
    PV0DW02.PV0DWTOP = PV0DW02.PV0DWBOT - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end

  if (PV0DW02.PV0DWTOP <= 0)
    PV0DW02.PV0DWTOP = 1;
  end

  PV0DS92(); /* Build Scroll Lines*/

  return; /* Last Statement*/


   /* ***  End of PV0D180  ****/
end // end PV0D180

// FORCE    MATCH Routine
Function PV0D190()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Force Match                                       ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0DS60(); /* Validate Data Keyed in*/
   /* JKUNDU CHANGE BEGIN 02/28/00*/
  if (PVUREC.PVUERNBR == 0)
    PV0DS64(); /* Validate further for Force Matching*/
  end
   /* JKUNDU CHANGE END   02/28/00*/

  if (PVUREC.PVUERNBR == PV0DW01.PV0DWSUC)
    PV0D401(); /* Purge Old Scratch Pad*/
    PV0DS07(); /* Set Force Flag and Other Info*/
    PV0DW01.PV0DWPFM = "Y"; /* Set FORCE MATCH Performed Flag*/
    PV0D195(); /* Call PV5000*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0D190  ****/
end // end PV0D190

// CALL     PV5000 (Matching)
Function PV0D195()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Matching Process                                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "PV5000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  PVZREC.PVAFRMIN = " ";
  if (PVZREC.PVZMCHER == "1"
   || PVZREC.PVZMCHER == "2")
    PV0DS09(); /* Get Time Stamp*/
    if (PV0DM100.PV0DMPAM == "Y"
     && PV0DW02.PV0DWPCT > 0)
      PV0D500(); /* Create a Price Adjustment Memo*/
    end
    if (PV0DM100.PV0DMQAM == "Y"
     && PV0DW02.PV0DWQCT > 0)
      if (PVZREC.PVZNORCV == "Y"
       && PV0DM100.PV0DMQAM != "Y")
         /* next sentence*/
      else
        PV0D510(); /* Create a Quantity Adjustment Memo*/
      end
    end
    move PV0DM100 to PVUREC withV60Compat;
    XSPVS54(); /* Create VFORCE01 Entries*/
    if (PV0DM100.PV0DMDUM == "Y")
      PV0D200(); /* Back out Updates if Dummy Close*/
    end
    PV0D196(); /* CODING Routine*/
  else
    if (PVZREC.PVZMCHER == "3")
       /* Fatal Match Error ; Contact Systems Development*/
      PVUREC.PVUERNBR = 27;
    else
       /* Force Match Failed. Return to Invoice Entry*/
      PVUREC.PVUERNBR = 74;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D195  ****/
end // end PV0D195

// CALL     PV6000 (Coding)
Function PV0D196()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Coding Routine                                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set SQLCA empty;
  call "PV6000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  if (PVZREC.PVZCODER == "1")
     /* next sentence*/
  else
    if (PVZREC.PVZCODER == "3")
       /* Fatal Coding Error ; Contact Systems Development*/
      PVUREC.PVUERNBR = 26;
    else
       /* Force Match OK/Coding Failed. Return to Invoice Entry*/
      PVUREC.PVUERNBR = 75;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D196  ****/
end // end PV0D196

// BACK OUT Updates if Dummy Clos
Function PV0D200()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Back Out Updates if Dummy Close                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

   /* Plan #1 - Delete Force Error Table entries*/
   /* Plan #2 - Zero out Over/Short Quantity field in line items*/
   /* Plan #3 - Clear Force Match Indicator in header*/
             /* except when a Price Adj Memo is requested*/


  move PV0DM100 to PVAREC withV60Compat;
  PVYREC.PVYFNC = "S "; /* Get Original Invoice*/
  XPPV960(); /* IOMOD VPVHDR01*/

  move PV0DM100 to PVLREC withV60Compat;
  PVLREC.PVBLNINB = -1; /* Select All Force Entries*/
  PVYREC.PVYFNC = "S1"; /* Declare Cursor*/
  PVYREC.PVYRESN1 = "1";
  PVYREC.PVYRESN2 = "2";
  PVYREC.PVYRESN3 = "3";
  PVYREC.PVYRESN4 = "4";
  XPPV440();
  PVYREC.PVYFNC = "N1"; /* Prime Fetch*/
  XPPV440();
  while (SQLCA.VAGen_SQLCODE == 0)
    if (PVAREC.PVAFRMIN == "2" /* Price Adj is exception*/
     && PVLREC.XFACD == "01") 
       /* next sentence*/
    else
      PVYREC.PVYFNC = "D "; /* Delete Row*/
      XPPV440();
    end
    PVYREC.PVYFNC = "N1"; /* Fetch Next Row*/
    XPPV440();
  end
  PVYREC.PVYFNC = "C1"; /* Close Cursor*/
  XPPV440();

  move PV0DM100 to PVBREC withV60Compat;
  PVYREC.PVYFNC = "S1"; /* Declare Cursor*/
  XPPV970(); /* IOMOD VPVITM01*/
  PVYREC.PVYFNC = "N1"; /* Prime Fetch*/
  XPPV970(); /* IOMOD VPVITM01*/
  while (SQLCA.VAGen_SQLCODE == 0)
    PVBREC.PCMOSQTY = 0;
    PVYREC.PVYFNC = "U "; /* Update Line Item*/
    XPPV970(); /* IOMOD VPVITM01*/
    PVYREC.PVYFNC = "N1"; /* Fetch Next Row*/
    XPPV970(); /* IOMOD VPVITM01*/
  end
  PVYREC.PVYFNC = "C1"; /* Close Cursor*/
  XPPV970(); /* IOMOD VPVITM01*/
  if (PVAREC.PVAFRMIN == "2") /* Price Adj is exception*/
     /* next sentence*/
  else
    PVAREC.PVAFRMIN = " "; /* Clear Force Match Indicator*/
    PVYREC.PVYFNC = "U "; /* Update Header*/
    XPPV960(); /* IOMOD VPVHDR01*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0D200  ****/
end // end PV0D200

// READ     SCRATCH PAD IO3400
Function PV0D400()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Scratch Pad                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSRREC.XSRSYSID = COMMAREA.CACURSYS;
  XSRREC.XSRSUBID = COMMAREA.CAUSERID;
  XSRREC.XSRSQNBR = 1;

  PVYREC.PVYFNC = "S ";
  XPPV400(); /* IOMOD VCSPAD01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PVXREC.PVXGRP = XSRREC.XSRDATA;
    PVZREC.PVOVENDR = PVXREC.PVOVENDR;
    PVZREC.PVOVENDG = PVXREC.PVOVENDG;
    PVZREC.PVAIVCID = PVXREC.PVAIVCID;
  else
    PV0DS50(); /* Protect Input Fields*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0D400  ****/
end // end PV0D400

// DELETE   SCRATCH PAD IO3400
Function PV0D401()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Delete Scratch Pad                               ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DW01.PV0DWDLS == "Y")
     /* next sentence*/
  else
    PVYREC.PVYFNC = "D ";
    XPPV400(); /* IOMOD VCSPAD01*/

    PVUREC.PVUSCRDL = "Y";
  end

  return; /* Last Statement*/


   /* ***  End of PV0D401  ****/
end // end PV0D401

// CREATE   Price Adj Memo
Function PV0D500()
   /* PV0D500*/
   /* 11-24-99  GDECKE  NISSHO CONTINGENCY - INSERT FOB PAYMENT LINE*/
   /*  */
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Create Price Adjustment Memo                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVUREC.PVBLNINB = 0;
  PVUREC.PVXERNBR = 0;
  set PVFREC empty;
  PV0DW02.PV0DWCNT = 1;
  while (PVXREC.PVXERNBR[PV0DWCNT] > 0)
    if (PVXREC.PVXPDIFF[PV0DWCNT] == 0
     || PVXREC.PVBLNINB[PV0DWCNT] == 0)
       /* next sentence*/
    else
      if (PVXREC.PVXQDIFF[PV0DWCNT] == 0)
        if (PVFREC.PVFNXIVC == " ") /* First time?*/
          PV0D990(); /* Get Next Invoice Number*/
          PV0DM100.PVARIVID[2] = PVUREC.PVAIVCID;
        end
        PVBREC.PVBLNINB = PVXREC.PVBLNINB[PV0DWCNT];
        if (PVXREC.PVBLNINB[PV0DWCNT] == PVUREC.PVBLNINB
         && PVXREC.PVXERNBR[PV0DWCNT] == PVUREC.PVXERNBR)
           /* next sentence*/
        else
          PVBREC.PVAIVCID = PV0DM100.PVAIVCID;
          PVBREC.PVOVENDR = PV0DM100.PVOVENDR;
          PVBREC.PVOVENDG = PV0DM100.PVOVENDG;
          PV0D970(); /* Read VPVITM01 IO5670*/
          PV0DS10(); /* Build Price Adj Rec*/
          PV0D971(); /* Insert VPVITM01 IO5670*/
        end
      end
    end
    PVUREC.PVBLNINB = PVXREC.PVBLNINB[PV0DWCNT];
    PVUREC.PVXERNBR = PVXREC.PVXERNBR[PV0DWCNT];
    PV0DW02.PV0DWCNT = PV0DW02.PV0DWCNT + 1;
  end

   /* Create Price Adj Invoice Total*/

  PV0D-GET-FOB-PMT();

  PV0D960(); /* Load Invoice Info Again*/
  PV0DS11(); /* Build Price Adj Invoice Total Rec*/
  PV0D961(); /* Insert VPVHDR01 IO5660*/

  if (PVAREC.PVATFOB != 0)
    PV0DS-ADD-VPVPMT01();
  end

  return; /* Last Statement*/


   /* ***  End of PV0D500  ****/
end // end PV0D500

// CREATE   Quantity Adj Memo
Function PV0D510()
   /* pv0d510*/
   /*  */
   /* 12-01-99  GDECKE  NISSHO CONTINGENCY - WRITE PAYMENT RECORD*/
   /* FOR QUANTITY ADJUSTMENT*/
   /*  */
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Create Quantity Adjustment Memo                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PVFREC empty;
  PV0DW02.PV0DWCNT = 1;
  while (PVXREC.PVXERNBR[PV0DWCNT] > 0)
    if (PVXREC.PVXQDIFF[PV0DWCNT] == 0
     || PVXREC.PVBLNINB[PV0DWCNT] == 0)
       /* next sentence*/
    else
      if (PVFREC.PVFNXIVC == " ") /* First time?*/
        PV0D990(); /* Get Next Invoice Number*/
        PV0DM100.PVARIVID[1] = PVUREC.PVAIVCID;
      end
      PVBREC.PVAIVCID = PV0DM100.PVAIVCID;
      PVBREC.PVOVENDR = PV0DM100.PVOVENDR;
      PVBREC.PVOVENDG = PV0DM100.PVOVENDG;
      PVBREC.PVBLNINB = PVXREC.PVBLNINB[PV0DWCNT];
      PV0D970(); /* Read VPVITM01 IO5670*/
      PV0DS12(); /* Build Quantity Adj Rec*/
      PV0D971(); /* Insert VPVITM01 IO5670*/
    end
    PV0DW02.PV0DWCNT = PV0DW02.PV0DWCNT + 1;
  end

   /* Create Quantity Adj Invoice Total*/

  PV0D-GET-FOB-PMT();

  PV0D960();
  PV0DS13(); /* Build Quantity Adj Invoice Total Rec*/
  PV0D961(); /* Insert VPVHDR01 IO5660*/

  if (PVAREC.PVATFOB != 0)
    PV0DS-ADD-VPVPMT01();
  end


  return; /* Last Statement*/

end // end PV0D510

// READ     IVC HEADER IO5660
Function PV0D960()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Header                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVAREC.PVOVENDR = PVZREC.PVOVENDR;
  PVAREC.PVOVENDG = PVZREC.PVOVENDG;
  PVAREC.PVAIVCID = PVZREC.PVAIVCID;

  PVBREC.PVOVENDR = PVZREC.PVOVENDR;
  PVBREC.PVOVENDG = PVZREC.PVOVENDG;
  PVBREC.PVAIVCID = PVZREC.PVAIVCID;

  PVYREC.PVYFNC = "S ";
  XPPV960(); /* IOMOD VPVHDR01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (PVAREC.XIPCD == "UM")
       /* next sentence*/
    else
       /* Invalid Status to Update*/
      PVUREC.PVUERNBR = 7;
      PV0DS02(); /* SET Not Allowed*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0D960  ****/
end // end PV0D960

// INSERT   IVC HEADER IO5660
Function PV0D961()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Header                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "A ";
  XPPV960(); /* IOMOD VPVHDR01*/

  return; /* Last Statement*/


   /* ***  End of PV0D961  ****/
end // end PV0D961

// READ     IVC ITEM IO5670
Function PV0D970()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Item                                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "S ";
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0D970  ****/
end // end PV0D970

// INSERT   IVC ITEM IO5670
Function PV0D971()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Item                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "A ";
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0D971  ****/
end // end PV0D971

// READ     VENDOR NAME IO5680
Function PV0D980()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVOREC.PVOVENDR = PVZREC.PVOVENDR;
  PVOREC.PVOVENDG = PVZREC.PVOVENDG;

  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PVOREC.PVOVNDNM = "*NAME NOT FOUND";
  end

  return; /* Last Statement*/


   /* ***  End of PV0D980  ****/
end // end PV0D980

// GET NEXT Invoice IO5690
Function PV0D990()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Next Invoice Number                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "S ";
  XPPV990(); /* IOMOD VPVCTL01*/

  XSPVS58(); /* Format Invoice Number*/

  PVFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVFREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PVYREC.PVYFNC = "U ";
  XPPV990(); /* IOMOD VPVCTL01*/

  return; /* Last Statement*/


   /* ***  End of PV0D990  ****/
end // end PV0D990

// Load Pvarec for Update
Function PV0DS-ADD-VPVPMT01()
   /* Maintenance log:*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* ******************************************************/

  set VPVPMT01 empty;

   /* FIND THE STATUS CODE THAT SHOULD BE ON THE PAYMENT LINES*/
  if (PVAREC.XIPCD == "NP")
    VPVPMT01.XIP-IVC-STAT-CD = "ER";
  else
    VPVPMT01.XIP-IVC-STAT-CD = "UN";
  end

   /* UPDATE FOB PAYMENT LINE - TYPE CODE 'FB'*/

  if (PVAREC.PVATFOB != 0)
    VPVPMT01.PV-PMT-VEND-IVC-ID = PVAREC.PVAIVCID;

    if (PV0DW01.PV0DW-FOB-REC-FOUND == "Y")
      VPVPMT01.PV-PMT-VEND-NBR = PV0DW01.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0DW01.PV-PMT-VEND-GRP;
    else
      VPVPMT01.PV-PMT-VEND-NBR = PVAREC.PVOVENDR;
      VPVPMT01.PV-PMT-VEND-GRP = PVAREC.PVOVENDG;
    end

    VPVPMT01.PV-IVC-ID = PVAREC.PVAIVCID;
    VPVPMT01.PV-MSA-VEND-NBR = PVAREC.PVOVENDR;
    VPVPMT01.PV-MSA-VEND-GRP = PVAREC.PVOVENDG;
    VPVPMT01.XPV-IVC-TYP-CD = "FB";
    VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATFOB;
    VPVPMT01.PV-IVC-TO-AP-DT = 0;
    VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
    VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
    VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
    VPVPMT01.ZZ-CHNG-CNT = 0;
    PV0DW03.PV0DW-DBIO-FUNCTION = "A ";
    PV0DS-CALL-VPVPMT(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  end

end // end PV0DS-ADD-VPVPMT01

// Load Pvarec for Update
Function PV0DS-CALL-VPVPMT()
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UPDATE VPVPMT01 LINES*/
   /* FOR FOB.*/
   /* ******************/
   /* update PV0AM100 PAYMENT CHANGES*/
   /* ******************/


  set SQLCA empty;
  call "VPVPMT01" (PV0DW03, SQLCA, VPVPMT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0   /* PAYMENT found--> UPDATE*/
   || SQLCA.VAGen_SQLCODE == 100 /* PAYMENT not found*/
   || SQLCA.VAGen_SQLCODE == -911
  )                              /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1LOCAT[2] = "SELECT DB2 PVPMT01";
    TA1REC.TA1LOC = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1DBASE = "DPINVC";
    TA1REC.TA1TBLVU = "VPVPMT01";
    TA1REC.TA1TBLKE = VPVPMT01.PV-IVC-ID;
    XSPVS52();
  end

end // end PV0DS-CALL-VPVPMT

// CHECK    Who Invoked me
Function PV0DS01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if the call was Legitimate                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSENTRY();
  XSSEGTR();

  PVZREC.PVZGRP = PVUREC.PVUPVZRC;
  if (PVZREC.PVZRECRD == "PVZREC  "
   || COMMAREA.CAFROMAP == "PV0A"
   || COMMAREA.CAFROMAP == "PV0M")
    PV0DS04(); /* Check Security Access Type*/
    PV0DS05(); /* Build the Screen*/
  else
    PV0DS02(); /* Set Not Allowed*/
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS01  ****/
end // end PV0DS01

// SET      Not Allowed
Function PV0DS02()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Do not Allow to continue                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVUREC.PVUALLWD = "N";
  PV0DM100.CATOAP = COMMAREA.CAFROMAP;
  PV0DM100.CAITEM = " ";
  set PV0DM100.CATOAP protect;
  set PV0DM100.CAITEM protect;
  PV0DS50(); /* Protect Input Fields*/

  return; /* Last Statement*/


   /* ***  End of PV0DS02  ****/
end // end PV0DS02

// GO BACK  to Calling Applicatio
Function PV0DS03()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to PV0A Application                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0D401(); /* Purge Scratch Pad*/

  XSPVS60(); /* PV COMMON Exit*/
  PV0DS51(); /* Exit Routine*/

  return; /* Last Statement*/


   /* ***  End of PV0DS03  ****/
end // end PV0DS03

// CHECK    Security Access Type
Function PV0DS04()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    This routine will set Inquiry only Flag if needed   ***/
   /* ***    and the adjustment memo limits.                   ****/
   /* *************************************************************/

  if (COMMAREA.CACHGFL == "N")
    PVUREC.PVUINQRY = "Y";
    set PV0DM100.PV0DMQAM skip;
    set PV0DM100.PV0DMPAM skip;
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS04  ****/
end // end PV0DS04

// BUILD    the Screen
Function PV0DS05()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build the screen                                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0D400(); /* Read Scratch Pad*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PV0D960(); /* Read Invoice Header*/
    PV0D980(); /* Get  Vendor Name*/

    move PVOREC to PV0DM100 withV60Compat;
    move PVAREC to PV0DM100 withV60Compat;

    if (XSRREC.XSRSQNBR > 0)
      PV0DS90(); /* Build Screen Working Storage*/
      PV0DS92(); /* Build Scroll Lines*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS05  ****/
end // end PV0DS05

// ACCUM    Differences
Function PV0DS06()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Accumulate Differences                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

   /* Accumulate Price Difference*/
  if (PVXREC.PVXPDIFF[PV0DWBOT] == 0)
     /* next sentence*/
  else
    PV0DW02.PVXPDIFF = PVXREC.PVXPDIFF[PV0DWBOT] * PVBREC.PVBLNQTY;
    PV0DW02.PV0DWPDF = PV0DW02.PV0DWPDF + PV0DW02.PVXPDIFF;
    PV0DW02.PV0DWPAJ = PV0DW02.PV0DWPAJ + PV0DW02.PVXPDIFF;
    PV0DW02.PV0DWPCT = PV0DW02.PV0DWPCT + 1;
  end

   /* Accumulate Quantity Difference*/
  if (PVXREC.PVXQDIFF[PV0DWBOT] == 0)
     /* next sentence*/
  else
    PV0DW02.PV0DWQDI = PVXREC.PVXQDIFF[PV0DWBOT] * PVBREC.PVBLNFOB;
    PV0DW02.PV0DWQDF = PV0DW02.PV0DWQDF + PV0DW02.PV0DWQDI;
    PV0DW02.PV0DWQAJ = PV0DW02.PV0DWQAJ + PV0DW02.PV0DWQDI;
    PV0DW02.PV0DWQCT = PV0DW02.PV0DWQCT + 1;
    if (PVXREC.PVXERNBR[PV0DWBOT] == 18)
      PVXREC.PVXPDIFF[PV0DWBOT] = PV0DW02.PV0DWQDI;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS06  ****/
end // end PV0DS06

// SET      FORCE Flag/Other Info
Function PV0DS07()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Set FORCE Flag and Other Info                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVZREC.PVAFRMIN = "1";
  if (PV0DM100.PV0DMPAM == "Y")
    PVZREC.PVAFRMIN = "2";
  end
  if (PV0DM100.PV0DMQAM == "Y")
    PVZREC.PVAFRMIN = "3";
  end
  if (PV0DM100.PV0DMPAM == "Y"
   && PV0DM100.PV0DMQAM == "Y")
    PVZREC.PVAFRMIN = "4";
  end

  PVZREC.XXXUSRID = COMMAREA.CAUSERID;

  return; /* Last Statement*/


   /* ***  End of PV0DS07  ****/
end // end PV0DS07

// CLEAR    COMMAREA Flags
Function PV0DS08()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Clear COMMAREA Flags                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVZREC.PVAFRMIN = " ";
  PVZREC.PVZMCHER = " ";
  PVUREC.PVUPVZRC = PVZREC.PVZGRP;
  COMMAREA.CAUSERA = PVUREC.PVUGROUP;

  return; /* Last Statement*/


   /* ***  End of PV0DS08  ****/
end // end PV0DS08

// GET      System Date and Time
Function PV0DS09()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0DM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0DM100.TA2TIMED = TA2REC.TA2TIMED;

  return; /* Last Statement*/


   /* ***  End of PV0DS09  ****/
end // end PV0DS09

// BUILD    Price Adjustment Rec
Function PV0DS10()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Price Adjustment Record                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVBREC.PVAIVCID = PV0DM100.PVARIVID[2];
  PVBREC.PVBLNFOB = PVXREC.PVXPDIFF[PV0DWCNT];
  PVXREC.PVXPDIFF[PV0DWCNT] = PVBREC.PVBLNQTY * PVBREC.PVBLNFOB;
  PVBREC.PVBLNCOM = 0;
  PVBREC.PVBLNDTY = 0;
  PVBREC.PVBLNAMT = 0;
  PVBREC.PCMOSQTY = 0;
  PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  return; /* Last Statement*/


   /* ***  End of PV0DS10  ****/
end // end PV0DS10

// BUILD    Price Adjustment Tot
Function PV0DS11()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Price Adjustment Invoice Total Record      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DW01.PV0DW-FOB-REC-FOUND == "Y")
    /* JKUNDU CHANGE BEGINS - 04/25/00*/
    /* MOVE PV0DW01.PV-PMT-VEND-IVC-ID TO PVAREC.PVARIVID;*/
    PVAREC.PVARIVID = PV0DW01.PV-IVC-ID;
    /* JKUNDU CHANGE ENDS  - 04/25/00*/
  else
    PVAREC.PVARIVID = PVAREC.PVAIVCID;
  end

  PVAREC.PVAIVCID = PV0DM100.PVARIVID[2];
  PVAREC.PVAIVAMT = PV0DW02.PV0DWPAJ;
  PVAREC.PVATFOB = PVAREC.PVAIVAMT;
  PVAREC.PVAFRMIN = PVZREC.PVAFRMIN;
  PVAREC.PVAFRMIN = " ";
  PVAREC.XIVCD = "AP";
  PVAREC.XIPCD = "IC";
  PVAREC.PVATQTY = 0;
  PVAREC.PVATFRGT = 0;
  PVAREC.PVADSCT = 0;
  PVAREC.PVASPTID = " ";
  PVAREC.PVAETADT = 0;
  PVAREC.PVABOLDT = 0;
  PVAREC.PVACRELD = 0;
  PVAREC.PVAINTRT = 0;
  PVAREC.PVABANKC = 0;
  PVAREC.PVABANKP = 0;
  PVAREC.PVATDUTY = 0;
  PVAREC.PVABRKRY = 0;
  PVAREC.PVAOCHG1 = 0;
  PVAREC.PVAOCHG2 = 0;
  PVAREC.PVASCHG1 = 0;
  PVAREC.PVASCHG2 = 0;
  PVAREC.PVAINT1 = 0;
  PVAREC.PVAINT2 = 0;
  PVAREC.PVAINT3 = 0;
  PVAREC.PVACOMMP = 0;
  PVAREC.PVATCOMM = 0;
  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN;
  PVAREC.PVAIVCDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  PV0DS15(); /* Determine Ivc Due Date*/

  return; /* Last Statement*/


   /* ***  End of PV0DS11  ****/
end // end PV0DS11

// BUILD    Quantity Adj Rec
Function PV0DS12()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Quantity Adjustment Record                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVBREC.PVAIVCID = PV0DM100.PVARIVID[1];
  PVBREC.PCMOSQTY = PVXREC.PVXQDIFF[PV0DWCNT];
  PVBREC.PVBLNQTY = PVXREC.PVXQDIFF[PV0DWCNT];
  PV0DW02.PVATQTY = PV0DW02.PVATQTY + PVBREC.PVBLNQTY;
  PVBREC.PVBLNAMT = PVBREC.PVBLNFOB * PVBREC.PVBLNQTY;
  PVBREC.PVBLNCOM = 0;
  PVBREC.PVBLNDTY = 0;
  PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  return; /* Last Statement*/


   /* ***  End of PV0DS12  ****/
end // end PV0DS12

// BUILD    Quantity Adj Total
Function PV0DS13()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Quantity Adjustment Invoice Total Record   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVAREC.PVARIVID = PVAREC.PVAIVCID;
  PVAREC.PVAIVCID = PV0DM100.PVARIVID[1];
  PVAREC.PVAIVAMT = PV0DW02.PV0DWQAJ;
  PVAREC.PVATFOB = PVAREC.PVAIVAMT;
  PVAREC.PVAFRMIN = PVZREC.PVAFRMIN;
  PVAREC.PVAFRMIN = " ";
  PVAREC.PVATQTY = PV0DW02.PVATQTY;
  PVAREC.XIVCD = "AQ";
  PVAREC.XIPCD = "IC";
  PVAREC.PVATFRGT = 0;
  PVAREC.PVADSCT = 0;
  PVAREC.PVASPTID = " ";
  PVAREC.PVAETADT = 0;
  PVAREC.PVABOLDT = 0;
  PVAREC.PVACRELD = 0;
  PVAREC.PVAINTRT = 0;
  PVAREC.PVABANKC = 0;
  PVAREC.PVABANKP = 0;
  PVAREC.PVATDUTY = 0;
  PVAREC.PVABRKRY = 0;
  PVAREC.PVAOCHG1 = 0;
  PVAREC.PVAOCHG2 = 0;
  PVAREC.PVASCHG1 = 0;
  PVAREC.PVASCHG2 = 0;
  PVAREC.PVAINT1 = 0;
  PVAREC.PVAINT2 = 0;
  PVAREC.PVAINT3 = 0;
  PVAREC.PVACOMMP = 0;
  PVAREC.PVATCOMM = 0;
  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN;
  PVAREC.PVAIVCDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  PV0DS15(); /* Determine Ivc Due Date*/

  return; /* Last Statement*/


   /* ***  End of PV0DS13  ****/
end // end PV0DS13

// DECIDE   Invoice Due Date
Function PV0DS15()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Determine the Invoice Due Date                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVAREC.PVADUEDT >= TA2REC.TA2GRGGN)
     /* next sentence*/
  else
    PVAREC.PVADUEDT = TA2REC.TA2GRGGN;
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS15  ****/
end // end PV0DS15

// CHECK    FASTPATH
Function PV0DS30()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is enter /* Check if ENTER key was pressed*/
   || PV0DW01.PV0DWPFM == "Y"       /* or After FORCE Match*/
   || PVUREC.PVUALLWD == "N")       /* or Not allowed to continue*/
    if (PV0DM100.CATOAP == " ") /* Nothing was entered in OPTION*/
       /* next sentence*/
    else /* Otherwise, honor the request*/
      PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
      if (PV0DM100.PV0DMQAM == " "
       && PV0DM100.PV0DMPAM == " ")
        PV0D401(); /* Purge Scratch Pad*/
        PV0DS08(); /* Clear COMMAREA Flags*/
        COMMAREA.CATOAP = PV0DM100.CATOAP;
        COMMAREA.CAITEM = PV0DM100.CAITEM;
        PV0DS51(); /* Exit Routine*/
      else
        if (PV0DW01.PV0DWPFM == "Y" /* or After FORCE Match*/
         || PVUREC.PVUALLWD == "N") /* or Not allowed to continue*/
          COMMAREA.CATOAP = PV0DM100.CATOAP;
          COMMAREA.CAITEM = PV0DM100.CAITEM;
          PV0DS51(); /* Exit Routine*/
        else
           /* Cannot FASTPATH with data keyed in*/
          PVUREC.PVUERNBR = 63;
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS30  ****/
end // end PV0DS30

// PROTECT  Input Fields
Function PV0DS50()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Protect Input Fields                             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0DM100.PV0DMQAM protect;
  set PV0DM100.PV0DMPAM protect;
  set PV0DM100.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0DSPT  ****/
end // end PV0DS50

// EXIT     Routine (XSEXIT)
Function PV0DS51()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSEXIT();
  PV0DM100.VAGen_EZEMSG = COMMAREA.CAMSG;

  return; /* Last Statement*/


   /* ***  End of PV0DSXT  ****/
end // end PV0DS51

// VALIDATE Data Keyed In
Function PV0DS60()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DM100.PV0DMQAM == "Y"
   || PV0DM100.PV0DMQAM == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Quantity adjustment CAN ONLY BE Y OR BLANK*/
    PVUREC.PVUERNBR = 66;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0DM100.PV0DMQAM cursor;
    return;
  end

  if (PV0DM100.PV0DMPAM == "Y"
   || PV0DM100.PV0DMPAM == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Price adjustment CAN ONLY BE Y OR BLANK*/
    PVUREC.PVUERNBR = 67;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0DM100.PV0DMPAM cursor;
    return;
  end

  if (PV0DM100.PV0DMDUM == "Y"
   || PV0DM100.PV0DMDUM == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must be Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0DM100.PV0DMDUM cursor;
    return;
  end

  if (PV0DM100.PV0DMDUM == "Y"
   && PV0DM100.PV0DMQAM == "Y")
     /* Conflict in Data Entered*/
    PVUREC.PVUERNBR = 86;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0DM100.PV0DMDUM cursor;
    return;
  end

  if (PV0DM100.PV0DMPAM == "Y")
    if (PVAREC.PVOVENDR == "2577")
       /* Adjustment memos are not allowed for NISSHO*/
      PVUREC.PVUERNBR = 81;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0DM100.PV0DMPAM cursor;
      return;
    else
      if (PV0DW02.PV0DWPCT == 0)
         /* No Price Difference found*/
        PVUREC.PVUERNBR = 102;
        PVUREC.PVUERROR[PVUERGEN] = "Y";
        set PV0DM100.PV0DMPAM cursor;
      else
        PV0DS64(); /* Check Limits*/
      end
    end
  end

  if (PV0DM100.PV0DMQAM == "Y")
    if (PVAREC.PVOVENDR == "2577")
       /* Adjustment memos are not allowed for NISSHO*/
      PVUREC.PVUERNBR = 81;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0DM100.PV0DMQAM cursor;
      return;
    else
      if (PV0DW02.PV0DWQCT == 0)
         /* No Quantity Difference found*/
        PVUREC.PVUERNBR = 103;
        PVUREC.PVUERROR[PVUERGEN] = "Y";
        set PV0DM100.PV0DMQAM cursor;
      else
        PV0DS64(); /* Check Limits*/
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS60  ****/
end // end PV0DS60

// CHECK    Amount Limits
Function PV0DS64()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Amount Limits                             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DM100.PV0DMQAM == "Y")
    /* JKUNDU CHANGE BEGIN - 02/29/00*/
    /* IF PV0DW02.PV0DWQDF LT PVUREC.PVULIMT1*/
    /* OR  PV0DW02.PV0DWQDF GT PVUREC.PVULIMT2;*/
    if (PV0DW02.PV0DWQDF < PVUREC.PVULIMT1
     && PV0DW02.PV0DWQDF > PVUREC.PVULIMT2)
       /* Adjustment memo amount exceeds your authorized limit*/
      /* MOVE 73 TO PVUREC.PVUERNBR;*/
      /* adjustment memo amounts are not within +/- 1000.00 limits*/
      PVUREC.PVUERNBR = 230;
      /* JKUNDU CHANGE END   - 02/29/00*/
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0DM100.PV0DMQAM cursor;
      return;
    else
      PVUREC.PVUERROR[PVUERGEN] = " ";
    end
  end

  if (PV0DM100.PV0DMPAM == "Y")
    /* JKUNDU CHANGE BEGIN - 02/29/00*/
    /* IF PV0DW02.PV0DWPDF LT PVUREC.PVULIMT1*/
    /* OR PV0DW02.PV0DWPDF GT PVUREC.PVULIMT2;*/
    /* PSARKA CHANGE BEGIN - 06/09/00*/
    /* IF PV0DW02.PV0DWPDF LT PVUREC.PVULIMT1*/
    /* AND PV0DW02.PV0DWPDF GT PVUREC.PVULIMT2;*/
    PVUREC.PVULIMT1 = -9999999999999.99;
    PVUREC.PVULIMT2 = 9999999999999.99;
    if (PV0DW02.PV0DWPDF < PVUREC.PVULIMT1
     || PV0DW02.PV0DWPDF > PVUREC.PVULIMT2)
       /* Adjustment memo amount exceeds your authorized limit*/
      PVUREC.PVUERNBR = 73;
      /* adjustment memo amounts are not within +/- 1000.00 limits*/
      /* MOVE 230 TO PVUREC.PVUERNBR;*/
      /* JKUNDU CHANGE END   - 02/29/00*/
      /* PSARKA CHANGE END   - 06/09/00*/
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0DM100.PV0DMPAM cursor;
      return;
    else
      PVUREC.PVUERROR[PVUERGEN] = " ";
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS64  ****/
end // end PV0DS64

// CHECK    If fields modified
Function PV0DS68()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if fields were modified                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0DM100.PV0DMQAM is modified
   || PV0DM100.PV0DMPAM is modified
   || PVUREC.PVUERROR[PVUERGEN] != " ")
    PV0D160();
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS68  ****/
end // end PV0DS68

// BUILD    Screen WS
Function PV0DS90()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Screen Working Storage                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0DW01.PVBLNINB = 0;
  PVUREC.PVXERNBR = 0;
  PV0DW02.PV0DWTOP = 1;
  PV0DW02.PV0DWBOT = 1;
  while (PV0DW02.PV0DWBOT <= 200
   && PVXREC.PVXERNBR[PV0DWBOT] > 0)
    sysVar.arrayIndex = PVXREC.PVXERNBR[PV0DWBOT];
    if (PVDTBL.PVDXFACD[sysVar.arrayIndex] == 0)
       /* One of the errors has no equivalent Force Code or Inactive*/
      PVUREC.PVUERNBR = 104;
      PVUREC.PVUINQRY = "Y";
      PV0DS50(); /* Protect Input Fields*/
    else
      sysVar.arrayIndex = PVDTBL.PVDXFACD[sysVar.arrayIndex];
      if (XFATBL.XXXSTAT[sysVar.arrayIndex] == "I")
         /* One of the errors has no equivalent Force Code or Inactive*/
        PVUREC.PVUERNBR = 104;
        PVUREC.PVUINQRY = "Y";
        PV0DS50(); /* Protect Input Fields*/
      end
    end
    if (PVXREC.PVBLNINB[PV0DWBOT] == PVBREC.PVBLNINB
     || PVXREC.PVBLNINB[PV0DWBOT] == 0)
       /* next sentence*/
    else
      PVBREC.PVBLNINB = PVXREC.PVBLNINB[PV0DWBOT];
      PV0D970(); /* Read VPVITM01 IO5670*/
    end

    if (PVXREC.PVBLNINB[PV0DWBOT] == 0)
       /* next sentence*/
    else
      PV0DW02.SY1STNBR[PV0DWBOT] = PVBREC.SY1STNBR;
      PV0DW02.SY2CLRID[PV0DWBOT] = PVBREC.SY2CLRID;
      PV0DW02.XQACD[PV0DWBOT] = PVBREC.XQACD;
      PV0DW02.PVBBSZDS[PV0DWBOT] = PVBREC.PVBBSZDS;
      PV0DW02.PVBESZDS[PV0DWBOT] = PVBREC.PVBESZDS;
      PV0DW02.PVBLNFOB[PV0DWBOT] = PVBREC.PVBLNFOB;
      PV0DW02.PVBLNCOM[PV0DWBOT] = PVBREC.PVBLNCOM;
      PV0DW02.PVBLNDTY[PV0DWBOT] = PVBREC.PVBLNDTY;
      PV0DW02.PVBLNAMT[PV0DWBOT] = PVBREC.PVBLNAMT;
      PV0DW02.PVBLNQTY[PV0DWBOT] = PVBREC.PVBLNQTY;
      PV0DW02.PCMOSQTY[PV0DWBOT] = PVBREC.PCMOSQTY;
    end

    if (PVXREC.PVXPDIFF[PV0DWBOT] == 0
     && PVXREC.PVXQDIFF[PV0DWBOT] == 0)
       /* next sentence*/
    else
      if (PVXREC.PVBLNINB[PV0DWBOT] == PV0DW01.PVBLNINB
       && PVXREC.PVXERNBR[PV0DWBOT] == PVUREC.PVXERNBR)
        if (PVXREC.PVXERNBR[PV0DWBOT] == 3
         || PVXREC.PVXERNBR[PV0DWBOT] == 4)
           /* next sentence*/
        else
          PV0DS06(); /* Accumulate Differences*/
        end
      else
        PV0DS06(); /* Accumulate Differences*/
      end
    end

    PV0DW01.PVBLNINB = PVXREC.PVBLNINB[PV0DWBOT];
    PVUREC.PVXERNBR = PVXREC.PVXERNBR[PV0DWBOT];
    PV0DW02.PV0DWBOT = PV0DW02.PV0DWBOT + 1;
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS90  ****/
end // end PV0DS90

// BUILD    Scroll Lines
Function PV0DS92()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Scroll Lines                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0DW02.PV0DWCUR = PV0DW02.PV0DWTOP;
  PVUREC.PVBLNINB = 0;
  PV0DW02.PV0DWCNT = 0;
  while (PV0DW02.PV0DWCNT < PV0DW01.PV0DWMAX)
    PV0DW02.PV0DWCNT = PV0DW02.PV0DWCNT + 1;
    if (PV0DW02.PV0DWTOP == PV0DW02.PV0DWBOT
     || PV0DW02.PV0DWBOT == 0)
      PV0DM100.SY1STNBR[PV0DWCNT] = " ";
      PV0DM100.SY2CLRID[PV0DWCNT] = " ";
      PV0DM100.XQACD[PV0DWCNT] = " ";
      PV0DM100.PVBBSZDS[PV0DWCNT] = " ";
      PV0DM100.DASH[PV0DWCNT] = " ";
      PV0DM100.PVBESZDS[PV0DWCNT] = " ";
      PV0DM100.PVDERDSC[PV0DWCNT] = " ";
      PV0DM100.PVBLNINB[PV0DWCNT] = 0;
    else
      if (PVXREC.PVBLNINB[PV0DWTOP] == PVUREC.PVBLNINB)
        PV0DM100.SY1STNBR[PV0DWCNT] = " ";
        PV0DM100.SY2CLRID[PV0DWCNT] = " ";
        PV0DM100.XQACD[PV0DWCNT] = " ";
        PV0DM100.PVBBSZDS[PV0DWCNT] = " ";
        PV0DM100.DASH[PV0DWCNT] = " ";
        PV0DM100.PVBESZDS[PV0DWCNT] = " ";
      else
        PVUREC.PVBLNINB = PVXREC.PVBLNINB[PV0DWTOP];
        PV0DM100.SY1STNBR[PV0DWCNT] = PV0DW02.SY1STNBR[PV0DWTOP];
        PV0DM100.SY2CLRID[PV0DWCNT] = PV0DW02.SY2CLRID[PV0DWTOP];
        PV0DM100.XQACD[PV0DWCNT] = PV0DW02.XQACD[PV0DWTOP];
        PV0DM100.PVBBSZDS[PV0DWCNT] = PV0DW02.PVBBSZDS[PV0DWTOP];
        PV0DM100.PVBESZDS[PV0DWCNT] = PV0DW02.PVBESZDS[PV0DWTOP];
        if (PVXREC.PVBLNINB[PV0DWTOP] == 0)
          PV0DM100.DASH[PV0DWCNT] = " ";
        else
          PV0DM100.DASH[PV0DWCNT] = "-";
        end
      end
      sysVar.arrayIndex = PVXREC.PVXERNBR[PV0DWTOP];
      PV0DM100.PVDERDSC[PV0DWCNT] = PVDTBL.PVDERDSC[sysVar.arrayIndex];
      PV0DM100.PVBLNINB[PV0DWCNT] = PV0DW02.PV0DWTOP;
      PV0DM100.PVBLNINB[PV0DWCNT] = PVXREC.PVBLNINB[PV0DWTOP];
      PV0DW02.PV0DWTOP = PV0DW02.PV0DWTOP + 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0DS92  ****/
end // end PV0DS92

//*** RECORD=PV0DW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0DW01 type basicRecord
  5 PV0DWMAX PV0DWMAX ; 
  5 PV0DWEOT PV0DWEOT ; 
  5 PV0DWLIM PV0DWLIM ; 
  5 PV0DWSUC PV0DWSUC ; 
  5 PV0DWDLS PV0DWDLS ; 
  5 PV0DWPFM PV0DWPFM ; 
  5 PVBLNINB PVBLNINB ; 
  5 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
  5 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
  5 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
  5 PV0DW-FOB-REC-FOUND PV0DW-FOB-REC-FOUND ; 
  5 PV-IVC-ID PV-IVC-ID ; 
  5 PV0DW-IVC-ID-CHAR PV0DW-IVC-ID-CHAR ; 
  5 PV0DW-IVIDX PV0DW-IVIDX ; 
  5 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
  5 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
end // end PV0DW01

//*** RECORD=PV0DW02 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0DW02 type basicRecord
  5 PVXPDIFF PVXPDIFF ; 
  5 PV0DWQDI PV0DWQDI ; 
  5 PV0DWPAJ PV0DWPAJ ; 
  5 PV0DWQAJ PV0DWQAJ ; 
  5 PV0DWPDF PV0DWPDF ; 
  5 PV0DWQDF PV0DWQDF ; 
  5 PV0DWPCT PV0DWPCT ; 
  5 PV0DWQCT PV0DWQCT ; 
  5 PV0DWTOP PV0DWTOP ; 
  5 PV0DWBOT PV0DWBOT ; 
  5 PV0DWCNT PV0DWCNT ; 
  5 PV0DWCUR PV0DWCUR ; 
  5 PVATQTY PVATQTY ; 
  5 PV0DWSCR PV0DWSCR [200] ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XQACD XQACD ; 
    10 PVBBSZDS PVBBSZDS ; 
    10 PVBESZDS PVBESZDS ; 
    10 PVDERNBR PVDERNBR ; 
    10 PVBLNFOB PVBLNFOB ; 
    10 PVBLNCOM PVBLNCOM ; 
    10 PVBLNDTY PVBLNDTY ; 
    10 PVBLNAMT PVBLNAMT ; 
    10 PVBLNQTY PVBLNQTY ; 
    10 PCMOSQTY PCMOSQTY ; 
end // end PV0DW02

//*** RECORD=PV0DW03 ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - PV0BW-DBIO-FUNCTION *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   EACH IOMOD. THE ONE CALL WILL HANDLE ANY FUNCTION CODE *
// *   AS LONG AS THE VALUE IS MOVED TO THE FUNCTION FIELD    *
// *   IN THIS RECORD BEFORE THE IOMOD ROUTINE IS USED.       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 10-19-99  gdecke  ADD FOR CALL TO VPVPMT01 CALL IN PV0A  *
// ************************************************************
// ***********************
Record PV0DW03 type basicRecord
  5 PV0DW-DBIO-FUNCTION PV0DW-DBIO-FUNCTION ; 
end // end PV0DW03

// iomod function to perform
DataItem PV0DW-DBIO-FUNCTION char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND ORIG VENDOR IVC FOB PMT
DataItem PV0DW-FOB-REC-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BREAK INVOICE NBR INTO BYTES
DataItem PV0DW-IVC-ID-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX TO IVC NBR REDEFINITION
DataItem PV0DW-IVIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bottom Line Pointer
DataItem PV0DWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter
DataItem PV0DWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing
DataItem PV0DWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scratch Pad Delete Flag
DataItem PV0DWDLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of Table Indicator
DataItem PV0DWEOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Adjustment Memo Limit
DataItem PV0DWLIM decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of Scroll Lines
DataItem PV0DWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Price Adj Invoice Total
DataItem PV0DWPAJ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Price Diff GT 0 Count
DataItem PV0DWPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Price Difference Total
DataItem PV0DWPDF decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Force Match Performed Flag
DataItem PV0DWPFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quantity Adj Invoice Total
DataItem PV0DWQAJ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty   Diff GT 0 Count
DataItem PV0DWQCT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Quantity Difference Total
DataItem PV0DWQDF decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Calculated Qty difference
DataItem PV0DWQDI decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Working Storage
DataItem PV0DWSCR char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Successful Flag
DataItem PV0DWSUC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Top Line Pointer
DataItem PV0DWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

