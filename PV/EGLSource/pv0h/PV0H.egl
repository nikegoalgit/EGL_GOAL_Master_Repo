package pv0h;
import corpcom1.CAUSERID;
import corpcom2.*;
import corpcom2.XZZREC;
import corpcom3.*;
import corpcom3.XPPV001;
import corpcom3.XPTA0P;
import corpcom4.*;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom5.COMMAREA;
import corpcom6.*;
import corpcom6.SQLCA;
import corpx2.XPGCD;
import pc.common.*;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC6REC;
import pv.common.*;
import pv.common.PVUREC;
import ta.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA6REC;

//*** PROGRAM=PV0H ****
// ************************************************************
// *
// *   PV0F - Received/Shipped Not Invoiced Resolution
// *
// *   This application will be used to 'FORCE' the receiving
// *   where inventory has been shipped (Direct Ship) or
// *   received at the warehouse but an invoice has not been
// *   received.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       04-11-91  HVARGA  Initial Construction
// *       09-24-92  JLoyer  Added formscode and user-id to
// *                         dcorp.vparm101 so PO rpt can be
// *                         routed thru Bundl by PV1071, (see
// *                         pv0h165).  Chgd map to allow 3
// *                         Bundl opts; view, view/prt, prt.
// *                         Chg'd pv0hm001, s30, s51, s60,
// *                         s62, w01, PV0H165.
// *       03-24-93  mmalin  changed pv0ht01 for move to ESP
// *                         from UC7
// *       03-01-00  JKUNDU  CHANGED IN XSPVS60 - Transfer
// *                         should go back to PV0B if PF3 IS
// *                         pressed in PV0D.
// ************************************************************
// *********************
Program PV0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC6REC PC6REC; // record
  PV0HW01 PV0HW01; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVYREC PVYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PV0HT01; // table
  use PV0HM.PV0HM100, // form
  		PV0HM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0H000: PV0H000();
  end // end main
end // end PV0H

// PROCESS  Main Logic
Function PV0H000()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0H    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0H001(); /* Initialization Logic*/

  PV0HS01(); /* Check Who Invoked me*/

  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    PV0H100(); /* Converse PV0HM100*/
    PV0H110(); /* Check PF Keys and Exits*/
    PV0H120(); /* Check what to do next*/
  end

  exit program;

  return; /* Last Statement*/


   /* ***  End of PV0H000  ****/
end // end PV0H000

// INIT     Routine
Function PV0H001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0HW01 empty;
  set TA2REC empty;
  set PC6REC empty;
  set UT2REC empty;
  set XZZREC empty;

  set PV0HM100 initial;

  XSPVS01(); /* Initialize PV Common Routine Fields*/
  PVUREC.PVUERROR[PVUERIVC] = " ";
  PVUREC.PVUERROR[PVUERVND] = " ";

  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0HM100";

   /* Get System Date and Time*/
  PV0HS09();


  return; /* Last Statement*/

   /* ***  End of PV0H001  ****/
end // end PV0H001

// CONVERSE PO ACTIVITY REPORT
Function PV0H100()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse PO Activity Report Request Screen       ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUINQRY == "Y")
    set PV0HM100.CATOAP cursor;
  end

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0HM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0HM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0HM100.TA2TIMED = VGVar.currentFormattedTime;

  converse PV0HM100 ;

  return; /* Last Statement*/


   /* ***  End of PV0H100  ****/
end // end PV0H100

// CHECK    PF Keys and Exits
Function PV0H110()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15) /* EXECUTE*/
       /* next sentence*/
    else
       /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0H110  ****/
end // end PV0H110

// CHECK    What to do next
Function PV0H120()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0HS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0H150(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0H120  ****/
end // end PV0H120

// CHECK    if allowed to continu
Function PV0H150()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PVUREC.PVUENDOA = "Y"; /* Make sure we get out*/
      PV0HS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf15)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15)
      PV0HS60(); /* Validate Data Keyed in*/
      if (PVUREC.PVUERROR[PVUERKEY] == "Y")
         /* next sentence*/
      else
        PV0HS62(); /* Validate Printer Option*/
        if (PVUREC.PVUERROR[PVUERGEN] == "Y")
           /* next sentence*/
        else
          if (converseVar.eventKey is pf15)
            PV0H160(); /* Submit Job*/
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0H150  ****/
end // end PV0H150

// SUBMIT   PO Activity Job
Function PV0H160()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      SUBMIT PO Activity Job                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0HS09(); /* Get System Date and Time*/
  PV0H165(); /* Create Parameter*/
  if (PVUREC.PVUERROR[PVUERGEN] == "Y")
     /* next sentence*/
  else
    PV0H170(); /* Submit Job to Internal Reader*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y")
       /* next sentence*/
    else
       /* Function Requested was successfully applied*/
      PVUREC.PVUERNBR = 92;
    end
  end
  PVUREC.PVUERROR[PVUERKEY] = "Y";

  return; /* Last Statement*/


   /* ***  End of PV0H160  ****/
end // end PV0H160

// CREATE   Parameter
Function PV0H165()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **          Create Parameters for PV1070                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set XZZREC empty;
  XZZREC.XZZQRYID = "PV1070";

  if (PV0HM100.PV0HMPRT[1] == "Y") /* route to bundl view*/
    XZZREC.XROCD = "1"; /**/
  else /**/
    if (PV0HM100.PV0HMPRT[2] == "Y") /* route to bundl and also print*/
      XZZREC.XROCD = "2"; /**/
    else /**/
      if (PV0HM100.PV0HMPRT[3] == "Y") /* route to bundl print*/
        XZZREC.XROCD = "3"; /**/
      end
    end
  end

  XZZREC.XZZ2CHR1 = PV0HM100.XDMCD; /* dimension*/
  XZZREC.XZZ2CHR2 = PV0HM100.XQACD; /* qual-code*/
  XZZREC.XZZ3CHR1 = PV0HM100.SY2CLRID; /* color-id*/
  XZZREC.XZZ3CHR2 = PV0HM100.XGPCD; /* gen'l prod cat*/
  XZZREC.XZZ6CHR = PV0HM100.SY1STNBR; /* style*/
  XZZREC.XZZINT1 = PV0HM100.PC3PONBR; /* po-nbr*/

  PV0HW01.XPGCD = PV0HM100.XPGCD; /* split xpgcd*/
  XZZREC.XZZ1CHR1 = PV0HW01.PV0HWPG1; /* move 1st byte*/
  XZZREC.XZZ1CHR2 = PV0HW01.PV0HWPG2; /* move 2nd byte*/

  PV0HW01.CAUSERID = COMMAREA.CAUSERID; /* split user-id*/
  XZZREC.XZZ4CHR1 = PV0HW01.PV0HWUS1; /* move 1st 4 bytes*/
  XZZREC.XZZ4CHR2 = PV0HW01.PV0HWUS2; /* move 2nd 4 bytes*/

  PV0HW01.PC2INSEG = PV0HM100.PC2INSEG; /* combine pc2inseg (3 byte)*/
  PV0HW01.PC2CUXID = PV0HM100.PC2CUXID; /* with pc2cuxid    (5 byte)*/
  XZZREC.XZZ8CHR = PV0HW01.PV0HWPC2; /* move both to 8 byte field*/

  XZZREC.ZZZSDT = TA2REC.TA2GRGGN; /**/
  XZZREC.ZZZSTM = TA2REC.TA2TIMHM; /**/
  XZZREC.XZZSINT1 = TA2REC.TA2TIMSS; /* seconds*/

  set SQLCA empty;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    TA1REC.TA1LOC = "PV0H165";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VPARM101";
    TA1REC.TA1TBLKE = XZZREC.XZZRGRP;
    XSPVS52(); /* Invoke DB2 Error Handler*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0H165  ****/
end // end PV0H165

// PREPARE  JCL for Submission
Function PV0H170()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      WRITE To Internal Reader                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set TA6REC empty;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PV0HT01.TARJCL[TA6INDEX];
    if (TA6REC.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end
  end
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = PV0HM100.TA6MSGSW; /* EOJ Message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERGEN] = "Y";
     /* Database Busy ; Retry in a few minutes*/
    PVUREC.PVUERNBR = 44;
  end

  return; /* Last Statement*/


   /* ***  End of PV0H170  ****/
end // end PV0H170

// READ     VPOITM01  (IO3310)
Function PV0H310()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read VPOITM01 Table                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  move PV0HM100 to PC6REC withV60Compat;
  PC6REC.PC6STAT = "CX";

  set SQLCA empty;
  call "IO3310" ("SF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};

  set SQLCA empty;
  call "IO3310" ("NF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    PVUREC.PVUERROR[PVUERKEY] = " ";
    set PV0HM100.PV0HMPRT[1] cursor;
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    PVUREC.PVURCRD6 = "PC6REC";
    move PC6REC to PVUREC withV60Compat;
    COMMAREA.CAUSERA = PVUREC.PVUGROUP;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
       /* IF QUALITY '02' WAS USED IN FIRST READ, CHANGE TO '01' AND*/
       /* TRY AGAIN*/
      if (PC6REC.XQACD == "02")
        PC6REC.XQACD = "01";
        set SQLCA empty;
        call "IO3310" ("CF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
        set SQLCA empty;
        call "IO3310" ("SF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};

        set SQLCA empty;
        call "IO3310" ("NF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          PVUREC.PVUERROR[PVUERKEY] = " ";
          set PV0HM100.PV0HMPRT[1] cursor;
                  /* Requested Record Found*/
          PVUREC.PVUERNBR = 97;
          PVUREC.PVURCRD6 = "PC6REC";
          move PC6REC to PVUREC withV60Compat;
          COMMAREA.CAUSERA = PVUREC.PVUGROUP;
        else
                  /* PO Item not found*/
          PVUREC.PVUERNBR = 90;
          PVUREC.PVUERROR[PVUERKEY] = "Y";
          set PV0HM100.PC3PONBR cursor;
        end
      else
       /* PO Item not found*/
        PVUREC.PVUERNBR = 90;
        PVUREC.PVUERROR[PVUERKEY] = "Y";
        set PV0HM100.PC3PONBR cursor;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PVUREC.PVUERROR[PVUERKEY] = "Y";
        set PV0HM100.PC3PONBR cursor;
         /* Data Base Busy; Retry in a few minutes*/
        PVUREC.PVUERNBR = 44;
      else
        TA1REC.TA1LOC = "PV0H310";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPOITM01";
        TA1REC.TA1TBLKE = PC6REC.PC6KEY;
        XSPVS52();
      end
    end
  end

  set SQLCA empty;
  call "IO3310" ("CF", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};

  return; /* Last Statement*/


   /* ***  End of PV0H310  ****/
end // end PV0H310

// CHECK    Who Invoked me
Function PV0HS01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if the call was Legitimate                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSENTRY();
  XSSEGTR();

  if (PVUREC.PVURCRD6 == "PC6REC")
    move PVUREC to PV0HM100 withV60Compat;
    PV0H310(); /* Read VPOITM01*/
  end

  PV0HS04(); /* Check Security Access Type*/

  return; /* Last Statement*/


   /* ***  End of PV0HS01  ****/
end // end PV0HS01

// GO BACK  to Calling Applicatio
Function PV0HS03()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS60(); /* PV Common Exit*/
  PV0HS50(); /* Exit Routine*/

  return; /* Last Statement*/


   /* ***  End of PV0HS03  ****/
end // end PV0HS03

// CHECK    Security Access Type
Function PV0HS04()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    This routine will set Inquiry only Flag if needed.  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (COMMAREA.CAINQFL == "N")
    PVUREC.PVUINQRY = "Y"; /* Set Inquiry mode*/
    PV0HS51(); /* Set Fields to AutoSkip*/
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  return; /* Last Statement*/


   /* ***  End of PV0HS04  ****/
end // end PV0HS04

// GET      System Date and Time
Function PV0HS09()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0HM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0HM100.TA2TIMED = TA2REC.TA2TIMED;

  return; /* Last Statement*/


   /* ***  End of PV0HS09  ****/
end // end PV0HS09

// CHECK    FASTPATH
Function PV0HS30()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0HM100.CATOAP == " ")
       /* next sentence*/
    else
      if (PV0HM100.PC3PONBR == 0
       && PV0HM100.XGPCD == " "
       && PV0HM100.SY1STNBR == " "
       && PV0HM100.SY2CLRID == " "
       && PV0HM100.XQACD == " "
       && PV0HM100.XDMCD == " "
       && PV0HM100.PC2CUXID == " "
       && PV0HM100.PC2INSEG == " "
       && PV0HM100.XPGCD == " "
       && PV0HM100.PV0HMPRT[1] == " "
       && PV0HM100.PV0HMPRT[2] == " "
       && PV0HM100.PV0HMPRT[3] == " "
       && PV0HM100.TA6MSGSW == " ")
        COMMAREA.CATOAP = PV0HM100.CATOAP;
        COMMAREA.CAITEM = PV0HM100.CAITEM;
        PV0HS50(); /* Exit Routine*/
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
         /* Cannot FASTPATH with data keyed in*/
        PVUREC.PVUERNBR = 63;
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0HS30  ****/
end // end PV0HS30

// EXIT     Routine (XSEXIT)
Function PV0HS50()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSEXIT();

  set PV0HM100.CATOAP cursor;
  PV0HM100.VAGen_EZEMSG = COMMAREA.CAMSG;

  return; /* Last Statement*/


   /* ***  End of PV0HS50  ****/
end // end PV0HS50

// SET      Fields to AUTOSKIP
Function PV0HS51()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    Set all fields to AUTOSKIP except FASTPATH.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0HM100.PC3PONBR skip;
  set PV0HM100.XGPCD skip;
  set PV0HM100.SY1STNBR skip;
  set PV0HM100.SY2CLRID skip;
  set PV0HM100.XQACD skip;
  set PV0HM100.XDMCD skip;
  set PV0HM100.PC2CUXID skip;
  set PV0HM100.PC2INSEG skip;
  set PV0HM100.XPGCD skip;
  set PV0HM100.PV0HMPRT[1] skip;
  set PV0HM100.PV0HMPRT[2] skip;
  set PV0HM100.PV0HMPRT[3] skip;
  set PV0HM100.TA6MSGSW skip;
  set PV0HM100.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0HS51  ****/
end // end PV0HS51

// VALIDATE Data Keyed In
Function PV0HS60()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0HM100.PC3PONBR == PC6REC.PC3PONBR
   && PV0HM100.XGPCD == PC6REC.XGPCD
   && PV0HM100.SY1STNBR == PC6REC.SY1STNBR
   && PV0HM100.SY2CLRID == PC6REC.SY2CLRID
   && PV0HM100.XQACD == PC6REC.XQACD
   && PV0HM100.XDMCD == PC6REC.XDMCD
   && PV0HM100.PC2CUXID == PC6REC.PC2CUXID
   && PV0HM100.PC2INSEG == PC6REC.SY2CLRID
   && PV0HM100.XPGCD == PC6REC.XQACD
   && PV0HM100.PC3PONBR not modified
   && PV0HM100.XGPCD not modified
   && PV0HM100.SY1STNBR not modified
   && PV0HM100.SY2CLRID not modified
   && PV0HM100.XQACD not modified
   && PV0HM100.XDMCD not modified
   && PV0HM100.PC2CUXID not modified
   && PV0HM100.PC2INSEG not modified
   && PV0HM100.XPGCD not modified
   && PV0HM100.PV0HMPRT[1] not modified
   && PV0HM100.PV0HMPRT[2] not modified
   && PV0HM100.PV0HMPRT[3] not modified
   && PV0HM100.TA6MSGSW not modified
   && PVUREC.PVUERRTB == " ")
    set PV0HM100.PV0HMPRT[1] cursor;
  else
    PV0H310(); /* Read VPOITM01*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0HS60  ****/
end // end PV0HS60

// VALIDATE Printer Selection
Function PV0HS62()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Printer Selection                      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0HM100.PV0HMPRT[1] == " "
   && PV0HM100.PV0HMPRT[2] == " "
   && PV0HM100.PV0HMPRT[3] == " ")
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0HM100.PV0HMPRT[1] cursor;
    return;
  end

  if (PV0HM100.PV0HMPRT[1] == "Y"
   || PV0HM100.PV0HMPRT[1] == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0HM100.PV0HMPRT[1] cursor;
    return;
  end

  if (PV0HM100.PV0HMPRT[2] == "Y"
   || PV0HM100.PV0HMPRT[2] == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0HM100.PV0HMPRT[2] cursor;
    return;
  end

  if (PV0HM100.PV0HMPRT[3] == "Y"
   || PV0HM100.PV0HMPRT[3] == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0HM100.PV0HMPRT[3] cursor;
    return;
  end

  if (PV0HM100.PV0HMPRT[1] == "Y")
    set PV0HM100.PV0HMPRT[1] cursor;
    if (PV0HM100.PV0HMPRT[2] == " "
     && PV0HM100.PV0HMPRT[3] == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  if (PV0HM100.PV0HMPRT[2] == "Y")
    set PV0HM100.PV0HMPRT[2] cursor;
    if (PV0HM100.PV0HMPRT[1] == " "
     && PV0HM100.PV0HMPRT[3] == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  if (PV0HM100.PV0HMPRT[3] == "Y")
    set PV0HM100.PV0HMPRT[3] cursor;
    if (PV0HM100.PV0HMPRT[1] == " "
     && PV0HM100.PV0HMPRT[2] == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  if (PV0HM100.TA6MSGSW == " ")
    PV0HM100.TA6MSGSW = "N";
  end
  if (PV0HM100.TA6MSGSW == "Y"
   || PV0HM100.TA6MSGSW == "N"
   || PV0HM100.TA6MSGSW == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0HM100.TA6MSGSW cursor;
    return;
  end

  return; /* Last Statement*/


   /* ***  End of PV0HS62  ****/
end // end PV0HS62

//*** RECORD=PV0HW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 06-12-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0HW01 type serialRecord  {
  fileName = "INTR"
  }
  5 PV0HWCT1 PV0HWCT1 ; 
  5 PV0HWCT2 PV0HWCT2 ; 
  5 XPGCD XPGCD ; 
    10 PV0HWPG1 PV0HWPG1 ; 
    10 PV0HWPG2 PV0HWPG2 ; 
  5 CAUSERID CAUSERID ; 
    10 PV0HWUS1 PV0HWUS1 ; 
    10 PV0HWUS2 PV0HWUS2 ; 
  5 PV0HWPC2 PV0HWPC2 ; 
    10 PC2INSEG PC2INSEG ; 
    10 PC2CUXID PC2CUXID ; 
end // end PV0HW01

// Work Counter 1
DataItem PV0HWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 2
DataItem PV0HWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// combo of pc2inseg/pc2cuxid
DataItem PV0HWPC2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st byte of xpgcd
DataItem PV0HWPG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd byte of xpgcd
DataItem PV0HWPG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st 4 bytes of user-id
DataItem PV0HWUS1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last 4 bytes of user-id
DataItem PV0HWUS2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

