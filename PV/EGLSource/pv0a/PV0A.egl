package pv0a;
import corpcom2.XSRREC;
import corpcom3.XPPV-VPVPMT01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAREC;
import corpcom6.SQLCA;
import fy.common.FY1REC;
import ku.common.KUMREC;
import pc.common.PC2REC;
import pc.common.PC3REC;
import pc.common.PC6REC;
import pc.common.PCMREC;
import pv.common.PV0AW01;
import pv.common.PV0AW02;
import pv.common.PV0AW03;
import pv.common.PV0AW04;
import pv.common.PV4050W1;
import pv.common.PVAREC;
import pv.common.PVBREC;
import pv.common.PVCREC;
import pv.common.PVDREC;
import pv.common.PVEREC;
import pv.common.PVLREC;
import pv.common.PVOREC;
import pv.common.PVUREC;
import pv.common.PVWREC;
import pv.common.PVYREC;
import pv.common.PVZREC;
import sy.common.SY1REC;
import sy.common.SY2REC;
import sy.common.SY4REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSWREC;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VPOITM04;
import vv.common.VPVPMT01;
import ww.common.WEU0100;
import xx.common.*;
import xx02.*;
import xx02.XCTTBL;
import xx02.XDMTBL;
import xx02.XFATBL;
import xx03.*;
import xx03.XIVTBL;
import xx04.*;
import xx04.XPGTBL;
import xx05.*;
import xx05.XQATBL;
import xx05.XSETBL;
import xx05.XSTTBL;
import xx06.*;
import xx06.XUMTBL;
import xx06.XWHTBL;
import xx08.*;
//*** PROGRAM=PV0A ****
// ************************************************************
// *
// *   PV0A - INVOICE HEADER AND LINE ITEM SCREENS
// *
// *   This application provides data entry ability for
// *   the Factory Invoicing System.
// *
// ************************************************************
// * Maintenance History
// *Rev #    Date    Who     Remarks
// *-----  --------  ------  ----------------------------------
// *        3-05-91  MMALIN  Program Creation
// *        3-10-93  MMALIN  fix
// *        4-13-93  MMALIN  changed processing to allow
// *                         screens and blanks to be entered
// *                         into the pv system manually
// *        7-07-93  MMALIN  Edits for Screeners
// *                         chgs to pv0a245 pv0a250
// *                         added pv0a249
// *       12-07-93  MMALIN  SC to SC invoice capability added
// *       02-04-94  MMALIN  Added 'PS' as salesmen sample type
// *abend  08-05-94  BCOURT  Increase # line items from 200 to
// *                         300 in PV0AW01.
// *abend  08-10-94  BCOURT  Replace constant 200 with variable
// *                         pv0awmax in pv0aw01 value 300,init
// *                         in pv0as00.
// *msg#150 08-19-94 BCOURT  Everyone getting message 150 'line
// *                         item qtys not equal to header tot'
// *                         so change pv0awmax binary def.
// *                         to match pvwlinex num(3).
// *                         Also change characters to numeric
// *                         in pv0as37, pv0as53, s33 & 632.
// *                         Well, since index must be signed
// *                         and I was moving 300, not +300 in
// *                         pv0as00, change all indexes to bin
// *                         which forces a sign:pvwrec,pv0aw01
// *                         Move pv0awmax from pv0aw01 to w02
// *                         since w01 is set empty many times.
// * pv#14 09-28-94 BCourt Force over-short qty = 0 on new
// *             International invoices.  Thus they will
// *             skip match to PO receiving.  Consider all Intl
// *             fully received. Changed s22,s55,s56,s59,290.
// * PV#24 09-28-94 TWatso   Add new invoice type 'PT' for
// *             Production Ticketing.  Functions same as 'SC'
// *             screener ivc type.  Restricted to use by
// *             logons with PV0A sub-level flag # 2 = 'Y'.
// *       11-14-94  mkille  Removed character moves from date
// *                 moves in pv0as35 to make them numeric
// *                 moves.
// *       06-29-95  JLOYER  pv0as15, pv0a655: set pvasplfl = y
// *                         if gpc=03 and po-typ-cd = sa,se,
// *                         si, sm (added to existing checks)
// *       03/03/96  BBASHA  Deleted PFHREC.  Added VINTGL02,
// *                         GLAREC, VGCOA001.
// *                         Changed all pfhrec references to
// *                         either glarec or vintgl02.
// *                         Changed all vintgl01 references to
// *                         vintgl02 in pv0a247.
// *                         added 2 paragraphs to convert
// *                         ga-glbl-acct-id to gl-gen-led-acct
// *                           pv0as-s-vgcoa001,
// *                           pv0as-f-vgcoa001.
// *                         execute the two above paragraphs
// *                         from pv0a247.
// *       11/17/97  NJANA   Incorporate the date routine
// *                         TA0040 for invoice date and
// *                         invoice due date validation
// *       02/05/98  njana   add a new vendor code 919517 for
// *                         the invoice type 'PT'
// *2kfix  03/05/98  pharwo  y2k changes for hard-coded 19 in
// *                         pv0as37.
// *       05/08/98  SARUMU  The process PV0AS00 and PV0AS33
// *                         are modified to keep the current
// *                         date for further processing.
// *       04/21/99  RRAJAG  The process PV0AS85 is modified
// *                         to reset the line item number
// *                         properly to avoid -803 SQL code.
// *       10/19/99  GDECKE  MISC CHANGES FOR NISSHO CONTINGENC
// *                         PROJECT. ALLOWS APPLICATION TO USE
// *                         'OLD' OR 'NEW' NISSHO LOGIC DEPEN-
// *                         DING ON MENU OPTION CHOSEN IN PV0M
// *       01/28/00  GDECKE  SHOW WARNING MESSAGES WHEN HEADER
// *                         QTY,FOB OR DUTY NOT EQUAL TO THE
// *                         SUM OF SAME ON THE LINE ITEM RECS.
// *       02/04/00  JKUNDU  Display the header information in
// *                         PV0A after control comes back from
// *                         PV0D.Changed in PV0AS10 & PV0AS11
// *       02/08/00  JKUNDU  Restrict transfer to TR0H for
// *                         vendor = 2577. changed in PV0A420.
// *       05/16/00  JKUNDU  Modified PV0A655 and PV0AS15
// *                         to set the sample flag = 'Y' when
// *                         GPC = '03' and PO type code = 'SD'
// *       08/07/00  JKUNDU  Modified PV0A632,PV0A633,PV0A655,
// *                         PV0A657,PV0A283 calculate the
// *                         total invoice amount correctly
// *                         FOB is updated through a different
// *                         vendor.
// *       08/18/00  LTANIK  Modified PV0A247 FOR MAKING THE
// *                         ISEG CHANGES FOR CANADA.
// *       08/18/00  JKUNDU  Modified PV0A655 and PV0AS15
// *                         to set the sample flag = 'Y' for
// *                         PO type = 'MP'.
// *       09/14/00  JKUNDU  Initialized the flag
// *                         PV0AW02.PV0AW-STAT-CHG-NP-IP-FL
// *                         to 'Y' in PV0A655.
// *       12/20/00  SSANK1  Introduced SRGP PV0AS-CHK-PMT-SN
// *                         to check for status of rows in
// *                         DPINVC.VPVPMT01 before updating
// *                         the status in header to "UM".Also
// *                         introduced SRGP PV0AS-CHK-PMT-ER
// *                         to check for status of rows in
// *                         DPINVC.VPVPMT01 before updating
// *                         the status in header to "IP".
// *       01/11/01  NJANA   Change the process PV0A420
// *                         to allow the user to go  to TR0H
// *                         screen for vendr =2577 and vend
// *                         vendr grp='04' (requested by
// *                         Forbes and Korey Binkerd)
// *       01/18/01  BPARAN  Introduced SRGP PV0AS-CHK-BNK-CD
// *                         to update the payment status in
// *                         DPINVC.VPVPMT01 to 'ON' for non-
// *                         L/C payments for FOB only.
// *       01/26/01  BPARAN  Change the process PV0A283,PV0A632
// *                         PV0A633 and PV0A100 to correct the
// *                         totalling of the total invc amt
// ************************************************************
// *********************
Program PV0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  GLAREC GLAREC; // record
  KUMREC KUMREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PCMREC PCMREC; // record
  PV0AW01 PV0AW01; // record
  PV0AW02 PV0AW02; // record
  PV0AW03 PV0AW03; // record
  PV0AW04 PV0AW04; // record
  PV4050W1 PV4050W1; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVCREC PVCREC; // record
  PVDREC PVDREC; // record
  PVEREC PVEREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVWREC PVWREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSWREC TSWREC; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VPOITM04 VPOITM04; // record
  VPVPMT01 VPVPMT01; // record
  WEU0100 WEU0100; // record
  XSRREC XSRREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XIPTBL; // table
  use XFATBL; // table
  use XWHTBL; // table
  use XSETBL; // table
  use XSTTBL; // table
  use XUMTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use YMTTBL; // table
  use XIVTBL; // table
  use XCTTBL; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use PV0AT01 {deleteAfterUse = yes}; // table
  use PV0AT02 {deleteAfterUse = yes}; // table
  use PV0AM.PV0AM100,  // forms
      PV0AM.PV0AM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0A000: PV0A000();
  end // end main
end // end PV0A

// READ     VENDOR NAME IO5680
Function PV0A-DUP-PMT-TEST()
  ;
   /* *************************************************************/
   /* ***  CHECK ON ALL OTHER PAYMENT RECORDS FOR THE FACTORY  ****/
   /* ***  INVOICE. DO NOT ALLOW DUPLICATE DUTY OR FOB PAYMENT ****/
   /* ***  RECORDS TO BE CREATED. CALCULATE THE FREIGHT AMOUNT ****/
   /* ***  ACCUMULATED ON OTHER VENDOR PAYMENT RECORDS.        ****/
   /* *************************************************************/
  ;
  PV0AW02.PV0AW-SAME-FOB-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-FOB-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-DUTY-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-DUTY-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-FRGT-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-FRGT-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-DA-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-DA-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-BC-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-BC-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-BF-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-BF-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-C1-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-C1-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-C2-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-C2-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-C3-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-C3-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-C4-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-C4-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-I1-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-I1-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-I2-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-I2-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-I3-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-I3-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-CM-PMT-FL = "N";
  PV0AW02.PV0AW-DIFF-CM-PMT-FL = "N";
  PV0AW02.PV0AW-SAME-FREIGHT-AMT = 0;
  PV0AW02.PV0AW-DIFF-FREIGHT-AMT = 0;
  ;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  ;
   /* OPEN CURSOR FOR PAYMENT RECORDS*/
  PVYREC.PVYFNC = "S1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    /* FETCH LINES FROM VPVPMT01*/
    PVYREC.PVYFNC = "N1";
    XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && VPVPMT01.PV-MSA-VEND-GRP == PV0AM100.PVOVENDG)
                                   /* IF PAYMENT IVC, VENDOR AND VENDOR*/
                                   /* GROUP DIFFERENT*/
      if (((VPVPMT01.PV-PMT-VEND-IVC-ID == PVUREC.PV-PMT-VEND-IVC-ID)
       && (VPVPMT01.PV-PMT-VEND-NBR == PVUREC.PV-PMT-VEND-NBR)
       && (VPVPMT01.PV-PMT-VEND-GRP == PVUREC.PV-PMT-VEND-GRP)))
        if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
          PV0AW02.PV0AW-SAME-FOB-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DT")
          PV0AW02.PV0AW-SAME-DUTY-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "FR")
          PV0AW02.PV0AW-SAME-FRGT-PMT-FL = "Y";
          PV0AW02.PV0AW-SAME-FREIGHT-AMT = PV0AW02.PV0AW-SAME-FREIGHT-AMT + VPVPMT01.PV-PMT-IVC-AMT;
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DA")
          PV0AW02.PV0AW-SAME-DA-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BC")
          PV0AW02.PV0AW-SAME-BC-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BF")
          PV0AW02.PV0AW-SAME-BF-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C1")
          PV0AW02.PV0AW-SAME-C1-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C2")
          PV0AW02.PV0AW-SAME-C2-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C3")
          PV0AW02.PV0AW-SAME-C3-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C4")
          PV0AW02.PV0AW-SAME-C4-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I1")
          PV0AW02.PV0AW-SAME-I1-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I2")
          PV0AW02.PV0AW-SAME-I2-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I3")
          PV0AW02.PV0AW-SAME-I3-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "CM")
          PV0AW02.PV0AW-SAME-CM-PMT-FL = "Y";
        end
      else
        ;
        /* THIS PART IS CHECKING FOR OCCURANCES OF PAYMENT ROWS HAVING A*/
        /* DIFFERENT VENDOR INVOICE NUMBER*/
        if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
          PV0AW02.PV0AW-DIFF-FOB-PMT-FL = "Y";
          if (PV0AM100.PVATFOB != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVATFOB != 0)
            converseLib.validationFailed(180);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DT")
          PV0AW02.PV0AW-DIFF-DUTY-PMT-FL = "Y";
          if (PV0AM100.PVATDUTY != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVATDUTY != 0)
            converseLib.validationFailed(181);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "FR")
          PV0AW02.PV0AW-DIFF-FREIGHT-AMT = PV0AW02.PV0AW-DIFF-FREIGHT-AMT +           VPVPMT01.PV-PMT-IVC-AMT;
          if ((VPVPMT01.PV-PMT-VEND-NBR == PVUREC.PV-PMT-VEND-NBR)
           && (VPVPMT01.PV-PMT-VEND-GRP == PVUREC.PV-PMT-VEND-GRP))
            PV0AW02.PV0AW-DIFF-FRGT-PMT-FL = "Y";
            /* IF PV0AM100.PV0AM-NEW-FREIGHT-AMT NE 0;*/
             /* MOVE 182 TO EZEMNO;*/
             /* MOVE 'Y' TO PVWREC.PVWERRF;*/
            /* END;*/
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DA")
          PV0AW02.PV0AW-DIFF-DA-PMT-FL = "Y";
          if (PV0AM100.PVADSCT != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVADSCT != 0)
            converseLib.validationFailed(188);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BC")
          PV0AW02.PV0AW-DIFF-BC-PMT-FL = "Y";
          if (PV0AM100.PVABANKC != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVABANKC != 0)
            converseLib.validationFailed(189);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BF")
          PV0AW02.PV0AW-DIFF-BF-PMT-FL = "Y";
          if (PV0AM100.PVABRKRY != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVABRKRY != 0)
            converseLib.validationFailed(198);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C1")
          PV0AW02.PV0AW-DIFF-C1-PMT-FL = "Y";
          if (PV0AM100.PVAOCHG1 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVAOCHG1 != 0)
            converseLib.validationFailed(193);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C2")
          PV0AW02.PV0AW-DIFF-C2-PMT-FL = "Y";
          if (PV0AM100.PVAOCHG2 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVAOCHG2 != 0)
            converseLib.validationFailed(194);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C3")
          PV0AW02.PV0AW-DIFF-C3-PMT-FL = "Y";
          if (PV0AM100.PVASCHG1 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVASCHG1 != 0)
            converseLib.validationFailed(195);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C4")
          PV0AW02.PV0AW-DIFF-C4-PMT-FL = "Y";
          if (PV0AM100.PVASCHG2 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVASCHG2 != 0)
            converseLib.validationFailed(196);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I1")
          PV0AW02.PV0AW-DIFF-I1-PMT-FL = "Y";
          if (PV0AM100.PVAINT1 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVAINT1 != 0)
            converseLib.validationFailed(190);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I2")
          PV0AW02.PV0AW-DIFF-I2-PMT-FL = "Y";
          if (PV0AM100.PVAINT2 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVAINT2 != 0)
            converseLib.validationFailed(191);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I3")
          PV0AW02.PV0AW-DIFF-I3-PMT-FL = "Y";
          if (PV0AM100.PVAINT3 != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVAINT3 != 0)
            converseLib.validationFailed(192);
            PVWREC.PVWERRF = "Y";
          end
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "CM")
          PV0AW02.PV0AW-DIFF-CM-PMT-FL = "Y";
          if (PV0AM100.PVATCOMM != VPVPMT01.PV-PMT-IVC-AMT
           && PV0AM100.PVATCOMM != 0)
            converseLib.validationFailed(197);
            PVWREC.PVWERRF = "Y";
          end
        end
        ;
        ;
      end
    end
  end
  ;
   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  if (converseVar.validationMsgNum == 180
   || converseVar.validationMsgNum == 181)
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-FOB-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-FOB-PMT-FL == "Y")
    converseLib.validationFailed(180);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-DUTY-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-DUTY-PMT-FL == "Y")
    converseLib.validationFailed(181);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
   /* IF PV0AW02.PV0AW-SAME-FRGT-PMT-FL = 'Y'*/
    /* AND PV0AW02.PV0AW-DIFF-FRGT-PMT-FL = 'Y';*/
    /* MOVE 182 TO EZEMNO;*/
    /* MOVE 'Y' TO PVWREC.PVWERRF;*/
    /* EZERTN;*/
   /* END;*/
  ;
  if (PV0AW02.PV0AW-SAME-DA-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-DA-PMT-FL == "Y")
    converseLib.validationFailed(188);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-BC-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-BC-PMT-FL == "Y")
    converseLib.validationFailed(189);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-BF-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-BF-PMT-FL == "Y")
    converseLib.validationFailed(198);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-C1-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-C1-PMT-FL == "Y")
    converseLib.validationFailed(193);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-C2-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-C2-PMT-FL == "Y")
    converseLib.validationFailed(194);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-C3-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-C3-PMT-FL == "Y")
    converseLib.validationFailed(195);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-C4-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-C4-PMT-FL == "Y")
    converseLib.validationFailed(196);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-I1-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-I1-PMT-FL == "Y")
    converseLib.validationFailed(190);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-I2-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-I2-PMT-FL == "Y")
    converseLib.validationFailed(191);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-I3-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-I3-PMT-FL == "Y")
    converseLib.validationFailed(192);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  if (PV0AW02.PV0AW-SAME-CM-PMT-FL == "Y"
   && PV0AW02.PV0AW-DIFF-CM-PMT-FL == "Y")
    converseLib.validationFailed(197);
    PVWREC.PVWERRF = "Y";
    return;
  end
  ;
  ;
   /* ***  End of PV0B-VPVPMT01  ****/
end // end PV0A-DUP-PMT-TEST

// Pvbrec Lookup
Function PV0A-GET-FAN-CODE()
    /* PV0A-GET-FAN-CODE*/
   /* ************************/
   /* USE PARM VALUES FROM PVBREC - ITEM TABLE - TO SET UP CALL*/
   /* TO PV4050 TO GET 'FAN CODE' - PV-IVC-ACCT-PSPIND*/
   /* ************************/
  PV4050W1.PC-PO-NBR = PVBREC.PC3PONBR;
  PV4050W1.XWH-WHSE-CD = PVBREC.XWHCD;
  PV4050W1.PC-PRDCU-ID = PVBREC.PC2CUXID;
  PV4050W1.XGP-GPC-CD = PVBREC.XGPCD;
  PV4050W1.PV-IVC-ACCT-RSPIND = " ";
  PV4050W1.PV4050W-RETURN-CODE = "  ";
  ;
  call "PV4050" (PV4050W1) {isNoRefresh = yes, isExternal = yes};
  ;
    /* CHECK RETURN CODES AND SHOW APPROPRIATE MESSAGES*/
  ;
  if (PV4050W1.PV4050W-RETURN-CODE == "00")
    PV0AM100.PVAACRSP = PV4050W1.PV-IVC-ACCT-RSPIND;
  else
    PVWREC.PVWERRF = "Y";
    PV0AM100.PVAACRSP = "X";
    if (PV4050W1.PV4050W-RETURN-CODE == "02")
      converseLib.validationFailed(44);
    else
      if (PV4050W1.PV4050W-RETURN-CODE == "03")
        converseLib.validationFailed(184);
      else
        if (PV4050W1.PV4050W-RETURN-CODE == "04")
          converseLib.validationFailed(116);
        else
          if (PV4050W1.PV4050W-RETURN-CODE == "05")
            converseLib.validationFailed(116);
          else
            if (PV4050W1.PV4050W-RETURN-CODE == "06")
              converseLib.validationFailed(112);
            else
              if (PV4050W1.PV4050W-RETURN-CODE == "07")
                converseLib.validationFailed(91);
              else
                converseLib.validationFailed(184);
              end
            end
          end
        end
      end
    end
  end
  ;
end // end PV0A-GET-FAN-CODE

// SET FLAGS FOR SENT PAYMENTS
Function PV0A-SENT-PMT-FLAG()
   /* GDECKE  01-31-00  NISSHO CONTINGENCY - UP DATA PAYMENT STATUS*/
   /* *************************************************************/
   /* ***  CHECK STATUS ON THE PAYMENT RECORDS FOR A FACTORY   ****/
   /* ***  INVOICE. STATUS IS UPDATED AS NEEDED TO CORRESPOND  ****/
   /* ***  TO STATUS ON FACTORY INVOICE HEADER RECORD.         ****/
   /* *************************************************************/
  ;
  ;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  PV0AW02.PV0AW-SENT-FOB-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-DUTY-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-FRGT-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-DA-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-BC-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-BF-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-C1-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-C2-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-C3-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-C4-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-I1-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-I2-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-I3-PMT-FL = "N";
  PV0AW02.PV0AW-SENT-CM-PMT-FL = "N";
  ;
  PV0AW02.PV0AW-OTHR-VNDR-FOB-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-DUTY-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-FRGT-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-DA-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-BC-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-BF-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-C1-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-C2-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-C3-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-C4-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-I1-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-I2-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-I3-PMT-FL = "N";
  PV0AW02.PV0AW-OTHR-VNDR-CM-PMT-FL = "N";
  ;
  ;
  ;
   /* OPEN CURSOR FOR PAYMENT RECORDS*/
  PVYREC.PVYFNC = "S1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    /* FETCH LINES FROM VPVPMT01*/
    PVYREC.PVYFNC = "N1";
    XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && VPVPMT01.PV-MSA-VEND-GRP == PV0AM100.PVOVENDG)
                               /* IF PAYMENT IVC, VENDOR & GROUP SAME*/
      /* SET FLAGS IDNDICATING ANY PAYMENT TYPE THAT HAS 'SN' STATUS*/
      /* THE MAP FIELDS CORRESPONDING TO THE 'SN' PAYMENTS WILL BE*/
      /* PROTECTED SO THE USER CAN NO LONGER CHANGE IT.*/
      if (VPVPMT01.XIP-IVC-STAT-CD == "SN")
        if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
          PV0AW02.PV0AW-SENT-FOB-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DT")
          PV0AW02.PV0AW-SENT-DUTY-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "FR"
         && VPVPMT01.PV-PMT-VEND-IVC-ID == PV0AM100.PV-PMT-VEND-IVC-ID
         && VPVPMT01.PV-PMT-VEND-NBR == PV0AM100.PV-PMT-VEND-NBR
         && VPVPMT01.PV-PMT-VEND-GRP == PV0AM100.PV-PMT-VEND-GRP)
          PV0AW02.PV0AW-SENT-FRGT-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "DA")
          PV0AW02.PV0AW-SENT-DA-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BC")
          PV0AW02.PV0AW-SENT-BC-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "BF")
          PV0AW02.PV0AW-SENT-BF-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C1")
          PV0AW02.PV0AW-SENT-C1-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C2")
          PV0AW02.PV0AW-SENT-C2-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C3")
          PV0AW02.PV0AW-SENT-C3-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "C4")
          PV0AW02.PV0AW-SENT-C4-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I1")
          PV0AW02.PV0AW-SENT-I1-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I2")
          PV0AW02.PV0AW-SENT-I2-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "I3")
          PV0AW02.PV0AW-SENT-I3-PMT-FL = "Y";
        end
        if (VPVPMT01.XPV-IVC-TYP-CD == "CM")
          PV0AW02.PV0AW-SENT-CM-PMT-FL = "Y";
        end
      end
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && VPVPMT01.PV-MSA-VEND-GRP == PV0AM100.PVOVENDG
     && VPVPMT01.PV-PMT-VEND-IVC-ID == PV0AM100.PV-PMT-VEND-IVC-ID
     && VPVPMT01.PV-PMT-VEND-NBR == PV0AM100.PV-PMT-VEND-NBR
     && VPVPMT01.PV-PMT-VEND-GRP == PV0AM100.PV-PMT-VEND-GRP)
       /* NEXT SENTENCE*/
    else /* IF PAYMENT IVC, VENDOR & GROUP SAME*/
      /* SET FLAGS INDICATING ANY PAYMENT TYPE THAT HAS EXISTS ON A*/
      /* DIFFERENT VENDOR INVOICE. IF IT DOES THE DO NOT INSERT THE*/
      /* PAYMENT ON THE CURRENT VENDOR INVOICE. FLAGS WILL PREVENT*/
      /* PAYMENT UPDATE STMT GROUP FOR UPDATING THESE ROWS.*/
      if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
        PV0AW02.PV0AW-OTHR-VNDR-FOB-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "DT")
        PV0AW02.PV0AW-OTHR-VNDR-DUTY-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "DA")
        PV0AW02.PV0AW-OTHR-VNDR-DA-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "BC")
        PV0AW02.PV0AW-OTHR-VNDR-BC-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "BF")
        PV0AW02.PV0AW-OTHR-VNDR-BF-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "C1")
        PV0AW02.PV0AW-OTHR-VNDR-C1-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "C2")
        PV0AW02.PV0AW-OTHR-VNDR-C2-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "C3")
        PV0AW02.PV0AW-OTHR-VNDR-C3-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "C4")
        PV0AW02.PV0AW-OTHR-VNDR-C4-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "I1")
        PV0AW02.PV0AW-OTHR-VNDR-I1-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "I2")
        PV0AW02.PV0AW-OTHR-VNDR-I2-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "I3")
        PV0AW02.PV0AW-OTHR-VNDR-I3-PMT-FL = "Y";
      end
      if (VPVPMT01.XPV-IVC-TYP-CD == "CM")
        PV0AW02.PV0AW-OTHR-VNDR-CM-PMT-FL = "Y";
      end
    end
  end
  ;
   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  ;
   /* ***  End of PV0A-PMT-STAT-UPDT  ****/
end // end PV0A-SENT-PMT-FLAG

// Process Main Logic
Function PV0A000()
   /* *************************************************************/
   /* *                                                          **/
   /* *  PV0A Main Logic*/
   /* *                                                          **/
   /* *************************************************************/
  ;
  PV0A001(); /* init program*/
  ;
  while (PVWREC.PVWEOAF == "N") /* while not end-of-app*/
    PV0A100(); /* converse pv0am100*/
  end
  ;
                    /* *** EXIT APPLICATION*/
  exit program;
  ;
end // end PV0A000

// Initialize Program
Function PV0A001()
  ;
   /* Initialize program*/
  ;
  XSENTRY(); /* check security*/
  XSSEGTR(); /* set tran id*/
  PV0AS00(); /* initialize and get date*/
  PV0AS10(); /* check from applications*/
  PV0AS20(); /* protect all but key fields*/
  PV0AS11(); /* BUILD PV0AM100 AFTER XFER FROM PV0B*/
end // end PV0A001

// Converse Screen PV0AM100
Function PV0A100()
   /* PV0AM100*/
   /* 11-03-99  GDECKE  NISSHO CONTINGENCY - CLEAR MAP 1 SPECIAL FIELDS*/
   /* 01-28-01  BPARAN  CGANGED FOR TOTAL INVC AMT CHANGES*/
   /* ********************************************************/
   /* **         CONVERSION INVOICE HEADER SCREEN          ***/
   /* ********************************************************/
  ;
  PV0AM100.XIPCD = PVAREC.XIPCD; /* this will move a change in status*/
   /* IF CHANGE ON DETAIL SCREEN CHANGES INVOIC AMOUNT:*/
  if (PV0AW02.PV0AW-DETAIL-UPDATED-FL == "Y")
    PV0A633();
  end
  ;
  if (PV0AW02.PV0AW-SENT-FOB-PMT-FL == "Y")
    set PV0AM100.PVATFOB skip;
    set PV0AM100.PVATQTY skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-DUTY-PMT-FL == "Y")
    set PV0AM100.PVATDUTY skip;
    set PV0AM100.PVATQTY skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-CM-PMT-FL == "Y")
    /* commissions already not enterable*/
    /* SET PV0AM100.pvatcomm autoskip;*/
    set PV0AM100.PVATQTY skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-FRGT-PMT-FL == "Y")
    set PV0AM100.PVATFRGT skip;
    set PV0AM100.PV0AM-NEW-FREIGHT-AMT skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-DA-PMT-FL == "Y")
    set PV0AM100.PVADSCT skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-BC-PMT-FL == "Y")
    set PV0AM100.PVABANKC skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-BF-PMT-FL == "Y")
    set PV0AM100.PVABRKRY skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-C1-PMT-FL == "Y")
    set PV0AM100.PVAOCHG1 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-C2-PMT-FL == "Y")
    set PV0AM100.PVAOCHG2 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-C3-PMT-FL == "Y")
    set PV0AM100.PVASCHG1 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-C4-PMT-FL == "Y")
    set PV0AM100.PVASCHG2 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-I1-PMT-FL == "Y")
    set PV0AM100.PVAINT1 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-I2-PMT-FL == "Y")
    set PV0AM100.PVAINT2 skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-I3-PMT-FL == "Y")
    set PV0AM100.PVAINT3 skip;
  end
  ;
  if (PV0AW01.PV0AWADD == "Y")
     /* NEXT SENTENCE*/
  else
    set PV0AM100.PVATFOB skip;
    set PV0AM100.PVATQTY skip;
    set PV0AM100.PVATDUTY skip;
  end
  ;
  converse PV0AM100 ;
  set PV0AM100.PVAIVCDT cursor; /* align cursor*/
  PV0AW01.PV0AWPAF = "N"; /* screen modification flag*/
  PVWREC.PVWERRF = "N"; /* error flag*/
   /* Tcs addition begins - 01/28/2001*/
  PV0AW02.PV0AM-NEW-FRIEGHT-MODIFIED = "N";
  if (PV0AM100.PV0AM-NEW-FREIGHT-AMT is modified)
    PV0AW02.PV0AM-NEW-FRIEGHT-MODIFIED = "Y";
  end
   /* Tcs addition ends - 01/28/2001*/
  ;
   /* CLEAR SPECIAL MESSAGE FIELDS USED FOR NISSHO CONTINGENCY*/
  PV0AM100.PV0AM-PV-IVC-AMT-TITLE = " ";
  PV0AM100.PV-PMT-IVC-AMT = 0;
  PV0AM100.PV0AM-PVATCOMM-TITLE = " ";
  PV0AM100.PVATCOMM = 0;
  ;
  PV0A400(); /* check authority*/
  if (PVWREC.PVWERRF == "N")
    PV0A420(); /* check pf keys*/
  else
    return;
  end
  ;
  ;
  if (PVWREC.PVWERRF == "Y") /* error marked redisplay screen*/
    return;
  else
    if (PV0AW01.PV0AWFF == "Y") /* first time through flag*/
      PV0A600(); /* look for current invoice*/
      PV0A605(); /* vendor,security, and data move*/
      ;
      if (PVUREC.PVUCHOIC == 9)
        PV0AS-GET-CURR-FRT(); /* GET FREIGHT ON CURRENT FCTY,VEND IVC*/
      end
      ;
      if (PVWREC.PVWERRF == "Y") /* start application over*/
        PV0AW01.PV0AWFF = "Y"; /* reset first time flag*/
        return;
      else
        PV0AW01.PV0AWFF = "N"; /* set first time flag*/
        return;
      end
    end
  end
  ;
  if (PVWREC.PVWUPDTF == "Y") /* if user has update authority*/
    if (PVWREC.PVWERRF == "N")
      PV0A620(); /* process screen data*/
    end
  else
    PV0A635(); /* check for modified key display only*/
  end
  ;
  if (PVWREC.PVWERRF == "N")
    PV0A640(); /* determine next action*/
  else
    return;
  end
end // end PV0A100

// CONVERSE PV0AM200
Function PV0A200()
  ;
   /* **************************/
   /* PROCESS SCREEN PVOAM200*/
   /* **************************/
  ;
  if (PV0AW02.PV0AW-SENT-FOB-PMT-FL == "Y")
    set PV0AM200.PVBLNFOB[1] skip;
    set PV0AM200.PVBLNQTY[1] skip;
    set PV0AM200.PVBLNFOB[2] skip;
    set PV0AM200.PVBLNQTY[2] skip;
    set PV0AM200.PVBLNFOB[3] skip;
    set PV0AM200.PVBLNQTY[3] skip;
    set PV0AM200.PVBLNFOB[4] skip;
    set PV0AM200.PVBLNQTY[4] skip;
    set PV0AM200.PVBLNFOB[5] skip;
    set PV0AM200.PVBLNQTY[5] skip;
    set PV0AM200.PVBLNFOB[6] skip;
    set PV0AM200.PVBLNQTY[6] skip;
    set PV0AM200.PVBLNFOB[7] skip;
    set PV0AM200.PVBLNQTY[7] skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-DUTY-PMT-FL == "Y")
    set PV0AM200.PVBLNDTY[1] skip;
    set PV0AM200.PVBLNQTY[1] skip;
    set PV0AM200.PVBLNDTY[2] skip;
    set PV0AM200.PVBLNQTY[2] skip;
    set PV0AM200.PVBLNDTY[3] skip;
    set PV0AM200.PVBLNQTY[3] skip;
    set PV0AM200.PVBLNDTY[4] skip;
    set PV0AM200.PVBLNQTY[4] skip;
    set PV0AM200.PVBLNDTY[5] skip;
    set PV0AM200.PVBLNQTY[5] skip;
    set PV0AM200.PVBLNDTY[6] skip;
    set PV0AM200.PVBLNQTY[6] skip;
    set PV0AM200.PVBLNDTY[7] skip;
    set PV0AM200.PVBLNQTY[7] skip;
  end
  ;
  if (PV0AW02.PV0AW-SENT-CM-PMT-FL == "Y")
    set PV0AM200.PVBLNCOM[1] skip;
    set PV0AM200.PVBLNQTY[1] skip;
    set PV0AM200.PVBLNCOM[2] skip;
    set PV0AM200.PVBLNQTY[2] skip;
    set PV0AM200.PVBLNCOM[3] skip;
    set PV0AM200.PVBLNQTY[3] skip;
    set PV0AM200.PVBLNCOM[4] skip;
    set PV0AM200.PVBLNQTY[4] skip;
    set PV0AM200.PVBLNCOM[5] skip;
    set PV0AM200.PVBLNQTY[5] skip;
    set PV0AM200.PVBLNCOM[6] skip;
    set PV0AM200.PVBLNQTY[6] skip;
    set PV0AM200.PVBLNCOM[7] skip;
    set PV0AM200.PVBLNQTY[7] skip;
  end
  ;
  converse PV0AM200 ;
  ;
  ;
  PV0A220(); /* valid pf keys*/
  ;
  PV0A210(); /* security*/
  ;
  if (PVWREC.PVWERRF == "N")
    if (converseVar.eventKey not pf16)
      PV0A240(); /* edit modified fields*/
    else
    end
  else
    return;
  end
  ;
  if (PV0AW-GCOA-NOT-FOUND == "Y")
    converseLib.validationFailed(174);
    PVWREC.PVWERRF = "Y";
    move PV0AW-GCOA-MESSAGE to XXXMSG withV60Compat;
  end
  ;
  if (PVWREC.PVWERRF == "N")
    PV0A280(); /* determine next action*/
  else
    return;
  end
  ;
end // end PV0A200

// Check Authority
Function PV0A210()
   /* *****************/
   /* Check Authority*/
   /* *****************/
  ;
  ;
  if (converseVar.eventKey is pf2)
    if (COMMAREA.CAADDFL == "N")
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(129);
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf13)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(132);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf15)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(144);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf16)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(129);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf14)
    if (COMMAREA.CAILVL[1] == "Y"
     || COMMAREA.CAADDFL == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(134);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
end // end PV0A210

// Check for valid pf keys
Function PV0A220()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - ALLOW STATUS CHG TO 'IP'*/
   /* check for valid pF keys*/
  ;
  PVWREC.PVWERRF = "N";
  ;
  if (converseVar.eventKey is enter)
    if (PV0AM200.CATOAP != " ")
      COMMAREA.CATOAP = PV0AM200.CATOAP;
      COMMAREA.CAITEM = PV0AM200.CAITEM;
      XSEXIT();
      PVWREC.PVWERRF = "Y";
      set PV0AM200.CATOAP cursor, bold;
      PV0AM200.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    else
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    PVWREC.PVWERRF = "Y";
    PV0AM200.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf3)
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWBLD = "Y";
      PVWREC.PVWBLDSC = "N";
      return;
    else
      if (converseVar.eventKey is pf4)
        XSPF4();
        PVWREC.PVWERRF = "Y";
        PV0AM200.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      else
        if (converseVar.eventKey not pf7
         && converseVar.eventKey not pf2
         && converseVar.eventKey not pf8
         && converseVar.eventKey not pf13
         && converseVar.eventKey not pf14
         && converseVar.eventKey not pf15
         && converseVar.eventKey not pf16)
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(1); /* invalid pf key*/
          return;
        end
      end
    end
  end
  ;
   /* check status for update*/
  ;
  if (converseVar.eventKey is pf2)
    if (PVAREC.XIPCD == "UM" /* only these status codes*/
     || PVAREC.XIPCD == "NP" /* can be updated*/
     || PVAREC.XIPCD == "  " 
     || PVAREC.XIPCD == "IC" 
     || PVAREC.XIPCD == "MT" 
     || (PVAREC.XIPCD == "IP"
     && PVUREC.PVUCHOIC == 9))
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      converseLib.validationFailed(7); /* invalid status to update*/
      return;
    end
  end
  ;
  ;
end // end PV0A220

// Edit modified fields
Function PV0A240()
  ;
   /* 10-21-99  GDECKE  NISSHO CONTINGENCY - PREVENT BAD TABLE INDEX*/
   /* ********************************************/
   /* Check For Modified Keys By Each Line Item*/
   /* ********************************************/
  ;
  ;
  PVWREC.PVWLINEX = 1; /* find last line on screen*/
  PVWREC.PVWLNCK = PV0AW01.PV0AW1ST;
  PV0AW01.PV0AWLIM = PV0AW01.PV0AW1ST; /* top of screen*/
  PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
  PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
  ;
  while (PVWREC.PVWLINEX <= 7)
    PV0AS53();
    if (PVWREC.PVWLNCK > PV0AW01.PV0AWLIN
     && converseVar.eventKey not pf15
     && PV0AW01.PV0AWMDF == "Y")
      PV0AW01.PV0AWLIN = PV0AW01.PV0AWLIN + 1;
      PVWREC.PVWLNCK = PVWREC.PVWLNCK - 1;
      if (PVWREC.PVWLNCK < 1)
        PVWREC.PVWLINEX = 8;
      else
        PV0AW01.PVBLNINB[PV0AWLIM] = PV0AW01.PVBLNINB[PVWLNCK] + 1;
        PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
      end
    end
    if (PVWREC.PVWLINEX <= 7)
      if (PV0AW01.PV0AWDEL == "Y") /* empty line item*/
        PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
        PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
        PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
      else
        if (PV0AW01.PV0AWMDF == "Y")
          if (PV0AW01.PV0AWADD == "Y"
           || PV0AW01.PV0AWLEF[PVWLNCK] != "N")
            PV0A245();
          else
            if (PV0AM100.XIPCD != "IC"
             && PV0AM100.XIPCD != "MT")
              PV0A250();
            else
              if (PV0AM100.XIPCD == "IC" /* sesn edit*/
               || PV0AM100.XIPCD == "MT") /* sesn edit*/
                PV0AS62();
              end
              PV0AS60();
              PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
              PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
              PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
            end
          end
        else
          PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
          PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
          PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
        end
      end
    end
  end
  ;
  ;
end // end PV0A240

// Edit Modifications Add Mode
Function PV0A245()
    /* PV0A251  --  VPOITM01 LOOKUP*/
  ;
    /* 12-27-99  GDECKE  NISSHO CONTINGENCY - ON NEW INVOICE AND MENU*/
                      /* OPTION 9 USE STATUS 'OP' TO GET VPOITM01 LINE*/
  ;
  ;
   /* **********************************/
   /* Edit modified Fields Add Mode On*/
   /* For Screen Pv0am200*/
   /* 9-28-94 twatso  Add ivc type 'pt' to mesg 167.*/
   /* **********************************/
  ;
  set SQLCA empty;
  ;
   /* move default values if neccessary*/
  if (PV0AM200.SY2CLRID[PVWLINEX] == "  ") /* color equal to blanks*/
    PV0AM200.SY2CLRID[PVWLINEX] = "00"; /* default*/
    PV0AW01.SY2CLRID[PVWLINEX] = "00"; /* default*/
  end
  ;
  if (PV0AM200.XUMCD[PVWLINEX] == "  ") /* uom equal to blanks*/
    PV0AM200.XUMCD[PVWLINEX] = "01"; /* default*/
    PV0AW01.XUMCD[PVWLINEX] = "01"; /* default*/
  end
  ;
  if (PV0AM200.XQACD[PVWLINEX] == "  ") /* quality equal to blanks*/
    PV0AM200.XQACD[PVWLINEX] = "01"; /* default*/
    PV0AW01.XQACD[PVWLINEX] = "01"; /* default*/
  end
  ;
  if (PV0AM200.XDMCD[PVWLINEX] == "  ") /* dim cd equal to blanks*/
    PV0AM200.XDMCD[PVWLINEX] = "00"; /* default*/
    PV0AW01.XDMCD[PVWLINEX] = "00"; /* default*/
  end
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] == "  ") /* iseg equal to blanks*/
    PV0AM200.PC2INSEG[PVWLINEX] = "000"; /* default*/
    PV0AW01.PC2INSEG[PVWLINEX] = "000"; /* default*/
  end
  ;
  if (PV0AM200.XPGCD[PVWLINEX] == "  ") /* ptyp equal to blanks*/
    PV0AM200.XPGCD[PVWLINEX] = "00"; /* default*/
    PV0AW01.XPGCD[PVWLINEX] = "00"; /* default*/
  end
  ;
   /* ***********************/
   /* Editing Modifications*/
   /* ***********************/
  PV0AW02.PV0AWEDF = "N"; /* error flag initialized*/
  ;
   /* validate package code*/
  if (PV0AM200.XPGCD[PVWLINEX] in XPGTBL.XPGCD) /* package cd found*/
    PV0AW01.XPGCD[PVWLNCK] = PV0AM200.XPGCD[PVWLINEX];
  else
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(146);
    set PV0AM200.XPGCD[PVWLINEX] cursor, bold;
  end
  ;
   /* validate dim code*/
  if (PV0AM200.XDMCD[PVWLINEX] in XDMTBL.XDMCD) /* dimension*/
    PV0AW01.XDMCD[PVWLNCK] = PV0AM200.XDMCD[PVWLINEX];
  else
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(38);
    set PV0AM200.XDMCD[PVWLINEX] cursor, bold;
  end
  ;
   /* quality code change for screeners*/
   /* validate quality code*/
  if (PV0AM200.XQACD[PVWLINEX] == "2S" /* screener error*/
   || PV0AM200.XQACD[PVWLINEX] == "2B") /* blank manu error*/
    PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
    PV0AM200.XQACD[PVWLINEX] = "02"; /**/
  else
    if (PV0AM200.XQACD[PVWLINEX] == "3S" /* screener destroyed*/
     || PV0AM200.XQACD[PVWLINEX] == "3B") /* blank manu destroyed*/
      PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
      PV0AM200.XQACD[PVWLINEX] = "03"; /**/
    else
      if (PV0AM200.XQACD[PVWLINEX] in XQATBL.XQACD) /* quality cd found*/
        PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
      else
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(39);
        PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
        set PV0AM200.XQACD[PVWLINEX] cursor, bold;
      end
    end
  end
  ;
  if (PV0AM100.XIVCD == "SC" /* screener*/
   || PV0AM100.XIVCD == "PT") /* production ticket*/
    if (PV0AW01.XQACD[PVWLNCK] != "2S"
     && PV0AW01.XQACD[PVWLNCK] != "2B"
     && PV0AW01.XQACD[PVWLNCK] != "01"
     && PV0AW01.XQACD[PVWLNCK] != "3S"
     && PV0AW01.XQACD[PVWLNCK] != "3B")
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(167); /* invalid qual for screener*/
      set PV0AM200.XQACD[PVWLINEX] cursor, bold;
    end
  end
  ;
  if (PV0AM100.XIVCD == "IV" /* non screen*/
   || PV0AM100.XIVCD == "BM")
    if (PV0AW01.XQACD[PVWLNCK] == "2S"
     || PV0AW01.XQACD[PVWLNCK] == "2B"
     || PV0AW01.XQACD[PVWLNCK] == "3S"
     || PV0AW01.XQACD[PVWLNCK] == "3B")
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(169); /* invalid qual for inv type*/
      set PV0AM200.XQACD[PVWLINEX] cursor, bold;
    end
  end
  ;
  if (PV0AM200.PVBLNFOB[PVWLINEX] != 0)
    if (PV0AM200.XQACD[PVWLINEX] == "03"
     || PV0AM200.XQACD[PVWLINEX] == "3S"
     || PV0AM200.XQACD[PVWLINEX] == "3B")
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(168); /* fob must be 0 for qual 03*/
      set PV0AM200.PVBLNFOB[PVWLINEX] cursor, bold;
    end
  end
  ;
   /* validate uom code*/
  if (PV0AM200.XUMCD[PVWLINEX] in XUMTBL.XUMCD) /* uom cd found*/
    PV0AW01.XUMCD[PVWLNCK] = PV0AM200.XUMCD[PVWLINEX];
  else
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(40);
    set PV0AM200.XUMCD[PVWLINEX] cursor, bold;
  end
  ;
   /* validate warehouse code*/
  if (PV0AM200.XWHCD[PVWLINEX] in XWHTBL.XWHCD) /* warehouse*/
    PV0AW01.XWHCD[PVWLNCK] = PV0AM200.XWHCD[PVWLINEX];
    PV0A247(); /* geo region lookup*/
  else
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(41);
    set PV0AM200.XWHCD[PVWLINEX] cursor, bold;
  end
  ;
  if (PV0AM100.XIVCD == "BM" /* blank manufacturer*/
   && PV0AM200.XWHCD[PVWLINEX] != "  ")
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(165); /* no whse cd allowed*/
    set PV0AM200.XWHCD[PVWLINEX] cursor, bold;
  end
  ;
  ;
  set SQLCA empty;
  ;
     /* check for valid style and color*/
  ;
  SY2REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
  SY2REC.SY2CLRID = PV0AM200.SY2CLRID[PVWLINEX];
  SY2REC.XDMCD = PV0AM200.XDMCD[PVWLINEX];
  SY2REC.XGPCD = PV0AM100.XGPCD; /* from header*/
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* style/color not found*/
      set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
      set PV0AM200.SY2CLRID[PVWLINEX] bold;
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(45);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        converseLib.validationFailed(44);
        PVWREC.PVWERRF = "Y";
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA245";
        TA1REC.TA1TBLVU = "VCOLOR01";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLKE = SY2REC.SY2KEY;
        PV0AS99();
      end
    end
  end
  ;
  ;
   /* check for valid size range*/
  SY1REC.XGPCD = PV0AM100.XGPCD;
  SY1REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    if (PV0AM200.XUMCD[PVWLINEX] != SY1REC.XUMCD)
      set PV0AM200.XUMCD[PVWLINEX] cursor, bold;
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(164); /* uom ne to dprod.vstyle xumcd*/
    end
    PV0A260(); /* vscale table lookup*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* style not found*/
      set PV0AM200.SY2CLRID[PVWLINEX] cursor, bold;
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(148);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PV0A245";
        TA1REC.TA1TBLVU = "VSTYLE01";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLKE = SY1REC.SY1KEY;
        PV0AS99();
      end
    end
  end
  ;
  ;
  set SQLCA empty;
   /* *****************/
   /* Validate PO Item*/
   /* *****************/
  ;
  if (PVUREC.PVUCHOIC == 9
   && PV0AM100.XIPCD == "  ")
    PC6REC.PC6STAT = "OP";
  else
    PC6REC.PC6STAT = PV0AM100.XIPCD; /* move key*/
  end
  ;
  PC6REC.XGPCD = PV0AM100.XGPCD;
  PC6REC.PC2CUXID = PV0AM200.PC2CUXID[PVWLINEX];
  PC6REC.PC3PONBR = PV0AM200.PVBPONBR[PVWLINEX];
  PC6REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
  PC6REC.SY2CLRID = PV0AM200.SY2CLRID[PVWLINEX];
  PC6REC.XDMCD = PV0AM200.XDMCD[PVWLINEX];
  PC6REC.XQACD = PV0AM200.XQACD[PVWLINEX];
  PC6REC.XWHCD = PV0AM200.XWHCD[PVWLINEX];
  ;
  call "IO3310" ("SC", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* call po item*/
  if (SQLCA.VAGen_SQLCODE == 0 /* success*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple line items okay*/
    PV0AW01.YMTCD[PVWLNCK] = PC6REC.YMTCD; /* mode of trans*/
    PV0AW01.XDSCD[PVWLNCK] = PC6REC.XDSCD; /* direct ship ind*/
    PVAREC.PC6XCTCD = PC6REC.PC6XCTCD; /* dest country cd*/
    PV0AM100.PC6XCTCD = PC6REC.PC6XCTCD;
    PVBREC.FY1FCTYC = PC6REC.FY1FCTYC; /* factory code*/
    PV0AM100.FY1FCTYC = PC6REC.FY1FCTYC;
    PV0AW01.PV0AWPAF = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* invalid po item*/
      PV0A251(); /* if quality = 02 try again*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA245";
        TA1REC.TA1TBLVU = "VPOITM01";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLKE = PC6REC.PC6KEY;
        PV0AS99();
      end
    end
  end
  ;
  ;
   /* ******************************************/
   /* CUSTOMER XREF IS NEEDED IF ISEGS ARE USED*/
   /* ******************************************/
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] == "000"
   && PV0AM200.PC2CUXID[PVWLINEX] != "  ")
    set PV0AM200.PC2CUXID[PVWLINEX] bold;
    set PV0AM200.PC2INSEG[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(158);
  end
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] != "000"
   && PV0AM200.PC2CUXID[PVWLINEX] == "  ")
    set PV0AM200.PC2CUXID[PVWLINEX] bold;
    set PV0AM200.PC2INSEG[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(159);
  end
  ;
  ;
  set SQLCA empty;
   /* ***********************/
   /* VALIDATE CUSTOMER XREF*/
   /* ***********************/
  ;
  PC2REC.PC2CUXID = PV0AM200.PC2CUXID[PVWLINEX]; /* move key*/
  PC2REC.XGPCD = PV0AM100.XGPCD;
  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call XREF*/
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* XREF*/
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(20);
      set PV0AM200.PC2CUXID[PVWLINEX] cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA245";
        TA1REC.TA1TBLVU = "VPRDCU01";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLKE = PC2REC.PC2KEY;
        PV0AS99();
      end
    end
  end
  ;
  ;
  set SQLCA empty;
   /* *******************************************/
   /* Validate Season Year And Code Using PO HDR*/
   /* *******************************************/
  ;
  PC3REC.XGPCD = PV0AM100.XGPCD;
  PC3REC.PC3PONBR = PV0AM200.PVBPONBR[PVWLINEX];
  ;
  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes}; /* call po hdr*/
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    if (PV0AM200.XSECD[PVWLINEX] in XSETBL.XSECD /* valid season*/
     && PV0AM200.PCFSEYR[PVWLINEX] > 1987        /* valid year*/
     && PV0AM200.PCFSEYR[PVWLINEX] < 2010)      
      /* next sentence*/
    else
      PV0AW01.XSECD[PVWLNCK] = PC3REC.XSECD; /* sesn code*/
      PV0AM200.XSECD[PVWLINEX] = PC3REC.XSECD;
      PV0AW01.PCFSEYR[PVWLNCK] = PC3REC.PCFSEYR; /* sesn yr*/
      PV0AM200.PCFSEYR[PVWLINEX] = PC3REC.PCFSEYR;
    end
    PV0AS15(); /* Set Sample Flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* invalid po item*/
      set PV0AM200.PVBPONBR[PVWLINEX] cursor, bold;
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(147);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA245";
        TA1REC.TA1TBLVU = "VPOHDR01";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLKE = PC3REC.PC3KEY;
        PV0AS99();
      end
    end
  end
  ;
    /* OVER AND SHORT CHECK*/
  if (PV0AW01.PV0AWADD == "Y")
    /* NEXT SENTENCE*/
  else
    if (PV0AW02.PV0AWOSF == "Y")
      if (PV0AM200.PVBLNQTY[PVWLINEX] < PV0AW01.PVBLNQTY[PVWLNCK])
        PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PVWLNCK];
        set PV0AM200.PVBLNQTY[PVWLINEX] cursor, bold;
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(162); /* QTY CANNOT BE REDUCED*/
      else
        if (PV0AM200.PVBLNQTY[PVWLINEX] > PV0AW01.PVBLNQTY[PVWLNCK])
          PV0AW03.PV0AWOST = 0;
          PV0AW03.PV0AWOS1 = PV0AM200.PVBLNQTY[PVWLINEX];
          PV0AW03.PV0AWOS2 = PV0AW01.PVBLNQTY[PVWLNCK];
          PV0AW03.PV0AWOS3 = PV0AW01.PCMOSQTY[PVWLNCK];
          PV0AW03.PV0AWOST = PV0AW03.PV0AWOS1 - PV0AW03.PV0AWOS2;
          PV0AW01.PCMOSQTY[PVWLNCK] = PV0AW03.PV0AWOS3 + PV0AW03.PV0AWOST;
        end
      end
    else
      if (PV0AM200.PVBLNQTY[PVWLINEX] != PV0AW01.PVBLNQTY[PVWLNCK])
        PV0AW01.PVBLNQTY[PVWLNCK] = PV0AM200.PVBLNQTY[PVWLINEX];
        PV0AW01.PCMOSQTY[PVWLNCK] = PV0AM200.PVBLNQTY[PVWLINEX];
      end
    end
  end
  ;
  if (PVWREC.PVWERRF != "Y")
    PV0A249(); /* blnk style lookup*/
  end
  ;
   /* calculate line tot using unit price * line qty*/
  PV0AW02.PV0AWMT = 0;
  PV0AW02.PV0AWMT = PV0AM200.PVBLNFOB[PVWLINEX];
  PV0AW02.PV0AWMT = PV0AW02.PV0AWMT * PV0AM200.PVBLNQTY[PVWLINEX];
  PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW02.PV0AWMT;
  ;
  ;
   /* mark load error flag*/
  if (PV0AW02.PV0AWEDF == "Y")
    PV0AW01.PV0AWLEF[PVWLNCK] = "Y";
  else
    PV0AW01.PV0AWLEF[PVWLNCK] = "N";
    if (PV0AW01.PCFSEYR[PVWLNCK] < 0)
      PV0AW01.PCFSEYR[PVWLNCK] = PV0AW01.PCFSEYR[PVWLNCK] * -1;
    end
  end
  ;
   /* change quality code back*/
  PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PVWLNCK];
  ;
  PV0AS60();
  PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1; /* set counters down by one*/
  PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1; /* set counters down by one*/
  PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
end // end PV0A245

// Geographical Region Look Up
Function PV0A247()
  ;
   /* *****************************/
   /* Geograhical Region Look UP*/
   /* 9-28-94 TWatso  Add ivc type 'pt' to mesg 171.*/
   /* *****************************/
  ;
  set SQLCA empty;
  ;
  if (PV0AM200.XWHCD[PVWLINEX] != "  ")
    if (PV0AM200.XWHCD[PVWLINEX] in XWHTBL.XWHCD)
      if (XWHTBL.XSTCD[sysVar.arrayIndex] in XSTTBL.XSTCD)
        PV0AW01.YSRSLSRG[PVWLNCK] = XSTTBL.YSRSLSRG[sysVar.arrayIndex];
      end
    end
  else /* retrieve store cd from xre*/
    PC2REC.PC2CUXID = PV0AM200.PC2CUXID[PVWLINEX]; /* move k*/
    PC2REC.XGPCD = PV0AM100.XGPCD;
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call XREF*/
    if (SQLCA.VAGen_SQLCODE != 0) /* error that will be found later*/
      return;
    else
  /* TCS CHANGE 08/18 BEGIN                  */
      if (PC2REC.XCTCD == "CANA")
        PC2REC.KUCCOID = 694475;
        WEU0100.WEU0100-EQUIP-PROD-FL = "N";
        set WEU0100 empty;
        WEU0100.XGPCD = PVBREC.XGPCD;
        WEU0100.SY1STNBR = PVBREC.SY1STNBR;
        WEU0100.SY2CLRID = PVBREC.SY2CLRID;
        WEU0100.XDMCD = PVBREC.XDMCD;
        WEU0100.WEU0100-TASK = "S ";
        WEU0100.WEU0100-CALLING-APPL = "PV0A";
        WEU0100.WEU0100-CALLER-LOCATION = "PV0A247";

        call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
        if (WEU0100.WEU0100-RETURN-CODE == 0
         && WEU0100.WEU0100-EQUIP-PROD-FL == "Y")
          PC2REC.KUMSTRID = 0031;
        else
          if (PVBREC.XGPCD == "02")
            PC2REC.KUMSTRID = 0518;
          else
            PC2REC.KUMSTRID = 0036;
          end
        end
      end
  /* TCS CHANGES 08/18 END                   */
      KUMREC.KUMSTRID = PC2REC.KUMSTRID; /* move key*/
      KUMREC.KUCCOID = PC2REC.KUCCOID;
      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call store*/
      if (SQLCA.VAGen_SQLCODE != 0) /* error*/
        converseLib.validationFailed(149); /* region code not found*/
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y";
        set PV0AM200.PC2CUXID[PVWLINEX] cursor, bold;
        set PV0AM200.XWHCD[PVWLINEX] bold;
        return;
      else
        if (KUMREC.KUMXSTCD in XSTTBL.XSTCD)
          PV0AW01.YSRSLSRG[PVWLNCK] = XSTTBL.YSRSLSRG[sysVar.arrayIndex];
        end
        VINTGL02.XGPCD = PV0AM100.XGPCD;
        VINTGL02.KUMSTRID = 0; /* move key*/
        VINTGL02.KUCCOID = PC2REC.KUCCOID;
        VINTGL02.XAUCD = "  ";
        if (PV0AW01.PV0AWBMF != "Y") /* onetime warning*/
          call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};
     /* the above line references dproft.vintgl02*/
          if (SQLCA.VAGen_SQLCODE == 0)
            PV0AS-S-VGCOA001(); /* get the old gl-gen-led-acct*/
            if (GLAREC.GLAENT == "300" 
             && GLAREC.GLARCID == "0001"
             && GLAREC.GLANTAC == "116"
             && PV0AM100.XIVCD != "BM" /* invalid invoice type*/
             && PV0AM100.XIVCD != "SC" /* screener*/
             && PV0AM100.XIVCD != "PT") /* production ticket*/
              converseLib.validationFailed(171); /* cust has wip: check inv type*/
              PVWREC.PVWERRF = "Y";
              PV0AW01.PV0AWBMF = "Y";
              set PV0AM200.PC2CUXID[PVWLINEX] cursor, bold;
              set PV0AM200.PC2INSEG[PVWLINEX] cursor, bold;
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end PV0A247

// DPROD.VCOLOR02 LOOK UP
Function PV0A249()
   /* ****************************************/
   /* USE DPROD.VCOLOR02 TO LOOK UP PRODUCT*/
   /* IF BLANK STYLE ASSOC. THEN PV0AM100.XIVCD*/
   /* Might be 'sc'*/
   /* 9-28-94 twatso  Add ivc type 'pt' to messages 166, 170.*/
   /* ****************************************/
  ;
  set SQLCA empty;
  ;
  SYCREC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX]; /* style*/
  SYCREC.SY2CLRID = PV0AM200.SY2CLRID[PVWLINEX]; /* color*/
  SYCREC.XDMCD = PV0AM200.XDMCD[PVWLINEX]; /* dim*/
  SYCREC.XGPCD = PV0AM100.XGPCD; /* gpc*/
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    if (SYCREC.SY1BSTNB != "  " /* blank style found*/
     && PV0AM100.XIVCD != "SC"  /* error*/
     && PV0AM100.XIVCD != "PT") /* error*/
      if (PV0AW01.PV0AWSCF != "Y")
        set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
        set PV0AM200.SY2CLRID[PVWLINEX] bold;
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(166); /* invoice type might need to be 'sc'*/
        PV0AW01.PV0AWSCF = "Y"; /* flag for scr warning*/
      end
    else
      if (SYCREC.SY1BSTNB == "  " /* wanted blank style, but not found*/
       && (PV0AM100.XIVCD == "SC" /* error for screener ivc*/
       || PV0AM100.XIVCD == "PT")) /* error for produc. ticketing ivc*/
        set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
        set PV0AM200.SY2CLRID[PVWLINEX] bold;
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(170); /* no blank style for inv.type 'sc'*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
      converseLib.validationFailed(44);
      PVWREC.PVWERRF = "Y";
    else /* fatal db2 error*/
      PVWREC.PVWERRF = "Y";
      TA1REC.TA1LOCAT[1] = "PVOA249";
      TA1REC.TA1TBLVU = "VCOLOR02";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLKE = SYCREC.SYCKEY;
      PV0AS99();
    end
  end
  ;
end // end PV0A249

// Edit Modifications to Pv0am200
Function PV0A250()
  ;
   /* **********************************************/
   /* Edit Modified Fields For Screen Pv0am200*/
   /* 9-28-94 Twatso  Add ivc type 'pt' to mesg 167.*/
   /* **********************************************/
  ;
   /* move default values if neccessary*/
  if (PV0AM200.SY2CLRID[PVWLINEX] == "  ") /* color equal to blanks*/
    PV0AM200.SY2CLRID[PVWLINEX] = "00"; /* default*/
  end
  ;
  if (PV0AM200.XUMCD[PVWLINEX] == "  ") /* uom equal to blanks*/
    PV0AM200.XUMCD[PVWLINEX] = "01"; /* default*/
  end
  ;
  if (PV0AM200.XQACD[PVWLINEX] == "  ") /* quality equal to blanks*/
    PV0AM200.XQACD[PVWLINEX] = "01"; /* default*/
  end
  ;
  if (PV0AM200.XDMCD[PVWLINEX] == "  ") /* dim cd equal to blanks*/
    PV0AM200.XDMCD[PVWLINEX] = "00"; /* default*/
  end
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] == "  ") /* iseg equal to blanks*/
    PV0AM200.PC2INSEG[PVWLINEX] = "000"; /* default*/
  end
  ;
  if (PV0AM200.XPGCD[PVWLINEX] == "  ") /* ptyp equal to blanks*/
    PV0AM200.XPGCD[PVWLINEX] = "00"; /* default*/
  end
  ;
   /* ***********************/
   /* Editing Modifications*/
   /* ***********************/
  PV0AW02.PV0AWEDF = "N"; /* error flag initialized*/
  ;
   /* validate package code*/
  if (PV0AM200.XPGCD[PVWLINEX] != PV0AW01.XPGCD[PVWLNCK])
    if (PV0AM200.XPGCD[PVWLINEX] in XPGTBL.XPGCD) /* package cd found*/
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(146);
      set PV0AM200.XPGCD[PVWLINEX] cursor, bold;
    end
  end
  ;
  ;
   /* validate dim code*/
  if (PV0AM200.XDMCD[PVWLINEX] != PV0AW01.XDMCD[PVWLNCK])
    if (PV0AM200.XDMCD[PVWLINEX] in XDMTBL.XDMCD) /* package cd found*/
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(38);
      set PV0AM200.XDMCD[PVWLINEX] cursor, bold;
    end
  end
  ;
   /* validate quality code*/
   /* check for screener xqacd codes*/
  if (PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PVWLNCK])
    if (PV0AM200.XQACD[PVWLINEX] == "2S" /* screener error*/
     || PV0AM200.XQACD[PVWLINEX] == "2B") /* blank manuf. error*/
      PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
      PV0AM200.XQACD[PVWLINEX] = "02";
    else
      if (PV0AM200.XQACD[PVWLINEX] == "3S" /* screener destroyed*/
       || PV0AM200.XQACD[PVWLINEX] == "3B") /* blank manuf. destroyed*/
        PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
        PV0AM200.XQACD[PVWLINEX] = "03";
      else
        if (PV0AM200.XQACD[PVWLINEX] in XQATBL.XQACD) /* quality code found*/
          PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
        else
          PVWREC.PVWERRF = "Y";
          PV0AW02.PV0AWEDF = "Y"; /* error*/
          converseLib.validationFailed(39);
          PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
          set PV0AM200.XQACD[PVWLINEX] cursor, bold;
        end
      end
    end
  end
  ;
  if (PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PVWLNCK])
    if (PV0AM100.XIVCD == "SC" /* screener*/
     || PV0AM100.XIVCD == "PT") /* production ticket*/
      if (PV0AW01.XQACD[PVWLNCK] != "01"
       && PV0AW01.XQACD[PVWLNCK] != "2S"
       && PV0AW01.XQACD[PVWLNCK] != "2B"
       && PV0AW01.XQACD[PVWLNCK] != "3S"
       && PV0AW01.XQACD[PVWLNCK] != "3B")
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(167); /* invalid qual for screener*/
        set PV0AM200.XUMCD[PVWLINEX] cursor, bold;
      end
    end
  end
  ;
  if (PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PVWLNCK])
    if (PV0AM100.XIVCD == "IV" /* non screener*/
     || PV0AM100.XIVCD == "BM") /**/
      if (PV0AW01.XQACD[PVWLNCK] == "2S"
       || PV0AW01.XQACD[PVWLNCK] == "2B"
       || PV0AW01.XQACD[PVWLNCK] == "3S"
       || PV0AW01.XQACD[PVWLNCK] == "3B")
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(169); /* invalid qual for screener*/
        set PV0AM200.XQACD[PVWLINEX] cursor, bold;
      end
    end
  end
  ;
  if (PV0AM200.PVBLNFOB[PVWLINEX] != PV0AW01.PVBLNFOB[PVWLNCK]
   || PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PVWLNCK])
    if (PV0AM200.PVBLNFOB[PVWLINEX] != 0)
      if (PV0AM200.XQACD[PVWLINEX] == "03"
       || PV0AM200.XQACD[PVWLINEX] == "3S"
       || PV0AM200.XQACD[PVWLINEX] == "3B")
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(168); /* fob must be 0 for qual 03*/
        set PV0AM200.PVBLNFOB[PVWLINEX] cursor, bold;
      end
    end
  end
  ;
   /* validate uom code*/
  if (PV0AM200.XUMCD[PVWLINEX] != PV0AW01.XUMCD[PVWLNCK])
    if (PV0AM200.XUMCD[PVWLINEX] in XUMTBL.XUMCD) /* package cd found*/
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(40);
      set PV0AM200.XUMCD[PVWLINEX] cursor, bold;
    end
  end
  ;
  ;
   /* validate warehouse code*/
  if (PV0AM200.XWHCD[PVWLINEX] != PV0AW01.XWHCD[PVWLNCK])
    if (PV0AM200.XWHCD[PVWLINEX] in XWHTBL.XWHCD) /* warehouse cd found*/
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(41);
      set PV0AM200.XWHCD[PVWLINEX] cursor, bold;
    end
  end
  ;
   /* bm inv. type can have no whse*/
  if (PV0AM200.XWHCD[PVWLINEX] != PV0AW01.XWHCD[PVWLNCK])
    if (PV0AM100.XIVCD == "BM" /* blank manufacturer*/
     && PV0AM200.XWHCD[PVWLINEX] != "  ")
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(165); /* no whse code allowed*/
      set PV0AM200.XWHCD[PVWLINEX] cursor, bold;
    end
  end
  ;
  set SQLCA empty;
     /* check for valid style and color*/
  ;
  if (PV0AM200.SY1STNBR[PVWLINEX] != PV0AW01.SY1STNBR[PVWLNCK]
   || PV0AM200.SY2CLRID[PVWLINEX] != PV0AW01.SY2CLRID[PVWLNCK])
    SY2REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
    SY2REC.SY2CLRID = PV0AM200.SY2CLRID[PVWLINEX];
    SY2REC.XDMCD = PV0AM200.XDMCD[PVWLINEX];
    SY2REC.XGPCD = PV0AM100.XGPCD; /* from header*/
    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* success*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* style/color not found*/
        set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
        set PV0AM200.SY2CLRID[PVWLINEX] bold;
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(45);
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(44);
        else /* fatal db2 error*/
          TA1REC.TA1LOCAT[1] = "PV0A245";
          TA1REC.TA1TBLVU = "VCOLOR01";
          TA1REC.TA1DBASE = "DPROD";
          TA1REC.TA1TBLKE = SY2REC.SY2KEY;
          PV0AS99();
        end
      end
    end
  end
  ;
  ;
     /* check for valid size range*/
  ;
  if (PV0AM200.PVBBSZDS[PVWLINEX] != PV0AW01.PVBBSZDS[PVWLNCK]
   || PV0AM200.PVBESZDS[PVWLINEX] != PV0AW01.PVBESZDS[PVWLNCK]
   || PV0AM200.XUMCD[PVWLINEX] != PV0AW01.XUMCD[PVWLNCK])
    SY1REC.XGPCD = PV0AM100.XGPCD;
    SY1REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* success*/
      if (PV0AM200.XUMCD[PVWLINEX] != SY1REC.XUMCD)
        set PV0AM200.XUMCD[PVWLINEX] cursor, bold;
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(164); /* uom not equal to product uom*/
      end
      PV0A260(); /* vscale table lookup*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* style not found*/
        set PV0AM200.SY2CLRID[PVWLINEX] cursor, bold;
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(148);
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(44);
        else /* fatal db2 error*/
          TA1REC.TA1LOCAT[1] = "PVOA245";
          TA1REC.TA1TBLVU = "VSTYLE01";
          TA1REC.TA1DBASE = "DPROD";
          TA1REC.TA1TBLKE = SY1REC.SY1KEY;
          PV0AS99();
        end
      end
    end
  end
  ;
  ;
  set SQLCA empty;
   /* ******************/
   /* Validate PO Item*/
   /* ******************/
  ;
  if (PV0AM200.PVBPONBR[PVWLINEX] != PV0AW01.PC3PONBR[PVWLNCK]
   || PV0AM200.PC2CUXID[PVWLINEX] != PV0AW01.PC2CUXID[PVWLNCK]
   || PV0AM200.PVBPONBR[PVWLINEX] != PV0AW01.PC3PONBR[PVWLNCK]
   || PV0AM200.SY1STNBR[PVWLINEX] != PV0AW01.SY1STNBR[PVWLNCK]
   || PV0AM200.SY2CLRID[PVWLINEX] != PV0AW01.SY2CLRID[PVWLNCK]
   || PV0AM200.XDMCD[PVWLINEX] != PV0AW01.XDMCD[PVWLNCK]
   || PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PVWLNCK]
   || PV0AM200.XWHCD[PVWLINEX] != PV0AW01.XWHCD[PVWLNCK])
    PC6REC.PC6STAT = PV0AM100.XIPCD; /* move key*/
    PC6REC.XGPCD = PV0AM100.XGPCD;
    PC6REC.PC2CUXID = PV0AM200.PC2CUXID[PVWLINEX];
    PC6REC.PC3PONBR = PV0AM200.PVBPONBR[PVWLINEX];
    PC6REC.SY1STNBR = PV0AM200.SY1STNBR[PVWLINEX];
    PC6REC.SY2CLRID = PV0AM200.SY2CLRID[PVWLINEX];
    PC6REC.XDMCD = PV0AM200.XDMCD[PVWLINEX];
    PC6REC.XQACD = PV0AM200.XQACD[PVWLINEX];
    PC6REC.XWHCD = PV0AM200.XWHCD[PVWLINEX];
    PV0A247(); /* region code lookup*/
    ;
    call "IO3310" ("SC", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* call po item*/
    if (SQLCA.VAGen_SQLCODE == 0 /* success*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple items okay*/
      PV0AW01.YMTCD[PVWLNCK] = PC6REC.YMTCD; /* mode of trans*/
      PV0AW01.XDSCD[PVWLNCK] = PC6REC.XDSCD; /* dir ship ind*/
      PV0AM100.PC6XCTCD = PC6REC.PC6XCTCD; /* country code*/
      PVAREC.PC6XCTCD = PC6REC.PC6XCTCD;
      PV0AM100.FY1FCTYC = PC6REC.FY1FCTYC; /* factory code*/
      PVBREC.FY1FCTYC = PC6REC.FY1FCTYC;
      PV0AW01.PV0AWPAF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* invalid po item*/
        PV0A251(); /* if qual eq 02 try again*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(44);
        else /* fatal db2 error*/
          TA1REC.TA1LOCAT[1] = "PVOA250";
          TA1REC.TA1TBLVU = "VPOITM01";
          TA1REC.TA1DBASE = "DPRODC";
          TA1REC.TA1TBLKE = PC6REC.PC6KEY;
          PV0AS99();
        end
      end
    end
  end
  ;
   /* ******************************************/
   /* CUSTOMER XREF IS NEEDED IF ISEGS ARE USED*/
   /* ******************************************/
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] == "000"
   && PV0AM200.PC2CUXID[PVWLINEX] != "  ")
    set PV0AM200.PC2CUXID[PVWLINEX] bold;
    set PV0AM200.PC2INSEG[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(158);
  end
  ;
  if (PV0AM200.PC2INSEG[PVWLINEX] != "000"
   && PV0AM200.PC2CUXID[PVWLINEX] == "  ")
    set PV0AM200.PC2CUXID[PVWLINEX] bold;
    set PV0AM200.PC2INSEG[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(159);
  end
  ;
  ;
  ;
  set SQLCA empty;
   /* **********************/
   /* VALIDATE CUSTOMER XREF*/
   /* **********************/
  ;
  if (PV0AM200.PC2CUXID[PVWLINEX] != PV0AW01.PC2CUXID[PVWLNCK])
    PC2REC.PC2CUXID = PV0AM200.PC2CUXID[PVWLINEX]; /* move key*/
    PC2REC.XGPCD = PV0AM100.XGPCD;
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* XREF*/
    if (SQLCA.VAGen_SQLCODE == 0) /* success*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* invalid inv seg*/
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(20);
        set PV0AM200.PC2CUXID[PVWLINEX] cursor, bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(44);
        else /* fatal db2 error*/
          TA1REC.TA1LOCAT[1] = "PVOA250";
          TA1REC.TA1TBLVU = "VPRDCU01";
          TA1REC.TA1DBASE = "DPRODC";
          TA1REC.TA1TBLKE = PC2REC.PC2KEY;
          PV0AS99();
        end
      end
    end
  end
  ;
  ;
  set SQLCA empty;
   /* *******************************************/
   /* Validate Season Year And Code Using PO HDR*/
   /* *******************************************/
  ;
  PC3REC.XGPCD = PV0AM100.XGPCD;
  PC3REC.PC3PONBR = PV0AM200.PVBPONBR[PVWLINEX];
  ;
  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes}; /* call po hdr*/
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
    if (PV0AM200.XSECD[PVWLINEX] in XSETBL.XSECD /* valid season*/
     && PV0AM200.PCFSEYR[PVWLINEX] > 1987        /* valid year*/
     && PV0AM200.PCFSEYR[PVWLINEX] < 2010)      
     /* next sentence*/
    else
      PV0AW01.XSECD[PVWLNCK] = PC3REC.XSECD; /* sesn code*/
      PV0AM200.XSECD[PVWLINEX] = PC3REC.XSECD;
      PV0AW01.PCFSEYR[PVWLNCK] = PC3REC.PCFSEYR; /* sesn yr*/
      PV0AM200.PCFSEYR[PVWLINEX] = PC3REC.PCFSEYR;
    end
    PV0AS15(); /* Set Sample Flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* invalid po item*/
      set PV0AM200.PVBPONBR[PVWLINEX] cursor, bold;
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y"; /* error*/
      converseLib.validationFailed(147);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA250";
        TA1REC.TA1TBLVU = "VPOHDR01";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLKE = PC3REC.PC3KEY;
        PV0AS99();
      end
    end
  end
  ;
   /* see if over and short conditions have been met*/
  if (PV0AW02.PV0AWOSF == "Y")
    if (PV0AM200.PVBLNQTY[PVWLINEX] < PV0AW01.PVBLNQTY[PVWLNCK])
      PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PVWLNCK];
      set PV0AM200.PVBLNQTY[PVWLINEX] cursor, bold;
      PVWREC.PVWERRF = "Y";
      converseLib.validationFailed(162); /* line qty cannot be reduced--> o/s*/
    else
      if (PV0AM200.PVBLNQTY[PVWLINEX] > PV0AW01.PVBLNQTY[PVWLNCK])
        PV0AW03.PV0AWOST = 0;
        PV0AW03.PV0AWOS1 = PV0AM200.PVBLNQTY[PVWLINEX];
        PV0AW03.PV0AWOS2 = PV0AW01.PVBLNQTY[PVWLNCK];
        PV0AW03.PV0AWOS3 = PV0AW01.PCMOSQTY[PVWLNCK];
        PV0AW03.PV0AWOST = PV0AW03.PV0AWOS1 - PV0AW03.PV0AWOS2;
        PV0AW01.PCMOSQTY[PVWLNCK] = PV0AW03.PV0AWOS3 + PV0AW03.PV0AWOST;
      end
    end
  else
    if (PV0AM200.PVBLNQTY[PVWLINEX] != PV0AW01.PVBLNQTY[PVWLNCK])
      PV0AW01.PCMOSQTY[PVWLNCK] = PV0AM200.PVBLNQTY[PVWLINEX];
    end
  end
  ;
   /* calculate line tot using unit price and line qty*/
  if (PV0AM200.PVBLNQTY[PVWLINEX] != PV0AW01.PVBLNQTY[PVWLNCK]
   || PV0AM200.PVBLNFOB[PVWLINEX] != PV0AW01.PVBLNFOB[PVWLNCK]
   || PV0AM200.PVBLNAMT[PVWLINEX] != PV0AW01.PVBLNAMT[PVWLNCK])
    PV0AW01.PVBLNQTY[PVWLNCK] = PV0AM200.PVBLNQTY[PVWLINEX];
    PV0AW02.PV0AWMT = 0;
    PV0AW02.PV0AWMT = PV0AM200.PVBLNFOB[PVWLINEX];
    PV0AW02.PV0AWMT = PV0AW02.PV0AWMT * PV0AM200.PVBLNQTY[PVWLINEX];
    PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW02.PV0AWMT;
  end
  ;
  if (PVWREC.PVWERRF != "Y")
    PV0A249(); /* blnk style lookup*/
  end
  ;
   /* mark load error flag*/
  if (PV0AW02.PV0AWEDF == "Y")
    PV0AW01.PV0AWLEF[PVWLNCK] = "Y";
  else
    PV0AW01.PV0AWLEF[PVWLNCK] = "N";
    if (PV0AW01.PCFSEYR[PVWLNCK] < 0)
      PV0AW01.PCFSEYR[PVWLNCK] = PV0AW01.PCFSEYR[PVWLNCK] * -1;
    end
  end
  ;
   /* set quality code back*/
  PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PVWLNCK];
  ;
  PV0AS60();
  PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1; /* set counters down by one*/
  PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1; /* set counters down by one*/
  PV0AW01.PV0AWLIM = PV0AW01.PV0AWLIM + 1;
end // end PV0A250

// Vpoitm01 Lookup
Function PV0A251()
  ;
  ;
  set SQLCA empty;
   /* ******************/
   /* Validate PO Item*/
   /* ******************/
  ;
   /* If Quality Code is '02'or '03' And the Po Item is not*/
   /* found we will move '01' to the Po Item key and*/
   /* do another lookup... THIS WILL not effect the*/
   /* value of Quality Code...ie it will remain '02'*/
  ;
  if (PV0AM200.XQACD[PVWLINEX] == "02"
   || PV0AM200.XQACD[PVWLINEX] == "03")
    PC6REC.XQACD = "01";
    call "IO3310" ("SC", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* call po item*/
    if (SQLCA.VAGen_SQLCODE == 0 /* success*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple items okay*/
      PV0AW01.YMTCD[PVWLNCK] = PC6REC.YMTCD; /* mode of trans*/
      PV0AW01.XDSCD[PVWLNCK] = PC6REC.XDSCD; /* dir ship*/
      PVAREC.PC6XCTCD = PC6REC.PC6XCTCD; /* country code*/
      PV0AM100.PC6XCTCD = PC6REC.PC6XCTCD;
      PVBREC.FY1FCTYC = PC6REC.FY1FCTYC; /* factory code*/
      PV0AM100.FY1FCTYC = PC6REC.FY1FCTYC;
      PV0AW01.PV0AWPAF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* invalid po item*/
        set PV0AM200.PVBPONBR[PVWLINEX] bold;
        set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
        set PV0AM200.SY2CLRID[PVWLINEX] bold;
        set PV0AM200.PC2CUXID[PVWLINEX] bold;
        set PV0AM200.XDMCD[PVWLINEX] bold;
        set PV0AM200.XQACD[PVWLINEX] bold;
        set PV0AM200.XWHCD[PVWLINEX] bold;
        PVWREC.PVWERRF = "Y";
        PV0AW02.PV0AWEDF = "Y"; /* error*/
        converseLib.validationFailed(90);
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
          PVWREC.PVWERRF = "Y";
          converseLib.validationFailed(44);
        else /* fatal db2 error*/
          TA1REC.TA1LOCAT[1] = "PVOA251";
          TA1REC.TA1TBLVU = "VPOITM01";
          TA1REC.TA1DBASE = "DPRODC";
          TA1REC.TA1TBLKE = PC6REC.PC6KEY;
          PV0AS99();
        end
      end
    end
  else
    set PV0AM200.PVBPONBR[PVWLINEX] bold;
    set PV0AM200.SY1STNBR[PVWLINEX] cursor, bold;
    set PV0AM200.SY2CLRID[PVWLINEX] bold;
    set PV0AM200.PC2CUXID[PVWLINEX] bold;
    set PV0AM200.XDMCD[PVWLINEX] bold;
    set PV0AM200.XQACD[PVWLINEX] bold;
    set PV0AM200.XWHCD[PVWLINEX] bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y"; /* error*/
    converseLib.validationFailed(90);
  end
  ;
  ;
end // end PV0A251

// Vscale Lookup of Size Ranges
Function PV0A260()
  ;
   /* *************************/
   /* Vscale Lookup of Ranges*/
   /* *************************/
  ;
  ;
     /* check for valid size range*/
  ;
  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL; /* key*/
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* success*/
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* size*/
      PVWREC.PVWERRF = "Y";
      PV0AW02.PV0AWEDF = "Y";
      converseLib.validationFailed(47);
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* time stamp error*/
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
        return;
      else /* fatal db2 error*/
        TA1REC.TA1LOCAT[1] = "PVOA260";
        TA1REC.TA1TBLVU = "VSCALE01";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
        PV0AS99();
        return;
      end
    end
  end
  ;
   /* use vscale to see if sizes are within proper range*/
  ;
   /* validate low range*/
  PV0AW02.PV0AWSIX = 1; /* size desc. index*/
  PV0AW02.PV0AWSZF = "N"; /* size found flag*/
  if (PV0AM200.PVBBSZDS[PVWLINEX] == "  " /* beg size field left blank*/
   && SY4REC.SY4IDDSC[PV0AWSIX] != "  ")  /* error*/
    PV0AW02.PV0AWSIX = 41;
  end
  while (PV0AW02.PV0AWSZF == "N"
   && PV0AW02.PV0AWSIX < 41)
    if (PV0AM200.PVBBSZDS[PVWLINEX] == SY4REC.SY4IDDSC[PV0AWSIX])
      PV0AW02.PV0AWSZF = "Y";
      PV0AW01.PVBBSZNK[PVWLNCK] = PV0AW02.PV0AWSIX;
    else
      PV0AW02.PV0AWSIX = PV0AW02.PV0AWSIX + 1;
    end
  end
  ;
    /* validate high range*/
  if (PV0AW02.PV0AWSZF == "Y") /* low value found*/
    while (PV0AW02.PV0AWSIX < 41 /* max size range*/
     && PV0AW02.PV0AWSZF == "Y")
      if (PV0AM200.PVBESZDS[PVWLINEX] == SY4REC.SY4IDDSC[PV0AWSIX])
        PV0AW01.PVBESZNK[PVWLNCK] = PV0AW02.PV0AWSIX;
        PV0AW02.PV0AWSZF = "B"; /* both ranges okay*/
      else
        PV0AW02.PV0AWSIX = PV0AW02.PV0AWSIX + 1;
      end
    end
  end
  ;
  if (PV0AW02.PV0AWSIX == 41) /* size not found*/
    converseLib.validationFailed(48);
    set PV0AM200.PVBBSZDS[PVWLINEX] cursor, bold;
    set PV0AM200.PVBESZDS[PVWLINEX] bold;
    PVWREC.PVWERRF = "Y";
    PV0AW02.PV0AWEDF = "Y";
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end PV0A260

// Determine Next Action
Function PV0A280()
  ;
   /* ************************/
   /* Determine Next Action*/
   /* ************************/
  ;
  ;
   /* ***********************************************/
   /* check update flag*/
   /* if any changes to line items have been made*/
   /* or defaults present user will receive message*/
   /* ***********************************************/
  if (PV0AW01.PV0AWUP2 != "Y" /* first time through this routine*/
   && PV0AW01.PV0AWUPF == "Y") /* modification made to screen*/
    if (converseVar.eventKey is pf3
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16)
      /* next sentence*/
    else
      PV0AW01.PV0AWUP2 = "Y"; /* make pf2 update possible*/
      converseLib.validationFailed(127);
      PV0AW01.PV0AWUPF = "N"; /* mark flag*/
      return;
    end
  end
  ;
  ;
   /* ***********************************/
    /* program has passed all checks*/
    /* now we have to process by pf key*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    converseLib.validationFailed(52); /* use pf keys to further process*/
  else
    if (converseVar.eventKey is pf2) /* update line items*/
      PV0A282(); /* move current screen to ws*/
      PV0A283(); /* qty fob and duty totals check*/
      if (PV0AW01.PV0AWUP3 == "Y") /* fob qty or duties do not match*/
        return; /* error return w/message*/
      end
      if (PV0AW01.PV0AWUP2 == "Y") /* update is valid*/
        if (PV0AW01.PV0AWADD == "Y")
          PV0A285(); /* add to line item*/
        else
          PV0A287(); /* update line item*/
        end
      else
        converseLib.validationFailed(53); /* fields must be changed for an update*/
      end
    else
      if (converseVar.eventKey is pf7) /* scroll up*/
        PV0AS70();
      else
        if (converseVar.eventKey is pf8) /* scroll down*/
          PV0AS75();
        else
          if (converseVar.eventKey is pf13) /* send to match*/
            if (PVWREC.PVWERRF == "N")
              if (PV0AM100.XIPCD == "UM")
                PV0A350(); /* call pv5000*/
              else
                converseLib.validationFailed(10); /* invalid status*/
              end
            end
          else
            if (converseVar.eventKey is pf14) /* send to code*/
              if (PVWREC.PVWERRF == "N")
                if (PV0AM100.XIPCD == "IC"
                 || PV0AM100.XIPCD == "MT")
                  PV0A353(); /* call pv6000*/
                else
                  converseLib.validationFailed(125); /* invalid status*/
                end
              end
            else
              if (converseVar.eventKey is pf15) /* repeat item*/
                PV0A295();
              else
                if (converseVar.eventKey is pf16) /* nissho b-grade fix*/
                  PV0A370();
                else
                  if (converseVar.eventKey is pf3) /* exit to header*/
                    PV0AW02.PV0AWBLD = "Y"; /* save screen info*/
                    PVWREC.PVWBLDSC = "N";
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end PV0A280

// move current screen into ws
Function PV0A282()
   /* *****************************************/
   /* MOVE CURRENT SCREEN INTO WOKING STORAGE*/
   /* *****************************************/
  ;
  ;
  PVWREC.PVWLINEX = 0;
  while (PVWREC.PVWLINEX < 7)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    PV0AW01.PC3PONBR[PV0AW1ST] = PV0AM200.PVBPONBR[PVWLINEX];
    PV0AW01.SY1STNBR[PV0AW1ST] = PV0AM200.SY1STNBR[PVWLINEX];
    PV0AW01.SY2CLRID[PV0AW1ST] = PV0AM200.SY2CLRID[PVWLINEX];
    PV0AW01.PVBLNQTY[PV0AW1ST] = PV0AM200.PVBLNQTY[PVWLINEX];
    PV0AW01.PVBLNCOM[PV0AW1ST] = PV0AM200.PVBLNCOM[PVWLINEX];
    PV0AW01.PVBLNFOB[PV0AW1ST] = PV0AM200.PVBLNFOB[PVWLINEX];
    PV0AW01.PVBLNDTY[PV0AW1ST] = PV0AM200.PVBLNDTY[PVWLINEX];
    PV0AW01.XUMCD[PV0AW1ST] = PV0AM200.XUMCD[PVWLINEX];
    PV0AW01.XQACD[PV0AW1ST] = PV0AM200.XQACD[PVWLINEX];
    PV0AW01.XDMCD[PV0AW1ST] = PV0AM200.XDMCD[PVWLINEX];
    PV0AW01.PC2CUXID[PV0AW1ST] = PV0AM200.PC2CUXID[PVWLINEX];
    PV0AW01.PC2INSEG[PV0AW1ST] = PV0AM200.PC2INSEG[PVWLINEX];
    PV0AW01.XPGCD[PV0AW1ST] = PV0AM200.XPGCD[PVWLINEX];
    PV0AW01.XWHCD[PV0AW1ST] = PV0AM200.XWHCD[PVWLINEX];
    PV0AW01.XSECD[PV0AW1ST] = PV0AM200.XSECD[PVWLINEX];
    PV0AW01.PCFSEYR[PV0AW1ST] = PV0AM200.PCFSEYR[PVWLINEX];
    PV0AW01.PVBCONTN[PV0AW1ST] = PV0AM200.PVBCONTN[PVWLINEX];
    PV0AW01.PVBBSZDS[PV0AW1ST] = PV0AM200.PVBBSZDS[PVWLINEX];
    PV0AW01.PVBESZDS[PV0AW1ST] = PV0AM200.PVBESZDS[PVWLINEX];
    PV0AW01.PVBLNAMT[PV0AW1ST] = PV0AM200.PVBLNAMT[PVWLINEX];
  end
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* reset*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end PV0A282

// Check totals before update
Function PV0A283()
  ;
   /* **********************************************/
   /* Add line item fields together and make sure*/
   /* The line item totals equal header amount*/
   /* FOB amount, Qty, and Dty have to be equal*/
   /* **********************************************/
   /* 08-10-94 bcourt  replace constant 200 with*/
   /* pv0awmax, init in pv0as00.*/
   /* 08-19-94 bcourt  move pv0awmax from w01 to w02.*/
   /* 12-20-99 GDECKE  CHANGES FOR SISSHO CONTINGENCY*/
   /* 01-28-00 GDECKE  SHOW ERR MSG IF LINE QTY, FOB, DUTY NOT EQUAL*/
   /* HEADER QTY, FOB, DUTY.*/
   /* 08-11-00 JKUNDU  Check New freight amount before adding*/
   /* it to the total amount.*/
   /* **********************************************/
  ;
  PV0AW01.PV0AWUP3 = "N"; /* reset update flag*/
  PV0AW02.PV0AW1DA = 0; /* working storage*/
  PV0AW02.PV0AW1DB = 0; /* fields*/
  PV0AW02.PV0AW1DC = 0;
  PV0AW02.PV0AW1DD = 0;
  PV0AW02.PV0AW1DE = 0;
  ;
  PVWREC.PVWLINEX = 0; /* line item number*/
  while (PVWREC.PVWLINEX < PV0AW02.PV0AWMAX) /* max of line items*/
    PV0AW02.PV0AW1DG = 0;
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PVWREC.PVWLINEX >= PV0AW01.PV0AW1ST
     && PVWREC.PVWLINEX <= PV0AW01.PV0AWCLN)
      PV0AW02.PV0AW1DA = PV0AW02.PV0AW1DA + PV0AM200.PVBLNQTY[PVWLINEX];
      PV0AW02.PV0AW1DG = PV0AM200.PVBLNQTY[PVWLINEX];
      PV0AW02.PV0AW1DG = PV0AM200.PVBLNCOM[PVWLINEX] * PV0AW02.PV0AW1DG;
      PV0AW02.PV0AW1DB = PV0AW02.PV0AW1DB + PV0AW02.PV0AW1DG;
      PV0AW02.PV0AW1DC = PV0AW02.PV0AW1DC + PV0AM200.PVBLNFOB[PVWLINEX];
      PV0AW02.PV0AW1DD = PV0AW02.PV0AW1DD + PV0AM200.PVBLNDTY[PVWLINEX];
      PV0AW02.PV0AW1DE = PV0AW02.PV0AW1DE + PV0AM200.PVBLNAMT[PVWLINEX];
    else
      while (PVWREC.PVWLINEX < PV0AW02.PV0AWMAX) /* max of line items*/
        PV0AW02.PV0AW1DA = PV0AW02.PV0AW1DA + PV0AW01.PVBLNQTY[PVWLINEX];
        PV0AW02.PV0AW1DG = PV0AW01.PVBLNQTY[PVWLINEX];
        PV0AW02.PV0AW1DG = PV0AW01.PVBLNCOM[PVWLINEX] * PV0AW02.PV0AW1DG;
        PV0AW02.PV0AW1DB = PV0AW02.PV0AW1DB + PV0AW02.PV0AW1DG;
        PV0AW02.PV0AW1DC = PV0AW02.PV0AW1DC + PV0AW01.PVBLNFOB[PVWLINEX];
        PV0AW02.PV0AW1DD = PV0AW02.PV0AW1DD + PV0AW01.PVBLNDTY[PVWLINEX];
        PV0AW02.PV0AW1DE = PV0AW02.PV0AW1DE + PV0AW01.PVBLNAMT[PVWLINEX];
        PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
        PV0AW02.PV0AW1DG = 0;
      end
    end
  end
  ;
  ;
   /* when check is complete*/
  ;
  if (PV0AW02.PV0AW1DA != PV0AM100.PVATQTY) /* qty error*/
    if (PV0AW02.PV0AW-FIRST-TIME-QTY-MSG == "0")
      PV0AW01.PV0AWUP3 = "Y"; /* reset update flag*/
      /* for any resulting change in the invoice amount.*/
      converseLib.validationFailed(150);
      PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "1";
      return;
    else
      if (PV0AW02.PV0AW-FIRST-TIME-QTY-MSG == "1")
        PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "2";
      end
    end
  end
  ;
  ;
  if (PV0AW02.PV0AW1DE != PV0AM100.PVATFOB) /* fob error*/
    ;
    if (PV0AW02.PV0AW-FIRST-TIME-QTY-MSG == "1"
    ) /* NEXT SENTENCE*/
    else
      if (PV0AW02.PV0AW-FIRST-TIME-FOB-MSG == "0")
        PV0AW01.PV0AWUP3 = "Y"; /* reset update flag*/
        converseLib.validationFailed(151);
        PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "1";
        return;
      else
        if (PV0AW02.PV0AW-FIRST-TIME-FOB-MSG == "1")
          PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "2";
        end
      end
    end
  end
  ;
  ;
  if (PV0AW02.PV0AW1DD != PV0AM100.PVATDUTY) /* duty error*/
    ;
    if (PV0AW02.PV0AW-FIRST-TIME-QTY-MSG == "1"
     || PV0AW02.PV0AW-FIRST-TIME-FOB-MSG == "1")
      /* NEXT SENTENCE*/
    else
      if (PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG == "0")
        PV0AW01.PV0AWUP3 = "Y"; /* reset update flag*/
        converseLib.validationFailed(152);
        PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "1";
        return;
      else
        if (PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG == "1")
          PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "2";
        end
      end
    end
  end
  ;
   /* ==========================================================*/
  ;
   /* IF NO 'UNMATCHED' MESSAGES TO BE SHOWN....*/
  ;
  if (PV0AW02.PV0AW1DA != PV0AM100.PVATQTY) /* qty error*/
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
    PV0AW01.PV0AWPAF = "Y"; /* force hdr update*/
    PVAREC.PVATQTY = PV0AW02.PV0AW1DA;
    PV0AM100.PVATQTY = PV0AW02.PV0AW1DA;
    ;
  end
  ;
  ;
  if (PV0AW02.PV0AW1DE != PV0AM100.PVATFOB) /* fob error*/
    if (PV0AW02.PV0AW-DIFF-FOB-PMT-FL == " ")
      PV0AW02.PV0AW-DIFF-FOB-PMT-FL = "N";
    end
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
    PV0AW01.PV0AWPAF = "Y"; /* force hdr update*/
    PVAREC.PVATFOB = PV0AW02.PV0AW1DE;
    PV0AM100.PVATFOB = PV0AW02.PV0AW1DE;
    ;
  end
  ;
  ;
  if (PV0AW02.PV0AW1DD != PV0AM100.PVATDUTY) /* duty error*/
    if (PV0AW02.PV0AW-DIFF-DUTY-PMT-FL == " ")
      PV0AW02.PV0AW-DIFF-DUTY-PMT-FL = "N";
    end
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
    PV0AW01.PV0AWPAF = "Y"; /* force hdr update*/
    PVAREC.PVATDUTY = PV0AW02.PV0AW1DD;
    PV0AM100.PVATDUTY = PV0AW02.PV0AW1DD;
    ;
  end
  ;
  ;
  if (PV0AW02.PV0AW1DB != PVAREC.PVATCOMM) /* comm total*/
    PVAREC.PVATCOMM = PV0AW02.PV0AW1DB;
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
    PV0AW01.PV0AWPAF = "Y"; /* force hdr update*/
  end
  ;
  if (PV0AW02.PV0AW-DETAIL-UPDATED-FL == "Y")
    converseLib.validationFailed(218);
    /* add code to recompute factory invoice header invoice amount*/
    PV0AM100.PVAIVAMT = PV0AM100.PVATFOB     + PV0AM100.PVABANKC     + PVAREC.PVATCOMM     + PV0AM100.PVATDUTY     + PV0AM100.PVABRKRY     + PV0AM100.PVAOCHG1     + PV0AM100.PVAOCHG2     + PV0AM100.PVAINT1     + PV0AM100.PVAINT2     + PV0AM100.PVAINT3; /* JKUNDU Changes begin - 08/09/00*/
    /* ADD APPROPRIATE FREIGHT AMOUNT TO TOTAL*/
    /* IF PV0AM100.PV0AM-NEW-FREIGHT-AMT = 0;*/
    if (PV0AW02.PV0AM-NEW-FRIEGHT-MODIFIED == "N")
      PV0AM100.PVAIVAMT = PV0AM100.PVAIVAMT       + PV0AM100.PVATFRGT;
    else
      PV0AW02.PV0AWINV = PV0AW02.PV0AWINV       + PV0AM100.PV0AM-NEW-FREIGHT-AMT       + PV0AW02.PV0AW-DIFF-FREIGHT-AMT;
    end
    /* JKUNDU Changes end  - 08/09/00*/
    ;
    PVAREC.PVAIVAMT = PV0AM100.PVAIVAMT;
    ;
    PV0AW01.PV0AW-CHG-MSG-TITLE = "NEW HDR VALUES:";
    PV0AW01.PV0AW-CHG-MSG-QTY-DESC = " QTY=";
    PV0AW01.PV0AW-CHG-MSG-QTY-AMT = PV0AW02.PV0AW1DA;
    PV0AW01.PV0AW-CHG-MSG-FOB-DESC = " FOB=";
    PV0AW01.PV0AW-CHG-MSG-WORK = PV0AW02.PV0AW1DE;
    PV0AW01.PV0AW-CHG-MSG-WORK-CHAR2 = PV0AW01.PV0AW-CHG-MSG-WORK-CHAR1;
    if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] == "0")
      PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] = " ";
      if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] == "0")
        PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] = " ";
        if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] == "0")
          PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] = " ";
          if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] == "0")
            PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] = " ";
            if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] == "0")
              PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] = " ";
              if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] == "0")
                PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] = " ";
              end
            end
          end
        end
      end
    end
    PV0AW01.PV0AW-CHG-MSG-FOB-DLR = PV0AW01.PV0AW-CHG-MSG-WK-DLR;
    PV0AW01.PV0AW-CHG-MSG-FOB-DOT = ".";
    PV0AW01.PV0AW-CHG-MSG-FOB-CNT = PV0AW01.PV0AW-CHG-MSG-WK-CNT;
    PV0AW01.PV0AW-CHG-MSG-DUTY-DESC = " DUTY=";
    PV0AW01.PV0AW-CHG-MSG-WORK = PV0AW02.PV0AW1DD;
    PV0AW01.PV0AW-CHG-MSG-WORK-CHAR2 = PV0AW01.PV0AW-CHG-MSG-WORK-CHAR1;
    if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] == "0")
      PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] = " ";
      if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] == "0")
        PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] = " ";
        if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] == "0")
          PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] = " ";
          if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] == "0")
            PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] = " ";
            if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] == "0")
              PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] = " ";
              if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] == "0")
                PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] = " ";
              end
            end
          end
        end
      end
    end
    PV0AW01.PV0AW-CHG-MSG-DUTY-DLR = PV0AW01.PV0AW-CHG-MSG-WK-DLR;
    PV0AW01.PV0AW-CHG-MSG-DUTY-DOT = ".";
    PV0AW01.PV0AW-CHG-MSG-DUTY-CNT = PV0AW01.PV0AW-CHG-MSG-WK-CNT;
    PV0AW01.PV0AW-CHG-MSG-COMM-DESC = " COMM=";
    PV0AW01.PV0AW-CHG-MSG-WORK = PV0AW02.PV0AW1DB;
    PV0AW01.PV0AW-CHG-MSG-WORK-CHAR2 = PV0AW01.PV0AW-CHG-MSG-WORK-CHAR1;
    if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] == "0")
      PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[1] = " ";
      if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] == "0")
        PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[2] = " ";
        if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] == "0")
          PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[3] = " ";
          if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] == "0")
            PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[4] = " ";
            if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] == "0")
              PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[5] = " ";
              if (PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] == "0")
                PV0AW01.PV0AW-CHG-MSG-WK-DLR-CHAR[6] = " ";
              end
            end
          end
        end
      end
    end
    PV0AW01.PV0AW-CHG-MSG-COMM-DLR = PV0AW01.PV0AW-CHG-MSG-WK-DLR;
    PV0AW01.PV0AW-CHG-MSG-COMM-DOT = ".";
    PV0AW01.PV0AW-CHG-MSG-COMM-CNT = PV0AW01.PV0AW-CHG-MSG-WK-CNT;
    PV0AM200.XXXMSG = PV0AW01.PV0AW-CHG-MSG;
  else
    PV0AM200.XXXMSG = " ";
  end
  ;
end // end PV0A283

// Add lin items to Pvbrec
Function PV0A285()
  ;
   /* *****************************************/
   /* Pvbrec Add Line Items to pvitm01*/
   /* If Pv0awedt(pvwlinex) eq 'y' add pvbrec*/
   /* *****************************************/
   /* 08-10-94 bcourt  replace constant 200 with*/
   /* pv0awmax, init in pv0as00.*/
   /* 08-19-94 bcourt  move pv0awmax from w01 to w02.*/
   /* *****************************************/
  ;
  PV0AW01.PV0AWUP2 = "N"; /* reset update flag*/
  PVYREC.PVYGRP = "  "; /* reset add or delete flag*/
  PV0AW02.PV0AW-FAN-FIRST-TIME = "Y";
    /* for any resulting change in the invoice amount.*/
  PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
  ;
  PVWREC.PVWLINEX = 0; /* line item number*/
  while (PVWREC.PVWLINEX < PV0AW02.PV0AWMAX) /* max of line items*/
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PV0AW01.PV0AWEDT[PVWLINEX] == "Y") /* line has been modified*/
      PV0AS55(); /* load pvbrec*/
      set SQLCA empty;
      if (PV0AW01.PV0AWMKF[PVWLINEX] == "D") /* delete*/
        PVYREC.PVYFNC = "D "; /* delete flag*/
      else
        PVYREC.PVYFNC = "A "; /* add flag*/
        PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
        ;
        /* ADD SPECIAL PROCESSING TO GET FAN CODE FOR HEADER ON THE FIRST*/
        /* LINE ITEM THAT NEEDS TO BE ADDED.*/
        if (PV0AW02.PV0AW-FAN-FIRST-TIME == "Y")
          PV0AW02.PV0AW-FAN-FIRST-TIME = "N";
          ;
          if (PV0AW01.PV0AWPAF == "Y") /* hdr needs to be updated*/
            ;
            /* GET 'FAN CODE' - PVAACRSP - PV-IVC-ACCT-RSPIND*/
            /* FROM SUBROUTINE PV4050 - MOVE VALUE TO MAP PV0AM100*/
            /*  */
            PV0A-GET-FAN-CODE();
            if (PVWREC.PVWERRF == "Y")
              return;
            end
            ;
            PVAREC.PVAACRSP = PV0AM100.PVAACRSP;
            ;
          end
        end
        ;
        call "IO5670" (PVYREC, SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /**/
        ;
            /* the user might attempt to make additional changes to line*/
            /* item detail while the program is still in 'ADD' mode. To*/
            /* prevent a -803 (unique key error) abend this code will try*/
            /* to do an update instead.*/
        if (SQLCA.VAGen_SQLCODE == -803) /* duplicate row*/
          PVYREC.PVYFNC = "U "; /* update flag*/
          ;
          call "IO5670" (PVYREC, SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /**/
        end
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          /* NEXT SENTENCE*/
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
            set PV0AW01 empty; /* clear working storage*/
            set PVAREC empty;
            set PVAREC empty;
            converseLib.validationFailed(44);
            return;
          else
            TA1REC.TA1LOCAT[1] = "PV0A285";
            TA1REC.TA1LOCAT[2] = "ADD DB2 PVITM01";
            TA1REC.TA1TBLVU = "VPVITM01";
            TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
            PV0AS97();
            PVWREC.PVWERRF = "Y";
            return;
          end
        end
      end
    end
  end
  ;
  ;
  ;
   /* when update complete*/
  ;
  if (PV0AW01.PV0AWPAF == "Y") /* hdr needs to be updated*/
    ;
    /* GET 'FAN CODE' - PVAACRSP - PV-IVC-ACCT-RSPIND*/
    /* FROM SUBROUTINE PV4050 - MOVE VALUE TO MAP PV0AM100*/
     /*  */
    PV0A611();
    if (PVWREC.PVWERRF == "Y")
      return;
    end
    ;
    PVAREC.PVAACRSP = PV0AM100.PVAACRSP;
    ;
    PV0A655(); /* hdr update routine*/
    converseLib.validationFailed(54);
    PV0AW01.PV0AWPAF = "N"; /* reset flag*/
  else
    converseLib.validationFailed(55);
  end
  ;
  PVWREC.PVWBLDSC = "N"; /* back to pv0am100;*/
  ;
  ;
end // end PV0A285

// Update Pvbrec
Function PV0A287()
    /* PV0A287 - UPDATE LINE ITME - PVBREC*/
   /* **********************************************/
   /* Pvbrec Update*/
   /* If Pv0awedt(pvwlinex) eq 'y' update pvbrec*/
   /* **********************************************/
   /* 08-10-94 bcourt  replace constant 200 with*/
   /* pv0awmax, init in pv0as00.*/
   /* 08-19-94 bcourt  move pv0awmax from w01 to w02.*/
   /* 09-28-94 BCourt  Add comments about pcmosqty.*/
   /* 01-31-00 GDECKE  NISSHO CONTINGENCY - SET STATUS CHANGE FLAG*/
   /* **********************************************/
  ;
  PV0AW01.PV0AWUP2 = "N"; /* reset update flag*/
  PV0AW02.PV0AW-FAN-FIRST-TIME = "Y";
    /* for any resulting change in the invoice amount.*/
  PV0AW02.PV0AW-DETAIL-UPDATED-FL = "Y";
  ;
  PVWREC.PVWLINEX = 0; /* line item number*/
  while (PVWREC.PVWLINEX < PV0AW02.PV0AWMAX /* max of line items*/
   && PV0AW01.PV0AWUP2 == "N") /* redisplay error flag*/
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PV0AW01.PV0AWLEF[PVWLINEX] == "Y" /* load error*/
     && PV0AW01.PV0AWBGD != "Y")          /* bgrades can pass with an error*/
      PV0A290(); /* check conditions*/
    else
      if (PV0AW01.PV0AWEDT[PVWLINEX] == "Y") /* has line been modified*/
        PV0AS59(); /* load pvbrec for update*/
        PVYREC.PVYGRP = "  ";
        if (PV0AW01.PV0AWMKF[PVWLINEX] == "Y") /* was not added to screen*/
          PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
          PVYREC.PVYFNC = "U "; /* update*/
        else
          if (PV0AW01.PV0AWMKF[PVWLINEX] == "D") /* was erased from screen*/
            PVYREC.PVYFNC = "D "; /* delete*/
          else
            PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
            PVYREC.PVYFNC = "A "; /* add*/
            /* 9-28-94 BCourt Add should never occur in 287, but in 285*/
                                  /* thus following is OK even though*/
                                   /* pcmosqty set = 0 in s59 above.*/
            PVBREC.PCMOSQTY = PV0AW01.PVBLNQTY[PVWLINEX];
            PV0AW01.PCMOSQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PVWLINEX];
            PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
          end
        end
        ;
        /* ADD SPECIAL PROCESSING TO GET FAN CODE FOR HEADER ON THE FIRST*/
        /* LINE ITEM THAT NEEDS TO BE ADDED.*/
        if (PVYREC.PVYFNC == "U "
         || PVYREC.PVYFNC == "A ")
          if (PV0AW02.PV0AW-FAN-FIRST-TIME == "Y")
            PV0AW02.PV0AW-FAN-FIRST-TIME = "N";
            ;
            if (PV0AW01.PV0AWPAF == "Y") /* hdr needs to be updated*/
              ;
              /* GET 'FAN CODE' - PVAACRSP - PV-IVC-ACCT-RSPIND*/
              /* FROM SUBROUTINE PV4050 - MOVE VALUE TO MAP PV0AM100*/
              /*  */
              PV0A-GET-FAN-CODE();
              if (PVWREC.PVWERRF == "Y")
                return;
              end
              ;
              PVAREC.PVAACRSP = PV0AM100.PVAACRSP;
              ;
            end
          end
        end
        ;
        set SQLCA empty;
        call "IO5670" (PVYREC, SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* update pvbrec*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          /* NEXT SENTENCE*/
        else
          if (SQLCA.VAGen_SQLCODE == 100 /* row not found*/
           && PVYREC.PVYFNC == "D ")     /* delete*/
            /* NEXT SENTENCE*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
              set PV0AW01 empty; /* clear working storage*/
              set PVAREC empty;
              set PVBREC empty;
              converseLib.validationFailed(44);
              return;
            else
              TA1REC.TA1LOCAT[1] = "PV0A287";
              TA1REC.TA1LOCAT[2] = "UPDATE DB2 PVITM01";
              TA1REC.TA1TBLVU = "VPVITM01";
              TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
              PV0AS97();
              PVWREC.PVWERRF = "Y";
              return;
            end
          end
        end
      end
    end
  end
  ;
  ;
   /* **************************************************/
   /* If there are no errors in the line items and the*/
   /* status was 'np'; it will be changed to 'um'*/
   /* **************************************************/
  ;
  PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "N";
  if (PV0AW01.PV0AWUP2 == "N") /* no errors on line items*/
    if (PVAREC.XIPCD == "NP" /* np status*/
     && PV0AW01.PV0AWBGD != "Y") /* bgrades can pass with an error*/
      if (PVUREC.PVUCHOIC == 9)
        if (PVAREC.XIPCD != "IP")
          PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "Y";
        else
          PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "N";
        end
        PVAREC.XIPCD = "IP"; /* change status to IP*/
        PV0AM100.XIPCD = "IP"; /* change status to IP*/
      else
        if (PVAREC.XIPCD != "UM")
          PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "Y";
        else
          PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "N";
        end
        PVAREC.XIPCD = "UM"; /* change status to um*/
        PV0AM100.XIPCD = "UM"; /* change status to um*/
      end
      PV0AW01.PV0AWPAF = "Y"; /* ensure header update*/
      PVWREC.PVWBLDSC = "N"; /* back to pv0am100;*/
    end
  else
    if (PVAREC.XIPCD == "UM") /* np status*/
      if (PVAREC.XIPCD != "NP")
        PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "Y";
      else
        PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "N";
      end
      PVAREC.XIPCD = "NP"; /* change status to um*/
      PV0AM100.XIPCD = "NP"; /* change status to um*/
      PV0AW01.PV0AWPAF = "Y"; /* ensure header update*/
    end
  end
  ;
   /* ************************************/
   /* Update the header screen if needed*/
   /* ************************************/
  ;
  if (PV0AW01.PV0AWPAF == "Y") /* hdr needs to be updated*/
    PV0A657(); /* hdr update routine*/
    PV0AW01.PV0AWPAF = "N"; /* reset flag*/
  else
    if (PV0AW01.PV0AWUP2 == "N") /* no errors on line items*/
      converseLib.validationFailed(55);
    end
  end
  ;
  if (PV0AW01.PV0AWUP2 == "N") /* no errors on line items*/
    PVWREC.PVWBLDSC = "N"; /* back to pv0am100;*/
  end
  ;
end // end PV0A287

// Load Error Routine
Function PV0A290()
  ;
   /* *****************************************************/
   /* Load Error Routine*/
   /* We will need we need to stop the update and display*/
   /* *****************************************************/
  ;
  ;
  PV0AW01.PV0AWUP2 = "Y"; /* redisplay error flag*/
  ;
   /* set load flag in pvbrec*/
  if (PV0AW01.PCFSEYR[PVWLINEX] == 0)
    PVBREC.PCFSEYR = -9999;
  else
    PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
    PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
    PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
  end
  PVYREC.PVYGRP = "  ";
  if (PV0AW01.PV0AWMKF[PVWLINEX] == "Y") /* was not added to screen*/
    PVYREC.PVYFNC = "U "; /* update*/
    PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
    PVBREC.PCMOSQTY = PV0AW01.PCMOSQTY[PVWLINEX];
    PVBREC.ZZZSDT = PV0AW01.ZZZSDT[PVWLINEX];
  else
    if (PV0AW01.PV0AWMKF[PVWLINEX] == "D") /* was erased from screen*/
      PVYREC.PVYFNC = "D "; /* delete*/
    else
      PVYREC.PVYFNC = "A "; /* add*/
      PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
      PVBREC.PCMOSQTY = PV0AW01.PVBLNQTY[PVWLINEX];
      PVBREC.ZZZSDT = TA2REC.TA2GRGGN; /* set up date*/
    end
  end
  ;
  PV0AS56(); /* load pvbrec for update with error*/
  set SQLCA empty;
  call "IO5670" (PVYREC, SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* update pvbrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A295";
      TA1REC.TA1LOCAT[2] = "UPDATE DB2 PVITM01";
      TA1REC.TA1TBLVU = "VPVITM01";
      TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
   /* **********************************************/
   /* The line with the error has been updated. All*/
   /* line items below this one will not be updated*/
   /* **********************************************/
  ;
  ;
  PV0AS57(); /* display errors*/
  PVWREC.PVWLINEX = 0;
  PV0AS54(); /* load screen*/
  converseLib.validationFailed(153); /* error*/
  return;
  ;
  ;
  ;
  ;
end // end PV0A290

// Repeat Line Item  pf15
Function PV0A295()
  ;
   /* ******************************/
   /* Pf15 Repeat Last Item Shown*/
   /* ******************************/
  ;
  if (PVWREC.PVWUPDTF == "N" /* conditions where a pf15 is invalid*/
   || PV0AM100.XIPCD == "MT" 
   || PV0AM100.XIPCD == "IC" 
   || PV0AM100.XIPCD == "CP" 
   || PV0AM100.XIPCD == "EX")
    converseLib.validationFailed(154);
    return;
  end
  ;
  ;
   /* check to ensure add is within range*/
  PVWREC.PVWLINEX = 7; /* initialize*/
  PVWREC.PVWLNCK = PV0AW01.PV0AWCLN;
  ;
  if (PV0AW01.PV0AWCLN < PV0AW01.PV0AWLIN) /* line item not w/in range*/
    converseLib.validationFailed(155);
    return;
  else
    if (PV0AW01.PV0AWCLN == PV0AW01.PV0AWLIN) /* screen full set new screen*/
      PV0AS75(); /* load new screen*/
      PV0AS78(); /* put last line item on new screen*/
      return;
    end
  end
  ;
  PV0AW02.PV0AWLLF = "N"; /* initialize*/
  while (PV0AW02.PV0AWLLF == "N" /* last line item found flag*/
   && PVWREC.PVWLINEX != 0) /* last line on screen*/
    PV0AS80(); /* look for last line item*/
  end
  ;
   /* check to see if item found*/
  if (PV0AW02.PV0AWLLF == "N") /* error*/
    converseLib.validationFailed(57); /* no line items present*/
    return;
  end
  ;
  ;
   /* copy last data item*/
  if (PV0AW01.PV0AWLEF[PVWLNCK] == "Y") /* load error*/
    PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
    PV0AW01.PV0AWLEF[PVWLNCK] = "Y";
  else
    PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
  end
  PV0AW02.PV0AWID2 = PVWREC.PVWLINEX + 1;
  PV0AS85(); /* load screen*/
  ;
   /* add 1 to total line items and mark field changed*/
  PV0AW01.PV0AWLIN = PV0AW01.PV0AWLIN + 1;
  PV0AW01.PV0AWUPF = "Y"; /* screen updated*/
  ;
  ;
end // end PV0A295

// Send Invoice to Match
Function PV0A350()
  ;
   /* ******************************/
   /* Invoice sent to Match*/
   /* ******************************/
  ;
  set SQLCA empty;
  ;
  PVWREC.PVWBLDSC = "N";
  PVZREC.PVOVENDR = PVAREC.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PVAREC.PVOVENDG;
  PVZREC.PVAIVCID = PVAREC.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  call "PV5000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0b*/
  ;
  if (PVZREC.PVZMCHER == "1") /* successful match*/
    call "PV6000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0c*/
    if (PVZREC.PVZCODER == "1") /* successful code*/
      converseLib.validationFailed(22);
      PVAREC.XIPCD = "CP";
    else
      if (PVZREC.PVZCODER == "2") /* coding error*/
        converseLib.validationFailed(23);
        PVAREC.XIPCD = "IC";
      else
        if (PVZREC.PVZCODER == "4") /* coding error*/
          converseLib.validationFailed(24);
          PVAREC.XIPCD = "IC";
        else
          converseLib.validationFailed(26);
        end
      end
    end
  else
    if (PVZREC.PVZMCHER == "2") /* match error*/
      converseLib.validationFailed(25);
    else
      converseLib.validationFailed(27);
    end
  end
  ;
end // end PV0A350

// Send Invoice to Code
Function PV0A353()
  ;
   /* ******************************/
   /* Invoice sent to Match*/
   /* ******************************/
  ;
  set SQLCA empty;
  ;
  PVWREC.PVWBLDSC = "N";
  PVZREC.PVOVENDR = PVAREC.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PVAREC.PVOVENDG;
  PVZREC.PVAIVCID = PVAREC.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  call "PV6000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0c*/
  if (PVZREC.PVZCODER == "1") /* successful code*/
    converseLib.validationFailed(79);
    PVAREC.XIPCD = "CP";
  else
    if (PVZREC.PVZCODER == "2") /* coding error*/
      converseLib.validationFailed(23); /* pf6 to force code*/
      PVAREC.XIPCD = "IC";
    else
      if (PVZREC.PVZCODER == "4") /* non tolerance error*/
        converseLib.validationFailed(24); /* pf6 to view coding errors*/
        PVAREC.XIPCD = "IC";
      else
        converseLib.validationFailed(26);
      end
    end
  end
  ;
end // end PV0A353

// b-grade fix for 0 po nbrs
Function PV0A370()
  ;
   /* *****************************************************/
   /* B-grade Fix For Nissho Invoices with 0 For PO Nbrs*/
   /* For this 'po fix' to work the 1st line item must*/
   /* must have a po nbr and the second line item will not*/
   /* We will also edit all lines whose po's change*/
   /* ******************************************************/
  ;
  if (PVWREC.PVWUPDTF == "N" /* checking status and security*/
   || PV0AM100.XIPCD == "MT" 
   || PV0AM100.XIPCD == "IC" 
   || PV0AM100.XIPCD == "CP" 
   || PV0AM100.XIPCD == "CX" 
   || PV0AM100.XIPCD == "EX")
    converseLib.validationFailed(156); /* invalid status*/
    return;
  end
  ;
  ;
  if (PV0AM200.PVBPONBR[1] == 0 /* invalid*/
   || PV0AM200.XQACD[1] == 0)   /* invalid*/
    converseLib.validationFailed(157);
    return;
  end
  ;
   /* if valid fill remaining line items with po and qlcd*/
  ;
  PV0AW01.PC3PONBR[1] = PV0AM200.PVBPONBR[1]; /* move data*/
  PV0AW01.XQACD[1] = PV0AM200.XQACD[1];
  PV0AW01.PV0AWLEF[1] = "Y"; /* error flag*/
  PV0AW01.PV0AWEDT[1] = "Y"; /* mark line modification fl*/
  PV0AW01.PV0AWBGD = "Y"; /* set update flag*/
   /* hard code geographic region code*/
  if (PV0AW01.XWHCD[1] == "02")
    PV0AW01.YSRSLSRG[1] = "02";
  else
    if (PV0AW01.XWHCD[1] == "04")
      PV0AW01.YSRSLSRG[1] = "03";
    else
      if (PV0AW01.XWHCD[1] == "07"
       || PV0AW01.XWHCD[1] == "09")
        PV0AW01.YSRSLSRG[1] = "01";
      end
    end
  end
  ;
  PVWREC.PVWLINEX = 1;
  while (PVWREC.PVWLINEX < PV0AW01.PV0AWLIN) /* max line items*/
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    /* IF PV0AW01.PC3PONBR(PVWLINEX) EQ 0;/**/
    PV0AW01.PV0AWLEF[PVWLINEX] = "Y"; /* error flag*/
    PV0AW01.PV0AWEDT[PVWLINEX] = "Y"; /* mark line modification fl*/
    PV0AW01.PV0AWUPF = "Y"; /* update flag set*/
    PV0AW01.PC3PONBR[PVWLINEX] = PV0AM200.PVBPONBR[1];
    PV0AW01.XQACD[PVWLINEX] = PV0AM200.XQACD[1];
     /* PERFORM PV0A380; /* edit line items*/
     /* hard code geographic region code*/
    if (PV0AW01.XWHCD[PVWLINEX] == "02")
      PV0AW01.YSRSLSRG[PVWLINEX] = "02";
    else
      if (PV0AW01.XWHCD[PVWLINEX] == "04")
        PV0AW01.YSRSLSRG[PVWLINEX] = "03";
      else
        if (PV0AW01.XWHCD[PVWLINEX] == "07"
         || PV0AW01.XWHCD[PVWLINEX] == "09")
          PV0AW01.YSRSLSRG[PVWLINEX] = "01";
        end
      end
    end
    if (PVWREC.PVWLINEX < 8) /* fill 1st screen*/
      PV0AM200.PVBPONBR[PVWLINEX] = PV0AM200.PVBPONBR[1];
      PV0AM200.XQACD[PVWLINEX] = PV0AM200.XQACD[1];
    end
    /* END;*/
  end
  ;
   /* took out pv0a380 edit so users could*/
   /* pass bgrades along with errors*/
  ;
  ;
end // end PV0A370

// Check Authority
Function PV0A400()
    /* PV0A400*/
    /* 10-26-99  GDECKE  NISSHO CONTINGENCY - STOP PF17 CANCEL*/
   /* *****************/
   /* Check Authority*/
   /* *****************/
  ;
  ;
  if (converseVar.eventKey is pf2)
    if (COMMAREA.CAADDFL == "N")
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(129);
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  if (converseVar.eventKey is pf5)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(130);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf6)
    if (COMMAREA.CAILVL[1] == "Y"
     || COMMAREA.CAADDFL == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(131);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf16)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(132);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf19)
    if (COMMAREA.CAADDFL == "N")
      converseLib.validationFailed(220);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf17)
    if (COMMAREA.CAFROMAP == "PV0B")
      converseLib.validationFailed(178);
      PVWREC.PVWERRF = "Y";
      return;
    else
      if (COMMAREA.CADELFL == "N")
        converseLib.validationFailed(133);
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf18)
    if (COMMAREA.CAILVL[1] == "Y"
     || COMMAREA.CAADDFL == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(134);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
end // end PV0A400

// Check for valid pf keys
Function PV0A420()
   /* ***************************/
   /* check for valid pF keys*/
   /* ********************************************************/
   /* 09-28-94 BCourt  Add check when PF17 used to cancel*/
   /* to ensure invc type 'PT' being cancelled by*/
   /* person with correct logon authority.*/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - STATUS CODE EDIT*/
   /* 02-07-00 JKUNDU  NISSHO CONTINGENCY - BYPASS TRANSFER*/
   /* 01-11-01  NJANA   Change the process PV0A420*/
   /* to allow the user to go  to TR0H*/
   /* screen for vendr =2577 and vend*/
   /* vendr grp='04' (requested by*/
   /* Forbes and Korey Binkerd)*/
   /* *********************************************************/
  ;
   /* check pvzrec for for values of 2 and or 4*/
   /* in pvzmcher and pvzcoder; if found and user*/
   /* does not press pf5 or pf6, delete scratchpad*/
  ;
  if (PVZREC.PVZMCHER == "2"
   || PVZREC.PVZCODER == "2"
   || PVZREC.PVZCODER == "4")
    if (converseVar.eventKey not pf5
     && converseVar.eventKey not pf6)
      PV0A510(); /* delete scratchpad*/
      PVZREC.PVZMCHER = " "; /* ensure no return*/
      PVZREC.PVZCODER = " "; /* ensure no return*/
    end
  end
  ;
   /* check the rest of the pf keys*/
  ;
  if (converseVar.eventKey is enter)
    if (PV0AM100.CATOAP != " ")
      COMMAREA.CATOAP = PV0AM100.CATOAP;
      COMMAREA.CAITEM = PV0AM100.CAITEM;
      XSEXIT();
      PVWREC.PVWERRF = "Y";
      set PV0AM100.CATOAP cursor, bold;
      PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    PV0A510(); /* clear scratchpad and commarea*/
    XSPF1();
    PVWREC.PVWERRF = "Y";
    PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  else
    if (converseVar.eventKey is pf3)
      if (PVUREC.PVUCHOIC == 9
      ) /* IF MENU OPTION 9 THEN PF3 RETURNS*/
                                   /* CONTORL TO PV0B*/
        /* TCS change begin  -dated 01/11/01*/
        if (PVAREC.PVOVENDR == "2577"
         && PVAREC.PVOVENDG != "04")
          /* TCS change end    -dated 01/11/01*/
          /* JKUNDU CHANGE BEGINS - 02/07/00*/
          /* OR (PVAREC.PVAACRSP NE 'X'*/
          /* AND PVAREC.PVAACRSP NE 'A');*/
          /* JKUNDU CHANGE ENDS - 02/07/00*/
          PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "N";
        end
        ;
        if (PV0AW02.PV0AW-TRANSPORTATION-REQ-FL == "Y")
          if (PV0AW02.PV0AW-NEW-INVOICE-FL == "Y")
            /* SHOW ERROR MESSAGE*/
            PVWREC.PVWERRF = "Y";
            PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
            converseLib.validationFailed(217); /* ERROR MSG: INVALID USE OF PF15*/
            return;
          else
            if (PV0AW02.PV0AW-FIRST-TIME-TR0H-FL == "Y")
              /* SHOW ERROR MESSAGE*/
              PV0AW02.PV0AW-FIRST-TIME-TR0H-FL = "N";
              PVWREC.PVWERRF = "Y";
              PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
              converseLib.validationFailed(217); /* ERROR MSG: INVALID USE OF PF15*/
              return;
            end
          end
        end
        PV0AM100.CATOAP = "PV0B";
        COMMAREA.CATOAP = PV0AM100.CATOAP;
        COMMAREA.CAITEM = " ";
        XSEXIT();
        PVWREC.PVWERRF = "Y";
        set PV0AM100.CATOAP cursor, bold;
        PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      else
        PV0A510(); /* clear scratchpad commarea*/
        COMMAREA.CATOAP = "PV0M";
        XSEXIT();
        PVWREC.PVWERRF = "Y";
        PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
        return;
      end
    else
      if (converseVar.eventKey is pf15)
        if (PVAREC.PVOVENDR != "2577")
          /* JKUNDU CHANGE BEGINS - 02/07/00*/
          /* AND (PVAREC.PVAACRSP = 'X'*/
          /* OR PVAREC.PVAACRSP = 'A');*/
          /* JKUNDU CHANGE ENDS - 02/07/00*/
          if (PVUREC.PVUCHOIC == 9
          ) /* IF MENU OPTION 9 THEN PF3 RETURNS*/
                                   /* CONTORL TO PV0B*/
            PV0AM100.CATOAP = "TR0H";
            COMMAREA.CATOAP = PV0AM100.CATOAP;
            COMMAREA.CAITEM = " ";
            /* MOVE FACTORY IVC, VENDOR, GROUP TO TSWREC*/
            /* SAVE PVUREC IN COMMAREA USER AREA 'B'*/
            COMMAREA.CA-USER-WORKAREA-2K-B = PVUREC.PVUGROUP;
            TSWREC.INVC-ID = PVUREC.PV-IVC-ID;
            TSWREC.VENDOR-NBR = PVUREC.PV-MSA-VEND-NBR;
            TSWREC.VENDOR-GRP-CD = PVUREC.PV-MSA-VEND-GRP;
            COMMAREA.CAUSERA = TSWREC.CAUSERA;
            ;
            XSEXIT();
            PVWREC.PVWERRF = "Y";
            set PV0AM100.CATOAP cursor, bold;
            PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
            return;
          else
            PV0A510(); /* clear scratchpad commarea*/
            COMMAREA.CATOAP = "PV0M";
            XSEXIT();
            PVWREC.PVWERRF = "Y";
            PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
            return;
          end
        else
          /* SHOW ERROR MESSAGE*/
          PVWREC.PVWERRF = "Y";
          PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
          converseLib.validationFailed(216); /* ERROR MSG: INVALID USE OF PF15*/
          return;
        end
      else
        if (converseVar.eventKey is pf4)
          PV0A510(); /* clear scratchpad and commarea*/
          XSPF4();
          PVWREC.PVWERRF = "Y";
          PV0AM100.VAGen_EZEMSG = COMMAREA.CAMSG;
          return;
        else
          if (converseVar.eventKey not pf2
           && converseVar.eventKey not pa2
           && converseVar.eventKey not pf5
           && converseVar.eventKey not pf6
           && converseVar.eventKey not pf15
           && converseVar.eventKey not pf16
           && converseVar.eventKey not pf17
           && converseVar.eventKey not pf18
           && converseVar.eventKey not pf19)
            PVWREC.PVWERRF = "Y";
            converseLib.validationFailed(1); /* invalid pf key*/
            return;
          end
        end
      end
    end
  end
  ;
   /* **********************************************/
   /* check security and invoice status for pf keys*/
   /* **********************************************/
  if (converseVar.eventKey is pf2)
    if (PV0AW01.PV0AWADD == "Y")
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(6); /* must update from line item scrn*/
      return;
    else
      if (PVAREC.XIPCD == "UM" /* only these status codes*/
       || PVAREC.XIPCD == "NP" 
       || PVAREC.XIPCD == "IC" /* can be updated*/
       || PVAREC.XIPCD == "MT" 
       || (PVUREC.PVUCHOIC == 9
       && PVAREC.XIPCD == "IP"))
      else
        PVWREC.PVWERRF = "Y";
        PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
        converseLib.validationFailed(7); /* invalid status to update*/
        return;
      end
    end
  end
  ;
  if (converseVar.eventKey is pf5)
    if (PVZREC.PVZMCHER != "2"
     || PVAREC.XIPCD != "UM") /* um only valid f-mtch status*/
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(8); /* frce match invalid unless mtch-cd*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf6)
    if (PVAREC.XIPCD != "IC" /* ic only valid f-cd status*/
     || PVZREC.PVZCODER == " ") /* coding has not been attempted*/
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(9); /* frce-cd invalid unless from mtch-cd*/
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf16)
    if (PVAREC.XIPCD != "UM") /* um and np are valid status*/
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(10); /* invalid status to match and code*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf19)
    if (PVAREC.XIPCD != "IP") /* 'IP' IS THE ONLY VALID STATUS*/
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(219); /* invalid status to match and code*/
      return;
    end
  end
  ;
   /* 9-13-94 BCourt Add check for PF17 & new ivc type 'PT'*/
  if (converseVar.eventKey is pf17)
    if (PVAREC.XIVCD == "PT") /* production ticketing restricted*/
      if (COMMAREA.CADLVL[2] == "N") /* must be OK to delete*/
        PVWREC.PVWERRF = "Y";
        PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
        converseLib.validationFailed(133); /* invalid authority to delete*/
        return;
      end
    end
  end
  ;
   /* **************/
   /* For a Cancel The User will hit Pf17 and the Cancel Reason Cd*/
   /* will be redisplayed bright and the user will enter the code*/
   /* and press pf17 again*/
   /* **************/
  ;
  if (converseVar.eventKey is pf17)
    if (PV0AW01.PV0AWCRC != "Y") /* enter cancel reason code flag*/
      PVWREC.PVWERRF = "Y"; /* to get a redisplay of screen*/
      set PV0AM100.XFACD cursor, bold;
      converseLib.validationFailed(123);
      PV0AW01.PV0AWCRC = "Y"; /* cancel reason code flag*/
      return;
    else
      if (PV0AM100.XFACD in XFATBL.XFACD /* check cancel reason cd tble*/
       && XFATBL.XFAIND[sysVar.arrayIndex] == "4") /* check cancel reason cd tble*/
        PV0AW01.PV0AWCRC = "N"; /* cancel reason code flag*/
      else
        PVWREC.PVWERRF = "Y"; /* error flag*/
        converseLib.validationFailed(124);
        set PV0AM100.XFACD cursor, bold;
        PV0AM100.XFACD = "  ";
        return;
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf18)
    if (PVAREC.XIPCD != "IC" /* ic and mt status only*/
     && PVAREC.XIPCD != "MT") /* for code*/
      PVWREC.PVWERRF = "Y";
      PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
      converseLib.validationFailed(125);
      return;
    end
  end
  ;
  if (converseVar.eventKey is pa2)
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWFF = "Y"; /* reset 1st time flag*/
    PV0AS00(); /* reinitialize*/
    converseLib.validationFailed(12); /* screen has been refreshed*/
    return;
  end
  ;
end // end PV0A420

// Delete Scratchpad Clear Comm
Function PV0A510()
  ;
   /* ************************************************/
   /* Delete Old Scratchpad Clear and Fill Commarea*/
   /* ************************************************/
  XSRREC.XSRSUBID = COMMAREA.CAUSERID; /* key field*/
  XSRREC.XSRSYSID = "PV  ";
  XSRREC.XSRSQNBR = 01;
  PV0AW02.PV0AWSCP = "N"; /* scatch pad deleted*/
  ;
  set SQLCA empty;
  call "IO3400" ("D ", SQLCA, XSRREC) {isNoRefresh = yes, isExternal = yes}; /* delete scratch pad*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* scratch found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* scratch not found*/
      /* Next Sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PV0AW01 empty; /* clear working storage*/
        set PVAREC empty;
        set PVAREC empty;
        converseLib.validationFailed(44);
        return;
      else
        TA1REC.TA1LOCAT[1] = "PV0A510";
        TA1REC.TA1LOCAT[2] = "READING DB2 VCSPAD";
        TA1REC.TA1TBLVU = "VCSPAD01";
        TA1REC.TA1TBLKE = XSRREC.XSRSYSID;
        PV0AS97();
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
end // end PV0A510

// First Time Through
Function PV0A600()
   /* First Time Through Check of Db2*/
   /* ***********************************/
   /* Db2 Lookup Of Invoice Header*/
   /* ***********************************/
  ;
  PVAREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key in*/
  PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
  ;
  set SQLCA empty;
  call "IO5660" ("S ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes}; /* select hdr record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* header found*/
    PV0A636();
    PV0AW01.PV0AWHDF = "Y"; /* mark it*/
    PVWREC.PVWBLDSC = "N"; /* bld screen no*/
    PV0AW01.PV0AWADD = "N"; /* add mode no*/
    if (PVUREC.PVUCHOIC == 9
     && PVAREC.XIPCD == "IC")
      PV0AW01.PV0AWSTF = "N";
    else
      if (PVAREC.XIPCD == "EX" /* invoice already extracted*/
       || PVAREC.XIPCD == "CP" /* invoice complete*/
       || PVAREC.XIPCD == "IC" /* invoice incomplete*/
       || PVAREC.XIPCD == "CX" /* invoice cancelled*/
       || PVAREC.XIPCD == "MT") /* invoice matched*/
        PV0AW01.PV0AWSTF = "Y"; /* only cancel and dislay valid*/
      else
        PV0AW01.PV0AWSTF = "N"; /* mark it*/
      end /* Next Sentence*/
    end /* Next Sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVBREC empty;
      converseLib.validationFailed(44);
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
        PVWREC.PVWBLDSC = "Y";
        PV0AW01.PVBLNINB[1] = 1;
        PV0AW01.PV0AWLIN = 1;
        PV0AW01.PV0AWADD = "Y";
        PV0AW01.PV0AWSTF = "N"; /* invoice status flag set*/
      else
        TA1REC.TA1LOCAT[1] = "PV0A600";
        TA1REC.TA1LOCAT[2] = "READING DB2 PVHDR01";
        TA1REC.TA1TBLVU = "VPVHDR01";
        TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
        PV0AS97();
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
end // end PV0A600

// Vendor, Security, Pv0am100
Function PV0A605()
   /* 02-01-00  GDECKE  NISSHO CONTINGENCY - PROTECT FIELDS RELATED*/
   /* TO SENT PAYMENTS*/
   /*  */
   /* *****************************/
   /* PV0A605 - YDb2 Lookup Of Vendor Name*/
   /* 09-28-94 TWatso  Add new ivc type 'PT' for production ticketing.*/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UNPROTECT FIELDS - PV0AS40*/
   /* ******************************************************************/
  PV0A607();
  if (PVWREC.PVWERRF == "Y")
    return;
  end
  ;
   /* *********************/
   /* Check Security   --------> check this*/
   /* *********************/
  if (COMMAREA.CAADDFL == "N") /* user is inquiry*/
     /* AND COMMAREA.CAILVL(1) EQ 'N' ; only*/
    PVWREC.PVWUPDTF = "N";
  else
    PVWREC.PVWUPDTF = "Y"; /* update authority*/
  end
  ;
  if (PV0AW01.PV0AWHDF == "Y") /* header found*/
    if (PVAREC.XIVCD == "PT") /* & production ticketing*/
      if (COMMAREA.CACLVL[2] == "N"
       || COMMAREA.CADLVL[2] == "N"
       || COMMAREA.CAALVL[2] == "N") /* then need correct security*/
        PVWREC.PVWUPDTF = "N";
        converseLib.validationFailed(172); /* login invalid for invoice type*/
        return;
      end
    end
  end
  ;
   /* *********************************************/
   /* Move Data To Screen-- Only If Header Found*/
   /* *********************************************/
  if (PV0AW01.PV0AWHDF == "Y") /* header found*/
    PV0A610(); /* pvbrec lookup*/
    PV0AS30(); /* load pv0am100*/
    PV0A-SENT-PMT-FLAG(); /* SET FLAG IF PAYMENT SENT*/
  else
    if (PVWREC.PVWUPDTF == "N") /* inquiry only user*/
      converseLib.validationFailed(2); /* invalid authority to create new*/
                                   /* invoice*/
      PVWREC.PVWERRF = "Y"; /* start over*/
    else
      PV0AW02.PV0AW-NEW-INVOICE-FL = "Y";
      PV0AW01.PVBLNINB[1] = 1;
      converseLib.validationFailed(13); /* invoice not found new invoice*/
    end
  end
  ;
  ;
   /* **********************************************/
   /* Protect or Unprotect Fields*/
   /* **********************************************/
  if (PVWREC.PVWUPDTF == "Y") /* update authority given*/
    if (PV0AW01.PV0AWSTF == "N") /* status check*/
      if (PV0AW01.PV0AWADD == "Y") /* new invoice*/
        if (PVUREC.PVUCHOIC == 9)
          PV0AS40(); /* SET FIELDS FOR ADD*/
        else
          if (PV0AM100.PVOVENDR == "2577") /* nissho vendor*/
            PV0AS40(); /* set fields for add*/
          else
            PV0AS44(); /* set fields for add non nissho*/
          end
        end
      else
        PV0AS43(); /* set fields for change*/
      end
    else
      PV0AS42(); /* protect fields display only*/
    end
  else
    PV0AS45(); /* protect fields display only*/
  end
  ;
  ;
end // end PV0A605

// Vendor Lookup
Function PV0A607()
  ;
   /* Vendor Lookup*/
  ;
   /* *****************************/
   /* A. Db2 Lookup Of Vendor Name*/
   /* *****************************/
  ;
  PVOREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key in*/
  PVOREC.PVOVENDG = PV0AM100.PVOVENDG;
  ;
  set SQLCA empty;
  call "IO5680" ("S ", SQLCA, PVOREC) {isNoRefresh = yes, isExternal = yes}; /* vendor name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* name found*/
    PV0AM100.PVOVNDNM = PVOREC.PVOVNDNM; /* move vendor name*/
    PV0AM200.PVOVNDNM = PVOREC.PVOVNDNM; /* to screens*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVBREC empty;
      converseLib.validationFailed(136); /* invalid vendor*/
      PVWREC.PVWERRF = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PV0AW01 empty; /* clear working storage*/
        set PVAREC empty;
        set PVBREC empty;
        converseLib.validationFailed(44);
        return;
      else
        TA1REC.TA1LOCAT[1] = "PV0A600";
        TA1REC.TA1LOCAT[2] = "READING DB2 PVEND01";
        TA1REC.TA1TBLVU = "VPVEND01";
        TA1REC.TA1TBLKE = PVOREC.PVOVENDR;
        PV0AS97();
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
end // end PV0A607

// Pvbrec Lookup
Function PV0A610()
  ;
   /* ************************/
   /* Pvbrec Lookup*/
   /* ************************/
  PVBREC.PVOVENDR = PV0AM100.PVOVENDR;
  PVBREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVBREC.PVAIVCID = PV0AM100.PVAIVCID;
  ;
  set SQLCA empty;
  call "IO5670" ("S1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* all line items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A610";
      TA1REC.TA1LOCAT[2] = "READING DB2 PVITM01";
      TA1REC.TA1TBLVU = "VPVITM01";
      TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  ;
  SQLCA.VAGen_SQLCODE = 0;
  PV0AW01.PV0AWLIN = 0; /* line item max*/
  PVWREC.PVWLINEX = 0; /* line item number*/
  PV0AW01.PV0AWIFB = 0; /* invoice fob*/
  PV0AW01.PV0AWUPF = "N"; /* set update flag*/
  PV0AW01.PV0AWLIT = "  "; /* erase past line items*/
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO5670" ("N1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* select line item rec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* line item found*/
      PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
      PV0A615(); /* sy1rec*/
      PV0AS22(); /* working storage load*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        /* NEXT SENTENCE*/
        /* MOVE PV0AW01.PV0AWIFB TO PV0AM100.PVATFOB;*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
          set PV0AW01 empty; /* clear working storage*/
          set PVAREC empty;
          set PVAREC empty;
          converseLib.validationFailed(44);
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0A610";
          TA1REC.TA1LOCAT[2] = "FETCH ONE LINE ITEM";
          TA1REC.TA1TBLVU = "VPVITM01";
          TA1REC.TA1TBLKE = PVBREC.PVOVENDR;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    end
  end
  ;
  set PV0AM200 empty; /* move data into pv0am200*/
  PV0AM200.PVTODAY = PV0AM100.PVTODAY;
  PV0AM200.PVTIME = PV0AW02.TA2TIME;
  PV0AM100.FY1FCTYC = PV0AW01.FY1FCTYC[1];
  PV0AW01.PV0AWLIN = PV0AW01.PV0AWLIN + PVWREC.PVWLINEX; /* line max*/
  ;
  call "IO5670" ("C1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* close inv item*/
  if (SQLCA.VAGen_SQLCODE == 0) /* line item found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A610";
      TA1REC.TA1LOCAT[2] = "CLOSE LINE ITEM";
      TA1REC.TA1TBLVU = "VPVITM01";
      TA1REC.TA1TBLKE = PVBREC.PVOVENDR;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
end // end PV0A610

// Pvbrec Lookup
Function PV0A611()
    /* PV0A611*/
   /* ************************/
   /* PVBREC LOOKUP - DPINVC.VPVITM01*/
   /* SELECT JUST THE FIRST ROW TO GET PARAMETER VALUES FOR CALL*/
   /* TO PV4050 TO GET 'FAN CODE' - PV-IVC-ACCT-PSPIND*/
   /* ************************/
  PVBREC.PVOVENDR = PV0AM100.PVOVENDR;
  PVBREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVBREC.PVAIVCID = PV0AM100.PVAIVCID;
  ;
  set SQLCA empty;
  call "IO5670" ("S1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* all line items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A610";
      TA1REC.TA1LOCAT[2] = "READING DB2 PVITM01";
      TA1REC.TA1TBLVU = "VPVITM01";
      TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end /* M*/
  end
  ;
  set SQLCA empty;
  call "IO5670" ("N1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* select line item rec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* line item found*/
     /* MOVE VALUES TO PARM LIST*/
    PV4050W1.PC-PO-NBR = PVBREC.PC3PONBR;
    PV4050W1.XWH-WHSE-CD = PVBREC.XWHCD;
    PV4050W1.PC-PRDCU-ID = PVBREC.PC2CUXID;
    PV4050W1.XGP-GPC-CD = PVBREC.XGPCD;
    PV4050W1.PV-IVC-ACCT-RSPIND = " ";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
       /* MOVE SPACES TO PARM LIST*/
      PV4050W1.PC-PO-NBR = 0;
      PV4050W1.XWH-WHSE-CD = " ";
      PV4050W1.PC-PRDCU-ID = " ";
      PV4050W1.XGP-GPC-CD = " ";
      PV4050W1.PV-IVC-ACCT-RSPIND = "?";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PV0AW01 empty; /* clear working storage*/
        set PVAREC empty;
        set PVAREC empty;
        converseLib.validationFailed(44);
        return;
      else
        TA1REC.TA1LOCAT[1] = "PV0A610";
        TA1REC.TA1LOCAT[2] = "FETCH ONE LINE ITEM";
        TA1REC.TA1TBLVU = "VPVITM01";
        TA1REC.TA1TBLKE = PVBREC.PVOVENDR;
        PV0AS97();
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
  call "IO5670" ("C1", SQLCA, PVBREC) {isNoRefresh = yes, isExternal = yes}; /* close inv item*/
  if (SQLCA.VAGen_SQLCODE == 0) /* line item found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A610";
      TA1REC.TA1LOCAT[2] = "CLOSE LINE ITEM";
      TA1REC.TA1TBLVU = "VPVITM01";
      TA1REC.TA1TBLKE = PVBREC.PVOVENDR;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  if (PV4050W1.PV-IVC-ACCT-RSPIND == "?")
    PV4050W1.PV-IVC-ACCT-RSPIND = "X";
    PV0AM100.PVAACRSP = PV4050W1.PV-IVC-ACCT-RSPIND;
  else
    /* MOVE 'X' TO PV4050W1.PV-IVC-ACCT-RSPIND;*/
    /* MOVE '00' TO PV4050W1.PV4050W-RETURN-CODE;*/
    call "PV4050" (PV4050W1) {isNoRefresh = yes, isExternal = yes};
    ;
    /* CHECK RETURN CODES AND SHOW APPROPRIATE MESSAGES*/
    ;
    if (PV4050W1.PV4050W-RETURN-CODE == "00")
      PV0AM100.PVAACRSP = PV4050W1.PV-IVC-ACCT-RSPIND;
    else
      PVWREC.PVWERRF = "Y";
      PV0AM100.PVAACRSP = "X";
      if (PV4050W1.PV4050W-RETURN-CODE == "02")
        converseLib.validationFailed(44);
      else
        if (PV4050W1.PV4050W-RETURN-CODE == "03")
          converseLib.validationFailed(184);
        else
          if (PV4050W1.PV4050W-RETURN-CODE == "04")
            converseLib.validationFailed(116);
          else
            if (PV4050W1.PV4050W-RETURN-CODE == "05")
              converseLib.validationFailed(116);
            else
              if (PV4050W1.PV4050W-RETURN-CODE == "06")
                converseLib.validationFailed(112);
              else
                if (PV4050W1.PV4050W-RETURN-CODE == "07")
                  converseLib.validationFailed(91);
                else
                  converseLib.validationFailed(184);
                end
              end
            end
          end
        end
      end
    end
    ;
  end
  ;
  ;
end // end PV0A611

// Sy1rec Lookup
Function PV0A615()
  ;
   /* ************************/
   /* Sy1rec Lookup*/
   /* ************************/
  SY1REC.XGPCD = PVBREC.XGPCD; /* move key*/
  SY1REC.SY1STNBR = PVBREC.SY1STNBR;
  ;
  set SQLCA empty;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* sy1rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0AW01.SY1SSTNM[PVWLINEX] = SY1REC.SY1SSTNM;
     /* MOVE SY1REC.XWHCD TO PV0AW01.XWHCD(PVWLINEX);*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* invalid style*/
      PV0AW01.PV0AWLEF[PVWLINEX] = "Y";
      set SQLCA empty;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PV0AW01 empty; /* clear working storage*/
        set PVAREC empty;
        set PVAREC empty;
        converseLib.validationFailed(44);
        return;
      else
        TA1REC.TA1LOCAT[1] = "PV0A615";
        TA1REC.TA1LOCAT[2] = "READING DB2 PVSTYLE01";
        TA1REC.TA1TBLVU = "VSTYLE01";
        TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
        PV0AS97();
        PVWREC.PVWERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
  ;
end // end PV0A615

// Process screen data
Function PV0A620()
  ;
   /* ***************************************/
   /* Process screen data from PV0AM100*/
   /* ***************************************/
  ;
   /* Protect or Unprotect Fields*/
  ;
  ;
  PV0A630(); /* check for modified fields*/
  ;
  ;
end // end PV0A620

// Check for Modified Fields
Function PV0A630()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UNPROTECT FIELDS - PV0AS40*/
   /* ************************************/
   /* Check For Modified Fields*/
   /* Call Invoice Hdr D-base If Needed*/
   /* ************************************/
  ;
  if (PV0AM100.PVOVENDR != PVAREC.PVOVENDR /* vend nbr*/
   || PV0AM100.PVOVENDG != PVAREC.PVOVENDG /* vend group*/
   || PV0AM100.PVAIVCID != PVAREC.PVAIVCID) /* inv nbr*/
    set PVAREC empty; /* clear out pvarec*/
    PVAREC.PVOVENDR = PV0AM100.PVOVENDR;
    PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
    PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
    set SQLCA empty;
    call "IO5660" ("S ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes}; /* 'select hdr record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* header found*/
      PV0A636();
      PV0A607(); /* vendor name lookup*/
      set PV0AM200 initial;
      PV0AW01.PV0AWKEY = "Y"; /* key chg on*/
      PV0AW01.PV0AWADD = "N"; /* add mode off*/
      PVWREC.PVWBLDSC = "N";
      PVWREC.PVWERRF = "Y"; /* set error flag to redisplay*/
      converseLib.validationFailed(126); /* new invoice*/
      if (PVAREC.XIPCD == "MT" /* invoice matched*/
       || PVAREC.XIPCD == "CX" /* invoice cancelled*/
       || PVAREC.XIPCD == "IC" /* invoice incomplete*/
       || PVAREC.XIPCD == "CP" /* invoice complete*/
       || PVAREC.XIPCD == "EX") /* invoice extracted*/
        PV0AW01.PV0AWSTF = "Y";
        PV0AS42(); /* display only*/
      else
        PV0AW01.PV0AWSTF = "N";
        PV0AS43(); /* unprotect needed fields*/
      end
      set PV0AW01 empty; /* clear out ws*/
      set PVBREC empty; /* clear out ws*/
      PV0A610(); /* pvbrec lookup*/
      PV0AS30(); /* load pv0am100*/
      ;
      /* delete scratchpad*/
      XSRREC.XSRSUBID = COMMAREA.CAUSERID; /* key field*/
      XSRREC.XSRSYSID = "PV  ";
      XSRREC.XSRSQNBR = 01;
      PV0AW02.PV0AWSCP = "N";
      ;
      call "IO3400" ("D ", SQLCA, XSRREC) {isNoRefresh = yes, isExternal = yes}; /* delete scratpad*/
      if (SQLCA.VAGen_SQLCODE == 0 /* srcatch pad*/
       || SQLCA.VAGen_SQLCODE == 100)
        COMMAREA.CAUSERA = "  ";
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(44);
          PVWREC.PVWERRF = "Y";
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0A630";
          TA1REC.TA1LOCAT[2] = "READING DB2 VCSPAD01";
          TA1REC.TA1TBLVU = "VCSPAD01";
          TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
        set PV0AM100 initial;
        set PV0AM200 initial;
        PV0AM100.PVOVENDR = PVAREC.PVOVENDR;
        PV0AM100.PVOVENDG = PVAREC.PVOVENDG;
        PV0AM100.PVAIVCID = PVAREC.PVAIVCID;
        PV0A607(); /* vendor name lookup*/
        PV0AM100.PVTODAY = TA2REC.TA2GRGGN;
        PV0AM100.PVTIME = PV0AW02.TA2TIME;
        if (PVWREC.PVWERRF == "Y") /* invalid vendor*/
          PV0AW01.PV0AWFF = "N"; /* set 1st time flag*/
          return;
        end
        set PVAREC empty;
        set PVBREC empty;
        set PV0AW01 empty;
        PV0AW01.PV0AWLIN = 1;
        PV0AW01.PVBLNINB[1] = 1;
        PVAREC.PVOVENDR = PV0AM100.PVOVENDR;
        PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
        PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
        converseLib.validationFailed(135); /* new invoice*/
        PV0AW01.PV0AWADD = "Y";
        PVWREC.PVWERRF = "Y";
        PVWREC.PVWBLDSC = "Y";
        if (PVUREC.PVUCHOIC == 9)
          PV0AS40(); /* SET FIELDS FOR ADD*/
        else
          if (PV0AM100.PVOVENDR == "2577") /* nissho vendor*/
            PV0AS40(); /* unprotect needed fields*/
          else
            PV0AS44(); /* unprotect non nissho fields*/
          end
        end
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(44);
          PVWREC.PVWERRF = "Y";
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0AS30";
          TA1REC.TA1LOCAT[2] = "READING DB2 PVHDR01";
          TA1REC.TA1TBLVU = "VPVHDR01";
          TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    end
  end
  ;
   /* continue with edits*/
  PV0A632();
  ;
end // end PV0A630

// Edit Header Screen
Function PV0A632()
  ;
   /* *********************/
   /* Edit Header Screen*/
   /* *********************/
   /* Maintenance log:*/
   /* 08-19-94 BCourt  move 0, not ' ', to dates*/
   /* pv0awdte, wcn2, wdt1 & wdt2.*/
   /* 09-28-94 TWatso  Add new ivc type 'PT' for production ticketing*/
   /* Restrict to vendors 47362 & 47363.*/
   /* 11-19-97 Njana   Change(Y2K) incorporated for inv date>due date*/
   /* 02-05-98 Njana   Add the vendor 919517 for the invoice type 'PT'*/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - EDIT TOT AMT=SUM OF ALL CHGS*/
   /* 08-07-00 JKUNDU  NISSHO CONTINGENCY - EDIT TOT AMT=SUM OF ALL CHGS*/
   /* (Taking care of the correct freight amount)*/
   /* 01-28-01 BPARAN  CHANGE FOR TOTAL INVC AMT CHANGES*/
   /* **********************************************************/
  ;
   /* **************/
   /* Batch Number*/
   /* **************/
  if (PV0AM100.PVABTNBR != PVAREC.PVABTNBR) /* batch nbr modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
   /* ****************************************************************/
   /* FOB + Freight Must equal Invoice amount   Non nissho invoices*/
   /* ****************************************************************/
  if (PVUREC.PVUCHOIC == 9)
    if (PV0AM100.PVATFOB != PVAREC.PVATFOB   /* fob modified*/
     || PV0AM100.PV0AM-NEW-FREIGHT-AMT !=    
    PV0AW02.PV0AW-ORIG-FRGT-AMT              
     || PV0AW02.PV0AW-DETAIL-UPDATED-FL == "Y"
     || PV0AM100.PVAIVAMT != PVAREC.PVAIVAMT /* invoice amt modified*/
     || PV0AM100.PVADSCT != PVAREC.PVADSCT   /* invoice amt modified*/
     || PV0AM100.PVABANKC != PVAREC.PVABANKC /* invoice amt modified*/
     || PV0AM100.PVATDUTY != PVAREC.PVATDUTY /* invoice amt modified*/
     || PV0AM100.PVATFOB != PVAREC.PVATFOB   /* invoice amt modified*/
     || PV0AM100.PVABRKRY != PVAREC.PVABRKRY /* invoice amt modified*/
     || PV0AM100.PVAOCHG1 != PVAREC.PVAOCHG1 /**/
     || PV0AM100.PVAOCHG2 != PVAREC.PVAOCHG2 /**/
     || PV0AM100.PVASCHG1 != PVAREC.PVASCHG1 /**/
     || PV0AM100.PVASCHG2 != PVAREC.PVASCHG2 /**/
     || PV0AM100.PVAINT1 != PVAREC.PVAINT1   /**/
     || PV0AM100.PVAINT2 != PVAREC.PVAINT2   /**/
     || PV0AM100.PVAINT3 != PVAREC.PVAINT3   /**/
     || PV0AM100.PVATQTY != PVAREC.PVATQTY   /**/
     || PV0AW01.PV0AWPAF == "Y")            
      /* IF ADDING FOB OR DUTY THERE MUST NOT BE ANY OTHER LIKE PAYMENTS*/
      /* ALREADY IN THE PAYMENT TABLE.*/
      PV0A-DUP-PMT-TEST();
      if (PVWREC.PVWERRF == "Y")
        set PV0AM100.PVATFOB cursor, bold;
        set PV0AM100.PV0AM-NEW-FREIGHT-AMT cursor, bold;
        set PV0AM100.PVAIVAMT cursor, bold;
        set PV0AM100.PVATDUTY cursor, bold;
      else
        ;
        PV0AW02.PV0AWINV = PV0AM100.PVATFOB         + PV0AM100.PVABANKC         + PVAREC.PVATCOMM         + PV0AM100.PVATDUTY         + PV0AM100.PVABRKRY         + PV0AM100.PVAOCHG1         + PV0AM100.PVAOCHG2         + PV0AM100.PVAINT1         + PV0AM100.PVAINT2         + PV0AM100.PVAINT3;
        /* JKUNDU CHANGE BEGINS - 08/11/00*/
        /* ADD APPROPRIATE FREIGHT AMOUNT TO TOTAL*/
        /* Tcs change begins - 01-28-2001*/
        /* IF PV0AM100.PV0AM-NEW-FREIGHT-AMT = 0;*/
        if (PV0AM100.PV0AM-NEW-FREIGHT-AMT not modified)
          /* Tcs change ends - 01-28-2001*/
          PV0AW02.PV0AWINV = PV0AW02.PV0AWINV           + PV0AM100.PVATFRGT;
        else
          PV0AW02.PV0AWINV = PV0AW02.PV0AWINV           + PV0AM100.PV0AM-NEW-FREIGHT-AMT           + PV0AW02.PV0AW-DIFF-FREIGHT-AMT;
        end
        /* JKUNDU CHANGE ENDS  - 08/11/00*/
        ;
        if (PV0AM100.PVAIVAMT != PV0AW02.PV0AWINV)
          PV0AM100.PV0AM-PV-IVC-AMT-TITLE = "EST IVC AMT:";
          PV0AM100.PV-PMT-IVC-AMT = PV0AW02.PV0AWINV;
          PV0AM100.PV0AM-PVATCOMM-TITLE = "TOTAL COMM:";
          PV0AM100.PVATCOMM = PVAREC.PVATCOMM;
          PVWREC.PVWERRF = "Y";
          set PV0AM100.PVATFOB bold;
          set PV0AM100.PV0AM-NEW-FREIGHT-AMT bold;
          set PV0AM100.PVAIVAMT bold;
          set PV0AM100.PVADSCT bold;
          set PV0AM100.PVABANKC bold;
          set PV0AM100.PVATDUTY bold;
          set PV0AM100.PVABRKRY bold;
          set PV0AM100.PVAOCHG1 bold;
          set PV0AM100.PVAOCHG2 bold;
          set PV0AM100.PVASCHG1 bold;
          set PV0AM100.PVASCHG2 bold;
          set PV0AM100.PVAINT1 bold;
          set PV0AM100.PVAINT2 bold;
          set PV0AM100.PVAINT3 bold;
          converseLib.validationFailed(176); /* fob + frgt must equal invoice tot*/
        else
          set PV0AM100.PVATFOB normal;
          set PV0AM100.PV0AM-NEW-FREIGHT-AMT normal;
          set PV0AM100.PVAIVAMT normal;
          set PV0AM100.PVADSCT normal;
          set PV0AM100.PVABANKC normal;
          set PV0AM100.PVATDUTY normal;
          set PV0AM100.PVABRKRY normal;
          set PV0AM100.PVAOCHG1 normal;
          set PV0AM100.PVAOCHG2 normal;
          set PV0AM100.PVASCHG1 normal;
          set PV0AM100.PVASCHG2 normal;
          set PV0AM100.PVAINT1 normal;
          set PV0AM100.PVAINT2 normal;
          set PV0AM100.PVAINT3 normal;
        end
      end
    end
  else
    if (PV0AM100.PVOVENDR != "2577") /* not a nissho invoice*/
      if (PV0AM100.PVATFOB != PVAREC.PVATFOB   /* fob modified*/
       || PV0AM100.PVATFRGT != PVAREC.PVATFRGT /* freight modified*/
       || PV0AM100.PVAIVAMT != PVAREC.PVAIVAMT) /* invoice amt modified*/
        PV0AW02.PV0AWINV = PV0AM100.PVATFRGT + PV0AM100.PVATFOB;
        if (PV0AM100.PVAIVAMT != PV0AW02.PV0AWINV)
          PVWREC.PVWERRF = "Y";
          set PV0AM100.PVATFOB cursor, bold;
          set PV0AM100.PVATFRGT cursor, bold;
          set PV0AM100.PVAIVAMT cursor, bold;
          converseLib.validationFailed(161); /* fob + frgt must equal invoice tot*/
        else
          set PV0AM100.PVATFOB normal;
          set PV0AM100.PVATFRGT normal;
          set PV0AM100.PVAIVAMT normal;
        end
      end
    end
  end
  ;
   /* *******************/
   /* Factory Code Edit*/
   /* *******************/
  if (PV0AM100.FY1FCTYC != PV0AW01.FY1FCTYC[1]) /* factory modified*/
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged but not valid yet*/
    set SQLCA empty;
    FY1REC.FY1FCTYC = PV0AM100.FY1FCTYC; /* factory*/
    FY1REC.XGPCD = PV0AM100.XGPCD; /* xgpcd*/
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      PV0AW01.PV0AWPAF = "Y"; /* hdr field is now valid*/
      set PV0AM100.FY1FCTYC normal;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(44);
        PVWREC.PVWERRF = "Y";
        return;
      else
        PVWREC.PVWERRF = "Y";
        set PV0AM100.FY1FCTYC cursor, bold;
        converseLib.validationFailed(137); /* invalid factory code*/
      end
    end
  end
  ;
   /* ***************/
   /* GPC Code Edit*/
   /* ***************/
  if (PV0AM100.XGPCD != PVAREC.XGPCD /* xgpcd modified*/
   || PV0AM100.XGPCD == "  ")       
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged*/
    if (PV0AM100.XGPCD != "02" /* correct xgpce code*/
     && PV0AM100.XGPCD != "03")
      PVWREC.PVWERRF = "Y";
      set PV0AM100.XGPCD cursor, bold;
      converseLib.validationFailed(18); /* invalid gpc*/
    else
      PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
      set PV0AM100.XGPCD normal;
    end
  end
  ;
   /* ***************/
   /* Country Edit*/
   /* ***************/
  if (PV0AM100.PC6XCTCD != PVAREC.PC6XCTCD) /* country*/
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged*/
    if (PV0AM100.PC6XCTCD in XCTTBL.XCTCD) /* valid country*/
      PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
      set PV0AM100.PC6XCTCD normal;
    else
      PVWREC.PVWERRF = "Y";
      set PV0AM100.PC6XCTCD cursor, bold;
      converseLib.validationFailed(138); /* invalid country code*/
    end
  end
  ;
   /* ********************/
   /* invoice type edit*/
   /* ********************/
  if (PV0AM100.XIVCD == "PT") /* production ticketing invoice type*/
    if (COMMAREA.CAALVL[2] == "Y" /* user set up for add*/
     || COMMAREA.CACLVL[2] == "Y" /* user set up for change*/
     || COMMAREA.CADLVL[2] == "Y") /* user set up for delete*/
      set PV0AM100.XIVCD normal;
    else
      PVWREC.PVWERRF = "Y";
      set PV0AM100.XIVCD cursor, bold;
      converseLib.validationFailed(172); /* invalid logon for 'pt' invoice type*/
      return;
    end
  end
   /* add 9-12-94*/
  if (PV0AM100.XIVCD == "PT") /* production ticketing*/
    /* TCS change begins-dated 02/05/97*/
    if (PV0AM100.PVOVENDR == "47362" /* restricted vendors OK*/
     || PV0AM100.PVOVENDR == "47363" 
     || PV0AM100.PVOVENDR == "919517")
      /* TCS change ends  -dated 02/05/97*/
      /* next sentence*/
    else
      PVWREC.PVWERRF = "Y";
      set PV0AM100.XIVCD cursor, bold;
      converseLib.validationFailed(173); /* wrong vendor for 'pt'*/
      return;
    end
  end
  ;
  if (PV0AM100.XIVCD != PVAREC.XIVCD) /* invoice type*/
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged*/
    if (PV0AM100.XIVCD in XIVTBL.XIVCD)
      PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
      set PV0AM100.XIVCD normal;
    else
      PVWREC.PVWERRF = "Y";
      set PV0AM100.XIVCD cursor, bold;
      converseLib.validationFailed(163); /* invalid ivc type*/
    end
  end
  ;
   /* ****************************/
   /* Foreign/Domestic Indicator*/
   /* ****************************/
  if (PV0AM100.PVAFDIND != PVAREC.PVAFDIND /* pvafdind modified*/
   || PV0AM100.PVAFDIND == "  ")          
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged*/
    if (PV0AM100.PVAFDIND != "F" /* correct fan div*/
     && PV0AM100.PVAFDIND != "D")
      PVWREC.PVWERRF = "Y";
      set PV0AM100.PVAFDIND cursor, bold;
      converseLib.validationFailed(19); /* invalid foreign/domestic indicator*/
    else
      PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
      set PV0AM100.PVAFDIND normal;
    end
  end
  ;
   /* *******************/
   /* acct rsp ind edit*/
   /* *******************/
  if (PV0AM100.PVAACRSP != PVAREC.PVAACRSP /* pvaacrsp modified*/
   || PV0AM100.PVAACRSP == "  ")          
    PV0AW01.PV0AWPAF = "N"; /* hdr field chged*/
    /* IF PV0AM100.PVAACRSP NE 'F'    /* correct fan div*/
     /* AND PV0AM100.PVAACRSP NE 'A'*/
     /* AND PV0AM100.PVAACRSP NE 'N'*/
     /* AND PV0AM100.PVAACRSP NE 'X'*/
     /* AND PV0AM100.PVAACRSP NE 'Z';*/
     /* MOVE 'Y' TO PVWREC.PVWERRF;*/
     /* MOVE 21 TO EZEMNO;           /* invalid fan div*/
     /* SET PV0AM100.PVAACRSP CURSOR,BRIGHT;*/
    /* ELSE;*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
    set PV0AM100.PVAACRSP normal;
    /* END;*/
  end
  ;
   /* ******************/
   /* Date Field Edits*/
   /* ******************/
  PV0AW02.PV0AWDTE = 0; /* date edit*/
  PV0AW02.PV0AWDT2 = 0; /* all this*/
  PV0AW02.PV0AWDTE = PVAREC.PVAIVCDT; /* is to move*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* edited data*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* around to see*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* if it has*/
  PV0AW02.PV0AWCN2 = 0; /* changed*/
  if (PV0AM100.PVAIVCDT != PV0AW02.PV0AWDT2) /* date modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  PV0AW02.PV0AWDTE = 0; /* date edit*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = PVAREC.PVADUEDT;
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH;
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY;
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR;
  PV0AW02.PV0AWCN2 = 0;
  if (PV0AM100.PVADUEDT != PV0AW02.PV0AWDT2) /* date modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  PV0AW02.PV0AWDTE = 0; /* date edit*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = PVAREC.PVAETADT;
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH;
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY;
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR;
  PV0AW02.PV0AWCN2 = 0;
  if (PV0AM100.PVAETADT != PV0AW02.PV0AWDT2) /* date modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  PV0AW02.PV0AWDTE = 0; /* date edit*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = PVAREC.PVABOLDT;
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH;
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY;
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR;
  PV0AW02.PV0AWCN2 = 0;
  if (PV0AM100.PVABOLDT != PV0AW02.PV0AWDT2) /* date modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  PV0AW02.PV0AWDTE = 0; /* date edit*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = PVAREC.PVACRELD;
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH;
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY;
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR;
  PV0AW02.PV0AWCN2 = 0;
  if (PV0AM100.PVACRELD != PV0AW02.PV0AWDT2) /* date modified*/
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  PV0AW02.PV0AWDTE = 0;
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDT1 = 0;
  ;
  PV0AW02.PV0AWDT2 = PV0AM100.PVAIVCDT; /* inv. date > due date*/
  PV0AW02.PV0AWDT1 = PV0AM100.PVADUEDT;
   /* TCS change begins-dated 11/18/97*/
  PV0AW02.PV0AWDT3 = 0;
  PV0AW02.PV0AWDT4 = 0;
  PV0AW02.PV0AWYR3 = PV0AW02.PV0AWYR1;
  PV0AW02.PV0AWMT3 = PV0AW02.PV0AWMT1;
  PV0AW02.PV0AWDA3 = PV0AW02.PV0AWDA1;
  PV0AW02.PV0AWYR4 = PV0AW02.PV0AWYR2;
  PV0AW02.PV0AWMT4 = PV0AW02.PV0AWMT2;
  PV0AW02.PV0AWDA4 = PV0AW02.PV0AWDA2;
  ;
   /* century field validation for due date field*/
  if (PV0AW02.PV0AWYR3 > 59)
    PV0AW02.PV0AWCN3 = 19;
  else
    PV0AW02.PV0AWCN3 = 20;
  end
  ;
   /* century field validation for inv date field*/
  if (PV0AW02.PV0AWYR4 > 59)
    PV0AW02.PV0AWCN4 = 19;
  else
    PV0AW02.PV0AWCN4 = 20;
  end
  ;
   /* Check whether invoice date > due date*/
  if (PV0AW02.PV0AWDT4 > PV0AW02.PV0AWDT3
  ) /* IF PV0AM100.PVAIVCDT >*/
                                   /* PV0AM100.PVADUEDT*/
    /* OR PV0AW02.PV0AWYR2 > PV0AW02.PV0AWYR1;*/
    /* IF PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR1*/
    /* OR PV0AW02.PV0AWYR2 > PV0AW02.PV0AWYR1;*/
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWWNF = "Y";
    set PV0AM100.PVAIVCDT cursor, bold;
    set PV0AM100.PVADUEDT cursor, bold;
    converseLib.validationFailed(139); /* inv date > due date*/
    /* ELSE;*/
    /* IF PV0AW01.PV0AWWNF EQ 'Y';*/
    /* SET PV0AM100.PVAIVCDT NORMAL;*/
    /* SET PV0AM100.PVADUEDT NORMAL;*/
    /* MOVE 'N' TO PV0AW01.PV0AWWNF;*/
    /* END;*/
    /* END;*/
    /* TCS change ends  -dated 11/18/97*/
  else
    if (PV0AW01.PV0AWWNF == "Y")
      set PV0AM100.PVAIVCDT normal;
      set PV0AM100.PVADUEDT normal;
      PV0AW01.PV0AWWNF = "N";
    end
  end
  ;
   /* invoice and due date edit*/
  PV0AS33();
  ;
  if (PV0AM100.PVATQTY != PVAREC.PVATQTY
   || PV0AM100.PVATFOB != PVAREC.PVATFOB
   || PV0AM100.PVATDUTY != PVAREC.PVATDUTY
   || PV0AM100.PVATFRGT != PVAREC.PVATFRGT
   || PV0AM100.PVADSCT != PVAREC.PVADSCT
   || PV0AM100.PVABANKC != PVAREC.PVABANKC
   || PV0AM100.PVABANKP != PVAREC.PVABANKP
   || PV0AM100.PVACOMMP != PVAREC.PVACOMMP
   || PV0AM100.PVAINT1 != PVAREC.PVAINT1
   || PV0AM100.PVAINT2 != PVAREC.PVAINT2
   || PV0AM100.PVAINT3 != PVAREC.PVAINT3
   || PV0AM100.PVAINTRT != PVAREC.PVAINTRT
   || PV0AM100.PVABRKRY != PVAREC.PVABRKRY
   || PV0AM100.PVAOCHG1 != PVAREC.PVAOCHG1
   || PV0AM100.PVAOCHG2 != PVAREC.PVAOCHG2
   || PV0AM100.PVASCHG1 != PVAREC.PVASCHG1
   || PV0AM100.PVASCHG2 != PVAREC.PVASCHG2)
    PV0AW01.PV0AWPAF = "Y"; /* hdr field chged*/
  end
  ;
  ;
end // end PV0A632

// Edit Header Screen
Function PV0A633()
  ;
   /* *********************/
   /* Edit Header Screen*/
   /* *********************/
   /* Maintenance log:*/
   /* 08-19-94 BCourt  move 0, not ' ', to dates*/
   /* pv0awdte, wcn2, wdt1 & wdt2.*/
   /* 09-28-94 TWatso  Add new ivc type 'PT' for production ticketing*/
   /* Restrict to vendors 47362 & 47363.*/
   /* 11-19-97 Njana   Change(Y2K) incorporated for inv date>due date*/
   /* 02-05-98 Njana   Add the vendor 919517 for the invoice type 'PT'*/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - EDIT TOT AMT=SUM OF ALL CHGS*/
   /* 08-07-00 JKUNDU  NISSHO CONTINGENCY - EDIT TOT AMT=SUM OF ALL CHGS*/
   /* (Taking care of the correct freight amount)*/
   /* 01-28-01 BPARAN  Changed for total invc amt changes*/
   /* **********************************************************/
  ;
   /* ****************************************************************/
   /* FOB + Freight Must equal Invoice amount   Non nissho invoices*/
   /* ****************************************************************/
  if (PVUREC.PVUCHOIC == 9)
    if (PV0AM100.PVATFOB != PVAREC.PVATFOB   /* fob modified*/
     || PV0AM100.PV0AM-NEW-FREIGHT-AMT !=    
    PV0AW02.PV0AW-ORIG-FRGT-AMT              
     || PV0AW02.PV0AW-DETAIL-UPDATED-FL == "Y"
     || PV0AM100.PVAIVAMT != PVAREC.PVAIVAMT /* invoice amt modified*/
     || PV0AM100.PVADSCT != PVAREC.PVADSCT   /* invoice amt modified*/
     || PV0AM100.PVABANKC != PVAREC.PVABANKC /* invoice amt modified*/
     || PV0AM100.PVATDUTY != PVAREC.PVATDUTY /* invoice amt modified*/
     || PV0AM100.PVATFOB != PVAREC.PVATFOB   /* invoice amt modified*/
     || PV0AM100.PVABRKRY != PVAREC.PVABRKRY /* invoice amt modified*/
     || PV0AM100.PVAOCHG1 != PVAREC.PVAOCHG1 /**/
     || PV0AM100.PVAOCHG2 != PVAREC.PVAOCHG2 /**/
     || PV0AM100.PVASCHG1 != PVAREC.PVASCHG1 /**/
     || PV0AM100.PVASCHG2 != PVAREC.PVASCHG2 /**/
     || PV0AM100.PVAINT1 != PVAREC.PVAINT1   /**/
     || PV0AM100.PVAINT2 != PVAREC.PVAINT2   /**/
     || PV0AM100.PVAINT3 != PVAREC.PVAINT3   /**/
     || PV0AM100.PVATQTY != PVAREC.PVATQTY   /**/
     || PV0AW01.PV0AWPAF == "Y")            
      /* IF ADDING FOB OR DUTY THERE MUST NOT BE ANY OTHER LIKE PAYMENTS*/
      /* ALREADY IN THE PAYMENT TABLE.*/
      PV0A-DUP-PMT-TEST();
      if (PVWREC.PVWERRF == "Y")
        set PV0AM100.PVATFOB cursor, bold;
        set PV0AM100.PV0AM-NEW-FREIGHT-AMT cursor, bold;
        set PV0AM100.PVAIVAMT cursor, bold;
        set PV0AM100.PVATDUTY cursor, bold;
      else
        ;
        PV0AW02.PV0AWINV = PV0AM100.PVATFOB         + PV0AM100.PVABANKC         + PVAREC.PVATCOMM         + PV0AM100.PVATDUTY         + PV0AM100.PVABRKRY         + PV0AM100.PVAOCHG1         + PV0AM100.PVAOCHG2         + PV0AM100.PVAINT1         + PV0AM100.PVAINT2         + PV0AM100.PVAINT3;
        /* JKUNDU Changes begin - 08/11/00*/
         /* ADD APPROPRIATE FREIGHT AMOUNT TO TOTAL*/
        /* Tcs changes begin - 01/28/2001*/
        /* IF PV0AM100.PV0AM-NEW-FREIGHT-AMT = 0;*/
        if (PV0AM100.PV0AM-NEW-FREIGHT-AMT not modified)
        /* Tcs changes end - 01/28/2001*/
          PV0AW02.PV0AWINV = PV0AW02.PV0AWINV           + PV0AM100.PVATFRGT;
        else
          PV0AW02.PV0AWINV = PV0AW02.PV0AWINV           + PV0AM100.PV0AM-NEW-FREIGHT-AMT           + PV0AW02.PV0AW-DIFF-FREIGHT-AMT;
        end
        /* JKUNDU Changes end  - 08/11/00*/
        ;
        if (PV0AM100.PVAIVAMT != PV0AW02.PV0AWINV)
          PV0AM100.PV0AM-PV-IVC-AMT-TITLE = "EST IVC AMT:";
          PV0AM100.PV-PMT-IVC-AMT = PV0AW02.PV0AWINV;
          PV0AM100.PV0AM-PVATCOMM-TITLE = "TOTAL COMM:";
          PV0AM100.PVATCOMM = PVAREC.PVATCOMM;
          PVWREC.PVWERRF = "Y";
          set PV0AM100.PVATFOB bold;
          set PV0AM100.PV0AM-NEW-FREIGHT-AMT bold;
          set PV0AM100.PVAIVAMT cursor, bold;
          set PV0AM100.PVADSCT bold;
          set PV0AM100.PVABANKC bold;
          set PV0AM100.PVATDUTY bold;
          set PV0AM100.PVABRKRY bold;
          set PV0AM100.PVAOCHG1 bold;
          set PV0AM100.PVAOCHG2 bold;
          set PV0AM100.PVASCHG1 bold;
          set PV0AM100.PVASCHG2 bold;
          set PV0AM100.PVAINT1 bold;
          set PV0AM100.PVAINT2 bold;
          set PV0AM100.PVAINT3 bold;
          converseLib.validationFailed(176); /* fob + frgt must equal invoice tot*/
        else
          set PV0AM100.PVATFOB normal;
          set PV0AM100.PV0AM-NEW-FREIGHT-AMT normal;
          set PV0AM100.PVAIVAMT normal;
          set PV0AM100.PVADSCT normal;
          set PV0AM100.PVABANKC normal;
          set PV0AM100.PVATDUTY normal;
          set PV0AM100.PVABRKRY normal;
          set PV0AM100.PVAOCHG1 normal;
          set PV0AM100.PVAOCHG2 normal;
          set PV0AM100.PVASCHG1 normal;
          set PV0AM100.PVASCHG2 normal;
          set PV0AM100.PVAINT1 normal;
          set PV0AM100.PVAINT2 normal;
          set PV0AM100.PVAINT3 normal;
        end
      end
    end
  else
    if (PV0AM100.PVOVENDR != "2577") /* not a nissho invoice*/
      if (PV0AM100.PVATFOB != PVAREC.PVATFOB   /* fob modified*/
       || PV0AM100.PVATFRGT != PVAREC.PVATFRGT /* freight modified*/
       || PV0AM100.PVAIVAMT != PVAREC.PVAIVAMT) /* invoice amt modified*/
        PV0AW02.PV0AWINV = PV0AM100.PVATFRGT + PV0AM100.PVATFOB;
        if (PV0AM100.PVAIVAMT != PV0AW02.PV0AWINV)
          PVWREC.PVWERRF = "Y";
          set PV0AM100.PVATFOB cursor, bold;
          set PV0AM100.PVATFRGT cursor, bold;
          set PV0AM100.PVAIVAMT cursor, bold;
          converseLib.validationFailed(161); /* fob + frgt must equal invoice tot*/
        else
          set PV0AM100.PVATFOB normal;
          set PV0AM100.PVATFRGT normal;
          set PV0AM100.PVAIVAMT normal;
        end
      end
    end
  end
  ;
  ;
end // end PV0A633

// Check for Modified Fields
Function PV0A635()
    /* PV0A635*/
   /* 11-09-99  GDECKE  NISSHO CONTINGENCY - SAVE HEADER AMOUNTS*/
  ;
   /* ************************************/
   /* Check For Modified key Inquiry Only Users*/
   /* Call Invoice Hdr D-base If Needed*/
   /* ************************************/
  ;
  if (PV0AM100.PVOVENDR != PVAREC.PVOVENDR /* vend nbr*/
   || PV0AM100.PVOVENDG != PVAREC.PVOVENDG /* vend group*/
   || PV0AM100.PVAIVCID != PVAREC.PVAIVCID) /* inv nbr*/
    PVAREC.PVOVENDR = PV0AM100.PVOVENDR;
    PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
    PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
    set SQLCA empty;
    call "IO5660" ("S ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes}; /* 'select hdr record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* header found*/
      PV0A636();
      PV0A607(); /* vendor name lookup*/
      PVWREC.PVWERRF = "Y"; /* set error flag to redisplay*/
      PV0AW01.PV0AWKEY = "Y"; /* key chg on*/
      PV0AW01.PV0AWADD = "N"; /* add mode off*/
      PVWREC.PVWBLDSC = "N";
      converseLib.validationFailed(16); /* new invoce shown above*/
      set PV0AW01 empty;
      set PVBREC empty;
      PV0AS30();
      PV0AS45();
      PV0A610(); /* pvbrec lookup*/
      call "IO3400" ("D ", SQLCA, XSRREC) {isNoRefresh = yes, isExternal = yes}; /* delscrat*/
      if (SQLCA.VAGen_SQLCODE == 0 /* srcatch pad*/
       || SQLCA.VAGen_SQLCODE == 100)
        COMMAREA.CAUSERA = "  ";
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(44);
          PVWREC.PVWERRF = "Y";
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0A630";
          TA1REC.TA1LOCAT[2] = "READING DB2 PVHDR01";
          TA1REC.TA1TBLVU = "VPVHDR01";
          TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
        PVWREC.PVWERRF = "Y"; /* set error flag to redisplay*/
        PV0AW01.PV0AWFF = "Y"; /* set first time flag*/
        converseLib.validationFailed(2); /* invalid security*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(44);
          PVWREC.PVWERRF = "Y";
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0AS30";
          TA1REC.TA1LOCAT[2] = "READING DB2 PVHDR01";
          TA1REC.TA1TBLVU = "VPVHDR01";
          TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    end
  end
  ;
  ;
  ;
end // end PV0A635

// Check for Modified Fields
Function PV0A636()
    /* PV0A636*/
    /* 11-09-99  GDECKE  NISSHO CONTINGENCY*/
    /* MOVE HEADER AMOUNTS TO SAVE FLDS*/
   /* ************************************/
  ;
  PV0AW02.PVADSCT = PVAREC.PVADSCT;
  PV0AW02.PVABANKC = PVAREC.PVABANKC;
  PV0AW02.PVAINT1 = PVAREC.PVAINT1;
  PV0AW02.PVAINT2 = PVAREC.PVAINT2;
  PV0AW02.PVAINT3 = PVAREC.PVAINT3;
  PV0AW02.PVATCOMM = PVAREC.PVATCOMM;
  PV0AW02.PVAOCHG1 = PVAREC.PVAOCHG1;
  PV0AW02.PVAOCHG2 = PVAREC.PVAOCHG2;
  PV0AW02.PVASCHG1 = PVAREC.PVASCHG1;
  PV0AW02.PVASCHG2 = PVAREC.PVASCHG2;
  PV0AW02.PVABRKRY = PVAREC.PVABRKRY;
  ;
end // end PV0A636

// Determine next action
Function PV0A640()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - STATUS CODE EDIT*/
   /* ***********************/
   /* Determine Next Action*/
   /* ***********************/
  ;
  if (PV0AW01.PV0AWPAF == "Y" /* changes made to hdr*/
   && PV0AW01.PV0AWPA2 != "Y") /* changes made to hdr*/
    if (converseVar.eventKey is pf2)
      converseLib.validationFailed(127); /* pf2 to confirm update*/
      PV0AW01.PV0AWPA2 = "Y"; /* remove flag*/
      PV0AW01.PV0AWPAF = "N"; /* remove flag*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf16)
    PV0A650(); /* send invoice to match and code*/
  else
    if (converseVar.eventKey is pf18)
      PV0A653(); /* send invoice to coding*/
    else
      if (converseVar.eventKey is pf19)
   /* TCS CHANGE BEGINS  12/20/2000*/
       /* MOVE 'UM' TO PVAREC.XIPCD;*/
       /* MOVE 'UM' TO PV0AM100.XIPCD;*/
   /* TCS CHANGE ends    12/20/2000*/
        PV0A657(); /* UPDATE INVOICE HEADER*/
      else
        if (converseVar.eventKey is pf2)
          PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "N";
          PV0A657(); /* update invoice header*/
        else
          if (converseVar.eventKey is pf5
           || converseVar.eventKey is pf6)
            PV0A660(); /* force code or force match*/
          else
            if (converseVar.eventKey is pf17)
              if (PVAREC.XIPCD == "CP"
               || PVAREC.XIPCD == "IC"
               || PVAREC.XIPCD == "MT"
               || PVAREC.XIPCD == "EX"
               || PVAREC.XIPCD == "UM"
               || (PVUREC.PVUCHOIC == 9
               && PVAREC.XIPCD == "IP"))
                PV0A680(); /* reverse pcmrec*/
                if (PVWREC.PVWERRF != "Y")
                  PV0A685(); /* delete pverec*/
                end
              end
              if (PVWREC.PVWERRF != "Y")
                PV0A690(); /* update invoice hdr*/
              end
              if (PVWREC.PVWERRF != "Y")
                PV0A695(); /* load force table*/
              end
            else
              if (converseVar.eventKey is enter)
                PV0A700(); /* Invoice line item*/
              end
            end
          end
        end
      end
    end
  end
end // end PV0A640

// Send Invoice to Match
Function PV0A650()
  ;
   /* **************************************/
   /* Pf16: Invoice sent to Match and Code*/
   /* **************************************/
  ;
  set SQLCA empty;
  ;
  PVZREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVZREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  call "PV5000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0b*/
  PV0AW02.PV0AWSCP = "Y"; /* scratch pad used*/
  ;
  if (PVZREC.PVZMCHER == "1") /* successful match*/
    call "PV6000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0c*/
    if (PVZREC.PVZCODER == "1") /* successful code*/
      converseLib.validationFailed(22);
      PVAREC.XIPCD = "CP";
    else
      if (PVZREC.PVZCODER == "4") /* coding error non tolerance*/
        converseLib.validationFailed(24);
        PVAREC.XIPCD = "IC";
      else
        if (PVZREC.PVZCODER == "3") /* db2 error*/
          converseLib.validationFailed(26);
        else
          if (PVZREC.PVZCODER == "2")
            converseLib.validationFailed(23);
            PVAREC.XIPCD = "IC";
          end
        end
      end
    end
  else
    if (PVZREC.PVZMCHER == "2") /* match error*/
      converseLib.validationFailed(25);
    else
      if (PVZREC.PVZMCHER == "3") /* db2 error*/
        converseLib.validationFailed(27);
      end
    end
  end
  ;
end // end PV0A650

// Send Invoice to Match
Function PV0A653()
  ;
   /* ****************************/
   /* Pf18: Invoice sent to Code*/
   /* ****************************/
  ;
  set SQLCA empty;
  ;
  PVZREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVZREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  PV0AW02.PV0AWSCP = "Y"; /* scratch pad used*/
  ;
  call "PV6000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* call pv0c*/
  if (PVZREC.PVZCODER == "1") /* successful code*/
    converseLib.validationFailed(79);
    PVAREC.XIPCD = "CP";
  else
    if (PVZREC.PVZCODER == "2") /* coding error*/
      converseLib.validationFailed(70);
      PVAREC.XIPCD = "IC";
    else
      if (PVZREC.PVZCODER == "3") /* db2 error*/
        converseLib.validationFailed(26);
      else
        if (PVZREC.PVZCODER == "4") /* db2 error*/
          converseLib.validationFailed(80);
          PVAREC.XIPCD = "IC";
        end
      end
    end
  end
  ;
end // end PV0A653

// Adding Header Screen
Function PV0A655()
   /* ****************************************************************/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - SET STATUS CODE VALUE **/
   /* 05-16-00 JKUNDU  Modify to set the SAMPLE FLAG = 'Y' when   **/
   /* GPC = '03' and PO-TYPE = 'SD'              **/
   /* 08-09-00 JKUNDU  Check New freight amount before moving it  **/
   /* original freight value.                    **/
   /* 08-18-00 JKUNDU  Modify to set the SAMPLE FLAG = 'Y' for    **/
   /* PO-TYPE = 'MP'                             **/
   /* 09-14-00 JKUNDU  Initialized PV0AW02.PV0AW-STAT-CHG-NP-IP-FL**/
   /* to 'Y' while doing update in ADD mode.     **/
   /* 01-10-01 SSANK1  Introduced srgp PV0AS-CHK-PMT-ER to check  **/
   /* if status of entries in payment table is ER**/
   /* before updating status in header to IP.    **/
   /* ***************************************************************/
   /* add Pv0am100*/
   /* ******************/
  ;
   /* move required edits to pvarec*/
  ;
   /* samples flag depends on following logic*/
  if (PV0AM100.XGPCD == "02")
    if (PC6REC.PC4ORTYP == "SS"
     || PC6REC.PC4ORTYP == "PS"
     || PC6REC.PC4ORTYP == "MP"
     || PC6REC.PC4ORTYP == "S3")
      PVAREC.PVASPLFL = "Y"; /* samples flag*/
      PV0AM100.PVASPLFL = "Y";
    else
      PVAREC.PVASPLFL = "N"; /* samples flag*/
      PV0AM100.PVASPLFL = "N";
    end
  else
    if (PV0AM100.XGPCD == "03")
      if (PC6REC.PC4ORTYP == "SS"
       || PC6REC.PC4ORTYP == "PS"
       || PC6REC.PC4ORTYP == "S7"
       || PC6REC.PC4ORTYP == "SX"
       || PC6REC.PC4ORTYP == "SA"
       || PC6REC.PC4ORTYP == "SD"
       || PC6REC.PC4ORTYP == "MP"
       || PC6REC.PC4ORTYP == "SE"
       || PC6REC.PC4ORTYP == "SI"
       || PC6REC.PC4ORTYP == "SM")
        PVAREC.PVASPLFL = "Y"; /* samples flag*/
        PV0AM100.PVASPLFL = "Y";
      else
        PVAREC.PVASPLFL = "N"; /* samples flag*/
        PV0AM100.PVASPLFL = "N";
      end
    else
      PVAREC.PVASPLFL = "N"; /* samples flag*/
      PV0AM100.PVASPLFL = "N";
    end
  end
   /* status, status date, and type code*/
  if (PV0AW01.PV0AWUP2 == "N") /* no errors*/
    if (PVUREC.PVUCHOIC == 9)
      PVAREC.XIPCD = "IP"; /* status*/
      PV0AM100.XIPCD = "IP";
    else
      PVAREC.XIPCD = "UM"; /* status*/
      PV0AM100.XIPCD = "UM";
    end
  else
    PVAREC.XIPCD = "NP"; /* status*/
    PV0AM100.XIPCD = "NP";
  end
   /* check for payment rows with 'ER' before updating header*/
   /* TCS CHANGE BEGINS  01/10/2001*/
  PV0AS-CHK-PMT-ER();
  if (PVWREC.PVWERRF == "Y")
    converseLib.validationFailed(249); /* ROWS IN PAYMENT TABLE WITH STATUS EQ "ER"*/
    PVAREC.XIPCD = "NP"; /* status*/
    PV0AM100.XIPCD = "NP";
  end
   /* TCS CHANGE ENDS    01/10/2001*/
  ;
  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN; /* status chg date*/
  PV0AM100.PVAXIPDT = TA2REC.TA2GRGGN;
  if (PV0AM100.XIVCD == "  ")
    PVAREC.XIVCD = "IV";
    PV0AM100.XIVCD = "IV";
  end
  PVAREC.PVAACRIN = "0"; /* accrual indicator*/
  PV0AM100.PVAACRIN = "0";
  ;
   /* update pvarec*/
  PV0AS37();
  ;
  if (PVUREC.PVUCHOIC == 9) /* IF MENU OPTION 9 SELECTED - NISSHO*/
                                   /* CONTINGENCY*/
    /* JKUNDU Change begins - 09/14/00*/
    /* MOVE 'N' TO PV0AW02.PV0AW-STAT-CHG-NP-IP-FL;*/
    PV0AW02.PV0AW-STAT-CHG-NP-IP-FL = "Y";
    /* JKUNDU Change ends   - 09/14/00*/
    ;
    /* IF THE OTHER-VENDOR FLAGS ARE NOT SET TO N OR Y THEN THIS IS NEW*/
    /* INVOICE, AND THE STMT GRP TO SET FLAGS MUST BE PERFORMED BEFORE*/
    /* ATTEMPTING TO UPDATE THE PAYMENT RECORDS.*/
    if (PV0AW02.PV0AW-OTHR-VNDR-DUTY-PMT-FL == " ")
      PV0A-SENT-PMT-FLAG();
    end
    PV0AS39(); /* UPDATE OTHER CHARGES PAYMENT LINES*/
    PV0AS36(); /* UPDATE FREIGHT, FOB, DUTY PAYMENT*/
                                   /* LINES*/
    if (converseVar.validationMsgNum != 0
     && converseVar.validationMsgNum != 218)
      return;
    end
  end
  ;
  PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
  set SQLCA empty;
  call "IO5660" ("A ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* if user makes additional changes after first pf2 on a new invoice*/
   /* while program still in add mode - then do update of pf header*/
  ;
  if (SQLCA.VAGen_SQLCODE == -803) /* header found--> UPDATE*/
    set SQLCA empty;
    call "IO5660" ("U ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* header found--> UPDATE*/
    PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "0";
    converseLib.validationFailed(28);
    ;
    PV0AM100.PVATFRGT = PVAREC.PVATFRGT;
    /* JKUNDU Changes Begin - 08/09/00*/
    if (PV0AM100.PV0AM-NEW-FREIGHT-AMT == 0)
      PV0AW02.PV0AW-ORIG-FRGT-AMT = PV0AM100.PVATFRGT;
    else
      PV0AW02.PV0AW-ORIG-FRGT-AMT = PV0AM100.PV0AM-NEW-FREIGHT-AMT;
    end
    /* JKUNDU Changes end  - 08/09/00*/
    ;
    PV0AW01.PV0AWPAF = "N"; /* modified flag*/
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "N";
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(44);
    else
      TA1REC.TA1LOCAT[1] = "PV0A655";
      TA1REC.TA1LOCAT[2] = "ADDING DB2 PVHDR01";
      TA1REC.TA1TBLVU = "VPVHDR01";
      TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
      PV0AS97();
    end
  end
  ;
end // end PV0A655

// update Header Screen
Function PV0A657()
   /* ****************************************************************/
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UPDATE VPVPMT01 LINES **/
   /* FOR FREIGHT, FOB AND DUTY.                 **/
   /* 08-11-00 JKUNDU  Check New freight amount before adding it  **/
   /* to the total invoice amount.               **/
   /* 12-20-00 SSANK1  Introduced srgp PV0AS-CHK-PMT-SN to check  **/
   /* status of entries in payment table is SN   **/
   /* before updating status in header to UM.    **/
   /* ***************************************************************/
   /* update Pv0am100                                             **/
   /* ***************************************************************/
  ;
   /* TCS CHANGE BEGINS  12/20/2000*/
   /* check for payment rows with 'SN' before updating header*/
  if (converseVar.eventKey is pf19)
    PV0AS-CHK-PMT-SN();
    if (PVWREC.PVWERRF == "Y")
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(246); /* ROWS IN PAYMENT TABLE WITH STATUS NE*/
                                   /* "SN"*/
      end
      return;
    end
    PVAREC.XIPCD = "UM";
    PV0AM100.XIPCD = "UM";
  end
   /* TCS CHANGE ENDS    12/20/2000*/

  ;
  PV0AS35();
  if (PVWREC.PVWERRF == "Y")
    return;
  end
  ;
  if (PVUREC.PVUCHOIC == 9) /* IF MENU OPTION 9 SELECTED - NISSHO*/
                                   /* CONTINGENCY*/
    ;
    /* IF THE OTHER-VENDOR FLAGS ARE NOT SET TO N OR Y THEN THIS IS NEW*/
    /* INVOICE, AND THE STMT GRP TO SET FLAGS MUST BE PERFORMED BEFORE*/
    /* ATTEMPTING TO UPDATE THE PAYMENT RECORDS.*/
    if (PV0AW02.PV0AW-OTHR-VNDR-DUTY-PMT-FL == " ")
      PV0A-SENT-PMT-FLAG();
    end
    PV0AS39(); /* UPDATE OTHER CHARGES PAYMENT LINES*/
    PV0AS36(); /* UPDATE FREIGHT, FOB, DUTY PAYMENT*/
                                   /* LINES*/
    if (converseVar.validationMsgNum != 0
     && converseVar.validationMsgNum != 218) /* MESSAGE 218 IS FOR AUTOMATIC HDR*/
                                   /* UPDATE*/
      return;
    end
  end
  ;
   /* check for payment rows with 'ER' before updating header*/
   /* TCS CHANGE BEGINS  01/10/2001*/
  PV0AS-CHK-PMT-ER();
  if (PVWREC.PVWERRF == "Y")
    converseLib.validationFailed(249); /* ROWS IN PAYMENT TABLE WITH STATUS EQ*/
                                   /* "ER"*/
    PVAREC.XIPCD = "NP"; /* status*/
    PV0AM100.XIPCD = "NP";
  end
   /* TCS CHANGE ENDS    01/10/2001*/
  PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
  set SQLCA empty;
  call "IO5660" ("U ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* header found--> UPDATE*/
    PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "0";
    PV0AW01.PV0AWPAF = "N"; /* modified flag*/
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "N";
    ;
    PV0AM100.PVATFRGT = PVAREC.PVATFRGT;
    /* JKUNDU Changes begin - 08/09/00*/
    if (PV0AM100.PV0AM-NEW-FREIGHT-AMT == 0)
      PV0AW02.PV0AW-ORIG-FRGT-AMT = PV0AM100.PVATFRGT;
    else
      PV0AW02.PV0AW-ORIG-FRGT-AMT = PV0AM100.PV0AM-NEW-FREIGHT-AMT;
    end
    /* JKUNDU Changes end  - 08/09/00*/
    ;
    if (PV0AW01.PV0AWUP2 != "Y")
      converseLib.validationFailed(28);
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
      converseLib.validationFailed(29);
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(44);
      else
        TA1REC.TA1LOCAT[1] = "PV0A657";
        TA1REC.TA1LOCAT[2] = "UPDATE DB2 PVHDR01";
        TA1REC.TA1TBLVU = "VPVHDR01";
        TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
        PV0AS97();
      end
    end
  end
  ;
end // end PV0A657

// Force match Or Force Code
Function PV0A660()
  ;
   /* ***********************************/
   /* pf5 or pf6-->Force Match and Code*/
   /* ***********************************/
  ;
  PVZREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVZREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID; /* move user id*/
  ;
  COMMAREA.CAUSERA = PVZREC.PVZGRP;
   /* JKUNDU CHANGES BEGINS - 02/04/00*/
  ;
  COMMAREA.CA-USER-WORKAREA-2K-B = PVUREC.PVUGROUP;
  ;
   /* JKUNDU CHANGES ENDS - 02/04/00*/
  ;
  ;
  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "PV0D"; /* calls online force match app*/
    XSEXIT();
    converseLib.validationFailed(30);
  else
    if (converseVar.eventKey is pf6)
      COMMAREA.CATOAP = "PV0E"; /* calls online force code app*/
      XSEXIT();
      converseLib.validationFailed(31);
    end
  end
  ;
  ;
end // end PV0A660

// Send Invoice to Cancel
Function PV0A680()
  ;
   /* ******************************/
   /* Pf17: Invoice sent to Cancel*/
   /* ******************************/
  ;
  set SQLCA empty;
  ;
  PVZREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key field*/
  PVZREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVZREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVZREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  call "PV7000" (PVZREC, SQLCA) {isNoRefresh = yes, isExternal = yes};
  PV0AW02.PV0AWSCP = "Y"; /* scratch pad used*/
  ;
  if (PVZREC.PVZMCHER == "1")
    /* NEXT SENTENCE*/
  else
    PVWREC.PVWERRF = "Y"; /* error*/
    converseLib.validationFailed(149); /* cancel has failed*/
  end
  ;
end // end PV0A680

// Delete Pverec
Function PV0A685()
  ;
   /* ****************/
   /* Delete Pverec*/
   /* ****************/
  ;
  PVEREC.PVOVENDR = PV0AM100.PVOVENDR; /* move key*/
  PVEREC.PVOVENDG = PV0AM100.PVOVENDG; /* into pverec*/
  PVEREC.PVAIVCID = PV0AM100.PVAIVCID;
  set SQLCA empty;
  call "IO0330" ("S1", SQLCA, PVEREC) {isNoRefresh = yes, isExternal = yes}; /* select pverec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* pverec found*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(44);
      PVWREC.PVWERRF = "Y";
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A685";
      TA1REC.TA1LOCAT[2] = "READING DB2 VRUSED01";
      TA1REC.TA1TBLVU = "VRUSED01";
      TA1REC.TA1TBLKE = PVEREC.PVAIVCID;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  PV0AW02.PV0AWIDX = 0;
  while (SQLCA.VAGen_SQLCODE == 0)
    PV0AW02.PV0AWIDX = PV0AW02.PV0AWIDX + 1;
    call "IO0330" ("N1", SQLCA, PVEREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      PV0A686(); /* process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        PV0AW02.PV0AWIMX = PV0AW02.PV0AWIDX - 1; /* set max lines of fypo*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
          set PV0AW01 empty; /* clear working storage*/
          set PVAREC empty;
          set PVAREC empty;
          converseLib.validationFailed(44);
          return;
        else
          TA1REC.TA1LOCAT[1] = "PV0A685";
          TA1REC.TA1LOCAT[2] = "FETCH ONE LINE ITEM";
          TA1REC.TA1TBLVU = "VRUSED01";
          TA1REC.TA1TBLKE = PVEREC.PVAIVCID;
          PV0AS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    end
  end
  ;
  ;
  call "IO0330" ("C1", SQLCA, PVEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A685";
      TA1REC.TA1LOCAT[2] = "CLOSE ";
      TA1REC.TA1TBLVU = "VRUSED01";
      TA1REC.TA1TBLKE = PVEREC.PVAIVCID;
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  ;
end // end PV0A685

// Process Nxt Mth Rec
Function PV0A686()
  ;
   /* ******************************************/
   /* Pverec is loaded: Delete each line item*/
   /* ******************************************/
  ;
  ;
  call "IO0330" ("D2", SQLCA, PVEREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0AW01 empty; /* clear working storage*/
      set PVAREC empty;
      set PVAREC empty;
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "PV0A686";
      TA1REC.TA1LOCAT[2] = "DELETE PVEREC";
      TA1REC.TA1TBLVU = "VRUSED01";
      PV0AS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end PV0A686

// Update Invoice Status Cancel
Function PV0A690()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - SET STATUS CODE VALUE*/
   /* ************************/
   /* Update Invoice Header*/
   /* For Cancel*/
   /* ************************/
  PV0AS35(); /* load pvarec*/
  if (PVUREC.PVUCHOIC == 9)
    if (PV0AM100.PVATFOB == 0
     && PV0AM100.PVATFRGT == 0
     && PV0AM100.PV0AM-NEW-FREIGHT-AMT == 0
     && PV0AM100.PVAIVAMT == 0
     && PV0AM100.PVADSCT == 0
     && PV0AM100.PVABANKC == 0
     && PV0AM100.PVATDUTY == 0
     && PV0AM100.PVABRKRY == 0
     && PV0AM100.PVAOCHG1 == 0
     && PV0AM100.PVAOCHG2 == 0
     && PV0AM100.PVASCHG1 == 0
     && PV0AM100.PVASCHG2 == 0
     && PV0AM100.PVAINT1 == 0
     && PV0AM100.PVAINT2 == 0
     && PV0AM100.PVAINT3 == 0)
      PVAREC.XIPCD = "CX";
    else
      PVAREC.XIPCD = "IP";
    end
  else
    PVAREC.XIPCD = "CX"; /* set hdr to cancel*/
  end
  ;
  PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "Y";
  set SQLCA empty;
  call "IO5660" ("U ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* header found--> UPDATE*/
    PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "0";
    PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "0";
    converseLib.validationFailed(34);
    PV0AW02.PV0AW-DETAIL-UPDATED-FL = "N";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
      converseLib.validationFailed(140);
      PVWREC.PVWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        PVWREC.PVWERRF = "Y";
        converseLib.validationFailed(44);
      else
        PVWREC.PVWERRF = "Y";
        TA1REC.TA1LOCAT[1] = "PV0A690";
        TA1REC.TA1LOCAT[2] = "UPDATING DB2 PVHDR01";
        TA1REC.TA1TBLVU = "VPVHDR01";
        TA1REC.TA1TBLKE = PVAREC.PVOVENDR;
        PV0AS97();
      end
    end
  end
  ;
  ;
  ;
  ;
end // end PV0A690

// Load Force Reason Table
Function PV0A695()
  ;
   /* *******************/
   /* Load Force Table*/
   /* *******************/
  ;
  ;
  PVLREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVLREC.PVOVENDR = PV0AM100.PVOVENDR;
  PVLREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVLREC.XFACD = PV0AM100.XFACD;
  PVLREC.XXXUSID1 = COMMAREA.CAUSERID;
  PVLREC.XFAIND = XFATBL.XFAIND[sysVar.arrayIndex];
  PVLREC.PVBLNINB = 0;
  PVLREC.PVLFRAMT = 0;
  PVLREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVLREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  set SQLCA empty;
  call "IO5440" ("A ", SQLCA, PVLREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
      converseLib.validationFailed(141);
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(44);
      else
        TA1REC.TA1LOCAT[1] = "PV0A690";
        TA1REC.TA1LOCAT[2] = "UPDATING DB2 VFORCE01";
        TA1REC.TA1TBLVU = "VPVFORCE1";
        TA1REC.TA1TBLKE = PVAREC.PVAIVCID;
        PV0AS97();
      end
    end
  end
  ;
  ;
end // end PV0A695

// Start of Line Item Process
Function PV0A700()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - FOB AMOUNT CAN BE ZERO*/
   /* ***************************************/
   /* Process Line Items: Screen Pv0am200*/
   /* ***************************************/
  ;
   /* Load Pvbrec*/
  ;
   /* check values of fob amt, qty, and inv amt*/
   /* if any are zero we need to return to the*/
   /* screen*/
  if (PVUREC.PVUCHOIC != 9)
    if (PV0AM100.PVAIVAMT == 0
     || PV0AM100.PVATQTY == 0
     || PV0AM100.PVATFOB == 0)
      if (PV0AM100.XIPCD == "  "
       || PV0AM100.XIPCD == "IP"
       || PV0AM100.XIPCD == "UM"
       || PV0AM100.XIPCD == "NP")
        PVWREC.PVWERRF = "Y";
        set PV0AM100.PVAIVAMT cursor, bold;
        set PV0AM100.PVATFOB bold;
        set PV0AM100.PVATQTY bold;
        converseLib.validationFailed(143);
        return;
      end
    end
  end
  ;
  ;
   /* if line item screen was being processed*/
   /* and the user switches back to header screen*/
   /* we want to return directly to that screen.*/
  ;
  if (PV0AW02.PV0AWBLD == "Y"
   && PV0AM100.PVOVENDR == PV0AM200.PVOVENDR
   && PV0AM100.PVOVENDG == PV0AM200.PVOVENDG
   && PV0AM100.PVAIVCID == PV0AM200.PVAIVCID)
    PV0AW02.PV0AWBLD = "N";
    PVWREC.PVWBLDSC = "Y";
    /* next sentence*/
  else
    PVWREC.PVWLINEX = 0;
    PV0AM200.PVOVENDR = PVAREC.PVOVENDR;
    PV0AM200.PVOVENDG = PVAREC.PVOVENDG;
    PV0AM200.PVAIVCID = PVAREC.PVAIVCID;
    PV0AM200.PVAIVAMT = PV0AM100.PVAIVAMT;
    PV0AM200.PC3PONBR = PV0AW01.PC3PONBR[1];
    PV0AM200.PVOVNDNM = PV0AM100.PVOVNDNM;
    PV0AM200.PVTODAY = TA2REC.TA2GRGGN;
    PV0AM200.PVTIME = PV0AW02.TA2TIME;
    ;
    while (PVWREC.PVWLINEX < 7
     && PVWREC.PVWLINEX < PV0AW01.PV0AWLIN)
      PV0AS51();
    end
    ;
    set PV0AM200.SY1STNBR[1] cursor; /* positioned*/
     /* SET PV0AM200.CATOAP CURSOR    ; cursor positioned*/
    PV0AW01.PV0AWUPF = "N"; /* update flag*/
    PVWREC.PVWBLDSC = "Y"; /* build screen*/
    PV0AW01.PV0AWCLN = 7; /* initialize current line item*/
    PV0AW01.PV0AW1ST = 0; /* initialize one less than 1st line*/
  end
  ;
  while (PVWREC.PVWBLDSC == "Y")
    PVWREC.PVWLINEX = 0; /* set all needed fields to autoskip*/
    while (PVWREC.PVWLINEX < 7)
      PV0AS52();
    end
    PV0A200(); /* converse Line Item Screen*/
  end
  ;
end // end PV0A700

// check for bank code
Function PV0AS-CHK-BNK-CD()
   /* ***************************************************************/
   /* 01-22-01 bparan  Check for bank code in VPOITM04 table      **/
   /* for updating the FB status in payment      **/
   /* table to 'ON'                              **/
   /* ***************************************************************/
  ;
  PVWREC.PVWCPROC = "PV0AS-CHK-BNK-CD"; /* set current proc name*/
  ;
  VPOITM04.PC3PONBR = PVBREC.PC3PONBR;
  VPOITM04.XGPCD = PVBREC.XGPCD;
  VPOITM04.SY1STNBR = PVBREC.SY1STNBR;
  VPOITM04.SY2CLRID = PVBREC.SY2CLRID;
  VPOITM04.XDMCD = PVBREC.XDMCD;
  VPOITM04.XQACD = PVBREC.XQACD;
  VPOITM04.PC2CUXID = PVBREC.PC2CUXID;
  ;
  PVYREC.PVYFNC = "SC";
  ;
  set SQLCA empty;
  ;
  call "VPOITM04" (PVYREC, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "SC     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VPOITM04 "; /* io module*/
    TA1REC.TA1DBASE = "DPRODC"; /* database*/
    TA1REC.TA1TBLVU = "VPOITM04"; /* table view*/
    PV0AS97(); /* abend routine*/
  end
  ;
  if (VPOITM04.XIB-IBANK-CD == " "
   || VPOITM04.XIB-IBANK-CD == "NOA"
   || VPOITM04.XIB-IBANK-CD == "OAM")
    if (PV0AW02.XIP-IVC-STAT-CD == "UN")
      PV0AW02.XIP-IVC-STAT-CD = "ON";
    end
  end
  ;
end // end PV0AS-CHK-BNK-CD

// check error st in payment
Function PV0AS-CHK-PMT-ER()
   /* ***************************************************************/
   /* 12-20-00 ssank1  Check for status of rows in PVPMT01        **/
   /* before updating the header status to "IP"  **/
   /* ***************************************************************/
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
   /* OPEN CURSOR FOR PAYMENT RECORDS*/
  PVYREC.PVYFNC = "S1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    /* FETCH LINES FROM VPVPMT01*/
    PVYREC.PVYFNC = "N1";
    XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VPVPMT01.XIP-IVC-STAT-CD == "ER")
        PVWREC.PVWERRF = "Y";
      end
    end
  end
  ;
   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/
  ;
  ;
end // end PV0AS-CHK-PMT-ER

// check SN st in payment
Function PV0AS-CHK-PMT-SN()
   /* ***************************************************************/
   /* 12-20-00 ssank1  Check for status of rows in PVPMT01        **/
   /* before updating the header status to "UM"  **/
   /* ***************************************************************/
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  if (PV0AM100.PVAFDIND == "D")
    if (PV0AM100.PVAACRSP in PV0AT01.PV-IVC-ACCT-RSPIND)
      if (PV0AT01.FOB-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "FB";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100)
          converseLib.validationFailed(250);
          PVWREC.PVWERRF = "Y";
        end
        if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.FR-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "FR";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100)
          /* next sentence*/
        end
        if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.DT-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "DT";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100)
            /* next sentence*/
        end
        if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.CM-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "CM";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
         || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.BF-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "BF";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100)
          /* next sentence*/
        end
        if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.BC-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "BC";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
        ) /* next sentence*/
        end
        if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.MC-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "MC";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
         || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.I1-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "I1";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
         || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.I2-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "I2";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
         || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
      if (PV0AT01.I3-FLAG[sysVar.arrayIndex] == "Y")
        VPVPMT01.XPV-IVC-TYP-CD = "I3";
        PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
        if (SQLCA.VAGen_SQLCODE == +100
         || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
          PVWREC.PVWERRF = "Y";
        end
      end
    end
  else
    if (PV0AM100.PVAFDIND == "F")
      if (PV0AM100.PVAACRSP in PV0AT02.PV-IVC-ACCT-RSPIND)
        if (PV0AT02.FOB-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "FB";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100)
            converseLib.validationFailed(250);
            PVWREC.PVWERRF = "Y";
          end
          if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.FR-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "FR";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100)
            if (PVAREC.PVASPLFL == "Y")
              /* next sentence*/
            else
              converseLib.validationFailed(251);
              PVWREC.PVWERRF = "Y";
            end
          end
          if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.DT-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "DT";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100)
            if (PVAREC.PVASPLFL == "Y")
              /* next sentence*/
            else
              converseLib.validationFailed(252);
              PVWREC.PVWERRF = "Y";
            end
          end
          if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.CM-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "CM";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.BF-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "BF";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100)
            if (PVAREC.PVASPLFL == "Y")
              /* next sentence*/
            else
              converseLib.validationFailed(253);
              PVWREC.PVWERRF = "Y";
            end
          end
          if ((SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.BC-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "BC";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.MC-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "MC";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.I1-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "I1";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.I2-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "I2";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
        if (PV0AT02.I3-FLAG[sysVar.arrayIndex] == "Y")
          VPVPMT01.XPV-IVC-TYP-CD = "I3";
          PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
          PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
          if (SQLCA.VAGen_SQLCODE == +100
           || (SQLCA.VAGen_SQLCODE == 0 && VPVPMT01.XIP-IVC-STAT-CD != "SN"))
            PVWREC.PVWERRF = "Y";
          end
        end
      end
    end
  end
  ;
end // end PV0AS-CHK-PMT-SN

// fetch row from vgcoa001
Function PV0AS-F-VGCOA001()
  ;
  PVWREC.PVWCPROC = "PV0AS-F-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
      /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = SY1REC.XBCCD;
  end
  ;
   /* open a cursor on VGCOA001 using GA-GLBL-ACCT-ID*/
  ;
  call "VGCOA001" ("S3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    PV0AS97(); /* abend routine*/
  end
  ;
   /* FETCH THE FIRST ROW FROM VGCOA001*/
  ;
  call "VGCOA001" ("N3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    PV0AS97(); /* abend routine*/
  end
  ;
    /* move the old style gl-gen-led-acct to glarec*/
  ;
  GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
  GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
  GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
  GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
  GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  ;
   /* close the vgcoa001 cursor*/
  ;
  call "VGCOA001" ("C3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    PV0AS97(); /* abend routine*/
  end
  ;
end // end PV0AS-F-VGCOA001

// Load Pvarec for Update
Function PV0AS-GET-CURR-FRT()
   /* Maintenance log:*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - GET CURRENT FRIEGHT PAYMENT AMT*/
   /* ******************************************************/
  ;
  ;
   /* UPDATE FREIGHT PAYMENT LINE - TYPE CODE 'FR'*/
  ;
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "FR";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100 /* PAYMENT NOT FOUND - ADD THE LINE*/
   || VPVPMT01.XIP-IVC-STAT-CD == "CX")
    PV0AM100.PV0AM-NEW-FREIGHT-AMT = 0;
    PV0AW02.PV0AW-ORIG-FRGT-AMT = 0;
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      PV0AM100.PV0AM-NEW-FREIGHT-AMT = VPVPMT01.PV-PMT-IVC-AMT;
      PV0AW02.PV0AW-ORIG-FRGT-AMT = VPVPMT01.PV-PMT-IVC-AMT;
    end
  end
  ;
end // end PV0AS-GET-CURR-FRT

// select unique from vgcoa001
Function PV0AS-S-VGCOA001()
  ;
  PVWREC.PVWCPROC = "PV0AS-S-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
      /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = SY1REC.XBCCD;
  end
  ;
  call "VGCOA001" ("S1", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  XXXMSG = " ";
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      converseLib.validationFailed(175); /* send message non unique row found*/
      PV0AW-GCOA-TEXT-2 = "MULTIPLE GLS FOUND FIRST CHOSEN - ";
      PV0AW-GCOA-KEY-2 = VINTGL02.GA-GLBL-ACCT-ID[1];
      move PV0AW-GCOA-MESSAGE-2 to XXXMSG withV60Compat;
      PV0AS-F-VGCOA001();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        PV0AW-GCOA-NOT-FOUND = "Y"; /* set not found flag*/
        converseLib.validationFailed(174); /* send message row not found*/
        PVWREC.PVWERRF = "Y"; /* set error flag*/
        PV0AW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
        PV0AW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        move PV0AW-GCOA-MESSAGE to XXXMSG withV60Compat;
      else
        TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
        TA1REC.TA1DBASE = "DGENLD"; /* database*/
        TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
        PV0AS97(); /* abend routine*/
      end
    end
  end
  ;
end // end PV0AS-S-VGCOA001

// Initialization
Function PV0AS00()
   /* 10-21-99  GDECKE  NISSHO CONTINGENCY - SAVE TIME IN PV0AW01*/
   /* *******************/
    /* Initialize PV0A*/
   /* *********************************************************/
   /* 08-10-94 bcourt  set max # line items to 300, to match*/
   /* # occurs of pv0awlin.*/
   /* 08-19-94 BCourt  change 300 to +300. move pv0awmax to w02.*/
   /* 05-08-98 SARUMU  Current date is stored in a working storage for*/
   /* later use - PV0AW02.PV0AWCDT*/
   /* *********************************************************/
  ;
   /* clear working storage and screen records*/
  ;
  set PVAREC empty;
  set PVBREC empty;
  set PVWREC empty;
  set PCMREC empty;
  set PC2REC empty;
  set PC3REC empty;
  set PVOREC empty;
  set XSRREC empty;
  set PVCREC empty;
  set PVDREC empty;
  set PVEREC empty;
  set SY1REC empty;
  set FY1REC empty;
  set SY2REC empty;
  set SY4REC empty;
  set PC6REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set PVYREC empty;
  set PV0AW01 empty;
  set PV0AW02 empty;
  set PV0AM100 initial;
  set PV0AM200 initial;
  PVWREC.PVWEOAF = "N"; /* initialize end flag*/
  PVWREC.PVWBLDSC = "N"; /* initialize build screen*/
  PV0AW01.PV0AWKEY = "N"; /* initialize key change*/
  PV0AW01.PV0AWFF = "Y"; /* first time flag*/
  PV0AW01.PV0AW-GCOA-NOT-FOUND = "N"; /* initialize not found flag*/
  PV0AW02.PV0AW-DETAIL-UPDATED-FL = "N";
  PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "N";
  PV0AW02.PV0AW-NEW-INVOICE-FL = "N";
  PV0AW02.PV0AW-FIRST-TIME-TR0H-FL = "Y";
  PV0AW02.PV0AW-FIRST-TIME-QTY-MSG = "0";
  PV0AW02.PV0AW-FIRST-TIME-FOB-MSG = "0";
  PV0AW02.PV0AW-FIRST-TIME-DUTY-MSG = "0";
  ;
    /* date routine*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PV0AW02.TA2TIME = TA2REC.TA2TIME;
    PV0AM100.PVTODAY = TA2REC.TA2GRGGN;
    PV0AM100.PVTIME = TA2REC.TA2TIME;
    PV0AM200.PVTODAY = PV0AM100.PVTODAY;
    PV0AM200.PVTIME = PV0AW02.TA2TIME;
    /* TCS change begin 05/08/98*/
    PV0AW02.PV0AWCDT = TA2REC.TA2GRGGN;
    /* TCS change end 05/08/98*/
  end
  ;
    /* max # line items*/
  PV0AW02.PV0AWMAX = +300;
  ;
  ;
end // end PV0AS00

// Checking from application
Function PV0AS10()
   /* 10-20-99  GDECKE  NISSHO CONTINGENCY - TAKE PVUREC FROM COMMAREA*/
   /* ***************************************************/
    /* This segment checks the from application       **/
    /* to see where we are in our processing and      **/
    /* display appropiate messages                    **/
   /* ***************************************************/
  ;
  if (COMMAREA.CAFROMAP == "PV0B") /* FROM PV0B APPLICATION*/
    PVUREC.PVUGROUP = COMMAREA.CAUSERA;
    if (PVUREC.PVUCHOIC == 9)
      PV0AM100.PVAIVCID = PVUREC.PV-IVC-ID; /* inv nbr*/
      PV0AM100.PVOVENDR = PVUREC.PV-MSA-VEND-NBR; /* vend nbr*/
      PV0AM100.PVOVENDG = PVUREC.PV-MSA-VEND-GRP; /* vend group*/
      PV0AM100.PV0AM-PMT-VEND-TITLE = "VENDOR IVC #:";
      PV0AM100.PV0AM-FACTORY-IVC-TITLE = "FACTORY";
      PV0AM100.PV-PMT-VEND-IVC-ID = PVUREC.PV-PMT-VEND-IVC-ID;
      PV0AM100.PV-PMT-VEND-NBR = PVUREC.PV-PMT-VEND-NBR;
      PV0AM100.PV-PMT-VEND-GRP = PVUREC.PV-PMT-VEND-GRP;
      if (PVUREC.PV-IVC-ID == " "
       || PVUREC.PV-MSA-VEND-NBR == " "
       || PVUREC.PV-PMT-VEND-IVC-ID == " "
       || PVUREC.PV-PMT-VEND-NBR == " ")
        converseLib.validationFailed(185);
      end
    end
  else
    ;
    if (COMMAREA.CAFROMAP == "TR0H") /* FROM PV0B APPLICATION*/
      PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "N";
      /* MOVE COMMAREA.CAUSERA TO PVUREC.PVUGROUP;*/
      /* the pvurec was stored in commarea.cu-user-work-area-2k-b*/
      PVUREC.PVUGROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
      COMMAREA.CAUSERA = PVUREC.PVUGROUP;
      if (PVUREC.PVUCHOIC == 9)
        PV0AM100.PVAIVCID = PVUREC.PV-IVC-ID; /* inv nbr*/
        PV0AM100.PVOVENDR = PVUREC.PV-MSA-VEND-NBR; /* vend nbr*/
        PV0AM100.PVOVENDG = PVUREC.PV-MSA-VEND-GRP; /* vend group*/
        PV0AM100.PV0AM-PMT-VEND-TITLE = "VENDOR IVC #:";
        PV0AM100.PV0AM-FACTORY-IVC-TITLE = "FACTORY";
        PV0AM100.PV-PMT-VEND-IVC-ID = PVUREC.PV-PMT-VEND-IVC-ID;
        PV0AM100.PV-PMT-VEND-NBR = PVUREC.PV-PMT-VEND-NBR;
        PV0AM100.PV-PMT-VEND-GRP = PVUREC.PV-PMT-VEND-GRP;
        if (PVUREC.PV-IVC-ID == " "
         || PVUREC.PV-MSA-VEND-NBR == " "
         || PVUREC.PV-PMT-VEND-IVC-ID == " "
         || PVUREC.PV-PMT-VEND-NBR == " ")
          converseLib.validationFailed(185);
        end
      end
    else
      if (COMMAREA.CAFROMAP == "PV0E") /* from pv0e application*/
        PVZREC.PVZGRP = COMMAREA.CAUSERA;
        PV0AM100.PVOVENDR = PVZREC.PVOVENDR; /* vend nbr*/
        PV0AM100.PVOVENDG = PVZREC.PVOVENDG; /* vend group*/
        PV0AM100.PVAIVCID = PVZREC.PVAIVCID; /* inv nbr*/
        if (PVZREC.PVZCODER == " ") /* review*/
          converseLib.validationFailed(118);
        else
          if (PVZREC.PVZCODER == "1") /* success*/
            converseLib.validationFailed(79);
          end
        end
      else
        if (COMMAREA.CAFROMAP == "PV0D") /* from pv0d application*/
          /* JKUNDU CHANGES BEGINS - 02/04/00*/
          /* MOVE COMMAREA.CAUSERA TO PVZREC.PVZGRP;*/
          /* MOVE PVZREC.PVOVENDR TO PV0AM100.PVOVENDR;/* vend nbr*/
          /* MOVE PVZREC.PVOVENDG TO PV0AM100.PVOVENDG;/* vend group*/
          /* MOVE PVZREC.PVAIVCID TO PV0AM100.PVAIVCID;/* inv nbr*/
          PVUREC.PVUGROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
          if (PVUREC.PVUCHOIC == 9)
            PV0AM100.PVAIVCID = PVUREC.PV-IVC-ID; /* inv nbr*/
            PV0AM100.PVOVENDR = PVUREC.PV-MSA-VEND-NBR; /* vend nbr*/
            PV0AM100.PVOVENDG = PVUREC.PV-MSA-VEND-GRP; /* vend group*/
            PV0AM100.PV0AM-PMT-VEND-TITLE = "VENDOR IVC #:";
            PV0AM100.PV0AM-FACTORY-IVC-TITLE = "FACTORY";
            PV0AM100.PV-PMT-VEND-IVC-ID = PVUREC.PV-PMT-VEND-IVC-ID;
            PV0AM100.PV-PMT-VEND-NBR = PVUREC.PV-PMT-VEND-NBR;
            PV0AM100.PV-PMT-VEND-GRP = PVUREC.PV-PMT-VEND-GRP;
          /* JKUNDU CHANGES ENDS  - 02/04/00*/
            if (PVZREC.PVZMCHER == " " /* no processing occurred*/
             && PVZREC.PVZCODER == " ") /* in pv0d*/
              converseLib.validationFailed(119);
            else
              if (PVZREC.PVZMCHER == "1")
                if (PVZREC.PVZCODER == "1")
                  converseLib.validationFailed(22); /* successful match and code*/
                else
                  if (PVZREC.PVZCODER == "2")
                    converseLib.validationFailed(120);
                    PVAREC.XIPCD = "IC";
                  else
                    if (PVZREC.PVZCODER == "3")
                      converseLib.validationFailed(26); /* fatal coding error*/
                    else
                      if (PVZREC.PVZCODER == "4")
                        converseLib.validationFailed(121);
                        PVAREC.XIPCD = "IC";
                      end
                    end
                  end
                end
              else
                if (PVZREC.PVZMCHER == "2"
                 && PVZREC.PVZCODER == " ")
                  converseLib.validationFailed(129);
                  PVAREC.XIPCD = "UM";
                else
                  if (PVZREC.PVZMCHER == "3"
                   && PVZREC.PVZCODER == " ")
                    converseLib.validationFailed(27); /* fatal matching error*/
                  end
                end
              end
            end
          end /* /JKUNDU CHANGE - 02/04/00*/
        else
          converseLib.validationFailed(122); /* 'Enter Key And Process'*/
          set PVZREC empty;
        end
      end
    end
  end
end // end PV0AS10

// Checking from application
Function PV0AS11()
   /* 11-02-99  GDECKE  NISSHO CONTINGENCY*/
   /* FORCE DISPLAY OF FIRST SCREEN WHEN CONTROL*/
   /* PASSED FROM PV0B - WITHOUT USER PRESSING ENTER*/
   /* JKUNDU  CHANGED*/
   /* ***************************************************/
    /* PV0AS11 - BUILD PV0AM100 AFTER XFER FROM PV0B  **/
    /* **/
    /* **/
   /* ***************************************************/
  ;
  if (COMMAREA.CAFROMAP == "PV0B") /* FROM PV0B APPLICATION*/
      /* MOVE COMMAREA SAVED DATA TO PVUREC.PVUGROUP;*/
      /* the pvurec was stored in commarea.CAUSERA*/
    PVUREC.PVUGROUP = COMMAREA.CAUSERA;
  end
  ;
  if (COMMAREA.CAFROMAP == "TR0H") /* FROM TR0H APPLICATION*/
    PV0AW02.PV0AW-TRANSPORTATION-REQ-FL = "N";
      /* MOVE COMMAREA SAVED DATA TO PVUREC.PVUGROUP;*/
      /* the pvurec was stored in commarea.cu-user-work-area-2k-b*/
    PVUREC.PVUGROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
    COMMAREA.CAUSERA = PVUREC.PVUGROUP;
  end
   /* JKUNDU CHANGE BEGINS - 02-06-00*/
  if (COMMAREA.CAFROMAP == "PV0D") /* FROM PV0D APPLICATION*/
      /* MOVE COMMAREA SAVED DATA TO PVUREC.PVUGROUP;*/
      /* the pvurec was stored in commarea.cu-user-work-area-2k-b*/
    PVUREC.PVUGROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
    COMMAREA.CAUSERA = PVUREC.PVUGROUP;
  end
   /* JKUNDU CHANGE ENDS - 02-06-00*/
  ;
  if (COMMAREA.CAFROMAP == "PV0B" /* FROM PV0B APPLICATION*/
   || COMMAREA.CAFROMAP == "PV0D" /* FROM PV0D APPLICATION*/
   || COMMAREA.CAFROMAP == "TR0H" /* FROM TR0H APPLICATION*/
   && PVUREC.PVUCHOIC == 9)      
    set PV0AM100.PVAIVCDT cursor; /* align cursor*/
    PV0AW01.PV0AWPAF = "N"; /* screen modification flag*/
    PVWREC.PVWERRF = "N"; /* error flag*/
    PV0A400(); /* check authority*/
    if (PVWREC.PVWERRF == "N")
      PV0A420(); /* check pf keys*/
    else
      return;
    end
    ;
    ;
    if (PVWREC.PVWERRF == "Y") /* error marked redisplay screen*/
      return;
    else
      if (PV0AW01.PV0AWFF == "Y") /* first time through flag*/
        PV0A600(); /* look for current invoice*/
        PV0A605(); /* vendor,security, and data move*/
        ;
        if (PVUREC.PVUCHOIC == 9)
          PV0AS-GET-CURR-FRT(); /* GET FREIGHT ON CURRENT FCTY,VEND IVC*/
        end
        ;
        if (PVWREC.PVWERRF == "Y") /* start application over*/
          PV0AW01.PV0AWFF = "Y"; /* reset first time flag*/
          return;
        else
          PV0AW01.PV0AWFF = "N"; /* set first time flag*/
          return;
        end
      end
    end
    ;
    if (PVWREC.PVWUPDTF == "Y") /* if user has update authority*/
      if (PVWREC.PVWERRF == "N")
        PV0A620(); /* process screen data*/
      end
    else
      PV0A635(); /* check for modified key display only*/
    end
    ;
    if (PVWREC.PVWERRF == "N")
      PV0A640(); /* determine next action*/
    else
      return;
    end
  end
  ;
      /* END OF PV0AS11 - BUILD PV0AM100 AFTER XFER FROM PV0B*/
end // end PV0AS11

// SET Sample Flag (PVASPLFL)
Function PV0AS15()
   /* **************************************************************/
   /* 05-16-00 JKUNDU  Modify to set the SAMPLE FLAG = 'Y' when  **/
   /* GPC = '03' and PO-TYPE = 'SD'             **/
   /* 08-18-00 JKUNDU  Modify to set the SAMPLE FLAG = 'Y' for   **/
   /* PO-TYPE = 'MP'.                           **/
   /* **************************************************************/
  ;
   /* ***********************************/
   /* Set PVAREC.PVASPLFL (Sample Flag)*/
   /* ***********************************/
  ;
  PV0AW01.PV0AWPAF = "Y"; /* Header Record was changed*/
  if (PV0AM100.XGPCD == "02")
    if (PC3REC.PC4ORTYP == "SS"
     || PC3REC.PC4ORTYP == "S3"
     || PC3REC.PC4ORTYP == "MP"
     || PC3REC.PC4ORTYP == "PS")
      PVAREC.PVASPLFL = "Y";
      PV0AM100.PVASPLFL = "Y";
    else
      PVAREC.PVASPLFL = "N";
      PV0AM100.PVASPLFL = "N";
    end
  else
    if (PV0AM100.XGPCD == "03")
      if (PC3REC.PC4ORTYP == "SS"
       || PC3REC.PC4ORTYP == "S7"
       || PC3REC.PC4ORTYP == "PS"
       || PC3REC.PC4ORTYP == "SX"
       || PC3REC.PC4ORTYP == "SA"
       || PC3REC.PC4ORTYP == "SD"
       || PC3REC.PC4ORTYP == "MP"
       || PC3REC.PC4ORTYP == "SE"
       || PC3REC.PC4ORTYP == "SI"
       || PC3REC.PC4ORTYP == "SM")
        PVAREC.PVASPLFL = "Y";
        PV0AM100.PVASPLFL = "Y";
      else
        PVAREC.PVASPLFL = "N";
        PV0AM100.PVASPLFL = "N";
      end
    else
      PVAREC.PVASPLFL = "N";
      PV0AM100.PVASPLFL = "N";
    end
  end
  ;
  return;
end // end PV0AS15

// Protect all Fields
Function PV0AS20()
  ;
   /* Set All Fields To Protect Except For Key Fields*/
  ;
  set PV0AM100.XFACD skip, invisible;
  set PV0AM100.PVAIVCDT skip, invisible;
  set PV0AM100.PVADUEDT skip, invisible;
  set PV0AM100.PVAACRSP skip, invisible;
  set PV0AM100.PVAXIPDT skip, invisible;
  set PV0AM100.FY1FCTYC skip, invisible;
  set PV0AM100.PVABTNBR skip, invisible;
  set PV0AM100.PC6XCTCD skip, invisible;
  set PV0AM100.PVAFDIND skip, invisible;
  set PV0AM100.XGPCD skip, invisible;
  set PV0AM100.PVAACRIN skip, invisible;
  set PV0AM100.PVAAPEDT skip, invisible;
  set PV0AM100.PVAIVAMT skip, invisible;
  set PV0AM100.PVAINTRT skip, invisible;
  set PV0AM100.PVATQTY skip, invisible;
  set PV0AM100.XIPCD skip, invisible;
  set PV0AM100.XIVCD skip, invisible;
  set PV0AM100.PVATDUTY skip, invisible;
  set PV0AM100.PVATFRGT skip, invisible;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT skip, invisible;
  set PV0AM100.PVASPTID skip, invisible;
  set PV0AM100.PVAETADT skip, invisible;
  set PV0AM100.PVABOLDT skip, invisible;
  set PV0AM100.PVADSCT skip, invisible;
  set PV0AM100.PVACRELD skip, invisible;
  set PV0AM100.PVABANKC skip, invisible;
  set PV0AM100.PVASPLFL skip, invisible;
  set PV0AM100.PVABANKP skip, invisible;
  set PV0AM100.PVACOMMP skip, invisible;
  set PV0AM100.PVAINT1 skip, invisible;
  set PV0AM100.PVAINT2 skip, invisible;
  set PV0AM100.PVAINT3 skip, invisible;
  set PV0AM100.PVATFOB skip, invisible;
  set PV0AM100.PVABRKRY skip, invisible;
  set PV0AM100.PVAOCHG1 skip, invisible;
  set PV0AM100.PVAOCHG2 skip, invisible;
  set PV0AM100.PVASCHG1 skip, invisible;
  set PV0AM100.PVASCHG2 skip, invisible;
  set PV0AM100.FY1FCTYC skip, invisible;
  set PV0AM100.PVOVNDNM skip, invisible;
  ;
  PV0AW02.PV0AWOSF = "N"; /* initialize over and short flag*/
  ;
end // end PV0AS20

// Load incoming line items
Function PV0AS22()
  ;
   /* ***********************************************/
   /* Load Incoming Line Items into Working Storage*/
   /* ***********************************************/
   /* **  maintenance log  **************************************/
   /* 09-28-94 BCourt Don't re-calc over/short qty when change*/
   /* International's line item qty in PV0A245 & PV0A250.*/
   /* ***********************************************************/
  ;
  PV0AW01.PVBLNINB[PVWLINEX] = PVBREC.PVBLNINB;
  PV0AW01.PC3PONBR[PVWLINEX] = PVBREC.PC3PONBR;
  PV0AW01.FY1FCTYC[PVWLINEX] = PVBREC.FY1FCTYC;
  PV0AW01.SY1STNBR[PVWLINEX] = PVBREC.SY1STNBR;
  PV0AW01.SY2CLRID[PVWLINEX] = PVBREC.SY2CLRID;
  PV0AW01.XGPCD[PVWLINEX] = PVBREC.XGPCD;
  PV0AW01.YMTCD[PVWLINEX] = PVBREC.YMTCD;
  PV0AW01.XDSCD[PVWLINEX] = PVBREC.XDSCD;
  PV0AW01.PVBLNQTY[PVWLINEX] = PVBREC.PVBLNQTY;
  PV0AW01.PCMOSQTY[PVWLINEX] = PVBREC.PCMOSQTY;
  PV0AW01.PVBLNCOM[PVWLINEX] = PVBREC.PVBLNCOM;
  PV0AW01.PVBLNFOB[PVWLINEX] = PVBREC.PVBLNFOB;
  PV0AW01.PVBLNDTY[PVWLINEX] = PVBREC.PVBLNDTY;
  PV0AW01.XUMCD[PVWLINEX] = PVBREC.XUMCD;
  PV0AW01.XWHCD[PVWLINEX] = PVBREC.XWHCD;
  PV0AW01.XQACD[PVWLINEX] = PVBREC.XQACD;
  PV0AW01.XDMCD[PVWLINEX] = PVBREC.XDMCD;
  PV0AW01.PC2INSEG[PVWLINEX] = PVBREC.PC2INSEG;
  PV0AW01.PC2CUXID[PVWLINEX] = PVBREC.PC2CUXID;
  PV0AW01.YSRSLSRG[PVWLINEX] = PVBREC.YSRSLSRG;
  PV0AW01.XPGCD[PVWLINEX] = PVBREC.XPGCD;
  PV0AW01.XSECD[PVWLINEX] = PVBREC.XSECD;
  PV0AW01.PCFSEYR[PVWLINEX] = PVBREC.PCFSEYR;
  PV0AW01.PVBCONTN[PVWLINEX] = PVBREC.PVBCONTN;
  PV0AW01.PVBBSZDS[PVWLINEX] = PVBREC.PVBBSZDS;
  PV0AW01.PVBESZDS[PVWLINEX] = PVBREC.PVBESZDS;
  PV0AW01.PVBBSZNK[PVWLINEX] = PVBREC.PVBBSZNK;
  PV0AW01.PVBESZNK[PVWLINEX] = PVBREC.PVBESZNK;
  PV0AW01.PVBLNAMT[PVWLINEX] = PVBREC.PVBLNAMT;
  PV0AW01.ZZZSDT[PVWLINEX] = PVBREC.ZZZSDT;
  ;
  if (PVBREC.PVBLNQTY != PVBREC.PCMOSQTY /* re-calc o/s when line qty changes*/
   && PV0AM100.PVAACRSP != "N"           /* skip international, o/s always 0*/
   && PVBREC.XQACD != "3S"               /* skip screener, o/s always 0*/
   && PVBREC.XQACD != "3B")             
    PV0AW02.PV0AWOSF = "Y"; /* set over/short flag,used in 245 & 250*/
  end
  ;
  PV0AS23(); /* incoming errors check*/
  PV0AS25(); /* move default data into pv0aw01*/
  if (PV0AW01.PVBLNAMT != 0) /* fob calculations*/
    PV0AW01.PV0AWIFB = PV0AW01.PV0AWIFB + PV0AW01.PVBLNAMT[PVWLINEX];
  end
  ;
end // end PV0AS22

// Edit Season YR:NP Special Edit
Function PV0AS23()
  ;
   /* *******************************************************/
   /* If Season Yr is less than zero then the load program*/
   /* pv1010 marked that line item with an error. We need*/
   /* to mark this in working storage and reset season year*/
   /* *******************************************************/
  ;
  if (PVBREC.PCFSEYR < 0) /* error*/
    PV0AW01.PV0AWLEF[PVWLINEX] = "Y"; /* LINE ERROR FLAG*/
    if (PVBREC.PCFSEYR == -9999) /* no incoming year*/
      PV0AW01.PCFSEYR[PVWLINEX] = 0;
    else /* make -1991  +1991*/
      PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
    end
  else
    PV0AW01.PV0AWLEF[PVWLINEX] = "N"; /* LINE ERROR FLAG*/
  end
  ;
  ;
   /* ****************************************/
   /* flag to show what line items have data*/
   /* ****************************************/
  ;
  PV0AW01.PV0AWMKF[PVWLINEX] = "Y"; /* marked flag(data contained)*/
  ;
end // end PV0AS23

// Move Default Data to Pvbrec
Function PV0AS25()
  ;
   /* *********************/
   /* Move Default Data*/
   /* For Pv0aw01*/
   /* *********************/
  ;
   /* move default values if neccessary*/
  ;
  if (PVAREC.XIPCD == "NP") /* only np status effected*/
    ;
    if (PV0AW01.SY2CLRID[PVWLINEX] == "  ") /* color equal to blanks*/
      PV0AW01.SY2CLRID[PVWLINEX] = "00"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
    ;
    if (PV0AW01.XUMCD[PVWLINEX] == "  ") /* uom equal to blanks*/
      PV0AW01.XUMCD[PVWLINEX] = "01"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
    ;
    if (PV0AW01.XQACD[PVWLINEX] == "  ") /* quality equal to blanks*/
      PV0AW01.XQACD[PVWLINEX] = "01"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
    ;
    if (PV0AW01.XDMCD[PVWLINEX] == "  ") /* dim cd equal to blanks*/
      PV0AW01.XDMCD[PVWLINEX] = "00"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
    ;
    if (PV0AW01.PC2INSEG[PVWLINEX] == "  ") /* iseg equal to blanks*/
      PV0AW01.PC2INSEG[PVWLINEX] = "000"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
    ;
    if (PV0AW01.XPGCD[PVWLINEX] == "  ") /* ptyp equal to blanks*/
      PV0AW01.XPGCD[PVWLINEX] = "00"; /* default*/
      PV0AW01.PV0AWUPF = "X"; /* set default flag*/
    end
  end
  ;
end // end PV0AS25

// Load pv0am100
Function PV0AS30()
   /* Build Screen PV0AM100*/
  ;
  ;
  PV0AM100.PVOVENDR = PVAREC.PVOVENDR; /* move data to screen*/
  PV0AM100.PVOVENDG = PVAREC.PVOVENDG;
  PV0AM100.PVAIVCID = PVAREC.PVAIVCID;
  PV0AM100.PVAACRSP = PVAREC.PVAACRSP;
  PV0AM100.PVAXIPDT = PVAREC.PVAXIPDT;
  PV0AM100.PVABTNBR = PVAREC.PVABTNBR;
  PV0AM100.PC6XCTCD = PVAREC.PC6XCTCD;
  PV0AM100.PVAFDIND = PVAREC.PVAFDIND;
  PV0AM100.XGPCD = PVAREC.XGPCD;
  PV0AM100.PVATFOB = PVAREC.PVATFOB;
  PV0AM100.PVAACRIN = PVAREC.PVAACRIN;
  PV0AM100.PVAAPEDT = PVAREC.PVAAPEDT;
  PV0AM100.PVAIVAMT = PVAREC.PVAIVAMT;
  PV0AM100.PVATQTY = PVAREC.PVATQTY;
  PV0AM100.XIPCD = PVAREC.XIPCD;
  PV0AM100.XIVCD = PVAREC.XIVCD;
  PV0AM100.PVATDUTY = PVAREC.PVATDUTY;
  PV0AM100.PVATFRGT = PVAREC.PVATFRGT;
  PV0AM100.PV0AM-NEW-FREIGHT-AMT = 0;
  PV0AM100.PVASPTID = PVAREC.PVASPTID;
  PV0AM100.PVADSCT = PVAREC.PVADSCT;
  PV0AM100.PVABANKC = PVAREC.PVABANKC;
  PV0AM100.PVASPLFL = PVAREC.PVASPLFL;
  PV0AM100.PVABANKP = PVAREC.PVABANKP;
  PV0AM100.PVACOMMP = PVAREC.PVACOMMP;
  PV0AM100.PVAINT1 = PVAREC.PVAINT1;
  PV0AM100.PVAINT2 = PVAREC.PVAINT2;
  PV0AM100.PVAINT3 = PVAREC.PVAINT3;
  PV0AM100.PVAINTRT = PVAREC.PVAINTRT;
  PV0AM100.PVABRKRY = PVAREC.PVABRKRY;
  PV0AM100.PVAOCHG1 = PVAREC.PVAOCHG1;
  PV0AM100.PVAOCHG2 = PVAREC.PVAOCHG2;
  PV0AM100.PVASCHG1 = PVAREC.PVASCHG1;
  PV0AM100.PVASCHG2 = PVAREC.PVASCHG2;
  ;
  ;
   /* date edits have to be made for all date fields*/
   /* which could be modified*/
  ;
  PV0AW02.PV0AWDTE = PVAREC.PVAIVCDT; /* date edit*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* year*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* month*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* day*/
  PV0AM100.PVAIVCDT = PV0AW02.PV0AWDT2; /* move to screen*/
  PV0AW02.PV0AWDT2 = "  ";
  PV0AW02.PV0AWDTE = "  ";
  ;
  PV0AW02.PV0AWDTE = PVAREC.PVADUEDT; /* date edit*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* year*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* month*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* day*/
  PV0AM100.PVADUEDT = PV0AW02.PV0AWDT2; /* move to screen*/
  PV0AW02.PV0AWDT2 = "  ";
  PV0AW02.PV0AWDTE = "  ";
  ;
  PV0AW02.PV0AWDTE = PVAREC.PVAETADT; /* date edit*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* year*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* month*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* day*/
  PV0AM100.PVAETADT = PV0AW02.PV0AWDT2; /* move to screen*/
  PV0AW02.PV0AWDT2 = "  ";
  PV0AW02.PV0AWDTE = "  ";
  ;
  PV0AW02.PV0AWDTE = PVAREC.PVABOLDT; /* date edit*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* year*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* month*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* day*/
  PV0AM100.PVABOLDT = PV0AW02.PV0AWDT2; /* move to screen*/
  PV0AW02.PV0AWDT2 = "  ";
  PV0AW02.PV0AWDTE = "  ";
  ;
  PV0AW02.PV0AWDTE = PVAREC.PVACRELD; /* date edit*/
  PV0AW02.PV0AWYR2 = PV0AW02.PV0AWYR; /* year*/
  PV0AW02.PV0AWMT2 = PV0AW02.PV0AWMTH; /* month*/
  PV0AW02.PV0AWDA2 = PV0AW02.PV0AWDAY; /* day*/
  PV0AM100.PVACRELD = PV0AW02.PV0AWDT2; /* move to screen*/
  PV0AW02.PV0AWDT2 = "  ";
  PV0AW02.PV0AWDTE = "  ";
  ;
  ;
end // end PV0AS30

// Inv and Due Date Edit
Function PV0AS33()
  ;
   /* ****************************/
   /* Invoice and Due Date Edit*/
   /* Maintenance log:*/
   /* 08-19-94 BCourt  Move 0, not ' ', to pv0awdt2.*/
   /* 11/17/97  NJana   Call TA0040 routine for invoice date*/
   /* and invoice due date validation*/
   /* 05/08/98  SARUMU  Current date is restored into TA2REC.TA2GRGGN*/
   /* field to update the tables properly.*/
   /* ******************************************************/
  ;
  ;
   /* TCS change begins-dated 11/17/97*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  PV0AW02.PV0AWDT2 = PV0AM100.PVAIVCDT; /* date edit*/
  TA2REC.TA2GRGAN = PV0AW02.PV0AWDT2;
  ;
   /* call date routine for validation*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD != 0)
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWWNF = "Y";
    set PV0AM100.PVAIVCDT cursor, bold;
    converseLib.validationFailed(082); /* INVALID DATE FORMAT*/
  else
    /* next sentence*/
  end
   /* IF PV0AW02.PV0AWMT2 > 12*/
   /* OR PV0AW02.PV0AWMT2 < 01*/
   /* OR PV0AW02.PV0AWDA2 < 01*/
   /* OR PV0AW02.PV0AWDA2 > 31*/
   /* OR PV0AW02.PV0AWYR2 < 90;*/
   /* MOVE 'Y' TO PVWREC.PVWERRF;*/
   /* MOVE 'Y' TO PV0AW01.PV0AWWNF;*/
   /* SET PV0AM100.PVAIVCDT CURSOR,BRIGHT;*/
   /* MOVE 160 TO EZEMNO;            /* INVALID DATE FORMAT*/
   /* END;*/
  PV0AW02.PV0AWDT2 = 0;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  PV0AW02.PV0AWDT2 = PV0AM100.PVADUEDT; /* date edit*/
  TA2REC.TA2GRGAN = PV0AW02.PV0AWDT2;
  ;
   /* call date routine for validation*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD != 0)
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWWNF = "Y";
    set PV0AM100.PVADUEDT cursor, bold;
    converseLib.validationFailed(082); /* INVALID DATE*/
  else
    /* next sentence*/
  end
   /* IF PV0AW02.PV0AWMT2 > 12*/
   /* OR PV0AW02.PV0AWMT2 < 01*/
   /* OR PV0AW02.PV0AWDA2 < 01*/
   /* OR PV0AW02.PV0AWDA2 > 31*/
   /* OR PV0AW02.PV0AWYR2 < 90;*/
   /* MOVE 'Y' TO PVWREC.PVWERRF;*/
   /* MOVE 'Y' TO PV0AW01.PV0AWWNF;*/
   /* SET PV0AM100.PVADUEDT CURSOR,BRIGHT;*/
   /* MOVE 160 TO EZEMNO;            /* INVALID DATE FORMAT*/
   /* END;*/
  PV0AW02.PV0AWDT2 = 0;
  ;
   /* TCS change begin 05/08/98*/
  TA2REC.TA2GRGGN = PV0AW02.PV0AWCDT;
   /* TCS change end 05/08/98*/
  ;
   /* TCS change ends-dated 11/17/97*/
end // end PV0AS33

// Load Pvarec for Update
Function PV0AS35()
   /* Maintenance log:*/
   /* 11/17/97  NJana   Keep checking for the century field before*/
   /* invoice dates are moved to PVAREC*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* ******************************************************/
  ;
   /* set updtate of pv0am100*/
  ;
  ;
  PVAREC.PVOVENDR = PV0AM100.PVOVENDR; /* move data to pvarec*/
  PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
  ;
  PVAREC.PVAACRSP = PV0AM100.PVAACRSP;
  ;
  PVAREC.PVAXIPDT = PV0AM100.PVAXIPDT;
  PVAREC.PVABTNBR = PV0AM100.PVABTNBR;
  PVAREC.PC6XCTCD = PV0AM100.PC6XCTCD;
  PVAREC.PVAFDIND = PV0AM100.PVAFDIND;
  PVAREC.XGPCD = PV0AM100.XGPCD;
  PVAREC.PVAACRIN = PV0AM100.PVAACRIN;
  PVAREC.PVAAPEDT = PV0AM100.PVAAPEDT;
  PVAREC.PVAIVAMT = PV0AM100.PVAIVAMT;
  PVAREC.PVATQTY = PV0AM100.PVATQTY;
  PVAREC.XIPCD = PV0AM100.XIPCD;
  PVAREC.XIVCD = PV0AM100.XIVCD;
  PVAREC.PVATDUTY = PV0AM100.PVATDUTY;
  PVAREC.PVATFRGT = PV0AM100.PVATFRGT;
  PVAREC.PVASPTID = PV0AM100.PVASPTID;
  PVAREC.PVADSCT = PV0AM100.PVADSCT;
  PVAREC.PVACRELD = PV0AM100.PVACRELD;
  PVAREC.PVABANKC = PV0AM100.PVABANKC;
  PVAREC.PVASPLFL = PV0AM100.PVASPLFL;
  PVAREC.PVABANKP = PV0AM100.PVABANKP;
  PVAREC.PVACOMMP = PV0AM100.PVACOMMP;
  PVAREC.PVATFOB = PV0AM100.PVATFOB;
  PVAREC.PVAINT1 = PV0AM100.PVAINT1;
  PVAREC.PVAINT2 = PV0AM100.PVAINT2;
  PVAREC.PVAINT3 = PV0AM100.PVAINT3;
  PVAREC.PVAINTRT = PV0AM100.PVAINTRT;
  PVAREC.PVABRKRY = PV0AM100.PVABRKRY;
  PVAREC.PVAOCHG1 = PV0AM100.PVAOCHG1;
  PVAREC.PVAOCHG2 = PV0AM100.PVAOCHG2;
  PVAREC.PVASCHG1 = PV0AM100.PVASCHG1;
  PVAREC.PVASCHG2 = PV0AM100.PVASCHG2;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  ;
  ;
  ;
   /* date edits have to be made for all date fields*/
   /* which could be modified*/
  ;
  PV0AW02.PV0AWDT2 = PV0AM100.PVAIVCDT; /* date edit*/
  ;
   /* /TCS change begins-dated 11/17/97*/
  if (PV0AW02.PV0AWYR2 > 59)
    PV0AW02.PV0AWCEN = 19; /* century*/
  else
    PV0AW02.PV0AWCEN = 20; /* century*/
  end
   /* /TCS change ends-dated 11/17/97*/
  ;
  PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
  PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
  PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
  PVAREC.PVAIVCDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = 0;
  ;
  PV0AW02.PV0AWDT2 = PV0AM100.PVADUEDT; /* date edit*/
  ;
   /* /TCS change begins-dated 11/17/97*/
  if (PV0AW02.PV0AWYR2 > 59)
    PV0AW02.PV0AWCEN = 19; /* century*/
  else
    PV0AW02.PV0AWCEN = 20; /* century*/
  end
   /* /TCS change ends-dated 11/17/97*/
  ;
  PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
  PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
  PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
  PVAREC.PVADUEDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = 0;
  ;
  ;
  if (PV0AM100.PVOVENDR == "2577" /* nissho*/
   && PVUREC.PVUCHOIC != 9)       /* DO EDIT IF USING MENU OPTION 9*/
    PV0AW02.PV0AWDT2 = PV0AM100.PVAETADT; /* date edit*/
    ;
    /* /TCS change begins-dated 11/17/97*/
    if (PV0AW02.PV0AWYR2 > 59)
      PV0AW02.PV0AWCEN = 19; /* century*/
    else
      PV0AW02.PV0AWCEN = 20; /* century*/
    end
    /* /TCS change ends-dated 11/17/97*/
    ;
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVAETADT = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
    ;
    PV0AW02.PV0AWDT2 = PV0AM100.PVABOLDT; /* date edit*/
    ;
    /* /TCS change begins-dated 11/17/97*/
    if (PV0AW02.PV0AWYR2 > 59)
      PV0AW02.PV0AWCEN = 19; /* century*/
    else
      PV0AW02.PV0AWCEN = 20; /* century*/
    end
    /* /TCS change ends-dated 11/17/97*/
    ;
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVABOLDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
    ;
    PV0AW02.PV0AWDT2 = PV0AM100.PVACRELD; /* date edit*/
    ;
    /* /TCS change begins-dated 11/17/97*/
    if (PV0AW02.PV0AWYR2 > 59)
      PV0AW02.PV0AWCEN = 19; /* century*/
    else
      PV0AW02.PV0AWCEN = 20; /* century*/
    end
    /* /TCS change ends-dated 11/17/97*/
    ;
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVACRELD = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
  end
  ;
end // end PV0AS35

// Load Pvarec for Update
Function PV0AS36()
   /* Maintenance log:*/
   /* 11/17/97  NJana   Keep checking for the century field before*/
   /* invoice dates are moved to PVAREC*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* 01-21-01  BPARAN  Changed for payment status update*/
   /* for non L/C accounts*/
   /* ******************************************************/
  ;
   /* set updtate of pv0am100*/
  ;
   /* FIND THE STATUS CODE THAT SHOULD BE ON THE PAYMENT LINES*/
  if (PVAREC.XIPCD == "IP")
    PV0AW02.XIP-IVC-STAT-CD = "UN";
  else
    if (PVAREC.XIPCD == "NP")
      PV0AW02.XIP-IVC-STAT-CD = "ER";
    else
      PV0AW02.XIP-IVC-STAT-CD = "UN";
    end
  end
  ;
  ;
   /* ATTEMPT TO READ THE PAYMENT LINE*/
   /* IF FOUND AND THERE WAS A CHANGE, UPDATE IT*/
   /* IF NOT FOUND, INSERT A NEW PAYMENT LINE*/
   /* REPEAT FOR DUTY, FOB, FREIGHT*/
  ;
   /* UPDATE DUTY PAYMENT LINE - TYPE CODE 'DT'*/
  ;
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "DT";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-DUTY-PMT-FL == "N"
     && PVAREC.PVATDUTY != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "DT";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATDUTY;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/

    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PVAREC.PVATDUTY != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATDUTY;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
  ;
  ;
   /* UPDATE FOB PAYMENT LINE - TYPE CODE 'FB'*/
  ;
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "FB";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
   /* Tcs addition begins - 01/21/2001*/
  PV0AW02.PV0AW-XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
  if (PV0AM100.PV-PMT-VEND-NBR == "1050")
    PV0AS-CHK-BNK-CD();
  end
   /* Tcs addition ends - 01/21/2001*/
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD AN FOB PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-FOB-PMT-FL == "N"
     && PVAREC.PVATFOB != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "FB";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATFOB;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PVAREC.PVATFOB != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATFOB;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
  ;
   /* Tcs addition begins - 01/25/2001*/
  PV0AW02.XIP-IVC-STAT-CD = PV0AW02.PV0AW-XIP-IVC-STAT-CD;
   /* Tcs addition ends - 01/25/2001*/
  ;
  ;
   /* UPDATE FREIGHT PAYMENT LINE - TYPE CODE 'FR'*/
  ;
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "FR";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
    if (PV0AM100.PV0AM-NEW-FREIGHT-AMT != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "FR";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        /* RECOMPUTE THE PVAREC TOTAL FREIGHT - IT WILL NOW BE EQUAL TO*/
        /* THE SUM OF THE FREIGHT ON OTHER PAYMENT INVOICES PLUS THE VALUE*/
        /* ENTERED INT THE 'NEW-FREIGHT' FIELD ON PV0AM100.*/
      ;
        /* MOVE PVAREC.PVATFRGT TO VPVPMT01.PV-PMT-IVC-AMT;*/
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PV0AM-NEW-FREIGHT-AMT;
      PVAREC.PVATFRGT = PV0AM100.PV0AM-NEW-FREIGHT-AMT       + PV0AW02.PV0AW-DIFF-FREIGHT-AMT;
      ;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PV0AM-NEW-FREIGHT-AMT != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        ;
          /* MOVE PVAREC.PVATFRGT TO VPVPMT01.PV-PMT-IVC-AMT;*/
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PV0AM-NEW-FREIGHT-AMT;
        PVAREC.PVATFRGT = PV0AM100.PV0AM-NEW-FREIGHT-AMT         + PV0AW02.PV0AW-DIFF-FREIGHT-AMT;
        ;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
  ;
end // end PV0AS36

// Load Pvarec for Add
Function PV0AS37()
   /* set add of pv0am100*/
   /* **********************************************************/
   /* 08-17-94 bcourt move numeric to pv0awcen, pv0awdt2, and*/
   /* pv0awdte, not character.*/
   /* 10-19-99 GDECKE NISSHO CONTINGENCY - REMOVE CHECK FOR NISSHO*/
   /* **********************************************************/
  ;
  PVAREC.PVOVENDR = PV0AM100.PVOVENDR; /* move data to pvarec*/
  PVAREC.PVOVENDG = PV0AM100.PVOVENDG;
  PVAREC.PVAIVCID = PV0AM100.PVAIVCID;
  PVAREC.XIVCD = PV0AM100.XIVCD;
  ;
  PVAREC.PVAACRSP = PV0AM100.PVAACRSP;
  ;
  PVAREC.PVABTNBR = PV0AM100.PVABTNBR;
  PVAREC.PC6XCTCD = PV0AM100.PC6XCTCD;
  PVAREC.PVAFDIND = PV0AM100.PVAFDIND;
  PVAREC.XGPCD = PV0AM100.XGPCD;
  PVAREC.PVAACRIN = PV0AM100.PVAACRIN;
  PVAREC.PVAAPEDT = PV0AM100.PVAAPEDT;
  PVAREC.PVAIVAMT = PV0AM100.PVAIVAMT;
  PVAREC.PVATQTY = PV0AM100.PVATQTY;
  PVAREC.PVATDUTY = PV0AM100.PVATDUTY;
  PVAREC.PVATFRGT = PV0AM100.PVATFRGT;
  PVAREC.PVASPTID = PV0AM100.PVASPTID;
  PVAREC.PVADSCT = PV0AM100.PVADSCT;
  PVAREC.PVABANKC = PV0AM100.PVABANKC;
  PVAREC.PVABANKP = PV0AM100.PVABANKP;
  PVAREC.PVACOMMP = PV0AM100.PVACOMMP;
  PVAREC.PVATFOB = PV0AM100.PVATFOB;
  PVAREC.PVAINT1 = PV0AM100.PVAINT1;
  PVAREC.PVAINT2 = PV0AM100.PVAINT2;
  PVAREC.PVAINT3 = PV0AM100.PVAINT3;
  PVAREC.PVAINTRT = PV0AM100.PVAINTRT;
  PVAREC.PVABRKRY = PV0AM100.PVABRKRY;
  PVAREC.PVAOCHG1 = PV0AM100.PVAOCHG1;
  PVAREC.PVAOCHG2 = PV0AM100.PVAOCHG2;
  PVAREC.PVASCHG1 = PV0AM100.PVASCHG1;
  PVAREC.PVASCHG2 = PV0AM100.PVASCHG2;
  PVAREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
   /* date edits have to be made for all date fields*/
   /* which could be modified*/
  ;
  PV0AW02.PV0AWDT2 = PV0AM100.PVAIVCDT; /* date edit*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO PV0AW02.PV0AWCEN;     /* century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PV0AW02.PV0AWDT2 > 0)
    if (PV0AW02.PV0AWYR2 > 60)
      PV0AW02.PV0AWCEN = 19; /* 20th century*/
    else
      PV0AW02.PV0AWCEN = 20; /* 21st century*/
    end
  else
    PV0AW02.PV0AWCEN = 0; /* 21st century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
  PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
  PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
  PVAREC.PVAIVCDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = 0;
  ;
  PV0AW02.PV0AWDT2 = PV0AM100.PVADUEDT; /* date edit*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO PV0AW02.PV0AWCEN;     /* century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PV0AW02.PV0AWDT2 > 0)
    if (PV0AW02.PV0AWYR2 > 60)
      PV0AW02.PV0AWCEN = 19; /* 20th century*/
    else
      PV0AW02.PV0AWCEN = 20; /* 21st century*/
    end
  else
    PV0AW02.PV0AWCEN = 0; /* 21st century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
  PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
  PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
  PVAREC.PVADUEDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
  PV0AW02.PV0AWDT2 = 0;
  PV0AW02.PV0AWDTE = 0;
  ;
  ;
  if (PV0AM100.PVOVENDR == "2577" /* nissho*/
   && PVUREC.PVUCHOIC != 9)       /* REMOVES CHECK FOR NISSHO*/
    PV0AW02.PV0AWDT2 = PV0AM100.PVAETADT; /* date edit*/
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* MOVE 19 TO PV0AW02.PV0AWCEN;     /* century*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (PV0AW02.PV0AWDT2 > 0)
      if (PV0AW02.PV0AWYR2 > 60)
        PV0AW02.PV0AWCEN = 19; /* 20th century*/
      else
        PV0AW02.PV0AWCEN = 20; /* 21st century*/
      end
    else
      PV0AW02.PV0AWCEN = 0; /* 21st century*/
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVAETADT = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
    ;
    PV0AW02.PV0AWDT2 = PV0AM100.PVABOLDT; /* date edit*/
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* MOVE 19 TO PV0AW02.PV0AWCEN;     /* century*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (PV0AW02.PV0AWDT2 > 0)
      if (PV0AW02.PV0AWYR2 > 60)
        PV0AW02.PV0AWCEN = 19; /* 20th century*/
      else
        PV0AW02.PV0AWCEN = 20; /* 21st century*/
      end
    else
      PV0AW02.PV0AWCEN = 0; /* 21st century*/
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVABOLDT = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
    ;
    PV0AW02.PV0AWDT2 = PV0AM100.PVACRELD; /* date edit*/
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* MOVE 19 TO PV0AW02.PV0AWCEN;     /* century*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (PV0AW02.PV0AWDT2 > 0)
      if (PV0AW02.PV0AWYR2 > 60)
        PV0AW02.PV0AWCEN = 19; /* 20th century*/
      else
        PV0AW02.PV0AWCEN = 20; /* 21st century*/
      end
    else
      PV0AW02.PV0AWCEN = 0; /* 21st century*/
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    PV0AW02.PV0AWYR = PV0AW02.PV0AWYR2; /* year*/
    PV0AW02.PV0AWMTH = PV0AW02.PV0AWMT2; /* month*/
    PV0AW02.PV0AWDAY = PV0AW02.PV0AWDA2; /* day*/
    PVAREC.PVACRELD = PV0AW02.PV0AWDTE; /* move to pvarec*/
    PV0AW02.PV0AWDT2 = 0;
    PV0AW02.PV0AWDTE = 0;
  end
  ;
  ;
end // end PV0AS37

// Load Pvarec for Update
Function PV0AS38()
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UPDATE VPVPMT01 LINES*/
   /* FOR FREIGHT, FOB AND DUTY.*/
   /* ******************/
   /* update PV0AM100 PAYMENT CHANGES*/
   /* ******************/
  ;
  ;
  set SQLCA empty;
  call "VPVPMT01" (PV0AW04, SQLCA, VPVPMT01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0   /* PAYMENT found--> UPDATE*/
   || SQLCA.VAGen_SQLCODE == 100 /* PAYMENT not found*/
   || SQLCA.VAGen_SQLCODE == -911
  )                              /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "PV0AS38";
    TA1REC.TA1LOCAT[2] = "UPDATE DB2 PVPMT01";
    TA1REC.TA1TBLVU = "VPVPMT01";
    TA1REC.TA1TBLKE = VPVPMT01.PV-IVC-ID;
    PV0AS97();
  end
  ;
end // end PV0AS38

// Load Pvarec for Update
Function PV0AS39()
   /* Maintenance log:*/
   /* 11/17/97  NJana   Keep checking for the century field before*/
   /* invoice dates are moved to PVAREC*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* ******************************************************/
  ;
   /* set updtate of pv0am100*/
  ;
   /* FIND THE STATUS CODE THAT SHOULD BE ON THE PAYMENT LINES*/
  if (PVAREC.XIPCD == "IP")
    PV0AW02.XIP-IVC-STAT-CD = "UN";
  else
    if (PVAREC.XIPCD == "NP")
      PV0AW02.XIP-IVC-STAT-CD = "ER";
    else
      PV0AW02.XIP-IVC-STAT-CD = "UN";
    end
  end
  ;
  ;
   /* ATTEMPT TO READ THE PAYMENT LINE*/
   /* IF FOUND AND THERE WAS A CHANGE, UPDATE IT*/
   /* IF NOT FOUND, INSERT A NEW PAYMENT LINE*/
   /* REPEAT FOR DUTY, FOB, FREIGHT*/
  ;
   /* UPDATE DISCOUNT LINE - TYPE CODE 'DA'*/
  ;
   /* IF PV0AW02.PVADSCT NE PV0AM100.PVADSCT;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "DA";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-DA-PMT-FL == "N"
     && PV0AM100.PVADSCT != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "DA";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVADSCT;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVADSCT != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVADSCT;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
  ;
   /* UPDATE BANK CHARGE LINE - TYPE CODE 'BC'*/
  ;
   /* IF PV0AW02.PVABANKC NE PV0AM100.PVABANKC;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "BC";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-BC-PMT-FL == "N"
     && PV0AM100.PVABANKC != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "BC";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVABANKC;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVABANKC != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVABANKC;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
  ;
   /* UPDATE WATER INTEREST LINE - TYPE CODE 'I1'*/
  ;
   /* IF PV0AW02.PVAINT1 NE PV0AM100.PVAINT1;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "I1";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-I1-PMT-FL == "N"
     && PV0AM100.PVAINT1 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "I1";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT1;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVAINT1 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT1;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
  ;
   /* UPDATE GENERAL INTEREST LINE 1 - TYPE CODE 'I2'*/
  ;
   /* IF PV0AW02.PVAINT2 NE PV0AM100.PVAINT2;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "I2";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-I2-PMT-FL == "N"
     && PV0AM100.PVAINT2 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "I2";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT2;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVAINT2 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT2;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE GENERAL INTEREST LINE 2 - TYPE CODE 'I3'*/
  ;
   /* IF PV0AW02.PVAINT3 NE PV0AM100.PVAINT3;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "I3";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-I3-PMT-FL == "N"
     && PV0AM100.PVAINT3 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "I3";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT3;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVAINT3 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAINT3;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE OTHER HARGE LINE 1 - TYPE CODE 'C1'*/
  ;
   /* IF PV0AW02.PVAOCHG1 NE PV0AM100.PVAOCHG1;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "C1";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-C1-PMT-FL == "N"
     && PV0AM100.PVAOCHG1 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "C1";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAOCHG1;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVAOCHG1 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAOCHG1;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE OTHER CHARGE LINE 2 - TYPE CODE 'C2'*/
  ;
   /* IF PV0AW02.PVAOCHG2 NE PV0AM100.PVAOCHG2;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "C2";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-C2-PMT-FL == "N"
     && PV0AM100.PVAOCHG2 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "C2";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAOCHG2;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVAOCHG2 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVAOCHG2;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE SUB CHARGE LINE 1 - TYPE CODE 'C3'*/
  ;
   /* IF PV0AW02.PVASCHG1 NE PV0AM100.PVASCHG1;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "C3";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-C3-PMT-FL == "N"
     && PV0AM100.PVASCHG1 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "C3";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVASCHG1;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVASCHG1 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVASCHG1;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE SUB CHARGE LINE 2 - TYPE CODE 'C4'*/
  ;
   /* IF PV0AW02.PVASCHG2 NE PV0AM100.PVASCHG2;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "C4";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-C4-PMT-FL == "N"
     && PV0AM100.PVASCHG2 != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "C4";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVASCHG2;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVASCHG2 != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVASCHG2;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE COMMISSION CHARGE LINE - TYPE CODE 'CM'*/
  ;
   /* do not do the test for a changed value on commission.*/
   /* it is a value calculated on the detail screen and not enterable*/
   /* on the header screen. just add or update the value when header is*/
   /* updated. A zero record will not be added.*/
  ;
   /* IF PV0AW02.PVATCOMM NE PVAREC.PVATCOMM;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "CM";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-CM-PMT-FL == "N"
     && PVAREC.PVATCOMM != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "CM";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATCOMM;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PVAREC.PVATCOMM != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATCOMM;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
   /* UPDATE BROKER FEE CHARGE LINE 2 - TYPE CODE 'BF'*/
  ;
   /* IF PV0AW02.PVABRKRY NE PV0AM100.PVABRKRY;*/
  VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
  VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
  VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
  VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
  VPVPMT01.XPV-IVC-TYP-CD = "BF";
  PV0AW04.PV0AW-DBIO-FUNCTION = "S ";
  ;
  PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* PAYMENT NOT FOUND - ADD THE LINE*/
      /* MOVE VALUES TO TABLE*/
      /* ADD A DUTY PAYMENT LINE ONLY IF THE AMOUNT IS NOT ZERO*/
    if (PV0AW02.PV0AW-OTHR-VNDR-BF-PMT-FL == "N"
     && PV0AM100.PVABRKRY != 0)
      VPVPMT01.PV-PMT-VEND-NBR = PV0AM100.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0AM100.PV-PMT-VEND-GRP;
      VPVPMT01.PV-PMT-VEND-IVC-ID = PV0AM100.PV-PMT-VEND-IVC-ID;
      VPVPMT01.PV-IVC-ID = PV0AM100.PVAIVCID;
      VPVPMT01.PV-MSA-VEND-NBR = PV0AM100.PVOVENDR;
      VPVPMT01.PV-MSA-VEND-GRP = PV0AM100.PVOVENDG;
      VPVPMT01.XPV-IVC-TYP-CD = "BF";
      VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
      VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVABRKRY;
      VPVPMT01.PV-IVC-TO-AP-DT = PVAREC.PVAAPEDT;
      VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
      VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
      VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
      VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
      VPVPMT01.ZZ-CHNG-CNT = 0;
      PV0AW04.PV0AW-DBIO-FUNCTION = "A ";
      PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* PAYMENT RECORD FOUND*/
      if ((PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "Y"
       && PV0AW02.XIP-IVC-STAT-CD != VPVPMT01.XIP-IVC-STAT-CD)
       || PV0AM100.PVABRKRY != VPVPMT01.PV-PMT-IVC-AMT)
        if (PV0AW02.PV0AW-STAT-CHG-NP-IP-FL == "N"
         || VPVPMT01.XIP-IVC-STAT-CD == "CX"
         || VPVPMT01.XIP-IVC-STAT-CD == "SN"
        ) /* NEXT SENTENCE*/
        else
          VPVPMT01.XIP-IVC-STAT-CD = PV0AW02.XIP-IVC-STAT-CD;
        end
        VPVPMT01.PV-PMT-IVC-AMT = PV0AM100.PVABRKRY;
        VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVPMT01.ZZ-CHNG-HHMM = PV0AW02.TA2TIMHM;
        PV0AW04.PV0AW-DBIO-FUNCTION = "U ";
                                   /* IF DATA CHANGED UPDATE LINE*/
        PV0AS38(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
      else
          /* STATUS AND AMOUNT NOT CHANGED - NO UPDATE*/
      end
        /* DEADLOCK -911 - SETUP APPL TO RETRY DB CALL*/
    end
  end
   /* END;*/
  ;
end // end PV0AS39

// Unprotect all fields
Function PV0AS40()
  ;
   /* Unprotect Fields*/
  ;
  set PV0AM100.XFACD initialAttributes;
  set PV0AM100.PVAIVCDT cursor, initialAttributes;
  set PV0AM100.PVADUEDT initialAttributes;
  set PV0AM100.PVAACRSP initialAttributes;
  set PV0AM100.PVABTNBR initialAttributes;
  set PV0AM100.PVAFDIND initialAttributes;
  set PV0AM100.XGPCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVAIVAMT initialAttributes;
  set PV0AM100.PVATQTY initialAttributes;
  set PV0AM100.PVATDUTY initialAttributes;
  set PV0AM100.PVATFRGT initialAttributes;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT initialAttributes;
  set PV0AM100.PVASPTID initialAttributes;
  set PV0AM100.PVAETADT initialAttributes;
  set PV0AM100.PVABOLDT initialAttributes;
  set PV0AM100.PVADSCT initialAttributes;
  set PV0AM100.PVACRELD initialAttributes;
  set PV0AM100.PVABANKC initialAttributes;
  set PV0AM100.PVABANKP initialAttributes;
  set PV0AM100.PVACOMMP initialAttributes;
  set PV0AM100.PVAINT1 initialAttributes;
  set PV0AM100.PVAINT2 initialAttributes;
  set PV0AM100.PVAINTRT initialAttributes;
  set PV0AM100.PVAINT3 initialAttributes;
  set PV0AM100.PVATFOB initialAttributes;
  set PV0AM100.PVABRKRY initialAttributes;
  set PV0AM100.PVAOCHG1 initialAttributes;
  set PV0AM100.PVAOCHG2 initialAttributes;
  set PV0AM100.PVASCHG1 initialAttributes;
  set PV0AM100.PVASCHG2 initialAttributes;
  set PV0AM100.PVAINTRT initialAttributes;
  set PV0AM100.PVAXIPDT initialAttributes;
  set PV0AM100.FY1FCTYC initialAttributes;
  set PV0AM100.PC6XCTCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVAAPEDT initialAttributes;
  set PV0AM100.XIPCD initialAttributes;
  set PV0AM100.XIVCD initialAttributes;
  set PV0AM100.PVASPLFL initialAttributes;
  set PV0AM100.PVOVNDNM initialAttributes;
  ;
  ;
  ;
end // end PV0AS40

// Protect fields unless 'ic'
Function PV0AS42()
  ;
   /* if status equaL to 'ic' unprotect ctry code*/
   /* and factory code else protect*/
  ;
  if (PVAREC.XIPCD == "IC")
    set PV0AM100.PC6XCTCD initialAttributes;
    set PV0AM100.FY1FCTYC initialAttributes;
  else
    set PV0AM100.PC6XCTCD skip;
    set PV0AM100.FY1FCTYC skip;
  end
  ;
  set PV0AM100.XFACD skip;
  set PV0AM100.PVOVNDNM skip;
  set PV0AM100.PVAIVCDT skip;
  set PV0AM100.PVADUEDT skip;
  set PV0AM100.PVAACRSP skip;
  set PV0AM100.PVAXIPDT skip;
  set PV0AM100.PVABTNBR skip;
  set PV0AM100.PVAFDIND skip;
  set PV0AM100.XGPCD skip;
  set PV0AM100.PVAACRIN skip;
  set PV0AM100.PVAAPEDT skip;
  set PV0AM100.PVAIVAMT skip;
  set PV0AM100.PVATQTY skip;
  set PV0AM100.XIPCD skip;
  set PV0AM100.XIVCD skip;
  set PV0AM100.PVATDUTY skip;
  set PV0AM100.PVATFRGT skip;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT skip;
  set PV0AM100.PVASPTID skip;
  set PV0AM100.PVAETADT skip;
  set PV0AM100.PVABOLDT skip;
  set PV0AM100.PVADSCT skip;
  set PV0AM100.PVACRELD skip;
  set PV0AM100.PVABANKC skip;
  set PV0AM100.PVASPLFL skip;
  set PV0AM100.PVABANKP skip;
  set PV0AM100.PVACOMMP skip;
  set PV0AM100.PVAINT1 skip;
  set PV0AM100.PVAINT2 skip;
  set PV0AM100.PVAINT3 skip;
  set PV0AM100.PVAINTRT skip;
  set PV0AM100.PVATFOB skip;
  set PV0AM100.PVABRKRY skip;
  set PV0AM100.PVAOCHG1 skip;
  set PV0AM100.PVAOCHG2 skip;
  set PV0AM100.PVASCHG1 skip;
  set PV0AM100.PVASCHG2 skip;
  set PV0AM100.PVOVNDNM skip;
  ;
  ;
end // end PV0AS42

// Unprotect some Fields
Function PV0AS43()
  ;
   /* ***********************/
   /* Define All Fields*/
   /* ***********************/
  ;
  set PV0AM100.XFACD initialAttributes;
  set PV0AM100.PVAIVCDT cursor, initialAttributes;
  set PV0AM100.PVAIVAMT skip;
  set PV0AM100.PVADUEDT initialAttributes;
  set PV0AM100.PVAACRSP initialAttributes;
  set PV0AM100.PVOVNDNM initialAttributes;
  set PV0AM100.PVABTNBR initialAttributes;
  set PV0AM100.PVAFDIND initialAttributes;
  set PV0AM100.XGPCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVATQTY initialAttributes;
  set PV0AM100.PVATDUTY initialAttributes;
  set PV0AM100.PVATFRGT initialAttributes;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT initialAttributes;
  set PV0AM100.PVASPTID initialAttributes;
  set PV0AM100.PVAETADT initialAttributes;
  set PV0AM100.PVABOLDT initialAttributes;
  set PV0AM100.PVADSCT initialAttributes;
  set PV0AM100.PVACRELD initialAttributes;
  set PV0AM100.PVABANKC initialAttributes;
  set PV0AM100.PVABANKP initialAttributes;
  set PV0AM100.PVACOMMP initialAttributes;
  set PV0AM100.PVAINT1 initialAttributes;
  set PV0AM100.PVAINT2 initialAttributes;
  set PV0AM100.PVAINTRT initialAttributes;
  set PV0AM100.PVAINT3 initialAttributes;
  set PV0AM100.PVATFOB initialAttributes;
  set PV0AM100.PVABRKRY initialAttributes;
  set PV0AM100.PVAOCHG1 initialAttributes;
  set PV0AM100.PVAOCHG2 initialAttributes;
  set PV0AM100.PVASCHG1 initialAttributes;
  set PV0AM100.PVASCHG2 initialAttributes;
  set PV0AM100.PVAINTRT initialAttributes;
  set PV0AM100.PVAXIPDT initialAttributes;
  set PV0AM100.FY1FCTYC initialAttributes;
  set PV0AM100.PC6XCTCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVAAPEDT initialAttributes;
  set PV0AM100.XIPCD initialAttributes;
  set PV0AM100.XIVCD initialAttributes;
  set PV0AM100.PVASPLFL initialAttributes;
  ;
  ;
end // end PV0AS43

// Protect Nissho Fields
Function PV0AS44()
  ;
   /* Protect All Nissho Vendor Fields*/
  ;
  set PV0AM100.XFACD skip;
  set PV0AM100.PVAIVCDT cursor, initialAttributes;
  set PV0AM100.PVADUEDT initialAttributes;
  set PV0AM100.PVAACRSP initialAttributes;
  set PV0AM100.PVABTNBR initialAttributes;
  set PV0AM100.PVAFDIND initialAttributes;
  set PV0AM100.XGPCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVAIVAMT initialAttributes;
  set PV0AM100.PVATQTY initialAttributes;
  set PV0AM100.PVATDUTY skip;
  set PV0AM100.PVATFRGT initialAttributes;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT initialAttributes;
  set PV0AM100.PVASPTID skip;
  set PV0AM100.PVAETADT skip;
  set PV0AM100.PVABOLDT skip;
  set PV0AM100.PVADSCT skip;
  set PV0AM100.PVACRELD skip;
  set PV0AM100.PVABANKC skip;
  set PV0AM100.PVABANKP skip;
  set PV0AM100.PVACOMMP skip;
  set PV0AM100.PVAINT1 skip;
  set PV0AM100.PVAINT2 skip;
  set PV0AM100.PVAINTRT skip;
  set PV0AM100.PVAINT3 skip;
  set PV0AM100.PVATFOB initialAttributes;
  set PV0AM100.PVABRKRY skip;
  set PV0AM100.PVAOCHG1 skip;
  set PV0AM100.PVAOCHG2 skip;
  set PV0AM100.PVASCHG1 skip;
  set PV0AM100.PVASCHG2 skip;
  set PV0AM100.PVAINTRT skip;
  set PV0AM100.PVAXIPDT skip;
  set PV0AM100.FY1FCTYC initialAttributes;
  set PV0AM100.PC6XCTCD initialAttributes;
  set PV0AM100.PVAACRIN initialAttributes;
  set PV0AM100.PVAAPEDT initialAttributes;
  set PV0AM100.XIPCD initialAttributes;
  set PV0AM100.XIVCD initialAttributes;
  set PV0AM100.PVASPLFL skip;
  set PV0AM100.PVOVNDNM initialAttributes;
  ;
  ;
  ;
end // end PV0AS44

// Protect fields
Function PV0AS45()
  ;
   /* protect Fields*/
  ;
  set PV0AM100.XFACD skip;
  set PV0AM100.PVOVNDNM skip;
  set PV0AM100.PVAIVCDT skip;
  set PV0AM100.PVADUEDT skip;
  set PV0AM100.PVAACRSP skip;
  set PV0AM100.PVAXIPDT skip;
  set PV0AM100.PVABTNBR skip;
  set PV0AM100.PC6XCTCD skip;
  set PV0AM100.PVAFDIND skip;
  set PV0AM100.XGPCD skip;
  set PV0AM100.PVAACRIN skip;
  set PV0AM100.PVAAPEDT skip;
  set PV0AM100.PVAIVAMT skip;
  set PV0AM100.PVATQTY skip;
  set PV0AM100.XIPCD skip;
  set PV0AM100.XIVCD skip;
  set PV0AM100.PVATDUTY skip;
  set PV0AM100.PVATFRGT skip;
  set PV0AM100.PV0AM-NEW-FREIGHT-AMT skip;
  set PV0AM100.PVASPTID skip;
  set PV0AM100.PVAETADT skip;
  set PV0AM100.PVABOLDT skip;
  set PV0AM100.PVADSCT skip;
  set PV0AM100.PVACRELD skip;
  set PV0AM100.PVABANKC skip;
  set PV0AM100.PVASPLFL skip;
  set PV0AM100.PVABANKP skip;
  set PV0AM100.PVACOMMP skip;
  set PV0AM100.PVAINT1 skip;
  set PV0AM100.PVAINT2 skip;
  set PV0AM100.PVAINT3 skip;
  set PV0AM100.PVAINTRT skip;
  set PV0AM100.PVATFOB skip;
  set PV0AM100.PVABRKRY skip;
  set PV0AM100.PVAOCHG1 skip;
  set PV0AM100.PVAOCHG2 skip;
  set PV0AM100.PVASCHG1 skip;
  set PV0AM100.PVASCHG2 skip;
  set PV0AM100.FY1FCTYC skip;
  set PV0AM100.PVOVNDNM skip;
  ;
  ;
end // end PV0AS45

// Build Screen Pv0am200
Function PV0AS51()
  ;
   /* ************************/
   /* Build Screen PV0Am200*/
   /* ************************/
  ;
  PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
  ;
  PV0AM200.SY1STNBR[PVWLINEX] = PV0AW01.SY1STNBR[PVWLINEX];
  PV0AM200.SY2CLRID[PVWLINEX] = PV0AW01.SY2CLRID[PVWLINEX];
  PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PVWLINEX];
  PV0AM200.PVBPONBR[PVWLINEX] = PV0AW01.PC3PONBR[PVWLINEX];
  PV0AM200.PVBLNDTY[PVWLINEX] = PV0AW01.PVBLNDTY[PVWLINEX];
  PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW01.PVBLNAMT[PVWLINEX];
  PV0AM200.XUMCD[PVWLINEX] = PV0AW01.XUMCD[PVWLINEX];
  PV0AM200.XWHCD[PVWLINEX] = PV0AW01.XWHCD[PVWLINEX];
  PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PVWLINEX];
  PV0AM200.XDMCD[PVWLINEX] = PV0AW01.XDMCD[PVWLINEX];
  PV0AM200.PC2CUXID[PVWLINEX] = PV0AW01.PC2CUXID[PVWLINEX];
  PV0AM200.PC2INSEG[PVWLINEX] = PV0AW01.PC2INSEG[PVWLINEX];
  PV0AM200.XPGCD[PVWLINEX] = PV0AW01.XPGCD[PVWLINEX];
  PV0AM200.XSECD[PVWLINEX] = PV0AW01.XSECD[PVWLINEX];
  PV0AM200.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX];
  PV0AM200.PVBCONTN[PVWLINEX] = PV0AW01.PVBCONTN[PVWLINEX];
  PV0AM200.PVBBSZDS[PVWLINEX] = PV0AW01.PVBBSZDS[PVWLINEX];
  PV0AM200.PVBESZDS[PVWLINEX] = PV0AW01.PVBESZDS[PVWLINEX];
  PV0AM200.SY1SSTNM[PVWLINEX] = PV0AW01.SY1SSTNM[PVWLINEX];
  PV0AM200.PVBLNFOB[PVWLINEX] = PV0AW01.PVBLNFOB[PVWLINEX];
  PV0AM200.PVBLNCOM[PVWLINEX] = PV0AW01.PVBLNCOM[PVWLINEX];
  ;
  PV0AW01.PV0AWHD1 = 0;
  PV0AW01.PV0AWHD2 = 0;
  ;
   /* ****************************************/
   /* Set Fields Back To Original Definition*/
   /* ****************************************/
  set PV0AM200.SY1STNBR[PVWLINEX] initialAttributes;
  set PV0AM200.SY2CLRID[PVWLINEX] initialAttributes;
  set PV0AM200.SY1SSTNM[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNDTY[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNAMT[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNFOB[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNCOM[PVWLINEX] initialAttributes;
  set PV0AM200.XWHCD[PVWLINEX] initialAttributes;
  set PV0AM200.XUMCD[PVWLINEX] initialAttributes;
  set PV0AM200.XQACD[PVWLINEX] initialAttributes;
  set PV0AM200.XDMCD[PVWLINEX] initialAttributes;
  set PV0AM200.PC2CUXID[PVWLINEX] initialAttributes;
  set PV0AM200.PC2INSEG[PVWLINEX] initialAttributes;
  set PV0AM200.XPGCD[PVWLINEX] initialAttributes;
  set PV0AM200.XSECD[PVWLINEX] initialAttributes;
  set PV0AM200.PCFSEYR[PVWLINEX] initialAttributes;
  set PV0AM200.PVBCONTN[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNQTY[PVWLINEX] initialAttributes;
  set PV0AM200.PVBPONBR[PVWLINEX] initialAttributes;
  set PV0AM200.PVBBSZDS[PVWLINEX] initialAttributes;
  set PV0AM200.PVBESZDS[PVWLINEX] initialAttributes;
  ;
  ;
end // end PV0AS51

// Set Needed Fields to Autoskip
Function PV0AS52()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - REMOVE CHECK FOR NISSHO*/
   /* ************************/
   /* Build Screen PV0Am200*/
   /* ************************/
  ;
  PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
  ;
   /* ***************************************************/
   /* user is inquiry only or invoice is already matched*/
   /* ***************************************************/
  ;
  if (PVWREC.PVWUPDTF == "N"
   || PV0AM100.XIPCD == "MT"
   || PV0AM100.XIPCD == "IC"
   || PV0AM100.XIPCD == "CP"
   || PV0AM100.XIPCD == "CX"
   || PV0AM100.XIPCD == "EX")
    set PV0AM200.PC3PONBR skip;
    set PV0AM200.SY1STNBR[PVWLINEX] skip;
    set PV0AM200.SY2CLRID[PVWLINEX] skip;
    set PV0AM200.PVBLNDTY[PVWLINEX] skip;
    set PV0AM200.PVBLNFOB[PVWLINEX] skip;
    set PV0AM200.PVBLNCOM[PVWLINEX] skip;
    set PV0AM200.PVBLNAMT[PVWLINEX] skip;
    set PV0AM200.XWHCD[PVWLINEX] skip;
    set PV0AM200.XUMCD[PVWLINEX] skip;
    set PV0AM200.XQACD[PVWLINEX] skip;
    set PV0AM200.XDMCD[PVWLINEX] skip;
    set PV0AM200.XSECD[PVWLINEX] skip;
    set PV0AM200.PCFSEYR[PVWLINEX] skip;
    set PV0AM200.PC2CUXID[PVWLINEX] skip;
    set PV0AM200.PC2INSEG[PVWLINEX] skip;
    set PV0AM200.XPGCD[PVWLINEX] skip;
    set PV0AM200.PVBCONTN[PVWLINEX] skip;
    set PV0AM200.PVBLNQTY[PVWLINEX] skip;
    set PV0AM200.PVBPONBR[PVWLINEX] skip;
    set PV0AM200.PVBBSZDS[PVWLINEX] skip;
    set PV0AM200.PVBESZDS[PVWLINEX] skip;
    set PV0AM200.SY1SSTNM[PVWLINEX] skip;
    set PV0AM200.CATOAP cursor;
  else
    if (PV0AM100.PVAFDIND != "F")
      /* WHICH WAY DO WE REALLY WANT THIS?*/
       /* AND PVUREC.PVUCHOIC NE 9;*/
      if (PV0AM100.PVOVENDR == "2577"
       || PVUREC.PVUCHOIC == 9)
        /* NEXT SENTENCE*/
      else
        set PV0AM200.PVBLNCOM[PVWLINEX] skip;
        set PV0AM200.PVBCONTN[PVWLINEX] skip;
        set PV0AM200.PVBLNDTY[PVWLINEX] skip;
      end
    end
  end
  ;
  if (PV0AM100.XIPCD == "MT"
   || PV0AM100.XIPCD == "IC")
    if (COMMAREA.CAADDFL == "Y"
     || COMMAREA.CAILVL[1] == "Y")
      if (PVWREC.PVWLINEX <= PV0AW01.PV0AWLIN)
        set PV0AM200.SY2CLRID[PVWLINEX] initialAttributes;
        set PV0AM200.XSECD[PVWLINEX] initialAttributes;
        set PV0AM200.PCFSEYR[PVWLINEX] initialAttributes;
      end
    end
  end
  ;
end // end PV0AS52

// Check For Modifications
Function PV0AS53()
   /* ****************************************/
   /* Check Modifications to Any Line Items*/
   /* ****************************************/
   /* 08-17-94 bcourt compare num po nbr, not char.*/
   /* ****************************************/
  ;
  if (PV0AM200.SY1STNBR[PVWLINEX] != PV0AW01.SY1STNBR[PV0AWLIM]
   || PV0AM200.SY2CLRID[PVWLINEX] != PV0AW01.SY2CLRID[PV0AWLIM]
   || PV0AM200.PVBPONBR[PVWLINEX] != PV0AW01.PC3PONBR[PV0AWLIM]
   || PV0AM200.PVBLNQTY[PVWLINEX] != PV0AW01.PVBLNQTY[PV0AWLIM]
   || PV0AM200.PVBLNDTY[PVWLINEX] != PV0AW01.PVBLNDTY[PV0AWLIM]
   || PV0AM200.PVBLNFOB[PVWLINEX] != PV0AW01.PVBLNFOB[PV0AWLIM]
   || PV0AM200.PVBLNCOM[PVWLINEX] != PV0AW01.PVBLNCOM[PV0AWLIM]
   || PV0AM200.PVBLNAMT[PVWLINEX] != PV0AW01.PVBLNAMT[PV0AWLIM]
   || PV0AM200.XUMCD[PVWLINEX] != PV0AW01.XUMCD[PV0AWLIM]
   || PV0AM200.XQACD[PVWLINEX] != PV0AW01.XQACD[PV0AWLIM]
   || PV0AM200.XWHCD[PVWLINEX] != PV0AW01.XWHCD[PV0AWLIM]
   || PV0AM200.XDMCD[PVWLINEX] != PV0AW01.XDMCD[PV0AWLIM]
   || PV0AM200.PC2CUXID[PVWLINEX] != PV0AW01.PC2CUXID[PV0AWLIM]
   || PV0AM200.PC2INSEG[PVWLINEX] != PV0AW01.PC2INSEG[PV0AWLIM]
   || PV0AM200.XPGCD[PVWLINEX] != PV0AW01.XPGCD[PV0AWLIM]
   || PV0AM200.XSECD[PVWLINEX] != PV0AW01.XSECD[PV0AWLIM]
   || PV0AM200.PCFSEYR[PVWLINEX] != PV0AW01.PCFSEYR[PV0AWLIM]
   || PV0AM200.PVBCONTN[PVWLINEX] != PV0AW01.PVBCONTN[PV0AWLIM]
   || PV0AM200.PVBBSZDS[PVWLINEX] != PV0AW01.PVBBSZDS[PV0AWLIM]
   || PV0AM200.PVBESZDS[PVWLINEX] != PV0AW01.PVBESZDS[PV0AWLIM])
    PV0AW01.PV0AWMDF = "Y";
    PV0AW01.PV0AWUPF = "Y"; /* mark screen for updt*/
    PV0AW01.PV0AWEDT[PV0AWLIM] = "Y"; /* mark line item*/
  else
    PV0AW01.PV0AWMDF = "N";
     /* MOVE 'N' TO PV0AW01.PV0AWEDT(PV0AWLIM);marklineitem*/
  end
  ;
  ;
  if (PV0AM200.SY1STNBR[PVWLINEX] == "  " /* is item blank*/
   && PV0AM200.SY2CLRID[PVWLINEX] == "  " 
   && PV0AM200.PVBPONBR[PVWLINEX] == 0    /* change from '0000000'*/
   && PV0AM200.PVBLNQTY[PVWLINEX] == 0    
   && PV0AM200.PVBLNFOB[PVWLINEX] == 0)  
    PV0AW01.PV0AWDEL = "Y";
    if (PV0AW01.PV0AWMDF == "N") /* blank line located*/
      PV0AW01.PV0AWFLL = "Y"; /* init line item flag*/
    else
      PV0AW01.PV0AWLEF[PVWLNCK] = "N"; /* delete possible err flag*/
      PV0AW01.PV0AWMKF[PVWLNCK] = "D"; /* delete marker*/
      PV0AM200.PVBLNAMT[PVWLINEX] = 0;
      PV0AM200.SY1SSTNM[PVWLINEX] = "  ";
      PV0AM200.XUMCD[PVWLINEX] = "  ";
      PV0AM200.XQACD[PVWLINEX] = "  ";
      PV0AM200.XWHCD[PVWLINEX] = "  ";
      PV0AM200.XDMCD[PVWLINEX] = "  ";
      PV0AM200.PC2CUXID[PVWLINEX] = "  ";
      PV0AM200.PC2INSEG[PVWLINEX] = "  ";
      PV0AM200.XPGCD[PVWLINEX] = "  ";
      PV0AM200.XSECD[PVWLINEX] = "  ";
      PV0AM200.PCFSEYR[PVWLINEX] = 0;
      PV0AM200.PVBLNCOM[PVWLINEX] = 0;
      PV0AM200.PVBLNDTY[PVWLINEX] = 0;
      PV0AM200.PVBCONTN[PVWLINEX] = "  ";
      PV0AM200.PVBBSZDS[PVWLINEX] = "  ";
      PV0AM200.PVBESZDS[PVWLINEX] = "  ";
    end
  else
    PV0AW01.PV0AWDEL = "N";
  end
  ;
  ;
   /* ****************************************/
   /* Set Fields Back To Original Definition*/
   /* ****************************************/
  set PV0AM200.SY1STNBR[PVWLINEX] initialAttributes;
  set PV0AM200.SY2CLRID[PVWLINEX] initialAttributes;
  set PV0AM200.SY1SSTNM[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNDTY[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNAMT[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNFOB[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNCOM[PVWLINEX] initialAttributes;
  set PV0AM200.XWHCD[PVWLINEX] initialAttributes;
  set PV0AM200.XUMCD[PVWLINEX] initialAttributes;
  set PV0AM200.XQACD[PVWLINEX] initialAttributes;
  set PV0AM200.XDMCD[PVWLINEX] initialAttributes;
  set PV0AM200.PC2CUXID[PVWLINEX] initialAttributes;
  set PV0AM200.PC2INSEG[PVWLINEX] initialAttributes;
  set PV0AM200.XPGCD[PVWLINEX] initialAttributes;
  set PV0AM200.XSECD[PVWLINEX] initialAttributes;
  set PV0AM200.PCFSEYR[PVWLINEX] initialAttributes;
  set PV0AM200.PVBCONTN[PVWLINEX] initialAttributes;
  set PV0AM200.PVBLNQTY[PVWLINEX] initialAttributes;
  set PV0AM200.PVBPONBR[PVWLINEX] initialAttributes;
  set PV0AM200.PVBBSZDS[PVWLINEX] initialAttributes;
  set PV0AM200.PVBESZDS[PVWLINEX] initialAttributes;
  ;
end // end PV0AS53

// Redisplay Screen: Load error
Function PV0AS54()
  ;
   /* ********************************************************/
   /* A load error that was not fixed has been found and we*/
   /* need to redisplay the line item screen*/
   /* ********************************************************/
   /* 08-10-94 bcourt  replace constant 200 with variable*/
   /* name pv0awmax, init in pv0as00.*/
   /* 08-19-94 bcourt  move pv0awmax from w01 to w02.*/
   /* ********************************************************/
  ;
  PV0AM200.PVOVENDR = PVBREC.PVOVENDR;
  PV0AM200.PVOVENDG = PVBREC.PVOVENDG;
  PV0AM200.PVAIVCID = PVBREC.PVAIVCID;
  PV0AM200.PVOVNDNM = PVOREC.PVOVNDNM;
  PV0AM200.PC3PONBR = PV0AW01.PC3PONBR[1];
  PV0AM200.PVAIVAMT = PV0AM100.PVAIVAMT;
  PV0AM200.PVTODAY = PV0AM100.PVTODAY;
  PV0AM200.PVTIME = PV0AW02.TA2TIME;
  ;
  while (PV0AW01.PV0AW1ST < PV0AW01.PV0AWCLN
   && PV0AW01.PV0AW1ST < PV0AW02.PV0AWMAX) /* 8-10-94*/
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    ;
    PV0AM200.SY1STNBR[PVWLINEX] = PV0AW01.SY1STNBR[PV0AW1ST];
    PV0AM200.SY2CLRID[PVWLINEX] = PV0AW01.SY2CLRID[PV0AW1ST];
    PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PV0AW1ST];
    PV0AM200.PVBLNDTY[PVWLINEX] = PV0AW01.PVBLNDTY[PV0AW1ST];
    PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW01.PVBLNAMT[PV0AW1ST];
    PV0AM200.XUMCD[PVWLINEX] = PV0AW01.XUMCD[PV0AW1ST];
    PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PV0AW1ST];
    PV0AM200.XDMCD[PVWLINEX] = PV0AW01.XDMCD[PV0AW1ST];
    PV0AM200.XWHCD[PVWLINEX] = PV0AW01.XWHCD[PV0AW1ST];
    PV0AM200.PC2CUXID[PVWLINEX] = PV0AW01.PC2CUXID[PV0AW1ST];
    PV0AM200.PC2INSEG[PVWLINEX] = PV0AW01.PC2INSEG[PV0AW1ST];
    PV0AM200.XPGCD[PVWLINEX] = PV0AW01.XPGCD[PV0AW1ST];
    PV0AM200.XSECD[PVWLINEX] = PV0AW01.XSECD[PV0AW1ST];
    PV0AM200.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PV0AW1ST];
    PV0AM200.PVBCONTN[PVWLINEX] = PV0AW01.PVBCONTN[PV0AW1ST];
    PV0AM200.PVBBSZDS[PVWLINEX] = PV0AW01.PVBBSZDS[PV0AW1ST];
    PV0AM200.PVBESZDS[PVWLINEX] = PV0AW01.PVBESZDS[PV0AW1ST];
    PV0AM200.SY1SSTNM[PVWLINEX] = PV0AW01.SY1SSTNM[PV0AW1ST];
    PV0AM200.PVBPONBR[PVWLINEX] = PV0AW01.PC3PONBR[PV0AW1ST];
    PV0AM200.PVBLNCOM[PVWLINEX] = PV0AW01.PVBLNCOM[PV0AW1ST];
    PV0AM200.PVBLNFOB[PVWLINEX] = PV0AW01.PVBLNFOB[PV0AW1ST];
    ;
    ;
  end
  ;
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* reset counter*/
  ;
  ;
  ;
end // end PV0AS54

// Load Pvbrec For ADD
Function PV0AS55()
  ;
   /* **************/
   /* Pvbrec Load*/
   /* **************/
   /* **  maintenance log  *************************************/
   /* 09-28-94  BCourt  PV#14  Force over/short qty = 0 for   **/
   /* new International invoice.                          **/
   /* **********************************************************/
  if (PV0AW01.PV0AWLEF[PVWLINEX] == "Y")
    if (PV0AW01.PV0AWBGD != "Y")
      PV0AW01.PV0AWUP2 = "Y";
      if (PV0AW01.PCFSEYR[PVWLINEX] == 0)
        PVBREC.PCFSEYR = -9999;
      else
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
        PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
      end
    else
      if (PV0AW01.PCFSEYR[PVWLINEX] == 0)
        PVBREC.PCFSEYR = -9999;
      else
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
        PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
      end
    end
  else
    PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
  end
  ;
  ;
  ;
  PVBREC.PVOVENDR = PVAREC.PVOVENDR;
  PVBREC.PVOVENDG = PVAREC.PVOVENDG;
  PVBREC.PVAIVCID = PVAREC.PVAIVCID;
  PVBREC.PVBLNINB = PV0AW01.PVBLNINB[PVWLINEX];
  PVBREC.PVBBSZNK = PV0AW01.PVBBSZNK[PVWLINEX];
  PVBREC.PVBESZNK = PV0AW01.PVBESZNK[PVWLINEX];
  ;
  PVBREC.FY1FCTYC = PV0AM100.FY1FCTYC;
  PVBREC.XGPCD = PV0AM100.XGPCD;
  PVBREC.PC3PONBR = PV0AW01.PC3PONBR[PVWLINEX];
  PVBREC.SY1STNBR = PV0AW01.SY1STNBR[PVWLINEX];
  PVBREC.SY2CLRID = PV0AW01.SY2CLRID[PVWLINEX];
  PVBREC.PVBLNQTY = PV0AW01.PVBLNQTY[PVWLINEX];
  PVBREC.PCMOSQTY = PV0AW01.PVBLNQTY[PVWLINEX];
  PV0AW01.PCMOSQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PVWLINEX];
  PVBREC.PVBLNCOM = PV0AW01.PVBLNCOM[PVWLINEX];
  PVBREC.PVBLNFOB = PV0AW01.PVBLNFOB[PVWLINEX];
  PVBREC.PVBLNDTY = PV0AW01.PVBLNDTY[PVWLINEX];
  PVBREC.XUMCD = PV0AW01.XUMCD[PVWLINEX];
  PVBREC.XQACD = PV0AW01.XQACD[PVWLINEX];
  PVBREC.XWHCD = PV0AW01.XWHCD[PVWLINEX];
  PVBREC.XDMCD = PV0AW01.XDMCD[PVWLINEX];
  PVBREC.PC2CUXID = PV0AW01.PC2CUXID[PVWLINEX];
  PVBREC.PC2INSEG = PV0AW01.PC2INSEG[PVWLINEX];
  PVBREC.XPGCD = PV0AW01.XPGCD[PVWLINEX];
  PVBREC.XSECD = PV0AW01.XSECD[PVWLINEX];
  PVBREC.PVBCONTN = PV0AW01.PVBCONTN[PVWLINEX];
  PVBREC.PVBBSZDS = PV0AW01.PVBBSZDS[PVWLINEX];
  PVBREC.PVBESZDS = PV0AW01.PVBESZDS[PVWLINEX];
  PVBREC.PVBLNAMT = PV0AW01.PVBLNAMT[PVWLINEX];
  PVBREC.YSRSLSRG = PV0AW01.YSRSLSRG[PVWLINEX];
  PVBREC.YMTCD = PV0AW01.YMTCD[PVWLINEX];
  PVBREC.XDSCD = PV0AW01.XDSCD[PVWLINEX];
  if (PV0AW01.XQACD[PVWLINEX] == "3S"
   || PV0AW01.XQACD[PVWLINEX] == "3B") /* screeners*/
    PVBREC.PCMOSQTY = 0;
  end
  if (PV0AM100.PVAACRSP == "N") /* for int'l invoice*/
    PVBREC.PCMOSQTY = 0;
  end
  ;
  PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  ;
  ;
end // end PV0AS55

// Load Pvbrec For Update
Function PV0AS56()
   /* **************/
   /* Pvbrec Load*/
   /* **************/
   /* ***  maintenance log  ***************************************/
   /* 09-28-94  BCourt  PV#14  Force over/short = 0 for new      **/
   /* International invoice.  consider = fully received.      **/
   /* *************************************************************/
  PVBREC.PVOVENDR = PV0AM200.PVOVENDR;
  PVBREC.PVOVENDG = PV0AM200.PVOVENDG;
  PVBREC.PVAIVCID = PV0AM200.PVAIVCID;
  PVBREC.PVBLNINB = PV0AW01.PVBLNINB[PVWLINEX];
  PVBREC.PVBBSZNK = PV0AW01.PVBBSZNK[PVWLINEX];
  PVBREC.PVBESZNK = PV0AW01.PVBESZNK[PVWLINEX];
  ;
  PVBREC.FY1FCTYC = PV0AM100.FY1FCTYC;
  PVBREC.XGPCD = PV0AM100.XGPCD;
  ;
  PVBREC.PC3PONBR = PV0AW01.PC3PONBR[PVWLINEX];
  PVBREC.SY1STNBR = PV0AW01.SY1STNBR[PVWLINEX];
  PVBREC.SY2CLRID = PV0AW01.SY2CLRID[PVWLINEX];
  PVBREC.PVBLNQTY = PV0AW01.PVBLNQTY[PVWLINEX];
  PVBREC.PVBLNCOM = PV0AW01.PVBLNCOM[PVWLINEX];
  PVBREC.PVBLNFOB = PV0AW01.PVBLNFOB[PVWLINEX];
  PVBREC.PVBLNDTY = PV0AW01.PVBLNDTY[PVWLINEX];
  PVBREC.XUMCD = PV0AW01.XUMCD[PVWLINEX];
  PVBREC.XQACD = PV0AW01.XQACD[PVWLINEX];
  PVBREC.XWHCD = PV0AW01.XWHCD[PVWLINEX];
  PVBREC.XDMCD = PV0AW01.XDMCD[PVWLINEX];
  PVBREC.PC2CUXID = PV0AW01.PC2CUXID[PVWLINEX];
  PVBREC.PC2INSEG = PV0AW01.PC2INSEG[PVWLINEX];
  PVBREC.XPGCD = PV0AW01.XPGCD[PVWLINEX];
  PVBREC.XSECD = PV0AW01.XSECD[PVWLINEX];
  PVBREC.PVBCONTN = PV0AW01.PVBCONTN[PVWLINEX];
  PVBREC.PVBBSZDS = PV0AW01.PVBBSZDS[PVWLINEX];
  PVBREC.PVBESZDS = PV0AW01.PVBESZDS[PVWLINEX];
  PVBREC.PVBLNAMT = PV0AW01.PVBLNAMT[PVWLINEX];
  PVBREC.YMTCD = PV0AW01.YMTCD[PVWLINEX];
  PVBREC.XDSCD = PV0AW01.XDSCD[PVWLINEX];
  PVBREC.YSRSLSRG = PV0AW01.YSRSLSRG[PVWLINEX];
  ;
  if (PV0AW01.XQACD[PVWLINEX] == "3S"
   || PV0AW01.XQACD[PVWLINEX] == "3B") /* skip screeners, always 0*/
    PVBREC.PCMOSQTY = 0;
  end
  if (PV0AM100.PVAACRSP == "N") /* force over/short = 0 for int'l*/
    PVBREC.PCMOSQTY = 0;
  end
  ;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
end // end PV0AS56

// Set Line Counters For Display
Function PV0AS57()
  ;
   /* *********************/
   /* Redisplay of Errors*/
   /* *********************/
  ;
  if (PVWREC.PVWLINEX > 0
   && PVWREC.PVWLINEX < 8)
    PV0AW01.PV0AW1ST = 0;
    PV0AW01.PV0AWCLN = 7;
  else
    if (PVWREC.PVWLINEX > 7
     && PVWREC.PVWLINEX < 15)
      PV0AW01.PV0AW1ST = 7;
      PV0AW01.PV0AWCLN = 14;
    else
      if (PVWREC.PVWLINEX > 14
       && PVWREC.PVWLINEX < 22)
        PV0AW01.PV0AW1ST = 14;
        PV0AW01.PV0AWCLN = 21;
      else
        if (PVWREC.PVWLINEX > 21
         && PVWREC.PVWLINEX < 29)
          PV0AW01.PV0AW1ST = 21;
          PV0AW01.PV0AWCLN = 28;
        else
          if (PVWREC.PVWLINEX > 28
           && PVWREC.PVWLINEX < 36)
            PV0AW01.PV0AW1ST = 28;
            PV0AW01.PV0AWCLN = 35;
          else
            if (PVWREC.PVWLINEX > 35
             && PVWREC.PVWLINEX < 43)
              PV0AW01.PV0AW1ST = 35;
              PV0AW01.PV0AWCLN = 42;
            else
              if (PVWREC.PVWLINEX > 42
               && PVWREC.PVWLINEX < 50)
                PV0AW01.PV0AW1ST = 42;
                PV0AW01.PV0AWCLN = 49;
              else
                if (PVWREC.PVWLINEX > 49
                 && PVWREC.PVWLINEX < 57)
                  PV0AW01.PV0AW1ST = 49;
                  PV0AW01.PV0AWCLN = 56;
                else
                  if (PVWREC.PVWLINEX > 56
                   && PVWREC.PVWLINEX < 64)
                    PV0AW01.PV0AW1ST = 56;
                    PV0AW01.PV0AWCLN = 63;
                  else
                    if (PVWREC.PVWLINEX > 63
                     && PVWREC.PVWLINEX < 71)
                      PV0AW01.PV0AW1ST = 63;
                      PV0AW01.PV0AWCLN = 70;
                    else
                      if (PVWREC.PVWLINEX > 70
                       && PVWREC.PVWLINEX < 78)
                        PV0AW01.PV0AW1ST = 70;
                        PV0AW01.PV0AWCLN = 77;
                      else
                        if (PVWREC.PVWLINEX > 77
                         && PVWREC.PVWLINEX < 85)
                          PV0AW01.PV0AW1ST = 77;
                          PV0AW01.PV0AWCLN = 84;
                        else
                          if (PVWREC.PVWLINEX > 84
                           && PVWREC.PVWLINEX < 92)
                            PV0AW01.PV0AW1ST = 84;
                            PV0AW01.PV0AWCLN = 91;
                          else
                            if (PVWREC.PVWLINEX > 91
                             && PVWREC.PVWLINEX < 99)
                              PV0AW01.PV0AW1ST = 91;
                              PV0AW01.PV0AWCLN = 98;
                            else
                              if (PVWREC.PVWLINEX > 98
                               && PVWREC.PVWLINEX < 106)
                                PV0AW01.PV0AW1ST = 98;
                                PV0AW01.PV0AWCLN = 105;
                              else
                                PV0AS58();
                                ;
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  PVWREC.PVWLNCK = 7;
  PV0AW02.PV0AWIMX = 0;
  while (PV0AW01.PV0AWCLN != PVWREC.PVWLINEX
   && PVWREC.PVWLNCK > 0)
    PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN - 1;
    PVWREC.PVWLNCK = PVWREC.PVWLNCK - 1;
    PV0AW02.PV0AWIMX = PV0AW02.PV0AWIMX + 1;
  end
  PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN + PV0AW02.PV0AWIMX;
  ;
  set PV0AM200.SY1STNBR[PVWLNCK] cursor, bold;
  set PV0AM200.SY2CLRID[PVWLNCK] bold;
  set PV0AM200.PVBPONBR[PVWLNCK] bold;
  set PV0AM200.PVBLNQTY[PVWLNCK] bold;
  set PV0AM200.PVBLNDTY[PVWLNCK] bold;
  set PV0AM200.PVBLNFOB[PVWLNCK] bold;
  set PV0AM200.PVBLNAMT[PVWLNCK] bold;
  set PV0AM200.PVBBSZDS[PVWLNCK] bold;
  set PV0AM200.PVBESZDS[PVWLNCK] bold;
  set PV0AM200.SY1SSTNM[PVWLNCK] bold;
  set PV0AM200.XUMCD[PVWLNCK] bold;
  set PV0AM200.XQACD[PVWLNCK] bold;
  set PV0AM200.XDMCD[PVWLNCK] bold;
  ;
  ;
  ;
  ;
end // end PV0AS57

// Set Line Cntrs 100-200 4 dsply
Function PV0AS58()
  ;
   /* *********************/
   /* Redisplay of Errors*/
   /* *********************/
  ;
  ;
  if (PVWREC.PVWLINEX > 105
   && PVWREC.PVWLINEX < 113)
    PV0AW01.PV0AW1ST = 105;
    PV0AW01.PV0AWCLN = 112;
  else
    if (PVWREC.PVWLINEX > 112
     && PVWREC.PVWLINEX < 120)
      PV0AW01.PV0AW1ST = 112;
      PV0AW01.PV0AWCLN = 119;
    else
      if (PVWREC.PVWLINEX > 119
       && PVWREC.PVWLINEX < 127)
        PV0AW01.PV0AW1ST = 119;
        PV0AW01.PV0AWCLN = 126;
      else
        if (PVWREC.PVWLINEX > 126
         && PVWREC.PVWLINEX < 134)
          PV0AW01.PV0AW1ST = 126;
          PV0AW01.PV0AWCLN = 133;
        else
          if (PVWREC.PVWLINEX > 133
           && PVWREC.PVWLINEX < 141)
            PV0AW01.PV0AW1ST = 133;
            PV0AW01.PV0AWCLN = 140;
          else
            if (PVWREC.PVWLINEX > 140
             && PVWREC.PVWLINEX < 148)
              PV0AW01.PV0AW1ST = 140;
              PV0AW01.PV0AWCLN = 147;
            else
              if (PVWREC.PVWLINEX > 147
               && PVWREC.PVWLINEX < 155)
                PV0AW01.PV0AW1ST = 147;
                PV0AW01.PV0AWCLN = 154;
              else
                if (PVWREC.PVWLINEX > 154
                 && PVWREC.PVWLINEX < 162)
                  PV0AW01.PV0AW1ST = 154;
                  PV0AW01.PV0AWCLN = 161;
                else
                  if (PVWREC.PVWLINEX > 161
                   && PVWREC.PVWLINEX < 169)
                    PV0AW01.PV0AW1ST = 161;
                    PV0AW01.PV0AWCLN = 168;
                  else
                    if (PVWREC.PVWLINEX > 168
                     && PVWREC.PVWLINEX < 176)
                      PV0AW01.PV0AW1ST = 168;
                      PV0AW01.PV0AWCLN = 175;
                    else
                      if (PVWREC.PVWLINEX > 175
                       && PVWREC.PVWLINEX < 183)
                        PV0AW01.PV0AW1ST = 175;
                        PV0AW01.PV0AWCLN = 182;
                      else
                        if (PVWREC.PVWLINEX > 182
                         && PVWREC.PVWLINEX < 190)
                          PV0AW01.PV0AW1ST = 182;
                          PV0AW01.PV0AWCLN = 189;
                        else
                          if (PVWREC.PVWLINEX > 189
                           && PVWREC.PVWLINEX < 197)
                            PV0AW01.PV0AW1ST = 189;
                            PV0AW01.PV0AWCLN = 196;
                          else
                            if (PVWREC.PVWLINEX > 196
                             && PVWREC.PVWLINEX < 204)
                              PV0AW01.PV0AW1ST = 196;
                              PV0AW01.PV0AWCLN = 203;
                            else
                              PV0AS65(); /* add 8/94 for lines 200-300*/
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end PV0AS58

// Load Pvbrec For Update
Function PV0AS59()
  ;
   /* **************/
   /* Pvbrec Load*/
   /* **************/
   /* **  maintenance log  *************************************/
   /* 09-28-94 BCourt  Force over/short qty = 0 for Int'l.    **/
   /* **********************************************************/
  ;
  if (PV0AW01.PV0AWLEF[PVWLINEX] == "Y")
    if (PV0AW01.PV0AWBGD != "Y")
      PV0AW01.PV0AWUP2 = "Y";
      if (PV0AW01.PCFSEYR[PVWLINEX] == 0)
        PVBREC.PCFSEYR = -9999;
      else
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
        PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
      end
    else
      if (PV0AW01.PCFSEYR[PVWLINEX] == 0)
        PVBREC.PCFSEYR = -9999;
      else
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
        PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
        PV0AW01.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PVWLINEX] * -1;
      end
    end
  else
    PVBREC.PCFSEYR = PV0AW01.PCFSEYR[PVWLINEX];
  end
  ;
  ;
  ;
  PVBREC.PVOVENDR = PVAREC.PVOVENDR;
  PVBREC.PVOVENDG = PVAREC.PVOVENDG;
  PVBREC.PVAIVCID = PVAREC.PVAIVCID;
  PVBREC.PVBLNINB = PV0AW01.PVBLNINB[PVWLINEX];
  PVBREC.PVBBSZNK = PV0AW01.PVBBSZNK[PVWLINEX];
  PVBREC.PVBESZNK = PV0AW01.PVBESZNK[PVWLINEX];
  ;
  PVBREC.FY1FCTYC = PV0AM100.FY1FCTYC;
  PVBREC.XGPCD = PV0AM100.XGPCD;
  PVBREC.PC3PONBR = PV0AW01.PC3PONBR[PVWLINEX];
  PVBREC.SY1STNBR = PV0AW01.SY1STNBR[PVWLINEX];
  PVBREC.SY2CLRID = PV0AW01.SY2CLRID[PVWLINEX];
  PVBREC.PVBLNQTY = PV0AW01.PVBLNQTY[PVWLINEX];
  PVBREC.PCMOSQTY = PV0AW01.PCMOSQTY[PVWLINEX];
  PVBREC.PVBLNCOM = PV0AW01.PVBLNCOM[PVWLINEX];
  PVBREC.PVBLNFOB = PV0AW01.PVBLNFOB[PVWLINEX];
  PVBREC.PVBLNDTY = PV0AW01.PVBLNDTY[PVWLINEX];
  PVBREC.XUMCD = PV0AW01.XUMCD[PVWLINEX];
  PVBREC.XQACD = PV0AW01.XQACD[PVWLINEX];
  PVBREC.XWHCD = PV0AW01.XWHCD[PVWLINEX];
  PVBREC.XDMCD = PV0AW01.XDMCD[PVWLINEX];
  PVBREC.PC2CUXID = PV0AW01.PC2CUXID[PVWLINEX];
  PVBREC.PC2INSEG = PV0AW01.PC2INSEG[PVWLINEX];
  PVBREC.XPGCD = PV0AW01.XPGCD[PVWLINEX];
  PVBREC.XSECD = PV0AW01.XSECD[PVWLINEX];
  PVBREC.PVBCONTN = PV0AW01.PVBCONTN[PVWLINEX];
  PVBREC.PVBBSZDS = PV0AW01.PVBBSZDS[PVWLINEX];
  PVBREC.PVBESZDS = PV0AW01.PVBESZDS[PVWLINEX];
  PVBREC.PVBLNAMT = PV0AW01.PVBLNAMT[PVWLINEX];
  PVBREC.YSRSLSRG = PV0AW01.YSRSLSRG[PVWLINEX];
  PVBREC.YMTCD = PV0AW01.YMTCD[PVWLINEX];
  PVBREC.XDSCD = PV0AW01.XDSCD[PVWLINEX];
  if (PV0AW01.XQACD[PVWLINEX] == "3S"
   || PV0AW01.XQACD[PVWLINEX] == "3B")
    PVBREC.PCMOSQTY = 0;
  end
  if (PV0AM100.PVAACRSP == "N") /* 9-28-94 for int'l invoices*/
    PVBREC.PCMOSQTY = 0;
  end
  ;
  ;
  PVBREC.ZZZSDT = PV0AW01.ZZZSDT[PVWLINEX];
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  ;
  ;
end // end PV0AS59

// Move Screen Data To W/S
Function PV0AS60()
  ;
   /* **********************/
   /* Move PV0AM200 To W/S*/
   /* **********************/
  ;
  PV0AW01.SY1STNBR[PVWLNCK] = PV0AM200.SY1STNBR[PVWLINEX];
  PV0AW01.SY2CLRID[PVWLNCK] = PV0AM200.SY2CLRID[PVWLINEX];
  PV0AW01.PVBLNQTY[PVWLNCK] = PV0AM200.PVBLNQTY[PVWLINEX];
  PV0AW01.PC3PONBR[PVWLNCK] = PV0AM200.PVBPONBR[PVWLINEX];
  PV0AW01.PVBLNDTY[PVWLNCK] = PV0AM200.PVBLNDTY[PVWLINEX];
  PV0AW01.PVBLNAMT[PVWLNCK] = PV0AM200.PVBLNAMT[PVWLINEX];
  PV0AW01.PVBLNFOB[PVWLNCK] = PV0AM200.PVBLNFOB[PVWLINEX];
  PV0AW01.PVBLNCOM[PVWLNCK] = PV0AM200.PVBLNCOM[PVWLINEX];
  PV0AW01.XUMCD[PVWLNCK] = PV0AM200.XUMCD[PVWLINEX];
  PV0AW01.XWHCD[PVWLNCK] = PV0AM200.XWHCD[PVWLINEX];
  PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
  PV0AW01.XDMCD[PVWLNCK] = PV0AM200.XDMCD[PVWLINEX];
  PV0AW01.PC2INSEG[PVWLNCK] = PV0AM200.PC2INSEG[PVWLINEX];
  PV0AW01.PC2CUXID[PVWLNCK] = PV0AM200.PC2CUXID[PVWLINEX];
  PV0AW01.XPGCD[PVWLNCK] = PV0AM200.XPGCD[PVWLINEX];
  PV0AW01.XSECD[PVWLNCK] = PV0AM200.XSECD[PVWLINEX];
  PV0AW01.PCFSEYR[PVWLNCK] = PV0AM200.PCFSEYR[PVWLINEX];
  PV0AW01.PVBCONTN[PVWLNCK] = PV0AM200.PVBCONTN[PVWLINEX];
  PV0AW01.PVBBSZDS[PVWLNCK] = PV0AM200.PVBBSZDS[PVWLINEX];
  PV0AW01.PVBESZDS[PVWLNCK] = PV0AM200.PVBESZDS[PVWLINEX];
  PV0AW01.SY1SSTNM[PVWLNCK] = PV0AM200.SY1SSTNM[PVWLINEX];
  ;
  ;
  ;
end // end PV0AS60

// sesn cd and year edit
Function PV0AS62()
  ;
   /* **************************/
   /* sesn code and year edit*/
   /* **************************/
  ;
  if (PV0AM200.XSECD[PVWLINEX] in XSETBL.XSECD)
   /* next sentence*/
  else
    PV0AM200.XSECD[PVWLINEX] = "  ";
    set PV0AM200.XSECD[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWMDF = "N";
    converseLib.validationFailed(36);
  end
  ;
  if (PV0AM200.PCFSEYR[PVWLINEX] < 1988
   || PV0AM200.PCFSEYR[PVWLINEX] > 2010)
    PV0AM200.PCFSEYR[PVWLINEX] = "  ";
    set PV0AM200.PCFSEYR[PVWLINEX] cursor, bold;
    PVWREC.PVWERRF = "Y";
    PV0AW01.PV0AWMDF = "N";
    converseLib.validationFailed(42);
  end
  ;
  ;
end // end PV0AS62

// set line cntrs 200-300, 4 disp
Function PV0AS65()
  /* GET PV0AS58*/
  ;
   /* *********************/
   /* Redisplay of Errors*/
   /* *********************/
   /* 08-10-94 bcourt create sgrp to set counters for line items*/
   /* 200-300.*/
   /* **********************************************************/
  ;
  ;
  if (PVWREC.PVWLINEX > 203
   && PVWREC.PVWLINEX < 211)
    PV0AW01.PV0AW1ST = 203;
    PV0AW01.PV0AWCLN = 210;
  else
    if (PVWREC.PVWLINEX > 210
     && PVWREC.PVWLINEX < 218)
      PV0AW01.PV0AW1ST = 210;
      PV0AW01.PV0AWCLN = 217;
    else
      if (PVWREC.PVWLINEX > 217
       && PVWREC.PVWLINEX < 225)
        PV0AW01.PV0AW1ST = 217;
        PV0AW01.PV0AWCLN = 224;
      else
        if (PVWREC.PVWLINEX > 224
         && PVWREC.PVWLINEX < 232)
          PV0AW01.PV0AW1ST = 224;
          PV0AW01.PV0AWCLN = 231;
        else
          if (PVWREC.PVWLINEX > 231
           && PVWREC.PVWLINEX < 239)
            PV0AW01.PV0AW1ST = 231;
            PV0AW01.PV0AWCLN = 238;
          else
            if (PVWREC.PVWLINEX > 238
             && PVWREC.PVWLINEX < 246)
              PV0AW01.PV0AW1ST = 238;
              PV0AW01.PV0AWCLN = 245;
            else
              if (PVWREC.PVWLINEX > 245
               && PVWREC.PVWLINEX < 253)
                PV0AW01.PV0AW1ST = 245;
                PV0AW01.PV0AWCLN = 252;
              else
                if (PVWREC.PVWLINEX > 252
                 && PVWREC.PVWLINEX < 260)
                  PV0AW01.PV0AW1ST = 252;
                  PV0AW01.PV0AWCLN = 259;
                else
                  if (PVWREC.PVWLINEX > 259
                   && PVWREC.PVWLINEX < 267)
                    PV0AW01.PV0AW1ST = 259;
                    PV0AW01.PV0AWCLN = 266;
                  else
                    if (PVWREC.PVWLINEX > 266
                     && PVWREC.PVWLINEX < 274)
                      PV0AW01.PV0AW1ST = 266;
                      PV0AW01.PV0AWCLN = 273;
                    else
                      if (PVWREC.PVWLINEX > 273
                       && PVWREC.PVWLINEX < 281)
                        PV0AW01.PV0AW1ST = 273;
                        PV0AW01.PV0AWCLN = 280;
                      else
                        if (PVWREC.PVWLINEX > 280
                         && PVWREC.PVWLINEX < 288)
                          PV0AW01.PV0AW1ST = 280;
                          PV0AW01.PV0AWCLN = 287;
                        else
                          if (PVWREC.PVWLINEX > 287
                           && PVWREC.PVWLINEX < 295)
                            PV0AW01.PV0AW1ST = 287;
                            PV0AW01.PV0AWCLN = 294;
                          else
                            if (PVWREC.PVWLINEX > 294
                             && PVWREC.PVWLINEX < 302)
                              PV0AW01.PV0AW1ST = 294;
                              PV0AW01.PV0AWCLN = 300; /* force 300*/
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end PV0AS65

// Scroll Up Pf7
Function PV0AS70()
  ;
   /* *********************/
   /* Pf7 Scroll Upward*/
   /* *********************/
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* sets up screen*/
  PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN - 7; /* ranges*/
  ;
  if (PV0AW01.PV0AW1ST < 0) /* scrolled past top of screen*/
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 7; /* sets up screen*/
    PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN + 7; /* ranges*/
    converseLib.validationFailed(61);
    return;
  end
  ;
  PV0AS71();
                                   /* move screen data into working storage*/
  ;
  ;
  ;
  PVWREC.PVWLINEX = 0;
  PV0AM200.PVOVENDR = PVBREC.PVOVENDR;
  PV0AM200.PVOVENDG = PVBREC.PVOVENDG;
  PV0AM200.PVAIVCID = PVBREC.PVAIVCID;
  PV0AM200.PVOVNDNM = PVOREC.PVOVNDNM;
  PV0AM200.PC3PONBR = PV0AW01.PC3PONBR[1];
  PV0AM200.PVAIVAMT = PV0AM100.PVAIVAMT;
  PV0AM200.PVTODAY = PV0AM100.PVTODAY;
  PV0AM200.PVTIME = PV0AW02.TA2TIME;
  ;
  while (PVWREC.PVWLINEX < 7)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    ;
    PV0AM200.SY1STNBR[PVWLINEX] = PV0AW01.SY1STNBR[PV0AW1ST];
    PV0AM200.SY2CLRID[PVWLINEX] = PV0AW01.SY2CLRID[PV0AW1ST];
    PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PV0AW1ST];
    PV0AM200.PVBLNDTY[PVWLINEX] = PV0AW01.PVBLNDTY[PV0AW1ST];
    PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW01.PVBLNAMT[PV0AW1ST];
    PV0AM200.XUMCD[PVWLINEX] = PV0AW01.XUMCD[PV0AW1ST];
    PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PV0AW1ST];
    PV0AM200.XDMCD[PVWLINEX] = PV0AW01.XDMCD[PV0AW1ST];
    PV0AM200.XWHCD[PVWLINEX] = PV0AW01.XWHCD[PV0AW1ST];
    PV0AM200.PC2INSEG[PVWLINEX] = PV0AW01.PC2INSEG[PV0AW1ST];
    PV0AM200.PC2CUXID[PVWLINEX] = PV0AW01.PC2CUXID[PV0AW1ST];
    PV0AM200.XPGCD[PVWLINEX] = PV0AW01.XPGCD[PV0AW1ST];
    PV0AM200.XSECD[PVWLINEX] = PV0AW01.XSECD[PV0AW1ST];
    PV0AM200.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PV0AW1ST];
    PV0AM200.PVBCONTN[PVWLINEX] = PV0AW01.PVBCONTN[PV0AW1ST];
    PV0AM200.PVBBSZDS[PVWLINEX] = PV0AW01.PVBBSZDS[PV0AW1ST];
    PV0AM200.PVBESZDS[PVWLINEX] = PV0AW01.PVBESZDS[PV0AW1ST];
    PV0AM200.SY1SSTNM[PVWLINEX] = PV0AW01.SY1SSTNM[PV0AW1ST];
    PV0AM200.PVBPONBR[PVWLINEX] = PV0AW01.PC3PONBR[PV0AW1ST];
    PV0AM200.PVBLNFOB[PVWLINEX] = PV0AW01.PVBLNFOB[PV0AW1ST];
    PV0AM200.PVBLNCOM[PVWLINEX] = PV0AW01.PVBLNCOM[PV0AW1ST];
    ;
    PV0AS79(); /* protect line item screen*/
  end
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* sets up screen*/
  ;
end // end PV0AS70

// Load Screen Data To WS
Function PV0AS71()
  ;
   /* ***************************************/
   /* Load Screen Data Into Working Storage*/
        /* From  pf7*/
   /* ***************************************/
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 7; /* sets up screen*/
  PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN + 7; /* for ws load*/
  ;
  PVWREC.PVWLINEX = 0;
  ;
  while (PVWREC.PVWLINEX < 7)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    ;
    PV0AW01.SY1STNBR[PV0AW1ST] = PV0AM200.SY1STNBR[PVWLINEX];
    PV0AW01.SY2CLRID[PV0AW1ST] = PV0AM200.SY2CLRID[PVWLINEX];
    PV0AW01.PVBLNQTY[PV0AW1ST] = PV0AM200.PVBLNQTY[PVWLINEX];
    PV0AW01.PVBLNDTY[PV0AW1ST] = PV0AM200.PVBLNDTY[PVWLINEX];
    PV0AW01.PVBLNAMT[PV0AW1ST] = PV0AM200.PVBLNAMT[PVWLINEX];
    PV0AW01.XUMCD[PV0AW1ST] = PV0AM200.XUMCD[PVWLINEX];
    PV0AW01.XQACD[PV0AW1ST] = PV0AM200.XQACD[PVWLINEX];
    PV0AW01.XDMCD[PV0AW1ST] = PV0AM200.XDMCD[PVWLINEX];
    PV0AW01.XWHCD[PV0AW1ST] = PV0AM200.XWHCD[PVWLINEX];
    PV0AW01.PC2INSEG[PV0AW1ST] = PV0AM200.PC2INSEG[PVWLINEX];
    PV0AW01.PC2CUXID[PV0AW1ST] = PV0AM200.PC2CUXID[PVWLINEX];
    PV0AW01.XPGCD[PV0AW1ST] = PV0AM200.XPGCD[PVWLINEX];
    PV0AW01.XSECD[PV0AW1ST] = PV0AM200.XSECD[PVWLINEX];
    PV0AW01.PCFSEYR[PV0AW1ST] = PV0AM200.PCFSEYR[PVWLINEX];
    PV0AW01.PVBCONTN[PV0AW1ST] = PV0AM200.PVBCONTN[PVWLINEX];
    PV0AW01.PVBBSZDS[PV0AW1ST] = PV0AM200.PVBBSZDS[PVWLINEX];
    PV0AW01.PVBESZDS[PV0AW1ST] = PV0AM200.PVBESZDS[PVWLINEX];
    PV0AW01.SY1SSTNM[PV0AW1ST] = PV0AM200.SY1SSTNM[PVWLINEX];
    PV0AW01.PC3PONBR[PV0AW1ST] = PV0AM200.PVBPONBR[PVWLINEX];
    PV0AW01.PVBLNFOB[PV0AW1ST] = PV0AM200.PVBLNFOB[PVWLINEX];
    PV0AW01.PVBLNCOM[PV0AW1ST] = PV0AM200.PVBLNCOM[PVWLINEX];
    ;
  end
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 14; /* resets  screen*/
  PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN - 7;
  ;
end // end PV0AS71

// Scroll Down Pf8
Function PV0AS75()
  ;
   /* *****************/
   /* Pf8 Scroll Down*/
   /* *****************/
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 7; /* sets up screen*/
  PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN + 7; /* ranges*/
  ;
  if (PV0AW01.PV0AW1ST > PV0AW01.PV0AWLIN) /* past bottom of screen*/
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* sets up screen*/
    PV0AW01.PV0AWCLN = PV0AW01.PV0AWCLN - 7; /* ranges*/
    converseLib.validationFailed(62);
    return;
  end
  ;
  ;
  PV0AS76(); /* load working storage*/
  ;
  ;
  set PV0AM200 empty;
  PVWREC.PVWLINEX = 0;
  PV0AM200.PVOVENDR = PVBREC.PVOVENDR;
  PV0AM200.PVOVENDG = PVBREC.PVOVENDG;
  PV0AM200.PVAIVCID = PVBREC.PVAIVCID;
  PV0AM200.PVOVNDNM = PVOREC.PVOVNDNM;
  PV0AM200.PC3PONBR = PV0AW01.PC3PONBR[1];
  PV0AM200.PVAIVAMT = PV0AM100.PVAIVAMT;
  PV0AM200.PVTODAY = PV0AM100.PVTODAY;
  PV0AM200.PVTIME = PV0AW02.TA2TIME;
  ;
  while (PV0AW01.PV0AW1ST < PV0AW01.PV0AWCLN)
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    ;
    PV0AM200.SY1STNBR[PVWLINEX] = PV0AW01.SY1STNBR[PV0AW1ST];
    PV0AM200.SY2CLRID[PVWLINEX] = PV0AW01.SY2CLRID[PV0AW1ST];
    PV0AM200.PVBLNQTY[PVWLINEX] = PV0AW01.PVBLNQTY[PV0AW1ST];
    PV0AM200.PVBLNDTY[PVWLINEX] = PV0AW01.PVBLNDTY[PV0AW1ST];
    PV0AM200.PVBLNAMT[PVWLINEX] = PV0AW01.PVBLNAMT[PV0AW1ST];
    PV0AM200.XUMCD[PVWLINEX] = PV0AW01.XUMCD[PV0AW1ST];
    PV0AM200.XQACD[PVWLINEX] = PV0AW01.XQACD[PV0AW1ST];
    PV0AM200.XDMCD[PVWLINEX] = PV0AW01.XDMCD[PV0AW1ST];
    PV0AM200.XWHCD[PVWLINEX] = PV0AW01.XWHCD[PV0AW1ST];
    PV0AM200.PC2INSEG[PVWLINEX] = PV0AW01.PC2INSEG[PV0AW1ST];
    PV0AM200.PC2CUXID[PVWLINEX] = PV0AW01.PC2CUXID[PV0AW1ST];
    PV0AM200.XPGCD[PVWLINEX] = PV0AW01.XPGCD[PV0AW1ST];
    PV0AM200.XSECD[PVWLINEX] = PV0AW01.XSECD[PV0AW1ST];
    PV0AM200.PCFSEYR[PVWLINEX] = PV0AW01.PCFSEYR[PV0AW1ST];
    PV0AM200.PVBCONTN[PVWLINEX] = PV0AW01.PVBCONTN[PV0AW1ST];
    PV0AM200.PVBBSZDS[PVWLINEX] = PV0AW01.PVBBSZDS[PV0AW1ST];
    PV0AM200.PVBESZDS[PVWLINEX] = PV0AW01.PVBESZDS[PV0AW1ST];
    PV0AM200.SY1SSTNM[PVWLINEX] = PV0AW01.SY1SSTNM[PV0AW1ST];
    PV0AM200.PVBPONBR[PVWLINEX] = PV0AW01.PC3PONBR[PV0AW1ST];
    PV0AM200.PVBLNCOM[PVWLINEX] = PV0AW01.PVBLNCOM[PV0AW1ST];
    PV0AM200.PVBLNFOB[PVWLINEX] = PV0AW01.PVBLNFOB[PV0AW1ST];
    ;
    PV0AS79(); /* protect fields*/
  end
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* reset counter*/
end // end PV0AS75

// Load Screen Data To WS
Function PV0AS76()
  ;
   /* ***************************************/
   /* Load Screen Data Into Working Storage*/
        /* From  pf8*/
   /* ***************************************/
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 7; /* sets up screen*/
  ;
  PVWREC.PVWLINEX = 0;
  ;
  while (PVWREC.PVWLINEX < 7)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
    ;
    PV0AW01.SY1STNBR[PV0AW1ST] = PV0AM200.SY1STNBR[PVWLINEX];
    PV0AW01.SY2CLRID[PV0AW1ST] = PV0AM200.SY2CLRID[PVWLINEX];
    PV0AW01.PVBLNQTY[PV0AW1ST] = PV0AM200.PVBLNQTY[PVWLINEX];
    PV0AW01.PVBLNDTY[PV0AW1ST] = PV0AM200.PVBLNDTY[PVWLINEX];
    PV0AW01.PVBLNAMT[PV0AW1ST] = PV0AM200.PVBLNAMT[PVWLINEX];
    PV0AW01.XUMCD[PV0AW1ST] = PV0AM200.XUMCD[PVWLINEX];
    PV0AW01.XQACD[PV0AW1ST] = PV0AM200.XQACD[PVWLINEX];
    PV0AW01.XDMCD[PV0AW1ST] = PV0AM200.XDMCD[PVWLINEX];
    PV0AW01.XWHCD[PV0AW1ST] = PV0AM200.XWHCD[PVWLINEX];
    PV0AW01.PC2INSEG[PV0AW1ST] = PV0AM200.PC2INSEG[PVWLINEX];
    PV0AW01.PC2CUXID[PV0AW1ST] = PV0AM200.PC2CUXID[PVWLINEX];
    PV0AW01.XPGCD[PV0AW1ST] = PV0AM200.XPGCD[PVWLINEX];
    PV0AW01.XSECD[PV0AW1ST] = PV0AM200.XSECD[PVWLINEX];
    PV0AW01.PCFSEYR[PV0AW1ST] = PV0AM200.PCFSEYR[PVWLINEX];
    PV0AW01.PVBCONTN[PV0AW1ST] = PV0AM200.PVBCONTN[PVWLINEX];
    PV0AW01.PVBBSZDS[PV0AW1ST] = PV0AM200.PVBBSZDS[PVWLINEX];
    PV0AW01.PVBESZDS[PV0AW1ST] = PV0AM200.PVBESZDS[PVWLINEX];
    PV0AW01.SY1SSTNM[PV0AW1ST] = PV0AM200.SY1SSTNM[PVWLINEX];
    PV0AW01.PC3PONBR[PV0AW1ST] = PV0AM200.PVBPONBR[PVWLINEX];
    PV0AW01.PVBLNFOB[PV0AW1ST] = PV0AM200.PVBLNFOB[PVWLINEX];
    PV0AW01.PVBLNCOM[PV0AW1ST] = PV0AM200.PVBLNCOM[PVWLINEX];
    ;
  end
  ;
  ;
end // end PV0AS76

// Pf15 New Screen Set Up
Function PV0AS78()
  ;
   /* **********************************************************/
   /* This Is Used When We pf15 and the current screen is full*/
   /* It will Load a new screen and put data on 1st line*/
   /* **********************************************************/
   /* puts data line on new screen*/
  set PV0AM200.SY1STNBR[1] cursor;
  PV0AM200.PVOVENDR = PVAREC.PVOVENDR;
  PV0AM200.PVOVENDG = PVAREC.PVOVENDG;
  PV0AM200.PVAIVCID = PVAREC.PVAIVCID;
  PV0AM200.SY1STNBR[1] = PV0AW01.SY1STNBR[PV0AW1ST];
  PV0AM200.SY2CLRID[1] = PV0AW01.SY2CLRID[PV0AW1ST];
  PV0AM200.PVBLNQTY[1] = 0;
  PV0AM200.PVBPONBR[1] = PV0AW01.PC3PONBR[PV0AW1ST];
  PV0AM200.PVBLNDTY[1] = PV0AW01.PVBLNDTY[PV0AW1ST];
  PV0AM200.PVBLNAMT[1] = 0;
  PV0AM200.PVBLNCOM[1] = PV0AW01.PVBLNCOM[PV0AW1ST];
  PV0AM200.PVBLNFOB[1] = PV0AW01.PVBLNFOB[PV0AW1ST];
  PV0AM200.XUMCD[1] = PV0AW01.XUMCD[PV0AW1ST];
  PV0AM200.XWHCD[1] = PV0AW01.XWHCD[PV0AW1ST];
  PV0AM200.XQACD[1] = PV0AW01.XQACD[PV0AW1ST];
  PV0AM200.XDMCD[1] = PV0AW01.XDMCD[PV0AW1ST];
  PV0AM200.PC2INSEG[1] = PV0AW01.PC2INSEG[PV0AW1ST];
  PV0AM200.PC2CUXID[1] = PV0AW01.PC2CUXID[PV0AW1ST];
  PV0AM200.XPGCD[1] = PV0AW01.XPGCD[PV0AW1ST];
  PV0AM200.XSECD[1] = PV0AW01.XSECD[PV0AW1ST];
  PV0AM200.PCFSEYR[1] = PV0AW01.PCFSEYR[PV0AW1ST];
  PV0AM200.PVBCONTN[1] = PV0AW01.PVBCONTN[PV0AW1ST];
  PV0AM200.PVBBSZDS[1] = PV0AW01.PVBBSZDS[PV0AW1ST];
  PV0AM200.PVBESZDS[1] = PV0AW01.PVBESZDS[PV0AW1ST];
  PV0AM200.SY1SSTNM[1] = PV0AW01.SY1SSTNM[PV0AW1ST];
  ;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST + 1;
   /* add new info to working storage*/
  PV0AW01.SY1STNBR[PV0AW1ST] = PV0AM200.SY1STNBR[1];
  PV0AW01.SY2CLRID[PV0AW1ST] = PV0AM200.SY2CLRID[1];
  PV0AW01.PVBLNQTY[PV0AW1ST] = PV0AM200.PVBLNQTY[1];
  PV0AW01.PCMOSQTY[PV0AW1ST] = PV0AM200.PVBLNQTY[1];
  PV0AW01.PC3PONBR[PV0AW1ST] = PV0AM200.PVBPONBR[1];
  PV0AW01.PVBLNDTY[PV0AW1ST] = PV0AM200.PVBLNDTY[1];
  PV0AW01.PVBLNAMT[PV0AW1ST] = PV0AM200.PVBLNAMT[1];
  PV0AW01.PVBLNFOB[PV0AW1ST] = PV0AM200.PVBLNFOB[1];
  PV0AW01.PVBLNCOM[PV0AW1ST] = PV0AM200.PVBLNCOM[1];
  PV0AW01.XUMCD[PV0AW1ST] = PV0AM200.XUMCD[1];
  PV0AW01.XWHCD[PV0AW1ST] = PV0AM200.XWHCD[1];
  PV0AW01.XQACD[PV0AW1ST] = PV0AM200.XQACD[1];
  PV0AW01.XDMCD[PV0AW1ST] = PV0AM200.XDMCD[1];
  PV0AW01.PC2INSEG[PV0AW1ST] = PV0AM200.PC2INSEG[1];
  PV0AW01.PC2CUXID[PV0AW1ST] = PV0AM200.PC2CUXID[1];
  PV0AW01.XPGCD[PV0AW1ST] = PV0AM200.XPGCD[1];
  PV0AW01.XSECD[PV0AW1ST] = PV0AM200.XSECD[1];
  PV0AW01.PCFSEYR[PV0AW1ST] = PV0AM200.PCFSEYR[1];
  PV0AW01.PVBCONTN[PV0AW1ST] = PV0AM200.PVBCONTN[1];
  PV0AW01.PVBBSZDS[PV0AW1ST] = PV0AM200.PVBBSZDS[1];
  PV0AW01.PVBESZDS[PV0AW1ST] = PV0AM200.PVBESZDS[1];
  PV0AW01.SY1SSTNM[PV0AW1ST] = PV0AM200.SY1SSTNM[1];
  ;
  PVWREC.PVWLNCK = PV0AW01.PV0AW1ST - 1;
  PV0AW01.PVBLNINB[PV0AW1ST] = PV0AW01.PVBLNINB[PVWLNCK] + 1;
  PV0AW01.PV0AW1ST = PV0AW01.PV0AW1ST - 1;
  ;
   /* adds 1 to total number of line items*/
  PV0AW01.PV0AWLIN = PV0AW01.PV0AWLIN + 1;
  PV0AW01.PV0AWUPF = "Y";
  ;
end // end PV0AS78

// Set Needed Fields to Autoskip
Function PV0AS79()
  ;
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - REMOVE CHECK FOR NISSHO*/
   /* ***************************************************/
   /* user is inquiry only or invoice is already matched*/
   /* ***************************************************/
  ;
  if (PVWREC.PVWUPDTF == "N"
   || PV0AM100.XIPCD == "MT"
   || PV0AM100.XIPCD == "IC"
   || PV0AM100.XIPCD == "CP"
   || PV0AM100.XIPCD == "CX"
   || PV0AM100.XIPCD == "EX")
    set PV0AM200.PC3PONBR skip;
    set PV0AM200.SY1STNBR[PVWLINEX] skip;
    set PV0AM200.SY2CLRID[PVWLINEX] skip;
    set PV0AM200.PVBLNDTY[PVWLINEX] skip;
    set PV0AM200.PVBLNFOB[PVWLINEX] skip;
    set PV0AM200.PVBLNCOM[PVWLINEX] skip;
    set PV0AM200.PVBLNAMT[PVWLINEX] skip;
    set PV0AM200.XWHCD[PVWLINEX] skip;
    set PV0AM200.XUMCD[PVWLINEX] skip;
    set PV0AM200.XQACD[PVWLINEX] skip;
    set PV0AM200.XDMCD[PVWLINEX] skip;
    set PV0AM200.PC2INSEG[PVWLINEX] skip;
    set PV0AM200.PC2CUXID[PVWLINEX] skip;
    set PV0AM200.XPGCD[PVWLINEX] skip;
    set PV0AM200.XSECD[PVWLINEX] skip;
    set PV0AM200.PCFSEYR[PVWLINEX] skip;
    set PV0AM200.PVBCONTN[PVWLINEX] skip;
    set PV0AM200.PVBLNQTY[PVWLINEX] skip;
    set PV0AM200.PVBPONBR[PVWLINEX] skip;
    set PV0AM200.PVBBSZDS[PVWLINEX] skip;
    set PV0AM200.PVBESZDS[PVWLINEX] skip;
    set PV0AM200.SY1SSTNM[PVWLINEX] skip;
    set PV0AM200.CATOAP cursor;
  else
    set PV0AM200.SY1STNBR[1] cursor;
    if (PV0AM100.PVAFDIND != "F")
      /* WHICH WAY DO WE REALLY WANT THIS?*/
      /* AND PVUREC.PVUCHOIC NE 9;*/
      if (PV0AM100.PVOVENDR == "2577"
       || PVUREC.PVUCHOIC == 9)
        /* NEXT SENTENCE*/
      else
        set PV0AM200.PVBLNCOM[PVWLINEX] skip;
        set PV0AM200.PVBCONTN[PVWLINEX] skip;
        set PV0AM200.PVBLNDTY[PVWLINEX] skip;
      end
    end
  end
end // end PV0AS79

// Repeat Line Item Pf15
Function PV0AS80()
  ;
   /* ******************************/
   /* Pf15 Repeat Last Item Shown*/
   /* ******************************/
  ;
   /* ****************************************/
   /* check modifications to any line items*/
   /* ****************************************/
  ;
  ;
  if (PV0AM200.SY1STNBR[PVWLINEX] == "  " /* is item blank*/
   && PV0AM200.SY2CLRID[PVWLINEX] == "  " 
   && PV0AM200.PVBPONBR[PVWLINEX] == "000000000"
   && PV0AM200.XUMCD[PVWLINEX] == "  "    
   && PV0AM200.XQACD[PVWLINEX] == "  "    
   && PV0AM200.XWHCD[PVWLINEX] == "  "    
   && PV0AM200.XDMCD[PVWLINEX] == "  "    
   && PV0AM200.PC2INSEG[PVWLINEX] == "  " 
   && PV0AM200.PC2CUXID[PVWLINEX] == "  " 
   && PV0AM200.XPGCD[PVWLINEX] == "  "    
   && PV0AM200.XSECD[PVWLINEX] == "  "    
   && PV0AM200.PVBCONTN[PVWLINEX] == "  " 
   && PV0AM200.PVBBSZDS[PVWLINEX] == "  " 
   && PV0AM200.PVBESZDS[PVWLINEX] == "  " 
   && PV0AM200.SY1SSTNM[PVWLINEX] == "  ")
    PV0AW02.PV0AWLLF = "N"; /* init line item flag*/
    PVWREC.PVWLINEX = PVWREC.PVWLINEX - 1;
    PVWREC.PVWLNCK = PVWREC.PVWLNCK - 1;
  else
    PV0AW02.PV0AWLLF = "Y";
  end
  ;
  ;
end // end PV0AS80

// Add Line Item to Pv0am200
Function PV0AS85()
  ;
   /* ***************************/
   /* Add Line Item to PV0Am200*/
   /* ***************************/
   /* creates new line item*/
  set PV0AM200.SY1STNBR[PV0AWID2] cursor;
  PV0AM200.SY1STNBR[PV0AWID2] = PV0AM200.SY1STNBR[PVWLINEX];
  PV0AM200.SY2CLRID[PV0AWID2] = PV0AM200.SY2CLRID[PVWLINEX];
  PV0AM200.PVBLNQTY[PV0AWID2] = 0;
  PV0AM200.PVBPONBR[PV0AWID2] = PV0AM200.PVBPONBR[PVWLINEX];
  PV0AM200.PVBLNDTY[PV0AWID2] = PV0AM200.PVBLNDTY[PVWLINEX];
  PV0AM200.PVBLNAMT[PV0AWID2] = 0;
  PV0AM200.PVBLNCOM[PV0AWID2] = PV0AM200.PVBLNCOM[PVWLINEX];
  PV0AM200.PVBLNFOB[PV0AWID2] = PV0AM200.PVBLNFOB[PVWLINEX];
  PV0AM200.XUMCD[PV0AWID2] = PV0AM200.XUMCD[PVWLINEX];
  PV0AM200.XWHCD[PV0AWID2] = PV0AM200.XWHCD[PVWLINEX];
  PV0AM200.XQACD[PV0AWID2] = PV0AM200.XQACD[PVWLINEX];
  PV0AM200.XDMCD[PV0AWID2] = PV0AM200.XDMCD[PVWLINEX];
  PV0AM200.PC2INSEG[PV0AWID2] = PV0AM200.PC2INSEG[PVWLINEX];
  PV0AM200.PC2CUXID[PV0AWID2] = PV0AM200.PC2CUXID[PVWLINEX];
  PV0AM200.XPGCD[PV0AWID2] = PV0AM200.XPGCD[PVWLINEX];
  PV0AM200.XSECD[PV0AWID2] = PV0AM200.XSECD[PVWLINEX];
  PV0AM200.PCFSEYR[PV0AWID2] = PV0AM200.PCFSEYR[PVWLINEX];
  PV0AM200.PVBCONTN[PV0AWID2] = PV0AM200.PVBCONTN[PVWLINEX];
  PV0AM200.PVBBSZDS[PV0AWID2] = PV0AM200.PVBBSZDS[PVWLINEX];
  PV0AM200.PVBESZDS[PV0AWID2] = PV0AM200.PVBESZDS[PVWLINEX];
  PV0AM200.SY1SSTNM[PV0AWID2] = PV0AM200.SY1SSTNM[PVWLINEX];
  ;
  ;
   /* add new info to working storage*/
  PV0AW01.SY1STNBR[PVWLNCK] = PV0AM200.SY1STNBR[PVWLINEX];
  PV0AW01.SY2CLRID[PVWLNCK] = PV0AM200.SY2CLRID[PVWLINEX];
  PV0AW01.PVBLNQTY[PVWLNCK] = 0;
  PV0AW01.PCMOSQTY[PVWLNCK] = 0;
  PV0AW01.PC3PONBR[PVWLNCK] = PV0AM200.PVBPONBR[PVWLINEX];
  PV0AW01.PVBLNDTY[PVWLNCK] = PV0AM200.PVBLNDTY[PVWLINEX];
  PV0AW01.PVBLNAMT[PVWLNCK] = PV0AM200.PVBLNAMT[PVWLINEX];
  PV0AW01.PVBLNFOB[PVWLNCK] = PV0AM200.PVBLNFOB[PVWLINEX];
  PV0AW01.PVBLNCOM[PVWLNCK] = PV0AM200.PVBLNCOM[PVWLINEX];
  PV0AW01.XUMCD[PVWLNCK] = PV0AM200.XUMCD[PVWLINEX];
  PV0AW01.XWHCD[PVWLNCK] = PV0AM200.XWHCD[PVWLINEX];
  PV0AW01.XQACD[PVWLNCK] = PV0AM200.XQACD[PVWLINEX];
  PV0AW01.XDMCD[PVWLNCK] = PV0AM200.XDMCD[PVWLINEX];
  PV0AW01.PC2INSEG[PVWLNCK] = PV0AM200.PC2INSEG[PVWLINEX];
  PV0AW01.PC2CUXID[PVWLNCK] = PV0AM200.PC2CUXID[PVWLINEX];
  PV0AW01.XPGCD[PVWLNCK] = PV0AM200.XPGCD[PVWLINEX];
  PV0AW01.XSECD[PVWLNCK] = PV0AM200.XSECD[PVWLINEX];
  PV0AW01.PCFSEYR[PVWLNCK] = PV0AM200.PCFSEYR[PVWLINEX];
  PV0AW01.PVBCONTN[PVWLNCK] = PV0AM200.PVBCONTN[PVWLINEX];
  PV0AW01.PVBBSZDS[PVWLNCK] = PV0AM200.PVBBSZDS[PVWLINEX];
  PV0AW01.PVBESZDS[PVWLNCK] = PV0AM200.PVBESZDS[PVWLINEX];
  PV0AW01.SY1SSTNM[PVWLNCK] = PV0AM200.SY1SSTNM[PVWLINEX];
  ;
  PVWREC.PVWLNCH = PVWREC.PVWLNCK - 1;
  ;
   /* TCS CHANGES BEGIN  04/21/99*/
  ;
   /* PV0AW01.PVBLNINB(PVWLNCK) = PV0AW01.PVBLNINB(PVWLNCH) + 1;*/
  ;
   /* if prior line-no is 0 , populate proper value into it*/
  if (PV0AW01.PVBLNINB[PVWLNCH] == 0) /* is prior line-no 0*/
    PVWREC.PVWLNCK = PVWREC.PVWLNCK - 1;
    PVWREC.PVWLNCH = PVWREC.PVWLNCH - 1;
    PV0AW01.PVBLNINB[PVWLNCK] = PV0AW01.PVBLNINB[PVWLNCH] + 1;
    PVWREC.PVWLNCK = PVWREC.PVWLNCK + 1;
    PVWREC.PVWLNCH = PVWREC.PVWLNCH + 1;
  end
  PV0AW01.PVBLNINB[PVWLNCK] = PV0AW01.PVBLNINB[PVWLNCH] + 1;
  ;
   /* TCS CHANGES END    04/21/99*/
  ;
end // end PV0AS85

// Db2 abend routine
Function PV0AS97()
  ;
    /* Db2 Abend Routine*/
    /* Call to Ta0020*/
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "PV0A";
  TA1REC.TA1MAP = "PV0AM100";
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  ;
end // end PV0AS97

// Db2 abend routine
Function PV0AS99()
  ;
    /* Db2 Abend Routine*/
    /* Call to Ta0020*/
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "PV0A";
  TA1REC.TA1MAP = "PV0AM200";
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  ;
end // end PV0AS99

