package pv0k;
import corpcom3.XPPV-VPVPMT01;
import corpcom3.XPPV001;
import corpcom3.XPPV440;
import corpcom3.XPPV960;
import corpcom3.XPPV970;
import corpcom3.XPPV990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSPVS58;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import fy.common.FY1FCTYC;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC3POIDT;
import pc.common.PC3PONBR;
import pc.common.PC4ORTYP;
import pc.common.PC6ITMNB;
import pc.common.PCFSECD;
import pc.common.PCMIVQTY;
import pc.common.PCMOSQTY;
import pc.common.PCMRCPTQ;
import pc.common.PCMREC;
import pv.common.*;
import sl.common.SL1RCRNO;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSHCNTNR;
import ts.common.TSHRCTDT;
import vv.common.VPVPMT01;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.XQACD;
import xx.common.XWHCD;
import xx.common.ZZZCHGCT;
import xx02.*;
import xx02.XDMCD;
import xx04.*;
import xx04.XOWCD;
import xx04.XPGCD;
import xx05.*;
import xx05.XRICD;
import xx06.*;
import xx06.XUMCD;
import xx06.XUMCONVF;
import xx06.XUMTBL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YMTCD;
//*** PROGRAM=PV0K ****
// ************************************************************
// *
// *   PV0K - Non-Received Invoice Resolution
// *
// *   This application will be used to resolve invoices that
// *   have been paid but have no receiving or only partial
// *   receiving.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       04-17-91  HVARGA  Initial Construction
// *       11-24-99  GDECKE  NISSHO CONTINGENCY - WRITE PAYMENT
// *                         LINE TO DATABASE
// *       02-28-00  JKUNDU  CHANGED IN SGRP PV0KS66 TO SHOW AN
// *                         ERROR MESSAGE IF ADJUSTMENTS AMT
// *                         ARE NOT WITHIN +/- 1000.00 LIMIT
// *       02-28-00  JKUNDU  CHANGED IN SGRP PV0KS66 TO COMMENT
// *                         THE ERROR MESSAGE 230
// *       04-25-00  JKUNDU  CHANGED IN SGP PV0KS11 AND PV0K160
// *                         TO MOVE PV-IVC-ID TO REF-IVC-ID
// ************************************************************
// *********************
Program PV0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PCMREC PCMREC; // record
  PV0KW01 PV0KW01; // record
  PV0KW02 PV0KW02; // record
  PV0KW03 PV0KW03; // record
  PV0KW04 PV0KW04; // record
  PV0KW05 PV0KW05; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVFREC PVFREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVYREC PVYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPVPMT01 VPVPMT01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use PV0KM.PV0KM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0K000: PV0K000();
  end // end main
end // end PV0K

// READ     VENDOR NAME IO5680
Function PV0K-GET-FOB-PMT()

   /* *************************************************************/
   /* ***  CHECK ON FACTORY INVOICE PAYMENT RECORDS. FIND THE  ****/
   /* ***  FOB PAYMENT. IF FOUND, USE THE VENDOR INVOICE NUMBER****/
   /* ***  AS THE PV-REV-IVC-ID ON THE HEADER, AND USE THE VENDOR**/
   /* ***  IVC ID, VENDOR NUMBER, AND VENDOR GROUP ON THE NEW  ****/
   /* ***  FOB RECORD FOR THE ADJUSTMENT FACTORY INVOICE       ****/
   /* *************************************************************/


  PV0KW02.PV-IVC-ID = PV0KM100.PVAIVCID;

  VPVPMT01.PV-IVC-ID = PV0KM100.PVAIVCID;
  VPVPMT01.PV-MSA-VEND-NBR = PV0KM100.PVOVENDR;
  VPVPMT01.PV-MSA-VEND-GRP = PV0KM100.PVOVENDG;

  PV0KW02.PV-IVC-ID = PV0KM100.PVAIVCID;
  PV0KW02.PV-MSA-VEND-NBR = PV0KM100.PVOVENDR;
  PV0KW02.PV-MSA-VEND-GRP = PV0KM100.PVOVENDG;

   /* OPEN CURSOR FOR PAYMENT RECORDS*/
  PVYREC.PVYFNC = "S1";
  XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/

  PV0KW02.PV0KW-FOB-REC-FOUND = "N";
  PV0KW02.PV-PMT-VEND-IVC-ID = " ";
  PV0KW02.PV-PMT-VEND-NBR = " ";
  PV0KW02.PV-PMT-VEND-GRP = " ";
  while (SQLCA.VAGen_SQLCODE == 0
   && PV0KW02.PV0KW-FOB-REC-FOUND == "N")
    /* FETCH LINES FROM VPVPMT01*/
    PVYREC.PVYFNC = "N1";
    XPPV-VPVPMT01(); /* IOMOD VPVPMT01*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VPVPMT01.PV-MSA-VEND-GRP == PV0KW02.PV-MSA-VEND-GRP)
      if (VPVPMT01.XPV-IVC-TYP-CD == "FB")
        PV0KW02.PV0KW-FOB-REC-FOUND = "Y";
        PV0KW02.PV-PMT-VEND-IVC-ID = VPVPMT01.PV-PMT-VEND-IVC-ID;
        PV0KW02.PV-PMT-VEND-NBR = VPVPMT01.PV-PMT-VEND-NBR;
        PV0KW02.PV-PMT-VEND-GRP = VPVPMT01.PV-PMT-VEND-GRP;
      end
    end
  end

   /* CLOSE CURSOR FOR VPVPMT01*/
  PVYREC.PVYFNC = "C1";


   /* ***  End of PV0B-VPVPMT01  ****/
end // end PV0K-GET-FOB-PMT

// PROCESS  Main Logic
Function PV0K000()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0K    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0K001(); /* Initialization Logic*/

  PV0KS01(); /* Check Who Invoked me*/

  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    PV0K100(); /* Converse PV0KM100*/
    PV0K110(); /* Check PF Keys and Exits*/
    PV0K120(); /* Check what to do next*/
  end

  exit program;

  return; /* Last Statement*/


   /* ***  End of PV0K000  ****/
end // end PV0K000

// INIT     Routine
Function PV0K001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0KW01 empty;
  set PV0KW02 empty;
  set PV0KW03 empty;
  set PV0KW04 empty;
  set TA2REC empty;
  set PVFREC empty;
  set PVLREC empty;
  set PCMREC empty;

  set PV0KM100 initial;

  XSPVS01(); /* Initialize PV Common Routine Fields*/

  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0KM100";

   /* Get System Date and Time*/
  PV0KS09();

  return; /* Last Statement*/

   /* ***  End of PV0K001  ****/
end // end PV0K001

// CONVERSE NON-RCVD IVCD Screen
Function PV0K100()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0KM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0KM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0KM100.TA2TIMED = VGVar.currentFormattedTime;

  if (PVUREC.PVUINQRY == "Y")
    set PV0KM100.CATOAP cursor;
  end

  converse PV0KM100 ;

  return; /* Last Statement*/


   /* ***  End of PV0K100  ****/
end // end PV0K100

// CHECK    PF Keys and Exits
Function PV0K110()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15) /* Apply Resolution*/
       /* next sentence*/
    else
       /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K110  ****/
end // end PV0K110

// CHECK    What to do next
Function PV0K120()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0KS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0K150(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K120  ****/
end // end PV0K120

// CHECK    if allowed to continu
Function PV0K150()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PVUREC.PVUENDOA = "Y"; /* Make sure we get out*/
      PV0KS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf15)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf15)
      PV0KS60(); /* Validate Data Keyed in*/
      if (PVUREC.PVUERROR[PVUERGEN] == " "
       && PVUREC.PVUERROR[PVUERIVC] == " ")
        PV0KS62(); /* Check Adj Type*/
        if (PVUREC.PVUERROR[PVUERGEN] == "Y")
           /* next sentence*/
        else
          PV0KS64(); /* Check Adj Consistency*/
          if (PVUREC.PVUERROR[PVUERGEN] == "Y")
             /* next sentence*/
          else
            if (converseVar.eventKey is pf15)
               /* FORCE*/
              PV0KS66(); /* One Adj Type needed*/
              if (PVUREC.PVUERROR[PVUERGEN] == "Y")
                 /* next sentence*/
              else
                if (PVUREC.PVUERROR[PVUERIVC] == "Y")
                   /* Enter Invoice Key Fields and Press Enter.*/
                  PVUREC.PVUERNBR = 3;
                  return;
                else
                  PV0K160(); /* Create Adjustment*/
                end
              end
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K150  ****/
end // end PV0K150

// CREATE   Adjustment
Function PV0K160()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CREATE Adjustment                               ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PVFREC empty;
  PV0KS09(); /* Get System Date aned Time*/
  PV0KW02.PVAIVAMT = 0;
  PV0KW02.PVATQTY = 0;
  PV0KW02.PV0KWSKY = " ";

  PV0KW01.PV0KWCT1 = 1;
  if (PV0KW02.PC3PONBR[PV0KWCT1] == 0)
    SQLCA.VAGen_SQLCODE = 100;
  end
  SQLCA.VAGen_SQLCODE = 0;

  while (SQLCA.VAGen_SQLCODE == 0)
     /* VFYPO001 Declare Cursor Information*/
    PVBREC.PC3PONBR = PV0KW02.PC3PONBR[PV0KWCT1];
    PVBREC.XGPCD = PV0KW02.XGPCD[PV0KWCT1];
    PVBREC.SY1STNBR = PV0KW02.SY1STNBR[PV0KWCT1];
    PVBREC.SY2CLRID = PV0KW02.SY2CLRID[PV0KWCT1];
    PVBREC.XDMCD = PV0KW02.XDMCD[PV0KWCT1];
    PVBREC.XQACD = PV0KW02.XQACD[PV0KWCT1];
    PVBREC.PC2INSEG = PV0KW02.PC2INSEG[PV0KWCT1];
    PVBREC.XPGCD = PV0KW02.XPGCD[PV0KWCT1];
    PVBREC.PC2CUXID = PV0KW02.PC2CUXID[PV0KWCT1];

    PVBREC.XUMCD = PV0KW02.XUMCD[PV0KWCT1];
    PVBREC.PVBLNINB = PV0KW02.PVBLNINB[PV0KWCT1];
    PVBREC.PVBLNQTY = PV0KW02.PVBLNQTY[PV0KWCT1];
    PVBREC.PCMOSQTY = PV0KW02.PCMOSQTY[PV0KWCT1];
    PVBREC.PVBLNFOB = PV0KW02.PVBLNFOB[PV0KWCT1];
    PVBREC.PVBLNCOM = PV0KW02.PVBLNCOM[PV0KWCT1];
    PVBREC.PVBLNDTY = PV0KW02.PVBLNDTY[PV0KWCT1];
    PVBREC.PVBLNAMT = PV0KW02.PVBLNAMT[PV0KWCT1];

    PV0K201(); /* Accumulate/Update Receiving*/
    if (PVBREC.PVBLNQTY > 0)
      if (PVBREC.XUMCD == PCMREC.XUMCD)
         /* next sentence*/
      else
        if (PCMREC.XUMCD == " ")
           /* next sentence*/
        else
          PVBREC.PVBLNQTY = PVBREC.PVBLNQTY * PV0KW01.PV0KWXUM;
          PVBREC.PVBLNQTY = PVBREC.PVBLNQTY / PV0KW01.XUMCONVF;
        end
      end
      PVBREC.PCMOSQTY = PVBREC.PVBLNQTY;
      PVBREC.PVBLNQTY = PV0KW02.PVBLNQTY[PV0KWCT1];
      PV0K210(); /* Process VPVITM01 Leftovers*/
    end

    PV0KW01.PV0KWCT1 = PV0KW01.PV0KWCT1 + 1;
    if (PV0KW02.PC3PONBR[PV0KWCT1] == 0)
      SQLCA.VAGen_SQLCODE = 100;
    end
  end

  PV0K-GET-FOB-PMT();

  PV0K215(); /* Update VFORCE01/VPVHDR01*/

  if (PVAREC.PVAIVAMT == 0)
     /* No Adjustments created*/
    PVUREC.PVUERNBR = 96;
  else
    PV0KM100.PVAIVAMT = PVAREC.PVAIVAMT;

    if (PVAREC.PVATFOB != 0)
      PV0KS-ADD-VPVPMT01(); /* INSERT FOB PAYMENT RECORD*/
    end

    if (PV0KW02.PV0KW-FOB-REC-FOUND == "Y")
      /* JKUNDU CHANGE BEGINS - 04/25/00*/
      /* MOVE PV0KW02.PV-PMT-VEND-IVC-ID TO PVAREC.PVARIVID;*/
      PVAREC.PVARIVID = PV0KW02.PV-IVC-ID;
      /* JKUNDU CHANGE ENDS  - 04/25/00*/
    end

    PV0K965(); /* Insert VPVHDR01 Row*/
     /* Function Requested was successfully applied*/
    PVUREC.PVUERNBR = 92;
  end

  PVUREC.PVUERROR[PVUERKEY] = "Y";

  return; /* Last Statement*/


   /* ***  End of PV0KS90  ****/
end // end PV0K160

// ACCUM    Available to Invoice
Function PV0K200()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Accumulate Available to Invoice                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW01.PV0KWUPD = "N"; /* No Update*/
  PV0K205(); /* Accumulate Available to Invoice*/

  return; /* Last Statement*/


   /* ***  End of PV0K200  ****/
end // end PV0K200

// ACC/UPD  Avail to IVC Qty
Function PV0K201()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Accumulate/Update Available to Invoice            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW01.PV0KWUPD = "Y"; /* Update Mode*/
  if (PV0KW02.PV0KWRCV[PV0KWCT1] == "N")
     /* next sentence*/
  else
    PV0K205(); /* Accumulate Available to Invoice*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0K201  ****/
end // end PV0K201

// ACCM/UPD VFYPO001 Rows
Function PV0K205()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Accumulate Available to Invoice                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KW02.PV0KWKEY[PV0KWCT1] == PV0KW02.PV0KWSKY)
    SQLCA.VAGen_SQLCODE = 0;
     /* next sentence*/
  else
    PV0KW02.PV0KWSKY = PV0KW02.PV0KWKEY[PV0KWCT1];
    if (PV0KW01.PV0KWUPD == "Y")
      PV0K260(); /* Look Ahead At items and Accumulate*/
    end
    PV0K250(); /* Save Receiving to Core*/
    if (PCMREC.ZZZCHGCT == -1)
      return;
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && PV0KW01.PVBLNQTY > 0)
    if (PVBREC.PVBLNQTY >= PV0KW01.PVBLNQTY)
      PCMREC.XRICD = PV0KW01.XRICD; /* Close FYPO*/
      PCMREC.PCMIVQTY = PCMREC.PCMIVQTY + PV0KW01.PVBLNQTY;
      PVBREC.PVBLNQTY = PVBREC.PVBLNQTY - PV0KW01.PVBLNQTY;
      PV0KW01.PCMOSQTY = PV0KW01.PCMOSQTY - PV0KW01.PVBLNQTY;
      if (PV0KW03.PV0KWRIX == PV0KW03.PV0KWRIC)
        PCMREC.PCMOSQTY = PV0KW01.PCMOSQTY;
      end
      PV0K685(); /* Update VFYPO001 Row*/
      PV0K252(); /* Get Next Receiving*/
    else
      PCMREC.XRICD = "XX";
      PCMREC.PCMIVQTY = PCMREC.PCMIVQTY + PVBREC.PVBLNQTY;
      PV0KW01.PVBLNQTY = PV0KW01.PVBLNQTY - PVBREC.PVBLNQTY;
      PV0KW01.PCMOSQTY = PV0KW01.PCMOSQTY - PVBREC.PVBLNQTY;
      PVBREC.PVBLNQTY = 0;
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    if (PCMREC.XRICD == "XX") /* If VFYPO001 Row is on Hold*/
      PCMREC.XRICD = "PA";
      PV0K685(); /* Update VFYPO001 Row*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K205  ****/
end // end PV0K205

// PROCESS  VPVITM01 Leftovers
Function PV0K210()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check VPVITM01 Leftover Quantities                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KS10(); /* Build Adjustment record*/
  PV0K975(); /* Insert VPVITM01 Row*/

  return; /* Last Statement*/


   /* ***  End of PV0K210  ****/
end // end PV0K210

// UPDATE   VFORCE01/VPVHDR01
Function PV0K215()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Update VFORCE01 and VPVHDR01 Database             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KS12(); /* Update VFORCE01 Table*/
  PV0KS11(); /* Build Adjustment Header*/

  if (PV0KM100.PV0KMCLO == "Y"
   || PV0KM100.PV0KMDUM == "Y")
    PVAREC.PVAAPEDT = 999999999;
    if (PV0KM100.PV0KMDUM == "Y")
      PVAREC.XIVCD = "DC";
      PVAREC.XIPCD = "EX";
    else
      PVAREC.XIVCD = "RI";
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K215  ****/
end // end PV0K215

// RETRIEVE All VFYPO001
Function PV0K250()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Retrieve all VFYPO001                             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0KW03 empty;
  set PVYREC empty;
  set SQLCA empty;
  move PVBREC to PCMREC withV60Compat; /* Build RECEIVING Where Condition*/
  PVYREC.PVYSTAT1 = "PA";
  PVYREC.PVYFNC = "S6"; /* Declare VFYPO001 Cursor*/
  call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};

  set SQLCA empty;
  PVYREC.PVYFNC = "N6"; /* Prime Fetch VFYPO001*/
  call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    set SQLCA empty;
    PVYREC.PVYFNC = "C6"; /* Close VFYPO001 Cursor*/
    call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
    set PCMREC empty;
    PCMREC.ZZZCHGCT = -1; /* Set No Receipt Flag*/
    return; /* Last Statement*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    if (PCMREC.XUMCD == PVBREC.XUMCD)
      PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
      PV0KW03.PV0KWUSF[PV0KWRIX] = "Y";
      PV0K255(); /* Save VFYPO001 into Core*/
    else
      if (PVBREC.XUMCD == "L "
       || PVBREC.XUMCD == "R ")
         /* next sentence*/
      else
        if (PCMREC.XUMCD == "L "
         || PCMREC.XUMCD == "R ")
          PV0KW03.PV0KWUOM = PCMREC.XUMCD; /* Possible Pair Flag*/
          PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
          if (PVBREC.XUMCD == "01")
            PV0KW03.PV0KWUSF[PV0KWRIX] = "N";
          else
            PV0KW03.PV0KWUSF[PV0KWRIX] = "C";
          end
          PV0K255(); /* Save VFYPO001 into Core*/
          PV0KW03.PV0KWUSF[PV0KWRIX] = "N"; /* Pairing changes this*/
          PV0KW03.XUMCD[PV0KWRIX] = PV0KW03.PV0KWUOM; /* Restore UOM*/
        else
           /* Set Conversion Flag*/
          PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
          PV0KW03.PV0KWUSF[PV0KWRIX] = "C";
          PV0K255(); /* Save VFYPO001 into Core*/
        end
      end
    end
    set SQLCA empty;
    PVYREC.PVYFNC = "N6"; /* Fetch Next VFYPO001*/
    call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
  end

  PV0KW03.PV0KWRIC = PV0KW03.PV0KWRIX; /* Number of Receipts*/
  set SQLCA empty;
  PVYREC.PVYFNC = "C6"; /* Prime Fetch VFYPO001*/
  call "IO3680" (PVYREC, SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};

  if (PV0KW03.PV0KWUOM == "L "
   || PV0KW03.PV0KWUOM == "R ")
    PV0K265(); /* Look for Pairs*/
  end

  PV0KW03.PV0KWRIX = 0;
  PV0K252();

  return; /* Last Statement*/


   /* ***  End of PV0K250  ****/
end // end PV0K250

// LOAD     VFYPO001 from CORE
Function PV0K252()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Load VFYPO001 from Core                           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
  while (PV0KW03.PV0KWUSF[PV0KWRIX] == "N"
   || PV0KW03.PV0KWUSF[PV0KWRIX] == " "
   || PV0KW03.PC3PONBR[PV0KWRIX] == 0)
    if (PV0KW03.PC3PONBR[PV0KWRIX] == 0)
      PV0KW01.PVBLNQTY = 0;
      set PCMREC empty;
      SQLCA.VAGen_SQLCODE = 100;
      return;
    end
    PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
  end

  PCMREC.PC3PONBR = PV0KW03.PC3PONBR[PV0KWRIX];
  PCMREC.XGPCD = PV0KW03.XGPCD[PV0KWRIX];
  PCMREC.SY1STNBR = PV0KW03.SY1STNBR[PV0KWRIX];
  PCMREC.SY2CLRID = PV0KW03.SY2CLRID[PV0KWRIX];
  PCMREC.XDMCD = PV0KW03.XDMCD[PV0KWRIX];
  PCMREC.XQACD = PV0KW03.XQACD[PV0KWRIX];
  PCMREC.PC2INSEG = PV0KW03.PC2INSEG[PV0KWRIX];
  PCMREC.XPGCD = PV0KW03.XPGCD[PV0KWRIX];
  PCMREC.PC2CUXID = PV0KW03.PC2CUXID[PV0KWRIX];

  PCMREC.PC3POIDT = PV0KW03.PC3POIDT[PV0KWRIX];
  PCMREC.PCFSECD = PV0KW03.PCFSECD[PV0KWRIX];
  PCMREC.FY1FCTYC = PV0KW03.FY1FCTYC[PV0KWRIX];
  PCMREC.PC4ORTYP = PV0KW03.PC4ORTYP[PV0KWRIX];
  PCMREC.XOWCD = PV0KW03.XOWCD[PV0KWRIX];
  PCMREC.XUMCD = PV0KW03.XUMCD[PV0KWRIX];
  PCMREC.YMTCD = PV0KW03.YMTCD[PV0KWRIX];
  PCMREC.XWHCD = PV0KW03.XWHCD[PV0KWRIX];
  PCMREC.SL1RCRNO = PV0KW03.SL1RCRNO[PV0KWRIX];
  PCMREC.TSHRCTDT = PV0KW03.TSHRCTDT[PV0KWRIX];
  PCMREC.TSHCNTNR = PV0KW03.TSHCNTNR[PV0KWRIX];

  set SQLCA empty;
  call "IO3680" ("S ", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOC = "PV0K252";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VFYPO001";
    TA1REC.TA1TBLKE = PCMREC.PCMKEY;
    XSPVS52();
  end

  PCMREC.ZZZCHGCT = PV0KW03.ZZZCHGCT[PV0KWRIX];

  PV0KW01.PCMRCPTQ = PV0KW03.PCMRCPTQ[PV0KWRIX];
  PCMREC.PCMIVQTY = PV0KW03.PCMIVQTY[PV0KWRIX];
  PCMREC.PCMOSQTY = PV0KW03.PCMOSQTY[PV0KWRIX];
  PCMREC.XRICD = PV0KW03.XRICD[PV0KWRIX];

  PV0KW01.PVBLNQTY = PV0KW01.PCMRCPTQ - PCMREC.PCMIVQTY;


  return; /* Last Statement*/


   /* ***  End of PV0K252  ****/
end // end PV0K252

// SAVE     VFYPO001 into CORE
Function PV0K255()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Save VFYPO001 into Core                           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW03.PC3PONBR[PV0KWRIX] = PCMREC.PC3PONBR;
  PV0KW03.XGPCD[PV0KWRIX] = PCMREC.XGPCD;
  PV0KW03.SY1STNBR[PV0KWRIX] = PCMREC.SY1STNBR;
  PV0KW03.SY2CLRID[PV0KWRIX] = PCMREC.SY2CLRID;
  PV0KW03.XDMCD[PV0KWRIX] = PCMREC.XDMCD;
  PV0KW03.XQACD[PV0KWRIX] = PCMREC.XQACD;
  PV0KW03.PC2INSEG[PV0KWRIX] = PCMREC.PC2INSEG;
  PV0KW03.XPGCD[PV0KWRIX] = PCMREC.XPGCD;
  PV0KW03.PC2CUXID[PV0KWRIX] = PCMREC.PC2CUXID;

  PV0KW03.PC3POIDT[PV0KWRIX] = PCMREC.PC3POIDT;
  PV0KW03.PCFSECD[PV0KWRIX] = PCMREC.PCFSECD;
  PV0KW03.FY1FCTYC[PV0KWRIX] = PCMREC.FY1FCTYC;
  PV0KW03.PC4ORTYP[PV0KWRIX] = PCMREC.PC4ORTYP;
  PV0KW03.XOWCD[PV0KWRIX] = PCMREC.XOWCD;
  PV0KW03.XUMCD[PV0KWRIX] = PCMREC.XUMCD;
  PV0KW03.YMTCD[PV0KWRIX] = PCMREC.YMTCD;
  PV0KW03.XWHCD[PV0KWRIX] = PCMREC.XWHCD;
  PV0KW03.SL1RCRNO[PV0KWRIX] = PCMREC.SL1RCRNO;
  PV0KW03.TSHRCTDT[PV0KWRIX] = PCMREC.TSHRCTDT;
  PV0KW03.TSHCNTNR[PV0KWRIX] = PCMREC.TSHCNTNR;
  PV0KW03.ZZZCHGCT[PV0KWRIX] = PCMREC.ZZZCHGCT;

  PVUREC.PVUCNTR2 = 0;
  PV0KW01.PCMRCPTQ = 0;
  while (PVUREC.PVUCNTR2 < 40)
    PVUREC.PVUCNTR2 = PVUREC.PVUCNTR2 + 1;
    PV0KW01.PCMRCPTQ = PV0KW01.PCMRCPTQ + PCMREC.PCMRCPTQ[PVUCNTR2];
  end

  if (PV0KW03.PV0KWUSF[PV0KWRIX] == "C")
    PV0KW03.PV0KWUSF[PV0KWRIX] = "N";
    if (PVBREC.XUMCD in XUMTBL.XUMCD)
      PV0KW01.XUMCONVF = XUMTBL.XUMCONVF[sysVar.arrayIndex];
      if (PCMREC.XUMCD in XUMTBL.XUMCD)
        if (PCMREC.XUMCD == "L "
         || PCMREC.XUMCD == "R ")
          PV0KW01.PV0KWXUM = 1;
        else
          PV0KW01.PV0KWXUM = XUMTBL.XUMCONVF[sysVar.arrayIndex];
        end
        PVBREC.PVBLNQTY = PVBREC.PVBLNQTY * PV0KW01.XUMCONVF;
        PVBREC.PVBLNQTY = PVBREC.PVBLNQTY / PV0KW01.PV0KWXUM;
        PV0KW03.PV0KWUSF[PV0KWRIX] = "Y";
        if (PCMREC.XUMCD == "L "
         || PCMREC.XUMCD == "R ")
          PVBREC.XUMCD = "01";
        else
          PVBREC.XUMCD = PCMREC.XUMCD;
        end
      end
    end
  end

  PV0KW03.PCMRCPTQ[PV0KWRIX] = PV0KW01.PCMRCPTQ;
  PV0KW03.PCMIVQTY[PV0KWRIX] = PCMREC.PCMIVQTY;
  PV0KW03.PCMOSQTY[PV0KWRIX] = PCMREC.PCMOSQTY;
  PV0KW03.XRICD[PV0KWRIX] = PCMREC.XRICD;

  return; /* Last Statement*/


   /* ***  End of PV0K255  ****/
end // end PV0K255

// LOOK     Ahead at Items & Acc
Function PV0K260()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Look Ahead at Items and Accumulate              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW01.PCMOSQTY = PV0KW02.PVBLNQTY[PV0KWCT1];
  PV0KW01.PV0KWCT2 = PV0KW01.PV0KWCT1 + 1;
  while (PV0KW02.PV0KWKEY[PV0KWCT2] == PV0KW02.PV0KWSKY)
    PV0KW01.PCMOSQTY = PV0KW01.PCMOSQTY + PV0KW02.PVBLNQTY[PV0KWCT2];
    PV0KW01.PV0KWCT2 = PV0KW01.PV0KWCT2 + 1;
  end

  return; /* Last Statement*/


   /* ***  End of PV0K260  ****/
end // end PV0K260

// LOOK     For Pairs
Function PV0K265()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Look for Possible Pairs                           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0KW03.PV0KWRIX = 0;
  while (PV0KW03.PV0KWRIX < PV0KW03.PV0KWRIC)
    PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIX + 1;
    if (PV0KW03.PV0KWUSF[PV0KWRIX] == "N")
      if (PV0KW03.XUMCD[PV0KWRIX] == "L "
       || PV0KW03.XUMCD[PV0KWRIX] == "R ")
        PV0KW03.PV0KWRIP = PV0KW03.PV0KWRIX;
        while (PV0KW03.PV0KWRIP < PV0KW03.PV0KWRIC)
          PV0KW03.PV0KWRIP = PV0KW03.PV0KWRIP + 1;
          if (PV0KW03.PCMRCPTQ[PV0KWRIX] == PV0KW03.PCMRCPTQ[PV0KWRIP])
            if (PV0KW03.XUMCD[PV0KWRIX] == "L "
             && PV0KW03.XUMCD[PV0KWRIP] == "R ")
               /* Pair Found*/
              PV0KW03.PV0KWUSF[PV0KWRIX] = "Y";
              PV0KW03.XUMCD[PV0KWRIP] = "01";
              PV0KW03.XUMCD[PV0KWRIX] = "01";
              PV0KW03.PC6ITMNB[PV0KWRIP] = PV0KW03.PV0KWRIX;
              PV0KW03.PC6ITMNB[PV0KWRIX] = PV0KW03.PV0KWRIP;
            end
            if (PV0KW03.XUMCD[PV0KWRIX] == "R "
             && PV0KW03.XUMCD[PV0KWRIP] == "L ")
               /* Pair Found*/
              PV0KW03.XUMCD[PV0KWRIP] = "01";
              PV0KW03.XUMCD[PV0KWRIX] = "01";
              PV0KW03.PV0KWUSF[PV0KWRIX] = "Y";
              PV0KW03.PC6ITMNB[PV0KWRIP] = PV0KW03.PV0KWRIX;
              PV0KW03.PC6ITMNB[PV0KWRIX] = PV0KW03.PV0KWRIP;
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K265  ****/
end // end PV0K265

// CHECK    If Pair Update
Function PV0K685()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Check if we need to do a Pair Update             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KW01.PV0KWUPD == "Y")
    if (PV0KW03.PC6ITMNB[PV0KWRIX] > 0) /* Does this have a Pair?*/
      PV0KW04.XRICD = PCMREC.XRICD;
      PV0KW04.PCMIVQTY = PCMREC.PCMIVQTY;
      PV0KW04.PCMOSQTY = PCMREC.PCMOSQTY;
      PV0KW04.PVBLNQTY = PV0KW01.PVBLNQTY;
      PV0KW03.PV0KWRIP = PV0KW03.PV0KWRIX;
      PV0K687(); /* Update First of a Pair*/

      PV0KW03.PV0KWRIX = PV0KW03.PC6ITMNB[PV0KWRIX] - 1;
      PV0KW03.PV0KWUSF[PV0KWRIX] = "Y";
      PV0K252(); /* Load Second of a Pair*/
      PCMREC.XRICD = PV0KW04.XRICD;
      PCMREC.PCMIVQTY = PV0KW04.PCMIVQTY;
      PCMREC.PCMOSQTY = PV0KW04.PCMOSQTY;
      PV0K687(); /* Update Second of a Pair*/

      PV0KW01.PVBLNQTY = PV0KW04.PVBLNQTY;
      PV0KW03.PV0KWRIX = PV0KW03.PV0KWRIP - 1;
      PV0K252(); /* Restore First of a Pair*/
    else
      PV0K687(); /* Update VFYPO001*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0K685  ****/
end // end PV0K685

// UPDATE   VFYPO001 Row
Function PV0K687()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Update VFYPO001 Record                           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PCMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PCMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  set SQLCA empty;
  call "IO3680" ("U ", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOC = "PV0K687";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "VFYPO001";
    TA1REC.TA1TBLKE = PCMREC.PCMKEY;
    XSPVS52();
  end

  return; /* Last Statement*/


   /* ***  End of PV0K687  ****/
end // end PV0K687

// READ     IVC HEADER IO5660
Function PV0K960()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Header                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  move PV0KM100 to PVAREC withV60Compat;

  PVYREC.PVYFNC = "S ";
  XPPV960(); /* IOMOD VPVHDR01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    move PVAREC to PVLREC withV60Compat;
    PVLREC.PVBLNINB = 0;
    PVLREC.XFACD = "19";
    PVYREC.PVYFNC = "S ";
    XPPV440(); /* IOMOD VPVHDR01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      move PVAREC to PV0KM100 withV60Compat;
      PV0KM100.PVAIVAMT = 0;
      PV0KM100.PVARIVID = " ";
      set PV0KM100.PV0KMCLO cursor;
      PV0KS90(); /* Load Line Items into Core*/
    else
       /* Invoice Selected is not in non-received state*/
      PVUREC.PVUERNBR = 95;
      PVUREC.PVUERROR[PVUERIVC] = "Y";
    end
  end


  return; /* Last Statement*/


   /* ***  End of PV0K960  ****/
end // end PV0K960

// INSERT   IVC HEADER IO5660
Function PV0K965()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Header                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KW01.PV0KWUPD == "Y")
    PVYREC.PVYFNC = "A ";
    XPPV960(); /* IOMOD VPVHDR01*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0K965  ****/
end // end PV0K965

// INSERT   IVC ITEM IO5670
Function PV0K975()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert Invoice Item                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KW01.PV0KWUPD == "Y")
    PVYREC.PVYFNC = "A ";
    XPPV970(); /* IOMOD VPVITM01*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0K975  ****/
end // end PV0K975

// GET NEXT Invoice IO5690
Function PV0K990()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Next Invoice Number                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "S ";
  XPPV990(); /* IOMOD VPVCTL01*/

  XSPVS58(); /* Format Invoice Number*/

  if (PV0KW01.PV0KWUPD == "Y")
    PVFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    PVFREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    PVYREC.PVYFNC = "U ";
    XPPV990(); /* IOMOD VPVCTL01*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0K990  ****/
end // end PV0K990

// Load Pvarec for Update
Function PV0KS-ADD-VPVPMT01()
   /* Maintenance log:*/
   /* 10-19-99  GDECKE  NISSHO CONTINGENCY - DO NISSHO EDIT*/
   /* ******************************************************/

  set VPVPMT01 empty;

   /* FIND THE STATUS CODE THAT SHOULD BE ON THE PAYMENT LINES*/
  if (PVAREC.XIPCD == "NP")
    VPVPMT01.XIP-IVC-STAT-CD = "ER";
  else
    VPVPMT01.XIP-IVC-STAT-CD = "UN";
  end

   /* UPDATE FOB PAYMENT LINE - TYPE CODE 'FB'*/

  if (PVAREC.PVATFOB != 0)
    VPVPMT01.PV-PMT-VEND-IVC-ID = PVAREC.PVAIVCID;

    if (PV0KW02.PV0KW-FOB-REC-FOUND == "Y")
      VPVPMT01.PV-PMT-VEND-NBR = PV0KW02.PV-PMT-VEND-NBR;
      VPVPMT01.PV-PMT-VEND-GRP = PV0KW02.PV-PMT-VEND-GRP;
    else
      VPVPMT01.PV-PMT-VEND-NBR = PVAREC.PVOVENDR;
      VPVPMT01.PV-PMT-VEND-GRP = PVAREC.PVOVENDG;
    end

    VPVPMT01.PV-IVC-ID = PVAREC.PVAIVCID;

    VPVPMT01.PV-MSA-VEND-NBR = PVAREC.PVOVENDR;
    VPVPMT01.PV-MSA-VEND-GRP = PVAREC.PVOVENDG;

    VPVPMT01.XPV-IVC-TYP-CD = "FB";
    VPVPMT01.PV-PMT-IVC-AMT = PVAREC.PVATFOB;
    VPVPMT01.PV-IVC-TO-AP-DT = 0;
    VPVPMT01.PV-PMT-IVC-DT = PVAREC.PVAIVCDT;
    VPVPMT01.PV-PMT-IVC-DUE-DT = PVAREC.PVADUEDT;
    VPVPMT01.ZZ-SDT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
    VPVPMT01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
    VPVPMT01.ZZ-CHNG-CNT = 0;
    PV0KW05.PV0KW-DBIO-FUNCTION = "A ";
    PV0KS-CALL-VPVPMT(); /* PERFORM CALL TO VPVPMT01 IOMOD*/
  end

end // end PV0KS-ADD-VPVPMT01

// Load Pvarec for Update
Function PV0KS-CALL-VPVPMT()
   /* 10-19-99 GDECKE  NISSHO CONTINGENCY - UPDATE VPVPMT01 LINES*/
   /* FOR FREIGHT, FOB AND DUTY.*/
   /* ******************/
   /* update PV0AM100 PAYMENT CHANGES*/
   /* ******************/


  set SQLCA empty;
  call "VPVPMT01" (PV0KW05, SQLCA, VPVPMT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0   /* PAYMENT found--> UPDATE*/
   || SQLCA.VAGen_SQLCODE == 100 /* PAYMENT not found*/
   || SQLCA.VAGen_SQLCODE == -911
  )                              /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1LOCAT[2] = "SELECT DB2 PVPMT01";
    TA1REC.TA1LOC = "PV0KS-CALL-VPVPMT";
    TA1REC.TA1DBASE = "DPINVC";
    TA1REC.TA1TBLVU = "VPVPMT01";
    TA1REC.TA1TBLKE = VPVPMT01.PV-IVC-ID;
    XSPVS52();
  end

end // end PV0KS-CALL-VPVPMT

// CHECK    Who Invoked me
Function PV0KS01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if the call was Legitimate                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSENTRY();
  XSSEGTR();

  if (PVUREC.PVURCRD1 == "PVAREC "
   || PVUREC.PVURCRD1 == "PVCREC "
   || PVUREC.PVURCRD1 == "PVDREC ")
    move PVUREC to PV0KM100 withV60Compat;
    set PV0KM100.PVAIVCID cursor;
    PV0K960(); /* Read Invoice Header*/
  end

  PV0KS04(); /* Check Security Access Type*/

  return; /* Last Statement*/


   /* ***  End of PV0KS01  ****/
end // end PV0KS01

// GO BACK  to Calling Applicatio
Function PV0KS03()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS60(); /* PV Common Exit*/
  PV0KS53(); /* Exit Routine*/

  return; /* Last Statement*/


   /* ***  End of PV0KS03  ****/
end // end PV0KS03

// CHECK    Security Access Type
Function PV0KS04()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    This routine will set Inquiry only Flag if needed.  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (COMMAREA.CACHGFL == "N")
    PVUREC.PVUINQRY = "Y"; /* Set Inquiry mode*/
    PV0KS52(); /* Set fields to AUTOSKIP*/
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS04  ****/
end // end PV0KS04

// GET      System Date and Time
Function PV0KS09()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0KM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0KM100.TA2TIMED = TA2REC.TA2TIMED;

  return; /* Last Statement*/


   /* ***  End of PV0KS09  ****/
end // end PV0KS09

// BUILD    Adjustment Record
Function PV0KS10()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Adjustment Record                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVFREC.PVFNXIVC == " ")
    if (PV0KW01.PV0KWUPD == "Y")
      PV0K990(); /* Get Next Invoice Number*/
      PV0KM100.PVARIVID = PVUREC.PVAIVCID;
    end
  end

  PVBREC.PVAIVCID = PV0KM100.PVARIVID;
  PVBREC.PVBLNAMT = PVBREC.PCMOSQTY * PVBREC.PVBLNFOB;
  if (PV0KM100.PV0KMADJ == "Y")
    PVBREC.PVBLNQTY = PVBREC.PCMOSQTY * -1;
    PVBREC.PCMOSQTY = 0;
    PVBREC.PVBLNAMT = PVBREC.PVBLNQTY * PVBREC.PVBLNFOB;
  end
  if (PV0KM100.PV0KMCLO == "Y")
    PVBREC.PVBLNQTY = 0;
    PVBREC.PVBLNAMT = PVBREC.PVBLNAMT * -1;
  end

  PV0KW02.PVATQTY = PV0KW02.PVATQTY + PVBREC.PVBLNQTY;
  PV0KW02.PVAIVAMT = PV0KW02.PVAIVAMT + PVBREC.PVBLNAMT;

  PVBREC.PVBLNCOM = 0;
  PVBREC.PVBLNDTY = 0;

  PVBREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVBREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  return; /* Last Statement*/


   /* ***  End of PV0KS10  ****/
end // end PV0KS10

// BUILD    Adjustment Header
Function PV0KS11()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Build Adjustment Header Record                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KW02.PV0KW-FOB-REC-FOUND == "Y")
    /* JKUNDU CHANGE BEGINS - 04/25/00*/
    /* MOVE PV0KW02.PV-PMT-VEND-IVC-ID TO PVAREC.PVARIVID;*/
    PVAREC.PVARIVID = PV0KW02.PV-IVC-ID;
    /* JKUNDU CHANGE ENDS  - 04/25/00*/
  else
    PVAREC.PVARIVID = PV0KM100.PVAIVCID;
  end

  PVAREC.PVAIVCID = PV0KM100.PVARIVID;
  PVAREC.XIPCD = "MT";
  PVAREC.XIVCD = "AR";
  PVAREC.PVATQTY = PV0KW02.PVATQTY;
  PVAREC.PVAIVAMT = PV0KW02.PVAIVAMT;
  PVAREC.PVATFOB = PVAREC.PVAIVAMT;
  PVAREC.PVAFRMIN = " ";

  PVAREC.PVAAPEDT = 0;
  PVAREC.XZCGLEDT = 0;
  PVAREC.PVATFRGT = 0;
  PVAREC.PVADSCT = 0;
  PVAREC.PVAINTRT = 0;
  PVAREC.PVABANKC = 0;
  PVAREC.PVABANKP = 0;
  PVAREC.PVATDUTY = 0;
  PVAREC.PVABRKRY = 0;
  PVAREC.PVAOCHG1 = 0;
  PVAREC.PVAOCHG2 = 0;
  PVAREC.PVASCHG1 = 0;
  PVAREC.PVASCHG2 = 0;
  PVAREC.PVAINT1 = 0;
  PVAREC.PVAINT2 = 0;
  PVAREC.PVAINT3 = 0;
  PVAREC.PVACOMMP = 0;
  PVAREC.PVATCOMM = 0;

  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN;
  PVAREC.PVAIVCDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZSDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  PV0KS15(); /* Check Due Date*/

  return; /* Last Statement*/


   /* ***  End of PV0KS11  ****/
end // end PV0KS11

// UPDATE   VFORCE01 Entry
Function PV0KS12()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Update VFORCE01 Entry                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVLREC.XFACD = "20";
  PVLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVLREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PVLREC.ZZZCHGCT = PVLREC.ZZZCHGCT + 1;
  PVYREC.PVYFNC = "A "; /* Create '20' Reason Code*/
  XPPV440(); /* IOMOD VPVHDR01*/

  PVLREC.XFACD = "19";
  PVYREC.PVYFNC = "D "; /* Delete '19' Reason Code*/
  XPPV440(); /* IOMOD VPVHDR01*/

  return; /* Last Statement*/


   /* ***  End of PV0KS12  ****/
end // end PV0KS12

// DECIDE   Invoice Due Date
Function PV0KS15()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Determine the Invoice Due Date                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVAREC.PVADUEDT >= TA2REC.TA2GRGGN)
     /* next sentence*/
  else
    PVAREC.PVADUEDT = TA2REC.TA2GRGGN;
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS15  ****/
end // end PV0KS15

// CHECK    FASTPATH
Function PV0KS30()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0KM100.CATOAP == " ")
       /* next sentence*/
    else
      if (PV0KM100.PVOVENDR == " "
       && PV0KM100.PVOVENDG == " "
       && PV0KM100.PVAIVCID == " "
       && PV0KM100.PV0KMCLO == " "
       && PV0KM100.PV0KMADJ == " "
       && PV0KM100.PV0KMDUM == " ")
        COMMAREA.CATOAP = PV0KM100.CATOAP;
        COMMAREA.CAITEM = PV0KM100.CAITEM;
        PV0KS53(); /* Exit Routine*/
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
         /* Cannot FASTPATH with data keyed in*/
        PVUREC.PVUERNBR = 63;
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS30  ****/
end // end PV0KS30

// SET      Fields to AUTOSKIP
Function PV0KS52()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    Set all fields to AUTOSKIP except FASTPATH.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0KM100.PVOVENDR skip;
  set PV0KM100.PVOVENDG skip;
  set PV0KM100.PVAIVCID skip;
  set PV0KM100.PV0KMCLO skip;
  set PV0KM100.PV0KMADJ skip;
  set PV0KM100.PV0KMDUM skip;
  set PV0KM100.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0KSSK  ****/
end // end PV0KS52

// EXIT     Routine (XSEXIT)
Function PV0KS53()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSEXIT();

  set PV0KM100.CATOAP cursor;
  PV0KM100.VAGen_EZEMSG = COMMAREA.CAMSG;

  return; /* Last Statement*/


   /* ***  End of PV0KSXT  ****/
end // end PV0KS53

// VALIDATE Data Keyed In
Function PV0KS60()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KM100.PVOVENDR == PVAREC.PVOVENDR
   && PV0KM100.PVOVENDG == PVAREC.PVOVENDG
   && PV0KM100.PVAIVCID == PVAREC.PVAIVCID
   && PV0KM100.PVOVENDR not modified
   && PV0KM100.PVOVENDG not modified
   && PV0KM100.PVAIVCID not modified
   && PVUREC.PVUERROR[PVUERGEN] == " "
   && PVUREC.PVUERROR[PVUERIVC] == " ")
     /* next sentence*/
  else
    if (PV0KM100.PVOVENDR == "2577"
     && PV0KM100.PVOVENDG == " "
     && PV0KM100.PV0KMADJ == "Y")
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* ADJ. Memos not Permitted for NISSHO Invoices*/
      PVUREC.PVUERNBR = 81;
      set PV0KM100.PVOVENDR cursor;
    else
      PV0K960(); /* Read VPVHDR01*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS60  ****/
end // end PV0KS60

// VALIDATE Adjustment Type
Function PV0KS62()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Adjustment Type                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KM100.PV0KMCLO == "Y"
   || PV0KM100.PV0KMCLO == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0KM100.PV0KMCLO cursor;
    return;
  end

  if (PV0KM100.PV0KMADJ == "Y"
   || PV0KM100.PV0KMADJ == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0KM100.PV0KMADJ cursor;
    return;
  end

  if (PV0KM100.PV0KMDUM == "Y"
   || PV0KM100.PV0KMDUM == " ")
    PVUREC.PVUERROR[PVUERGEN] = " ";
  else
     /* Must BE Y OR BLANK*/
    PVUREC.PVUERNBR = 85;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0KM100.PV0KMDUM cursor;
    return;
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS62  ****/
end // end PV0KS62

// VALIDATE Adj Consistency
Function PV0KS64()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Adjustment Consistency                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KM100.PV0KMCLO == "Y")
    set PV0KM100.PV0KMCLO cursor;
    PV0KW01.XRICD = "FC";
    if (PV0KM100.PV0KMADJ == " "
     && PV0KM100.PV0KMDUM == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  if (PV0KM100.PV0KMADJ == "Y")
    set PV0KM100.PV0KMADJ cursor;
    PV0KW01.XRICD = "CA";
    if (PV0KM100.PV0KMCLO == " "
     && PV0KM100.PV0KMDUM == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  if (PV0KM100.PV0KMDUM == "Y")
    set PV0KM100.PV0KMDUM cursor;
    PV0KW01.XRICD = "DC";
    if (PV0KM100.PV0KMCLO == " "
     && PV0KM100.PV0KMADJ == " ")
       /* next sentence*/
    else
       /* Conflict in data entered*/
      PVUREC.PVUERNBR = 86;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS64  ****/
end // end PV0KS64

// MAKE     Sure Adj was selected
Function PV0KS66()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Make sure one adjustment type was selected      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0KM100.PV0KMCLO == "Y"
   || PV0KM100.PV0KMADJ == "Y"
   || PV0KM100.PV0KMDUM == "Y")

    /* JKUNDU CHANGE BEGIN - 02/29/00*/
    if (PV0KW02.PVAIVAMT < PVUREC.PVULIMT1
     || PV0KW02.PVAIVAMT > PVUREC.PVULIMT2)
      PV0KM100.PVAIVAMT = PV0KW02.PVAIVAMT;
      /* Adjustment memo amount exceeds your authorized limit*/
      PVUREC.PVUERNBR = 73;
      /* MOVE 230 TO PVUREC.PVUERNBR; /* COMMENTED ON 03/06/00*/
      /* JKUNDU CHANGE END   - 02/29/00*/
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      return;
    end
  else
     /* Please Select one adjustment type*/
    PVUREC.PVUERNBR = 87;
    PVUREC.PVUERROR[PVUERGEN] = "Y";
    set PV0KM100.PV0KMCLO cursor;
    return;
  end

  return; /* Last Statement*/


   /* ***  End of PV0KS66  ****/
end // end PV0KS66

// BUILD    Line Items Array
Function PV0KS90()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Line Items Array                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0KW02 empty;
  set PVFREC empty;

  move PVAREC to PVBREC withV60Compat; /* Build VPVITM01 WHERE Condition*/
  PVYREC.PVYFNC = "S2"; /* Declare VPVITM01 Cursor*/
  XPPV970(); /* IOMOD VPVITM01*/

  PVYREC.PVYFNC = "N2"; /* Prime Fetch*/
  XPPV970(); /* IOMOD VPVITM01*/

  PV0KW01.PV0KWCT1 = 0;
  while (SQLCA.VAGen_SQLCODE == 0)
    PV0KW01.PV0KWCT1 = PV0KW01.PV0KWCT1 + 1;
     /* VFYPO001 Declare Cursor Information*/
    PV0KW02.PC3PONBR[PV0KWCT1] = PVBREC.PC3PONBR;
    PV0KW02.XGPCD[PV0KWCT1] = PVBREC.XGPCD;
    PV0KW02.SY1STNBR[PV0KWCT1] = PVBREC.SY1STNBR;
    PV0KW02.SY2CLRID[PV0KWCT1] = PVBREC.SY2CLRID;
    PV0KW02.XDMCD[PV0KWCT1] = PVBREC.XDMCD;
    PV0KW02.XQACD[PV0KWCT1] = PVBREC.XQACD;
    PV0KW02.PC2INSEG[PV0KWCT1] = PVBREC.PC2INSEG;
    PV0KW02.XPGCD[PV0KWCT1] = PVBREC.XPGCD;
    PV0KW02.PC2CUXID[PV0KWCT1] = PVBREC.PC2CUXID;

    PV0KW02.XUMCD[PV0KWCT1] = PVBREC.XUMCD;
    PV0KW02.PVBLNINB[PV0KWCT1] = PVBREC.PVBLNINB;
    PV0KW02.PVBLNQTY[PV0KWCT1] = PVBREC.PVBLNQTY;
    PV0KW02.PCMOSQTY[PV0KWCT1] = PVBREC.PCMOSQTY;
    PV0KW02.PVBLNFOB[PV0KWCT1] = PVBREC.PVBLNFOB;
    PV0KW02.PVBLNCOM[PV0KWCT1] = PVBREC.PVBLNCOM;
    PV0KW02.PVBLNDTY[PV0KWCT1] = PVBREC.PVBLNDTY;
    PV0KW02.PVBLNAMT[PV0KWCT1] = PVBREC.PVBLNAMT;

    PV0K200(); /* Accumulate Receiving*/
    if (PCMREC.ZZZCHGCT == -1)
      PV0KW02.PV0KWRCV[PV0KWCT1] = "N";
    end
    if (PVBREC.PVBLNQTY > 0)
      PV0K210(); /* Process VPVITM01 Leftovers*/
    end

    PVYREC.PVYFNC = "N2"; /* Fetch Next Row*/
    XPPV970(); /* IOMOD VPVITM01*/
  end

  PVYREC.PVYFNC = "C2"; /* Close Line Item Cursor*/
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0KS90  ****/
end // end PV0KS90

//*** RECORD=PV0KW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0KW01 type basicRecord
  5 VAGen_SQLCODE VAGen_SQLCODE ; 
  5 XRICD XRICD ; 
  5 XUMCONVF XUMCONVF ; 
  5 PV0KWXUM PV0KWXUM ; 
  5 PVBLNQTY PVBLNQTY ; 
  5 PCMRCPTQ PCMRCPTQ ; 
  5 PCMOSQTY PCMOSQTY ; 
  5 PV0KWUPD PV0KWUPD ; 
  5 PV0KWCT1 PV0KWCT1 ; 
  5 PV0KWCT2 PV0KWCT2 ; 
end // end PV0KW01

//*** RECORD=PV0KW02 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0KW02 type basicRecord
  5 PVATQTY PVATQTY ; 
  5 PVAIVAMT PVAIVAMT ; 
  5 PV0KWSKY PV0KWSKY ; 
  5 PV0KWITM PV0KWITM [300] ; 
    10 PV0KWKEY PV0KWKEY ; 
      15 PC3PONBR PC3PONBR ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XPGCD XPGCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 PC2CUXID PC2CUXID ; 
    10 XUMCD XUMCD ; 
    10 PVBLNINB PVBLNINB ; 
    10 PVBLNQTY PVBLNQTY ; 
    10 PCMOSQTY PCMOSQTY ; 
    10 PVBLNFOB PVBLNFOB ; 
    10 PVBLNCOM PVBLNCOM ; 
    10 PVBLNDTY PVBLNDTY ; 
    10 PVBLNAMT PVBLNAMT ; 
    10 PV0KWRCV PV0KWRCV ; 
  5 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
  5 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
  5 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
  5 PV0KW-FOB-REC-FOUND PV0KW-FOB-REC-FOUND ; 
  5 PV-IVC-ID PV-IVC-ID ; 
    10 PV0KW-IVC-ID-CHAR PV0KW-IVC-ID-CHAR [16] ; 
  5 PV0KW-IVIDX PV0KW-IVIDX ; 
  5 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
  5 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
end // end PV0KW02

//*** RECORD=PV0KW03 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0KW03 type basicRecord
  5 PV0KWUOM PV0KWUOM ; 
  5 PV0KWRIX PV0KWRIX ; 
  5 PV0KWRIC PV0KWRIC ; 
  5 PV0KWRIP PV0KWRIP ; 
  5 PV0KWFYP PV0KWFYP [100] ; 
    10 PV0KWFKY PV0KWFKY ; 
      15 PC3PONBR PC3PONBR ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XPGCD XPGCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 PC2CUXID PC2CUXID ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XOWCD XOWCD ; 
    10 XUMCD XUMCD ; 
    10 YMTCD YMTCD ; 
    10 XWHCD XWHCD ; 
    10 SL1RCRNO SL1RCRNO ; 
    10 TSHRCTDT TSHRCTDT ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 PCMRCPTQ PCMRCPTQ ; 
    10 XRICD XRICD ; 
    10 PCMIVQTY PCMIVQTY ; 
    10 PCMOSQTY PCMOSQTY ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PV0KWUSF PV0KWUSF ; 
end // end PV0KW03

//*** RECORD=PV0KW04 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 06-12-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0KW04 type basicRecord
  5 XRICD XRICD ; 
  5 PVBLNQTY PVBLNQTY ; 
  5 PCMRCPTQ PCMRCPTQ ; 
  5 PCMIVQTY PCMIVQTY ; 
  5 PCMOSQTY PCMOSQTY ; 
end // end PV0KW04

//*** RECORD=PV0KW05 ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - PV0BW-DBIO-FUNCTION *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   EACH IOMOD. THE ONE CALL WILL HANDLE ANY FUNCTION CODE *
// *   AS LONG AS THE VALUE IS MOVED TO THE FUNCTION FIELD    *
// *   IN THIS RECORD BEFORE THE IOMOD ROUTINE IS USED.       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 10-19-99  gdecke  ADD FOR CALL TO VPVPMT01 CALL IN PV0A  *
// ************************************************************
// ***********************
Record PV0KW05 type basicRecord
  5 PV0KW-DBIO-FUNCTION PV0KW-DBIO-FUNCTION ; 
end // end PV0KW05

// iomod function to perform
DataItem PV0KW-DBIO-FUNCTION char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND ORIG VENDOR IVC FOB PMT
DataItem PV0KW-FOB-REC-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BREAK INVOICE NBR INTO BYTES
DataItem PV0KW-IVC-ID-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX TO IVC NBR REDEFINITION
DataItem PV0KW-IVIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 1
DataItem PV0KWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 2
DataItem PV0KWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line Item Key
DataItem PV0KWFKY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFYPO001 Table
DataItem PV0KWFYP char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Working Storage
DataItem PV0KWITM char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line Item Key
DataItem PV0KWKEY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receive Flag
DataItem PV0KWRCV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFYPO001 Count
DataItem PV0KWRIC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// VFYPO001 Pairing
DataItem PV0KWRIP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// VFYPO001 Index
DataItem PV0KWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line Item Save Key
DataItem PV0KWSKY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem PV0KWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update Mode Flag
DataItem PV0KWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record in Use Flag
DataItem PV0KWUSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM_CONV_FCTR
DataItem PV0KWXUM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

