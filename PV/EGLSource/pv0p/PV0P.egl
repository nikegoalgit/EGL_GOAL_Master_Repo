package pv0p;
import corpcom2.XSRREC;
import corpcom3.XPPV980;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPVS01;
import corpcom4.XSPVS57;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAREC;
import corpcom6.SQLCA;
import corpcom6.USERID;
import corpcom6.VAGen_SQLCODE;
import fy.common.FY1REC;
import ku.common.KUMREC;
import pc.common.PC2REC;
import pc.common.PC3REC;
import pc.common.PC6REC;
import pc.common.PCMREC;
import pv.common.*;
import sy.common.SY1REC;
import sy.common.SY2REC;
import sy.common.SY4REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSWREC;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VPVERR01;
import vv.common.VPVPMT01;
import xx.common.*;
import xx02.*;
import xx03.*;
import xx03.XIB-IBANK-CD;
import xx04.*;
import xx05.*;
import xx06.*;
import xx08.*;
//*** PROGRAM=PV0P ****
// ************************************************************
// *
// *   PV0P - FACTORY INVOICE ERROR DETAIL SCREEN
// *
// *   This application provides the facility to update the
// *   error status and the action taken .
// *
// ************************************************************
// * Maintenance History
// *Rev #    Date    Who     Remarks
// *-----  --------  ------  ----------------------------------
// *        8-17-00  GVASUD  Program Creation
// *       10-17-00  GVASUD  ADDED USER AUTHORITY PV0P400.
// ************************************************************
// *********************
Program PV0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  GLAREC GLAREC; // record
  KUMREC KUMREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PCMREC PCMREC; // record
  PV0AW01 PV0AW01; // record
  PV0AW02 PV0AW02; // record
  PV0AW03 PV0AW03; // record
  PV0AW04 PV0AW04; // record
  PV0PW01 PV0PW01; // record
  PV0PW02 PV0PW02; // record
  PV0PW03 PV0PW03; // record
  PV0PW04 PV0PW04; // record
  PV4050W1 PV4050W1; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVCREC PVCREC; // record
  PVDREC PVDREC; // record
  PVEREC PVEREC; // record
  PVGREC PVGREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVWREC PVWREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSWREC TSWREC; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VPVERR01 VPVERR01; // record
  VPVPMT01 VPVPMT01; // record
  XSRREC XSRREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XIPTBL; // table
  use XFATBL; // table
  use XWHTBL; // table
  use XSETBL; // table
  use XSTTBL; // table
  use XUMTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use YMTTBL; // table
  use XIVTBL; // table
  use XCTTBL; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use PV0PM.PV0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0P000: PV0P000();
  end // end main
end // end PV0P

// Update dpinv.vpverr01
Function PV0P-VPVERR01()
  SQLCA.VAGen_SQLCODE = 0;
  PVWREC.PVWLINEX = 0;
  /* MOVE 0 TO PVWREC.PVWSCRNX;*/
  PV0PW01.PV0PWUP2 = "N";
  PV0PW01.PV0PWUPF1 = "N";
  ;
  /* PV0PW01.PV0PWMAX = PV0PW01.PV0PWLIN - 5;*/
  while ((PV0PW01.PV0PWUP2 == "N")
   && (PVWREC.PVWLINEX < 5))
    ;
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PVWREC.PVWSCRNX = PVWREC.PVWSCRNX + 1;
  /* PV0PW01.PV0PWIX2 = PV0PW01.PV0PWIX2 + 1;*/
    ;
    if (PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX] == 0
     && PV0PM001.PV-ERR-MSG[PVWLINEX] == " "
     && PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] == " "
     && PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] == " "
     && PV0PM001.PV-ERR-PROC-IND[PVWLINEX] == " "
     && PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX] == " ")
      PV0PW01.PV0PWUP2 = "Y";
      PV0PW01.PV0PWMDF = "N";
   /* MOVE 0 TO PVWREC.PVWSCRNX;*/
    else
      if ((PV0PM001.PV-ERR-ACT-DESC[PVWLINEX]
       != PV0PW03.PV-ERR-ACT-DESC[PVWSCRNX]) || 
      (PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX]
       != PV0PW03.PV-ERR-CURR-STAT-CD[PVWSCRNX]))
        VPVERR01.PV-ERR-LD-DT = PV0PM001.PV-ERR-LD-DT[PVWLINEX];
        VPVERR01.PV-CURR-STAT-CD = PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX];
        VPVERR01.PV-ERR-ACT-DESC = PV0PM001.PV-ERR-ACT-DESC[PVWLINEX];
        VPVERR01.PV-ERR-SEQ-NBR = PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX];
        VPVERR01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
        VPVERR01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
        VPVERR01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
        VPVERR01.ZZ-SDT = TA2REC.TA2GRGGN;
        ;
        call "VPVERR01" ("U ", SQLCA, VPVERR01) {isNoRefresh = yes, isExternal = yes};
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          /* NEXT SENTENCE*/
          PV0PW01.PV0PWUPF = "Y";
          PV0PW01.PV0PWMDF = "N";
          converseLib.validationFailed(231);
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
            set VPVERR01 empty;
            converseLib.validationFailed(44);
            return;
          else
            PVWREC.PVWERRF = "Y";
            PV0PW01.PV0PWMDF = "N";
            TA1REC.TA1LOCAT[1] = "XPPV-VPVERR01";
            TA1REC.TA1LOCAT[2] = "READING DB2 VPVERR01";
            TA1REC.TA1TBLVU = "VPVERR01";
            PV0PS97();
            PVWREC.PVWERRF = "Y";
            return;
                                /*  */
          end
        end
      else
        ;
      end
    end
  end
end // end PV0P-VPVERR01

// IOMOD    DPINVC.VPVown01
Function PV0P-VPVOWN01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for ERROR DESCRIPTION          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  ;
  PVGREC.PV-ERR-MSG-ID = PV0PW03.PV-ERR-MSG-ID[PVWLINEX];
  call "VPVOWN01" ("S ", SQLCA, PVGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0PW03.PV-ERR-MSG[PVWLINEX] = PVGREC.PV-ERR-MSG-DESC;
    PV0PW03.PV-ERR-OWN-GRP[PVWLINEX] = PVGREC.PV-ERR-OWN-DESC;
  /* MOVE PV0PW03.PV-ERR-MSG(PVWLINEX) TO PV0PM001.PV-ERR-MSG(PVWLINEX);*/
  /* MOVE PV0PW03.PV-ERR-OWN-GRP(PVWLINEX)*/
  /* TO PV0PM001.PV-ERR-OWN-GRP(PVWLINEX);*/
    /* Next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
   /* MOVE 238 TO PVUREC.PVUERNBR;*/
      PV0PW03.PV-ERR-MSG[PVWLINEX] = " ";
      PV0PW03.PV-ERR-OWN-GRP[PVWLINEX] = " ";
      SQLCA.VAGen_SQLCODE = 0;
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
        set PVGREC empty;
        converseLib.validationFailed(44);
        return;
      else
        PVWREC.PVWERRF = "Y";
        TA1REC.TA1LOCAT[1] = "XPPV-VPVOWN01";
        TA1REC.TA1LOCAT[2] = "READING DB2 VPVOWN01";
        TA1REC.TA1TBLVU = "VPVOWN01";
        PV0PS97();
        PVWREC.PVWERRF = "Y";
        return;
                        /*  */
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV-VPVPMT01  ****/
end // end PV0P-VPVOWN01

// PROCESS  Main Logic
Function PV0P000()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0P    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0P001(); /* Initialization Logic*/
  ;
  PV0PS01(); /* Check Who Invoked me*/
  ;
  PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
  XPPV-VPVERR01(); /* call io module*/
  while (PVWREC.PVWEOAF == "N")
    PV0P100();
  end
  ;
  exit program;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0P000  ****/
end // end PV0P000

// INIT     Routine
Function PV0P001()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0PW01 empty;
  set PV0PW02 empty;
  set PV0PW03 empty;
  set PV0PM001 initial;
  set VPVERR01 empty;
  set PVWREC empty;
  set PVGREC empty;
  set PVUREC empty;
   /* SET FY1REC EMPTY;*/
  set TA2REC empty;
  PVWREC.PVWEOAF = "N";
  PVWREC.PVWBLDSC = "N";
  PV0PW01.PV0PWUPF = "N";
  PV0PW01.PV0PWUPF1 = "N";
  PV0PW01.PV0PWIX2 = 1;
  PV0PW01.PV0PWMDF = "N";
  PVWREC.PVWSCRNX = 0;
  PV0PW01.PV0PWLIN = 0;
  PVWREC.PVWERRF = "N";
  XSPVS01(); /* Initialize PV Common Routine Fields*/
  ;
  TA1REC.TA1PGMNM = "PV0P"; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0PM001";
  ;
    /* Get System Date and Time*/
  PV0PS09();
  ;
    /* Set Maximum Scroll Lines*/
  ;
   /* Set Active Screen*/
  PV0PW01.PV0PWMAP = "1";
  PV0PW01.PV0PWPRV = "1";
  PV0PW01.PV0PWLST = "2";
  ;
   /* if control passed from pv0O, use saved values to fill in PV0Pm001*/
  if (COMMAREA.CAFROMAP == "PV0O")
    if (PVUREC.PV-MSA-VEND-NBR != " ")
      PV0PW01.PV-MSA-VEND-NBR = PVUREC.PV-MSA-VEND-NBR;
    end
    if (PVUREC.PV-MSA-VEND-GRP != " ")
      PV0PW01.PV-MSA-VEND-GRP = PVUREC.PV-MSA-VEND-GRP;
    end
    if (PVUREC.PV-IVC-ID != " ")
      PV0PW01.PV-IVC-ID = PVUREC.PV-IVC-ID;
    end
    if (PVUREC.PV-PMT-VEND-NBR != " ")
      PV0PW01.PV-PMT-VEND-NBR = PVUREC.PV-PMT-VEND-NBR;
    end
    if (PVUREC.PV-PMT-VEND-IVC-ID != " ")
      PV0PW01.PV-PMT-VEND-IVC-ID = PVUREC.PV-PMT-VEND-IVC-ID;
    end
    if (PVUREC.PV-PMT-VEND-GRP != " ")
      PV0PW01.PV-PMT-VEND-GRP = PVUREC.PV-PMT-VEND-GRP;
    end
  end
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0P001  ****/
end // end PV0P001

// CONVERSE PV0PM001 SCREEN
Function PV0P100()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse invoice error details  Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0PM001.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0P130(); /* Protect blank rows at the end*/
  PV0PM001.TA2GRGB = TA2REC.TA2GRGB;
  PV0PM001.TA2TIMED = VGVar.currentFormattedTime;
  ;
  converse PV0PM001 ;
  ;
  set PV0PM001.PV-MSA-VEND-NBR initialAttributes; /* Reset Attributes*/
  set PV0PM001.PV-MSA-VEND-GRP initialAttributes;
  set PV0PM001.PV-IVC-ID initialAttributes;
  PVUREC.PVUERNBR = 0;
  PVUREC.PVUERROR[PVUERGEN] = " ";
  PVUREC.PVUERROR[PVUERVND] = " ";
  PVUREC.PVUERROR[PVUERIVC] = " ";
  PVUREC.PVUERROR[PVUERKEY] = " ";
  ;
  PV0P110();
  if (PVWREC.PVWERRF == "N")
    PV0P280();
  else
    return;
  end
  ;
  ;
  /* PERFORM PV0P280;*/
  return; /* Last Statement*/
  ;
   /* ***  End of PV0P001  ****/
end // end PV0P100

// CHECK    PF Keys and Exits
Function PV0P110()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVWREC.PVWERRF = "N";
  PVWREC.PVWLINEX = 0;
  while ((PVWREC.PVWLINEX < 5))
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] is modified || 
    PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] is modified)
      if (PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] is modified)
        set PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] bold;
      end
      if (PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] is modified)
        set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] bold;
      end
      PV0PW01.PV0PWMDF = "Y";
    end
  end
  ;
  PVWREC.PVWLINEX = 0;
  if (COMMAREA.CASECRC == 0) /* Check for Security Error*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf5
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
        /* next sentence*/
    else
        /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  if (PV0PW01.PV0PWMDF == "Y")
    if (converseVar.eventKey is pf7 || 
    converseVar.eventKey is pf8)
      converseLib.validationFailed(237);
      PVWREC.PVWERRF = "Y";
      return;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(52);
        PVWREC.PVWERRF = "Y";
        return;
      else
        if (converseVar.eventKey is pf5
         && PV0PW01.PV0PWUPF1 == "N")
          if (COMMAREA.CACLVL[3] == "N")
            converseLib.validationFailed(129);
            PVWREC.PVWERRF = "Y";
            return;
          end
     /* MOVE 'Y' PV0PW01.PV0PWUPF;*/
          while ((PVWREC.PVWLINEX < 5))
            PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
     /* SET PV0PM001.PV-ERR-ACT-DESC(PVWLINEX) CURSOR;*/
            if (PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] is modified)
              set PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] bold;
            end
            if (PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] is modified)
              set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] bold;
            end
            if (PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] != " "
             && PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] != " ")
              if (PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] == "UNR"
               || PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] == "RES")
                /* next sentence*/
              else
                set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] cursor, bold;
                converseLib.validationFailed(236);
                PV0PW01.PV0PWUPF = "N";
                PV0PW01.PV0PWMDF = "N";
                return;
              end
            end
          end
        end
      end
    end
  end
  if (converseVar.eventKey is pf7 || converseVar.eventKey is pf8 || converseVar.eventKey is pf3 || converseVar.eventKey is pf1
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf5 && PV0PW01.PV0PWMDF == "Y")
      PV0PW01.PV0PWUPF = "Y";
    else
      converseLib.validationFailed(53);
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  return;
  ;
end // end PV0P110

// autoskip
Function PV0P130()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      To protect the blank rows at the end              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVWREC.PVWLINEX = 0;
  while ((PVWREC.PVWLINEX < 5))
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    if (PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX] == 0
     && PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] == " "
     && PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] == " "
     && PV0PM001.PV-ERR-PROC-IND[PVWLINEX] == " "
     && PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX] == " ")
      set PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] skip;
      set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] skip;
    end
  end
   /* ***  End of PV0P110  ****/
end // end PV0P130

// Determine Next Action
Function PV0P280()
  ;
   /* ************************/
   /* Determine Next Action*/
   /* ************************/
  ;
  ;
   /* ***********************************************/
   /* check update flag*/
   /* if any changes to line items have been made*/
   /* or defaults present user will receive message*/
   /* ***********************************************/
  /* IF PV0PW01.PV0PWMDF EQ 'Y';*/
  /* IF EZEAID IS PF7 OR EZEAID IS PF8;*/
  /* MOVE 'N' TO PV0PW01.PV0PWUPF;/* make pf5 update possible*/
  /* MOVE 232 TO EZEMNO;          /*/
  /* MOVE 'Y' TO PV0PW01.PV0PWUPF1;*/
  /* EZERTN;*/
  /* END;*/
  /* END;*/
  if (PV0PW01.PV0PWUPF1 != "Y" /* First time*/
   && PV0PW01.PV0PWUPF == "Y") /* modification made to screen*/
    if (converseVar.eventKey is pf3
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf1
    ) /* next sentence*/
    else
      ;
      PV0PW01.PV0PWUPF = "N"; /* make pf5 update possible*/
      converseLib.validationFailed(232); /* /*/
      PV0PW01.PV0PWUPF1 = "Y";
      return;
              /* NEXT SENTENCE*/
    end
  end
  ;
  ;
   /* ***********************************/
    /* program has passed all checks*/
    /* now we have to process by pf key*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    converseLib.validationFailed(52); /* use pf keys to further process*/
  else
    if (converseVar.eventKey is pf1) /* Help*/
      XSPF1();
      PVWREC.PVWERRF = "Y";
      return;
    else
      if (converseVar.eventKey is pf7) /* scroll up*/
        PV0PS70();
        return;
      else
        if (converseVar.eventKey is pf8) /* scroll down*/
          PV0PS75();
          return;
        else
          if (converseVar.eventKey is pf5) /* scroll down*/
            if (PV0PW01.PV0PWUPF1 == "Y")
              PV0P-VPVERR01();
            end
          else
            if (converseVar.eventKey is pf3) /* exit to header*/
              PVWREC.PVWERRF = "Y";
              PVUREC.PV-PMT-VEND-NBR = PV0PW01.PV-PMT-VEND-NBR;
              PVUREC.PV-PMT-VEND-IVC-ID = PV0PW01.PV-PMT-VEND-IVC-ID;
              PVUREC.PV-PMT-VEND-GRP = PV0PW01.PV-PMT-VEND-GRP;
              COMMAREA.CATOAP = "PV0O";
              COMMAREA.CAUSERA = PVUREC.PVUGROUP;
              XSEXIT();
              return;
            end
          end
        end
      end
    end
  end
  return;
  ;
end // end PV0P280

// READ     VENDOR NAME IO5680
Function PV0P980()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
   /* use SAVED VALUE OF CURRENT VENDOR NUMBER AND VENDOR GROUP*/
    /* if current screen = 1 save entered values, else, use old*/
    /* values saved previously*/
  ;
  PVOREC.PVOVENDR = PV0PW01.PV-MSA-VEND-NBR;
  PVOREC.PVOVENDG = PV0PW01.PV-MSA-VEND-GRP;
  ;
  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/
  ;
  if (PVOREC.PVOVNDNM == " ")
    if (PV0PM001.PV-IVC-ID == " "
     && PV0PM001.PV-MSA-VEND-NBR == " ")
      PVUREC.PVUERNBR = 088;
      PVUREC.PVUERROR[PVUERVND] = "Y";
    else
      PVUREC.PVUERNBR = 136;
      PVUREC.PVUERROR[PVUERVND] = "Y";
    end
  end
  ;
  PV0PW01.PV-MSA-VEND-NM = PVOREC.PVOVNDNM;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0P980  ****/
end // end PV0P980

// CHECK    Passed Information
Function PV0PS01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if Caller passed any Information          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  ;
  ;
  PV0P980(); /* Get Vendor Name*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0PS01  ****/
end // end PV0PS01

// GET      System Date and Time
Function PV0PS09()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0PM001.TA2GRGB = TA2REC.TA2GRGG;
  PV0PM001.TA2TIMED = TA2REC.TA2TIMED;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0PS09  ****/
end // end PV0PS09

// Protect fields
Function PV0PS20()
  /* SET PV0PM001.PV-IVC-ID AUTOSKIP;*/
  /* SET PV0PM001.PV-MSA-VEND-NBR AUTOSKIP;*/
  /* SET PV0PM001.PV-MSA-VEND-NBR AUTOSKIP;*/
  /* SET PV0PM001.PV-ERR-LD-IND AUTOSKIP;*/
  set PV0PM001.PV-ERR-SEQ-NBR skip;
  set PV0PM001.PV-ERR-LD-DT skip;
  set PV0PM001.PV-ERR-MSG skip;
  set PV0PM001.PV-ERR-ACT-DESC skip;
  set PV0PM001.PV-ERR-CURR-STAT-CD skip;
  set PV0PM001.PV-ERR-LD-IND skip;
  set PV0PM001.PV-ERR-PROC-IND skip;
  set PV0PM001.PV-ERR-CSTMS-TXT skip;
end // end PV0PS20

// Load incoming line items
Function PV0PS22()
   /* ***********************************************************/
  ;
  /* PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 1;*/
  PV0PW03.PV-ERR-SEQ-NBR[PVWLINEX] = VPVERR01.PV-ERR-SEQ-NBR;
  PV0PW03.PV-ERR-LD-DT[PVWLINEX] = VPVERR01.PV-ERR-LD-DT;
  PV0PW03.PV-ERR-MSG-ID[PVWLINEX] = VPVERR01.PV-ERR-MSG-ID;
  PV0PW03.PV-ERR-ACT-DESC[PVWLINEX] = VPVERR01.PV-ERR-ACT-DESC;
  PV0PW03.PV-ERR-CURR-STAT-CD[PVWLINEX] = VPVERR01.PV-CURR-STAT-CD;
  PV0PW01.PV-ERR-LD-IND = VPVERR01.PV-ERR-LD-CD;
  PV0PW03.PV-ERR-PROC-IND[PVWLINEX] = VPVERR01.PV-ERR-PROC-CD;
  PV0PW03.PV-ERR-CSTMS-TXT[PVWLINEX] = VPVERR01.PV-CSTMS-TXT;
  PV0PW03.USERID[PVWLINEX] = VPVERR01.ZZ-CHNG-USER-ID;
  ;
end // end PV0PS22

// Load incoming line items
Function PV0PS23()
  ;
   /* ***********************************************/
   /* build pv0pm001*/
   /* ***********************************************/
  ;
  PV0PM001.PV-IVC-ID = PV0PW01.PV-IVC-ID;
  PV0PM001.PV-MSA-VEND-NBR = PV0PW01.PV-MSA-VEND-NBR;
  PV0PM001.PV-MSA-VEND-NM = PV0PW01.PV-MSA-VEND-NM;
  PV0PM001.PV-ERR-LD-IND = PV0PW01.PV-ERR-LD-IND;
  ;
  PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX] = PV0PW03.PV-ERR-SEQ-NBR[PVWLINEX];
  PV0PM001.PV-ERR-LD-DT[PVWLINEX] = PV0PW03.PV-ERR-LD-DT[PVWLINEX];
  PV0PM001.PV-ERR-MSG[PVWLINEX] = PV0PW03.PV-ERR-MSG[PVWLINEX];
  PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] = PV0PW03.PV-ERR-ACT-DESC[PVWLINEX];
  PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] = PV0PW03.PV-ERR-CURR-STAT-CD[PVWLINEX];
  PV0PM001.PV-ERR-LD-IND = VPVERR01.PV-ERR-LD-CD;
  PV0PM001.PV-ERR-PROC-IND[PVWLINEX] = PV0PW03.PV-ERR-PROC-IND[PVWLINEX];
  PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX] = PV0PW03.PV-ERR-CSTMS-TXT[PVWLINEX];
  PV0PM001.PV-ERR-MSG[PVWLINEX] = PV0PW03.PV-ERR-MSG[PVWLINEX];
  PV0PM001.PV-ERR-OWN-GRP[PVWLINEX] = PV0PW03.PV-ERR-OWN-GRP[PVWLINEX];
  PV0PM001.USERID[PVWLINEX] = PV0PW03.USERID[PVWLINEX];
  ;
end // end PV0PS23

// Scroll down Pf7
Function PV0PS70()
  ;
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 5; /* sets up screen*/
  PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN - 5; /* ranges*/
  ;
  if (PV0PW01.PV0PW1ST < 0) /* scrolled past top of screen*/
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 5; /* sets up screen*/
    PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN + 5; /* ranges*/
    converseLib.validationFailed(61);
    return;
  end
  ;
  PV0PS71();
  PVWREC.PVWLINEX = 0;
  while (PVWREC.PVWLINEX < 5)
                                   /* reen data into working storaX*/
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 1;
  /* MOVE TO OUTPUT*/
    ;
    PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX] = PV0PW03.PV-ERR-SEQ-NBR[PV0PW1ST];
    PV0PM001.PV-ERR-LD-DT[PVWLINEX] = PV0PW03.PV-ERR-LD-DT[PV0PW1ST];
    PV0PM001.PV-ERR-MSG[PVWLINEX] = PV0PW03.PV-ERR-MSG[PV0PW1ST];
    PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] = PV0PW03.PV-ERR-ACT-DESC[PV0PW1ST];
    PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] = PV0PW03.PV-ERR-CURR-STAT-CD[PV0PW1ST];
    PV0PM001.PV-ERR-PROC-IND[PVWLINEX] = PV0PW03.PV-ERR-PROC-IND[PV0PW1ST];
    PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX] = PV0PW03.PV-ERR-CSTMS-TXT[PV0PW1ST];
    PV0PM001.USERID[PVWLINEX] = PV0PW03.USERID[PV0PW1ST];

  end
  ;
  PVWREC.PVWLINEX = 0;
  while (PVWREC.PVWLINEX < 5)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    set PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] initialAttributes;
    set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] initialAttributes;
  end
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 5; /* sets up screen*/
end // end PV0PS70

// Load Screen Data To WS
Function PV0PS71()
  ;
   /* ***************************************/
   /* Load Screen Data Into Working Storage*/
        /* From  pf7*/
   /* ***************************************/
  ;
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 5; /* sets up screen*/
  PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN + 5; /* for ws load*/
  ;
  PVWREC.PVWLINEX = 0;
  ;
  while (PVWREC.PVWLINEX < 5)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 1;
    ;
    PV0PW03.PV-ERR-SEQ-NBR[PV0PW1ST] = PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX];
    PV0PW03.PV-ERR-LD-DT[PV0PW1ST] = PV0PM001.PV-ERR-LD-DT[PVWLINEX];
    PV0PW03.PV-ERR-MSG[PV0PW1ST] = PV0PM001.PV-ERR-MSG[PVWLINEX];
    PV0PW03.PV-ERR-ACT-DESC[PV0PW1ST] = PV0PM001.PV-ERR-ACT-DESC[PVWLINEX];
    PV0PW03.PV-ERR-CURR-STAT-CD[PV0PW1ST] = PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX];
    PV0PW03.PV-ERR-PROC-IND[PV0PW1ST] = PV0PM001.PV-ERR-PROC-IND[PVWLINEX];
    PV0PW03.PV-ERR-CSTMS-TXT[PV0PW1ST] = PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX];
    PV0PW03.USERID[PV0PW1ST] = PV0PM001.USERID[PVWLINEX];
    ;
  end
  ;
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 10; /* resets  screen*/
  PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN - 5;
  ;
end // end PV0PS71

// Scroll Down Pf8
Function PV0PS75()
  ;
   /* *****************/
   /* Pf8 Scroll Down*/
   /* *****************/
  PV0PW01.PV0PWBOT = 0;
  ;
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 5; /* sets up screen*/
  PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN + 5; /* ranges*/
  PV0PW01.PV0PWBOT = PV0PW01.PV0PWBOT + 1;
  ;
  if (PV0PW01.PV0PW1ST > PV0PW01.PV0PWLIN)
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 5; /* sets up screen*/
    PV0PW01.PV0PWCLN = PV0PW01.PV0PWCLN - 5; /* ranges*/
    converseLib.validationFailed(62);
    return;
  end
  ;
  ;
  PV0PS76(); /* load working storage*/
  ;
  ;
  set PV0PM001 empty;
  PVWREC.PVWLINEX = 0;

  ;
  PV0PM001.PV-IVC-ID = PV0PW01.PV-IVC-ID;
  PV0PM001.PV-MSA-VEND-NBR = PV0PW01.PV-MSA-VEND-NBR;
  PV0PM001.PV-MSA-VEND-NM = PV0PW01.PV-MSA-VEND-NM;
  PV0PM001.PV-ERR-LD-IND = PV0PW01.PV-ERR-LD-IND;
  ;
  while (PV0PW01.PV0PW1ST < PV0PW01.PV0PWCLN)
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 1;
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    ;
    PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX] = PV0PW03.PV-ERR-SEQ-NBR[PV0PW1ST];
    PV0PM001.PV-ERR-LD-DT[PVWLINEX] = PV0PW03.PV-ERR-LD-DT[PV0PW1ST];
    PV0PM001.PV-ERR-MSG[PVWLINEX] = PV0PW03.PV-ERR-MSG[PV0PW1ST];
    PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] = PV0PW03.PV-ERR-ACT-DESC[PV0PW1ST];
    PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] = PV0PW03.PV-ERR-CURR-STAT-CD[PV0PW1ST];
    PV0PM001.PV-ERR-PROC-IND[PVWLINEX] = PV0PW03.PV-ERR-PROC-IND[PV0PW1ST];
    PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX] = PV0PW03.PV-ERR-CSTMS-TXT[PV0PW1ST];
    PV0PM001.USERID[PVWLINEX] = PV0PW03.USERID[PV0PW1ST];
    ;
  end
  ;
  PVWREC.PVWLINEX = 0;
  while (PVWREC.PVWLINEX < 5)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    set PV0PM001.PV-ERR-ACT-DESC[PVWLINEX] initialAttributes;
    set PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX] initialAttributes;
  end
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 5; /* reset counter*/
end // end PV0PS75

// Load Screen Data to WS
Function PV0PS76()
  PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST - 5; /* sets up screen*/
  PVWREC.PVWLINEX = 0;
  ;
  while (PVWREC.PVWLINEX < 5)
    PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
    PV0PW01.PV0PW1ST = PV0PW01.PV0PW1ST + 1;
    ;
    PV0PW03.PV-ERR-SEQ-NBR[PV0PW1ST] = PV0PM001.PV-ERR-SEQ-NBR[PVWLINEX];
    PV0PW03.PV-ERR-LD-DT[PV0PW1ST] = PV0PM001.PV-ERR-LD-DT[PVWLINEX];
    PV0PW03.PV-ERR-MSG[PV0PW1ST] = PV0PM001.PV-ERR-MSG[PVWLINEX];
    PV0PW03.PV-ERR-ACT-DESC[PV0PW1ST] = PV0PM001.PV-ERR-ACT-DESC[PVWLINEX];
    PV0PW03.PV-ERR-CURR-STAT-CD[PV0PW1ST] = PV0PM001.PV-ERR-CURR-STAT-CD[PVWLINEX];
    PV0PW03.PV-ERR-PROC-IND[PV0PW1ST] = PV0PM001.PV-ERR-PROC-IND[PVWLINEX];
    PV0PW03.PV-ERR-CSTMS-TXT[PV0PW1ST] = PV0PM001.PV-ERR-CSTMS-TXT[PVWLINEX];
    PV0PW03.USERID[PV0PW1ST] = PV0PM001.USERID[PVWLINEX];
  end
end // end PV0PS76

// Db2 abend routine
Function PV0PS97()
  ;
    /* Db2 Abend Routine*/
    /* Call to Ta0020*/
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "PV0P";
  TA1REC.TA1MAP = "PV0PM001";
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  ;
end // end PV0PS97

// Pvprec Lookup
Function XPPV-VPVERR01()
  ;
   /* ************************/
   /* VPVERR01 LOOKUP*/
   /* ************************/
  PVWREC.PVWLINEX = 0;
  PV0PW01.PV0PWLIN = 0;
  PV0PW01.PV0PWCLN = 5; /* initialize current line item*/
  PV0PW01.PV0PW1ST = 0; /* initialize one less than 1st line*/
   /* -1 TO PV0PW02.PV-ERR-SEQ-NBR;*/
  VPVERR01.PV-ERR-SEQ-NBR = -1;
  VPVERR01.PV-MSA-VEND-NBR = PV0PW01.PV-MSA-VEND-NBR;
  VPVERR01.PV-IVC-ID = PV0PW01.PV-IVC-ID;
  VPVERR01.PV-MSA-VEND-GRP = PV0PW01.PV-MSA-VEND-GRP;
  VPVERR01.PV-PMT-VEND-IVC-ID = PV0PW01.PV-PMT-VEND-IVC-ID;
  VPVERR01.PV-PMT-VEND-NBR = PV0PW01.PV-PMT-VEND-NBR;
  VPVERR01.PV-PMT-VEND-GRP = PV0PW01.PV-PMT-VEND-GRP;
  VPVERR01.PV-PMT-VEND-GRP = PV0PW01.PV-PMT-VEND-GRP;
  VPVERR01.PV-ERR-LD-DT = -1;
  ;
  ;
  set SQLCA empty;
  call "VPVERR01" ("S1", SQLCA, VPVERR01) {isNoRefresh = yes, isExternal = yes}; /* all line items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0PW01 empty; /* clear working storage*/
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "XPPV-VPVERR01";
      TA1REC.TA1LOCAT[2] = "READING DB2 VPVERR01";
      TA1REC.TA1TBLVU = "VPVERR01";
      TA1REC.TA1TBLKE = VPVERR01.PV-MSA-VEND-NBR;
      PV0PS97();
      PV0PS20();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
  ;
  PV0PW01.PV0PWUPF = "N";
  SQLCA.VAGen_SQLCODE = 0;
  /* VE 1 TO PVWREC.PVWLINEX;       /* line item number*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* AND PVWREC.PVWLINEX LT 5;*/
    VPVERR01.PV-ERR-LD-DT = -1;
    call "VPVERR01" ("N1", SQLCA, VPVERR01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* Error record found*/
      ;
      PVWREC.PVWLINEX = PVWREC.PVWLINEX + 1;
      PV0PS22(); /* working storage load*/
      PV0P-VPVOWN01(); /* Error desc*/
      if (PVWREC.PVWLINEX < 6)
        PV0PS23(); /* BUILD PV0PM001*/
      end
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        PV0PW01.PV0PWLIN = 0;
        /* NEXT SENTENCE*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
          set PV0PW01 empty; /* clear working storage*/
          converseLib.validationFailed(44);
          return;
        else
          TA1REC.TA1LOCAT[1] = "XPPV-VPVERR01";
          TA1REC.TA1LOCAT[2] = "FETCH ONE LINE ITEM";
          TA1REC.TA1TBLVU = "VPVERR01";
          TA1REC.TA1TBLKE = VPVERR01.PV-MSA-VEND-NBR;
          PV0PS97();
          PVWREC.PVWERRF = "Y";
          return;
        end
      end
    end
  end
  ;
  ;
  call "VPVERR01" ("C1", SQLCA, VPVERR01) {isNoRefresh = yes, isExternal = yes}; /* close ERR table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    PV0PW01.PV0PWLIN = PV0PW01.PV0PWLIN + PVWREC.PVWLINEX;
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* row is busy*/
      set PV0PW01 empty; /* clear working storage*/
      converseLib.validationFailed(44);
      return;
    else
      TA1REC.TA1LOCAT[1] = "XPPV-VPVERR01";
      TA1REC.TA1LOCAT[2] = "CLOSE ERROR TABLE";
      TA1REC.TA1TBLVU = "VPVERR01";
      TA1REC.TA1TBLKE = VPVERR01.PV-MSA-VEND-NBR;
      PV0PS97();
      PVWREC.PVWERRF = "Y";
      return;
    end
  end
end // end XPPV-VPVERR01

//*** RECORD=PV0PW01 ****
// ************************************************************
// *  PV0BW01 - WORKING STORAGE RECORD FOR PV0B APPLICATION   *
// *            MISCELLANEOUS FIELDS - INDEXES, FLAGS, ETC.   *
// *                                                          *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0PW01 type basicRecord
  5 PV0PW-PV0PW01-GROUP PV0PW-PV0PW01-GROUP ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 PV0PWMAP PV0PWMAP ; 
    10 PV0PWLST PV0PWLST ; 
    10 PV0PWLIN PV0PWLIN ; 
    10 PV0PW1ST PV0PW1ST ; 
    10 PV0PWCLN PV0PWCLN ; 
    10 PV0PWPRV PV0PWPRV ; 
    10 PV0PWMAX PV0PWMAX ; 
    10 PV0PWMAX-MAP3 PV0PWMAX-MAP3 ; 
    10 PV0PWNUM PV0PWNUM ; 
    10 PV0PW-CALC-TOLERANCE PV0PW-CALC-TOLERANCE ; 
    10 PV0PWTOP PV0PWTOP ; 
    10 PV0PWTOP-MAP3 PV0PWTOP-MAP3 ; 
    10 PV0PWBOT PV0PWBOT ; 
    10 PV0PWBOT-MAP3 PV0PWBOT-MAP3 ; 
    10 PV0PWCNT PV0PWCNT ; 
    10 PV0PWCNT-MAP3 PV0PWCNT-MAP3 ; 
    10 PV0PWCUR PV0PWCUR ; 
    10 PV0PWCUR-MAP3 PV0PWCUR-MAP3 ; 
    10 PV0PWSCP PV0PWSCP ; 
    10 PV0PWIMX PV0PWIMX ; 
    10 PV0PWIDX PV0PWIDX ; 
    10 PV0PWIX2 PV0PWIX2 ; 
    10 PV0PWIX3 PV0PWIX3 ; 
    10 PV0PWIX4 PV0PWIX4 ; 
    10 PV0PWIX5 PV0PWIX5 ; 
    10 PV0PW-FIELD-CT PV0PW-FIELD-CT ; 
    10 PV-IVC-ID PV-IVC-ID ; 
    10 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
    10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
    10 PV-PMT-VEND-NM PV-PMT-VEND-NM ; 
    10 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
    10 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
    10 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
    10 PV0PW-SELECT-LINE-COUNT PV0PW-SELECT-LINE-COUNT ; 
    10 PV0PW-TOTAL-FOB-AMOUNT PV0PW-TOTAL-FOB-AMOUNT ; 
    10 PV0PW-TOTAL-DUTY-AMOUNT PV0PW-TOTAL-DUTY-AMOUNT ; 
    10 PV0PW-TOTAL-FRGT-AMOUNT PV0PW-TOTAL-FRGT-AMOUNT ; 
    10 PV-IVC-AMT PV-IVC-AMT ; 
    10 PV-IVC-TOT-FRGT PV-IVC-TOT-FRGT ; 
    10 PV-IVC-DSCT-AMT PV-IVC-DSCT-AMT ; 
    10 PV-NISSHO-BANK-CHG PV-NISSHO-BANK-CHG ; 
    10 PV-NISSHO-FOB-AMT PV-NISSHO-FOB-AMT ; 
    10 PV-NISSHO-TOT-DTY PV-NISSHO-TOT-DTY ; 
    10 PV-NISSHO-BRKR-CHG PV-NISSHO-BRKR-CHG ; 
    10 PV-NISSHO-OTH-CHG1 PV-NISSHO-OTH-CHG1 ; 
    10 PV-NISSHO-OTH-CHG2 PV-NISSHO-OTH-CHG2 ; 
    10 PV-NISSHO-SUB-CHG1 PV-NISSHO-SUB-CHG1 ; 
    10 PV-NISSHO-SUB-CHG2 PV-NISSHO-SUB-CHG2 ; 
    10 PV-NISSHO-INT-CHG1 PV-NISSHO-INT-CHG1 ; 
    10 PV-NISSHO-INT-CHG2 PV-NISSHO-INT-CHG2 ; 
    10 PV-NISSHO-INT-CHG3 PV-NISSHO-INT-CHG3 ; 
    10 PV-NISSHO-COMM-AMT PV-NISSHO-COMM-AMT ; 
    10 PV0PW-PREV-CANCEL-FL PV0PW-PREV-CANCEL-FL ; 
    10 PV0PW-LC-TOTALS-BY-BANK PV0PW-LC-TOTALS-BY-BANK ; 
      15 PV-LN-ITM-QTY PV-LN-ITM-QTY ; 
      15 PV-LN-UNT-FOB-AMT PV-LN-UNT-FOB-AMT ; 
      15 PV-LN-UNT-COMM-AMT PV-LN-UNT-COMM-AMT ; 
      15 PV-NISSHO-LN-DTY PV-NISSHO-LN-DTY ; 
      15 PV0PW-SUM-FCTY-DSCT PV0PW-SUM-FCTY-DSCT ; 
      15 PV0PW-CURR-IBANK-CD PV0PW-CURR-IBANK-CD ; 
      15 XIB-IBANK-CD XIB-IBANK-CD [30] ; 
      15 PV-LC-ITM-QTY PV-LC-ITM-QTY [30] ; 
      15 PV-LC-UNT-FOB-AMT PV-LC-UNT-FOB-AMT [30] ; 
      15 PV-LC-UNT-COMM-AMT PV-LC-UNT-COMM-AMT [30] ; 
      15 PV-NISSHO-LC-DTY PV-NISSHO-LC-DTY [30] ; 
      15 PV0PW-SUM-BANK-DSCT PV0PW-SUM-BANK-DSCT [30] ; 
    10 PV0PW-LINE-IS-LC-FL PV0PW-LINE-IS-LC-FL ; 
    10 PV0PW-FOB-LC-FACTOR PV0PW-FOB-LC-FACTOR ; 
    10 PV0PW-COMM-LC-FACTOR PV0PW-COMM-LC-FACTOR ; 
    10 PV0PW-DUTY-LC-FACTOR PV0PW-DUTY-LC-FACTOR ; 
    10 PV0PW-QTY-LC-FACTOR PV0PW-QTY-LC-FACTOR ; 
    10 PV0PW-UPDATE-HEADER-FL PV0PW-UPDATE-HEADER-FL ; 
    10 PV0PW-FRGT-PMT-STAT PV0PW-FRGT-PMT-STAT ; 
    10 PV0PW-FOB-PMT-STAT PV0PW-FOB-PMT-STAT ; 
    10 PV0PW-DUTY-PMT-STAT PV0PW-DUTY-PMT-STAT ; 
    10 PV0PW-FORCE-PAY-FL PV0PW-FORCE-PAY-FL ; 
    10 MV0PW-FISCAL-MONTH MV0PW-FISCAL-MONTH ; 
      15 PV0PW-FISCAL-FILLER PV0PW-FISCAL-FILLER ; 
      15 PV0PW-FISCAL-CC PV0PW-FISCAL-CC ; 
      15 PV0PW-FISCAL-YYMM PV0PW-FISCAL-YYMM ; 
    10 PV0PW-FRGT-DBT-STAT PV0PW-FRGT-DBT-STAT ; 
    10 PV0PW-DUTY-DBT-STAT PV0PW-DUTY-DBT-STAT ; 
    10 PV0PW-BROK-DBT-STAT PV0PW-BROK-DBT-STAT ; 
    10 PV0PW-LCRED-DBT-STAT PV0PW-LCRED-DBT-STAT ; 
    10 PV-MSA-VEND-NM PV-MSA-VEND-NM ; 
    10 PV-ERR-LD-IND PV-ERR-LD-IND ; 
    10 PV-ERR-MSG-ID PV-ERR-MSG-ID ; 
    10 PV0PWUP2 PV0PWUP2 ; 
    10 PV0PWMDF PV0PWMDF ; 
    10 PV0PWUPF3 PV0PWUPF3 ; 
    10 PV0PWUPF PV0PWUPF ; 
    10 PV0PWUPF1 PV0PWUPF1 ; 
    10 PV0PWCNT-MAP1 PV0PWCNT-MAP1 ; 
end // end PV0PW01

//*** RECORD=PV0PW02 ****
// ************************************************************
// *  PV0BW01 - WORKING STORAGE RECORD FOR PV0B APPLICATION   *
// *            MISCELLANEOUS FIELDS - INDEXES, FLAGS, ETC.   *
// *                                                          *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0PW02 type basicRecord
  5 PV0PW-PV0PW02-GROUP PV0PW-PV0PW02-GROUP ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 PV0PWMAP PV0PWMAP ; 
    10 PV0PWLST PV0PWLST ; 
    10 PV0PWPRV PV0PWPRV ; 
    10 PV0PWMAX PV0PWMAX ; 
    10 PV0PWMAX-MAP3 PV0PWMAX-MAP3 ; 
    10 PV0PWNUM PV0PWNUM ; 
    10 PV0PW-CALC-TOLERANCE PV0PW-CALC-TOLERANCE ; 
    10 PV0PWTOP PV0PWTOP ; 
    10 PV0PWTOP-MAP3 PV0PWTOP-MAP3 ; 
    10 PV0PWBOT PV0PWBOT ; 
    10 PV0PWBOT-MAP3 PV0PWBOT-MAP3 ; 
    10 PV0PWCNT PV0PWCNT ; 
    10 PV0PWCNT-MAP3 PV0PWCNT-MAP3 ; 
    10 PV0PWCUR PV0PWCUR ; 
    10 PV0PWCUR-MAP3 PV0PWCUR-MAP3 ; 
    10 PV0PWSCP PV0PWSCP ; 
    10 PV0PWIMX PV0PWIMX ; 
    10 PV0PWIDX PV0PWIDX ; 
    10 PV0PWIX2 PV0PWIX2 ; 
    10 PV0PWIX3 PV0PWIX3 ; 
    10 PV0PWIX4 PV0PWIX4 ; 
    10 PV0PWIX5 PV0PWIX5 ; 
    10 PV0PW-FIELD-CT PV0PW-FIELD-CT ; 
    10 PV-IVC-ID PV-IVC-ID ; 
    10 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
    10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
    10 PV-PMT-VEND-NM PV-PMT-VEND-NM ; 
    10 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
    10 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
    10 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
    10 PV0PW-SELECT-LINE-COUNT PV0PW-SELECT-LINE-COUNT ; 
    10 PV0PW-TOTAL-FOB-AMOUNT PV0PW-TOTAL-FOB-AMOUNT ; 
    10 PV0PW-TOTAL-DUTY-AMOUNT PV0PW-TOTAL-DUTY-AMOUNT ; 
    10 PV0PW-TOTAL-FRGT-AMOUNT PV0PW-TOTAL-FRGT-AMOUNT ; 
    10 PV-IVC-AMT PV-IVC-AMT ; 
    10 PV-IVC-TOT-FRGT PV-IVC-TOT-FRGT ; 
    10 PV-IVC-DSCT-AMT PV-IVC-DSCT-AMT ; 
    10 PV-NISSHO-BANK-CHG PV-NISSHO-BANK-CHG ; 
    10 PV-NISSHO-FOB-AMT PV-NISSHO-FOB-AMT ; 
    10 PV-NISSHO-TOT-DTY PV-NISSHO-TOT-DTY ; 
    10 PV-NISSHO-BRKR-CHG PV-NISSHO-BRKR-CHG ; 
    10 PV-NISSHO-OTH-CHG1 PV-NISSHO-OTH-CHG1 ; 
    10 PV-NISSHO-OTH-CHG2 PV-NISSHO-OTH-CHG2 ; 
    10 PV-NISSHO-SUB-CHG1 PV-NISSHO-SUB-CHG1 ; 
    10 PV-NISSHO-SUB-CHG2 PV-NISSHO-SUB-CHG2 ; 
    10 PV-NISSHO-INT-CHG1 PV-NISSHO-INT-CHG1 ; 
    10 PV-NISSHO-INT-CHG2 PV-NISSHO-INT-CHG2 ; 
    10 PV-NISSHO-INT-CHG3 PV-NISSHO-INT-CHG3 ; 
    10 PV-NISSHO-COMM-AMT PV-NISSHO-COMM-AMT ; 
    10 PV0PW-PREV-CANCEL-FL PV0PW-PREV-CANCEL-FL ; 
    10 PV0PW-LC-TOTALS-BY-BANK PV0PW-LC-TOTALS-BY-BANK ; 
      15 PV-LN-ITM-QTY PV-LN-ITM-QTY ; 
      15 PV-LN-UNT-FOB-AMT PV-LN-UNT-FOB-AMT ; 
      15 PV-LN-UNT-COMM-AMT PV-LN-UNT-COMM-AMT ; 
      15 PV-NISSHO-LN-DTY PV-NISSHO-LN-DTY ; 
      15 PV0PW-SUM-FCTY-DSCT PV0PW-SUM-FCTY-DSCT ; 
      15 PV0PW-CURR-IBANK-CD PV0PW-CURR-IBANK-CD ; 
      15 XIB-IBANK-CD XIB-IBANK-CD [30] ; 
      15 PV-LC-ITM-QTY PV-LC-ITM-QTY [30] ; 
      15 PV-LC-UNT-FOB-AMT PV-LC-UNT-FOB-AMT [30] ; 
      15 PV-LC-UNT-COMM-AMT PV-LC-UNT-COMM-AMT [30] ; 
      15 PV-NISSHO-LC-DTY PV-NISSHO-LC-DTY [30] ; 
      15 PV0PW-SUM-BANK-DSCT PV0PW-SUM-BANK-DSCT [30] ; 
    10 PV0PW-LINE-IS-LC-FL PV0PW-LINE-IS-LC-FL ; 
    10 PV0PW-FOB-LC-FACTOR PV0PW-FOB-LC-FACTOR ; 
    10 PV0PW-COMM-LC-FACTOR PV0PW-COMM-LC-FACTOR ; 
    10 PV0PW-DUTY-LC-FACTOR PV0PW-DUTY-LC-FACTOR ; 
    10 PV0PW-QTY-LC-FACTOR PV0PW-QTY-LC-FACTOR ; 
    10 PV0PW-UPDATE-HEADER-FL PV0PW-UPDATE-HEADER-FL ; 
    10 PV0PW-FRGT-PMT-STAT PV0PW-FRGT-PMT-STAT ; 
    10 PV0PW-FOB-PMT-STAT PV0PW-FOB-PMT-STAT ; 
    10 PV0PW-DUTY-PMT-STAT PV0PW-DUTY-PMT-STAT ; 
    10 PV0PW-FORCE-PAY-FL PV0PW-FORCE-PAY-FL ; 
    10 PV0PW-FISCAL-MONTH PV0PW-FISCAL-MONTH ; 
      15 PV0PW-FISCAL-FILLER PV0PW-FISCAL-FILLER ; 
      15 PV0PW-FISCAL-CC PV0PW-FISCAL-CC ; 
      15 PV0PW-FISCAL-YYMM PV0PW-FISCAL-YYMM ; 
    10 PV0PW-FRGT-DBT-STAT PV0PW-FRGT-DBT-STAT ; 
    10 PV0PW-DUTY-DBT-STAT PV0PW-DUTY-DBT-STAT ; 
    10 PV0PW-BROK-DBT-STAT PV0PW-BROK-DBT-STAT ; 
    10 PV0PW-LCRED-DBT-STAT PV0PW-LCRED-DBT-STAT ; 
    10 PV-ERR-SEQ-NBR PV-ERR-SEQ-NBR ; 
end // end PV0PW02

//*** RECORD=PV0PW03 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0PW03 type basicRecord
  5 PV0PW-PV0PW05-GROUP PV0PW-PV0PW05-GROUP [300] ; 
    7 PV0PW-MAP1-LINE-GROUP1 PV0PW-MAP1-LINE-GROUP1 ; 
      10 PV-ERR-SEQ-NBR PV-ERR-SEQ-NBR ; 
      10 PV-ERR-LD-DT PV-ERR-LD-DT ; 
      10 PV-ERR-MSG PV-ERR-MSG ; 
      10 PV-ERR-ACT-DESC PV-ERR-ACT-DESC ; 
      10 PV-ERR-CURR-STAT-CD PV-ERR-CURR-STAT-CD ; 
      10 PV-ERR-OWN-GRP PV-ERR-OWN-GRP ; 
      10 USERID USERID ; 
      10 PV-ERR-PROC-IND PV-ERR-PROC-IND ; 
      10 PV-ERR-CSTMS-TXT PV-ERR-CSTMS-TXT ; 
      10 PV-ERR-MSG-ID PV-ERR-MSG-ID ; 
end // end PV0PW03

//*** RECORD=PV0PW04 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0BM003 - PAYMENT DETAILS SCREEN.        *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 10-05-99 GDECKE        Initial Construction                *
// ************************************************************
// ***********************
Record PV0PW04 type basicRecord
  5 PV0PW-PV0PW05-GROUP PV0PW-PV0PW05-GROUP [300] ; 
    7 PV0PW-MAP1-LINE-GROUP1 PV0PW-MAP1-LINE-GROUP1 ; 
      10 PV-ERR-SEQ-NBR PV-ERR-SEQ-NBR ; 
      10 PV-ERR-LD-DT PV-ERR-LD-DT ; 
      10 PV-ERR-MSG PV-ERR-MSG ; 
      10 PV-ERR-ACT-DESC PV-ERR-ACT-DESC ; 
      10 PV-ERR-CURR-STAT-CD PV-ERR-CURR-STAT-CD ; 
      10 PV-ERR-OWN-GRP PV-ERR-OWN-GRP ; 
      10 USERID USERID ; 
      10 PV-ERR-PROC-IND PV-ERR-PROC-IND ; 
      10 PV-ERR-CSTMS-TXT PV-ERR-CSTMS-TXT ; 
      10 PV-ERR-MSG-ID PV-ERR-MSG-ID ; 
end // end PV0PW04

// Fiscal period
DataItem MV0PW-FISCAL-MONTH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PV-ERR-CSTMS-TXT
DataItem PV-ERR-CSTMS-TXT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV-ERR-CURR-STAT-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV-ERR-LD-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV-ERR-MSG char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROCESS INDICATOR
DataItem PV-ERR-OWN-GRP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV ERRROR PROCESS INDICATOR
DataItem PV-ERR-PROC-IND char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PV-MSA-VEND-NM
DataItem PV-MSA-VEND-NM char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0PW-BROK-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated Tolerance
DataItem PV0PW-CALC-TOLERANCE decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMM PCT THAT IS BANK TYPE LC
DataItem PV0PW-COMM-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XIB-IBANK-CD OF CURRENT LN ITM
DataItem PV0PW-CURR-IBANK-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0PW-DUTY-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUTY PCT THAT IS BANK TYPE LC
DataItem PV0PW-DUTY-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status of the DUTY pmt record
DataItem PV0PW-DUTY-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COUNT NUMBER OF FIELDS ENTERED
DataItem PV0PW-FIELD-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fiscal cc
DataItem PV0PW-FISCAL-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Filler
DataItem PV0PW-FISCAL-FILLER num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fiscal period
DataItem PV0PW-FISCAL-MONTH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fiscal yymm
DataItem PV0PW-FISCAL-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB PCT THAT IS BANK TYPE LC
DataItem PV0PW-FOB-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status of the FOB pmt record
DataItem PV0PW-FOB-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FORCE PAYMENT ERROR FLAG
DataItem PV0PW-FORCE-PAY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0PW-FRGT-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status of the FREIGHT pmt recd
DataItem PV0PW-FRGT-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ACCUM TOTAL-CALC CANCEL FACTOR
DataItem PV0PW-LC-TOTALS-BY-BANK char(961)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0PW-LCRED-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LINE ITM IS BANK TYPE 'LC'-Y/N
DataItem PV0PW-LINE-IS-LC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP3 ROW GROUP ITEM
DataItem PV0PW-MAP1-LINE-GROUP1 char(144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TYPE 60 FORCE REC EXISTS - Y/N
DataItem PV0PW-PREV-CANCEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM-PV0PW01 WORK STORAG
DataItem PV0PW-PV0PW01-GROUP char(1301)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM-PV0PW01 WORK STORAG
DataItem PV0PW-PV0PW02-GROUP char(1258)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0BM003 DATA
DataItem PV0PW-PV0PW05-GROUP char(144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// QTY PCT THAT IS BANK TYPE LC
DataItem PV0PW-QTY-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PV0PW-SELECT-LINE-COUNT
DataItem PV0PW-SELECT-LINE-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUM OF ALL LC DSCT FOR A BANK
DataItem PV0PW-SUM-BANK-DSCT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUM OF LC DSCT FOR FACTRY IVC
DataItem PV0PW-SUM-FCTY-DSCT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL DUTY AMOUNT
DataItem PV0PW-TOTAL-DUTY-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FOB AMOUNT
DataItem PV0PW-TOTAL-FOB-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FREIGHT AMOUNT
DataItem PV0PW-TOTAL-FRGT-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Header needs to be updated:Y/N
DataItem PV0PW-UPDATE-HEADER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st line of screen
DataItem PV0PW1ST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bottom Line Pointerfor sumry
DataItem PV0PWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer for pmts
DataItem PV0PWBOT-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current line item
DataItem PV0PWCLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Scroll Counter for sumr
DataItem PV0PWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter for pmts
DataItem PV0PWCNT-MAP1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter for pmts
DataItem PV0PWCNT-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for sumry
DataItem PV0PWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for pmts
DataItem PV0PWCUR-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem PV0PWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index max
DataItem PV0PWIMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 list table
DataItem PV0PWIX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 3 pmt details
DataItem PV0PWIX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE SELECTION
DataItem PV0PWIX4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE UPDATE
DataItem PV0PWIX5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line item max
DataItem PV0PWLIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Item Screen
DataItem PV0PWLST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Active Screen
DataItem PV0PWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max PV0AW01 line items = 300
DataItem PV0PWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0PWMAX-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// modified(y/n)
DataItem PV0PWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric Work Area
DataItem PV0PWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Screen
DataItem PV0PWPRV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scratch Pad Written(Y/N)
DataItem PV0PWSCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for sumry
DataItem PV0PWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for pmts
DataItem PV0PWTOP-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pf2 update flag (y/n)
DataItem PV0PWUP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag (y/n)
DataItem PV0PWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag (y/n)
DataItem PV0PWUPF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf2 update flag (y/n)
DataItem PV0PWUPF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

