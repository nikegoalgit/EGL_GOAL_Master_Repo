package pv0i;
import corpcom3.XPPV001;
import corpcom3.XPPV440;
import corpcom3.XPPV960;
import corpcom3.XPPV970;
import corpcom3.XPPV980;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import corpcom7.XXXUSID1;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC2REC;
import pc.common.PC3PONBR;
import pc.common.PC3REC;
import pc.common.PC4ORTYP;
import pc.common.PCMOSQTY;
import pv.common.*;
import sy.common.SY1REC;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import xx.common.*;
import xx.common.KUCCOID;
import xx.common.XCTCD;
import xx.common.XQACD;
import xx.common.XWHCD;
import xx02.*;
import xx02.XDMCD;
import xx02.XDSCD;
import xx02.XFACD;
import xx02.XFAIND;
import xx02.XFATBL;
import xx04.*;
import xx04.XPGCD;
import xx06.*;
import xx06.XUMCD;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=PV0I ****
// ************************************************************
// *
// *   PV0I - Invoice Header and Line Item Inquiry
// *
// *   This application will be used to display on-line
// *   the invoice and its associated line items.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       03-27-91  HVARGA  Initial Construction
// *       07-17-96  JLoyer  Install BBasha mods to replace
// *                         pvovndsn with pvovndnm.
// *       03-01-00  JKUNDU  CHANGED IN XSPVS60 - Transfer
// *                         should go back to PV0B if PF3 IS
// *                         pressed in PV0D.
// *
// ************************************************************
// *********************
Program PV0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PV0IW01 PV0IW01; // record
  PV0IW02 PV0IW02; // record
  PV0IW03 PV0IW03; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFATBL {deleteAfterUse = yes}; // table
  use PV0IM.PV0IM100,  // forms
      PV0IM.PV0IM200, 
      PV0IM.PV0IM300, 
      PV0IM.PV0IM400
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0I000: PV0I000();
  end // end main
end // end PV0I

// PROCESS  Main Logic
Function PV0I000()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0I    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0I001(); /* Initialization Logic*/

  PV0IS01(); /* Check Who Invoked me*/

  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    if (PV0IW01.PV0IWMAP == "1")
      PV0I100(); /* Converse PV0IM100*/
      PV0I110(); /* Check PF Keys and Exits*/
      PV0I120(); /* Check what to do next*/
    else
      if (PV0IW01.PV0IWMAP == "2")
        PV0I200(); /* Converse PV0IM200*/
        PV0I210(); /* Check PF Keys and Exits*/
        PV0I220(); /* Check what to do next*/
      else
        if (PV0IW01.PV0IWMAP == "3")
          PV0I300(); /* Converse PV0IM300*/
          PV0I210(); /* Check PF Keys and Exits*/
          PV0I220(); /* Check what to do next*/
        else
          PV0I400(); /* Converse PV0IM400*/
          PV0I410(); /* Check PF Keys and Exits*/
          PV0I420(); /* Check what to do next*/
        end
      end
    end
  end

  exit program;

  return; /* Last Statement*/


   /* ***  End of PV0I000  ****/
end // end PV0I000

// INIT     Routine
Function PV0I001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0IW01 empty;
  set PV0IW02 empty;
  set PV0IW03 empty;
  set PV0IM100 initial;

  set FY1REC empty;
  set PC2REC empty;
  set SY1REC empty;
  set TA2REC empty;

  XSPVS01(); /* Initialize PV Common Routine Fields*/

  TA1REC.TA1PGMNM = "PV0I"; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0IM100";

    /* Get System Date and Time*/
  PV0IS09();

    /* Set Maximum Scroll Lines*/
  PV0IW01.PV0IWMAX = 7;
  PV0IW01.PV0IWMX3 = 15;

   /* Set Active Screen*/
  PV0IW01.PV0IWMAP = "1";
  PV0IW01.PV0IWPRV = "1";
  PV0IW01.PV0IWLST = "2";

  return; /* Last Statement*/

   /* ***  End of PV0I001  ****/
end // end PV0I001

// CONVERSE IVC HDR Screen
Function PV0I100()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUERROR[PVUERVND] == "Y")
    set PV0IM100.PVOVENDR cursor, bold;
    PV0IM100.PVOVNDNM = " ";
  else
    if (PVUREC.PVUERROR[PVUERIVC] == "Y")
      set PV0IM100.PVAIVCID cursor, bold;
    end
  end

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0IM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0IM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0IM100.TA2TIMED = VGVar.currentFormattedTime;

  converse PV0IM100 ;

  set PV0IM100.PVOVENDR initialAttributes; /* Reset Attributes*/
  set PV0IM100.PVOVENDG initialAttributes;
  set PV0IM100.PVAIVCID initialAttributes;
  set PV0IM100.PVAIVCID cursor;

  return; /* Last Statement*/


   /* ***  End of PV0I100  ****/

  return; /* Last Statement*/
end // end PV0I100

// CHECK    PF Keys and Exits
Function PV0I110()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0) /* Check for Security Error*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf9
     || converseVar.eventKey is pf21)
       /* next sentence*/
    else
       /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I110  ****/
end // end PV0I110

// CHECK    What to do next
Function PV0I120()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0IS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0I150(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I120  ****/
end // end PV0I120

// CHECK    if allowed to continu
Function PV0I150()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0IS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf5
       || converseVar.eventKey is pf9
       || converseVar.eventKey is pf21)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter)
      PV0IS60(); /* Validate Data Keyed in*/
    else
      if (converseVar.eventKey is pf5)
         /* CODE Inquiry*/
      else
        if (converseVar.eventKey is pf9)
          if (PVUREC.PVUERROR[PVUERIVC] == "Y")
             /* Enter Invoice Key Fields and Press Enter.*/
            PVUREC.PVUERNBR = 3;
            return;
          else
            PV0IW01.PV0IWMAP = PV0IW01.PV0IWLST;
          end
        else
          if (converseVar.eventKey is pf21)
            if (PVUREC.PVUERROR[PVUERIVC] == "Y")
               /* Enter Invoice Key Fields and Press Enter.*/
              PVUREC.PVUERNBR = 3;
              return;
            else
              PV0IW01.PV0IWPRV = PV0IW01.PV0IWMAP;
              PV0IW01.PV0IWMAP = "4";
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I150  ****/
end // end PV0I150

// CONVERSE IVC Line Item  Screen
Function PV0I200()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (COMMAREA.CASECRC == 0)
     /* next sentence*/
  else
    PV0IM200.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0IM200.TA2TIMED = VGVar.currentFormattedTime;

  converse PV0IM200 ;

  set PV0IM200.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0I200  ****/
end // end PV0I200

// CHECK    PF Keys and Exits
Function PV0I210()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XPPV001(); /* Check PV PF Keys*/

  if (COMMAREA.CASECRC == 0) /* Check Security Error*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf9
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf11
     || converseVar.eventKey is pf21)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
         /* BACKWARD Performed. Please proceed.*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
           /* FORWARD Performed. Please proceed.*/
          PVUREC.PVUERNBR = 4;
        else
           /* Invalid PF Key*/
          PVUREC.PVUERNBR = 1;
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I210  ****/
end // end PV0I210

// CHECK    What to do next
Function PV0I220()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0IS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0I250(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I220  ****/
end // end PV0I220

// CHECK    if allowed to continu
Function PV0I250()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0IS03(); /* Send the user back*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf9
       || converseVar.eventKey is pf10
       || converseVar.eventKey is pf11
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf21
       || converseVar.eventKey is pf24)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
        PV0I270(); /* Go Back One Screen*/
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
          PV0I280(); /* Go Forward One Screen*/
        else
          if (converseVar.eventKey is pf9)
            PV0IW01.PV0IWLST = PV0IW01.PV0IWMAP;
            PV0IW01.PV0IWMAP = "1";
          else
            if (converseVar.eventKey is pf10)
              PV0IW01.PV0IWMAP = "2";
            else
              if (converseVar.eventKey is pf11)
                PV0IW01.PV0IWMAP = "3";
              else
                if (converseVar.eventKey is pf21)
                  PV0IW01.PV0IWPRV = PV0IW01.PV0IWMAP;
                  PV0IW01.PV0IWMAP = "4";
                end
              end
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I250  ****/
end // end PV0I250

// BACK     One Page Routine
Function PV0I270()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0IW02.PV0IWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0IW02.PV0IWTOP = PV0IW02.PV0IWCUR - PV0IW01.PV0IWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0IW02.PV0IWTOP = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0IW02.PV0IWTOP = PV0IW02.PV0IWCUR - PV0IW01.PV0IWMAX;
      end
    end
    if (PV0IW02.PV0IWTOP <= 0)
      PV0IW02.PV0IWTOP = 1;
    end
    PV0IS92(); /* Build Scroll Lines*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0I270  ****/
end // end PV0I270

// FORWARD  One Page Routine
Function PV0I280()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf20)
    PV0IW02.PV0IWTOP = PV0IW02.PV0IWCUR + PV0IW01.PV0IWMAX / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0IW02.PV0IWTOP = PV0IW02.PV0IWBOT - PV0IW01.PV0IWMAX;
    end
  end

  if (PV0IW02.PV0IWTOP >= PV0IW02.PV0IWBOT)
    PV0IW02.PV0IWTOP = PV0IW02.PV0IWBOT - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end

  if (PV0IW02.PV0IWTOP <= 0)
    PV0IW02.PV0IWTOP = 1;
  end

  PV0IS92(); /* Build Scroll Lines*/

  return; /* Last Statement*/


   /* ***  End of PV0I280  ****/
end // end PV0I280

// CONVERSE IVC Line Item  Part 2
Function PV0I300()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Line Item Screen                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0IM300.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0IM300.TA2TIMED = VGVar.currentFormattedTime;

  converse PV0IM300 ;

  set PV0IM300.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0I300  ****/
end // end PV0I300

// CONVERSE IVC Item FORCE Errors
Function PV0I400()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    Converse Invoice Line Item FORCE Errors Screen      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0IM400.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0IM400.TA2TIMED = VGVar.currentFormattedTime;

  converse PV0IM400 ;

  set PV0IM400.CATOAP cursor;

  return; /* Last Statement*/


   /* ***  End of PV0I300  ****/
end // end PV0I400

// CHECK    PF Keys and Exits
Function PV0I410()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf9
     || converseVar.eventKey is pf21)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
         /* BACKWARD Performed. Please proceed.*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
           /* FORWARD Performed. Please proceed.*/
          PVUREC.PVUERNBR = 4;
        else
           /* Invalid PF Key*/
          PVUREC.PVUERNBR = 1;
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I410  ****/
end // end PV0I410

// CHECK    What to do next
Function PV0I420()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0IS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0I450(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I420  ****/
end // end PV0I420

// DECLARE  ITEM Error Cursor
Function PV0I440()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Declare Item Error Cursor                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  move PVAREC to PVLREC withV60Compat;
  PVLREC.PVBLNINB = -1;

  PVYREC.PVYFNC = "S1";
  PVYREC.PVYRESN1 = "1";
  PVYREC.PVYRESN2 = "2";
  PVYREC.PVYRESN3 = "3";
  PVYREC.PVYRESN4 = "4";
  XPPV440(); /* IOMOD VFORCE01*/

  return; /* Last Statement*/


   /* ***  End of PV0I440  ****/
end // end PV0I440

// FETCH    Item Error Cursor
Function PV0I441()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Fetch Invoice Item Cursor                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "N1";
  XPPV440(); /* IOMOD VFORCE01*/

  return; /* Last Statement*/


   /* ***  End of PV0I441  ****/
end // end PV0I441

// CLOSE    IVC ITEM Cursor
Function PV0I442()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Close Item Error Cursor                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "C1";
  XPPV440(); /* IOMOD VFORCE01*/

  return; /* Last Statement*/


   /* ***  End of PV0I442  ****/
end // end PV0I442

// CHECK    if allowed to continu
Function PV0I450()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0IS03(); /* Send the user back*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf9
       || converseVar.eventKey is pf21
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf24)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
        PV0I470(); /* Go Back One Screen*/
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
          PV0I480(); /* Go Forward One Screen*/
        else
          if (converseVar.eventKey is pf9)
            PV0IW01.PV0IWMAP = "1";
          else
            if (converseVar.eventKey is pf10)
              PV0IW01.PV0IWMAP = "2";
            else
              if (converseVar.eventKey is pf11)
                PV0IW01.PV0IWMAP = "3";
              else
                if (converseVar.eventKey is pf21)
                  PV0IW01.PV0IWMAP = PV0IW01.PV0IWPRV;
                end
              end
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I450  ****/
end // end PV0I450

// BACK     One Page Routine
Function PV0I470()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0IW03.PV0IWCR3 == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0IW03.PV0IWTP3 = PV0IW03.PV0IWCR3 - PV0IW01.PV0IWMX3 / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0IW03.PV0IWTP3 = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0IW03.PV0IWTP3 = PV0IW03.PV0IWCR3 - PV0IW01.PV0IWMX3;
      end
    end
    if (PV0IW03.PV0IWTP3 <= 0)
      PV0IW03.PV0IWTP3 = 1;
    end
    PV0IS95(); /* Build Scroll Lines*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0I470  ****/
end // end PV0I470

// FORWARD  One Page Routine
Function PV0I480()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the bt3TOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf20)
    PV0IW03.PV0IWTP3 = PV0IW03.PV0IWCR3 + PV0IW01.PV0IWMX3 / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0IW03.PV0IWTP3 = PV0IW03.PV0IWBT3 - PV0IW01.PV0IWMX3;
    end
  end

  if (PV0IW03.PV0IWTP3 >= PV0IW03.PV0IWBT3)
    PV0IW03.PV0IWTP3 = PV0IW03.PV0IWBT3 - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end

  if (PV0IW03.PV0IWTP3 <= 0)
    PV0IW03.PV0IWTP3 = 1;
  end

  PV0IS95(); /* Build Scroll Lines*/

  return; /* Last Statement*/


   /* ***  End of PV0I480  ****/
end // end PV0I480

// GET      Factory Country
Function PV0I910()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Factory Country                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVBREC.XGPCD == FY1REC.XGPCD
   && PVBREC.FY1FCTYC == FY1REC.FY1FCTYC)
     /* next sentece*/
  else
    FY1REC.XGPCD = PVBREC.XGPCD;
    FY1REC.FY1FCTYC = PVBREC.FY1FCTYC;

    set SQLCA empty;
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set FY1REC empty;
        FY1REC.XGPCD = PVBREC.XGPCD;
        FY1REC.FY1FCTYC = PVBREC.FY1FCTYC;
        FY1REC.XCTCD = "****";
      else
        TA1REC.TA1LOC = "PV0I910";
        TA1REC.TA1DBASE = "DFCTY";
        TA1REC.TA1TBLVU = "VFCTYR01";
        TA1REC.TA1TBLKE = PVBREC.FY1FCTYC;
        XSPVS52();
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I910  ****/
end // end PV0I910

// GET PO HEADER
Function PV0I915()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get PO Hdr                                       ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PC3REC.XGPCD = PVBREC.XGPCD;
  PC3REC.PC3PONBR = PVBREC.PC3PONBR;

  set SQLCA empty;
  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set PC3REC empty;
      PC3REC.XGPCD = PVBREC.XGPCD;
      PC3REC.PC3PONBR = PVBREC.PC3PONBR;
    else
      TA1REC.TA1LOC = "PV0I915";
      TA1REC.TA1DBASE = "DPRODC";
      TA1REC.TA1TBLVU = "VPOHDR01";
     /* MOVE PVBREC.PC3PONBR TO TA1REC.TA1TBLKE;*/
      XSPVS52();
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I91520  ****/
end // end PV0I915

// GET      STYLE Description
Function PV0I920()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Style Description                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVBREC.XGPCD == SY1REC.XGPCD
   && PVBREC.SY1STNBR == SY1REC.SY1STNBR)
     /* next sentence*/
  else
    SY1REC.XGPCD = PVBREC.XGPCD;
    SY1REC.SY1STNBR = PVBREC.SY1STNBR;

    set SQLCA empty;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set SY1REC empty;
        SY1REC.XGPCD = PVBREC.XGPCD;
        SY1REC.SY1STNBR = PVBREC.SY1STNBR;
        SY1REC.SY1SSTNM = "*NO DSCRPTN*";
      else
        TA1REC.TA1LOC = "PV0I920";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VSTYLE01";
        TA1REC.TA1TBLKE = PVBREC.SY1STNBR;
        XSPVS52();
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I920  ****/
end // end PV0I920

// GET      Customer Number
Function PV0I940()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get Customer Number                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVBREC.XGPCD == PC2REC.XGPCD
   && PVBREC.PC2CUXID == PC2REC.PC2CUXID)
     /* next sentence*/
  else
    PC2REC.XGPCD = PVBREC.XGPCD;
    PC2REC.PC2CUXID = PVBREC.PC2CUXID;

    set SQLCA empty;
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set PC2REC empty;
        PC2REC.XGPCD = PVBREC.XGPCD;
        PC2REC.PC2CUXID = PVBREC.PC2CUXID;
      else
        TA1REC.TA1LOC = "PV0I940";
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPRDCU01";
        TA1REC.TA1TBLKE = PVBREC.PC2CUXID;
        XSPVS52();
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0I920  ****/
end // end PV0I940

// READ     IVC HEADER IO5660
Function PV0I960()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Header                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVAREC.PVOVENDR = PV0IM100.PVOVENDR;
  PVAREC.PVOVENDG = PV0IM100.PVOVENDG;
  PVAREC.PVAIVCID = PV0IM100.PVAIVCID;

  PVYREC.PVYFNC = "S ";
  XPPV960(); /* IOMOD VPVHDR01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PV0IS90(); /* Store Line Items in Working Storage*/
    PV0IS92(); /* Build Line Item Scroll Lines*/
    PV0IS94(); /* Store Item Errors in Working Storage*/
    PV0IS95(); /* Build Item Error Scroll Lines*/
    move PVAREC to PV0IM200 withV60Compat;
    move PVAREC to PV0IM300 withV60Compat;
    move PVAREC to PV0IM400 withV60Compat;
    move PVOREC to PV0IM100 withV60Compat;
    move PC2REC to PV0IM100 withV60Compat;
    move PVAREC to PV0IM100 withV60Compat;
  else
    set PV0IM100 empty;
    PV0IM100.PVOVENDR = PVAREC.PVOVENDR;
    PV0IM100.PVOVENDG = PVAREC.PVOVENDG;
    PV0IM100.PVAIVCID = PVAREC.PVAIVCID;
    PV0IM100.PVOVNDNM = PVOREC.PVOVNDNM;
  end

  return; /* Last Statement*/


   /* ***  End of PV0I960  ****/
end // end PV0I960

// DECLARE  IVC ITEM Cursor
Function PV0I970()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Declare Invoice Item Cursor                      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  move PVAREC to PVBREC withV60Compat;

  PVYREC.PVYFNC = "S1";
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0I970  ****/
end // end PV0I970

// FETCH    IVC ITEM Cursor
Function PV0I971()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Fetch Invoice Item Cursor                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "N1";
  XPPV970(); /* IOMOD VPVITM01*/
  PV0IW01.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;

  if (SQLCA.VAGen_SQLCODE == 0)
    PV0I910(); /* Get Factory Country*/
    PV0I915(); /* Get PO Hdr for Order Type*/
    PV0I920(); /* Get Style Description*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0I971  ****/
end // end PV0I971

// CLOSE    IVC ITEM Cursor
Function PV0I972()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Close Invoice Item Cursor                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "C1";
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0I972  ****/
end // end PV0I972

// READ     VENDOR NAME IO5680
Function PV0I980()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVOREC.PVOVENDR = PV0IM100.PVOVENDR;
  PVOREC.PVOVENDG = PV0IM100.PVOVENDG;

  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/

  move PVOREC to PV0IM100 withV60Compat;
  move PVOREC to PV0IM200 withV60Compat;
  move PVOREC to PV0IM300 withV60Compat;
  move PVOREC to PV0IM400 withV60Compat;

  return; /* Last Statement*/


   /* ***  End of PV0I980  ****/
end // end PV0I980

// CHECK    Passed Information
Function PV0IS01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if Caller passed any Information          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSENTRY();
  XSSEGTR();

  if (PVUREC.PVURCRD1 == "PVAREC "
   || PVUREC.PVURCRD1 == "PVCREC "
   || PVUREC.PVURCRD1 == "PVDREC ")
    move PVUREC to PVAREC withV60Compat;
    PV0IM100.PVOVENDR = PVAREC.PVOVENDR;
    PV0IM100.PVOVENDG = PVAREC.PVOVENDG;
    PV0IM100.PVAIVCID = PVAREC.PVAIVCID;
    set PV0IM100.PVAIVCID cursor;
    PV0I980(); /* Get Vendor Name*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PV0I960(); /* Read Invoice Header*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0IS01  ****/
end // end PV0IS01

// GO BACK  to Calling Applicatio
Function PV0IS03()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS60(); /* PV Common Exit*/
  PV0IS50(); /* Exit Routine*/

  return; /* Last Statement*/


   /* ***  End of PV0IS03  ****/
end // end PV0IS03

// GET      System Date and Time
Function PV0IS09()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0IM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0IM100.TA2TIMED = TA2REC.TA2TIMED;
  PV0IM200.TA2GRGB = TA2REC.TA2GRGB;
  PV0IM200.TA2TIMED = TA2REC.TA2TIMED;
  PV0IM300.TA2GRGB = TA2REC.TA2GRGB;
  PV0IM300.TA2TIMED = TA2REC.TA2TIMED;
  PV0IM400.TA2GRGB = TA2REC.TA2GRGB;
  PV0IM400.TA2TIMED = TA2REC.TA2TIMED;

  return; /* Last Statement*/


   /* ***  End of PV0IS09  ****/
end // end PV0IS09

// CHECK    FASTPATH
Function PV0IS30()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0IW01.PV0IWMAP == "1")
      if (PV0IM100.CATOAP == " ")
         /* next sentence*/
      else
        if (PV0IM100.PVOVENDR == " "
         && PV0IM100.PVOVENDG == " "
         && PV0IM100.PVAIVCID == " ")
          COMMAREA.CATOAP = PV0IM100.CATOAP;
          COMMAREA.CAITEM = PV0IM100.CAITEM;
          PV0IS50(); /* Exit Routine*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
           /* Cannot FASTPATH with data keyed in*/
          PVUREC.PVUERNBR = 63;
        end
      end
    else
      if (PV0IW01.PV0IWMAP == "2")
        if (PV0IM200.CATOAP == " ")
           /* next sentence*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
          COMMAREA.CATOAP = PV0IM200.CATOAP;
          COMMAREA.CAITEM = PV0IM200.CAITEM;
          PV0IS50(); /* Exit Routine*/
        end
      else
        if (PV0IW01.PV0IWMAP == "3")
          if (PV0IM300.CATOAP == " ")
             /* next sentence*/
          else
            PVUREC.PVUERROR[PVUERGEN] = "Y";
            COMMAREA.CATOAP = PV0IM300.CATOAP;
            COMMAREA.CAITEM = PV0IM300.CAITEM;
            PV0IS50(); /* Exit Routine*/
          end
        else
          if (PV0IW01.PV0IWMAP == "4")
            if (PV0IM400.CATOAP == " ")
               /* next sentence*/
            else
              PVUREC.PVUERROR[PVUERGEN] = "Y";
              COMMAREA.CATOAP = PV0IM400.CATOAP;
              COMMAREA.CAITEM = PV0IM400.CAITEM;
              PV0IS50(); /* Exit Routine*/
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0IS30  ****/
end // end PV0IS30

// EXIT     Routine (XSEXIT)
Function PV0IS50()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSEXIT();

  if (PV0IW01.PV0IWMAP == "1")
    set PV0IM100.CATOAP cursor;
    PV0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
  else
    if (PV0IW01.PV0IWMAP == "2")
      set PV0IM200.CATOAP cursor;
      PV0IM200.VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      set PV0IM300.CATOAP cursor;
      PV0IM300.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0ISXT  ****/
end // end PV0IS50

// VALIDATE Data Keyed In (ENTER)
Function PV0IS60()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0IM100.PVOVENDR == PVOREC.PVOVENDR
   && PV0IM100.PVOVENDG == PVOREC.PVOVENDG
   && PV0IM100.PVOVENDR not modified
   && PV0IM100.PVOVENDG not modified)
     /* next sentence*/
  else
    PV0I980(); /* Get Vendor Name*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PVAREC.PVAIVCID = " "; /* Force Re-read of Invoice*/
    else
      return;
    end
  end

  if (PVAREC.PVAIVCID == " ")
    PVUREC.PVUERROR[PVUERIVC] = "Y";
  end

  if (PV0IM100.PVAIVCID == PVAREC.PVAIVCID
   && PV0IM100.PVAIVCID not modified
   && PVUREC.PVUERROR[PVUERIVC] == " ")
     /* next sentence*/
  else
    PV0I960(); /* Read Invoice Header*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0IS60  ****/
end // end PV0IS60

// BUILD    Line Items Screen WS
Function PV0IS90()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Screen Working Storage                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0IW02 empty;
  PV0IW02.PV0IWTOP = 1;
  PV0IW02.PV0IWBOT = 1;
  PV0I970(); /* Declare Invoice Item Cursor*/
  PV0I971(); /* Fetch first row*/
  while (PV0IW01.VAGen_SQLCODE == 0)
    PV0IW02.PVBLNINB[PV0IWBOT] = PVBREC.PVBLNINB;
    PV0IW02.PC3PONBR[PV0IWBOT] = PVBREC.PC3PONBR;
    PV0IW02.FY1FCTYC[PV0IWBOT] = PVBREC.FY1FCTYC;
    PV0IW02.SY1STNBR[PV0IWBOT] = PVBREC.SY1STNBR;
    PV0IW02.SY2CLRID[PV0IWBOT] = PVBREC.SY2CLRID;
    PV0IW02.XDMCD[PV0IWBOT] = PVBREC.XDMCD;
    PV0IW02.XQACD[PV0IWBOT] = PVBREC.XQACD;
    PV0IW02.PC2INSEG[PV0IWBOT] = PVBREC.PC2INSEG;
    PV0IW02.XPGCD[PV0IWBOT] = PVBREC.XPGCD;
    PV0IW02.XUMCD[PV0IWBOT] = PVBREC.XUMCD;
    PV0IW02.PVBCONTN[PV0IWBOT] = PVBREC.PVBCONTN;
    PV0IW02.PVBBSZNK[PV0IWBOT] = PVBREC.PVBBSZNK;
    PV0IW02.PVBESZNK[PV0IWBOT] = PVBREC.PVBESZNK;
    PV0IW02.PVBBSZDS[PV0IWBOT] = PVBREC.PVBBSZDS;
    PV0IW02.PVBESZDS[PV0IWBOT] = PVBREC.PVBESZDS;
    PV0IW02.PVBLNQTY[PV0IWBOT] = PVBREC.PVBLNQTY;
    PV0IW02.PCMOSQTY[PV0IWBOT] = PVBREC.PCMOSQTY;
    PV0IW02.PVBLNFOB[PV0IWBOT] = PVBREC.PVBLNFOB;
    PV0IW02.PVBLNCOM[PV0IWBOT] = PVBREC.PVBLNCOM;
    PV0IW02.PVBLNDTY[PV0IWBOT] = PVBREC.PVBLNDTY;
    PV0IW02.PVBLNAMT[PV0IWBOT] = PVBREC.PVBLNAMT;
    PV0IW02.XDSCD[PV0IWBOT] = PVBREC.XDSCD;
    PV0IW02.XWHCD[PV0IWBOT] = PVBREC.XWHCD;
    PV0IW02.SY1SSTNM[PV0IWBOT] = SY1REC.SY1SSTNM;
    PV0IW02.XCTCD[PV0IWBOT] = FY1REC.XCTCD;
    PV0IW02.PC2CUXID[PV0IWBOT] = PVBREC.PC2CUXID;
    PV0I940(); /* Get Customer Number*/
    PV0IW02.KUCCOID[PV0IWBOT] = PC2REC.KUCCOID;
    PV0IW02.PC4ORTYP[PV0IWBOT] = PC3REC.PC4ORTYP;
    PV0IW02.PV0IWBOT = PV0IW02.PV0IWBOT + 1;
    PV0I971(); /* Fetch next  row*/
  end

  PV0I972(); /* Close Invoice Item Cursor*/

  return; /* Last Statement*/


   /* ***  End of PV0IS90  ****/
end // end PV0IS90

// BUILD    Item Scroll Lines
Function PV0IS92()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Line Item Scroll Lines                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0IW02.PV0IWCUR = PV0IW02.PV0IWTOP;
  PV0IW02.PV0IWCNT = 0;
  while (PV0IW02.PV0IWCNT < PV0IW01.PV0IWMAX)
    PV0IW02.PV0IWCNT = PV0IW02.PV0IWCNT + 1;
    if (PV0IW02.PV0IWTOP == PV0IW02.PV0IWBOT)
      PV0IM200.PVBLNINB[PV0IWCNT] = 0;
      PV0IM300.PVBLNINB[PV0IWCNT] = 0;
      PV0IM200.PC3PONBR[PV0IWCNT] = 0;
      PV0IM200.SY1STNBR[PV0IWCNT] = " ";
      PV0IM300.SY1STNBR[PV0IWCNT] = " ";
      PV0IM200.SY2CLRID[PV0IWCNT] = " ";
      PV0IM300.SY2CLRID[PV0IWCNT] = " ";
      PV0IM200.XDMCD[PV0IWCNT] = " ";
      PV0IM300.XDMCD[PV0IWCNT] = " ";
      PV0IM200.XQACD[PV0IWCNT] = " ";
      PV0IM300.XQACD[PV0IWCNT] = " ";
      PV0IM200.PC2INSEG[PV0IWCNT] = " ";
      PV0IM300.PC2INSEG[PV0IWCNT] = " ";
      PV0IM200.XPGCD[PV0IWCNT] = " ";
      PV0IM300.XPGCD[PV0IWCNT] = " ";
      PV0IM200.XUMCD[PV0IWCNT] = " ";
      PV0IM300.XUMCD[PV0IWCNT] = " ";
      PV0IM200.PC4ORTYP[PV0IWCNT] = " ";
      PV0IM300.PC4ORTYP[PV0IWCNT] = " ";
      PV0IM200.PVBBSZNK[PV0IWCNT] = 0;
      PV0IM200.PVBESZNK[PV0IWCNT] = 0;
      PV0IM200.PVBLNQTY[PV0IWCNT] = 0;
      PV0IM200.PCMOSQTY[PV0IWCNT] = 0;
      PV0IM200.PVBLNFOB[PV0IWCNT] = 0;
      PV0IM200.PVBLNCOM[PV0IWCNT] = 0;
      PV0IM200.PVBLNAMT[PV0IWCNT] = 0;
      PV0IM200.PVBLNDTY[PV0IWCNT] = 0;
      PV0IM200.DASH[PV0IWCNT] = " ";
      PV0IM200.SY1SSTNM[PV0IWCNT] = " ";
      PV0IM300.SY1SSTNM[PV0IWCNT] = " ";
      PV0IM300.FY1FCTYC[PV0IWCNT] = " ";
      PV0IM300.PVBCONTN[PV0IWCNT] = " ";
      PV0IM300.PVBBSZDS[PV0IWCNT] = " ";
      PV0IM300.DASH[PV0IWCNT] = " ";
      PV0IM300.PVBESZDS[PV0IWCNT] = " ";
      PV0IM300.XCTCD[PV0IWCNT] = " ";
      PV0IM300.XDSCD[PV0IWCNT] = " ";
      PV0IM300.XWHCD[PV0IWCNT] = " ";
      PV0IM300.PC2CUXID[PV0IWCNT] = " ";
      PV0IM300.KUCCOID[PV0IWCNT] = 0;
    else
      PV0IM200.PVBLNINB[PV0IWCNT] = PV0IW02.PVBLNINB[PV0IWTOP];
      PV0IM300.PVBLNINB[PV0IWCNT] = PV0IW02.PVBLNINB[PV0IWTOP];
      PV0IM200.PC3PONBR[PV0IWCNT] = PV0IW02.PC3PONBR[PV0IWTOP];
      PV0IM200.SY1STNBR[PV0IWCNT] = PV0IW02.SY1STNBR[PV0IWTOP];
      PV0IM300.SY1STNBR[PV0IWCNT] = PV0IW02.SY1STNBR[PV0IWTOP];
      PV0IM200.SY2CLRID[PV0IWCNT] = PV0IW02.SY2CLRID[PV0IWTOP];
      PV0IM300.SY2CLRID[PV0IWCNT] = PV0IW02.SY2CLRID[PV0IWTOP];
      PV0IM200.XDMCD[PV0IWCNT] = PV0IW02.XDMCD[PV0IWTOP];
      PV0IM300.XDMCD[PV0IWCNT] = PV0IW02.XDMCD[PV0IWTOP];
      PV0IM200.XQACD[PV0IWCNT] = PV0IW02.XQACD[PV0IWTOP];
      PV0IM300.XQACD[PV0IWCNT] = PV0IW02.XQACD[PV0IWTOP];
      PV0IM200.PC2INSEG[PV0IWCNT] = PV0IW02.PC2INSEG[PV0IWTOP];
      PV0IM300.PC2INSEG[PV0IWCNT] = PV0IW02.PC2INSEG[PV0IWTOP];
      PV0IM200.XPGCD[PV0IWCNT] = PV0IW02.XPGCD[PV0IWTOP];
      PV0IM300.XPGCD[PV0IWCNT] = PV0IW02.XPGCD[PV0IWTOP];
      PV0IM200.XUMCD[PV0IWCNT] = PV0IW02.XUMCD[PV0IWTOP];
      PV0IM300.XUMCD[PV0IWCNT] = PV0IW02.XUMCD[PV0IWTOP];
      PV0IM200.PC4ORTYP[PV0IWCNT] = PV0IW02.PC4ORTYP[PV0IWTOP];
      PV0IM300.PC4ORTYP[PV0IWCNT] = PV0IW02.PC4ORTYP[PV0IWTOP];
      PV0IM200.PVBBSZNK[PV0IWCNT] = PV0IW02.PVBBSZNK[PV0IWTOP];
      PV0IM200.PVBESZNK[PV0IWCNT] = PV0IW02.PVBESZNK[PV0IWTOP];
      PV0IM200.PVBLNQTY[PV0IWCNT] = PV0IW02.PVBLNQTY[PV0IWTOP];
      PV0IM200.PCMOSQTY[PV0IWCNT] = PV0IW02.PCMOSQTY[PV0IWTOP];
      PV0IM200.PVBLNFOB[PV0IWCNT] = PV0IW02.PVBLNFOB[PV0IWTOP];
      PV0IM200.PVBLNCOM[PV0IWCNT] = PV0IW02.PVBLNCOM[PV0IWTOP];
      PV0IM200.PVBLNAMT[PV0IWCNT] = PV0IW02.PVBLNAMT[PV0IWTOP];
      PV0IM200.PVBLNDTY[PV0IWCNT] = PV0IW02.PVBLNDTY[PV0IWTOP];
      PV0IM200.DASH[PV0IWCNT] = "-";
      PV0IM300.FY1FCTYC[PV0IWCNT] = PV0IW02.FY1FCTYC[PV0IWTOP];
      PV0IM300.XCTCD[PV0IWCNT] = PV0IW02.XCTCD[PV0IWTOP];
      PV0IM300.PVBCONTN[PV0IWCNT] = PV0IW02.PVBCONTN[PV0IWTOP];
      PV0IM300.PVBBSZDS[PV0IWCNT] = PV0IW02.PVBBSZDS[PV0IWTOP];
      PV0IM300.DASH[PV0IWCNT] = "-";
      PV0IM300.PVBESZDS[PV0IWCNT] = PV0IW02.PVBESZDS[PV0IWTOP];
      PV0IM200.SY1SSTNM[PV0IWCNT] = PV0IW02.SY1SSTNM[PV0IWTOP];
      PV0IM300.SY1SSTNM[PV0IWCNT] = PV0IW02.SY1SSTNM[PV0IWTOP];
      PV0IM300.XWHCD[PV0IWCNT] = PV0IW02.XWHCD[PV0IWTOP];
      PV0IM300.PC2CUXID[PV0IWCNT] = PV0IW02.PC2CUXID[PV0IWTOP];
      PV0IM300.KUCCOID[PV0IWCNT] = PV0IW02.KUCCOID[PV0IWTOP];
      if (PV0IW02.XDSCD[PV0IWTOP] == "1")
        PV0IM300.XDSCD[PV0IWCNT] = "Y";
      else
        PV0IM300.XDSCD[PV0IWCNT] = "N";
      end
      PV0IW02.PV0IWTOP = PV0IW02.PV0IWTOP + 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0IS92  ****/
end // end PV0IS92

// BUILD    Item Errors Screen WS
Function PV0IS94()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Screen Working Storage                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0IW03 empty;
  PV0IW03.PV0IWTP3 = 1;
  PV0IW03.PV0IWBT3 = 1;
  PV0I440(); /* Declare Item Error Cursor*/
  PV0I441(); /* Fetch first row*/
  while (SQLCA.VAGen_SQLCODE == 0)
    PV0IW03.PVBLNINB[PV0IWBT3] = PVLREC.PVBLNINB;
    PV0IW03.XFACD[PV0IWBT3] = PVLREC.XFACD;
    PV0IW03.XFAIND[PV0IWBT3] = PVLREC.XFAIND;
    PV0IW03.PVLFRAMT[PV0IWBT3] = PVLREC.PVLFRAMT;
    PV0IW03.XXXUSID1[PV0IWBT3] = PVLREC.XXXUSID1;
    PV0IW03.PV0IWBT3 = PV0IW03.PV0IWBT3 + 1;
    PV0I441(); /* Fetch next  row*/
  end

  PV0I442(); /* Close Item Error Cursor*/

  return; /* Last Statement*/


   /* ***  End of PV0IS94  ****/
end // end PV0IS94

// BUILD    Error Scroll Lines
Function PV0IS95()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Item Error Scroll Lines                   ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0IW03.PV0IWCR3 = PV0IW03.PV0IWTP3;
  PV0IW03.PV0IWCN3 = 0;
  while (PV0IW03.PV0IWCN3 < PV0IW01.PV0IWMX3)
    PV0IW03.PV0IWCN3 = PV0IW03.PV0IWCN3 + 1;
    if (PV0IW03.PV0IWTP3 == PV0IW03.PV0IWBT3)
      PV0IM400.XFACD[PV0IWCN3] = " ";
      PV0IM400.XFADESC[PV0IWCN3] = " ";
      PV0IM400.XFAIND[PV0IWCN3] = " ";
      PV0IM400.PVLFRAMT[PV0IWCN3] = 0;
      PV0IM400.XXXUSID1[PV0IWCN3] = " ";
      PV0IM400.PVBLNINB[PV0IWCN3] = 0;
    else
      PV0IM400.XFACD[PV0IWCN3] = PV0IW03.XFACD[PV0IWTP3];
      PV0IM400.XFAIND[PV0IWCN3] = PV0IW03.XFAIND[PV0IWTP3];
      PV0IW01.PV0IWNUM = PV0IW03.XFACD[PV0IWTP3];
      PV0IM400.XFADESC[PV0IWCN3] = XFATBL.XFADESC[PV0IWNUM];
      PV0IM400.PVLFRAMT[PV0IWCN3] = PV0IW03.PVLFRAMT[PV0IWTP3];
      PV0IM400.XXXUSID1[PV0IWCN3] = PV0IW03.XXXUSID1[PV0IWTP3];
      PV0IM400.PVBLNINB[PV0IWCN3] = PV0IW03.PVBLNINB[PV0IWTP3];
      PV0IW03.PV0IWTP3 = PV0IW03.PV0IWTP3 + 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0IS95  ****/
end // end PV0IS95

//*** RECORD=PV0IW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0IW01 type basicRecord
  5 VAGen_SQLCODE VAGen_SQLCODE ; 
  5 PV0IWMAP PV0IWMAP ; 
  5 PV0IWLST PV0IWLST ; 
  5 PV0IWPRV PV0IWPRV ; 
  5 PV0IWMAX PV0IWMAX ; 
  5 PV0IWMX3 PV0IWMX3 ; 
  5 PV0IWNUM PV0IWNUM ; 
end // end PV0IW01

//*** RECORD=PV0IW02 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0IW02 type basicRecord
  5 PVXTOLER PVXTOLER ; 
  5 PV0IWTOP PV0IWTOP ; 
  5 PV0IWBOT PV0IWBOT ; 
  5 PV0IWCNT PV0IWCNT ; 
  5 PV0IWCUR PV0IWCUR ; 
  5 PV0IWSCR PV0IWSCR [300] ; 
    10 PVBLNINB PVBLNINB ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PVBCONTN PVBCONTN ; 
    10 PVBBSZNK PVBBSZNK ; 
    10 PVBESZNK PVBESZNK ; 
    10 PVBBSZDS PVBBSZDS ; 
    10 PVBESZDS PVBESZDS ; 
    10 PVBLNQTY PVBLNQTY ; 
    10 PCMOSQTY PCMOSQTY ; 
    10 PVBLNFOB PVBLNFOB ; 
    10 PVBLNCOM PVBLNCOM ; 
    10 PVBLNDTY PVBLNDTY ; 
    10 PVBLNAMT PVBLNAMT ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 XCTCD XCTCD ; 
    10 XDSCD XDSCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 KUCCOID KUCCOID ; 
end // end PV0IW02

//*** RECORD=PV0IW03 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0IW03 type basicRecord
  5 PV0IWTP3 PV0IWTP3 ; 
  5 PV0IWBT3 PV0IWBT3 ; 
  5 PV0IWCN3 PV0IWCN3 ; 
  5 PV0IWCR3 PV0IWCR3 ; 
  5 PV0IWSC3 PV0IWSC3 [300] ; 
    10 PVBLNINB PVBLNINB ; 
    10 XFACD XFACD ; 
    10 XFAIND XFAIND ; 
    10 PVLFRAMT PVLFRAMT ; 
    10 XXXUSID1 XXXUSID1 ; 
end // end PV0IW03

// Bottom Line Pointer
DataItem PV0IWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// BOTtom Line Pointer
DataItem PV0IWBT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter
DataItem PV0IWCN3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter
DataItem PV0IWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing
DataItem PV0IWCR3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing
DataItem PV0IWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Prev Active Item Screen
DataItem PV0IWLST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Active Screen
DataItem PV0IWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0IWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of Error Scroll Lines
DataItem PV0IWMX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Numeric Work Area
DataItem PV0IWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Screen
DataItem PV0IWPRV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Working Storage
DataItem PV0IWSC3 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Working Storage
DataItem PV0IWSCR char(108)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer
DataItem PV0IWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer
DataItem PV0IWTP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

