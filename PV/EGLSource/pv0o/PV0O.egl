package pv0o;
import corpcom2.XZCREC;
import corpcom3.XPPV980;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import corpcom7.ZZ-CHNG-USER-ID;
import corpx1.XIP-IVC-STAT-CD;
import fy.common.FY1REC;
import pc.common.PC2REC;
import pc.common.PC3REC;
import pv.common.*;
import sy.common.SY1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VPOITM04;
import vv.common.VPVPMT01;
import vv.common.VXIBGL01;
import xx.common.*;
import xx.common.ZZ-CHNG-CNT;
import xx.common.ZZ-CHNG-DT;
import xx.common.ZZ-CHNG-HHMM;
import xx.common.ZZ-SDT;
import xx02.*;
import xx03.*;
import xx03.XIB-IBANK-CD;
import xx05.*;
import xx05.XPV-IVC-TYP-CD;
//*** PROGRAM=PV0O ****
// ************************************************************
// *
// *   PV0O - Invoice STATUS INQ,
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// ************************************************************
// *********************
Program PV0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PV0BW05 PV0BW05; // record
  PV0OW01 PV0OW01; // record
  PV0OW02 PV0OW02; // record
  PV0OW03 PV0OW03; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVDREC PVDREC; // record
  PVEREC PVEREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVRREC PVRREC; // record
  PVUREC PVUREC; // record
  PVWREC PVWREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPOITM04 VPOITM04; // record
  VPVPMT01 VPVPMT01; // record
  VXIBGL01 VXIBGL01; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PV0BT01 {deleteAfterUse = yes}; // table
  use XFATBL {deleteAfterUse = yes}; // table
  use XIBTBL {deleteAfterUse = yes}; // table
  use PV0OM.PV0OM001,  // forms
      PV0OM.PV0OM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0O000: PV0O000();
  end // end main
end // end PV0O

// CHECK    PV Standard PF Keys
Function PV0O-PFKEY-ACTION()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      CHECK PV PF Keys and Exit Requests                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;

  if (converseVar.eventKey is pf1)
    XSPF1();
  else
    if (converseVar.eventKey is pf5)
      if (PV0OW01.PV0OWMAP == "2")
        PV0OW01.PV0OW-SELECT-LINE-COUNT = 0;
        PV0OW01.PV0OWIX4 = 0;
        while (PV0OW01.PV0OWIX4 < 10)
          PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
          if (PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] == "S")
            PV0OW01.PV0OW-SELECT-LINE-COUNT = PV0OW01.PV0OW-SELECT-LINE-COUNT + 1;
            if (PV0OW01.PV0OW-SELECT-LINE-COUNT > 1)
              PV0OW01.PV0OWIX4 = 10;
              PVUREC.PVUERNBR = 235;
              PVUREC.PVUERROR[PVUERGEN] = "Y";
              return;
            end
          end
        end


          /* count number of lines selected for detail view if the total*/
                                  /* is zero then stay on map 2 and show a*/
                                   /* 'no lines selected' msg.*/
      /* MOVE 0 TO PV0OW01.PV0OW-SELECT-LINE-COUNT;*/
        ;
        PV0OW01.PV0OWIX4 = 0;
        while (PV0OW01.PV0OWIX4 < 10)
          PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
          if (PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] == "S")
      /* PV0OW01.PV0OW-SELECT-LINE-COUNT =*/
      /* PV0OW01.PV0OW-SELECT-LINE-COUNT + 1;*/
            PVUREC.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
            ;
            PVUREC.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
            PVUREC.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
            PVUREC.PV-IVC-ID = PV0OM002.PV-IVC-ID[PV0OWIX4];
            PVUREC.PV-MSA-VEND-NBR = PV0OM002.PV-MSA-VEND-NBR[PV0OWIX4];
            PVUREC.PV-MSA-VEND-GRP = PV0OM002.PV-MSA-VEND-GRP[PV0OWIX4];
          end
        end
        ;
        ;
        PV0OS-XFER-TO-PV();
        if (PVUREC.PVUERROR[PVUERGEN] == "Y")
          return;
        end
        ;
      end
    else
      if (converseVar.eventKey is pf2
       || converseVar.eventKey is pf3
       || converseVar.eventKey is pf13
       || converseVar.eventKey is pf14)
        PV0OS-XFER-TO-PV();
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O-PFKEY-ACTION *********/
end // end PV0O-PFKEY-ACTION

// IOMOD    DPINVC.VPVERR01
Function PV0O-VPVERR01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **               IO Module for Error table Records        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  ;
  call "VPVERR01" (PVYREC, SQLCA, PVRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    if (PVYREC.PVYFNC == "S "
     || PVYREC.PVYFNC == "A "
     || PVYREC.PVYFNC == "U "
     || PVYREC.PVYFNC == "D "
     || PVYREC.PVYFNC == "S1"
     || PVYREC.PVYFNC == "N1"
     || PVYREC.PVYFNC == "C1"
     || PVYREC.PVYFNC == "S2"
     || PVYREC.PVYFNC == "N2"
     || PVYREC.PVYFNC == "C2")
      /* next sentence*/
    else
      PVUREC.PVUERNBR = 199;
    end
    ;
    PVUREC.PVUERROR[PVUERVND] = " ";
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      if (PVYREC.PVYFNC == "N1"
       || PVYREC.PVYFNC == "N2"
       || PVYREC.PVYFNC == "S "
      ) /* NEXT SENTENCE*/
      else
        PVUREC.PVUERNBR = 200;
        PVUREC.PVUERROR[PVUERVND] = "Y";
        PVUREC.PVUERROR[PVUERIVC] = "Y";
      end
    else
      PVUREC.PVUERROR[PVUERVND] = "Y";
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV-VPVERR01";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPVERR01";
          TA1REC.TA1TBLKE = PVRREC.PVR-MSA-VEND-NBR;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV-VPVERR01  ****/
end // end PV0O-VPVERR01

// READ     VENDOR NAME vpverr01
Function PV0O-VPVERR01-MAP2()
   /* STMT GROUP - PV0O-VPVerr01-MAP2*/
   /* *************************************************************/
   /* ***                                                      ****/
   /* ***  Read ERROR   TABLE - GET LIST OF DISTINCT FACTORY   ****/
   /* ***  INVOICE, VENDOR, GROUP FOR A GIVEN VENDOR IVC       ****/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
   /* use SAVED VALUE OF CURRENT VENDOR NUMBER AND VENDOR GROUP*/
  PV0OW01.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
  PV0OW01.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
  PV0OW01.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
                                  /*  */
  PVRREC.PVR-ERR-SEQ-NBR = -1;
  PVRREC.PVR-PMT-VEND-IVC-ID = PV0OW01.PV-PMT-VEND-IVC-ID;
  PVRREC.PVR-PMT-VEND-NBR = PV0OW01.PV-PMT-VEND-NBR;
  PVRREC.PVR-PMT-VEND-GRP = PV0OW01.PV-PMT-VEND-GRP;
  PVRREC.PVR-IVC-ID = "*";
  PVRREC.PVR-MSA-VEND-NBR = "*";
  PVRREC.PVR-MSA-VEND-GRP = "*";
  PVRREC.PVR-ERR-LD-DT = -1;
  ;
   /* OPEN CURSOR FOR SCREEN 2 LIST OF DISTINCT PAYMENTS*/
  PVYREC.PVYFNC = "S2";
  PV0O-VPVERR01(); /* IOMOD VPVERR01*/
  ;
  PV0OW-PV0OW02-GROUP = " ";
  PV0OW01.PV0OWIX2 = 0;
  while (SQLCA.VAGen_SQLCODE == 0
   && PV0OWIX2 < 1500)
    /* FETCH LINES FROM VPVERR01*/
    PVYREC.PVYFNC = "N2";
    PV0O-VPVERR01(); /* IOMOD VPVERR01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && PVRREC.PVR-IVC-ID != " ")
      PV0OWIX2 = PV0OWIX2 + 1;
      PV0OW02.PV-IVC-ID[PV0OWIX2] = PVRREC.PVR-IVC-ID;
      PV0OW02.PV-MSA-VEND-NBR[PV0OWIX2] = PVRREC.PVR-MSA-VEND-NBR;
      PV0OW02.PV-MSA-VEND-GRP[PV0OWIX2] = PVRREC.PVR-MSA-VEND-GRP;
      PV0OW01.PV0OWBOT = PV0OW01.PV0OWIX2;
    else
      if (PV0OW01.PV0OWIX2 == 0)
        /* Requested Record Not Found*/
        PVUREC.PVUERNBR = 98;
      end
    end
  end
  ;
   /* CLOSE CURSOR FOR VPVERR01*/
  PVYREC.PVYFNC = "C2";
  PV0O-VPVERR01(); /* IOMOD VPVERR01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O-VPVERR01-MAP2*****/
end // end PV0O-VPVERR01-MAP2

// PROCESS  Main Logic
Function PV0O000()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0O    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0O001(); /* Initialization Logic*/
  ;
  PV0OS01();
  while (PVUREC.PVUENDOA == "N")
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    if (PV0OW01.PV0OWMAP == "1")
      PV0O100(); /* Converse PV00M100*/
      PV0O110(); /* Check PF Keys and Exits*/
      PV0O120(); /* Check what to do next*/
    else
      if (PV0OW01.PV0OWMAP == "2")
        if (COMMAREA.CAFROMAP == "PV0P")
          PV0OM001.PV-PMT-VEND-IVC-ID = PVUREC.PV-PMT-VEND-IVC-ID;
          PV0OM001.PV-PMT-VEND-NBR = PVUREC.PV-PMT-VEND-NBR;
          PV0OM001.PV-PMT-VEND-GRP = PVUREC.PV-PMT-VEND-GRP;
          PV0O120();
        end
        PV0O200(); /* Converse PV0OM200*/
        PV0O210(); /* Check PF Keys and Exits*/
        PV0O220(); /* Check what to do next*/
      end
    end
  end
  exit program;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O000  ****/
end // end PV0O000

// INIT     Routine
Function PV0O001()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0OW01 empty;
  set PV0OW02 empty;
  set PV0OW03 empty;
  set PV0OM001 initial;
  ;
   /* SET FY1REC EMPTY;*/
  set TA2REC empty;
  ;
  XSPVS01(); /* Initialize PV Common Routine Fields*/
  ;
  TA1REC.TA1PGMNM = "PV0O"; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAP = "PV0OM001";
  ;
    /* Get System Date and Time*/
  PV0OS09();
  ;
    /* Set Maximum Scroll Lines*/
  PV0OW01.PV0OWMAX = 10;
  ;
   /* Set Active Screen*/
  PV0OW01.PV0OWMAP = "1";
  /* MOVE '1' TO PV0OW01.PV0OWPRV;*/
  /* MOVE '2' TO PV0OW01.PV0OWLST;*/
  if (COMMAREA.CAFROMAP == "PV0P")
    PV0OW01.PV0OWMAP = "2";
  end
  ;
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0O001  ****/
end // end PV0O001

// CONVERSE PV0OM001 SCREEN
Function PV0O100()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (COMMAREA.CAFROMAP == "PV0P")
    COMMAREA.CAFROMAP = "PV0O";
  end
  if (PVUREC.PVUERROR[PVUERIVC] == "Y")
    set PV0OM001.PV-PMT-VEND-IVC-ID cursor, bold;
  else
    if (PVUREC.PVUERROR[PVUERVND] == "Y")
      set PV0OM001.PV-PMT-VEND-NBR cursor, bold;
    end
  end
  ;
  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0OM001.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0OM001.TA2GRGB = TA2REC.TA2GRGB;
  PV0OM001.TA2TIMED = VGVar.currentFormattedTime;
  ;
  converse PV0OM001 ;
  ;
  set PV0OM001.PV-PMT-VEND-NBR initialAttributes; /* Reset Attributes*/
  set PV0OM001.PV-PMT-VEND-GRP initialAttributes;
  set PV0OM001.PV-PMT-VEND-IVC-ID initialAttributes;
  set PV0OM001.PV-PMT-VEND-IVC-ID cursor;
  PVUREC.PVUERNBR = 0;
  PVUREC.PVUERROR[PVUERGEN] = " ";
  PVUREC.PVUERROR[PVUERVND] = " ";
  PVUREC.PVUERROR[PVUERIVC] = " ";
  PVUREC.PVUERROR[PVUERKEY] = " ";
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0O001  ****/
end // end PV0O100

// CHECK    PF Keys and Exits
Function PV0O110()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0O-PFKEY-ACTION(); /* Check PV Standard PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0) /* Check for Security Error*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf5
    ) /* next sentence*/
    else
       /* Invalid PF Key*/
      PVUREC.PVUERNBR = 1;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O110  ****/
end // end PV0O110

// CHECK    What to do next
Function PV0O120()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0OS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0O150(); /* Check if allowed to continue*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O120  ****/
end // end PV0O120

// CHECK   if allowed to continue
Function PV0O150()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0OS03(); /* Send the user back.*/
    else
      if (converseVar.eventKey is pf5
      ) /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter
     && PV0OW01.PV0OWMAP == "1")
      PV0OS60(); /* Validate Data Keyed in*/
    else
      if (converseVar.eventKey is pf5 || 
      (converseVar.eventKey is enter && 
      COMMAREA.CAFROMAP == "PV0P"))
        PV0OS60(); /* Validate Data Keyed in*/
        if (COMMAREA.CAFROMAP == "PV0P")
          PVUREC.PVUERROR[PVUERIVC] = " ";
        end
        if (PVUREC.PVUERROR[PVUERVND] != "Y"
         && PVUREC.PVUERROR[PVUERIVC] != "Y")
          PV0OW01.PV0OWMAP = "2";
          PV0O-VPVERR01-MAP2(); /* BUILD TABLE FOR MAP2*/
          if (PV0OW01.PV0OWIX2 == 0)
            PVUREC.PVUERNBR = 234;
            PV0OW01.PV0OWMAP = "1";
            return;
          end
                  /* SHOW FIRST PAGE OF DATA FROM MAP2 TABLE*/
          PV0OW01.PV0OWCUR = 2;
          PV0O270(); /* Go Back One Screen*/
        end
      else
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O150  ****/
end // end PV0O150

// CONVERSE Factory Invoice Selec
Function PV0O200()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Invoice Header Inquiry Screen           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSPVS57(); /* Deliver a message*/
  if (COMMAREA.CASECRC == 0)
     /* next sentence*/
  else
    PV0OM002.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0OM002.TA2GRGB = TA2REC.TA2GRGB;
  PV0OM002.TA2TIMED = VGVar.currentFormattedTime;
  if (COMMAREA.CAFROMAP == "PV0P")
    PVUREC.PV-IVC-ID = " ";
    PVUREC.PV-MSA-VEND-NBR = " ";
    PVUREC.PV-MSA-VEND-GRP = " ";
    PVUREC.PV-PMT-VEND-IVC-ID = " ";
    PVUREC.PV-PMT-VEND-NBR = " ";
    PVUREC.PV-PMT-VEND-GRP = " ";
    COMMAREA.CAFROMAP = "PV0O";
    /* SET PVUREC EMPTY;*/
  end
  ;
  converse PV0OM002 ;
  ;
  set PV0OM002.PV0OM-SELECT-FLAG[1] cursor;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O200  ****/
end // end PV0O200

// CHECK    PF Keys and Exits
Function PV0O210()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0O-PFKEY-ACTION(); /* Check PV PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0) /* Check Security Error*/
    if (converseVar.eventKey is pf3)
      /* next sentence*/
    else
      if (converseVar.eventKey is pf7)
         /* BACKWARD Performed. Please proceed.*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8)
           /* FORWARD Performed. Please proceed.*/
          PVUREC.PVUERNBR = 4;
        else
          /* IF EZEAID IS PF4*/
          if (converseVar.eventKey is pf5)
            /* next sentence*/
          else
            /* Invalid PF Key*/
            PVUREC.PVUERNBR = 1;
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PVOB210  ****/
end // end PV0O210

// CHECK    What to do next
Function PV0O220()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0OS30(); /* Check FASTPATH*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0O250(); /* Check if allowed to continue*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O220  ****/
end // end PV0O220

// CHECK    if allowed to continu
Function PV0O250()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0OW01.PV0OWMAP = "1";
    else
      if (converseVar.eventKey is pf5
       || converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
      ) /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      PV0OW01.PV0OWIX4 = 0;
      while (PV0OW01.PV0OWIX4 < 10)
        PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
        if (PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] == "S")
          PV0OW01.PV0OWIX5 = PV0OM002.PV0OM-LINE-NBR[PV0OWIX4];
          PV0OW02.PV0OW-SELECT-FLAG[PV0OWIX5] = "S";
        end
      end
    end
    if (converseVar.eventKey is pf5)
      if (PVUREC.PVUERROR[PVUERVND] != "Y"
       && PVUREC.PVUERROR[PVUERIVC] != "Y")
        /* count number of lines selected for detail view if the total*/
        /* is zero then stay on map 2 and show a 'no lines selected' msg.*/
        PV0OW01.PV0OW-SELECT-LINE-COUNT = 0;
        ;
        PV0OW01.PV0OWIX4 = 0;
        while (PV0OW01.PV0OWIX4 < 10)
          PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
          if (PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] == "S")
            PV0OW01.PV0OW-SELECT-LINE-COUNT = PV0OW01.PV0OW-SELECT-LINE-COUNT + 1;
            PVUREC.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
            PVUREC.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
            PVUREC.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
            PVUREC.PV-IVC-ID = PV0OM002.PV-IVC-ID[PV0OWIX4];
            PVUREC.PV-MSA-VEND-NBR = PV0OM002.PV-MSA-VEND-NBR[PV0OWIX4];
            PVUREC.PV-MSA-VEND-GRP = PV0OM002.PV-MSA-VEND-GRP[PV0OWIX4];
          end
        end
      end
    end
    ;
    if (converseVar.eventKey is enter)
      PV0OW01.PV0OWMAP = "2";
    else
      if (converseVar.eventKey is pf7)
        PV0O270(); /* Go Back One Screen*/
      else
        if (converseVar.eventKey is pf8)
          PV0O280(); /* Go Forward One Screen*/
        else
          /* IF EZEAID IS PF9;*/
          /* MOVE PV0OW01.PV0OWMAP TO PV0OW01.PV0OWLST;*/
          /* MOVE '1' TO PV0OW01.PV0OWMAP;*/
          /* END;*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O250  ****/
end // end PV0O250

// BACK     One Page Routine
Function PV0O270()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0OW01.PV0OWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0OW01.PV0OWTOP = PV0OW01.PV0OWCUR - PV0OW01.PV0OWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0OW01.PV0OWTOP = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0OW01.PV0OWTOP = PV0OW01.PV0OWCUR - PV0OW01.PV0OWMAX;
      end
    end
    if (PV0OW01.PV0OWTOP <= 0)
      PV0OW01.PV0OWTOP = 1;
    end
    PV0OS92(); /* Build Scroll Lines*/
    converseLib.clearScreen();
    
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O270  ****/
end // end PV0O270

// FORWARD  One Page Routine
Function PV0O280()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf8)
    PV0OW01.PV0OWTOP = PV0OW01.PV0OWCUR     + PV0OW01.PV0OWMAX;
  else
    if (converseVar.eventKey is pf20)
      PV0OW01.PV0OWTOP = PV0OW01.PV0OWCUR + PV0OW01.PV0OWMAX / 2;
    else
      if (converseVar.eventKey is pf12)
        /* Bottom of Screen Displayed.*/
        PVUREC.PVUERNBR = 62;
        PV0OW01.PV0OWTOP = PV0OW01.PV0OWBOT - PV0OW01.PV0OWMAX;
      end
    end
  end
  ;
  if (PV0OW01.PV0OWTOP >= PV0OW01.PV0OWBOT)
    PV0OW01.PV0OWTOP = PV0OW01.PV0OWBOT - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end
  ;
  if (PV0OW01.PV0OWTOP <= 0)
    PV0OW01.PV0OWTOP = 1;
  end
  ;
  PV0OS92(); /* Build Scroll Lines*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O280  ****/
end // end PV0O280

// READ     VENDOR NAME IO5680
Function PV0O980()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
   /* use SAVED VALUE OF CURRENT VENDOR NUMBER AND VENDOR GROUP*/
   /* if current screen = 1 save entered values, else, use old*/
   /* values saved previously*/
  if (PV0OW01.PV0OWMAP == "1"
   || COMMAREA.CAFROMAP == "PV0P")
    PV0OW01.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
    PV0OW01.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
    PV0OW01.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
  end
  ;
  PVOREC.PVOVENDR = PV0OW01.PV-PMT-VEND-NBR;
  PVOREC.PVOVENDG = PV0OW01.PV-PMT-VEND-GRP;
  ;
  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/
  ;
  if (PVOREC.PVOVNDNM == " ")
    PVOREC.PVOVNDNM = "VENDOR NAME NOT FOUND";
    if (PV0OM001.PV-PMT-VEND-IVC-ID == " "
     && PV0OM001.PV-PMT-VEND-NBR == " ")
      PVUREC.PVUERNBR = 122;
      PVUREC.PVUERROR[PVUERVND] = "Y";
    else
      PVUREC.PVUERNBR = 136;
      PVUREC.PVUERROR[PVUERVND] = "Y";
    end
  end
  ;
  PV0OW01.PV-PMT-VEND-NM = PVOREC.PVOVNDNM;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0O980  ****/
end // end PV0O980

// PV APPL  Common Exit Routine
Function PV0OS-XFER-TO-PV()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf3)
    if (PV0OW01.PV0OWMAP == "2")
      PV0OW01.PV0OWMAP = "1";
      return;
    end
    COMMAREA.CATOAP = "PV0M";
  else
    if (converseVar.eventKey is pf5)
      ;
        /* GET PMT-VEND IVC DATA FROM SELECTED LINE*/
      PV0OW01.PV0OWIX4 = 0;
      PV0OW01.PV0OW-SELEC-LIN-FL = "N";
      while (PV0OW01.PV0OWIX4 < 10)
        PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
        if (PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] == "S")
          PV0OW01.PV0OW-SELEC-LIN-FL = "Y";
          PV0OW01.PV0OW-SELECT-LINE-COUNT = PV0OW01.PV0OW-SELECT-LINE-COUNT + 1;
          PVUREC.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
          PVUREC.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
          PVUREC.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
          PVUREC.PV-IVC-ID = PV0OM002.PV-IVC-ID[PV0OWIX4];
          PVUREC.PV-MSA-VEND-NBR = PV0OM002.PV-MSA-VEND-NBR[PV0OWIX4];
          PVUREC.PV-MSA-VEND-GRP = PV0OM002.PV-MSA-VEND-GRP[PV0OWIX4];
        end
      end
      ;
          /* show error message if not enough data for PV0A XFER*/
      /* IF PVUREC.PV-IVC-ID = ' '*/
      /* OR PVUREC.PV-MSA-VEND-NBR = ' '*/
      /* OR PVUREC.PV-PMT-VEND-IVC-ID = ' '*/
      /* OR PVUREC.PV-PMT-VEND-NBR = ' ';*/
      /* IF PVUREC.PV-PMT-VEND-IVC-ID = ' '*/
      /* OR PVUREC.PV-PMT-VEND-NBR = ' ';*/
      if (converseVar.eventKey is pf5
       && PV0OW01.PV0OW-SELEC-LIN-FL == "N")
        PVUREC.PVUERNBR = 233;
        PVUREC.PVUERROR[PVUERGEN] = "Y";
        return;
      end
      COMMAREA.CATOAP = "PV0P";
      COMMAREA.CAUSERA = PVUREC.PVUGROUP;
    end
  end
  ;
  if (COMMAREA.CATOAP == " ")
     /* next sentence*/
  else
    XSEXIT();
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS-XFER-TO-PV ****/
end // end PV0OS-XFER-TO-PV

// CHECK    Passed Information
Function PV0OS01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if Caller passed any Information          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  if (PV0OW01.PV0OWMAP == "1")
    PV0OW01.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
    PV0OW01.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
    PV0OW01.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
  end
  ;
  PV0O980(); /* Get Vendor Name*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS01  ****/
end // end PV0OS01

// GO BACK  to Calling Applicatio
Function PV0OS03()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0OS-XFER-TO-PV(); /* PV Common Exit*/
  PV0OS50(); /* Exit Routine*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS03  ****/
end // end PV0OS03

// GET      System Date and Time
Function PV0OS09()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0OM001.TA2GRGB = TA2REC.TA2GRGB;
  PV0OM001.TA2TIMED = TA2REC.TA2TIMED;
  ;
  PV0OM002.TA2GRGB = TA2REC.TA2GRGB;
  PV0OM002.TA2TIMED = TA2REC.TA2TIMED;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS09  ****/
end // end PV0OS09

// CHECK    FASTPATH
Function PV0OS30()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0OW01.PV0OWMAP == "1")
      if (PV0OM001.CATOAP == " ")
             /* next sentence*/
      else
        if (PV0OM001.PV-PMT-VEND-NBR == " "
         && PV0OM001.PV-PMT-VEND-GRP == " "
         && PV0OM001.PV-PMT-VEND-IVC-ID == " ")
          COMMAREA.CATOAP = PV0OM001.CATOAP;
          COMMAREA.CAITEM = PV0OM001.CAITEM;
          PV0OS50(); /* Exit Routine*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set*/
                                  /* General Error Flag*/
          /* ; /* Cannot FASTPATH with data keyed in*/
          PVUREC.PVUERNBR = 63;
        end
      end
    else
      if (PV0OW01.PV0OWMAP == "2")
        if (PV0OM002.CATOAP == " ")
              /* next sentence*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
          COMMAREA.CATOAP = PV0OM002.CATOAP;
          COMMAREA.CAITEM = PV0OM002.CAITEM;
          PV0OS50(); /* Exit Routine*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS30  ****/
end // end PV0OS30

// EXIT     Routine (XSEXIT)
Function PV0OS50()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSEXIT();
  ;
  if (PV0OW01.PV0OWMAP == "1")
    set PV0OM001.CATOAP cursor;
    PV0OM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  else
    if (PV0OW01.PV0OWMAP == "2")
      set PV0OM002.CATOAP cursor;
      PV0OM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS50  ****/
end // end PV0OS50

// VALIDATE Data Keyed In (ENTER)
Function PV0OS60()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0OM001.PV-PMT-VEND-IVC-ID == " "
   || PV0OM001.PV-PMT-VEND-NBR == " ")
    PVUREC.PVUERNBR = 122;
    PVUREC.PVUERROR[PVUERIVC] = "Y";
    return;
  else
    PV0OW01.PV0OW-FIELD-CT = 0;
    if (PV0OW01.PV0OW-FIELD-CT == 0
     || PV0OW01.PV0OW-FIELD-CT == 2)
         /* NEXT SENTENCE*/
    else
      PVUREC.PVUERNBR = 176;
    end
  end
  ;
  if (PV0OW01.PV0OWMAP == "1"
   || COMMAREA.CAFROMAP == "PV0P")
    PV0OW01.PV-PMT-VEND-IVC-ID = PV0OM001.PV-PMT-VEND-IVC-ID;
    PV0OW01.PV-PMT-VEND-NBR = PV0OM001.PV-PMT-VEND-NBR;
    PV0OW01.PV-PMT-VEND-GRP = PV0OM001.PV-PMT-VEND-GRP;
  end
  ;
  PV0O980(); /* Get Vendor Name*/
  ;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS60  ****/
end // end PV0OS60

// BUILD    Item Scroll Lines
Function PV0OS92()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Line Item Scroll Lines FOR PV0OM002       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
   /* MOVE 1 TO PV0OW01.PV0OWBOT;*/
  ;
  PV0OW01.PV0OWCUR = PV0OW01.PV0OWTOP;
  PV0OW01.PV0OWCNT = 0;
  set PV0OM002 empty;
  PV0OM002.PV-PMT-VEND-IVC-ID = PV0OW01.PV-PMT-VEND-IVC-ID;
  PV0OM002.PV-PMT-VEND-NBR = PV0OW01.PV-PMT-VEND-NBR;
  PV0OM002.PV-PMT-VEND-NM = PV0OW01.PV-PMT-VEND-NM;
  ;
  while (PV0OW01.PV0OWCNT < PV0OW01.PV0OWMAX)
    /* MOVE DETAIL PAYMENT DATA TO WORKING STORAGE TABLE*/
    /* INITIALIZE MAP 2 ROWS AS NEEDED*/
    PV0OW01.PV0OWCNT = PV0OW01.PV0OWCNT + 1;
    if (PV0OW02.PV-IVC-ID[PV0OWTOP] == " ")
      PV0OM002.PV0OM-SELECT-FLAG[PV0OWCNT] = " ";
      PV0OM002.PV-IVC-ID[PV0OWCNT] = " ";
      PV0OM002.PV-MSA-VEND-NBR[PV0OWCNT] = " ";
      PV0OM002.PV-MSA-VEND-GRP[PV0OWCNT] = " ";
      PV0OM002.PV0OM-LINE-NBR[PV0OWCNT] = 0;
    else
      PV0OM002.PV-IVC-ID[PV0OWCNT] = PV0OW02.PV-IVC-ID[PV0OWTOP];
      PV0OM002.PV-MSA-VEND-NBR[PV0OWCNT] = PV0OW02.PV-MSA-VEND-NBR[PV0OWTOP];
      PV0OM002.PV-MSA-VEND-GRP[PV0OWCNT] = PV0OW02.PV-MSA-VEND-GRP[PV0OWTOP];
      PV0OM002.PV0OM-LINE-NBR[PV0OWCNT] = PV0OW01.PV0OWTOP;
      PV0OW01.PV0OWTOP = PV0OW01.PV0OWTOP + 1;
    end
  end
  PV0OW01.PV0OWIX4 = 1;
  while (PV0OW01.PV0OWIX4 <= 10)
    if (PV0OM002.PV-IVC-ID[PV0OWIX4] == " "
     && PV0OM002.PV-MSA-VEND-NBR[PV0OWIX4] == " ")
      set PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] skip, bold;
    else
      set PV0OM002.PV0OM-SELECT-FLAG[PV0OWIX4] initialAttributes;
    end
    PV0OW01.PV0OWIX4 = PV0OW01.PV0OWIX4 + 1;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0OS92  ****/
end // end PV0OS92

//*** RECORD=PV0OW01 ****
// ************************************************************
// *  PV0OW01 - WORKING STORAGE RECORD FOR PV0O APPLICATION   *
// *            MISCELLANEOUS FIELDS - INDEXES, FLAGS, ETC.   *
// *                                                          *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 09-10-00 RRanji        Initial Construction                *
// ************************************************************
// ***********************
Record PV0OW01 type basicRecord
  5 PV0OW-PV0OW01-GROUP PV0OW-PV0OW01-GROUP ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 PV0OWMAP PV0OWMAP ; 
    10 PV0OWLST PV0OWLST ; 
    10 PV0OWPRV PV0OWPRV ; 
    10 PV0OWMAX PV0OWMAX ; 
    10 PV0OWMAX-MAP3 PV0OWMAX-MAP3 ; 
    10 PV0OWNUM PV0OWNUM ; 
    10 PV0OW-CALC-TOLERANCE PV0OW-CALC-TOLERANCE ; 
    10 PV0OWTOP PV0OWTOP ; 
    10 PV0OWTOP-MAP3 PV0OWTOP-MAP3 ; 
    10 PV0OWBOT PV0OWBOT ; 
    10 PV0OWBOT-MAP3 PV0OWBOT-MAP3 ; 
    10 PV0OWCNT PV0OWCNT ; 
    10 PV0OWCNT-MAP3 PV0OWCNT-MAP3 ; 
    10 PV0OWCUR PV0OWCUR ; 
    10 PV0OWCUR-MAP3 PV0OWCUR-MAP3 ; 
    10 PV0OWSCP PV0OWSCP ; 
    10 PV0OWIMX PV0OWIMX ; 
    10 PV0OWIDX PV0OWIDX ; 
    10 PV0OWIX2 PV0OWIX2 ; 
    10 PV0OWIX3 PV0OWIX3 ; 
    10 PV0OWIX4 PV0OWIX4 ; 
    10 PV0OWIX5 PV0OWIX5 ; 
    10 PV0OW-FIELD-CT PV0OW-FIELD-CT ; 
    10 PV-IVC-ID PV-IVC-ID ; 
    10 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
    10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
    10 PV-PMT-VEND-NM PV-PMT-VEND-NM ; 
    10 PV-PMT-VEND-NBR PV-PMT-VEND-NBR ; 
    10 PV-PMT-VEND-GRP PV-PMT-VEND-GRP ; 
    10 PV-PMT-VEND-IVC-ID PV-PMT-VEND-IVC-ID ; 
    10 PV0OW-SELECT-LINE-COUNT PV0OW-SELECT-LINE-COUNT ; 
    10 PV0OW-TOTAL-FOB-AMOUNT PV0OW-TOTAL-FOB-AMOUNT ; 
    10 PV0OW-TOTAL-DUTY-AMOUNT PV0OW-TOTAL-DUTY-AMOUNT ; 
    10 PV0OW-TOTAL-FRGT-AMOUNT PV0OW-TOTAL-FRGT-AMOUNT ; 
    10 PV-IVC-AMT PV-IVC-AMT ; 
    10 PV-IVC-TOT-FRGT PV-IVC-TOT-FRGT ; 
    10 PV-IVC-DSCT-AMT PV-IVC-DSCT-AMT ; 
    10 PV-NISSHO-BANK-CHG PV-NISSHO-BANK-CHG ; 
    10 PV-NISSHO-FOB-AMT PV-NISSHO-FOB-AMT ; 
    10 PV-NISSHO-TOT-DTY PV-NISSHO-TOT-DTY ; 
    10 PV-NISSHO-BRKR-CHG PV-NISSHO-BRKR-CHG ; 
    10 PV-NISSHO-OTH-CHG1 PV-NISSHO-OTH-CHG1 ; 
    10 PV-NISSHO-OTH-CHG2 PV-NISSHO-OTH-CHG2 ; 
    10 PV-NISSHO-SUB-CHG1 PV-NISSHO-SUB-CHG1 ; 
    10 PV-NISSHO-SUB-CHG2 PV-NISSHO-SUB-CHG2 ; 
    10 PV-NISSHO-INT-CHG1 PV-NISSHO-INT-CHG1 ; 
    10 PV-NISSHO-INT-CHG2 PV-NISSHO-INT-CHG2 ; 
    10 PV-NISSHO-INT-CHG3 PV-NISSHO-INT-CHG3 ; 
    10 PV-NISSHO-COMM-AMT PV-NISSHO-COMM-AMT ; 
    10 PV0OW-PREV-CANCEL-FL PV0OW-PREV-CANCEL-FL ; 
    10 PV0OW-LC-TOTALS-BY-BANK PV0OW-LC-TOTALS-BY-BANK ; 
      15 PV-LN-ITM-QTY PV-LN-ITM-QTY ; 
      15 PV-LN-UNT-FOB-AMT PV-LN-UNT-FOB-AMT ; 
      15 PV-LN-UNT-COMM-AMT PV-LN-UNT-COMM-AMT ; 
      15 PV-NISSHO-LN-DTY PV-NISSHO-LN-DTY ; 
      15 PV0OW-SUM-FCTY-DSCT PV0OW-SUM-FCTY-DSCT ; 
      15 PV0OW-CURR-IBANK-CD PV0OW-CURR-IBANK-CD ; 
      15 XIB-IBANK-CD XIB-IBANK-CD [30] ; 
      15 PV-LC-ITM-QTY PV-LC-ITM-QTY [30] ; 
      15 PV-LC-UNT-FOB-AMT PV-LC-UNT-FOB-AMT [30] ; 
      15 PV-LC-UNT-COMM-AMT PV-LC-UNT-COMM-AMT [30] ; 
      15 PV-NISSHO-LC-DTY PV-NISSHO-LC-DTY [30] ; 
      15 PV0OW-SUM-BANK-DSCT PV0OW-SUM-BANK-DSCT [30] ; 
    10 PV0OW-LINE-IS-LC-FL PV0OW-LINE-IS-LC-FL ; 
    10 PV0OW-FOB-LC-FACTOR PV0OW-FOB-LC-FACTOR ; 
    10 PV0OW-COMM-LC-FACTOR PV0OW-COMM-LC-FACTOR ; 
    10 PV0OW-DUTY-LC-FACTOR PV0OW-DUTY-LC-FACTOR ; 
    10 PV0OW-QTY-LC-FACTOR PV0OW-QTY-LC-FACTOR ; 
    10 PV0OW-UPDATE-HEADER-FL PV0OW-UPDATE-HEADER-FL ; 
    10 PV0OW-FRGT-PMT-STAT PV0OW-FRGT-PMT-STAT ; 
    10 PV0OW-FOB-PMT-STAT PV0OW-FOB-PMT-STAT ; 
    10 PV0OW-DUTY-PMT-STAT PV0OW-DUTY-PMT-STAT ; 
    10 PV0OW-SELEC-LIN-FL PV0OW-SELEC-LIN-FL ; 
    10 PV0OW-FISCAL-MONTH PV0OW-FISCAL-MONTH ; 
      15 PV0OW-FISCAL-FILLER PV0OW-FISCAL-FILLER ; 
      15 PV0OW-FISCAL-CC PV0OW-FISCAL-CC ; 
      15 PV0OW-FISCAL-YYMM PV0OW-FISCAL-YYMM ; 
    10 PV0OW-FRGT-DBT-STAT PV0OW-FRGT-DBT-STAT ; 
    10 PV0OW-DUTY-DBT-STAT PV0OW-DUTY-DBT-STAT ; 
    10 PV0OW-BROK-DBT-STAT PV0OW-BROK-DBT-STAT ; 
    10 PV0OW-LCRED-DBT-STAT PV0OW-LCRED-DBT-STAT ; 
end // end PV0OW01

//*** RECORD=PV0OW02 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0OM002 - FACTORY INVOICE SELECTION LIST.*
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 09-10-00 RRANJI        Initial Construction                *
// ************************************************************
// ***********************
Record PV0OW02 type basicRecord
  5 PV0OW-PV0OW02-GROUP PV0OW-PV0OW02-GROUP ; 
    7 PV0OW-MAP2-LINE-GROUP PV0OW-MAP2-LINE-GROUP [1000] ; 
      10 PV0OW-SELECT-FLAG PV0OW-SELECT-FLAG ; 
      10 PV-IVC-ID PV-IVC-ID ; 
      10 PV-MSA-VEND-NBR PV-MSA-VEND-NBR ; 
      10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
end // end PV0OW02

//*** RECORD=PV0OW03 ****
// ************************************************************
// *  PV0BW02 - WORKING STORAGE RECORD ALL DATA DISPLAYED ON  *
// *            MAP PV0OM002 -                                *
// *                                                          *
// ************************************************************
// Maintenance Log:                                           *
//                                                            *
//   Date   Init   Proj#       C o m m e n t s                *
// -------- ------ -----  -------------------------------------
// 09-10-00 RRANJI        Initial Construction                *
// ************************************************************
// ***********************
Record PV0OW03 type basicRecord
  5 PV0OW-PV0OW03-GROUP PV0OW-PV0OW03-GROUP ; 
    7 PV0OW-MAP3-LINE-GROUP1 PV0OW-MAP3-LINE-GROUP1 [1400] ; 
      10 PV-IVC-ID PV-IVC-ID ; 
      10 PV-MSA-VEND-GRP PV-MSA-VEND-GRP ; 
      10 XPV-IVC-TYP-CD XPV-IVC-TYP-CD ; 
      10 XIP-IVC-STAT-CD XIP-IVC-STAT-CD ; 
end // end PV0OW03

Record PVRREC type basicRecord
  10 PVREGRP PVREGRP ; 
    15 PVR-ERR-SEQ-NBR PVR-ERR-SEQ-NBR ; 
    15 PVR-PMT-VEND-IVC-ID PVR-PMT-VEND-IVC-ID ; 
    15 PVR-PMT-VEND-NBR PVR-PMT-VEND-NBR ; 
    15 PVR-PMT-VEND-GRP PVR-PMT-VEND-GRP ; 
    15 PVR-IVC-ID PVR-IVC-ID ; 
    15 PVR-MSA-VEND-NBR PVR-MSA-VEND-NBR ; 
    15 PVR-MSA-VEND-GRP PVR-MSA-VEND-GRP ; 
    15 PVR-ERR-LD-DT PVR-ERR-LD-DT ; 
    15 PVR-ERR-MSG-ID PVR-ERR-MSG-ID ; 
    15 PVR-ERR-ACT-DESC PVR-ERR-ACT-DESC ; 
    15 PVR-CURR-STAT-CD PVR-CURR-STAT-CD ; 
    15 PVR-ERR-LD-CD PVR-ERR-LD-CD ; 
    15 PVR-ERR-PROC-CD PVR-ERR-PROC-CD ; 
    15 PVR-CSTMS-TXT PVR-CSTMS-TXT ; 
    15 ZZ-CHNG-USER-ID ZZ-CHNG-USER-ID ; 
    15 ZZ-SDT ZZ-SDT ; 
    15 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    15 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end PVRREC

DataItem PV0OW-BROK-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated Tolerance
DataItem PV0OW-CALC-TOLERANCE decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMM PCT THAT IS BANK TYPE LC
DataItem PV0OW-COMM-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XIB-IBANK-CD OF CURRENT LN ITM
DataItem PV0OW-CURR-IBANK-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0OW-DUTY-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUTY PCT THAT IS BANK TYPE LC
DataItem PV0OW-DUTY-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status of the DUTY pmt record
DataItem PV0OW-DUTY-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COUNT NUMBER OF FIELDS ENTERED
DataItem PV0OW-FIELD-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fiscal cc
DataItem PV0OW-FISCAL-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Filler
DataItem PV0OW-FISCAL-FILLER num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fiscal period
DataItem PV0OW-FISCAL-MONTH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fiscal yymm
DataItem PV0OW-FISCAL-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB PCT THAT IS BANK TYPE LC
DataItem PV0OW-FOB-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status of the FOB pmt record
DataItem PV0OW-FOB-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0OW-FRGT-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status of the FREIGHT pmt recd
DataItem PV0OW-FRGT-PMT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ACCUM TOTAL-CALC CANCEL FACTOR
DataItem PV0OW-LC-TOTALS-BY-BANK char(961)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PV0OW-LCRED-DBT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LINE ITM IS BANK TYPE 'LC'-Y/N
DataItem PV0OW-LINE-IS-LC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP2 ROW GROUP ITEM
DataItem PV0OW-MAP2-LINE-GROUP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAP3 ROW GROUP ITEM
DataItem PV0OW-MAP3-LINE-GROUP1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TYPE 60 FORCE REC EXISTS - Y/N
DataItem PV0OW-PREV-CANCEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM-pv0oW01 WORK STORAG
DataItem PV0OW-PV0OW01-GROUP char(1260)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR pv0oM002 DATA
DataItem PV0OW-PV0OW02-GROUP char(29000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ITEM FOR PV0OM003 DATA
DataItem PV0OW-PV0OW03-GROUP char(30800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// QTY PCT THAT IS BANK TYPE LC
DataItem PV0OW-QTY-LC-FACTOR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FORCE PAYMENT ERROR FLAG
DataItem PV0OW-SELEC-LIN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ROW SELECTION FLAG - pv0O.002
DataItem PV0OW-SELECT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pv0oW-SELECT-LINE-COUNT
DataItem PV0OW-SELECT-LINE-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUM OF ALL LC DSCT FOR A BANK
DataItem PV0OW-SUM-BANK-DSCT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUM OF LC DSCT FOR FACTRY IVC
DataItem PV0OW-SUM-FCTY-DSCT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL DUTY AMOUNT
DataItem PV0OW-TOTAL-DUTY-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FOB AMOUNT
DataItem PV0OW-TOTAL-FOB-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FREIGHT AMOUNT
DataItem PV0OW-TOTAL-FRGT-AMOUNT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Header needs to be updated:Y/N
DataItem PV0OW-UPDATE-HEADER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointerfor sumry
DataItem PV0OWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer for pmts
DataItem PV0OWBOT-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter for sumr
DataItem PV0OWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter for pmts
DataItem PV0OWCNT-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for sumry
DataItem PV0OWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing for pmts
DataItem PV0OWCUR-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// index USED IN PF17 DELETE PROC
DataItem PV0OWIDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index max
DataItem PV0OWIMX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 list table
DataItem PV0OWIX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 3 pmt details
DataItem PV0OWIX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE SELECTION
DataItem PV0OWIX4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map 2 LINE UPDATE
DataItem PV0OWIX5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Item Screen
DataItem PV0OWLST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Active Screen
DataItem PV0OWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0OWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of Item Scroll Lines
DataItem PV0OWMAX-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Numeric Work Area
DataItem PV0OWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prev Active Screen
DataItem PV0OWPRV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scratch Pad Written(Y/N)
DataItem PV0OWSCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for sumry
DataItem PV0OWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer for pmts
DataItem PV0OWTOP-MAP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-CSTMS-TXT char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-CURR-STAT-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-ERR-ACT-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-ERR-LD-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-ERR-LD-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PVR-ERR-MSG-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-ERR-PROC-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-ERR-SEQ-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PVR-IVC-ID char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-MSA-VEND-GRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-MSA-VEND-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-PMT-VEND-GRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-PMT-VEND-IVC-ID char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVR-PMT-VEND-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PVREGRP char(174)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

