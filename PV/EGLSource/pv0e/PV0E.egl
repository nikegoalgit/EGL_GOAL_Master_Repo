package pv0e;
import corpcom2.XSRREC;
import corpcom3.XPPV001;
import corpcom3.XPPV400;
import corpcom3.XPPV960;
import corpcom3.XPPV970;
import corpcom3.XPPV980;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS54;
import corpcom4.XSPVS57;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XFATBL;
import corpx2.XQACD;
import pc.common.PCMOSQTY;
import pv.common.*;
import pv.common.PVAREC;
import pv.common.PVBBSZDS;
import pv.common.PVBESZDS;
import pv.common.PVBLNAMT;
import pv.common.PVBLNCOM;
import pv.common.PVBLNDTY;
import pv.common.PVBLNFOB;
import pv.common.PVBLNINB;
import pv.common.PVBLNQTY;
import pv.common.PVBREC;
import pv.common.PVDERNBR;
import pv.common.PVFTBL;
import pv.common.PVOREC;
import pv.common.PVUREC;
import pv.common.PVXREC;
import pv.common.PVYREC;
import pv.common.PVZREC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;

//*** PROGRAM=PV0E ****
// ************************************************************
// *
// *   PV0E - Coding Errors and Force Coding
// *
// *   This application will be used to display on-line
// *   coding errors and will allow the 'FORCE' code process
// *   if requested by an authorized user.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       03-19-91  HVARGA  Initial Construction
// *       07-17-96  JLoyer  install bbasha mods to replace
// *                         pvovndsn with pvovndnm.
// *       03-01-00  JKUNDU  CHANGED IN XSPVS60 - Transfer
// *                         should go back to PV0B if PF3 IS
// *                         pressed in PV0D.
// ************************************************************
// *********************
Program PV0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PV0EW01 PV0EW01; // record
  PV0EW02 PV0EW02; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVLREC PVLREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVXREC PVXREC; // record
  PVYREC PVYREC; // record
  PVZREC PVZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XSRREC XSRREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PVDTBL {deleteAfterUse = yes}; // table
  use PVFTBL {deleteAfterUse = yes}; // table
  use XFATBL {deleteAfterUse = yes}; // table
  use PV0EM.PV0EM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0E000: PV0E000();
  end // end main
end // end PV0E

// PROCESS  Main Logic
Function PV0E000()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0E    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0E001(); /* Initialization Logic*/

  PV0ES01(); /* Check Who Invoked this Application*/

  while (PVUREC.PVUENDOA == "N") /* Continue on*/
    PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
    PV0E100(); /* Converse MAP*/
    PV0E110(); /* Check PF Keys and Exits*/
    PV0E120(); /* Check what to do next*/
    PV0E130(); /* Determine next Map action*/
  end

  exit program; /* Done!*/

  return; /* Last Statement*/


   /* ***  End of PV0E000  ****/
end // end PV0E000

// INIT     Routine
Function PV0E001()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  set PV0EW01 empty;
  set PV0EW02 empty;
  set PV0EM100 initial;

  set PVLREC empty;
  set PVXREC empty;
  set PVZREC empty;
  set TA2REC empty;
  set XSRREC empty;

  XSPVS01(); /* Initialize PV Common Routine Fields*/

  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAPAP = TA1REC.TA1PGMNM;
  TA1REC.TA1MAPNO = "M100";

    /* Get System Date and Time*/
  PV0ES09();

    /* Set Maximum Scroll Lines*/
  PV0EW01.PV0EWMAX = 15;

   /* Set Successful Flag*/
  PV0EW01.PV0EWSUC = 0;

  return; /* Last Statement*/

   /* ***  End of PV0E001  ****/
end // end PV0E001

// CONVERSE CODING Errors Screen
Function PV0E100()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse CODE Errors Screen                      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0EM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end

  PV0EM100.TA2TIMED = VGVar.currentFormattedTime;


  converse PV0EM100 ;

  return; /* Last Statement*/


   /* ***  End of PV0E100  ****/
end // end PV0E100

// CHECK    PF Keys and Exits
Function PV0E110()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)
    PV0E401(); /* Purge Scratch Pad*/
    PV0ES08(); /* Clear COMMAREA Flags*/
  end
  XPPV001(); /* Check PV Standard PF Keys*/

  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
         /* BACKWARD performed. Please proceed*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
           /* FORWARD performed. Please proceed*/
          PVUREC.PVUERNBR = 4;
        else
          if (converseVar.eventKey is pf15) /* Force Code*/
            PVUREC.PVUERNBR = PV0EW01.PV0EWSUC;
          else
             /* Invalid PF Key*/
            PVUREC.PVUERNBR = 1;
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0E110  ****/
end // end PV0E110

// CHECK    What to do next
Function PV0E120()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
     /* next sentence*/
  else
    PV0ES30(); /* Check if ENTER key was pressed*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y") /* Check General Error Flag*/
       /* next sentence*/
    else
      PV0E150(); /* Check if allowed to continue*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0E120  ****/
end // end PV0E120

// DECIDE   Next Map Action
Function PV0E130()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Determine the Next Map Action           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PV0EW01.PV0EWPFM == "Y")
    if (PVZREC.PVZCODER == "1")
       /* Successful Code*/
      PVUREC.PVUERNBR = 79;
    end
    PV0EM100.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CATOAP = PV0EM100.CATOAP;
    PVUREC.PVUPVZRC = PVZREC.PVZGRP;
    COMMAREA.CAUSERA = PVUREC.PVUGROUP;
    PV0EW02.PV0EWTOP = PV0EW02.PV0EWBOT;
    PV0ES92(); /* Clear Scroll Lines*/
    set PV0EM100.CATOAP cursor, skip;
    set PV0EM100.CAITEM skip;
  end

  return; /* Last Statement*/


   /* ***  End of PV0E130  ****/
end // end PV0E130

// CHECK    if allowed to continu
Function PV0E150()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0ES03(); /* Send the user back to PV0A.*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf15
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf24)
         /* next sentence*/
      end
    end
  else
    if (converseVar.eventKey is enter)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
        PV0E170(); /* Go Back One Screen*/
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
          PV0E180(); /* Go Forward One Screen*/
        else
          if (converseVar.eventKey is pf15)
            if (PVUREC.PVUINQRY == "Y")
               /* Insufficient Authority for Function Requested*/
              PVUREC.PVUERNBR = 2;
            else
              PV0E190(); /* Force Code*/
            end
          end
        end
      end
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0E150  ****/
end // end PV0E150

// BACK     One Page Routine
Function PV0E170()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/


  if (PV0EW02.PV0EWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf24)
      PV0EW02.PV0EWTOP = 1;
       /* TOP of Screen Displayed.*/
      PVUREC.PVUERNBR = 61;
    else
      if (converseVar.eventKey is pf19)
        PV0EW02.PV0EWTOP = PV0EW02.PV0EWCUR - PV0EW01.PV0EWMAX / 2;
      else
        PV0EW02.PV0EWTOP = PV0EW02.PV0EWCUR - PV0EW01.PV0EWMAX;
      end
      if (PV0EW02.PV0EWTOP <= 0)
        PV0EW02.PV0EWTOP = 1;
      end
    end
    PV0ES92(); /* Build Scroll Lines*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0E170  ****/
end // end PV0E170

// FORWARD  One Page Routine
Function PV0E180()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  if (converseVar.eventKey is pf20)
    PV0EW02.PV0EWTOP = PV0EW02.PV0EWCUR + PV0EW01.PV0EWMAX / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0EW02.PV0EWTOP = PV0EW02.PV0EWBOT - PV0EW01.PV0EWMAX;
    end
  end

  if (PV0EW02.PV0EWTOP >= PV0EW02.PV0EWBOT)
    PV0EW02.PV0EWTOP = PV0EW02.PV0EWBOT - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end

  if (PV0EW02.PV0EWTOP <= 0)
    PV0EW02.PV0EWTOP = 1;
  end

  PV0ES92(); /* Build Scroll Lines*/

  return; /* Last Statement*/


   /* ***  End of PV0E180  ****/
end // end PV0E180

// FORCE    CODE Routine
Function PV0E190()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Force Code                                        ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUERNBR == PV0EW01.PV0EWSUC)
    PV0E401(); /* Purge Old Scratch Pad*/
    PV0EW01.PV0EWPFM = "Y"; /* Set FORCE CODE Performed Flag*/
    PV0ES09(); /* Get System Date and Time*/
    move PV0EM100 to PVUREC withV60Compat;
    XSPVS54(); /* Create VFORCE01 Entries*/
    PV0E196(); /* Change IVC Status to CP*/
  end

  return; /* Last Statement*/


   /* ***  End of PV0E190  ****/
end // end PV0E190

// CHANGE   IVC Status to CP
Function PV0E196()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Change Invoice Status to CP                      ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVAREC.XIPCD = "CP";
  PVAREC.PVAFRCFL = "Y";
  PVAREC.PVAXIPDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  set SQLCA empty;
  call "IO5660" ("U ", SQLCA, PVAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    PVZREC.PVZCODER = "1";
  else
    TA1REC.TA1LOC = "PV0E196";
    TA1REC.TA1DBASE = "DPINVC";
    TA1REC.TA1TBLVU = "VPVHDR01";
    TA1REC.TA1TBLKE = PVZREC.PVAIVCID;
    XSPVS52();
  end

  return; /* Last Statement*/


   /* ***  End of PV0E196  ****/
end // end PV0E196

// READ     SCRATCH PAD IO3400
Function PV0E400()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Scratch Pad                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSRREC.XSRSYSID = "PV  ";
  XSRREC.XSRSUBID = COMMAREA.CAUSERID;
  XSRREC.XSRSQNBR = 1;

  PVYREC.PVYFNC = "S ";
  XPPV400(); /* IOMOD VCSPAD01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PVXREC.PVXGRP = XSRREC.XSRDATA;
    PVZREC.PVOVENDR = PVXREC.PVOVENDR;
    PVZREC.PVOVENDG = PVXREC.PVOVENDG;
    PVZREC.PVAIVCID = PVXREC.PVAIVCID;
  end

  return; /* Last Statement*/


   /* ***  End of PV0E900  ****/
end // end PV0E400

// DELETE   SCRATCH PAD IO3400
Function PV0E401()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Delete Scratch Pad                               ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVUREC.PVUSCRDL == "Y")
     /* next sentence*/
  else
     /* MOVE COMMAREA.CACURSYS TO XSRREC.XSRSYSID;*/
     /* MOVE COMMAREA.CAUSERID TO XSRREC.XSRSUBID;*/
     /* MOVE 1 TO XSRREC.XSRSQNBR;*/

    PVYREC.PVYFNC = "D ";
    XPPV400(); /* IOMOD VCSPAD01*/

    PVUREC.PVUSCRDL = "Y";
  end

  return; /* Last Statement*/


   /* ***  End of PV0E401  ****/
end // end PV0E401

// READ     IVC HEADER IO5660
Function PV0E960()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Header                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVAREC.PVOVENDR = PVZREC.PVOVENDR;
  PVAREC.PVOVENDG = PVZREC.PVOVENDG;
  PVAREC.PVAIVCID = PVZREC.PVAIVCID;

  PVBREC.PVOVENDR = PVZREC.PVOVENDR;
  PVBREC.PVOVENDG = PVZREC.PVOVENDG;
  PVBREC.PVAIVCID = PVZREC.PVAIVCID;

  PVYREC.PVYFNC = "S ";
  XPPV960(); /* IOMOD VPVHDR01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (PVAREC.XIPCD == "MT"
     || PVAREC.XIPCD == "IC")
         /* next sentence*/
    else
         /* Invalid Status to Update*/
      PVUREC.PVUERNBR = 7;
      PV0ES10();
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0E960  ****/
end // end PV0E960

// READ     IVC ITEM IO5670
Function PV0E970()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **             Read Invoice Line Item                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVYREC.PVYFNC = "S ";
  XPPV970(); /* IOMOD VPVITM01*/

  return; /* Last Statement*/


   /* ***  End of PV0E970  ****/
end // end PV0E970

// READ     VENDOR NAME IO5680
Function PV0E980()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVOREC.PVOVENDR = PVZREC.PVOVENDR;
  PVOREC.PVOVENDG = PVZREC.PVOVENDG;

  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PVOREC.PVOVNDNM = "*NAME NOT FOUND";
  end

  return; /* Last Statement*/


   /* ***  End of PV0E980  ****/
end // end PV0E980

// CHECK    Who Invoked me
Function PV0ES01()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check if the call was Legitimate                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSENTRY();
  XSSEGTR();

  PVZREC.PVZGRP = PVUREC.PVUPVZRC;
  if (PVZREC.PVZRECRD == "PVZREC  "
   || COMMAREA.CAFROMAP == "PV0A"
   || COMMAREA.CAFROMAP == "PV0M")
    PVZREC.PVZGRP = COMMAREA.CAUSERA;
    PV0ES04(); /* Check Security Access Type*/
    PV0ES05(); /* Build the Screen*/
  else
    PV0ES10(); /* Set Not Allowed*/
     /* Insufficient Authority for function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES01  ****/
end // end PV0ES01

// GO BACK  to PV0A Application
Function PV0ES03()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to PV0A Application                     ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0E401(); /* Purge Scratch Pad*/

  XSPVS60(); /* PV Common Exit*/
  PV0ES50(); /* Exit Routine*/

  return; /* Last Statement*/


   /* ***  End of PV0ES03  ****/
end // end PV0ES03

// CHECK    Security Access Type
Function PV0ES04()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **    This routine will set Inquiry only Flag if needed.  ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (COMMAREA.CACHGFL == "N")
    PVUREC.PVUINQRY = "Y"; /* Set Inquiry mode*/
     /* Insufficient Authority for Function Requested*/
    PVUREC.PVUERNBR = 2;
  end

  if (PVZREC.PVZCODER == "4")
    PVUREC.PVUINQRY = "Y"; /* Set Inquiry mode*/
     /* Non-Tolerance error, FORCE CODE not allowed*/
    PVUREC.PVUERNBR = 80;
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES04  ****/
end // end PV0ES04

// BUILD    the Screen
Function PV0ES05()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build the screen                                ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0E400(); /* Read Scratch Pad*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PV0E960(); /* Read Invoice Header*/
    PV0E980(); /* Get  Vendor Name*/

    PV0EM100.PVOVENDR = PVOREC.PVOVENDR;
    PV0EM100.PVOVENDG = PVOREC.PVOVENDG;
    PV0EM100.PVOVNDNM = PVOREC.PVOVNDNM;

    if (PVZREC.PVZCODER == "2")
      PV0EM100.PVZCODER = "  TOLERANCE  ";
    else
      if (PVZREC.PVZCODER == "4")
        PV0EM100.PVZCODER = "NON-TOLERANCE";
      end
    end

    move PVAREC to PV0EM100 withV60Compat;

    if (XSRREC.XSRSQNBR > 0)
      PV0ES90(); /* Build Screen Working Storage*/
      PV0ES92(); /* Build Scroll Lines*/
    end

  end

  return; /* Last Statement*/


   /* ***  End of PV0ES05  ****/
end // end PV0ES05

// CHECK    Tolerance Error
Function PV0ES06()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Tolerance Error                           ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (PVXREC.PVXTOLER[PV0EWBOT] == 0)
     /* next sentence*/
  else
    PV0EW02.PV0EWTCT = PV0EW02.PV0EWTCT + 1;
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES06  ****/
end // end PV0ES06

// CLEAR    COMMAREA Flags
Function PV0ES08()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Clear COMMAREA Flags                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVZREC.PVZCODER = " ";
  PVUREC.PVUPVZRC = PVZREC.PVZGRP;
  COMMAREA.CAUSERA = PVUREC.PVUGROUP;

  return; /* Last Statement*/


   /* ***  End of PV0ES08  ****/
end // end PV0ES08

// GET      System Date and Time
Function PV0ES09()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0EM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0EM100.TA2TIMED = TA2REC.TA2TIMED;

  return; /* Last Statement*/


   /* ***  End of PV0ES09  ****/
end // end PV0ES09

// SET      Not Allowed
Function PV0ES10()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Do not Allow to continue                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PVUREC.PVUALLWD = "N";
  PV0EM100.CATOAP = COMMAREA.CAFROMAP;
  PV0EM100.CAITEM = " ";
  set PV0EM100.CATOAP protect;
  set PV0EM100.CAITEM protect;

  return; /* Last Statement*/


   /* ***  End of PV0ES10  ****/
end // end PV0ES10

// CHECK    FASTPATH
Function PV0ES30()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/

  if (converseVar.eventKey is enter /* Check if ENTER key was pressed*/
   || PV0EW01.PV0EWPFM == "Y"       /* or After FORCE Code*/
   || PVUREC.PVUALLWD == "N")       /* or not allowed to continue*/
    if (PV0EM100.CATOAP == " ") /* Nothing was entered in OPTION*/
       /* next sentence*/
    else
      PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Set General Error Flag*/
      PV0E401(); /* Purge Scratch Pad*/
      PV0ES08(); /* Clear COMMAREA Flags*/
      COMMAREA.CATOAP = PV0EM100.CATOAP;
      COMMAREA.CAITEM = PV0EM100.CAITEM;
      PV0ES50(); /* Exit Routine*/
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES30  ****/
end // end PV0ES30

// EXIT     Routine (XSEXIT)
Function PV0ES50()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/

  XSEXIT();
  PV0EM100.VAGen_EZEMSG = COMMAREA.CAMSG;

  return; /* Last Statement*/


   /* ***  End of PV0ESXT  ****/
end // end PV0ES50

// BUILD    Screen WS
Function PV0ES90()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Screen Working Storage                    ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0EW02.PV0EWTOP = 1;
  PV0EW02.PV0EWBOT = 1;
  while (PV0EW02.PV0EWBOT <= 200
   && PVXREC.PVXERNBR[PV0EWBOT] > 0)
    sysVar.arrayIndex = PVXREC.PVXERNBR[PV0EWBOT];
    if (PVFTBL.PVDXFACD[sysVar.arrayIndex] == 0)
       /* One of the errors has no equivalent Force Code or Inactive*/
      PVUREC.PVUERNBR = 104;
      PVUREC.PVUINQRY = "Y";
    else
      sysVar.arrayIndex = PVFTBL.PVDXFACD[sysVar.arrayIndex];
      if (XFATBL.XXXSTAT[sysVar.arrayIndex] == "I")
         /* One of the errors has no equivalent Force Code or Inactive*/
        PVUREC.PVUERNBR = 104;
        PVUREC.PVUINQRY = "Y";
      end
    end
    if (PVXREC.PVBLNINB[PV0EWBOT] == PVBREC.PVBLNINB
     || PVXREC.PVBLNINB[PV0EWBOT] == 0)
       /* next sentence*/
    else
      PVBREC.PVBLNINB = PVXREC.PVBLNINB[PV0EWBOT];
      PV0E970(); /* Read VPVITM01 IO5670*/
    end
    if (PVXREC.PVBLNINB[PV0EWBOT] == 0)
       /* next sentence*/
    else
      PV0EW02.SY1STNBR[PV0EWBOT] = PVBREC.SY1STNBR;
      PV0EW02.SY2CLRID[PV0EWBOT] = PVBREC.SY2CLRID;
      PV0EW02.XQACD[PV0EWBOT] = PVBREC.XQACD;
      PV0EW02.PVBBSZDS[PV0EWBOT] = PVBREC.PVBBSZDS;
      PV0EW02.PVBESZDS[PV0EWBOT] = PVBREC.PVBESZDS;
      PV0EW02.PVBLNFOB[PV0EWBOT] = PVBREC.PVBLNFOB;
      PV0EW02.PVBLNCOM[PV0EWBOT] = PVBREC.PVBLNCOM;
      PV0EW02.PVBLNDTY[PV0EWBOT] = PVBREC.PVBLNDTY;
      PV0EW02.PVBLNAMT[PV0EWBOT] = PVBREC.PVBLNAMT;
      PV0EW02.PCMOSQTY[PV0EWBOT] = PVBREC.PCMOSQTY;
    end

    if (PVXREC.PVXTOLER[PV0EWBOT] == 0)
       /* next sentence*/
    else
      PV0ES06(); /* Check Tolerance Error*/
    end

    PV0EW02.PV0EWBOT = PV0EW02.PV0EWBOT + 1;
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES90  ****/
end // end PV0ES90

// BUILD    Scroll Lines
Function PV0ES92()

   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Scroll Lines                              ***/
   /* ***                                                      ****/
   /* *************************************************************/

  PV0EW02.PV0EWCUR = PV0EW02.PV0EWTOP;
  PV0EW01.PVBLNINB = 0;
  PV0EW02.PV0EWCNT = 0;
  while (PV0EW02.PV0EWCNT < PV0EW01.PV0EWMAX)
    PV0EW02.PV0EWCNT = PV0EW02.PV0EWCNT + 1;
    if (PV0EW02.PV0EWTOP == PV0EW02.PV0EWBOT
     || PV0EW02.PV0EWBOT == 0)
      PV0EM100.SY1STNBR[PV0EWCNT] = " ";
      PV0EM100.SY2CLRID[PV0EWCNT] = " ";
      PV0EM100.XQACD[PV0EWCNT] = " ";
      PV0EM100.PVBBSZDS[PV0EWCNT] = " ";
      PV0EM100.PVBESZDS[PV0EWCNT] = " ";
      PV0EM100.PVDERDSC[PV0EWCNT] = " ";
      PV0EM100.PVXTOLER[PV0EWCNT] = 0;
      PV0EM100.PVXACTAM[PV0EWCNT] = 0;
      PV0EM100.PVXPRCNT[PV0EWCNT] = 0;
      PV0EM100.PVBLNINB[PV0EWCNT] = 0;
    else
      if (PVXREC.PVBLNINB[PV0EWTOP] == PV0EW01.PVBLNINB)
        PV0EM100.SY1STNBR[PV0EWCNT] = " ";
        PV0EM100.SY2CLRID[PV0EWCNT] = " ";
        PV0EM100.XQACD[PV0EWCNT] = " ";
        PV0EM100.PVBBSZDS[PV0EWCNT] = " ";
        PV0EM100.PVBESZDS[PV0EWCNT] = " ";
      else
        PV0EW01.PVBLNINB = PVXREC.PVBLNINB[PV0EWTOP];
        PV0EM100.SY1STNBR[PV0EWCNT] = PV0EW02.SY1STNBR[PV0EWTOP];
        PV0EM100.SY2CLRID[PV0EWCNT] = PV0EW02.SY2CLRID[PV0EWTOP];
        PV0EM100.XQACD[PV0EWCNT] = PV0EW02.XQACD[PV0EWTOP];
        PV0EM100.PVBBSZDS[PV0EWCNT] = PV0EW02.PVBBSZDS[PV0EWTOP];
        PV0EM100.PVBESZDS[PV0EWCNT] = PV0EW02.PVBESZDS[PV0EWTOP];
      end
      sysVar.arrayIndex = PVXREC.PVXERNBR[PV0EWTOP];
      PV0EW02.PV0EWDES = PVFTBL.PVDERDSC[sysVar.arrayIndex];
      if (PVXREC.PVXACTAM[PV0EWTOP] < 0)
        PV0EW02.PV0EWGLT = "<";
      else
        if (PVXREC.PVXACTAM[PV0EWTOP] > 0)
          PV0EW02.PV0EWGLT = ">";
        end
      end
      PV0EM100.PVDERDSC[PV0EWCNT] = PV0EW02.PV0EWDES;
      PV0EM100.PVXTOLER[PV0EWCNT] = PVXREC.PVXTOLER[PV0EWTOP];
      PV0EM100.PVXACTAM[PV0EWCNT] = PVXREC.PVXACTAM[PV0EWTOP];
      PV0EM100.PVXPRCNT[PV0EWCNT] = PVXREC.PVXPRCNT[PV0EWTOP];
      PV0EM100.PVBLNINB[PV0EWCNT] = PVXREC.PVBLNINB[PV0EWTOP];
      PV0EW02.PV0EWTOP = PV0EW02.PV0EWTOP + 1;
    end
  end

  return; /* Last Statement*/


   /* ***  End of PV0ES92  ****/
end // end PV0ES92

//*** RECORD=PV0EW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0EW01 type basicRecord
  5 PV0EWMAX PV0EWMAX ; 
  5 PV0EWSUC PV0EWSUC ; 
  5 PV0EWPFM PV0EWPFM ; 
  5 PVBLNINB PVBLNINB ; 
end // end PV0EW01

//*** RECORD=PV0EW02 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-14-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0EW02 type basicRecord
  5 PV0EWTCT PV0EWTCT ; 
  5 PV0EWTOP PV0EWTOP ; 
  5 PV0EWBOT PV0EWBOT ; 
  5 PV0EWCNT PV0EWCNT ; 
  5 PV0EWCUR PV0EWCUR ; 
  5 PV0EWDES PV0EWDES ; 
    10 PV0EWDSC PV0EWDSC ; 
    10 PV0EWGLT PV0EWGLT ; 
  5 PV0EWSCR PV0EWSCR [200] ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XQACD XQACD ; 
    10 PVBBSZDS PVBBSZDS ; 
    10 PVBESZDS PVBESZDS ; 
    10 PVDERNBR PVDERNBR ; 
    10 PVBLNFOB PVBLNFOB ; 
    10 PVBLNCOM PVBLNCOM ; 
    10 PVBLNDTY PVBLNDTY ; 
    10 PVBLNAMT PVBLNAMT ; 
    10 PVBLNQTY PVBLNQTY ; 
    10 PCMOSQTY PCMOSQTY ; 
end // end PV0EW02

// Bottom Line Pointer
DataItem PV0EWBOT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Screen Scroll Counter
DataItem PV0EWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing
DataItem PV0EWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Error Message Description
DataItem PV0EWDES char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Error Message
DataItem PV0EWDSC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Greater or Less than Sign
DataItem PV0EWGLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Scroll Lines
DataItem PV0EWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Force Code Performed Flag
DataItem PV0EWPFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Working Storage
DataItem PV0EWSCR char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Successful Flag
DataItem PV0EWSUC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tolerance GT 0 Count
DataItem PV0EWTCT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer
DataItem PV0EWTOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

