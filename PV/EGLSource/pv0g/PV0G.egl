package pv0g;
import corpcom2.XX0XW02;
import corpcom3.XPPV001;
import corpcom3.XPPV960;
import corpcom3.XPPV980;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPVS01;
import corpcom4.XSPVS52;
import corpcom4.XSPVS57;
import corpcom4.XSPVS60;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLADESC;
import corpcom5.GLANTAC;
import corpcom5.GLAPRJ;
import corpcom5.GLARCID;
import corpcom5.GLASDESC;
import corpcom5.GLASUB;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import pv.common.*;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.XQACD;
import xx.common.YISCD;
import xx.common.ZZZCHGCT;
import xx.common.ZZZCHGDT;
import xx.common.ZZZCHGTM;
import xx.common.ZZZSDT;
import xx01.*;
import xx01.XAOCD;
import xx01.XAOTBL;
import xx02.*;
import xx02.XDMCD;
import xx02.XDMTBL;
import xx03.*;
import xx03.GLAENT;
import xx05.*;
import xx05.XQATBL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YISTBL;
import xx09.*;
import xx09.YSMSYSPF;
//*** PROGRAM=PV0G ****
// ************************************************************
// *
// *   PV0G - Completed Invoice Adjustments
// *
// *   This application will be used to adjust the G/L and
// *   profitability figures of an invoice.
// *
// ************************************************************
// * Maintenance History
// *
// *Rev #    Date    Prgrmr  Remarks
// *-----  --------  ------  ----------------------------------
// *       05-14-91  HVARGA  Initial Construction
// *       07-16-96  JLoyer  Install bbasha mods to replace
// *                         pvovndsn with pvovndnm.
// *       03-01-00  JKUNDU  CHANGED IN XSPVS60 - Transfer
// *                         should go back to PV0B if PF3 IS
// *                         pressed in PV0D.
// ************************************************************
// *********************
Program PV0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GLBREC GLBREC; // record
  PV0GW01 PV0GW01; // record
  PV0GW02 PV0GW02; // record
  PV0GW03 PV0GW03; // record
  PVAREC PVAREC; // record
  PVBREC PVBREC; // record
  PVCREC PVCREC; // record
  PVDREC PVDREC; // record
  PVOREC PVOREC; // record
  PVUREC PVUREC; // record
  PVYREC PVYREC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAOTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use YISTBL {deleteAfterUse = yes}; // table
  use PV0GM.PV0GM100,  // forms
      PV0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PV0G000: PV0G000();
  end // end main
end // end PV0G

// PROCESS  Main Logic
Function PV0G000()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            PV0G    M a i n    L o g i c                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0G001(); /* Initialization Logic*/
  ;
  PV0GS01(); /* Check Who Invoked me*/
  ;
  while (PVUREC.PVUENDOA == "N")
    PV0G100(); /* Converse PV0GM100*/
    PV0G110(); /* Check PF Keys and Exits*/
    PV0G120(); /* Check what to do next*/
  end
  ;
  exit program;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G000  ****/
end // end PV0G000

// INIT     Routine
Function PV0G001()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Initialization   L o g i c                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GW01 empty;
  set PV0GW02 empty;
  set PV0GW03 empty;
  set XX0XW02 empty;
  set PV0GM100 initial;
  ;
  set GLBREC empty;
  set PVCREC empty;
  set PVDREC empty;
  set SY2REC empty;
  set TA2REC empty;
  ;
  XSPVS01(); /* Initialize PV Common Routine Fields*/
  ;
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Initialize DB2 Error Record*/
  TA1REC.TA1MAPAP = TA1REC.TA1PGMNM;
  TA1REC.TA1MAPNO = "M100";
  ;
    /* Get System Date and Time*/
  PV0GS09();
  ;
    /* Set Maximum Scroll Lines*/
  PV0GW01.PV0GWMAX = 13;
  ;
   /* Set Active Screen*/
  PV0GW01.PV0GWMAP = "1";
  PV0GS15(); /* Reset Cursor Pointers*/
  ;
  PV0GW01.PV0GWKEY = PV0GW01.PV0GWPKY; /* Save Blank Key*/
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0G001  ****/
end // end PV0G001

// CONVERSE CODING Adj Screen
Function PV0G100()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Converse Coding Adjustment Screen                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y")
     /* next sentence*/
  else
    if (PVUREC.PVUERROR[PVUERVND] == "Y")
      set PV0GM100.PVOVENDR cursor, bold;
      PV0GM100.PVOVNDNM = " ";
    else
      if (PVUREC.PVUERROR[PVUERIVC] == "Y"
       || PVUREC.PVUINQRY == "Y")
        set PV0GM100.PVAIVCID cursor, bold;
      end
    end
  end
  ;
  XSPVS57(); /* Deliver a message*/
  if (PVUREC.CAMSG == " ")
     /* next sentence*/
  else
    PV0GM100.VAGen_EZEMSG = PVUREC.CAMSG;
  end
  ;
  PV0GM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0GM100.TA2TIMED = VGVar.currentFormattedTime;
  ;
  if (PV0GW01.PV0GWMAP == "1")
    set PV0GM100.PV0GMGLA skip, bold;
    set PV0GM100.PV0GMGDF skip, bold;
  else
    set PV0GM100.PV0GMPFA skip, bold;
    set PV0GM100.PV0GMPDF skip, bold;
  end
  ;
  if (PV0GM100.PVCAETYP == "0")
    PV0GM100.PV0GMTYP = "REGULAR";
  else
    if (PV0GM100.PVCAETYP == "1"
     || PV0GM100.PVCAETYP == "2")
      PV0GM100.PV0GMTYP = "ACCRUAL";
    else
      if (PV0GM100.PVCAETYP == "3"
       || PV0GM100.PVCAETYP == "4")
        PV0GM100.PV0GMTYP = "REVERSAL";
      else
        PV0GM100.PV0GMTYP = " ";
      end
    end
  end
  ;
  if (PVUREC.PVUCHOIC == 02)
    PV0GM100.PV0GFUNC = "ADJUSTMENTS";
  else
    PV0GM100.PV0GFUNC = "INQUIRY";
  end
  ;
  converse PV0GM100 ;
  ;
  set PV0GM100.PV0GMGLA initialAttributes;
  set PV0GM100.PV0GMGDF initialAttributes;
  set PV0GM100.PV0GMPFA initialAttributes;
  set PV0GM100.PV0GMPDF initialAttributes;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G100  ****/
  ;
  return; /* Last Statement*/
end // end PV0G100

// CHECK    PF Keys and Exits
Function PV0G110()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      This will Check for PF Keys and Exit Requests     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XPPV001(); /* Check PV Standard PF Keys*/
  ;
  if (COMMAREA.CASECRC == 0)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf5
     || converseVar.eventKey is pf15)
       /* next sentence*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf24)
         /* BACKWARD Performed. Please proceed.*/
        PVUREC.PVUERNBR = 5;
      else
        if (converseVar.eventKey is pf8
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf20)
           /* FORWARD Performed. Please proceed.*/
          PVUREC.PVUERNBR = 4;
        else
           /* Invalid PF Key*/
          PVUREC.PVUERNBR = 1;
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G110  ****/
end // end PV0G110

// CHECK    What to do next
Function PV0G120()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check what to do next                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  ;
  PV0GS30(); /* Check FASTPATH*/
  if (PVUREC.PVUERNBR == 63 /* Check Error*/
   || COMMAREA.CASECRC > 0)
     /* next sentence*/
  else
    PV0G150(); /* Check if allowed to continue*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G120  ****/
end // end PV0G120

// CHECK    if allowed to continu
Function PV0G150()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check if the user is allowed to continue.         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUALLWD == "N") /* Not allowed to continue.*/
    if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
      PV0GS03(); /* Send the user back*/
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is pf5
       || converseVar.eventKey is pf9
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf15
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf24)
         /* next sentence*/
      end
    end
  else
    PV0GS25(); /* Look for Cursor*/
    if (converseVar.eventKey is enter)
      PV0G500(); /* Check for Help Request*/
      if (PVUREC.PVUERROR[PVUERGEN] == " ")
        PV0GS60();
        if (PVUREC.PVUERROR[PVUERIVC] == " "
         && PVUREC.PVUERROR[PVUERGEN] == " ")
          PV0GS82();
        end
      end
    else
      if (PVUREC.PVUERROR[PVUERGEN] == "Y")
         /* Function Not Allowed Because of Existing Errors*/
        PVUREC.PVUERNBR = 99;
        return;
      else
        if (converseVar.eventKey is pf7
         || converseVar.eventKey is pf19
         || converseVar.eventKey is pf24)
          if (PV0GW01.PV0GWMAP == "1")
            PV0G170(); /* Go Back One Screen (GL)*/
          else
            PV0G171(); /* Go Back One Screen (PROF)*/
          end
          PV0GS26(); /* Position Cursor*/
        else
          if (converseVar.eventKey is pf8
           || converseVar.eventKey is pf12
           || converseVar.eventKey is pf20)
            if (PV0GW01.PV0GWMAP == "1")
              PV0G180(); /* Go Forward One Screen (GL)*/
            else
              PV0G181(); /* Go Forward One Screen (PROF)*/
            end
            PV0GS26(); /* Position Cursor*/
          else
            if (converseVar.eventKey is pf5)
              if (PVUREC.PVUERROR[PVUERIVC] == "Y")
                 /* Enter Invoice Key Fields and press Enter*/
                PVUREC.PVUERNBR = 3;
                return;
              else
                if (PV0GW01.PV0GWMAP == "1")
                  PV0GW02.PV0GWTP2 = PV0GW02.PV0GWCUR;
                  PV0GW01.PV0GWMAP = "2";
                else
                  PV0GW03.PV0GWTP3 = PV0GW03.PV0GWCUR;
                  PV0GW01.PV0GWMAP = "1";
                end
                PV0GS92();
                PV0GS26(); /* Position Cursor*/
              end
            else
              if (converseVar.eventKey is pf15)
                if (PVUREC.PVUERROR[PVUERIVC] == "Y")
                   /* Enter Invoice Key Fields and press Enter*/
                  PVUREC.PVUERNBR = 3;
                  return;
                else
                  if (PVUREC.PVUINQRY == "Y"
                   || COMMAREA.CACURRAP != "PV0G")
                     /* Inquiry Mode*/
                    PVUREC.PVUERNBR = 107;
                    return;
                  else
                    PV0GS70(); /* Apply Update*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G150  ****/
end // end PV0G150

// BACK     One Page Routine
Function PV0G170()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GW03.PV0GWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0GW03.PV0GWTP3 = PV0GW03.PV0GWCUR - PV0GW01.PV0GWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0GW03.PV0GWTP3 = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0GW03.PV0GWTP3 = PV0GW03.PV0GWCUR - PV0GW01.PV0GWMAX;
      end
    end
    if (PV0GW03.PV0GWTP3 <= 0)
      PV0GW03.PV0GWTP3 = 1;
    end
    PV0GS92(); /* Build Scroll Lines*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G170  ****/
end // end PV0G170

// BACK     One Page Routine
Function PV0G171()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Back One Page or at the TOP.                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GW02.PV0GWCUR == 1)
     /* TOP of Screen Displayed.*/
    PVUREC.PVUERNBR = 61;
  else
    if (converseVar.eventKey is pf19)
      PV0GW02.PV0GWTP2 = PV0GW02.PV0GWCUR - PV0GW01.PV0GWMAX / 2;
    else
      if (converseVar.eventKey is pf24)
        PV0GW02.PV0GWTP2 = 1;
         /* TOP of Screen Displayed.*/
        PVUREC.PVUERNBR = 61;
      else
        PV0GW02.PV0GWTP2 = PV0GW02.PV0GWCUR - PV0GW01.PV0GWMAX;
      end
    end
    if (PV0GW02.PV0GWTP2 <= 0)
      PV0GW02.PV0GWTP2 = 1;
    end
    PV0GS92(); /* Build Scroll Lines*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G171  ****/
end // end PV0G171

// FORWARD  One Page Routine
Function PV0G180()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf20)
    PV0GW03.PV0GWTP3 = PV0GW03.PV0GWCUR + PV0GW01.PV0GWMAX / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0GW03.PV0GWTP3 = PV0GW03.PV0GWBT3 - PV0GW01.PV0GWMAX;
    end
  end
  ;
  if (PV0GW03.PV0GWTP3 <= 0)
    PV0GW03.PV0GWTP3 = 1;
  end
  ;
  if (PV0GW03.PV0GWTP3 >= PV0GW03.PV0GWBT3)
    PV0GW03.PV0GWTP3 = PV0GW03.PV0GWBT3 - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end
  ;
  PV0GS92(); /* Build Scroll Lines*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G180  ****/
end // end PV0G180

// FORWARD  One Page Routine
Function PV0G181()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Go Forward One Page or at the BOTTOM.             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is pf20)
    PV0GW02.PV0GWTP2 = PV0GW02.PV0GWCUR + PV0GW01.PV0GWMAX / 2;
  else
    if (converseVar.eventKey is pf12)
       /* Bottom of Screen Displayed.*/
      PVUREC.PVUERNBR = 62;
      PV0GW02.PV0GWTP2 = PV0GW02.PV0GWBT2 - PV0GW01.PV0GWMAX;
    end
  end
  ;
  if (PV0GW02.PV0GWTP2 <= 0)
    PV0GW02.PV0GWTP2 = 1;
  end
  ;
  if (PV0GW02.PV0GWTP2 >= PV0GW02.PV0GWBT2)
    PV0GW02.PV0GWTP2 = PV0GW02.PV0GWBT2 - 1;
     /* Bottom of Screen Displayed.*/
    PVUREC.PVUERNBR = 62;
  end
  ;
  PV0GS92(); /* Build Scroll Lines*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G181  ****/
end // end PV0G181

// READ     Valid GL Number
Function PV0G420()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       READ Valid GL Number                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  GLBREC.GLBGRP = PV0GM100.PV0GMGLC[PV0GWCN3];
  GLBREC.YSMSYSPF = "PV";
  ;
  PVYREC.PVYFNC = "S ";
  XPPV420(); /* IOMOD VGLIST01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G420  ****/
end // end PV0G420

// PV0GM100 windowing routine
Function PV0G500()
  ;
   /* *********************************************************/
   /* *            PV0GM100 windowing routine                **/
   /* *   browse thru screen PV0GM100 searching for '?'.     **/
   /* *   perform the appropriate windowing routine for      **/
   /* *   each occurence of a '?'.                           **/
   /* *********************************************************/
  ;
  PVUREC.PVUCNTR2 = 1; /* re-initialize the subscript*/
  PVUREC.PVUERROR[PVUERGEN] = " "; /* Use as Pop-up Flag*/
  ;
  while (PVUREC.PVUCNTR2 <= PV0GW01.PV0GWMAX)
    if (PV0GM100.XAOCD[PVUCNTR2] == " ?")
      PVUREC.PVUERROR[PVUERGEN] = "Y"; /* Use as Pop-up Flag*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "          OVERRIDE CODE   ";
      while (XX0XW02.XX0XWEND == "N")
        XPXAO01(); /* converse sales group pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PV0GM100.XAOCD[PVUCNTR2] = XAOTBL.XAOCD[XX0XWPIX];
        PV0GM100.XAOABRV[PVUCNTR2] = XAOTBL.XAOABRV[XX0XWPIX];
        set PV0GM100.XAOCD[PVUCNTR2] cursor;
      else
        PV0GM100.XAOCD[PVUCNTR2] = " ";
      end
    end
    PVUREC.PVUCNTR2 = PVUREC.PVUCNTR2 + 1;
  end
  ;
  if (PVUREC.PVUERROR[PVUERGEN] == "Y")
    converseLib.clearScreen();
    
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G500  ****/
end // end PV0G500

// DECLARE  GL Cursor
Function PV0G890()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Declare GL Cursor                                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PVAREC to PVDREC withV60Compat;
  PVDREC.PVCAETYP = PV0GM100.PVCAETYP;
  ;
  PVYREC.PVYFNC = "S1";
  XPPV890(); /* IOMOD VGLTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G890  ****/
end // end PV0G890

// FETCH    GL Cursor
Function PV0G891()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Fetch Invoice Item Cursor                        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "N1";
  XPPV890(); /* IOMOD VGLTRN01*/
  PV0GW03.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G891  ****/
end // end PV0G891

// CLOSE    GL Cursor
Function PV0G892()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Close GL Cursor                                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "C1";
  XPPV890(); /* IOMOD VGLTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G892  ****/
end // end PV0G892

// UPDATE   GL Row
Function PV0G893()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Update GL Row                                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "U ";
  XPPV890(); /* IOMOD VGLTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G893  ****/
end // end PV0G893

// INSERT   GL Row
Function PV0G894()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert GL Row                                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "A ";
  XPPV890(); /* IOMOD VGLTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G894  ****/
end // end PV0G894

// DECLARE  PROFITABILITY Cursor
Function PV0G900()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Declare PROFITABILITY Cursor                     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  move PVAREC to PVCREC withV60Compat;
  PVCREC.PVCAETYP = PV0GM100.PVCAETYP;
  ;
  PVYREC.PVYFNC = "S1";
  XPPV900(); /* IOMOD VPFTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G900  ****/
end // end PV0G900

// FETCH    PROFITABILITY Cursor
Function PV0G901()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Fetch PROFITABILITY Cursor                       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "N1";
  XPPV900(); /* IOMOD VPFTRN01*/
  PV0GW02.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G901  ****/
end // end PV0G901

// CLOSE    PROFITABILITY Cursor
Function PV0G902()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Close PROFITABILITY Cursor                       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "C1";
  XPPV900(); /* IOMOD VPFTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G902  ****/
end // end PV0G902

// UPDATE   PROF Row
Function PV0G903()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Update PROF Row                                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "U ";
  XPPV900(); /* IOMOD VPFTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G903  ****/
end // end PV0G903

// INSERT   PROF Row
Function PV0G904()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Insert PROF Row                                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVYREC.PVYFNC = "A ";
  XPPV900(); /* IOMOD VPFTRN01*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G904  ****/
end // end PV0G904

// READ     IVC HEADER IO5660
Function PV0G960()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Invoice Header                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVAREC.PVOVENDR = PV0GM100.PVOVENDR;
  PVAREC.PVOVENDG = PV0GM100.PVOVENDG;
  PVAREC.PVAIVCID = PV0GM100.PVAIVCID;
  ;
  PVYREC.PVYFNC = "S ";
  XPPV960(); /* IOMOD VPVHDR01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PVAREC.XIPCD == "CP"
     && PVUREC.PVUCHOIC == 02)
      PVUREC.PVUINQRY = " ";
    else
      PVUREC.PVUINQRY = "Y";
    end
    PV0GS90(); /* Store GL   Items in Working Storage*/
    PV0GS91(); /* Store PROF Items in Working Storage*/
    PV0GS92(); /* Build Scroll Lines*/
    move PVAREC to PV0GM100 withV60Compat;
    PV0GS15(); /* Reset Cursor Pointers*/
    set PV0GM100.PVCACAMT[1] cursor;
    if (PV0GW02.PV0GWBT2 < 2
     && PV0GW03.PV0GWBT3 < 2)
       /* Requested Record not found*/
      PVUREC.PVUERNBR = 98;
      PVUREC.PVUERROR[PVUERIVC] = "Y";
      PVAREC.PVAIVCID = " ";
      PVUREC.PVUINQRY = "Y";
    end
  else
    set PV0GM100 empty;
    PV0GM100.PVOVENDR = PVAREC.PVOVENDR;
    PV0GM100.PVOVENDG = PVAREC.PVOVENDG;
    PV0GM100.PVAIVCID = PVAREC.PVAIVCID;
    PV0GM100.PVOVNDNM = PVOREC.PVOVNDNM;
    PV0GM100.PVCAETYP = PVUREC.PVCAETYP;
    PV0GS98(); /* Protect Input Fields*/
    PVUREC.PVUERROR[PVUERIVC] = "Y";
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G960  ****/
end // end PV0G960

// READ     VENDOR NAME IO5680
Function PV0G980()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Read Vendor Name                                 ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVOREC.PVOVENDR = PV0GM100.PVOVENDR;
  PVOREC.PVOVENDG = PV0GM100.PVOVENDG;
  ;
  PVYREC.PVYFNC = "S ";
  XPPV980(); /* IOMOD VVENDR01*/
  ;
  move PVOREC to PV0GM100 withV60Compat;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0G980  ****/
end // end PV0G980

// CHECK    Who Invoked me
Function PV0GS01()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Caller                                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  if (PVUREC.PVURCRD1 == "PVAREC "
   || PVUREC.PVURCRD1 == "PVCREC "
   || PVUREC.PVURCRD1 == "PVDREC ")
    move PVUREC to PVAREC withV60Compat;
    PV0GM100.PVOVENDR = PVAREC.PVOVENDR;
    PV0GM100.PVOVENDG = PVAREC.PVOVENDG;
    PV0GM100.PVAIVCID = PVAREC.PVAIVCID;
    PV0GM100.PVCAETYP = PVUREC.PVCAETYP;
    PV0G980(); /* Get Vendor Name*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PV0G960(); /* Read Invoice Header*/
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS01  ****/
end // end PV0GS01

// GO BACK  to Calling Applicatio
Function PV0GS03()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Go Back to Calling Application                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSPVS60(); /* PV Common Exit*/
  PV0GS88(); /* Exit Routine*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS03  ****/
end // end PV0GS03

// GET      System Date and Time
Function PV0GS09()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **       Get System Date and Time                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  PV0GM100.TA2GRGB = TA2REC.TA2GRGB;
  PV0GM100.TA2TIMED = TA2REC.TA2TIMED;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS09  ****/
end // end PV0GS09

// RESET    Cursor Pointers
Function PV0GS15()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Reset Cursor Pointers                       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW01.PV0GWPFP = 1;
  PV0GW01.PV0GWPFF = 7;
  PV0GW01.PV0GWGLP = 1;
  PV0GW01.PV0GWGLF = 7;
  ;
  return; /* Last Statement*/
  ;
   /* ***  End of PV0GS15  ****/
end // end PV0GS15

// VALIDATE Style, Color, Dim, Qu
Function PV0GS20()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **    Validate Style, Color, Dimension and Quality        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  SY2REC.XGPCD = PVCREC.XGPCD;
  SY2REC.SY1STNBR = PV0GM100.SY1STNBR[PV0GWCN2];
  SY2REC.SY2CLRID = PV0GM100.SY2CLRID[PV0GWCN2];
  SY2REC.XDMCD = PV0GM100.XDMCD[PV0GWCN2];
  ;
  PVYREC.PVYFNC = "S ";
  set SQLCA empty;
  call "IO0130" (PVYREC, SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PV0GM100.XQACD[PV0GWCN2] in XQATBL.XQACD)
      PV0GS22(); /* Validate YIS Code*/
    else
       /* Quality Code is Invalid*/
      PVUREC.PVUERNBR = 39;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0GM100.XQACD[PV0GWCN2] cursor;
    end
  else
    if (PV0GM100.XDMCD[PV0GWCN2] in XDMTBL.XDMCD)
       /* Style/Color Field is Invalid*/
      PVUREC.PVUERNBR = 45;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0GM100.SY1STNBR[PV0GWCN2] cursor;
    else
       /* Dimension Code is Invalid*/
      PVUREC.PVUERNBR = 38;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0GM100.XDMCD[PV0GWCN2] cursor;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS20  ****/
end // end PV0GS20

// SAVE     Style, Color, Dim, Qu
Function PV0GS21()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Save Style, Color, Dimension and Quality        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW02.YISCD[PV0GWCT1] = PV0GM100.YISCD[PV0GWCN2];
  PV0GW02.SY1STNBR[PV0GWCT1] = PV0GM100.SY1STNBR[PV0GWCN2];
  PV0GW02.SY2CLRID[PV0GWCT1] = PV0GM100.SY2CLRID[PV0GWCN2];
  PV0GW02.XDMCD[PV0GWCT1] = PV0GM100.XDMCD[PV0GWCN2];
  PV0GW02.XQACD[PV0GWCT1] = PV0GM100.XQACD[PV0GWCN2];
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS21  ****/
end // end PV0GS21

// VALIDATE PROF YISCD Field
Function PV0GS22()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF YIS CODE Field                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.YISCD[PV0GWCN2] in YISTBL.YISCD)
     /* next sentence*/
  else
    PVUREC.PVUERROR[PVUERGEN] = "Y";
     /* Invalid Code*/
    PVUREC.PVUERNBR = 111;
    set PV0GM100.YISCD[PV0GWCN2] cursor;
    return;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS22  ****/
end // end PV0GS22

// SAVE/ADJ PROF Amount
Function PV0GS23()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Save/Adjust Amounts                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW01.PV0GWAMT = PV0GW02.PVCACAMT[PV0GWCT1];
  PV0GM100.PV0GMPDF = PV0GM100.PV0GMPDF - PV0GW02.PVCACAMT[PV0GWCT1];
  PV0GW02.PVCACAMT[PV0GWCT1] = PV0GM100.PVCACAMT[PV0GWCN2];
  PV0GM100.PV0GMPDF = PV0GM100.PV0GMPDF + PV0GW02.PVCACAMT[PV0GWCT1];
  ;
  PV0GW01.PV0GWCT2 = PV0GW01.PV0GWCT1;
  PV0GW01.PV0GWCT3 = PV0GW02.PV0GWCN2;
  while (PV0GW01.PV0GWCT2 < PV0GW02.PV0GWMK2)
    PV0GW01.PV0GWCT2 = PV0GW01.PV0GWCT2 + 1;
    PV0GW01.PV0GWCT3 = PV0GW01.PV0GWCT3 + 1;
    if (PV0GW02.PV0GWUSF[PV0GWCT2] == "T")
      PV0GW02.PVCACAMT[PV0GWCT2] = PV0GW02.PVCACAMT[PV0GWCT2] - PV0GWAMT;
      PV0GW01.PV0GWAMT = PV0GW02.PVCACAMT[PV0GWCT1];
      PV0GW02.PVCACAMT[PV0GWCT2] = PV0GW02.PVCACAMT[PV0GWCT2] + PV0GWAMT;
      if (PV0GW01.PV0GWCT3 <= PV0GW01.PV0GWMAX)
        PV0GM100.PVCACAMT[PV0GWCT3] = PV0GW02.PVCACAMT[PV0GWCT2];
      end
      PV0GW01.PV0GWCT2 = PV0GW02.PV0GWMK2;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS44  ****/
end // end PV0GS23

// SAVE/ADJ GL Amount
Function PV0GS24()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        SAVE/ADJUST GL Amount                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GM100.PV0GMGDF = PV0GM100.PV0GMGDF - PV0GW03.PVCACAMT[PV0GWCT1];
  PV0GW03.PVCACAMT[PV0GWCT1] = PV0GM100.PVCACAMT[PV0GWCN3];
  PV0GM100.PV0GMGDF = PV0GM100.PV0GMGDF + PV0GW03.PVCACAMT[PV0GWCT1];
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS24  ****/
end // end PV0GS24

// LOOK     For the CURSOR
Function PV0GS25()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Look for the CURSOR                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUINQRY == "Y")
    set PV0GM100.PVAIVCID cursor;
  else
    set PV0GM100.PVCACAMT[1] cursor;
    PV0GW01.PV0GWCRP = 1;
    PV0GW01.PV0GWCRF = 7;
    PV0GW03.PV0GWCN3 = 0;
    while (PV0GW03.PV0GWCN3 < PV0GW01.PV0GWMAX)
      PV0GW03.PV0GWCN3 = PV0GW03.PV0GWCN3 + 1;
      if (PV0GM100.PV0GMGLC[PV0GWCN3] is cursor)
        PV0GS51();
      end
      if (PV0GM100.PVCACAMT[PV0GWCN3] is cursor)
        PV0GS52();
      end
      if (PV0GM100.XAOCD[PV0GWCN3] is cursor)
        PV0GS53();
      end
      if (PV0GM100.YISCD[PV0GWCN3] is cursor)
        PV0GS54();
      end
      if (PV0GM100.SY1STNBR[PV0GWCN3] is cursor)
        PV0GS55();
      end
      if (PV0GM100.SY2CLRID[PV0GWCN3] is cursor)
        PV0GS56();
      end
      if (PV0GM100.XDMCD[PV0GWCN3] is cursor)
        PV0GS57();
      end
      if (PV0GM100.XQACD[PV0GWCN3] is cursor)
        PV0GS58();
      end
    end
    ;
    if (PV0GW01.PV0GWMAP == "1")
      PV0GW01.PV0GWGLP = PV0GW01.PV0GWCRP;
      PV0GW01.PV0GWGLF = PV0GW01.PV0GWCRF;
    else
      PV0GW01.PV0GWPFP = PV0GW01.PV0GWCRP;
      PV0GW01.PV0GWPFF = PV0GW01.PV0GWCRF;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS25  ****/
end // end PV0GS25

// PLACE    Cursor in PREV Pos
Function PV0GS26()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Place Cursor in Previou Position                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PVUREC.PVUINQRY == "Y")
    set PV0GM100.PVAIVCID cursor;
  else
    if (PV0GW01.PV0GWMAP == "1")
      PV0GW01.PV0GWCRP = PV0GW01.PV0GWGLP;
      PV0GW01.PV0GWCRF = PV0GW01.PV0GWGLF;
    else
      PV0GW01.PV0GWCRP = PV0GW01.PV0GWPFP;
      PV0GW01.PV0GWCRF = PV0GW01.PV0GWPFF;
    end
    ;
    if (PV0GW01.PV0GWCRF == 1)
      set PV0GM100.SY1STNBR[PV0GWCRP] cursor;
    else
      if (PV0GW01.PV0GWCRF == 2)
        set PV0GM100.SY2CLRID[PV0GWCRP] cursor;
      else
        if (PV0GW01.PV0GWCRF == 3)
          set PV0GM100.XDMCD[PV0GWCRP] cursor;
        else
          if (PV0GW01.PV0GWCRF == 4)
            set PV0GM100.XQACD[PV0GWCRP] cursor;
          else
            if (PV0GW01.PV0GWCRF == 5)
              set PV0GM100.PV0GMGLC[PV0GWCRP] cursor;
            else
              if (PV0GW01.PV0GWCRF == 6)
                set PV0GM100.YISCD[PV0GWCRP] cursor;
              else
                if (PV0GW01.PV0GWCRF == 7)
                  set PV0GM100.PVCACAMT[PV0GWCRP] cursor;
                else
                  set PV0GM100.XAOCD[PV0GWCRP] cursor;
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS26  ****/
end // end PV0GS26

// CHECK    FASTPATH
Function PV0GS30()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **      Check FASTPATH option.                            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (converseVar.eventKey is enter) /* Check if ENTER key was pressed.*/
    if (PV0GM100.CATOAP == " ")
       /* next sentence*/
    else
      if (PV0GM100.PVOVENDR == " "
       && PV0GM100.PVOVENDG == " "
       && PV0GM100.PVAIVCID == " "
       && PV0GM100.PVCAETYP == " ")
        COMMAREA.CATOAP = PV0GM100.CATOAP;
        COMMAREA.CAITEM = PV0GM100.CAITEM;
        PV0GS88(); /* Exit Routine*/
      else
         /* Cannot FASTPATH with data keyed in*/
        PVUREC.PVUERNBR = 63;
        set PV0GM100.CATOAP cursor;
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS30  ****/
end // end PV0GS30

// VALIDATE GL XAOCD Field
Function PV0GS40()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate GL XAOCD Field                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.XAOCD[PV0GWCN3] == PV0GW03.XAOCD[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GW03.PV0GWGLC[PV0GWCT1] == " "
     && PV0GM100.PV0GMGLC[PV0GWCN3] == " ")
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Required Field*/
      PVUREC.PVUERNBR = 109;
      set PV0GM100.PV0GMGLC[PV0GWCN3] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN3] in XAOTBL.XAOCD)
        if (PV0GM100.PVCACAMT[PV0GWCN3] == PV0GW03.PVCACAMT[PV0GWCT1])
          if (PV0GW03.PV0GWUSF[PV0GWCT1] == "M"
           || PV0GW03.PV0GWUSF[PV0GWCT1] == "N")
            PV0GW03.XAOCD[PV0GWCT1] = PV0GM100.XAOCD[PV0GWCN3];
            PV0GM100.XAOABRV[PV0GWCN3] = XAOTBL.XAOABRV[sysVar.arrayIndex];
          else
            PVUREC.PVUERROR[PVUERGEN] = "Y";
             /* Change Required*/
            PVUREC.PVUERNBR = 106;
            set PV0GM100.PVCACAMT[PV0GWCN3] cursor;
            return;
          end
        else
          PV0GW03.XAOCD[PV0GWCT1] = PV0GM100.XAOCD[PV0GWCN3];
          PV0GM100.XAOABRV[PV0GWCN3] = XAOTBL.XAOABRV[sysVar.arrayIndex];
          PV0GS24(); /* Save/Adj GL Amount*/
          if (PV0GW03.PV0GWUSF[PV0GWCT1] == " ")
            PV0GW03.PV0GWUSF[PV0GWCT1] = "N";
          else
            PV0GW03.PV0GWUSF[PV0GWCT1] = "M";
          end
        end
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y";
         /* Invalid Code*/
        PVUREC.PVUERNBR = 111;
        set PV0GM100.XAOCD[PV0GWCN3] cursor;
        return;
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS40  ****/
end // end PV0GS40

// VALIDATE GL AMOUNT Field
Function PV0GS41()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate GL AMOUNT Field                        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.PVCACAMT[PV0GWCN3] == PV0GW03.PVCACAMT[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GW03.PV0GWGLC[PV0GWCT1] == " "
     && PV0GM100.PV0GMGLC[PV0GWCN3] == " ")
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Required Field*/
      PVUREC.PVUERNBR = 109;
      set PV0GM100.PV0GMGLC[PV0GWCN3] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN3] == PV0GW03.XAOCD[PV0GWCT1])
        if (PV0GW03.PV0GWUSF[PV0GWCT1] == "M"
         || PV0GW03.PV0GWUSF[PV0GWCT1] == "N")
          PV0GS24(); /* Save/Adj GL Amount*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
           /* Required Field*/
          PVUREC.PVUERNBR = 109;
          set PV0GM100.XAOCD[PV0GWCN3] cursor;
          return;
        end
      else
        PV0GS40(); /* Validate XAOCD*/
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS41  ****/
end // end PV0GS41

// VALIDATE GL Account Field
Function PV0GS42()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate GL ACCOUNT Field                       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.PV0GMGLC[PV0GWCN3] == PV0GW03.PV0GWGLC[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GM100.PV0GMGLC[PV0GWCN3] in PV0GW03.PV0GWGLC)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Duplicates are not allowed*/
      PVUREC.PVUERNBR = 101;
      set PV0GM100.PV0GMGLC[PV0GWCN3] cursor;
      return;
    else
      PV0G420(); /* IOMOD VGLIST01*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811)
        PVUREC.PVUERNBR = 0;
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y";
         /* Invalid Code*/
        PVUREC.PVUERNBR = 111;
        set PV0GM100.PV0GMGLC[PV0GWCN3] cursor;
        return;
      end
      if (PV0GM100.XAOCD[PV0GWCN3] == PV0GW03.XAOCD[PV0GWCT1])
        if (PV0GW03.PV0GWUSF[PV0GWCT1] == "M"
         || PV0GW03.PV0GWUSF[PV0GWCT1] == "N")
          PV0GS80(); /* Save GL Account*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
           /* Required Field*/
          PVUREC.PVUERNBR = 109;
          set PV0GM100.XAOCD[PV0GWCN3] cursor;
          return;
        end
      else
        PV0GS40(); /* Validate XAOCD and Amount*/
        if (PVUREC.PVUERROR[PVUERGEN] == " ")
          PV0GS80(); /* Save GL Account*/
          if (PV0GW01.PV0GWCT1 >= PV0GW03.PV0GWBT3)
            PV0GW03.PV0GWBT3 = PV0GW01.PV0GWCT1 + 1;
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS42  ****/
end // end PV0GS42

// VALIDATE PROF XAOCD Field
Function PV0GS43()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF XAOCD Field                       ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.XAOCD[PV0GWCN2] == PV0GW02.XAOCD[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GW02.PV0GWPKY[PV0GWCT1] == PV0GW01.PV0GWKEY
     && PV0GW01.PV0GWPKY == PV0GW01.PV0GWKEY)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Required Field*/
      PVUREC.PVUERNBR = 109;
      set PV0GM100.YISCD[PV0GWCN2] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN2] in XAOTBL.XAOCD)
        if (PV0GM100.PVCACAMT[PV0GWCN2] == PV0GW02.PVCACAMT[PV0GWCT1])
          if (PV0GW02.PV0GWUSF[PV0GWCT1] == "M"
           || PV0GW02.PV0GWUSF[PV0GWCT1] == "N")
            PV0GW02.XAOCD[PV0GWCT1] = PV0GM100.XAOCD[PV0GWCN2];
            PV0GM100.XAOABRV[PV0GWCN2] = XAOTBL.XAOABRV[sysVar.arrayIndex];
          else
            PVUREC.PVUERROR[PVUERGEN] = "Y";
             /* Change Required*/
            PVUREC.PVUERNBR = 106;
            set PV0GM100.PVCACAMT[PV0GWCN2] cursor;
            return;
          end
        else
          PV0GW02.XAOCD[PV0GWCT1] = PV0GM100.XAOCD[PV0GWCN2];
          PV0GM100.XAOABRV[PV0GWCN2] = XAOTBL.XAOABRV[sysVar.arrayIndex];
          PV0GS23(); /* Save/Adjust Amounts*/
          if (PV0GW02.PV0GWUSF[PV0GWCT1] == " ")
            PV0GW02.PV0GWUSF[PV0GWCT1] = "N";
          else
            PV0GW02.PV0GWUSF[PV0GWCT1] = "M";
          end
        end
      else
        PVUREC.PVUERROR[PVUERGEN] = "Y";
         /* Invalid Code*/
        PVUREC.PVUERNBR = 111;
        set PV0GM100.XAOCD[PV0GWCN2] cursor;
        return;
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS43  ****/
end // end PV0GS43

// VALIDATE PROF AMOUNT Field
Function PV0GS44()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF AMOUNT Field                      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.PVCACAMT[PV0GWCN2] == PV0GW02.PVCACAMT[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GW02.PV0GWPKY[PV0GWCT1] == PV0GW01.PV0GWKEY
     && PV0GW01.PV0GWPKY == PV0GW01.PV0GWKEY)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Required Field*/
      PVUREC.PVUERNBR = 109;
      set PV0GM100.YISCD[PV0GWCN2] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN2] == PV0GW02.XAOCD[PV0GWCT1])
        if (PV0GW02.PV0GWUSF[PV0GWCT1] == "M"
         || PV0GW02.PV0GWUSF[PV0GWCT1] == "N")
          PV0GS23(); /* Save/Adjust Amounts*/
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
           /* Required Field*/
          PVUREC.PVUERNBR = 109;
          set PV0GM100.XAOCD[PV0GWCN2] cursor;
          return;
        end
      else
        PV0GS43(); /* Validate XAOCD*/
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS44  ****/
end // end PV0GS44

// VALIDATE PROF KEY Fields
Function PV0GS45()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF Key Fields                        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GW01.PV0GWPKY == PV0GW02.PV0GWPKY[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GW01.PV0GWPKY in PV0GW02.PV0GWPKY)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Duplicates are not allowed*/
      PVUREC.PVUERNBR = 101;
      set PV0GM100.YISCD[PV0GWCN2] cursor;
      return;
    else
      PV0GS20(); /* Validate Style, Color, Dim, Qual*/
      if (PVUREC.PVUERROR[PVUERGEN] == "Y")
        return;
      else
        if (PV0GM100.XAOCD[PV0GWCN2] == PV0GW02.XAOCD[PV0GWCT1])
          if (PV0GW02.PV0GWUSF[PV0GWCT1] == "M"
           || PV0GW02.PV0GWUSF[PV0GWCT1] == "N")
            PV0GW02.YISCD[PV0GWCT1] = PV0GM100.YISCD[PV0GWCN2];
            PV0GS21(); /* Save Style, Color, Dim and Qual*/
          else
            PVUREC.PVUERROR[PVUERGEN] = "Y";
             /* Required Field*/
            PVUREC.PVUERNBR = 109;
            set PV0GM100.XAOCD[PV0GWCN2] cursor;
            return;
          end
        else
          PV0GS43(); /* Validate XAOCD and Amount*/
          if (PVUREC.PVUERROR[PVUERGEN] == " ")
            PV0GW02.YISCD[PV0GWCT1] = PV0GM100.YISCD[PV0GWCN2];
            PV0GS21(); /* Save Style, Color, Dim and Qual*/
            if (PV0GW01.PV0GWCT1 >= PV0GW02.PV0GWBT2)
              PV0GW02.PV0GWBT2 = PV0GW01.PV0GWCT1 + 1;
            end
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS45  ****/
end // end PV0GS45

// VALIDATE PROF Dimension Field
Function PV0GS46()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF Dimension Field                   ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.XDMCD[PV0GWCN2] == PV0GW02.XDMCD[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GM100.XDMCD[PV0GWCN2] in XDMTBL.XDMCD)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Duplicates are not allowed*/
      PVUREC.PVUERNBR = 101;
      set PV0GM100.XDMCD[PV0GWCN2] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN2] == PV0GW02.XAOCD[PV0GWCT1])
        if (PV0GW02.PV0GWUSF[PV0GWCT1] == "M"
         || PV0GW02.PV0GWUSF[PV0GWCT1] == "N")
          PV0GW02.XDMCD[PV0GWCT1] = PV0GM100.XDMCD[PV0GWCN2];
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
           /* Required Field*/
          PVUREC.PVUERNBR = 109;
          set PV0GM100.XAOCD[PV0GWCN2] cursor;
          return;
        end
      else
        PV0GS43(); /* Validate XAOCD and Amount*/
        if (PVUREC.PVUERROR[PVUERGEN] == " ")
          PV0GW02.XDMCD[PV0GWCT1] = PV0GM100.XDMCD[PV0GWCN2];
          if (PV0GW01.PV0GWCT1 >= PV0GW02.PV0GWBT2)
            PV0GW02.PV0GWBT2 = PV0GW01.PV0GWCT1 + 1;
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS46  ****/
end // end PV0GS46

// VALIDATE PROF Dimension Field
Function PV0GS47()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate PROF Quality FIeld                     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.XQACD[PV0GWCN2] == PV0GW02.XQACD[PV0GWCT1])
     /* next sentence*/
  else
    if (PV0GM100.XQACD[PV0GWCN2] in XQATBL.XQACD)
      PVUREC.PVUERROR[PVUERGEN] = "Y";
       /* Duplicates are not allowed*/
      PVUREC.PVUERNBR = 101;
      set PV0GM100.XQACD[PV0GWCN2] cursor;
      return;
    else
      if (PV0GM100.XAOCD[PV0GWCN2] == PV0GW02.XAOCD[PV0GWCT1])
        if (PV0GW02.PV0GWUSF[PV0GWCT1] == "M"
         || PV0GW02.PV0GWUSF[PV0GWCT1] == "N")
          PV0GW02.XQACD[PV0GWCT1] = PV0GM100.XQACD[PV0GWCN2];
        else
          PVUREC.PVUERROR[PVUERGEN] = "Y";
           /* Required Field*/
          PVUREC.PVUERNBR = 109;
          set PV0GM100.XAOCD[PV0GWCN2] cursor;
          return;
        end
      else
        PV0GS43(); /* Validate XAOCD and Amount*/
        if (PVUREC.PVUERROR[PVUERGEN] == " ")
          PV0GW02.XQACD[PV0GWCT1] = PV0GM100.XQACD[PV0GWCN2];
          if (PV0GW01.PV0GWCT1 >= PV0GW02.PV0GWBT2)
            PV0GW02.PV0GWBT2 = PV0GW01.PV0GWCT1 + 1;
          end
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS47  ****/
end // end PV0GS47

// CURSOR   was in GL Number
Function PV0GS51()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in GL Number                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.PV0GMGLC[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 5;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS51  ****/
end // end PV0GS51

// CUROSR   was in Amount
Function PV0GS52()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Amount field                      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.PVCACAMT[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 7;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS52  ****/
end // end PV0GS52

// CURSOR   was in Override
Function PV0GS53()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Override Code                     ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.XAOCD[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 8;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS53  ****/
end // end PV0GS53

// CURSOR   was in YIS Code
Function PV0GS54()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in YIS Code                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.YISCD[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 6;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS54  ****/
end // end PV0GS54

// CURSOR   was in Style
Function PV0GS55()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Style                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.SY1STNBR[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 1;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS55  ****/
end // end PV0GS55

// CURSOR   was in Color
Function PV0GS56()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Color                             ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.SY2CLRID[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 2;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS56  ****/
end // end PV0GS56

// CURSOR   was in Dimension
Function PV0GS57()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Dimension                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.XDMCD[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 3;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS56  ****/
end // end PV0GS57

// CURSOR   was in Quality
Function PV0GS58()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        CURSOR was in Quality                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GM100.XQACD[PV0GWCN3] cursor;
  PV0GW01.PV0GWCRP = PV0GW03.PV0GWCN3;
  PV0GW01.PV0GWCRF = 4;
  PV0GW03.PV0GWCN3 = PV0GW01.PV0GWMAX;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS58  ****/
end // end PV0GS58

// VALIDATE Data Keyed In (ENTER)
Function PV0GS60()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Validate Data Keyed In                          ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.PVOVENDR == PVOREC.PVOVENDR
   && PV0GM100.PVOVENDG == PVOREC.PVOVENDG
   && PV0GM100.PVOVENDR not modified
   && PV0GM100.PVOVENDG not modified)
     /* next sentence*/
  else
    PV0G980(); /* Get Vendor Name*/
    if (SQLCA.VAGen_SQLCODE == 0)
      PVAREC.PVAIVCID = " "; /* Force Re-read of Invoice*/
    else
      return;
    end
  end
  ;
  if (PV0GM100.PVCAETYP == PVCREC.PVCAETYP
   && PV0GM100.PVCAETYP not modified)
     /* next sentence*/
  else
    if (PV0GM100.PVCAETYP == " ")
       /* Field is required*/
      PVUREC.PVUERNBR = 109;
      PVUREC.PVUERROR[PVUERGEN] = "Y";
      set PV0GM100.PVCAETYP cursor;
      return;
    else
      if (PV0GM100.PVCAETYP == "*"
       && COMMAREA.CACURRAP == "PV0G")
         /* Invalid Code*/
        PVUREC.PVUERNBR = 111;
        PVUREC.PVUERROR[PVUERGEN] = "Y";
        set PV0GM100.PVCAETYP cursor;
        return;
      else
        PVAREC.PVAIVCID = " "; /* Force Re-read of Invoice*/
      end
    end
  end
  ;
  if (PVAREC.PVAIVCID == " ")
    PVUREC.PVUERROR[PVUERIVC] = "Y";
  end
  ;
  if (PV0GM100.PVAIVCID == PVAREC.PVAIVCID
   && PV0GM100.PVAIVCID not modified
   && PVUREC.PVUERROR[PVUERIVC] == " ")
     /* next sentence*/
  else
    PV0G960(); /* Read Invoice Header*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS60  ****/
end // end PV0GS60

// APPLY    GL Updates
Function PV0GS70()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Apply GL Updates                                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GM100.PV0GMGDF == 0
   && PV0GM100.PV0GMPDF == 0)
    PV0GS09(); /* Get System Date and Time*/
    PV0GW03.PV0GWCN3 = 0;
    while (PV0GW03.PV0GWCN3 < PV0GW03.PV0GWBT3)
      PV0GW03.PV0GWCN3 = PV0GW03.PV0GWCN3 + 1;
      if (PV0GW03.PV0GWUSF[PV0GWCN3] == "M")
        PV0GS71(); /* Restore GL Row From Core*/
        PV0G893(); /* Update GL Row*/
      else
        if (PV0GW03.PV0GWUSF[PV0GWCN3] == "N"
         && PV0GW03.PVCACAMT[PV0GWCN3] != 0)
          PV0GS71(); /* Restore GL Row From Core*/
          PV0GS72(); /* Build   GL Other Information*/
          PV0G894(); /* Insert GL Row*/
        end
      end
    end
    PV0GS75(); /* Apply PROF Updates*/
    PV0G960(); /* Re-read Records*/
     /* Function Requested was successfully applied*/
    PVUREC.PVUERNBR = 92;
  else
     /* Records not Balanced*/
    PVUREC.PVUERNBR = 100;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS70  ****/
end // end PV0GS70

// RESTORE  GL Row from Core
Function PV0GS71()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Restore GL Row from Core                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PVDREC empty;
  PVDREC.PVAIVCID = PVAREC.PVAIVCID;
  PVDREC.PVOVENDR = PVAREC.PVOVENDR;
  PVDREC.PVOVENDG = PVAREC.PVOVENDG;
  PVDREC.XAOCD = PV0GW03.XAOCD[PV0GWCN3];
  PVDREC.GLAENT = PV0GW03.GLAENT[PV0GWCN3];
  PVDREC.GLARCID = PV0GW03.GLARCID[PV0GWCN3];
  PVDREC.GLANTAC = PV0GW03.GLANTAC[PV0GWCN3];
  PVDREC.GLASUB = PV0GW03.GLASUB[PV0GWCN3];
  PVDREC.GLAPRJ = PV0GW03.GLAPRJ[PV0GWCN3];
  PVDREC.PVCACAMT = PV0GW03.PVCACAMT[PV0GWCN3];
  PVDREC.PVCAETYP = PV0GW03.PVCAETYP[PV0GWCN3];
  PVDREC.PVCOVRFL = "Y";
  PVDREC.PVDJENBR = PV0GW03.PVDJENBR[PV0GWCN3];
  PVDREC.PVDRFNBR = PV0GW03.PVDRFNBR[PV0GWCN3];
  PVDREC.PVDPRIOD = PV0GW03.PVDPRIOD[PV0GWCN3];
  PVDREC.XXXUSRID = COMMAREA.CAUSERID;
  PVDREC.ZZZSDT = PV0GW03.ZZZSDT[PV0GWCN3];
  PVDREC.ZZZCHGCT = PV0GW03.ZZZCHGCT[PV0GWCN3];
  PVDREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVDREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS71  ****/
end // end PV0GS71

// Build    GL Other Information
Function PV0GS72()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Build GL Other Information                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVDREC.PVCAETYP = PV0GM100.PVCAETYP;
  PVDREC.PVDJENBR = PV0GW03.PVDJENBR[1];
  PVDREC.PVDRFNBR = PV0GW03.PVDRFNBR[1];
  PVDREC.PVDPRIOD = PV0GW03.PVDPRIOD[1];
  PVDREC.ZZZSDT = TA2REC.TA2GRGGN;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS72  ****/
end // end PV0GS72

// APPLY    PROF Updates
Function PV0GS75()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Apply PROF Updates                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW02.PV0GWCN2 = 0;
  while (PV0GW02.PV0GWCN2 < PV0GW02.PV0GWBT2)
    PV0GW02.PV0GWCN2 = PV0GW02.PV0GWCN2 + 1;
    if (PV0GW02.PV0GWUSF[PV0GWCN2] == "M")
      PV0GS76(); /* Restore PROF Row From Core*/
      PV0G903(); /* Update PROF Row*/
    else
      if (PV0GW02.PV0GWUSF[PV0GWCN2] == "N"
       && PV0GW02.PVCACAMT[PV0GWCN2] != 0)
        PV0GS76(); /* Restore PROF Row From Core*/
        PV0GS77(); /* Build   PROF Other Information*/
        PV0G904(); /* Insert PROF Row*/
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS75  ****/
end // end PV0GS75

// RESTORE  PROF Row from Core
Function PV0GS76()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Restore PROF Row from Core                  ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PVCREC empty;
  PVCREC.PVAIVCID = PVAREC.PVAIVCID;
  PVCREC.PVOVENDR = PVAREC.PVOVENDR;
  PVCREC.PVOVENDG = PVAREC.PVOVENDG;
  PVCREC.XAOCD = PV0GW02.XAOCD[PV0GWCN2];
  PVCREC.SY1STNBR = PV0GW02.SY1STNBR[PV0GWCN2];
  PVCREC.SY2CLRID = PV0GW02.SY2CLRID[PV0GWCN2];
  PVCREC.XDMCD = PV0GW02.XDMCD[PV0GWCN2];
  PVCREC.XQACD = PV0GW02.XQACD[PV0GWCN2];
  PVCREC.YISCD = PV0GW02.YISCD[PV0GWCN2];
  PVCREC.PVCACAMT = PV0GW02.PVCACAMT[PV0GWCN2];
  PVCREC.PVCPSTDT = PV0GW02.PVCPSTDT[PV0GWCN2];
  PVCREC.PVCOVRFL = PV0GW02.PVCOVRFL[PV0GWCN2];
  PVCREC.PVCMNNBR = PV0GW02.PVCMNNBR[PV0GWCN2];
  PVCREC.XGPCD = PV0GW02.XGPCD[PV0GWCN2];
  PVCREC.PVCAETYP = PV0GW02.PVCAETYP[PV0GWCN2];
  PVCREC.PVCOVRFL = "Y";
  PVCREC.XXXUSRID = COMMAREA.CAUSERID;
  PVCREC.ZZZSDT = PV0GW02.ZZZSDT[PV0GWCN2];
  PVCREC.ZZZCHGCT = PV0GW02.ZZZCHGCT[PV0GWCN2];
  PVCREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PVCREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS76  ****/
end // end PV0GS76

// Build    PROF Other Info
Function PV0GS77()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Build PROF Other Information                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVCREC.PVCAETYP = PV0GM100.PVCAETYP;
  PVCREC.XGPCD = PV0GW02.XGPCD[1];
  PVCREC.PVCPSTDT = PV0GW02.PVCPSTDT[1];
  PVCREC.PVCMNNBR = PV0GW02.PVCMNNBR[1];
  PVCREC.ZZZSDT = TA2REC.TA2GRGGN;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS77  ****/
end // end PV0GS77

// SAVE     GL Account Field
Function PV0GS80()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Save GL ACCOUNT Field                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW03.PV0GWGLC[PV0GWCT1] = PV0GM100.PV0GMGLC[PV0GWCN3];
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS80  ****/
end // end PV0GS80

// CHECK    Scroll Lines
Function PV0GS82()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Scroll Lines                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVUREC.PVUERROR[PVUERGEN] = " "; /* Reset General Error Flag*/
  if (PV0GW01.PV0GWMAP == "1")
    PV0GS83(); /* GL Screen*/
  else
    PV0GS84(); /* Profitability Screen*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS92  ****/
end // end PV0GS82

// CHECK    Modified GL Fields
Function PV0GS83()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Modified GL Fields                        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW01.PV0GWCT1 = PV0GW03.PV0GWCUR;
  PV0GW03.PV0GWCN3 = 0;
  while (PV0GW03.PV0GWCN3 < PV0GW01.PV0GWMAX)
    PV0GW03.PV0GWCN3 = PV0GW03.PV0GWCN3 + 1;
    PV0GS42(); /* Validate GL ACCOUNT*/
    if (PVUREC.PVUERROR[PVUERGEN] == "Y")
      return;
    else
      PV0GS41(); /* Validate PVCACAMT*/
      if (PVUREC.PVUERROR[PVUERGEN] == "Y")
        return;
      else
        PV0GS40(); /* Validate XAOCD*/
      end
    end
    PV0GW01.PV0GWCT1 = PV0GW01.PV0GWCT1 + 1;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS83  ****/
end // end PV0GS83

// CHECK    Modified PROF Fields
Function PV0GS84()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Check Modified PROF Fields                      ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW01.PV0GWCT1 = PV0GW02.PV0GWCUR;
  PV0GW02.PV0GWCN2 = 0;
  while (PV0GW02.PV0GWCN2 < PV0GW01.PV0GWMAX)
    PV0GW02.PV0GWCN2 = PV0GW02.PV0GWCN2 + 1;
    if (PV0GW02.PV0GWUSF[PV0GWCT1] == "T")
       /* next sentece*/
    else
      PV0GW01.YISCD = PV0GM100.YISCD[PV0GWCN2];
      PV0GW01.SY1STNBR = PV0GM100.SY1STNBR[PV0GWCN2];
      PV0GW01.SY2CLRID = PV0GM100.SY2CLRID[PV0GWCN2];
      PV0GW01.XDMCD = PV0GM100.XDMCD[PV0GWCN2];
      PV0GW01.XQACD = PV0GM100.XQACD[PV0GWCN2];
      PV0GS45(); /* Validate PROF Key Fields*/
      if (PVUREC.PVUERROR[PVUERGEN] == "Y")
        return;
      else
        PV0GS46(); /* Validate Dimension*/
        if (PVUREC.PVUERROR[PVUERGEN] == "Y")
          return;
        else
          PV0GS47(); /* Validate Quality*/
          if (PVUREC.PVUERROR[PVUERGEN] == "Y")
            return;
          else
            PV0GS44(); /* Validate PVCACAMT*/
            if (PVUREC.PVUERROR[PVUERGEN] == "Y")
              return;
            else
              PV0GS43(); /* Validate XAOCD*/
            end
          end
        end
      end
    end
    PV0GW01.PV0GWCT1 = PV0GW01.PV0GWCT1 + 1;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS84  ****/
end // end PV0GS84

// EXIT     Routine (XSEXIT)
Function PV0GS88()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        EXIT and Check security                         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  XSEXIT();
  PV0GM100.VAGen_EZEMSG = COMMAREA.CAMSG;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GSXT  ****/
end // end PV0GS88

// BUILD    GL WS
Function PV0GS90()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Build GL Working Storage                    ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GW03 empty;
  PV0GW03.PV0GWTP3 = 1;
  PV0GW03.PV0GWCUR = 1;
  PV0GW03.PV0GWBT3 = 1;
  PV0GM100.PV0GMGLA = 0;
  PV0GM100.PV0GMGDF = 0;
  PV0G890(); /* Declare GL Cursor*/
  PV0G891(); /* Fetch first row*/
  while (PV0GW03.VAGen_SQLCODE == 0)
    PV0GW03.XAOCD[PV0GWBT3] = PVDREC.XAOCD;
    PV0GW03.GLAENT[PV0GWBT3] = PVDREC.GLAENT;
    PV0GW03.GLARCID[PV0GWBT3] = PVDREC.GLARCID;
    PV0GW03.GLANTAC[PV0GWBT3] = PVDREC.GLANTAC;
    PV0GW03.GLASUB[PV0GWBT3] = PVDREC.GLASUB;
    PV0GW03.GLAPRJ[PV0GWBT3] = PVDREC.GLAPRJ;
    PV0GW03.PVCACAMT[PV0GWBT3] = PVDREC.PVCACAMT;
    PV0GW03.PVCAETYP[PV0GWBT3] = PVDREC.PVCAETYP;
    PV0GW03.PVCOVRFL[PV0GWBT3] = PVDREC.PVCOVRFL;
    PV0GW03.PVDJENBR[PV0GWBT3] = PVDREC.PVDJENBR;
    PV0GW03.PVDRFNBR[PV0GWBT3] = PVDREC.PVDRFNBR;
    PV0GW03.PVDPRIOD[PV0GWBT3] = PVDREC.PVDPRIOD;
    PV0GW03.ZZZSDT[PV0GWBT3] = PVDREC.ZZZSDT;
    PV0GW03.ZZZCHGCT[PV0GWBT3] = PVDREC.ZZZCHGCT;
    PV0GW03.PV0GWUSF[PV0GWBT3] = "O";
    PV0GM100.PV0GMGLA = PV0GM100.PV0GMGLA + PVDREC.PVCACAMT;
    PV0GW03.PV0GWBT3 = PV0GW03.PV0GWBT3 + 1;
    PV0G891(); /* Fetch next  row*/
  end
  PV0GW03.PV0GWMK3 = PV0GW03.PV0GWBT3; /* Keep Original Bot Ptr*/
  ;
  PV0G892(); /* Close GL Cursor*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS90  ****/
end // end PV0GS90

// BUILD    PROFITABILITY WS
Function PV0GS91()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Build PROFITABILITY Working Storage         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set PV0GW02 empty;
  PV0GW02.PV0GWTP2 = 1;
  PV0GW02.PV0GWCUR = 1;
  PV0GW02.PV0GWBT2 = 1;
  PV0GM100.PV0GMPFA = 0;
  PV0GM100.PV0GMPDF = 0;
  PV0GW01.PV0GWPST = 0;
  PV0G900(); /* Declare PROFITABILITY Cursor*/
  PV0G901(); /* Fetch first row*/
  while (PV0GW02.VAGen_SQLCODE == 0)
    PV0GW02.XAOCD[PV0GWBT2] = PVCREC.XAOCD;
    PV0GW02.YISCD[PV0GWBT2] = PVCREC.YISCD;
    PV0GW02.SY1STNBR[PV0GWBT2] = PVCREC.SY1STNBR;
    PV0GW02.SY2CLRID[PV0GWBT2] = PVCREC.SY2CLRID;
    PV0GW02.XDMCD[PV0GWBT2] = PVCREC.XDMCD;
    PV0GW02.XQACD[PV0GWBT2] = PVCREC.XQACD;
    PV0GW02.PVCACAMT[PV0GWBT2] = PVCREC.PVCACAMT;
    PV0GW02.PVCOVRFL[PV0GWBT2] = PVCREC.PVCOVRFL;
    PV0GW02.PVCPSTDT[PV0GWBT2] = PVCREC.PVCPSTDT;
    PV0GW02.PVCMNNBR[PV0GWBT2] = PVCREC.PVCMNNBR;
    PV0GW02.PVCAETYP[PV0GWBT2] = PVCREC.PVCAETYP;
    PV0GW02.XGPCD[PV0GWBT2] = PVCREC.XGPCD;
    PV0GW02.PV0GWUSF[PV0GWBT2] = "O";
    PV0GM100.PV0GMPFA = PV0GM100.PV0GMPFA + PVCREC.PVCACAMT;
    PV0GW01.PV0GWPST = PV0GW01.PV0GWPST + PVCREC.PVCACAMT;
    PV0G901(); /* Fetch next  row*/
    if (PV0GW02.VAGen_SQLCODE == 0)
      if (PVCREC.YISCD == PV0GW02.YISCD[PV0GWBT2])
         /* next sentence*/
      else
        PV0GS96(); /* Create Sub-total Line*/
      end
    else
      PV0GS96(); /* Create Sub-total Line*/
    end
    PV0GW02.PV0GWBT2 = PV0GW02.PV0GWBT2 + 1;
  end
  PV0GW02.PV0GWMK2 = PV0GW02.PV0GWBT2; /* Keep Original Bot Ptr*/
  ;
  PV0G902(); /* Close PROFITABILITY Cursor*/
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS91  ****/
end // end PV0GS91

// BUILD    Scroll Lines
Function PV0GS92()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build Scroll Lines                              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GW01.PV0GWMAP == "1")
    PV0GS93(); /* GL Screen*/
  else
    PV0GS94(); /* Profitability Screen*/
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS92  ****/
end // end PV0GS92

// BUILD    GL Scroll Lines
Function PV0GS93()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build GL Scroll Lines                           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW03.PV0GWCUR = PV0GW03.PV0GWTP3;
  PV0GW03.PV0GWCN3 = 0;
  while (PV0GW03.PV0GWCN3 < PV0GW01.PV0GWMAX)
    PV0GW03.PV0GWCN3 = PV0GW03.PV0GWCN3 + 1;
    set PV0GM100.YISCD[PV0GWCN3] skip;
    set PV0GM100.SY1STNBR[PV0GWCN3] skip;
    set PV0GM100.SY2CLRID[PV0GWCN3] skip;
    set PV0GM100.XDMCD[PV0GWCN3] skip;
    set PV0GM100.XQACD[PV0GWCN3] skip;
    if (PVUREC.PVUINQRY == "Y")
      set PV0GM100.PVCACAMT[PV0GWCN3] skip;
      set PV0GM100.XAOCD[PV0GWCN3] skip;
    else
      set PV0GM100.PVCACAMT[PV0GWCN3] normal;
      set PV0GM100.XAOCD[PV0GWCN3] normal;
    end
    set PV0GM100.XAOABRV[PV0GWCN3] skip;
    PV0GM100.SY1STNBR[PV0GWCN3] = " ";
    PV0GM100.SY2CLRID[PV0GWCN3] = " ";
    PV0GM100.XDMCD[PV0GWCN3] = " ";
    PV0GM100.XQACD[PV0GWCN3] = " ";
    PV0GM100.YISCD[PV0GWCN3] = 0;
    if (PV0GW03.PV0GWTP3 == PV0GW03.PV0GWBT3)
      PV0GM100.PV0GMGLC[PV0GWCN3] = " ";
      PV0GM100.PVCACAMT[PV0GWCN3] = 0;
      PV0GM100.XAOCD[PV0GWCN3] = " ";
      PV0GM100.XAOABRV[PV0GWCN3] = " ";
      PV0GM100.PV0GMDTE[PV0GWCN3] = 0;
      PV0GM100.PV0GMETY[PV0GWCN3] = " ";
      if (PVUREC.PVUINQRY == "Y")
        set PV0GM100.PV0GMGLC[PV0GWCN3] skip;
      else
        set PV0GM100.PV0GMGLC[PV0GWCN3] normal;
      end
    else
      PV0GM100.PV0GMGLC[PV0GWCN3] = PV0GW03.PV0GWGLC[PV0GWTP3];
      PV0GM100.PVCACAMT[PV0GWCN3] = PV0GW03.PVCACAMT[PV0GWTP3];
      PV0GM100.XAOCD[PV0GWCN3] = PV0GW03.XAOCD[PV0GWTP3];
      if (PV0GW03.PV0GWTP3 >= PV0GW03.PV0GWMK3)
        set PV0GM100.PV0GMGLC[PV0GWCN3] normal;
      else
        set PV0GM100.PV0GMGLC[PV0GWCN3] skip;
      end
      if (PV0GW03.XAOCD[PV0GWTP3] in XAOTBL.XAOCD)
        PV0GM100.XAOABRV[PV0GWCN3] = XAOTBL.XAOABRV[sysVar.arrayIndex];
      else
        PV0GM100.XAOABRV[PV0GWCN3] = " ";
      end
      PV0GM100.PV0GMDTE[PV0GWCN3] = PV0GW03.PVDPRIOD[PV0GWTP3];
      PV0GM100.PV0GMETY[PV0GWCN3] = PV0GW03.PVCAETYP[PV0GWTP3];
      PV0GW03.PV0GWTP3 = PV0GW03.PV0GWTP3 + 1;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS93  ****/
end // end PV0GS93

// BUILD    PROF Scroll Lines
Function PV0GS94()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        Build PROFITABILITY Scroll Lines                ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW02.PV0GWCUR = PV0GW02.PV0GWTP2;
  PV0GW02.PV0GWCN2 = 0;
  while (PV0GW02.PV0GWCN2 < PV0GW01.PV0GWMAX)
    PV0GW02.PV0GWCN2 = PV0GW02.PV0GWCN2 + 1;
    set PV0GM100.PV0GMGLC[PV0GWCN2] skip;
    set PV0GM100.XAOABRV[PV0GWCN2] skip;
    if (PVUREC.PVUINQRY == "Y")
      set PV0GM100.PVCACAMT[PV0GWCN2] skip;
      set PV0GM100.XAOCD[PV0GWCN2] skip;
    else
      set PV0GM100.PVCACAMT[PV0GWCN2] normal;
      set PV0GM100.XAOCD[PV0GWCN2] normal;
    end
    PV0GM100.PV0GMGLC[PV0GWCN2] = " ";
    if (PV0GW02.PV0GWTP2 == PV0GW02.PV0GWBT2)
      PV0GM100.SY1STNBR[PV0GWCN2] = " ";
      PV0GM100.SY2CLRID[PV0GWCN2] = " ";
      PV0GM100.XDMCD[PV0GWCN2] = " ";
      PV0GM100.XQACD[PV0GWCN2] = " ";
      PV0GM100.YISCD[PV0GWCN2] = 0;
      PV0GM100.PVCACAMT[PV0GWCN2] = 0;
      PV0GM100.XAOCD[PV0GWCN2] = " ";
      PV0GM100.XAOABRV[PV0GWCN2] = " ";
      PV0GM100.PV0GMDTE[PV0GWCN2] = 0;
      PV0GM100.PV0GMETY[PV0GWCN2] = " ";
      if (PVUREC.PVUINQRY == "Y")
        set PV0GM100.YISCD[PV0GWCN2] skip;
        set PV0GM100.SY1STNBR[PV0GWCN2] skip;
        set PV0GM100.SY2CLRID[PV0GWCN2] skip;
        set PV0GM100.XDMCD[PV0GWCN2] skip;
        set PV0GM100.XQACD[PV0GWCN2] skip;
      else
        set PV0GM100.YISCD[PV0GWCN2] normal;
        set PV0GM100.SY1STNBR[PV0GWCN2] normal;
        set PV0GM100.SY2CLRID[PV0GWCN2] normal;
        set PV0GM100.XDMCD[PV0GWCN2] normal;
        set PV0GM100.XQACD[PV0GWCN2] normal;
      end
    else
      PV0GM100.SY1STNBR[PV0GWCN2] = PV0GW02.SY1STNBR[PV0GWTP2];
      PV0GM100.SY2CLRID[PV0GWCN2] = PV0GW02.SY2CLRID[PV0GWTP2];
      PV0GM100.XDMCD[PV0GWCN2] = PV0GW02.XDMCD[PV0GWTP2];
      PV0GM100.XQACD[PV0GWCN2] = PV0GW02.XQACD[PV0GWTP2];
      PV0GM100.YISCD[PV0GWCN2] = PV0GW02.YISCD[PV0GWTP2];
      PV0GM100.PVCACAMT[PV0GWCN2] = PV0GW02.PVCACAMT[PV0GWTP2];
      PV0GM100.XAOCD[PV0GWCN2] = PV0GW02.XAOCD[PV0GWTP2];
      PV0GM100.PV0GMDTE[PV0GWCN2] = PV0GW02.PVCPSTDT[PV0GWTP2];
      PV0GM100.PV0GMETY[PV0GWCN2] = PV0GW02.PVCAETYP[PV0GWTP2];
      if (PV0GW02.PV0GWTP2 >= PV0GW02.PV0GWMK2)
        set PV0GM100.YISCD[PV0GWCN2] normal;
        set PV0GM100.SY1STNBR[PV0GWCN2] normal;
        set PV0GM100.SY2CLRID[PV0GWCN2] normal;
        set PV0GM100.XDMCD[PV0GWCN2] normal;
        set PV0GM100.XQACD[PV0GWCN2] normal;
      else
        set PV0GM100.YISCD[PV0GWCN2] skip;
        set PV0GM100.SY1STNBR[PV0GWCN2] skip;
        set PV0GM100.SY2CLRID[PV0GWCN2] skip;
        set PV0GM100.XDMCD[PV0GWCN2] skip;
        set PV0GM100.XQACD[PV0GWCN2] skip;
        if (PV0GW02.PV0GWUSF[PV0GWTP2] == "T")
          set PV0GM100.PVCACAMT[PV0GWCN2] skip;
          set PV0GM100.XAOCD[PV0GWCN2] skip;
        end
      end
      if (PV0GW02.XAOCD[PV0GWTP2] in XAOTBL.XAOCD)
        PV0GM100.XAOABRV[PV0GWCN2] = XAOTBL.XAOABRV[sysVar.arrayIndex];
      else
        PV0GM100.XAOABRV[PV0GWCN2] = " ";
      end
      PV0GW02.PV0GWTP2 = PV0GW02.PV0GWTP2 + 1;
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS94  ****/
end // end PV0GS94

// CREATE   PROF Subtotal
Function PV0GS96()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            Create PROFITABILITY Sub-total Line         ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  if (PV0GW01.PV0GWPST == PV0GW02.PVCACAMT[PV0GWBT2])
     /* next sentence*/
  else
    PV0GW02.PV0GWBT2 = PV0GW02.PV0GWBT2 + 1;
    PV0GW02.XAOCD[PV0GWBT2] = " ";
    PV0GW02.YISCD[PV0GWBT2] = 0;
    PV0GW02.SY1STNBR[PV0GWBT2] = " ";
    PV0GW02.SY2CLRID[PV0GWBT2] = " ";
    PV0GW02.XDMCD[PV0GWBT2] = " ";
    PV0GW02.XQACD[PV0GWBT2] = " ";
    PV0GW02.PV0GWUSF[PV0GWBT2] = "T";
    PV0GW02.PVCACAMT[PV0GWBT2] = PV0GW01.PV0GWPST;
  end
  ;
  PV0GW01.PV0GWPST = 0;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS96  ****/
end // end PV0GS96

// BUILD    GL Scroll Lines
Function PV0GS98()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **        PROTECT Input Fields                            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PV0GW03.PV0GWCN3 = 0;
  while (PV0GW03.PV0GWCN3 < PV0GW01.PV0GWMAX)
    PV0GW03.PV0GWCN3 = PV0GW03.PV0GWCN3 + 1;
    set PV0GM100.YISCD[PV0GWCN3] skip;
    set PV0GM100.SY1STNBR[PV0GWCN3] skip;
    set PV0GM100.SY2CLRID[PV0GWCN3] skip;
    set PV0GM100.XDMCD[PV0GWCN3] skip;
    set PV0GM100.XQACD[PV0GWCN3] skip;
    set PV0GM100.PV0GMGLC[PV0GWCN3] skip;
    set PV0GM100.YISCD[PV0GWCN3] skip;
    set PV0GM100.PVCACAMT[PV0GWCN3] skip;
    set PV0GM100.XAOCD[PV0GWCN3] skip;
    set PV0GM100.XAOABRV[PV0GWCN3] skip;
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of PV0GS98  ****/
end // end PV0GS98

// IO0420   DPINVC.VGLIST01
Function XPPV420()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **            IO Module for Valid GL Numbers              ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO0420" (PVYREC, SQLCA, GLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV420";
          TA1REC.TA1DBASE = "DGENLD";
          TA1REC.TA1TBLVU = "VGLIST01";
          TA1REC.TA1TBLKE = GLBREC.GLBGRP;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV420  ****/
end // end XPPV420

// IO5890   DPINVC.VGLTRN01
Function XPPV890()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **           IO Module for General Ledger Items           ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO5890" (PVYREC, SQLCA, PVDREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    XSPVS89(); /* Save keys in COMMAREA*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV890";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VGLTRN01";
          TA1REC.TA1TBLKE = PVAREC.PVAIVCID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV890  ****/
end // end XPPV890

// IO5900   DPINVC.VPFTRN01
Function XPPV900()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **           IO Module for Profitability Items            ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO5900" (PVYREC, SQLCA, PVCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Requested Record Found*/
    PVUREC.PVUERNBR = 97;
    XSPVS90(); /* Save keys in COMMAREA*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* Requested Record Not Found*/
      PVUREC.PVUERNBR = 98;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
         /* Multiple Rows Found, Enter Additional Qualifiers*/
        PVUREC.PVUERNBR = 84;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
           /* Data Base Busy; Retry in a few minutes*/
          PVUREC.PVUERNBR = 44;
        else
          TA1REC.TA1LOC = "XPPV900";
          TA1REC.TA1DBASE = "DPINVC";
          TA1REC.TA1TBLVU = "VPFTRN01";
          TA1REC.TA1TBLKE = PVAREC.PVAIVCID;
          XSPVS52(); /* Invoke DB2 Error Handler*/
        end
      end
    end
  end
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XPPV900  ****/
end // end XPPV900

// CONVERSE XAOTBL Pop-up Window
Function XPXAO01()
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XAOTBL.XAOCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XAOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAOTBL.XAOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAOTBL.XAODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XAOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAOTBL.XAOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAOTBL.XAODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XAOTBL.XAOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end XPXAO01

// SAVE     PVD Keys in COMMAREA
Function XSPVS89()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **     Save PVDREC Keys in PVUREC/COMMAREA.CAUSERA        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVUREC.PVURCRD1 = "PVDREC";
  move PVDREC to PVUREC withV60Compat;
  COMMAREA.CAUSERA = PVUREC.PVUGROUP;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XSPVS89  ****/
end // end XSPVS89

// SAVE     PVC Keys in COMMAREA
Function XSPVS90()
  ;
   /* *************************************************************/
   /* ***                                                      ****/
   /* **     Save PVCREC Keys in PVUREC/COMMAREA.CAUSERA        ***/
   /* ***                                                      ****/
   /* *************************************************************/
  ;
  PVUREC.PVURCRD1 = "PVCREC";
  move PVCREC to PVUREC withV60Compat;
  COMMAREA.CAUSERA = PVUREC.PVUGROUP;
  ;
  return; /* Last Statement*/
  ;
  ;
   /* ***  End of XSPVS90  ****/
end // end XSPVS90

//*** RECORD=GLBREC ****
// csp record for the pv system valid gl numbers
// 
// db2 table: dgenld.vglist01
// 
// dclgen:    DCL00150
// 
// i/o mod:   io0420
// 
// key to table:     glaent
//                   glarcid
//                   glantac
//                   glasub
//                   glaprj
//                   ysmsyspf
// maintenance log:
// 
//   who      when         why
// --------  --------  --------------------------------------
// hvarga    05/31/91  initial construction
// 
// **********************
Record GLBREC type basicRecord
  5 GLBGRP GLBGRP ; 
    10 GLAENT GLAENT ; 
    10 GLARCID GLARCID ; 
    10 GLANTAC GLANTAC ; 
    10 GLASUB GLASUB ; 
    10 GLAPRJ GLAPRJ ; 
    10 YSMSYSPF YSMSYSPF ; 
    10 GLADESC GLADESC ; 
    10 GLASDESC GLASDESC ; 
    10 GLBLTYP GLBLTYP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end GLBREC

//*** RECORD=PV0GW01 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0GW01 type basicRecord
  5 PV0GWMAP PV0GWMAP ; 
  5 PV0GWMAX PV0GWMAX ; 
  5 PV0GWCT1 PV0GWCT1 ; 
  5 PV0GWCT2 PV0GWCT2 ; 
  5 PV0GWCT3 PV0GWCT3 ; 
  5 PV0GWGLP PV0GWGLP ; 
  5 PV0GWPFP PV0GWPFP ; 
  5 PV0GWGLF PV0GWGLF ; 
  5 PV0GWPFF PV0GWPFF ; 
  5 PV0GWCRP PV0GWCRP ; 
  5 PV0GWCRF PV0GWCRF ; 
  5 PV0GWAMT PV0GWAMT ; 
  5 XAOCD XAOCD ; 
  5 PV0GWPST PV0GWPST ; 
  5 PV0GWPKY PV0GWPKY ; 
    10 YISCD YISCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
  5 PV0GWKEY PV0GWKEY ; 
end // end PV0GW01

//*** RECORD=PV0GW02 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// 04-30-93 MMALIN MAINT  Increased ws YIS table size
// ************************************************************
// ***********************
Record PV0GW02 type basicRecord
  5 VAGen_SQLCODE VAGen_SQLCODE ; 
  5 PV0GWTP2 PV0GWTP2 ; 
  5 PV0GWBT2 PV0GWBT2 ; 
  5 PV0GWMK2 PV0GWMK2 ; 
  5 PV0GWCN2 PV0GWCN2 ; 
  5 PV0GWCUR PV0GWCUR ; 
  5 PV0GWPVC PV0GWPVC [1000] ; 
    10 PV0GWPKY PV0GWPKY ; 
      15 YISCD YISCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
    10 PVCACAMT PVCACAMT ; 
    10 XAOCD XAOCD ; 
    10 XGPCD XGPCD ; 
    10 PVCOVRFL PVCOVRFL ; 
    10 PVCPSTDT PVCPSTDT ; 
    10 PVCMNNBR PVCMNNBR ; 
    10 PVCAETYP PVCAETYP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PV0GWUSF PV0GWUSF ; 
end // end PV0GW02

//*** RECORD=PV0GW03 ****
// Maintenance Log:
// 
//   Date   Init   Proj#       C o m m e n t s
// -------- ------ -----  -------------------------------------
// 03-27-91 HVARGA P9999  Initial Construction
// ************************************************************
// ***********************
Record PV0GW03 type basicRecord
  5 VAGen_SQLCODE VAGen_SQLCODE ; 
  5 PV0GWTP3 PV0GWTP3 ; 
  5 PV0GWBT3 PV0GWBT3 ; 
  5 PV0GWMK3 PV0GWMK3 ; 
  5 PV0GWCN3 PV0GWCN3 ; 
  5 PV0GWCUR PV0GWCUR ; 
  5 PV0GWPVD PV0GWPVD [500] ; 
    10 PV0GWGLC PV0GWGLC ; 
      15 GLAENT GLAENT ; 
      15 GLARCID GLARCID ; 
      15 GLANTAC GLANTAC ; 
      15 GLASUB GLASUB ; 
      15 GLAPRJ GLAPRJ ; 
    10 PVCACAMT PVCACAMT ; 
    10 PVCAETYP PVCAETYP ; 
    10 PVCOVRFL PVCOVRFL ; 
    10 XAOCD XAOCD ; 
    10 PVDJENBR PVDJENBR ; 
    10 PVDRFNBR PVDRFNBR ; 
    10 PVDPRIOD PVDPRIOD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PV0GWUSF PV0GWUSF ; 
end // end PV0GW03

// group level for pv gl rec
DataItem GLBGRP char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-pv-acct-typ-ind
DataItem GLBLTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Amount Field
DataItem PV0GWAMT decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer
DataItem PV0GWBT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Bottom Line Pointer
DataItem PV0GWBT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work Counter 2
DataItem PV0GWCN2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Scroll Counter
DataItem PV0GWCN3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current Field  Position
DataItem PV0GWCRF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Cursor Position
DataItem PV0GWCRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 1
DataItem PV0GWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 2
DataItem PV0GWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Counter 3
DataItem PV0GWCT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Showing
DataItem PV0GWCUR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// GL Account Number
DataItem PV0GWGLC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL Field  Position
DataItem PV0GWGLF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL Cursor Position
DataItem PV0GWGLP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YIS Row Unique Key
DataItem PV0GWKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Active Screen
DataItem PV0GWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of Scroll Lines
DataItem PV0GWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Original Bottom Line Ptr
DataItem PV0GWMK2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Original Bottom Line Ptr
DataItem PV0GWMK3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PF Field  Position
DataItem PV0GWPFF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF Cursor Position
DataItem PV0GWPFP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YIS Row Unique Key
DataItem PV0GWPKY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Profitability sub-total
DataItem PV0GWPST decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Profitability WS
DataItem PV0GWPVC char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General Ledger WS
DataItem PV0GWPVD char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer
DataItem PV0GWTP2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Top Line Pointer
DataItem PV0GWTP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Used Flag
DataItem PV0GWUSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

