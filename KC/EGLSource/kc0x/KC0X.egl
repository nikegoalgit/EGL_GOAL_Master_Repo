package kc0x;

import corpcom1.*;
import corpcom5.*;
import corpcom6.SQLCA;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KC0X ****
// ;
// This application will allow testing of calls to cc1070
//   credit's online credit checking program.
// ;
// Maintenance Log:
// 10/28/91 - wjohns - CREATE NEW APPLICATION
// 01/30/92 - wjohns - change map and allow entry of draw
//                     order id, sub order id, and part char
//                     for bulk/draw testing.
// 09/21/99 - SSANK1 - Changed map presentation of KC0XM001
//                     to accomodate 4 digit nike order sub
//                     order id.
// *********************
Program KC0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0XW01 KC0XW01; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KCXTBL {deleteAfterUse = yes}; // table
  use KC0XM.KC0XM100,  // forms
      KC0XM.KC0XM200, 
      KC0XM.KC0XM300
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0X-000: KC0X-000();
  end // end main
end // end KC0X

// FORMAT ORDER INQUIRY SCREEN
Function KC0X-000()
   /* ***********************************************/
   /* * call cc1070                                **/
   /* ***********************************************/
  ;
  KC0X-100();
  ;
  if (converseVar.eventKey is pf1)
    KC0X-200();
    KC0X-000();
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  set OP1REC empty;
  ;
  OP1REC.OP1PARTN = KC0XM100.OP1PARTN;
  OP1REC.OP1CUOID = KC0XM100.OP1CUOID;
  OP1REC.OP1NORID = KC0XM100.OP1NORID;
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* format cc1rec and call credit - cc1070.*/
    ;
    CC1REC.CC1PVALU = KC0XM100.CC1PVALU; /* on-order value var*/
    CC1REC.CC1PUNTS = KC0XM100.CC1PUNTS; /* on-order units var*/
    CC1REC.CC1AVALU = KC0XM100.CC1AVALU; /* alloc value var*/
    CC1REC.CC1AUNTS = KC0XM100.CC1AUNTS; /* alloc units var*/
    CC1REC.CC1PGMNM = KC0XM100.CC1PGMNM; /* calling program name*/
    CC1REC.CC1CLRSN = KC0XM100.CC1CLRSN; /* call reason*/
    CC1REC.CC1PARTN = KC0XM100.CC1PARTN; /* part char*/
    CC1REC.CC1CUOID = KC0XM100.CC1CUOID; /* cust order id*/
    CC1REC.CC1NORID = KC0XM100.CC1NORID; /* nike order id*/
    CC1REC.CC1RTNCD = 0; /* zero out return code*/
    CC1REC.CC1RTNMA = " "; /* clear return error message*/
    ;
    /* display screen to show values being passed to cc1070*/
    set KC0XM200 initial;
    KC0XM200.CC0XTOFM = "TO";
    KC0XM200.VAGen_EZEMSG = "ENTER: WILL CALL CC1070X";
    KC0X-500();
    ;
    if (converseVar.eventKey is pf4)
       /* NEXT SENTENCE*/
    else
      ;
      call "CC1070X" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};
      ;
      /* display screen to show values passed back from cc1070*/
      set KC0XM200 initial;
      KC0XM200.CC0XTOFM = "FROM";
      KC0XM200.VAGen_EZEMSG = "RETURNED DATA FROM CC1070X";
      KC0X-500(); /* display screen*/
    end
  else
    KC0XM100.VAGen_EZEMSG = "ORDER NOT FOUND";
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  else
    KC0X-000();
  end
end // end KC0X-000

// SEND ENTRY SCREEN
Function KC0X-100()
  KC0XM100.KC0XM-MAP-DATE = VGVar.currentShortGregorianDate;
  ;
  converse KC0XM100 ;
  ;
  ;
end // end KC0X-100

// WINDOW FOR HELP
Function KC0X-200()
   /* *******************************************/
   /* * CC0X600 - WINDOW FOR HELP*/
   /* *******************************************/
  ;
  KC0X-300();
  while (KC0XW01.KC0XW-END-WINDOW-FLAG == "N")
    KC0X-400();
  end
  ;
  converseLib.clearScreen();
  
end // end KC0X-200

// INITIALIZE POP UP WINDOW
Function KC0X-300()
   /* ------------------------------------------------------------*/
  ;
           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/
  ;
      /* Initialize fields on map and in working storage.*/
  ;
   /* ------------------------------------------------------------*/
  ;
     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/
  ;
  set KC0XM300 initial; /* Clear the map area*/
  set KC0XW01 empty; /* clear working storage*/
  KC0XW01.KC0XW-TABLE-INDEX = 1; /* Table index*/
  KC0XW01.KC0XW-SCREEN-INDEX = 1; /* Screen index*/
  KC0XW01.KC0XW-LAST-INDEX = 0; /* End of first page save index*/
  KC0XW01.KC0XW-FIRST-TIME-FLAG = "Y"; /* first time thru flag*/
  KC0XW01.KC0XW-ERROR-FLAG = "N"; /* Scroll error flag to no*/
  KC0XW01.KC0XW-END-WINDOW-FLAG = "N";
                                       /* End of pop up window session flag*/
  ;
  ;
end // end KC0X-300

// CONVERSE HELP POP UP WINDOW
Function KC0X-400()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, return*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (KC0XW01.KC0XW-ERROR-FLAG == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    ;
    if (KC0XW01.KC0XW-FIRST-TIME-FLAG == "N")
      KC0XW01.KC0XW-TABLE-INDEX = KC0XW01.KC0XW-WINDOW-INDEX[10] + 1;
    end
    ;
    set KC0XM300 initial; /* Clear map output area*/
    KC0XM300.KC0XMHDR = "                  HELP FACILITY FOR KC0X  ";
    KC0XM300.KC0XMTR1 = "   PF7:BACK       PRESS ENTER TO RETURN   ";
    KC0XM300.KC0XMTR2 = "   PF8:FRWD                               ";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8
     || KC0XW01.KC0XW-FIRST-TIME-FLAG == "Y")
      KC0XW01.KC0XW-SCREEN-INDEX = 1;
      while (KC0XW01.KC0XW-SCREEN-INDEX <= 10
       && KCXTBL.KC0XT-HELP-LINE-NUMBER[KC0XW-TABLE-INDEX] != 99)
        KC0XM300.KC0XMDES[KC0XW-SCREEN-INDEX] = KCXTBL.KC0XT-HELP-TEXT-LINE[KC0XW-TABLE-INDEX];
        KC0XW01.KC0XW-WINDOW-INDEX[KC0XW-SCREEN-INDEX] = KC0XW01.KC0XW-TABLE-INDEX;
        if (KC0XW01.KC0XW-FIRST-TIME-FLAG == "Y")
          KC0XW01.KC0XW-LAST-INDEX = KC0XW01.KC0XW-TABLE-INDEX;
        end
        KC0XW01.KC0XW-SCREEN-INDEX = KC0XW01.KC0XW-SCREEN-INDEX + 1;
        KC0XW01.KC0XW-TABLE-INDEX = KC0XW01.KC0XW-TABLE-INDEX + 1;
      end
      KC0XW01.KC0XW-FIRST-TIME-FLAG = "N";
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7)
      KC0XW01.KC0XW-TABLE-INDEX = KC0XW01.KC0XW-WINDOW-INDEX[1] - 1;
      KC0XW01.KC0XW-SCREEN-INDEX = 10; /* Set up screen index*/
      while (KC0XW01.KC0XW-SCREEN-INDEX >= 1) /* Load from the bottom up*/
        KC0XM300.KC0XMDES[KC0XW-SCREEN-INDEX] = KCXTBL.KC0XT-HELP-TEXT-LINE[KC0XW-TABLE-INDEX];
        KC0XW01.KC0XW-WINDOW-INDEX[KC0XW-SCREEN-INDEX] = KC0XW01.KC0XW-TABLE-INDEX;
        KC0XW01.KC0XW-SCREEN-INDEX = KC0XW01.KC0XW-SCREEN-INDEX - 1;
        KC0XW01.KC0XW-TABLE-INDEX = KC0XW01.KC0XW-TABLE-INDEX - 1;
      end
    end
    if (KC0XW01.KC0XW-TABLE-INDEX < 1)
      KC0XW01.KC0XW-TABLE-INDEX = 1;
    end
  end
  ;
  ;
  converse KC0XM300 ;
  ;
  KC0XW01.KC0XW-ERROR-FLAG = "N"; /* Reset error flag*/
  ;
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8
   && KCXTBL.KC0XT-HELP-LINE-NUMBER[KC0XW-TABLE-INDEX] == 99)
    KC0XW01.KC0XW-ERROR-FLAG = "Y";
  else
    if (converseVar.eventKey is pf7
     && KC0XW01.KC0XW-WINDOW-INDEX[1] <= KC0XW01.KC0XW-LAST-INDEX)
      KC0XW01.KC0XW-ERROR-FLAG = "Y";
    else
      if (converseVar.eventKey is enter)
        KC0XW01.KC0XW-END-WINDOW-FLAG = "Y"; /* Set end flag*/
      else
        if (converseVar.eventKey not pf7
         && converseVar.eventKey not pf8
         && converseVar.eventKey not enter)
          KC0XW01.KC0XW-ERROR-FLAG = "Y"; /* set error flag*/
        end
      end
    end
  end
end // end KC0X-400

// SENT OUTPUT SCREEN
Function KC0X-500()
   /* *******************************************/
   /* set credit FYI screen for test only     **/
   /* *******************************************/
  ;
  KC0XM200.CC0XMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  ;
  KC0X-600();
  ;
  converse KC0XM200 ;
  ;
  ;
end // end KC0X-500

// FORMAT OUTPUT SCREEN
Function KC0X-600()
   /* *******************************************************/
   /* * FORMAT THE OUTPUT SCREEN                           **/
   /* *                                                    **/
   /* * MOVE DATA FROM ORDER HEADER RECORDS AND PASSED     **/
   /* * PARM DATA TO THE MAP FOR DISPLAYING.               **/
   /* *                                                    **/
   /* *******************************************************/
  ;
  KC0XM200.OP1CUOID = OP1REC.OP1CUOID; /* order number*/
  KC0XM200.OP1NORID = OP1REC.OP1NORID; /* nike  number*/
  KC0XM200.KUCCOID = OP1REC.KUCCOID; /* customer number*/
  KC0XM200.KUMSTRID = OP1REC.KUMSTRID; /* store number*/
  KC0XM200.XNXCD = OP1REC.XNXCD; /* dept number*/
  KC0XM200.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0XM200.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0XM200.OP1OTUNT = OP1REC.OP1OTUNT; /* order qty*/
  KC0XM200.XOTCD = OP1REC.XOTCD; /* order type*/
  KC0XM200.XOSCD = OP1REC.XOSCD; /* order status*/
  KC0XM200.XGPCD = OP1REC.XGPCD; /* order gpc code*/
  KC0XM200.XDVCD = OP1REC.XDVCD; /* order division*/
  KC0XM200.XBDCD = OP1REC.XBDCD; /* order bulk code*/
  KC0XM200.OP1CUNDT = OP1REC.OP1CUNDT; /* customer need date*/
  ;
   /* **********************************************/
    /* Passed Information                        **/
   /* **********************************************/
  KC0XM200.CC1CLRSN = CC1REC.CC1CLRSN; /* calling reason*/
  KC0XM200.CC1PVALU = CC1REC.CC1PVALU; /* passed value*/
  KC0XM200.CC1PUNTS = CC1REC.CC1PUNTS; /* passed qty*/
  KC0XM200.CC1AVALU = CC1REC.CC1AVALU; /* alloc  value*/
  KC0XM200.CC1AUNTS = CC1REC.CC1AUNTS; /* alloc  qty*/
  KC0XM200.CC1PGMNM = CC1REC.CC1PGMNM; /* calling pgm*/
  KC0XM200.CC1RTNCD = CC1REC.CC1RTNCD; /* return code*/
  KC0XM200.CC1RTNMS = CC1REC.CC1RTNMS; /* return message*/
  ;
   /* **********************************************/
    /* Credit Checking Information               **/
   /* **********************************************/
  KC0XM200.XCHCD1 = OP1REC.XCHCD[1]; /* rtc reason code*/
  KC0XM200.XCHCD2 = OP1REC.XCHCD[2]; /* rtc reason code*/
  KC0XM200.XCHCD3 = OP1REC.XCHCD[3]; /* rtc reason code*/
  KC0XM200.XCSCD = OP1REC.XCSCD; /* credit status*/
  KC0XM200.OP1CSADT = OP1REC.OP1CSADT; /* credit date*/
  KC0XM200.OP1CSATM = OP1REC.OP1CSATM; /* credit time*/
  KC0XM200.OP1CRLMP = OP1REC.OP1CRLMP; /* last program*/
  KC0XM200.OP1CRLMR = OP1REC.OP1CRLMR; /* maint rep*/
  KC0XM200.OP1PCSCD = OP1REC.OP1PCSCD; /* prev credit status*/
  KC0XM200.OP1PCSDT = OP1REC.OP1PCSDT; /* prev credit date*/
  KC0XM200.OP1PCSTM = OP1REC.OP1PCSTM; /* prev credit time*/
  KC0XM200.OP1CCKOQ = OP1REC.OP1CCKOQ; /* cr check qty*/
  KC0XM200.OP1CKAMT = OP1REC.OP1CKAMT; /* cr check amt*/
  KC0XM200.OP1DCHLD = OP1REC.OP1DCHLD; /* nbr days on hold*/
  ;
end // end KC0X-600

//*** RECORD=KC0XW01 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ***********************
Record KC0XW01 type basicRecord
  10 KC0XW-TABLE-INDEX num(4) ; // TABLE INDEX
  10 KC0XW-SCREEN-INDEX num(4) ; // SCREEN INDEX
  10 KC0XW-LAST-INDEX num(4) ; 
  10 KC0XW-WINDOW-INDEX num(4) [10] ; 
  10 KC0XW-END-WINDOW-FLAG char(1) ; 
  10 KC0XW-FIRST-TIME-FLAG char(1) ; 
  10 KC0XW-ERROR-FLAG char(1) ; 
  10 XGPCD char(2) ; // XGP_GPC_CD
  10 XWHCD char(2) ; // XWH_WHSE_CD
  10 YPGFFFL char(1) ; // YPG_PDTYP_FCST_FL
  10 YESCDIND char(1) ; // yes_adj_stat_ind
end // end KC0XW01

