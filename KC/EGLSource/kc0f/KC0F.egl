package kc0f;

import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.XZZREC;
import corpcom3.XPXCU01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XCUTBL;
import ku.common.KUCREC;
import sm.common.SM1REC;
import sm.common.SM4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KC0F ****
// ************************************************************
// 
//         CC0F - Credit Sheet Hold Request Screen
//         ---------------------------------------
// 
// General program explanation and notes:
// 
// This program is the request submitter program for the
// Credit Hold Sheet Request system.  It validates the
// values given as well as the combination of values
// given.  Records are written to the Parameter database
// which will then be used as input to a batch program
// 'CC1240' , 'Credit Get Companies' program.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 04-11-90 tgriff set up
// 04-09-91 wjohns changed message numbers to match changes
//                 to the cc message file after clean up.
// 08-01-91 wjohns Renamed from CC0F to KC0F for new version
//                 of CICS.
// 08-09-91 wjohns Renamed commarea references.
// 08-27-91 JWOOD  CHANGED CC0 TO KC0 PER STANDARDS...
// 10-07-91 wjohns Regen for database changes.
//  ------- -------- ------ ----------------------------------
//  Y2KFIX  02/19/98 CSAWKI MODIFICATIONS MADE TO: KC0F120
// 
// *********************
Program KC0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0FW01 KC0FW01; // record
  KUCREC KUCREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCUTBL; // table
  use KC0FM.KC0FM001, // form
  		KC0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0F000: KC0F000();
    exit program;
  end // end main
end // end KC0F

// Main flow
Function KC0F000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F000";
  ;
  KC0F001(); /* initilize the application*/
  ;
  KC0FW01.KC0FWEOA = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (KC0FW01.KC0FWEOA == "N") /* while not end-of-aplication*/
    KC0F050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "KC0M";
  ;
  XSEXIT();
  ;
   /* if xsexit failed*/
  ;
  KC0FW01.KC0FWERR = "Y";
  converseLib.validationFailed(34); /* security error*/
  ;
  exit program;
end // end KC0F000

// Initialize application
Function KC0F001()
  ;
  KC0FW01.KC0FWCPR = "KC0F001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set SQLCA empty;
  ;
  KC0FS00(); /* set security*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
   /* TEMP001;*/
  ;
  set KC0FW01 empty; /* clear common working storage*/
  KC0FW01.KC0FWBSC = "Y"; /* set 'build screen ' to yes*/
  ;
   /* ***********************************/
   /* Initialize all potential records.*/
   /* ***********************************/
  set KUCREC empty;
  set SM1REC empty;
  set SM4REC empty;
  set XZZREC empty;
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  ;
  if (COMMAREA.CATOAP != " ") /* 'toap' will be non-blank if fastpath*/
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  end
end // end KC0F001

// abend routine
Function KC0F005()
  ;
       /* abend with negative sqlcode*/
  ;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = KC0FW01.KC0FWCPR; /* aborting process*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(23);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end
  ;
end // end KC0F005

// decide which map to display
Function KC0F050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = "KC0FM001"; /* prepare for abend*/
  ;
  KC0FW01.KC0FWESF = "N"; /* set end-of-screen flag to 'no'*/
  KC0FW01.KC0FWERR = "N"; /* clear error flag*/
  ;
  while (KC0FW01.KC0FWESF == "N") /* show until user is done*/
    KC0F100();
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of Kc0%050...*/
       /* else*/
         /* the perform will auto return to Kc0%000.*/
  ;
end // end KC0F050

// Converse map m001
Function KC0F100()
   /* ************************************************************/
   /* *    process screen Kc0fm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from Kc0f050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F100";
  ;
  if (KC0FW01.KC0FWBSC == "Y")
    KC0F101(); /* Perform i/o, load map fields*/
    KC0FW01.KC0FWBSC = "N";
  end
  ;
   /* ***********************************************************/
  converse KC0FM001 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  KC0FW01.KC0FWERR = "N"; /* Clear any previous error*/
  ;
  KC0F110(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (KC0FW01.KC0FWERR == "N") /* No PF key error detected*/
    if (KC0FM001 is modified
     || converseVar.eventKey is pf12)
      KC0F120(); /* Examine keys or edit*/
    end
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (KC0FW01.KC0FWERR == "N") /* No PF key error detected*/
    KC0F130(); /* Determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process Kc0f100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to Kc0f050.*/
end // end KC0F100

// Build screen
Function KC0F101()
   /* **************************************/
   /* Build screen Kc0fm001*/
   /* **************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F101";
   /* ***************************************/
   /* If this is the first pass, don't load*/
   /* ***************************************/
  if (KC0FM001.XCUCD == " "
   && KC0FM001.KUCCOID == 0)
    set KC0FM001 empty;
    KC0FM001.XXXPRCNM = "KC0FM";
    KC0FM001.XXXMAPNM = "KC0FM001";
    KC0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
    return;
  end
  ;
  KC0FM001.XCUNM = " "; /* Clear display-only variables*/
  KC0FM001.KUCCONM = " ";
  KC0FM001.SM1AGYNM = " ";
  KC0FM001.XXXLSTNM = " ";
  KC0FM001.XCUNM2 = " ";
  ;
  KC0FM001.XXXPRCNM = "KC0FM"; /* Now, rebuild it*/
  KC0FM001.XXXMAPNM = "KC0FM001";
  KC0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* IF KC0FW01.KC0FWINQ EQ 'Y'      ; not inq only user*/
    /* KC0FSS1                       ; set all fields to askip*/
   /* ELSE ;*/
    /* KC0FSS2                       ; set all fields to normal*/
   /* END ;*/
  ;
  if (KC0FW01.KC0FWERR != "Y")
    if (KC0FM001.XCUCD != " ")
      if (KC0FM001.XCUCD in XCUTBL.XCUCD)
        KC0FM001.XCUNM = XCUTBL.XCUNM[sysVar.arrayIndex];
      end
    end
    ;
    if (KC0FM001.KUCCOID != 0)
      KUCREC.KUCCOID = KC0FM001.KUCCOID;
      ;
      KC0FS01(); /* Select unique - kucrec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        KC0FM001.KUCCOID = KUCREC.KUCCOID;
        KC0FM001.KUCCONM = KUCREC.KUCCONM; /* Load map field*/
      end
    end
    ;
    if (KC0FM001.SM1AGYID != " ")
      SM1REC.SM1AGYID = KC0FM001.SM1AGYID;
      ;
      KC0FS02(); /* select unique - SM1REC*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        KC0FM001.SM1AGYNM = SM1REC.SM1AGYNM;
      end
    end
    ;
    if (KC0FM001.SM4REPID != 0)
      SM4REC.SM4REPID = KC0FM001.SM4REPID;
      ;
      KC0FS03(); /* select unique - SM4REC*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        KC0FM001.XXXLSTNM = SM4REC.XXXLSTNM;
      end
    end
    ;
    if (KC0FM001.XCUCD2 != " ")
      if (KC0FM001.XCUCD2 in XCUTBL.XCUCD)
        KC0FM001.XCUNM2 = XCUTBL.XCUNM[sysVar.arrayIndex];
      end
    end
    ;
  end
end // end KC0F101

// Edit pfkeys
Function KC0F110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F110";
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (KC0FM001.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = KC0FM001.CATOAP;
    COMMAREA.CAITEM = KC0FM001.CAITEM;
    ;
    XSEXIT();
    ;
     /* if xsexit failed*/
    ;
    KC0FW01.KC0FWERR = "Y";
    converseLib.validationFailed(34); /* security error*/
    ;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      KC0FW01.KC0FWERR = "Y";
    else
      if (converseVar.eventKey is pa2)
        set KC0FM001 empty;
        KC0FW01.KC0FWBSC = "Y";
        KC0FW01.KC0FWENT = "N";
      else
        if (converseVar.eventKey is pf1)
          ;
          COMMAREA.CATOAP = "GD01";
          COMMAREA.CAITEM = "KC0FM001";
          ;
          XSEXIT();
          ;
        else
          if (converseVar.eventKey is pf4)
            if (KC0FW01.KC0FWERR != "Y")
              COMMAREA.CAUSERA = " ";
              XSPF4();
            end
          else
            if (converseVar.eventKey is pf3)
              if (KC0FW01.KC0FWERR != "Y")
                COMMAREA.CATOAP = "KC0M";
                COMMAREA.CAUSERA = " ";
                ;
                XSEXIT();
                ;
                 /* if xsexit failed*/
                ;
                KC0FW01.KC0FWERR = "Y";
                converseLib.validationFailed(34); /* security error*/
                ;
                return;
              end
            else
              if (converseVar.eventKey is pf12)
                if (KC0FW01.KC0FWENT == "Y")
                  /* next sentence*/
                else
                  KC0FW01.KC0FWERR = "Y";
                  converseLib.validationFailed(40);
                end
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                KC0FW01.KC0FWERR = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end KC0F110

// Edit cc0fm001 fields / i-o
Function KC0F120()
   /* **************************************/
   /* Edit Kc0fm001 entries and perform i/o*/
   /* **************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F120";
  ;
  set KC0FM001.XCUCD normal;
  set KC0FM001.KUCCOID normal;
  set KC0FM001.SM1AGYID normal;
  set KC0FM001.SM4REPID normal;
  set KC0FM001.XCUCD2 normal;
  ;
   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  if (KC0FM001.XCUCD == " "
   && KC0FM001.KUCCOID == 0
   && KC0FM001.SM1AGYID == " "
   && KC0FM001.SM4REPID == 0
   && KC0FM001.XCUCD2 == " ")
    set KC0FM001.XCUCD cursor, normal;
    set KC0FM001.KUCCOID normal;
    set KC0FM001.SM1AGYID normal;
    set KC0FM001.SM4REPID normal;
    set KC0FM001.XCUCD2 normal;
    KC0FW01.KC0FWERR = "Y";
    KC0FW01.KC0FWBSC = "Y";
    return;
  end
  ;
   /* ************************************************************/
   /* Has the user requested a pop-up window for credit resp?*/
   /* ************************************************************/
  if (KC0FM001.XCUCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND != "Y")
      XPXCU01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      KC0FM001.XCUCD = XCUTBL.XCUCD[XX0XWPIX];
    end
    if (KC0FM001.XCUCD2 != "?")
      converseLib.clearScreen();
      
      set KC0FM001.XCUCD cursor;
    end
  end
   /* ************************************************************/
   /* Has the user requested a pop-up window for credit resp(2)?*/
   /* ************************************************************/
  if (KC0FM001.XCUCD2 == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND != "Y")
      XPXCU01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      KC0FM001.XCUCD2 = XCUTBL.XCUCD[XX0XWPIX];
    end
    converseLib.clearScreen();
    
    set KC0FM001.XCUCD2 cursor;
  end
   /* ****************************************/
   /* If present, credit rep 2 MUST be valid*/
   /* ****************************************/
  if (KC0FM001.XCUCD2 != " ") /* pop-up NOT requested*/
    ;
    if (KC0FM001.XCUCD2 in XCUTBL.XCUCD) /* Valid selection made?*/
      set KC0FM001.XCUCD2 normal; /* Yes, clear previous error*/
    else
      set KC0FM001.XCUCD2 cursor, modified, bold; /* Indicate error*/
      converseLib.validationFailed(41); /* Invalid credit rep given*/
      KC0FW01.KC0FWERR = "Y";
    end
  end
   /* *************************************************************/
   /* Company -OR- combination of sales agency, sales rep &*/
   /* credit manager MUST be present*/
   /* *************************************************************/
  if (KC0FM001.KUCCOID > 0)
    KUCREC.KUCCOID = KC0FM001.KUCCOID;
    ;
    KC0FS01(); /* Select unique - KUCREC*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      set KC0FM001.KUCCOID cursor, modified, bold; /* Indicate error*/
      KC0FW01.KC0FWERR = "Y";
      converseLib.validationFailed(18); /* Invalid company number given*/
    else
      KC0FM001.SM1AGYID = " ";
      KC0FM001.SM4REPID = 0;
      KC0FM001.XCUCD2 = " ";
    end
  else
    if (KC0FM001.SM1AGYID == " "
     && KC0FM001.SM4REPID == 0
     && KC0FM001.XCUCD2 == " ")
      ;
      KC0FW01.KC0FWERR = "Y";
      set KC0FM001.SM1AGYID cursor, modified, bold; /* Indicate error*/
      set KC0FM001.SM4REPID modified, bold;
      set KC0FM001.XCUCD2 modified, bold;
      converseLib.validationFailed(50); /* At least one of these fields is required*/
    else
      if (KC0FM001.XCUCD2 != " ")
        if (KC0FM001.XCUCD2 in XCUTBL.XCUCD)
          set KC0FM001.XCUCD2 normal; /* Yes, clear previous error*/
        else
          set KC0FM001.XCUCD2 cursor, modified, bold; /* Indicate error*/
          converseLib.validationFailed(41); /* Invalid credit rep given*/
          KC0FW01.KC0FWERR = "Y";
        end
      end
      ;
      if (KC0FM001.SM4REPID != 0)
        SM4REC.SM4REPID = KC0FM001.SM4REPID;
        ;
        KC0FS03(); /* Select unique sm4rec*/
        ;
        if (SQLCA.VAGen_SQLCODE != 0)
          set KC0FM001.SM4REPID cursor, modified, bold; /* Indicate error*/
          converseLib.validationFailed(53);
          KC0FW01.KC0FWERR = "Y";
        end
        ;
      end
      ;
      if (KC0FM001.SM1AGYID != " ")
        SM1REC.SM1AGYID = KC0FM001.SM1AGYID;
        ;
        KC0FS02(); /* Select unique - SM1REC*/
        ;
        if (SQLCA.VAGen_SQLCODE != 0)
          set KC0FM001.SM1AGYID cursor, modified, bold; /* Indicate error*/
          converseLib.validationFailed(54);
          KC0FW01.KC0FWERR = "Y";
        end
      end
    end
  end
   /* ************************************/
   /* Valid credit rep must be present*/
   /* ************************************/
  if (KC0FM001.XCUCD != "?") /* pop-up NOT requested*/
    ;
    if (KC0FM001.XCUCD in XCUTBL.XCUCD) /* Valid selection made?*/
      set KC0FM001.XCUCD normal; /* Yes, clear previous error*/
      KC0FW01.KC0FWXCU = KC0FM001.XCUCD;
    else
      set KC0FM001.XCUCD cursor, modified, bold; /* Indicate error*/
      converseLib.validationFailed(41); /* Invalid credit rep given*/
      KC0FW01.KC0FWERR = "Y";
    end
  end
   /* *************************************/
   /* All edits performed, how did we do?*/
   /* *************************************/
  if (KC0FW01.KC0FWERR == "Y")
    KC0FW01.KC0FWENT = "N";
    return; /* if edit errors do not update*/
  else
    if (converseVar.eventKey is pf12
     && KC0FW01.KC0FWENT == "Y")
      ;
      XZZREC.XZZQRYID = "CC1240";
      XZZREC.XZZ4CHR1 = KC0FM001.XCUCD;
      XZZREC.XZZINT1 = KUCREC.KUCCOID;
      XZZREC.XZZ4CHR2 = KC0FM001.SM1AGYID;
      XZZREC.XZZSINT1 = KC0FM001.SM4REPID;
      XZZREC.XZZ6CHR = KC0FM001.XCUCD2;
      ;
      /*  */
      /* ******************* Y2K OUT BEGIN ********************/
      /*  */
      /* MOVE EZEDTE TO KC0FW01.KC0FWFSD;*/
      /* MOVE 019 TO KC0FW01.KC0FWFCN;*/
      /*  */
      /* ******************* Y2K OUT END **********************/
      /*  */
      /*  */
      /* ******************* Y2K IN BEGIN *********************/
      /*  */
      KC0FW01.KC0FWFDT = VGVar.currentGregorianDate;
      /*  */
      /* ******************* Y2K IN END ***********************/
      /*  */
      KC0FW01.KC0FWBDT = KC0FW01.KC0FWFDT;
      XZZREC.ZZZSDT = KC0FW01.KC0FWBDT;
      ;
      KC0FW01.KC0FWTIM = VGVar.currentFormattedTime;
      KC0FW01.KC0FWFHR = KC0FW01.KC0FWHR;
      KC0FW01.KC0FWFMI = KC0FW01.KC0FWMI;
      KC0FW01.KC0FWBTM = KC0FW01.KC0FWFTM;
      XZZREC.ZZZSTM = KC0FW01.KC0FWBTM;
    else
      if (converseVar.eventKey is enter)
        KC0FW01.KC0FWENT = "Y";
        KC0FW01.KC0FWBSC = "Y";
      end
    end
  end
end // end KC0F120

// determine next action
Function KC0F130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/
  ;
  KC0FW01.KC0FWCPR = "KC0F130";
  ;
  if (converseVar.eventKey is pf12
   && KC0FW01.KC0FWENT == "Y")
    ;
    KC0FS04(); /* add row to parameter table*/
    ;
    set KC0FM001 empty;
    ;
    KC0FM001.XCUCD = KC0FW01.KC0FWXCU;
    set KC0FM001.KUCCOID cursor;
    KC0FW01.KC0FWBSC = "Y";
    KC0FW01.KC0FWENT = "N";
    converseLib.validationFailed(42);
    ;
  end
end // end KC0F130

// Load commarea
Function KC0FS00()
  ;
  if (COMMAREA.CASYSINT != "CSP")
    set COMMAREA empty;
    COMMAREA.CASYSINT = "CSP";
    COMMAREA.CAUSERID = "DEMO";
    COMMAREA.CAFROMAP = "KC0M";
    COMMAREA.CACURRAP = "KC0F";
    COMMAREA.CAADD = "YNNNNNNNNNN";
    COMMAREA.CACHG = "YNNNNNNNNNN";
    COMMAREA.CADEL = "YNNNNNNNNNN";
    COMMAREA.CAINQ = "YNNNNNNNNNN";
  end
  ;
end // end KC0FS00

// Select Unique from KUCREC
Function KC0FS01()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/
  ;
  KC0FW01.KC0FWCPR = "KC0FS01";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Cust table*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    KC0F005(); /* abend routine*/
  end
end // end KC0FS01

// Select Unique from SM1REC
Function KC0FS02()
   /* ************************/
   /* SM1REC - Select Unique*/
   /* ************************/
  ;
  KC0FW01.KC0FWCPR = "KC0FS02";
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Sales Agency table*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0050 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VSAGCY01"; /* table view*/
    KC0F005(); /* abend routine*/
  end
end // end KC0FS02

// Select Unique from SM4REC
Function KC0FS03()
   /* ************************/
   /* SM4REC - Select Unique*/
   /* ************************/
  ;
  KC0FW01.KC0FWCPR = "KC0FS03";
  ;
  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes}; /* Read Sales Reps table*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0020 "; /* io module*/
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VREPS001"; /* table view*/
    KC0F005(); /* abend routine*/
  end
end // end KC0FS03

// Add unique to XZZREC
Function KC0FS04()
   /* ************************/
   /* XZZREC - Add Unique*/
   /* ************************/
  ;
  KC0FW01.KC0FWCPR = "KC0FS04";
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes}; /* Add Parm*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO1000 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VPARM101"; /* table view*/
    KC0F005(); /* abend routine*/
  end
end // end KC0FS04

//*** RECORD=KC0FW01 ****
// Working storage variables for 'CC0F'
// ***********************
Record KC0FW01 type basicRecord
  10 KC0FWERR KC0FWERR ; 
  10 KC0FWBSC KC0FWBSC ; 
  10 KC0FWCPR KC0FWCPR ; 
  10 KC0FWESF KC0FWESF ; 
  10 KC0FWEOA KC0FWEOA ; 
  10 KC0FWINQ KC0FWINQ ; 
  10 KC0FWENT KC0FWENT ; 
  10 KC0FWXCU KC0FWXCU ; 
  10 KC0FWFDT KC0FWFDT ; 
    15 KC0FWFCN KC0FWFCN ; 
    15 KC0FWFSD KC0FWFSD ; 
  10 KC0FWBDT KC0FWBDT ; 
  10 KC0FWTIM KC0FWTIM ; 
    15 KC0FWHR KC0FWHR ; 
    15 * char(1) ; 
    15 KC0FWMI KC0FWMI ; 
    15 * char(1) ; 
    15 KC0FWSE KC0FWSE ; 
  10 KC0FWFTM KC0FWFTM ; 
    15 KC0FWFHR KC0FWFHR ; 
    15 KC0FWFMI KC0FWFMI ; 
  10 KC0FWBTM KC0FWBTM ; 
end // end KC0FW01

// Binary version of date
DataItem KC0FWBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen flag
DataItem KC0FWBSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Binary version of time
DataItem KC0FWBTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current process name
DataItem KC0FWCPR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Enter key pressed flag
DataItem KC0FWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-applic flag
DataItem KC0FWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit error flag
DataItem KC0FWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag
DataItem KC0FWESF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted century
DataItem KC0FWFCN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date
DataItem KC0FWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted hour
DataItem KC0FWFHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted minute
DataItem KC0FWFMI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system date
DataItem KC0FWFSD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted time
DataItem KC0FWFTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system hour
DataItem KC0FWHR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only flag
DataItem KC0FWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system minute
DataItem KC0FWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system second
DataItem KC0FWSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system time
DataItem KC0FWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold area for sales rep
DataItem KC0FWXCU char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

