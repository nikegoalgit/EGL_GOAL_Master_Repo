package kc0s;

import corpcom1.*;
import corpcom2.XZZREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSOPS02;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.*;
import corpx1.XCUCD;
import corpx1.XCUTBL;
import iv.common.IVZREC;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0S ****
// Maintenance Log
// ---------------
// VCowan  05/01/89  - added XSSEGTR logic
// DSalzw  04/28/89  - added noncsp to all calls.
// WJOHNS  10/10/90  - remove xparmrec and use xzzrec instead.
// WJOHNS  04/09/91  - Change message numbers to match changes
//                     to the cc message file after clean up.
// WJOHNS  08/01/91  - Renamed from CC0S to KC0S for new
//                     version of CICS.
// WJOHNS  08/09/91  - Renamed commarea referrences.
// JWOOD   08/27/91  - CHANGED CC0 TO KC0 PER STANDARDS....
// wjohns  10/07/91  - Regen for database changes.
// cancie  09/30/92  - replaced vragcy01 with new view vragcy02
// CHELLM  03/04/98  - Corrected default xcucd logic
// AKESAV  11/17/99  - Y2K Fix - Changed proc KC0S122 and map
//                     KC0SM001
// *********************
Program KC0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CCXREC CCXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IVZREC IVZREC; // record
  KC0SW01 KC0SW01; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRAGCY02 VRAGCY02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCUTBL {deleteAfterUse = yes}; // table
  use KC0SM.KC0SM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0S000: KC0S000();
    ;
    ;
    ;
    ;
  end // end main
end // end KC0S

// initialize cc0s appl
Function KC0S000()
   /* ************************************************************/
   /* *    initialize the Kc0s application*/
   /* ************************************************************/
  ;
  ;
  XSENTRY(); /* check valid entry thru csp*/
  ;
  XSSEGTR(); /* set segemented transaction id*/
  ;
  set KC0SW01 empty; /* initialize Kc0s working stg*/
  KC0SW01.KC0SW-EOT-FL = "N"; /* initialize end of table flag*/
  KC0SW01.KC0SW-TBL-IX = 1; /* initialize table search index*/
  ;
  ;
  while (KC0SW01.KC0SW-EOT-FL == "N")
    if (COMMAREA.CAUSERID == XCUTBL.CAUSERID[KC0SW-TBL-IX]
     && XCUTBL.XXXSTAT[KC0SW-TBL-IX] == "A")
      KC0SM001.XCUCD[1] = XCUTBL.XCUCD[KC0SW-TBL-IX];
      KC0SM001.XCUNM[1] = XCUTBL.XCUNM[KC0SW-TBL-IX];
      KC0SM001.XCUCD[2] = XCUTBL.XCUCD[KC0SW-TBL-IX];
      KC0SM001.XCUNM[2] = XCUTBL.XCUNM[KC0SW-TBL-IX];
      KC0SW01.KC0SW-EOT-FL = "Y";
    else
      KC0SW01.KC0SW-TBL-IX = KC0SW01.KC0SW-TBL-IX + 1;
      if (XCUTBL.XCUCD[KC0SW-TBL-IX] == "9999")
        KC0SW01.KC0SW-EOT-FL = "Y";
      end
    end
  end
  if (KC0SM001.XCUCD[1] > " ")
      /* next sentence*/
  else
    converseLib.validationFailed(48);
  end
  ;
  ;
  CCXREC.CCXCSCRN = "KC0SM001";
  CCXREC.CCXSNAME[1] = "KC0SM001";
  ;
  set KC0SM001.XCUCD[1] cursor;
  ;
  ;
  ;
  KC0S050();
  ;
  ;
  ;
end // end KC0S000

// main cc0s branch control
Function KC0S050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CCXREC.CCXCPROC = "KC0S050"; /* set current process name*/
  ;
  ;
  if (CCXREC.CCXCSCRN in CCXREC.CCXSNAME)
    CCXREC.CCXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  ;
  CCXREC.CCXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  ;
  if (CCXREC.CCXSCRNX == 1) /* if screen cl0%m001*/
    while (CCXREC.CCXEOSF == "N") /* while not end-of-screen*/
      KC0S100(); /* process screen cl0sm001*/
    end
  else
    TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
    XPCC001();
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (ccxeoaf) = 'n'*/
           /* we go back to the top of Kc0s050...*/
       /* if the end-of-application flag (ccxeoaf) = 'y'*/
           /* we return to Kc0s000.*/
  ;
  ;
  ;
end // end KC0S050

// convers request screen
Function KC0S100()
  ;
  ;
  ;
  KC0SM001.XXXSCRDT = VGVar.currentShortGregorianDate;
  KC0SM001.KC0SWANM = "KC0S100";
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && KC0SM001.CAMSG == " ")
    /* next sentence*/
  else
    set KC0SM001 alarm;
  end
  ;
  ;
  ;
  converse KC0SM001 ;
  ;
  ;
  KC0SM001.CAMSG = " ";
  ;
  ;
  KC0S110(); /* handle special entries*/
  ;
  ;
  KC0S120(); /* validate entries*/
  ;
  ;
  if (KC0SW01.KC0SWURS == "Y" /* if update was requested*/
   && KC0SW01.KC0SWEVS == "Y") /* and entries were valid*/
    KC0S130(); /* go update the data base*/
  end
  ;
  ;
  ;
end // end KC0S100

// check for special entries
Function KC0S110()
   /* ***********************************************************/
  ;
  ;
  ;
   /* ***********************************************************/
  ;
  ;
  KC0SW01.KC0SWSES = "N"; /* set special-entry-switch to 'no'*/
  KC0SW01.KC0SWSEV = "Y"; /* 'set special-entry-valid sw to 'yes'*/
  KC0SW01.KC0SWURS = "N"; /* set update-requested-sw to 'no'*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (KC0SM001.CATOAP != " ")
      COMMAREA.CATOAP = KC0SM001.CATOAP;
      COMMAREA.CAITEM = KC0SM001.CAITEM;
      XSEXIT();
      KC0SW01.KC0SWSES = "Y"; /* yes there was a special entry*/
      KC0SW01.KC0SWSEV = "N"; /* no, the entry was not valid*/
      KC0SM001.CAMSG = COMMAREA.CAMSG;
      set KC0SM001.CATOAP cursor, bold;
    else
       /* next sentence...no special functions...go back*/
    end
  else
    if (KC0SM001.CATOAP != " ")
      KC0SW01.KC0SWSES = "Y"; /* yes there was a special entry*/
      KC0SW01.KC0SWSEV = "N"; /* no, the entry was not valid*/
      converseLib.validationFailed(6); /* can't use fast-path and pf-key*/
      set KC0SM001.CATOAP cursor, bold;
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KC0M";
          XSEXIT();
          KC0SW01.KC0SWSES = "Y"; /* yes there was a special entry*/
          KC0SW01.KC0SWSEV = "N"; /* no, the entry was not valid*/
          KC0SM001.CAMSG = COMMAREA.CAMSG;
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf12)
              KC0SW01.KC0SWURS = "Y"; /* yes, update was requested*/
            else
              KC0SW01.KC0SWSES = "Y";
                                   /* yes there was a special entry*/
              KC0SW01.KC0SWSEV = "N"; /* no, the entry was not valid*/
              converseLib.validationFailed(2); /* pfkey not supported*/
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0S110

// validate screen entry
Function KC0S120()
   /* ************************************************************/
   /* *   validate entries (if any) from screen Kc0sm001*/
   /* ***********************************************************/
  ;
  CCXREC.CCXCPROC = "KC0S120"; /* set current process name*/
  ;
  ;
  KC0SW01.KC0SWEVS = "Y"; /* set entry-valid-switch to 'yes'*/
  ;
  set KC0SM001.XCUCD[1] cursor, initialAttributes;
  set KC0SM001.XCUCD[2] initialAttributes;
  set KC0SM001.SM1AGYID initialAttributes;
  set KC0SM001.SM4REPID initialAttributes;
  set KC0SM001.KC0SWOTA initialAttributes;
  set KC0SM001.KC0SWFDT initialAttributes;
  set KC0SM001.KC0SWTDT initialAttributes;
  KC0SM001.XCUNM[1] = " ";
  KC0SM001.XCUNM[2] = " ";
  KC0SM001.SM1AGYNM = " ";
  KC0SM001.XXXLSTNM = " ";
  KC0SM001.KC0SWOTD = "(FP, AP, FF, AF, OT)";
  ;
  ;
  if (KC0SM001.XCUCD[2] == " "
   && KC0SM001.SM1AGYID == " "
   && KC0SM001.SM4REPID == 0
   && KC0SM001.KC0SWOTA == " "
   && KC0SM001.KC0SWFDT == " "
   && KC0SM001.KC0SWTDT == " ")
    KC0SW01.KC0SWEVS = "N"; /* set entry-valid-switch to 'no'*/
    converseLib.validationFailed(50); /* at least one field is required*/
    set KC0SM001.SM1AGYID cursor, bold;
    set KC0SM001.SM4REPID bold;
    set KC0SM001.XCUCD[2] bold;
    set KC0SM001.KC0SWOTA bold;
    set KC0SM001.KC0SWFDT bold;
    set KC0SM001.KC0SWTDT bold;
    return;
  end
  ;
  ;
   /* *** edit the to-date*/
  ;
  if (KC0SM001.KC0SWTDT == " ")
    KC0SW01.KC0SWPM2[1] = 0;
  else
    CCXREC.XXXEDFLD = KC0SM001.KC0SWTDT;
    KC0S122(); /* edit the date*/
    if (CCXREC.CCXVALDT == "Y")
      KC0SM001.KC0SWTDT = CCXREC.XXXFLDT; /* move formatted to screen*/
      KC0SW01.KC0SWPM2[1] = TA2REC.TA2GRGGN;
    else
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0SM001.KC0SWTDT cursor, modified, bold;
    end
  end
  ;
  ;
  ;
   /* *** edit the from-date*/
  ;
  if (KC0SM001.KC0SWFDT == " ")
    KC0SW01.KC0SWPM1[1] = 0;
  else
    CCXREC.XXXEDFLD = KC0SM001.KC0SWFDT;
    KC0S122(); /* edit the date*/
    if (CCXREC.CCXVALDT == "Y")
      KC0SM001.KC0SWFDT = CCXREC.XXXFLDT; /* move formatted to screen*/
      KC0SW01.KC0SWPM1[1] = TA2REC.TA2GRGGN;
    else
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0SM001.KC0SWFDT cursor, modified, bold;
    end
  end
  ;
  if (KC0SW01.KC0SWEVS == "Y"  /* if dates were valid*/
   && KC0SM001.KC0SWFDT != " " /* and from-date was entered*/
   && KC0SM001.KC0SWTDT != " ") /* and to-date was entered*/
    if (KC0SW01.KC0SWPM1[1] <= KC0SW01.KC0SWPM2[1]) /* from-dt le to-dt*/
      /* next sentence*/
    else
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(56); /* from-dt must be < to-date*/
      set KC0SM001.KC0SWFDT cursor, bold;
      set KC0SM001.KC0SWTDT bold;
    end
  end
  ;
  ;
  if (KC0SM001.XCUCD[1] == KC0SW01.XCUCD[1]
   && KC0SM001.XCUCD[2] == KC0SW01.XCUCD[2]
   && KC0SM001.SM1AGYID == KC0SW01.SM1AGYID
   && KC0SM001.SM4REPID == KC0SW01.SM4REPID
   && KC0SM001.KC0SWOTA == KC0SW01.KC0SWOTA
   && KC0SW01.KC0SWPM1[1] == KC0SW01.KC0SWPM1[2]
   && KC0SW01.KC0SWPM2[1] == KC0SW01.KC0SWPM2[2])
    KC0SW01.KC0SWEVS = "N"; /* set entry-valid-switch to 'no'*/
    converseLib.validationFailed(51); /* cant make same request twice*/
    set KC0SM001.XCUCD[1] cursor, bold;
    set KC0SM001.SM1AGYID bold;
    set KC0SM001.SM4REPID bold;
    set KC0SM001.XCUCD[2] bold;
    set KC0SM001.KC0SWOTA bold;
    set KC0SM001.KC0SWFDT bold;
    set KC0SM001.KC0SWTDT bold;
    return;
  end
  ;
  ;
  ;
  ;
  ;
  if (KC0SM001.KC0SWOTA != " ") /* if there is an order type acronym*/
    if (KC0SM001.KC0SWOTA == "FP" /* and its footwear prop*/
     || KC0SM001.KC0SWOTA == "FF" /* or it's footwear futures*/
     || KC0SM001.KC0SWOTA == "AP" /* or it's apparel prop*/
     || KC0SM001.KC0SWOTA == "AF" /* or it's apparel futures*/
     || KC0SM001.KC0SWOTA == "OT") /* or it's everything else*/
      if (KC0SM001.KC0SWOTA == "FP") /* it's valid so move the description*/
        KC0SM001.KC0SWOTD = "FOOTWEAR PROP";
      else
        if (KC0SM001.KC0SWOTA == "FF") /* or it's footwear futures*/
          KC0SM001.KC0SWOTD = "FOOTWEAR FUTURES";
        else
          if (KC0SM001.KC0SWOTA == "AP") /* or it's apparel prop*/
            KC0SM001.KC0SWOTD = "APPAREL PROP";
          else
            if (KC0SM001.KC0SWOTA == "AF") /* or it's apparel futures*/
              KC0SM001.KC0SWOTD = "APPAREL FUTURES";
            else
              if (KC0SM001.KC0SWOTA == "OT") /* or it's everything else*/
                KC0SM001.KC0SWOTD = "OTHER          ";
              end
            end
          end
        end
      end
    else
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(52); /* invalid group*/
      set KC0SM001.KC0SWOTA cursor, bold;
    end
  end
  ;
  ;
  ;
  if (KC0SM001.XCUCD[2] == " ")
     /* next sentence*/
  else
    if (KC0SM001.XCUCD[2] in XCUTBL.XCUCD)
      KC0SM001.XCUNM[2] = XCUTBL.XCUNM[sysVar.arrayIndex];
    else
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(45); /* invalid rep #*/
      set KC0SM001.XCUCD[2] cursor, bold;
    end
  end
  ;
  ;
     /* check to see if agency/rep combo is valid*/
  ;
  if (KC0SM001.SM1AGYID != " "
   && KC0SM001.SM4REPID != 0)
    KC0S123(); /* check agency/rep combo*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
        converseLib.validationFailed(55); /* invalid agency/rep combo*/
        set KC0SM001.SM1AGYID cursor, bold;
        set KC0SM001.SM4REPID bold;
      else
        XPCC001(); /* abort*/
      end
    end
  end
  ;
  ;
  ;
  if (KC0SM001.SM4REPID == 0)
     /* next sentence*/
  else
    SM4REC.SM4REPID = KC0SM001.SM4REPID;
    ;
    call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KC0S121(); /* reformat salesman name*/
      KC0SM001.XXXLSTNM = IVZREC.IVZFNAME;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
        converseLib.validationFailed(53); /* invalid sales rep*/
        set KC0SM001.SM4REPID cursor, modified, bold;
      else
        XPCC001(); /* abort*/
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
     /* check to see if agency is on file*/
  ;
  if (KC0SM001.SM1AGYID == " ")
     /* next sentence*/
  else
    set SM1REC empty;
    SM1REC.SM1AGYID = KC0SM001.SM1AGYID;
    ;
    call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KC0SM001.SM1AGYNM = SM1REC.SM1AGYNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
        converseLib.validationFailed(54); /* invalid agency*/
        set KC0SM001.SM1AGYID cursor, bold;
      else
        XPCC001(); /* abort*/
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
  if (KC0SM001.XCUCD[1] == " ")
    KC0SM001.XCUNM[1] = " ";
    KC0SW01.KC0SWEVS = "N"; /* set entry-valid-switch to 'no'*/
    converseLib.validationFailed(47); /* this field required*/
    set KC0SM001.XCUCD[1] cursor, bold, full;
  else
    if (KC0SM001.XCUCD[1] in XCUTBL.XCUCD)
      KC0SM001.XCUNM[1] = XCUTBL.XCUNM[sysVar.arrayIndex];
    else
      KC0SM001.XCUNM[1] = " ";
      KC0SW01.KC0SWEVS = "N";
                                   /* set entry-valid-switch to 'no'*/
      converseLib.validationFailed(45); /* invalid rep #*/
      set KC0SM001.XCUCD[1] cursor, bold;
    end
  end
  ;
  ;
end // end KC0S120

// reformat salesman name
Function KC0S121()
   /* *************************************************************/
   /* *****  R E F O R M A T    S A L E S M A N    N A M E   ******/
   /* *************************************************************/
  ;
  ;
  IVZREC.IVZFNAME = " ";
   /* ********** find last character in last name ***********/
  IVZREC.IVZNAME = " ";
  IVZREC.IVZNAME = SM4REC.XXXLSTNM;
  IVZREC.IVZ3IDX = 25;
  while (IVZREC.IVZ3IDX >= 1
   && IVZREC.IVZCHA[IVZ3IDX] == " ")
    IVZREC.IVZ3IDX = IVZREC.IVZ3IDX - 1;
  end
   /* ********** last character is in position 'iv0sw3dx' *********/
  ;
   /* ********** move last name to full name field ***********/
  IVZREC.IVZ2IDX = 1;
  while (IVZREC.IVZ2IDX <= IVZREC.IVZ3IDX)
    IVZREC.IVZFCHA[IVZ2IDX] = IVZREC.IVZCHA[IVZ2IDX];
    IVZREC.IVZ2IDX = IVZREC.IVZ2IDX + 1;
  end
  IVZREC.IVZFCHA[IVZ2IDX] = ",";
  IVZREC.IVZ2IDX = IVZREC.IVZ2IDX + 1;
  ;
   /* ********** find last character in first name ***********/
  IVZREC.IVZNAME = " ";
  IVZREC.IVZNAME = SM4REC.XXXFSTNM;
  IVZREC.IVZ3IDX = 25;
  while (IVZREC.IVZ3IDX >= 1
   && IVZREC.IVZCHA[IVZ3IDX] == " ")
    IVZREC.IVZ3IDX = IVZREC.IVZ3IDX - 1;
  end
   /* ********** last character is in position 'iv0sw3dx' *********/
  ;
   /* ********** move first name to full name field ***********/
  IVZREC.IVZ4IDX = 1;
  while (IVZREC.IVZ4IDX <= IVZREC.IVZ3IDX
   && IVZREC.IVZ2IDX <= 35)
    IVZREC.IVZFCHA[IVZ2IDX] = IVZREC.IVZCHA[IVZ4IDX];
    IVZREC.IVZ2IDX = IVZREC.IVZ2IDX + 1;
    IVZREC.IVZ4IDX = IVZREC.IVZ4IDX + 1;
  end
  if (IVZREC.IVZ2IDX <= 35)
    IVZREC.IVZFCHA[IVZ2IDX] = " ";
    IVZREC.IVZ2IDX = IVZREC.IVZ2IDX + 1;
  end
  ;
   /* ********** move middle initial to full name field ***********/
  if (IVZREC.IVZ2IDX <= 35)
    IVZREC.IVZFCHA[IVZ2IDX] = SM4REC.XXXMDINT;
    IVZREC.IVZ2IDX = IVZREC.IVZ2IDX + 1;
  end
  ;
  ;
  ;
  ;
  ;
end // end KC0S121

// edit entered date
Function KC0S122()
   /* ************************************************************/
   /* *      this process edits a date                          **/
   /* *                                                         **/
   /* *   the date is passed in the field clwrec.xxxedfld       **/
   /* *   if the date has dashes ('-') in it, then it can be    **/
   /* *      in the formats                                     **/
   /* *                  mm-dd-yy                               **/
   /* *                  mm-d-yy                                **/
   /* *                  m-dd-yy                                **/
   /* *                  m-d-yy                                 **/
   /* *                  yy-mm-dd                               **/
   /* *                  yy-m-dd                                **/
   /* *                  yy-mm-d                                **/
   /* *                  yy-m-d                                 **/
   /* *   if the date has no dashes (defined to be no dashes    **/
   /* *      in the 2nd or 3rd characters) then the 1st six     **/
   /* *      characters of the edit field are used as the date  **/
   /* *      to be edited and must be in the format             **/
   /* *                  mmddyy                                 **/
   /* *                  yymmdd                                 **/
   /* *   if the edit is valid, the the formatted date is       **/
   /* *      returned in the field clxrec.xxxfldt.              **/
   /* *      note that the returned date is always in the       **/
   /* *      format mm-dd-yy regardless of the input date.      **/
   /* ************************************************************/
  ;
  ;
  CCXREC.XXXFSDT = 0; /* initialize working date*/
  ;
  set TA2REC empty; /* initialize utility parameter record*/
  ;
   /* now scan the input date for valid characters*/
   /* only 0 -> 9, space, and '-' are valid*/
  ;
  CCXREC.CCXWFLDC = CCXREC.XXXED8C; /* move date to work array*/
  CCXREC.CCXWLTRX = 1; /* initialize index*/
  CCXREC.CCXLTRX1 = 0; /* and counter for '-'*/
  while (CCXREC.CCXWLTRX <= 10)
    if (CCXREC.CCXWLTR[CCXWLTRX] >= "0"
     && CCXREC.CCXWLTR[CCXWLTRX] <= "9")
        /* next sentence - these digits are ok*/
    else
      if (CCXREC.CCXWLTR[CCXWLTRX] == "-")
        CCXREC.CCXLTRX1 = CCXREC.CCXLTRX1 + 1; /* add 1 to dash count*/
      else
        if (CCXREC.CCXWLTR[CCXWLTRX] == " ")
            /* next sentence - these are ok, too*/
        else
          CCXREC.CCXVALDT = "N"; /* invalid digits in date*/
          return;
        end
      end
    end
    CCXREC.CCXWLTRX = CCXREC.CCXWLTRX + 1;
  end
  if (CCXREC.CCXLTRX1 == 0) /* we can have no dashes*/
    /* next sentence (this are ok)*/
  else
    if (CCXREC.CCXLTRX1 == 2) /* 2 dashes are ok*/
      if (CCXREC.XXXEDC2 == "-"
       || CCXREC.XXXEDC3 == "-")
          /* next sentence (dashes seem to be in the proper place)*/
      else
        CCXREC.CCXVALDT = "N"; /* not a valid date*/
        return; /* so exit*/
      end
    else
      CCXREC.CCXVALDT = "N"; /* not a valid date*/
      return; /* so exit*/
    end
  end
  ;
  ;
  if (CCXREC.XXXEDC2 != "-" /* if the 2nd and the third characters*/
   /* in*/
   && CCXREC.XXXEDC3 != "-") /* the date are not '-' then we can*/
    if (CCXREC.XXXEDC5 == " "
     || CCXREC.XXXEDC6 == " ")
      CCXREC.CCXVALDT = "N"; /* invalid date not enough digits*/
      return;
    else
      CCXREC.XXXFSDT = CCXREC.XXXED6C; /* edit the date as is*/
    end
  else
     /* otherwise we first get the month*/
    if (CCXREC.XXXEDC2 == "-")
      CCXREC.XXXFSMM = CCXREC.XXXEDN1;
    else
      if (CCXREC.XXXEDC3 == "-")
        CCXREC.XXXFSM1 = CCXREC.XXXEDN1;
        CCXREC.XXXFSM2 = CCXREC.XXXEDN2;
      end
    end
     /* then we get the day*/
    if (CCXREC.XXXEDC2 == "-"
     && CCXREC.XXXEDC5 == "-")
      CCXREC.XXXFSD1 = CCXREC.XXXEDN3;
      CCXREC.XXXFSD2 = CCXREC.XXXEDN4;
    else
      if (CCXREC.XXXEDC3 == "-"
       && CCXREC.XXXEDC6 == "-")
        CCXREC.XXXFSD1 = CCXREC.XXXEDN4;
        CCXREC.XXXFSD2 = CCXREC.XXXEDN5;
      else
        if (CCXREC.XXXEDC2 == "-"
         && CCXREC.XXXEDC4 == "-")
          CCXREC.XXXFSDD = CCXREC.XXXEDN3;
        else
          if (CCXREC.XXXEDC3 == "-"
           && CCXREC.XXXEDC5 == "-")
            CCXREC.XXXFSDD = CCXREC.XXXEDN4;
          end
        end
      end
    end
     /* then we get the year*/
    if (CCXREC.XXXEDC5 == "-"
     && CCXREC.XXXEDC7 == " ")
      CCXREC.XXXFSYY = CCXREC.XXXEDN6;
    else
      if (CCXREC.XXXEDC5 == "-"
       && CCXREC.XXXEDC8 == " ")
        CCXREC.XXXFSY1 = CCXREC.XXXEDN6;
        CCXREC.XXXFSY2 = CCXREC.XXXEDN7;
      else
        if (CCXREC.XXXEDC6 == "-"
         && CCXREC.XXXEDC8 == " ")
          CCXREC.XXXFSYY = CCXREC.XXXEDN7;
        else
          if (CCXREC.XXXEDC6 == "-"
           && CCXREC.XXXEDC9 == " ")
            CCXREC.XXXFSY1 = CCXREC.XXXEDN7;
            CCXREC.XXXFSY2 = CCXREC.XXXEDN8;
          else
            if (CCXREC.XXXEDC4 == "-"
             && CCXREC.XXXEDC7 == " ")
              CCXREC.XXXFSY1 = CCXREC.XXXEDN5;
              CCXREC.XXXFSY2 = CCXREC.XXXEDN6;
            end
          end
        end
      end
    end
  end
  ;
  ;
   /* TCS CHANGE BEGIN - 11/17/99*/
   /* IF CCXREC.XXXFSYY > 70;*/
  if (CCXREC.XXXFSYY >= 0)
   /* TCS CHANGE END   - 11/17/99*/
    TA2REC.TA2GRGAN = CCXREC.XXXFSDT;
    TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  else
    TA2REC.TA2GRGEN = CCXREC.XXXFSDT;
    TA2REC.TA2GRTYP = "E"; /* format is yymmdd*/
  end
  ;
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    CCXREC.CCXVALDT = "N"; /* set valid-date-flag to 'no'*/
  else
    CCXREC.XXXFLDT = TA2REC.TA2GRGB;
    CCXREC.CCXVALDT = "Y";
  end
  ;
  ;
   /* *************************************************************/
end // end KC0S122

// check agency/rep relationsip
Function KC0S123()
   /* GET KC0S023*/
  ;
  set VRAGCY02 empty;
  VRAGCY02.SM1AGYID = KC0SM001.SM1AGYID;
  VRAGCY02.SM4REPID = KC0SM001.SM4REPID;
  VRAGCY02.XXXSTAT = "*";
  VRAGCY02.SM5EDT = -1;
  ;
  call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if return code okay*/
    ;
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* if return code ok*/
     || SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      return;
    else
      /* *****************************************************/
      /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
      /* *****************************************************/
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY01";
      TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID;
      TA1REC.TA1LOCAT[3] = "KC0S023";
      TA1REC.TA1LOCAT[4] = "IO0400";
      XPCC001(); /* abort routine*/
      /* *****************************************************/
    end
  else
    /* *****************************************************/
    /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
    /* *****************************************************/
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VRAGCY01";
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID;
    TA1REC.TA1LOCAT[3] = "KC0S023";
    TA1REC.TA1LOCAT[4] = "IO0400";
    XPCC001(); /* abort routine*/
    /* *****************************************************/
  end
  ;
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0S123

// insert request into database
Function KC0S130()
   /* ************************************************************/
  ;
  ;
   /* ************************************************************/
  ;
  ;
  set XZZREC empty;
  ;
  ;
  XZZREC.XZZQRYID = "CC1120";
  XZZREC.XZZ4CHR1 = KC0SM001.XCUCD[1];
  XZZREC.XZZ4CHR2 = KC0SM001.XCUCD[2];
  XZZREC.XZZ6CHR = KC0SM001.SM1AGYID;
  XZZREC.XZZSINT1 = KC0SM001.SM4REPID;
  XZZREC.XZZ2CHR1 = KC0SM001.KC0SWOTA;
  ;
  if (KC0SW01.KC0SWPM1[1] == 0
   && KC0SW01.KC0SWPM2[1] == 0)
    XZZREC.XZZINT1 = 0; /* from date*/
    XZZREC.XZZINT2 = 0; /* to date*/
  else
    if (KC0SW01.KC0SWPM1[1] == 0
     && KC0SW01.KC0SWPM2[1] > 0)
      XZZREC.XZZINT1 = 0;
      XZZREC.XZZINT2 = KC0SW01.KC0SWPM2[1];
    else
      if (KC0SW01.KC0SWPM1[1] > 0
       && KC0SW01.KC0SWPM2[1] == 0)
        XZZREC.XZZINT1 = KC0SW01.KC0SWPM1[1];
        XZZREC.XZZINT2 = 99999999;
      else
        if (KC0SW01.KC0SWPM1[1] > 0
         && KC0SW01.KC0SWPM2[1] > 0)
          XZZREC.XZZINT1 = KC0SW01.KC0SWPM1[1];
          XZZREC.XZZINT2 = KC0SW01.KC0SWPM2[1];
        end
      end
    end
  end
  ;
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
  if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
    /* next sentence*/
  else
    converseLib.validationFailed(43); /* invalid date; update not done*/
    exit stack; /* skip around update*/
  end
  ;
  ;
  XZZREC.ZZZSDT = TA2REC.TA2GRGGN;
  XZZREC.ZZZSTM = TA2REC.TA2TIMHM;
  ;
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(49); /* request added*/
    KC0SW01.XCUCD[1] = KC0SM001.XCUCD[1];
    KC0SW01.XCUCD[2] = KC0SM001.XCUCD[2];
    KC0SW01.SM1AGYID = KC0SM001.SM1AGYID;
    KC0SW01.SM4REPID = KC0SM001.SM4REPID;
    KC0SW01.KC0SWOTA = KC0SM001.KC0SWOTA;
    KC0SW01.KC0SWPM1[2] = KC0SW01.KC0SWPM1[1];
    KC0SW01.KC0SWPM2[2] = KC0SW01.KC0SWPM2[1];
  else
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VPARM101";
    TA1REC.TA1LOCAT[2] = "KC0S030";
    TA1REC.TA1LOCAT[3] = "KC0S030";
    TA1REC.TA1LOCAT[4] = "IO1000";
    XSOPS02(); /* abort*/
  end
  ;
  ;
  ;
  ;
end // end KC0S130

// abend routine for credit
Function XPCC001()
   /* ************************************************************/
   /* *   this routine aborts the current application.          **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = CCXREC.CCXCPROC; /* aborting process*/
  set ERRSQLCA empty; /* clear area*/
  set SQLCA empty; /* clear area*/
  SQLCA.SQLCAHEX = sysVar.sqlData.sqlca; /* move in sqlca from csp*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VGVar.handleSysLibraryErrors = 1;
  sysLib.rollback(); /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* abend module*/
  ;
     /* call failed, terminate session*/
  ;
  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/
  ;
  ;
  ;
end // end XPCC001

//*** RECORD=CCXREC ****
// ******************** claim common data names record ********
// 
// this record contains many common data names used by many
// claims applications.  this is not a global working-storage
// passed to other claims appl.  it is a second w-s record
// for an individual application.
// 
// ************************************************************
// **********************
Record CCXREC type basicRecord
  5 CCXGROUP CCXGROUP ; 
    10 CCXEOAF CCXEOAF ; 
    10 CCXEOSF CCXEOSF ; 
    10 CCXCSCRN CCXCSCRN ; 
    10 CCXSNAME CCXSNAME [3] ; 
    10 CCXSCRNX CCXSCRNX ; 
    10 CCXCPROC CCXCPROC ; 
    10 CCXVALDT CCXVALDT ; 
    10 CCXVITMF CCXVITMF ; 
    10 CCXITMX CCXITMX ; 
    10 CCXLTRX1 CCXLTRX1 ; 
    10 CCXLTRX2 CCXLTRX2 ; 
    10 CCXWLTRX CCXWLTRX ; 
    10 CCXCNF CCXCNF [4] ; 
    10 CCXILTH CCXILTH [4] ; 
    10 CCXILOC CCXILOC [4] ; 
    10 CCXITMCT CCXITMCT ; 
    10 CCXWFLDC CCXWFLDC ; 
      15 CCXWFLDN CCXWFLDN ; 
        20 CCXWLTR CCXWLTR [10] ; 
    10 XXXWDTE XXXWDTE ; 
      12 XXXWCYMD XXXWCYMD ; 
        15 XXXWCC XXXWCC ; 
        15 XXXWYMD XXXWYMD ; 
          20 XXXWYY XXXWYY ; 
            25 XXXWYY1 XXXWYY1 ; 
            25 XXXWYY2 XXXWYY2 ; 
          20 XXXWMM XXXWMM ; 
            25 XXXWMM1 XXXWMM1 ; 
            25 XXXWMM2 XXXWMM2 ; 
          20 XXXWDD XXXWDD ; 
            25 XXXWDD1 XXXWDD1 ; 
            25 XXXWDD2 XXXWDD2 ; 
    10 XXXCDTE XXXCDTE ; 
      15 XXXCCC XXXCCC ; 
      15 XXXCYMD XXXCYMD ; 
        20 XXXCYY XXXCYY ; 
        20 XXXCMM XXXCMM ; 
        20 XXXCDD XXXCDD ; 
    10 XXXCTIME XXXCTIME ; 
      15 XXXCHHMM XXXCHHMM ; 
        20 XXXCHRS XXXCHRS ; 
        20 XXXCMINS XXXCMINS ; 
      15 XXXCSECS XXXCSECS ; 
    10 XXXFSDT XXXFSDT ; 
      15 XXXFSMM XXXFSMM ; 
        20 XXXFSM1 XXXFSM1 ; 
        20 XXXFSM2 XXXFSM2 ; 
      15 XXXFSDD XXXFSDD ; 
        20 XXXFSD1 XXXFSD1 ; 
        20 XXXFSD2 XXXFSD2 ; 
      15 XXXFSYY XXXFSYY ; 
        20 XXXFSY1 XXXFSY1 ; 
        20 XXXFSY2 XXXFSY2 ; 
    10 XXXFLDT XXXFLDT ; 
      15 XXXFLMM XXXFLMM ; 
      15 XXXSEP5 XXXSEP5 ; 
      15 XXXFLDD XXXFLDD ; 
      15 XXXSEP6 XXXSEP6 ; 
      15 XXXFLYY XXXFLYY ; 
    10 XXXEDFLD XXXEDFLD ; 
      20 XXXED10C XXXED10C ; 
        30 XXXED8C XXXED8C ; 
          40 XXXED6C XXXED6C ; 
            45 XXXEDC1 XXXEDC1 ; 
              46 XXXEDN1 XXXEDN1 ; 
            45 XXXEDC2 XXXEDC2 ; 
              46 XXXEDN2 XXXEDN2 ; 
            45 XXXEDC3 XXXEDC3 ; 
              46 XXXEDN3 XXXEDN3 ; 
            45 XXXEDC4 XXXEDC4 ; 
              46 XXXEDN4 XXXEDN4 ; 
            45 XXXEDC5 XXXEDC5 ; 
              46 XXXEDN5 XXXEDN5 ; 
            45 XXXEDC6 XXXEDC6 ; 
              46 XXXEDN6 XXXEDN6 ; 
          40 XXXEDC7 XXXEDC7 ; 
            41 XXXEDN7 XXXEDN7 ; 
          40 XXXEDC8 XXXEDC8 ; 
            41 XXXEDN8 XXXEDN8 ; 
        30 XXXEDC9 XXXEDC9 ; 
          31 XXXEDN9 XXXEDN9 ; 
        30 XXXEDC10 XXXEDC10 ; 
          31 XXXEDN10 XXXEDN10 ; 
      20 XXXEDC11 XXXEDC11 ; 
        25 XXXEDN11 XXXEDN11 ; 
      20 XXXEDC12 XXXEDC12 ; 
        25 XXXEDN12 XXXEDN12 ; 
      20 XXXEDC13 XXXEDC13 ; 
        25 XXXEDN13 XXXEDN13 ; 
      20 XXXEDC14 XXXEDC14 ; 
        25 XXXEDN14 XXXEDN14 ; 
      20 XXXEDC15 XXXEDC15 ; 
        25 XXXEDN15 XXXEDN15 ; 
      20 XXXEDC16 XXXEDC16 ; 
        25 XXXEDN16 XXXEDN16 ; 
      20 XXXEDC17 XXXEDC17 ; 
        25 XXXEDN17 XXXEDN17 ; 
      20 XXXEDC18 XXXEDC18 ; 
        25 XXXEDN18 XXXEDN18 ; 
      20 XXXEDC19 XXXEDC19 ; 
        25 XXXEDN19 XXXEDN19 ; 
      20 XXXEDC20 XXXEDC20 ; 
        25 XXXEDN20 XXXEDN20 ; 
      20 XXXEDC21 XXXEDC21 ; 
        25 XXXEDN21 XXXEDN21 ; 
      20 XXXEDC22 XXXEDC22 ; 
        25 XXXEDN22 XXXEDN22 ; 
      20 XXXEDC23 XXXEDC23 ; 
        25 XXXEDN23 XXXEDN23 ; 
      20 XXXEDC24 XXXEDC24 ; 
        25 XXXEDN24 XXXEDN24 ; 
      20 XXXEDC25 XXXEDC25 ; 
        25 XXXEDN25 XXXEDN25 ; 
      20 XXXEDC26 XXXEDC26 ; 
        25 XXXEDN26 XXXEDN26 ; 
      20 XXXEDC27 XXXEDC27 ; 
        25 XXXEDN27 XXXEDN27 ; 
      20 XXXEDC28 XXXEDC28 ; 
        25 XXXEDN28 XXXEDN28 ; 
      20 XXXEDC29 XXXEDC29 ; 
        25 XXXEDN29 XXXEDN29 ; 
      20 XXXEDC30 XXXEDC30 ; 
        25 XXXEDN30 XXXEDN30 ; 
end // end CCXREC

Record KC0SW01 type basicRecord
  5 KC0SWGRP KC0SWGRP ; 
    10 KC0SWSES KC0SWSES ; 
    10 KC0SWSEV KC0SWSEV ; 
    10 KC0SWEVS KC0SWEVS ; 
    10 KC0SWURS KC0SWURS ; 
    10 XCUCD XCUCD [2] ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 KC0SWOTA KC0SWOTA ; 
    10 KC0SWOTD KC0SWOTD ; 
    10 KC0SWPM1 KC0SWPM1 [2] ; 
    10 KC0SWPM2 KC0SWPM2 [2] ; 
    10 KC0SW-EOT-FL KC0SW-EOT-FL ; 
    10 KC0SW-TBL-IX KC0SW-TBL-IX ; 
end // end KC0SW01

// ws char/numeric flags
DataItem CCXCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current process name
DataItem CCXCPROC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// name of current screen
DataItem CCXCSCRN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-application flag (y/n)
DataItem CCXEOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag (y/n)
DataItem CCXEOSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem CCXGROUP char(152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws starting item locations
DataItem CCXILOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws item lengths
DataItem CCXILTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of items entered
DataItem CCXITMCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item index
DataItem CCXITMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// letter index
DataItem CCXLTRX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// letter index
DataItem CCXLTRX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen pointer
DataItem CCXSCRNX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen name
DataItem CCXSNAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid-date flag
DataItem CCXVALDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid-item flag
DataItem CCXVITMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working field character format
DataItem CCXWFLDC char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working field numeric format
DataItem CCXWFLDN num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field letter array
DataItem CCXWLTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index to working field letters
DataItem CCXWLTRX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of table flag
DataItem KC0SW-EOT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table search index
DataItem KC0SW-TBL-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry-valid-switch
DataItem KC0SWEVS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0s working stg group level
DataItem KC0SWGRP char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type acronym
DataItem KC0SWOTA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order types selected desc
DataItem KC0SWOTD char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// integer field # 1
DataItem KC0SWPM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// integer field # 2
DataItem KC0SWPM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special-entry switch
DataItem KC0SWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special-entry valid flag
DataItem KC0SWSEV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update-requested-switch
DataItem KC0SWURS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

