package kc0d;

import as1.common.ARCREC;
import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXCH01;
import corpcom3.XPXCS01;
import corpcom3.XPXX001;
import corpcom4.XSCCS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XBCTBL;
import corpx1.XBDTBL;
import corpx1.XCCCD;
import corpx1.XCHTBL;
import corpx1.XCRTBL;
import corpx1.XCSCD;
import corpx1.XCSTBL;
import corpx1.XCUTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx2.XOSCD;
import corpx2.XOTABRV;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUYREC;
import op.common.OP1CSADT;
import op.common.OP1CUNDT;
import op.common.OP1KEY;
import op.common.OP1REC;
import op.common.OP2REC;
import op.common.OP4REC;
import op.common.OP5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA9REC;
import vv.common.VCRCHK01;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0D ****
// ;
// This application will allow the users to mark a single
// order or multiple orders for a given customer or order
// number in a credit resell status.
// If user requested to look a multiple orders, they will
// be displayed page by page and the user will have the
// option of selecting all, some or none of the orders on the
// screen.
// If user is looking at multiple orders, they have the option
// of viewing more information for all orders displayed.
// ;
// Maintenance Log:
//  4/07/89 - DSALZW - Made Credit Life changes, added ability
//                     to view orders, and general re-write of
//                     the application.
//  4/18/89 - DSALZW - added xssegtr
//  4/18/89 - DSALZW - added noncsp logic
//  9/25/89 - DSALZW - include RS,PR & PA orders as valid
// 11/22/89 - DSALZW - allow customers with cr status of
//                     R,T,U & V to be selected
// 01/23/90 - DSALZW - don't update orders until after an 'x'
//                     has been processed, ie message 40
// 04/02/90 - DSALZW - db changes
// 06/08/90 - CHAERT - add logic for SBNAR in exposure
// 06/12/90 - CHAERT - remove unused records, ophrec and pk1rec
// 06/27/90 - CHAERT - add logic for security on legal entity
// 08/07/90 - jwood  - changed cc0dm005,cc0d220,260,280,350,
//                     440,450 to use xcscd as a character fld
// 08/30/90 - dsalzw - chgd cc0am010 to define xot as char
// 09/28/90 - wjohns - remove optag logic
// 03/29/91 - wjohns - Add Term and Brand code tables and
//                     call to io0470 to get special label
//                     instructions for view screen.
// 04/09/91 - wjohns - Changed message numbers to match changes
//                     to the cc message file after clean up.
// 05/21/91 - wjohns - Allow users to view single order from
//                     first screen.
// 08/01/91 - wjohns - Rename from CC0D to KC0D for new version
//                     of CICS.
// 08/09/91 - wjohns - Rename commarea referrences.
// 08/22/91 - JWOOD  - RENAME ALL CC0D MODULES TO KC0D PER STDS
// 09/11/91 - WJOHNS - Add new credit table and logic to get
//                       orders in process and shipped/but not
//                       billed amounts from the new table
//                       instead of from the ar cust table.
// 10/01/91 - WJOHNS - Regen for database changes.
// 12/19/91 - WJOHNS - Allow processing of bulk orders when the
//                       credit check flag on the bulk table is
//                       set to "Y".
// 02/28/92 - WJOHNS - Initialize TA2REC AND TA9REC to avoid
//                       bad date formatting when using these
//                       records.
// 09/30/92 - cancie - replaced vragcy01 with new view vragcy02
// 06/04/93 - cancie - added need date range to map kc0dm001.
//                     added need "to" date kc0dw-need-date-to
//                     to kc0dw01.
//                     convert "from" & "to" need dates, also
//                     date validation in kc0d120.
//                     perform need date edit and check need
//                     date range in kc0d350.
// 12/14/93 - cancie - Increased map repsentation of 'order no'
//                     in kc0dm005 (from 10) to 11 spaces.
// 04/04/95 - chellm - Changed Map title from Resell to
//                     Credit Cancel.
// 07/13/95 - BCourt - Set VCRCHK01 empty, zero fields not fnd.
// 09-21-99   ssank1   Changed map presentation of KC0DM001 ,
//                     KC0DM005 , KC0DM010 and increased the
//                     length of KC0DWRID & KC0DWORD in records
//                     KC0DW01 and KC0DW02 to accomodate 4
//                     digit nike ord id.
// *********************
Program KC0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  CCWREC CCWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0DW01 KC0DW01; // record
  KC0DW02 KC0DW02; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  VCRCHK01 VCRCHK01; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCRTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KC0DM.KC0DM001,  // forms
      KC0DM.KC0DM005, 
      KC0DM.KC0DM010,
      KC0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0D000: KC0D000();
    goto KC0D100; /* go on to cc0d selection criteria screen*/
    KC0D100: KC0D100();

    goto KC0D100; /* order selection criteria*/


  end // end main
end // end KC0D

// cc0d initialization process
Function KC0D000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders resell process                    **/
   /* *********************************************/


  XSENTRY();

  XSSEGTR();

  set KC0DW01 empty; /* working storage 1*/
  set KC0DW02 empty; /* working storage 2*/
  set CCWREC empty; /* cc working storage*/
  set SQLCA empty;
  set OP1REC empty; /* order header record*/
  set OP2REC empty; /* order item record*/
  set OP5REC empty; /* order address record*/
  set KUCREC empty; /* company record*/
  set KULREC empty; /* store record*/
  set KUMREC empty; /* store address record*/
  set KUYREC empty; /* service rep record*/
  set ARCREC empty; /* a/r record*/
  set VCRCHK01 empty; /* credit record*/
  set VRAGCY02 empty; /* sales rep record*/
  set TA2REC empty; /* date routine record*/
  set TA9REC empty; /* work days routine record*/

  set KC0DM001 initial; /* order selection screen*/
  set KC0DM005 initial; /* order resell screen*/
  set KC0DM010 initial; /* order inquiry screen*/

  KC0DW01.KC0DWMS1 = " ORDER# = ";
  KC0DW01.KC0DWMS2 = "   COMPANY# = ";
  KC0DW01.KC0DWMS3 = "  AMT_RESOLD = ";


  KC0DW01.KC0DWRF1 = " ORDER(S) WHERE UPDATED WITH A ORDER VALUE OF ";
  KC0DW01.KC0DWMS4 = " WARNING: OVER 100 ORDERS SELECTED,";
  KC0DW01.KC0DWMS5 = " ONLY FIRST 100 DISPLAYED";
  KC0DW01.KC0DWMF1 = " COMPANY CREDIT STATUS = ";
  KC0DW01.KC0DWMF2 = " COMPANY NUMBER ON ORDER = ";
  KC0DW01.KC0DWMF3 = " CREDIT STATUS OF ORDER = ";


end // end KC0D000

// order selection criteria
Function KC0D100()
   /* *******************************************/
   /* order selection screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* 5. process one order or                 **/
   /* 6. process a set of orders              **/
                                           /* **/
   /* *******************************************/

  KC0DW01.KC0DWERR = "N"; /* init error flag*/
  KC0DW01.KC0DWEFL = "N"; /* init selection error*/
  KC0DW01.KC0DWUOK = "Y"; /* updates ok flag*/
  KC0DM001.KC0DMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0DM001.KC0DMANM = "KC0D100"; /* set screen name*/
  KC0DW01.KC0DWFLG = "1"; /* selection criteria flag*/


  KC0DM001.KC0DWMSG = KC0DW01.KC0DWMSG;

  converse KC0DM001 ;

  KC0DW01.KC0DWMSG = " ";
  KC0DM001.KC0DWMSG = " ";


  KC0D110(); /* edit special keys/fast paths*/

  if (KC0DW01.KC0DWERR == "N") /* if no errors*/
    KC0D120(); /* edit screen input*/
  end


  if (KC0DW01.KC0DWERR == "N") /* if no errors*/
    if (KC0DW01.KC0DWFLG == "1")
      KC0D200(); /* process one order*/
      if (KC0DW01.KC0DWVFL == "Y") /* view single order*/
        KC0DW01.KC0DWVFL = "N";
      else
        if (KC0DW01.KC0DWEFL == "N") /* if no error on selection screen*/
          set KC0DM001 initial;
        end
      end
    else
      if (KC0DW01.KC0DWFLG == "2")
        KC0D300(); /* process a set of orders*/
        if (KC0DW01.KC0DWEFL == "N") /* if no error on selection*/
          set KC0DM001 initial;
        end
      else
        converseLib.validationFailed(1); /* invalid option message*/
      end
    end
  end

end // end KC0D100

// edit special keys
Function KC0D110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/


   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0D"; /* comming from appl*/
    XSEXIT();
    KC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KC0DM001.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0DM001.CATOAP;
      COMMAREA.CAITEM = KC0DM001.CAITEM;
      COMMAREA.CAFROMAP = "KC0D";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0DW01.KC0DWERR = "Y";
      set KC0DM001.CATOAP cursor, bold;
    else
      set KC0DM001.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0DM001.CATOAP > " ")
      KC0DW01.KC0DWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0DM001.CATOAP cursor, bold;
      return;
    else
      set KC0DM001.CATOAP modified;
    end
  end


   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0D";
    XSPF1();
    KC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0D";
    XSEXIT();
    KC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0D";
    XSPF4();
    KC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
  end

   /* **************************************/
   /* edit pf6 key*/
   /* **************************************/

  if (converseVar.eventKey is pf6) /* back to goal menu*/
    KC0DW01.KC0DWVFL = "Y"; /* view single order*/
    return;
  end

  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0DW01.KC0DWERR = "Y";



end // end KC0D110

// edit order selection screen
Function KC0D120()
   /* **********************************************/
    /* edit the orders resell selection criteria **/
    /* screen.                                   **/
    /* -- edits for clean input                  **/
    /* -- determines if one or more than one     **/
       /* order was selected for processing      **/
                                  /* **/
   /* **********************************************/


  set KC0DM001.KUCCOID cursor, initialAttributes;
  set KC0DM001.KUMSTRID initialAttributes;
  set KC0DM001.XNXCD initialAttributes;
  set KC0DM001.XGPCD initialAttributes;
  set KC0DM001.OP1CUOID initialAttributes;
  set KC0DM001.OP1NORID initialAttributes;
  set KC0DM001.KC0DMCDT initialAttributes;
  set KC0DM001.KC0DMNDT initialAttributes;
  set KC0DM001.XOTCD initialAttributes;
  set KC0DM001.XCSCD initialAttributes;

   /* ***************************************************/
   /* edit credit status code*/
   /* ***************************************************/

  if (KC0DM001.XCSCD != "  ") /* credit status entered*/
    if (KC0DM001.XCSCD in XCSTBL.XCSCD
     && KC0DM001.XCSCD != "99")
      if (KC0DM001.XCSCD == "80")
        KC0DW01.KC0DWERR = "Y"; /* set error flag*/
        KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(20); /* invalid credit status code*/
        set KC0DM001.XCSCD cursor, bold;
        return;
      end
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(20); /* invalid credit status code*/
      set KC0DM001.XCSCD cursor, bold;
      return;
    end
  end

   /* ***************************************************/
   /* edit order type code*/
   /* ***************************************************/

  if (KC0DM001.XOTCD > " ") /* order type entered*/
    if (KC0DM001.XOTCD in XOTTBL.XOTCD
     && KC0DM001.XOTCD != "99")
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(8); /* invalid order type code*/
      set KC0DM001.XOTCD cursor, bold;
      return;
    end
  end

   /* ***************************************************/
   /* edit "from" need date*/
   /* ***************************************************/

  if (KC0DM001.KC0DMNDT > " ")
    TA2REC.TA2GRGA = KC0DM001.KC0DMNDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0DW01.OP1CUNDT = TA2REC.TA2GRGGN;
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0DM001.KC0DMNDT cursor, bold;
      return;
    end
  else
    KC0DW01.OP1CUNDT = 0;
  end

   /* ***************************************************/
   /* edit "to" need date*/
   /* ***************************************************/

  if (KC0DM001.KC0DM-NEED-DATE-TO > " ")
    TA2REC.TA2GRGA = KC0DM001.KC0DM-NEED-DATE-TO;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0DW01.KC0DW-NEED-DATE-TO = TA2REC.TA2GRGGN;
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0DM001.KC0DM-NEED-DATE-TO cursor, bold;
      return;
    end
  else
    KC0DW01.KC0DW-NEED-DATE-TO = 0;
  end

   /* ***************************************************/
   /* "from" and "to" need date validation*/
   /* ***************************************************/

  if (KC0DW01.OP1CUNDT != 0)
    if (KC0DW01.KC0DW-NEED-DATE-TO != 0)
      if (KC0DW01.OP1CUNDT == KC0DW01.KC0DW-NEED-DATE-TO)
        /* next sentence ;*/
      else
        if (KC0DW01.OP1CUNDT < KC0DW01.KC0DW-NEED-DATE-TO)
         /* next sentence ;*/
        else
          KC0DW01.KC0DWERR = "Y"; /* set error flag*/
          KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(7); /* invalid date*/
          set KC0DM001.KC0DMNDT cursor, bold;
          set KC0DM001.KC0DM-NEED-DATE-TO cursor, bold;
          return;
        end
      end
    end
  end

   /* ***************************************************/
   /* edit credit check date*/
   /* ***************************************************/

  if (KC0DM001.KC0DMCDT > " ")
    TA2REC.TA2GRGA = KC0DM001.KC0DMCDT;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0DW01.OP1CSADT = TA2REC.TA2GRGGN;
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0DM001.KC0DMCDT cursor, bold;
      return;
    end
  else
    KC0DW01.OP1CSADT = 0;
  end

   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/

  if (KC0DM001.KUCCOID > 0)
    KC0DW01.KUCCOID = KC0DM001.KUCCOID;
    KC0D130(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(18); /* invalid company; not on file*/
      set KC0DM001.KUCCOID cursor, bold;
      return;
    else
      /* ********************************************/
       /* edit legal entity security               **/
      /* ********************************************/
      KC0D140();
    end
  else
    if (KC0DM001.KUMSTRID > 0)
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(24); /* not allowed*/
      set KC0DM001.KUMSTRID cursor, bold;
      return;
    end
    if (KC0DM001.XNXCD > 0)
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* not allowed*/
      set KC0DM001.XNXCD cursor, bold;
      return;
    end
    if (KC0DM001.XGPCD > " ")
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(26); /* not allowed*/
      set KC0DM001.XGPCD cursor, bold;
      return;
    end
  end

   /* ********************************************/
   /* edit order number                        **/
   /* ********************************************/

  if (KC0DM001.OP1CUOID > 0 /* one order selection*/
   && KC0DM001.OP1NORID > 0)
    if (KC0DM001.KUCCOID > 0
     || KC0DW01.KC0DWVFL == "Y") /* view single order*/
      KC0DW01.KC0DWFLG = "1"; /* one order selected flag*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(22); /* customer number required*/
      set KC0DM001.KUCCOID cursor, bold;
      return;
    end
  else
    if (KC0DM001.OP1CUOID > 0
     || KC0DM001.KUCCOID > 0)
      KC0DW01.KC0DWFLG = "2"; /* a set of orders selected*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(5); /* must have at least one of this ones*/
      set KC0DM001.KUCCOID cursor, bold;
      return;
    end
  end



end // end KC0D120

// get company
Function KC0D130()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/


  KUCREC.KUCCOID = KC0DW01.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1LOCAT[2] = "KC0D130";
    TA1REC.TA1LOCAT[3] = "KC0D130";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSCCS02(); /* abort*/
  end


end // end KC0D130

// check security
Function KC0D140()
   /* **********************************************/
    /* checks users security for this company    **/
   /* **********************************************/

  KC0DWSUB = 1;
  KC0DWFND = "N";
  KC0DWTBE = " ";
  KC0DWLGE = " ";

   /* loop thru xcu table reading all records with the user id*/

  while (KC0DWFND == "N")
    if (COMMAREA.CAUSERID in XCUTBL.CAUSERID from KC0DWSUB)
      KC0DWSUB = sysVar.arrayIndex;

       /* find the xcr credit resp to match the xcu*/

      if (XCUTBL.XCRCD[KC0DWSUB] in XCRTBL.XCRCD)
        if (XCRTBL.XLECD[sysVar.arrayIndex] == KUCREC.XLECD)
           /* everything checks out, user has security*/

          KC0DWTBE = "N";
          KC0DWFND = "Y";
        else
          KC0DWLGE = "N";
        end
      else

         /* credit region invalid, read more users*/

        KC0DWTBE = "Y";
      end
    else

       /* legal entity not valid between co and user*/

      if (KC0DWLGE == "N")
        KC0DWFND = "Y";
        KC0DW01.KC0DWERR = "Y"; /* set error flag*/
        KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(46);
        if (KC0DM001.KUCCOID > 0)
          set KC0DM001.KUCCOID cursor, bold;
        end

         /* user is not on xcu table*/

      else
        if (KC0DWTBE == " ")
          KC0DWTBE = "Y";
          KC0DWFND = "Y";
          KC0DW01.KC0DWERR = "Y"; /* set error flag*/
          KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(48);
        else

           /* cred resp not found on xcr table*/

          KC0DWFND = "Y";
          KC0DW01.KC0DWERR = "Y"; /* set error flag*/
          KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(45);
        end
      end
    end
    if (KC0DWFND == "N") /* no rec found*/
      KC0DWSUB = KC0DWSUB + 1; /* set up to read the next xcu*/
    end
  end

end // end KC0D140

// process one order
Function KC0D200()
   /* ***********************************************/
        /* resell one order                       **/
   /* 1. selects order header record              **/
   /* 2. edit the order record                    **/
   /* 3. gets order item record                   **/
   /* 4. updates database records                 **/
                                               /* **/
   /* ***********************************************/

   /* ***********************************************/
    /* get order header record                    **/
   /* ***********************************************/

  KC0DW01.KC0DWCOD = KC0DM001.OP1CUOID;
  OP1REC.OP1CUOID = KC0DW01.KC0DWCOD;
  OP1REC.OP1PARTN = KC0DW01.KC0DWPAR;
  OP1REC.OP1NORID = KC0DM001.OP1NORID;

  KC0D210(); /* get order header record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    set KC0DM001.OP1CUOID cursor, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(3); /* order not found*/
    set KC0DM001.OP1CUOID cursor, bold;
    set KC0DM001.OP1NORID bold;
    return;
  end

  KC0D220(); /* edit order record*/

  if (KC0DW01.KC0DWERR == "N")
    KC0DW01.KC0DWALV = 0; /* set allocated-value to zero*/
    KC0DW01.KC0DWALQ = 0; /* set allocated-qty to zero*/
    KC0DW01.KC0DWOOQ = 0; /* set on-order-qty to zero*/
    KC0DW01.KC0DWOOV = 0; /* set on-order-value to zero*/
    if (OP1REC.XOSCD == "OP"
     || OP1REC.XOSCD == "AL")
      if (OP1REC.XOSCD == "OP")
        KC0DW01.KC0DWOOV = OP1REC.OP1OVALU;
        KC0DW01.KC0DWOOQ = OP1REC.OP1OTUNT;
        KC0DW01.KC0DWALV = 0;
        KC0DW01.KC0DWALQ = 0;
      end
      if (OP1REC.XOSCD == "AL")
        KC0DW01.KC0DWOOV = OP1REC.OP1CKAMT;
        KC0DW01.KC0DWOOQ = OP1REC.OP1CCKOQ;
        KC0DW01.KC0DWALV = OP1REC.OP1CKAMT;
        KC0DW01.KC0DWALQ = OP1REC.OP1CCKOQ;
      end
    else
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0D230(); /* add up items for an order*/

    end

    if (KC0DW01.KC0DWVFL == "Y") /* view single order*/
      KC0D640(); /* format order screen*/
      KC0D610(); /* display order information*/
    else
      KC0D250(); /* update databases*/

      if (KC0DW01.KC0DWERR == "N")
        KC0DW01.KC0DWNOR = OP1REC.OP1NORID;
        KC0DW01.KC0DWDOT = ".";
        KC0DW01.KC0DWORN = OP1REC.OP1CUOID;
        KC0DW01.KC0DWCUN = OP1REC.KUCCOID;
        KC0DW01.KC0DWVL1 = KC0DW01.KC0DWOOV;
        KC0DW01.KC0DWMSG = KC0DW01.KC0DWMSS;
        KC0DW01.KC0DWERR = "Y";
        converseLib.validationFailed(12); /* updates ok*/
      end
    end
  end



end // end KC0D200

// get order header record
Function KC0D210()


   /* ********************************************************/
   /* *   select one order header record*/
   /* ********************************************************/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get one nike sub-order*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -911)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0D210";
    TA1REC.TA1LOCAT[4] = "IO0430";
  end


end // end KC0D210

// edit order record
Function KC0D220()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/

      /* edit bulk order code*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "N")
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(21); /* bulk order msg*/
      return;
    end
  end

   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/

  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "PS"
   || OP1REC.XOSCD == "RS"
   || OP1REC.XOSCD == "PR"
   || OP1REC.XOSCD == "PA")
     /* next sentence*/
  else
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(16); /* invalid order status*/
    return;
  end

   /* ***********************************************/
      /* edit customer edit*/
   /* ***********************************************/

  if (KC0DM001.KUCCOID == OP1REC.KUCCOID
   || KC0DW01.KC0DWVFL == "Y") /* view single order*/
    /* next sentence*/
  else
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
    KC0DW01.KC0DWCON = OP1REC.KUCCOID;
    KC0DW01.KC0DWMSG = KC0DW01.KC0DWEM2;
    converseLib.validationFailed(17); /* customer not the same*/
    set KC0DM001.KUCCOID cursor, bold;
    return;
  end

   /* ***********************************************/
      /* edit store number*/
   /* ***********************************************/

  if (KC0DM001.KUMSTRID > 0)
    if (KC0DM001.KUMSTRID == OP1REC.KUMSTRID)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(33); /* invalid order type*/
      set KC0DM001.KUMSTRID cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* edit department number*/
   /* ***********************************************/

  if (KC0DM001.XNXCD > 0)
    if (KC0DM001.XNXCD == OP1REC.XNXCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(37); /* invalid order type*/
      set KC0DM001.XNXCD cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* edit gpc code*/
   /* ***********************************************/

  if (KC0DM001.XGPCD > " ")
    if (KC0DM001.XGPCD == OP1REC.XGPCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(38); /* invalid order type*/
      set KC0DM001.XGPCD cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/

  if (KC0DM001.XCSCD != "  ")
    if (KC0DM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0DW01.KC0DWXCS = OP1REC.XCSCD;
      KC0DW01.KC0DWMSG = KC0DW01.KC0DWEM3;
      set KC0DM001.XCSCD cursor, bold;
      return;
    end
  else
    if (OP1REC.XCSCD == "80")
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0DW01.KC0DWXCS = OP1REC.XCSCD;
      KC0DW01.KC0DWMSG = KC0DW01.KC0DWEM3;
      return;
    end
  end

   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/

  if (KC0DM001.XOTCD > " ")
    if (KC0DM001.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(8); /* invalid order type*/
      set KC0DM001.XOTCD cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/

  if (KC0DW01.OP1CUNDT > 0)
    if (KC0DW01.OP1CUNDT == OP1REC.OP1CUNDT)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0DM001.KC0DMNDT cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/

  if (KC0DW01.OP1CSADT > 0)
    if (KC0DW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0DM001.KC0DMCDT cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/

  if (KC0DM001.OP1CUPO > " ")
    if (KC0DM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(36); /* cust po numbers do not match*/
      set KC0DM001.OP1CUPO cursor, bold;
      return;
    end
  end

end // end KC0D220

// add up order items
Function KC0D230()
   /* *******************************************/
   /* add up order-quantities for each order  **/
   /* *******************************************/

  KC0DW01.KC0DWEOI = "N"; /* set end-of-items flag to "no"*/

   /* *************************************/
   /* open cursor                       **/
   /* *************************************/

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0D230";
    TA1REC.TA1LOCAT[3] = "KC0D230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02();
  end

   /* *************************************/
   /* select first record               **/
   /* *************************************/

  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get first line-item*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0D230";
    TA1REC.TA1LOCAT[3] = "GET 1ST";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end

   /* *************************************/
   /* process all items                 **/
   /* *************************************/

  while (KC0DW01.KC0DWEOI == "N") /* while not end-of-items*/
    KC0DW01.KC0DWALQ = KC0DW01.KC0DWALQ + OP2REC.OP2TALCQ;
    KC0DW01.KC0DWLIV = OP2REC.OP2TALCQ * OP2REC.OP2AUPRC;
    KC0DW01.KC0DWALV = KC0DW01.KC0DWALV + KC0DW01.KC0DWLIV;
    KC0DW01.KC0DWOOQ = KC0DW01.KC0DWOOQ + OP2REC.OP2TONOQ;
    KC0DW01.KC0DWLIV = OP2REC.OP2TONOQ * OP2REC.OP2AUPRC;
    KC0DW01.KC0DWOOV = KC0DW01.KC0DWOOV + KC0DW01.KC0DWLIV;
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get next line-item*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no more line-items*/
        KC0DW01.KC0DWEOI = "Y"; /* set end-of-items to "yes"*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        TA1REC.TA1LOCAT[2] = "KC0D230";
        TA1REC.TA1LOCAT[3] = "GET NXT";
        TA1REC.TA1LOCAT[4] = "IO0440";
        XSCCS02(); /* abort program*/
      end
    end
  end

   /* *************************************/
   /* close cursor                      **/
   /* *************************************/

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0D230";
    TA1REC.TA1LOCAT[3] = "KC0D230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end



end // end KC0D230

// update databases
Function KC0D250()
   /* ****************************************/
   /* this process updates the databases   **/
   /* related to resell an order           **/
   /* ****************************************/

  TA2REC.TA2DTOPT = "GETDATE"; /* get current date for*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* update all records*/

  KC0D260(); /* update company record*/

  if (KC0DW01.KC0DWUOK == "Y")
    KC0D280(); /* update the order record*/

  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset changes*/
  end




end // end KC0D250

// update credit
Function KC0D260()

   /* ************************************************************/
   /* *update credit orders-in-process and #-ords-on-hold*/
   /* ************************************************************/

  KC0D290(); /* get credit record*/
  if (SQLCA.VAGen_SQLCODE == 0)

    VCRCHK01.ARCORPRO = VCRCHK01.ARCORPRO - OP1REC.OP1CKAMT;

    VCRCHK01.ZZZCHGDT = TA2REC.TA2GRGGN;
    VCRCHK01.ZZZCHGTM = TA2REC.TA2TIMHM;

    if (OP1REC.XCSCD == "20" /* if on credit hold*/
     || OP1REC.XCSCD == "30") /* if on credit hold*/
      VCRCHK01.ARCORHLD = VCRCHK01.ARCORHLD - 1;
    end

    call "IO6010" ("U ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        KC0DW01.KC0DWUOK = "N"; /* update ok flag*/
        KC0DW01.KC0DWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(23); /* deadlock problem*/
      else
        TA1REC.TA1DBASE = "DACRCV";
        TA1REC.TA1TBLVU = "VCRCHK01";
        TA1REC.TA1LOCAT[2] = "KC0D260";
        TA1REC.TA1LOCAT[3] = "KC0D260";
        TA1REC.TA1LOCAT[4] = "IO6010";
        XSCCS02(); /* abort*/
      end
    end

  else
    TA1REC.TA1DBASE = "DACRCV";
    TA1REC.TA1TBLVU = "VCRCHK01";
    TA1REC.TA1LOCAT[2] = "KC0D260";
    TA1REC.TA1LOCAT[3] = "KC0D260";
    TA1REC.TA1LOCAT[4] = "IO6010";
    XSCCS02(); /* abort*/
  end


end // end KC0D260

// get ar record
Function KC0D265()
   /* ********************************************************/
   /* *   get accounts receivable record*/
   /* ********************************************************/


  ARCREC.KUCCOID = KC0DW01.KUCCOID;

  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0DW01.KC0DWMSG = " WARNING: NO A/R INFORMATION FOR THIS CUSTOMER";
      ARCREC.ARABAL = 0;
      ARCREC.ARAICRMO = 0;
      ARCREC.ARADSITM = 0;
      ARCREC.ARAUDDUC = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VARCUS01";
      TA1REC.TA1LOCAT[2] = "KC0D380";
      TA1REC.TA1LOCAT[3] = "KC0D380";
      TA1REC.TA1LOCAT[4] = "IO4160";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0D265

// update order
Function KC0D280()
   /* *********************************************************/
   /* *  update order header record                          **/
   /* *********************************************************/

   /* ----- previous credit information --------*/
  OP1REC.OP1PCSCD = OP1REC.XCSCD;
  OP1REC.OP1PCSDT = OP1REC.OP1CSADT;
  OP1REC.OP1PCSTM = OP1REC.OP1CSATM;

   /* ----- current date and time --------------*/
  OP1REC.OP1CSADT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.OP1CSATM = TA2REC.TA2TIMHM;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* ---------- days on hold --------------*/
  OP1REC.OP1DCHLD = 0;

   /* ------------- user id ------------------*/
  if (COMMAREA.CAUSERID in XCUTBL.CAUSERID)
    OP1REC.OP1CRLMR = XCUTBL.XCUCD[sysVar.arrayIndex]; /* last maint rep*/
  else
    OP1REC.OP1CRLMR = COMMAREA.CAUSERID;
  end

   /* ------------- pgm id ------------------*/
  OP1REC.OP1CRLMP = "KC0D"; /* last maint program*/


   /* -------- credit status ----------------*/
  OP1REC.XCSCD = "80"; /* set cr-stat to resell*/


   /* ------- credit reason codes ----------*/
  OP1REC.XCHCD[3] = OP1REC.XCHCD[2];
  OP1REC.XCHCD[2] = OP1REC.XCHCD[1];
  OP1REC.XCHCD[1] = 16; /* resell reason for sales report*/


   /* -------- credit amt & qty -------------*/
  OP1REC.OP1CKAMT = KC0DW01.KC0DWALV;
  OP1REC.OP1CCKOQ = KC0DW01.KC0DWALQ;



   /* ********************************************************/
   /* *      update the order header record*/
   /* ********************************************************/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* update order header*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0DW01.KC0DWUOK = "N"; /* update ok flag*/
      KC0DW01.KC0DWERR = "Y"; /* set error-flag*/
      converseLib.validationFailed(3); /* order not found*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[2] = "KC0D280";
      TA1REC.TA1LOCAT[3] = "KC0D280";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end





end // end KC0D280

// get credit record
Function KC0D290()
   /* ********************************************************/
   /* *   get credit record*/
   /* 7-13-95 BCourt Set record empty, zero fields not found.*/
   /* ********************************************************/
  set VCRCHK01 empty;

  VCRCHK01.KUCCOID = KC0DW01.KUCCOID;

  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0DW01.KC0DWMSG = " WARNING: NO CREDIT INFO FOR THIS CUSTOMER";
      VCRCHK01.ARCORPRO = 0;
      VCRCHK01.ARCORHLD = 0;
      VCRCHK01.ARCSBNAR = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCRCHK01";
      TA1REC.TA1LOCAT[2] = "KC0D290";
      TA1REC.TA1LOCAT[3] = "KC0D290";
      TA1REC.TA1LOCAT[4] = "IO6010";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0D290

// process a set of orders
Function KC0D300()
   /* **********************************************/
   /* * this process will drive the reselling of  **/
   /* * of a set of orders                        **/
   /* * it will:                                  **/
   /* *   1. select all orders for a customer     **/
   /* *   2. prepare the screen for display       **/
   /* *   3. check special keys pressed           **/
   /* *   4. edit screen input                    **/
   /* **********************************************/

  KC0DW01.KC0DWEND = "N"; /* end-of-resell-process*/
  KC0DW01.KC0DWMSG = " ";

  KC0D310(); /* get all orders*/

  KC0DW02.KC0DWTDX = 0; /* init temp table index*/
  KC0DW02.KC0DWCDX = 0; /* init current table index*/
  KC0DW02.KC0DWPDX = 0; /* init previoustable index*/
  KC0DW01.KC0DWSDX = 0; /* init current screen index*/
  KC0DW01.KC0DWCPG = 1; /* current page*/

  if (KC0DW01.KC0DWERR == "N") /* no errors*/
    KC0DW01.KC0DWFFL = "Y"; /* set first time flag*/
    KC0D370(); /* prepare first screen*/
    KC0DW02.KC0DWCDX = KC0DW02.KC0DWTDX; /* current table index*/

    while (KC0DW01.KC0DWEND == "N")
      KC0D400(); /* process all orders selected*/
    end

  end
end // end KC0D300

// select all orders
Function KC0D310()


  KC0D320(); /* declare cursor*/

  if (KC0DW01.KC0DWERR == "N") /* no errors*/

    /* *****************************************/
     /* read first order*/
    /* *****************************************/

    KC0DW01.KC0DWEOF = "N"; /* reading orders flag*/
    KC0D330(); /* get first order*/
    if (KC0DW01.KC0DWEOF == "Y")
      KC0D340(); /* close order cursor*/
      KC0DW01.KC0DWERR = "Y";
      KC0DW01.KC0DWEFL = "Y";
      converseLib.validationFailed(27); /* no orders for this select*/
      return;
    end
  else
    return;
  end

   /* *****************************************/
   /* * if customer not entered on selection **/
   /* * screen, assign order customer        **/
   /* *****************************************/

  if (KC0DM001.KUCCOID > 0)
    if (KC0DM001.KUCCOID == OP1REC.KUCCOID)
      /* next sentence*/
    else
      KC0DW01.KC0DWERR = "Y"; /* set error flag*/
      KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
      KC0DW01.KC0DWCON = OP1REC.KUCCOID;
      KC0DW01.KC0DWMSG = KC0DW01.KC0DWEM2;
      converseLib.validationFailed(17); /* customer not the same*/
      set KC0DM001.KUCCOID cursor, bold;
      return;
    end
  else
    KC0DW01.KUCCOID = OP1REC.KUCCOID; /* set customer nbr*/
    KC0D130(); /* read company record*/
    KC0D140(); /* edit legal entity*/
    if (KC0DW01.KC0DWERR == "Y")
      set KC0DM001.OP1CUOID cursor;
      return;
    end
  end


   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/

  set KC0DW02 empty; /* empty ws-table*/

  KC0DW01.KC0DWCN1 = 0; /* order count*/

  while (KC0DW01.KC0DWEOF == "N" /* while there are orders to process*/
   && KC0DW01.KC0DWCN1 < 100) /* array is full*/

    KC0DW01.KC0DWOOK = "Y"; /* order ok to process  flag*/
    KC0DW01.KC0DWRIT = "Y"; /* need to read items for order flag*/
    KC0DW01.KC0DWALV = 0; /* allocated-value*/
    KC0DW01.KC0DWALQ = 0; /* allocated-qty*/
    KC0DW01.KC0DWOOV = 0; /* on-order-value*/
    KC0DW01.KC0DWOOQ = 0; /* on-order-qty*/

    KC0D350(); /* check order criteria*/

    if (KC0DW01.KC0DWOOK == "Y")
      KC0DW01.KC0DWCN1 = KC0DW01.KC0DWCN1 + 1; /* add 1 to total orders*/

      if (KC0DW01.KC0DWRIT == "Y") /* if need to read items for order*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0D230(); /* add-up items for an order*/
      end

      KC0D360(); /* load ws-table of orders*/
    end
    KC0D330(); /* get next order*/

  end

  KC0D340(); /* close order cursor*/

  KC0DW02.KC0DWBOT = KC0DW02.KC0DWCDX; /* bottom of ws-talble*/

  KC0DW01.KC0DWTPG = KC0DW02.KC0DWBOT / 13;

  KC0DW01.KC0DWREM = KC0DW02.KC0DWBOT % 13;

  if (KC0DW01.KC0DWREM > 0)
    KC0DW01.KC0DWTPG = KC0DW01.KC0DWTPG + 1;
  end


  if (KC0DW01.KC0DWCN1 == 100) /* array is full*/
    KC0DW01.KC0DWMSG = KC0DW01.KC0DWOVM; /* set message*/
  end

  if (KC0DW01.KC0DWCN1 == 0)
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    KC0DW01.KC0DWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(29); /* orders do not match the selection*/
  end



end // end KC0D310

// declare order select cursor
Function KC0D320()

   /* *****************************************/
   /* * all orders selected will be read into**/
   /* * a working storage table              **/
   /* *****************************************/

  set SQLCA empty;

  if (KC0DM001.OP1CUOID > 0
   && KC0DM001.OP1NORID == 0)
    KC0DW01.KC0DWCOD = KC0DM001.OP1CUOID;
    OP1REC.OP1CUOID = KC0DW01.KC0DWCOD;
    OP1REC.OP1PARTN = KC0DW01.KC0DWPAR;
    OP1REC.OP1NORID = -1;
    call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ords for cust*/
  else
    OP1REC.KUCCOID = KC0DM001.KUCCOID;
    if (KC0DM001.KUMSTRID > 0)
      OP1REC.KUMSTRID = KC0DM001.KUMSTRID;
    else
      OP1REC.KUMSTRID = -1;
    end
    if (KC0DM001.XNXCD > 0)
      OP1REC.XNXCD = KC0DM001.XNXCD;
    else
      OP1REC.XNXCD = -1;
    end
    if (KC0DM001.XGPCD > " ")
      OP1REC.XGPCD = KC0DM001.XGPCD;
    else
      OP1REC.XGPCD = " ";
    end

    call "IO0430" ("S2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0D320";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end


end // end KC0D320

// get order "select" record
Function KC0D330()
   /* ********************************************************/
   /* *   get the next order header record*/
   /* ********************************************************/


  if (KC0DM001.OP1CUOID > 0
   && KC0DM001.OP1NORID == 0)
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  else
    call "IO0430" ("2N", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0DW01.KC0DWEOF = "Y"; /* set end-of-file flag to 'yes'*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0D330";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0D330

// close cursors
Function KC0D340()

   /* *****************************************/
   /* * close cursors*/
   /* *****************************************/


  if (KC0DM001.OP1CUOID > 0
   && KC0DM001.OP1NORID == 0)
    call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ords for cust*/
  else
    call "IO0430" ("C2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0D340";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end


end // end KC0D340

// edit order selected from set
Function KC0D350()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/

   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/

  if (KC0DW01.OP1CUNDT > 0)
    if (KC0DW01.KC0DW-NEED-DATE-TO == 0)
      if (KC0DW01.OP1CUNDT == OP1REC.OP1CUNDT)
       /* next sentence*/
      else
        KC0DW01.KC0DWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end

   /* ***********************************************/
      /* check if within need date range*/
   /* ***********************************************/

  if (KC0DM001.KC0DMNDT != " ")
    if (KC0DM001.KC0DM-NEED-DATE-TO != " ")
      if (OP1REC.OP1CUNDT >= KC0DW01.OP1CUNDT)
        if (OP1REC.OP1CUNDT <= KC0DW01.KC0DW-NEED-DATE-TO)
       /* next sentence ;               order is ok*/
        else
          KC0DW01.KC0DWOOK = "N"; /* order not needed*/
          return;
        end
      else
        KC0DW01.KC0DWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end

   /* ***********************************************/
      /* edit bulk order code*/
   /* ***********************************************/

  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "Y")
      /* next sentence   ; order ok*/
    else
      KC0DW01.KC0DWOOK = "N"; /* do not process order*/
      return;
    end
  end

   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/

  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "PS"
   || OP1REC.XOSCD == "RS"
   || OP1REC.XOSCD == "PR"
   || OP1REC.XOSCD == "PA")
     /* next sentence*/
  else
    KC0DW01.KC0DWOOK = "N"; /* order not needed*/
    return;
  end

  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "AL")
    KC0DW01.KC0DWRIT = "N"; /* do not need to read item records*/
    if (OP1REC.XOSCD == "OP")
      KC0DW01.KC0DWOOV = OP1REC.OP1OVALU;
      KC0DW01.KC0DWOOQ = OP1REC.OP1OTUNT;
      KC0DW01.KC0DWALV = 0;
      KC0DW01.KC0DWALQ = 0;
    end
    if (OP1REC.XOSCD == "AL")
      KC0DW01.KC0DWOOV = OP1REC.OP1CKAMT;
      KC0DW01.KC0DWOOQ = OP1REC.OP1CCKOQ;
      KC0DW01.KC0DWALV = OP1REC.OP1CKAMT;
      KC0DW01.KC0DWALQ = OP1REC.OP1CCKOQ;
    end
  else
    KC0DW01.KC0DWRIT = "Y"; /* do need to read item records*/
  end


   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/

  if (KC0DM001.XCSCD != "  ")
    if (KC0DM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWOOK = "N"; /* order not needed*/
      return;
    end
  else
    if (OP1REC.XCSCD == "80")
      KC0DW01.KC0DWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/

  if (KC0DM001.XOTCD > " ")
    if (KC0DM001.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0DW01.KC0DWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/

  if (KC0DW01.OP1CSADT > 0)
    if (KC0DW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0DW01.KC0DWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/

  if (KC0DM001.OP1CUPO > " ")
    if (KC0DM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0DW01.KC0DWOOK = "N"; /* order not needed*/
      return;
    end
  end



end // end KC0D350

// load ws-table
Function KC0D360()
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/

  KC0DW02.KC0DWCDX = KC0DW02.KC0DWCDX + 1; /* add 1 to index table*/

  KC0DW02.KC0DWSEL[KC0DWCDX] = " ";

   /* ***************************************/
    /* prepare order number*/
   /* ***************************************/

  KC0DW02.OP1KEY[KC0DWCDX] = OP1REC.OP1KEY;
  KC0DW02.KC0DWCUO[KC0DWCDX] = OP1REC.OP1CUOID;
  KC0DW02.KC0DWRID[KC0DWCDX] = OP1REC.OP1NORID;

   /* ***************************************/
     /* prepare need date*/
   /* ***************************************/

  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  KC0DW01.KC0DWDT1 = TA2REC.TA2GRGA;

  KC0DW02.KC0DWMM1[KC0DWCDX] = KC0DW01.KC0DWMM1;
  KC0DW02.KC0DWDD1[KC0DWCDX] = KC0DW01.KC0DWDD1;
  KC0DW02.KC0DWYY1[KC0DWCDX] = KC0DW01.KC0DWYY1;
  KC0DW02.KC0DWSL1[KC0DWCDX] = "/";
  KC0DW02.KC0DWSL2[KC0DWCDX] = "/";

   /* ***************************************/
    /* prepare order type abreviation*/
    /* prepare order status*/
    /* prepare credit status*/
   /* ***************************************/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0DW02.XOTABRV[KC0DWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0DW02.XOTABRV[KC0DWCDX] = "N FND";
  end

  KC0DW02.XOSCD[KC0DWCDX] = OP1REC.XOSCD; /* order status*/

  KC0DW02.XCSCD[KC0DWCDX] = OP1REC.XCSCD; /* credit status*/

   /* ***************************************/
   /* prepare credit reasons*/
   /* ***************************************/

  KC0DW02.KC0DWCD1[KC0DWCDX] = OP1REC.XCHCD[1];
  KC0DW02.KC0DWCD2[KC0DWCDX] = OP1REC.XCHCD[2];
  KC0DW02.KC0DWCD3[KC0DWCDX] = OP1REC.XCHCD[3];
  KC0DW02.KC0DWDS1[KC0DWCDX] = "-";
  KC0DW02.KC0DWDS2[KC0DWCDX] = "-";

   /* ***************************************/
   /* prepare order quantites*/
   /* ***************************************/

  KC0DW01.KC0DWCKA = OP1REC.OP1CKAMT;
  KC0DW02.KC0DWOIP[KC0DWCDX] = KC0DW01.KC0DWCKA;
  KC0DW02.KC0DWOOV[KC0DWCDX] = KC0DW01.KC0DWOOV;
  KC0DW02.KC0DWALV[KC0DWCDX] = KC0DW01.KC0DWALV;



end // end KC0D360

// prepare first screen
Function KC0D370()
   /* *********************************************/
   /* *  prepare the first screen to be displayed**/
   /* *********************************************/

  KC0D130(); /* get kucrec company record*/
  KC0D265(); /* get arcrec ar record*/
  KC0D290(); /* get vcrchk01 credit record*/

  set KC0DM005 initial; /* reset screen*/

   /* ******************************/
   /* load A/R data into screen*/
   /* ******************************/

  KC0DM005.KC0DMDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0DM005.KC0DMANM = "KC0D370"; /* converse name*/


  KC0DW01.KC0DWFCU = "******************"; /* full cust number*/
  KC0DW01.KC0DWPR1 = ".";
  KC0DW01.KC0DWPR2 = ".";
  KC0DW01.KC0DWPR3 = ".";

  KC0DW01.KC0DWCOI = KC0DW01.KUCCOID; /* move company number*/

  if (KC0DM001.KUMSTRID > 0) /* move store*/
    KC0DW01.KC0DWSTO = KC0DM001.KUMSTRID;
  end

  if (KC0DM001.XNXCD > 0) /* move department*/
    KC0DW01.KC0DWXNX = KC0DM001.XNXCD;
  end

  if (KC0DM001.XGPCD > " ") /* move gpc code*/
    KC0DW01.KC0DWGPC = KC0DM001.XGPCD;
  end

  KC0DM005.KC0DWFCU = KC0DW01.KC0DWFCU; /* customer number*/

  KC0DM005.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  KC0DM005.KUCCRLIN = KUCREC.KUCCRLIN; /* credit line*/

  if (KC0DW01.KC0DWFFL == "Y")
    KC0DW01.KC0DWFFL = " "; /* unset first time flag*/
    KC0DM005.KC0DWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0DM005.KC0DWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
    KC0DW01.KC0DWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0DW01.KC0DWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
  else
    KC0DM005.KC0DWINP = KC0DW01.KC0DWINP; /* orders in process*/
    KC0DM005.KC0DWHDC = KC0DW01.KC0DWHDC; /* orders on hold*/
  end


  KC0DW01.KC0DWARB = 0;

  KC0DW01.KC0DWARB = ARCREC.ARABAL - ARCREC.ARAICRMO - ARCREC.ARADSITM;
  KC0DW01.KC0DWARB = KC0DW01.KC0DWARB - ARCREC.ARAUDDUC;
  KC0DM005.ARCSBNAR = VCRCHK01.ARCSBNAR; /* SBNAR to screen*/
  KC0DM005.ARABAL = KC0DW01.KC0DWARB;
  KC0DM005.KC0DWCN1 = KC0DW01.KC0DWCN1; /* nbr of orders selected*/
  KC0DM005.KC0DWXPO = KC0DW01.KC0DWARB + KC0DM005.KC0DWINP;
  KC0DM005.KC0DWXPO = KC0DM005.KC0DWXPO + VCRCHK01.ARCSBNAR;
                                   /* add SBNAR to exp*/

  KC0DM005.KC0DWCPG = KC0DW01.KC0DWCPG; /* set current page*/
  KC0DM005.KC0DWTPG = KC0DW01.KC0DWTPG; /* set total page*/


  KC0DW01.KC0DWSTP = 0; /* init screen top*/

  while (KC0DW01.KC0DWSTP < 13
   && KC0DW02.KC0DWTDX < KC0DW02.KC0DWBOT)
    KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP + 1;
    KC0DW02.KC0DWTDX = KC0DW02.KC0DWTDX + 1;
    if (KC0DW02.KC0DWSEL[KC0DWTDX] == "R")
      set KC0DM005.KC0DMSEL[KC0DWSTP] skip, bold;
      set KC0DM005.KC0DWOOV[KC0DWSTP] skip, bold;
    end
    if (KC0DW02.KC0DWSEL[KC0DWTDX] == "M")
      set KC0DM005.KC0DMORD[KC0DWSTP] skip, bold;
      KC0DM005.KC0DMSEL[KC0DWSTP] = " ";
    else
      KC0DM005.KC0DMSEL[KC0DWSTP] = KC0DW02.KC0DWSEL[KC0DWTDX];
    end
    KC0DM005.KC0DMORD[KC0DWSTP] = KC0DW02.KC0DWORD[KC0DWTDX];
    KC0DM005.XOTABRV[KC0DWSTP] = KC0DW02.XOTABRV[KC0DWTDX];
    KC0DM005.XOSCD[KC0DWSTP] = KC0DW02.XOSCD[KC0DWTDX];
    KC0DM005.XCSCD[KC0DWSTP] = KC0DW02.XCSCD[KC0DWTDX];
    KC0DM005.KC0DWNDT[KC0DWSTP] = KC0DW02.KC0DWNDT[KC0DWTDX];
    KC0DM005.KC0DWRSN[KC0DWSTP] = KC0DW02.KC0DWRSN[KC0DWTDX];
    KC0DM005.KC0DWOIP[KC0DWSTP] = KC0DW02.KC0DWOIP[KC0DWTDX];
    KC0DM005.KC0DWOOV[KC0DWSTP] = KC0DW02.KC0DWOOV[KC0DWTDX];
    KC0DM005.KC0DWALV[KC0DWSTP] = KC0DW02.KC0DWALV[KC0DWTDX];
  end

  KC0DW01.KC0DWSDX = KC0DW01.KC0DWSTP; /* current screen index*/
  if (KC0DW02.KC0DWTDX == KC0DW02.KC0DWBOT
   && KC0DW01.KC0DWERR == "N")
    converseLib.validationFailed(4); /* last record display*/
  end

  while (KC0DW01.KC0DWSTP < 13)
    KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP + 1;
    set KC0DM005.KC0DMSEL[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DMORD[KC0DWSTP] skip, invisible;
    set KC0DM005.XOTABRV[KC0DWSTP] skip, invisible;
    set KC0DM005.XOSCD[KC0DWSTP] skip, invisible;
    set KC0DM005.XCSCD[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DWNDT[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DWRSN[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DWOIP[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DWOOV[KC0DWSTP] skip, invisible;
    set KC0DM005.KC0DWALV[KC0DWSTP] skip, invisible;
  end

end // end KC0D370

// process all orders selected
Function KC0D400()
   /* ***********************************************/
   /* this process will allow the user to resell  **/
   /* orders from a display of all orders selected**/
   /* via the Kc0dm001 screen map                 **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/

  KC0DW01.KC0DWERR = "N"; /* set error flag*/
  KC0DM005.KC0DWMSG = KC0DW01.KC0DWMSG; /* credit message number*/


  converse KC0DM005 ;

  KC0DW01.KC0DWMSG = " ";
  KC0DM005.KC0DWMSG = " ";
  set KC0DM005.KC0DMOPT cursor, initialAttributes; /* init cursor*/

  KC0D410(); /* edit special keys*/

  if (KC0DW01.KC0DWERR == "N")
    KC0D430(); /* edit screen*/
  end

  if (KC0DW01.KC0DWERR == "N")
    KC0D750(); /* edit page counter*/
  end



end // end KC0D400

// pfkey processing for cc0dm005
Function KC0D410()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/

   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pa2) /* back to order selection menu Kc0dm001*/
    KC0DW01.KC0DWERR = "Y";
    KC0DW01.KC0DWEND = "Y";
    return;
  end

   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/

  if (converseVar.eventKey is enter)
    if (KC0DM005.CATOAP > " ") /* fast path*/
      if ("X" in KC0DW02.KC0DWSEL) /* is there any updates pending*/
        KC0DW01.KC0DWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0DM005.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0DM005.CATOAP;
      COMMAREA.CAITEM = KC0DM005.CAITEM;
      COMMAREA.CAFROMAP = "KC0D";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0DW01.KC0DWERR = "Y";
      set KC0DM005.CATOAP cursor, bold;
    else
      set KC0DM005.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0DM005.CATOAP > " ")
      KC0DW01.KC0DWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0DM005.CATOAP cursor, bold;
      return;
    else
      set KC0DM005.CATOAP modified;
    end
  end

   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/

  if ("X" in KC0DW02.KC0DWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* exit screen*/
     || converseVar.eventKey is pf4) /* goal menu screen*/
      KC0DW01.KC0DWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end

   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0D";
    XSPF1();
    KC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
    return;
  end

   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0DW01.KC0DWERR = "Y";
    KC0DW01.KC0DWEND = "Y";
    return;
  end

   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0D";
    XSPF4();
  end


   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf7)
    KC0D420(); /* scroll up*/
    return;
  end

   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf8)
    KC0D460(); /* scroll down*/
    return;
  end

   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf9) /* show windowing screen*/
    KC0D500();
    return;
  end

   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf6)
    KC0D600(); /* view selected orders*/
    return;
  end

   /* ***********************************/
     /* pf12 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf12)
    KC0D700(); /* update orders*/
    return;
  end


   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf21) /* show windowing screen*/
    KC0D550();
    return;
  end

  KC0DW01.KC0DWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/



end // end KC0D410

// scroll up process
Function KC0D420()


   /* *********************************************************/
          /* scrolling up and editing takes place*/
   /* *********************************************************/


  if (KC0DW02.KC0DWPDX == 0) /* is it at the top of the screen*/
    converseLib.validationFailed(14); /* can not scroll up*/
    KC0DW01.KC0DWERR = "Y";
    return;
  end

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "N")
    KC0DW02.KC0DWCDX = KC0DW02.KC0DWPDX; /* current eq  previous*/
    KC0DW01.KC0DWSTP = 13;

    while (KC0DW01.KC0DWSTP >= 1 /* load the screen with the wstable*/
     && KC0DW02.KC0DWPDX >= 1)
      set KC0DM005.KC0DMSEL[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DMORD[KC0DWSTP] initialAttributes;
      set KC0DM005.XOTABRV[KC0DWSTP] initialAttributes;
      set KC0DM005.XOSCD[KC0DWSTP] initialAttributes;
      set KC0DM005.XCSCD[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWNDT[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWRSN[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWOIP[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWOOV[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWALV[KC0DWSTP] initialAttributes;
      if (KC0DW02.KC0DWSEL[KC0DWPDX] == "R")
        set KC0DM005.KC0DMSEL[KC0DWSTP] skip, bold;
        set KC0DM005.KC0DWOOV[KC0DWSTP] skip, bold;
      end
      if (KC0DW02.KC0DWSEL[KC0DWPDX] == "M")
        set KC0DM005.KC0DMORD[KC0DWSTP] skip, bold;
        KC0DM005.KC0DMSEL[KC0DWSTP] = " ";
      else
        KC0DM005.KC0DMSEL[KC0DWSTP] = KC0DW02.KC0DWSEL[KC0DWPDX];
      end
      KC0DM005.KC0DMORD[KC0DWSTP] = KC0DW02.KC0DWORD[KC0DWPDX];
      KC0DM005.XOTABRV[KC0DWSTP] = KC0DW02.XOTABRV[KC0DWPDX];
      KC0DM005.XOSCD[KC0DWSTP] = KC0DW02.XOSCD[KC0DWPDX];
      KC0DM005.XCSCD[KC0DWSTP] = KC0DW02.XCSCD[KC0DWPDX];
      KC0DM005.KC0DWNDT[KC0DWSTP] = KC0DW02.KC0DWNDT[KC0DWPDX];
      KC0DM005.KC0DWRSN[KC0DWSTP] = KC0DW02.KC0DWRSN[KC0DWPDX];
      KC0DM005.KC0DWOIP[KC0DWSTP] = KC0DW02.KC0DWOIP[KC0DWPDX];
      KC0DM005.KC0DWOOV[KC0DWSTP] = KC0DW02.KC0DWOOV[KC0DWPDX];
      KC0DM005.KC0DWALV[KC0DWSTP] = KC0DW02.KC0DWALV[KC0DWPDX];
      KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP - 1;
      KC0DW02.KC0DWPDX = KC0DW02.KC0DWPDX - 1;
    end


    KC0DW01.KC0DWERR = "Y"; /* reconverse the screen*/

    KC0DW01.KC0DWCPG = KC0DW01.KC0DWCPG - 1;
    KC0DM005.KC0DWCPG = KC0DW01.KC0DWCPG;

    if (KC0DW02.KC0DWPDX < 1)
      KC0DW02.KC0DWPDX = 0;
    end

  end






end // end KC0D420

// edit resell screen cc0dm005
Function KC0D430()


   /* ***************************************/
   /* edit main resell option*/
   /* ***************************************/
  set KC0DM005.KC0DWCPG modified;

  if (KC0DM005.KC0DMOPT == " " /* if valid entered codes*/
   || KC0DM005.KC0DMOPT == "R")
    set KC0DM005.KC0DMOPT modified;
  else
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(13); /* invalid code*/
    set KC0DM005.KC0DMOPT cursor, bold;
  end


   /* ***************************************/
   /* update working table*/
   /* ***************************************/

  if (KC0DW01.KC0DWERR == "N") /* if not errors*/

    KC0DW01.KC0DWSTP = 0; /* set screen index*/
    KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* temp ws-table index*/

    while (KC0DW01.KC0DWSTP < 13 /* go thru the screen*/
     && KC0DW02.KC0DWTDX < KC0DW02.KC0DWBOT)
      KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP + 1; /* increment screen index*/
      KC0DW02.KC0DWTDX = KC0DW02.KC0DWTDX + 1; /* increment table index*/

      /* ***************************************/
       /* check for select option 'n'         **/
      /* ***************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == "N")
        if (KC0DW02.KC0DWSEL[KC0DWTDX] == "X")
          KC0D440(); /* refresh order and OIP data*/
        end
      end

      /* ***************************************/
       /* check for select option ' ' and 'r' **/
      /* ***************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == " ")
        if (KC0DM005.KC0DMOPT == "R")
          if (KC0DW02.KC0DWSEL[KC0DWTDX] == " ")
            KC0D450(); /* update OIP*/
            if (converseVar.eventKey is pf12)
              KC0DW01.KC0DWERR = "Y"; /* set error flag*/
              converseLib.validationFailed(40); /* press enter key before pf12*/
            end
          end
        end
      end

      /* *******************************************/
       /* check for select options 's' and 'x'    **/
      /* *******************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == "S")
        if (KC0DW02.KC0DWSEL[KC0DWTDX] == " ")
          KC0D450(); /* update oip*/
          if (converseVar.eventKey is pf12)
            KC0DW01.KC0DWERR = "Y"; /* set error flag*/
            converseLib.validationFailed(40); /* press enter key before pf12*/
          end
        end
      end


      /* *******************************************/
       /* check for select option  'v'            **/
      /* *******************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == "V")
        if (KC0DW02.KC0DWSEL[KC0DWTDX] == "X")
          KC0D440();
        end
        KC0DW02.KC0DWSEL[KC0DWTDX] = "V";
      end

      /* *******************************************/
       /* check for unselecting option 'v'        **/
      /* *******************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == " ")
        if (KC0DW02.KC0DWSEL[KC0DWTDX] == "V")
          KC0DW02.KC0DWSEL[KC0DWTDX] = " ";
        end
      end

      /* *****************************/
        /* update screen selections*/
      /* *****************************/

      KC0DM005.KC0DMSEL[KC0DWSTP] = KC0DW02.KC0DWSEL[KC0DWTDX];

      /* ***************************************/
       /* check for select option 'r'*/
       /* also check for 'm'odified orders*/
      /* ***************************************/

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == "R")
        set KC0DM005.KC0DMSEL[KC0DWSTP] skip, bold;
        set KC0DM005.KC0DWOOV[KC0DWSTP] skip, bold;
      end

      if (KC0DM005.KC0DMSEL[KC0DWSTP] == "M")
        KC0DM005.KC0DMSEL[KC0DWSTP] = " ";
        set KC0DM005.KC0DMORD[KC0DWSTP] skip, bold;
      end

    end
  end

  KC0DM005.KC0DMOPT = " "; /* clear option fields*/


end // end KC0D430

// refresh order data
Function KC0D440()

   /* ***************************************/
   /* this process reads the order and     **/
   /* refreshes the quantities because it  **/
   /* had been reset to resell before      **/
   /* ***************************************/

  OP1REC.OP1KEY = KC0DW02.OP1KEY[KC0DWTDX];

  KC0D210(); /* get order record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0DW01.KC0DWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    return;
  end


  KC0DW01.KC0DWOOK = "Y"; /* order ok to process  flag*/
  KC0DW01.KC0DWRIT = "Y"; /* need to read items for order flag*/
  KC0DW01.KC0DWALV = 0; /* allocated-value*/
  KC0DW01.KC0DWALQ = 0; /* allocated-qty*/
  KC0DW01.KC0DWOOV = 0; /* on-order-value*/
  KC0DW01.KC0DWOOQ = 0; /* on-order-qty*/

  KC0D350(); /* check order criteria*/

  if (KC0DW01.KC0DWOOK == "Y") /* the order is ok to process*/

    if (KC0DW01.KC0DWRIT == "Y") /* need to read the items*/
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0D230(); /* add-up items for an order*/
    end

    /* ********************************************/
     /* update the quantities on the order table*/
     /* and on the screen*/
    /* ********************************************/

    KC0DW01.KC0DWCKA = OP1REC.OP1CKAMT;
    KC0DW02.KC0DWOIP[KC0DWTDX] = KC0DW01.KC0DWCKA;
    KC0DW02.KC0DWOOV[KC0DWTDX] = KC0DW01.KC0DWOOV;
    KC0DW02.KC0DWALV[KC0DWTDX] = KC0DW01.KC0DWALV;

    KC0DW02.KC0DWSEL[KC0DWTDX] = " ";

    KC0DM005.KC0DWOIP[KC0DWSTP] = KC0DW02.KC0DWOIP[KC0DWTDX];
    KC0DM005.KC0DWOOV[KC0DWSTP] = KC0DW02.KC0DWOOV[KC0DWTDX];
    KC0DM005.KC0DWALV[KC0DWSTP] = KC0DW02.KC0DWALV[KC0DWTDX];

    KC0DM005.KC0DWINP = KC0DM005.KC0DWINP + KC0DW01.KC0DWCKA;
    KC0DW01.KC0DWINP = KC0DW01.KC0DWINP + KC0DW01.KC0DWCKA;
    KC0DM005.KC0DWXPO = KC0DW01.KC0DWARB + KC0DM005.KC0DWINP;
    KC0DM005.KC0DWXPO = KC0DM005.KC0DWXPO + VCRCHK01.ARCSBNAR;

    if (OP1REC.XCSCD == "20"
     || OP1REC.XCSCD == "30")
      KC0DM005.KC0DWHDC = KC0DM005.KC0DWHDC + 1;
      KC0DW01.KC0DWHDC = KC0DW01.KC0DWHDC + 1;
    end
  else
    KC0DW02.XOSCD[KC0DWTDX] = OP1REC.XOSCD;
    KC0DW02.XCSCD[KC0DWTDX] = OP1REC.XCSCD;
    KC0DW02.KC0DWSEL[KC0DWTDX] = "M";
  end

end // end KC0D440

// update OIP
Function KC0D450()
   /* **************************************************/
   /* -- update the OIP in the order and for the company*/
   /* -- update the orders on hold counter*/
   /* **************************************************/

  KC0DM005.KC0DWINP = KC0DM005.KC0DWINP - KC0DW02.KC0DWOIP[KC0DWTDX];
  KC0DW01.KC0DWINP = KC0DW01.KC0DWINP - KC0DW02.KC0DWOIP[KC0DWTDX];
  KC0DM005.KC0DWXPO = KC0DW01.KC0DWARB + KC0DM005.KC0DWINP;
  KC0DM005.KC0DWXPO = KC0DM005.KC0DWXPO + VCRCHK01.ARCSBNAR;
                                   /* add SBNAR to exp*/

  KC0DW02.KC0DWSEL[KC0DWTDX] = "X";

  KC0DW02.KC0DWOIP[KC0DWTDX] = KC0DW02.KC0DWALV[KC0DWTDX];
  KC0DM005.KC0DWOIP[KC0DWSTP] = KC0DW02.KC0DWALV[KC0DWTDX];

  if (KC0DW02.XCSCD[KC0DWTDX] == "20"
   || KC0DW02.XCSCD[KC0DWTDX] == "30")
    KC0DM005.KC0DWHDC = KC0DM005.KC0DWHDC - 1;
    KC0DW01.KC0DWHDC = KC0DW01.KC0DWHDC - 1;
  end
end // end KC0D450

// scroll down process
Function KC0D460()


   /* *********************************************************/
          /* scrolling down and editing takes place*/
   /* *********************************************************/


  if (KC0DW02.KC0DWCDX == KC0DW02.KC0DWBOT) /* if at the bottom of table*/
    converseLib.validationFailed(4); /* can not scroll down*/
    KC0DW01.KC0DWERR = "Y";
    return;
  end

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "N")
    KC0DW01.KC0DWSTP = 0;
    KC0DW02.KC0DWPDX = KC0DW02.KC0DWCDX;

    while (KC0DW01.KC0DWSTP < 13 /* load the screen with the ws table*/
     && KC0DW02.KC0DWCDX < KC0DW02.KC0DWBOT)
      KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP + 1;
      KC0DW02.KC0DWCDX = KC0DW02.KC0DWCDX + 1;
      set KC0DM005.KC0DMSEL[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DMORD[KC0DWSTP] initialAttributes;
      set KC0DM005.XOTABRV[KC0DWSTP] initialAttributes;
      set KC0DM005.XOSCD[KC0DWSTP] initialAttributes;
      set KC0DM005.XCSCD[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWNDT[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWRSN[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWOIP[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWOOV[KC0DWSTP] initialAttributes;
      set KC0DM005.KC0DWALV[KC0DWSTP] initialAttributes;
      if (KC0DW02.KC0DWSEL[KC0DWCDX] == "R") /* orders already updated*/
        set KC0DM005.KC0DMSEL[KC0DWSTP] skip, bold;
        set KC0DM005.KC0DWOOV[KC0DWSTP] skip, bold;
      end
      if (KC0DW02.KC0DWSEL[KC0DWCDX] == "M") /* order couldn't be updated*/
        set KC0DM005.KC0DMORD[KC0DWSTP] skip, bold;
        KC0DM005.KC0DMSEL[KC0DWSTP] = " ";
      else
        KC0DM005.KC0DMSEL[KC0DWSTP] = KC0DW02.KC0DWSEL[KC0DWCDX];
      end
      KC0DM005.KC0DMORD[KC0DWSTP] = KC0DW02.KC0DWORD[KC0DWCDX];
      KC0DM005.XOTABRV[KC0DWSTP] = KC0DW02.XOTABRV[KC0DWCDX];
      KC0DM005.XOSCD[KC0DWSTP] = KC0DW02.XOSCD[KC0DWCDX];
      KC0DM005.XCSCD[KC0DWSTP] = KC0DW02.XCSCD[KC0DWCDX];
      KC0DM005.KC0DWNDT[KC0DWSTP] = KC0DW02.KC0DWNDT[KC0DWCDX];
      KC0DM005.KC0DWRSN[KC0DWSTP] = KC0DW02.KC0DWRSN[KC0DWCDX];
      KC0DM005.KC0DWOIP[KC0DWSTP] = KC0DW02.KC0DWOIP[KC0DWCDX];
      KC0DM005.KC0DWOOV[KC0DWSTP] = KC0DW02.KC0DWOOV[KC0DWCDX];
      KC0DM005.KC0DWALV[KC0DWSTP] = KC0DW02.KC0DWALV[KC0DWCDX];
    end

    KC0DW01.KC0DWSDX = KC0DW01.KC0DWSTP;
                                   /* reset current screen index*/
    if (KC0DW02.KC0DWCDX == KC0DW02.KC0DWBOT
     && KC0DW01.KC0DWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end

    while (KC0DW01.KC0DWSTP < 13)
      KC0DW01.KC0DWSTP = KC0DW01.KC0DWSTP + 1;
      set KC0DM005.KC0DMSEL[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DMORD[KC0DWSTP] skip, invisible;
      set KC0DM005.XOTABRV[KC0DWSTP] skip, invisible;
      set KC0DM005.XOSCD[KC0DWSTP] skip, invisible;
      set KC0DM005.XCSCD[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DWNDT[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DWRSN[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DWOIP[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DWOOV[KC0DWSTP] skip, invisible;
      set KC0DM005.KC0DWALV[KC0DWSTP] skip, invisible;
    end

    KC0DW01.KC0DWERR = "Y"; /* reconverse the screen*/

    KC0DW01.KC0DWCPG = KC0DW01.KC0DWCPG + 1;
    KC0DM005.KC0DWCPG = KC0DW01.KC0DWCPG;

  end






end // end KC0D460

// windowing routine
Function KC0D500()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "Y")
    return;
  end

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "            CREDIT STATUS ";

  while (XX0XW02.XX0XWEND == "N")
    XPXCS01(); /* perform credit status pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* previous to current index*/
  KC0D370(); /* refresh the screen*/



end // end KC0D500

// windowing routine
Function KC0D550()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "Y")
    return;
  end

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "   RTC REASON CODE        ";

  while (XX0XW02.XX0XWEND == "N")
    XPXCH01(); /* perform credit status pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* previous to current index*/
  KC0D370(); /* refresh the screen*/



end // end KC0D550

// view selected orders
Function KC0D600()
   /* ***********************************/
    /* user has requested to inquiry*/
    /* on selected orders*/
   /* ***********************************/

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "Y")
    return;
  end

  if ("V" in KC0DW02.KC0DWSEL) /* if any order has been selected*/
    /* next sentence                  for viewing*/
  else
    KC0DW01.KC0DWERR = "Y"; /* set error message*/
    converseLib.validationFailed(32); /* no orders have been marked for view*/
    return;
  end


  KC0DW02.KC0DWTDX = 0; /* prepare table index*/

  while (KC0DW02.KC0DWTDX < KC0DW02.KC0DWBOT)
    if (KC0DW01.KC0DWERR == "Y")
      KC0D610(); /* display order information*/
    else
      KC0DW02.KC0DWTDX = KC0DW02.KC0DWTDX + 1; /* add to the index*/
      if (KC0DW02.KC0DWSEL[KC0DWTDX] == "V")
        KC0D630(); /* read order header*/
        KC0D640(); /* format order screen*/
        KC0D610(); /* display order information*/
        KC0DW02.KC0DWSEL[KC0DWTDX] = " "; /* clear select ind*/
      end
    end
  end

  KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* move previous to temp*/

  KC0D370(); /* update screen display*/




end // end KC0D600

// order inquiry screen
Function KC0D610()
   /* *******************************************/
   /* order inquiry screen process            **/
   /* 1. prepares working variables           **/
   /* 2. reads the order header               **/
   /* 3. format the order screen              **/
   /* 4. present the screen                   **/
   /* 5. edit pf keys                         **/
                                           /* **/
   /* *******************************************/

  KC0DW01.KC0DWERR = "N";
  KC0DM010.KC0DMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0DM010.KC0DMANM = "KC0D610"; /* set screen name*/

  KC0DM010.VAGen_EZEMSG = KC0DW01.KC0DWMSG;

  converse KC0DM010 ;

  KC0DW01.KC0DWMSG = " ";
  KC0DM010.VAGen_EZEMSG = " ";

  KC0D620(); /* edit pf keys*/



end // end KC0D610

// pf key processing for cc0dm010
Function KC0D620()
   /* ********************************************/
     /* edit pf keys                           **/
   /* ********************************************/

   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/

  if (converseVar.eventKey is enter)
    if (KC0DM010.CATOAP > " ") /* fast path*/
      if ("X" in KC0DW02.KC0DWSEL) /* is there any updates pending*/
        KC0DW01.KC0DWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0DM010.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0DM010.CATOAP;
      COMMAREA.CAITEM = KC0DM010.CAITEM;
      COMMAREA.CAFROMAP = "KC0D";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0DW01.KC0DWERR = "Y";
      set KC0DM010.CATOAP modified, bold;
    else
      set KC0DM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0DM010.CATOAP > " ")
      KC0DW01.KC0DWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0DM010.CATOAP cursor, bold;
      return;
    else
      set KC0DM010.CATOAP modified;
    end
  end


   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/

  if ("X" in KC0DW02.KC0DWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* exit screen*/
      KC0DW01.KC0DWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end

   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0D";
    XSPF1();
    KC0DM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0DW01.KC0DWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to credit screen*/
    KC0DW02.KC0DWTDX = 0;
    while (KC0DW02.KC0DWTDX < KC0DW02.KC0DWBOT)
      KC0DW02.KC0DWTDX = KC0DW02.KC0DWTDX + 1;
      if (KC0DW02.KC0DWSEL[KC0DWTDX] == "V") /* clear out remaining 'v's*/
        KC0DW02.KC0DWSEL[KC0DWTDX] = " ";
      end
    end
    return;
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0D"; /* comming from appl*/
    XSPF4();
  end


  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0DW01.KC0DWERR = "Y";



end // end KC0D620

// get order header record
Function KC0D630()
   /* ************************************************/
     /* read the order header for inquiry          **/
   /* ************************************************/

  OP1REC.OP1CUOID = KC0DW02.KC0DWCUO[KC0DWTDX];
  OP1REC.OP1NORID = KC0DW02.KC0DWRID[KC0DWTDX];
  KC0DW01.KC0DWCOD = KC0DW02.KC0DWCUO[KC0DWTDX];
  OP1REC.OP1PARTN = KC0DW01.KC0DWPAR;

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for order*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0D"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0D630"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0430"; /* i/o mod*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key*/
    XSCCS02();
  end


end // end KC0D630

// format order inquiry screen
Function KC0D640()
   /* **********************************************/
    /* format the order inquiry screen           **/
    /* -- move fields to the map                 **/
                                  /* **/
   /* **********************************************/

  set KC0DM010 initial; /* repaint the screen each time*/

   /* **********************************************/
    /* Order Number                              **/
   /* **********************************************/
  KC0DW01.KC0DWCUO = OP1REC.OP1CUOID; /* order number*/
  KC0DW01.KC0DWRID = OP1REC.OP1NORID; /* nike  number*/
  KC0DM010.KC0DMORD = KC0DW01.KC0DWORD; /* formatted order number*/

   /* **********************************************/
    /* Customer Number                           **/
   /* **********************************************/
  KC0DW01.KC0DWFCU = "******************"; /* fill cust number*/
  KC0DW01.KC0DWPR1 = ".";
  KC0DW01.KC0DWPR2 = ".";
  KC0DW01.KC0DWPR3 = ".";

  KC0DW01.KC0DWCOI = OP1REC.KUCCOID; /* customer number*/

  if (OP1REC.KUMSTRID > 0)
    KC0DW01.KC0DWSTO = OP1REC.KUMSTRID; /* store number*/
  end
  if (OP1REC.XNXCD > 0)
    KC0DW01.KC0DWXNX = OP1REC.XNXCD; /* dept number*/
  end
  if (OP1REC.XGPCD > " ")
    KC0DW01.KC0DWGPC = OP1REC.XGPCD; /* dept number*/
  end

  KC0DM010.KC0DWFCU = KC0DW01.KC0DWFCU;

   /* **********************************************/
    /* Order Information                         **/
   /* **********************************************/
  KC0DM010.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0DM010.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0DM010.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  KC0DM010.OP1SPGM = OP1REC.SP1ID; /* sales program*/

   /* **********************************************/
    /* Order Type Code                           **/
   /* **********************************************/
  KC0DM010.XOTCD = OP1REC.XOTCD; /* order type*/
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0DM010.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0DM010.XOTABRV = "N FND";
  end

   /* **********************************************/
    /* Order Brand Code                          **/
   /* **********************************************/
  KC0DM010.XBCCD = OP1REC.XBCCD; /* brand code*/
  if (OP1REC.XBCCD in XBCTBL.XBCCD)
    KC0DM010.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBCCD == " ")
      KC0DM010.XBCABRV = " ";
    else
      KC0DM010.XBCABRV = "N FND";
    end
  end

   /* **********************************************/
    /* Order GPC Code                            **/
   /* **********************************************/
  KC0DM010.XGPCD = OP1REC.XGPCD;
  if (OP1REC.XGPCD in XGPTBL.XGPCD)
    KC0DM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KC0DM010.XGPABRV = "N FND";
  end


   /* **********************************************/
    /* Order Division Code                       **/
   /* **********************************************/
   /* MOVE OP1REC.XDVCD TO KC0DM010.XDVCD;*/
   /* IF OP1REC.XDVCD IN XDVTBL.XDVCD;*/
    /* MOVE XDVTBL.XDVABRV(EZETST) TO KC0DM010.XDVABRV;*/
   /* ELSE ;*/
    /* MOVE 'N FND' TO KC0DM010.XDVABRV;*/
   /* END ;*/


   /* **********************************************/
    /* Order Bulk Code                           **/
   /* **********************************************/
  KC0DM010.XBDCD = OP1REC.XBDCD;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    KC0DM010.XBDABRV = XBDTBL.XBDABRV[sysVar.arrayIndex];
  else
    KC0DM010.XBDABRV = "N FND";
  end

   /* **********************************************/
    /* Order Terms Code                          **/
   /* **********************************************/
  KC0DM010.XPTCD = OP1REC.XPTCD; /* terms code*/
  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    KC0DM010.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
  else
    KC0DM010.XPTABRV = "N FND";
  end

   /* **********************************************/
    /* Customer Need Date                        **/
   /* **********************************************/
  if (OP1REC.OP1CUNDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0DW01.KC0DWDT1 = TA2REC.TA2GRGA;
    KC0DW01.KC0DWMM2 = KC0DW01.KC0DWMM1;
    KC0DW01.KC0DWDD2 = KC0DW01.KC0DWDD1;
    KC0DW01.KC0DWYY2 = KC0DW01.KC0DWYY1;
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1CUNDT = KC0DW01.KC0DWDT2;
  else
    KC0DW01.KC0DWYY2 = "YY";
    KC0DW01.KC0DWMM2 = "MM";
    KC0DW01.KC0DWDD2 = "DD";
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1CUNDT = KC0DW01.KC0DWDT2;
  end

   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
  if (OP1REC.OP1DSBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0DW01.KC0DWDT1 = TA2REC.TA2GRGA;
    KC0DW01.KC0DWMM2 = KC0DW01.KC0DWMM1;
    KC0DW01.KC0DWDD2 = KC0DW01.KC0DWDD1;
    KC0DW01.KC0DWYY2 = KC0DW01.KC0DWYY1;
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1DSBDT = KC0DW01.KC0DWDT2;
  else
    KC0DW01.KC0DWYY2 = "YY";
    KC0DW01.KC0DWMM2 = "MM";
    KC0DW01.KC0DWDD2 = "DD";
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1DSBDT = KC0DW01.KC0DWDT2;
  end

   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
  if (OP1REC.OP1DSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0DW01.KC0DWDT1 = TA2REC.TA2GRGA;
    KC0DW01.KC0DWMM2 = KC0DW01.KC0DWMM1;
    KC0DW01.KC0DWDD2 = KC0DW01.KC0DWDD1;
    KC0DW01.KC0DWYY2 = KC0DW01.KC0DWYY1;
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1DSADT = KC0DW01.KC0DWDT2;
  else
    KC0DW01.KC0DWYY2 = "YY";
    KC0DW01.KC0DWMM2 = "MM";
    KC0DW01.KC0DWDD2 = "DD";
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1DSADT = KC0DW01.KC0DWDT2;
  end

   /* **********************************************/
    /* Credit Status Change Date                 **/
   /* **********************************************/
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0DW01.KC0DWDT1 = TA2REC.TA2GRGA;
    KC0DW01.KC0DWMM2 = KC0DW01.KC0DWMM1;
    KC0DW01.KC0DWDD2 = KC0DW01.KC0DWDD1;
    KC0DW01.KC0DWYY2 = KC0DW01.KC0DWYY1;
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1CSADT = KC0DW01.KC0DWDT2;
  else
    KC0DW01.KC0DWYY2 = "YY";
    KC0DW01.KC0DWMM2 = "MM";
    KC0DW01.KC0DWDD2 = "DD";
    KC0DW01.KC0DWSL1 = "/";
    KC0DW01.KC0DWSL2 = "/";
    KC0DM010.OP1CSADT = KC0DW01.KC0DWDT2;
  end

   /* **********************************************/
    /* Store Address                             **/
   /* **********************************************/
  KC0D650(); /* store information*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
  KULREC.KULAAID = KUMREC.KUMSTAID; /* store address id*/

  KC0D660(); /* store address*/

  KC0DM010.KC0DMST1 = KUMREC.KUMSTRNM; /* store name*/
  KC0DW01.KC0DWCTY = KULREC.XXXCITY; /* store city*/
  KC0DW01.KC0DWST = KULREC.XSTCD; /* store state*/
  KC0DW01.KC0DWZIP = KULREC.XXXZIP; /* store zip*/
  KC0DW01.KC0DWB1 = " "; /* blank*/
  KC0DW01.KC0DWB2 = " "; /* blank*/
  if (KULREC.XXX-ADDR1 == " ")
    if (KULREC.XXX-ADDR2 == " ")
      if (KULREC.XXX-ADDR3 == " ")
        KC0DM010.KC0DMST2 = KC0DW01.KC0DWADD; /* formatted city*/
        KC0DM010.KC0DMST3 = " ";
        KC0DM010.KC0DMST4 = " ";
        KC0DM010.KC0DMST5 = " ";
      else
        KC0DM010.KC0DMST2 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0DM010.KC0DMST3 = KC0DW01.KC0DWADD; /* formatted city*/
        KC0DM010.KC0DMST4 = " ";
        KC0DM010.KC0DMST5 = " ";
      end
    else
      KC0DM010.KC0DMST2 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0DM010.KC0DMST3 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0DM010.KC0DMST4 = KC0DW01.KC0DWADD; /* formatted city*/
      KC0DM010.KC0DMST5 = " ";
    end
  else
    KC0DM010.KC0DMST2 = KULREC.XXX-ADDR1; /* store address 1*/
    KC0DM010.KC0DMST3 = KULREC.XXX-ADDR2; /* store address 2*/
    KC0DM010.KC0DMST4 = KULREC.XXX-ADDR3; /* store address 3*/
    KC0DM010.KC0DMST5 = KC0DW01.KC0DWADD; /* formatted city*/
  end

   /* **********************************************/
    /* Store Ship To Address                     **/
   /* **********************************************/
  if (KUMREC.KUMSTAID == KUMREC.KUMSHAID)
                                   /* store and ship to are equal*/
    KC0DM010.KC0DMSS1 = KC0DM010.KC0DMST1;
    KC0DM010.KC0DMSS2 = KC0DM010.KC0DMST2;
    KC0DM010.KC0DMSS3 = KC0DM010.KC0DMST3;
    KC0DM010.KC0DMSS4 = KC0DM010.KC0DMST4;
    KC0DM010.KC0DMSS5 = KC0DM010.KC0DMST5;
  else
    KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
    KULREC.KULAAID = KUMREC.KUMSHAID; /* store address id*/
    KC0D660();
    KC0DM010.KC0DMSS1 = KUMREC.KUMSTRNM; /* store name*/
    KC0DW01.KC0DWCTY = KULREC.XXXCITY; /* store city*/
    KC0DW01.KC0DWST = KULREC.XSTCD; /* store state*/
    KC0DW01.KC0DWZIP = KULREC.XXXZIP; /* store zip*/
    KC0DW01.KC0DWB1 = " "; /* blank*/
    KC0DW01.KC0DWB2 = " "; /* blank*/
    if (KULREC.XXX-ADDR1 == " ")
      if (KULREC.XXX-ADDR2 == " ")
        if (KULREC.XXX-ADDR3 == " ")
          KC0DM010.KC0DMSS2 = KC0DW01.KC0DWADD; /* formatted city*/
          KC0DM010.KC0DMSS3 = " ";
          KC0DM010.KC0DMSS4 = " ";
          KC0DM010.KC0DMSS5 = " ";
        else
          KC0DM010.KC0DMSS2 = KULREC.XXX-ADDR3; /* store address 3*/
          KC0DM010.KC0DMSS3 = KC0DW01.KC0DWADD; /* formatted city*/
          KC0DM010.KC0DMSS4 = " ";
          KC0DM010.KC0DMSS5 = " ";
        end
      else
        KC0DM010.KC0DMSS2 = KULREC.XXX-ADDR2; /* store address 2*/
        KC0DM010.KC0DMSS3 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0DM010.KC0DMSS4 = KC0DW01.KC0DWADD; /* formatted city*/
        KC0DM010.KC0DMSS5 = " ";
      end
    else
      KC0DM010.KC0DMSS2 = KULREC.XXX-ADDR1; /* store address 1*/
      KC0DM010.KC0DMSS3 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0DM010.KC0DMSS4 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0DM010.KC0DMSS5 = KC0DW01.KC0DWADD; /* formatted city*/
    end
  end


   /* **********************************************/
    /* Order Ship To Address                     **/
   /* **********************************************/
  if (OP1REC.OP11TMSF == "N")
    KC0DM010.KC0DMOS1 = " ";
    KC0DM010.KC0DMOS2 = " ";
    KC0DM010.KC0DMOS3 = " ";
    KC0DM010.KC0DMOS4 = " ";
    KC0DM010.KC0DMOS5 = " ";
  else
    KC0D670();
    KC0DM010.KC0DMOS1 = OP5REC.OP5ALTNM; /* ship to name*/
    KC0DW01.KC0DWCTY = OP5REC.XXXCITY; /* ship to city*/
    KC0DW01.KC0DWST = OP5REC.XSTCD; /* ship to state*/
    KC0DW01.KC0DWZIP = OP5REC.XXXZIP; /* ship to zip*/
    KC0DW01.KC0DWB1 = " "; /* blank*/
    KC0DW01.KC0DWB2 = " "; /* blank*/
    if (OP5REC.XXXADDR[1] == " ")
      if (OP5REC.XXXADDR[2] == " ")
        if (OP5REC.XXXADDR[3] == " ")
          KC0DM010.KC0DMOS2 = KC0DW01.KC0DWADD; /* formatted city*/
          KC0DM010.KC0DMOS3 = " ";
          KC0DM010.KC0DMOS4 = " ";
          KC0DM010.KC0DMOS5 = " ";
        else
          KC0DM010.KC0DMOS2 = OP5REC.XXXADDR[3]; /* store address 3*/
          KC0DM010.KC0DMOS3 = KC0DW01.KC0DWADD; /* formatted city*/
          KC0DM010.KC0DMOS4 = " ";
          KC0DM010.KC0DMOS5 = " ";
        end
      else
        KC0DM010.KC0DMOS2 = OP5REC.XXXADDR[2]; /* store address 2*/
        KC0DM010.KC0DMOS3 = OP5REC.XXXADDR[3]; /* store address 3*/
        KC0DM010.KC0DMOS4 = KC0DW01.KC0DWADD; /* formatted city*/
        KC0DM010.KC0DMOS5 = " ";
      end
    else
      KC0DM010.KC0DMOS2 = OP5REC.XXXADDR[1]; /* store address 1*/
      KC0DM010.KC0DMOS3 = OP5REC.XXXADDR[2]; /* store address 2*/
      KC0DM010.KC0DMOS4 = OP5REC.XXXADDR[3]; /* store address 3*/
      KC0DM010.KC0DMOS5 = KC0DW01.KC0DWADD; /* formatted city*/
    end
  end


   /* **********************************************/
    /* Sales Agency and Rep                      **/
   /* **********************************************/
  KC0DM010.SM1AGYID = OP1REC.SM1AGYID;
  KC0DM010.SM4REPID = OP1REC.SM4REPID;

  KC0D680();
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0DW01.KC0DWFST = " ";
    KC0DW01.KC0DWPER = "  ";
    KC0DW01.KC0DWLST = "NOT FOUND ";
  else
    KC0DW01.KC0DWFST = VRAGCY02.XXXFSTNM;
    KC0DW01.KC0DWPER = ". "; /* period*/
    KC0DW01.KC0DWLST = VRAGCY02.XXXLSTNM; /* last name*/
  end

  KC0DM010.KC0DMNAM = KC0DW01.KC0DWNAM;

   /* **********************************************/
    /* Special Label Instructions                **/
   /* **********************************************/

  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* label instruction*/
  OP4REC.OP4TRSEQ = 1; /* first one*/

  KC0D720();

  if (SQLCA.VAGen_SQLCODE == 100)
    KC0DM010.OP4TXT = "NOT FOUND ";
  else
    KC0DM010.OP4TXT = OP4REC.OP4TXT;
  end

   /* **********************************************/
    /* Order Taken by ID                         **/
   /* **********************************************/
  KC0D690(); /* get taken-by service rep name*/

  KC0DM010.XXXUSRID = KUYREC.XXXUSRID;


end // end KC0D640

// get store name & address id
Function KC0D650()
   /* ************************************************/
     /* read the store for store name & address id **/
   /* ************************************************/

  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUMREC.KUMSTRNM = "STORE IS NOT FOUND ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
      TA1REC.TA1PGMNM = "KC0D"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0D650"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* i/o mod*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key*/
      XSCCS02();
    end
  end

end // end KC0D650

// get store address
Function KC0D660()
   /* **********************************************/
     /* read the address for the store address   **/
   /* **********************************************/

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KULREC.XXX-ADDR1 = "STORE ADDRESS WAS NOT FOUND ";
      KULREC.XXX-ADDR2 = " ";
      KULREC.XXX-ADDR3 = " ";
      KULREC.XXXCITY = " ";
      KULREC.XSTCD = " ";
      KULREC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0D"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0D660"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0170"; /* i/o mod*/
      TA1REC.TA1TBLKE = KULREC.KULGRP; /* key*/
      XSCCS02();
    end
  end


end // end KC0D660

// get order onetime ship address
Function KC0D670()
   /* *****************************************************/
     /* read the order address for onetime ship address **/
   /* ****************************************************/

  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* part number*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* order number*/
  OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike order number*/
  OP5REC.OP5BILIN = "N"; /* bill to flag*/
  OP5REC.OP5SHPIN = "Y"; /* ship to flag*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP5REC.OP5ALTNM = "SHIP TO INFORMATION WAS NOT FOUND ";
      OP5REC.XXXADDR[1] = " ";
      OP5REC.XXXADDR[2] = " ";
      OP5REC.XXXADDR[3] = " ";
      OP5REC.XXXCITY = " ";
      OP5REC.XSTCD = " ";
      OP5REC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DORDER"; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0D"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0D670"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0460"; /* i/o mod*/
      TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key*/
      XSCCS02();
    end
  end


end // end KC0D670

// get sales rep name
Function KC0D680()
   /* ************************************************/
     /* read the sales rep table to get the name   **/
   /* ************************************************/

  VRAGCY02.SM1AGYID = OP1REC.SM1AGYID;
  VRAGCY02.SM4REPID = OP1REC.SM4REPID;
  VRAGCY02.XXXSTAT = "A";

  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0D"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0D680"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID; /* key*/
    XSCCS02();
  end


end // end KC0D680

// get service rep user id
Function KC0D690()
   /* *****************************************************/
     /* read the service rep table to get user id       **/
   /* *****************************************************/


  KUYREC.KUYSVRID = OP1REC.OP1TBREP;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1PGMNM = "KC0D"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0D690 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSCCS02(); /* abort routine*/
  end


      /* if not found then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    KUYREC.XXXUSRID = "UNKNOWN"; /* set user id*/
  end

end // end KC0D690

// process pf12 updates
Function KC0D700()
   /* ****************************************/
   /* this process updates the records that**/
   /* reflect an order has been resold     **/
   /* -- GETS ORDERS AND CHECKS IT AGAIN   **/
   /* -- updates databases                 **/
   /* ****************************************/

  KC0D430(); /* edit current screen*/

  if (KC0DW01.KC0DWERR == "Y")
    return;
  end

  KC0DW01.KC0DWRCN = 0; /* zero # ords counter*/
  KC0DW01.KC0DWVAL = 0; /* zero resold value*/

  if ("X" in KC0DW02.KC0DWSEL) /* if any order has been marked*/
    /* next sentence*/
  else
    KC0DW01.KC0DWERR = "Y"; /* set error message*/
    converseLib.validationFailed(11); /* no orders have been marked*/
    return;
  end

  KC0DW02.KC0DWTDX = 0; /* prepare table index*/

  while (KC0DW02.KC0DWTDX < KC0DW02.KC0DWBOT)
    KC0DW01.KC0DWOOK = "Y"; /* initialize order ok flag*/
    KC0DW02.KC0DWTDX = KC0DW02.KC0DWTDX + 1; /* add to the index*/

    if (KC0DW02.KC0DWSEL[KC0DWTDX] == "X")
      KC0D710(); /* prepare order for update*/

      if (KC0DW01.KC0DWOOK == "Y")
        KC0DW01.KC0DWUOK = "Y"; /* updates ok flag*/
        KC0D250(); /* update database records*/
        if (KC0DW01.KC0DWUOK == "Y")
          KC0DW01.KC0DWRCN = KC0DW01.KC0DWRCN + 1;
          KC0DW01.KC0DWVAL = KC0DW01.KC0DWVAL + KC0DW01.KC0DWOOV;
          KC0DW02.KC0DWSEL[KC0DWTDX] = "R";
          KC0DW02.XCSCD[KC0DWTDX] = OP1REC.XCSCD;
        end
      end
    end
  end

  if ("M" in KC0DW02.KC0DWSEL
   || "X" in KC0DW02.KC0DWSEL)
    converseLib.validationFailed(28); /* not all order were updated due to db changes*/
    KC0DW01.KC0DWERR = "Y";
  end

  if (KC0DW01.KC0DWERR == "N")
    KC0DW01.KC0DWMSG = KC0DW01.KC0DWRMS;
    KC0DW01.KC0DWERR = "Y";
    converseLib.validationFailed(12); /* updates ok message*/
  else
    KC0DW01.KC0DWMSG = KC0DW01.KC0DWRMS;
  end

  KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* move previous to temp*/
  KC0DW01.KC0DWFFL = "Y"; /* set first time flag*/
  KC0D370(); /* update screen display*/



end // end KC0D700

// prepare order for update
Function KC0D710()

   /* ***************************************/
   /* this process prepares an order       **/
   /* for update after being marked        **/
   /* ***************************************/

  KC0DW01.KC0DWRIT = "Y"; /* need to read items for order flag*/
  KC0DW01.KC0DWALV = 0; /* allocated-value*/
  KC0DW01.KC0DWALQ = 0; /* allocated-qty*/
  KC0DW01.KC0DWOOV = 0; /* on-order-value*/
  KC0DW01.KC0DWOOQ = 0; /* on-order-qty*/

  OP1REC.OP1KEY = KC0DW02.OP1KEY[KC0DWTDX];
  KC0D210(); /* get order record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    KC0DW01.KC0DWOOK = "N"; /* order not ok*/
    converseLib.validationFailed(23); /* order not updated due to deadlocks*/
    return;
  end

  if (KC0DW01.KC0DWOOK == "Y") /* the order is ok to process*/
    KC0D350(); /* check order criteria*/

    if (KC0DW01.KC0DWOOK == "Y") /* the order is ok to process*/

      if (KC0DW01.KC0DWRIT == "Y") /* need to read the items*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0D230(); /* add-up items for an order*/
      end

      /* ********************************************/
       /* check the quantities on the order table*/
      /* ********************************************/

      KC0DW01.KC0DWCKA = OP1REC.OP1CKAMT;
      KC0DW02.KC0DWALV[KC0DWTDX] = KC0DW01.KC0DWALV;
      KC0DW02.KC0DWOIP[KC0DWTDX] = KC0DW01.KC0DWALV;

      if (KC0DW01.KC0DWOOV == KC0DW02.KC0DWOOV[KC0DWTDX])
        /* next sentence*/
      else
        KC0DW01.KC0DWOOK = "N";
        KC0DW02.KC0DWSEL[KC0DWTDX] = "M";
        KC0DW02.KC0DWOIP[KC0DWTDX] = KC0DW01.KC0DWCKA;
        KC0DW02.KC0DWOOV[KC0DWTDX] = KC0DW01.KC0DWOOV;
      end

    else
      KC0DW02.XOSCD[KC0DWTDX] = OP1REC.XOSCD;
      KC0DW02.XCSCD[KC0DWTDX] = OP1REC.XCSCD;
      KC0DW02.KC0DWSEL[KC0DWTDX] = "M";
    end
  end




end // end KC0D710

// get special label instruction
Function KC0D720()
   /* ***********************************************************/
   /* *  Kc0d720                                               **/
   /* *  this statement group is used to get special label     **/
   /* *  instructions for the view screen.                     **/
   /* *                                                        **/
   /* ***********************************************************/

  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = 1;

  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "DTEXT001"; /* table view*/
    TA1REC.TA1PGMNM = "KC0D   "; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0D720 "; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0470  "; /* i/o mod*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key*/
    XSCCS02();
  end
end // end KC0D720

// process page rolling
Function KC0D750()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/

  set KC0DM005.KC0DWCPG modified;

  if (KC0DW01.KC0DWCPG == KC0DM005.KC0DWCPG)
    if (KC0DW02.KC0DWCDX == KC0DW02.KC0DWBOT
     && KC0DW01.KC0DWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end

  if (KC0DM005.KC0DWCPG == 0
   || KC0DM005.KC0DWCPG > KC0DW01.KC0DWTPG)
    KC0DW01.KC0DWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0DM005.KC0DWCPG cursor, bold;
    return;
  end

  KC0DW01.KC0DWCPG = KC0DM005.KC0DWCPG; /* reset current page*/
  KC0DW02.KC0DWCDX = KC0DW01.KC0DWCPG * 13; /* reset current table index*/

  if (KC0DW02.KC0DWCDX > KC0DW02.KC0DWBOT)
    KC0DW02.KC0DWCDX = KC0DW02.KC0DWBOT;
  end

  KC0DW02.KC0DWPDX = KC0DW01.KC0DWCPG * 13;
  KC0DW02.KC0DWPDX = KC0DW02.KC0DWPDX - 13;

  KC0DW02.KC0DWTDX = KC0DW02.KC0DWPDX; /* prepare temp index*/

  KC0D370(); /* prepare the screen for display*/

end // end KC0D750

Record KC0DW01 type basicRecord
  5 KC0DWGRP KC0DWGRP ; 
    10 KC0DWVFL KC0DWVFL ; 
    10 KC0DWFLG KC0DWFLG ; 
    10 KC0DWEFL KC0DWEFL ; 
    10 KC0DWFFL KC0DWFFL ; 
    10 KC0DWEND KC0DWEND ; 
    10 KC0DWEOF KC0DWEOF ; 
    10 KC0DWOOK KC0DWOOK ; 
    10 KC0DWUOK KC0DWUOK ; 
    10 KC0DWRIT KC0DWRIT ; 
    10 KC0DWCPG KC0DWCPG ; 
    10 KC0DWTPG KC0DWTPG ; 
    10 KC0DWREM KC0DWREM ; 
    10 KC0DWCN1 KC0DWCN1 ; 
    10 KC0DWSTP KC0DWSTP ; 
    10 KC0DWSDX KC0DWSDX ; 
    10 KC0DWERR KC0DWERR ; 
    10 KUCCOID KUCCOID ; 
    10 KC0DWEOI KC0DWEOI ; 
    10 KC0DWCKA KC0DWCKA ; 
    10 KC0DWOOQ KC0DWOOQ ; 
    10 KC0DWOOV KC0DWOOV ; 
    10 KC0DWALQ KC0DWALQ ; 
    10 KC0DWALV KC0DWALV ; 
    10 KC0DWLIV KC0DWLIV ; 
    10 KC0DWXPO KC0DWXPO ; 
    10 KC0DWARB KC0DWARB ; 
    10 KC0DWINP KC0DWINP ; 
    10 KC0DWHDC KC0DWHDC ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 KC0DW-NEED-DATE-TO KC0DW-NEED-DATE-TO ; 
    10 KC0DWFCU KC0DWFCU ; 
      15 KC0DWCOI KC0DWCOI ; 
      15 KC0DWPR1 KC0DWPR1 ; 
      15 KC0DWSTO KC0DWSTO ; 
      15 KC0DWPR2 KC0DWPR2 ; 
      15 KC0DWXNX KC0DWXNX ; 
      15 KC0DWPR3 KC0DWPR3 ; 
      15 KC0DWGPC KC0DWGPC ; 
    10 KC0DWORD KC0DWORD ; 
      15 KC0DWCUO KC0DWCUO ; 
      15 KC0DWRID KC0DWRID ; 
    10 KC0DWFOR KC0DWFOR ; 
      15 KC0DWCOD KC0DWCOD ; 
        20 * char(7) ; 
        20 KC0DWPAR KC0DWPAR ; 
    10 KC0DWDT1 KC0DWDT1 ; 
      15 KC0DWMM1 KC0DWMM1 ; 
      15 KC0DWDD1 KC0DWDD1 ; 
      15 KC0DWYY1 KC0DWYY1 ; 
    10 KC0DWDT2 KC0DWDT2 ; 
      15 KC0DWMM2 KC0DWMM2 ; 
      15 KC0DWSL1 KC0DWSL1 ; 
      15 KC0DWDD2 KC0DWDD2 ; 
      15 KC0DWSL2 KC0DWSL2 ; 
      15 KC0DWYY2 KC0DWYY2 ; 
    10 KC0DWNAM KC0DWNAM ; 
      15 KC0DWFST KC0DWFST ; 
      15 KC0DWPER KC0DWPER ; 
      15 KC0DWLST KC0DWLST ; 
    10 KC0DWADD KC0DWADD ; 
      15 KC0DWCTY KC0DWCTY ; 
      15 KC0DWB1 KC0DWB1 ; 
      15 KC0DWST KC0DWST ; 
      15 KC0DWB2 KC0DWB2 ; 
      15 KC0DWZIP KC0DWZIP ; 
    10 KC0DWMSG KC0DWMSG ; 
    10 KC0DWEM2 KC0DWEM2 ; 
      15 KC0DWMF2 KC0DWMF2 ; 
      15 KC0DWCON KC0DWCON ; 
    10 KC0DWEM3 KC0DWEM3 ; 
      15 KC0DWMF3 KC0DWMF3 ; 
      15 KC0DWXCS KC0DWXCS ; 
    10 KC0DWMSS KC0DWMSS ; 
      15 KC0DWMS1 KC0DWMS1 ; 
      15 KC0DWORN KC0DWORN ; 
      15 KC0DWDOT KC0DWDOT ; 
      15 KC0DWNOR KC0DWNOR ; 
      15 KC0DWMS2 KC0DWMS2 ; 
      15 KC0DWCUN KC0DWCUN ; 
      15 KC0DWMS3 KC0DWMS3 ; 
      15 KC0DWVL1 KC0DWVL1 ; 
    10 KC0DWRMS KC0DWRMS ; 
      15 KC0DWRCN KC0DWRCN ; 
      15 KC0DWRF1 KC0DWRF1 ; 
      15 KC0DWVAL KC0DWVAL ; 
    10 KC0DWEM1 KC0DWEM1 ; 
      15 KC0DWMF1 KC0DWMF1 ; 
      15 XCCCD XCCCD ; 
    10 KC0DWOVM KC0DWOVM ; 
      15 KC0DWMS4 KC0DWMS4 ; 
      15 KC0DWMS5 KC0DWMS5 ; 
    10 KC0DWSUB KC0DWSUB ; 
    10 KC0DWTBE KC0DWTBE ; 
    10 KC0DWLGE KC0DWLGE ; 
    10 KC0DWFND KC0DWFND ; 
end // end KC0DW01

Record KC0DW02 type basicRecord
  5 KC0DWGR2 KC0DWGR2 ; 
    10 KC0DWCDX KC0DWCDX ; 
    10 KC0DWPDX KC0DWPDX ; 
    10 KC0DWTDX KC0DWTDX ; 
    10 KC0DWBOT KC0DWBOT ; 
    10 OP1KEY OP1KEY [100] ; 
    10 KC0DWTBL KC0DWTBL [100] ; 
      15 KC0DWSEL KC0DWSEL ; 
      15 KC0DWLIN KC0DWLIN ; 
        20 * char(1) ; 
        20 KC0DWORD KC0DWORD ; 
          25 KC0DWCUO KC0DWCUO ; 
          25 KC0DWRID KC0DWRID ; 
        20 * char(1) ; 
        20 XOTABRV XOTABRV ; 
        20 * char(1) ; 
        20 XOSCD XOSCD ; 
        20 * char(1) ; 
        20 KC0DWNDT KC0DWNDT ; 
          25 KC0DWMM1 KC0DWMM1 ; 
          25 KC0DWSL1 KC0DWSL1 ; 
          25 KC0DWDD1 KC0DWDD1 ; 
          25 KC0DWSL2 KC0DWSL2 ; 
          25 KC0DWYY1 KC0DWYY1 ; 
        20 * char(1) ; 
        20 XCSCD XCSCD ; 
        20 KC0DWRSN KC0DWRSN ; 
          25 KC0DWCD1 KC0DWCD1 ; 
          25 KC0DWDS1 KC0DWDS1 ; 
          25 KC0DWCD2 KC0DWCD2 ; 
          25 KC0DWDS2 KC0DWDS2 ; 
          25 KC0DWCD3 KC0DWCD3 ; 
        20 * char(1) ; 
        20 KC0DWOIP KC0DWOIP ; 
        20 * char(1) ; 
        20 KC0DWOOV KC0DWOOV ; 
        20 * char(1) ; 
        20 KC0DWALV KC0DWALV ; 
end // end KC0DW02

// op-cust-need-dt
DataItem KC0DW-NEED-DATE-TO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted city state
DataItem KC0DWADD char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws allocated qty
DataItem KC0DWALQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws allocated value
DataItem KC0DWALV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ar account balance
DataItem KC0DWARB num(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0DWB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0DWB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KC0DWBOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reason code 1
DataItem KC0DWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 2
DataItem KC0DWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 3
DataItem KC0DWCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current index
DataItem KC0DWCDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cr-ck-ord-amt
DataItem KC0DWCKA num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KC0DWCN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0DWCOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen company id
DataItem KC0DWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KC0DWCON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// page counter
DataItem KC0DWCPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// city
DataItem KC0DWCTY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem KC0DWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0DWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KC0DWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0DWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KC0DWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0DWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0DWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted need date
DataItem KC0DWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted need date
DataItem KC0DWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection error flag
DataItem KC0DWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company credit status err msg
DataItem KC0DWEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company nbr mismatch msg
DataItem KC0DWEM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status msg
DataItem KC0DWEM3 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of process
DataItem KC0DWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KC0DWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-items flag
DataItem KC0DWEOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0DWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted cust nbr
DataItem KC0DWFCU char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KC0DWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0DWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcu table found flag
DataItem KC0DWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formated order number
DataItem KC0DWFOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep first name
DataItem KC0DWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KC0DWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w02 group level
DataItem KC0DWGR2 char(9836)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0d working storage record
DataItem KC0DWGRP char(656)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order on hold counter
DataItem KC0DWHDC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws orders in process
DataItem KC0DWINP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// legal entity valid flag
DataItem KC0DWLGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen line
DataItem KC0DWLIN char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws line-item alloc value
DataItem KC0DWLIV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep last name
DataItem KC0DWLST char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message filler
DataItem KC0DWMF1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0DWMF2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0DWMF3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0DWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0DWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal one
DataItem KC0DWMS1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal two
DataItem KC0DWMS2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal three
DataItem KC0DWMS3 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal four
DataItem KC0DWMS4 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal five
DataItem KC0DWMS5 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KC0DWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- update message
DataItem KC0DWMSS char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KC0DWNAM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date formatted
DataItem KC0DWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub nike order number
DataItem KC0DWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order amount in process
DataItem KC0DWOIP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order ok to process
DataItem KC0DWOOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws on-order qty
DataItem KC0DWOOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws on-order value
DataItem KC0DWOOV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order number
DataItem KC0DWORD num(11,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem KC0DWORN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MSG- too many orders
DataItem KC0DWOVM char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order partition
DataItem KC0DWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem KC0DWPDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period
DataItem KC0DWPER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 1
DataItem KC0DWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 2
DataItem KC0DWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 3
DataItem KC0DWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of ords put in resell
DataItem KC0DWRCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reminder
DataItem KC0DWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KC0DWRF1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws nike sub-order number
DataItem KC0DWRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// read items
DataItem KC0DWRIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- released message
DataItem KC0DWRMS char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reasons
DataItem KC0DWRSN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem KC0DWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select options
DataItem KC0DWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0DWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0DWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state code
DataItem KC0DWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen store id
DataItem KC0DWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem KC0DWSTP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for xcu table reads
DataItem KC0DWSUB num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xcr table error flag
DataItem KC0DWTBE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders to release table
DataItem KC0DWTBL char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp     index
DataItem KC0DWTDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of pages
DataItem KC0DWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates ok
DataItem KC0DWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0DWVAL num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view single order flag
DataItem KC0DWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0DWVL1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order credit status
DataItem KC0DWXCS char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// screen dept
DataItem KC0DWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total exposure
DataItem KC0DWXPO num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0DWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0DWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem KC0DWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

