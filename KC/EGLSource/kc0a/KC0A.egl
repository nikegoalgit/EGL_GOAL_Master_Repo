package kc0a;

import as1.common.ARCREC;
import corpcom1.CCWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXCH01;
import corpcom3.XPXCS01;
import corpcom3.XPXX001;
import corpcom4.XSCCS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XAHCD;
import corpx1.XBCTBL;
import corpx1.XBDTBL;
import corpx1.XCCCD;
import corpx1.XCHTBL;
import corpx1.XCRTBL;
import corpx1.XCSCD;
import corpx1.XCSTBL;
import corpx1.XCUTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx2.XOSCD;
import corpx2.XOTABRV;
import corpx2.XOTCD;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUYREC;
import op.common.OP1CSADT;
import op.common.OP1CUNDT;
import op.common.OP1KEY;
import op.common.OP1REC;
import op.common.OP2REC;
import op.common.OP4REC;
import op.common.OP5REC;
import op.common.OPHREC;
import pk.common.PK1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA9REC;
import vv.common.VCRCHK01;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0A ****
// ;
// This application will allow the users to release a single
// order or multiple orders for a given customer or order
// number.
// If user requested to look a multiple orders, they will
// be displayed page by page and the user will have the
// option of releasing all, some or none of the orders on the
// screen.
// If user is looking at multiple orders, they have the option
// of viewing more information for all orders displayed.
// ;
// Maintenance Log:
//  3/31/89 - DSALZW - Made Credit Life changes, added ability
//                     to view orders, and general re-write of
//                     the application.
// ;
//  4/18/89 - DSALZW - added xssegtr logic
//  4/18/89 - DSALZW - added noncsp option to calls
// 11/22/89 - DSALZW - when release unchecked orders, allow
//                     used to go to second screen, if some
//                     selection criteria was entered
// 12/04/89 - DSALZW - bug: still allow single release of
//                     unchecked orders w/o selection criteria
// 01/23/90 - DSALZW - don't update orders until after an 'x'
//                     has been processed, ie message 40
// 01/25/90 - DSALZW - change xcc test to greater than 'm'
// 04/03/90 - DSALZW - db changes
// 04/19/90 - DSALZW - changed to use new ar databases
// 05/30/90 - DSALZW - changed to use SBNAR field
// 06/20/90 - CHAERT - added legal entity security
// 08/07/90 - jwood  - changed cc0am005,cc0a220,260,280,350,
//                     440,450 to use xcscd as character fld
// 08/30/90 - DSALZW - chgd cc0am010 to defined xot as char
// 09/27/90 - mkille - added pop up window for rtc reason cd
// 09/28/90 - wjohns - remove opttag logic
// 03/28/91 - wjohns - Add Terms and Brand tables, and call to
//                     IO0470 (for special label instructs)
//                     to put the new info on the view screen.
// 04/09/91 - wjohns - Changed message numbers to match changes
//                     to the cc message file after cleanup.
// 05/21/91 - wjohns - Allow users to view single order from
//                      first screen.
// 08/01/91 - wjohns - Rename the application from CC0a to
//                      KC0A for new CICS version.
// 08/09/91 - wjohns - Rename commarea references.
// 08/21/91 - jwood  - correctly rename all modules from cc0a
//                     to kc0a....
// 09/11/91 - wjohns - add new credit table and logic to fetch
//                     and update order in process and shipped/
//                     but not billed amounts on the new table
//                     instead of the a/r customer table.
// 10/01/91 - wjohns - regen  for database changes.
// 12/19/91 - wjohns - Allow processing of bulk orders if the
//                       credit check flag on the bulk table is
//                       set to "y".
// 02/28/92 - wjohns - Initialize TA2REC and TA9REC on start up
//                       to avoid bad date formatting when
//                       using these record areas.
// 09/30/92 - cancie - replace vragcy01 with new view vragcy02.
// 06/04/93 - cancie - Added need date range to map kc0am001.
//                     Added need "to" date kc0aw-need-date-to
//                     to kc0aw01.
//                     Convert "from" & "to" need dates, also
//                     date validation in kc0a120.
//                     Check if order is within need date range
//                     & need date edit in kc0a350.
// 12/14/93 - cancie - Increased map presentation of 'order no'
//                     in kc0am005 (from 10) to 11 spaces.
// 11/30/94 - CHELLM - Replaced xotcd with xotsabrv for select-
//                     ion criteria (map 1). Added Allocation
//                     Hold code to the detail (map 2).
// 04/25/95 - CHELLM - Added Initialize TA2REC before each call
//                     to TA0040.
// 07/07/95 - BCourt - Add init. VCRCHK01 record before read,
//                     zero all data if row not found.
// 05-19-98   oricha   y2k modifications:  kc0a120; set ta2rec
//                     empty.
// 09-21-99   ssank1   Changed map presentation of KC0AM001 ,
//                     KC0AM005 , KC0AM010 and increased the
//                     length of KC0AWRID & KC0AWORD in records
//                     KC0AW01 and KC0AW02 to accomodate 4
//                     digit nike ord id.
// *********************
Program KC0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  CCWREC CCWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0AW01 KC0AW01; // record
  KC0AW02 KC0AW02; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OPHREC OPHREC; // record
  PK1REC PK1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  VCRCHK01 VCRCHK01; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCRTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KC0AM.KC0AM001,  // forms
      KC0AM.KC0AM005, 
      KC0AM.KC0AM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0A000: KC0A000();
    goto KC0A100; /* go on to cc0a selection criteria screen*/
    KC0A100: KC0A100();
    ;
    goto KC0A100; /* order selection criteria*/
    ;
    ;
  end // end main
end // end KC0A

// initialization process
Function KC0A000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders released process                  **/
   /* *********************************************/
  ;
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KC0AW01 empty; /* working storage 1*/
  set KC0AW02 empty; /* working storage 2*/
  set CCWREC empty; /* cc working storage*/
  set SQLCA empty;
  set OP1REC empty; /* order header record*/
  set OP2REC empty; /* order item record*/
  set OP5REC empty; /* order address record*/
  set OPHREC empty; /* order picking record*/
  set KUCREC empty; /* company record*/
  set KULREC empty; /* store record*/
  set KUMREC empty; /* store address record*/
  set KUYREC empty; /* service rep record*/
  set ARCREC empty; /* a/r customer record*/
  set VCRCHK01 empty; /* credit record*/
  set PK1REC empty; /* picking record*/
  set VRAGCY02 empty; /* sales rep record*/
  set TA2REC empty; /* system date routine record*/
  set TA9REC empty; /* system work days routine record*/
  ;
  set KC0AM001 initial; /* order selection screen*/
  set KC0AM005 initial; /* order release screen*/
  set KC0AM010 initial; /* order inquiry screen*/
  ;
  KC0AW01.KC0AWMS1 = " ORDER# = ";
  KC0AW01.KC0AWMS2 = "   COMPANY# = ";
  KC0AW01.KC0AWMS3 = "   AMT_RLSED = ";
  ;
  ;
  KC0AW01.KC0AWRF1 = " ORDER(S) WHERE RELEASED WITH AN OIP VALUE OF  ";
  KC0AW01.KC0AWMS4 = " WARNING: OVER 400 ORDERS SELECTED,";
  KC0AW01.KC0AWMS5 = " ONLY FIRST 400 DISPLAYED";
  KC0AW01.KC0AWMF1 = " COMPANY CREDIT STATUS = ";
  KC0AW01.KC0AWMF2 = " COMPANY NUMBER ON ORDER = ";
  KC0AW01.KC0AWMF3 = " CREDIT STATUS OF ORDER = ";
  ;
  ;
end // end KC0A000

// order selection criteria
Function KC0A100()
   /* *******************************************/
   /* order selection screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* 5. process one order or                 **/
   /* 6. process a set of orders              **/
                                           /* **/
   /* *******************************************/
  ;
  KC0AW01.KC0AWERR = "N"; /* init error flag*/
  KC0AW01.KC0AWEFL = "N"; /* init selection error*/
  KC0AW01.KC0AWUOK = "Y"; /* updates ok flag*/
  KC0AM001.KC0AMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0AM001.KC0AMANM = "KC0A100"; /* set screen name*/
  KC0AW01.KC0AWFLG = "1"; /* selection criteria flag*/
  ;
  ;
  KC0AM001.KC0AWMSG = KC0AW01.KC0AWMSG;
  ;
  converse KC0AM001 ;
  ;
  KC0AW01.KC0AWMSG = " ";
  KC0AM001.KC0AWMSG = " ";
  ;
  ;
  KC0A110(); /* edit special keys/fast paths*/
  ;
  if (KC0AW01.KC0AWERR == "N") /* if no errors*/
    KC0A120(); /* edit screen input*/
  end
  ;
  ;
  if (KC0AW01.KC0AWERR == "N") /* if no errors*/
    if (KC0AW01.KC0AWFLG == "1")
      KC0A200(); /* process one order*/
      if (KC0AW01.KC0AWVFL == "Y") /* if view single order is yes*/
        KC0AW01.KC0AWVFL = "N";
      else
        if (KC0AW01.KC0AWEFL == "N") /* if no error on selection screen*/
          set KC0AM001 initial;
        end
      end
    else
      if (KC0AW01.KC0AWFLG == "2")
        KC0A300(); /* process a set of orders*/
        if (KC0AW01.KC0AWEFL == "N") /* if no error on selection*/
          set KC0AM001 initial;
        end
      else
        converseLib.validationFailed(1); /* invalid option message*/
      end
    end
  end
  ;
end // end KC0A100

// edit special keys
Function KC0A110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0A"; /* comming from appl*/
    XSEXIT();
    KC0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0AM001.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0AM001.CATOAP;
      COMMAREA.CAITEM = KC0AM001.CAITEM;
      COMMAREA.CAFROMAP = "KC0A";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0AW01.KC0AWERR = "Y";
      set KC0AM001.CATOAP cursor, bold;
    else
      set KC0AM001.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0AM001.CATOAP > " ")
      KC0AW01.KC0AWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0AM001.CATOAP cursor, bold;
      return;
    else
      set KC0AM001.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0A";
    XSPF1();
    KC0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0A";
    XSEXIT();
    KC0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0A";
    XSPF4();
    KC0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf6 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf6) /* view single order*/
    KC0AW01.KC0AWVFL = "Y";
    return;
  end
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0AW01.KC0AWERR = "Y";
end // end KC0A110

// edit order selection screen
Function KC0A120()
   /* **********************************************/
    /* edit the orders release selection criteria**/
    /* screen.                                   **/
    /* -- edits for clean input                  **/
    /* -- determines if one or more than one     **/
       /* order was selected for processing      **/
                                  /* **/
   /* **********************************************/
  ;
  ;
  set KC0AM001.KUCCOID cursor, initialAttributes;
  set KC0AM001.KUMSTRID initialAttributes;
  set KC0AM001.XNXCD initialAttributes;
  set KC0AM001.XGPCD initialAttributes;
  set KC0AM001.OP1CUOID initialAttributes;
  set KC0AM001.OP1NORID initialAttributes;
  set KC0AM001.KC0AMCDT initialAttributes;
  set KC0AM001.KC0AMNDT initialAttributes;
  set KC0AM001.KC0AM-ORDER-TYPE initialAttributes;
  set KC0AM001.XCSCD initialAttributes;
  ;
   /* ***************************************************/
   /* edit credit status code*/
   /* ***************************************************/
  ;
  if (KC0AM001.XCSCD != "  ") /* credit status entered*/
    if (KC0AM001.XCSCD in XCSTBL.XCSCD
     && KC0AM001.XCSCD != "99")
      if (KC0AM001.XCSCD == "00"
       || KC0AM001.XCSCD == "01"
       || KC0AM001.XCSCD == "10"
       || KC0AM001.XCSCD == "11"
       || KC0AM001.XCSCD == "12"
       || KC0AM001.XCSCD == "20"
       || KC0AM001.XCSCD == "30"
       || KC0AM001.XCSCD == "80")
        /* next sentence*/
      else
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(20); /* invalid credit status code*/
        set KC0AM001.XCSCD cursor, bold;
        return;
      end
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(20); /* invalid credit status code*/
      set KC0AM001.XCSCD cursor, bold;
      return;
    end
  end
  ;
   /* ***************************************************/
   /* edit order type code*/
   /* ***************************************************/
  ;
  if (KC0AM001.KC0AM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0AM001.KC0AM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0AM001.KC0AM-ORDER-TYPE != "99")
      KC0AW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0AM001.KC0AM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0AW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0AM001.KC0AM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end
  ;
   /* ***************************************************/
   /* edit "from" need date*/
   /* ***************************************************/
  ;
  if (KC0AM001.KC0AMNDT > " ")
    set TA2REC empty;
    TA2REC.TA2GRGA = KC0AM001.KC0AMNDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0AW01.OP1CUNDT = TA2REC.TA2GRGGN;
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0AM001.KC0AMNDT cursor, bold;
      return;
    end
  else
    KC0AW01.OP1CUNDT = 0;
  end
  ;
   /* ***************************************************/
   /* edit "to" need date*/
   /* ***************************************************/
  ;
   /* ------- y2k in begin -------*/
  set TA2REC empty;
   /* ------- y2k in end ---------*/
  if (KC0AM001.KC0AM-NEED-DATE-TO > " ")
    TA2REC.TA2GRGA = KC0AM001.KC0AM-NEED-DATE-TO;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0AW01.KC0AW-NEED-DATE-TO = TA2REC.TA2GRGGN;
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0AM001.KC0AM-NEED-DATE-TO cursor, bold;
      return;
    end
  else
    KC0AW01.KC0AW-NEED-DATE-TO = 0;
  end
  ;
   /* ***************************************************/
   /* "from" and "to" need date validation*/
   /* ***************************************************/
  ;
  if (KC0AW01.OP1CUNDT != 0)
    if (KC0AW01.KC0AW-NEED-DATE-TO != 0)
      if (KC0AW01.OP1CUNDT == KC0AW01.KC0AW-NEED-DATE-TO)
        /* next sentence ;*/
      else
        if (KC0AW01.OP1CUNDT < KC0AW01.KC0AW-NEED-DATE-TO)
         /* next sentence ;*/
        else
          KC0AW01.KC0AWERR = "Y"; /* set error flag*/
          KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(7); /* invalid date*/
          set KC0AM001.KC0AMNDT cursor, bold;
          set KC0AM001.KC0AM-NEED-DATE-TO cursor, bold;
          return;
        end
      end
    end
  end
  ;
   /* ***************************************************/
   /* edit credit check date*/
   /* ***************************************************/
  ;
  if (KC0AM001.KC0AMCDT > " ")
    set TA2REC empty;
    TA2REC.TA2GRGA = KC0AM001.KC0AMCDT;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0AW01.OP1CSADT = TA2REC.TA2GRGGN;
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0AM001.KC0AMCDT cursor, bold;
      return;
    end
  else
    KC0AW01.OP1CSADT = 0;
  end
  ;
   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/
  ;
  if (KC0AM001.KUCCOID > 0)
    KC0AW01.KUCCOID = KC0AM001.KUCCOID;
    KC0A130(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(18); /* invalid company; not on file*/
      set KC0AM001.KUCCOID cursor, bold;
      return;
    else
      if (KUCREC.XCCCD > "M ")
        KC0AW01.XCCCD = KUCREC.XCCCD;
        KC0AW01.KC0AWMSG = KC0AW01.KC0AWEM1;
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(19); /* invalid company credit status*/
        set KC0AM001.KUCCOID cursor, bold;
        return;
      end
      /* ********************************************/
       /* check credit resp security               **/
      /* ********************************************/
      KC0A140();
    end
  else
    if (KC0AM001.KUMSTRID > 0)
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(24); /* not allowed*/
      set KC0AM001.KUMSTRID cursor, bold;
      return;
    end
    if (KC0AM001.XNXCD > 0)
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* not allowed*/
      set KC0AM001.XNXCD cursor, bold;
      return;
    end
    if (KC0AM001.XGPCD > " ")
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(26); /* not allowed*/
      set KC0AM001.XGPCD cursor, bold;
      return;
    end
  end
  ;
   /* ********************************************/
   /* edit order number                        **/
   /* ********************************************/
  ;
  if (KC0AM001.OP1CUOID > 0 /* one order selection*/
   && KC0AM001.OP1NORID > 0)
    if (KC0AM001.KUCCOID > 0
     || KC0AW01.KC0AWVFL == "Y") /* view single order*/
      KC0AW01.KC0AWFLG = "1"; /* one order selected flag*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(22); /* customer number required*/
      set KC0AM001.KUCCOID cursor, bold;
      return;
    end
  else
    if (KC0AM001.OP1CUOID > 0
     || KC0AM001.KUCCOID > 0)
      KC0AW01.KC0AWFLG = "2"; /* a set of orders selected*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(5); /* must have at least one of this ones*/
      set KC0AM001.KUCCOID cursor, bold;
      return;
    end
  end
  ;
  ;
  ;
   /* ********************************************/
   /* edit for releasing unchecked orders      **/
   /* ********************************************/
  ;
  if (KC0AM001.XCSCD == "00")
    if (KC0AW01.KC0AWFLG == "1")
       /* next sentence*/
    else
      if (KC0AM001.OP1CUPO > " "
       || KC0AM001.KC0AMNDT > " ")
         /* next sentence*/
      else
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(20); /* invalid credit status code*/
        set KC0AM001.XCSCD cursor, bold;
        return;
      end
    end
  end
  ;
end // end KC0A120

// get company
Function KC0A130()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/
  ;
  ;
  KUCREC.KUCCOID = KC0AW01.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1LOCAT[2] = "KC0A130";
    TA1REC.TA1LOCAT[3] = "KC0A130";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0A130

// check security
Function KC0A140()
   /* **********************************************/
    /* checks users security for this company    **/
   /* **********************************************/
  ;
  KC0AWSUB = 1;
  KC0AWFND = "N";
  KC0AWTBE = " ";
  KC0AWLGE = " ";
  ;
   /* loop thru xcu table reading all records with the user id*/
  ;
  while (KC0AWFND == "N")
    if (COMMAREA.CAUSERID in XCUTBL.CAUSERID from KC0AWSUB)
      KC0AWSUB = sysVar.arrayIndex;
      ;
       /* find the xcr credit resp to match the xcu*/
      ;
      if (XCUTBL.XCRCD[KC0AWSUB] in XCRTBL.XCRCD)
        if (XCRTBL.XLECD[sysVar.arrayIndex] == KUCREC.XLECD)
           /* everything checks out, user has security*/
          ;
          KC0AWTBE = "N";
          KC0AWFND = "Y";
        else
          KC0AWLGE = "N";
        end
      else
        ;
         /* credit region invalid, read more users*/
        ;
        KC0AWTBE = "Y";
      end
    else
      ;
       /* legal entity not valid between co and user*/
      ;
      if (KC0AWLGE == "N")
        KC0AWFND = "Y";
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(46);
        if (KC0AM001.KUCCOID > 0) /* if user has entered a company*/
          set KC0AM001.KUCCOID cursor, bold;
        end
        ;
         /* user is not on xcu table*/
        ;
      else
        if (KC0AWTBE == " ")
          KC0AWTBE = "Y";
          KC0AWFND = "Y";
          KC0AW01.KC0AWERR = "Y"; /* set error flag*/
          KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(48);
        else
          ;
           /* cred resp not found on xcr table*/
          ;
          KC0AWFND = "Y";
          KC0AW01.KC0AWERR = "Y"; /* set error flag*/
          KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(46);
        end
      end
    end
    if (KC0AWFND == "N") /* no rec found*/
      KC0AWSUB = KC0AWSUB + 1; /* set up to read the next xcu*/
    end
  end
  ;
end // end KC0A140

// process one order
Function KC0A200()
   /* ***********************************************/
        /* release one order                      **/
   /* 1. selects order header record              **/
   /* 2. edit the order record                    **/
   /* 3. gets order item record                   **/
   /* 4. updates database records                 **/
                                               /* **/
   /* ***********************************************/
  ;
   /* ***********************************************/
    /* get order header record                    **/
   /* ***********************************************/
  ;
  KC0AW01.KC0AWCOD = KC0AM001.OP1CUOID;
  OP1REC.OP1CUOID = KC0AW01.KC0AWCOD;
  OP1REC.OP1PARTN = KC0AW01.KC0AWPAR;
  OP1REC.OP1NORID = KC0AM001.OP1NORID;
  ;
  KC0A210(); /* get order header record*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    set KC0AM001.OP1CUOID cursor, bold;
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(3); /* order not found*/
    set KC0AM001.OP1CUOID cursor, bold;
    set KC0AM001.OP1NORID bold;
    return;
  end
  ;
  KC0A220(); /* edit order record*/
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0AW01.KC0AWALV = 0; /* set allocated-value to zero*/
    KC0AW01.KC0AWALQ = 0; /* set allocated-qty to zero*/
    KC0AW01.KC0AWOOQ = 0; /* set on-order-qty to zero*/
    KC0AW01.KC0AWOOV = 0; /* set on-order-value to zero*/
    if (OP1REC.XOSCD == "OP"
     || OP1REC.XOSCD == "AL")
      if (OP1REC.XOSCD == "OP")
        KC0AW01.KC0AWOOV = OP1REC.OP1OVALU;
        KC0AW01.KC0AWOOQ = OP1REC.OP1OTUNT;
        KC0AW01.KC0AWALV = 0;
        KC0AW01.KC0AWALQ = 0;
      end
      if (OP1REC.XOSCD == "AL")
        KC0AW01.KC0AWOOV = OP1REC.OP1CKAMT;
        KC0AW01.KC0AWOOQ = OP1REC.OP1CCKOQ;
        KC0AW01.KC0AWALV = OP1REC.OP1CKAMT;
        KC0AW01.KC0AWALQ = OP1REC.OP1CCKOQ;
      end
    else
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0A230(); /* add up items for an order*/
      ;
    end
    ;
    if (KC0AW01.KC0AWVFL == "Y") /* VIEW SINGLE ORDER*/
      KC0A640(); /* FORMAT ORDER SCREEN*/
      KC0A610(); /* DISPLAY ORDER INFORMATION*/
    else
      KC0A250(); /* update databases*/
      ;
      if (KC0AW01.KC0AWERR == "N")
        KC0AW01.KC0AWNOR = OP1REC.OP1NORID;
        KC0AW01.KC0AWDOT = ".";
        KC0AW01.KC0AWORN = OP1REC.OP1CUOID;
        KC0AW01.KC0AWCUN = OP1REC.KUCCOID;
        KC0AW01.KC0AWVL1 = KC0AW01.KC0AWOOV;
        KC0AW01.KC0AWMSG = KC0AW01.KC0AWMSS;
        KC0AW01.KC0AWERR = "Y";
        converseLib.validationFailed(12); /* updates ok*/
      end
    end
  end
  ;
  ;
  ;
end // end KC0A200

// get order header record
Function KC0A210()
  ;
  ;
   /* ********************************************************/
   /* *   select one order header record*/
   /* ********************************************************/
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get one nike sub-order*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -911)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0A210";
    TA1REC.TA1LOCAT[4] = "IO0430";
  end
  ;
  ;
end // end KC0A210

// edit order record
Function KC0A220()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/
  ;
      /* edit bulk order code*/
  ;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "N")
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(21); /* bulk order msg*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/
  ;
  if (OP1REC.XOSCD == "IP"
   || OP1REC.XOSCD == "SH"
   || OP1REC.XOSCD == "XL")
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(16); /* invalid order status*/
    return;
  end
  ;
   /* ***********************************************/
      /* edit customer edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.KUCCOID == OP1REC.KUCCOID
   || KC0AW01.KC0AWVFL == "Y") /* viewing single order*/
    /* next sentence*/
  else
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
    KC0AW01.KC0AWCON = OP1REC.KUCCOID;
    KC0AW01.KC0AWMSG = KC0AW01.KC0AWEM2;
    converseLib.validationFailed(17); /* customer not the same*/
    set KC0AM001.KUCCOID cursor, bold;
    return;
  end
  ;
   /* ***********************************************/
      /* edit store number*/
   /* ***********************************************/
  ;
  if (KC0AM001.KUMSTRID > 0)
    if (KC0AM001.KUMSTRID == OP1REC.KUMSTRID)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(33); /* invalid order type*/
      set KC0AM001.KUMSTRID cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit department number*/
   /* ***********************************************/
  ;
  if (KC0AM001.XNXCD > 0)
    if (KC0AM001.XNXCD == OP1REC.XNXCD)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(37); /* invalid order type*/
      set KC0AM001.XNXCD cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit gpc code*/
   /* ***********************************************/
  ;
  if (KC0AM001.XGPCD > " ")
    if (KC0AM001.XGPCD == OP1REC.XGPCD)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(38); /* invalid order type*/
      set KC0AM001.XGPCD cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.XCSCD != "  ")
    if (KC0AM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0AW01.KC0AWXCS = OP1REC.XCSCD;
      KC0AW01.KC0AWMSG = KC0AW01.KC0AWEM3;
      set KC0AM001.XCSCD cursor, bold;
      return;
    end
  else
    if (OP1REC.XCSCD == "01"
     || OP1REC.XCSCD == "10"
     || OP1REC.XCSCD == "11"
     || OP1REC.XCSCD == "12"
     || OP1REC.XCSCD == "20"
     || OP1REC.XCSCD == "30")
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0AW01.KC0AWXCS = OP1REC.XCSCD;
      KC0AW01.KC0AWMSG = KC0AW01.KC0AWEM3;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.KC0AM-ORDER-TYPE > " ")
    if (KC0AW01.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      if (KC0AM001.KC0AM-ORDER-TYPE in XOTTBL.XOTSABRV)
        if (XOTTBL.XOTCD[sysVar.arrayIndex] == OP1REC.XOTCD)
          /* next sentence*/
        else
          KC0AW01.KC0AWERR = "Y"; /* set error flag*/
          KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(8); /* invalid order type*/
          set KC0AM001.KC0AM-ORDER-TYPE cursor, bold;
          return;
        end
      end
    end
  end
  ;
   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/
  ;
  if (KC0AW01.OP1CUNDT > 0)
    if (KC0AW01.OP1CUNDT == OP1REC.OP1CUNDT)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0AM001.KC0AMNDT cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/
  ;
  if (KC0AW01.OP1CSADT > 0)
    if (KC0AW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0AM001.KC0AMCDT cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.OP1CUPO > " ")
    if (KC0AM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(36); /* cust po numbers do not match*/
      set KC0AM001.OP1CUPO cursor, bold;
      return;
    end
  end
  ;
end // end KC0A220

// add up order items
Function KC0A230()
   /* *******************************************/
   /* add up order-quantities for each order  **/
   /* *******************************************/
  ;
  KC0AW01.KC0AWEOI = "N"; /* set end-of-items flag to "no"*/
  ;
   /* *************************************/
   /* open cursor                       **/
   /* *************************************/
  ;
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0A230";
    TA1REC.TA1LOCAT[3] = "KC0A230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02();
  end
  ;
   /* *************************************/
   /* select first record               **/
   /* *************************************/
  ;
  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get first line-item*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0A230";
    TA1REC.TA1LOCAT[3] = "GET 1ST";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end
  ;
   /* *************************************/
   /* process all items                 **/
   /* *************************************/
  ;
  while (KC0AW01.KC0AWEOI == "N") /* while not end-of-items*/
    KC0AW01.KC0AWALQ = KC0AW01.KC0AWALQ + OP2REC.OP2TALCQ;
    KC0AW01.KC0AWLIV = OP2REC.OP2TALCQ * OP2REC.OP2AUPRC;
    KC0AW01.KC0AWALV = KC0AW01.KC0AWALV + KC0AW01.KC0AWLIV;
    KC0AW01.KC0AWOOQ = KC0AW01.KC0AWOOQ + OP2REC.OP2TONOQ;
    KC0AW01.KC0AWLIV = OP2REC.OP2TONOQ * OP2REC.OP2AUPRC;
    KC0AW01.KC0AWOOV = KC0AW01.KC0AWOOV + KC0AW01.KC0AWLIV;
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get next line-item*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no more line-items*/
        KC0AW01.KC0AWEOI = "Y"; /* set end-of-items to "yes"*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        TA1REC.TA1LOCAT[2] = "KC0A230";
        TA1REC.TA1LOCAT[3] = "GET NXT";
        TA1REC.TA1LOCAT[4] = "IO0440";
        XSCCS02(); /* abort program*/
      end
    end
  end
  ;
   /* *************************************/
   /* close cursor                      **/
   /* *************************************/
  ;
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0A230";
    TA1REC.TA1LOCAT[3] = "KC0A230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end
  ;
  ;
  ;
end // end KC0A230

// update databases
Function KC0A250()
   /* ****************************************/
   /* this process updates the databases   **/
   /* related to releasing an order        **/
   /* ****************************************/
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE"; /* get current date for*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* update all records*/
  ;
  KC0A260(); /* update credit record*/
  ;
  if (KC0AW01.KC0AWUOK == "Y")
    PK1REC.PK1SBKEY = OP1REC.OP1KEY;
    OPHREC.OP1KEY = OP1REC.OP1KEY;
    PK1REC.PK1ALLNB = OP1REC.OP1NTMAL;
    OPHREC.OP1NTMAL = OP1REC.OP1NTMAL;
    OPHREC.XWHCD = OP1REC.XWHCD;
    KC0A270(); /* update the picking record*/
    ;
    if (KC0AW01.KC0AWUOK == "Y")
      KC0A280(); /* update the order record*/
      ;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset changes*/
    end
    ;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset changes*/
  end
  ;
  ;
  ;
  ;
end // end KC0A250

// update credit table
Function KC0A260()
  ;
   /* ************************************************************/
   /* *update credit orders-in-process and #-ords-on-hold*/
   /* ************************************************************/
  ;
  KC0A290(); /* get credit record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    VCRCHK01.ARCORPRO = VCRCHK01.ARCORPRO - OP1REC.OP1CKAMT;
    VCRCHK01.ARCORPRO = VCRCHK01.ARCORPRO + KC0AW01.KC0AWOOV;
    ;
    VCRCHK01.ZZZCHGDT = TA2REC.TA2GRGGN;
    VCRCHK01.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    if (OP1REC.XCSCD == "20" /* if on credit hold*/
     || OP1REC.XCSCD == "30") /* if on credit hold*/
      VCRCHK01.ARCORHLD = VCRCHK01.ARCORHLD - 1;
    end
    ;
    call "IO6010" ("U ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        KC0AW01.KC0AWUOK = "N"; /* update ok flag*/
        KC0AW01.KC0AWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(23); /* deadlock problem*/
      else
        TA1REC.TA1DBASE = "DACRCV";
        TA1REC.TA1TBLVU = "VCRCHK01";
        TA1REC.TA1LOCAT[2] = "KC0A260";
        TA1REC.TA1LOCAT[3] = "KC0A260";
        TA1REC.TA1LOCAT[4] = "IO6010";
        XSCCS02(); /* abort*/
      end
    end
    ;
  else
    TA1REC.TA1DBASE = "DACRCV";
    TA1REC.TA1TBLVU = "VCRCHK01";
    TA1REC.TA1LOCAT[2] = "KC0A260";
    TA1REC.TA1LOCAT[3] = "KC0A260";
    TA1REC.TA1LOCAT[4] = "IO6010";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0A260

// get ar record
Function KC0A265()
   /* ********************************************************/
   /* *   get accounts receivable record*/
   /* ********************************************************/
  ;
  ;
  ARCREC.KUCCOID = KC0AW01.KUCCOID;
  ;
  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0AW01.KC0AWMSG = " WARNING: NO A/R INFORMATION FOR THIS CUSTOMER";
      ARCREC.ARABAL = 0;
      ARCREC.ARAICRMO = 0;
      ARCREC.ARADSITM = 0;
      ARCREC.ARAUDDUC = 0;
      ARCREC.ARCORPRO = 0;
      ARCREC.ARCORHLD = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VARCUS01";
      TA1REC.TA1LOCAT[2] = "KC0A380";
      TA1REC.TA1LOCAT[3] = "KC0A380";
      TA1REC.TA1LOCAT[4] = "IO4160";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0A265

// update picking
Function KC0A270()
   /* ********************************************************/
   /* *   update pick transaction records*/
   /* ********************************************************/
  ;
  ;
  PK1REC.PK1HLDCD = " ";
  PK1REC.PK1DALDT = 0;
  PK1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  call "IO0910" ("SU", SQLCA, PK1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      KC0AW01.KC0AWUOK = "N"; /* UPDATE OK FLAG*/
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(23); /* deadlock problem*/
      return;
    else
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VPKTRN01";
      TA1REC.TA1LOCAT[2] = "KC0A270";
      TA1REC.TA1LOCAT[3] = "KC0A270";
      TA1REC.TA1LOCAT[4] = "IO0910";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  OPHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OPHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OPHREC.PK1HLDCD = " ";
  OPHREC.PK1DALDT = 0;
  ;
  call "IO1650" ("SU", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      KC0AW01.KC0AWUOK = "N"; /* update ok flag*/
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(23); /* deadlock problem*/
      return;
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKH01";
      TA1REC.TA1LOCAT[2] = "KC0A270";
      TA1REC.TA1LOCAT[3] = "KC0A270";
      TA1REC.TA1LOCAT[4] = "IO1650";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
end // end KC0A270

// update order
Function KC0A280()
   /* *********************************************************/
   /* *  update order header record                          **/
   /* *********************************************************/
  ;
   /* ----- previous credit information --------*/
  OP1REC.OP1PCSCD = OP1REC.XCSCD;
  OP1REC.OP1PCSDT = OP1REC.OP1CSADT;
  OP1REC.OP1PCSTM = OP1REC.OP1CSATM;
  ;
   /* ----- current date and time --------------*/
  OP1REC.OP1CSADT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.OP1CSATM = TA2REC.TA2TIMHM;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
   /* ----- number of days on hold -------------*/
  if (OP1REC.OP1CSADT > 0)
    set TA9REC empty;
    TA9REC.TA9ENDDT = OP1REC.OP1CSADT;
    TA9REC.TA9BEGDT = OP1REC.OP1PCSDT;
    TA9REC.TA9OFSET = 0;
    call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    OP1REC.OP1DCHLD = TA9REC.TA9DTDIF;
  else
    OP1REC.OP1DCHLD = 0;
  end
  ;
   /* ------------- user id ------------------*/
  if (COMMAREA.CAUSERID in XCUTBL.CAUSERID)
    OP1REC.OP1CRLMR = XCUTBL.XCUCD[sysVar.arrayIndex]; /* last maint rep*/
  else
    OP1REC.OP1CRLMR = COMMAREA.CAUSERID;
  end
  ;
   /* ------------- pgm id ------------------*/
  OP1REC.OP1CRLMP = "KC0A"; /* last maint program*/
  ;
  ;
   /* -------- credit status ----------------*/
  if (OP1REC.XCSCD == "20" /* or order is on hold*/
   || OP1REC.XCSCD == "30" /* or order is recheck failed*/
   || OP1REC.XCSCD == "80") /* or order is in resell*/
    OP1REC.XCSCD = "90"; /* set cr-stat to relsd-was-on-hold*/
  else
    OP1REC.XCSCD = "91"; /* set cr-stat to relsd-was-rtcd*/
  end
  ;
  ;
   /* -------- credit amt & qty -------------*/
  OP1REC.OP1CKAMT = KC0AW01.KC0AWOOV;
  OP1REC.OP1CCKOQ = KC0AW01.KC0AWOOQ;
  ;
  ;
  ;
   /* ********************************************************/
   /* *      update the order header record*/
   /* ********************************************************/
  ;
  SQLCA.VAGen_SQLCODE = 0;
  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* update order header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0AW01.KC0AWUOK = "N"; /* update ok flag*/
      KC0AW01.KC0AWERR = "Y"; /* set error-flag*/
      converseLib.validationFailed(3); /* order not found*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[2] = "KC0A280";
      TA1REC.TA1LOCAT[3] = "KC0A280";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KC0A280

// get credit record
Function KC0A290()
   /* ********************************************************/
   /* *   get credit record*/
   /* 7-07-95 BCourt set record empty. Zero arcsbnar.*/
   /* ********************************************************/
  set VCRCHK01 empty;
  ;
  VCRCHK01.KUCCOID = KC0AW01.KUCCOID;
  ;
  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0AW01.KC0AWMSG = " WARNING: NO CREDIT INFO FOR THIS CUSTOMER";
      VCRCHK01.ARCORPRO = 0;
      VCRCHK01.ARCORHLD = 0;
      VCRCHK01.ARCSBNAR = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCRCHK01";
      TA1REC.TA1LOCAT[2] = "KC0A290";
      TA1REC.TA1LOCAT[3] = "KC0A290";
      TA1REC.TA1LOCAT[4] = "IO6010";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0A290

// process a set of orders
Function KC0A300()
   /* **********************************************/
   /* * this process will drive the releasing of  **/
   /* * of a set of orders                        **/
   /* * it will:                                  **/
   /* *   1. select all orders for a customer     **/
   /* *   2. prepare the screen for display       **/
   /* *   3. check special keys pressed           **/
   /* *   4. edit screen input                    **/
   /* **********************************************/
  ;
  KC0AW01.KC0AWEND = "N"; /* end-of-release-process*/
  KC0AW01.KC0AWMSG = " ";
  ;
  KC0A310(); /* get all orders*/
  ;
  KC0AW02.KC0AWTDX = 0; /* init temp table index*/
  KC0AW02.KC0AWCDX = 0; /* init current table index*/
  KC0AW02.KC0AWPDX = 0; /* init previoustable index*/
  KC0AW01.KC0AWSDX = 0; /* init current screen index*/
  KC0AW01.KC0AWCPG = 1; /* current page*/
  ;
  if (KC0AW01.KC0AWERR == "N") /* no errors*/
    KC0AW01.KC0AWFFL = "Y"; /* set first time flag*/
    KC0A370(); /* prepare first screen*/
    KC0AW02.KC0AWCDX = KC0AW02.KC0AWTDX; /* current table index*/
    ;
    while (KC0AW01.KC0AWEND == "N")
      KC0A400(); /* process all orders selected*/
    end
    ;
  end
end // end KC0A300

// select all orders
Function KC0A310()
  ;
  ;
  KC0A320(); /* declare cursor*/
  ;
  if (KC0AW01.KC0AWERR == "N") /* no errors*/
    ;
    /* *****************************************/
     /* read first order*/
    /* *****************************************/
    ;
    KC0AW01.KC0AWEOF = "N"; /* reading orders flag*/
    KC0A330(); /* get first order*/
    if (KC0AW01.KC0AWEOF == "Y")
      KC0A340(); /* close order cursor*/
      KC0AW01.KC0AWERR = "Y";
      KC0AW01.KC0AWEFL = "Y";
      converseLib.validationFailed(27); /* no orders for this select*/
      return;
    end
    ;
  else
    return;
  end
  ;
   /* *****************************************/
   /* * if customer not entered on selection **/
   /* * screen, assign order customer        **/
   /* *****************************************/
  ;
  if (KC0AM001.KUCCOID > 0)
    if (KC0AM001.KUCCOID == OP1REC.KUCCOID)
      /* next sentence*/
    else
      KC0AW01.KC0AWERR = "Y"; /* set error flag*/
      KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
      KC0AW01.KC0AWCON = OP1REC.KUCCOID;
      KC0AW01.KC0AWMSG = KC0AW01.KC0AWEM2;
      converseLib.validationFailed(17); /* customer not the same*/
      set KC0AM001.KUCCOID cursor, bold;
      return;
    end
  else
    KC0AW01.KUCCOID = OP1REC.KUCCOID; /* set customer nbr*/
    KC0A130(); /* get the company record*/
    KC0A140(); /* edit the legal entity security*/
    if (KC0AW01.KC0AWERR == "Y")
      set KC0AM001.OP1CUOID cursor;
      return;
    end
  end
  ;
  ;
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  set KC0AW02 empty; /* empty ws-table*/
  ;
  KC0AW01.KC0AWCN1 = 0; /* order count*/
  ;
  while (KC0AW01.KC0AWEOF == "N" /* while there are orders to process*/
   && KC0AW01.KC0AWCN1 < 400) /* array is full*/
    ;
    KC0AW01.KC0AWOOK = "Y"; /* order ok to process  flag*/
    KC0AW01.KC0AWRIT = "Y"; /* need to read items for order flag*/
    KC0AW01.KC0AWALV = 0; /* allocated-value*/
    KC0AW01.KC0AWALQ = 0; /* allocated-qty*/
    KC0AW01.KC0AWOOV = 0; /* on-order-value*/
    KC0AW01.KC0AWOOQ = 0; /* on-order-qty*/
    ;
    KC0A350(); /* check order criteria*/
    ;
    if (KC0AW01.KC0AWOOK == "Y")
      KC0AW01.KC0AWCN1 = KC0AW01.KC0AWCN1 + 1; /* add 1 to total orders*/
      ;
      if (KC0AW01.KC0AWRIT == "Y") /* if need to read items for order*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0A230(); /* add-up items for an order*/
      end
      ;
      KC0A360(); /* load ws-table of orders*/
    end
    KC0A330(); /* get next order*/
    ;
  end
  ;
  KC0A340(); /* close order cursor*/
  ;
  KC0AW02.KC0AWBOT = KC0AW02.KC0AWCDX; /* bottom of ws-talble*/
  ;
  KC0AW01.KC0AWTPG = KC0AW02.KC0AWBOT / 13;
  ;
  KC0AW01.KC0AWREM = KC0AW02.KC0AWBOT % 13;
  ;
  if (KC0AW01.KC0AWREM > 0)
    KC0AW01.KC0AWTPG = KC0AW01.KC0AWTPG + 1;
  end
  ;
  ;
  if (KC0AW01.KC0AWCN1 == 400) /* array is full*/
    KC0AW01.KC0AWMSG = KC0AW01.KC0AWOVM; /* set message*/
  end
  ;
  if (KC0AW01.KC0AWCN1 == 0)
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    KC0AW01.KC0AWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(29); /* orders do not match the release criteria*/
  end
  ;
  ;
  ;
end // end KC0A310

// declare order select cursor
Function KC0A320()
  ;
   /* *****************************************/
   /* * all orders selected will be read into**/
   /* * a working storage table              **/
   /* *****************************************/
  ;
  set SQLCA empty;
  ;
  if (KC0AM001.OP1CUOID > 0
   && KC0AM001.OP1NORID == 0)
    KC0AW01.KC0AWCOD = KC0AM001.OP1CUOID;
    OP1REC.OP1CUOID = KC0AW01.KC0AWCOD;
    OP1REC.OP1PARTN = KC0AW01.KC0AWPAR;
    OP1REC.OP1NORID = -1;
    call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ordsfor cus ord*/
  else
    OP1REC.KUCCOID = KC0AM001.KUCCOID;
    if (KC0AM001.KUMSTRID > 0)
      OP1REC.KUMSTRID = KC0AM001.KUMSTRID;
    else
      OP1REC.KUMSTRID = -1;
    end
    if (KC0AM001.XNXCD > 0)
      OP1REC.XNXCD = KC0AM001.XNXCD;
    else
      OP1REC.XNXCD = -1;
    end
    if (KC0AM001.XGPCD > " ")
      OP1REC.XGPCD = KC0AM001.XGPCD;
    else
      OP1REC.XGPCD = " ";
    end
    ;
    call "IO0430" ("S2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get all ords for cust*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0A320";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0A320

// get order "select" record
Function KC0A330()
   /* ********************************************************/
   /* *   get the next order header record*/
   /* ********************************************************/
  ;
  ;
  if (KC0AM001.OP1CUOID > 0
   && KC0AM001.OP1NORID == 0)
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  else
    call "IO0430" ("2N", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0AW01.KC0AWEOF = "Y"; /* set end-of-file flag to 'yes'*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0A330";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0A330

// close cursors
Function KC0A340()
  ;
   /* *****************************************/
   /* * close cursors*/
   /* *****************************************/
  ;
  ;
  if (KC0AM001.OP1CUOID > 0
   && KC0AM001.OP1NORID == 0)
    call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ordsfor cus ord*/
  else
    call "IO0430" ("C2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for customer*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0A340";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0A340

// edit order selected from set
Function KC0A350()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/
  ;
   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/
  ;
  if (KC0AW01.OP1CUNDT > 0)
    if (KC0AW01.KC0AW-NEED-DATE-TO == 0)
      if (KC0AW01.OP1CUNDT == OP1REC.OP1CUNDT)
        /* next sentence*/
      else
        KC0AW01.KC0AWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end
  ;
   /* ***********************************************/
      /* check if within need date range*/
   /* ***********************************************/
  ;
  if (KC0AM001.KC0AMNDT != " ")
    if (KC0AM001.KC0AM-NEED-DATE-TO != " ")
      if (OP1REC.OP1CUNDT >= KC0AW01.OP1CUNDT)
        if (OP1REC.OP1CUNDT <= KC0AW01.KC0AW-NEED-DATE-TO)
         /* next sentence   ;                   order is ok*/
        else
          KC0AW01.KC0AWOOK = "N"; /* do not process order*/
          return;
        end
      else
        KC0AW01.KC0AWOOK = "N"; /* do not process order*/
        return;
      end
    end
  end
  ;
   /* ***********************************************/
      /* edit bulk order code*/
   /* ***********************************************/
  ;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "Y")
      /* next sentence   ; order ok*/
    else
      KC0AW01.KC0AWOOK = "N"; /* do not process order*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/
  ;
  if (OP1REC.XOSCD == "IP"
   || OP1REC.XOSCD == "SH"
   || OP1REC.XOSCD == "XL")
    KC0AW01.KC0AWOOK = "N"; /* order not needed*/
    return;
  end
  ;
  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "AL")
    KC0AW01.KC0AWRIT = "N"; /* do not need to read item records*/
    if (OP1REC.XOSCD == "OP")
      KC0AW01.KC0AWOOV = OP1REC.OP1OVALU;
      KC0AW01.KC0AWOOQ = OP1REC.OP1OTUNT;
      KC0AW01.KC0AWALV = 0;
      KC0AW01.KC0AWALQ = 0;
    end
    if (OP1REC.XOSCD == "AL")
      KC0AW01.KC0AWOOV = OP1REC.OP1CKAMT;
      KC0AW01.KC0AWOOQ = OP1REC.OP1CCKOQ;
      KC0AW01.KC0AWALV = OP1REC.OP1CKAMT;
      KC0AW01.KC0AWALQ = OP1REC.OP1CCKOQ;
    end
  else
    KC0AW01.KC0AWRIT = "Y"; /* do need to read item records*/
  end
  ;
  ;
   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.XCSCD != "  ")
    if (KC0AM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0AW01.KC0AWOOK = "N"; /* order not needed*/
      return;
    end
  else
    if (OP1REC.XCSCD == "01"
     || OP1REC.XCSCD == "10"
     || OP1REC.XCSCD == "11"
     || OP1REC.XCSCD == "12"
     || OP1REC.XCSCD == "20"
     || OP1REC.XCSCD == "30")
      /* next sentence*/
    else
      KC0AW01.KC0AWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.KC0AM-ORDER-TYPE > " ")
    if (KC0AW01.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0AW01.KC0AWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/
  ;
   /* IF KC0AW01.OP1CUNDT GT 0;*/
    /* IF KC0AW01.OP1CUNDT EQ OP1REC.OP1CUNDT;*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'N' TO KC0AW01.KC0AWOOK;/* order not needed*/
      /* EZERTN;*/
    /* END;*/
   /* END;*/
  ;
   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/
  ;
  if (KC0AW01.OP1CSADT > 0)
    if (KC0AW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0AW01.KC0AWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/
  ;
  if (KC0AM001.OP1CUPO > " ")
    if (KC0AM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0AW01.KC0AWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
  ;
  ;
end // end KC0A350

// load ws-table
Function KC0A360()
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  KC0AW02.KC0AWCDX = KC0AW02.KC0AWCDX + 1; /* add 1 to index table*/
  ;
  KC0AW02.KC0AWSEL[KC0AWCDX] = " ";
  ;
   /* ***************************************/
    /* prepare order number*/
   /* ***************************************/
  ;
  KC0AW02.OP1KEY[KC0AWCDX] = OP1REC.OP1KEY;
  KC0AW02.KC0AWCUO[KC0AWCDX] = OP1REC.OP1CUOID;
  KC0AW02.KC0AWRID[KC0AWCDX] = OP1REC.OP1NORID;
  ;
   /* ***************************************/
     /* prepare need date*/
   /* ***************************************/
  ;
  set TA2REC empty;
  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  KC0AW01.KC0AWDT1 = TA2REC.TA2GRGA;
  ;
  KC0AW02.KC0AWMM1[KC0AWCDX] = KC0AW01.KC0AWMM1;
  KC0AW02.KC0AWDD1[KC0AWCDX] = KC0AW01.KC0AWDD1;
  KC0AW02.KC0AWYY1[KC0AWCDX] = KC0AW01.KC0AWYY1;
  KC0AW02.KC0AWSL1[KC0AWCDX] = "/";
  KC0AW02.KC0AWSL2[KC0AWCDX] = "/";
  ;
   /* ***************************************/
    /* prepare order type abreviation*/
    /* prepare order status*/
    /* prepare credit status*/
   /* ***************************************/
  ;
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0AW02.XOTABRV[KC0AWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0AW02.XOTABRV[KC0AWCDX] = "N FND";
  end
  ;
  KC0AW02.XOSCD[KC0AWCDX] = OP1REC.XOSCD; /* order status*/
  ;
  KC0AW02.XAHCD[KC0AWCDX] = OP1REC.XAHCD; /* allocation hold*/
  ;
  KC0AW02.XCSCD[KC0AWCDX] = OP1REC.XCSCD; /* credit status*/
  ;
   /* ***************************************/
   /* prepare credit reasons*/
   /* ***************************************/
  ;
  KC0AW02.KC0AWCD1[KC0AWCDX] = OP1REC.XCHCD[1];
  KC0AW02.KC0AWCD2[KC0AWCDX] = OP1REC.XCHCD[2];
  KC0AW02.KC0AWCD3[KC0AWCDX] = OP1REC.XCHCD[3];
  KC0AW02.KC0AWDS1[KC0AWCDX] = "-";
  KC0AW02.KC0AWDS2[KC0AWCDX] = "-";
  ;
   /* ***************************************/
   /* prepare order quantites*/
   /* ***************************************/
  ;
  KC0AW01.KC0AWCKA = OP1REC.OP1CKAMT;
  KC0AW02.KC0AWOIP[KC0AWCDX] = KC0AW01.KC0AWCKA;
  KC0AW02.KC0AWOOV[KC0AWCDX] = KC0AW01.KC0AWOOV;
  KC0AW02.KC0AWALV[KC0AWCDX] = KC0AW01.KC0AWALV;
  ;
  ;
  ;
end // end KC0A360

// prepare first screen
Function KC0A370()
   /* *********************************************/
   /* *  prepare the first screen to be displayed**/
   /* *********************************************/
  ;
  KC0A130(); /* get kucrec company record*/
  KC0A265(); /* get arcrec ar record*/
  KC0A290(); /* get vcrchk01 credit record*/
  ;
  set KC0AM005 initial; /* reset screen*/
  ;
   /* ******************************/
   /* load A/R data into screen*/
   /* ******************************/
  ;
  KC0AM005.KC0AMDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0AM005.KC0AMANM = "KC0A370"; /* converse name*/
  ;
  ;
  KC0AW01.KC0AWFCU = "******************"; /* full cust number*/
  KC0AW01.KC0AWPR1 = ".";
  KC0AW01.KC0AWPR2 = ".";
  KC0AW01.KC0AWPR3 = ".";
  ;
  KC0AW01.KC0AWCOI = KC0AW01.KUCCOID; /* move company number*/
  ;
  if (KC0AM001.KUMSTRID > 0) /* move store*/
    KC0AW01.KC0AWSTO = KC0AM001.KUMSTRID;
  end
  ;
  if (KC0AM001.XNXCD > 0) /* move department*/
    KC0AW01.KC0AWXNX = KC0AM001.XNXCD;
  end
  ;
  if (KC0AM001.XGPCD > " ") /* move gpc code*/
    KC0AW01.KC0AWGPC = KC0AM001.XGPCD;
  end
  ;
  KC0AM005.KC0AWFCU = KC0AW01.KC0AWFCU; /* customer number*/
  ;
  KC0AM005.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  KC0AM005.KUCCRLIN = KUCREC.KUCCRLIN; /* credit line*/
  ;
  if (KC0AW01.KC0AWFFL == "Y")
    KC0AW01.KC0AWFFL = " "; /* unset first time flag*/
    KC0AM005.KC0AWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0AM005.KC0AWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
    KC0AW01.KC0AWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0AW01.KC0AWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
  else
    KC0AM005.KC0AWINP = KC0AW01.KC0AWINP; /* orders in process*/
    KC0AM005.KC0AWHDC = KC0AW01.KC0AWHDC; /* orders on hold*/
  end
  ;
  ;
  KC0AW01.KC0AWARB = 0;
  ;
  KC0AW01.KC0AWARB = ARCREC.ARABAL - ARCREC.ARAICRMO - ARCREC.ARADSITM;
  KC0AW01.KC0AWARB = KC0AW01.KC0AWARB - ARCREC.ARAUDDUC;
  KC0AM005.ARABAL = KC0AW01.KC0AWARB;
  KC0AM005.ARCSBNAR = VCRCHK01.ARCSBNAR; /* move SBNAR amt*/
  KC0AM005.KC0AWCN1 = KC0AW01.KC0AWCN1; /* nbr of orders selected*/
  KC0AM005.KC0AWXPO = KC0AW01.KC0AWARB + KC0AM005.KC0AWINP;
                                   /* calc exposure*/
  KC0AM005.KC0AWXPO = KC0AM005.KC0AWXPO + KC0AM005.ARCSBNAR;
                                   /* expo + SBNAR*/
  ;
  KC0AM005.KC0AWCPG = KC0AW01.KC0AWCPG; /* set current page*/
  KC0AM005.KC0AWTPG = KC0AW01.KC0AWTPG; /* set total page*/
  ;
  ;
  KC0AW01.KC0AWSTP = 0; /* init screen top*/
  ;
  while (KC0AW01.KC0AWSTP < 13
   && KC0AW02.KC0AWTDX < KC0AW02.KC0AWBOT)
    KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP + 1;
    KC0AW02.KC0AWTDX = KC0AW02.KC0AWTDX + 1;
    if (KC0AW02.KC0AWSEL[KC0AWTDX] == "R")
      set KC0AM005.KC0AMSEL[KC0AWSTP] skip, bold;
      set KC0AM005.KC0AWOOV[KC0AWSTP] skip, bold;
    end
    if (KC0AW02.KC0AWSEL[KC0AWTDX] == "M")
      set KC0AM005.KC0AMORD[KC0AWSTP] skip, bold;
      KC0AM005.KC0AMSEL[KC0AWSTP] = " ";
    else
      KC0AM005.KC0AMSEL[KC0AWSTP] = KC0AW02.KC0AWSEL[KC0AWTDX];
    end
    KC0AM005.KC0AMORD[KC0AWSTP] = KC0AW02.KC0AWORD[KC0AWTDX];
    KC0AM005.XOTABRV[KC0AWSTP] = KC0AW02.XOTABRV[KC0AWTDX];
    KC0AM005.XOSCD[KC0AWSTP] = KC0AW02.XOSCD[KC0AWTDX];
    KC0AM005.XCSCD[KC0AWSTP] = KC0AW02.XCSCD[KC0AWTDX];
    KC0AM005.XAHCD[KC0AWSTP] = KC0AW02.XAHCD[KC0AWTDX];
    KC0AM005.KC0AWNDT[KC0AWSTP] = KC0AW02.KC0AWNDT[KC0AWTDX];
    KC0AM005.KC0AWRSN[KC0AWSTP] = KC0AW02.KC0AWRSN[KC0AWTDX];
    KC0AM005.KC0AWOIP[KC0AWSTP] = KC0AW02.KC0AWOIP[KC0AWTDX];
    KC0AM005.KC0AWOOV[KC0AWSTP] = KC0AW02.KC0AWOOV[KC0AWTDX];
    KC0AM005.KC0AWALV[KC0AWSTP] = KC0AW02.KC0AWALV[KC0AWTDX];
  end
  ;
  KC0AW01.KC0AWSDX = KC0AW01.KC0AWSTP; /* current screen index*/
  if (KC0AW02.KC0AWTDX == KC0AW02.KC0AWBOT
   && KC0AW01.KC0AWERR == "N")
    converseLib.validationFailed(4); /* last record display*/
  end
  ;
  while (KC0AW01.KC0AWSTP < 13)
    KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP + 1;
    set KC0AM005.KC0AMSEL[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AMORD[KC0AWSTP] skip, invisible;
    set KC0AM005.XOTABRV[KC0AWSTP] skip, invisible;
    set KC0AM005.XOSCD[KC0AWSTP] skip, invisible;
    set KC0AM005.XCSCD[KC0AWSTP] skip, invisible;
    set KC0AM005.XAHCD[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AWNDT[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AWRSN[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AWOIP[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AWOOV[KC0AWSTP] skip, invisible;
    set KC0AM005.KC0AWALV[KC0AWSTP] skip, invisible;
  end
  ;
end // end KC0A370

// process all orders selected
Function KC0A400()
   /* ***********************************************/
   /* this process will allow the user to release **/
   /* orders from a display of all orders selected**/
   /* via the kc0am001 screen map                 **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/
  ;
  KC0AW01.KC0AWERR = "N"; /* set error flag*/
  KC0AM005.KC0AWMSG = KC0AW01.KC0AWMSG; /* credit message number*/
  ;
  ;
  converse KC0AM005 ;
  ;
  KC0AW01.KC0AWMSG = " ";
  KC0AM005.KC0AWMSG = " ";
  set KC0AM005.KC0AMOPT cursor, initialAttributes; /* init cursor*/
  ;
  KC0A410(); /* edit special keys*/
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0A430(); /* edit screen*/
  end
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0A750(); /* edit page counter*/
  end
  ;
  ;
  ;
end // end KC0A400

// pfkey processing for cc0am005
Function KC0A410()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/
  ;
   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pa2) /* back to order selection menu kc0am001*/
    KC0AW01.KC0AWERR = "Y";
    KC0AW01.KC0AWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0AM005.CATOAP > " ") /* fast path*/
      if ("X" in KC0AW02.KC0AWSEL) /* is there any releasing pending*/
        KC0AW01.KC0AWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while release pending*/
        set KC0AM005.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0AM005.CATOAP;
      COMMAREA.CAITEM = KC0AM005.CAITEM;
      COMMAREA.CAFROMAP = "KC0A";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0AW01.KC0AWERR = "Y";
      set KC0AM005.CATOAP cursor, bold;
    else
      set KC0AM005.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0AM005.CATOAP > " ")
      KC0AW01.KC0AWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0AM005.CATOAP cursor, bold;
      return;
    else
      set KC0AM005.CATOAP modified;
    end
  end
  ;
   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/
  ;
  if ("X" in KC0AW02.KC0AWSEL) /* if releasing pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* exit screen*/
     || converseVar.eventKey is pf4) /* goal menu screen*/
      KC0AW01.KC0AWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end
  ;
   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0A";
    XSPF1();
    KC0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0AW01.KC0AWERR = "Y";
    KC0AW01.KC0AWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0A";
    XSPF4();
  end
  ;
  ;
   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/
  if (converseVar.eventKey is pf6)
    KC0A600(); /* view selected orders*/
    return;
  end
  ;
   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf7)
    KC0A420(); /* scroll up*/
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf8)
    KC0A460(); /* scroll down*/
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf9) /* show windowing screen*/
    KC0A500();
    return;
  end
  ;
   /* ***********************************/
     /* pf12 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf12)
    KC0A700(); /* update orders released*/
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf21) /* show windowing screen*/
    KC0A550();
    return;
  end
  ;
  KC0AW01.KC0AWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/
  ;
  ;
  ;
end // end KC0A410

// scroll up process
Function KC0A420()
  ;
  ;
   /* *********************************************************/
          /* scrolling up and editing takes place*/
   /* *********************************************************/
  ;
  ;
  if (KC0AW02.KC0AWPDX == 0) /* is it at the top of the screen*/
    converseLib.validationFailed(14); /* can not scroll up*/
    KC0AW01.KC0AWERR = "Y";
    return;
  end
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0AW02.KC0AWCDX = KC0AW02.KC0AWPDX; /* current eq  previous*/
    KC0AW01.KC0AWSTP = 13;
    ;
    while (KC0AW01.KC0AWSTP >= 1 /* load the screen with the wstable*/
     && KC0AW02.KC0AWPDX >= 1)
      set KC0AM005.KC0AMSEL[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AMORD[KC0AWSTP] initialAttributes;
      set KC0AM005.XOTABRV[KC0AWSTP] initialAttributes;
      set KC0AM005.XOSCD[KC0AWSTP] initialAttributes;
      set KC0AM005.XCSCD[KC0AWSTP] initialAttributes;
      set KC0AM005.XAHCD[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWNDT[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWRSN[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWOIP[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWOOV[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWALV[KC0AWSTP] initialAttributes;
      if (KC0AW02.KC0AWSEL[KC0AWPDX] == "R")
        set KC0AM005.KC0AMSEL[KC0AWSTP] skip, bold;
        set KC0AM005.KC0AWOOV[KC0AWSTP] skip, bold;
      end
      if (KC0AW02.KC0AWSEL[KC0AWPDX] == "M")
        set KC0AM005.KC0AMORD[KC0AWSTP] skip, bold;
        KC0AM005.KC0AMSEL[KC0AWSTP] = " ";
      else
        KC0AM005.KC0AMSEL[KC0AWSTP] = KC0AW02.KC0AWSEL[KC0AWPDX];
      end
      KC0AM005.KC0AMORD[KC0AWSTP] = KC0AW02.KC0AWORD[KC0AWPDX];
      KC0AM005.XOTABRV[KC0AWSTP] = KC0AW02.XOTABRV[KC0AWPDX];
      KC0AM005.XOSCD[KC0AWSTP] = KC0AW02.XOSCD[KC0AWPDX];
      KC0AM005.XCSCD[KC0AWSTP] = KC0AW02.XCSCD[KC0AWPDX];
      KC0AM005.XAHCD[KC0AWSTP] = KC0AW02.XAHCD[KC0AWPDX];
      KC0AM005.KC0AWNDT[KC0AWSTP] = KC0AW02.KC0AWNDT[KC0AWPDX];
      KC0AM005.KC0AWRSN[KC0AWSTP] = KC0AW02.KC0AWRSN[KC0AWPDX];
      KC0AM005.KC0AWOIP[KC0AWSTP] = KC0AW02.KC0AWOIP[KC0AWPDX];
      KC0AM005.KC0AWOOV[KC0AWSTP] = KC0AW02.KC0AWOOV[KC0AWPDX];
      KC0AM005.KC0AWALV[KC0AWSTP] = KC0AW02.KC0AWALV[KC0AWPDX];
      KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP - 1;
      KC0AW02.KC0AWPDX = KC0AW02.KC0AWPDX - 1;
    end
    ;
    ;
    KC0AW01.KC0AWERR = "Y"; /* reconverse the screen*/
    ;
    KC0AW01.KC0AWCPG = KC0AW01.KC0AWCPG - 1;
    KC0AM005.KC0AWCPG = KC0AW01.KC0AWCPG;
    ;
    if (KC0AW02.KC0AWPDX < 1)
      KC0AW02.KC0AWPDX = 0;
    end
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0A420

// edit release screen cc0am005
Function KC0A430()
  ;
  ;
   /* ***************************************/
   /* edit main release option*/
   /* ***************************************/
  set KC0AM005.KC0AWCPG modified;
  ;
  if (KC0AM005.KC0AMOPT == " " /* if valid entered codes*/
   || KC0AM005.KC0AMOPT == "R")
    set KC0AM005.KC0AMOPT modified;
  else
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(13); /* invalid code*/
    set KC0AM005.KC0AMOPT cursor, bold;
  end
  ;
  ;
   /* ***************************************/
   /* update working table*/
   /* ***************************************/
  ;
  if (KC0AW01.KC0AWERR == "N") /* if not errors*/
    ;
    KC0AW01.KC0AWSTP = 0; /* set screen index*/
    KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* temp ws-table index*/
    ;
    while (KC0AW01.KC0AWSTP < 13 /* go thru the screen*/
     && KC0AW02.KC0AWTDX < KC0AW02.KC0AWBOT)
      KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP + 1; /* increment screen index*/
      KC0AW02.KC0AWTDX = KC0AW02.KC0AWTDX + 1; /* increment table index*/
      ;
      /* ***************************************/
       /* check for select option 'n'         **/
      /* ***************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == "N")
        if (KC0AW02.KC0AWSEL[KC0AWTDX] == "X")
          KC0A440(); /* refresh order and OIP data*/
        end
      end
      ;
      /* ***************************************/
       /* check for select option ' ' and 'r' **/
      /* ***************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == " ")
        if (KC0AM005.KC0AMOPT == "R")
          if (KC0AW02.KC0AWSEL[KC0AWTDX] == " ")
            KC0A450(); /* update OIP*/
            if (converseVar.eventKey is pf12)
              KC0AW01.KC0AWERR = "Y"; /* set error flag*/
              converseLib.validationFailed(40); /* press enter key before pf12*/
            end
          end
        end
      end
      ;
      /* *******************************************/
       /* check for select options 's' and 'x'    **/
      /* *******************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == "S")
        if (KC0AW02.KC0AWSEL[KC0AWTDX] == " ")
          KC0A450(); /* update oip*/
          if (converseVar.eventKey is pf12)
            KC0AW01.KC0AWERR = "Y"; /* set error flag*/
            converseLib.validationFailed(40); /* press enter key before pf12*/
          end
        end
      end
      ;
      ;
      /* *******************************************/
       /* check for select option  'v'            **/
      /* *******************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == "V")
        if (KC0AW02.KC0AWSEL[KC0AWTDX] == "X")
          KC0A440();
        end
        KC0AW02.KC0AWSEL[KC0AWTDX] = "V";
      end
      ;
      /* *******************************************/
       /* check for unselecting option 'v'        **/
      /* *******************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == " ")
        if (KC0AW02.KC0AWSEL[KC0AWTDX] == "V")
          KC0AW02.KC0AWSEL[KC0AWTDX] = " ";
        end
      end
      ;
      /* *****************************/
        /* update screen selections*/
      /* *****************************/
      ;
      KC0AM005.KC0AMSEL[KC0AWSTP] = KC0AW02.KC0AWSEL[KC0AWTDX];
      ;
      /* ***************************************/
       /* check for select option 'r'*/
       /* also check for 'm'odified orders*/
      /* ***************************************/
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == "R")
        set KC0AM005.KC0AMSEL[KC0AWSTP] skip, bold;
        set KC0AM005.KC0AWOOV[KC0AWSTP] skip, bold;
      end
      ;
      if (KC0AM005.KC0AMSEL[KC0AWSTP] == "M")
        KC0AM005.KC0AMSEL[KC0AWSTP] = " ";
        set KC0AM005.KC0AMORD[KC0AWSTP] skip, bold;
      end
      ;
    end
  end
  ;
  KC0AM005.KC0AMOPT = " "; /* clear option fields*/
  ;
  ;
end // end KC0A430

// refresh order data
Function KC0A440()
  ;
   /* ***************************************/
   /* this process reads the order and     **/
   /* refreshes the quantities because it  **/
   /* had been reset to released before    **/
   /* ***************************************/
  ;
  OP1REC.OP1KEY = KC0AW02.OP1KEY[KC0AWTDX];
  ;
  KC0A210(); /* get order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0AW01.KC0AWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    return;
  end
  ;
  ;
  KC0AW01.KC0AWOOK = "Y"; /* order ok to process  flag*/
  KC0AW01.KC0AWRIT = "Y"; /* need to read items for order flag*/
  KC0AW01.KC0AWALV = 0; /* allocated-value*/
  KC0AW01.KC0AWALQ = 0; /* allocated-qty*/
  KC0AW01.KC0AWOOV = 0; /* on-order-value*/
  KC0AW01.KC0AWOOQ = 0; /* on-order-qty*/
  ;
  KC0A350(); /* check order criteria*/
  ;
  if (KC0AW01.KC0AWOOK == "Y") /* the order is ok to process*/
    ;
    if (KC0AW01.KC0AWRIT == "Y") /* need to read the items*/
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0A230(); /* add-up items for an order*/
    end
    ;
    /* ********************************************/
     /* update the quantities on the order table*/
     /* and on the screen*/
    /* ********************************************/
    ;
    KC0AW01.KC0AWCKA = OP1REC.OP1CKAMT;
    KC0AW02.KC0AWOIP[KC0AWTDX] = KC0AW01.KC0AWCKA;
    KC0AW02.KC0AWOOV[KC0AWTDX] = KC0AW01.KC0AWOOV;
    KC0AW02.KC0AWALV[KC0AWTDX] = KC0AW01.KC0AWALV;
    ;
    KC0AW02.KC0AWSEL[KC0AWTDX] = " ";
    ;
    KC0AM005.KC0AWOIP[KC0AWSTP] = KC0AW02.KC0AWOIP[KC0AWTDX];
    KC0AM005.KC0AWOOV[KC0AWSTP] = KC0AW02.KC0AWOOV[KC0AWTDX];
    KC0AM005.KC0AWALV[KC0AWSTP] = KC0AW02.KC0AWALV[KC0AWTDX];
    ;
    KC0AM005.KC0AWINP = KC0AM005.KC0AWINP - KC0AW01.KC0AWOOV;
    KC0AM005.KC0AWINP = KC0AM005.KC0AWINP + KC0AW01.KC0AWCKA;
    KC0AW01.KC0AWINP = KC0AW01.KC0AWINP - KC0AW01.KC0AWOOV;
    KC0AW01.KC0AWINP = KC0AW01.KC0AWINP + KC0AW01.KC0AWCKA;
    KC0AM005.KC0AWXPO = KC0AW01.KC0AWARB + KC0AM005.KC0AWINP;
    KC0AM005.KC0AWXPO = KC0AM005.KC0AWXPO + VCRCHK01.ARCSBNAR;
    ;
    if (OP1REC.XCSCD == "20"
     || OP1REC.XCSCD == "30")
      KC0AM005.KC0AWHDC = KC0AM005.KC0AWHDC + 1;
      KC0AW01.KC0AWHDC = KC0AW01.KC0AWHDC + 1;
    end
  else
    KC0AW02.XOSCD[KC0AWTDX] = OP1REC.XOSCD;
    KC0AW02.XCSCD[KC0AWTDX] = OP1REC.XCSCD;
    KC0AW02.KC0AWSEL[KC0AWTDX] = "M";
  end
  ;
end // end KC0A440

// update OIP
Function KC0A450()
   /* **************************************************/
    /* -- update the OIP in the order and for the company*/
    /* -- update the orders on hold counter*/
   /* **************************************************/
  ;
  KC0AM005.KC0AWINP = KC0AM005.KC0AWINP + KC0AW02.KC0AWOOV[KC0AWTDX];
  KC0AM005.KC0AWINP = KC0AM005.KC0AWINP - KC0AW02.KC0AWOIP[KC0AWTDX];
  KC0AW01.KC0AWINP = KC0AW01.KC0AWINP + KC0AW02.KC0AWOOV[KC0AWTDX];
  KC0AW01.KC0AWINP = KC0AW01.KC0AWINP - KC0AW02.KC0AWOIP[KC0AWTDX];
  KC0AM005.KC0AWXPO = KC0AW01.KC0AWARB + KC0AM005.KC0AWINP;
  KC0AM005.KC0AWXPO = KC0AM005.KC0AWXPO + VCRCHK01.ARCSBNAR;
  ;
  KC0AW02.KC0AWSEL[KC0AWTDX] = "X";
  ;
  KC0AW02.KC0AWOIP[KC0AWTDX] = KC0AW02.KC0AWOOV[KC0AWTDX];
  KC0AM005.KC0AWOIP[KC0AWSTP] = KC0AW02.KC0AWOOV[KC0AWTDX];
  ;
  if (KC0AW02.XCSCD[KC0AWTDX] == "20"
   || KC0AW02.XCSCD[KC0AWTDX] == "30")
    KC0AM005.KC0AWHDC = KC0AM005.KC0AWHDC - 1;
    KC0AW01.KC0AWHDC = KC0AW01.KC0AWHDC - 1;
  end
end // end KC0A450

// scroll down process
Function KC0A460()
  ;
  ;
   /* *********************************************************/
          /* scrolling down and editing takes place*/
   /* *********************************************************/
  ;
  ;
  if (KC0AW02.KC0AWCDX == KC0AW02.KC0AWBOT) /* if at the bottom of table*/
    converseLib.validationFailed(4); /* can not scroll down*/
    KC0AW01.KC0AWERR = "Y";
    return;
  end
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0AW01.KC0AWSTP = 0;
    KC0AW02.KC0AWPDX = KC0AW02.KC0AWCDX;
    ;
    while (KC0AW01.KC0AWSTP < 13 /* load the screen with the ws table*/
     && KC0AW02.KC0AWCDX < KC0AW02.KC0AWBOT)
      KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP + 1;
      KC0AW02.KC0AWCDX = KC0AW02.KC0AWCDX + 1;
      set KC0AM005.KC0AMSEL[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AMORD[KC0AWSTP] initialAttributes;
      set KC0AM005.XOTABRV[KC0AWSTP] initialAttributes;
      set KC0AM005.XOSCD[KC0AWSTP] initialAttributes;
      set KC0AM005.XCSCD[KC0AWSTP] initialAttributes;
      set KC0AM005.XAHCD[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWNDT[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWRSN[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWOIP[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWOOV[KC0AWSTP] initialAttributes;
      set KC0AM005.KC0AWALV[KC0AWSTP] initialAttributes;
      if (KC0AW02.KC0AWSEL[KC0AWCDX] == "R") /* orders already updated*/
        set KC0AM005.KC0AMSEL[KC0AWSTP] skip, bold;
        set KC0AM005.KC0AWOOV[KC0AWSTP] skip, bold;
      end
      if (KC0AW02.KC0AWSEL[KC0AWCDX] == "M") /* order couldn't be updated*/
        set KC0AM005.KC0AMORD[KC0AWSTP] skip, bold;
        KC0AM005.KC0AMSEL[KC0AWSTP] = " ";
      else
        KC0AM005.KC0AMSEL[KC0AWSTP] = KC0AW02.KC0AWSEL[KC0AWCDX];
      end
      KC0AM005.KC0AMORD[KC0AWSTP] = KC0AW02.KC0AWORD[KC0AWCDX];
      KC0AM005.XOTABRV[KC0AWSTP] = KC0AW02.XOTABRV[KC0AWCDX];
      KC0AM005.XOSCD[KC0AWSTP] = KC0AW02.XOSCD[KC0AWCDX];
      KC0AM005.XCSCD[KC0AWSTP] = KC0AW02.XCSCD[KC0AWCDX];
      KC0AM005.XAHCD[KC0AWSTP] = KC0AW02.XAHCD[KC0AWCDX];
      KC0AM005.KC0AWNDT[KC0AWSTP] = KC0AW02.KC0AWNDT[KC0AWCDX];
      KC0AM005.KC0AWRSN[KC0AWSTP] = KC0AW02.KC0AWRSN[KC0AWCDX];
      KC0AM005.KC0AWOIP[KC0AWSTP] = KC0AW02.KC0AWOIP[KC0AWCDX];
      KC0AM005.KC0AWOOV[KC0AWSTP] = KC0AW02.KC0AWOOV[KC0AWCDX];
      KC0AM005.KC0AWALV[KC0AWSTP] = KC0AW02.KC0AWALV[KC0AWCDX];
    end
    ;
    KC0AW01.KC0AWSDX = KC0AW01.KC0AWSTP;
                                   /* reset current screen index*/
    if (KC0AW02.KC0AWCDX == KC0AW02.KC0AWBOT
     && KC0AW01.KC0AWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    ;
    while (KC0AW01.KC0AWSTP < 13)
      KC0AW01.KC0AWSTP = KC0AW01.KC0AWSTP + 1;
      set KC0AM005.KC0AMSEL[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AMORD[KC0AWSTP] skip, invisible;
      set KC0AM005.XOTABRV[KC0AWSTP] skip, invisible;
      set KC0AM005.XOSCD[KC0AWSTP] skip, invisible;
      set KC0AM005.XCSCD[KC0AWSTP] skip, invisible;
      set KC0AM005.XAHCD[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AWNDT[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AWRSN[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AWOIP[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AWOOV[KC0AWSTP] skip, invisible;
      set KC0AM005.KC0AWALV[KC0AWSTP] skip, invisible;
    end
    ;
    KC0AW01.KC0AWERR = "Y"; /* reconverse the screen*/
    ;
    KC0AW01.KC0AWCPG = KC0AW01.KC0AWCPG + 1;
    KC0AM005.KC0AWCPG = KC0AW01.KC0AWCPG;
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0A460

// windowing routine
Function KC0A500()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "            CREDIT STATUS ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCS01(); /* perform credit status pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* previous to current index*/
  KC0A370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0A500

// windowing routine
Function KC0A550()
   /* *********************************************************/
   /* *   if the user wants to browse thru the RTC Reason cd **/
   /* *   table (a pop-up window is presented)               **/
   /* *********************************************************/
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "    RTC REASON CODE       ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCH01();
                                   /* perform rtc reason code pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* previous to current index*/
  KC0A370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0A550

// view selected orders
Function KC0A600()
   /* ***********************************/
    /* user has requested to inquiry*/
    /* on selected orders*/
   /* ***********************************/
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "Y")
    return;
  end
  ;
  if ("V" in KC0AW02.KC0AWSEL) /* if any order has been selected*/
    /* next sentence                  for viewing*/
  else
    KC0AW01.KC0AWERR = "Y"; /* set error message*/
    converseLib.validationFailed(32); /* no orders have been marked for view*/
    return;
  end
  ;
  ;
  KC0AW02.KC0AWTDX = 0; /* prepare table index*/
  ;
  while (KC0AW02.KC0AWTDX < KC0AW02.KC0AWBOT)
    if (KC0AW01.KC0AWERR == "Y")
      KC0A610(); /* display order information*/
    else
      KC0AW02.KC0AWTDX = KC0AW02.KC0AWTDX + 1; /* add to the index*/
      if (KC0AW02.KC0AWSEL[KC0AWTDX] == "V")
        KC0A630(); /* read order header*/
        KC0A640(); /* format order screen*/
        KC0A610(); /* display order information*/
        KC0AW02.KC0AWSEL[KC0AWTDX] = " "; /* clear select ind*/
      end
    end
  end
  ;
  KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* move previous to temp*/
  ;
  KC0A370(); /* update screen display*/
  ;
  ;
  ;
  ;
end // end KC0A600

// order inquiry screen
Function KC0A610()
   /* *******************************************/
   /* order inquiry screen process            **/
   /* 1. prepares working variables           **/
   /* 2. reads the order header               **/
   /* 3. format the order screen              **/
   /* 4. present the screen                   **/
   /* 5. edit pf keys                         **/
                                           /* **/
   /* *******************************************/
  ;
  KC0AW01.KC0AWERR = "N";
  KC0AM010.KC0AMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0AM010.KC0AMANM = "KC0A610"; /* set screen name*/
  ;
  KC0AM010.VAGen_EZEMSG = KC0AW01.KC0AWMSG;
  ;
  converse KC0AM010 ;
  ;
  KC0AW01.KC0AWMSG = " ";
  KC0AM010.VAGen_EZEMSG = " ";
  ;
  KC0A620(); /* edit pf keys*/
  ;
  ;
  ;
end // end KC0A610

// pf key processing for cc0am010
Function KC0A620()
   /* ********************************************/
     /* edit pf keys                           **/
   /* ********************************************/
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0AM010.CATOAP > " ") /* fast path*/
      if ("X" in KC0AW02.KC0AWSEL) /* is there any releasing pending*/
        KC0AW01.KC0AWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while release pending*/
        set KC0AM010.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0AM010.CATOAP;
      COMMAREA.CAITEM = KC0AM010.CAITEM;
      COMMAREA.CAFROMAP = "KC0A";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0AW01.KC0AWERR = "Y";
      set KC0AM010.CATOAP modified, bold;
    else
      set KC0AM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0AM010.CATOAP > " ")
      KC0AW01.KC0AWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0AM010.CATOAP cursor, bold;
      return;
    else
      set KC0AM010.CATOAP modified;
    end
  end
  ;
  ;
   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/
  ;
  if ("X" in KC0AW02.KC0AWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* exit screen*/
      KC0AW01.KC0AWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0A";
    XSPF1();
    KC0AM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0AW01.KC0AWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit screen*/
    KC0AW02.KC0AWTDX = 0;
    while (KC0AW02.KC0AWTDX < KC0AW02.KC0AWBOT)
      KC0AW02.KC0AWTDX = KC0AW02.KC0AWTDX + 1;
      if (KC0AW02.KC0AWSEL[KC0AWTDX] == "V") /* clear out remaining 'v's*/
        KC0AW02.KC0AWSEL[KC0AWTDX] = " ";
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0A"; /* comming from appl*/
    XSPF4();
  end
  ;
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0AW01.KC0AWERR = "Y";
  ;
  ;
  ;
end // end KC0A620

// get order header record
Function KC0A630()
   /* ************************************************/
     /* read the order header for inquiry          **/
   /* ************************************************/
  ;
  OP1REC.OP1CUOID = KC0AW02.KC0AWCUO[KC0AWTDX];
  OP1REC.OP1NORID = KC0AW02.KC0AWRID[KC0AWTDX];
  KC0AW01.KC0AWCOD = KC0AW02.KC0AWCUO[KC0AWTDX];
  OP1REC.OP1PARTN = KC0AW01.KC0AWPAR;
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for order*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0A"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0A630"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0430"; /* i/o mod*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0A630

// format order inquiry screen
Function KC0A640()
   /* **********************************************/
    /* format the order inquiry screen           **/
    /* -- move fields to the map                 **/
                                  /* **/
   /* **********************************************/
  ;
  set KC0AM010 initial; /* repaint the screen each time*/
  ;
   /* **********************************************/
    /* Order Number                              **/
   /* **********************************************/
  KC0AW01.KC0AWCUO = OP1REC.OP1CUOID; /* order number*/
  KC0AW01.KC0AWRID = OP1REC.OP1NORID; /* nike  number*/
  KC0AM010.KC0AMORD = KC0AW01.KC0AWORD; /* formatted order number*/
  ;
   /* **********************************************/
    /* Customer Number                           **/
   /* **********************************************/
  KC0AW01.KC0AWFCU = "******************"; /* fill cust number*/
  KC0AW01.KC0AWPR1 = ".";
  KC0AW01.KC0AWPR2 = ".";
  KC0AW01.KC0AWPR3 = ".";
  ;
  KC0AW01.KC0AWCOI = OP1REC.KUCCOID; /* customer number*/
  ;
  if (OP1REC.KUMSTRID > 0)
    KC0AW01.KC0AWSTO = OP1REC.KUMSTRID; /* store number*/
  end
  if (OP1REC.XNXCD > 0)
    KC0AW01.KC0AWXNX = OP1REC.XNXCD; /* dept number*/
  end
  if (OP1REC.XGPCD > " ")
    KC0AW01.KC0AWGPC = OP1REC.XGPCD; /* dept number*/
  end
  ;
  KC0AM010.KC0AWFCU = KC0AW01.KC0AWFCU;
  ;
   /* **********************************************/
    /* Order Information                         **/
   /* **********************************************/
  KC0AM010.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0AM010.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0AM010.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  KC0AM010.OP1SPGM = OP1REC.SP1ID; /* sales program*/
  ;
   /* **********************************************/
    /* Order Type Code                           **/
   /* **********************************************/
  KC0AM010.XOTCD = OP1REC.XOTCD; /* order type*/
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0AM010.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0AM010.XOTABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Order Brand Code                          **/
   /* **********************************************/
  KC0AM010.XBCCD = OP1REC.XBCCD; /* brand code*/
  if (OP1REC.XBCCD in XBCTBL.XBCCD)
    KC0AM010.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBCCD == " ")
      KC0AM010.XBCABRV = " ";
    else
      KC0AM010.XBCABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Order GPC Code                            **/
   /* **********************************************/
  KC0AM010.XGPCD = OP1REC.XGPCD;
  if (OP1REC.XGPCD in XGPTBL.XGPCD)
    KC0AM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KC0AM010.XGPABRV = "N FND";
  end
  ;
  ;
   /* **********************************************/
    /* Order Division Code                       **/
   /* **********************************************/
   /* MOVE OP1REC.XDVCD TO kc0AM010.XDVCD;*/
   /* IF OP1REC.XDVCD IN XDVTBL.XDVCD;*/
    /* MOVE XDVTBL.XDVABRV(EZETST) TO kc0AM010.XDVABRV;*/
   /* ELSE ;*/
    /* MOVE 'N FND' TO kc0AM010.XDVABRV;*/
   /* END ;*/
  ;
  ;
   /* **********************************************/
    /* Order Bulk Code                           **/
   /* **********************************************/
  KC0AM010.XBDCD = OP1REC.XBDCD;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    KC0AM010.XBDABRV = XBDTBL.XBDABRV[sysVar.arrayIndex];
  else
    KC0AM010.XBDABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Order Terms Code                          **/
   /* **********************************************/
  KC0AM010.XPTCD = OP1REC.XPTCD; /* terms code*/
  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    KC0AM010.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
  else
    KC0AM010.XPTABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Customer Need Date                        **/
   /* **********************************************/
  if (OP1REC.OP1CUNDT > 0)
    set TA2REC empty;
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0AW01.KC0AWDT1 = TA2REC.TA2GRGA;
    KC0AW01.KC0AWMM2 = KC0AW01.KC0AWMM1;
    KC0AW01.KC0AWDD2 = KC0AW01.KC0AWDD1;
    KC0AW01.KC0AWYY2 = KC0AW01.KC0AWYY1;
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1CUNDT = KC0AW01.KC0AWDT2;
  else
    KC0AW01.KC0AWYY2 = "YY";
    KC0AW01.KC0AWMM2 = "MM";
    KC0AW01.KC0AWDD2 = "DD";
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1CUNDT = KC0AW01.KC0AWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
  if (OP1REC.OP1DSBDT > 0)
    set TA2REC empty;
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0AW01.KC0AWDT1 = TA2REC.TA2GRGA;
    KC0AW01.KC0AWMM2 = KC0AW01.KC0AWMM1;
    KC0AW01.KC0AWDD2 = KC0AW01.KC0AWDD1;
    KC0AW01.KC0AWYY2 = KC0AW01.KC0AWYY1;
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1DSBDT = KC0AW01.KC0AWDT2;
  else
    KC0AW01.KC0AWYY2 = "YY";
    KC0AW01.KC0AWMM2 = "MM";
    KC0AW01.KC0AWDD2 = "DD";
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1DSBDT = KC0AW01.KC0AWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
  if (OP1REC.OP1DSADT > 0)
    set TA2REC empty;
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0AW01.KC0AWDT1 = TA2REC.TA2GRGA;
    KC0AW01.KC0AWMM2 = KC0AW01.KC0AWMM1;
    KC0AW01.KC0AWDD2 = KC0AW01.KC0AWDD1;
    KC0AW01.KC0AWYY2 = KC0AW01.KC0AWYY1;
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1DSADT = KC0AW01.KC0AWDT2;
  else
    KC0AW01.KC0AWYY2 = "YY";
    KC0AW01.KC0AWMM2 = "MM";
    KC0AW01.KC0AWDD2 = "DD";
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1DSADT = KC0AW01.KC0AWDT2;
  end
  ;
   /* **********************************************/
    /* Credit Status Change Date                 **/
   /* **********************************************/
  if (OP1REC.OP1CSADT > 0)
    set TA2REC empty;
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0AW01.KC0AWDT1 = TA2REC.TA2GRGA;
    KC0AW01.KC0AWMM2 = KC0AW01.KC0AWMM1;
    KC0AW01.KC0AWDD2 = KC0AW01.KC0AWDD1;
    KC0AW01.KC0AWYY2 = KC0AW01.KC0AWYY1;
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1CSADT = KC0AW01.KC0AWDT2;
  else
    KC0AW01.KC0AWYY2 = "YY";
    KC0AW01.KC0AWMM2 = "MM";
    KC0AW01.KC0AWDD2 = "DD";
    KC0AW01.KC0AWSL1 = "/";
    KC0AW01.KC0AWSL2 = "/";
    KC0AM010.OP1CSADT = KC0AW01.KC0AWDT2;
  end
  ;
   /* **********************************************/
    /* Store Address                             **/
   /* **********************************************/
  KC0A650(); /* store information*/
  ;
  KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
  KULREC.KULAAID = KUMREC.KUMSTAID; /* store address id*/
  ;
  KC0A660(); /* store address*/
  ;
  KC0AM010.KC0AMST1 = KUMREC.KUMSTRNM; /* store name*/
  KC0AW01.KC0AWCTY = KULREC.XXXCITY; /* store city*/
  KC0AW01.KC0AWST = KULREC.XSTCD; /* store state*/
  KC0AW01.KC0AWZIP = KULREC.XXXZIP; /* store zip*/
  KC0AW01.KC0AWB1 = " "; /* blank*/
  KC0AW01.KC0AWB2 = " "; /* blank*/
  if (KULREC.XXX-ADDR1 == " ")
    if (KULREC.XXX-ADDR2 == " ")
      if (KULREC.XXX-ADDR3 == " ")
        KC0AM010.KC0AMST2 = KC0AW01.KC0AWADD; /* formatted city*/
        KC0AM010.KC0AMST3 = " ";
        KC0AM010.KC0AMST4 = " ";
        KC0AM010.KC0AMST5 = " ";
      else
        KC0AM010.KC0AMST2 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0AM010.KC0AMST3 = KC0AW01.KC0AWADD; /* formatted city*/
        KC0AM010.KC0AMST4 = " ";
        KC0AM010.KC0AMST5 = " ";
      end
    else
      KC0AM010.KC0AMST2 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0AM010.KC0AMST3 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0AM010.KC0AMST4 = KC0AW01.KC0AWADD; /* formatted city*/
      KC0AM010.KC0AMST5 = " ";
    end
  else
    KC0AM010.KC0AMST2 = KULREC.XXX-ADDR1; /* store address 1*/
    KC0AM010.KC0AMST3 = KULREC.XXX-ADDR2; /* store address 2*/
    KC0AM010.KC0AMST4 = KULREC.XXX-ADDR3; /* store address 3*/
    KC0AM010.KC0AMST5 = KC0AW01.KC0AWADD; /* formatted city*/
  end
  ;
   /* **********************************************/
    /* Store Ship To Address                     **/
   /* **********************************************/
  if (KUMREC.KUMSTAID == KUMREC.KUMSHAID)
                                   /* store and ship to are equal*/
    KC0AM010.KC0AMSS1 = KC0AM010.KC0AMST1;
    KC0AM010.KC0AMSS2 = KC0AM010.KC0AMST2;
    KC0AM010.KC0AMSS3 = KC0AM010.KC0AMST3;
    KC0AM010.KC0AMSS4 = KC0AM010.KC0AMST4;
    KC0AM010.KC0AMSS5 = KC0AM010.KC0AMST5;
  else
    KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
    KULREC.KULAAID = KUMREC.KUMSHAID; /* store address id*/
    KC0A660();
    KC0AM010.KC0AMSS1 = KUMREC.KUMSTRNM; /* store name*/
    KC0AW01.KC0AWCTY = KULREC.XXXCITY; /* store city*/
    KC0AW01.KC0AWST = KULREC.XSTCD; /* store state*/
    KC0AW01.KC0AWZIP = KULREC.XXXZIP; /* store zip*/
    KC0AW01.KC0AWB1 = " "; /* blank*/
    KC0AW01.KC0AWB2 = " "; /* blank*/
    if (KULREC.XXX-ADDR1 == " ")
      if (KULREC.XXX-ADDR2 == " ")
        if (KULREC.XXX-ADDR3 == " ")
          KC0AM010.KC0AMSS2 = KC0AW01.KC0AWADD; /* formatted city*/
          KC0AM010.KC0AMSS3 = " ";
          KC0AM010.KC0AMSS4 = " ";
          KC0AM010.KC0AMSS5 = " ";
        else
          KC0AM010.KC0AMSS2 = KULREC.XXX-ADDR3; /* store address 3*/
          KC0AM010.KC0AMSS3 = KC0AW01.KC0AWADD; /* formatted city*/
          KC0AM010.KC0AMSS4 = " ";
          KC0AM010.KC0AMSS5 = " ";
        end
      else
        KC0AM010.KC0AMSS2 = KULREC.XXX-ADDR2; /* store address 2*/
        KC0AM010.KC0AMSS3 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0AM010.KC0AMSS4 = KC0AW01.KC0AWADD; /* formatted city*/
        KC0AM010.KC0AMSS5 = " ";
      end
    else
      KC0AM010.KC0AMSS2 = KULREC.XXX-ADDR1; /* store address 1*/
      KC0AM010.KC0AMSS3 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0AM010.KC0AMSS4 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0AM010.KC0AMSS5 = KC0AW01.KC0AWADD; /* formatted city*/
    end
  end
  ;
  ;
   /* **********************************************/
    /* Order Ship To Address                     **/
   /* **********************************************/
  if (OP1REC.OP11TMSF == "N")
    KC0AM010.KC0AMOS1 = " ";
    KC0AM010.KC0AMOS2 = " ";
    KC0AM010.KC0AMOS3 = " ";
    KC0AM010.KC0AMOS4 = " ";
    KC0AM010.KC0AMOS5 = " ";
  else
    KC0A670();
    KC0AM010.KC0AMOS1 = OP5REC.OP5ALTNM; /* ship to name*/
    KC0AW01.KC0AWCTY = OP5REC.XXXCITY; /* ship to city*/
    KC0AW01.KC0AWST = OP5REC.XSTCD; /* ship to state*/
    KC0AW01.KC0AWZIP = OP5REC.XXXZIP; /* ship to zip*/
    KC0AW01.KC0AWB1 = " "; /* blank*/
    KC0AW01.KC0AWB2 = " "; /* blank*/
    if (OP5REC.XXXADDR[1] == " ")
      if (OP5REC.XXXADDR[2] == " ")
        if (OP5REC.XXXADDR[3] == " ")
          KC0AM010.KC0AMOS2 = KC0AW01.KC0AWADD; /* formatted city*/
          KC0AM010.KC0AMOS3 = " ";
          KC0AM010.KC0AMOS4 = " ";
          KC0AM010.KC0AMOS5 = " ";
        else
          KC0AM010.KC0AMOS2 = OP5REC.XXXADDR[3]; /* store address 3*/
          KC0AM010.KC0AMOS3 = KC0AW01.KC0AWADD; /* formatted city*/
          KC0AM010.KC0AMOS4 = " ";
          KC0AM010.KC0AMOS5 = " ";
        end
      else
        KC0AM010.KC0AMOS2 = OP5REC.XXXADDR[2]; /* store address 2*/
        KC0AM010.KC0AMOS3 = OP5REC.XXXADDR[3]; /* store address 3*/
        KC0AM010.KC0AMOS4 = KC0AW01.KC0AWADD; /* formatted city*/
        KC0AM010.KC0AMOS5 = " ";
      end
    else
      KC0AM010.KC0AMOS2 = OP5REC.XXXADDR[1]; /* store address 1*/
      KC0AM010.KC0AMOS3 = OP5REC.XXXADDR[2]; /* store address 2*/
      KC0AM010.KC0AMOS4 = OP5REC.XXXADDR[3]; /* store address 3*/
      KC0AM010.KC0AMOS5 = KC0AW01.KC0AWADD; /* formatted city*/
    end
  end
  ;
  ;
   /* **********************************************/
    /* Sales Agency and Rep                      **/
   /* **********************************************/
  KC0AM010.SM1AGYID = OP1REC.SM1AGYID;
  KC0AM010.SM4REPID = OP1REC.SM4REPID;
  ;
  KC0A680();
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0AW01.KC0AWFST = " ";
    KC0AW01.KC0AWPER = "  ";
    KC0AW01.KC0AWLST = "NOT FOUND ";
  else
    KC0AW01.KC0AWFST = VRAGCY02.XXXFSTNM;
    KC0AW01.KC0AWPER = ". "; /* period*/
    KC0AW01.KC0AWLST = VRAGCY02.XXXLSTNM; /* last name*/
  end
  ;
  KC0AM010.KC0AMNAM = KC0AW01.KC0AWNAM;
  ;
   /* **********************************************/
    /* Special Label Instructions                **/
   /* **********************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* label instruction*/
  OP4REC.OP4TRSEQ = 1; /* first one*/
  ;
  KC0A720();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0AM010.OP4TXT = "NOT FOUND ";
  else
    KC0AM010.OP4TXT = OP4REC.OP4TXT;
  end
  ;
   /* **********************************************/
    /* Order Taken by ID                         **/
   /* **********************************************/
  KC0A690(); /* get taken-by service rep name*/
  ;
  KC0AM010.XXXUSRID = KUYREC.XXXUSRID;
  ;
  ;
end // end KC0A640

// get store name & address id
Function KC0A650()
   /* ************************************************/
     /* read the store for store name & address id **/
   /* ************************************************/
  ;
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUMREC.KUMSTRNM = "STORE IS NOT FOUND ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
      TA1REC.TA1PGMNM = "KC0A"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0A650"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* i/o mod*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key*/
      XSCCS02();
    end
  end
  ;
end // end KC0A650

// get store address
Function KC0A660()
   /* **********************************************/
     /* read the address for the store address   **/
   /* **********************************************/
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KULREC.XXX-ADDR1 = "STORE ADDRESS WAS NOT FOUND ";
      KULREC.XXX-ADDR2 = " ";
      KULREC.XXX-ADDR3 = " ";
      KULREC.XXXCITY = " ";
      KULREC.XSTCD = " ";
      KULREC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0A"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0A660"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0170"; /* i/o mod*/
      TA1REC.TA1TBLKE = KULREC.KULGRP; /* key*/
      XSCCS02();
    end
  end
  ;
  ;
end // end KC0A660

// get order onetime ship address
Function KC0A670()
   /* *****************************************************/
     /* read the order address for onetime ship address **/
   /* ****************************************************/
  ;
  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* part number*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* order number*/
  OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike order number*/
  OP5REC.OP5BILIN = "N"; /* bill to flag*/
  OP5REC.OP5SHPIN = "Y"; /* ship to flag*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP5REC.OP5ALTNM = "SHIP TO INFORMATION WAS NOT FOUND ";
      OP5REC.XXXADDR[1] = " ";
      OP5REC.XXXADDR[2] = " ";
      OP5REC.XXXADDR[3] = " ";
      OP5REC.XXXCITY = " ";
      OP5REC.XSTCD = " ";
      OP5REC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DORDER"; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0A"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0A670"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0460"; /* i/o mod*/
      TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key*/
      XSCCS02();
    end
  end
  ;
  ;
end // end KC0A670

// get sales rep name
Function KC0A680()
   /* ************************************************/
     /* read the sales rep table to get the name   **/
   /* ************************************************/
  ;
  VRAGCY02.SM1AGYID = OP1REC.SM1AGYID;
  VRAGCY02.SM4REPID = OP1REC.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0A"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0A680"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0A680

// get service rep user id
Function KC0A690()
   /* *****************************************************/
     /* read the service rep table to get user id       **/
   /* *****************************************************/
  ;
  ;
  KUYREC.KUYSVRID = OP1REC.OP1TBREP;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1PGMNM = "KC0A"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0A690 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSCCS02(); /* abort routine*/
  end
  ;
  ;
      /* if not found then error*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    KUYREC.XXXUSRID = "UNKNOWN"; /* set user id*/
  end
  ;
end // end KC0A690

// process pf12 updates
Function KC0A700()
   /* ****************************************/
   /* this process updates the records that**/
   /* reflect an order has been released   **/
   /* -- GETS ORDERS AND CHECKS IT AGAIN   **/
   /* -- updates databases                 **/
   /* ****************************************/
  ;
  KC0A430(); /* edit current screen*/
  ;
  if (KC0AW01.KC0AWERR == "Y")
    return;
  end
  ;
  KC0AW01.KC0AWRCN = 0; /* zero # ords released counter*/
  KC0AW01.KC0AWVAL = 0; /* zero released value*/
  ;
  if ("X" in KC0AW02.KC0AWSEL) /* if any order has been released*/
    /* next sentence*/
  else
    KC0AW01.KC0AWERR = "Y"; /* set error message*/
    converseLib.validationFailed(11); /* no orders have been released*/
    return;
  end
  ;
  KC0AW02.KC0AWTDX = 0; /* prepare table index*/
  ;
  while (KC0AW02.KC0AWTDX < KC0AW02.KC0AWBOT)
    KC0AW01.KC0AWOOK = "Y"; /* initialize order ok flag*/
    KC0AW02.KC0AWTDX = KC0AW02.KC0AWTDX + 1; /* add to the index*/
    ;
    if (KC0AW02.KC0AWSEL[KC0AWTDX] == "X")
      KC0A710(); /* prepare order for update*/
      ;
      if (KC0AW01.KC0AWOOK == "Y")
        KC0AW01.KC0AWUOK = "Y"; /* updates ok flag*/
        KC0A250(); /* update database records*/
        if (KC0AW01.KC0AWUOK == "Y")
          KC0AW01.KC0AWRCN = KC0AW01.KC0AWRCN + 1;
          KC0AW01.KC0AWVAL = KC0AW01.KC0AWVAL + KC0AW01.KC0AWOOV;
          KC0AW02.KC0AWSEL[KC0AWTDX] = "R";
          KC0AW02.XCSCD[KC0AWTDX] = OP1REC.XCSCD;
        end
      end
    end
  end
  ;
  if ("M" in KC0AW02.KC0AWSEL
   || "X" in KC0AW02.KC0AWSEL)
    converseLib.validationFailed(28); /* not all order were updated due to db changes*/
    KC0AW01.KC0AWERR = "Y";
  end
  ;
  if (KC0AW01.KC0AWERR == "N")
    KC0AW01.KC0AWMSG = KC0AW01.KC0AWRMS;
    KC0AW01.KC0AWERR = "Y";
    converseLib.validationFailed(12); /* updates ok message*/
  else
    KC0AW01.KC0AWMSG = KC0AW01.KC0AWRMS;
  end
  ;
  KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* move previous to temp*/
  KC0AW01.KC0AWFFL = "Y"; /* set first time flag*/
  KC0A370(); /* update screen display*/
  ;
  ;
  ;
  ;
end // end KC0A700

// prepare order for update
Function KC0A710()
  ;
   /* ***************************************/
   /* this process prepares an order       **/
   /* for update after being released      **/
   /* ***************************************/
  ;
  KC0AW01.KC0AWRIT = "Y"; /* need to read items for order flag*/
  KC0AW01.KC0AWALV = 0; /* allocated-value*/
  KC0AW01.KC0AWALQ = 0; /* allocated-qty*/
  KC0AW01.KC0AWOOV = 0; /* on-order-value*/
  KC0AW01.KC0AWOOQ = 0; /* on-order-qty*/
  ;
  OP1REC.OP1KEY = KC0AW02.OP1KEY[KC0AWTDX];
  KC0A210(); /* get order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    KC0AW01.KC0AWOOK = "N"; /* order not ok*/
    converseLib.validationFailed(23); /* order not updated due to deadlocks*/
    return;
  end
  ;
  if (KC0AW01.KC0AWOOK == "Y") /* the order is ok to process*/
    KC0A350(); /* check order criteria*/
    ;
    if (KC0AW01.KC0AWOOK == "Y") /* the order is ok to process*/
      ;
      if (KC0AW01.KC0AWRIT == "Y") /* need to read the items*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0A230(); /* add-up items for an order*/
      end
      ;
      /* ********************************************/
       /* check the quantities on the order table*/
      /* ********************************************/
      ;
      KC0AW01.KC0AWCKA = OP1REC.OP1CKAMT;
      KC0AW02.KC0AWALV[KC0AWTDX] = KC0AW01.KC0AWALV;
      KC0AW02.KC0AWOIP[KC0AWTDX] = KC0AW01.KC0AWOOV;
      ;
      if (KC0AW01.KC0AWOOV == KC0AW02.KC0AWOOV[KC0AWTDX])
        /* next sentence*/
      else
        KC0AW01.KC0AWOOK = "N";
        KC0AW02.KC0AWSEL[KC0AWTDX] = "M";
        KC0AW02.KC0AWOIP[KC0AWTDX] = KC0AW01.KC0AWCKA;
        KC0AW02.KC0AWOOV[KC0AWTDX] = KC0AW01.KC0AWOOV;
      end
      ;
    else
      KC0AW02.XOSCD[KC0AWTDX] = OP1REC.XOSCD;
      KC0AW02.XCSCD[KC0AWTDX] = OP1REC.XCSCD;
      KC0AW02.KC0AWSEL[KC0AWTDX] = "M";
    end
  end
  ;
  ;
  ;
  ;
end // end KC0A710

// get special label instruction
Function KC0A720()
   /* ***********************************************************/
   /* *  kc0A720                                               **/
   /* *  this statement group is used to get special label     **/
   /* *  instructions for the view screen.                     **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = 1;
  ;
  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "DTEXT001"; /* table view*/
    TA1REC.TA1PGMNM = "KC0A   "; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0A720 "; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0470  "; /* i/o mod*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key*/
    XSCCS02();
  end
end // end KC0A720

// process page rolling
Function KC0A750()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/
  ;
  set KC0AM005.KC0AWCPG modified;
  ;
  if (KC0AW01.KC0AWCPG == KC0AM005.KC0AWCPG)
    if (KC0AW02.KC0AWCDX == KC0AW02.KC0AWBOT
     && KC0AW01.KC0AWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end
  ;
  if (KC0AM005.KC0AWCPG == 0
   || KC0AM005.KC0AWCPG > KC0AW01.KC0AWTPG)
    KC0AW01.KC0AWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0AM005.KC0AWCPG cursor, bold;
    return;
  end
  ;
  KC0AW01.KC0AWCPG = KC0AM005.KC0AWCPG; /* reset current page*/
  KC0AW02.KC0AWCDX = KC0AW01.KC0AWCPG * 13; /* reset current table index*/
  ;
  if (KC0AW02.KC0AWCDX > KC0AW02.KC0AWBOT)
    KC0AW02.KC0AWCDX = KC0AW02.KC0AWBOT;
  end
  ;
  KC0AW02.KC0AWPDX = KC0AW01.KC0AWCPG * 13;
  KC0AW02.KC0AWPDX = KC0AW02.KC0AWPDX - 13;
  ;
  KC0AW02.KC0AWTDX = KC0AW02.KC0AWPDX; /* prepare temp index*/
  ;
  KC0A370(); /* prepare the screen for display*/
  ;
end // end KC0A750

Record KC0AW01 type basicRecord
  5 KC0AWGRP KC0AWGRP ; 
    10 KC0AWVFL KC0AWVFL ; 
    10 KC0AWFLG KC0AWFLG ; 
    10 KC0AWEFL KC0AWEFL ; 
    10 KC0AWFFL KC0AWFFL ; 
    10 KC0AWEND KC0AWEND ; 
    10 KC0AWEOF KC0AWEOF ; 
    10 KC0AWOOK KC0AWOOK ; 
    10 KC0AWUOK KC0AWUOK ; 
    10 KC0AWRIT KC0AWRIT ; 
    10 KC0AWCPG KC0AWCPG ; 
    10 KC0AWTPG KC0AWTPG ; 
    10 KC0AWREM KC0AWREM ; 
    10 KC0AWCN1 KC0AWCN1 ; 
    10 KC0AWSTP KC0AWSTP ; 
    10 KC0AWSDX KC0AWSDX ; 
    10 KC0AWERR KC0AWERR ; 
    10 KUCCOID KUCCOID ; 
    10 KC0AWEOI KC0AWEOI ; 
    10 KC0AWCKA KC0AWCKA ; 
    10 KC0AWOOQ KC0AWOOQ ; 
    10 KC0AWOOV KC0AWOOV ; 
    10 KC0AWALQ KC0AWALQ ; 
    10 KC0AWALV KC0AWALV ; 
    10 KC0AWLIV KC0AWLIV ; 
    10 KC0AWXPO KC0AWXPO ; 
    10 KC0AWARB KC0AWARB ; 
    10 KC0AWINP KC0AWINP ; 
    10 KC0AWHDC KC0AWHDC ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 KC0AW-NEED-DATE-TO KC0AW-NEED-DATE-TO ; 
    10 KC0AWFCU KC0AWFCU ; 
      15 KC0AWCOI KC0AWCOI ; 
      15 KC0AWPR1 KC0AWPR1 ; 
      15 KC0AWSTO KC0AWSTO ; 
      15 KC0AWPR2 KC0AWPR2 ; 
      15 KC0AWXNX KC0AWXNX ; 
      15 KC0AWPR3 KC0AWPR3 ; 
      15 KC0AWGPC KC0AWGPC ; 
    10 KC0AWORD KC0AWORD ; 
      15 KC0AWCUO KC0AWCUO ; 
      15 KC0AWRID KC0AWRID ; 
    10 KC0AWFOR KC0AWFOR ; 
      15 KC0AWCOD KC0AWCOD ; 
        20 * char(7) ; 
        20 KC0AWPAR KC0AWPAR ; 
    10 KC0AWDT1 KC0AWDT1 ; 
      15 KC0AWMM1 KC0AWMM1 ; 
      15 KC0AWDD1 KC0AWDD1 ; 
      15 KC0AWYY1 KC0AWYY1 ; 
    10 KC0AWDT2 KC0AWDT2 ; 
      15 KC0AWMM2 KC0AWMM2 ; 
      15 KC0AWSL1 KC0AWSL1 ; 
      15 KC0AWDD2 KC0AWDD2 ; 
      15 KC0AWSL2 KC0AWSL2 ; 
      15 KC0AWYY2 KC0AWYY2 ; 
    10 KC0AWNAM KC0AWNAM ; 
      15 KC0AWFST KC0AWFST ; 
      15 KC0AWPER KC0AWPER ; 
      15 KC0AWLST KC0AWLST ; 
    10 KC0AWADD KC0AWADD ; 
      15 KC0AWCTY KC0AWCTY ; 
      15 KC0AWB1 KC0AWB1 ; 
      15 KC0AWST KC0AWST ; 
      15 KC0AWB2 KC0AWB2 ; 
      15 KC0AWZIP KC0AWZIP ; 
    10 KC0AWMSG KC0AWMSG ; 
    10 KC0AWEM2 KC0AWEM2 ; 
      15 KC0AWMF2 KC0AWMF2 ; 
      15 KC0AWCON KC0AWCON ; 
    10 KC0AWEM3 KC0AWEM3 ; 
      15 KC0AWMF3 KC0AWMF3 ; 
      15 KC0AWXCS KC0AWXCS ; 
    10 KC0AWMSS KC0AWMSS ; 
      15 KC0AWMS1 KC0AWMS1 ; 
      15 KC0AWORN KC0AWORN ; 
      15 KC0AWDOT KC0AWDOT ; 
      15 KC0AWNOR KC0AWNOR ; 
      15 KC0AWMS2 KC0AWMS2 ; 
      15 KC0AWCUN KC0AWCUN ; 
      15 KC0AWMS3 KC0AWMS3 ; 
      15 KC0AWVL1 KC0AWVL1 ; 
    10 KC0AWRMS KC0AWRMS ; 
      15 KC0AWRCN KC0AWRCN ; 
      15 KC0AWRF1 KC0AWRF1 ; 
      15 KC0AWVAL KC0AWVAL ; 
    10 KC0AWEM1 KC0AWEM1 ; 
      15 KC0AWMF1 KC0AWMF1 ; 
      15 XCCCD XCCCD ; 
    10 KC0AWOVM KC0AWOVM ; 
      15 KC0AWMS4 KC0AWMS4 ; 
      15 KC0AWMS5 KC0AWMS5 ; 
    10 KC0AWSUB KC0AWSUB ; 
    10 KC0AWFND KC0AWFND ; 
    10 KC0AWTBE KC0AWTBE ; 
    10 KC0AWLGE KC0AWLGE ; 
    10 XOTCD XOTCD ; 
end // end KC0AW01

Record KC0AW02 type basicRecord
  10 KC0AWCDX KC0AWCDX ; 
  10 KC0AWPDX KC0AWPDX ; 
  10 KC0AWTDX KC0AWTDX ; 
  10 KC0AWBOT KC0AWBOT ; 
  10 OP1KEY OP1KEY [400] ; 
  10 KC0AWTBL KC0AWTBL [400] ; 
    15 KC0AWSEL KC0AWSEL ; 
    15 KC0AWLIN KC0AWLIN ; 
      20 * char(1) ; 
      20 KC0AWORD KC0AWORD ; 
        25 KC0AWCUO KC0AWCUO ; 
        25 KC0AWRID KC0AWRID ; 
      20 * char(1) ; 
      20 XOTABRV XOTABRV ; 
      20 * char(1) ; 
      20 XOSCD XOSCD ; 
      20 * char(1) ; 
      20 KC0AWNDT KC0AWNDT ; 
        25 KC0AWMM1 KC0AWMM1 ; 
        25 KC0AWSL1 KC0AWSL1 ; 
        25 KC0AWDD1 KC0AWDD1 ; 
        25 KC0AWSL2 KC0AWSL2 ; 
        25 KC0AWYY1 KC0AWYY1 ; 
      20 XAHCD XAHCD ; 
      20 XCSCD XCSCD ; 
      20 KC0AWRSN KC0AWRSN ; 
        25 KC0AWCD1 KC0AWCD1 ; 
        25 KC0AWDS1 KC0AWDS1 ; 
        25 KC0AWCD2 KC0AWCD2 ; 
        25 KC0AWDS2 KC0AWDS2 ; 
        25 KC0AWCD3 KC0AWCD3 ; 
      20 * char(1) ; 
      20 KC0AWOIP KC0AWOIP ; 
      20 * char(1) ; 
      20 KC0AWOOV KC0AWOOV ; 
      20 * char(1) ; 
      20 KC0AWALV KC0AWALV ; 
end // end KC0AW02

// op-cust-need-dt
DataItem KC0AW-NEED-DATE-TO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted city state
DataItem KC0AWADD char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws allocated qty
DataItem KC0AWALQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws allocated value
DataItem KC0AWALV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ar account balance
DataItem KC0AWARB num(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0AWB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0AWB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KC0AWBOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reason code 1
DataItem KC0AWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 2
DataItem KC0AWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 3
DataItem KC0AWCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current index
DataItem KC0AWCDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cr-ck-ord-amt
DataItem KC0AWCKA num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KC0AWCN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0AWCOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen company id
DataItem KC0AWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KC0AWCON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// page counter
DataItem KC0AWCPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// city
DataItem KC0AWCTY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem KC0AWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0AWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KC0AWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0AWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KC0AWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0AWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0AWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted need date
DataItem KC0AWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted need date
DataItem KC0AWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection error flag
DataItem KC0AWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company credit status err msg
DataItem KC0AWEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company nbr mismatch msg
DataItem KC0AWEM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status msg
DataItem KC0AWEM3 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of process
DataItem KC0AWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KC0AWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-items flag
DataItem KC0AWEOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0AWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted cust nbr
DataItem KC0AWFCU char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KC0AWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0AWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcu record found flag
DataItem KC0AWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formated order number
DataItem KC0AWFOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep first name
DataItem KC0AWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KC0AWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0a working storage record
DataItem KC0AWGRP char(657)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders on hold counter
DataItem KC0AWHDC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws orders in process
DataItem KC0AWINP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// legal entity found flag
DataItem KC0AWLGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen line
DataItem KC0AWLIN char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws line-item alloc value
DataItem KC0AWLIV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep last name
DataItem KC0AWLST char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message filler
DataItem KC0AWMF1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0AWMF2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0AWMF3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0AWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0AWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal one
DataItem KC0AWMS1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal two
DataItem KC0AWMS2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal three
DataItem KC0AWMS3 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal four
DataItem KC0AWMS4 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal five
DataItem KC0AWMS5 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KC0AWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- update message
DataItem KC0AWMSS char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KC0AWNAM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date formatted
DataItem KC0AWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub nike order number
DataItem KC0AWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order amount in process
DataItem KC0AWOIP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order ok to process
DataItem KC0AWOOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws on-order qty
DataItem KC0AWOOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws on-order value
DataItem KC0AWOOV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order number
DataItem KC0AWORD num(11,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem KC0AWORN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MSG- too many orders
DataItem KC0AWOVM char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order partition
DataItem KC0AWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem KC0AWPDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period
DataItem KC0AWPER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 1
DataItem KC0AWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 2
DataItem KC0AWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 3
DataItem KC0AWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of ords put in resell
DataItem KC0AWRCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reminder
DataItem KC0AWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KC0AWRF1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws nike sub-order number
DataItem KC0AWRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// read items
DataItem KC0AWRIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- released message
DataItem KC0AWRMS char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reasons
DataItem KC0AWRSN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem KC0AWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select options
DataItem KC0AWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0AWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0AWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state code
DataItem KC0AWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen store id
DataItem KC0AWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem KC0AWSTP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for xcu table read
DataItem KC0AWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xcr table error flag
DataItem KC0AWTBE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders to release table
DataItem KC0AWTBL char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp     index
DataItem KC0AWTDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of pages
DataItem KC0AWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates ok
DataItem KC0AWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0AWVAL num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view single order flag
DataItem KC0AWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0AWVL1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order credit status
DataItem KC0AWXCS char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// screen dept
DataItem KC0AWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total exposure
DataItem KC0AWXPO num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0AWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0AWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem KC0AWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

