package kc0e;

import as1.common.ARCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXCH01;
import corpcom3.XPXCS01;
import corpcom3.XPXX001;
import corpcom4.XSCCS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XBCTBL;
import corpx1.XBDTBL;
import corpx1.XCHTBL;
import corpx1.XCSCD;
import corpx1.XCSTBL;
import corpx1.XCUTBL;
import corpx1.XDSTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XOCTBL;
import corpx1.XOSTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx2.XOSCD;
import corpx2.XOTABRV;
import corpx2.XOTCD;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUYREC;
import op.common.OP1CUOID;
import op.common.OP1KEY;
import op.common.OP1REC;
import op.common.OP2REC;
import op.common.OP4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCRCHK01;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0E ****
//  This application will allow the users to view order(s)
// for a given customer or based on specific criteria:
//   1. order number
//   2. customer number
//   3. starting need date
//   4. ending need date
//   5. order type
//   6. customer p.o. number
//   7. credit status
//   8. order status
//  The user will be able to scroll through all the orders
// page by page. Two maps display detail and summary data
// for up to 13 orders per page. The two maps are toggled by
// using pfkey 10. The user may view more complete information
// for individual orders on the third map by selecting each
// order of interest and using pfkey 6.
// ;
// Maintenance Log:
//  3/30/90 - JJUDKI - Initial creation of CC0E
//  8/07/90 - jwood  - changed cc0em001,m005,m100,cc0e310,360,
//                     640 to use xcscd as a character field
//  8/07/90 - jwood  - changed cc0ew01,cc0e120,320,350 to
//                     remove usage of xcscdcha
//  9/27/90 - mkille - added rtc rsn cd pop up windows
// 10/04/90 - wjohns - modified to allow viewing of orders
//                     past the first 200 for customers with
//                     large numbers of orders.
// 03/29/91 - wjohns - modified to show additional info on the
//                     view screen .. ordered by, dont ship
//                     before and after dates, and special
//                     label instructions. reformated the view
//                     screen.
// 04/09/91 - wjohns - Changed message numbers to match changes
//                     to the cc message file after clean up.
// 08/01/91 - wjohns - Rnamed from CC0E to KC0E for new version
//                     of CICS.
// 08/09/91 - wjohns - Renamed commarea referrences.
// 08/26/91 - JWOOD  - CHANGED CC0E MODULES TO KC0E PER STDS...
// 09/11/91 - wjohns - Added new credit table and logic to get
//                       shipped/but not billed amount from the
//                       table instead of from ar cust table.
// 10/07/91 - wjohns - Regen for database changes.
// 12/19/91 - wjohns - Allow processing of bulk orders when the
//                       credit check flag on the bulk table is
//                       set to "Y".
// 09/30/92 - cancie - replaced vragcy01 with new view vragcy02
// 12/14/93 - cancie - Increased map presentation of 'order no'
//                     in kc0em005 (from 10) to 11 spaces.
// 11/30/94 - CHELLM - Replaces xot on the selection map with
//                     xot short abbreviation.
// 07/13/95 - BCourt - Set VCRCHK01 empty, zero fields not fnd.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  02/19/98 WSQUIR MODIFICATIONS MADE TO: KC0EW01 &
//                         KC0E120.
// 09-21-99   ssank1   Changed map presentation of KC0EM001 ,
//                     KC0EM005,KC0CM010,KC0EM100 & increased
//                     length of KC0EWRID & KC0EWORD in records
//                     KC0EW01 and KC0EW02 to accomodate 4
//                     digit nike ord id.
// *********************
Program KC0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0EW01 KC0EW01; // record
  KC0EW02 KC0EW02; // record
  KC0EW03 KC0EW03; // record
  KC0EW04 KC0EW04; // record
  KUCREC KUCREC; // record
  KUYREC KUYREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP4REC OP4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCRCHK01 VCRCHK01; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KC0EM.KC0EM001,  // forms
      KC0EM.KC0EM005, 
      KC0EM.KC0EM010, 
      KC0EM.KC0EM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0E000: KC0E000();
    goto KC0E100; /* go on to Kc0e selection criteria screen*/
    KC0E100: KC0E100();
    ;
    goto KC0E100; /* order selection criteria*/
    ;
    ;
  end // end main
end // end KC0E

// Kc0e initialization process
Function KC0E000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders released process                  **/
   /* *********************************************/
  ;
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KC0EW01 empty; /* working storage 1*/
  set KC0EW02 empty; /* working storage 2*/
  set KC0EW03 empty; /* working storage 3*/
  set KC0EW04 empty; /* working storage 4*/
  set SQLCA empty;
  set OP1REC empty; /* order header record*/
  set OP2REC empty; /* order item record*/
  set KUCREC empty; /* company record*/
  set ARCREC empty; /* a/r record*/
  set VCRCHK01 empty; /* credit record*/
  set VRAGCY02 empty; /* sales rep record*/
  ;
  set KC0EM001 initial; /* order selection screen*/
  set KC0EM005 initial; /* first order summary screen*/
  set KC0EM010 initial; /* second order summary screen*/
  set KC0EM100 initial; /* individual order inquiry screen*/
  ;
  ;
  ;
  ;
end // end KC0E000

// order selection criteria
Function KC0E100()
   /* *******************************************/
   /* order selection screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* 6. process a set of orders              **/
   /* *******************************************/
  KC0EW01.KC0EWERR = "N"; /* init error flag*/
  KC0EW01.KC0EWEFL = "N"; /* init selection error*/
  KC0EW01.KC0EWDN2 = "N"; /* init displaying next 200 flag*/
  KC0EW01.KC0EWUOK = "Y"; /* updates ok flag*/
  KC0EW01.KC0EWHOR = 0; /* init hold cust order nbr*/
  KC0EM001.KC0EMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0EM001.KC0EMANM = "KC0E001"; /* set screen name*/
  KC0EM001.KC0EWMSG = KC0EW01.KC0EWMSG;
  ;
  converse KC0EM001 ;
  ;
  KC0EW01.KC0EWMSG = " ";
  KC0EM001.KC0EWMSG = " ";
  ;
  KC0E110(); /* edit special keys/fast paths*/
  ;
  if (KC0EW01.KC0EWERR == "N") /* if no errors*/
    KC0E120(); /* edit screen input*/
  end
  ;
  if (KC0EW01.KC0EWERR == "N") /* if no errors*/
    KC0E300(); /* process a set of orders*/
  end
  ;
  if (KC0EW01.KC0EW2FL == "Y") /* if more than 200 orders to display*/
    while (KC0EW01.KC0EWSNX == "Y") /* user wants to view past first 200*/
                                   /* ords*/
      KC0EW01.KC0EWSNX = "N";
      KC0EW01.KC0EWEND = "N";
      KC0EW01.KC0EW2FL = "N";
      KC0E300(); /* process a set of orders*/
    end
  end
  ;
end // end KC0E100

// edit special keys
Function KC0E110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0E"; /* coming from appl*/
    XSEXIT();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0EM001.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0EM001.CATOAP;
      COMMAREA.CAITEM = KC0EM001.CAITEM;
      COMMAREA.CAFROMAP = "KC0E";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0EW01.KC0EWERR = "Y";
      set KC0EM001.CATOAP cursor, bold;
    else
      set KC0EM001.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0EM001.CATOAP > " ")
      KC0EW01.KC0EWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0EM001.CATOAP cursor, bold;
      return;
    else
      set KC0EM001.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0E";
    XSPF1();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0E";
    XSEXIT();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0E";
    XSPF4();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0EW01.KC0EWERR = "Y";
  ;
  ;
  ;
end // end KC0E110

// edit order selection screen
Function KC0E120()
   /* **********************************************/
    /* edit the orders release selection criteria**/
    /* screen.                                   **/
    /* -- edits for clean input                  **/
   /* **********************************************/
  ;
  ;
  set KC0EM001.OP1CUOID initialAttributes;
  set KC0EM001.OP1NORID initialAttributes;
  set KC0EM001.KUCCOID cursor, initialAttributes;
  set KC0EM001.KUMSTRID initialAttributes;
  set KC0EM001.XNXCD initialAttributes;
  set KC0EM001.XGPCD initialAttributes;
  set KC0EM001.KC0EMBDT initialAttributes;
  set KC0EM001.KC0EMDDT initialAttributes;
  set KC0EM001.KC0EM-ORDER-TYPE initialAttributes;
  set KC0EM001.OP1CUPO initialAttributes;
  set KC0EM001.XCSCD initialAttributes;
  set KC0EM001.XOSCD initialAttributes;
  ;
   /* ***************************************************/
   /* edit customer p.o. number*/
   /* ***************************************************/
  if (KC0EM001.OP1CUPO > " ") /* customer p.o. nbr entered*/
     /* next sentence*/
  end
   /* ***************************************************/
   /* edit order  status*/
   /* ***************************************************/
  if (KC0EM001.XOSCD >= "00") /* order status code entered*/
    if (KC0EM001.XOSCD in XOSTBL.XOSCD)
      KC0EW01.XOSCD = KC0EM001.XOSCD;
      /* next sentence*/
    else
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(57); /* invalid order status*/
      set KC0EM001.XOSCD cursor, bold;
      return;
    end
  end
  ;
   /* ***************************************************/
   /* edit credit status code*/
   /* ***************************************************/
  ;
  KC0EW01.XCSCD = KC0EM001.XCSCD;
  if (KC0EW01.XCSCD != "  ") /* credit status entered*/
    if (KC0EW01.XCSCD in XCSTBL.XCSCD)
      /* next sentence*/
    else
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(20); /* invalid credit status code*/
      set KC0EM001.XCSCD cursor, bold;
      return;
    end
  end
  ;
   /* ***************************************************/
   /* edit order type code*/
   /* ***************************************************/
  ;
  if (KC0EM001.KC0EM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0EM001.KC0EM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0EM001.KC0EM-ORDER-TYPE != "99")
      KC0EW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0EM001.KC0EM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0EW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0EW01.KC0EWERR = "Y"; /* set error flag*/
        KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0EM001.KC0EM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end
  ;
  ;
  ;
   /* ***************************************************/
   /* edit beginning need date*/
   /* ***************************************************/
  ;
  if (KC0EM001.KC0EMBDT > 0) /* beginning need date*/
    TA2REC.TA2GRGA = KC0EM001.KC0EMBDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0EW01.KC0EWBDT = TA2REC.TA2GRGGN;
    else
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0EM001.KC0EMBDT cursor, bold;
      return;
    end
  else
    KC0EW01.KC0EWBDT = 0;
  end
  ;
  ;
   /* ***************************************************/
   /* edit ending need date*/
   /* ***************************************************/
  ;
  if (KC0EM001.KC0EMDDT > 0) /* ending need date*/
    TA2REC.TA2GRGA = KC0EM001.KC0EMDDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0EW01.KC0EWDDT = TA2REC.TA2GRGGN;
    else
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0EM001.KC0EMDDT cursor, bold;
      return;
    end
  else
    KC0EW01.KC0EWDDT = 0;
  end
  ;
   /* ***************************************************/
   /* compare need dates to each other*/
   /* ***************************************************/
  ;
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* IF KC0EM001.KC0EMDDT > 0;*/
  /* IF KC0EM001.KC0EMBDT > KC0EM001.KC0EMDDT;/* ending > beginning*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  if (KC0EW01.KC0EWDDT > 0)
    if (KC0EW01.KC0EWBDT > KC0EW01.KC0EWDDT) /* ending > beginning*/
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      KC0EM001.VAGen_EZEMSG = "BEGINNING DATE IS INVALID";
      set KC0EM001.KC0EMBDT cursor, bold;
      return;
    end
  end
  ;
  ;
   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/
  ;
  if (KC0EM001.KUCCOID > 0)
    KC0EW01.KUCCOID = KC0EM001.KUCCOID;
    KC0E130(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(18); /* invalid company; not on file*/
      set KC0EM001.KUCCOID cursor, bold;
      return;
    end
  else
    if (KC0EM001.KUMSTRID > 0)
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(24); /* not allowed*/
      set KC0EM001.KUMSTRID cursor, bold;
      return;
    end
    if (KC0EM001.XNXCD > 0)
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* not allowed*/
      set KC0EM001.XNXCD cursor, bold;
      return;
    end
    if (KC0EM001.XGPCD > " ")
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(26); /* not allowed*/
      set KC0EM001.XGPCD cursor, bold;
      return;
    end
  end
  ;
   /* ********************************************/
   /* edit order number                        **/
   /* ********************************************/
  ;
  if (KC0EM001.OP1NORID > 0
   && KC0EM001.OP1CUOID == 0)
    KC0EW01.KC0EWERR = "Y"; /* set error flag*/
    KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(58); /* must enter cust order also*/
    set KC0EM001.OP1CUOID cursor, bold;
    return;
  end
  ;
  if (KC0EM001.OP1CUOID > 0)
    KC0EW01.OP1CUOID = KC0EM001.OP1CUOID;
  else
    if (KC0EM001.KUCCOID == 0)
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(5); /* must have at least one of this ones*/
      set KC0EM001.KUCCOID cursor, bold;
      return;
    end
  end
  ;
  ;
  ;
  ;
end // end KC0E120

// get company
Function KC0E130()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/
  ;
  ;
  KUCREC.KUCCOID = KC0EW01.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1LOCAT[2] = "KC0E130";
    TA1REC.TA1LOCAT[3] = "KC0E130";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0E130

// process a set of orders
Function KC0E300()
   /* **********************************************/
   /* * this process will drive the displaying of  **/
   /* * of a set of orders                        **/
   /* * it will:                                  **/
   /* *   1. select all orders for a customer     **/
   /* *   2. prepare the screen for display       **/
   /* *   3. check special keys pressed           **/
   /* *   4. edit screen input                    **/
   /* **********************************************/
  ;
  KC0EW01.KC0EWEND = "N"; /* end-of-display-process*/
  KC0EW01.KC0EWMSG = " ";
  if (KC0EW01.KC0EWDN2 == "Y")
     /* next sentence*/
  else
    KC0EW01.KC0EWA1 = 0;
    KC0EW01.KC0EWA2 = 0;
    KC0EW01.KC0EWA3 = 0;
    KC0EW01.KC0EWA4 = 0;
    KC0EW01.KC0EWOIP = 0;
    KC0EW01.KC0EWSB = 0;
  end
  ;
  KC0EW01.KC0EWO1 = 0; /* total customer count*/
  ;
  KC0E310(); /* get all orders*/
  ;
  KC0EW02.KC0EWTDX = 0; /* init temp table index*/
  KC0EW02.KC0EWCDX = 0; /* init current table index*/
  KC0EW02.KC0EWPDX = 0; /* init previoustable index*/
  KC0EW01.KC0EWSDX = 0; /* init current screen index*/
  KC0EW01.KC0EWCPG = 1; /* current page*/
  ;
  if (KC0EW01.KC0EWERR == "N") /* no errors*/
    KC0EW01.KC0EWFFL = "Y"; /* set first time flag*/
    KC0E370(); /* prepare first screen*/
    KC0EW02.KC0EWCDX = KC0EW02.KC0EWTDX; /* current table index*/
    ;
    KC0EW01.KC0EWSFL = " 5";
    ;
    ;
    while (KC0EW01.KC0EWEND == "N")
      if (KC0EW01.KC0EWSFL == " 5")
        KC0E400(); /* process first orders selected*/
      else
        KC0E500(); /* process second orders selected*/
      end
    end
    ;
  end
end // end KC0E300

// select all orders
Function KC0E310()
  ;
  KC0E320(); /* declare cursor*/
  ;
  if (KC0EW01.KC0EWERR == "N") /* no errors*/
    ;
    /* *****************************************/
     /* read first order*/
    /* *****************************************/
    ;
    KC0EW01.KC0EWEOF = "N"; /* reading orders flag*/
    KC0E330(); /* get first order*/
    if (KC0EW01.KC0EWEOF == "Y")
      KC0E340(); /* close order cursor*/
      KC0EW01.KC0EWERR = "Y";
      KC0EW01.KC0EWEFL = "Y";
      converseLib.validationFailed(27); /* no orders for this select*/
      return;
    end
    ;
  else
    return;
  end
  ;
   /* *****************************************/
   /* * if customer not entered on selection **/
   /* * screen, assign order customer        **/
   /* *****************************************/
  ;
  if (KC0EM001.KUCCOID > 0)
    if (KC0EM001.KUCCOID == OP1REC.KUCCOID)
      /* next sentence*/
    else
      KC0EW01.KC0EWERR = "Y"; /* set error flag*/
      KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
      KC0EW01.KC0EWCON = OP1REC.KUCCOID;
      KC0EW01.KC0EWMSG = KC0EW01.KC0EWEM2;
      converseLib.validationFailed(17); /* customer not the same*/
      set KC0EM001.KUCCOID cursor, bold;
      return;
    end
  else
    KC0EW01.KUCCOID = OP1REC.KUCCOID; /* set customer nbr*/
  end
  ;
  KC0E130(); /* get company information*/
  ;
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  set KC0EW02 empty; /* empty ws-table*/
  ;
  KC0EW01.KC0EWCN1 = 0; /* order count*/
  ;
  while (KC0EW01.KC0EWEOF == "N") /* while there are orders to process*/
    ;
    KC0EW01.KC0EWOOK = "Y"; /* order ok to process  flag*/
    ;
    KC0E355(); /* add-up items for an order*/
    ;
     /* calculate allocated amounts*/
    ;
    KC0EW01.KC0EWK1 = KC0EW03.KC0EWS2 - KC0EW03.KC0EWS1;
      /* work1        = on-order-amt    - allocated-amt*/
    ;
    if (OP1REC.XOSCD == "IP" /* in process*/
     || OP1REC.XOSCD == "SH" /* shipped*/
     || OP1REC.XOSCD == "XL" /* cancelled*/
     || KC0EW01.KC0EWDN2 == "Y") /* displaying next 200 orders*/
       /* next sentence*/
    else
      ;
      ;
      if (OP1REC.XBDCD in XBDTBL.XBDCD)
        if (XBDTBL.XBDCRCFL == "Y")
          ;
          if (OP1REC.XCSCD == "97"
           || OP1REC.XCSCD == "98")
            KC0EW01.KC0EWA1 = KC0EW01.KC0EWA1 + KC0EWK1;
          end
          ;
           /* released not allocated = on-order-amt  -  allocated-amt*/
          ;
          if (OP1REC.XCSCD == "90"
           || OP1REC.XCSCD == "91")
            KC0EW01.KC0EWA2 = KC0EW01.KC0EWA2 + KC0EWK1;
          end
          ;
           /* rtc allocated amount =  allocated-amt*/
          ;
          if (OP1REC.XOSCD == "AL"
           || OP1REC.XOSCD == "PA")
            if (OP1REC.XCSCD == "10"
             || OP1REC.XCSCD == "11"
             || OP1REC.XCSCD == "12")
              KC0EW01.KC0EWA3 = KC0EW01.KC0EWA3 + KC0EW03.KC0EWS1;
            else
              KC0EW01.KC0EWA4 = KC0EW01.KC0EWA4 + KC0EW03.KC0EWS1;
            end
          end
        end
      end
    end
    ;
    if (KC0EW01.KC0EWCN1 < 200) /* array is full*/
      ;
      KC0E350(); /* check order criteria*/
      ;
      if (KC0EW01.KC0EWOOK == "Y")
        KC0EW01.KC0EWCN1 = KC0EW01.KC0EWCN1 + 1; /* add 1 to total orders*/
        ;
        KC0E360(); /* load ws-table of orders*/
        ;
        KC0EW01.KC0EWHOR = KC0EW02.KC0EWCUO[KC0EWCDX];
        ;
      end
    end
    KC0E330(); /* get next order*/
    ;
  end
  ;
  ;
  KC0E340(); /* close order cursor*/
  ;
  KC0EW02.KC0EWBOT = KC0EW02.KC0EWCDX; /* bottom of ws-table*/
  ;
  KC0EW01.KC0EWTPG = KC0EW02.KC0EWBOT / 12;
  ;
  KC0EW01.KC0EWREM = KC0EW02.KC0EWBOT % 12;
  ;
  if (KC0EW01.KC0EWREM > 0)
    KC0EW01.KC0EWTPG = KC0EW01.KC0EWTPG + 1;
  end
  ;
  ;
  if (KC0EW01.KC0EWCN1 == 0)
    KC0EW01.KC0EWERR = "Y"; /* set error flag*/
    KC0EW01.KC0EWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(59); /* orders do not match criteria*/
  end
  ;
  ;
  ;
end // end KC0E310

// declare order select cursor
Function KC0E320()
  ;
   /* *****************************************/
    /* all orders selected will be read into**/
    /* a working storage table              **/
   /* *****************************************/
  ;
    /* only order/nike order number entered*/
   /* without customer number entered*/
  ;
   /* *****************************************/
  ;
  set SQLCA empty;
  ;
  if (KC0EM001.OP1CUOID > 0
   && KC0EM001.KUCCOID == 0)
    KC0EW01.KC0EWONR = KC0EM001.OP1CUOID;
    OP1REC.OP1PARTN = KC0EW01.KC0EWON2;
    OP1REC.OP1CUOID = KC0EM001.OP1CUOID;
    KC0EW04.KC0EWIOT = "S2";
    KC0EW04.KC0EWLD = 0; /* lo-need-date*/
    KC0EW04.KC0EWHD = 999999999; /* hi-need-date*/
    ;
    call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DREADO";
      TA1REC.TA1TBLVU = "VORHDRR1";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0E320";
      TA1REC.TA1LOCAT[4] = "IO4140";
      XSCCS02();
    end
    ;
    /* *****************************************/
      /* read cursor for order scan 2*/
    /* *****************************************/
    ;
    KC0EW04.KC0EWIOT = "N2";
    call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(3); /* this order was not found*/
        KC0EW01.KC0EWERR = "Y"; /* error flag*/
        set KC0EM001.OP1CUOID cursor, bold;
      else
        TA1REC.TA1DBASE = "DREADO";
        TA1REC.TA1TBLVU = "VORHDRR1";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        TA1REC.TA1LOCAT[3] = "KC0E320";
        TA1REC.TA1LOCAT[4] = "IO4140";
        XSCCS02();
      end
    end
    ;
    /* *****************************************/
      /* close cursor for order scan 2*/
    /* *****************************************/
    ;
    KC0EW04.KC0EWIOT = "C2";
    call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DREADO";
      TA1REC.TA1TBLVU = "VORHDRR1";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0E320";
      TA1REC.TA1LOCAT[4] = "IO4140";
      XSCCS02();
    end
  end
  ;
  ;
   /* *****************************************/
    /* only customer entered on map 1*/
   /* no specific order/nike order entered*/
   /* *****************************************/
  ;
  if (KC0EW01.KC0EWERR == "N") /* no errors*/
    ;
    if (KC0EM001.KUCCOID > 0)
      OP1REC.KUCCOID = KC0EM001.KUCCOID;
    end
    ;
    if (KC0EM001.KUMSTRID > 0)
      OP1REC.KUMSTRID = KC0EM001.KUMSTRID;
    else
      OP1REC.KUMSTRID = -1;
    end
    OP1REC.XNXCD = -1;
    OP1REC.XGPCD = "**";
    OP1REC.XOTCD = "**";
    OP1REC.XCSCD = "**";
    OP1REC.XOSCD = "**";
    ;
    if (KC0EM001.OP1CUPO > " ")
      OP1REC.OP1CUPO = KC0EM001.OP1CUPO;
    else
      OP1REC.OP1CUPO = "*";
    end
    ;
    OP1REC.OP1CUOID = KC0EW01.KC0EWHOR;
    ;
    KC0EW04.KC0EWIOT = "S1"; /* task id*/
    KC0EW04.KC0EWLD = 0; /* lo-need-date*/
    KC0EW04.KC0EWHD = 999999999; /* hi-need-date*/
    ;
    /* *****************************************/
                 /* get all ords for cust*/
    /* *****************************************/
    ;
    call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DREADO";
      TA1REC.TA1TBLVU = "VORHDRR1";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0E320";
      TA1REC.TA1LOCAT[4] = "IO4140";
      XSCCS02(); /* abort*/
    end
    ;
  end
  ;
end // end KC0E320

// get order "select" record
Function KC0E330()
   /* ********************************************************/
   /* *   get the next order header record*/
   /* ********************************************************/
  ;
     /* customer number entered but no order entered*/
   /* ********************************************************/
  ;
  ;
  KC0EW04.KC0EWIOT = "N1";
  ;
  call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0EW01.KC0EWEOF = "Y"; /* set end-of-file flag to 'yes'*/
    else
      TA1REC.TA1DBASE = "DREADO";
      TA1REC.TA1TBLVU = "VORHDRR1";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0E330";
      TA1REC.TA1LOCAT[4] = "IO4140";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0E330

// close cursors
Function KC0E340()
   /* *************************************************************/
   /* * close cursors*/
   /* *************************************************************/
  ;
    /* customer number entered but no order/nike order number*/
   /* *************************************************************/
  ;
  ;
  KC0EW04.KC0EWIOT = "C1";
  ;
  call "IO4140" (KC0EW04, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DREADO";
    TA1REC.TA1TBLVU = "VORHDRR1";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0E340";
    TA1REC.TA1LOCAT[4] = "IO4140";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0E340

// edit order selected from set
Function KC0E350()
   /* ***********************************************/
    /* edit order header record*/
    /* add to company level allocation totals*/
    /* add to order level allocation totals*/
  ;
   /* ***********************************************/
  ;
  ;
   /* ***********************************************/
      /* edit customer number*/
   /* ***********************************************/
  if (KC0EM001.KUCCOID > 0)
    if (KC0EM001.KUCCOID != OP1REC.KUCCOID)
      KC0EW01.KC0EWOOK = "N"; /* do not process order*/
      return;
    end
    if (KC0EM001.KUMSTRID > 0)
      if (KC0EM001.KUMSTRID != OP1REC.KUMSTRID)
        KC0EW01.KC0EWOOK = "N"; /* do not process order*/
        return;
      end
    end
    if (KC0EM001.XNXCD > 0)
      if (KC0EM001.XNXCD != OP1REC.XNXCD)
        KC0EW01.KC0EWOOK = "N"; /* do not process order*/
        return;
      end
    end
    if (KC0EM001.XGPCD > 0)
      if (KC0EM001.XGPCD != OP1REC.XGPCD)
        KC0EW01.KC0EWOOK = "N"; /* do not process order*/
        return;
      end
    end
  end
   /* ***********************************************/
      /* edit order number*/
   /* ***********************************************/
  if (KC0EM001.OP1CUOID > 0)
    if (KC0EM001.OP1CUOID != OP1REC.OP1CUOID)
      KC0EW01.KC0EWOOK = "N"; /* do not process order*/
      return;
    end
  end
   /* ***********************************************/
      /* edit NIKE order number*/
   /* ***********************************************/
  if (KC0EM001.OP1NORID > 0)
    if (KC0EM001.OP1CUOID > 0)
      if (KC0EM001.OP1NORID != OP1REC.OP1NORID)
        KC0EW01.KC0EWOOK = "N"; /* do not process order*/
        return;
      end
    end
  end
  ;
  ;
   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/
  if (KC0EM001.XOSCD > "  ")
    if (KC0EM001.XOSCD != OP1REC.XOSCD)
      KC0EW01.KC0EWOOK = "N"; /* do not process order*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/
  ;
  if (KC0EW01.XCSCD != "  ")
         /* IF KC0EM001.XCSCD GT 0;*/
    if (KC0EM001.XCSCD != OP1REC.XCSCD)
      KC0EW01.KC0EWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/
  ;
  if (KC0EM001.KC0EM-ORDER-TYPE > " ")
    if (KC0EW01.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0EW01.KC0EWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
    /* need date edits (both beginning and ending)*/
   /* ***********************************************/
  ;
  KC0EW01.KC0EWHDT = OP1REC.OP1CUNDT;
  ;
  if (KC0EW01.KC0EWBDT > 0) /* beginning need date*/
    if (KC0EW01.KC0EWHDT < KC0EW01.KC0EWBDT)
      KC0EW01.KC0EWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
  if (KC0EW01.KC0EWDDT > 0) /* ending    need date*/
    if (KC0EW01.KC0EWHDT > KC0EW01.KC0EWDDT)
      KC0EW01.KC0EWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/
  ;
  if (KC0EM001.OP1CUPO > " ")
    if (KC0EM001.OP1CUPO != OP1REC.OP1CUPO)
      KC0EW01.KC0EWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
  ;
  ;
  ;
end // end KC0E350

// add up order items
Function KC0E355()
   /* *************************************/
   /* sum order items                   **/
   /* *************************************/
  ;
  if (OP1REC.XOSCD == "SH")
    KC0EW03.KC0EWS1 = 0; /* allocated amt*/
    KC0EW03.KC0EWS2 = 0; /* on order amt*/
    KC0EW03.KC0EWS3 = OP1REC.OP1OVALU; /* shipped amt*/
  else
    if (OP1REC.OP1ALCQF == "Y" /* alloc qty flag*/
     || OP1REC.OP1SHPQF == "Y") /* shipped qty flag*/
      ;
      KC0EW03.KC0EWIOT = "SM";
      ;
      OP2REC.OP1PARTN = OP1REC.OP1PARTN;
      OP2REC.OP1CUOID = OP1REC.OP1CUOID;
      OP2REC.OP1NORID = OP1REC.OP1NORID;
      ;
      call "IO4150" (KC0EW03, SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KC0EW03.KC0EWI1 != 0)
          KC0EW03.KC0EWS1 = 0;
        end
        if (KC0EW03.KC0EWI2 != 0)
          KC0EW03.KC0EWS2 = 0;
        end
        if (KC0EW03.KC0EWI3 != 0)
          KC0EW03.KC0EWS3 = 0;
        end
      else
        TA1REC.TA1DBASE = "DREADO";
        TA1REC.TA1TBLVU = "VITEM0R1";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        TA1REC.TA1LOCAT[2] = "KC0E355";
        TA1REC.TA1LOCAT[3] = "KC0E355";
        TA1REC.TA1LOCAT[4] = "IO4150";
        XSCCS02();
      end
      ;
    else
      KC0EW03.KC0EWS1 = 0;
      KC0EW03.KC0EWS3 = 0;
      KC0EW03.KC0EWS2 = OP1REC.OP1OVALU;
    end
  end
end // end KC0E355

// load ws-table
Function KC0E360()
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  KC0EW01.KC0EWO1 = KC0EW01.KC0EWO1 + 1; /* add 1 to orders loaded*/
  KC0EW02.KC0EWCDX = KC0EW02.KC0EWCDX + 1; /* add 1 to index table*/
  ;
  KC0EW02.KC0EWSEL[KC0EWCDX] = " ";
  ;
   /* ***************************************/
    /* prepare order number*/
   /* ***************************************/
  ;
  KC0EW02.KC0EWCUO[KC0EWCDX] = OP1REC.OP1CUOID;
  KC0EW02.KC0EWRID[KC0EWCDX] = OP1REC.OP1NORID;
  ;
   /* ***************************************/
     /* prepare need date*/
   /* ***************************************/
  ;
  if (OP1REC.OP1CUNDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRGA = "   ";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    ;
    KC0EW02.KC0EWMM1[KC0EWCDX] = KC0EW01.KC0EWMM1;
    KC0EW02.KC0EWDD1[KC0EWCDX] = KC0EW01.KC0EWDD1;
    KC0EW02.KC0EWYY1[KC0EWCDX] = KC0EW01.KC0EWYY1;
    KC0EW02.KC0EWSL1[KC0EWCDX] = "/";
    KC0EW02.KC0EWSL2[KC0EWCDX] = "/";
  end
  ;
   /* ***************************************/
     /* prepare status date*/
   /* ***************************************/
  ;
  if (OP1REC.OP1OSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1OSADT;
    TA2REC.TA2GRGA = "             ";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWOT1 = TA2REC.TA2GRGA;
    ;
    KC0EW02.KC0EWMO1[KC0EWCDX] = KC0EW01.KC0EWMO1;
    KC0EW02.KC0EWD01[KC0EWCDX] = KC0EW01.KC0EWD01;
    KC0EW02.KC0EWYO1[KC0EWCDX] = KC0EW01.KC0EWYO1;
    KC0EW02.KC0EWSL3[KC0EWCDX] = "/";
    KC0EW02.KC0EWSL4[KC0EWCDX] = "/";
  end
  ;
   /* ***************************************/
     /* prepare credit status date*/
   /* ***************************************/
  ;
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRGA = "             ";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWCT1 = TA2REC.TA2GRGA;
    ;
    KC0EW02.KC0EWMC1[KC0EWCDX] = KC0EW01.KC0EWMC1;
    KC0EW02.KC0EWDC1[KC0EWCDX] = KC0EW01.KC0EWDC1;
    KC0EW02.KC0EWYC1[KC0EWCDX] = KC0EW01.KC0EWYC1;
    KC0EW02.KC0EWSL5[KC0EWCDX] = "/";
    KC0EW02.KC0EWSL6[KC0EWCDX] = "/";
  end
  ;
   /* ***************************************/
    /* prepare order type abreviation*/
    /* prepare order status*/
    /* prepare credit status*/
   /* ***************************************/
  ;
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0EW02.XOTABRV[KC0EWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0EW02.XOTABRV[KC0EWCDX] = "N FND";
  end
  ;
  KC0EW02.XOSCD[KC0EWCDX] = OP1REC.XOSCD; /* order status*/
  ;
  KC0EW02.XCSCD[KC0EWCDX] = OP1REC.XCSCD; /* credit status*/
  ;
  ;
   /* ****************************************************/
     /* calculate allocated amounts*/
   /* ****************************************************/
  ;
   /* passed not allocated = on order amt - allocated amt*/
  ;
  if (OP1REC.XCSCD == "97"
   || OP1REC.XCSCD == "98")
    KC0EWAA1[KC0EWCDX] = KC0EWK1;
  end
  ;
   /* ****************************************************/
   /* released not allocated = on order amt - allocated amt*/
   /* ****************************************************/
  ;
  ;
  if (OP1REC.XCSCD == "90"
   || OP1REC.XCSCD == "91")
    KC0EWAA2[KC0EWCDX] = KC0EWK1;
  end
  ;
   /* ****************************************************/
   /* rtc allocated amount = allocated amt*/
   /* ****************************************************/
  ;
  ;
  if (OP1REC.XOSCD == "AL"
   || OP1REC.XOSCD == "PA")
    if (OP1REC.XCSCD == "10"
     || OP1REC.XCSCD == "11"
     || OP1REC.XCSCD == "12")
      KC0EWAA3[KC0EWCDX] = KC0EW03.KC0EWS1;
    else
      KC0EWAA4[KC0EWCDX] = KC0EW03.KC0EWS1;
    end
  end
  ;
   /* ****************************************************/
   /* total orders in process = credit check amt*/
   /* ****************************************************/
  ;
  KC0EWOP[KC0EWCDX] = OP1REC.OP1CKAMT;
  ;
   /* ****************************************************/
   /* order value*/
   /* ****************************************************/
  ;
  if (OP1REC.XOSCD == "IP" /* in process*/
   || OP1REC.XOSCD == "XL") /* cancelled*/
    KC0EWCLV[KC0EWCDX] = 0;
  else
    KC0EWCLV[KC0EWCDX] = OP1REC.OP1OVALU;
  end
  ;
   /* ****************************************************/
   /* shipped amount*/
   /* ****************************************************/
  ;
  KC0EW02.KC0EWSB[KC0EWCDX] = KC0EW03.KC0EWS3;
  ;
  ;
end // end KC0E360

// prepare first screen
Function KC0E370()
   /* *********************************************/
   /* *  prepare the first screen to be displayed**/
   /* *********************************************/
  ;
  KC0E130(); /* get kucrec company record*/
  KC0E380(); /* get arcrec ar record*/
  KC0E390(); /* get credit record*/
  ;
  set KC0EM005 initial; /* reset screen*/
  set KC0EM010 initial; /* reset screen*/
  ;
  KC0EW01.KC0EW2FL = "N"; /* initialize over 200 flag*/
  ;
  if (KC0EW01.KC0EWCN1 > 199)
    converseLib.validationFailed(61); /* not all orders could be displayed*/
    KC0EW01.KC0EW2FL = "Y"; /* more than 200 orders*/
  end
   /* ******************************/
    /* load credit data into screen*/
   /* ******************************/
  ;
  KC0EM005.KC0EWDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0EM010.KC0EWDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0EM005.KC0EMANM = "KC0E370"; /* converse name*/
  KC0EM010.KC0EMANM = "KC0E370"; /* converse name*/
  ;
  ;
  KC0EW01.KC0EWFCU = "******************"; /* full cust number*/
  KC0EW01.KC0EWPR1 = ".";
  KC0EW01.KC0EWPR2 = ".";
  KC0EW01.KC0EWPR3 = ".";
  ;
  KC0EW01.KC0EWCOI = KC0EW01.KUCCOID; /* move company number*/
  ;
  if (KC0EM001.KUMSTRID > 0) /* move store*/
    KC0EW01.KC0EWSTO = KC0EM001.KUMSTRID;
  end
  ;
  if (KC0EM001.XNXCD > 0) /* move department*/
    KC0EW01.KC0EWXNX = KC0EM001.XNXCD;
  end
  ;
  if (KC0EM001.XGPCD > " ") /* move gpc code*/
    KC0EW01.KC0EWGPC = KC0EM001.XGPCD;
  end
  ;
  KC0EM005.KC0EWFCU = KC0EW01.KC0EWFCU; /* customer number*/
  KC0EM010.KC0EWFCU = KC0EW01.KC0EWFCU; /* customer number*/
  ;
  KC0EM005.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  KC0EM010.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  ;
  if (KC0EW01.KC0EWFFL == "Y")
    KC0EW01.KC0EWFFL = " "; /* unset first time flag*/
    KC0EW01.KC0EWOIP = VCRCHK01.ARCORPRO; /* total oip*/
    KC0EW01.KC0EWSB = VCRCHK01.ARCSBNAR; /* shipped but not on AR*/
  end
  ;
  ;
  ;
  KC0EM005.KC0EWCPG = KC0EW01.KC0EWCPG; /* set current page*/
  KC0EM010.KC0EWCPG = KC0EW01.KC0EWCPG; /* set current page*/
  KC0EM005.KC0EWTPG = KC0EW01.KC0EWTPG; /* set total page*/
  KC0EM010.KC0EWTPG = KC0EW01.KC0EWTPG; /* set total page*/
  ;
  ;
  KC0EW01.KC0EWSTP = 0; /* init screen top*/
  ;
  while (KC0EW01.KC0EWSTP < 12
   && KC0EW02.KC0EWTDX < KC0EW02.KC0EWBOT)
    KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP + 1;
    KC0EW02.KC0EWTDX = KC0EW02.KC0EWTDX + 1;
                     /* map 5*/
    KC0EM005.KC0EWO1 = KC0EW01.KC0EWO1;
    KC0EM005.KC0EWA1 = KC0EW01.KC0EWA1;
    KC0EM005.KC0EWA2 = KC0EW01.KC0EWA2;
    KC0EM005.KC0EWA3 = KC0EW01.KC0EWA3;
    KC0EM005.KC0EWA4 = KC0EW01.KC0EWA4;
    KC0EM005.KC0EWOIP = KC0EW01.KC0EWOIP;
    KC0EM005.KC0EWSB = KC0EW01.KC0EWSB;
    KC0EM005.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWTDX];
    KC0EM005.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWTDX];
    KC0EM005.XOTABRV[KC0EWSTP] = KC0EW02.XOTABRV[KC0EWTDX];
    KC0EM005.KC0EWNDT[KC0EWSTP] = KC0EW02.KC0EWNDT[KC0EWTDX];
    KC0EM005.XOSCD[KC0EWSTP] = KC0EW02.XOSCD[KC0EWTDX];
    KC0EM005.KC0EWODT[KC0EWSTP] = KC0EW02.KC0EWODT[KC0EWTDX];
    KC0EM005.XCSCD[KC0EWSTP] = KC0EW02.XCSCD[KC0EWTDX];
    KC0EM005.KC0EWCDT[KC0EWSTP] = KC0EW02.KC0EWCDT[KC0EWTDX];
    KC0EM005.OP1OVALU[KC0EWSTP] = KC0EW02.KC0EWCLV[KC0EWTDX];
                     /* map 10*/
    KC0EM010.KC0EWO1 = KC0EW01.KC0EWO1;
    KC0EM010.KC0EWA1 = KC0EW01.KC0EWA1;
    KC0EM010.KC0EWA2 = KC0EW01.KC0EWA2;
    KC0EM010.KC0EWA3 = KC0EW01.KC0EWA3;
    KC0EM010.KC0EWA4 = KC0EW01.KC0EWA4;
    KC0EM010.KC0EWOIP = KC0EW01.KC0EWOIP;
    KC0EM010.KC0EWSB = KC0EW01.KC0EWSB;
    KC0EM010.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWTDX];
    KC0EM010.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWTDX];
    KC0EM010.KC0EMA1[KC0EWSTP] = KC0EW02.KC0EWAA1[KC0EWTDX];
    KC0EM010.KC0EMA2[KC0EWSTP] = KC0EW02.KC0EWAA2[KC0EWTDX];
    KC0EM010.KC0EMA3[KC0EWSTP] = KC0EW02.KC0EWAA3[KC0EWTDX];
    KC0EM010.KC0EMA4[KC0EWSTP] = KC0EW02.KC0EWAA4[KC0EWTDX];
    KC0EM010.KC0EMOIP[KC0EWSTP] = KC0EW02.KC0EWOP[KC0EWTDX];
    KC0EM010.KC0EMSB[KC0EWSTP] = KC0EW02.KC0EWSB[KC0EWTDX];
  end
  ;
  KC0EW01.KC0EWSDX = KC0EW01.KC0EWSTP; /* current screen index*/
  if (KC0EW02.KC0EWTDX == KC0EW02.KC0EWBOT
   && KC0EW01.KC0EWERR == "N")
    converseLib.validationFailed(4); /* last record display*/
  end
  ;
  while (KC0EW01.KC0EWSTP < 12)
    KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP + 1;
    set KC0EM005.KC0EMSEL[KC0EWSTP] skip, invisible;
    set KC0EM005.KC0EMORD[KC0EWSTP] skip, invisible;
    set KC0EM005.XOTABRV[KC0EWSTP] skip, invisible;
    set KC0EM005.KC0EWNDT[KC0EWSTP] skip, invisible;
    set KC0EM005.XOSCD[KC0EWSTP] skip, invisible;
    set KC0EM005.KC0EWODT[KC0EWSTP] skip, invisible;
    set KC0EM005.XCSCD[KC0EWSTP] skip, invisible;
    set KC0EM005.KC0EWCDT[KC0EWSTP] skip, invisible;
    set KC0EM005.OP1OVALU[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMSEL[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMORD[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMA1[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMA2[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMA3[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMA4[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMOIP[KC0EWSTP] skip, invisible;
    set KC0EM010.KC0EMSB[KC0EWSTP] skip, invisible;
  end
  ;
end // end KC0E370

// get ar record
Function KC0E380()
   /* ********************************************************/
   /* *   get accounts receivable record*/
   /* 7-13-95 BCourt set record empty, zero fields not found*/
   /* ********************************************************/
  ;
  set ARCREC empty;
  ;
  ARCREC.KUCCOID = KC0EW01.KUCCOID;
  ;
  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(60); /* no a/r info for this customer*/
      ARCREC.ARCSBNAR = 0;
      ARCREC.ARCORPRO = 0;
      ARCREC.ARCORHLD = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VARCUS01";
      TA1REC.TA1LOCAT[2] = "KC0E380";
      TA1REC.TA1LOCAT[3] = "KC0E380";
      TA1REC.TA1LOCAT[4] = "IO4160";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0E380

// get credit record
Function KC0E390()
   /* ********************************************************/
   /* *   get credit record*/
   /* 7-13-95 BCourt Set record empty, zero fields not found.*/
   /* ********************************************************/
  ;
  set VCRCHK01 empty;
  ;
  VCRCHK01.KUCCOID = KC0EW01.KUCCOID;
  ;
  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(60); /* no credit info for this cust*/
      VCRCHK01.ARCSBNAR = 0;
      VCRCHK01.ARCORPRO = 0;
      VCRCHK01.ARCORHLD = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCRCHK01";
      TA1REC.TA1LOCAT[2] = "KC0E390";
      TA1REC.TA1LOCAT[3] = "KC0E390";
      TA1REC.TA1LOCAT[4] = "IO6010";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0E390

// process all orders selected
Function KC0E400()
   /* ***********************************************/
   /* this process will allow the user to display **/
   /* orders from a display of all orders selected**/
   /* via Kc0em005                                **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/
  ;
  KC0EW01.KC0EWERR = "N"; /* set error flag*/
  KC0EM005.KC0EWMSG = KC0EW01.KC0EWMSG; /* credit message number*/
  ;
  ;
  converse KC0EM005 ;
  ;
  KC0EW01.KC0EWMSG = " ";
  KC0EM005.KC0EWMSG = " ";
  ;
  KC0E410(); /* edit special keys*/
  ;
  if (KC0EW01.KC0EWERR == "N")
    KC0E430(); /* edit screen*/
  end
  ;
  if (KC0EW01.KC0EWERR == "N")
    KC0E750(); /* edit page counter*/
  end
  ;
  ;
  ;
end // end KC0E400

// pfkey processing
Function KC0E410()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/
  ;
   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pa2) /* back to order selection menu Kc0em001*/
    KC0EW01.KC0EWERR = "Y";
    KC0EW01.KC0EWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0EM005.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0EM005.CATOAP;
      COMMAREA.CAITEM = KC0EM005.CAITEM;
      COMMAREA.CAFROMAP = "KC0E";
      XSEXIT();
    else
      set KC0EM005.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0EM005.CATOAP > " ")
      KC0EW01.KC0EWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0EM005.CATOAP cursor, bold;
      return;
    else
      set KC0EM005.CATOAP modified;
    end
  end
  ;
   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0E";
    XSPF1();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0EW01.KC0EWERR = "Y";
    KC0EW01.KC0EWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0E";
    XSPF4();
  end
  ;
  ;
   /* ***********************************/
     /* pf5 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf5) /* see next 200 orders*/
    if (KC0EW01.KC0EW2FL == "Y") /* if there are more orders*/
      KC0EW01.KC0EWSNX = "Y";
      KC0EW01.KC0EWDN2 = "Y";
      KC0EW01.KC0EWEND = "Y";
    else
      converseLib.validationFailed(62); /* end of orders reached*/
    end
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf7)
    KC0E420(); /* scroll up*/
    return;
  end
  ;
   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf8)
    KC0E460(); /* scroll down*/
    return;
  end
  ;
   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf6)
    KC0E600(); /* view selected orders*/
    return;
  end
  ;
   /* ***********************************/
     /* pf10 edit*/
   /* ***********************************/
  ;
     /* if switch = 5 converse map5*/
     /* else*/
     /* if switch = 10 converse map10*/
  ;
  if (converseVar.eventKey is pf10)
    if (KC0EW01.KC0EWSFL == " 5")
      KC0EW01.KC0EWSFL = "10"; /* swap maps 5 and 10*/
    else
      if (KC0EW01.KC0EWSFL == "10")
        KC0EW01.KC0EWSFL = " 5"; /* swap maps 5 and 10*/
      end
    end
    return;
  end
  ;
   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf9)
    KC0E520(); /* pop up window for credit status*/
    return;
  end
  ;
   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf21)
    KC0E550(); /* pop up window for rtc reason code*/
    return;
  end
  ;
  ;
  KC0EW01.KC0EWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/
  ;
  ;
  ;
end // end KC0E410

// scroll up process
Function KC0E420()
  ;
   /* *********************************************************/
          /* scrolling up and editing takes place*/
   /* *********************************************************/
  ;
  if (KC0EW02.KC0EWPDX == 0) /* is it at the top of the screen*/
    converseLib.validationFailed(14); /* can not scroll up*/
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
  KC0E430(); /* edit current screen*/
  ;
  if (KC0EW01.KC0EWERR == "N")
    KC0EW02.KC0EWCDX = KC0EW02.KC0EWPDX; /* current eq  previous*/
    KC0EW01.KC0EWSTP = 12;
    ;
    while (KC0EW01.KC0EWSTP >= 1 /* load the screen with the wstable*/
     && KC0EW02.KC0EWPDX >= 1)
           /* map 5*/
      set KC0EM005.KC0EMSEL[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EMORD[KC0EWSTP] initialAttributes;
      set KC0EM005.XOTABRV[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWNDT[KC0EWSTP] initialAttributes;
      set KC0EM005.XOSCD[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWODT[KC0EWSTP] initialAttributes;
      set KC0EM005.XCSCD[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWCDT[KC0EWSTP] initialAttributes;
      set KC0EM005.OP1OVALU[KC0EWSTP] initialAttributes;
           /* map 10*/
      set KC0EM010.KC0EMSEL[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMORD[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA1[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA2[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA3[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA4[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMOIP[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMSB[KC0EWSTP] initialAttributes;
                      /* map 5*/
      KC0EM005.KC0EWO1 = KC0EW01.KC0EWO1;
      KC0EM005.KC0EWA1 = KC0EW01.KC0EWA1;
      KC0EM005.KC0EWA2 = KC0EW01.KC0EWA2;
      KC0EM005.KC0EWA3 = KC0EW01.KC0EWA3;
      KC0EM005.KC0EWA4 = KC0EW01.KC0EWA4;
      KC0EM005.KC0EWOIP = KC0EW01.KC0EWOIP;
      KC0EM005.KC0EWSB = KC0EW01.KC0EWSB;
      KC0EM005.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWPDX];
      KC0EM005.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWPDX];
      KC0EM005.XOTABRV[KC0EWSTP] = KC0EW02.XOTABRV[KC0EWPDX];
      KC0EM005.KC0EWNDT[KC0EWSTP] = KC0EW02.KC0EWNDT[KC0EWPDX];
      KC0EM005.XOSCD[KC0EWSTP] = KC0EW02.XOSCD[KC0EWPDX];
      KC0EM005.KC0EWODT[KC0EWSTP] = KC0EW02.KC0EWODT[KC0EWPDX];
      KC0EM005.XCSCD[KC0EWSTP] = KC0EW02.XCSCD[KC0EWPDX];
      KC0EM005.KC0EWCDT[KC0EWSTP] = KC0EW02.KC0EWCDT[KC0EWPDX];
      KC0EM005.OP1OVALU[KC0EWSTP] = KC0EW02.KC0EWCLV[KC0EWPDX];
                      /* map 10*/
      KC0EM010.KC0EWO1 = KC0EW01.KC0EWO1;
      KC0EM010.KC0EWA1 = KC0EW01.KC0EWA1;
      KC0EM010.KC0EWA2 = KC0EW01.KC0EWA2;
      KC0EM010.KC0EWA3 = KC0EW01.KC0EWA3;
      KC0EM010.KC0EWA4 = KC0EW01.KC0EWA4;
      KC0EM010.KC0EWOIP = KC0EW01.KC0EWOIP;
      KC0EM010.KC0EWSB = KC0EW01.KC0EWSB;
      KC0EM010.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWPDX];
      KC0EM010.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWPDX];
      KC0EM010.KC0EMA1[KC0EWSTP] = KC0EW02.KC0EWAA1[KC0EWPDX];
      KC0EM010.KC0EMA2[KC0EWSTP] = KC0EW02.KC0EWAA2[KC0EWPDX];
      KC0EM010.KC0EMA3[KC0EWSTP] = KC0EW02.KC0EWAA3[KC0EWPDX];
      KC0EM010.KC0EMA4[KC0EWSTP] = KC0EW02.KC0EWAA4[KC0EWPDX];
      KC0EM010.KC0EMOIP[KC0EWSTP] = KC0EW02.KC0EWOP[KC0EWPDX];
      KC0EM010.KC0EMSB[KC0EWSTP] = KC0EW02.KC0EWSB[KC0EWPDX];
      KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP - 1;
      KC0EW02.KC0EWPDX = KC0EW02.KC0EWPDX - 1;
    end
    ;
    ;
    KC0EW01.KC0EWERR = "Y"; /* reconverse the screen*/
    ;
    KC0EW01.KC0EWCPG = KC0EW01.KC0EWCPG - 1;
    KC0EM005.KC0EWCPG = KC0EW01.KC0EWCPG;
    KC0EM010.KC0EWCPG = KC0EW01.KC0EWCPG;
    ;
    if (KC0EW02.KC0EWPDX < 1)
      KC0EW02.KC0EWPDX = 0;
    end
    ;
  end
  ;
end // end KC0E420

// edit screen Kc0Em005
Function KC0E430()
  ;
   /* ***************************************/
   /* edit main view option*/
   /* ***************************************/
  ;
  set KC0EM005.KC0EWCPG modified;
  ;
  ;
   /* ***************************************/
   /* update working table*/
   /* ***************************************/
  ;
  if (KC0EW01.KC0EWERR == "N") /* if not errors*/
    ;
    KC0EW01.KC0EWSTP = 0; /* set screen index*/
    KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* temp ws-table index*/
    ;
    while (KC0EW01.KC0EWSTP < 12 /* go thru the screen*/
     && KC0EW02.KC0EWTDX < KC0EW02.KC0EWBOT)
      KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP + 1; /* increment screen index*/
      KC0EW02.KC0EWTDX = KC0EW02.KC0EWTDX + 1; /* increment table index*/
      ;
      /* *******************************************/
       /* check for select option  'v'            **/
      /* *******************************************/
      ;
      if (KC0EM005.KC0EMSEL[KC0EWSTP] == "V"
       || KC0EM010.KC0EMSEL[KC0EWSTP] == "V")
        KC0EW02.KC0EWSEL[KC0EWTDX] = "V";
      end
      ;
      /* *******************************************/
       /* check for unselecting option 'v'        **/
      /* *******************************************/
      ;
      if (KC0EW01.KC0EWSFL == " 5")
        if (KC0EM005.KC0EMSEL[KC0EWSTP] == " ")
          if (KC0EW02.KC0EWSEL[KC0EWTDX] == "V")
            KC0EW02.KC0EWSEL[KC0EWTDX] = " ";
          end
        end
      end
      ;
      if (KC0EW01.KC0EWSFL == "10")
        if (KC0EM010.KC0EMSEL[KC0EWSTP] == " ")
          if (KC0EW02.KC0EWSEL[KC0EWTDX] == "V")
            KC0EW02.KC0EWSEL[KC0EWTDX] = " ";
          end
        end
      end
      ;
      /* *****************************/
        /* update screen selections*/
      /* *****************************/
      ;
      KC0EM005.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWTDX];
      KC0EM010.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWTDX];
      ;
      ;
    end
  end
  ;
end // end KC0E430

// scroll down process
Function KC0E460()
  ;
  ;
   /* *********************************************************/
          /* scrolling down and editing takes place*/
   /* *********************************************************/
  ;
  ;
  if (KC0EW02.KC0EWCDX == KC0EW02.KC0EWBOT) /* if at the bottom of table*/
    converseLib.validationFailed(4); /* can not scroll down*/
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
  KC0E430(); /* edit current screen*/
  ;
  if (KC0EW01.KC0EWERR == "N")
    KC0EW01.KC0EWSTP = 0;
    KC0EW02.KC0EWPDX = KC0EW02.KC0EWCDX;
    ;
    while (KC0EW01.KC0EWSTP < 12 /* load the screen with the ws table*/
     && KC0EW02.KC0EWCDX < KC0EW02.KC0EWBOT)
      KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP + 1;
      KC0EW02.KC0EWCDX = KC0EW02.KC0EWCDX + 1;
              /* map 5*/
      set KC0EM005.KC0EMSEL[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EMORD[KC0EWSTP] initialAttributes;
      set KC0EM005.XOTABRV[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWNDT[KC0EWSTP] initialAttributes;
      set KC0EM005.XOSCD[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWODT[KC0EWSTP] initialAttributes;
      set KC0EM005.XCSCD[KC0EWSTP] initialAttributes;
      set KC0EM005.KC0EWCDT[KC0EWSTP] initialAttributes;
      set KC0EM005.OP1OVALU[KC0EWSTP] initialAttributes;
              /* map 10*/
      set KC0EM010.KC0EMSEL[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMORD[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA1[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA2[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA3[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMA4[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMOIP[KC0EWSTP] initialAttributes;
      set KC0EM010.KC0EMSB[KC0EWSTP] initialAttributes;
              /* map 5*/
      KC0EM005.KC0EWO1 = KC0EW01.KC0EWO1;
      KC0EM005.KC0EWA1 = KC0EW01.KC0EWA1;
      KC0EM005.KC0EWA2 = KC0EW01.KC0EWA2;
      KC0EM005.KC0EWA3 = KC0EW01.KC0EWA3;
      KC0EM005.KC0EWA4 = KC0EW01.KC0EWA4;
      KC0EM005.KC0EWOIP = KC0EW01.KC0EWOIP;
      KC0EM005.KC0EWSB = KC0EW01.KC0EWSB;
      KC0EM005.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWCDX];
      KC0EM005.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWCDX];
      KC0EM005.XOTABRV[KC0EWSTP] = KC0EW02.XOTABRV[KC0EWCDX];
      KC0EM005.KC0EWNDT[KC0EWSTP] = KC0EW02.KC0EWNDT[KC0EWCDX];
      KC0EM005.XOSCD[KC0EWSTP] = KC0EW02.XOSCD[KC0EWCDX];
      KC0EM005.KC0EWODT[KC0EWSTP] = KC0EW02.KC0EWODT[KC0EWCDX];
      KC0EM005.XCSCD[KC0EWSTP] = KC0EW02.XCSCD[KC0EWCDX];
      KC0EM005.KC0EWCDT[KC0EWSTP] = KC0EW02.KC0EWCDT[KC0EWCDX];
      KC0EM005.OP1OVALU[KC0EWSTP] = KC0EW02.KC0EWCLV[KC0EWCDX];
              /* map 10*/
      KC0EM010.KC0EWO1 = KC0EW01.KC0EWO1;
      KC0EM010.KC0EWA1 = KC0EW01.KC0EWA1;
      KC0EM010.KC0EWA2 = KC0EW01.KC0EWA2;
      KC0EM010.KC0EWA3 = KC0EW01.KC0EWA3;
      KC0EM010.KC0EWA4 = KC0EW01.KC0EWA4;
      KC0EM010.KC0EWOIP = KC0EW01.KC0EWOIP;
      KC0EM010.KC0EWSB = KC0EW01.KC0EWSB;
      KC0EM010.KC0EMSEL[KC0EWSTP] = KC0EW02.KC0EWSEL[KC0EWCDX];
      KC0EM010.KC0EMORD[KC0EWSTP] = KC0EW02.KC0EWORD[KC0EWCDX];
      KC0EM010.KC0EMA1[KC0EWSTP] = KC0EW02.KC0EWAA1[KC0EWCDX];
      KC0EM010.KC0EMA2[KC0EWSTP] = KC0EW02.KC0EWAA2[KC0EWCDX];
      KC0EM010.KC0EMA3[KC0EWSTP] = KC0EW02.KC0EWAA3[KC0EWCDX];
      KC0EM010.KC0EMA4[KC0EWSTP] = KC0EW02.KC0EWAA4[KC0EWCDX];
      KC0EM010.KC0EMOIP[KC0EWSTP] = KC0EW02.KC0EWOP[KC0EWCDX];
      KC0EM010.KC0EMSB[KC0EWSTP] = KC0EW02.KC0EWSB[KC0EWCDX];
    end
    ;
    KC0EW01.KC0EWSDX = KC0EW01.KC0EWSTP;
                                   /* reset current screen index*/
    if (KC0EW02.KC0EWCDX == KC0EW02.KC0EWBOT
     && KC0EW01.KC0EWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    ;
    while (KC0EW01.KC0EWSTP < 12)
      KC0EW01.KC0EWSTP = KC0EW01.KC0EWSTP + 1;
              /* map 5*/
      set KC0EM005.KC0EMSEL[KC0EWSTP] skip, invisible;
      set KC0EM005.KC0EMORD[KC0EWSTP] skip, invisible;
      set KC0EM005.XOTABRV[KC0EWSTP] skip, invisible;
      set KC0EM005.KC0EWNDT[KC0EWSTP] skip, invisible;
      set KC0EM005.XOSCD[KC0EWSTP] skip, invisible;
      set KC0EM005.KC0EWODT[KC0EWSTP] skip, invisible;
      set KC0EM005.XCSCD[KC0EWSTP] skip, invisible;
      set KC0EM005.KC0EWCDT[KC0EWSTP] skip, invisible;
      set KC0EM005.OP1OVALU[KC0EWSTP] skip, invisible;
              /* map 10*/
      set KC0EM010.KC0EMSEL[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMORD[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMA1[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMA2[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMA3[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMA4[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMOIP[KC0EWSTP] skip, invisible;
      set KC0EM010.KC0EMSB[KC0EWSTP] skip, invisible;
    end
    ;
    KC0EW01.KC0EWERR = "Y"; /* reconverse the screen*/
    ;
    KC0EW01.KC0EWCPG = KC0EW01.KC0EWCPG + 1;
    KC0EM005.KC0EWCPG = KC0EW01.KC0EWCPG;
    KC0EM010.KC0EWCPG = KC0EW01.KC0EWCPG;
    ;
  end
  ;
  ;
end // end KC0E460

// process all orders selected
Function KC0E500()
   /* ***********************************************/
   /* this process will allow the user to display **/
   /* orders from a display of all orders selected**/
   /* via the Kc0em010 screen map                 **/
   /* based on switch set when PFkeys checked.    **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/
  ;
  KC0EW01.KC0EWERR = "N"; /* set error flag*/
  KC0EM010.KC0EWMSG = KC0EW01.KC0EWMSG; /* credit message number*/
  ;
  ;
  converse KC0EM010 ;
  ;
  KC0EW01.KC0EWMSG = " ";
  KC0EM010.KC0EWMSG = " ";
  ;
  KC0E620(); /* edit special keys*/
  ;
  if (KC0EW01.KC0EWERR == "N")
    KC0E430(); /* edit screen*/
  end
  if (KC0EW01.KC0EWERR == "N")
    KC0E760(); /* edit page counter*/
  end
  ;
  ;
  ;
end // end KC0E500

// edit special keys
Function KC0E510()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0E"; /* coming from appl*/
    XSEXIT();
    KC0EM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0EM100.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0EM100.CATOAP;
      COMMAREA.CAITEM = KC0EM100.CAITEM;
      COMMAREA.CAFROMAP = "KC0E";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0EW01.KC0EWERR = "Y";
      set KC0EM100.CATOAP cursor, bold;
    else
      set KC0EM100.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0EM100.CATOAP > " ")
      KC0EW01.KC0EWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0EM100.CATOAP cursor, bold;
      return;
    else
      set KC0EM100.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0E";
    XSPF1();
    KC0EM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0E";
    XSEXIT();
    KC0EM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0E";
    XSPF4();
    KC0EM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
  end
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0EW01.KC0EWERR = "Y";
  ;
  ;
  ;
end // end KC0E510

// windowing routine
Function KC0E520()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/
  ;
  KC0E430(); /* edit current screen*/
  ;
  if (KC0EW01.KC0EWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "            CREDIT STATUS ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCS01(); /* perform credit status pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* previous to current index*/
  KC0E370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0E520

// windowing routine
Function KC0E550()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/
  ;
  KC0E430(); /* edit current screen*/
  ;
  if (KC0EW01.KC0EWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "    RTC REASON CODE       ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCH01(); /* perform rtc rsn codes pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* previous to current index*/
  KC0E370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0E550

// view selected orders
Function KC0E600()
   /* ***********************************/
    /* user has requested to inquiry*/
    /* on selected orders*/
   /* ***********************************/
  ;
  KC0E430(); /* edit current screen*/
  ;
  if (KC0EW01.KC0EWERR == "Y")
    return;
  end
  ;
  if ("V" in KC0EW02.KC0EWSEL) /* if any order has been selected*/
    /* next sentence                  for viewing*/
  else
    KC0EW01.KC0EWERR = "Y"; /* set error message*/
    converseLib.validationFailed(32); /* no orders have been marked for view*/
    return;
  end
  ;
  ;
  KC0EW02.KC0EWTDX = 0; /* prepare table index*/
  ;
  while (KC0EW02.KC0EWTDX < KC0EW02.KC0EWBOT)
    if (KC0EW01.KC0EWERR == "Y")
      KC0E610(); /* display order information*/
    else
      KC0EW02.KC0EWTDX = KC0EW02.KC0EWTDX + 1; /* add to the index*/
      if (KC0EW02.KC0EWSEL[KC0EWTDX] == "V")
        KC0E630(); /* read order header*/
        KC0E640(); /* format order screen*/
        KC0E610(); /* display order information*/
        KC0EW02.KC0EWSEL[KC0EWTDX] = " "; /* clear select ind*/
      end
    end
  end
  ;
  KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* move previous to temp*/
  ;
  KC0E370(); /* update screen display*/
  ;
  ;
  ;
  ;
end // end KC0E600

// order inquiry screen
Function KC0E610()
   /* *******************************************/
   /* order inquiry screen process            **/
   /* 1. prepares working variables           **/
   /* 2. reads the order header               **/
   /* 3. format the order screen              **/
   /* 4. present the screen                   **/
   /* 5. edit pf keys                         **/
                                           /* **/
   /* *******************************************/
  ;
  KC0EW01.KC0EWERR = "N";
  KC0EM010.KC0EWDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0EM100.KC0EMANM = "KC0E610"; /* set screen name*/
  ;
  KC0EM010.VAGen_EZEMSG = KC0EW01.KC0EWMSG;
  ;
  converse KC0EM100 ;
  ;
  KC0EW01.KC0EWMSG = " ";
  KC0EM010.VAGen_EZEMSG = " ";
  ;
  KC0E510(); /* edit pf keys*/
  ;
  ;
  ;
end // end KC0E610

// pfkey processing for Kc0em010
Function KC0E620()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/
  ;
   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pa2) /* back to order selection menu Kc0em001*/
    KC0EW01.KC0EWERR = "Y";
    KC0EW01.KC0EWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0EM010.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0EM010.CATOAP;
      COMMAREA.CAITEM = KC0EM010.CAITEM;
      COMMAREA.CAFROMAP = "KC0E";
      XSEXIT();
    else
      set KC0EM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0EM010.CATOAP > " ")
      KC0EW01.KC0EWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0EM010.CATOAP cursor, bold;
      return;
    else
      set KC0EM010.CATOAP modified;
    end
  end
  ;
   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0E";
    XSPF1();
    KC0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0EW01.KC0EWERR = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0EW01.KC0EWERR = "Y";
    KC0EW01.KC0EWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0E";
    XSPF4();
  end
  ;
  ;
   /* ***********************************/
     /* pf5 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf5) /* see next 200 orders*/
    if (KC0EW01.KC0EW2FL == "Y") /* if there are more orders*/
      KC0EW01.KC0EWSNX = "Y";
      KC0EW01.KC0EWDN2 = "Y";
      KC0EW01.KC0EWEND = "Y";
    else
      converseLib.validationFailed(62); /* end of orders reached*/
    end
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf7)
    KC0E420(); /* scroll up*/
    return;
  end
  ;
   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf8)
    KC0E460(); /* scroll down*/
    return;
  end
  ;
   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf9)
    KC0E520(); /* pop up window for credit status*/
    return;
  end
  ;
   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf6)
    KC0E600(); /* view selected orders*/
    return;
  end
  ;
   /* ***********************************/
     /* pf10 edit*/
  ;
     /* if switch = 5 converse map5*/
     /* else*/
     /* if switch = 10 converse map10*/
  ;
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf10)
    if (KC0EW01.KC0EWSFL == " 5")
      KC0EW01.KC0EWSFL = "10"; /* swap maps 5 and 10*/
    else
      if (KC0EW01.KC0EWSFL == "10")
        KC0EW01.KC0EWSFL = " 5"; /* swap maps 5 and 10*/
      end
    end
    return;
  end
  ;
   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf21)
    KC0E550(); /* pop up window for rtc reason codes*/
    return;
  end
  ;
  ;
  KC0EW01.KC0EWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/
  ;
  ;
  ;
end // end KC0E620

// get order header record
Function KC0E630()
   /* ************************************************/
     /* read the order header for inquiry          **/
   /* ************************************************/
  ;
  OP1REC.OP1CUOID = KC0EW02.KC0EWCUO[KC0EWTDX];
  OP1REC.OP1NORID = KC0EW02.KC0EWRID[KC0EWTDX];
  KC0EW01.KC0EWCOD = KC0EW02.KC0EWCUO[KC0EWTDX];
  OP1REC.OP1PARTN = KC0EW01.KC0EWPAR;
  ;
  call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for order*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0E"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0E630"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO4140"; /* i/o mod*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0E630

// format order inquiry screen
Function KC0E640()
   /* **********************************************/
    /* format the order inquiry screen           **/
    /* -- move fields to the map                 **/
                                  /* **/
   /* **********************************************/
  ;
  set KC0EM100 initial; /* repaint the screen each time*/
  ;
   /* **********************************************/
    /* rtc reasons                               **/
   /* **********************************************/
  KC0EM100.XCHCD[1] = OP1REC.XCHCD[1];
  if (OP1REC.XCHCD[1] in XCHTBL.XCHCD)
    KC0EM100.KC0EWCD1 = XCHTBL.XCHABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XCHCD[1] == " ")
      KC0EM100.KC0EWCD1 = " ";
    else
      KC0EM100.KC0EWCD1 = "N FND";
    end
  end
  ;
  KC0EM100.XCHCD[2] = OP1REC.XCHCD[2];
  if (OP1REC.XCHCD[2] in XCHTBL.XCHCD)
    KC0EM100.KC0EWCD2 = XCHTBL.XCHABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XCHCD[2] == " ")
      KC0EM100.KC0EWCD2 = " ";
    else
      KC0EM100.KC0EWCD2 = "N FND";
    end
  end
  ;
  KC0EM100.XCHCD[3] = OP1REC.XCHCD[3];
  if (OP1REC.XCHCD[3] in XCHTBL.XCHCD)
    KC0EM100.KC0EWCD3 = XCHTBL.XCHABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XCHCD[3] == " ")
      KC0EM100.KC0EWCD3 = " ";
    else
      KC0EM100.KC0EWCD3 = "N FND";
    end
  end
  ;
  ;
   /* **********************************************/
    /* Order Number                              **/
   /* **********************************************/
  KC0EW01.KC0EWCUO = OP1REC.OP1CUOID; /* order number*/
  KC0EW01.KC0EWRID = OP1REC.OP1NORID; /* nike  number*/
  KC0EM100.KC0EMORD = KC0EW01.KC0EWORD; /* formatted order number*/
  ;
   /* **********************************************/
    /* Customer Number                           **/
   /* **********************************************/
  KC0EW01.KC0EWFCU = "******************"; /* fill cust number*/
  KC0EW01.KC0EWPR1 = ".";
  KC0EW01.KC0EWPR2 = ".";
  KC0EW01.KC0EWPR3 = ".";
  ;
  KC0EW01.KC0EWCOI = OP1REC.KUCCOID; /* customer number*/
  ;
  if (OP1REC.KUMSTRID > 0)
    KC0EW01.KC0EWSTO = OP1REC.KUMSTRID; /* store number*/
  else
    KC0EW01.KC0EWSTO = 0; /* store number*/
  end
  if (OP1REC.XNXCD > 0)
    KC0EW01.KC0EWXNX = OP1REC.XNXCD; /* dept number*/
  end
  if (OP1REC.XGPCD > " ")
    KC0EW01.KC0EWGPC = OP1REC.XGPCD; /* dept number*/
  end
  ;
  KC0EM100.KC0EWFCU = KC0EW01.KC0EWFCU;
  ;
   /* **********************************************/
    /* Order Information                         **/
   /* **********************************************/
  KC0EM100.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0EM100.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0EM100.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  ;
   /* **********************************************/
    /* Terms code                                **/
   /* **********************************************/
  KC0EM100.XPTCD = OP1REC.XPTCD;
  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    KC0EM100.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XPTCD == "  ")
      KC0EM100.XPTABRV = "  ";
    else
      KC0EM100.XPTABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* nbr of alloc                              **/
   /* **********************************************/
  KC0EM100.OP1NTMAL = OP1REC.OP1NTMAL;
  ;
   /* **********************************************/
    /* Onetime ship flag                         **/
   /* **********************************************/
  KC0EM100.OP11TMSF = OP1REC.OP11TMSF;
  ;
   /* **********************************************/
    /* Order Type Code                           **/
   /* **********************************************/
  KC0EM100.XOTCD = OP1REC.XOTCD; /* order type*/
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0EM100.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XOTCD == "  ")
      KC0EM100.XOTABRV = "  ";
    else
      KC0EM100.XOTABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Order status code                         **/
   /* **********************************************/
  KC0EM100.XOSCD = OP1REC.XOSCD; /* order status*/
  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    KC0EM100.XOSABRV = XOSTBL.XOSABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XOSCD == "  ")
      KC0EM100.XOSABRV = "  ";
    else
      KC0EM100.XOSABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* brand code                                **/
   /* **********************************************/
  KC0EM100.XBCCD = OP1REC.XBCCD; /* brand code*/
  if (OP1REC.XBCCD in XBCTBL.XBCCD)
    KC0EM100.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBCCD == " ")
      KC0EM100.XBCABRV = " ";
    else
      KC0EM100.XBCABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Direct ship code and abbreviation         **/
   /* **********************************************/
  KC0EM100.XDSCD = OP1REC.XDSCD; /* direct ship*/
  if (OP1REC.XDSCD in XDSTBL.XDSCD)
    KC0EM100.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XDSCD == " ")
      KC0EM100.XDSABRV = " ";
    else
      KC0EM100.XBCABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Order Class Code                          **/
   /* **********************************************/
  KC0EM100.XOCCD = OP1REC.XOCCD; /* order class*/
  if (OP1REC.XOCCD in XOCTBL.XOCCD)
    KC0EM100.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XOCCD == " ")
      KC0EM100.XOCABRV = " ";
    else
      KC0EM100.XOCABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Credit status code                        **/
   /* **********************************************/
  KC0EM100.XCSCD = OP1REC.XCSCD; /* order class*/
  if (OP1REC.XCSCD in XCSTBL.XCSCD)
    KC0EM100.XCSABRV = XCSTBL.XCSABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XCSCD == "00")
      KC0EM100.XCSABRV = " ";
    else
      KC0EM100.XCSABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* credit change time                        **/
   /* **********************************************/
  if (OP1REC.OP1CSATM > 0)
    KC0EW01.KC0EWTM = OP1REC.OP1CSATM;
    KC0EW01.KC0EWTH2 = KC0EW01.KC0EWTMH;
    KC0EW01.KC0EWTH3 = ":";
    KC0EW01.KC0EWTH4 = KC0EW01.KC0EWTMM;
    KC0EM100.KC0EWCTM = KC0EW01.KC0EWTH1;
  end
  ;
   /* **********************************************/
    /* prev credit status code                   **/
   /* **********************************************/
  KC0EM100.OP1PCSCD = OP1REC.OP1PCSCD;
  if (OP1REC.OP1PCSCD in XCSTBL.XCSCD)
    KC0EM100.KC0EWPCA = XCSTBL.XCSABRV[sysVar.arrayIndex];
  else
    if (OP1REC.OP1PCSCD == " ")
      KC0EM100.KC0EWPCA = " ";
    else
      KC0EM100.KC0EWPCA = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* previous change time                      **/
   /* **********************************************/
  if (OP1REC.OP1PCSTM > 0)
    KC0EW01.KC0EWTM = OP1REC.OP1PCSTM;
    KC0EW01.KC0EWTH2 = KC0EW01.KC0EWTMH;
    KC0EW01.KC0EWTH3 = ":";
    KC0EW01.KC0EWTH4 = KC0EW01.KC0EWTMM;
    KC0EM100.KC0EWPTM = KC0EW01.KC0EWTH1;
  end
  ;
   /* **********************************************/
    /* Order GPC Code                            **/
   /* **********************************************/
  KC0EM100.XGPCD = OP1REC.XGPCD;
  if (OP1REC.XGPCD in XGPTBL.XGPCD)
    KC0EM100.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XGPCD == "  ")
      KC0EM100.XGPABRV = "  ";
    else
      KC0EM100.XGPABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Order Division Code                       **/
   /* **********************************************/
   /* MOVE OP1REC.XDVCD TO KC0EM100.XDVCD;*/
   /* IF OP1REC.XDVCD IN XDVTBL.XDVCD;*/
    /* MOVE XDVTBL.XDVABRV(EZETST) TO KC0EM100.XDVABRV;*/
   /* ELSE ;*/
    /* IF OP1REC.XDVCD = '  ';*/
      /* MOVE '  ' TO KC0EM100.XDVABRV;*/
    /* ELSE ;*/
      /* MOVE 'N FND' TO KC0EM100.XDVABRV;*/
    /* END ;*/
   /* END ;*/
  ;
   /* **********************************************/
    /* Order Bulk Code                           **/
   /* **********************************************/
  KC0EM100.XBDCD = OP1REC.XBDCD;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    KC0EM100.XBDABRV = XBDTBL.XBDABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBDCD == " ")
      KC0EM100.XBDABRV = " ";
    else
      KC0EM100.XBDABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Customer Need Date                        **/
   /* **********************************************/
  if (OP1REC.OP1CUNDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWNDT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWNDT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
  if (OP1REC.OP1DSBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
      /* MOVE KC0EW01.KC0EWDT2 TO KC0EM100.OP1DSBDT;*/
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
      /* MOVE KC0EW01.KC0EWDT2 TO KC0EM100.OP1DSBDT;*/
  end
  ;
   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
  if (OP1REC.OP1DSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    /* MOVE KC0EW01.KC0EWDT2 TO KC0EM100.OP1DSADT;*/
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
      /* MOVE KC0EW01.KC0EWDT2 TO KC0EM100.OP1DSADT;*/
  end
  ;
   /* **********************************************/
    /* Credit Status Change Date                 **/
   /* **********************************************/
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1CSADT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1CSADT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* Sales Agency and Rep                      **/
   /* **********************************************/
   /* MOVE OP1REC.SM1AGYID TO KC0EM100.SM1AGYID;*/
  KC0EM100.SM4REPID = OP1REC.SM4REPID;
  ;
  KC0E680();
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0EW01.KC0EWFST = " ";
    KC0EW01.KC0EWPER = "  ";
    KC0EW01.KC0EWLST = "NOT FOUND ";
  else
    KC0EW01.KC0EWFST = VRAGCY02.XXXFSTNM;
    KC0EW01.KC0EWPER = " "; /* period*/
    KC0EW01.KC0EWLST = VRAGCY02.XXXLSTNM; /* last name*/
  end
  ;
  KC0EM100.KC0EMNAM = KC0EW01.KC0EWNAM;
  ;
  ;
   /* **********************************************/
    /* Sales program                             **/
   /* **********************************************/
  KC0EM100.SP1ID = OP1REC.SP1ID; /* sales program*/
  ;
   /* **********************************************/
    /* Order taken by                            **/
   /* **********************************************/
  KC0E690(); /* order taken by*/
  ;
  KC0EM100.XXXUSRID = KUYREC.XXXUSRID;
  ;
   /* **********************************************/
    /* date of allocation                        **/
   /* **********************************************/
  if (OP1REC.OP1LALDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1LALDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWLDT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWLDT = KC0EW01.KC0EWDT2;
  end
  ;
  ;
   /* **********************************************/
    /* credit change date                        **/
   /* **********************************************/
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWCDT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWCDT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* prev credit change date                   **/
   /* **********************************************/
  if (OP1REC.OP1PCSDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1PCSDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWPDT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.KC0EWPDT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
  if (OP1REC.OP1DSBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1DSBDT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1DSBDT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
  if (OP1REC.OP1DSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0EW01.KC0EWDT1 = TA2REC.TA2GRGA;
    KC0EW01.KC0EWMM2 = KC0EW01.KC0EWMM1;
    KC0EW01.KC0EWDD2 = KC0EW01.KC0EWDD1;
    KC0EW01.KC0EWYY2 = KC0EW01.KC0EWYY1;
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1DSADT = KC0EW01.KC0EWDT2;
  else
    KC0EW01.KC0EWYY2 = "YY";
    KC0EW01.KC0EWMM2 = "MM";
    KC0EW01.KC0EWDD2 = "DD";
    KC0EW01.KC0EWSL1 = "/";
    KC0EW01.KC0EWSL2 = "/";
    KC0EM100.OP1DSADT = KC0EW01.KC0EWDT2;
  end
  ;
   /* **********************************************/
    /* Special Label Instructions                **/
   /* **********************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* label instruction*/
  OP4REC.OP4TRSEQ = 1; /* first one*/
  ;
  KC0E650();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0EM100.OP4TXT = "NOT FOUND ";
  else
    KC0EM100.OP4TXT = OP4REC.OP4TXT;
  end
  ;
end // end KC0E640

// get special label instruction
Function KC0E650()
   /* ***********************************************************/
   /* *  Kc0e650                                               **/
   /* *  this statement group is used to get special label     **/
   /* *  instructions for the view screen.                     **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = 1;
  ;
  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "DTEXT001"; /* table view*/
    TA1REC.TA1PGMNM = "KC0E   "; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0E650 "; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0470  "; /* i/o mod*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key*/
    XSCCS02();
  end
end // end KC0E650

// get sales rep name
Function KC0E680()
   /* ************************************************/
     /* read the sales rep table to get the name   **/
   /* ************************************************/
  ;
  VRAGCY02.SM1AGYID = OP1REC.SM1AGYID;
  VRAGCY02.SM4REPID = OP1REC.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0E"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0E680"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0E680

// get service rep user id
Function KC0E690()
   /* *****************************************************/
     /* read the service rep table to get user id       **/
   /* *****************************************************/
  ;
  ;
  ;
  KUYREC.KUYSVRID = OP1REC.OP1TBREP;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1PGMNM = "KC0E"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0E690 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSCCS02(); /* abort routine*/
  end
  ;
  ;
      /* if not found then error*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    KUYREC.XXXUSRID = "UNKNOWN"; /* set user id*/
  end
  ;
end // end KC0E690

// process page rolling
Function KC0E750()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/
  ;
  set KC0EM005.KC0EWCPG modified;
  ;
  if (KC0EW01.KC0EWCPG == KC0EM005.KC0EWCPG)
    if (KC0EW02.KC0EWCDX == KC0EW02.KC0EWBOT
     && KC0EW01.KC0EWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end
  ;
  if (KC0EM005.KC0EWCPG == 0
   || KC0EM005.KC0EWCPG > KC0EW01.KC0EWTPG)
    KC0EW01.KC0EWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0EM005.KC0EWCPG cursor, bold;
    return;
  end
  ;
  KC0EW01.KC0EWCPG = KC0EM005.KC0EWCPG; /* reset current page*/
  KC0EW02.KC0EWCDX = KC0EW01.KC0EWCPG * 12; /* reset current table index*/
  ;
  if (KC0EW02.KC0EWCDX > KC0EW02.KC0EWBOT)
    KC0EW02.KC0EWCDX = KC0EW02.KC0EWBOT;
  end
  ;
  KC0EW02.KC0EWPDX = KC0EW01.KC0EWCPG * 12;
  KC0EW02.KC0EWPDX = KC0EW02.KC0EWPDX - 12;
  ;
  KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* prepare temp index*/
  ;
  KC0E370(); /* prepare the screen for display*/
  ;
end // end KC0E750

// process page rolling
Function KC0E760()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/
  ;
  set KC0EM010.KC0EWCPG modified;
  ;
  if (KC0EW01.KC0EWCPG == KC0EM010.KC0EWCPG)
    if (KC0EW02.KC0EWCDX == KC0EW02.KC0EWBOT
     && KC0EW01.KC0EWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end
  ;
  if (KC0EM010.KC0EWCPG == 0
   || KC0EM010.KC0EWCPG > KC0EW01.KC0EWTPG)
    KC0EW01.KC0EWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0EM010.KC0EWCPG cursor, bold;
    return;
  end
  ;
  KC0EW01.KC0EWCPG = KC0EM010.KC0EWCPG; /* reset current page*/
  KC0EW02.KC0EWCDX = KC0EW01.KC0EWCPG * 12; /* reset current table index*/
  ;
  if (KC0EW02.KC0EWCDX > KC0EW02.KC0EWBOT)
    KC0EW02.KC0EWCDX = KC0EW02.KC0EWBOT;
  end
  ;
  KC0EW02.KC0EWPDX = KC0EW01.KC0EWCPG * 12;
  KC0EW02.KC0EWPDX = KC0EW02.KC0EWPDX - 12;
  ;
  KC0EW02.KC0EWTDX = KC0EW02.KC0EWPDX; /* prepare temp index*/
  ;
  KC0E370(); /* prepare the screen for display*/
  ;
end // end KC0E760

//*** RECORD=KC0EW01 ****
// 08-07-90  jwood removed xcscdcha
// ***********************
Record KC0EW01 type basicRecord
  5 KC0EWGRP KC0EWGRP ; 
    10 KC0EWEFL KC0EWEFL ; 
    10 KC0EWSFL KC0EWSFL ; 
    10 KC0EWFFL KC0EWFFL ; 
    10 KC0EW2FL KC0EW2FL ; 
    10 KC0EWSNX KC0EWSNX ; 
    10 KC0EWDN2 KC0EWDN2 ; 
    10 KC0EWEND KC0EWEND ; 
    10 KC0EWEOF KC0EWEOF ; 
    10 KC0EWOOK KC0EWOOK ; 
    10 KC0EWUOK KC0EWUOK ; 
    10 KC0EWCPG KC0EWCPG ; 
    10 KC0EWTPG KC0EWTPG ; 
    10 KC0EWREM KC0EWREM ; 
    10 KC0EWCN1 KC0EWCN1 ; 
    10 KC0EWSTP KC0EWSTP ; 
    10 KC0EWSDX KC0EWSDX ; 
    10 KC0EWERR KC0EWERR ; 
    10 KUCCOID KUCCOID ; 
    10 KC0EWARB KC0EWARB ; 
    10 KC0EWFCU KC0EWFCU ; 
      15 KC0EWCOI KC0EWCOI ; 
      15 KC0EWPR1 KC0EWPR1 ; 
      15 KC0EWSTO KC0EWSTO ; 
      15 KC0EWPR2 KC0EWPR2 ; 
      15 KC0EWXNX KC0EWXNX ; 
      15 KC0EWPR3 KC0EWPR3 ; 
      15 KC0EWGPC KC0EWGPC ; 
    10 KC0EWORD KC0EWORD ; 
      15 KC0EWCUO KC0EWCUO ; 
      15 KC0EWRID KC0EWRID ; 
    10 KC0EWHOR KC0EWHOR ; 
    10 KC0EWFOR KC0EWFOR ; 
      15 KC0EWCOD KC0EWCOD ; 
        20 KC0EWPAR KC0EWPAR ; 
    10 KC0EWDT1 KC0EWDT1 ; 
      15 KC0EWMM1 KC0EWMM1 ; 
      15 KC0EWDD1 KC0EWDD1 ; 
      15 KC0EWYY1 KC0EWYY1 ; 
    10 KC0EWOT1 KC0EWOT1 ; 
      15 KC0EWMO1 KC0EWMO1 ; 
      15 KC0EWD01 KC0EWD01 ; 
      15 KC0EWYO1 KC0EWYO1 ; 
    10 KC0EWCT1 KC0EWCT1 ; 
      15 KC0EWMC1 KC0EWMC1 ; 
      15 KC0EWDC1 KC0EWDC1 ; 
      15 KC0EWYC1 KC0EWYC1 ; 
    10 KC0EWDT2 KC0EWDT2 ; 
      15 KC0EWMM2 KC0EWMM2 ; 
      15 KC0EWSL1 KC0EWSL1 ; 
      15 KC0EWDD2 KC0EWDD2 ; 
      15 KC0EWSL2 KC0EWSL2 ; 
      15 KC0EWYY2 KC0EWYY2 ; 
    10 KC0EWNAM KC0EWNAM ; 
      15 KC0EWFST KC0EWFST ; 
      15 KC0EWPER KC0EWPER ; 
      15 KC0EWLST KC0EWLST ; 
    10 KC0EWMSG KC0EWMSG ; 
    10 KC0EWEM2 KC0EWEM2 ; 
      15 KC0EWMF2 KC0EWMF2 ; 
      15 KC0EWCON KC0EWCON ; 
    10 KC0EWEM3 KC0EWEM3 ; 
      15 KC0EWMF3 KC0EWMF3 ; 
      15 KC0EWXCS KC0EWXCS ; 
    10 KC0EWOVM KC0EWOVM ; 
    10 KC0EWA1 KC0EWA1 ; 
    10 KC0EWA2 KC0EWA2 ; 
    10 KC0EWA3 KC0EWA3 ; 
    10 KC0EWA4 KC0EWA4 ; 
    10 KC0EWOIP KC0EWOIP ; 
    10 KC0EWSB KC0EWSB ; 
    10 XOSCD XOSCD ; 
    10 XCSCD XCSCD ; 
    10 KC0EWBDT KC0EWBDT ; 
    10 KC0EWDDT KC0EWDDT ; 
    10 KC0EWHDT KC0EWHDT ; 
    10 KC0EWK1 KC0EWK1 ; 
    10 XOTCD XOTCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 KC0EWONR KC0EWONR ; 
      15 KC0EWON1 KC0EWON1 ; 
      15 KC0EWON2 KC0EWON2 ; 
    10 KC0EWO1 KC0EWO1 ; 
    10 KC0EWTM KC0EWTM ; 
      15 KC0EWTMA KC0EWTMA ; 
        20 KC0EWTMH KC0EWTMH ; 
        20 KC0EWTMM KC0EWTMM ; 
    10 KC0EWTH1 KC0EWTH1 ; 
      15 KC0EWTH2 KC0EWTH2 ; 
      15 KC0EWTH3 KC0EWTH3 ; 
      15 KC0EWTH4 KC0EWTH4 ; 
end // end KC0EW01

Record KC0EW02 type basicRecord
  5 KC0EWGR2 KC0EWGR2 ; 
    10 KC0EWCDX KC0EWCDX ; 
    10 KC0EWPDX KC0EWPDX ; 
    10 KC0EWTDX KC0EWTDX ; 
    10 KC0EWBOT KC0EWBOT ; 
    10 OP1KEY OP1KEY [200] ; 
    10 KC0EWTBL KC0EWTBL [200] ; 
      15 KC0EWSEL KC0EWSEL ; 
      15 KC0EWL KC0EWL ; 
        20 KC0EWORD KC0EWORD ; 
          25 KC0EWCUO KC0EWCUO ; 
          25 KC0EWRID KC0EWRID ; 
        20 XOTABRV XOTABRV ; 
        20 KC0EWNDT KC0EWNDT ; 
          25 KC0EWMM1 KC0EWMM1 ; 
          25 KC0EWSL1 KC0EWSL1 ; 
          25 KC0EWDD1 KC0EWDD1 ; 
          25 KC0EWSL2 KC0EWSL2 ; 
          25 KC0EWYY1 KC0EWYY1 ; 
        20 XOSCD XOSCD ; 
        20 KC0EWODT KC0EWODT ; 
          25 KC0EWMO1 KC0EWMO1 ; 
          25 KC0EWSL3 KC0EWSL3 ; 
          25 KC0EWD01 KC0EWD01 ; 
          25 KC0EWSL4 KC0EWSL4 ; 
          25 KC0EWYO1 KC0EWYO1 ; 
        20 XCSCD XCSCD ; 
        20 KC0EWCDT KC0EWCDT ; 
          25 KC0EWMC1 KC0EWMC1 ; 
          25 KC0EWSL5 KC0EWSL5 ; 
          25 KC0EWDC1 KC0EWDC1 ; 
          25 KC0EWSL6 KC0EWSL6 ; 
          25 KC0EWYC1 KC0EWYC1 ; 
        20 KC0EWOP KC0EWOP ; 
        20 KC0EWAA1 KC0EWAA1 ; 
        20 KC0EWAA2 KC0EWAA2 ; 
        20 KC0EWAA3 KC0EWAA3 ; 
        20 KC0EWAA4 KC0EWAA4 ; 
        20 KC0EWSB KC0EWSB ; 
        20 KC0EWCLV KC0EWCLV ; 
        20 KC0EWRSN KC0EWRSN ; 
        20 KC0EWCD1 KC0EWCD1 ; 
        20 KC0EWDS1 KC0EWDS1 ; 
        20 KC0EWCD2 KC0EWCD2 ; 
        20 KC0EWDS2 KC0EWDS2 ; 
        20 KC0EWCD3 KC0EWCD3 ; 
end // end KC0EW02

Record KC0EW03 type basicRecord
  5 KC0EWGR3 KC0EWGR3 ; 
    10 KC0EWIOT KC0EWIOT ; 
    10 KC0EWS1 KC0EWS1 ; 
    10 KC0EWS2 KC0EWS2 ; 
    10 KC0EWS3 KC0EWS3 ; 
    10 KC0EWI1 KC0EWI1 ; 
    10 KC0EWI2 KC0EWI2 ; 
    10 KC0EWI3 KC0EWI3 ; 
end // end KC0EW03

Record KC0EW04 type basicRecord
  5 KC0EWGR4 KC0EWGR4 ; 
    10 KC0EWIOT KC0EWIOT ; 
    10 KC0EWLD KC0EWLD ; 
    10 KC0EWHD KC0EWHD ; 
end // end KC0EW04

// more than 200 orders flag
DataItem KC0EW2FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass not alloc
DataItem KC0EWA1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rel not alloc
DataItem KC0EWA2 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rtc alloc
DataItem KC0EWA3 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// alloc
DataItem KC0EWA4 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pass not alloc
DataItem KC0EWAA1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rel not alloc
DataItem KC0EWAA2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rtc alloc
DataItem KC0EWAA3 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// alloc
DataItem KC0EWAA4 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ar account balance
DataItem KC0EWARB num(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// beginning need date
DataItem KC0EWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem KC0EWBOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reason code 1
DataItem KC0EWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 2
DataItem KC0EWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 3
DataItem KC0EWCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit status date
DataItem KC0EWCDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current index
DataItem KC0EWCDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-value
DataItem KC0EWCLV decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter
DataItem KC0EWCN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0EWCOD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen company id
DataItem KC0EWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KC0EWCON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// page counter
DataItem KC0EWCPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted credit stat date
DataItem KC0EWCT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws customer order number
DataItem KC0EWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KC0EWD01 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0EWDC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0EWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0EWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending    need date
DataItem KC0EWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// displaying next 200 flag
DataItem KC0EWDN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0EWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0EWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted need date
DataItem KC0EWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted need date
DataItem KC0EWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection error flag
DataItem KC0EWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company nbr mismatch msg
DataItem KC0EWEM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status msg
DataItem KC0EWEM3 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of process
DataItem KC0EWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KC0EWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0EWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted cust nbr
DataItem KC0EWFCU char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KC0EWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formated order number
DataItem KC0EWFOR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep first name
DataItem KC0EWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KC0EWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w02 group level
DataItem KC0EWGR2 char(24836)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w03 group level
DataItem KC0EWGR3 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w04 group level
DataItem KC0EWGR4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0e working storage record
DataItem KC0EWGRP char(462)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hi-need-date
DataItem KC0EWHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust need date
DataItem KC0EWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws hold customer order number
DataItem KC0EWHOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator1
DataItem KC0EWI1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator2
DataItem KC0EWI2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator2
DataItem KC0EWI3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io task for iomod
DataItem KC0EWIOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// on-order-amt - alloc-amt
DataItem KC0EWK1 num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen line
DataItem KC0EWL char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lo-need-date
DataItem KC0EWLD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep last name
DataItem KC0EWLST char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0EWMC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0EWMF2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0EWMF3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0EWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0EWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0EWMO1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KC0EWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KC0EWNAM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date formatted
DataItem KC0EWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer total order count
DataItem KC0EWO1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// status date
DataItem KC0EWODT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order amount in process
DataItem KC0EWOIP decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id redefined
DataItem KC0EWON1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-partnumber
DataItem KC0EWON2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem KC0EWONR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order ok to process
DataItem KC0EWOOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order amount in process
DataItem KC0EWOP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem KC0EWORD num(11,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted status date
DataItem KC0EWOT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- too many orders
DataItem KC0EWOVM char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order partition
DataItem KC0EWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem KC0EWPDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem KC0EWPER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 1
DataItem KC0EWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 2
DataItem KC0EWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 3
DataItem KC0EWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reminder
DataItem KC0EWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws nike sub-order number
DataItem KC0EWRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reasons
DataItem KC0EWRSN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iosum1
DataItem KC0EWS1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iosum2
DataItem KC0EWS2 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iosum3
DataItem KC0EWS3 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship billed not on AR
DataItem KC0EWSB decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem KC0EWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select options
DataItem KC0EWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map swap switch
DataItem KC0EWSFL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0EWSL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select next 200 flag
DataItem KC0EWSNX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen store id
DataItem KC0EWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem KC0EWSTP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orders to release table
DataItem KC0EWTBL char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp     index
DataItem KC0EWTDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output formatted
DataItem KC0EWTH1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output hours
DataItem KC0EWTH2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output colon
DataItem KC0EWTH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output minutes
DataItem KC0EWTH4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time hold area
DataItem KC0EWTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// alpha time hold area
DataItem KC0EWTMA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour hold area
DataItem KC0EWTMH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minute hold area
DataItem KC0EWTMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total number of pages
DataItem KC0EWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates ok
DataItem KC0EWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status
DataItem KC0EWXCS char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// screen dept
DataItem KC0EWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KC0EWYC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0EWYO1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0EWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0EWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

