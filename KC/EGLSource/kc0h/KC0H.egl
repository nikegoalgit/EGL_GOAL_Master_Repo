package kc0h;

import corpcom1.*;
import as1.common.ARCREC;
import corpcom1.CCWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXCH01;
import corpcom3.XPXCS01;
import corpcom3.XPXX001;
import corpcom4.XSCCS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XBCTBL;
import corpx1.XBDTBL;
import corpx1.XCCCD;
import corpx1.XCHTBL;
import corpx1.XCRTBL;
import corpx1.XCSCD;
import corpx1.XCSTBL;
import corpx1.XCUTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx2.XOSCD;
import corpx2.XOTABRV;
import corpx2.XOTCD;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUYREC;
import op.common.OP1CSADT;
import op.common.OP1CUNDT;
import op.common.OP1KEY;
import op.common.OP1REC;
import op.common.OP2REC;
import op.common.OP4REC;
import op.common.OP5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA9REC;
import vv.common.VCRCHK01;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0H ****
// ;
// This application will allow the users to hold a single order
// or multiple orders for a given customer or order number.
// If user requested to look a multiple orders, they will
// be displayed page by page and the user will have the
// option of releasing all, some or none of the orders on the
// screen.
// If user is looking at multiple orders, they have the option
// of viewing more information for all orders displayed.
// ;
// Maintenance Log:
//  4/12/89 - DSALZW - Made Credit Life changes, added ability
//                     to view orders, and general re-write of
//                     the application.
//  4/18/89 - DSALZW - added xssegtr
//  4/18/89 - DSALZW - added noncsp logic
// 01/22/90 - DSALZW - don't update orders until after an 'x'
//                     has been processed, ie message 40
// 01/25/90 - DSALZW - change xcc test to greater than 'm'
// 04/02/90 - DSALZW - db changes
// 06/08/90 - CHAERT - add logic for SBNAR field
// 06/12/90 - CHAERT - remove unused records, ophrec and pk1rec
// 06/27/90 - CHAERT - add legal entity security
// 08/07/90 - jwood  - changed cc0hm005,cc0h220,280,350 to use
//                     xcscd as a character field
// 08/30/90 - dsalzw - chgd cc0am010 to defined xot as char
// 09/27/90 - mkille - added pop up window for rtc rsn code
// 09/28/90 - wjohns - remove optag logic
// 03/29/91 - wjohns - added terms and brand tables, and call
//                     to io0470 to get special label instrucs
//                     for view screen.
// 04/09/91 - wjohns - Changed message numbers to match changes
//                     to the cc message file after clean up.
// 05/21/91 - wjohns - Allow users to view single order from
//                     first screen.
// 08/01/91 - wjohns - Renamed from CC0H to KC0H for new
//                     version of CICS.
// 08/09/91 - wjohns - Renamed commarea references.
// 08/27/91 - JWOOD  - CHANGED ALL CC0 TO KC0 PER STANDARDS...
// 09/11/91 - wjohns - Added new credit table and logic to get
//                     orders in proces and shipped/but not
//                     billed amounts from the table instead of
//                     using the ar customer table.
// 10/07/91 - wjohns - Regen for database changes.
// 12/19/91 - wjohns - Allow processing of bulk orders when the
//                     credit check flag on the bulk table is
//                     set to "Y".
// 02/28/92 - wjohns - Initialize TA2REC and TA9REC to avoid
//                       bad date formatting when using these
//                       records.
// 09/30/92 - cancie - replaced vragcy01 with new view vragcy02
// 06/04/93 - cancie - added need date range to map kc0hm001.
//                     added need "to" date kc0hw-need-date-to
//                     to kc0hw01.
//                     convert "from" & "to" need dates, also
//                     date validation in kc0h120.
//                     perform need date edit and check need
//                     date range in kc0h350.
// 11/24/93 - cancie - added reference to op1rec.xcscd of '95'
//                     in proc's kc0h120, kc0h220 and kc0h350.
// 12/14/93 - cancie - Increased map presentation of 'order no'
//                     in km0hm005 (from 10) to 11 spaces.
// 11/30/94 - CHELLM - Replaced xot code on selection map with
//                     xot short abbreviation.
// 07/13/95 - BCourt - Set VCRCHK01 empty, zero fields not fnd.
// 05-19-98   oricha   y2k modifications:  initialize ta2rec
//                     each time ta0040 is called.  kc0h120,
//                     250,360,640.
// 09-21-99   ssank1   Changed map presentation of KC0HM001 ,
//                     KC0HM005 , KC0HM010 and increased the
//                     length of KC0HWRID & KC0HWORD in records
//                     KC0HW01 and KC0HW02 to accomodate 4
//                     digit nike ord id.
// *********************
Program KC0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  CCWREC CCWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0HW01 KC0HW01; // record
  KC0HW02 KC0HW02; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  VCRCHK01 VCRCHK01; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCRTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KC0HM.KC0HM001,  // forms
      KC0HM.KC0HM005, 
      KC0HM.KC0HM010,
      KC0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0H000: KC0H000();
    goto KC0H100; /* go on to Kc0h selection criteria screen*/
    KC0H100: KC0H100();

    goto KC0H100; /* order selection criteria*/


  end // end main
end // end KC0H

// cc0h initialization process
Function KC0H000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders released process                  **/
   /* *********************************************/


  XSENTRY();

  XSSEGTR();

  set KC0HW01 empty; /* working storage 1*/
  set KC0HW02 empty; /* working storage 2*/
  set CCWREC empty; /* Kc working storage*/
  set SQLCA empty;
  set OP1REC empty; /* order header record*/
  set OP2REC empty; /* order item record*/
  set OP5REC empty; /* order address record*/
  set KUCREC empty; /* company record*/
  set KULREC empty; /* store record*/
  set KUMREC empty; /* store address record*/
  set KUYREC empty; /* service rep record*/
  set ARCREC empty; /* a/r record*/
  set VCRCHK01 empty; /* credit record*/
  set VRAGCY02 empty; /* sales rep record*/
  set TA2REC empty; /* date routine record*/
  set TA9REC empty; /* work days routine record*/

  set KC0HM001 initial; /* order selection screen*/
  set KC0HM005 initial; /* order release screen*/
  set KC0HM010 initial; /* order inquiry screen*/

  KC0HW01.KC0HWMS1 = " ORDER# = ";
  KC0HW01.KC0HWMS2 = "   COMPANY# = ";
  KC0HW01.KC0HWMS3 = "   AMT_HELD  = ";


  KC0HW01.KC0HWRF1 = " ORDER(S) WHERE HELD WITH A ORDER VALUE OF ";
  KC0HW01.KC0HWMS4 = " WARNING: OVER 400 ORDERS SELECTED,";
  KC0HW01.KC0HWMS5 = " ONLY FIRST 400 DISPLAYED";
  KC0HW01.KC0HWMF1 = " COMPANY CREDIT STATUS = ";
  KC0HW01.KC0HWMF2 = " COMPANY NUMBER ON ORDER = ";
  KC0HW01.KC0HWMF3 = " CREDIT STATUS OF ORDER = ";


end // end KC0H000

// order selection criteria
Function KC0H100()
   /* *******************************************/
   /* order selection screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* 5. process one order or                 **/
   /* 6. process a set of orders              **/
                                           /* **/
   /* *******************************************/

  KC0HW01.KC0HWERR = "N"; /* init error flag*/
  KC0HW01.KC0HWEFL = "N"; /* init selection error*/
  KC0HW01.KC0HWUOK = "Y"; /* updates ok flag*/
  KC0HM001.KC0HMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0HM001.KC0HMANM = "KC0H100"; /* set screen name*/
  KC0HW01.KC0HWFLG = "1"; /* selection criteria flag*/


  KC0HM001.KC0HWMSG = KC0HW01.KC0HWMSG;

  converse KC0HM001 ;

  KC0HW01.KC0HWMSG = " ";
  KC0HM001.KC0HWMSG = " ";


  KC0H110(); /* edit special keys/fast paths*/

  if (KC0HW01.KC0HWERR == "N") /* if no errors*/
    KC0H120(); /* edit screen input*/
  end


  if (KC0HW01.KC0HWERR == "N") /* if no errors*/
    if (KC0HW01.KC0HWFLG == "1")
      KC0H200(); /* process one order*/
      if (KC0HW01.KC0HWVFL == "Y")
        KC0HW01.KC0HWVFL = "N";
      else
        if (KC0HW01.KC0HWEFL == "N") /* if no error on selection screen*/
          set KC0HM001 initial;
        end
      end
    else
      if (KC0HW01.KC0HWFLG == "2")
        KC0H300(); /* process a set of orders*/
        if (KC0HW01.KC0HWEFL == "N") /* if no error on selection*/
          set KC0HM001 initial;
        end
      else
        converseLib.validationFailed(1); /* invalid option message*/
      end
    end
  end

end // end KC0H100

// edit special keys
Function KC0H110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/


   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0H"; /* comming from appl*/
    XSEXIT();
    KC0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KC0HM001.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0HM001.CATOAP;
      COMMAREA.CAITEM = KC0HM001.CAITEM;
      COMMAREA.CAFROMAP = "KC0H";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0HW01.KC0HWERR = "Y";
      set KC0HM001.CATOAP cursor, bold;
    else
      set KC0HM001.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0HM001.CATOAP > " ")
      KC0HW01.KC0HWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0HM001.CATOAP cursor, bold;
      return;
    else
      set KC0HM001.CATOAP modified;
    end
  end


   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0H";
    XSPF1();
    KC0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0H";
    XSEXIT();
    KC0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0H";
    XSPF4();
    KC0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
  end

   /* **************************************/
   /* edit pf6 key*/
   /* **************************************/

  if (converseVar.eventKey is pf6) /* view single order*/
    KC0HW01.KC0HWVFL = "Y";
    return;
  end

  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0HW01.KC0HWERR = "Y";



end // end KC0H110

// edit order selection screen
Function KC0H120()
   /* **********************************************/
    /* edit the orders selection criteria screen **/
    /* -- edits for clean input                  **/
    /* -- determines if one or more than one     **/
       /* order was selected for processing      **/
                                  /* **/
   /* **********************************************/


  set KC0HM001.KUCCOID cursor, initialAttributes;
  set KC0HM001.KUMSTRID initialAttributes;
  set KC0HM001.XNXCD initialAttributes;
  set KC0HM001.XGPCD initialAttributes;
  set KC0HM001.OP1CUOID initialAttributes;
  set KC0HM001.OP1NORID initialAttributes;
  set KC0HM001.KC0HMCDT initialAttributes;
  set KC0HM001.KC0HMNDT initialAttributes;
  set KC0HM001.KC0HM-ORDER-TYPE initialAttributes;
  set KC0HM001.XCSCD initialAttributes;

   /* ***************************************************/
   /* edit credit status code*/
   /* ***************************************************/

  if (KC0HM001.XCSCD != "  ") /* credit status entered*/
    if (KC0HM001.XCSCD in XCSTBL.XCSCD
     && KC0HM001.XCSCD != "99")
      if (KC0HM001.XCSCD == "00"
       || KC0HM001.XCSCD == "01"
       || KC0HM001.XCSCD == "90"
       || KC0HM001.XCSCD == "91"
       || KC0HM001.XCSCD == "95"
       || KC0HM001.XCSCD == "97"
       || KC0HM001.XCSCD == "98")
        /* next sentence*/
      else
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(20); /* invalid credit status code*/
        set KC0HM001.XCSCD cursor, bold;
        return;
      end
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(20); /* invalid credit status code*/
      set KC0HM001.XCSCD cursor, bold;
      return;
    end
  end

   /* ***************************************************/
   /* edit order type code*/
   /* ***************************************************/

  if (KC0HM001.KC0HM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0HM001.KC0HM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0HM001.KC0HM-ORDER-TYPE != "99")
      KC0HW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0HM001.KC0HM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0HW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0HM001.KC0HM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end

   /* ***************************************************/
   /* edit "from" need date*/
   /* ***************************************************/

   /* --------- y2k in begin ----*/
  set TA2REC empty;
   /* --------- y2k in end ------*/
  if (KC0HM001.KC0HMNDT > " ")
    TA2REC.TA2GRGA = KC0HM001.KC0HMNDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0HW01.OP1CUNDT = TA2REC.TA2GRGGN;
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0HM001.KC0HMNDT cursor, bold;
      return;
    end
  else
    KC0HW01.OP1CUNDT = 0;
  end

   /* ***************************************************/
   /* edit "to" need date*/
   /* ***************************************************/

   /* --------- y2k in begin ----*/
  set TA2REC empty;
   /* --------- y2k in end ------*/
  if (KC0HM001.KC0HM-NEED-DATE-TO > " ")
    TA2REC.TA2GRGA = KC0HM001.KC0HM-NEED-DATE-TO;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0HW01.KC0HW-NEED-DATE-TO = TA2REC.TA2GRGGN;
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0HM001.KC0HM-NEED-DATE-TO cursor, bold;
      return;
    end
  else
    KC0HW01.KC0HW-NEED-DATE-TO = 0;
  end

   /* ***************************************************/
   /* "from" and "to" need date validation*/
   /* ***************************************************/

  if (KC0HW01.OP1CUNDT != 0)
    if (KC0HW01.KC0HW-NEED-DATE-TO != 0)
      if (KC0HW01.OP1CUNDT == KC0HW01.KC0HW-NEED-DATE-TO)
        /* next sentence ;*/
      else
        if (KC0HW01.OP1CUNDT < KC0HW01.KC0HW-NEED-DATE-TO)
           /* next sentence ;*/
        else
          KC0HW01.KC0HWERR = "Y"; /* set error flag*/
          KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(7); /* invalid date*/
          set KC0HM001.KC0HMNDT cursor, bold;
          set KC0HM001.KC0HM-NEED-DATE-TO cursor, bold;
          return;
        end
      end
    end
  end

   /* ***************************************************/
   /* edit credit check date*/
   /* ***************************************************/

   /* --------- y2k in begin ----*/
  set TA2REC empty;
   /* --------- y2k in end ------*/
  if (KC0HM001.KC0HMCDT > " ")
    TA2REC.TA2GRGA = KC0HM001.KC0HMCDT;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0HW01.OP1CSADT = TA2REC.TA2GRGGN;
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0HM001.KC0HMCDT cursor, bold;
      return;
    end
  else
    KC0HW01.OP1CSADT = 0;
  end

   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/

  if (KC0HM001.KUCCOID > 0)
    KC0HW01.KUCCOID = KC0HM001.KUCCOID;
    KC0H130(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(18); /* invalid company; not on file*/
      set KC0HM001.KUCCOID cursor, bold;
      return;
    else
      if (KUCREC.XCCCD > "M ")
        KC0HW01.XCCCD = KUCREC.XCCCD;
        KC0HW01.KC0HWMSG = KC0HW01.KC0HWEM1;
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(19); /* invalid company credit status*/
        set KC0HM001.KUCCOID cursor, bold;
        return;
      end

         /* perform edit on customer/user id security*/

      KC0H140();
    end
  else
    if (KC0HM001.KUMSTRID > 0)
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(24); /* not allowed*/
      set KC0HM001.KUMSTRID cursor, bold;
      return;
    end
    if (KC0HM001.XNXCD > 0)
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* not allowed*/
      set KC0HM001.XNXCD cursor, bold;
      return;
    end
    if (KC0HM001.XGPCD > " ")
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(26); /* not allowed*/
      set KC0HM001.XGPCD cursor, bold;
      return;
    end
  end

   /* ********************************************/
   /* edit order number                        **/
   /* ********************************************/

  if (KC0HM001.OP1CUOID > 0 /* one order selection*/
   && KC0HM001.OP1NORID > 0)
    if (KC0HM001.KUCCOID > 0
     || KC0HW01.KC0HWVFL == "Y") /* view single order*/
      KC0HW01.KC0HWFLG = "1"; /* one order selected flag*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(22); /* customer number required*/
      set KC0HM001.KUCCOID cursor, bold;
      return;
    end
  else
    if (KC0HM001.OP1CUOID > 0
     || KC0HM001.KUCCOID > 0)
      KC0HW01.KC0HWFLG = "2"; /* a set of orders selected*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(5); /* must have at least one of this ones*/
      set KC0HM001.KUCCOID cursor, bold;
      return;
    end
  end


end // end KC0H120

// get company
Function KC0H130()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/


  KUCREC.KUCCOID = KC0HW01.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1LOCAT[2] = "KC0H130";
    TA1REC.TA1LOCAT[3] = "KC0H130";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSCCS02(); /* abort*/
  end


end // end KC0H130

// check security
Function KC0H140()
   /* **********************************************/
    /* checks users security for this company    **/
   /* **********************************************/

  KC0HWSUB = 1;
  KC0HWFND = "N";
  KC0HWTBE = " ";
  KC0HWLGE = " ";

   /* loop thru xcu table reading all records with the user id*/

  while (KC0HWFND == "N")
    if (COMMAREA.CAUSERID in XCUTBL.CAUSERID from KC0HWSUB)
      KC0HWSUB = sysVar.arrayIndex;

       /* find the xcr credit resp to match the xcu*/

      if (XCUTBL.XCRCD[KC0HWSUB] in XCRTBL.XCRCD)
        if (XCRTBL.XLECD[sysVar.arrayIndex] == KUCREC.XLECD)
           /* everything checks out, user has security*/

          KC0HWTBE = "N";
          KC0HWFND = "Y";
        else
          KC0HWLGE = "N";
        end
      else

         /* credit region invalid, read more users*/

        KC0HWTBE = "Y";
      end
    else

       /* legal entity not valid between co and user*/

      if (KC0HWLGE == "N")
        KC0HWFND = "Y";
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(46);
        if (KC0HM001.KUCCOID > 0)
          set KC0HM001.KUCCOID cursor, bold;
        end

         /* user is not on xcu table*/

      else
        if (KC0HWTBE == " ")
          KC0HWTBE = "Y";
          KC0HWFND = "Y";
          KC0HW01.KC0HWERR = "Y"; /* set error flag*/
          KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(48);
        else

           /* cred resp not found on xcr table*/

          KC0HWFND = "Y";
          KC0HW01.KC0HWERR = "Y"; /* set error flag*/
          KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(45);
        end
      end
    end
    if (KC0HWFND == "N") /* no rec found*/
      KC0HWSUB = KC0HWSUB + 1; /* set up to read the next xcu*/
    end
  end

end // end KC0H140

// process one order
Function KC0H200()
   /* ***********************************************/
        /* hold one order                         **/
   /* 1. selects order header record              **/
   /* 2. edit the order record                    **/
   /* 3. gets order item record                   **/
   /* 4. updates database records                 **/
                                               /* **/
   /* ***********************************************/

   /* ***********************************************/
    /* get order header record                    **/
   /* ***********************************************/

  KC0HW01.KC0HWCOD = KC0HM001.OP1CUOID;
  OP1REC.OP1CUOID = KC0HW01.KC0HWCOD;
  OP1REC.OP1PARTN = KC0HW01.KC0HWPAR;
  OP1REC.OP1NORID = KC0HM001.OP1NORID;

  KC0H210(); /* get order header record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    set KC0HM001.OP1CUOID cursor, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(3); /* order not found*/
    set KC0HM001.OP1CUOID cursor, bold;
    set KC0HM001.OP1NORID bold;
    return;
  end

  KC0H220(); /* edit order record*/

  if (KC0HW01.KC0HWERR == "N")
    KC0HW01.KC0HWALV = 0; /* set allocated-value to zero*/
    KC0HW01.KC0HWALQ = 0; /* set allocated-qty to zero*/
    KC0HW01.KC0HWOOQ = 0; /* set on-order-qty to zero*/
    KC0HW01.KC0HWOOV = 0; /* set on-order-value to zero*/
    if (OP1REC.XOSCD == "OP"
     || OP1REC.XOSCD == "AL")
      if (OP1REC.XOSCD == "OP")
        KC0HW01.KC0HWOOV = OP1REC.OP1OVALU;
        KC0HW01.KC0HWOOQ = OP1REC.OP1OTUNT;
        KC0HW01.KC0HWALV = 0;
        KC0HW01.KC0HWALQ = 0;
      end
      if (OP1REC.XOSCD == "AL")
        KC0HW01.KC0HWOOV = OP1REC.OP1CKAMT;
        KC0HW01.KC0HWOOQ = OP1REC.OP1CCKOQ;
        KC0HW01.KC0HWALV = OP1REC.OP1CKAMT;
        KC0HW01.KC0HWALQ = OP1REC.OP1CCKOQ;
      end
    else
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0H230(); /* add up items for an order*/

    end

    if (KC0HW01.KC0HWVFL == "Y") /* view single order*/
      KC0H640(); /* format order screen*/
      KC0H610(); /* display order information*/
    else
      KC0H250(); /* update databases*/

      if (KC0HW01.KC0HWERR == "N")
        KC0HW01.KC0HWNOR = OP1REC.OP1NORID;
        KC0HW01.KC0HWDOT = ".";
        KC0HW01.KC0HWORN = OP1REC.OP1CUOID;
        KC0HW01.KC0HWCUN = OP1REC.KUCCOID;
        KC0HW01.KC0HWVL1 = KC0HW01.KC0HWOOV;
        KC0HW01.KC0HWMSG = KC0HW01.KC0HWMSS;
        KC0HW01.KC0HWERR = "Y";
        converseLib.validationFailed(12); /* updates ok*/
      end
    end
  end



end // end KC0H200

// get order header record
Function KC0H210()


   /* ********************************************************/
   /* *   select one order header record*/
   /* ********************************************************/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get one nike sub-order*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -911)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0H210";
    TA1REC.TA1LOCAT[4] = "IO0430";
  end


end // end KC0H210

// edit order record
Function KC0H220()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/

      /* edit bulk order code*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "N")
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(21); /* bulk order msg*/
      return;
    end
  end

   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/

  if (OP1REC.XOSCD == "IP"
   || OP1REC.XOSCD == "SH"
   || OP1REC.XOSCD == "XL"
   || OP1REC.XOSCD == "AL")
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(16); /* invalid order status*/
    return;
  end

   /* ***********************************************/
      /* edit customer edit*/
   /* ***********************************************/

  if (KC0HM001.KUCCOID == OP1REC.KUCCOID
   || KC0HW01.KC0HWVFL == "Y") /* view single order*/
    /* next sentence*/
  else
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
    KC0HW01.KC0HWCON = OP1REC.KUCCOID;
    KC0HW01.KC0HWMSG = KC0HW01.KC0HWEM2;
    converseLib.validationFailed(17); /* customer not the same*/
    set KC0HM001.KUCCOID cursor, bold;
    return;
  end

   /* ***********************************************/
      /* edit store number*/
   /* ***********************************************/

  if (KC0HM001.KUMSTRID > 0)
    if (KC0HM001.KUMSTRID == OP1REC.KUMSTRID)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(33); /* invalid order type*/
      set KC0HM001.KUMSTRID cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* edit department number*/
   /* ***********************************************/

  if (KC0HM001.XNXCD > 0)
    if (KC0HM001.XNXCD == OP1REC.XNXCD)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(37); /* invalid order type*/
      set KC0HM001.XNXCD cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* edit gpc code*/
   /* ***********************************************/

  if (KC0HM001.XGPCD > " ")
    if (KC0HM001.XGPCD == OP1REC.XGPCD)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(38); /* invalid order type*/
      set KC0HM001.XGPCD cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/

  if (KC0HM001.XCSCD != "  ")
    if (KC0HM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0HW01.KC0HWXCS = OP1REC.XCSCD;
      KC0HW01.KC0HWMSG = KC0HW01.KC0HWEM3;
      set KC0HM001.XCSCD cursor, bold;
      return;
    end
  else
    if (OP1REC.XCSCD == "00"
     || OP1REC.XCSCD == "01"
     || OP1REC.XCSCD == "90"
     || OP1REC.XCSCD == "91"
     || OP1REC.XCSCD == "95"
     || OP1REC.XCSCD == "97"
     || OP1REC.XCSCD == "98")
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0HW01.KC0HWXCS = OP1REC.XCSCD;
      KC0HW01.KC0HWMSG = KC0HW01.KC0HWEM3;
      return;
    end
  end

   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/

  if (KC0HM001.KC0HM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0HM001.KC0HM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0HM001.KC0HM-ORDER-TYPE != "99")
      KC0HW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0HM001.KC0HM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0HW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0HM001.KC0HM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end

   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/

  if (KC0HW01.OP1CUNDT > 0)
    if (KC0HW01.OP1CUNDT == OP1REC.OP1CUNDT)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0HM001.KC0HMNDT cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/

  if (KC0HW01.OP1CSADT > 0)
    if (KC0HW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0HM001.KC0HMCDT cursor, bold;
      return;
    end
  end

   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/

  if (KC0HM001.OP1CUPO > " ")
    if (KC0HM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(36); /* cust po numbers do not match*/
      set KC0HM001.OP1CUPO cursor, bold;
      return;
    end
  end

end // end KC0H220

// add up order items
Function KC0H230()
   /* *******************************************/
   /* add up order-quantities for each order  **/
   /* *******************************************/

  KC0HW01.KC0HWEOI = "N"; /* set end-of-items flag to "no"*/

   /* *************************************/
   /* open cursor                       **/
   /* *************************************/

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0H230";
    TA1REC.TA1LOCAT[3] = "KC0H230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02();
  end

   /* *************************************/
   /* select first record               **/
   /* *************************************/

  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get first line-item*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0H230";
    TA1REC.TA1LOCAT[3] = "GET 1ST";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end

   /* *************************************/
   /* process all items                 **/
   /* *************************************/

  while (KC0HW01.KC0HWEOI == "N") /* while not end-of-items*/
    KC0HW01.KC0HWALQ = KC0HW01.KC0HWALQ + OP2REC.OP2TALCQ;
    KC0HW01.KC0HWLIV = OP2REC.OP2TALCQ * OP2REC.OP2AUPRC;
    KC0HW01.KC0HWALV = KC0HW01.KC0HWALV + KC0HW01.KC0HWLIV;
    KC0HW01.KC0HWOOQ = KC0HW01.KC0HWOOQ + OP2REC.OP2TONOQ;
    KC0HW01.KC0HWLIV = OP2REC.OP2TONOQ * OP2REC.OP2AUPRC;
    KC0HW01.KC0HWOOV = KC0HW01.KC0HWOOV + KC0HW01.KC0HWLIV;
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get next line-item*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no more line-items*/
        KC0HW01.KC0HWEOI = "Y"; /* set end-of-items to "yes"*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        TA1REC.TA1LOCAT[2] = "KC0H230";
        TA1REC.TA1LOCAT[3] = "GET NXT";
        TA1REC.TA1LOCAT[4] = "IO0440";
        XSCCS02(); /* abort program*/
      end
    end
  end

   /* *************************************/
   /* close cursor                      **/
   /* *************************************/

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0H230";
    TA1REC.TA1LOCAT[3] = "KC0H230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end



end // end KC0H230

// update databases
Function KC0H250()
   /* ****************************************/
   /* this process updates the databases   **/
   /* related to holding an order          **/
   /* ****************************************/

   /* -------- y2k in begin ------*/
  set TA2REC empty;
   /* -------- y2k in end --------*/
  TA2REC.TA2DTOPT = "GETDATE"; /* get current date for*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* update all records*/

  KC0H260(); /* update company record*/

  if (KC0HW01.KC0HWUOK == "Y")

    KC0H280(); /* update the order record*/

  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset changes*/
  end




end // end KC0H250

// update credit
Function KC0H260()

   /* ************************************************************/
   /* *update credit orders-in-process and #-ords-on-hold*/
   /* ************************************************************/

  KC0H290(); /* get credit record*/
  if (SQLCA.VAGen_SQLCODE == 0)

    VCRCHK01.ARCORPRO = VCRCHK01.ARCORPRO - OP1REC.OP1CKAMT;
    VCRCHK01.ARCORPRO = VCRCHK01.ARCORPRO + KC0HW01.KC0HWALV;

    VCRCHK01.ZZZCHGDT = TA2REC.TA2GRGGN;
    VCRCHK01.ZZZCHGTM = TA2REC.TA2TIMHM;

    VCRCHK01.ARCORHLD = VCRCHK01.ARCORHLD + 1;

    call "IO6010" ("U ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        KC0HW01.KC0HWUOK = "N"; /* update ok flag*/
        KC0HW01.KC0HWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(23); /* deadlock problem*/
      else
        TA1REC.TA1DBASE = "DACRCV";
        TA1REC.TA1TBLVU = "VCRCHK01";
        TA1REC.TA1LOCAT[2] = "KC0H260";
        TA1REC.TA1LOCAT[3] = "KC0H260";
        TA1REC.TA1LOCAT[4] = "IO6010";
        XSCCS02(); /* abort*/
      end
    end

  else
    TA1REC.TA1DBASE = "DACRCV";
    TA1REC.TA1TBLVU = "VCRCHK01";
    TA1REC.TA1LOCAT[2] = "KC0H260";
    TA1REC.TA1LOCAT[3] = "KC0H260";
    TA1REC.TA1LOCAT[4] = "IO6010";
    XSCCS02(); /* abort*/
  end


end // end KC0H260

// get ar record
Function KC0H265()
   /* ********************************************************/
   /* *   get accounts receivable record*/
   /* ********************************************************/


  ARCREC.KUCCOID = KC0HW01.KUCCOID;

  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0HW01.KC0HWMSG = " WARNING: NO A/R INFORMATION FOR THIS CUSTOMER";
      ARCREC.ARABAL = 0;
      ARCREC.ARAICRMO = 0;
      ARCREC.ARADSITM = 0;
      ARCREC.ARAUDDUC = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VARCUS01";
      TA1REC.TA1LOCAT[2] = "KC0H380";
      TA1REC.TA1LOCAT[3] = "KC0H380";
      TA1REC.TA1LOCAT[4] = "IO4160";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0H265

// update order
Function KC0H280()
   /* *********************************************************/
   /* *  update order header record                          **/
   /* *********************************************************/

   /* ----- previous credit information --------*/
  OP1REC.OP1PCSCD = OP1REC.XCSCD;
  OP1REC.OP1PCSDT = OP1REC.OP1CSADT;
  OP1REC.OP1PCSTM = OP1REC.OP1CSATM;

   /* ----- current date and time --------------*/
  OP1REC.OP1CSADT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.OP1CSATM = TA2REC.TA2TIMHM;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* ----- number of days on hold -------------*/
  OP1REC.OP1DCHLD = 0;

   /* ------------- user id ------------------*/
  if (COMMAREA.CAUSERID in XCUTBL.CAUSERID)
    OP1REC.OP1CRLMR = XCUTBL.XCUCD[sysVar.arrayIndex]; /* last maint rep*/
  else
    OP1REC.OP1CRLMR = COMMAREA.CAUSERID;
  end

   /* ------------- pgm id ------------------*/
  OP1REC.OP1CRLMP = "KC0H"; /* last maint program*/

   /* ------- credit reason codes ----------*/
  OP1REC.XCHCD[3] = OP1REC.XCHCD[2];
  OP1REC.XCHCD[2] = OP1REC.XCHCD[1];
  OP1REC.XCHCD[1] = 11; /* credit manager hold reason*/


   /* -------- credit status ----------------*/
  OP1REC.XCSCD = "20"; /* set cr-stat to on-hold*/


   /* -------- credit amt & qty -------------*/
  OP1REC.OP1CKAMT = KC0HW01.KC0HWALV;
  OP1REC.OP1CCKOQ = KC0HW01.KC0HWALQ;



   /* ********************************************************/
   /* *      update the order header record*/
   /* ********************************************************/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* update order header*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0HW01.KC0HWUOK = "N"; /* update ok flag*/
      KC0HW01.KC0HWERR = "Y"; /* set error-flag*/
      converseLib.validationFailed(3); /* order not found*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[2] = "KC0H280";
      TA1REC.TA1LOCAT[3] = "KC0H280";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end


end // end KC0H280

// get credit record
Function KC0H290()
   /* ********************************************************/
   /* *   get credit record*/
   /* 7-13-95 BCourt Set record empty, zero fields not found.*/
   /* ********************************************************/

  set VCRCHK01 empty;

  VCRCHK01.KUCCOID = KC0HW01.KUCCOID;

  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0HW01.KC0HWMSG = " WARNING: NO CREDIT INFO FOR THIS CUSTOMER";
      VCRCHK01.ARCORPRO = 0;
      VCRCHK01.ARCORHLD = 0;
      VCRCHK01.ARCSBNAR = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCRCHK01";
      TA1REC.TA1LOCAT[2] = "KC0H290";
      TA1REC.TA1LOCAT[3] = "KC0H290";
      TA1REC.TA1LOCAT[4] = "IO6010";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0H290

// process a set of orders
Function KC0H300()
   /* **********************************************/
   /* * this process will drive the holding of a  **/
   /* * set of orders                             **/
   /* * it will:                                  **/
   /* *   1. select all orders for a customer     **/
   /* *   2. prepare the screen for display       **/
   /* *   3. check special keys pressed           **/
   /* *   4. edit screen input                    **/
   /* **********************************************/

  KC0HW01.KC0HWEND = "N"; /* end-of-process*/
  KC0HW01.KC0HWMSG = " ";

  KC0H310(); /* get all orders*/

  KC0HW02.KC0HWTDX = 0; /* init temp table index*/
  KC0HW02.KC0HWCDX = 0; /* init current table index*/
  KC0HW02.KC0HWPDX = 0; /* init previoustable index*/
  KC0HW01.KC0HWSDX = 0; /* init current screen index*/
  KC0HW01.KC0HWCPG = 1; /* current page*/

  if (KC0HW01.KC0HWERR == "N") /* no errors*/
    KC0HW01.KC0HWFFL = "Y"; /* set first time flag*/
    KC0H370(); /* prepare first screen*/
    KC0HW02.KC0HWCDX = KC0HW02.KC0HWTDX; /* current table index*/

    while (KC0HW01.KC0HWEND == "N")
      KC0H400(); /* process all orders selected*/
    end

  end
end // end KC0H300

// select all orders
Function KC0H310()


  KC0H320(); /* declare cursor*/

  if (KC0HW01.KC0HWERR == "N") /* no errors*/

    /* *****************************************/
     /* read first order*/
    /* *****************************************/

    KC0HW01.KC0HWEOF = "N"; /* reading orders flag*/
    KC0H330(); /* get first order*/
    if (KC0HW01.KC0HWEOF == "Y")
      KC0H340(); /* close order cursor*/
      KC0HW01.KC0HWERR = "Y";
      KC0HW01.KC0HWEFL = "Y";
      converseLib.validationFailed(27); /* no orders for this select*/
      return;
    end

  else
    return;
  end

   /* *****************************************/
   /* * if customer not entered on selection **/
   /* * screen, assign order customer        **/
   /* *****************************************/

  if (KC0HM001.KUCCOID > 0)
    if (KC0HM001.KUCCOID == OP1REC.KUCCOID)
      /* next sentence*/
    else
      KC0HW01.KC0HWERR = "Y"; /* set error flag*/
      KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
      KC0HW01.KC0HWCON = OP1REC.KUCCOID;
      KC0HW01.KC0HWMSG = KC0HW01.KC0HWEM2;
      converseLib.validationFailed(17); /* customer not the same*/
      set KC0HM001.KUCCOID cursor, bold;
      return;
    end
  else
    KC0HW01.KUCCOID = OP1REC.KUCCOID; /* set customer nbr*/
    KC0H130(); /* read company record*/
    KC0H140(); /* edit for legal entity*/
    if (KC0HW01.KC0HWERR == "Y")
      set KC0HM001.OP1CUOID cursor;
      return;
    end
  end


   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/

  set KC0HW02 empty; /* empty ws-table*/

  KC0HW01.KC0HWCN1 = 0; /* order count*/

  while (KC0HW01.KC0HWEOF == "N" /* while there are orders to process*/
   && KC0HW01.KC0HWCN1 < 400) /* array is full*/

    KC0HW01.KC0HWOOK = "Y"; /* order ok to process  flag*/
    KC0HW01.KC0HWRIT = "Y"; /* need to read items for order flag*/
    KC0HW01.KC0HWALV = 0; /* allocated-value*/
    KC0HW01.KC0HWALQ = 0; /* allocated-qty*/
    KC0HW01.KC0HWOOV = 0; /* on-order-value*/
    KC0HW01.KC0HWOOQ = 0; /* on-order-qty*/

    KC0H350(); /* check order criteria*/

    if (KC0HW01.KC0HWOOK == "Y")
      KC0HW01.KC0HWCN1 = KC0HW01.KC0HWCN1 + 1; /* add 1 to total orders*/

      if (KC0HW01.KC0HWRIT == "Y") /* if need to read items for order*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0H230(); /* add-up items for an order*/
      end

      KC0H360(); /* load ws-table of orders*/
    end
    KC0H330(); /* get next order*/

  end

  KC0H340(); /* close order cursor*/

  KC0HW02.KC0HWBOT = KC0HW02.KC0HWCDX; /* bottom of ws-talble*/

  KC0HW01.KC0HWTPG = KC0HW02.KC0HWBOT / 13;

  KC0HW01.KC0HWREM = KC0HW02.KC0HWBOT % 13;

  if (KC0HW01.KC0HWREM > 0)
    KC0HW01.KC0HWTPG = KC0HW01.KC0HWTPG + 1;
  end


  if (KC0HW01.KC0HWCN1 == 400) /* array is full*/
    KC0HW01.KC0HWMSG = KC0HW01.KC0HWOVM; /* set message*/
  end

  if (KC0HW01.KC0HWCN1 == 0)
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    KC0HW01.KC0HWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(29); /* orders do not match the criteria*/
  end



end // end KC0H310

// declare order select cursor
Function KC0H320()

   /* *****************************************/
   /* * all orders selected will be read into**/
   /* * a working storage table              **/
   /* *****************************************/

  set SQLCA empty;

  if (KC0HM001.OP1CUOID > 0
   && KC0HM001.OP1NORID == 0)
    KC0HW01.KC0HWCOD = KC0HM001.OP1CUOID;
    OP1REC.OP1CUOID = KC0HW01.KC0HWCOD;
    OP1REC.OP1PARTN = KC0HW01.KC0HWPAR;
    OP1REC.OP1NORID = -1;
    call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ords for cust*/
  else
    OP1REC.KUCCOID = KC0HM001.KUCCOID;
    if (KC0HM001.KUMSTRID > 0)
      OP1REC.KUMSTRID = KC0HM001.KUMSTRID;
    else
      OP1REC.KUMSTRID = -1;
    end
    if (KC0HM001.XNXCD > 0)
      OP1REC.XNXCD = KC0HM001.XNXCD;
    else
      OP1REC.XNXCD = -1;
    end
    if (KC0HM001.XGPCD > " ")
      OP1REC.XGPCD = KC0HM001.XGPCD;
    else
      OP1REC.XGPCD = " ";
    end

    call "IO0430" ("S2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0H320";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end


end // end KC0H320

// get order "select" record
Function KC0H330()
   /* ********************************************************/
   /* *   get the next order header record*/
   /* ********************************************************/


  if (KC0HM001.OP1CUOID > 0
   && KC0HM001.OP1NORID == 0)
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  else
    call "IO0430" ("2N", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0HW01.KC0HWEOF = "Y"; /* set end-of-file flag to 'yes'*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0H330";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end



end // end KC0H330

// close cursors
Function KC0H340()

   /* *****************************************/
   /* * close cursors*/
   /* *****************************************/


  if (KC0HM001.OP1CUOID > 0
   && KC0HM001.OP1NORID == 0)
    call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ords for cust*/
  else
    call "IO0430" ("C2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0H340";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end


end // end KC0H340

// edit order selected from set
Function KC0H350()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/

   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/

  if (KC0HW01.OP1CUNDT > 0)
    if (KC0HW01.KC0HW-NEED-DATE-TO == 0)
      if (KC0HW01.OP1CUNDT == OP1REC.OP1CUNDT)
        /* next sentence*/
      else
        KC0HW01.KC0HWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end

   /* ***********************************************/
      /* check if within need date range*/
   /* ***********************************************/

  if (KC0HM001.KC0HMNDT != " ")
    if (KC0HM001.KC0HM-NEED-DATE-TO != " ")
      if (OP1REC.OP1CUNDT >= KC0HW01.OP1CUNDT)
        if (OP1REC.OP1CUNDT <= KC0HW01.KC0HW-NEED-DATE-TO)
          /* next sentence                  /* order is OK*/
        else
          KC0HW01.KC0HWOOK = "N"; /* do not process order*/
          return;
        end
      else
        KC0HW01.KC0HWOOK = "N"; /* do not process order*/
        return;
      end
    end
  end

   /* ***********************************************/
      /* edit bulk order code*/
   /* ***********************************************/

  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDCRCFL[sysVar.arrayIndex] == "Y")
      /* next sentence   ; order ok*/
    else
      KC0HW01.KC0HWOOK = "N"; /* do not process order*/
      return;
    end
  end

   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/

  if (OP1REC.XOSCD == "IP"
   || OP1REC.XOSCD == "SH"
   || OP1REC.XOSCD == "XL"
   || OP1REC.XOSCD == "AL")
    KC0HW01.KC0HWOOK = "N"; /* order not needed*/
    return;
  end

  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "AL")
    KC0HW01.KC0HWRIT = "N"; /* do not need to read item records*/
    if (OP1REC.XOSCD == "OP")
      KC0HW01.KC0HWOOV = OP1REC.OP1OVALU;
      KC0HW01.KC0HWOOQ = OP1REC.OP1OTUNT;
      KC0HW01.KC0HWALV = 0;
      KC0HW01.KC0HWALQ = 0;
    end
    if (OP1REC.XOSCD == "AL")
      KC0HW01.KC0HWOOV = OP1REC.OP1CKAMT;
      KC0HW01.KC0HWOOQ = OP1REC.OP1CCKOQ;
      KC0HW01.KC0HWALV = OP1REC.OP1CKAMT;
      KC0HW01.KC0HWALQ = OP1REC.OP1CCKOQ;
    end
  else
    KC0HW01.KC0HWRIT = "Y"; /* do need to read item records*/
  end


   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/

  if (KC0HM001.XCSCD != " ")
    if (KC0HM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0HW01.KC0HWOOK = "N"; /* order not needed*/
      return;
    end
  else
    if (OP1REC.XCSCD == "00"
     || OP1REC.XCSCD == "01"
     || OP1REC.XCSCD == "90"
     || OP1REC.XCSCD == "91"
     || OP1REC.XCSCD == "95"
     || OP1REC.XCSCD == "97"
     || OP1REC.XCSCD == "98")
      /* next sentence*/
    else
      KC0HW01.KC0HWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/

  if (KC0HM001.KC0HM-ORDER-TYPE > " ")
    if (KC0HW01.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0HW01.KC0HWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/

  if (KC0HW01.OP1CSADT > 0)
    if (KC0HW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0HW01.KC0HWOOK = "N"; /* order not needed*/
      return;
    end
  end

   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/

  if (KC0HM001.OP1CUPO > " ")
    if (KC0HM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0HW01.KC0HWOOK = "N"; /* order not needed*/
      return;
    end
  end



end // end KC0H350

// load ws-table
Function KC0H360()
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/

  KC0HW02.KC0HWCDX = KC0HW02.KC0HWCDX + 1; /* add 1 to index table*/

  KC0HW02.KC0HWSEL[KC0HWCDX] = " ";

   /* ***************************************/
    /* prepare order number*/
   /* ***************************************/

  KC0HW02.OP1KEY[KC0HWCDX] = OP1REC.OP1KEY;
  KC0HW02.KC0HWCUP[KC0HWCDX] = OP1REC.OP1CUOID;
  KC0HW02.KC0HWRID[KC0HWCDX] = OP1REC.OP1NORID;

   /* ***************************************/
     /* prepare need date*/
   /* ***************************************/

   /* -------- y2k in begin -------*/
  set TA2REC empty;
   /* -------- y2k in begin -------*/
  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  KC0HW01.KC0HWDT1 = TA2REC.TA2GRGA;

  KC0HW02.KC0HWMM1[KC0HWCDX] = KC0HW01.KC0HWMM1;
  KC0HW02.KC0HWDD1[KC0HWCDX] = KC0HW01.KC0HWDD1;
  KC0HW02.KC0HWYY1[KC0HWCDX] = KC0HW01.KC0HWYY1;
  KC0HW02.KC0HWSL1[KC0HWCDX] = "/";
  KC0HW02.KC0HWSL2[KC0HWCDX] = "/";

   /* ***************************************/
    /* prepare order type abreviation*/
    /* prepare order status*/
    /* prepare credit status*/
   /* ***************************************/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0HW02.XOTABRV[KC0HWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0HW02.XOTABRV[KC0HWCDX] = "N FND";
  end

  KC0HW02.XOSCD[KC0HWCDX] = OP1REC.XOSCD; /* order status*/

  KC0HW02.XCSCD[KC0HWCDX] = OP1REC.XCSCD; /* credit status*/

   /* ***************************************/
   /* prepare credit reasons*/
   /* ***************************************/

  KC0HW02.KC0HWCD1[KC0HWCDX] = OP1REC.XCHCD[1];
  KC0HW02.KC0HWCD2[KC0HWCDX] = OP1REC.XCHCD[2];
  KC0HW02.KC0HWCD3[KC0HWCDX] = OP1REC.XCHCD[3];
  KC0HW02.KC0HWDS1[KC0HWCDX] = "-";
  KC0HW02.KC0HWDS2[KC0HWCDX] = "-";

   /* ***************************************/
   /* prepare order quantites*/
   /* ***************************************/

  KC0HW01.KC0HWCKA = OP1REC.OP1CKAMT;
  KC0HW02.KC0HWOIP[KC0HWCDX] = KC0HW01.KC0HWCKA;
  KC0HW02.KC0HWOOV[KC0HWCDX] = KC0HW01.KC0HWOOV;
  KC0HW02.KC0HWALV[KC0HWCDX] = KC0HW01.KC0HWALV;



end // end KC0H360

// prepare first screen
Function KC0H370()
   /* *********************************************/
   /* *  prepare the first screen to be displayed**/
   /* *********************************************/

  KC0H130(); /* get kucrec company record*/
  KC0H265(); /* get arcrec ar record*/
  KC0H290(); /* get credit record*/

  set KC0HM005 initial; /* reset screen*/

   /* ******************************/
   /* load A/R data into screen*/
   /* ******************************/

  KC0HM005.KC0HMDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0HM005.KC0HMANM = "KC0H370"; /* converse name*/


  KC0HW01.KC0HWFCU = "******************"; /* full cust number*/
  KC0HW01.KC0HWPR1 = ".";
  KC0HW01.KC0HWPR2 = ".";
  KC0HW01.KC0HWPR3 = ".";

  KC0HW01.KC0HWCOI = KC0HW01.KUCCOID; /* move company number*/

  if (KC0HM001.KUMSTRID > 0) /* move store*/
    KC0HW01.KC0HWSTO = KC0HM001.KUMSTRID;
  end

  if (KC0HM001.XNXCD > 0) /* move department*/
    KC0HW01.KC0HWXNX = KC0HM001.XNXCD;
  end

  if (KC0HM001.XGPCD > " ") /* move gpc code*/
    KC0HW01.KC0HWGPC = KC0HM001.XGPCD;
  end

  KC0HM005.KC0HWFCU = KC0HW01.KC0HWFCU; /* customer number*/

  KC0HM005.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  KC0HM005.KUCCRLIN = KUCREC.KUCCRLIN; /* credit line*/

  if (KC0HW01.KC0HWFFL == "Y")
    KC0HW01.KC0HWFFL = " "; /* unset first time flag*/
    KC0HM005.KC0HWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0HM005.KC0HWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
    KC0HW01.KC0HWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0HW01.KC0HWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
  else
    KC0HM005.KC0HWINP = KC0HW01.KC0HWINP; /* orders in process*/
    KC0HM005.KC0HWHDC = KC0HW01.KC0HWHDC; /* orders on hold*/
  end


  KC0HW01.KC0HWARB = 0;

  KC0HW01.KC0HWARB = ARCREC.ARABAL - ARCREC.ARAICRMO - ARCREC.ARADSITM;
  KC0HW01.KC0HWARB = KC0HW01.KC0HWARB - ARCREC.ARAUDDUC;
  KC0HM005.ARABAL = KC0HW01.KC0HWARB;
  KC0HM005.ARCSBNAR = VCRCHK01.ARCSBNAR;
  KC0HM005.KC0HWCN1 = KC0HW01.KC0HWCN1; /* nbr of orders selected*/
  KC0HM005.KC0HWXPO = KC0HW01.KC0HWARB + KC0HM005.KC0HWINP;
  KC0HM005.KC0HWXPO = KC0HM005.KC0HWXPO + VCRCHK01.ARCSBNAR;

  KC0HM005.KC0HWCPG = KC0HW01.KC0HWCPG; /* set current page*/
  KC0HM005.KC0HWTPG = KC0HW01.KC0HWTPG; /* set total page*/


  KC0HW01.KC0HWSTP = 0; /* init screen top*/

  while (KC0HW01.KC0HWSTP < 13
   && KC0HW02.KC0HWTDX < KC0HW02.KC0HWBOT)
    KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP + 1;
    KC0HW02.KC0HWTDX = KC0HW02.KC0HWTDX + 1;
    if (KC0HW02.KC0HWSEL[KC0HWTDX] == "H")
      set KC0HM005.KC0HMSEL[KC0HWSTP] skip, bold;
      set KC0HM005.KC0HWOOV[KC0HWSTP] skip, bold;
    end
    if (KC0HW02.KC0HWSEL[KC0HWTDX] == "M")
      set KC0HM005.KC0HMORD[KC0HWSTP] skip, bold;
      KC0HM005.KC0HMSEL[KC0HWSTP] = " ";
    else
      KC0HM005.KC0HMSEL[KC0HWSTP] = KC0HW02.KC0HWSEL[KC0HWTDX];
    end
    KC0HM005.KC0HMORD[KC0HWSTP] = KC0HW02.KC0HWORD[KC0HWTDX];
    KC0HM005.XOTABRV[KC0HWSTP] = KC0HW02.XOTABRV[KC0HWTDX];
    KC0HM005.XOSCD[KC0HWSTP] = KC0HW02.XOSCD[KC0HWTDX];
    KC0HM005.XCSCD[KC0HWSTP] = KC0HW02.XCSCD[KC0HWTDX];
    KC0HM005.KC0HWNDT[KC0HWSTP] = KC0HW02.KC0HWNDT[KC0HWTDX];
    KC0HM005.KC0HWRSN[KC0HWSTP] = KC0HW02.KC0HWRSN[KC0HWTDX];
    KC0HM005.KC0HWOIP[KC0HWSTP] = KC0HW02.KC0HWOIP[KC0HWTDX];
    KC0HM005.KC0HWOOV[KC0HWSTP] = KC0HW02.KC0HWOOV[KC0HWTDX];
    KC0HM005.KC0HWALV[KC0HWSTP] = KC0HW02.KC0HWALV[KC0HWTDX];
  end

  KC0HW01.KC0HWSDX = KC0HW01.KC0HWSTP; /* current screen index*/
  if (KC0HW02.KC0HWTDX == KC0HW02.KC0HWBOT
   && KC0HW01.KC0HWERR == "N")
    converseLib.validationFailed(4); /* last record display*/
  end

  while (KC0HW01.KC0HWSTP < 13)
    KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP + 1;
    set KC0HM005.KC0HMSEL[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HMORD[KC0HWSTP] skip, invisible;
    set KC0HM005.XOTABRV[KC0HWSTP] skip, invisible;
    set KC0HM005.XOSCD[KC0HWSTP] skip, invisible;
    set KC0HM005.XCSCD[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HWNDT[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HWRSN[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HWOIP[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HWOOV[KC0HWSTP] skip, invisible;
    set KC0HM005.KC0HWALV[KC0HWSTP] skip, invisible;
  end

end // end KC0H370

// process all orders selected
Function KC0H400()
   /* ***********************************************/
   /* this process will allow the user to hold    **/
   /* orders from a display of all orders selected**/
   /* via the Kc0hm001 screen map                 **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/

  KC0HW01.KC0HWERR = "N"; /* set error flag*/
  KC0HM005.KC0HWMSG = KC0HW01.KC0HWMSG; /* credit message number*/


  converse KC0HM005 ;

  KC0HW01.KC0HWMSG = " ";
  KC0HM005.KC0HWMSG = " ";
  set KC0HM005.KC0HMOPT cursor, initialAttributes; /* init cursor*/

  KC0H410(); /* edit special keys*/

  if (KC0HW01.KC0HWERR == "N")
    KC0H430(); /* edit screen*/
  end

  if (KC0HW01.KC0HWERR == "N")
    KC0H750(); /* edit page counter*/
  end



end // end KC0H400

// pfkey processing for cc0hm005
Function KC0H410()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/

   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pa2) /* back to order selection menu Kc0hm001*/
    KC0HW01.KC0HWERR = "Y";
    KC0HW01.KC0HWEND = "Y";
    return;
  end

   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/

  if (converseVar.eventKey is enter)
    if (KC0HM005.CATOAP > " ") /* fast path*/
      if ("X" in KC0HW02.KC0HWSEL) /* is there any updates pending*/
        KC0HW01.KC0HWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0HM005.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0HM005.CATOAP;
      COMMAREA.CAITEM = KC0HM005.CAITEM;
      COMMAREA.CAFROMAP = "KC0H";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0HW01.KC0HWERR = "Y";
      set KC0HM005.CATOAP cursor, bold;
    else
      set KC0HM005.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0HM005.CATOAP > " ")
      KC0HW01.KC0HWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0HM005.CATOAP cursor, bold;
      return;
    else
      set KC0HM005.CATOAP modified;
    end
  end

   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/

  if ("X" in KC0HW02.KC0HWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* exit screen*/
     || converseVar.eventKey is pf4) /* goal menu screen*/
      KC0HW01.KC0HWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end

   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0H";
    XSPF1();
    KC0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
    return;
  end

   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0HW01.KC0HWERR = "Y";
    KC0HW01.KC0HWEND = "Y";
    return;
  end

   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0H";
    XSPF4();
  end


   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf7)
    KC0H420(); /* scroll up*/
    return;
  end

   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf8)
    KC0H460(); /* scroll down*/
    return;
  end

   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf9) /* show windowing screen*/
    KC0H500();
    return;
  end

   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf6)
    KC0H600(); /* view selected orders*/
    return;
  end

   /* ***********************************/
     /* pf12 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf12)
    KC0H700(); /* update orders*/
    return;
  end


   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf21) /* show windowing screen*/
    KC0H550();
    return;
  end

  KC0HW01.KC0HWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/



end // end KC0H410

// scroll up process
Function KC0H420()


   /* *********************************************************/
          /* scrolling up and editing takes place*/
   /* *********************************************************/


  if (KC0HW02.KC0HWPDX == 0) /* is it at the top of the screen*/
    converseLib.validationFailed(14); /* can not scroll up*/
    KC0HW01.KC0HWERR = "Y";
    return;
  end

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "N")
    KC0HW02.KC0HWCDX = KC0HW02.KC0HWPDX; /* current eq  previous*/
    KC0HW01.KC0HWSTP = 13;

    while (KC0HW01.KC0HWSTP >= 1 /* load the screen with the wstable*/
     && KC0HW02.KC0HWPDX >= 1)
      set KC0HM005.KC0HMSEL[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HMORD[KC0HWSTP] initialAttributes;
      set KC0HM005.XOTABRV[KC0HWSTP] initialAttributes;
      set KC0HM005.XOSCD[KC0HWSTP] initialAttributes;
      set KC0HM005.XCSCD[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWNDT[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWRSN[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWOIP[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWOOV[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWALV[KC0HWSTP] initialAttributes;
      if (KC0HW02.KC0HWSEL[KC0HWPDX] == "H")
        set KC0HM005.KC0HMSEL[KC0HWSTP] skip, bold;
        set KC0HM005.KC0HWOOV[KC0HWSTP] skip, bold;
      end
      if (KC0HW02.KC0HWSEL[KC0HWPDX] == "M")
        set KC0HM005.KC0HMORD[KC0HWSTP] skip, bold;
        KC0HM005.KC0HMSEL[KC0HWSTP] = " ";
      else
        KC0HM005.KC0HMSEL[KC0HWSTP] = KC0HW02.KC0HWSEL[KC0HWPDX];
      end
      KC0HM005.KC0HMORD[KC0HWSTP] = KC0HW02.KC0HWORD[KC0HWPDX];
      KC0HM005.XOTABRV[KC0HWSTP] = KC0HW02.XOTABRV[KC0HWPDX];
      KC0HM005.XOSCD[KC0HWSTP] = KC0HW02.XOSCD[KC0HWPDX];
      KC0HM005.XCSCD[KC0HWSTP] = KC0HW02.XCSCD[KC0HWPDX];
      KC0HM005.KC0HWNDT[KC0HWSTP] = KC0HW02.KC0HWNDT[KC0HWPDX];
      KC0HM005.KC0HWRSN[KC0HWSTP] = KC0HW02.KC0HWRSN[KC0HWPDX];
      KC0HM005.KC0HWOIP[KC0HWSTP] = KC0HW02.KC0HWOIP[KC0HWPDX];
      KC0HM005.KC0HWOOV[KC0HWSTP] = KC0HW02.KC0HWOOV[KC0HWPDX];
      KC0HM005.KC0HWALV[KC0HWSTP] = KC0HW02.KC0HWALV[KC0HWPDX];
      KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP - 1;
      KC0HW02.KC0HWPDX = KC0HW02.KC0HWPDX - 1;
    end


    KC0HW01.KC0HWERR = "Y"; /* reconverse the screen*/

    KC0HW01.KC0HWCPG = KC0HW01.KC0HWCPG - 1;
    KC0HM005.KC0HWCPG = KC0HW01.KC0HWCPG;

    if (KC0HW02.KC0HWPDX < 1)
      KC0HW02.KC0HWPDX = 0;
    end

  end



end // end KC0H420

// edit hold screen cc0hm005
Function KC0H430()


   /* ***************************************/
   /* edit main update option*/
   /* ***************************************/
  set KC0HM005.KC0HWCPG modified;

  if (KC0HM005.KC0HMOPT == " " /* if valid entered codes*/
   || KC0HM005.KC0HMOPT == "H")
    set KC0HM005.KC0HMOPT modified;
  else
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(39); /* invalid code*/
    set KC0HM005.KC0HMOPT cursor, bold;
  end


   /* ***************************************/
   /* update working table*/
   /* ***************************************/

  if (KC0HW01.KC0HWERR == "N") /* if not errors*/

    KC0HW01.KC0HWSTP = 0; /* set screen index*/
    KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* temp ws-table index*/

    while (KC0HW01.KC0HWSTP < 13 /* go thru the screen*/
     && KC0HW02.KC0HWTDX < KC0HW02.KC0HWBOT)
      KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP + 1; /* increment screen index*/
      KC0HW02.KC0HWTDX = KC0HW02.KC0HWTDX + 1; /* increment table index*/

      /* ***************************************/
       /* check for select option 'n'         **/
      /* ***************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == "N")
        if (KC0HW02.KC0HWSEL[KC0HWTDX] == "X")
          KC0H440(); /* refresh order and OIP data*/
        end
      end

      /* ***************************************/
       /* check for select option ' ' and 'h' **/
      /* ***************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == " ")
        if (KC0HM005.KC0HMOPT == "H")
          if (KC0HW02.KC0HWSEL[KC0HWTDX] == " ")
            KC0H450(); /* update OIP*/
            if (converseVar.eventKey is pf12)
              KC0HW01.KC0HWERR = "Y"; /* set error flag*/
              converseLib.validationFailed(40); /* press enter key before pf12*/
            end
          end
        end
      end

      /* *******************************************/
       /* check for select options 's' and 'x'    **/
      /* *******************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == "S")
        if (KC0HW02.KC0HWSEL[KC0HWTDX] == " ")
          KC0H450(); /* update oip*/
          if (converseVar.eventKey is pf12)
            KC0HW01.KC0HWERR = "Y"; /* set error flag*/
            converseLib.validationFailed(40); /* press enter key before pf12*/
          end
        end
      end


      /* *******************************************/
       /* check for select option  'v'            **/
      /* *******************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == "V")
        if (KC0HW02.KC0HWSEL[KC0HWTDX] == "X")
          KC0H440();
        end
        KC0HW02.KC0HWSEL[KC0HWTDX] = "V";
      end

      /* *******************************************/
       /* check for unselecting option 'v'        **/
      /* *******************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == " ")
        if (KC0HW02.KC0HWSEL[KC0HWTDX] == "V")
          KC0HW02.KC0HWSEL[KC0HWTDX] = " ";
        end
      end

      /* *****************************/
        /* update screen selections*/
      /* *****************************/

      KC0HM005.KC0HMSEL[KC0HWSTP] = KC0HW02.KC0HWSEL[KC0HWTDX];

      /* ***************************************/
       /* check for select option 'h'*/
       /* also check for 'm'odified orders*/
      /* ***************************************/

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == "H")
        set KC0HM005.KC0HMSEL[KC0HWSTP] skip, bold;
        set KC0HM005.KC0HWOOV[KC0HWSTP] skip, bold;
      end

      if (KC0HM005.KC0HMSEL[KC0HWSTP] == "M")
        KC0HM005.KC0HMSEL[KC0HWSTP] = " ";
        set KC0HM005.KC0HMORD[KC0HWSTP] skip, bold;
      end

    end
  end

  KC0HM005.KC0HMOPT = " "; /* clear option fields*/


end // end KC0H430

// refresh order data
Function KC0H440()

   /* ***************************************/
   /* this process reads the order and     **/
   /* refreshes the quantities because it  **/
   /* had been reset to released before    **/
   /* ***************************************/

  OP1REC.OP1KEY = KC0HW02.OP1KEY[KC0HWTDX];

  KC0H210(); /* get order record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0HW01.KC0HWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    return;
  end


  KC0HW01.KC0HWOOK = "Y"; /* order ok to process  flag*/
  KC0HW01.KC0HWRIT = "Y"; /* need to read items for order flag*/
  KC0HW01.KC0HWALV = 0; /* allocated-value*/
  KC0HW01.KC0HWALQ = 0; /* allocated-qty*/
  KC0HW01.KC0HWOOV = 0; /* on-order-value*/
  KC0HW01.KC0HWOOQ = 0; /* on-order-qty*/

  KC0H350(); /* check order criteria*/

  if (KC0HW01.KC0HWOOK == "Y") /* the order is ok to process*/

    if (KC0HW01.KC0HWRIT == "Y") /* need to read the items*/
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0H230(); /* add-up items for an order*/
    end

    /* ********************************************/
     /* update the quantities on the order table*/
     /* and on the screen*/
    /* ********************************************/

    KC0HW01.KC0HWCKA = OP1REC.OP1CKAMT;
    KC0HW02.KC0HWOIP[KC0HWTDX] = KC0HW01.KC0HWCKA;
    KC0HW02.KC0HWOOV[KC0HWTDX] = KC0HW01.KC0HWOOV;
    KC0HW02.KC0HWALV[KC0HWTDX] = KC0HW01.KC0HWALV;

    KC0HW02.KC0HWSEL[KC0HWTDX] = " ";

    KC0HM005.KC0HWOIP[KC0HWSTP] = KC0HW02.KC0HWOIP[KC0HWTDX];
    KC0HM005.KC0HWOOV[KC0HWSTP] = KC0HW02.KC0HWOOV[KC0HWTDX];
    KC0HM005.KC0HWALV[KC0HWSTP] = KC0HW02.KC0HWALV[KC0HWTDX];

    KC0HM005.KC0HWINP = KC0HM005.KC0HWINP - KC0HW01.KC0HWALV;
    KC0HM005.KC0HWINP = KC0HM005.KC0HWINP + KC0HW01.KC0HWCKA;
    KC0HW01.KC0HWINP = KC0HW01.KC0HWINP - KC0HW01.KC0HWALV;
    KC0HW01.KC0HWINP = KC0HW01.KC0HWINP + KC0HW01.KC0HWCKA;
    KC0HM005.KC0HWXPO = KC0HW01.KC0HWARB + KC0HM005.KC0HWINP;
    KC0HM005.KC0HWXPO = KC0HM005.KC0HWXPO + VCRCHK01.ARCSBNAR;

    KC0HM005.KC0HWHDC = KC0HM005.KC0HWHDC - 1;
    KC0HW01.KC0HWHDC = KC0HW01.KC0HWHDC - 1;
  else
    KC0HW02.XOSCD[KC0HWTDX] = OP1REC.XOSCD;
    KC0HW02.XCSCD[KC0HWTDX] = OP1REC.XCSCD;
    KC0HW02.KC0HWSEL[KC0HWTDX] = "M";
  end

end // end KC0H440

// update OIP
Function KC0H450()
   /* **************************************************/
    /* -- update the OIP in the order and for the company*/
    /* -- update the orders on hold counter*/
   /* **************************************************/

  KC0HM005.KC0HWINP = KC0HM005.KC0HWINP + KC0HW02.KC0HWALV[KC0HWTDX];
  KC0HM005.KC0HWINP = KC0HM005.KC0HWINP - KC0HW02.KC0HWOIP[KC0HWTDX];
  KC0HW01.KC0HWINP = KC0HW01.KC0HWINP + KC0HW02.KC0HWALV[KC0HWTDX];
  KC0HW01.KC0HWINP = KC0HW01.KC0HWINP - KC0HW02.KC0HWOIP[KC0HWTDX];
  KC0HM005.KC0HWXPO = KC0HW01.KC0HWARB + KC0HM005.KC0HWINP;
  KC0HM005.KC0HWXPO = KC0HM005.KC0HWXPO + VCRCHK01.ARCSBNAR;

  KC0HW02.KC0HWSEL[KC0HWTDX] = "X";

  KC0HW02.KC0HWOIP[KC0HWTDX] = KC0HW02.KC0HWALV[KC0HWTDX];
  KC0HM005.KC0HWOIP[KC0HWSTP] = KC0HW02.KC0HWALV[KC0HWTDX];

  KC0HM005.KC0HWHDC = KC0HM005.KC0HWHDC + 1;
  KC0HW01.KC0HWHDC = KC0HW01.KC0HWHDC + 1;


end // end KC0H450

// scroll down process
Function KC0H460()


   /* *********************************************************/
          /* scrolling down and editing takes place*/
   /* *********************************************************/


  if (KC0HW02.KC0HWCDX == KC0HW02.KC0HWBOT) /* if at the bottom of table*/
    converseLib.validationFailed(4); /* can not scroll down*/
    KC0HW01.KC0HWERR = "Y";
    return;
  end

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "N")
    KC0HW01.KC0HWSTP = 0;
    KC0HW02.KC0HWPDX = KC0HW02.KC0HWCDX;

    while (KC0HW01.KC0HWSTP < 13 /* load the screen with the ws table*/
     && KC0HW02.KC0HWCDX < KC0HW02.KC0HWBOT)
      KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP + 1;
      KC0HW02.KC0HWCDX = KC0HW02.KC0HWCDX + 1;
      set KC0HM005.KC0HMSEL[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HMORD[KC0HWSTP] initialAttributes;
      set KC0HM005.XOTABRV[KC0HWSTP] initialAttributes;
      set KC0HM005.XOSCD[KC0HWSTP] initialAttributes;
      set KC0HM005.XCSCD[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWNDT[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWRSN[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWOIP[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWOOV[KC0HWSTP] initialAttributes;
      set KC0HM005.KC0HWALV[KC0HWSTP] initialAttributes;
      if (KC0HW02.KC0HWSEL[KC0HWCDX] == "H") /* orders already updated*/
        set KC0HM005.KC0HMSEL[KC0HWSTP] skip, bold;
        set KC0HM005.KC0HWOOV[KC0HWSTP] skip, bold;
      end
      if (KC0HW02.KC0HWSEL[KC0HWCDX] == "M") /* order couldn't be updated*/
        set KC0HM005.KC0HMORD[KC0HWSTP] skip, bold;
        KC0HM005.KC0HMSEL[KC0HWSTP] = " ";
      else
        KC0HM005.KC0HMSEL[KC0HWSTP] = KC0HW02.KC0HWSEL[KC0HWCDX];
      end
      KC0HM005.KC0HMORD[KC0HWSTP] = KC0HW02.KC0HWORD[KC0HWCDX];
      KC0HM005.XOTABRV[KC0HWSTP] = KC0HW02.XOTABRV[KC0HWCDX];
      KC0HM005.XOSCD[KC0HWSTP] = KC0HW02.XOSCD[KC0HWCDX];
      KC0HM005.XCSCD[KC0HWSTP] = KC0HW02.XCSCD[KC0HWCDX];
      KC0HM005.KC0HWNDT[KC0HWSTP] = KC0HW02.KC0HWNDT[KC0HWCDX];
      KC0HM005.KC0HWRSN[KC0HWSTP] = KC0HW02.KC0HWRSN[KC0HWCDX];
      KC0HM005.KC0HWOIP[KC0HWSTP] = KC0HW02.KC0HWOIP[KC0HWCDX];
      KC0HM005.KC0HWOOV[KC0HWSTP] = KC0HW02.KC0HWOOV[KC0HWCDX];
      KC0HM005.KC0HWALV[KC0HWSTP] = KC0HW02.KC0HWALV[KC0HWCDX];
    end

    KC0HW01.KC0HWSDX = KC0HW01.KC0HWSTP;
                                   /* reset current screen index*/
    if (KC0HW02.KC0HWCDX == KC0HW02.KC0HWBOT
     && KC0HW01.KC0HWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end

    while (KC0HW01.KC0HWSTP < 13)
      KC0HW01.KC0HWSTP = KC0HW01.KC0HWSTP + 1;
      set KC0HM005.KC0HMSEL[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HMORD[KC0HWSTP] skip, invisible;
      set KC0HM005.XOTABRV[KC0HWSTP] skip, invisible;
      set KC0HM005.XOSCD[KC0HWSTP] skip, invisible;
      set KC0HM005.XCSCD[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HWNDT[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HWRSN[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HWOIP[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HWOOV[KC0HWSTP] skip, invisible;
      set KC0HM005.KC0HWALV[KC0HWSTP] skip, invisible;
    end

    KC0HW01.KC0HWERR = "Y"; /* reconverse the screen*/

    KC0HW01.KC0HWCPG = KC0HW01.KC0HWCPG + 1;
    KC0HM005.KC0HWCPG = KC0HW01.KC0HWCPG;

  end



end // end KC0H460

// windowing routine
Function KC0H500()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "Y")
    return;
  end

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "            CREDIT STATUS ";

  while (XX0XW02.XX0XWEND == "N")
    XPXCS01(); /* perform credit status pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* previous to current index*/
  KC0H370(); /* refresh the screen*/



end // end KC0H500

// windowing routine
Function KC0H550()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "Y")
    return;
  end

  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "  RTC REASON CODE         ";

  while (XX0XW02.XX0XWEND == "N")
    XPXCH01(); /* perform rtc rsn codes pop up window*/

  end

  converseLib.clearScreen();
   /* reset screen*/

  KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* previous to current index*/
  KC0H370(); /* refresh the screen*/



end // end KC0H550

// view selected orders
Function KC0H600()
   /* ***********************************/
    /* user has requested to inquiry*/
    /* on selected orders*/
   /* ***********************************/

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "Y")
    return;
  end

  if ("V" in KC0HW02.KC0HWSEL) /* if any order has been selected*/
    /* next sentence                  for viewing*/
  else
    KC0HW01.KC0HWERR = "Y"; /* set error message*/
    converseLib.validationFailed(32); /* no orders have been marked for view*/
    return;
  end


  KC0HW02.KC0HWTDX = 0; /* prepare table index*/

  while (KC0HW02.KC0HWTDX < KC0HW02.KC0HWBOT)
    if (KC0HW01.KC0HWERR == "Y")
      KC0H610(); /* display order information*/
    else
      KC0HW02.KC0HWTDX = KC0HW02.KC0HWTDX + 1; /* add to the index*/
      if (KC0HW02.KC0HWSEL[KC0HWTDX] == "V")
        KC0H630(); /* read order header*/
        KC0H640(); /* format order screen*/
        KC0H610(); /* display order information*/
        KC0HW02.KC0HWSEL[KC0HWTDX] = " "; /* clear select ind*/
      end
    end
  end

  KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* move previous to temp*/

  KC0H370(); /* update screen display*/




end // end KC0H600

// order inquiry screen
Function KC0H610()
   /* *******************************************/
   /* order inquiry screen process            **/
   /* 1. prepares working variables           **/
   /* 2. reads the order header               **/
   /* 3. format the order screen              **/
   /* 4. present the screen                   **/
   /* 5. edit pf keys                         **/
                                           /* **/
   /* *******************************************/

  KC0HW01.KC0HWERR = "N";
  KC0HM010.KC0HMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0HM010.KC0HMANM = "KC0H610"; /* set screen name*/

  KC0HM010.VAGen_EZEMSG = KC0HW01.KC0HWMSG;

  converse KC0HM010 ;

  KC0HW01.KC0HWMSG = " ";
  KC0HM010.VAGen_EZEMSG = " ";

  KC0H620(); /* edit pf keys*/



end // end KC0H610

// pf key processing for cc0hm010
Function KC0H620()
   /* ********************************************/
     /* edit pf keys                           **/
   /* ********************************************/

   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/

  if (converseVar.eventKey is enter)
    if (KC0HM010.CATOAP > " ") /* fast path*/
      if ("X" in KC0HW02.KC0HWSEL) /* is there any updates pending*/
        KC0HW01.KC0HWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0HM010.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0HM010.CATOAP;
      COMMAREA.CAITEM = KC0HM010.CAITEM;
      COMMAREA.CAFROMAP = "KC0H";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0HW01.KC0HWERR = "Y";
      set KC0HM010.CATOAP modified, bold;
    else
      set KC0HM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0HM010.CATOAP > " ")
      KC0HW01.KC0HWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0HM010.CATOAP cursor, bold;
      return;
    else
      set KC0HM010.CATOAP modified;
    end
  end


   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/

  if ("X" in KC0HW02.KC0HWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* exit screen*/
      KC0HW01.KC0HWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end

   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0H";
    XSPF1();
    KC0HM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0HW01.KC0HWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to credit screen*/
    KC0HW02.KC0HWTDX = 0;
    while (KC0HW02.KC0HWTDX < KC0HW02.KC0HWBOT)
      KC0HW02.KC0HWTDX = KC0HW02.KC0HWTDX + 1;
      if (KC0HW02.KC0HWSEL[KC0HWTDX] == "V") /* clear out remaining 'v's*/
        KC0HW02.KC0HWSEL[KC0HWTDX] = " ";
      end
    end
    return;
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0H"; /* comming from appl*/
    XSPF4();
  end


  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0HW01.KC0HWERR = "Y";



end // end KC0H620

// get order header record
Function KC0H630()
   /* ************************************************/
     /* read the order header for inquiry          **/
   /* ************************************************/

  OP1REC.OP1CUOID = KC0HW02.KC0HWCUP[KC0HWTDX];
  OP1REC.OP1NORID = KC0HW02.KC0HWRID[KC0HWTDX];
  KC0HW01.KC0HWCOD = KC0HW02.KC0HWCUP[KC0HWTDX];
  OP1REC.OP1PARTN = KC0HW01.KC0HWPAR;

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for order*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0H"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0H630"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0430"; /* i/o mod*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key*/
    XSCCS02();
  end


end // end KC0H630

// format order inquiry screen
Function KC0H640()
   /* **********************************************/
    /* format the order inquiry screen           **/
    /* -- move fields to the map                 **/
                                  /* **/
   /* **********************************************/

  set KC0HM010 initial; /* repaint the screen each time*/

   /* **********************************************/
    /* Order Number                              **/
   /* **********************************************/
  KC0HW01.KC0HWCUP = OP1REC.OP1CUOID; /* order number*/
  KC0HW01.KC0HWRID = OP1REC.OP1NORID; /* nike  number*/
  KC0HM010.KC0HMORD = KC0HW01.KC0HWORD; /* formatted order number*/

   /* **********************************************/
    /* Customer Number                           **/
   /* **********************************************/
  KC0HW01.KC0HWFCU = "******************"; /* fill cust number*/
  KC0HW01.KC0HWPR1 = ".";
  KC0HW01.KC0HWPR2 = ".";
  KC0HW01.KC0HWPR3 = ".";

  KC0HW01.KC0HWCOI = OP1REC.KUCCOID; /* customer number*/

  if (OP1REC.KUMSTRID > 0)
    KC0HW01.KC0HWSTO = OP1REC.KUMSTRID; /* store number*/
  end
  if (OP1REC.XNXCD > 0)
    KC0HW01.KC0HWXNX = OP1REC.XNXCD; /* dept number*/
  end
  if (OP1REC.XGPCD > " ")
    KC0HW01.KC0HWGPC = OP1REC.XGPCD; /* dept number*/
  end

  KC0HM010.KC0HWFCU = KC0HW01.KC0HWFCU;

   /* **********************************************/
    /* Order Information                         **/
   /* **********************************************/
  KC0HM010.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0HM010.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0HM010.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  KC0HM010.OP1SPGM = OP1REC.SP1ID; /* sales program*/

   /* **********************************************/
    /* Order Type Code                           **/
   /* **********************************************/
  KC0HM010.XOTCD = OP1REC.XOTCD; /* order type*/
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0HM010.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0HM010.XOTABRV = "N FND";
  end

   /* **********************************************/
    /* Order Brand Code                          **/
   /* **********************************************/
  KC0HM010.XBCCD = OP1REC.XBCCD; /* brand code*/
  if (OP1REC.XBCCD in XBCTBL.XBCCD)
    KC0HM010.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBCCD == " ")
      KC0HM010.XBCABRV = " ";
    else
      KC0HM010.XBCABRV = "N FND";
    end
  end

   /* **********************************************/
    /* Order GPC Code                            **/
   /* **********************************************/
  KC0HM010.XGPCD = OP1REC.XGPCD;
  if (OP1REC.XGPCD in XGPTBL.XGPCD)
    KC0HM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KC0HM010.XGPABRV = "N FND";
  end


   /* **********************************************/
    /* Order Division Code                       **/
   /* **********************************************/
   /* MOVE OP1REC.XDVCD TO KC0HM010.XDVCD;*/
   /* IF OP1REC.XDVCD IN XDVTBL.XDVCD;*/
    /* MOVE XDVTBL.XDVABRV(EZETST) TO KC0HM010.XDVABRV;*/
   /* ELSE ;*/
    /* MOVE 'N FND' TO KC0HM010.XDVABRV;*/
   /* END ;*/


   /* **********************************************/
    /* Order Bulk Code                           **/
   /* **********************************************/
  KC0HM010.XBDCD = OP1REC.XBDCD;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    KC0HM010.XBDABRV = XBDTBL.XBDABRV[sysVar.arrayIndex];
  else
    KC0HM010.XBDABRV = "N FND";
  end

   /* **********************************************/
    /* Order Terms Code                          **/
   /* **********************************************/
  KC0HM010.XPTCD = OP1REC.XPTCD;
  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    KC0HM010.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
  else
    KC0HM010.XPTABRV = "N FND";
  end

   /* **********************************************/
    /* Customer Need Date                        **/
   /* **********************************************/
   /* -------- y2k in begin -------*/
  set TA2REC empty;
   /* -------- y2k in end ---------*/
  if (OP1REC.OP1CUNDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0HW01.KC0HWDT1 = TA2REC.TA2GRGA;
    KC0HW01.KC0HWMM2 = KC0HW01.KC0HWMM1;
    KC0HW01.KC0HWDD2 = KC0HW01.KC0HWDD1;
    KC0HW01.KC0HWYY2 = KC0HW01.KC0HWYY1;
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1CUNDT = KC0HW01.KC0HWDT2;
  else
    KC0HW01.KC0HWYY2 = "YY";
    KC0HW01.KC0HWMM2 = "MM";
    KC0HW01.KC0HWDD2 = "DD";
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1CUNDT = KC0HW01.KC0HWDT2;
  end

   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
   /* -------- y2k in begin -------*/
  set TA2REC empty;
   /* -------- y2k in end ---------*/
  if (OP1REC.OP1DSBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0HW01.KC0HWDT1 = TA2REC.TA2GRGA;
    KC0HW01.KC0HWMM2 = KC0HW01.KC0HWMM1;
    KC0HW01.KC0HWDD2 = KC0HW01.KC0HWDD1;
    KC0HW01.KC0HWYY2 = KC0HW01.KC0HWYY1;
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1DSBDT = KC0HW01.KC0HWDT2;
  else
    KC0HW01.KC0HWYY2 = "YY";
    KC0HW01.KC0HWMM2 = "MM";
    KC0HW01.KC0HWDD2 = "DD";
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1DSBDT = KC0HW01.KC0HWDT2;
  end

   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
   /* -------- y2k in begin -------*/
  set TA2REC empty;
   /* -------- y2k in end ---------*/
  if (OP1REC.OP1DSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0HW01.KC0HWDT1 = TA2REC.TA2GRGA;
    KC0HW01.KC0HWMM2 = KC0HW01.KC0HWMM1;
    KC0HW01.KC0HWDD2 = KC0HW01.KC0HWDD1;
    KC0HW01.KC0HWYY2 = KC0HW01.KC0HWYY1;
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1DSADT = KC0HW01.KC0HWDT2;
  else
    KC0HW01.KC0HWYY2 = "YY";
    KC0HW01.KC0HWMM2 = "MM";
    KC0HW01.KC0HWDD2 = "DD";
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1DSADT = KC0HW01.KC0HWDT2;
  end

   /* **********************************************/
    /* Credit Status Change Date                 **/
   /* **********************************************/
   /* -------- y2k in begin -------*/
  set TA2REC empty;
   /* -------- y2k in end ---------*/
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0HW01.KC0HWDT1 = TA2REC.TA2GRGA;
    KC0HW01.KC0HWMM2 = KC0HW01.KC0HWMM1;
    KC0HW01.KC0HWDD2 = KC0HW01.KC0HWDD1;
    KC0HW01.KC0HWYY2 = KC0HW01.KC0HWYY1;
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1CSADT = KC0HW01.KC0HWDT2;
  else
    KC0HW01.KC0HWYY2 = "YY";
    KC0HW01.KC0HWMM2 = "MM";
    KC0HW01.KC0HWDD2 = "DD";
    KC0HW01.KC0HWSL1 = "/";
    KC0HW01.KC0HWSL2 = "/";
    KC0HM010.OP1CSADT = KC0HW01.KC0HWDT2;
  end

   /* **********************************************/
    /* Store Address                             **/
   /* **********************************************/
  KC0H650(); /* store information*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
  KULREC.KULAAID = KUMREC.KUMSTAID; /* store address id*/

  KC0H660(); /* store address*/

  KC0HM010.KC0HMST1 = KUMREC.KUMSTRNM; /* store name*/
  KC0HW01.KC0HWCTY = KULREC.XXXCITY; /* store city*/
  KC0HW01.KC0HWST = KULREC.XSTCD; /* store state*/
  KC0HW01.KC0HWZIP = KULREC.XXXZIP; /* store zip*/
  KC0HW01.KC0HWB1 = " "; /* blank*/
  KC0HW01.KC0HWB2 = " "; /* blank*/
  if (KULREC.XXX-ADDR1 == " ")
    if (KULREC.XXX-ADDR2 == " ")
      if (KULREC.XXX-ADDR3 == " ")
        KC0HM010.KC0HMST2 = KC0HW01.KC0HWADD; /* formatted city*/
        KC0HM010.KC0HMST3 = " ";
        KC0HM010.KC0HMST4 = " ";
        KC0HM010.KC0HMST5 = " ";
      else
        KC0HM010.KC0HMST2 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0HM010.KC0HMST3 = KC0HW01.KC0HWADD; /* formatted city*/
        KC0HM010.KC0HMST4 = " ";
        KC0HM010.KC0HMST5 = " ";
      end
    else
      KC0HM010.KC0HMST2 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0HM010.KC0HMST3 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0HM010.KC0HMST4 = KC0HW01.KC0HWADD; /* formatted city*/
      KC0HM010.KC0HMST5 = " ";
    end
  else
    KC0HM010.KC0HMST2 = KULREC.XXX-ADDR1; /* store address 1*/
    KC0HM010.KC0HMST3 = KULREC.XXX-ADDR2; /* store address 2*/
    KC0HM010.KC0HMST4 = KULREC.XXX-ADDR3; /* store address 3*/
    KC0HM010.KC0HMST5 = KC0HW01.KC0HWADD; /* formatted city*/
  end

   /* **********************************************/
    /* Store Ship To Address                     **/
   /* **********************************************/
  if (KUMREC.KUMSTAID == KUMREC.KUMSHAID)
                                   /* store and ship to are equal*/
    KC0HM010.KC0HMSS1 = KC0HM010.KC0HMST1;
    KC0HM010.KC0HMSS2 = KC0HM010.KC0HMST2;
    KC0HM010.KC0HMSS3 = KC0HM010.KC0HMST3;
    KC0HM010.KC0HMSS4 = KC0HM010.KC0HMST4;
    KC0HM010.KC0HMSS5 = KC0HM010.KC0HMST5;
  else
    KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
    KULREC.KULAAID = KUMREC.KUMSHAID; /* store address id*/
    KC0H660();
    KC0HM010.KC0HMSS1 = KUMREC.KUMSTRNM; /* store name*/
    KC0HW01.KC0HWCTY = KULREC.XXXCITY; /* store city*/
    KC0HW01.KC0HWST = KULREC.XSTCD; /* store state*/
    KC0HW01.KC0HWZIP = KULREC.XXXZIP; /* store zip*/
    KC0HW01.KC0HWB1 = " "; /* blank*/
    KC0HW01.KC0HWB2 = " "; /* blank*/
    if (KULREC.XXX-ADDR1 == " ")
      if (KULREC.XXX-ADDR2 == " ")
        if (KULREC.XXX-ADDR3 == " ")
          KC0HM010.KC0HMSS2 = KC0HW01.KC0HWADD; /* formatted city*/
          KC0HM010.KC0HMSS3 = " ";
          KC0HM010.KC0HMSS4 = " ";
          KC0HM010.KC0HMSS5 = " ";
        else
          KC0HM010.KC0HMSS2 = KULREC.XXX-ADDR3; /* store address 3*/
          KC0HM010.KC0HMSS3 = KC0HW01.KC0HWADD; /* formatted city*/
          KC0HM010.KC0HMSS4 = " ";
          KC0HM010.KC0HMSS5 = " ";
        end
      else
        KC0HM010.KC0HMSS2 = KULREC.XXX-ADDR2; /* store address 2*/
        KC0HM010.KC0HMSS3 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0HM010.KC0HMSS4 = KC0HW01.KC0HWADD; /* formatted city*/
        KC0HM010.KC0HMSS5 = " ";
      end
    else
      KC0HM010.KC0HMSS2 = KULREC.XXX-ADDR1; /* store address 1*/
      KC0HM010.KC0HMSS3 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0HM010.KC0HMSS4 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0HM010.KC0HMSS5 = KC0HW01.KC0HWADD; /* formatted city*/
    end
  end


   /* **********************************************/
    /* Order Ship To Address                     **/
   /* **********************************************/
  if (OP1REC.OP11TMSF == "N")
    KC0HM010.KC0HMOS1 = " ";
    KC0HM010.KC0HMOS2 = " ";
    KC0HM010.KC0HMOS3 = " ";
    KC0HM010.KC0HMOS4 = " ";
    KC0HM010.KC0HMOS5 = " ";
  else
    KC0H670();
    KC0HM010.KC0HMOS1 = OP5REC.OP5ALTNM; /* ship to name*/
    KC0HW01.KC0HWCTY = OP5REC.XXXCITY; /* ship to city*/
    KC0HW01.KC0HWST = OP5REC.XSTCD; /* ship to state*/
    KC0HW01.KC0HWZIP = OP5REC.XXXZIP; /* ship to zip*/
    KC0HW01.KC0HWB1 = " "; /* blank*/
    KC0HW01.KC0HWB2 = " "; /* blank*/
    if (OP5REC.XXXADDR[1] == " ")
      if (OP5REC.XXXADDR[2] == " ")
        if (OP5REC.XXXADDR[3] == " ")
          KC0HM010.KC0HMOS2 = KC0HW01.KC0HWADD; /* formatted city*/
          KC0HM010.KC0HMOS3 = " ";
          KC0HM010.KC0HMOS4 = " ";
          KC0HM010.KC0HMOS5 = " ";
        else
          KC0HM010.KC0HMOS2 = OP5REC.XXXADDR[3]; /* store address 3*/
          KC0HM010.KC0HMOS3 = KC0HW01.KC0HWADD; /* formatted city*/
          KC0HM010.KC0HMOS4 = " ";
          KC0HM010.KC0HMOS5 = " ";
        end
      else
        KC0HM010.KC0HMOS2 = OP5REC.XXXADDR[2]; /* store address 2*/
        KC0HM010.KC0HMOS3 = OP5REC.XXXADDR[3]; /* store address 3*/
        KC0HM010.KC0HMOS4 = KC0HW01.KC0HWADD; /* formatted city*/
        KC0HM010.KC0HMOS5 = " ";
      end
    else
      KC0HM010.KC0HMOS2 = OP5REC.XXXADDR[1]; /* store address 1*/
      KC0HM010.KC0HMOS3 = OP5REC.XXXADDR[2]; /* store address 2*/
      KC0HM010.KC0HMOS4 = OP5REC.XXXADDR[3]; /* store address 3*/
      KC0HM010.KC0HMOS5 = KC0HW01.KC0HWADD; /* formatted city*/
    end
  end

   /* **********************************************/
    /* Sales Agency and Rep                      **/
   /* **********************************************/
  KC0HM010.SM1AGYID = OP1REC.SM1AGYID;
  KC0HM010.SM4REPID = OP1REC.SM4REPID;

  KC0H680();
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0HW01.KC0HWFST = " ";
    KC0HW01.KC0HWPER = "  ";
    KC0HW01.KC0HWLST = "NOT FOUND ";
  else
    KC0HW01.KC0HWFST = VRAGCY02.XXXFSTNM;
    KC0HW01.KC0HWPER = ". "; /* period*/
    KC0HW01.KC0HWLST = VRAGCY02.XXXLSTNM; /* last name*/
  end

  KC0HM010.KC0HMNAM = KC0HW01.KC0HWNAM;

   /* **********************************************/
    /* Special Label Instructions                **/
   /* **********************************************/

  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* label instruction*/
  OP4REC.OP4TRSEQ = 1; /* first one*/

  KC0H720();

  if (SQLCA.VAGen_SQLCODE == 100)
    KC0HM010.OP4TXT = "NOT FOUND ";
  else
    KC0HM010.OP4TXT = OP4REC.OP4TXT;
  end

   /* **********************************************/
    /* Order Taken by ID                         **/
   /* **********************************************/
  KC0H690(); /* get taken-by service rep name*/

  KC0HM010.XXXUSRID = KUYREC.XXXUSRID;


end // end KC0H640

// get store name & address id
Function KC0H650()
   /* ************************************************/
     /* read the store for store name & address id **/
   /* ************************************************/

  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUMREC.KUMSTRNM = "STORE IS NOT FOUND ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
      TA1REC.TA1PGMNM = "KC0H"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0H650"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* i/o mod*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key*/
      XSCCS02();
    end
  end

end // end KC0H650

// get store address
Function KC0H660()
   /* **********************************************/
     /* read the address for the store address   **/
   /* **********************************************/

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KULREC.XXX-ADDR1 = "STORE ADDRESS WAS NOT FOUND ";
      KULREC.XXX-ADDR2 = " ";
      KULREC.XXX-ADDR3 = " ";
      KULREC.XXXCITY = " ";
      KULREC.XSTCD = " ";
      KULREC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0H"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0H660"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0170"; /* i/o mod*/
      TA1REC.TA1TBLKE = KULREC.KULGRP; /* key*/
      XSCCS02();
    end
  end


end // end KC0H660

// get order onetime ship address
Function KC0H670()
   /* *****************************************************/
     /* read the order address for onetime ship address **/
   /* ****************************************************/

  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* part number*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* order number*/
  OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike order number*/
  OP5REC.OP5BILIN = "N"; /* bill to flag*/
  OP5REC.OP5SHPIN = "Y"; /* ship to flag*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP5REC.OP5ALTNM = "SHIP TO INFORMATION WAS NOT FOUND ";
      OP5REC.XXXADDR[1] = " ";
      OP5REC.XXXADDR[2] = " ";
      OP5REC.XXXADDR[3] = " ";
      OP5REC.XXXCITY = " ";
      OP5REC.XSTCD = " ";
      OP5REC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DORDER"; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0H"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0H670"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0460"; /* i/o mod*/
      TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key*/
      XSCCS02();
    end
  end


end // end KC0H670

// get sales rep name
Function KC0H680()
   /* ************************************************/
     /* read the sales rep table to get the name   **/
   /* ************************************************/

  VRAGCY02.SM1AGYID = OP1REC.SM1AGYID;
  VRAGCY02.SM4REPID = OP1REC.SM4REPID;
  VRAGCY02.XXXSTAT = "A";

  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0H"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0H680"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID; /* key*/
    XSCCS02();
  end


end // end KC0H680

// get service rep user id
Function KC0H690()
   /* *****************************************************/
     /* read the service rep table to get user id       **/
   /* *****************************************************/


  KUYREC.KUYSVRID = OP1REC.OP1TBREP;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1PGMNM = "KC0H"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0H690 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSCCS02(); /* abort routine*/
  end


      /* if not found then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    KUYREC.XXXUSRID = "UNKNOWN"; /* set user id*/
  end

end // end KC0H690

// process pf12 updates
Function KC0H700()
   /* ****************************************/
   /* this process updates the records that**/
   /* reflect an order has been held       **/
   /* -- GETS ORDERS AND CHECKS IT AGAIN   **/
   /* -- updates databases                 **/
   /* ****************************************/

  KC0H430(); /* edit current screen*/

  if (KC0HW01.KC0HWERR == "Y")
    return;
  end

  KC0HW01.KC0HWRCN = 0; /* zero # ords updated counter*/
  KC0HW01.KC0HWVAL = 0; /* zero updated value*/

  if ("X" in KC0HW02.KC0HWSEL) /* if any order has been updated*/
    /* next sentence*/
  else
    KC0HW01.KC0HWERR = "Y"; /* set error message*/
    converseLib.validationFailed(11); /* no orders have been updated*/
    return;
  end

  KC0HW02.KC0HWTDX = 0; /* prepare table index*/

  while (KC0HW02.KC0HWTDX < KC0HW02.KC0HWBOT)
    KC0HW01.KC0HWOOK = "Y"; /* initialize order ok flag*/
    KC0HW02.KC0HWTDX = KC0HW02.KC0HWTDX + 1; /* add to the index*/

    if (KC0HW02.KC0HWSEL[KC0HWTDX] == "X")
      KC0H710(); /* prepare order for update*/

      if (KC0HW01.KC0HWOOK == "Y")
        KC0HW01.KC0HWUOK = "Y"; /* updates ok flag*/
        KC0H250(); /* update database records*/
        if (KC0HW01.KC0HWUOK == "Y")
          KC0HW01.KC0HWRCN = KC0HW01.KC0HWRCN + 1;
          KC0HW01.KC0HWVAL = KC0HW01.KC0HWVAL + KC0HW01.KC0HWOOV;
          KC0HW02.KC0HWSEL[KC0HWTDX] = "H";
          KC0HW02.XCSCD[KC0HWTDX] = OP1REC.XCSCD;
        end
      end
    end
  end

  if ("M" in KC0HW02.KC0HWSEL
   || "X" in KC0HW02.KC0HWSEL)
    converseLib.validationFailed(28); /* not all order were updated due to db changes*/
    KC0HW01.KC0HWERR = "Y";
  end

  if (KC0HW01.KC0HWERR == "N")
    KC0HW01.KC0HWMSG = KC0HW01.KC0HWRMS;
    KC0HW01.KC0HWERR = "Y";
    converseLib.validationFailed(12); /* updates ok message*/
  else
    KC0HW01.KC0HWMSG = KC0HW01.KC0HWRMS;
  end

  KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* move previous to temp*/
  KC0HW01.KC0HWFFL = "Y"; /* set first time flag*/
  KC0H370(); /* update screen display*/




end // end KC0H700

// prepare order for update
Function KC0H710()

   /* ***************************************/
   /* this process prepares an order       **/
   /* for update after being held          **/
   /* ***************************************/

  KC0HW01.KC0HWRIT = "Y"; /* need to read items for order flag*/
  KC0HW01.KC0HWALV = 0; /* allocated-value*/
  KC0HW01.KC0HWALQ = 0; /* allocated-qty*/
  KC0HW01.KC0HWOOV = 0; /* on-order-value*/
  KC0HW01.KC0HWOOQ = 0; /* on-order-qty*/

  OP1REC.OP1KEY = KC0HW02.OP1KEY[KC0HWTDX];
  KC0H210(); /* get order record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    KC0HW01.KC0HWOOK = "N"; /* order not ok*/
    converseLib.validationFailed(23); /* order not updated due to deadlocks*/
    return;
  end

  if (KC0HW01.KC0HWOOK == "Y") /* the order is ok to process*/
    KC0H350(); /* check order criteria*/

    if (KC0HW01.KC0HWOOK == "Y") /* the order is ok to process*/

      if (KC0HW01.KC0HWRIT == "Y") /* need to read the items*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0H230(); /* add-up items for an order*/
      end

      /* ********************************************/
       /* check the quantities on the order table*/
      /* ********************************************/

      KC0HW01.KC0HWCKA = OP1REC.OP1CKAMT;
      KC0HW02.KC0HWALV[KC0HWTDX] = KC0HW01.KC0HWALV;
      KC0HW02.KC0HWOIP[KC0HWTDX] = KC0HW01.KC0HWALV;

      if (KC0HW01.KC0HWOOV == KC0HW02.KC0HWOOV[KC0HWTDX])
        /* next sentence*/
      else
        KC0HW01.KC0HWOOK = "N";
        KC0HW02.KC0HWSEL[KC0HWTDX] = "M";
        KC0HW02.KC0HWOIP[KC0HWTDX] = KC0HW01.KC0HWCKA;
        KC0HW02.KC0HWOOV[KC0HWTDX] = KC0HW01.KC0HWOOV;
      end

    else
      KC0HW02.XOSCD[KC0HWTDX] = OP1REC.XOSCD;
      KC0HW02.XCSCD[KC0HWTDX] = OP1REC.XCSCD;
      KC0HW02.KC0HWSEL[KC0HWTDX] = "M";
    end
  end




end // end KC0H710

// get special label instruction
Function KC0H720()
   /* ***********************************************************/
   /* *  KC0H720                                               **/
   /* *  this statement group is used to get special label     **/
   /* *  instructions for the view screen.                     **/
   /* *                                                        **/
   /* ***********************************************************/

  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = 1;

  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "DTEXT001"; /* table view*/
    TA1REC.TA1PGMNM = "KC0H   "; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0H720 "; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0470  "; /* i/o mod*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key*/
    XSCCS02();
  end
end // end KC0H720

// process page rolling
Function KC0H750()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/

  set KC0HM005.KC0HWCPG modified;

  if (KC0HW01.KC0HWCPG == KC0HM005.KC0HWCPG)
    if (KC0HW02.KC0HWCDX == KC0HW02.KC0HWBOT
     && KC0HW01.KC0HWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end

  if (KC0HM005.KC0HWCPG == 0
   || KC0HM005.KC0HWCPG > KC0HW01.KC0HWTPG)
    KC0HW01.KC0HWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0HM005.KC0HWCPG cursor, bold;
    return;
  end

  KC0HW01.KC0HWCPG = KC0HM005.KC0HWCPG; /* reset current page*/
  KC0HW02.KC0HWCDX = KC0HW01.KC0HWCPG * 13; /* reset current table index*/

  if (KC0HW02.KC0HWCDX > KC0HW02.KC0HWBOT)
    KC0HW02.KC0HWCDX = KC0HW02.KC0HWBOT;
  end

  KC0HW02.KC0HWPDX = KC0HW01.KC0HWCPG * 13;
  KC0HW02.KC0HWPDX = KC0HW02.KC0HWPDX - 13;

  KC0HW02.KC0HWTDX = KC0HW02.KC0HWPDX; /* prepare temp index*/

  KC0H370(); /* prepare the screen for display*/

end // end KC0H750

Record KC0HW01 type basicRecord
  5 KC0HWGRP KC0HWGRP ; 
    10 KC0HWVFL KC0HWVFL ; 
    10 KC0HWFLG KC0HWFLG ; 
    10 KC0HWEFL KC0HWEFL ; 
    10 KC0HWFFL KC0HWFFL ; 
    10 KC0HWEND KC0HWEND ; 
    10 KC0HWEOF KC0HWEOF ; 
    10 KC0HWOOK KC0HWOOK ; 
    10 KC0HWUOK KC0HWUOK ; 
    10 KC0HWRIT KC0HWRIT ; 
    10 KC0HWCPG KC0HWCPG ; 
    10 KC0HWTPG KC0HWTPG ; 
    10 KC0HWREM KC0HWREM ; 
    10 KC0HWCN1 KC0HWCN1 ; 
    10 KC0HWSTP KC0HWSTP ; 
    10 KC0HWSDX KC0HWSDX ; 
    10 KC0HWERR KC0HWERR ; 
    10 KUCCOID KUCCOID ; 
    10 KC0HWEOI KC0HWEOI ; 
    10 KC0HWCKA KC0HWCKA ; 
    10 KC0HWOOQ KC0HWOOQ ; 
    10 KC0HWOOV KC0HWOOV ; 
    10 KC0HWALQ KC0HWALQ ; 
    10 KC0HWALV KC0HWALV ; 
    10 KC0HWLIV KC0HWLIV ; 
    10 KC0HWXPO KC0HWXPO ; 
    10 KC0HWARB KC0HWARB ; 
    10 KC0HWINP KC0HWINP ; 
    10 KC0HWHDC KC0HWHDC ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 KC0HW-NEED-DATE-TO KC0HW-NEED-DATE-TO ; 
    10 KC0HWFCU KC0HWFCU ; 
      15 KC0HWCOI KC0HWCOI ; 
      15 KC0HWPR1 KC0HWPR1 ; 
      15 KC0HWSTO KC0HWSTO ; 
      15 KC0HWPR2 KC0HWPR2 ; 
      15 KC0HWXNX KC0HWXNX ; 
      15 KC0HWPR3 KC0HWPR3 ; 
      15 KC0HWGPC KC0HWGPC ; 
    10 KC0HWORD KC0HWORD ; 
      15 KC0HWCUP KC0HWCUP ; 
      15 KC0HWRID KC0HWRID ; 
    10 KC0HWFOR KC0HWFOR ; 
      15 KC0HWCOD KC0HWCOD ; 
        20 * char(7) ; 
        20 KC0HWPAR KC0HWPAR ; 
    10 KC0HWDT1 KC0HWDT1 ; 
      15 KC0HWMM1 KC0HWMM1 ; 
      15 KC0HWDD1 KC0HWDD1 ; 
      15 KC0HWYY1 KC0HWYY1 ; 
    10 KC0HWDT2 KC0HWDT2 ; 
      15 KC0HWMM2 KC0HWMM2 ; 
      15 KC0HWSL1 KC0HWSL1 ; 
      15 KC0HWDD2 KC0HWDD2 ; 
      15 KC0HWSL2 KC0HWSL2 ; 
      15 KC0HWYY2 KC0HWYY2 ; 
    10 KC0HWNAM KC0HWNAM ; 
      15 KC0HWFST KC0HWFST ; 
      15 KC0HWPER KC0HWPER ; 
      15 KC0HWLST KC0HWLST ; 
    10 KC0HWADD KC0HWADD ; 
      15 KC0HWCTY KC0HWCTY ; 
      15 KC0HWB1 KC0HWB1 ; 
      15 KC0HWST KC0HWST ; 
      15 KC0HWB2 KC0HWB2 ; 
      15 KC0HWZIP KC0HWZIP ; 
    10 KC0HWMSG KC0HWMSG ; 
    10 KC0HWEM2 KC0HWEM2 ; 
      15 KC0HWMF2 KC0HWMF2 ; 
      15 KC0HWCON KC0HWCON ; 
    10 KC0HWEM3 KC0HWEM3 ; 
      15 KC0HWMF3 KC0HWMF3 ; 
      15 KC0HWXCS KC0HWXCS ; 
    10 KC0HWMSS KC0HWMSS ; 
      15 KC0HWMS1 KC0HWMS1 ; 
      15 KC0HWORN KC0HWORN ; 
      15 KC0HWDOT KC0HWDOT ; 
      15 KC0HWNOR KC0HWNOR ; 
      15 KC0HWMS2 KC0HWMS2 ; 
      15 KC0HWCUN KC0HWCUN ; 
      15 KC0HWMS3 KC0HWMS3 ; 
      15 KC0HWVL1 KC0HWVL1 ; 
    10 KC0HWRMS KC0HWRMS ; 
      15 KC0HWRCN KC0HWRCN ; 
      15 KC0HWRF1 KC0HWRF1 ; 
      15 KC0HWVAL KC0HWVAL ; 
    10 KC0HWEM1 KC0HWEM1 ; 
      15 KC0HWMF1 KC0HWMF1 ; 
      15 XCCCD XCCCD ; 
    10 KC0HWOVM KC0HWOVM ; 
      15 KC0HWMS4 KC0HWMS4 ; 
      15 KC0HWMS5 KC0HWMS5 ; 
    10 KC0HWSUB KC0HWSUB ; 
    10 KC0HWTBE KC0HWTBE ; 
    10 KC0HWFND KC0HWFND ; 
    10 KC0HWLGE KC0HWLGE ; 
    10 XOTCD XOTCD ; 
end // end KC0HW01

Record KC0HW02 type basicRecord
  10 KC0HWCDX KC0HWCDX ; 
  10 KC0HWPDX KC0HWPDX ; 
  10 KC0HWTDX KC0HWTDX ; 
  10 KC0HWBOT KC0HWBOT ; 
  10 OP1KEY OP1KEY [400] ; 
  10 KC0HWTBL KC0HWTBL [400] ; 
    15 KC0HWSEL KC0HWSEL ; 
    15 KC0HWLIN KC0HWLIN ; 
      20 * char(1) ; 
      20 KC0HWORD KC0HWORD ; 
        25 KC0HWCUP KC0HWCUP ; 
        25 KC0HWRID KC0HWRID ; 
      20 * char(1) ; 
      20 XOTABRV XOTABRV ; 
      20 * char(1) ; 
      20 XOSCD XOSCD ; 
      20 * char(1) ; 
      20 KC0HWNDT KC0HWNDT ; 
        25 KC0HWMM1 KC0HWMM1 ; 
        25 KC0HWSL1 KC0HWSL1 ; 
        25 KC0HWDD1 KC0HWDD1 ; 
        25 KC0HWSL2 KC0HWSL2 ; 
        25 KC0HWYY1 KC0HWYY1 ; 
      20 * char(1) ; 
      20 XCSCD XCSCD ; 
      20 KC0HWRSN KC0HWRSN ; 
        25 KC0HWCD1 KC0HWCD1 ; 
        25 KC0HWDS1 KC0HWDS1 ; 
        25 KC0HWCD2 KC0HWCD2 ; 
        25 KC0HWDS2 KC0HWDS2 ; 
        25 KC0HWCD3 KC0HWCD3 ; 
      20 * char(1) ; 
      20 KC0HWOIP KC0HWOIP ; 
      20 * char(1) ; 
      20 KC0HWOOV KC0HWOOV ; 
      20 * char(1) ; 
      20 KC0HWALV KC0HWALV ; 
end // end KC0HW02

// op-cust-need-dt
DataItem KC0HW-NEED-DATE-TO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted city state
DataItem KC0HWADD char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws allocated qty
DataItem KC0HWALQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws allocated value
DataItem KC0HWALV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ar account balance
DataItem KC0HWARB num(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0HWB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0HWB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KC0HWBOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reason code 1
DataItem KC0HWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 2
DataItem KC0HWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 3
DataItem KC0HWCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current index
DataItem KC0HWCDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cr-ck-ord-amt
DataItem KC0HWCKA num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KC0HWCN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0HWCOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen company id
DataItem KC0HWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KC0HWCON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// page counter
DataItem KC0HWCPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// city
DataItem KC0HWCTY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem KC0HWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0HWCUP num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KC0HWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0HWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KC0HWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0HWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0HWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted need date
DataItem KC0HWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted need date
DataItem KC0HWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection error flag
DataItem KC0HWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company credit status err msg
DataItem KC0HWEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company nbr mismatch msg
DataItem KC0HWEM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status msg
DataItem KC0HWEM3 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of process
DataItem KC0HWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KC0HWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-items flag
DataItem KC0HWEOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0HWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted cust nbr
DataItem KC0HWFCU char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KC0HWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0HWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcu table error
DataItem KC0HWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formated order number
DataItem KC0HWFOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep first name
DataItem KC0HWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KC0HWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0h working storage record
DataItem KC0HWGRP char(658)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders on hold counter
DataItem KC0HWHDC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws orders in process
DataItem KC0HWINP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// legal entity error
DataItem KC0HWLGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen line
DataItem KC0HWLIN char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws line-item alloc value
DataItem KC0HWLIV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep last name
DataItem KC0HWLST char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message filler
DataItem KC0HWMF1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0HWMF2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0HWMF3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0HWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0HWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal one
DataItem KC0HWMS1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal two
DataItem KC0HWMS2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal three
DataItem KC0HWMS3 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal four
DataItem KC0HWMS4 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal five
DataItem KC0HWMS5 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KC0HWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- update message
DataItem KC0HWMSS char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KC0HWNAM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date formatted
DataItem KC0HWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub nike order number
DataItem KC0HWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order amount in process
DataItem KC0HWOIP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order ok to process
DataItem KC0HWOOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws on-order qty
DataItem KC0HWOOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws on-order value
DataItem KC0HWOOV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order number
DataItem KC0HWORD num(11,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem KC0HWORN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MSG- too many orders
DataItem KC0HWOVM char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order partition
DataItem KC0HWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem KC0HWPDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period
DataItem KC0HWPER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 1
DataItem KC0HWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 2
DataItem KC0HWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 3
DataItem KC0HWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of ords put in resell
DataItem KC0HWRCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reminder
DataItem KC0HWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KC0HWRF1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws nike sub-order number
DataItem KC0HWRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// read items
DataItem KC0HWRIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- updated message
DataItem KC0HWRMS char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reasons
DataItem KC0HWRSN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem KC0HWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select options
DataItem KC0HWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0HWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0HWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state code
DataItem KC0HWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen store id
DataItem KC0HWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem KC0HWSTP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for xcu table read
DataItem KC0HWSUB num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xcr table error
DataItem KC0HWTBE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders to update table
DataItem KC0HWTBL char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp     index
DataItem KC0HWTDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of pages
DataItem KC0HWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates ok
DataItem KC0HWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually updated
DataItem KC0HWVAL num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view single order flag
DataItem KC0HWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually updated
DataItem KC0HWVL1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order credit status
DataItem KC0HWXCS char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// screen dept
DataItem KC0HWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total exposure
DataItem KC0HWXPO num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0HWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0HWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem KC0HWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

