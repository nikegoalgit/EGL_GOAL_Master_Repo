package kc0c;

import as1.common.ARCREC;
import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXCH01;
import corpcom3.XPXCS01;
import corpcom3.XPXX001;
import corpcom4.XSCCS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XBCTBL;
import corpx1.XBDTBL;
import corpx1.XCCCD;
import corpx1.XCHTBL;
import corpx1.XCRTBL;
import corpx1.XCSCD;
import corpx1.XCSTBL;
import corpx1.XCUTBL;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx2.XOSCD;
import corpx2.XOTABRV;
import corpx2.XOTCD;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUYREC;
import op.common.OP1CSADT;
import op.common.OP1CUNDT;
import op.common.OP1KEY;
import op.common.OP1REC;
import op.common.OP2REC;
import op.common.OP4REC;
import op.common.OP5REC;
import op.common.OPHREC;
import pk.common.PK1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA9REC;
import vv.common.VCRCHK01;
import vv.common.VRAGCY02;
//*** PROGRAM=KC0C ****
// ;
// This application will allow the users to set an order or
// multiple orders for a given customer or order
// number to a credit status of "check is in the mail".
// If user requested to look a multiple orders, they will
// be displayed page by page and the user will have the
// option of seting all, some or none of the orders on the
// screen.
// If user is looking at multiple orders, they have the option
// of viewing more information for all orders displayed.
// ;
// Maintenance Log:
//  4/05/89 - DSALZW - Made Credit Life changes, added ability
//                     to view orders, and general re-write of
//                     the application.
//  4/18/89 - DSALZW - added xssegtr
//  4/18/89 - DSALZW - added noncsp logic
// 01/23/90 - DSALZW - don't update orders until after an 'x'
//                     has been processed, ie. message 40
// 01/25/90 - DSALZW - change xcc test to greater than 'm'
// 04/02/90 - DSALZW - db changes
// 06/08/90 - CHAERT - add logic for SBNAR in exposure
// 06/27/90 - CHAERT - add logic legal entity security
// 08/07/90 - jwood  - changed cc0cm005,cc0c220,280,350 to use
//                     xcscd as a character field
// 08/30/90 - dsalzw - chgd cc0am010 to defined xot as char
// 09/27/90 - mkille - added rtc reason pop up window
// 09/28/90 - wjohns - remove optag logic
// 04/01/91 - wjohns - Add Terms and Brand tables, and call to
//                     io0470(for special label instructs)
//                     to put the new info on the view screen.
// 04/09/91 - wjohns - Changed message numbers to match changes
//                     to the cc message file after clean up.
// 05/21/91 - wjohns - Allow users to view single order from
//                     first screen.
// 08/01/91 - wjohns - Rename from CC0C to KC0C for new version
//                     of CICS.
// 08/09/91 - wjohns - Rename commarea referrences.
// 08/21/91- JWOOD  - CORRECTLY CONVERTED CC0C MODULES TO KC0C
// 09/11/91- WJOHNS - Add new credit table and logic to get
//                      order in process and shipped/ but not
//                      billed amounts from the new table
//                      instead of the ar cust table.
// 10/01/91- WJOHNS - Regen for database changes.
// 02/28/92- WJOHNS - Initialize TA2REC AND TA9REC to avoid
//                      bad date formats when using these recs.
// 09/30/92- cancie - replaced vragcy01 with new view vragcy02.
// 06/04/93- cancie - Added need date range to map kc0cm001.
//                    Added need "to" date kc0cw-need-date-to
//                    to kc0cw01.
//                    Convert "from" & "to" need dates, also
//                    date validation in kc0c120.
//                    Perform need date edit & check if within
//                    need date range in kc0c350.
// 12/14/93- cancie - Increased map presentation of 'order no'
//                    in kc0cm005 (from 10) to 11 spaces.
// 11/30/94- CHELLM - Replaced xot code on the selection screen
//                    with the order type abbreviation.
// 07-13-95- BCourt - Init. VCRCHK01 record, zero data if row
//                    not found.
// 09-21-99   ssank1   Changed map presentation of KC0CM001 ,
//                     KC0CM005 , KC0CM010 and increased the
//                     length of KC0CWRID & KC0CWORD in records
//                     KC0CW01 and KC0CW02 to accomodate 4
//                     digit nike ord id.
// *********************
Program KC0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  CCWREC CCWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KC0CW01 KC0CW01; // record
  KC0CW02 KC0CW02; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OPHREC OPHREC; // record
  PK1REC PK1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  VCRCHK01 VCRCHK01; // record
  VRAGCY02 VRAGCY02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCRTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KC0CM.KC0CM001,  // forms
      KC0CM.KC0CM005, 
      KC0CM.KC0CM010,
      KC0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KC0C000: KC0C000();
    goto KC0C100; /* go on to cc0c selection criteria screen*/
    KC0C100: KC0C100();
    ;
    goto KC0C100; /* order selection criteria*/
    ;
    ;
  end // end main
end // end KC0C

// cc0c initialization process
Function KC0C000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders update process                    **/
   /* *********************************************/
  ;
  ;
  XSENTRY();
  ;
  XSSEGTR();
  ;
  set KC0CW01 empty; /* working storage 1*/
  set KC0CW02 empty; /* working storage 2*/
  set CCWREC empty; /* cc working storage*/
  set SQLCA empty;
  set OP1REC empty; /* order header record*/
  set OP2REC empty; /* order item record*/
  set OP5REC empty; /* order address record*/
  set OPHREC empty; /* order picking record*/
  set KUCREC empty; /* company record*/
  set KULREC empty; /* store record*/
  set KUMREC empty; /* store address record*/
  set KUYREC empty; /* service rep record*/
  set ARCREC empty; /* a/r record*/
  set VCRCHK01 empty; /* credit record*/
  set PK1REC empty; /* picking record*/
  set VRAGCY02 empty; /* sales rep record*/
  set TA2REC empty; /* date routine record*/
  set TA9REC empty; /* work days routine record*/
  ;
  set KC0CM001 initial; /* order selection screen*/
  set KC0CM005 initial; /* order release screen*/
  set KC0CM010 initial; /* order inquiry screen*/
  ;
  KC0CW01.KC0CWMS1 = " ORDER# = ";
  KC0CW01.KC0CWMS2 = "   COMPANY# = ";
  KC0CW01.KC0CWMS3 = "  AMT_CKMAIL = ";
  ;
  ;
  KC0CW01.KC0CWRF1 = " ORDER(S) SET TO \"CKMAIL\" WITH AN OIP VALUE OF ";
  KC0CW01.KC0CWMS4 = " WARNING: OVER 400 ORDERS SELECTED,";
  KC0CW01.KC0CWMS5 = " ONLY FIRST 400 DISPLAYED";
  KC0CW01.KC0CWMF1 = " COMPANY CREDIT STATUS = ";
  KC0CW01.KC0CWMF2 = " COMPANY NUMBER ON ORDER = ";
  KC0CW01.KC0CWMF3 = " CREDIT STATUS OF ORDER = ";
  ;
  ;
end // end KC0C000

// order selection criteria
Function KC0C100()
   /* *******************************************/
   /* order selection screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* 5. process one order or                 **/
   /* 6. process a set of orders              **/
                                           /* **/
   /* *******************************************/
  ;
  KC0CW01.KC0CWERR = "N"; /* init error flag*/
  KC0CW01.KC0CWEFL = "N"; /* init selection error*/
  KC0CW01.KC0CWUOK = "Y"; /* updates ok flag*/
  KC0CM001.KC0CMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0CM001.KC0CMANM = "KC0C100"; /* set screen name*/
  KC0CW01.KC0CWFLG = "1"; /* selection criteria flag*/
  ;
  ;
  KC0CM001.KC0CWMSG = KC0CW01.KC0CWMSG;
  ;
  converse KC0CM001 ;
  ;
  KC0CW01.KC0CWMSG = " ";
  KC0CM001.KC0CWMSG = " ";
  ;
  ;
  KC0C110(); /* edit special keys/fast paths*/
  ;
  if (KC0CW01.KC0CWERR == "N") /* if no errors*/
    KC0C120(); /* edit screen input*/
  end
  ;
  ;
  if (KC0CW01.KC0CWERR == "N") /* if no errors*/
    if (KC0CW01.KC0CWFLG == "1")
      KC0C200(); /* process one order*/
      if (KC0CW01.KC0CWVFL == "Y") /* view single order*/
        KC0CW01.KC0CWVFL = "N";
      else
        if (KC0CW01.KC0CWEFL == "N") /* if no error on selection screen*/
          set KC0CM001 initial;
        end
      end
    else
      if (KC0CW01.KC0CWFLG == "2")
        KC0C300(); /* process a set of orders*/
        if (KC0CW01.KC0CWEFL == "N") /* if no error on selection*/
          set KC0CM001 initial;
        end
      else
        converseLib.validationFailed(1); /* invalid option message*/
      end
    end
  end
  ;
end // end KC0C100

// edit special keys
Function KC0C110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "KC0M"; /* credit main menu*/
    COMMAREA.CAFROMAP = "KC0C"; /* comming from appl*/
    XSEXIT();
    KC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0CM001.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KC0CM001.CATOAP;
      COMMAREA.CAITEM = KC0CM001.CAITEM;
      COMMAREA.CAFROMAP = "KC0C";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0CW01.KC0CWERR = "Y";
      set KC0CM001.CATOAP cursor, bold;
    else
      set KC0CM001.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0CM001.CATOAP > " ")
      KC0CW01.KC0CWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0CM001.CATOAP cursor, bold;
      return;
    else
      set KC0CM001.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0C";
    XSPF1();
    KC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit menu*/
    COMMAREA.CATOAP = "KC0M";
    COMMAREA.CAFROMAP = "KC0C";
    XSEXIT();
    KC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0C";
    XSPF4();
    KC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
  end
  ;
   /* **************************************/
   /* edit pf6 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf6) /* view single order*/
    KC0CW01.KC0CWVFL = "Y";
    return;
  end
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0CW01.KC0CWERR = "Y";
  ;
end // end KC0C110

// edit order selection screen
Function KC0C120()
   /* **********************************************/
    /* edit the order selection criteria screen  **/
    /* -- edits for clean input                  **/
    /* -- determines if one or more than one     **/
       /* order was selected for processing      **/
                                  /* **/
   /* **********************************************/
  ;
  ;
  set KC0CM001.KUCCOID cursor, initialAttributes;
  set KC0CM001.KUMSTRID initialAttributes;
  set KC0CM001.XNXCD initialAttributes;
  set KC0CM001.XGPCD initialAttributes;
  set KC0CM001.OP1CUOID initialAttributes;
  set KC0CM001.OP1NORID initialAttributes;
  set KC0CM001.KC0CMCDT initialAttributes;
  set KC0CM001.KC0CMNDT initialAttributes;
  set KC0CM001.KC0CM-ORDER-TYPE initialAttributes;
  set KC0CM001.XCSCD initialAttributes;
  ;
   /* ***************************************************/
   /* edit credit status code*/
   /* ***************************************************/
  ;
  if (KC0CM001.XCSCD != "  ") /* credit status entered*/
    if (KC0CM001.XCSCD in XCSTBL.XCSCD
     && KC0CM001.XCSCD != "99")
      if (KC0CM001.XCSCD == "10"
       || KC0CM001.XCSCD == "12")
        /* next sentence*/
      else
        KC0CW01.KC0CWERR = "Y"; /* set error flag*/
        KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(20); /* invalid credit status code*/
        set KC0CM001.XCSCD cursor, bold;
        return;
      end
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(20); /* invalid credit status code*/
      set KC0CM001.XCSCD cursor, bold;
      return;
    end
  end
  ;
   /* ***************************************************/
   /* edit order type code*/
   /* ***************************************************/
  ;
  if (KC0CM001.KC0CM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0CM001.KC0CM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0CM001.KC0CM-ORDER-TYPE != "99")
      KC0CW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0CM001.KC0CM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0CW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0CW01.KC0CWERR = "Y"; /* set error flag*/
        KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0CM001.KC0CM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end
  ;
   /* ***************************************************/
   /* edit "from" need date*/
   /* ***************************************************/
  ;
  if (KC0CM001.KC0CMNDT > " ")
    TA2REC.TA2GRGA = KC0CM001.KC0CMNDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0CW01.OP1CUNDT = TA2REC.TA2GRGGN;
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0CM001.KC0CMNDT cursor, bold;
      return;
    end
  else
    KC0CW01.OP1CUNDT = 0;
  end
  ;
   /* ***************************************************/
   /* edit "to" need date*/
   /* ***************************************************/
  ;
  if (KC0CM001.KC0CM-NEED-DATE-TO > " ")
    TA2REC.TA2GRGA = KC0CM001.KC0CM-NEED-DATE-TO;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0CW01.KC0CW-NEED-DATE-TO = TA2REC.TA2GRGGN;
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0CM001.KC0CM-NEED-DATE-TO cursor, bold;
      return;
    end
  else
    KC0CW01.KC0CW-NEED-DATE-TO = 0;
  end
  ;
   /* ***************************************************/
   /* "from" and "to" need date validation*/
   /* ***************************************************/
  ;
  if (KC0CW01.OP1CUNDT != 0)
    if (KC0CW01.KC0CW-NEED-DATE-TO != 0)
      if (KC0CW01.OP1CUNDT == KC0CW01.KC0CW-NEED-DATE-TO)
        /* next sentence ;*/
      else
        if (KC0CW01.OP1CUNDT < KC0CW-NEED-DATE-TO)
          /* next sentence ;*/
        else
          KC0CW01.KC0CWERR = "Y"; /* set error flag*/
          KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(7); /* invalid date*/
          set KC0CM001.KC0CMNDT cursor, bold;
          set KC0CM001.KC0CM-NEED-DATE-TO cursor, bold;
          return;
        end
      end
    end
  end
  ;
   /* ***************************************************/
   /* edit credit check date*/
   /* ***************************************************/
  ;
  if (KC0CM001.KC0CMCDT > " ")
    TA2REC.TA2GRGA = KC0CM001.KC0CMCDT;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* convert dates*/
    if (TA2REC.TA2RTNCD == 0) /* if date was ok*/
      KC0CW01.OP1CSADT = TA2REC.TA2GRGGN;
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0CM001.KC0CMCDT cursor, bold;
      return;
    end
  else
    KC0CW01.OP1CSADT = 0;
  end
  ;
   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/
  ;
  if (KC0CM001.KUCCOID > 0)
    KC0CW01.KUCCOID = KC0CM001.KUCCOID;
    KC0C130(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(18); /* invalid company; not on file*/
      set KC0CM001.KUCCOID cursor, bold;
      return;
    else
      if (KUCREC.XCCCD > "M ")
        KC0CW01.XCCCD = KUCREC.XCCCD;
        KC0CW01.KC0CWMSG = KC0CW01.KC0CWEM1;
        KC0CW01.KC0CWERR = "Y"; /* set error flag*/
        KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(19); /* invalid company credit status*/
        set KC0CM001.KUCCOID cursor, bold;
        return;
      end
      KC0C140(); /* check user security for company/legal*/
                                   /* entity*/
    end
  else
    if (KC0CM001.KUMSTRID > 0)
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(24); /* not allowed*/
      set KC0CM001.KUMSTRID cursor, bold;
      return;
    end
    if (KC0CM001.XNXCD > 0)
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* not allowed*/
      set KC0CM001.XNXCD cursor, bold;
      return;
    end
    if (KC0CM001.XGPCD > " ")
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(26); /* not allowed*/
      set KC0CM001.XGPCD cursor, bold;
      return;
    end
  end
  ;
   /* ********************************************/
   /* edit order number                        **/
   /* ********************************************/
  ;
  if (KC0CM001.OP1CUOID > 0 /* one order selection*/
   && KC0CM001.OP1NORID > 0)
    if (KC0CM001.KUCCOID > 0
     || KC0CW01.KC0CWVFL == "Y") /* view single order*/
      KC0CW01.KC0CWFLG = "1"; /* one order selected flag*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(22); /* customer number required*/
      set KC0CM001.KUCCOID cursor, bold;
      return;
    end
  else
    if (KC0CM001.OP1CUOID > 0
     || KC0CM001.KUCCOID > 0)
      KC0CW01.KC0CWFLG = "2"; /* a set of orders selected*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(5); /* must have at least one of this ones*/
      set KC0CM001.KUCCOID cursor, bold;
      return;
    end
  end
  ;
  ;
end // end KC0C120

// get company
Function KC0C130()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/
  ;
  ;
  KUCREC.KUCCOID = KC0CW01.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1LOCAT[2] = "KC0C130";
    TA1REC.TA1LOCAT[3] = "KC0C130";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0C130

// check security
Function KC0C140()
   /* **********************************************/
    /* checks users security for this company    **/
   /* **********************************************/
  ;
  KC0CWSUB = 1;
  KC0CWFND = "N";
  KC0CWTBE = " ";
  KC0CWLGE = " ";
  ;
   /* loop thru xcu table reading all records with the user id*/
  ;
  while (KC0CWFND == "N")
    if (COMMAREA.CAUSERID in XCUTBL.CAUSERID from KC0CWSUB)
      KC0CWSUB = sysVar.arrayIndex;
      ;
       /* find the xcr credit resp to match the xcu*/
      ;
      if (XCUTBL.XCRCD[KC0CWSUB] in XCRTBL.XCRCD)
        if (XCRTBL.XLECD[sysVar.arrayIndex] == KUCREC.XLECD)
           /* everything checks out, user has security*/
          ;
          KC0CWTBE = "N";
          KC0CWFND = "Y";
        else
          KC0CWLGE = "N";
        end
      else
        ;
         /* credit region invalid, read more users*/
        ;
        KC0CWTBE = "Y";
      end
    else
      ;
       /* legal entity not valid between co and user*/
      ;
      if (KC0CWLGE == "N")
        KC0CWFND = "Y";
        KC0CW01.KC0CWERR = "Y"; /* set error flag*/
        KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(46);
        if (KC0CM001.KUCCOID > 0)
          set KC0CM001.KUCCOID cursor, bold;
        end
        ;
         /* user is not on xcu table*/
        ;
      else
        if (KC0CWTBE == " ")
          KC0CWTBE = "Y";
          KC0CWFND = "Y";
          KC0CW01.KC0CWERR = "Y"; /* set error flag*/
          KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(48);
        else
          ;
           /* cred resp not found on xcr table*/
          ;
          KC0CWFND = "Y";
          KC0CW01.KC0CWERR = "Y"; /* set error flag*/
          KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
          converseLib.validationFailed(45);
        end
      end
    end
    if (KC0CWFND == "N") /* no rec found*/
      KC0CWSUB = KC0CWSUB + 1; /* set up to read the next xcu*/
    end
  end
  ;
end // end KC0C140

// process one order
Function KC0C200()
   /* ***********************************************/
        /* set one order                          **/
   /* 1. selects order header record              **/
   /* 2. edit the order record                    **/
   /* 3. gets order item record                   **/
   /* 4. updates database records                 **/
                                               /* **/
   /* ***********************************************/
  ;
   /* ***********************************************/
    /* get order header record                    **/
   /* ***********************************************/
  ;
  KC0CW01.KC0CWCOD = KC0CM001.OP1CUOID;
  OP1REC.OP1CUOID = KC0CW01.KC0CWCOD;
  OP1REC.OP1PARTN = KC0CW01.KC0CWPAR;
  OP1REC.OP1NORID = KC0CM001.OP1NORID;
  ;
  KC0C210(); /* get order header record*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* if there was a deadlock*/
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(23); /* cant select due to deadlock*/
    set KC0CM001.OP1CUOID cursor, bold;
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(3); /* order not found*/
    set KC0CM001.OP1CUOID cursor, bold;
    set KC0CM001.OP1NORID bold;
    return;
  end
  ;
  KC0C220(); /* edit order record*/
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0CW01.KC0CWALV = 0; /* set allocated-value to zero*/
    KC0CW01.KC0CWALQ = 0; /* set allocated-qty to zero*/
    KC0CW01.KC0CWOOQ = 0; /* set on-order-qty to zero*/
    KC0CW01.KC0CWOOV = 0; /* set on-order-value to zero*/
    if (OP1REC.XOSCD == "OP"
     || OP1REC.XOSCD == "AL")
      if (OP1REC.XOSCD == "OP")
        KC0CW01.KC0CWOOV = OP1REC.OP1OVALU;
        KC0CW01.KC0CWOOQ = OP1REC.OP1OTUNT;
        KC0CW01.KC0CWALV = 0;
        KC0CW01.KC0CWALQ = 0;
      end
      if (OP1REC.XOSCD == "AL")
        KC0CW01.KC0CWOOV = OP1REC.OP1CKAMT;
        KC0CW01.KC0CWOOQ = OP1REC.OP1CCKOQ;
        KC0CW01.KC0CWALV = OP1REC.OP1CKAMT;
        KC0CW01.KC0CWALQ = OP1REC.OP1CCKOQ;
      end
    else
      OP2REC.OP2KEY = OP1REC.OP1KEY;
      OP2REC.OP2LNINB = 0;
      KC0C230(); /* add up items for an order*/
      ;
    end
    ;
    if (KC0CW01.KC0CWVFL == "Y") /* view single order*/
      KC0C640(); /* format order screen*/
      KC0C610(); /* display order information*/
    else
      KC0C250(); /* update databases*/
      ;
      if (KC0CW01.KC0CWERR == "N")
        KC0CW01.KC0CWNOR = OP1REC.OP1NORID;
        KC0CW01.KC0CWDOT = ".";
        KC0CW01.KC0CWORN = OP1REC.OP1CUOID;
        KC0CW01.KC0CWCUN = OP1REC.KUCCOID;
        KC0CW01.KC0CWVL1 = KC0CW01.KC0CWOOV;
        KC0CW01.KC0CWMSG = KC0CW01.KC0CWMSS;
        KC0CW01.KC0CWERR = "Y";
        converseLib.validationFailed(12); /* updates ok*/
      end
    end
  end
  ;
  ;
  ;
end // end KC0C200

// get order header record
Function KC0C210()
  ;
  ;
   /* ********************************************************/
   /* *   select one order header record*/
   /* ********************************************************/
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get one nike sub-order*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -911)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0C210";
    TA1REC.TA1LOCAT[4] = "IO0430";
  end
  ;
  ;
end // end KC0C210

// edit order record
Function KC0C220()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/
  ;
      /* edit bulk order code*/
  ;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y")
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(21); /* bulk order msg*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/
  ;
  if (OP1REC.XOSCD == "AL"
   || OP1REC.XOSCD == "PA")
     /* next sentence*/
  else
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(16); /* invalid order status*/
    return;
  end
  ;
   /* ***********************************************/
      /* edit customer edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.KUCCOID == OP1REC.KUCCOID
   || KC0CW01.KC0CWVFL == "Y") /* view single order*/
    /* next sentence*/
  else
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
    KC0CW01.KC0CWCON = OP1REC.KUCCOID;
    KC0CW01.KC0CWMSG = KC0CW01.KC0CWEM2;
    converseLib.validationFailed(17); /* customer not the same*/
    set KC0CM001.KUCCOID cursor, bold;
    return;
  end
  ;
   /* ***********************************************/
      /* edit store number*/
   /* ***********************************************/
  ;
  if (KC0CM001.KUMSTRID > 0)
    if (KC0CM001.KUMSTRID == OP1REC.KUMSTRID)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(33); /* invalid order type*/
      set KC0CM001.KUMSTRID cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit department number*/
   /* ***********************************************/
  ;
  if (KC0CM001.XNXCD > 0)
    if (KC0CM001.XNXCD == OP1REC.XNXCD)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(37); /* invalid order type*/
      set KC0CM001.XNXCD cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit gpc code*/
   /* ***********************************************/
  ;
  if (KC0CM001.XGPCD > " ")
    if (KC0CM001.XGPCD == OP1REC.XGPCD)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(38); /* invalid order type*/
      set KC0CM001.XGPCD cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.XCSCD != "  ")
    if (KC0CM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0CW01.KC0CWXCS = OP1REC.XCSCD;
      KC0CW01.KC0CWMSG = KC0CW01.KC0CWEM3;
      set KC0CM001.XCSCD cursor, bold;
      return;
    end
  else
    if (OP1REC.XCSCD == "10"
     || OP1REC.XCSCD == "12")
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(15); /* invalid credit status*/
      KC0CW01.KC0CWXCS = OP1REC.XCSCD;
      KC0CW01.KC0CWMSG = KC0CW01.KC0CWEM3;
      set KC0CM001.XCSCD cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/
  ;
  /* GET TEMP*/
  if (KC0CM001.KC0CM-ORDER-TYPE > " ") /* order type entered*/
    if (KC0CM001.KC0CM-ORDER-TYPE in XOTTBL.XOTCD
     && KC0CM001.KC0CM-ORDER-TYPE != "99")
      KC0CW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
    else
      if (KC0CM001.KC0CM-ORDER-TYPE in XOTTBL.XOTSABRV)
        KC0CW01.XOTCD = XOTTBL.XOTCD[sysVar.arrayIndex];
      else
        KC0CW01.KC0CWERR = "Y"; /* set error flag*/
        KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
        converseLib.validationFailed(8); /* invalid order type code*/
        set KC0CM001.KC0CM-ORDER-TYPE cursor, bold;
        return;
      end
    end
  end
  ;
   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/
  ;
  if (KC0CW01.OP1CUNDT > 0)
    if (KC0CW01.OP1CUNDT == OP1REC.OP1CUNDT)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0CM001.KC0CMNDT cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/
  ;
  if (KC0CW01.OP1CSADT > 0)
    if (KC0CW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(7); /* invalid date*/
      set KC0CM001.KC0CMCDT cursor, bold;
      return;
    end
  end
  ;
   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.OP1CUPO > " ")
    if (KC0CM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      converseLib.validationFailed(36); /* cust po numbers do not match*/
      set KC0CM001.OP1CUPO cursor, bold;
      return;
    end
  end
  ;
end // end KC0C220

// add up order items
Function KC0C230()
   /* *******************************************/
   /* add up order-quantities for each order  **/
   /* *******************************************/
  ;
  KC0CW01.KC0CWEOI = "N"; /* set end-of-items flag to "no"*/
  ;
   /* *************************************/
   /* open cursor                       **/
   /* *************************************/
  ;
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0C230";
    TA1REC.TA1LOCAT[3] = "KC0C230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02();
  end
  ;
   /* *************************************/
   /* select first record               **/
   /* *************************************/
  ;
  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get first line-item*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0C230";
    TA1REC.TA1LOCAT[3] = "GET 1ST";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end
  ;
   /* *************************************/
   /* process all items                 **/
   /* *************************************/
  ;
  while (KC0CW01.KC0CWEOI == "N") /* while not end-of-items*/
    KC0CW01.KC0CWALQ = KC0CW01.KC0CWALQ + OP2REC.OP2TALCQ;
    KC0CW01.KC0CWLIV = OP2REC.OP2TALCQ * OP2REC.OP2AUPRC;
    KC0CW01.KC0CWALV = KC0CW01.KC0CWALV + KC0CW01.KC0CWLIV;
    KC0CW01.KC0CWOOQ = KC0CW01.KC0CWOOQ + OP2REC.OP2TONOQ;
    KC0CW01.KC0CWLIV = OP2REC.OP2TONOQ * OP2REC.OP2AUPRC;
    KC0CW01.KC0CWOOV = KC0CW01.KC0CWOOV + KC0CW01.KC0CWLIV;
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get next line-item*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no more line-items*/
        KC0CW01.KC0CWEOI = "Y"; /* set end-of-items to "yes"*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        TA1REC.TA1LOCAT[2] = "KC0C230";
        TA1REC.TA1LOCAT[3] = "GET NXT";
        TA1REC.TA1LOCAT[4] = "IO0440";
        XSCCS02(); /* abort program*/
      end
    end
  end
  ;
   /* *************************************/
   /* close cursor                      **/
   /* *************************************/
  ;
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    TA1REC.TA1LOCAT[2] = "KC0C230";
    TA1REC.TA1LOCAT[3] = "KC0C230";
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSCCS02(); /* abort program*/
  end
  ;
  ;
  ;
end // end KC0C230

// update databases
Function KC0C250()
   /* ****************************************/
   /* this process updates the databases   **/
   /* related to seting an order           **/
   /* ****************************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE"; /* get current date for*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* update all records*/
  ;
  PK1REC.PK1SBKEY = OP1REC.OP1KEY;
  OPHREC.OP1KEY = OP1REC.OP1KEY;
  PK1REC.PK1ALLNB = OP1REC.OP1NTMAL;
  OPHREC.OP1NTMAL = OP1REC.OP1NTMAL;
  OPHREC.XWHCD = OP1REC.XWHCD;
  KC0C270(); /* update the picking record*/
  ;
  if (KC0CW01.KC0CWUOK == "Y")
    KC0C280(); /* update the order record*/
    ;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset changes*/
  end
  ;
  ;
  ;
end // end KC0C250

// get ar record
Function KC0C265()
   /* ********************************************************/
   /* *   get accounts receivable record*/
   /* ********************************************************/
  ;
  ;
  ARCREC.KUCCOID = KC0CW01.KUCCOID;
  ;
  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0CW01.KC0CWMSG = " WARNING: NO A/R INFORMATION FOR THIS CUSTOMER";
      ARCREC.ARABAL = 0;
      ARCREC.ARAICRMO = 0;
      ARCREC.ARADSITM = 0;
      ARCREC.ARAUDDUC = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VARCUS01";
      TA1REC.TA1LOCAT[2] = "KC0C380";
      TA1REC.TA1LOCAT[3] = "KC0C380";
      TA1REC.TA1LOCAT[4] = "IO4160";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0C265

// update picking
Function KC0C270()
   /* ********************************************************/
   /* *   update pick transaction records*/
   /* ********************************************************/
  ;
  ;
  PK1REC.PK1HLDCD = "H";
  TA9REC.TA9BEGDT = TA2REC.TA2GRGGN;
  TA9REC.TA9ENDDT = 0;
  TA9REC.TA9OFSET = 4;
  call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  PK1REC.PK1DALDT = TA9REC.TA9RTNDT;
  PK1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PK1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  call "IO0910" ("SU", SQLCA, PK1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      KC0CW01.KC0CWUOK = "N"; /* UPDATE OK FLAG*/
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(23); /* deadlock problem*/
      return;
    else
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VPKTRN01";
      TA1REC.TA1LOCAT[2] = "KC0C270";
      TA1REC.TA1LOCAT[3] = "KC0C270";
      TA1REC.TA1LOCAT[4] = "IO0910";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  OPHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OPHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OPHREC.PK1HLDCD = "H";
  TA9REC.TA9BEGDT = TA2REC.TA2GRGGN;
  TA9REC.TA9ENDDT = 0;
  TA9REC.TA9OFSET = 4;
  call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  OPHREC.PK1DALDT = TA9REC.TA9RTNDT;
  ;
  call "IO1650" ("SU", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      KC0CW01.KC0CWUOK = "N"; /* update ok flag*/
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(23); /* deadlock problem*/
      return;
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKH01";
      TA1REC.TA1LOCAT[2] = "KC0C270";
      TA1REC.TA1LOCAT[3] = "KC0C270";
      TA1REC.TA1LOCAT[4] = "IO1650";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
end // end KC0C270

// update order
Function KC0C280()
   /* *********************************************************/
   /* *  update order header record                          **/
   /* *********************************************************/
  ;
   /* ----- previous credit information --------*/
  OP1REC.OP1PCSCD = OP1REC.XCSCD;
  OP1REC.OP1PCSDT = OP1REC.OP1CSADT;
  OP1REC.OP1PCSTM = OP1REC.OP1CSATM;
  ;
   /* ----- current date and time --------------*/
  OP1REC.OP1CSADT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.OP1CSATM = TA2REC.TA2TIMHM;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
   /* ------------- user id ------------------*/
  if (COMMAREA.CAUSERID in XCUTBL.CAUSERID)
    OP1REC.OP1CRLMR = XCUTBL.XCUCD[sysVar.arrayIndex]; /* last maint rep*/
  else
    OP1REC.OP1CRLMR = COMMAREA.CAUSERID;
  end
  ;
   /* ------------- pgm id ------------------*/
  OP1REC.OP1CRLMP = "KC0C"; /* last maint program*/
  ;
  ;
   /* -------- credit status ----------------*/
  OP1REC.XCSCD = "11"; /* set cr-stat to check-in-the-mail*/
  ;
  ;
   /* ********************************************************/
   /* *      update the order header record*/
   /* ********************************************************/
  ;
  SQLCA.VAGen_SQLCODE = 0;
  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* update order header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0CW01.KC0CWUOK = "N"; /* update ok flag*/
      KC0CW01.KC0CWERR = "Y"; /* set error-flag*/
      converseLib.validationFailed(3); /* order not found*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[2] = "KC0C280";
      TA1REC.TA1LOCAT[3] = "KC0C280";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KC0C280

// get credit record
Function KC0C290()
   /* ********************************************************/
   /* *   get credit record*/
   /* 7-13-95 BCourt Set record empty, zero fields not found.*/
   /* ********************************************************/
  ;
  set VCRCHK01 empty;
  ;
  VCRCHK01.KUCCOID = KC0CW01.KUCCOID;
  ;
  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0CW01.KC0CWMSG = " WARNING: NO CREDIT INFO FOR THIS CUSTOMER";
      VCRCHK01.ARCORPRO = 0;
      VCRCHK01.ARCORHLD = 0;
      VCRCHK01.ARCSBNAR = 0;
    else
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCRCHK01";
      TA1REC.TA1LOCAT[2] = "KC0C290";
      TA1REC.TA1LOCAT[3] = "KC0C290";
      TA1REC.TA1LOCAT[4] = "IO6010";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0C290

// process a set of orders
Function KC0C300()
   /* **********************************************/
   /* * this process will drive the releasing of  **/
   /* * of a set of orders                        **/
   /* * it will:                                  **/
   /* *   1. select all orders for a customer     **/
   /* *   2. prepare the screen for display       **/
   /* *   3. check special keys pressed           **/
   /* *   4. edit screen input                    **/
   /* **********************************************/
  ;
  KC0CW01.KC0CWEND = "N"; /* end-of-release-process*/
  KC0CW01.KC0CWMSG = " ";
  ;
  KC0C310(); /* get all orders*/
  ;
  KC0CW02.KC0CWTDX = 0; /* init temp table index*/
  KC0CW02.KC0CWCDX = 0; /* init current table index*/
  KC0CW02.KC0CWPDX = 0; /* init previoustable index*/
  KC0CW01.KC0CWSDX = 0; /* init current screen index*/
  KC0CW01.KC0CWCPG = 1; /* current page*/
  ;
  if (KC0CW01.KC0CWERR == "N") /* no errors*/
    KC0CW01.KC0CWFFL = "Y"; /* set first time flag*/
    KC0C370(); /* prepare first screen*/
    KC0CW02.KC0CWCDX = KC0CW02.KC0CWTDX; /* current table index*/
    ;
    while (KC0CW01.KC0CWEND == "N")
      KC0C400(); /* process all orders selected*/
    end
    ;
  end
end // end KC0C300

// select all orders
Function KC0C310()
  ;
  ;
  KC0C320(); /* declare cursor*/
  ;
  if (KC0CW01.KC0CWERR == "N") /* no errors*/
    ;
    /* *****************************************/
     /* read first order*/
    /* *****************************************/
    ;
    KC0CW01.KC0CWEOF = "N"; /* reading orders flag*/
    KC0C330(); /* get first order*/
    if (KC0CW01.KC0CWEOF == "Y")
      KC0C340(); /* close order cursor*/
      KC0CW01.KC0CWERR = "Y";
      KC0CW01.KC0CWEFL = "Y";
      converseLib.validationFailed(27); /* no orders for this select*/
      return;
    end
    ;
  else
    return;
  end
  ;
   /* *****************************************/
   /* * if customer not entered on selection **/
   /* * screen, assign order customer        **/
   /* *****************************************/
  ;
  if (KC0CM001.KUCCOID > 0)
    if (KC0CM001.KUCCOID == OP1REC.KUCCOID)
      /* next sentence*/
    else
      KC0CW01.KC0CWERR = "Y"; /* set error flag*/
      KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
      KC0CW01.KC0CWCON = OP1REC.KUCCOID;
      KC0CW01.KC0CWMSG = KC0CW01.KC0CWEM2;
      converseLib.validationFailed(17); /* customer not the same*/
      set KC0CM001.KUCCOID cursor, bold;
      return;
    end
  else
    KC0CW01.KUCCOID = OP1REC.KUCCOID; /* set customer nbr*/
    KC0C130(); /* read company record*/
    KC0C140(); /* edit legal entity*/
    if (KC0CW01.KC0CWERR == "Y")
      set KC0CM001.OP1CUOID cursor;
      return;
    end
  end
  ;
  ;
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  set KC0CW02 empty; /* empty ws-table*/
  ;
  KC0CW01.KC0CWCN1 = 0; /* order count*/
  ;
  while (KC0CW01.KC0CWEOF == "N" /* while there are orders to process*/
   && KC0CW01.KC0CWCN1 < 400) /* array is full*/
    ;
    KC0CW01.KC0CWOOK = "Y"; /* order ok to process  flag*/
    KC0CW01.KC0CWRIT = "Y"; /* need to read items for order flag*/
    KC0CW01.KC0CWALV = 0; /* allocated-value*/
    KC0CW01.KC0CWALQ = 0; /* allocated-qty*/
    KC0CW01.KC0CWOOV = 0; /* on-order-value*/
    KC0CW01.KC0CWOOQ = 0; /* on-order-qty*/
    ;
    KC0C350(); /* check order criteria*/
    ;
    if (KC0CW01.KC0CWOOK == "Y")
      KC0CW01.KC0CWCN1 = KC0CW01.KC0CWCN1 + 1; /* add 1 to total orders*/
      ;
      if (KC0CW01.KC0CWRIT == "Y") /* if need to read items for order*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0C230(); /* add-up items for an order*/
      end
      ;
      KC0C360(); /* load ws-table of orders*/
    end
    KC0C330(); /* get next order*/
    ;
  end
  ;
  KC0C340(); /* close order cursor*/
  ;
  KC0CW02.KC0CWBOT = KC0CW02.KC0CWCDX; /* bottom of ws-talble*/
  ;
  KC0CW01.KC0CWTPG = KC0CW02.KC0CWBOT / 13;
  ;
  KC0CW01.KC0CWREM = KC0CW02.KC0CWBOT % 13;
  ;
  if (KC0CW01.KC0CWREM > 0)
    KC0CW01.KC0CWTPG = KC0CW01.KC0CWTPG + 1;
  end
  ;
  ;
  if (KC0CW01.KC0CWCN1 == 400) /* array is full*/
    KC0CW01.KC0CWMSG = KC0CW01.KC0CWOVM; /* set message*/
  end
  ;
  if (KC0CW01.KC0CWCN1 == 0)
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    KC0CW01.KC0CWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(29); /* orders do not match the selection criteria*/
  end
  ;
  ;
  ;
end // end KC0C310

// declare order select cursor
Function KC0C320()
  ;
   /* *****************************************/
   /* * all orders selected will be read into**/
   /* * a working storage table              **/
   /* *****************************************/
  ;
  set SQLCA empty;
  ;
  if (KC0CM001.OP1CUOID > 0
   && KC0CM001.OP1NORID == 0)
    KC0CW01.KC0CWCOD = KC0CM001.OP1CUOID;
    OP1REC.OP1CUOID = KC0CW01.KC0CWCOD;
    OP1REC.OP1PARTN = KC0CW01.KC0CWPAR;
    OP1REC.OP1NORID = -1;
    call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* sub-ords for cust*/
  else
    OP1REC.KUCCOID = KC0CM001.KUCCOID;
    if (KC0CM001.KUMSTRID > 0)
      OP1REC.KUMSTRID = KC0CM001.KUMSTRID;
    else
      OP1REC.KUMSTRID = -1;
    end
    if (KC0CM001.XNXCD > 0)
      OP1REC.XNXCD = KC0CM001.XNXCD;
    else
      OP1REC.XNXCD = -1;
    end
    if (KC0CM001.XGPCD > " ")
      OP1REC.XGPCD = KC0CM001.XGPCD;
    else
      OP1REC.XGPCD = " ";
    end
    ;
    call "IO0430" ("S2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0C320";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0C320

// get order "select" record
Function KC0C330()
   /* ********************************************************/
   /* *   get the next order header record*/
   /* ********************************************************/
  ;
  ;
  if (KC0CM001.OP1CUOID > 0
   && KC0CM001.OP1NORID == 0)
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  else
    call "IO0430" ("2N", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* read order header*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KC0CW01.KC0CWEOF = "Y"; /* set end-of-file flag to 'yes'*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "KC0C330";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSCCS02(); /* abort*/
    end
  end
  ;
  ;
  ;
end // end KC0C330

// close cursors
Function KC0C340()
  ;
   /* *****************************************/
   /* * close cursors*/
   /* *****************************************/
  ;
  ;
  if (KC0CM001.OP1CUOID > 0
   && KC0CM001.OP1NORID == 0)
    call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all sub-ords for cust*/
  else
    call "IO0430" ("C2", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* all ords for cust*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "KC0C340";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSCCS02(); /* abort*/
  end
  ;
  ;
end // end KC0C340

// edit order selected from set
Function KC0C350()
   /* ***********************************************/
    /* edit order header record                   **/
   /* ***********************************************/
  ;
   /* ***********************************************/
      /* need date edit*/
   /* ***********************************************/
  ;
  if (KC0CW01.OP1CUNDT > 0)
    if (KC0CW01.KC0CW-NEED-DATE-TO == 0)
      if (KC0CW01.OP1CUNDT == OP1REC.OP1CUNDT)
       /* next sentence*/
      else
        KC0CW01.KC0CWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end
  ;
   /* ***********************************************/
      /* check if within need date range*/
   /* ***********************************************/
  ;
  if (KC0CM001.KC0CMNDT != " ")
    if (KC0CM001.KC0CM-NEED-DATE-TO != " ")
      if (OP1REC.OP1CUNDT >= KC0CW01.OP1CUNDT)
        if (OP1REC.OP1CUNDT <= KC0CW01.KC0CW-NEED-DATE-TO)
       /* next sentence*/
        else
          KC0CW01.KC0CWOOK = "N"; /* order not needed*/
          return;
        end
      else
        KC0CW01.KC0CWOOK = "N"; /* order not needed*/
        return;
      end
    end
  end
  ;
   /* ***********************************************/
      /* edit bulk order code*/
   /* ***********************************************/
  ;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "N")
      /* next sentence   ; order ok*/
    else
      KC0CW01.KC0CWOOK = "N"; /* do not process order*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* edit order status*/
   /* ***********************************************/
  ;
  if (OP1REC.XOSCD == "AL"
   || OP1REC.XOSCD == "PA")
     /* next sentence*/
  else
    KC0CW01.KC0CWOOK = "N"; /* order not needed*/
    return;
  end
  ;
  if (OP1REC.XOSCD == "OP"
   || OP1REC.XOSCD == "AL")
    KC0CW01.KC0CWRIT = "N"; /* do not need to read item records*/
    if (OP1REC.XOSCD == "OP")
      KC0CW01.KC0CWOOV = OP1REC.OP1OVALU;
      KC0CW01.KC0CWOOQ = OP1REC.OP1OTUNT;
      KC0CW01.KC0CWALV = 0;
      KC0CW01.KC0CWALQ = 0;
    end
    if (OP1REC.XOSCD == "AL")
      KC0CW01.KC0CWOOV = OP1REC.OP1CKAMT;
      KC0CW01.KC0CWOOQ = OP1REC.OP1CCKOQ;
      KC0CW01.KC0CWALV = OP1REC.OP1CKAMT;
      KC0CW01.KC0CWALQ = OP1REC.OP1CCKOQ;
    end
  else
    KC0CW01.KC0CWRIT = "Y"; /* do need to read item records*/
  end
  ;
  ;
   /* ***********************************************/
      /* credit status edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.XCSCD != "  ")
    if (KC0CM001.XCSCD == OP1REC.XCSCD)
      /* next sentence*/
    else
      KC0CW01.KC0CWOOK = "N"; /* order not needed*/
      return;
    end
  else
    if (OP1REC.XCSCD == "10"
     || OP1REC.XCSCD == "12")
      /* next sentence*/
    else
      KC0CW01.KC0CWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* order type edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.KC0CM-ORDER-TYPE > " ")
    if (KC0CW01.XOTCD == OP1REC.XOTCD)
      /* next sentence*/
    else
      KC0CW01.KC0CWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* credit date edit*/
   /* ***********************************************/
  ;
  if (KC0CW01.OP1CSADT > 0)
    if (KC0CW01.OP1CSADT == OP1REC.OP1CSADT)
      /* next sentence*/
    else
      KC0CW01.KC0CWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
   /* ***********************************************/
      /* po. # edit*/
   /* ***********************************************/
  ;
  if (KC0CM001.OP1CUPO > " ")
    if (KC0CM001.OP1CUPO == OP1REC.OP1CUPO)
      /* next sentence*/
    else
      KC0CW01.KC0CWOOK = "N"; /* order not needed*/
      return;
    end
  end
  ;
  ;
  ;
end // end KC0C350

// load ws-table
Function KC0C360()
   /* ***************************************/
   /* * load all orders to ws-table        **/
   /* ***************************************/
  ;
  KC0CW02.KC0CWCDX = KC0CW02.KC0CWCDX + 1; /* add 1 to index table*/
  ;
  KC0CW02.KC0CWSEL[KC0CWCDX] = " ";
  ;
   /* ***************************************/
    /* prepare order number*/
   /* ***************************************/
  ;
  KC0CW02.OP1KEY[KC0CWCDX] = OP1REC.OP1KEY;
  KC0CW02.KC0CWCUO[KC0CWCDX] = OP1REC.OP1CUOID;
  KC0CW02.KC0CWRID[KC0CWCDX] = OP1REC.OP1NORID;
  ;
   /* ***************************************/
     /* prepare need date*/
   /* ***************************************/
  ;
  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  KC0CW01.KC0CWDT1 = TA2REC.TA2GRGA;
  ;
  KC0CW02.KC0CWMM1[KC0CWCDX] = KC0CW01.KC0CWMM1;
  KC0CW02.KC0CWDD1[KC0CWCDX] = KC0CW01.KC0CWDD1;
  KC0CW02.KC0CWYY1[KC0CWCDX] = KC0CW01.KC0CWYY1;
  KC0CW02.KC0CWSL1[KC0CWCDX] = "/";
  KC0CW02.KC0CWSL2[KC0CWCDX] = "/";
  ;
   /* ***************************************/
    /* prepare order type abreviation*/
    /* prepare order status*/
    /* prepare credit status*/
   /* ***************************************/
  ;
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0CW02.XOTABRV[KC0CWCDX] = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0CW02.XOTABRV[KC0CWCDX] = "N FND";
  end
  ;
  KC0CW02.XOSCD[KC0CWCDX] = OP1REC.XOSCD; /* order status*/
  ;
  KC0CW02.XCSCD[KC0CWCDX] = OP1REC.XCSCD; /* credit status*/
  ;
   /* ***************************************/
   /* prepare credit reasons*/
   /* ***************************************/
  ;
  KC0CW02.KC0CWCD1[KC0CWCDX] = OP1REC.XCHCD[1];
  KC0CW02.KC0CWCD2[KC0CWCDX] = OP1REC.XCHCD[2];
  KC0CW02.KC0CWCD3[KC0CWCDX] = OP1REC.XCHCD[3];
  KC0CW02.KC0CWDS1[KC0CWCDX] = "-";
  KC0CW02.KC0CWDS2[KC0CWCDX] = "-";
  ;
   /* ***************************************/
   /* prepare order quantites*/
   /* ***************************************/
  ;
  KC0CW01.KC0CWCKA = OP1REC.OP1CKAMT;
  KC0CW02.KC0CWOIP[KC0CWCDX] = KC0CW01.KC0CWCKA;
  KC0CW02.KC0CWOOV[KC0CWCDX] = KC0CW01.KC0CWOOV;
  KC0CW02.KC0CWALV[KC0CWCDX] = KC0CW01.KC0CWALV;
  ;
  ;
  ;
end // end KC0C360

// prepare first screen
Function KC0C370()
   /* *********************************************/
   /* *  prepare the first screen to be displayed**/
   /* *********************************************/
  ;
  KC0C130(); /* get kucrec company record*/
  KC0C265(); /* get arcrec ar customer record*/
  KC0C290(); /* get vcrchk01 credit record*/
  ;
  set KC0CM005 initial; /* reset screen*/
  ;
   /* ******************************/
   /* load A/R data into screen*/
   /* ******************************/
  ;
  KC0CM005.KC0CMDAT = VGVar.currentShortGregorianDate; /* prepare date*/
  KC0CM005.KC0CMANM = "KC0C370"; /* converse name*/
  ;
  ;
  KC0CW01.KC0CWFCU = "******************"; /* full cust number*/
  KC0CW01.KC0CWPR1 = ".";
  KC0CW01.KC0CWPR2 = ".";
  KC0CW01.KC0CWPR3 = ".";
  ;
  KC0CW01.KC0CWCOI = KC0CW01.KUCCOID; /* move company number*/
  ;
  if (KC0CM001.KUMSTRID > 0) /* move store*/
    KC0CW01.KC0CWSTO = KC0CM001.KUMSTRID;
  end
  ;
  if (KC0CM001.XNXCD > 0) /* move department*/
    KC0CW01.KC0CWXNX = KC0CM001.XNXCD;
  end
  ;
  if (KC0CM001.XGPCD > " ") /* move gpc code*/
    KC0CW01.KC0CWGPC = KC0CM001.XGPCD;
  end
  ;
  KC0CM005.KC0CWFCU = KC0CW01.KC0CWFCU; /* customer number*/
  ;
  KC0CM005.KUCCONM = KUCREC.KUCCONM; /* move customer name*/
  KC0CM005.KUCCRLIN = KUCREC.KUCCRLIN; /* credit line*/
  ;
  if (KC0CW01.KC0CWFFL == "Y")
    KC0CW01.KC0CWFFL = " "; /* unset first time flag*/
    KC0CM005.KC0CWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0CM005.KC0CWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
    KC0CW01.KC0CWINP = VCRCHK01.ARCORPRO; /* orders in process*/
    KC0CW01.KC0CWHDC = VCRCHK01.ARCORHLD; /* orders on hold*/
  else
    KC0CM005.KC0CWINP = KC0CW01.KC0CWINP; /* orders in process*/
    KC0CM005.KC0CWHDC = KC0CW01.KC0CWHDC; /* orders on hold*/
  end
  ;
  ;
  KC0CW01.KC0CWARB = 0;
  ;
  KC0CW01.KC0CWARB = ARCREC.ARABAL - ARCREC.ARAICRMO - ARCREC.ARADSITM;
  KC0CW01.KC0CWARB = KC0CW01.KC0CWARB - ARCREC.ARAUDDUC;
  KC0CM005.ARCSBNAR = VCRCHK01.ARCSBNAR; /* SBNAR to screen*/
  KC0CM005.ARABAL = KC0CW01.KC0CWARB;
  KC0CM005.KC0CWCN1 = KC0CW01.KC0CWCN1; /* nbr of orders selected*/
  KC0CM005.KC0CWXPO = KC0CW01.KC0CWARB + KC0CM005.KC0CWINP;
  KC0CM005.KC0CWXPO = KC0CM005.KC0CWXPO + VCRCHK01.ARCSBNAR;
                                   /* add SBNAR to ex*/
  ;
  KC0CM005.KC0CWCPG = KC0CW01.KC0CWCPG; /* set current page*/
  KC0CM005.KC0CWTPG = KC0CW01.KC0CWTPG; /* set total page*/
  ;
  ;
  KC0CW01.KC0CWSTP = 0; /* init screen top*/
  ;
  while (KC0CW01.KC0CWSTP < 13
   && KC0CW02.KC0CWTDX < KC0CW02.KC0CWBOT)
    KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP + 1;
    KC0CW02.KC0CWTDX = KC0CW02.KC0CWTDX + 1;
    if (KC0CW02.KC0CWSEL[KC0CWTDX] == "R")
      set KC0CM005.KC0CMSEL[KC0CWSTP] skip, bold;
      set KC0CM005.KC0CWOOV[KC0CWSTP] skip, bold;
    end
    if (KC0CW02.KC0CWSEL[KC0CWTDX] == "M")
      set KC0CM005.KC0CMORD[KC0CWSTP] skip, bold;
      KC0CM005.KC0CMSEL[KC0CWSTP] = " ";
    else
      KC0CM005.KC0CMSEL[KC0CWSTP] = KC0CW02.KC0CWSEL[KC0CWTDX];
    end
    KC0CM005.KC0CMORD[KC0CWSTP] = KC0CW02.KC0CWORD[KC0CWTDX];
    KC0CM005.XOTABRV[KC0CWSTP] = KC0CW02.XOTABRV[KC0CWTDX];
    KC0CM005.XOSCD[KC0CWSTP] = KC0CW02.XOSCD[KC0CWTDX];
    KC0CM005.XCSCD[KC0CWSTP] = KC0CW02.XCSCD[KC0CWTDX];
    KC0CM005.KC0CWNDT[KC0CWSTP] = KC0CW02.KC0CWNDT[KC0CWTDX];
    KC0CM005.KC0CWRSN[KC0CWSTP] = KC0CW02.KC0CWRSN[KC0CWTDX];
    KC0CM005.KC0CWOIP[KC0CWSTP] = KC0CW02.KC0CWOIP[KC0CWTDX];
    KC0CM005.KC0CWOOV[KC0CWSTP] = KC0CW02.KC0CWOOV[KC0CWTDX];
    KC0CM005.KC0CWALV[KC0CWSTP] = KC0CW02.KC0CWALV[KC0CWTDX];
  end
  ;
  KC0CW01.KC0CWSDX = KC0CW01.KC0CWSTP; /* current screen index*/
  if (KC0CW02.KC0CWTDX == KC0CW02.KC0CWBOT
   && KC0CW01.KC0CWERR == "N")
    converseLib.validationFailed(4); /* last record display*/
  end
  ;
  while (KC0CW01.KC0CWSTP < 13)
    KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP + 1;
    set KC0CM005.KC0CMSEL[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CMORD[KC0CWSTP] skip, invisible;
    set KC0CM005.XOTABRV[KC0CWSTP] skip, invisible;
    set KC0CM005.XOSCD[KC0CWSTP] skip, invisible;
    set KC0CM005.XCSCD[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CWNDT[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CWRSN[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CWOIP[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CWOOV[KC0CWSTP] skip, invisible;
    set KC0CM005.KC0CWALV[KC0CWSTP] skip, invisible;
  end
  ;
end // end KC0C370

// process all orders selected
Function KC0C400()
   /* ***********************************************/
   /* this process will allow the user to set     **/
   /* orders from a display of all orders selected**/
   /* via the cc0cm001 screen map                 **/
                                               /* **/
   /* steps:                                      **/
   /* -- present the screen                       **/
   /* -- edit special keys                        **/
   /* -- edit the screen user entry               **/
                                               /* **/
   /* ***********************************************/
  ;
  KC0CW01.KC0CWERR = "N"; /* set error flag*/
  KC0CM005.KC0CWMSG = KC0CW01.KC0CWMSG; /* credit message number*/
  ;
  ;
  converse KC0CM005 ;
  ;
  KC0CW01.KC0CWMSG = " ";
  KC0CM005.KC0CWMSG = " ";
  set KC0CM005.KC0CMOPT cursor, initialAttributes; /* init cursor*/
  ;
  KC0C410(); /* edit special keys*/
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0C430(); /* edit screen*/
  end
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0C750(); /* edit page counter*/
  end
  ;
  ;
  ;
end // end KC0C400

// pfkey processing for cc0cm005
Function KC0C410()
   /* ************************************************/
    /* edit pfkeys and special keys                **/
   /* ************************************************/
  ;
   /* ***********************************/
        /* pa2 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pa2) /* back to order selection menu Kc0cm001*/
    KC0CW01.KC0CWERR = "Y";
    KC0CW01.KC0CWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0CM005.CATOAP > " ") /* fast path*/
      if ("X" in KC0CW02.KC0CWSEL) /* is there any updates pending*/
        KC0CW01.KC0CWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0CM005.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0CM005.CATOAP;
      COMMAREA.CAITEM = KC0CM005.CAITEM;
      COMMAREA.CAFROMAP = "KC0C";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0CW01.KC0CWERR = "Y";
      set KC0CM005.CATOAP cursor, bold;
    else
      set KC0CM005.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0CM005.CATOAP > " ")
      KC0CW01.KC0CWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0CM005.CATOAP cursor, bold;
      return;
    else
      set KC0CM005.CATOAP modified;
    end
  end
  ;
   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/
  ;
  if ("X" in KC0CW02.KC0CWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf3 /* exit screen*/
     || converseVar.eventKey is pf4) /* goal menu screen*/
      KC0CW01.KC0CWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end
  ;
   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0C";
    XSPF1();
    KC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf3) /* back to main menu*/
    KC0CW01.KC0CWERR = "Y";
    KC0CW01.KC0CWEND = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0C";
    XSPF4();
  end
  ;
  ;
   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf7)
    KC0C420(); /* scroll up*/
    return;
  end
  ;
   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf8)
    KC0C460(); /* scroll down*/
    return;
  end
  ;
   /* ***********************************/
     /* pf9 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf9) /* show windowing screen*/
    KC0C500();
    return;
  end
  ;
   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf6)
    KC0C600(); /* view selected orders*/
    return;
  end
  ;
   /* ***********************************/
     /* pf12 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf12)
    KC0C700(); /* update orders marked*/
    return;
  end
  ;
  ;
   /* ***********************************/
     /* pf21 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf21) /* show windowing screen*/
    KC0C550();
    return;
  end
  ;
  KC0CW01.KC0CWERR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid key*/
  ;
  ;
  ;
end // end KC0C410

// scroll up process
Function KC0C420()
  ;
  ;
   /* *********************************************************/
          /* scrolling up and editing takes place*/
   /* *********************************************************/
  ;
  ;
  if (KC0CW02.KC0CWPDX == 0) /* is it at the top of the screen*/
    converseLib.validationFailed(14); /* can not scroll up*/
    KC0CW01.KC0CWERR = "Y";
    return;
  end
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0CW02.KC0CWCDX = KC0CW02.KC0CWPDX; /* current eq  previous*/
    KC0CW01.KC0CWSTP = 13;
    ;
    while (KC0CW01.KC0CWSTP >= 1 /* load the screen with the wstable*/
     && KC0CW02.KC0CWPDX >= 1)
      set KC0CM005.KC0CMSEL[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CMORD[KC0CWSTP] initialAttributes;
      set KC0CM005.XOTABRV[KC0CWSTP] initialAttributes;
      set KC0CM005.XOSCD[KC0CWSTP] initialAttributes;
      set KC0CM005.XCSCD[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWNDT[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWRSN[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWOIP[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWOOV[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWALV[KC0CWSTP] initialAttributes;
      if (KC0CW02.KC0CWSEL[KC0CWPDX] == "R")
        set KC0CM005.KC0CMSEL[KC0CWSTP] skip, bold;
        set KC0CM005.KC0CWOOV[KC0CWSTP] skip, bold;
      end
      if (KC0CW02.KC0CWSEL[KC0CWPDX] == "M")
        set KC0CM005.KC0CMORD[KC0CWSTP] skip, bold;
        KC0CM005.KC0CMSEL[KC0CWSTP] = " ";
      else
        KC0CM005.KC0CMSEL[KC0CWSTP] = KC0CW02.KC0CWSEL[KC0CWPDX];
      end
      KC0CM005.KC0CMORD[KC0CWSTP] = KC0CW02.KC0CWORD[KC0CWPDX];
      KC0CM005.XOTABRV[KC0CWSTP] = KC0CW02.XOTABRV[KC0CWPDX];
      KC0CM005.XOSCD[KC0CWSTP] = KC0CW02.XOSCD[KC0CWPDX];
      KC0CM005.XCSCD[KC0CWSTP] = KC0CW02.XCSCD[KC0CWPDX];
      KC0CM005.KC0CWNDT[KC0CWSTP] = KC0CW02.KC0CWNDT[KC0CWPDX];
      KC0CM005.KC0CWRSN[KC0CWSTP] = KC0CW02.KC0CWRSN[KC0CWPDX];
      KC0CM005.KC0CWOIP[KC0CWSTP] = KC0CW02.KC0CWOIP[KC0CWPDX];
      KC0CM005.KC0CWOOV[KC0CWSTP] = KC0CW02.KC0CWOOV[KC0CWPDX];
      KC0CM005.KC0CWALV[KC0CWSTP] = KC0CW02.KC0CWALV[KC0CWPDX];
      KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP - 1;
      KC0CW02.KC0CWPDX = KC0CW02.KC0CWPDX - 1;
    end
    ;
    ;
    KC0CW01.KC0CWERR = "Y"; /* reconverse the screen*/
    ;
    KC0CW01.KC0CWCPG = KC0CW01.KC0CWCPG - 1;
    KC0CM005.KC0CWCPG = KC0CW01.KC0CWCPG;
    ;
    if (KC0CW02.KC0CWPDX < 1)
      KC0CW02.KC0CWPDX = 0;
    end
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0C420

// edit screen cc0cm005
Function KC0C430()
  ;
  ;
   /* ***************************************/
   /* edit main option*/
   /* ***************************************/
  set KC0CM005.KC0CWCPG modified;
  ;
  if (KC0CM005.KC0CMOPT == " " /* if valid entered codes*/
   || KC0CM005.KC0CMOPT == "R")
    set KC0CM005.KC0CMOPT modified;
  else
    KC0CW01.KC0CWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(13); /* invalid code*/
    set KC0CM005.KC0CMOPT cursor, bold;
  end
  ;
  ;
   /* ***************************************/
   /* update working table*/
   /* ***************************************/
  ;
  if (KC0CW01.KC0CWERR == "N") /* if not errors*/
    ;
    KC0CW01.KC0CWSTP = 0; /* set screen index*/
    KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* temp ws-table index*/
    ;
    while (KC0CW01.KC0CWSTP < 13 /* go thru the screen*/
     && KC0CW02.KC0CWTDX < KC0CW02.KC0CWBOT)
      KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP + 1; /* increment screen index*/
      KC0CW02.KC0CWTDX = KC0CW02.KC0CWTDX + 1; /* increment table index*/
      ;
      /* ***************************************/
       /* check for select option 'n'         **/
      /* ***************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == "N")
        if (KC0CW02.KC0CWSEL[KC0CWTDX] == "X")
          KC0CW02.KC0CWSEL[KC0CWTDX] = " ";
        end
      end
      ;
      /* ***************************************/
       /* check for select option ' ' and 'r' **/
      /* ***************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == " ")
        if (KC0CM005.KC0CMOPT == "R")
          if (KC0CW02.KC0CWSEL[KC0CWTDX] == " ")
            KC0CW02.KC0CWSEL[KC0CWTDX] = "X";
            if (converseVar.eventKey is pf12)
              KC0CW01.KC0CWERR = "Y"; /* set error flag*/
              converseLib.validationFailed(40); /* press enter key before pf12*/
            end
          end
        end
      end
      ;
      /* *******************************************/
       /* check for select options 's' and 'x'    **/
      /* *******************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == "S")
        if (KC0CW02.KC0CWSEL[KC0CWTDX] == " ")
          KC0CW02.KC0CWSEL[KC0CWTDX] = "X";
          if (converseVar.eventKey is pf12)
            KC0CW01.KC0CWERR = "Y"; /* set error flag*/
            converseLib.validationFailed(40); /* press enter key before pf12*/
          end
        end
      end
      ;
      ;
      /* *******************************************/
       /* check for select option  'v'            **/
      /* *******************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == "V")
        if (KC0CW02.KC0CWSEL[KC0CWTDX] == "X")
          KC0CW02.KC0CWSEL[KC0CWTDX] = " ";
        end
        KC0CW02.KC0CWSEL[KC0CWTDX] = "V";
      end
      ;
      /* *******************************************/
       /* check for unselecting option 'v'        **/
      /* *******************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == " ")
        if (KC0CW02.KC0CWSEL[KC0CWTDX] == "V")
          KC0CW02.KC0CWSEL[KC0CWTDX] = " ";
        end
      end
      ;
      /* *****************************/
        /* update screen selections*/
      /* *****************************/
      ;
      KC0CM005.KC0CMSEL[KC0CWSTP] = KC0CW02.KC0CWSEL[KC0CWTDX];
      ;
      /* ***************************************/
       /* check for select option 'r'*/
       /* also check for 'm'odified orders*/
      /* ***************************************/
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == "R")
        set KC0CM005.KC0CMSEL[KC0CWSTP] skip, bold;
        set KC0CM005.KC0CWOOV[KC0CWSTP] skip, bold;
      end
      ;
      if (KC0CM005.KC0CMSEL[KC0CWSTP] == "M")
        KC0CM005.KC0CMSEL[KC0CWSTP] = " ";
        set KC0CM005.KC0CMORD[KC0CWSTP] skip, bold;
      end
      ;
    end
  end
  ;
  KC0CM005.KC0CMOPT = " "; /* clear option fields*/
  ;
  ;
end // end KC0C430

// scroll down process
Function KC0C460()
  ;
  ;
   /* *********************************************************/
          /* scrolling down and editing takes place*/
   /* *********************************************************/
  ;
  ;
  if (KC0CW02.KC0CWCDX == KC0CW02.KC0CWBOT) /* if at the bottom of table*/
    converseLib.validationFailed(4); /* can not scroll down*/
    KC0CW01.KC0CWERR = "Y";
    return;
  end
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0CW01.KC0CWSTP = 0;
    KC0CW02.KC0CWPDX = KC0CW02.KC0CWCDX;
    ;
    while (KC0CW01.KC0CWSTP < 13 /* load the screen with the ws table*/
     && KC0CW02.KC0CWCDX < KC0CW02.KC0CWBOT)
      KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP + 1;
      KC0CW02.KC0CWCDX = KC0CW02.KC0CWCDX + 1;
      set KC0CM005.KC0CMSEL[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CMORD[KC0CWSTP] initialAttributes;
      set KC0CM005.XOTABRV[KC0CWSTP] initialAttributes;
      set KC0CM005.XOSCD[KC0CWSTP] initialAttributes;
      set KC0CM005.XCSCD[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWNDT[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWRSN[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWOIP[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWOOV[KC0CWSTP] initialAttributes;
      set KC0CM005.KC0CWALV[KC0CWSTP] initialAttributes;
      if (KC0CW02.KC0CWSEL[KC0CWCDX] == "R") /* orders already updated*/
        set KC0CM005.KC0CMSEL[KC0CWSTP] skip, bold;
        set KC0CM005.KC0CWOOV[KC0CWSTP] skip, bold;
      end
      if (KC0CW02.KC0CWSEL[KC0CWCDX] == "M") /* order couldn't be updated*/
        set KC0CM005.KC0CMORD[KC0CWSTP] skip, bold;
        KC0CM005.KC0CMSEL[KC0CWSTP] = " ";
      else
        KC0CM005.KC0CMSEL[KC0CWSTP] = KC0CW02.KC0CWSEL[KC0CWCDX];
      end
      KC0CM005.KC0CMORD[KC0CWSTP] = KC0CW02.KC0CWORD[KC0CWCDX];
      KC0CM005.XOTABRV[KC0CWSTP] = KC0CW02.XOTABRV[KC0CWCDX];
      KC0CM005.XOSCD[KC0CWSTP] = KC0CW02.XOSCD[KC0CWCDX];
      KC0CM005.XCSCD[KC0CWSTP] = KC0CW02.XCSCD[KC0CWCDX];
      KC0CM005.KC0CWNDT[KC0CWSTP] = KC0CW02.KC0CWNDT[KC0CWCDX];
      KC0CM005.KC0CWRSN[KC0CWSTP] = KC0CW02.KC0CWRSN[KC0CWCDX];
      KC0CM005.KC0CWOIP[KC0CWSTP] = KC0CW02.KC0CWOIP[KC0CWCDX];
      KC0CM005.KC0CWOOV[KC0CWSTP] = KC0CW02.KC0CWOOV[KC0CWCDX];
      KC0CM005.KC0CWALV[KC0CWSTP] = KC0CW02.KC0CWALV[KC0CWCDX];
    end
    ;
    KC0CW01.KC0CWSDX = KC0CW01.KC0CWSTP;
                                   /* reset current screen index*/
    if (KC0CW02.KC0CWCDX == KC0CW02.KC0CWBOT
     && KC0CW01.KC0CWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    ;
    while (KC0CW01.KC0CWSTP < 13)
      KC0CW01.KC0CWSTP = KC0CW01.KC0CWSTP + 1;
      set KC0CM005.KC0CMSEL[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CMORD[KC0CWSTP] skip, invisible;
      set KC0CM005.XOTABRV[KC0CWSTP] skip, invisible;
      set KC0CM005.XOSCD[KC0CWSTP] skip, invisible;
      set KC0CM005.XCSCD[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CWNDT[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CWRSN[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CWOIP[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CWOOV[KC0CWSTP] skip, invisible;
      set KC0CM005.KC0CWALV[KC0CWSTP] skip, invisible;
    end
    ;
    KC0CW01.KC0CWERR = "Y"; /* reconverse the screen*/
    ;
    KC0CW01.KC0CWCPG = KC0CW01.KC0CWCPG + 1;
    KC0CM005.KC0CWCPG = KC0CW01.KC0CWCPG;
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KC0C460

// windowing routine
Function KC0C500()
   /* *********************************************************/
   /* *   if the user wants to browse thru the credit status **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "            CREDIT STATUS ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCS01(); /* perform credit status pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* previous to current index*/
  KC0C370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0C500

// windowing routine
Function KC0C550()
   /* *********************************************************/
   /* *   if the user wants to browse thru the rtc rsn code  **/
   /* *   table (a pop-up window is presented                **/
   /* *********************************************************/
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "Y")
    return;
  end
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "      RTC REASON CODE     ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXCH01();
                                   /* perform rtc reason code pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* previous to current index*/
  KC0C370(); /* refresh the screen*/
  ;
  ;
  ;
end // end KC0C550

// view selected orders
Function KC0C600()
   /* ***********************************/
    /* user has requested to inquiry*/
    /* on selected orders*/
   /* ***********************************/
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "Y")
    return;
  end
  ;
  if ("V" in KC0CW02.KC0CWSEL) /* if any order has been selected*/
    /* next sentence                  for viewing*/
  else
    KC0CW01.KC0CWERR = "Y"; /* set error message*/
    converseLib.validationFailed(32); /* no orders have been marked for view*/
    return;
  end
  ;
  ;
  KC0CW02.KC0CWTDX = 0; /* prepare table index*/
  ;
  while (KC0CW02.KC0CWTDX < KC0CW02.KC0CWBOT)
    if (KC0CW01.KC0CWERR == "Y")
      KC0C610(); /* display order information*/
    else
      KC0CW02.KC0CWTDX = KC0CW02.KC0CWTDX + 1; /* add to the index*/
      if (KC0CW02.KC0CWSEL[KC0CWTDX] == "V")
        KC0C630(); /* read order header*/
        KC0C640(); /* format order screen*/
        KC0C610(); /* display order information*/
        KC0CW02.KC0CWSEL[KC0CWTDX] = " "; /* clear select ind*/
      end
    end
  end
  ;
  KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* move previous to temp*/
  ;
  KC0C370(); /* update screen display*/
  ;
  ;
  ;
  ;
end // end KC0C600

// order inquiry screen
Function KC0C610()
   /* *******************************************/
   /* order inquiry screen process            **/
   /* 1. prepares working variables           **/
   /* 2. reads the order header               **/
   /* 3. format the order screen              **/
   /* 4. present the screen                   **/
   /* 5. edit pf keys                         **/
                                           /* **/
   /* *******************************************/
  ;
  KC0CW01.KC0CWERR = "N";
  KC0CM010.KC0CMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  KC0CM010.KC0CMANM = "KC0C610"; /* set screen name*/
  ;
  KC0CM010.VAGen_EZEMSG = KC0CW01.KC0CWMSG;
  ;
  converse KC0CM010 ;
  ;
  KC0CW01.KC0CWMSG = " ";
  KC0CM010.VAGen_EZEMSG = " ";
  ;
  KC0C620(); /* edit pf keys*/
  ;
  ;
  ;
end // end KC0C610

// pf key processing for cc0cm010
Function KC0C620()
   /* ********************************************/
     /* edit pf keys                           **/
   /* ********************************************/
  ;
   /* ***********************************/
        /* enter key edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter)
    if (KC0CM010.CATOAP > " ") /* fast path*/
      if ("X" in KC0CW02.KC0CWSEL) /* is there any updates pending*/
        KC0CW01.KC0CWERR = "Y"; /* error message set*/
        converseLib.validationFailed(9); /* can not fast path while updates pending*/
        set KC0CM010.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KC0CM010.CATOAP;
      COMMAREA.CAITEM = KC0CM010.CAITEM;
      COMMAREA.CAFROMAP = "KC0C";
      XSEXIT();
      converseLib.validationFailed(30); /* invalid fast path*/
      KC0CW01.KC0CWERR = "Y";
      set KC0CM010.CATOAP modified, bold;
    else
      set KC0CM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KC0CM010.CATOAP > " ")
      KC0CW01.KC0CWERR = "Y";
      converseLib.validationFailed(6); /* can not fast path and use pf keys*/
      set KC0CM010.CATOAP cursor, bold;
      return;
    else
      set KC0CM010.CATOAP modified;
    end
  end
  ;
  ;
   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/
  ;
  if ("X" in KC0CW02.KC0CWSEL) /* if updates pending*/
    if (converseVar.eventKey is pf1 /* help screens*/
     || converseVar.eventKey is pf4) /* exit screen*/
      KC0CW01.KC0CWERR = "Y";
      converseLib.validationFailed(10);
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KC0C";
    XSPF1();
    KC0CM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KC0CW01.KC0CWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to credit screen*/
    KC0CW02.KC0CWTDX = 0;
    while (KC0CW02.KC0CWTDX < KC0CW02.KC0CWBOT)
      KC0CW02.KC0CWTDX = KC0CW02.KC0CWTDX + 1;
      if (KC0CW02.KC0CWSEL[KC0CWTDX] == "V") /* clear out remaining 'v's*/
        KC0CW02.KC0CWSEL[KC0CWTDX] = " ";
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KC0C"; /* comming from appl*/
    XSPF4();
  end
  ;
  ;
  converseLib.validationFailed(2); /* invalid pf key message*/
  KC0CW01.KC0CWERR = "Y";
  ;
  ;
  ;
end // end KC0C620

// get order header record
Function KC0C630()
   /* ************************************************/
     /* read the order header for inquiry          **/
   /* ************************************************/
  ;
  OP1REC.OP1CUOID = KC0CW02.KC0CWCUO[KC0CWTDX];
  OP1REC.OP1NORID = KC0CW02.KC0CWRID[KC0CWTDX];
  KC0CW01.KC0CWCOD = KC0CW02.KC0CWCUO[KC0CWTDX];
  OP1REC.OP1PARTN = KC0CW01.KC0CWPAR;
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for order*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0C"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0C630"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0430"; /* i/o mod*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0C630

// format order inquiry screen
Function KC0C640()
   /* **********************************************/
    /* format the order inquiry screen           **/
    /* -- move fields to the map                 **/
                                  /* **/
   /* **********************************************/
  ;
  set KC0CM010 initial; /* repaint the screen each time*/
  ;
   /* **********************************************/
    /* Order Number                              **/
   /* **********************************************/
  KC0CW01.KC0CWCUO = OP1REC.OP1CUOID; /* order number*/
  KC0CW01.KC0CWRID = OP1REC.OP1NORID; /* nike  number*/
  KC0CM010.KC0CMORD = KC0CW01.KC0CWORD; /* formatted order number*/
  ;
   /* **********************************************/
    /* Customer Number                           **/
   /* **********************************************/
  KC0CW01.KC0CWFCU = "******************"; /* fill cust number*/
  KC0CW01.KC0CWPR1 = ".";
  KC0CW01.KC0CWPR2 = ".";
  KC0CW01.KC0CWPR3 = ".";
  ;
  KC0CW01.KC0CWCOI = OP1REC.KUCCOID; /* customer number*/
  ;
  if (OP1REC.KUMSTRID > 0)
    KC0CW01.KC0CWSTO = OP1REC.KUMSTRID; /* store number*/
  end
  if (OP1REC.XNXCD > 0)
    KC0CW01.KC0CWXNX = OP1REC.XNXCD; /* dept number*/
  end
  if (OP1REC.XGPCD > " ")
    KC0CW01.KC0CWGPC = OP1REC.XGPCD; /* dept number*/
  end
  ;
  KC0CM010.KC0CWFCU = KC0CW01.KC0CWFCU;
  ;
   /* **********************************************/
    /* Order Information                         **/
   /* **********************************************/
  KC0CM010.OP1CUPO = OP1REC.OP1CUPO; /* customer po number*/
  KC0CM010.OP1OVALU = OP1REC.OP1OVALU; /* order value*/
  KC0CM010.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  KC0CM010.OP1SPGM = OP1REC.SP1ID; /* sales program*/
  ;
   /* **********************************************/
    /* Order Type Code                           **/
   /* **********************************************/
  KC0CM010.XOTCD = OP1REC.XOTCD; /* order type*/
  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    KC0CM010.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    KC0CM010.XOTABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Order Brand Code                          **/
   /* **********************************************/
  KC0CM010.XBCCD = OP1REC.XBCCD; /* brand code*/
  if (OP1REC.XBCCD in XBCTBL.XBCCD)
    KC0CM010.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (OP1REC.XBCCD == " ")
      KC0CM010.XBCABRV = " ";
    else
      KC0CM010.XBCABRV = "N FND";
    end
  end
  ;
   /* **********************************************/
    /* Order GPC Code                            **/
   /* **********************************************/
  KC0CM010.XGPCD = OP1REC.XGPCD;
  if (OP1REC.XGPCD in XGPTBL.XGPCD)
    KC0CM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KC0CM010.XGPABRV = "N FND";
  end
  ;
  ;
   /* **********************************************/
    /* Order Division Code                       **/
   /* **********************************************/
   /* MOVE OP1REC.XDVCD TO KC0CM010.XDVCD;*/
   /* IF OP1REC.XDVCD IN XDVTBL.XDVCD;*/
    /* MOVE XDVTBL.XDVABRV(EZETST) TO KC0CM010.XDVABRV;*/
   /* ELSE ;*/
    /* MOVE 'N FND' TO KC0CM010.XDVABRV;*/
   /* END ;*/
  ;
  ;
   /* **********************************************/
    /* Order Bulk Code                           **/
   /* **********************************************/
  KC0CM010.XBDCD = OP1REC.XBDCD;
  if (OP1REC.XBDCD in XBDTBL.XBDCD)
    KC0CM010.XBDABRV = XBDTBL.XBDABRV[sysVar.arrayIndex];
  else
    KC0CM010.XBDABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Order Terms Code                          **/
   /* **********************************************/
  KC0CM010.XPTCD = OP1REC.XPTCD; /* terms code*/
  if (OP1REC.XPTCD in XPTTBL.XPTCD)
    KC0CM010.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
  else
    KC0CM010.XPTABRV = "N FND";
  end
  ;
   /* **********************************************/
    /* Customer Need Date                        **/
   /* **********************************************/
  if (OP1REC.OP1CUNDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0CW01.KC0CWDT1 = TA2REC.TA2GRGA;
    KC0CW01.KC0CWMM2 = KC0CW01.KC0CWMM1;
    KC0CW01.KC0CWDD2 = KC0CW01.KC0CWDD1;
    KC0CW01.KC0CWYY2 = KC0CW01.KC0CWYY1;
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1CUNDT = KC0CW01.KC0CWDT2;
  else
    KC0CW01.KC0CWYY2 = "YY";
    KC0CW01.KC0CWMM2 = "MM";
    KC0CW01.KC0CWDD2 = "DD";
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1CUNDT = KC0CW01.KC0CWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship Before Date                    **/
   /* **********************************************/
  if (OP1REC.OP1DSBDT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSBDT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0CW01.KC0CWDT1 = TA2REC.TA2GRGA;
    KC0CW01.KC0CWMM2 = KC0CW01.KC0CWMM1;
    KC0CW01.KC0CWDD2 = KC0CW01.KC0CWDD1;
    KC0CW01.KC0CWYY2 = KC0CW01.KC0CWYY1;
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1DSBDT = KC0CW01.KC0CWDT2;
  else
    KC0CW01.KC0CWYY2 = "YY";
    KC0CW01.KC0CWMM2 = "MM";
    KC0CW01.KC0CWDD2 = "DD";
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1DSBDT = KC0CW01.KC0CWDT2;
  end
  ;
   /* **********************************************/
    /* Don't Ship After Date                     **/
   /* **********************************************/
  if (OP1REC.OP1DSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1DSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0CW01.KC0CWDT1 = TA2REC.TA2GRGA;
    KC0CW01.KC0CWMM2 = KC0CW01.KC0CWMM1;
    KC0CW01.KC0CWDD2 = KC0CW01.KC0CWDD1;
    KC0CW01.KC0CWYY2 = KC0CW01.KC0CWYY1;
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1DSADT = KC0CW01.KC0CWDT2;
  else
    KC0CW01.KC0CWYY2 = "YY";
    KC0CW01.KC0CWMM2 = "MM";
    KC0CW01.KC0CWDD2 = "DD";
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1DSADT = KC0CW01.KC0CWDT2;
  end
  ;
   /* **********************************************/
    /* Credit Status Change Date                 **/
   /* **********************************************/
  if (OP1REC.OP1CSADT > 0)
    TA2REC.TA2GRGGN = OP1REC.OP1CSADT;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    KC0CW01.KC0CWDT1 = TA2REC.TA2GRGA;
    KC0CW01.KC0CWMM2 = KC0CW01.KC0CWMM1;
    KC0CW01.KC0CWDD2 = KC0CW01.KC0CWDD1;
    KC0CW01.KC0CWYY2 = KC0CW01.KC0CWYY1;
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1CSADT = KC0CW01.KC0CWDT2;
  else
    KC0CW01.KC0CWYY2 = "YY";
    KC0CW01.KC0CWMM2 = "MM";
    KC0CW01.KC0CWDD2 = "DD";
    KC0CW01.KC0CWSL1 = "/";
    KC0CW01.KC0CWSL2 = "/";
    KC0CM010.OP1CSADT = KC0CW01.KC0CWDT2;
  end
  ;
   /* **********************************************/
    /* Store Address                             **/
   /* **********************************************/
  KC0C650(); /* store information*/
  ;
  KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
  KULREC.KULAAID = KUMREC.KUMSTAID; /* store address id*/
  ;
  KC0C660(); /* store address*/
  ;
  KC0CM010.KC0CMST1 = KUMREC.KUMSTRNM; /* store name*/
  KC0CW01.KC0CWCTY = KULREC.XXXCITY; /* store city*/
  KC0CW01.KC0CWST = KULREC.XSTCD; /* store state*/
  KC0CW01.KC0CWZIP = KULREC.XXXZIP; /* store zip*/
  KC0CW01.KC0CWB1 = " "; /* blank*/
  KC0CW01.KC0CWB2 = " "; /* blank*/
  if (KULREC.XXX-ADDR1 == " ")
    if (KULREC.XXX-ADDR2 == " ")
      if (KULREC.XXX-ADDR3 == " ")
        KC0CM010.KC0CMST2 = KC0CW01.KC0CWADD; /* formatted city*/
        KC0CM010.KC0CMST3 = " ";
        KC0CM010.KC0CMST4 = " ";
        KC0CM010.KC0CMST5 = " ";
      else
        KC0CM010.KC0CMST2 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0CM010.KC0CMST3 = KC0CW01.KC0CWADD; /* formatted city*/
        KC0CM010.KC0CMST4 = " ";
        KC0CM010.KC0CMST5 = " ";
      end
    else
      KC0CM010.KC0CMST2 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0CM010.KC0CMST3 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0CM010.KC0CMST4 = KC0CW01.KC0CWADD; /* formatted city*/
      KC0CM010.KC0CMST5 = " ";
    end
  else
    KC0CM010.KC0CMST2 = KULREC.XXX-ADDR1; /* store address 1*/
    KC0CM010.KC0CMST3 = KULREC.XXX-ADDR2; /* store address 2*/
    KC0CM010.KC0CMST4 = KULREC.XXX-ADDR3; /* store address 3*/
    KC0CM010.KC0CMST5 = KC0CW01.KC0CWADD; /* formatted city*/
  end
  ;
   /* **********************************************/
    /* Store Ship To Address                     **/
   /* **********************************************/
  if (KUMREC.KUMSTAID == KUMREC.KUMSHAID)
                                   /* store and ship to are equal*/
    KC0CM010.KC0CMSS1 = KC0CM010.KC0CMST1;
    KC0CM010.KC0CMSS2 = KC0CM010.KC0CMST2;
    KC0CM010.KC0CMSS3 = KC0CM010.KC0CMST3;
    KC0CM010.KC0CMSS4 = KC0CM010.KC0CMST4;
    KC0CM010.KC0CMSS5 = KC0CM010.KC0CMST5;
  else
    KULREC.KUCCOID = OP1REC.KUCCOID; /* cust id*/
    KULREC.KULAAID = KUMREC.KUMSHAID; /* store address id*/
    KC0C660();
    KC0CM010.KC0CMSS1 = KUMREC.KUMSTRNM; /* store name*/
    KC0CW01.KC0CWCTY = KULREC.XXXCITY; /* store city*/
    KC0CW01.KC0CWST = KULREC.XSTCD; /* store state*/
    KC0CW01.KC0CWZIP = KULREC.XXXZIP; /* store zip*/
    KC0CW01.KC0CWB1 = " "; /* blank*/
    KC0CW01.KC0CWB2 = " "; /* blank*/
    if (KULREC.XXX-ADDR1 == " ")
      if (KULREC.XXX-ADDR2 == " ")
        if (KULREC.XXX-ADDR3 == " ")
          KC0CM010.KC0CMSS2 = KC0CW01.KC0CWADD; /* formatted city*/
          KC0CM010.KC0CMSS3 = " ";
          KC0CM010.KC0CMSS4 = " ";
          KC0CM010.KC0CMSS5 = " ";
        else
          KC0CM010.KC0CMSS2 = KULREC.XXX-ADDR3; /* store address 3*/
          KC0CM010.KC0CMSS3 = KC0CW01.KC0CWADD; /* formatted city*/
          KC0CM010.KC0CMSS4 = " ";
          KC0CM010.KC0CMSS5 = " ";
        end
      else
        KC0CM010.KC0CMSS2 = KULREC.XXX-ADDR2; /* store address 2*/
        KC0CM010.KC0CMSS3 = KULREC.XXX-ADDR3; /* store address 3*/
        KC0CM010.KC0CMSS4 = KC0CW01.KC0CWADD; /* formatted city*/
        KC0CM010.KC0CMSS5 = " ";
      end
    else
      KC0CM010.KC0CMSS2 = KULREC.XXX-ADDR1; /* store address 1*/
      KC0CM010.KC0CMSS3 = KULREC.XXX-ADDR2; /* store address 2*/
      KC0CM010.KC0CMSS4 = KULREC.XXX-ADDR3; /* store address 3*/
      KC0CM010.KC0CMSS5 = KC0CW01.KC0CWADD; /* formatted city*/
    end
  end
  ;
  ;
   /* **********************************************/
    /* Order Ship To Address                     **/
   /* **********************************************/
  if (OP1REC.OP11TMSF == "N")
    KC0CM010.KC0CMOS1 = " ";
    KC0CM010.KC0CMOS2 = " ";
    KC0CM010.KC0CMOS3 = " ";
    KC0CM010.KC0CMOS4 = " ";
    KC0CM010.KC0CMOS5 = " ";
  else
    KC0C670();
    KC0CM010.KC0CMOS1 = OP5REC.OP5ALTNM; /* ship to name*/
    KC0CW01.KC0CWCTY = OP5REC.XXXCITY; /* ship to city*/
    KC0CW01.KC0CWST = OP5REC.XSTCD; /* ship to state*/
    KC0CW01.KC0CWZIP = OP5REC.XXXZIP; /* ship to zip*/
    KC0CW01.KC0CWB1 = " "; /* blank*/
    KC0CW01.KC0CWB2 = " "; /* blank*/
    if (OP5REC.XXXADDR[1] == " ")
      if (OP5REC.XXXADDR[2] == " ")
        if (OP5REC.XXXADDR[3] == " ")
          KC0CM010.KC0CMOS2 = KC0CW01.KC0CWADD; /* formatted city*/
          KC0CM010.KC0CMOS3 = " ";
          KC0CM010.KC0CMOS4 = " ";
          KC0CM010.KC0CMOS5 = " ";
        else
          KC0CM010.KC0CMOS2 = OP5REC.XXXADDR[3]; /* store address 3*/
          KC0CM010.KC0CMOS3 = KC0CW01.KC0CWADD; /* formatted city*/
          KC0CM010.KC0CMOS4 = " ";
          KC0CM010.KC0CMOS5 = " ";
        end
      else
        KC0CM010.KC0CMOS2 = OP5REC.XXXADDR[2]; /* store address 2*/
        KC0CM010.KC0CMOS3 = OP5REC.XXXADDR[3]; /* store address 3*/
        KC0CM010.KC0CMOS4 = KC0CW01.KC0CWADD; /* formatted city*/
        KC0CM010.KC0CMOS5 = " ";
      end
    else
      KC0CM010.KC0CMOS2 = OP5REC.XXXADDR[1]; /* store address 1*/
      KC0CM010.KC0CMOS3 = OP5REC.XXXADDR[2]; /* store address 2*/
      KC0CM010.KC0CMOS4 = OP5REC.XXXADDR[3]; /* store address 3*/
      KC0CM010.KC0CMOS5 = KC0CW01.KC0CWADD; /* formatted city*/
    end
  end
  ;
  ;
   /* **********************************************/
    /* Sales Agency and Rep                      **/
   /* **********************************************/
  KC0CM010.SM1AGYID = OP1REC.SM1AGYID;
  KC0CM010.SM4REPID = OP1REC.SM4REPID;
  ;
  KC0C680();
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0CW01.KC0CWFST = " ";
    KC0CW01.KC0CWPER = "  ";
    KC0CW01.KC0CWLST = "NOT FOUND ";
  else
    KC0CW01.KC0CWFST = VRAGCY02.XXXFSTNM;
    KC0CW01.KC0CWPER = ". "; /* period*/
    KC0CW01.KC0CWLST = VRAGCY02.XXXLSTNM; /* last name*/
  end
  ;
  KC0CM010.KC0CMNAM = KC0CW01.KC0CWNAM;
  ;
   /* **********************************************/
    /* Special Label Instructions                **/
   /* **********************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* label instruction*/
  OP4REC.OP4TRSEQ = 1; /* first one*/
  ;
  KC0C720();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    KC0CM010.OP4TXT = "NOT FOUND ";
  else
    KC0CM010.OP4TXT = OP4REC.OP4TXT;
  end
  ;
   /* **********************************************/
    /* Order Taken by ID                         **/
   /* **********************************************/
  KC0C690(); /* get taken-by service rep name*/
  ;
  KC0CM010.XXXUSRID = KUYREC.XXXUSRID;
  ;
  ;
end // end KC0C640

// get store name & address id
Function KC0C650()
   /* ************************************************/
     /* read the store for store name & address id **/
   /* ************************************************/
  ;
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUMREC.KUMSTRNM = "STORE IS NOT FOUND ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
      TA1REC.TA1PGMNM = "KC0C"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0C650"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* i/o mod*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key*/
      XSCCS02();
    end
  end
  ;
end // end KC0C650

// get store address
Function KC0C660()
   /* **********************************************/
     /* read the address for the store address   **/
   /* **********************************************/
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KULREC.XXX-ADDR1 = "STORE ADDRESS WAS NOT FOUND ";
      KULREC.XXX-ADDR2 = " ";
      KULREC.XXX-ADDR3 = " ";
      KULREC.XXXCITY = " ";
      KULREC.XSTCD = " ";
      KULREC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DCUST "; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0C"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0C660"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0170"; /* i/o mod*/
      TA1REC.TA1TBLKE = KULREC.KULGRP; /* key*/
      XSCCS02();
    end
  end
  ;
  ;
end // end KC0C660

// get order onetime ship address
Function KC0C670()
   /* *****************************************************/
     /* read the order address for onetime ship address **/
   /* ****************************************************/
  ;
  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* part number*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* order number*/
  OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike order number*/
  OP5REC.OP5BILIN = "N"; /* bill to flag*/
  OP5REC.OP5SHPIN = "Y"; /* ship to flag*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for store*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP5REC.OP5ALTNM = "SHIP TO INFORMATION WAS NOT FOUND ";
      OP5REC.XXXADDR[1] = " ";
      OP5REC.XXXADDR[2] = " ";
      OP5REC.XXXADDR[3] = " ";
      OP5REC.XXXCITY = " ";
      OP5REC.XSTCD = " ";
      OP5REC.XXXZIP = " ";
    else
      TA1REC.TA1DBASE = "DORDER"; /* database*/
      TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
      TA1REC.TA1PGMNM = "KC0C"; /* program name*/
      TA1REC.TA1LOCAT[3] = "KC0C670"; /* process*/
      TA1REC.TA1LOCAT[4] = "IO0460"; /* i/o mod*/
      TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key*/
      XSCCS02();
    end
  end
  ;
  ;
end // end KC0C670

// get sales rep name
Function KC0C680()
   /* ************************************************/
     /* read the sales rep table to get the name   **/
   /* ************************************************/
  ;
  VRAGCY02.SM1AGYID = OP1REC.SM1AGYID;
  VRAGCY02.SM4REPID = OP1REC.SM4REPID;
  VRAGCY02.XXXSTAT = "A";
  ;
  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSLSMN"; /* database*/
    TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
    TA1REC.TA1PGMNM = "KC0C"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0C680"; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0400"; /* i/o mod*/
    TA1REC.TA1TBLKE = VRAGCY02.SM1AGYID; /* key*/
    XSCCS02();
  end
  ;
  ;
end // end KC0C680

// get service rep user id
Function KC0C690()
   /* *****************************************************/
     /* read the service rep table to get user id       **/
   /* *****************************************************/
  ;
  ;
  KUYREC.KUYSVRID = OP1REC.OP1TBREP;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1PGMNM = "KC0C"; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0C690 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSCCS02(); /* abort routine*/
  end
  ;
  ;
      /* if not found then error*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    KUYREC.XXXUSRID = "UNKNOWN"; /* set user id*/
  end
  ;
end // end KC0C690

// process pf12 updates
Function KC0C700()
   /* ****************************************/
   /* this process updates the records that**/
   /* reflect an order has been selected   **/
   /* -- GETS ORDERS AND CHECKS IT AGAIN   **/
   /* -- updates databases                 **/
   /* ****************************************/
  ;
  KC0C430(); /* edit current screen*/
  ;
  if (KC0CW01.KC0CWERR == "Y")
    return;
  end
  ;
  KC0CW01.KC0CWRCN = 0; /* zero # ords updated counter*/
  KC0CW01.KC0CWVAL = 0; /* zero updated value*/
  ;
  if ("X" in KC0CW02.KC0CWSEL) /* if any order has been updated*/
    /* next sentence*/
  else
    KC0CW01.KC0CWERR = "Y"; /* set error message*/
    converseLib.validationFailed(11); /* no orders have been updated*/
    return;
  end
  ;
  KC0CW02.KC0CWTDX = 0; /* prepare table index*/
  ;
  while (KC0CW02.KC0CWTDX < KC0CW02.KC0CWBOT)
    KC0CW01.KC0CWOOK = "Y"; /* initialize order ok flag*/
    KC0CW02.KC0CWTDX = KC0CW02.KC0CWTDX + 1; /* add to the index*/
    ;
    if (KC0CW02.KC0CWSEL[KC0CWTDX] == "X")
      KC0C710(); /* prepare order for update*/
      ;
      if (KC0CW01.KC0CWOOK == "Y")
        KC0CW01.KC0CWUOK = "Y"; /* updates ok flag*/
        KC0C250(); /* update database records*/
        if (KC0CW01.KC0CWUOK == "Y")
          KC0CW01.KC0CWRCN = KC0CW01.KC0CWRCN + 1;
          KC0CW01.KC0CWVAL = KC0CW01.KC0CWVAL + KC0CW01.KC0CWOOV;
          KC0CW02.KC0CWSEL[KC0CWTDX] = "R";
          KC0CW02.XCSCD[KC0CWTDX] = OP1REC.XCSCD;
        end
      end
    end
  end
  ;
  if ("M" in KC0CW02.KC0CWSEL
   || "X" in KC0CW02.KC0CWSEL)
    converseLib.validationFailed(28); /* not all order were updated due to db changes*/
    KC0CW01.KC0CWERR = "Y";
  end
  ;
  if (KC0CW01.KC0CWERR == "N")
    KC0CW01.KC0CWMSG = KC0CW01.KC0CWRMS;
    KC0CW01.KC0CWERR = "Y";
    converseLib.validationFailed(12); /* updates ok message*/
  else
    KC0CW01.KC0CWMSG = KC0CW01.KC0CWRMS;
  end
  ;
  KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* move previous to temp*/
  KC0CW01.KC0CWFFL = "Y"; /* set first time flag*/
  KC0C370(); /* update screen display*/
  ;
  ;
  ;
end // end KC0C700

// prepare order for update
Function KC0C710()
  ;
   /* ***************************************/
   /* this process prepares an order       **/
   /* for update after being updated       **/
   /* ***************************************/
  ;
  KC0CW01.KC0CWRIT = "Y"; /* need to read items for order flag*/
  KC0CW01.KC0CWALV = 0; /* allocated-value*/
  KC0CW01.KC0CWALQ = 0; /* allocated-qty*/
  KC0CW01.KC0CWOOV = 0; /* on-order-value*/
  KC0CW01.KC0CWOOQ = 0; /* on-order-qty*/
  ;
  OP1REC.OP1KEY = KC0CW02.OP1KEY[KC0CWTDX];
  KC0C210(); /* get order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    KC0CW01.KC0CWOOK = "N"; /* order not ok*/
    converseLib.validationFailed(23); /* order not updated due to deadlocks*/
    return;
  end
  ;
  if (KC0CW01.KC0CWOOK == "Y") /* the order is ok to process*/
    KC0C350(); /* check order criteria*/
    ;
    if (KC0CW01.KC0CWOOK == "Y") /* the order is ok to process*/
      ;
      if (KC0CW01.KC0CWRIT == "Y") /* need to read the items*/
        OP2REC.OP2KEY = OP1REC.OP1KEY;
        OP2REC.OP2LNINB = 0;
        KC0C230(); /* add-up items for an order*/
      end
      ;
      /* ********************************************/
       /* check the quantities on the order table*/
      /* ********************************************/
      ;
      KC0CW01.KC0CWCKA = OP1REC.OP1CKAMT;
      KC0CW02.KC0CWALV[KC0CWTDX] = KC0CW01.KC0CWALV;
      KC0CW02.KC0CWOIP[KC0CWTDX] = KC0CW01.KC0CWOOV;
      ;
      if (KC0CW01.KC0CWOOV == KC0CW02.KC0CWOOV[KC0CWTDX])
        /* next sentence*/
      else
        KC0CW01.KC0CWOOK = "N";
        KC0CW02.KC0CWSEL[KC0CWTDX] = "M";
        KC0CW02.KC0CWOIP[KC0CWTDX] = KC0CW01.KC0CWCKA;
        KC0CW02.KC0CWOOV[KC0CWTDX] = KC0CW01.KC0CWOOV;
      end
      ;
    else
      KC0CW02.XOSCD[KC0CWTDX] = OP1REC.XOSCD;
      KC0CW02.XCSCD[KC0CWTDX] = OP1REC.XCSCD;
      KC0CW02.KC0CWSEL[KC0CWTDX] = "M";
    end
  end
  ;
  ;
  ;
  ;
end // end KC0C710

// get special label instruction
Function KC0C720()
   /* ***********************************************************/
   /* *  CC0C720                                               **/
   /* *  this statement group is used to get special label     **/
   /* *  instructions for the view screen.                     **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = OP1REC.OP1NORID;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = 1;
  ;
  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "DTEXT001"; /* table view*/
    TA1REC.TA1PGMNM = "KC0C   "; /* program name*/
    TA1REC.TA1LOCAT[3] = "KC0C720 "; /* process*/
    TA1REC.TA1LOCAT[4] = "IO0470  "; /* i/o mod*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key*/
    XSCCS02();
  end
end // end KC0C720

// process page rolling
Function KC0C750()
   /* *********************************/
    /* edit the page counter*/
   /* *********************************/
  ;
  set KC0CM005.KC0CWCPG modified;
  ;
  if (KC0CW01.KC0CWCPG == KC0CM005.KC0CWCPG)
    if (KC0CW02.KC0CWCDX == KC0CW02.KC0CWBOT
     && KC0CW01.KC0CWERR == "N")
      converseLib.validationFailed(4); /* last record displayed*/
    end
    return;
  end
  ;
  if (KC0CM005.KC0CWCPG == 0
   || KC0CM005.KC0CWCPG > KC0CW01.KC0CWTPG)
    KC0CW01.KC0CWERR = "Y"; /* invalid page number*/
    converseLib.validationFailed(31); /* invalid page number*/
    set KC0CM005.KC0CWCPG cursor, bold;
    return;
  end
  ;
  KC0CW01.KC0CWCPG = KC0CM005.KC0CWCPG; /* reset current page*/
  KC0CW02.KC0CWCDX = KC0CW01.KC0CWCPG * 13; /* reset current table index*/
  ;
  if (KC0CW02.KC0CWCDX > KC0CW02.KC0CWBOT)
    KC0CW02.KC0CWCDX = KC0CW02.KC0CWBOT;
  end
  ;
  KC0CW02.KC0CWPDX = KC0CW01.KC0CWCPG * 13;
  KC0CW02.KC0CWPDX = KC0CW02.KC0CWPDX - 13;
  ;
  KC0CW02.KC0CWTDX = KC0CW02.KC0CWPDX; /* prepare temp index*/
  ;
  KC0C370(); /* prepare the screen for display*/
  ;
end // end KC0C750

Record KC0CW01 type basicRecord
  5 KC0CWGRP KC0CWGRP ; 
    10 KC0CWVFL KC0CWVFL ; 
    10 KC0CWFLG KC0CWFLG ; 
    10 KC0CWEFL KC0CWEFL ; 
    10 KC0CWFFL KC0CWFFL ; 
    10 KC0CWEND KC0CWEND ; 
    10 KC0CWEOF KC0CWEOF ; 
    10 KC0CWOOK KC0CWOOK ; 
    10 KC0CWUOK KC0CWUOK ; 
    10 KC0CWRIT KC0CWRIT ; 
    10 KC0CWCPG KC0CWCPG ; 
    10 KC0CWTPG KC0CWTPG ; 
    10 KC0CWREM KC0CWREM ; 
    10 KC0CWCN1 KC0CWCN1 ; 
    10 KC0CWSTP KC0CWSTP ; 
    10 KC0CWSDX KC0CWSDX ; 
    10 KC0CWERR KC0CWERR ; 
    10 KUCCOID KUCCOID ; 
    10 KC0CWEOI KC0CWEOI ; 
    10 KC0CWCKA KC0CWCKA ; 
    10 KC0CWOOQ KC0CWOOQ ; 
    10 KC0CWOOV KC0CWOOV ; 
    10 KC0CWALQ KC0CWALQ ; 
    10 KC0CWALV KC0CWALV ; 
    10 KC0CWLIV KC0CWLIV ; 
    10 KC0CWXPO KC0CWXPO ; 
    10 KC0CWARB KC0CWARB ; 
    10 KC0CWINP KC0CWINP ; 
    10 KC0CWHDC KC0CWHDC ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 KC0CW-NEED-DATE-TO KC0CW-NEED-DATE-TO ; 
    10 KC0CWFCU KC0CWFCU ; 
      15 KC0CWCOI KC0CWCOI ; 
      15 KC0CWPR1 KC0CWPR1 ; 
      15 KC0CWSTO KC0CWSTO ; 
      15 KC0CWPR2 KC0CWPR2 ; 
      15 KC0CWXNX KC0CWXNX ; 
      15 KC0CWPR3 KC0CWPR3 ; 
      15 KC0CWGPC KC0CWGPC ; 
    10 KC0CWORD KC0CWORD ; 
      15 KC0CWCUO KC0CWCUO ; 
      15 KC0CWRID KC0CWRID ; 
    10 KC0CWFOR KC0CWFOR ; 
      15 KC0CWCOD KC0CWCOD ; 
        20 * char(7) ; 
        20 KC0CWPAR KC0CWPAR ; 
    10 KC0CWDT1 KC0CWDT1 ; 
      15 KC0CWMM1 KC0CWMM1 ; 
      15 KC0CWDD1 KC0CWDD1 ; 
      15 KC0CWYY1 KC0CWYY1 ; 
    10 KC0CWDT2 KC0CWDT2 ; 
      15 KC0CWMM2 KC0CWMM2 ; 
      15 KC0CWSL1 KC0CWSL1 ; 
      15 KC0CWDD2 KC0CWDD2 ; 
      15 KC0CWSL2 KC0CWSL2 ; 
      15 KC0CWYY2 KC0CWYY2 ; 
    10 KC0CWNAM KC0CWNAM ; 
      15 KC0CWFST KC0CWFST ; 
      15 KC0CWPER KC0CWPER ; 
      15 KC0CWLST KC0CWLST ; 
    10 KC0CWADD KC0CWADD ; 
      15 KC0CWCTY KC0CWCTY ; 
      15 KC0CWB1 KC0CWB1 ; 
      15 KC0CWST KC0CWST ; 
      15 KC0CWB2 KC0CWB2 ; 
      15 KC0CWZIP KC0CWZIP ; 
    10 KC0CWMSG KC0CWMSG ; 
    10 KC0CWEM2 KC0CWEM2 ; 
      15 KC0CWMF2 KC0CWMF2 ; 
      15 KC0CWCON KC0CWCON ; 
    10 KC0CWEM3 KC0CWEM3 ; 
      15 KC0CWMF3 KC0CWMF3 ; 
      15 KC0CWXCS KC0CWXCS ; 
    10 KC0CWMSS KC0CWMSS ; 
      15 KC0CWMS1 KC0CWMS1 ; 
      15 KC0CWORN KC0CWORN ; 
      15 KC0CWDOT KC0CWDOT ; 
      15 KC0CWNOR KC0CWNOR ; 
      15 KC0CWMS2 KC0CWMS2 ; 
      15 KC0CWCUN KC0CWCUN ; 
      15 KC0CWMS3 KC0CWMS3 ; 
      15 KC0CWVL1 KC0CWVL1 ; 
    10 KC0CWRMS KC0CWRMS ; 
      15 KC0CWRCN KC0CWRCN ; 
      15 KC0CWRF1 KC0CWRF1 ; 
      15 KC0CWVAL KC0CWVAL ; 
    10 KC0CWEM1 KC0CWEM1 ; 
      15 KC0CWMF1 KC0CWMF1 ; 
      15 XCCCD XCCCD ; 
    10 KC0CWOVM KC0CWOVM ; 
      15 KC0CWMS4 KC0CWMS4 ; 
      15 KC0CWMS5 KC0CWMS5 ; 
    10 KC0CWSUB KC0CWSUB ; 
    10 KC0CWTBE KC0CWTBE ; 
    10 KC0CWFND KC0CWFND ; 
    10 KC0CWLGE KC0CWLGE ; 
    10 XOTCD XOTCD ; 
end // end KC0CW01

Record KC0CW02 type basicRecord
  10 KC0CWCDX KC0CWCDX ; 
  10 KC0CWPDX KC0CWPDX ; 
  10 KC0CWTDX KC0CWTDX ; 
  10 KC0CWBOT KC0CWBOT ; 
  10 OP1KEY OP1KEY [400] ; 
  10 KC0CWTBL KC0CWTBL [400] ; 
    15 KC0CWSEL KC0CWSEL ; 
    15 KC0CWLIN KC0CWLIN ; 
      20 * char(1) ; 
      20 KC0CWORD KC0CWORD ; 
        25 KC0CWCUO KC0CWCUO ; 
        25 KC0CWRID KC0CWRID ; 
      20 * char(1) ; 
      20 XOTABRV XOTABRV ; 
      20 * char(1) ; 
      20 XOSCD XOSCD ; 
      20 * char(1) ; 
      20 KC0CWNDT KC0CWNDT ; 
        25 KC0CWMM1 KC0CWMM1 ; 
        25 KC0CWSL1 KC0CWSL1 ; 
        25 KC0CWDD1 KC0CWDD1 ; 
        25 KC0CWSL2 KC0CWSL2 ; 
        25 KC0CWYY1 KC0CWYY1 ; 
      20 * char(1) ; 
      20 XCSCD XCSCD ; 
      20 KC0CWRSN KC0CWRSN ; 
        25 KC0CWCD1 KC0CWCD1 ; 
        25 KC0CWDS1 KC0CWDS1 ; 
        25 KC0CWCD2 KC0CWCD2 ; 
        25 KC0CWDS2 KC0CWDS2 ; 
        25 KC0CWCD3 KC0CWCD3 ; 
      20 * char(1) ; 
      20 KC0CWOIP KC0CWOIP ; 
      20 * char(1) ; 
      20 KC0CWOOV KC0CWOOV ; 
      20 * char(1) ; 
      20 KC0CWALV KC0CWALV ; 
end // end KC0CW02

// op-cust-need-dt
DataItem KC0CW-NEED-DATE-TO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted city state
DataItem KC0CWADD char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws allocated qty
DataItem KC0CWALQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws allocated value
DataItem KC0CWALV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ar account balance
DataItem KC0CWARB num(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0CWB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank
DataItem KC0CWB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KC0CWBOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit rtc reason code 1
DataItem KC0CWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 2
DataItem KC0CWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reason code 3
DataItem KC0CWCD3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current index
DataItem KC0CWCDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cr-ck-ord-amt
DataItem KC0CWCKA num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KC0CWCN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0CWCOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen company id
DataItem KC0CWCOI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KC0CWCON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// page counter
DataItem KC0CWCPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// city
DataItem KC0CWCTY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem KC0CWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer order number
DataItem KC0CWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KC0CWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KC0CWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KC0CWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0CWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem KC0CWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted need date
DataItem KC0CWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted need date
DataItem KC0CWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection error flag
DataItem KC0CWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company credit status err msg
DataItem KC0CWEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company nbr mismatch msg
DataItem KC0CWEM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order credit status msg
DataItem KC0CWEM3 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of process
DataItem KC0CWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KC0CWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-items flag
DataItem KC0CWEOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formatted cust nbr
DataItem KC0CWFCU char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem KC0CWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection type flag
DataItem KC0CWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user found on xcu table
DataItem KC0CWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-formated order number
DataItem KC0CWFOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep first name
DataItem KC0CWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen gpc code
DataItem KC0CWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc0c working storage record
DataItem KC0CWGRP char(658)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order on hold counter
DataItem KC0CWHDC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws orders in process
DataItem KC0CWINP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user has valid legal entity
DataItem KC0CWLGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen line
DataItem KC0CWLIN char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws line-item alloc value
DataItem KC0CWLIV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales rep last name
DataItem KC0CWLST char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message filler
DataItem KC0CWMF1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0CWMF2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KC0CWMF3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0CWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KC0CWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal one
DataItem KC0CWMS1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal two
DataItem KC0CWMS2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal three
DataItem KC0CWMS3 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal four
DataItem KC0CWMS4 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal five
DataItem KC0CWMS5 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error message
DataItem KC0CWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- update message
DataItem KC0CWMSS char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep name
DataItem KC0CWNAM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date formatted
DataItem KC0CWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub nike order number
DataItem KC0CWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order amount in process
DataItem KC0CWOIP num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order ok to process
DataItem KC0CWOOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws on-order qty
DataItem KC0CWOOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws on-order value
DataItem KC0CWOOV num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order number
DataItem KC0CWORD num(11,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem KC0CWORN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MSG- too many orders
DataItem KC0CWOVM char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order partition
DataItem KC0CWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem KC0CWPDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// period
DataItem KC0CWPER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 1
DataItem KC0CWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 2
DataItem KC0CWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period 3
DataItem KC0CWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of ords put in resell
DataItem KC0CWRCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reminder
DataItem KC0CWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KC0CWRF1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws nike sub-order number
DataItem KC0CWRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// read items
DataItem KC0CWRIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MSG- released message
DataItem KC0CWRMS char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit rtc reasons
DataItem KC0CWRSN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem KC0CWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select options
DataItem KC0CWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0CWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash
DataItem KC0CWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state code
DataItem KC0CWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen store id
DataItem KC0CWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem KC0CWSTP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for xcu table reads
DataItem KC0CWSUB num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user found on xcr table
DataItem KC0CWTBE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orders to release table
DataItem KC0CWTBL char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp     index
DataItem KC0CWTDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of pages
DataItem KC0CWTPG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates ok
DataItem KC0CWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0CWVAL num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// view single order flag
DataItem KC0CWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// amount actually released
DataItem KC0CWVL1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order credit status
DataItem KC0CWXCS char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// screen dept
DataItem KC0CWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total exposure
DataItem KC0CWXPO num(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0CWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KC0CWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem KC0CWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

