package ki0d;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XGPTBL;
import corpx1.XIDTBL;
import corpx1.XNXTBL;
import corpx1.XSGTBL;
import corpx2.XOTCD;
import ku.common.KU3REC;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUPREC;
import ku.common.KUQREC;
import ku.common.KUSREC;
import ku.common.KUTREC;
import ta.common.TA1REC;
import vv.common.VCULVLPD;
import xa.common.XA0AW02;
//*** PROGRAM=KI0D ****
// ----------------  km0d - change customer unit --------------
// 
// overview:  this application performs inquiry functions for
//            general customer unit level data.
// 
// date written: 06/86
// author:       david ply - cap gemini america
// 
// ************************************************************
//                 maintenance history log
// ------------------------------------------------------------
//  date    int     modules          description
// ------------------------------------------------------------
// 031787   clt   ki0ds11   set up sales effective date on
//                ki0dss4   screen.
//                ki0dm020
// 120187   clt             fixed fastpath.
// 010488   clt   ki0ds11   added natl acct agency
// 041888   clt   ki0ds28   changed csp kunote to kutendt
// 050488   clt             added expiration dates
// 111188   jbw             added noncsp option on calls
// 111188   jbw             added xssegtr logic
// 012389   clt             added call class indicator
// 051089   clt             increased table to 40 order types
// 051589   clt             database changes
// 011690   j fiat          database changes
// 030290   d salzwedel     remove sales rep, agency &
//                          commisions info off screen
// 032990   d salzwedel     database changes
// 100490   d salzwedel     database changes
// 101590   d salzwedel     remove blgrp
// 121090   d salzwedel     remove po req & alloc info from map
// 020491   dsalzw          db2 changes
// 022691   t watson        remove vend auth flag from map
// 031591   t watson        remove invoice dist ind from map
// 032991   t watson        removing handling code from screen
// 041591   t watson        removing call class code
// 041591   t watson        removing credit hold indicator
// 041691   t watson        removing order ack xcicd
// 051391   dsalzw          remove all inquiry security
// 051691   dsalzw          change pf3 to use from appl
// 060991   dsalzw          db2 changes
// 072591   dsalzw          fix map attributes
// 05/20/93 CHELLM          Get National Account code from
//                          VCULVL01 instead of VCUST001.
// 25 June 93  dcaust       Move comp, stor, dep, opt to map
//                          only if numeric.  005.
// 10/01/93 CHELLM          CSP 4.1 Conversion.
// 12/94/95 KCLAR1          Added xac-asgn-ctrl-id and
//                          cu-aloc-seq as display only fields
// 11/20/97 rgilli          Y2K MODIFICATIONS MADE TO:
//                          KI0DM080: Zero filled month, day,
//                                    year fields.
// ************************************************************
// *********************
Program KI0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KI0DW01 KI0DW01; // record
  KI0DW02 KI0DW02; // record
  KU3REC KU3REC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KUSREC KUSREC; // record
  KUTREC KUTREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCULVLPD VCULVLPD; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use KI0DM.KI0DM010,  // forms
      KI0DM.KI0DM020, 
      KI0DM.KI0DM080, 
      KI0DM.KI0DM130, 
      KI0DM.KI0DM160
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KI0D005: KI0D005();
     /* ----------- ki0d005 flow  -----------*/
    ;
    if (KI0DW02.KI0DWOPT == 06
     && COMMAREA.CAFROMAP == "KI0M")
      set KI0DW01 empty;
      goto KI0D125; /* special customer groups*/
    end
    ;
    if (KI0DW02.KI0DWOPT == 11
     && COMMAREA.CAFROMAP == "KI0M")
      KI0DW01.KI0DWUSR = " "; /* new  csp v.4 will not allow move*/
     /* of ' ' to group lvl with mixed values*/
      KI0DW01.KI0DWCID = 0;
      KI0DW01.KI0DWSID = 0;
      KI0DW01.KI0DWXNX = 0;
      goto KI0D065; /* customer terms*/
    end
    ;
    KI0DW01.KI0DWUSR = " "; /* new  csp v.4 will not allow move*/
     /* of ' ' to group lvl with mixed values*/
    KI0DW01.KI0DWCID = 0;
    KI0DW01.KI0DWSID = 0;
    KI0DW01.KI0DWXNX = 0;
    ;
    goto KI0D010; /* to converse chg customer menu*/
    KI0D010: KI0D010();
     /* -----------  ki0d010 flow  -----------------*/
    ;
    if (KI0DM010.KI0DMMSG != " "
     || KI0DM010.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D010; /* errors/msg's - redisplay menu*/
    end
    ;
    if (converseVar.eventKey is pa2) /* reset screen*/
      goto KI0D005;
    end
    ;
      /* check options, branch to function*/
    ;
    if (KI0DM010.KI0DMACT == 1)
      goto KI0D015; /* to basic customer unit*/
    else
      if (KI0DM010.KI0DMACT == 2)
        goto KI0D065; /* to order type*/
      else
        if (KI0DM010.KI0DMACT == 4)
          goto KI0D125; /* to special customers*/
        else
          if (KI0DM010.KI0DMACT == 5)
            goto KI0D155; /* to special instructions*/
          else
            KI0DM010.KI0DMMSG = "INVALID ACTION";
          end
        end
      end
    end
    ;
    ;
    goto KI0D010;
    ;
    KI0D015: KI0D015();
     /* ----------  flow for ki0d015 --------------*/
    ;
    if (KI0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KI0DM020.KUCCOID = KI0DM010.KUCCOID;
      KI0DM020.KUMSTRID = KI0DM010.KUMSTRID;
      KI0DM020.XNXCD = KI0DM010.XNXCD;
      KI0DM020.XGPCD = KI0DM010.XGPCD;
      goto KI0D025; /* yes - read/fmt data*/
    else
      goto KI0D020; /* no - display empty basic customer unit screen*/
    end
    ;
    KI0D025: KI0D025();
    ;
     /* -------------  flow for ki0d025 ----------*/
    ;
    goto KI0D020; /* to converse customer unit map*/
    ;
    KI0D020: KI0D020();
     /* -----------  ki0c020 flow -------------------------*/
    ;
    if (converseVar.eventKey is pa2)
      KI0DM010.KUCCOID = KI0DW01.KI0DWCID;
      KI0DM010.KUMSTRID = KI0DW01.KI0DWSID;
      KI0DM010.XNXCD = KI0DW01.KI0DWXNX;
      KI0DM010.XGPCD = KI0DW01.KI0DWGPC;
      goto KI0D015; /* reload data*/
    end
    ;
    if (converseVar.eventKey is pf3)
      KI0DM010.KUCCOID = KI0DM020.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM020.KUMSTRID;
      KI0DM010.XNXCD = KI0DM020.XNXCD;
      KI0DM010.XGPCD = KI0DM020.XGPCD;
      goto KI0D010; /* back to customer inq menu*/
    end
    ;
     /* check for errors or messages*/
    if (KI0DM020.VAGen_EZEMSG != " "
     || KI0DM020.KI0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D020; /* errors/msg - redisplay*/
    end
    ;
    if (KI0DW01.KI0DWNR == "X")
      KI0DM010.KUCCOID = KI0DM020.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM020.KUMSTRID;
      KI0DM010.XNXCD = KI0DM020.XNXCD;
      KI0DM010.XGPCD = KI0DM020.XGPCD;
      goto KI0D015; /* reload data*/
    end
    ;
    ;
    goto KI0D020; /* redisplay*/
    ;
    KI0D065: KI0D065();
    ;
     /* ----------  flow for ki0d065 --------------*/
    ;
      /* if customer key entered on inq menu, build key*/
      /* and branch to select order types.  otherwise,*/
      /* clear map and work, and branch to converse order types*/
    ;
    if (KI0DM010.KUCCOID > 0) /* company entered from menu?*/
      KI0DM080.KUCCOID = KI0DM010.KUCCOID;
      KI0DM080.KUMSTRID = KI0DM010.KUMSTRID;
      KI0DM080.XNXCD = KI0DM010.XNXCD;
      KI0DM080.XGPCD = KI0DM010.XGPCD;
      goto KI0D070; /* to select order types*/
      ;
    else
      ;
      set KI0DM080 initial; /* clear map fields*/
      KI0DM080.KI0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/
      set KI0DW01 empty;
      KI0DW01.KI0DWCID = 0; /* clear key area*/
      KI0DW01.KI0DWSID = 0; /* clear key area*/
      KI0DW01.KI0DWXNX = 0; /* clear key area*/
      KI0DW01.KI0DWOPT = 0; /* clear key area*/
      KI0DWIX1 = 1; /* set indexes, clear bin. work fields*/
      KI0DWIX2 = 1;
      KI0DWIX3 = 1;
      while (KI0DWIX3 <= 5)
        set KUTREC empty;
        KI0DW01.KI0DWTRC[KI0DWIX3] = KUTREC.KUTGRP; /* save terms rec*/
        KI0DWIX3 = KI0DWIX3 + 1;
      end
      goto KI0D080; /* display empty order type screen*/
    end
    ;
    KI0D070: KI0D070();
    ;
     /* -----------  flow for ki0d070  ---------------------*/
    ;
    if (KI0DM080.KI0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D080; /* display errors*/
    else
      goto KI0D075; /* to reset order type map*/
    end
    ;
    KI0D075: KI0D075();
    ;
     /* -----------  flow for ki0d075  ---------------------*/
    ;
    goto KI0D080; /* to converse order type map*/
    ;
    KI0D080: KI0D080();
    ;
     /* -----------  ki0c080 flow -------------------------*/
    ;
    if (converseVar.eventKey is pa2) /* reset*/
      KI0DM080.KI0DMMSG = " ";
      converseLib.validationFailed(0);
      KI0DM080.KUCCOID = KI0DW01.KI0DWCID;
      KI0DM080.KUMSTRID = KI0DW01.KI0DWSID;
      KI0DM080.XNXCD = KI0DW01.KI0DWXNX;
      KI0DM080.XGPCD = KI0DW01.KI0DWGPC;
      KI0DM080.KI0DMOPT = " ";
      KI0DM080.KI0DMITM = " ";
      goto KI0D080; /* redisplay*/
    end
    ;
    if (converseVar.eventKey is pf3)
      KI0DM010.KUCCOID = KI0DM080.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM080.KUMSTRID;
      KI0DM010.XNXCD = KI0DM080.XNXCD;
      KI0DM010.XGPCD = KI0DM080.XGPCD;
      goto KI0D010; /* back to customer chg menu*/
    end
    ;
    if (converseVar.eventKey is pf7) /* page back*/
      KI0DWIX1 = KI0DWIX1 - 1;
      if (KI0DWIX1 == 0)
        if (KI0DWIX2 > 0)
          move KI0DWIX2 to KI0DWIX1 withV60Compat; /* point to last order type*/
        else
          KI0DWIX1 = 1;
        end
      end
      goto KI0D080; /* redisplay*/
    end
    ;
    if (converseVar.eventKey is pf8) /* page forward*/
      KI0DWIX1 = KI0DWIX1 + 1;
      if (KI0DWIX1 > KI0DWIX2)
        KI0DWIX1 = 1; /* point to first order type*/
      end
      goto KI0D080; /* redisplay*/
    end
    ;
    if (KI0DW01.KI0DWNR == "X")
      KI0DM010.KUCCOID = KI0DM080.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM080.KUMSTRID;
      KI0DM010.XNXCD = KI0DM080.XNXCD;
      KI0DM010.XGPCD = KI0DM080.XGPCD;
      goto KI0D065; /* new request*/
    end
    ;
     /* check for errors or messages*/
    if (KI0DM080.VAGen_EZEMSG != " "
     || KI0DM080.KI0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D080; /* errors/msg - redisplay*/
    end
    ;
    ;
    goto KI0D080; /* redisplay*/
    ;
    KI0D125: KI0D125();
    ;
     /* ----------  flow for ki0c125 --------------*/
    ;
    if (KI0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KI0DM130.KUCCOID = KI0DM010.KUCCOID;
      KI0DM130.KUMSTRID = KI0DM010.KUMSTRID;
      KI0DM130.XNXCD = KI0DM010.XNXCD;
      KI0DM130.XGPCD = KI0DM010.XGPCD;
      goto KI0D135; /* yes - read/fmt data*/
    else
      goto KI0D130; /* no - display empty spc. cust grp screen*/
    end
    ;
    ;
    KI0D135: KI0D135();
    ;
     /* -------------  flow for ki0d135 ----------*/
    ;
    goto KI0D130; /* to converse spc. cust. grp map*/
    ;
    ;
    KI0D130: KI0D130();
    ;
     /* -----------  ki0c130 flow -------------------------*/
    ;
    if (converseVar.eventKey is pa2)
      KI0DM010.KUCCOID = KI0DW01.KI0DWCID;
      KI0DM010.KUMSTRID = KI0DW01.KI0DWSID;
      KI0DM010.XNXCD = KI0DW01.KI0DWXNX;
      KI0DM010.XGPCD = KI0DW01.KI0DWGPC;
      goto KI0D125; /* reset  screen*/
    end
    ;
    if (converseVar.eventKey is pf3)
      KI0DM010.KUCCOID = KI0DM130.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM130.KUMSTRID;
      KI0DM010.XNXCD = KI0DM130.XNXCD;
      KI0DM010.XGPCD = KI0DM130.XGPCD;
      goto KI0D010; /* back to customer chg menu*/
    end
    ;
     /* check for errors or messages*/
    if (KI0DM130.VAGen_EZEMSG != " "
     || KI0DM130.KI0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D130; /* errors/msg - redisplay*/
    end
    ;
    if (KI0DW01.KI0DWNR == "X")
      KI0DM010.KUCCOID = KI0DM130.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM130.KUMSTRID;
      KI0DM010.XNXCD = KI0DM130.XNXCD;
      KI0DM010.XGPCD = KI0DM130.XGPCD;
      goto KI0D125; /* reset  screen*/
    end
    ;
    goto KI0D130; /* redisplay*/
    ;
    ;
    KI0D155: KI0D155();
    ;
     /* ----------  flow for ki0c155 --------------*/
    ;
    if (KI0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KI0DM160.KUCCOID = KI0DM010.KUCCOID;
      KI0DM160.KUMSTRID = KI0DM010.KUMSTRID;
      KI0DM160.XNXCD = KI0DM010.XNXCD;
      KI0DM160.XGPCD = KI0DM010.XGPCD;
      goto KI0D165; /* yes - read/fmt data*/
    else
      goto KI0D160; /* no - display empty spc. cust grp screen*/
    end
    ;
    ;
    KI0D165: KI0D165();
    ;
     /* -------------  flow for ki0d165 ----------*/
    ;
    goto KI0D160; /* to converse spc. instr. map*/
    ;
    ;
    KI0D160: KI0D160();
    ;
     /* -----------  ki0d160 flow -------------------------*/
    ;
    if (converseVar.eventKey is pa2)
      KI0DM010.KUCCOID = KI0DW01.KI0DWCID;
      KI0DM010.KUMSTRID = KI0DW01.KI0DWSID;
      KI0DM010.XNXCD = KI0DW01.KI0DWXNX;
      KI0DM010.XGPCD = KI0DW01.KI0DWGPC;
      goto KI0D155; /* reset  screen*/
    end
    ;
    if (converseVar.eventKey is pf3)
      KI0DM010.KUCCOID = KI0DM160.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM160.KUMSTRID;
      KI0DM010.XNXCD = KI0DM160.XNXCD;
      KI0DM010.XGPCD = KI0DM160.XGPCD;
      goto KI0D010; /* back to customer chg menu*/
    end
    ;
     /* check for errors or messages*/
    if (KI0DM160.VAGen_EZEMSG != " "
     || KI0DM160.KI0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KI0D160; /* errors/msg - redisplay*/
    end
    ;
    if (KI0DW01.KI0DWNR == "X")
      KI0DM010.KUCCOID = KI0DM160.KUCCOID;
      KI0DM010.KUMSTRID = KI0DM160.KUMSTRID;
      KI0DM010.XNXCD = KI0DM160.XNXCD;
      KI0DM010.XGPCD = KI0DM160.XGPCD;
      goto KI0D155; /* reset  screen*/
    end
    ;
    goto KI0D160; /* redisplay*/
    ;
    ;
  end // end main
end // end KI0D

// read company
Function KI0D-026()
  ;
   /* *************************************************/
   /* get the global customer level record vculvlpd*/
   /* *************************************************/
  ;
  set SQLCA empty;
  set VCULVLPD empty;
  VCULVLPD.KUCCOID = KI0DM020.KUCCOID;
  VCULVLPD.KUMSTRID = KI0DM020.KUMSTRID;
  VCULVLPD.XNXCD = KI0DM020.XNXCD;
  VCULVLPD.XGPCD = KI0DM020.XGPCD;
  ;
  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes}; /* read vculvl01*/
  if (VCULVLPD.XXX-SQLCODE == 0)
    KI0DM020.XNACD = VCULVLPD.XNACD; /* National Account Code*/
    KI0DM020.XACCD = VCULVLPD.XACCD; /* ASSIGN CNTL ID*/
    KI0DM020.OP1ALSEQ = VCULVLPD.OP1ALSEQ; /* ALLOC SEQ*/
  else
    TA1REC.TA1TYPE = VCULVLPD.XXX-SQLTYPE;
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = VCULVLPD.XXX-SQLNAME;
    TA1REC.TA1TBLVU = VCULVLPD.XXX-SQLVIEW;
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = KI0DM020.KUCCOID;
    TA1REC.TA1PGMNM = "KI0D-026";
    TA1REC.TA1LOC = "READING DB2 CULVL01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KI0D-026

// init chg cust. processing
Function KI0D005()
  ;
    /* -------------  execute process ki0d005  --------------*/
  ;
  XSENTRY(); /* appl entry security*/
  ;
  XSSEGTR();
                                   /* 11/11/88 jbw - set segmented trans id*/
  ;
  ;
     /* set map id's, date*/
  ;
  ;
  set KI0DM010 initial;
  ;
  KI0DS-INIT-RECS(); /* initialize all records used by application*/
  ;
  KI0DW01.KI0DWERA = COMMAREA.CAUSERA; /* key from chg menu*/
  if (COMMAREA.CAITEM != " ")
    KI0DW01.KI0DWUSR = COMMAREA.CAITEM; /* key from fastpath*/
    COMMAREA.CAITEM = " ";
  end
  ;
  if (KI0DW01.KI0DWCID-CHAR is numeric)
    KI0DM010.KUCCOID = KI0DW01.KI0DWCID; /* company*/
  else
    KI0DW01.KI0DWCID = 0;
  end
  ;
  if (KI0DW01.KI0DWSID-CHAR is numeric)
    KI0DM010.KUMSTRID = KI0DW01.KI0DWSID; /* STORE*/
  else
    KI0DW01.KI0DWSID = 0;
  end
  ;
  if (KI0DW01.KI0DWXNX-CHAR is numeric)
    KI0DM010.XNXCD = KI0DW01.KI0DWXNX; /* dept*/
  else
    KI0DW01.KI0DWXNX = 0;
  end
  ;
  KI0DM010.XGPCD = KI0DW01.KI0DWGPC; /* gpc*/
  ;
  if (KI0DW01.KI0DWOPT-CHAR is numeric)
    KI0DW02.KI0DWOPT = KI0DW01.KI0DWOPT; /* option*/
  else
    KI0DW01.KI0DWOPT = 0;
  end
  ;
  KI0DM010.KI0DMDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* -------------  end process ki0d005  --------------------*/
  ;
end // end KI0D005

// converse customer menu
Function KI0D010()
   /* -----------  before stage - ki0d010 -----*/
  ;
    /* no processing*/
  ;
  converse KI0DM010 ;
   /* -----------------  ki0d010  -----------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KI0DM010.VAGen_EZEMSG = " ";
  KI0DM010.KI0DMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KI0DS01(); /* check standard pf keys*/
  KI0DM010.KI0DMMSG = KI0DW01.KI0DWMSG;
  ;
  if (converseVar.eventKey is pf3)
    KI0DW01.KI0DWCID = KI0DM010.KUCCOID; /* company*/
    KI0DW01.KI0DWSID = KI0DM010.KUMSTRID; /* STORE*/
    KI0DW01.KI0DWXNX = KI0DM010.XNXCD; /* dept*/
    KI0DW01.KI0DWGPC = KI0DM010.XGPCD; /* gpc*/
    COMMAREA.CAUSERA = KI0DW01.KI0DWUSR;
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* xfer to main inq menu*/
    XSEXIT();
    KI0DM010.KI0DMMSG = COMMAREA.CAMSG; /* security error*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KI0DM010.KI0DMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KI0DM010.KI0DMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KI0DM010.KI0DMOPT;
    COMMAREA.CAITEM = KI0DM010.KI0DMITM;
    if (KI0DM010.KI0DMITM == " ")
      KI0DW01.KI0DWCID = KI0DM010.KUCCOID;
      KI0DW01.KI0DWSID = KI0DM010.KUMSTRID;
      KI0DW01.KI0DWXNX = KI0DM010.XNXCD; /* dept*/
      KI0DW01.KI0DWGPC = KI0DM010.XGPCD; /* gpc*/
      COMMAREA.CAITEM = KI0DW01.KI0DWUSR;
    end
    XSEXIT(); /* check security/xfer*/
    KI0DM010.KI0DMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CATOAP = " ";
  end
  ;
    /* ***** menu options checked in flow  *******/
  ;
  ;
    /* -----------   end of process ki0d010  ------------*/
  ;
end // end KI0D010

// init basic customer screen
Function KI0D015()
  ;
   /* -------- start process ki0d015 --------------*/
  ;
      /* set date in map, initialize work flds*/
  ;
  set KI0DM020 initial; /* clear map fields*/
  KI0DM020.KI0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/
  ;
   /* ------------  end of process ki0d015 --------------*/
  ;
end // end KI0D015

// converse basic cust screen
Function KI0D020()
   /* ------------------ ki0d020 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/
  ;
  ;
  KI0DS00(); /* set cursor, blank headings on notfound*/
  ;
  ;
  converse KI0DM020 ;
  ;
   /* ------------------ ki0d020 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KI0DM020.VAGen_EZEMSG = " ";
  KI0DM020.KI0DMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  if (converseVar.eventKey is pf8) /* bill group address inq*/
    /* next sentence*/
  else
    KI0DS01(); /* check standard entry keys*/
    KI0DM020.KI0DMMSG = KI0DW01.KI0DWMSG;
  end
  ;
  if (converseVar.validationMsgNum != 0
   || KI0DM020.KI0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end
  ;
  if (converseVar.eventKey is pf3) /* pf3- return to company inq menu*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KI0DM020.KI0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KI0DM020.KI0DMOPT;
      COMMAREA.CAITEM = KI0DM020.KI0DMITM;
      if (KI0DM020.KI0DMITM == " ")
        KI0DW01.KI0DWCID = KI0DM020.KUCCOID;
        KI0DW01.KI0DWSID = KI0DM020.KUMSTRID;
        KI0DW01.KI0DWXNX = KI0DM020.XNXCD;
        KI0DW01.KI0DWGPC = KI0DM020.XGPCD;
        COMMAREA.CAITEM = KI0DW01.KI0DWUSR;
      end
      XSEXIT(); /* check security/xfer*/
      KI0DM020.KI0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end
  ;
   /* ---------  check if new id request  --------------*/
  ;
  if (KI0DM020.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end
  ;
  if (KI0DM020.KUCCOID == KI0DW01.KI0DWCID
   && KI0DM020.KUMSTRID == KI0DW01.KI0DWSID
   && KI0DM020.XNXCD == KI0DW01.KI0DWXNX
   && KI0DM020.XGPCD == KI0DW01.KI0DWGPC)
    KI0DW01.KI0DWNR = " ";
  else
    KI0DW01.KI0DWNR = "X"; /* new request*/
  end
  ;
    /* -----------   end of process ki0d020  ------------*/
  ;
end // end KI0D020

// read/fmt basic cust screen
Function KI0D025()
   /* ----------  start process ki0d025 ----------------*/
  ;
  ;
   /* ----  get new heading data if neccessary  ---------*/
  ;
  if (KI0DM020.KUCCOID != KI0DW01.KI0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KI0DM020.KUCCOID;
    KI0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KI0DW01.KI0DWSID = -9999; /* force check for new store*/
  end
  KI0DM020.KUCCONM = KUCREC.KUCCONM;
  KI0DM020.KUCCOANM = KUCREC.KUCCOANM;
  ;
  ;
  if (KI0DM020.KUMSTRID != KI0DW01.KI0DWSID) /* store change?*/
    KUMREC.KUCCOID = KI0DM020.KUCCOID;
    KUMREC.KUMSTRID = KI0DM020.KUMSTRID;
    KI0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KI0DM020.KUMSTRNM = KUMREC.KUMSTRNM;
  ;
  if (KI0DM020.XNXCD in XNXTBL.XNXCD)
    KI0DM020.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/
  ;
  if (KI0DM020.XGPCD in XGPTBL.XGPCD)
    KI0DM020.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/
  ;
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  ;
  set KI0DW01 empty; /* clear work record*/
  KI0DW01.KI0DWCID = 0;
  KI0DW01.KI0DWSID = 0;
  KI0DW01.KI0DWXNX = 0;
  KI0DW01.KI0DWOPT = 0;
  ;
   /* -----  read/fmt customer unit table to ki0dm020  -----*/
  ;
      /* build customer key*/
  set KUNREC empty;
  KUNREC.KUCCOID = KI0DM020.KUCCOID;
  KUNREC.KUMSTRID = KI0DM020.KUMSTRID;
  KUNREC.XNXCD = KI0DM020.XNXCD;
  KUNREC.XGPCD = KI0DM020.XGPCD;
  ;
  KI0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KI0DW01.KI0DWCID = KI0DM020.KUCCOID; /* save current key*/
    KI0DW01.KI0DWSID = KI0DM020.KUMSTRID;
    KI0DW01.KI0DWXNX = KI0DM020.XNXCD;
    KI0DW01.KI0DWGPC = KI0DM020.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end
  ;
  KI0DS11(); /* fmt vcust001 to km0dm020*/
  ;
  ;
   /* ------- read VCULVL01 for National Account Code ------------*/
  ;
  KI0D-026();
  ;
   /* ------- read label(s) if indicator on -------*/
  ;
  set KUSREC empty;
  ;
  if (KUNREC.KUNLABIN == "Y") /* any labels?*/
    KUSREC.KUCCOID = KI0DM020.KUCCOID; /* build key*/
    KUSREC.KUMSTRID = KI0DM020.KUMSTRID;
    KUSREC.XNXCD = KI0DM020.XNXCD;
    KUSREC.XGPCD = KI0DM020.XGPCD;
    ;
    call "IO0310" ("S ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes}; /* read vlabel01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KI0DM020.KUSTEXT1 = KUSREC.KUSTEXT1;
      KI0DM020.KUSTEXT2 = KUSREC.KUSTEXT2;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KI0DM020.KI0DMMSG = "LABEL DATA MISSING";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VLABEL01";
        TA1REC.TA1MAP = "KI0DM020";
        KI0DW01.KI0DWCID = KUNREC.KUCCOID;
        TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
        KI0DW01.KI0DWCID = KUNREC.KUMSTRID;
        TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
        KI0DW01.KI0DWCID = KUNREC.XNXCD;
        TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
        TA1REC.TA1LOCAT[4] = KUNREC.XGPCD;
        TA1REC.TA1PGMNM = "KI0D025";
        TA1REC.TA1TBLKE = "KEY IN LOCATION";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end
  ;
  ;
   /* ----------  end process ki0d025 ----------------*/
end // end KI0D025

// init order type processing
Function KI0D065()
  ;
   /* -------- start process ki0d065 --------------*/
  ;
     /* work done in flow*/
  ;
   /* ------------  end of process ki0d065 --------------*/
  ;
end // end KI0D065

// select order type records
Function KI0D070()
   /* ----------  start process ki0d070 ----------------*/
  ;
        /* read new company/store if neccessary*/
  ;
  if (KI0DM080.KUCCOID != KI0DW01.KI0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KI0DM080.KUCCOID;
    KI0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KI0DW01.KI0DWSID = -9999; /* force check for new store*/
  end
  ;
  if (KI0DM080.KUMSTRID != KI0DW01.KI0DWSID) /* store change?*/
    KUMREC.KUCCOID = KI0DM080.KUCCOID;
    KUMREC.KUMSTRID = KI0DM080.KUMSTRID;
    KI0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  ;
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  ;
  set KI0DW01 empty; /* clear work record*/
  KI0DW01.KI0DWCID = 0;
  KI0DW01.KI0DWSID = 0;
  KI0DW01.KI0DWXNX = 0;
  KI0DW01.KI0DWOPT = 0;
  ;
   /* -----  read customer unit table  -----*/
  ;
      /* build customer key*/
  KUNREC.KUCCOID = KI0DM080.KUCCOID;
  KUNREC.KUMSTRID = KI0DM080.KUMSTRID;
  KUNREC.XNXCD = KI0DM080.XNXCD;
  KUNREC.XGPCD = KI0DM080.XGPCD;
  ;
  KI0DS10(); /* read vcust001 (kunrec)*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KI0DW01.KI0DWCID = KI0DM080.KUCCOID; /* save current key*/
    KI0DW01.KI0DWSID = KI0DM080.KUMSTRID;
    KI0DW01.KI0DWXNX = KI0DM080.XNXCD;
    KI0DW01.KI0DWGPC = KI0DM080.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end
  ;
  ;
   /* -----  select order types for customer unit  -----*/
  ;
      /* build customer key*/
  ;
  set KUTREC empty;
  KUTREC.KUCCOID = KI0DM080.KUCCOID;
  KUTREC.KUMSTRID = KI0DM080.KUMSTRID;
  KUTREC.XNXCD = KI0DM080.XNXCD;
  KUTREC.XGPCD = KI0DM080.XGPCD;
  ;
     /* select set - all terms recs within gpc*/
  ;
  set KU3REC empty;
  KU3REC.KU3OPT = "S2";
  ;
  call "IO0350" (KU3REC, SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* read vterms01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VTERMS01";
    TA1REC.TA1MAP = "KI0DM080";
    KI0DW01.KI0DWCID = KUTREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUTREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUTREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
    TA1REC.TA1LOCAT[4] = KUTREC.XGPCD;
    TA1REC.TA1PGMNM = "KI0D070";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
    /* load existing terms records to km0dtrec array*/
  ;
  KI0DS18(); /* select next terms record*/
  ;
  KI0DW01.KI0DWIX1 = 1;
  KI0DW01.XOTCD = " ";
  while (KI0DWIX1 <= 40)
    ;
    if (SQLCA.VAGen_SQLCODE != 100)
      if (KUTREC.XOTCD == KI0DW01.XOTCD)
        /* next sentence*/
      else
        KI0DW01.XOTCD = KUTREC.XOTCD;
        KI0DW01.KI0DWTRC[KI0DWIX1] = KUTREC.KUTGRP; /* save terms rec*/
        move KI0DWIX1 to KI0DWIX2 withV60Compat; /* save last order type pointer*/
        KI0DWIX1 = KI0DWIX1 + 1;
      end
      KI0DS18(); /* select next terms record*/
    else
      set KUTREC empty;
      KI0DW01.KI0DWTRC[KI0DWIX1] = KUTREC.KUTGRP;
      KI0DWIX1 = KI0DWIX1 + 1;
    end
  end
  ;
  ;
    /* close set*/
  ;
  set KU3REC empty;
  KU3REC.KU3OPT = "C2";
  ;
  call "IO0350" (KU3REC, SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* read vterms01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VTERMS01";
    TA1REC.TA1MAP = "KI0DM080";
    KI0DW01.KI0DWCID = KUTREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUTREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUTREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
    TA1REC.TA1LOCAT[4] = KUTREC.XGPCD;
    TA1REC.TA1PGMNM = "KI0D070";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* ----------  end process ki0d070 ----------------*/
end // end KI0D070

// clear order type screen
Function KI0D075()
   /* ----------  start process ki0d075 ----------------*/
  ;
    /* set order type pointer*/
  ;
  KI0DWIX1 = 1; /* point to first order type*/
  ;
  ;
  set KI0DM080 initial; /* clear order type map*/
  ;
      /* set headings*/
  ;
  KI0DM080.KI0DMDT = VGVar.currentShortGregorianDate;
  KI0DM080.KUCCOID = KI0DW01.KI0DWCID; /* company id*/
  KI0DM080.KUMSTRID = KI0DW01.KI0DWSID; /* store id*/
  KI0DM080.XNXCD = KI0DW01.KI0DWXNX; /* dept id*/
  KI0DM080.XGPCD = KI0DW01.KI0DWGPC; /* gpc code*/
  KI0DM080.KUCCONM = KUCREC.KUCCONM; /* company name*/
  KI0DM080.KUCCOANM = KUCREC.KUCCOANM; /* dba name*/
  KI0DM080.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/
  if (KI0DM080.XNXCD in XNXTBL.XNXCD)
    KI0DM080.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* dept name*/
  if (KI0DM080.XGPCD in XGPTBL.XGPCD)
    KI0DM080.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* gpc name*/
  ;
   /* ----------  end process ki0d075 ----------------*/
  ;
end // end KI0D075

// converse order type screen
Function KI0D080()
   /* ------------------ ki0d080 ------------------------------*/
    /* before stage: load new order type if no msg waiting,*/
    /* check field security.*/
   /* ---------------------------------------------------------*/
  ;
    /* ki0dindx is current order type pointer*/
    /* ki0didx2 is last order type pointer*/
    /* ki0didx3 is work pointer*/
    /* ki0didx4 is work pointer*/
  ;
  ;
  if (KI0DM080.KI0DMMSG == " " /* bypass new type load if msg*/
   && converseVar.validationMsgNum == 0)
    ;
    KI0DS19(); /* load new order type/eff date array*/
    ;
  end
  ;
  KI0DS1A(); /* set cursor, blank headings on not found*/
  ;
  ;
  converse KI0DM080 ;
  ;
   /* ------------------ ki0d080 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KI0DM080.VAGen_EZEMSG = " ";
  KI0DM080.KI0DMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  if (converseVar.eventKey is pf7 /* page back*/
   || converseVar.eventKey is pf8) /* page forward*/
    exit stack;
  end
  ;
  KI0DS01(); /* check standard entry keys*/
  KI0DM020.KI0DMMSG = KI0DW01.KI0DWMSG;
  ;
  if (converseVar.validationMsgNum != 0
   || KI0DM080.KI0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end
  ;
  if (converseVar.eventKey is pf3) /* pf3- return to company inq menu*/
    if (KI0DW02.KI0DWOPT == 11
     && COMMAREA.CAFROMAP == "KI0M")
      COMMAREA.CATOAP = "KI0M";
      KI0DW01.KI0DWCID = KI0DM080.KUCCOID;
      KI0DW01.KI0DWSID = KI0DM080.KUMSTRID;
      KI0DW01.KI0DWXNX = KI0DM080.XNXCD;
      KI0DW01.KI0DWGPC = KI0DM080.XGPCD;
      COMMAREA.CAUSERA = KI0DW01.KI0DWUSR;
      XSEXIT();
      KI0DM010.KI0DMMSG = COMMAREA.CAMSG;
    end
    exit stack;
  end
  ;
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KI0DM080.KI0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KI0DM080.KI0DMOPT;
      COMMAREA.CAITEM = KI0DM080.KI0DMITM;
      if (KI0DM080.KI0DMITM == " ")
        KI0DW01.KI0DWCID = KI0DM080.KUCCOID;
        KI0DW01.KI0DWSID = KI0DM080.KUMSTRID;
        KI0DW01.KI0DWXNX = KI0DM080.XNXCD;
        KI0DW01.KI0DWGPC = KI0DM080.XGPCD;
        COMMAREA.CAITEM = KI0DW01.KI0DWUSR;
      end
      XSEXIT(); /* check security/xfer*/
      KI0DM080.KI0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
    end
  end
  ;
   /* ---------  check if new id request  --------------*/
  ;
  if (KI0DM080.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end
  ;
  if (KI0DM080.KUCCOID == KI0DW01.KI0DWCID
   && KI0DM080.KUMSTRID == KI0DW01.KI0DWSID
   && KI0DM080.XNXCD == KI0DW01.KI0DWXNX
   && KI0DM080.XGPCD == KI0DW01.KI0DWGPC)
    KI0DW01.KI0DWNR = " ";
  else
    KI0DW01.KI0DWNR = "X"; /* new request*/
  end
  ;
    /* -----------   end of process ki0d080  ------------*/
  ;
end // end KI0D080

// init special cust. group map
Function KI0D125()
   /* -------- start process ki0d125 --------------*/
  ;
      /* set date in map, initialize work flds*/
  ;
  set KI0DM130 initial; /* clear map fields*/
  KI0DM130.KI0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/
  ;
   /* ------------  end of process ki0d130 --------------*/
  ;
end // end KI0D125

// converse spc. cust. grp. map
Function KI0D130()
   /* ------------------ ki0d130 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/
  ;
  KI0DS3B(); /* set cursor, blank headings on notfound*/
  ;
  ;
  converse KI0DM130 ;
  ;
   /* ------------------ ki0d130 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KI0DM130.VAGen_EZEMSG = " ";
  KI0DM130.KI0DMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  ;
  KI0DS01(); /* check standard entry keys*/
  KI0DM130.KI0DMMSG = KI0DW01.KI0DWMSG;
  ;
  if (converseVar.validationMsgNum != 0
   || KI0DM130.KI0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end
  ;
  if (converseVar.eventKey is pf3) /* pf3- return to company inq menu*/
    if (KI0DW02.KI0DWOPT == 06
     && COMMAREA.CAFROMAP == "KI0M")
      KI0DW01.KI0DWCID = KI0DM130.KUCCOID;
      KI0DW01.KI0DWSID = KI0DM130.KUMSTRID;
      KI0DW01.KI0DWXNX = KI0DM130.XNXCD;
      KI0DW01.KI0DWGPC = KI0DM130.XGPCD;
      COMMAREA.CAUSERA = KI0DW01.KI0DWUSR;
      COMMAREA.CATOAP = "KI0M";
      XSEXIT();
      KI0DM010.KI0DMMSG = COMMAREA.CAMSG;
    end
    exit stack;
  end
  ;
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KI0DM130.KI0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KI0DM130.KI0DMOPT;
      COMMAREA.CAITEM = KI0DM130.KI0DMITM;
      if (KI0DM130.KI0DMITM == " ")
        KI0DW01.KI0DWCID = KI0DM130.KUCCOID;
        KI0DW01.KI0DWSID = KI0DM130.KUMSTRID;
        KI0DW01.KI0DWXNX = KI0DM130.XNXCD;
        KI0DW01.KI0DWGPC = KI0DM130.XGPCD;
        COMMAREA.CAITEM = KI0DW01.KI0DWUSR;
      end
      XSEXIT(); /* check security/xfer*/
      KI0DM130.KI0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end
  ;
   /* ---------  check if new id request  --------------*/
  ;
  if (KI0DM130.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end
  ;
  if (KI0DM130.KUCCOID == KI0DW01.KI0DWCID
   && KI0DM130.KUMSTRID == KI0DW01.KI0DWSID
   && KI0DM130.XNXCD == KI0DW01.KI0DWXNX
   && KI0DM130.XGPCD == KI0DW01.KI0DWGPC)
    KI0DW01.KI0DWNR = " ";
  else
    KI0DW01.KI0DWNR = "X"; /* new request*/
  end
  ;
    /* -----------   end of process ki0d130  ------------*/
  ;
end // end KI0D130

// read/fmt spc. cust. grp. map
Function KI0D135()
   /* ----------  start process ki0d135 ----------------*/
  ;
  ;
   /* ----  get new heading data if neccessary  ---------*/
  ;
  if (KI0DM130.KUCCOID != KI0DW01.KI0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KI0DM130.KUCCOID;
    KI0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KI0DW01.KI0DWSID = -9999; /* force check for new store*/
  end
  KI0DM130.KUCCONM = KUCREC.KUCCONM;
  KI0DM130.KUCCOANM = KUCREC.KUCCOANM;
  ;
  ;
  if (KI0DM130.KUMSTRID != KI0DW01.KI0DWSID) /* store change?*/
    KUMREC.KUCCOID = KI0DM130.KUCCOID;
    KUMREC.KUMSTRID = KI0DM130.KUMSTRID;
    KI0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KI0DM130.KUMSTRNM = KUMREC.KUMSTRNM;
  ;
  if (KI0DM130.XNXCD in XNXTBL.XNXCD)
    KI0DM130.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/
  ;
  if (KI0DM130.XGPCD in XGPTBL.XGPCD)
    KI0DM130.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/
  ;
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  ;
  set KI0DW01 empty; /* clear work record*/
  KI0DW01.KI0DWCID = 0;
  KI0DW01.KI0DWSID = 0;
  KI0DW01.KI0DWXNX = 0;
  KI0DW01.KI0DWOPT = 0;
  ;
   /* -----  read customer unit to insure valid key ----*/
  ;
      /* build customer key*/
  KUNREC.KUCCOID = KI0DM130.KUCCOID;
  KUNREC.KUMSTRID = KI0DM130.KUMSTRID;
  KUNREC.XNXCD = KI0DM130.XNXCD;
  KUNREC.XGPCD = KI0DM130.XGPCD;
  ;
  KI0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KI0DW01.KI0DWCID = KI0DM130.KUCCOID; /* save current key*/
    KI0DW01.KI0DWSID = KI0DM130.KUMSTRID;
    KI0DW01.KI0DWXNX = KI0DM130.XNXCD;
    KI0DW01.KI0DWGPC = KI0DM130.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end
  ;
  ;
   /* -----  read/fmt special cust. group to ki0dm130  -----*/
  ;
      /* build customer unit key for kuprec (vcugrp01)*/
  set KUPREC empty;
  KUPREC.KUCCOID = KI0DM130.KUCCOID;
  KUPREC.KUMSTRID = KI0DM130.KUMSTRID;
  KUPREC.XNXCD = KI0DM130.XNXCD;
  KUPREC.XGPCD = KI0DM130.XGPCD;
  ;
    /* read vcugrp01*/
  ;
  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KI0DM130.KI0DMMSG = "NO CUST. GROUPS SET UP FOR THIS CUSTOMER";
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUGRP01";
      TA1REC.TA1MAP = "KI0DM130";
      KI0DW01.KI0DWCID = KUPREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUPREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUPREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
      TA1REC.TA1LOCAT[4] = KUPREC.XGPCD;
      TA1REC.TA1PGMNM = "KI0D135";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
       /* fmt vcugrp01 to ki0dm130*/
  ;
  KI0DM130.XSOCD = KUPREC.XSOCD; /* move sales office*/
  ;
  KI0DWIX1 = 1;
  while (KI0DWIX1 <= 10)
    if (KUPREC.XSGCD[KI0DWIX1] != " ")
      KI0DM130.XSGCD[KI0DWIX1] = KUPREC.XSGCD[KI0DWIX1];
      if (KI0DM130.XSGCD[KI0DWIX1] in XSGTBL.XSGCD)
        KI0DM130.XSGABRV[KI0DWIX1] = XSGTBL.XSGABRV[sysVar.arrayIndex];
      end
    else
      KI0DM130.XSGCD[KI0DWIX1] = " ";
      KI0DM130.XSGABRV[KI0DWIX1] = " ";
    end
    KI0DWIX1 = KI0DWIX1 + 1;
  end
  ;
  ;
   /* ----------  end process ki0d135 ----------------*/
  ;
end // end KI0D135

// init special instr. screen
Function KI0D155()
   /* -------- start process ki0d155 --------------*/
  ;
      /* set date in map, initialize work flds*/
  ;
  set KI0DM160 initial; /* clear map fields*/
  KI0DM160.KI0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/
  ;
   /* ------------  end of process ki0d155 --------------*/
  ;
end // end KI0D155

// converse spc. instr. screen
Function KI0D160()
   /* ------------------ ki0d160 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/
  ;
  KI0DS3C(); /* set cursor, blank headings on*/
                                   /* notfound*/
  ;
  converse KI0DM160 ;
  ;
   /* ------------------ ki0d160 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KI0DM160.VAGen_EZEMSG = " ";
  KI0DM160.KI0DMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  ;
  KI0DS01(); /* check standard entry keys*/
  KI0DM160.KI0DMMSG = KI0DW01.KI0DWMSG;
  ;
  if (converseVar.validationMsgNum != 0
   || KI0DM160.KI0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end
  ;
  if (converseVar.eventKey is pf3) /* pf3- return to company chg menu*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KI0DM160.KI0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KI0DM160.KI0DMOPT;
      COMMAREA.CAITEM = KI0DM160.KI0DMITM;
      if (KI0DM160.KI0DMITM == " ")
        KI0DW01.KI0DWCID = KI0DM160.KUCCOID;
        KI0DW01.KI0DWSID = KI0DM160.KUMSTRID;
        KI0DW01.KI0DWXNX = KI0DM160.XNXCD;
        KI0DW01.KI0DWGPC = KI0DM160.XGPCD;
        COMMAREA.CAITEM = KI0DW01.KI0DWUSR;
      end
      XSEXIT(); /* check security/xfer*/
      KI0DM160.KI0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end
  ;
   /* ---------  check if new id request  --------------*/
  ;
  if (KI0DM160.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end
  ;
  if (KI0DM160.KUCCOID == KI0DW01.KI0DWCID
   && KI0DM160.KUMSTRID == KI0DW01.KI0DWSID
   && KI0DM160.XNXCD == KI0DW01.KI0DWXNX
   && KI0DM160.XGPCD == KI0DW01.KI0DWGPC)
    KI0DW01.KI0DWNR = " ";
  else
    KI0DW01.KI0DWNR = "X"; /* new request*/
  end
  ;
    /* -----------   end of process ki0d160  ------------*/
  ;
end // end KI0D160

// read/fmt spc. instr. screen
Function KI0D165()
   /* ----------  start process ki0d165 ----------------*/
  ;
  ;
   /* ----  get new heading data if neccessary  ---------*/
  ;
  if (KI0DM160.KUCCOID != KI0DW01.KI0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KI0DM160.KUCCOID;
    KI0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KI0DW01.KI0DWSID = -9999; /* force check for new store*/
  end
  KI0DM160.KUCCONM = KUCREC.KUCCONM;
  KI0DM160.KUCCOANM = KUCREC.KUCCOANM;
  ;
  ;
  if (KI0DM160.KUMSTRID != KI0DW01.KI0DWSID) /* store change?*/
    KUMREC.KUCCOID = KI0DM160.KUCCOID;
    KUMREC.KUMSTRID = KI0DM160.KUMSTRID;
    KI0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KI0DM160.KUMSTRNM = KUMREC.KUMSTRNM;
  ;
  if (KI0DM160.XNXCD in XNXTBL.XNXCD)
    KI0DM160.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/
  ;
  if (KI0DM160.XGPCD in XGPTBL.XGPCD)
    KI0DM160.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/
  ;
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
  ;
  set KI0DW01 empty; /* clear work record*/
  KI0DW01.KI0DWCID = 0;
  KI0DW01.KI0DWSID = 0;
  KI0DW01.KI0DWXNX = 0;
  KI0DW01.KI0DWOPT = 0;
  ;
   /* -----  read customer unit to insure valid key ----*/
  ;
      /* build customer key*/
  KUNREC.KUCCOID = KI0DM160.KUCCOID;
  KUNREC.KUMSTRID = KI0DM160.KUMSTRID;
  KUNREC.XNXCD = KI0DM160.XNXCD;
  KUNREC.XGPCD = KI0DM160.XGPCD;
  ;
  KI0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KI0DW01.KI0DWCID = KI0DM160.KUCCOID; /* save current key*/
    KI0DW01.KI0DWSID = KI0DM160.KUMSTRID;
    KI0DW01.KI0DWXNX = KI0DM160.XNXCD;
    KI0DW01.KI0DWGPC = KI0DM160.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end
  ;
  ;
   /* -----  read/fmt special cust. inst. to ki0dm160  -----*/
  ;
      /* build customer unit key for kuqrec (vinst001)*/
  set KUQREC empty;
  KUQREC.KUCCOID = KI0DM160.KUCCOID;
  KUQREC.KUMSTRID = KI0DM160.KUMSTRID;
  KUQREC.XNXCD = KI0DM160.XNXCD;
  KUQREC.XGPCD = KI0DM160.XGPCD;
  ;
    /* select set in vinst001*/
  ;
  call "IO0300" ("SS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KI0DM160";
    KI0DW01.KI0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "IM0D165";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
       /* fmt vinst001 to ki0dm160*/
  ;
  KI0DS40(); /* read next vinst001*/
  ;
  KI0DWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE != 100)
    ;
    KI0DM160.XNDCD[KI0DWIX1] = KUQREC.XNDCD; /* move fields*/
    KI0DM160.KUQSINST[KI0DWIX1] = KUQREC.KUQSINST; /* to screen*/
    ;
    KI0DS40(); /* read next vinst001*/
    KI0DWIX1 = KI0DWIX1 + 1;
  end
  ;
    /* close set in vinst001*/
  ;
  call "IO0300" ("CS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KI0DM160";
    KI0DW01.KI0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "KI0D165";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* ----------  end process ki0d165 ----------------*/
  ;
end // end KI0D165

// initialize records
Function KI0DS-INIT-RECS()
   /* ****************************************/
   /* initialize all records used by ki0d*/
   /* ****************************************/
  ;
  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUSREC empty;
  set KUTREC empty;
  set KUPREC empty;
  set KUQREC empty;
  set KU3REC empty;
  set VCULVLPD empty;
  set KI0DW01 empty;
  set KI0DW02 empty;
  set XA0AW02 empty;
  set XX0XW01 empty;
  set SQLCA empty;
  set TA1REC empty;
  KI0DW01.KI0DWCID = 0;
  KI0DW01.KI0DWSID = 0;
  KI0DW01.KI0DWXNX = 0;
  KI0DW01.KI0DWOPT = 0;
  ;
end // end KI0DS-INIT-RECS

// headings process for notfound
Function KI0DS00()
   /* ------------------ ki0ds00  start------------------------*/
  ;
    /* set cursor at appropriate key for not found*/
  ;
  if (converseVar.validationMsgNum == 25) /* company not found?*/
    if (KI0DM020.KUCCOID == 0)
      KI0DM020.KI0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KI0DM020.KUCCOID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DM020.KUCCONM = " ";
    KI0DM020.KUMSTRNM = " ";
    KI0DM020.XNXDESC = " ";
    KI0DM020.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KI0DM020.KUMSTRID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DW01.KI0DWSID = -9999; /* force read for new heading*/
    KI0DM020.KUMSTRNM = " ";
    KI0DM020.XNXDESC = " ";
    KI0DM020.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KI0DM020.XNXCD cursor, bold;
    set KI0DM020.XGPCD bold;
    KI0DM020.XNXDESC = " ";
    KI0DM020.XGPDESC = " ";
  end
  ;
  ;
   /* ------------------ ki0ds00 end --------------------------*/
end // end KI0DS00

// check standard entry keys
Function KI0DS01()
  ;
  ;
    /* ---------- start stmt grp ki0ds01 -----------------*/
  ;
    /* statement group km0ds01 - check valid entry key,*/
       /* do menu transfers if requested*/
  ;
  KI0DW01.KI0DWMSG = " ";
  ;
  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pa2) /* pa2 - exit application*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help (not yet active)*/
        XSPF1();
        KI0DW01.KI0DWMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " ";
        exit stack;
      else
        if (converseVar.eventKey is pf3) /* pf3 - return to prior menu*/
          return;
        else
          if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
            XSPF4();
            KI0DW01.KI0DWMSG = COMMAREA.CAMSG; /* security error*/
            COMMAREA.CATOAP = " ";
            exit stack;
          else
            converseLib.validationFailed(3); /* invalid pf key*/
          end
        end
      end
    end
  end
  ;
  ;
    /* -----------   end of stmt grp ki0ds01  ------------*/
  ;
end // end KI0DS01

// read vcmpny01 table
Function KI0DS08()
   /* -----------  stmt group ki0ds08 start  ---------------*/
  ;
    /* read company table*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KI0DW01.KI0DWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KI0DW01.KI0DWCID;
      TA1REC.TA1PGMNM = "KI0DS08";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
   /* -----------  stmt group ki0ds08 end    ---------------*/
end // end KI0DS08

// read vstore01 table
Function KI0DS09()
   /* -----------  stmt group ki0ds09 start  ---------------*/
  ;
      /* read store table*/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return; /* good read?*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26); /* not found msg*/
      exit stack;
    else
      /* *****  call error routine  *******/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KI0DS09 ";
      TA1REC.TA1LOCAT[1] = "COMPANY ";
      TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
      TA1REC.TA1LOCAT[3] = "STORE   ";
      TA1REC.TA1LOCAT[4] = KI0DW01.KI0DWSID;
      TA1REC.TA1MAP = "N/A     ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VSTORE01";
      KI0DW01.KI0DWSQL = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KI0DW01.KI0DWSQL; /* restore sqlca to original*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
    end
  end
  ;
  ;
   /* -----------  stmt group ki0ds09 end    ---------------*/
end // end KI0DS09

// read vcust001 table
Function KI0DS10()
   /* -----------  stmt group ki0ds10 start  ---------------*/
  ;
    /* read customer unit table*/
  ;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* read vcust001*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(23); /* customer not found*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KI0DW01.KI0DWCID = KUNREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUNREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUNREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
      TA1REC.TA1LOCAT[4] = KUNREC.XGPCD;
      TA1REC.TA1PGMNM = "KI0DS10";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
   /* -----------  stmt group ki0ds10 end    ---------------*/
end // end KI0DS10

// format vcust001 to ki0dm020
Function KI0DS11()
  ;
   /* -----------  stmt group ki0ds11 start  ---------------*/
  ;
  ;
     /* format vcust001 to basic customer chg map*/
  ;
  KI0DM020.XXXSTAT = KUNREC.XXXSTAT; /* customer unit status*/
  KI0DM020.KUNABOFL = KUNREC.KUNABOFL; /* back order code*/
  KI0DM020.KUNBOQTY = KUNREC.KUNBOQTY; /* back order qty*/
  KI0DM020.KUNMAPCT = KUNREC.KUNMAPCT; /* back order qty*/
  KI0DM020.KUNCAFL = KUNREC.KUNCAFL; /* change ack. flag*/
  KI0DM020.KUNNOSFL = KUNREC.KUNNOSFL; /* subs. allowed flag*/
  KI0DM020.XGACD[1] = KUNREC.XGACD[1]; /* gender age 1*/
  KI0DM020.XGACD[2] = KUNREC.XGACD[2]; /* gender age 2*/
  KI0DM020.XGACD[3] = KUNREC.XGACD[3]; /* gender age 3*/
  KI0DM020.XGACD[4] = KUNREC.XGACD[4]; /* gender age 4*/
  KI0DM020.KUNSPCD[1] = KUNREC.KUNSPCD[1]; /* sport activity 1*/
  KI0DM020.KUNSPCD[2] = KUNREC.KUNSPCD[2]; /* sport activity 2*/
  KI0DM020.KUNSPCD[3] = KUNREC.KUNSPCD[3]; /* sport activity 3*/
  KI0DM020.KUNSPCD[4] = KUNREC.KUNSPCD[4]; /* sport activity 4*/
  KI0DM020.KUNSPCD[5] = KUNREC.KUNSPCD[5]; /* sport activity 5*/
  KI0DM020.KUNSPCD[6] = KUNREC.KUNSPCD[6]; /* sport activity 6*/
  KI0DM020.KUNSPCD[7] = KUNREC.KUNSPCD[7]; /* sport activity 7*/
  KI0DM020.KUNSPCD[8] = KUNREC.KUNSPCD[8]; /* sport activity 8*/
  KI0DM020.XNACD = KUNREC.XNACD; /* natl acct code*/
  ;
   /* -----------  stmt group ki0ds11 end    ---------------*/
end // end KI0DS11

// read next vterms01 row
Function KI0DS18()
   /* -----------  stmt group ki0ds18 start  ---------------*/
  ;
    /* read next vterms01 row*/
  set KU3REC empty;
  KU3REC.KU3OPT = "N2";
  ;
  call "IO0350" (KU3REC, SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      TA1REC.TA1MAP = "KI0DM080";
      KI0DW01.KI0DWCID = KUTREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUTREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
      KI0DW01.KI0DWCID = KUTREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
      TA1REC.TA1LOCAT[4] = KUTREC.XGPCD;
      TA1REC.TA1PGMNM = "KI0DS18";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
   /* -----------  stmt group ki0ds18 end    ---------------*/
end // end KI0DS18

// load new terms/eff dt array
Function KI0DS19()
   /* --------------  start stmt grp ki0ds19  -----------------*/
  ;
       /* load new terms data*/
  ;
  KUTREC.KUTGRP = KI0DW01.KI0DWTRC[KI0DWIX1]; /* get terms rec*/
  ;
  KI0DS28(); /* move kutrec fields to map*/
  ;
  ;
    /* ----------- end of stmt grp ki0ds19  -----------*/
end // end KI0DS19

// heading process on notfound
Function KI0DS1A()
   /* ------------------ ki0dsa1 start-------------------------*/
  ;
    /* set cursor at appropriate key for not found*/
  ;
  if (converseVar.validationMsgNum == 25) /* company not found?*/
    if (KI0DM080.KUCCOID == 0)
      KI0DM080.KI0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KI0DM080.KUCCOID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DM080.KUCCONM = " ";
    KI0DM080.KUMSTRNM = " ";
    KI0DM080.XNXDESC = " ";
    KI0DM080.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KI0DM080.KUMSTRID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DW01.KI0DWSID = -9999; /* force read for new heading*/
    KI0DM080.KUMSTRNM = " ";
    KI0DM080.XNXDESC = " ";
    KI0DM080.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KI0DM080.XNXCD cursor, bold;
    set KI0DM080.XGPCD bold;
    KI0DM080.XNXDESC = " ";
    KI0DM080.XGPDESC = " ";
  end
  ;
   /* ------------------ ki0ds1a end---------------------------*/
end // end KI0DS1A

// move terms to ki0dm080
Function KI0DS28()
   /* --------------  start stmt grp ki0ds28  -----------------*/
  ;
       /* format new vterms01 to ki0dm080 (order type terms)*/
  ;
  KI0DM080.XOTCD = KUTREC.XOTCD; /* order type*/
  ;
  KI0DWIX3 = 1;
  while (KI0DWIX3 <= 3)
    KI0DM080.XPTCD[KI0DWIX3] = KUTREC.XPTCD[KI0DWIX3]; /* terms code*/
    KI0DM080.XCPCD[KI0DWIX3] = KUTREC.XCPCD[KI0DWIX3]; /* co-op cd*/
    KI0DM080.XAACD[KI0DWIX3] = KUTREC.XAACD[KI0DWIX3]; /* ad allow.*/
    KI0DM080.KUTAPOF[KI0DWIX3] = KUTREC.KUTAPOF[KI0DWIX3]; /* ad face*/
    KI0DM080.KUTAPBK[KI0DWIX3] = KUTREC.KUTAPBK[KI0DWIX3]; /* ad bank*/
    KI0DM080.KUTAANET[KI0DWIX3] = KUTREC.KUTAANET[KI0DWIX3];
                                   /* ad allow net*/
    KI0DM080.KUTAAFCG[KI0DWIX3] = KUTREC.KUTAAFCG[KI0DWIX3];
                                   /* ad allow fcg*/
    KI0DM080.KUTAAFCN[KI0DWIX3] = KUTREC.KUTAAFCN[KI0DWIX3];
                                   /* ad allow fcn*/
    KI0DM080.XTDCD[KI0DWIX3] = KUTREC.XTDCD[KI0DWIX3];
                                   /* trade disc.*/
    KI0DM080.KUTTDPOF[KI0DWIX3] = KUTREC.KUTTDPOF[KI0DWIX3]; /* face*/
    KI0DM080.KUTTDPBK[KI0DWIX3] = KUTREC.KUTTDPBK[KI0DWIX3]; /* td bank*/
    KI0DM080.KUTTDNET[KI0DWIX3] = KUTREC.KUTTDNET[KI0DWIX3]; /* td b net*/
    KI0DM080.KUTTDSPN[KI0DWIX3] = KUTREC.KUTTDSPN[KI0DWIX3]; /* td b spn*/
    KI0DM080.KUTTDDSN[KI0DWIX3] = KUTREC.KUTTDDSN[KI0DWIX3]; /* td b dsn*/
    KI0DM080.XDACD[KI0DWIX3] = KUTREC.XDACD[KI0DWIX3]; /* defect. cd*/
    KI0DM080.KUTDAOF[KI0DWIX3] = KUTREC.KUTDAOF[KI0DWIX3]; /* bank*/
    KI0DM080.KUTDABK[KI0DWIX3] = KUTREC.KUTDABK[KI0DWIX3]; /* bank*/
    KI0DM080.KUTDANET[KI0DWIX3] = KUTREC.KUTDANET[KI0DWIX3];
                                   /* da net*/
    KI0DM080.KUTDAHCN[KI0DWIX3] = KUTREC.KUTDAHCN[KI0DWIX3];
                                   /* da hcn*/
    KI0DW01.KI0DWYMD = KUTREC.KUTENDT[KI0DWIX3];
    KI0DM080.KI0DMEYR[KI0DWIX3] = KI0DW01.KI0DWYDY; /* eff. year*/
    KI0DM080.KI0DMEMT[KI0DWIX3] = KI0DW01.KI0DWYDM; /* eff. month*/
    KI0DM080.KI0DMEDY[KI0DWIX3] = KI0DW01.KI0DWYDD; /* eff. year*/
    if (KUTREC.KUTXNDT[KI0DWIX3] == 99999999)
      KI0DW01.KI0DWYMD = 0;
    else
      KI0DW01.KI0DWYMD = KUTREC.KUTXNDT[KI0DWIX3];
    end
    KI0DM080.KI0DMXYR[KI0DWIX3] = KI0DW01.KI0DWYDY; /* eff. year*/
    KI0DM080.KI0DMXMT[KI0DWIX3] = KI0DW01.KI0DWYDM; /* eff. month*/
    KI0DM080.KI0DMXDY[KI0DWIX3] = KI0DW01.KI0DWYDD; /* eff. year*/
    KI0DWIX3 = KI0DWIX3 + 1;
  end
  ;
  ;
    /* ----------- end of stmt grp ki0ds28  -----------*/
end // end KI0DS28

// heading process on notfound
Function KI0DS3B()
   /* ------------------ ki0ds3b start ------------------------*/
  ;
    /* set cursor at appropriate key for not found*/
  ;
  if (converseVar.validationMsgNum == 25) /* company not found?*/
    if (KI0DM130.KUCCOID == 0)
      KI0DM130.KI0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KI0DM130.KUCCOID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DM130.KUCCONM = " ";
    KI0DM130.KUMSTRNM = " ";
    KI0DM130.XNXDESC = " ";
    KI0DM130.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KI0DM130.KUMSTRID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DW01.KI0DWSID = -9999; /* force read for new heading*/
    KI0DM130.KUMSTRNM = " ";
    KI0DM130.XNXDESC = " ";
    KI0DM130.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KI0DM130.XNXCD cursor, bold;
    set KI0DM130.XGPCD bold;
    KI0DM130.XNXDESC = " ";
    KI0DM130.XGPDESC = " ";
  end
  ;
   /* ------------------ ki0ds3b end --------------------------*/
end // end KI0DS3B

// headings process on notfound
Function KI0DS3C()
   /* ------------------ ki0ds3c start ------------------------*/
  ;
    /* set cursor at appropriate key for not found*/
  ;
  if (converseVar.validationMsgNum == 25) /* company not found?*/
    if (KI0DM160.KUCCOID == 0)
      KI0DM160.KI0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KI0DM160.KUCCOID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DM160.KUCCONM = " ";
    KI0DM160.KUMSTRNM = " ";
    KI0DM160.XNXDESC = " ";
    KI0DM160.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KI0DM160.KUMSTRID cursor, bold;
    KI0DW01.KI0DWCID = -9999; /* force read for new heading*/
    KI0DW01.KI0DWSID = -9999; /* force read for new heading*/
    KI0DM160.KUMSTRNM = " ";
    KI0DM160.XNXDESC = " ";
    KI0DM160.XGPDESC = " ";
  end
  ;
  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KI0DM160.XNXCD cursor, bold;
    set KI0DM160.XGPCD bold;
    KI0DM160.XNXDESC = " ";
    KI0DM160.XGPDESC = " ";
  end
  ;
   /* ------------------ ki0ds3c end --------------------------*/
end // end KI0DS3C

// read next vinst001 row
Function KI0DS40()
   /* ----------  start stmt grp ki0ds40 ----------------*/
  ;
    /* read next row in vinst001 selected set*/
  ;
  call "IO0300" ("SN", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KI0DM160";
    KI0DW01.KI0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KI0DW01.KI0DWCID;
    KI0DW01.KI0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KI0DW01.KI0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "KI0DS40";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* ----------  end stmt grp ki0ds40 ----------------*/
end // end KI0DS40

//*** RECORD=KI0DW01 ****
// this record contains work fields used entirely within km0d.
// ;
// 25 June 93  dcaust  Redefined company, store, dept, opt
//                     for EAW project.
// ;
// ;
// ***********************
Record KI0DW01 type basicRecord
  10 KI0DWERA KI0DWERA ; 
    15 KI0DWUSR KI0DWUSR ; 
      20 KI0DWCID KI0DWCID ; 
        25 KI0DWCID-CHAR KI0DWCID-CHAR ; 
      20 KI0DWSID KI0DWSID ; 
        25 KI0DWSID-CHAR KI0DWSID-CHAR ; 
      20 KI0DWXNX KI0DWXNX ; 
        25 KI0DWXNX-CHAR KI0DWXNX-CHAR ; 
      20 KI0DWGPC KI0DWGPC ; 
    15 KI0DWOPT KI0DWOPT ; 
      20 KI0DWOPT-CHAR KI0DWOPT-CHAR ; 
  10 XOTCD XOTCD ; 
  10 KI0DWNR KI0DWNR ; 
  10 KI0DWIX1 KI0DWIX1 ; 
  10 KI0DWIX2 KI0DWIX2 ; 
  10 KI0DWIX3 KI0DWIX3 ; 
  10 KI0DWTRC KI0DWTRC [40] ; 
    15 KI0DWTCO KI0DWTCO ; 
    15 KI0DWTST KI0DWTST ; 
    15 KI0DWTNX KI0DWTNX ; 
    15 KI0DWTPC KI0DWTPC ; 
    15 KI0DWTOT KI0DWTOT ; 
    15 * char(146) ; 
  10 KI0DWYMD KI0DWYMD ; 
    15 KI0DWYDC KI0DWYDC ; 
    15 KI0DWYDY KI0DWYDY ; 
    15 KI0DWYDM KI0DWYDM ; 
    15 KI0DWYDD KI0DWYDD ; 
  10 KI0DWSQL KI0DWSQL ; 
  10 KI0DWMSG KI0DWMSG ; 
end // end KI0DW01

Record KI0DW02 type basicRecord
  10 KI0DWOPT KI0DWOPT ; 
end // end KI0DW02

//   company
DataItem KI0DWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0DWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user area
DataItem KI0DWERA char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc
DataItem KI0DWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1
DataItem KI0DWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem KI0DWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 3
DataItem KI0DWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stage area for camsg
DataItem KI0DWMSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new cust unit request
DataItem KI0DWNR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   option from ki0m
DataItem KI0DWOPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0DWOPT-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   store
DataItem KI0DWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0DWSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for sqlca/reset
DataItem KI0DWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company
DataItem KI0DWTCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept
DataItem KI0DWTNX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   order type
DataItem KI0DWTOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc
DataItem KI0DWTPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// terms record
DataItem KI0DWTRC char(158)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   store
DataItem KI0DWTST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat area for causera
DataItem KI0DWUSR char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   dept
DataItem KI0DWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0DWXNX-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work century
DataItem KI0DWYDC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work day
DataItem KI0DWYDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KI0DWYDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KI0DWYDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month/day
DataItem KI0DWYMD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

