package ki0i;

import corpcom2.XX0XW02;
import corpcom3.XPXNX01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XGPCD;
import corpx1.XNXTBL;
import corpx1.XSTTBL;
import corpx2.XNXCD;
import corpx2.XSTCD;
import corpx2.XXXZIP;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUJSLFID;
import ku.common.KUMCITYS;
import ku.common.KUMSLFID;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUMSTSNM;
import ta.common.TA1REC;
//*** PROGRAM=KI0I ****
// ----------------  ki0i - customer selection screen ---------
// 
// overview:  this application allows users to request company
//            id, store, xnx, gpc from different select options
// 
// date written: 07/91
// author:       Dianne Salzwedel
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
// * 07/11/91  DSALZW  created
// * 07/30/91  DSALZW  application was closing cursor multiple
// *                     times, and if test to second close
// *                   when coming for OP0C, don't build key
// *                     and when leaving build key
// * 11/04/91  DSALZW  added company name and fixed misc bugs
// * 02/04/92  DSALZW  added map 'device' for yellow color
// * 10/01/93  CHELLM  csp 4.1 Conversion.
// * 10/01/93  CHELLM  fix 0C7 error KI0IS110;
// * 10/04/93  BCOURT  Fix ASRA/AZI6 KI0IS110. Set blank=zero.
// * 10/11/93  CHELLM  fix 0C7 error KI0IS000;
// * 06/20/95  CHELLM  Changed zip code length to 6x when xfer
// *                   from/to OP0C.
// * 08/01/95  CHELLM  Space out dash when passing 6x US zip
// *                   from/to OP0C.
// * 08/29/96  KCLAR1  Add xso 71 and 74 for Canadian users
// *********************
Program KI0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KI0IW01 KI0IW01; // record
  KI0IW02 KI0IW02; // record
  KI0IW03 KI0IW03; // record
  KI0IW04 KI0IW04; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XNXTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use KI0IM.KI0IM100,  // forms
      KI0IM.KI0IM200,
      KI0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KI0I000: KI0I000();
    goto KI0I100; /* converse select screen*/
    ;
    KI0I100: KI0I100();
    ;
    goto KI0I100; /* converse select screen*/
    ;
  end // end main
end // end KI0I

// init select screen
Function KI0I000()
   /* *********************************************/
   /* KI0I000 - init of variables*/
   /* *********************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KI0IM100 initial; /* select screen*/
  set KI0IM200 initial; /* browse screen*/
  ;
  KI0IS-INIT-RECS(); /* initialize application records*/
  ;
  KI0IW01.KI0IWERR = "N"; /* error flag*/
  KI0IW01.KI0IWSIZ = 1204; /* size of temp storage*/
  KI0IW01.KI0IWMAX = 16; /* nbr of occurs + 1*/
  ;
  ;
   /* ****************************/
   /* check fast path entry*/
   /* ****************************/
  ;
  if (COMMAREA.CAFRMSYS == "KA"
   || COMMAREA.CAFRMSYS == "KM"
   || COMMAREA.CAFRMSYS == "KI"
   || COMMAREA.CAFRMSYS == "KG")
    KI0IW01.KI0IWUSR = COMMAREA.CAUSERA; /* key from add menu*/
    if (COMMAREA.CAITEM != " ")
      KI0IW01.KI0IWUSR = COMMAREA.CAITEM; /* key from fastpath*/
      ;
      if (KI0IW01.KI0IWCNO-CHAR is numeric)
        KI0IM100.KUCCOID = KI0IW01.KI0IWCNO;
      else
        KI0IM100.KUCCOID = 0;
      end
      if (KI0IW01.KI0IWSNO-CHAR is numeric)
        KI0IM100.KI0IMSTR = KI0IW01.KI0IWSNO;
      else
        KI0IM100.KI0IMSTR = " ";
      end
      if (KI0IW01.KI0IWDNO-CHAR is numeric)
        KI0IM100.KI0IMDPT = KI0IW01.KI0IWDNO;
      else
        KI0IM100.KI0IMDPT = " ";
      end
      KI0IM100.XGPCD = KI0IW01.KI0IWGNO;
      ;
    else
      ;
      if (KI0IW01.KI0IWCNO-CHAR is numeric)
        KI0IM100.KUCCOID = KI0IW01.KI0IWCNO;
      else
        KI0IM100.KUCCOID = 0;
      end
      if (KI0IW01.KI0IWSNO-CHAR is numeric)
        KI0IM100.KI0IMSTR = KI0IW01.KI0IWSNO;
      else
        KI0IM100.KI0IMSTR = " ";
      end
      if (KI0IW01.KI0IWDNO-CHAR is numeric)
        KI0IM100.KI0IMDPT = KI0IW01.KI0IWDNO;
      else
        KI0IM100.KI0IMDPT = " ";
      end
      KI0IM100.XGPCD = KI0IW01.KI0IWGNO;
      ;
    end
  end /* end test for customer system*/
  ;
  ;
end // end KI0I000

// converse selection screen
Function KI0I100()
   /* *******************************************/
   /* KI0I100 - converse selection screen*/
   /* *******************************************/
  ;
  ;
  KI0IM100.KI0IMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  ;
  ;
  converse KI0IM100 ;
  ;
  KI0IW01.KI0IWERR = "N";
  KI0IM100.VAGen_EZEMSG = " ";
  ;
  ;
  KI0I110(); /* edit pfkeys*/
  ;
  ;
  if (converseVar.eventKey is enter)
    KI0I150(); /* edit screen*/
  end
  ;
  ;
  if (KI0IW01.KI0IWERR == "N" /* no errors*/
   && converseVar.eventKey is enter)
     /* screen is valid, so continue to 2nd screen*/
    KI0I200();
  end
  ;
  ;
end // end KI0I100

// process pfkeys - scrn 1
Function KI0I110()
   /* ************************************************/
   /* KI0I110 - process pfkeys for select screen*/
   /* 10-4-93 BCourt  Allow for blank screen when leave screen*/
   /* by replacing blanks with zeroes.*/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    set KI0IM100 initial; /* refresh the screen*/
    KI0IW01.KI0IWERR = "Y"; /* set error flag to display screen*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to from application*/
    KI0IW01.KI0IWCNO = KI0IM100.KUCCOID;
    if (KI0IM100.KI0IMSTR is numeric) /* 10-11-93 allow blank or '  0'*/
      KI0IW01.KI0IWSNO = KI0IM100.KI0IMSTR;
    else
      KI0IW01.KI0IWSNO = 0;
    end
    if (KI0IM100.KI0IMDPT is numeric) /* 10-11-93 allow blank or '0 '*/
      KI0IW01.KI0IWDNO = KI0IM100.KI0IMDPT;
    else
      KI0IW01.KI0IWDNO = 0;
    end
    KI0IW01.KI0IWGNO = KI0IM100.XGPCD;
    COMMAREA.CAUSERA = KI0IW01.KI0IWUSR;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KI0I";
    XSEXIT();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KI0I";
    XSPF4();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help system*/
    XSPF1();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KI0IM100.CATOAP > " ") /* test for fast path*/
      COMMAREA.CATOAP = KI0IM100.CATOAP;
      if (KI0IM100.CAITEM == " ")
        KI0IW01.KI0IWCNO = KI0IM100.KUCCOID;
        if (KI0IM100.KI0IMSTR is numeric)
          KI0IW01.KI0IWSTR = KI0IM100.KI0IMSTR;
          KI0IW01.KI0IWSNO = KI0IW01.KI0IWNST;
        else
          KI0IW01.KI0IWSNO = 0;
        end
        if (KI0IM100.KI0IMDPT is numeric)
          KI0IW01.KI0IWDNO = KI0IM100.KI0IMDPT;
        else
          KI0IW01.KI0IWDNO = 0;
        end
        KI0IW01.KI0IWGNO = KI0IM100.XGPCD;
        COMMAREA.CAUSERA = KI0IW01.KI0IWUSR;
        COMMAREA.CAITEM = " ";
      else
        COMMAREA.CAITEM = KI0IM100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KI0I";
      XSEXIT();
      KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KI0IW01.KI0IWERR = "Y";
      set KI0IM100.CATOAP cursor, bold;
    else /* edit screen*/
      return;
    end
  end
  ;
   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/
  ;
  if (KI0IM100.CATOAP > " ")
    KI0IW01.KI0IWERR = "Y";
    converseLib.validationFailed(90); /* "fast path / pf keys" msg*/
    set KI0IM100.CATOAP cursor, bold;
    return;
  else
    set KI0IM100.CATOAP modified;
  end
  ;
  ;
   /* **************************************/
   /* edit invalid key*/
   /* **************************************/
  ;
  if (KI0IW01.KI0IWERR == "N")
    converseLib.validationFailed(003); /* invalid pf key message*/
    KI0IW01.KI0IWERR = "Y";
  end
  ;
  ;
end // end KI0I110

// edit selection screen
Function KI0I150()
   /* *********************************/
   /* KI0I150 - edit section screen*/
   /* *********************************/
  ;
  KI0IW01.KI0IWIND = " "; /* set option ind to blank*/
  ;
   /* ******* edit for screen changes*/
   /* ***option 1*/
  set KI0IM100.KUCCOID initialAttributes;
  set KI0IM100.KI0IMSTR initialAttributes;
  set KI0IM100.KI0IMDPT initialAttributes;
  set KI0IM100.XGPCD initialAttributes;
  set KI0IM100.KUJSLFID[1] initialAttributes;
  set KI0IM100.KUMSLFID[1] initialAttributes;
   /* ***option 2*/
  set KI0IM100.CU-CO-SHORT-NM initialAttributes;
  set KI0IM100.KUMCITYS[1] initialAttributes;
  set KI0IM100.XSTCD[1] initialAttributes;
  set KI0IM100.XXXZIP[1] initialAttributes;
   /* ***option 3*/
  set KI0IM100.KUMSTSNM initialAttributes;
  set KI0IM100.KUMCITYS[2] initialAttributes;
  set KI0IM100.XSTCD[2] initialAttributes;
  set KI0IM100.XXXZIP[2] initialAttributes;
  set KI0IM100.KUJSLFID[2] initialAttributes;
  set KI0IM100.KUMSLFID[2] initialAttributes;
   /* ***option 4*/
  set KI0IM100.KUMCITYS[3] initialAttributes;
  set KI0IM100.XSTCD[3] initialAttributes;
  set KI0IM100.XXXZIP[3] initialAttributes;
   /* status of accounts*/
  set KI0IM100.XXXSTAT initialAttributes;
  ;
  ;
   /* ************ edit selection options ****************/
  ;
  if (KI0IM100.KUCCOID > 0)
     /* option 1 was selected*/
    if (KI0IM100.KUJSLFID[1] == " "
     && KI0IM100.KUMSLFID[1] == " ")
      if (KI0IM100.CU-CO-SHORT-NM == " "
       && KI0IM100.KUMCITYS[1] == " "
       && KI0IM100.XSTCD[1] == " "
       && KI0IM100.XXXZIP[1] == " "
       && KI0IM100.KUMSTSNM == " "
       && KI0IM100.KUMCITYS[2] == " "
       && KI0IM100.XSTCD[2] == " "
       && KI0IM100.XXXZIP[2] == " "
       && KI0IM100.KUMCITYS[3] == " "
       && KI0IM100.XSTCD[3] == " "
       && KI0IM100.XXXZIP[3] == " ")
         /* all other fields are blank*/
         /* ok no errors*/
        KI0IW01.KI0IWIND = "S4";
        set KI0IM100.KUCCOID cursor;
      else
        if (KI0IM100.XXXZIP[3] != " ")
          set KI0IM100.XXXZIP[3] cursor, bold;
        end
        if (KI0IM100.XSTCD[3] != " ")
          set KI0IM100.XSTCD[3] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[3] != " ")
          set KI0IM100.KUMCITYS[3] cursor, bold;
        end
        if (KI0IM100.XXXZIP[2] != " ")
          set KI0IM100.XXXZIP[2] cursor, bold;
        end
        if (KI0IM100.XSTCD[2] != " ")
          set KI0IM100.XSTCD[2] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[2] != " ")
          set KI0IM100.KUMCITYS[2] cursor, bold;
        end
        if (KI0IM100.KUMSTSNM != " ")
          set KI0IM100.KUMSTSNM cursor, bold;
        end
        if (KI0IM100.XXXZIP[1] != " ")
          set KI0IM100.XXXZIP[1] cursor, bold;
        end
        if (KI0IM100.XSTCD[1] != " ")
          set KI0IM100.XSTCD[1] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[1] != " ")
          set KI0IM100.KUMCITYS[1] cursor, bold;
        end
        if (KI0IM100.CU-CO-SHORT-NM != " ")
          set KI0IM100.CU-CO-SHORT-NM cursor, bold;
        end
        KI0IW01.KI0IWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(11); /* choose only one*/
        return;
      end
    else /* try option 1.5 (self ids)*/
      if (KI0IM100.KI0IMSTR == " "
       && KI0IM100.KI0IMDPT == " "
       && KI0IM100.XGPCD == " "
       && KI0IM100.CU-CO-SHORT-NM == " "
       && KI0IM100.KUMCITYS[1] == " "
       && KI0IM100.XSTCD[1] == " "
       && KI0IM100.XXXZIP[1] == " "
       && KI0IM100.KUMSTSNM == " "
       && KI0IM100.KUMCITYS[2] == " "
       && KI0IM100.XSTCD[2] == " "
       && KI0IM100.XXXZIP[2] == " "
       && KI0IM100.KUMCITYS[3] == " "
       && KI0IM100.XSTCD[3] == " "
       && KI0IM100.XXXZIP[3] == " ")
         /* all other fields are blank*/
         /* ok no errors*/
        KI0IW01.KI0IWIND = "S3";
        set KI0IM100.KUCCOID cursor;
      else
        if (KI0IM100.XXXZIP[3] != " ")
          set KI0IM100.XXXZIP[3] cursor, bold;
        end
        if (KI0IM100.XSTCD[3] != " ")
          set KI0IM100.XSTCD[3] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[3] != " ")
          set KI0IM100.KUMCITYS[3] cursor, bold;
        end
        if (KI0IM100.XXXZIP[2] != " ")
          set KI0IM100.XXXZIP[2] cursor, bold;
        end
        if (KI0IM100.XSTCD[2] != " ")
          set KI0IM100.XSTCD[2] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[2] != " ")
          set KI0IM100.KUMCITYS[2] cursor, bold;
        end
        if (KI0IM100.KUMSTSNM != " ")
          set KI0IM100.KUMSTSNM cursor, bold;
        end
        if (KI0IM100.XXXZIP[1] != " ")
          set KI0IM100.XXXZIP[1] cursor, bold;
        end
        if (KI0IM100.XSTCD[1] != " ")
          set KI0IM100.XSTCD[1] cursor, bold;
        end
        if (KI0IM100.KUMCITYS[1] != " ")
          set KI0IM100.KUMCITYS[1] cursor, bold;
        end
        if (KI0IM100.CU-CO-SHORT-NM != " ")
          set KI0IM100.CU-CO-SHORT-NM cursor, bold;
        end
        if (KI0IM100.XGPCD != " ")
          set KI0IM100.XGPCD cursor, bold;
        end
        if (KI0IM100.KI0IMDPT != " ")
          set KI0IM100.KI0IMDPT cursor, bold;
        end
        if (KI0IM100.KI0IMSTR != " ")
          set KI0IM100.KI0IMSTR cursor, bold;
        end
        KI0IW01.KI0IWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(11); /* choose only one*/
        return;
      end
    end
  end
  ;
  ;
  if (KI0IM100.CU-CO-SHORT-NM > " ")
     /* option 2 was selected*/
    if (KI0IM100.KUMCITYS[1] != " ")
      if (KI0IM100.XSTCD[1] != " ")
        if (KI0IM100.XSTCD[1] in XSTTBL.XSTCD)
          if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                  /* next sentence*/
          else
            converseLib.validationFailed(71);
            KI0IW01.KI0IWERR = "Y"; /* set error flag*/
            set KI0IM100.XSTCD[1] cursor, modified, bold;
            return;
          end
        else
          converseLib.validationFailed(17);
          KI0IW01.KI0IWERR = "Y"; /* set error flag*/
          set KI0IM100.XSTCD[1] cursor, modified, bold;
          return;
        end
      else
        set KI0IM100.XSTCD[1] cursor, bold;
        converseLib.validationFailed(5); /* required field*/
        KI0IW01.KI0IWERR = "Y"; /* set error flag*/
        return;
      end
    end
    if (KI0IM100.KUCCOID == 0
     && KI0IM100.KI0IMSTR == " "
     && KI0IM100.KI0IMDPT == " "
     && KI0IM100.XGPCD == " "
     && KI0IM100.KUJSLFID[1] == " "
     && KI0IM100.KUMSLFID[1] == " "
     && KI0IM100.KUMSTSNM == " "
     && KI0IM100.KUMCITYS[2] == " "
     && KI0IM100.XSTCD[2] == " "
     && KI0IM100.XXXZIP[2] == " "
     && KI0IM100.KUMCITYS[3] == " "
     && KI0IM100.XSTCD[3] == " "
     && KI0IM100.XXXZIP[3] == " ")
       /* all other fields are blank*/
       /* ok no errors*/
      KI0IW01.KI0IWIND = "S5";
      set KI0IM100.CU-CO-SHORT-NM cursor;
    else
      if (KI0IM100.XXXZIP[3] != " ")
        set KI0IM100.XXXZIP[3] cursor, bold;
      end
      if (KI0IM100.XSTCD[3] != " ")
        set KI0IM100.XSTCD[3] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[3] != " ")
        set KI0IM100.KUMCITYS[3] cursor, bold;
      end
      if (KI0IM100.XXXZIP[2] != " ")
        set KI0IM100.XXXZIP[2] cursor, bold;
      end
      if (KI0IM100.XSTCD[2] != " ")
        set KI0IM100.XSTCD[2] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[2] != " ")
        set KI0IM100.KUMCITYS[2] cursor, bold;
      end
      if (KI0IM100.KUMSTSNM != " ")
        set KI0IM100.KUMSTSNM cursor, bold;
      end
      if (KI0IM100.KUMSLFID[1] != " ")
        set KI0IM100.KUMSLFID[1] cursor, bold;
      end
      if (KI0IM100.KUJSLFID[1] != " ")
        set KI0IM100.KUJSLFID[1] cursor, bold;
      end
      if (KI0IM100.XGPCD != " ")
        set KI0IM100.XGPCD cursor, bold;
      end
      if (KI0IM100.KI0IMDPT != " ")
        set KI0IM100.KI0IMDPT cursor, bold;
      end
      if (KI0IM100.KI0IMSTR != " ")
        set KI0IM100.KI0IMSTR cursor, bold;
      end
      if (KI0IM100.KUCCOID != 0)
        set KI0IM100.KUCCOID cursor, bold;
      end
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(11); /* choose only one*/
      return;
    end
  end
  ;
  ;
  if (KI0IM100.KUMSTSNM > " ")
     /* option 3 was selected*/
    if (KI0IM100.KUMCITYS[2] != " ")
      if (KI0IM100.XSTCD[2] != " ")
        if (KI0IM100.XSTCD[2] in XSTTBL.XSTCD)
          if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                  /* next sentence*/
          else
            converseLib.validationFailed(71);
            KI0IW01.KI0IWERR = "Y"; /* set error flag*/
            set KI0IM100.XSTCD[2] cursor, modified, bold;
            return;
          end
        else
          converseLib.validationFailed(17);
          KI0IW01.KI0IWERR = "Y"; /* set error flag*/
          set KI0IM100.XSTCD[2] cursor, modified, bold;
          return;
        end
      else
        set KI0IM100.XSTCD[2] cursor, bold;
        converseLib.validationFailed(5); /* required field*/
        KI0IW01.KI0IWERR = "Y"; /* set error flag*/
        return;
      end
    end
    if (KI0IM100.KUCCOID == 0
     && KI0IM100.KI0IMSTR == " "
     && KI0IM100.KI0IMDPT == " "
     && KI0IM100.XGPCD == " "
     && KI0IM100.KUJSLFID[1] == " "
     && KI0IM100.KUMSLFID[1] == " "
     && KI0IM100.CU-CO-SHORT-NM == " "
     && KI0IM100.KUMCITYS[1] == " "
     && KI0IM100.XSTCD[1] == " "
     && KI0IM100.XXXZIP[1] == " "
     && KI0IM100.KUMCITYS[3] == " "
     && KI0IM100.XSTCD[3] == " "
     && KI0IM100.XXXZIP[3] == " ")
       /* all other fields are blank*/
       /* ok no errors*/
      KI0IW01.KI0IWIND = "S1";
      set KI0IM100.KUMSTSNM cursor;
    else
      if (KI0IM100.XXXZIP[3] != " ")
        set KI0IM100.XXXZIP[3] cursor, bold;
      end
      if (KI0IM100.XSTCD[3] != " ")
        set KI0IM100.XSTCD[3] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[3] != " ")
        set KI0IM100.KUMCITYS[3] cursor, bold;
      end
      if (KI0IM100.XXXZIP[1] != " ")
        set KI0IM100.XXXZIP[1] cursor, bold;
      end
      if (KI0IM100.XSTCD[1] != " ")
        set KI0IM100.XSTCD[1] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[1] != " ")
        set KI0IM100.KUMCITYS[1] cursor, bold;
      end
      if (KI0IM100.CU-CO-SHORT-NM != " ")
        set KI0IM100.CU-CO-SHORT-NM cursor, bold;
      end
      if (KI0IM100.KUMSLFID[1] != " ")
        set KI0IM100.KUMSLFID[1] cursor, bold;
      end
      if (KI0IM100.KUJSLFID[1] != " ")
        set KI0IM100.KUJSLFID[1] cursor, bold;
      end
      if (KI0IM100.XGPCD != " ")
        set KI0IM100.XGPCD cursor, bold;
      end
      if (KI0IM100.KI0IMDPT != " ")
        set KI0IM100.KI0IMDPT cursor, bold;
      end
      if (KI0IM100.KI0IMSTR != " ")
        set KI0IM100.KI0IMSTR cursor, bold;
      end
      if (KI0IM100.KUCCOID != 0)
        set KI0IM100.KUCCOID cursor, bold;
      end
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(11); /* choose only one*/
      return;
    end
  end
  ;
  ;
  if (KI0IM100.KUMCITYS[3] > " ")
     /* option 4 was selected*/
    if (KI0IM100.XSTCD[3] != " ")
      if (KI0IM100.XSTCD[3] in XSTTBL.XSTCD)
        if (XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                  /* next sentence*/
        else
          converseLib.validationFailed(71);
          KI0IW01.KI0IWERR = "Y"; /* set error flag*/
          set KI0IM100.XSTCD[3] cursor, modified, bold;
          return;
        end
      else
        converseLib.validationFailed(17);
        KI0IW01.KI0IWERR = "Y"; /* set error flag*/
        set KI0IM100.XSTCD[3] cursor, modified, bold;
        return;
      end
    else
      set KI0IM100.XSTCD[3] cursor, bold;
      converseLib.validationFailed(5); /* required field*/
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      return;
    end
    if (KI0IM100.KUCCOID == 0
     && KI0IM100.KI0IMSTR == " "
     && KI0IM100.KI0IMDPT == " "
     && KI0IM100.XGPCD == " "
     && KI0IM100.KUJSLFID[1] == " "
     && KI0IM100.KUMSLFID[1] == " "
     && KI0IM100.CU-CO-SHORT-NM == " "
     && KI0IM100.KUMCITYS[1] == " "
     && KI0IM100.XSTCD[1] == " "
     && KI0IM100.XXXZIP[1] == " "
     && KI0IM100.KUMSTSNM == " "
     && KI0IM100.KUMCITYS[2] == " "
     && KI0IM100.XSTCD[2] == " "
     && KI0IM100.XXXZIP[2] == " ")
       /* all other fields are blank*/
       /* ok no errors*/
      KI0IW01.KI0IWIND = "S2";
      set KI0IM100.KUMCITYS[3] cursor;
    else
      if (KI0IM100.XXXZIP[2] != " ")
        set KI0IM100.XXXZIP[2] cursor, bold;
      end
      if (KI0IM100.XSTCD[2] != " ")
        set KI0IM100.XSTCD[2] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[2] != " ")
        set KI0IM100.KUMCITYS[2] cursor, bold;
      end
      if (KI0IM100.KUMSTSNM != " ")
        set KI0IM100.KUMSTSNM cursor, bold;
      end
      if (KI0IM100.XXXZIP[1] != " ")
        set KI0IM100.XXXZIP[1] cursor, bold;
      end
      if (KI0IM100.XSTCD[1] != " ")
        set KI0IM100.XSTCD[1] cursor, bold;
      end
      if (KI0IM100.KUMCITYS[1] != " ")
        set KI0IM100.KUMCITYS[1] cursor, bold;
      end
      if (KI0IM100.CU-CO-SHORT-NM != " ")
        set KI0IM100.CU-CO-SHORT-NM cursor, bold;
      end
      if (KI0IM100.KUMSLFID[1] != " ")
        set KI0IM100.KUMSLFID[1] cursor, bold;
      end
      if (KI0IM100.KUJSLFID[1] != " ")
        set KI0IM100.KUJSLFID[1] cursor, bold;
      end
      if (KI0IM100.XGPCD != " ")
        set KI0IM100.XGPCD cursor, bold;
      end
      if (KI0IM100.KI0IMDPT != " ")
        set KI0IM100.KI0IMDPT cursor, bold;
      end
      if (KI0IM100.KI0IMSTR != " ")
        set KI0IM100.KI0IMSTR cursor, bold;
      end
      if (KI0IM100.KUCCOID != 0)
        set KI0IM100.KUCCOID cursor, bold;
      end
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(11); /* choose only one*/
      return;
    end
  end
  ;
  ;
   /* edit status indicator*/
  if (KI0IM100.XXXSTAT == "A"
   || KI0IM100.XXXSTAT == "I")
     /* status is valid*/
     /* next sentence*/
  else
    if (KI0IM100.XXXSTAT == " ")
      KI0IM100.XXXSTAT = "A"; /* set status to active*/
    else
      set KI0IM100.XXXSTAT cursor, bold;
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid field*/
      return;
    end
  end
  ;
  ;
   /* edit for no option selected*/
  if (KI0IW01.KI0IWIND == " ")
   /* *** test to see if no option selected*/
    if (KI0IM100.KUCCOID == 0
     && KI0IM100.KI0IMSTR == " "
     && KI0IM100.KI0IMDPT == " "
     && KI0IM100.XGPCD == " "
     && KI0IM100.KUJSLFID[1] == " "
     && KI0IM100.KUMSLFID[1] == " "
     && KI0IM100.CU-CO-SHORT-NM == " "
     && KI0IM100.KUMCITYS[1] == " "
     && KI0IM100.XSTCD[1] == " "
     && KI0IM100.XXXZIP[1] == " "
     && KI0IM100.KUMSTSNM == " "
     && KI0IM100.KUMCITYS[2] == " "
     && KI0IM100.XSTCD[2] == " "
     && KI0IM100.XXXZIP[2] == " "
     && KI0IM100.KUJSLFID[2] == " "
     && KI0IM100.KUMSLFID[2] == " "
     && KI0IM100.KUMCITYS[3] == " "
     && KI0IM100.XSTCD[3] == " "
     && KI0IM100.XXXZIP[3] == " ")
      ;
      set KI0IM100.KUCCOID cursor, bold;
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(40); /* no option selected*/
    else /* required information not complete*/
      ;
      KI0IW01.KI0IWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(417); /* info not complete*/
    end
  end
  ;
  ;
end // end KI0I150

// start process for info screen
Function KI0I200()
   /* *********************************************************/
   /* KI0I200 - build temp storage*/
   /* *********************************************************/
  ;
   /* *****  load browse data*/
  KI0I210(); /* load all data*/
  ;
  if (KI0IW01.KI0IWERR == "Y") /* error loading data*/
    return;
  end
  ;
  KI0IW01.KI0IWDIX = 1;
  KI0I250(); /* build first screen*/
  ;
  ;
  KI0IW01.KI0IWDON = "N"; /* done flag*/
  while (KI0IW01.KI0IWDON == "N")
    KI0I300(); /* converse screen 2*/
  end
  ;
  ;
end // end KI0I200

// build temp storage
Function KI0I210()
   /* **************************************************/
   /* KI0I210 - laod all data from input selection*/
   /* **************************************************/
  ;
  KI0I215(); /* purge temp work file*/
  if (KI0IW01.KI0IWERR == "Y") /* error in purge*/
    return;
  end
  ;
  ;
  set SQLCA empty;
  set KI0IW02 empty;
  ;
  ;
  KI0I220(); /* read database*/
  ;
  KI0IW01.KI0IWEND = "N"; /* set end flag to 'n'*/
  ;
               /* ; loop/save data by the screenfull*/
  KI0IW01.KI0IWDIX = 0;
  ;
  while (KI0IW01.KI0IWEND == "N") /* not end of data*/
    set KI0IW04 empty;
    KI0IW01.KI0IWCNT = 1;
    while (KI0IW01.KI0IWCNT < KI0IW01.KI0IWMAX /* nbr of occurs*/
     && KI0IW01.KI0IWEND == "N") /* not end of data*/
      KI0I225(); /* select next*/
    end /* of while*/
    ;
    if (KI0IW01.KI0IWCNT > 1) /* you have records*/
      KI0I240(); /* write data to temp storage*/
    end
    ;
    if (KI0IW01.KI0IWDIX > 20 /* only read 300 records*/
     && KI0IW01.KI0IWEND == "N") /* and not at end yet*/
      KI0IW01.KI0IWEND = "Y"; /* set end of data*/
      converseLib.validationFailed(410); /* message more than 300*/
      KI0I235(); /* close cursor*/
    end
    ;
  end /* of while loop*/
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  KI0IW01.KI0IWPGT = KI0IW01.KI0IWDIX; /* total pg remains constant*/
  KI0IM200.KI0IMPG2 = KI0IW01.KI0IWDIX; /* total nbr of pages*/
  ;
  ;
  if (KI0IW01.KI0IWDIX == 0) /* if no data*/
    converseLib.validationFailed(205);
    KI0IW01.KI0IWERR = "Y";
  end
  ;
  ;
end // end KI0I210

// purge temp storage
Function KI0I215()
   /* ***************************************/
   /* KI0I215 - purge temp storage*/
   /* ***************************************/
  ;
  KI0IW03.KI0IW3CT = 0;
  KI0IW03.KI0IW3AP = "KW04";
  KI0IW03.KI0IW3RC = 0;
  KI0IW03.KI0IW3FC = "P"; /* purge temp work file*/
  ;
  set KI0IW04 empty;
  KI0IW04.KI0IW4LG = KI0IW01.KI0IWSIZ;
  ;
  call "TA0050" (KI0IW04, KI0IW03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KI0IW03.KI0IW3RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KI0IW01.KI0IWERR = "Y";
    converseLib.validationFailed(228);
  end
  ;
  ;
end // end KI0I215

// select browse data
Function KI0I220()
   /* **************************************************/
   /* KI0I220 - select data*/
   /* **************************************************/
  ;
  ;
  if (KI0IW01.KI0IWIND == "S1")
      /* look up by store name*/
    ;
      /* normalize store name*/
    KI0IW01.KI0IW1DX = 1;
    KI0IW01.KI0IW1NX = 1;
    KI0IW01.KI0IW1ND = " "; /* blank out new name*/
    KI0IW01.KI0IW1DD = KI0IM100.KUMSTSNM;
    while (KI0IW01.KI0IW1DX <= 10)
      KI0I223();
      KI0IW02.KUMSTSNM = KI0IW01.KI0IW1ND;
      KI0IM100.KUMSTSNM = KI0IW01.KI0IW1ND;
    end /* while*/
    ;
      /* normalize city*/
    KI0IW01.KI0IW1DX = 1;
    KI0IW01.KI0IW1NX = 1;
    KI0IW01.KI0IW1ND = " "; /* blank out new name*/
    KI0IW01.KI0IW1DD = KI0IM100.KUMCITYS[2];
    while (KI0IW01.KI0IW1DX <= 10)
      KI0I223();
      KI0IW02.KUMCITYS = KI0IW01.KI0IW1ND;
      KI0IM100.KUMCITYS[2] = KI0IW01.KI0IW1ND;
    end /* while*/
    ;
    KI0IW02.XSTCD = KI0IM100.XSTCD[2];
    KI0IW02.XXXZIP = KI0IM100.XXXZIP[2];
    KI0IW02.KUJSLFID = KI0IM100.KUJSLFID[2];
    KI0IW02.KUMSLFID = KI0IM100.KUMSLFID[2];
    KI0IW02.XXXSTAT = KI0IM100.XXXSTAT;
    call "IO0540" ("S1", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  if (KI0IW01.KI0IWIND == "S2")
      /* look up by city state*/
    ;
      /* normalize city*/
    KI0IW01.KI0IW1DX = 1;
    KI0IW01.KI0IW1NX = 1;
    KI0IW01.KI0IW1ND = " "; /* blank out new name*/
    KI0IW01.KI0IW1DD = KI0IM100.KUMCITYS[3];
    while (KI0IW01.KI0IW1DX <= 10)
      KI0I223();
      KI0IW02.KUMCITYS = KI0IW01.KI0IW1ND;
      KI0IM100.KUMCITYS[3] = KI0IW01.KI0IW1ND;
    end /* while*/
    ;
    KI0IW02.XSTCD = KI0IM100.XSTCD[3];
    KI0IW02.XXXZIP = KI0IM100.XXXZIP[3];
    KI0IW02.XXXSTAT = KI0IM100.XXXSTAT;
    call "IO0540" ("S2", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  if (KI0IW01.KI0IWIND == "S3")
      /* look up by customer id*/
    KI0IW02.KUCCOID = KI0IM100.KUCCOID;
    KI0IW02.KUJSLFID = KI0IM100.KUJSLFID;
    KI0IW02.KUMSLFID = KI0IM100.KUMSLFID;
    KI0IW02.XXXSTAT = KI0IM100.XXXSTAT;
    call "IO0540" ("S3", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  if (KI0IW01.KI0IWIND == "S4")
      /* look up by customer id*/
    KI0IW02.KUCCOID = KI0IM100.KUCCOID;
    if (KI0IM100.KI0IMSTR == " ")
      KI0IW02.KUMSTRID = -1;
    else
      KI0IW01.KI0IWSTR = KI0IM100.KI0IMSTR;
      KI0IW02.KUMSTRID = KI0IW01.KI0IWNST;
    end
    if (KI0IM100.KI0IMDPT == " ")
      KI0IW02.XNXCD = -1;
    else
      KI0IW01.KI0IWDPT = KI0IM100.KI0IMDPT;
      KI0IW01.KI0IWZER = "00";
      KI0IW02.XNXCD = KI0IW01.KI0IWNDP;
    end
    if (KI0IM100.XGPCD == " ")
      KI0IW02.XGPCD = "**";
    else
      KI0IW02.XGPCD = KI0IM100.XGPCD;
    end
    KI0IW02.XXXSTAT = KI0IM100.XXXSTAT;
    call "IO0540" ("S4", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  if (KI0IW01.KI0IWIND == "S5")
      /* look up by company name*/
    ;
      /* normalize company name*/
    KI0IW01.KI0IW1DX = 1;
    KI0IW01.KI0IW1NX = 1;
    KI0IW01.KI0IW1ND = " "; /* blank out new name*/
    KI0IW01.KI0IW1DD = KI0IM100.CU-CO-SHORT-NM;
    while (KI0IW01.KI0IW1DX <= 10)
      KI0I223();
      KI0IW02.CU-CO-SHORT-NM = KI0IW01.KI0IW1ND;
      KI0IM100.CU-CO-SHORT-NM = KI0IW01.KI0IW1ND;
    end /* while*/
    ;
      /* normalize city*/
    KI0IW01.KI0IW1DX = 1;
    KI0IW01.KI0IW1NX = 1;
    KI0IW01.KI0IW1ND = " "; /* blank out new name*/
    KI0IW01.KI0IW1DD = KI0IM100.KUMCITYS[1];
    while (KI0IW01.KI0IW1DX <= 10)
      KI0I223();
      KI0IW02.KUMCITYS = KI0IW01.KI0IW1ND;
      KI0IM100.KUMCITYS[1] = KI0IW01.KI0IW1ND;
    end /* while*/
    ;
    KI0IW02.XSTCD = KI0IM100.XSTCD[1];
    KI0IW02.XXXZIP = KI0IM100.XXXZIP[1];
    KI0IW02.XXXSTAT = KI0IM100.XXXSTAT;
    call "IO0540" ("S5", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST002";
    TA1REC.TA1MAP = " ";
    KI0IW01.KI0IWCNO = KI0IW02.KUCCOID;
    KI0IW01.KI0IWSNO = KI0IW02.KUMSTRID;
    KI0IW01.KI0IWDNO = KI0IW02.XNXCD;
    KI0IW01.KI0IWGNO = KI0IW02.XGPCD;
    TA1REC.TA1TBLKE = KI0IW01.KI0IWUSR;
    TA1REC.TA1PGMNM = "KI0I220";
    TA1REC.TA1LOC = "SCAN    DB2 CUST002";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
end // end KI0I220

// select browse data
Function KI0I223()
   /* **************************************************/
   /* KI0I223 - normalize short names*/
   /* **************************************************/
  ;
  if (KI0IW01.KI0IW1DA[KI0IW1DX] >= "A"
   && KI0IW01.KI0IW1DA[KI0IW1DX] <= "Z")
    KI0IW01.KI0IW1NA[KI0IW1NX] = KI0IW01.KI0IW1DA[KI0IW1DX];
    KI0IW01.KI0IW1DX = KI0IW01.KI0IW1DX + 1;
    KI0IW01.KI0IW1NX = KI0IW01.KI0IW1NX + 1;
  else
    if (KI0IW01.KI0IW1DA[KI0IW1DX] >= "0"
     && KI0IW01.KI0IW1DA[KI0IW1DX] <= "9")
      KI0IW01.KI0IW1NA[KI0IW1NX] = KI0IW01.KI0IW1DA[KI0IW1DX];
      KI0IW01.KI0IW1DX = KI0IW01.KI0IW1DX + 1;
      KI0IW01.KI0IW1NX = KI0IW01.KI0IW1NX + 1;
    else
      KI0IW01.KI0IW1DX = KI0IW01.KI0IW1DX + 1;
    end
  end
  ;
  ;
end // end KI0I223

// select next browse data
Function KI0I225()
   /* *******************************************/
   /* KI0I225 - select next row of data*/
   /* *******************************************/
  ;
  if (KI0IW01.KI0IWIND == "S1")
    call "IO0540" ("N1", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S2")
    call "IO0540" ("N2", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S3")
    call "IO0540" ("N3", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S4")
    call "IO0540" ("N4", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S5")
    call "IO0540" ("N5", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KUCREC.KUCCOID = KI0IW02.KUCCOID;
    KI0IS-GET-CO(); /* get VCMPNY01 record*/
    ;
    if (COMMAREA.XSOCD == "41" 
     || COMMAREA.XSOCD == "42" 
     || COMMAREA.XSOCD == "43" /* If Nike Canada User*/
     || COMMAREA.XSOCD == "71" /* If Nike Canada skat2*/
     || COMMAREA.XSOCD == "74") /* If Nike Canada eyewear*/
      if (KUCREC.XLECD == "03") /* AND NIKE CANADA CUSTOMER*/
        KI0I230(); /* move data to temp storage*/
      end
    else
                               /* if not Nike Canada User*/
      if (KUCREC.XLECD != "03") /* and not Nike Canada Customer*/
        KI0I230(); /* move data to temp storage*/
      end
      ;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KI0IW01.KI0IWEND = "Y";
      KI0I235(); /* close cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KI0I225";
      TA1REC.TA1LOC = "FETCH NEXT VCUST002";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST002";
      KI0IW01.KI0IWCNO = KI0IW02.KUCCOID;
      KI0IW01.KI0IWSNO = KI0IW02.KUMSTRID;
      KI0IW01.KI0IWDNO = KI0IW02.XNXCD;
      KI0IW01.KI0IWGNO = KI0IW02.XGPCD;
      TA1REC.TA1TBLKE = KI0IW01.KI0IWUSR;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
end // end KI0I225

// move data values to temp
Function KI0I230()
   /* **********************************************/
   /* KI0I230 - move values to temp storage*/
   /* **********************************************/
  ;
  ;
  KI0IW04.KUCCOID[KI0IWCNT] = KI0IW02.KUCCOID;
  KI0IW04.KUMSTRID[KI0IWCNT] = KI0IW02.KUMSTRID;
  KI0IW04.XNXCD[KI0IWCNT] = KI0IW02.XNXCD;
  KI0IW04.XGPCD[KI0IWCNT] = KI0IW02.XGPCD;
  KI0IW04.KUMSTRNM[KI0IWCNT] = KI0IW02.KUMSTRNM;
  KI0IW04.KUJSLFID[KI0IWCNT] = KI0IW02.KUJSLFID;
  KI0IW04.KUMCITYS[KI0IWCNT] = KI0IW02.KUMCITYS;
  KI0IW04.XSTCD[KI0IWCNT] = KI0IW02.XSTCD;
  KI0IW04.XXXZIP[KI0IWCNT] = KI0IW02.XXXZIP;
  KI0IW04.KUMSLFID[KI0IWCNT] = KI0IW02.KUMSLFID;
  ;
  KI0IW01.KI0IWCNT = KI0IW01.KI0IWCNT + 1;
  ;
  ;
end // end KI0I230

// close browse cursor
Function KI0I235()
   /* *********************************/
   /* KI0I235 - close data*/
   /* *********************************/
  ;
  if (KI0IW01.KI0IWIND == "S1")
    call "IO0540" ("C1", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S2")
    call "IO0540" ("C2", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S3")
    call "IO0540" ("C3", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S4")
    call "IO0540" ("C4", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* read cust002*/
  end
  if (KI0IW01.KI0IWIND == "S5")
    call "IO0540" ("C5", SQLCA, KI0IW02) {isNoRefresh = yes, isExternal = yes}; /* READ CUST002*/
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KI0I235";
    TA1REC.TA1LOC = "CLOSE CURSOR VCUST002";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST002";
    KI0IW01.KI0IWCNO = KI0IW02.KUCCOID;
    KI0IW01.KI0IWSNO = KI0IW02.KUMSTRID;
    KI0IW01.KI0IWDNO = KI0IW02.XNXCD;
    KI0IW01.KI0IWGNO = KI0IW02.XGPCD;
    TA1REC.TA1TBLKE = KI0IW01.KI0IWUSR;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
end // end KI0I235

// write info to temp storage
Function KI0I240()
   /* ************************************************/
   /* KI0I240 - write info to temporary storage*/
   /* ************************************************/
  ;
  set KI0IW03 empty;
  KI0IW03.KI0IW3RC = 0; /* return code*/
  KI0IW03.KI0IW3FC = "A";
  KI0IW03.KI0IW3AP = "KW04";
  KI0IW01.KI0IWDIX = KI0IW01.KI0IWDIX + 1;
  KI0IW03.KI0IW3CT = KI0IW01.KI0IWDIX;
  KI0IW04.KI0IW4LG = KI0IW01.KI0IWSIZ;
  ;
  call "TA0050" (KI0IW04, KI0IW03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KI0IW03.KI0IW3RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KI0IW01.KI0IWEND = "Y";
    KI0IW01.KI0IWERR = "Y";
    converseLib.validationFailed(228);
  end
  ;
  ;
end // end KI0I240

// move temp storage to screen
Function KI0I250()
   /* ******************************************/
   /* KI0I250 - move temp storage to screen*/
   /* ******************************************/
  ;
  KI0IW01.KI0IWCNT = 1; /* counter for screen*/
  ;
  KI0IW01.KI0IWPGC = KI0IW01.KI0IWDIX;
  KI0IM200.KI0IMPG1 = KI0IW01.KI0IWPGC;
  ;
  KI0I260(); /* read store temp storage*/
  ;
  while (KI0IW01.KI0IWCNT < KI0IW01.KI0IWMAX)
    if (KI0IW04.KUCCOID[KI0IWCNT] == 0)
      set KI0IM200.KI0IMSLT[KI0IWCNT] skip, invisible;
      set KI0IM200.KUMSTRID[KI0IWCNT] skip, invisible;
      set KI0IM200.XNXCD[KI0IWCNT] skip, invisible;
      KI0IM200.KI0IMSLT[KI0IWCNT] = " ";
      KI0IM200.KUCCOID[KI0IWCNT] = " ";
      KI0IM200.KUMSTRID[KI0IWCNT] = " ";
      KI0IM200.XNXCD[KI0IWCNT] = " ";
      KI0IM200.XGPCD[KI0IWCNT] = " ";
      KI0IM200.KUMSTRNM[KI0IWCNT] = " ";
      KI0IM200.KUJSLFID[KI0IWCNT] = " ";
      KI0IM200.KUMCITYS[KI0IWCNT] = " ";
      KI0IM200.XSTCD[KI0IWCNT] = " ";
      KI0IM200.XXXZIP[KI0IWCNT] = " ";
      KI0IM200.KUMSLFID[KI0IWCNT] = " ";
      ;
      if (converseVar.validationMsgNum == 0) /* no previous message*/
        converseLib.validationFailed(206); /* "end of data" msg*/
      end
    else
      set KI0IM200.KI0IMSLT[KI0IWCNT] initialAttributes;
      set KI0IM200.KUMSTRID[KI0IWCNT] initialAttributes;
      set KI0IM200.XNXCD[KI0IWCNT] initialAttributes;
      KI0IM200.KI0IMSLT[KI0IWCNT] = " ";
      KI0IM200.KUCCOID[KI0IWCNT] = KI0IW04.KUCCOID[KI0IWCNT];
      KI0IM200.KUMSTRID[KI0IWCNT] = KI0IW04.KUMSTRID[KI0IWCNT];
      KI0IM200.XNXCD[KI0IWCNT] = KI0IW04.XNXCD[KI0IWCNT];
      KI0IM200.XGPCD[KI0IWCNT] = KI0IW04.XGPCD[KI0IWCNT];
      KI0IM200.KUMSTRNM[KI0IWCNT] = KI0IW04.KUMSTRNM[KI0IWCNT];
      KI0IM200.KUJSLFID[KI0IWCNT] = KI0IW04.KUJSLFID[KI0IWCNT];
      KI0IM200.KUMCITYS[KI0IWCNT] = KI0IW04.KUMCITYS[KI0IWCNT];
      KI0IM200.XSTCD[KI0IWCNT] = KI0IW04.XSTCD[KI0IWCNT];
      KI0IW01.KI0IWZID = KI0IW04.XXXZIP[KI0IWCNT];
      if (KI0IW01.KI0IW-1CHAR-ZIP == "-")
        KI0IW01.KI0IW-1CHAR-ZIP = " ";
      end
      KI0IM200.XXXZIP[KI0IWCNT] = KI0IW01.KI0IWZID;
      KI0IM200.KUMSLFID[KI0IWCNT] = KI0IW04.KUMSLFID[KI0IWCNT];
      ;
    end
    ;
    KI0IW01.KI0IWCNT = KI0IW01.KI0IWCNT + 1;
  end
  ;
  set KI0IM200.KI0IMSLT[1] cursor;
  ;
  ;
end // end KI0I250

// read temp storage
Function KI0I260()
   /* ************************************/
   /* KI0I260 - read temp stoarge*/
   /* ************************************/
  ;
  KI0IW03.KI0IW3RC = 0;
  KI0IW03.KI0IW3CT = KI0IW01.KI0IWDIX;
  KI0IW03.KI0IW3FC = "R";
  KI0IW03.KI0IW3AP = "KW04";
  KI0IW04.KI0IW4LG = KI0IW01.KI0IWSIZ;
  call "TA0050" (KI0IW04, KI0IW03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KI0IW03.KI0IW3RC == 0)
    /* next sentence*/
  else
    if (KI0IW03.KI0IW3RC == 7 /* end of data*/
     || KI0IW03.KI0IW3RC == 4) /* no temp storage records*/
      converseLib.validationFailed(206);
      KI0IW01.KI0IWERR = "Y";
      KI0IW01.KI0IWEND = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(228);
      KI0IW01.KI0IWERR = "Y";
      KI0IW01.KI0IWEND = "Y";
    end
  end
  ;
  ;
end // end KI0I260

// converse detail screen
Function KI0I300()
   /* *******************************************/
   /* KI0I300 - converse detail screen*/
   /* *******************************************/
  ;
  KI0IM200.KI0IMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  ;
  ;
  converse KI0IM200 ;
  ;
  ;
  KI0IW01.KI0IWERR = "N"; /* init error flag*/
  KI0IM200.VAGen_EZEMSG = " ";
  set KI0IM200.KI0IMPG1 initialAttributes;
  ;
  KI0I310(); /* edit pf and special keys*/
  ;
  ;
  if (KI0IW01.KI0IWERR == "N") /* no errors*/
    if (KI0IM200.KI0IMPG1 != KI0IW01.KI0IWPGC) /* change in page#*/
      if (KI0IM200.KI0IMPG1 > KI0IW01.KI0IWPGT /* greater than max*/
       || KI0IM200.KI0IMPG1 < 1)               /* or less than 1*/
        converseLib.validationFailed(379); /* "invalid page" msg*/
        set KI0IM200.KI0IMPG1 cursor, bold;
        KI0IW01.KI0IWERR = "Y";
      else /* load requested page*/
        KI0IW01.KI0IWDIX = KI0IM200.KI0IMPG1;
        KI0IW01.KI0IWPGC = KI0IM200.KI0IMPG1;
        KI0I250();
      end
    end
  end
  ;
  ;
end // end KI0I300

// process pfkeys - scrn 2
Function KI0I310()
   /* ********************************************/
   /* KI0I310 - process pfkeys for detail screen*/
   /* ********************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    KI0I250(); /* rebuild the screen*/
    KI0IW01.KI0IWERR = "Y"; /* set error flagto display screen*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to from application*/
     /* return back to select screen*/
    KI0I215(); /* purge temp storage*/
    KI0IW01.KI0IWDON = "Y"; /* set done flag*/
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    KI0I215(); /* purge temp storage*/
    KI0IW01.KI0IWDON = "Y"; /* set done flag*/
    COMMAREA.CAFROMAP = "KI0I";
    XSPF4();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help system*/
    KI0I215(); /* purge temp storage*/
    KI0IW01.KI0IWDON = "Y"; /* set done flag*/
    XSPF1();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit enter  key & from 'op0c'*/
   /* **************************************/
  if (converseVar.eventKey is enter
   && COMMAREA.CAFROMAP == "OP0C")
    KI0I215(); /* purge temp storage*/
    /* *** check to see if an account was requested*/
    KI0IW01.KI0IWCNT = 1; /* counter for screen*/
    while (KI0IW01.KI0IWCNT < KI0IW01.KI0IWMAX)
      if (KI0IM200.KI0IMSLT[KI0IWCNT] == " ")
         /* next sentence*/
      else
        KI0IW01.KI0IWCID = KI0IM200.KUCCOID[KI0IWCNT];
        KI0IW01.KI0IWSID = KI0IM200.KUMSTRID[KI0IWCNT];
        KI0IW01.KI0IWDID = KI0IM200.XNXCD[KI0IWCNT];
        KI0IW01.KI0IWZID = KI0IM200.XXXZIP[KI0IWCNT];
        if (KI0IW01.KI0IW-1CHAR-ZIP == "-")
          KI0IW01.KI0IW-1CHAR-ZIP = " ";
        end
        COMMAREA.CAITEM = KI0IW01.KI0IWITM;
        KI0IW01.KI0IWCNT = KI0IW01.KI0IWMAX;
      end
      KI0IW01.KI0IWCNT = KI0IW01.KI0IWCNT + 1;
    end /* of while*/
    ;
    COMMAREA.CACURRAP = "KI0I";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    KI0IM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KI0IW01.KI0IWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KI0IM200.CATOAP > " ") /* fast path*/
      KI0I215(); /* purge temp storage*/
      COMMAREA.CATOAP = KI0IM200.CATOAP;
      if (KI0IM200.CAITEM == " ")
        /* *** check to see if an account was requested*/
        KI0IW01.KI0IWCNT = 1; /* counter for screen*/
        while (KI0IW01.KI0IWCNT < KI0IW01.KI0IWMAX)
          if (KI0IM200.KI0IMSLT[KI0IWCNT] == " ")
             /* next sentence*/
          else
            KI0IW01.KI0IWCNO = KI0IM200.KUCCOID[KI0IWCNT];
            KI0IW01.KI0IWSNO = KI0IM200.KUMSTRID[KI0IWCNT];
            KI0IW01.KI0IWDNO = KI0IM200.XNXCD[KI0IWCNT];
            KI0IW01.KI0IWGNO = KI0IM200.XGPCD[KI0IWCNT];
            COMMAREA.CAUSERA = KI0IW01.KI0IWUSR;
            COMMAREA.CAITEM = " ";
          end
          KI0IW01.KI0IWCNT = KI0IW01.KI0IWCNT + 1;
        end
        ;
      else
        COMMAREA.CAITEM = KI0IM200.CAITEM;
      end
      COMMAREA.CAFROMAP = "KI0I";
      XSEXIT();
      KI0IM200.VAGen_EZEMSG = COMMAREA.CAMSG;
      KI0IW01.KI0IWERR = "Y";
      set KI0IM200.CATOAP cursor, bold;
    else
      KI0IW01.KI0IWCNT = 1; /* counter for screen*/
      KI0IW01.KI0IWUSR = " "; /* clear ws*/
      while (KI0IW01.KI0IWCNT < KI0IW01.KI0IWMAX)
        if (KI0IM200.KI0IMSLT[KI0IWCNT] == " ")
             /* next sentence*/
        else
          KI0IW01.KI0IWCNO = KI0IM200.KUCCOID[KI0IWCNT];
          KI0IW01.KI0IWSNO = KI0IM200.KUMSTRID[KI0IWCNT];
          KI0IW01.KI0IWDNO = KI0IM200.XNXCD[KI0IWCNT];
          KI0IW01.KI0IWGNO = KI0IM200.XGPCD[KI0IWCNT];
          COMMAREA.CAUSERA = KI0IW01.KI0IWUSR;
        end
        KI0IW01.KI0IWCNT = KI0IW01.KI0IWCNT + 1;
      end
      ;
      if (KI0IW01.KI0IWUSR == " ")
        set KI0IM100.CATOAP initialAttributes;
      else
        KI0IW01.KI0IWERR = "Y";
        converseLib.validationFailed(114); /* selected customer w/o fastpath*/
        set KI0IM200.CATOAP cursor, bold;
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/
  ;
  if (KI0IM200.CATOAP > " ")
    KI0IW01.KI0IWERR = "Y";
    converseLib.validationFailed(90); /* can not fast path and use pf keys*/
    set KI0IM200.CATOAP cursor, bold;
    return;
  else
    set KI0IM200.CATOAP initialAttributes;
  end
  ;
  ;
   /* **************************************/
   /* edit pf7 key page up*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf7)
    KI0I350();
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf8 key page down*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf8)
    KI0I360();
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf9 key  window xnx*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf9)
    KI0I370();
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit invalid key*/
   /* **************************************/
  ;
  if (KI0IW01.KI0IWERR == "N")
    converseLib.validationFailed(003); /* invalid pf key message*/
    KI0IW01.KI0IWERR = "Y";
  end
  ;
  ;
  ;
end // end KI0I310

// page up
Function KI0I350()
   /* *******************************/
   /* KI0I350 - scroll page up*/
   /* *******************************/
  ;
  if (KI0IW01.KI0IWDIX > 1)
    KI0IW01.KI0IWDIX = KI0IW01.KI0IWDIX - 1;
    KI0IW01.KI0IWPGC = KI0IW01.KI0IWPGC - 1;
    KI0IM200.KI0IMPG1 = KI0IW01.KI0IWPGC;
    KI0I250(); /* move data to screen*/
  else
    converseLib.validationFailed(208); /* at begining of data*/
  end
  ;
  ;
end // end KI0I350

// page down
Function KI0I360()
   /* *******************************/
   /* KI0I360 - scroll page down*/
   /* *******************************/
  ;
  if (KI0IW01.KI0IWDIX >= KI0IW01.KI0IWPGT) /* if at end of data*/
    converseLib.validationFailed(206);
  else
    KI0IW01.KI0IWDIX = KI0IW01.KI0IWDIX + 1;
    KI0IW01.KI0IWPGC = KI0IW01.KI0IWPGC + 1; /* page counter*/
    KI0IM200.KI0IMPG1 = KI0IW01.KI0IWPGC;
    KI0I250(); /* move data to screen*/
  end
  ;
  ;
end // end KI0I360

// window xnx dept codes
Function KI0I370()
   /* ***************************************/
   /* KI0I370 - pop up window for xnxcd*/
   /* ***************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID DEPARTMENT CODES    ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXNX01(); /* perform xnxcd pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KI0IW01.KI0IWDIX = KI0IW01.KI0IWPGC; /* get current page#*/
  KI0I250(); /* return current page*/
  ;
  ;
end // end KI0I370

// read company table
Function KI0IS-GET-CO()
   /* ------------ stmt grp ki0is-get-co start ------------*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
  ) /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KI0IS-GET-CO";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1MAP = " ";
    KI0IW01.KI0IWCNO = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KI0IW01.KI0IWCNO;
    TA1LOC = "READING DB2 TBL DCUST.VCMPNY";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end
  ;
  ;
   /* ------------ stmt grp KI0Is-get-co end ------------*/
end // end KI0IS-GET-CO

// Initialize Application Records
Function KI0IS-INIT-RECS()
   /* ***********************************************************/
   /* INITIALIZE APPLICATION RECORDS*/
   /* ***********************************************************/
  ;
  set KI0IW01 empty; /* working storage 1*/
  set KI0IW02 empty; /* working storage 2*/
  set KI0IW03 empty; /* working storage 3*/
  set KI0IW04 empty; /* temporary storage definition*/
  set SQLCA empty;
  set XX0XW02 empty;
  set TA1REC empty;
  ;
  KI0IW01.KI0IWNST = 0;
  KI0IW01.KI0IWCNO = 0;
  KI0IW01.KI0IWSNO = 0;
  KI0IW01.KI0IWDNO = 0;
end // end KI0IS-INIT-RECS

//*** RECORD=KI0IW01 ****
// this record contains work fields used entirely within ki0i.
// ***********************
Record KI0IW01 type basicRecord
  10 KI0IWSIZ KI0IWSIZ ; 
  10 KI0IWMAX KI0IWMAX ; 
  10 KI0IWPGC KI0IWPGC ; 
  10 KI0IWPGT KI0IWPGT ; 
  10 KI0IWDIX KI0IWDIX ; 
  10 KI0IWCNT KI0IWCNT ; 
  10 KI0IWEND KI0IWEND ; 
  10 KI0IWDON KI0IWDON ; 
  10 KI0IWIND KI0IWIND ; 
  10 KI0IWUSR KI0IWUSR ; 
    15 KI0IWCNO KI0IWCNO ; 
      20 KI0IWCNO-CHAR KI0IWCNO-CHAR ; 
    15 KI0IWSNO KI0IWSNO ; 
      20 KI0IWSNO-CHAR KI0IWSNO-CHAR ; 
    15 KI0IWDNO KI0IWDNO ; 
      20 KI0IWDNO-CHAR KI0IWDNO-CHAR ; 
    15 KI0IWGNO KI0IWGNO ; 
    15 * char(9) ; 
  10 KI0IWITM KI0IWITM ; 
    15 KI0IWCID KI0IWCID ; 
    15 KI0IWSID KI0IWSID ; 
    15 KI0IWDID KI0IWDID ; 
    15 KI0IWZID KI0IWZID ; 
      20 KI0IW-5CHAR-ZIP KI0IW-5CHAR-ZIP ; 
      20 KI0IW-1CHAR-ZIP KI0IW-1CHAR-ZIP ; 
  10 KI0IWERR KI0IWERR ; 
  10 KI0IWSTR KI0IWSTR ; 
    15 KI0IWNST KI0IWNST ; 
  10 KI0IWNDP KI0IWNDP ; 
    15 KI0IWZER KI0IWZER ; 
    15 KI0IWDPT KI0IWDPT ; 
  10 KI0IW1DX KI0IW1DX ; 
  10 KI0IW1DD KI0IW1DD ; 
    15 KI0IW1DA KI0IW1DA [10] ; 
  10 KI0IW1NX KI0IW1NX ; 
  10 KI0IW1ND KI0IW1ND ; 
    15 KI0IW1NA KI0IW1NA [10] ; 
end // end KI0IW01

//*** RECORD=KI0IW02 ****
//  record to io0540  for vcust002
// ***********************
Record KI0IW02 type basicRecord
  5 KI0IW2GR KI0IW2GR ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 KUMSTRNM KUMSTRNM ; 
    10 KUMSTSNM KUMSTSNM ; 
    10 XSTCD XSTCD ; 
    10 KUMCITYS KUMCITYS ; 
    10 KUMSLFID KUMSLFID ; 
    10 KUJSLFID KUJSLFID ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 XXXZIP XXXZIP ; 
    10 XXXSTAT XXXSTAT ; 
end // end KI0IW02

//*** RECORD=KI0IW03 ****
// working storage record for parm to ta0050 (temp storage)
// ***********************
Record KI0IW03 type basicRecord
  10 KI0IW3AP KI0IW3AP ; 
  10 KI0IW3CT KI0IW3CT ; 
  10 KI0IW3FC KI0IW3FC ; 
  10 KI0IW3RC KI0IW3RC ; 
end // end KI0IW03

//*** RECORD=KI0IW04 ****
// working storage rec for editing against the screen
// ;
// the following fields (KG0CW01) are used for processing
//  1) KG0CWRIN - misc looping thru the table
//  2) KG0CWRMR - last full position on the table
//  3) KG0CWRIX - last rep on the screen
//  4) KG0CWRCT - counter used to match the screen counter
//                of KG0CWCNT
//  5) KG0CWRPL - holding field when replacing a rep with a
// new rep
// ;
// ***********************
Record KI0IW04 type basicRecord
  3 KI0IW4GR KI0IW4GR ; 
    10 KI0IW4LG KI0IW4LG ; 
    10 KI0IWGRP KI0IWGRP [15] ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 XGPCD XGPCD ; 
      15 KUMSTRNM KUMSTRNM ; 
      15 KUJSLFID KUJSLFID ; 
      15 KUMCITYS KUMCITYS ; 
      15 XSTCD XSTCD ; 
      15 XXXZIP XXXZIP ; 
      15 KUMSLFID KUMSLFID ; 
end // end KI0IW04

DataItem KI0IW-1CHAR-ZIP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0IW-5CHAR-ZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// breakdown of orginal data
DataItem KI0IW1DA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orginal data
DataItem KI0IW1DD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// orginal data index
DataItem KI0IW1DX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakdown of new data
DataItem KI0IW1NA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new data
DataItem KI0IW1ND char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new data index
DataItem KI0IW1NX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vcust002 rec group field
DataItem KI0IW2GR char(101)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application
DataItem KI0IW3AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KI0IW3CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KI0IW3FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KI0IW3RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for w04
DataItem KI0IW4GR char(1204)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD LENGTH
DataItem KI0IW4LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KI0IWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KI0IWCNO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KI0IWCNO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen detail counter
DataItem KI0IWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KI0IWDID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage index
DataItem KI0IWDIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KI0IWDNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept number
DataItem KI0IWDNO-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second scrn done flag
DataItem KI0IWDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char version of dept
DataItem KI0IWDPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cusku flag
DataItem KI0IWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KI0IWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc code
DataItem KI0IWGNO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// grp level for w04
DataItem KI0IWGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// how to select the data
DataItem KI0IWIND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for caitem
DataItem KI0IWITM char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max nbr of occurances
DataItem KI0IWMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric version of dept
DataItem KI0IWNDP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric version of store
DataItem KI0IWNST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page counter
DataItem KI0IWPGC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total nbr of pages
DataItem KI0IWPGT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   store number
DataItem KI0IWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size of temp storage
DataItem KI0IWSIZ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   store number
DataItem KI0IWSNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   store number
DataItem KI0IWSNO-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char version of store
DataItem KI0IWSTR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KI0IWUSR char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler of zeroes
DataItem KI0IWZER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   zip code
DataItem KI0IWZID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

