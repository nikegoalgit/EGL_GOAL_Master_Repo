package ki0s;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XGPTBL;
import corpx1.XSTTBL;
import corpx1.XWHTBL;
import corpx2.XSTCD;
import corpx2.XXXCITY;
import corpx2.XXXZIP;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ta.common.TA1REC;
import vv.common.VCUSAP01;
import xa.common.XA0AW02;
//*** PROGRAM=KI0S ****
// ----------------  ki0s - inquire store  --------------------
// 
// overview:  this application performs inquiry for
//            general store data
// 
// date written: 06/86
// author:       c. trouw
// 
// ************************************************************
//                   maintenance history log
// ------------------------------------------------------------
//  date    int   modules              description
// ------------------------------------------------------------
// 031887   clt   ki0sm010   fix length of cust store number
// 072187   clt              added 3 new fields to kumrec
// 112087   clt              re-wrote program(added more scrns)
// 120387   clt              fixed scrolling forward - pf8
// 122187   clt              added new screens to inquiry by
// 122887   clt   ki0ss30    fixed scrolling
// 020488   clt              fixed displaying country
// 031088   clt              add defered mailing indicator
// 111188   jbw              added noncsp option to calls
// 111188   jbw              added xssegtr logic
// 031489   clt              replace sic code with store class
//                           and remove sperry store type
// 041489   clt              remove sales service reps
// 051589   clt              database changes
// 011690   jfiat            database changes
// 032990   dsalzw           database changes
// 020491   dsalzw           database changes
// 031891   twatso           move invoice distrib ind to store
//                           level from customer level
// 042591   dsalzw           change heading to store self id
// 051391   dsalzw           remove all inquiry security
// 051691   dsalzw           changed pf3 to use from appl
// 072591   dsalzw           fix map attributes
// 101191   CHELLM           Added CU-OFSHR-FL to map KI0SM015
// 121291   dsalzw           if coming from KI0I, always go
//                           direct to option 1 screen
// 100193   CHELLM           CSP 4.1 Conversion.
// 101193   CHELLM           Fix 0C7 abend in scroll logic PF8.
// 101393   CHELLM           Fix 0C7 abend in endry from KI0I.
// 111293   CHELLM           DATABASE CHANGES. VADDR, VCMPNY .
// 111693   CHELLM           fix address display problem
// 08/15/95 CHELLM           Dont justify Store Self ID
// 06/05/01 GDECKE           SHOW SAP ACCT ID IF ONE EXISTS
// 
// *********************
Program KI0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KI0SW01 KI0SW01; // record
  KI0SW02 KI0SW02; // record
  KI0SW03 KI0SW03; // record
  KI0SW04 KI0SW04; // record
  KI0SW05 KI0SW05; // record
  KI0SW06 KI0SW06; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCUSAP01 VCUSAP01; // record
  XA0AW02 XA0AW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KI0SM.KI0SM005,  // forms
      KI0SM.KI0SM015, 
      KI0SM.KI0SM020, 
      KI0SM.KI0SM030
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KI0S000: KI0S000();

    exit program;

    KI0S005: KI0S005();
    KI0S010: KI0S010();
    KI0S015: KI0S015();
    KI0S020: KI0S020();
    KI0S030: KI0S030();
    KI0S035: KI0S035();
  end // end main
end // end KI0S

// Select VCUSAP01
Function KI0S-CLS-VCUSAP01()
  /* * KI0S-CLS-VCUSAP01*/
  /* * close cursor on DCUST.VCUSAP01*/
  /*  */

  try
    call "VCUSAP01" ("C1", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KI0S-SEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KI0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KI0S-CLS-VCUSAP01

// Select VCUSAP01
Function KI0S-OPN-VCUSAP01()
  /* * KI0S-OPN-VCUSAP01*/
  /* * OPEN CURSOR ON DCUST.VCUSAP01*/
  /*  */
  set VCUSAP01 empty;

  VCUSAP01.KUCCOID = KI0SM015.KUCCOID;
  VCUSAP01.KUMSTRID = KI0SM015.KUMSTRID;
  VCUSAP01.XNXCD = 0;

  try
    call "VCUSAP01" ("S1", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KI0S-SEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KI0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KI0S-OPN-VCUSAP01

// Select VCUSAP01
Function KI0S-SEL-VCUSAP01()
  /* * KI0S-SEL-VCUSAP01*/
  /* * SELECT ROW FROM DCUST.VCUSAP01*/
  /*  */
  set VCUSAP01 empty;

  try
    call "VCUSAP01" ("N1", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      if ((KI0SM015.KUCCOID != VCUSAP01.KUCCOID)
       || (KI0SM015.KUMSTRID != VCUSAP01.KUMSTRID))
        SQLCA.VAGen_SQLCODE = +100;
      end
    end

    if (SQLCA.VAGen_SQLCODE == 0)
      KI0SM015.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
      set KI0SM015.KI0SM-SAP-ID-LIT normal;
      set KI0SM015.CU-SAP-ACCT-ID underline;
      KI0SW01.KI0SW-SAP-ROW-COUNT = KI0SW01.KI0SW-SAP-ROW-COUNT + 1;
      if (KI0SW01.KI0SW-SAP-ROW-COUNT == 2)
        KI0SM015.CU-SAP-ACCT-ID = "MULTI-DEPT";
      end
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        if (KI0SW01.KI0SW-SAP-ROW-COUNT == 1)
          return;
        else
          KI0SM015.CU-SAP-ACCT-ID = " ";
          set KI0SM015.KI0SM-SAP-ID-LIT initialAttributes;
          set KI0SM015.CU-SAP-ACCT-ID initialAttributes;
          return; /* Return to previous process*/
        end
      end
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KI0S-SEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KI0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KI0S-SEL-VCUSAP01

// init basic store screen
Function KI0S000()


   /* *************************************************************/
   /* *****     i n i t i a l   s t o r e    c h a n g e     ******/
   /* *****                p r o c e s s i n g               ******/
   /* *************************************************************/


  XSENTRY();

  XSSEGTR(); /* 11/88 jbw - set segmented trans id*/

  KI0SS-INIT-RECS();

   /* move data to work rec*/
  if (COMMAREA.CAITEM == " ")
    KI0SW01.KI0SWKEY = COMMAREA.CAUSERA;
  else
    KI0SW01.KI0SWKEY = COMMAREA.CAITEM;
  end

  if (KI0SW01.KI0SWCID-CHAR is numeric)
    KI0SM005.KUCCOID = KI0SW01.KI0SWCID; /* move company id*/
  else
    KI0SW01.KI0SWCID = 0; /* initialize company id*/
  end

  if (KI0SW01.KI0SWSID-CHAR is numeric) /* move store id*/
    KI0SM005.KUMSTRID = KI0SW01.KI0SWSID;
  else
    KI0SW01.KI0SWSID = 0; /* initialize store id*/
  end


  KI0SM005.KI0SMDT = VGVar.currentShortGregorianDate;
  KI0SM015.KI0SMDT = VGVar.currentShortGregorianDate;
  KI0SM020.KI0SMDT = VGVar.currentShortGregorianDate;
  KI0SM030.KI0SMDT = VGVar.currentShortGregorianDate;
  converseVar.commitOnConverse = 1;
  VGVar.handleHardIOErrors = 1;
  KI0SW01.KI0SWIDX = 1;
  KI0SW01.KI0SWSKP = "N";
  KI0SW01.KI0SWFST = "Y";
  KI0SW01.KI0SWEAF = "Y";
  KI0SW01.KI0SWMOD = "Y";

  if (COMMAREA.CAFROMAP == "KI0I"
   && KI0SW01.KI0SWCID > 0)
    KI0SW01.KI0SWSRN = "1"; /* go to option 1*/
    KUCREC.KUCCOID = KI0SW01.KI0SWCID;
    KUMREC.KUMSTRID = KI0SW01.KI0SWSID;
    KI0SS07(); /* select company*/
    KI0SS12(); /* select all stores*/
    KI0SS21(); /* find store*/
  else
    KI0SW01.KI0SWSRN = "0"; /* go to menu*/
  end

  while (KI0SW01.KI0SWEAF == "Y") /* this switch is always set to 'y'*/
    KI0S005(); /* can only leave program by fastpath*/
  end /* or pf keys.*/

  COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* the program should never*/
  XSEXIT(); /* get to this area.*/

end // end KI0S000

// decides which screen to show
Function KI0S005()

  if (KI0SW01.KI0SWSRN == "0") /* display menu screen*/
    KI0SW01.KI0SWESF = "N";
    KI0SM020.KI0SMOPT[1] = "N";
    KI0SM020.KI0SMOPT[2] = "N";
    KI0SM020.KI0SMOPT[3] = "N";
    KI0SM020.KI0SMOPT[4] = "N";
    KI0SM020.KI0SMOPT[5] = "N";
    KI0SM020.XXXCITY = " ";
    KI0SM020.XSTCD = " ";
    KI0SM020.XCTCD = " ";
    while (KI0SW01.KI0SWESF == "N")
      KI0S010();
    end
  end

  if (KI0SW01.KI0SWSRN == "1") /* display basic info screen*/
    KI0SW01.KI0SWESF = "N";
    while (KI0SW01.KI0SWESF == "N")
      KI0S015();
    end
  end

  if (KI0SW01.KI0SWSRN == "2") /* display menu screen*/
    KI0SW01.KI0SWESF = "N";
    while (KI0SW01.KI0SWESF == "N")
      KI0S020();
    end
  end

  if (KI0SW01.KI0SWSRN == "3") /* display company/store screen*/
    KI0SW01.KI0SWHX1 = 1;
    KI0SW01.KI0SWHX2 = 1;
    KI0SW01.KI0SWHC1 = 1;
    KI0SW01.KI0SWHC2 = 1;
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWCNT = 0;
    KI0SW01.KI0SWECT = 1;
    KI0SW01.KI0SWFST = "Y";
    KI0SW01.KI0SWUPD = "Y";
    KI0SW01.KI0SWESF = "N";
    while (KI0SW01.KI0SWESF == "N")
      KI0S030();
    end
  end

end // end KI0S005

// store information menu
Function KI0S010()

  KI0SM005.KI0SMMSG = KI0SW01.KI0SWMSG; /* move any error message*/
  KI0SW01.KI0SWMSG = " "; /* to screen*/

  converse KI0SM005 ;

  KI0SW01.KI0SWCID = KI0SM005.KUCCOID; /* set values for*/
  KI0SW01.KI0SWSID = KI0SM005.KUMSTRID; /* fastpath*/
  COMMAREA.CATOAP = KI0SM005.CATOAP;
  COMMAREA.CAITEM = KI0SM005.CAITEM;

  KI0SS01(); /* check fastpath and pf keys*/

  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel any data entered*/
   || converseVar.eventKey is pa2) /* and screen will be refreshed.*/
    converseLib.clearScreen();
    
    return;
  end

  if (converseVar.eventKey is pf7 /* these are invalid pf keys for this screen.*/
   || converseVar.eventKey is pf8 
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    converseLib.validationFailed(3);
  end

  if (converseVar.validationMsgNum != 0 /* if error encountered*/
   || KI0SW01.KI0SWMSG != " ")          /* set modified fields modified.*/
    if (KI0SM005.KUCCOID is modified)
      set KI0SM005.KUCCOID modified;
    end
    if (KI0SM005.KUMSTRID is modified)
      set KI0SM005.KUMSTRID modified;
    end
    if (KI0SM005.KI0SMOPT is modified)
      set KI0SM005.KI0SMOPT modified;
    end
    return;
  end

  set KI0SM005.KI0SMOPT cursor, initialAttributes;
  set KI0SM005.KUCCOID initialAttributes;
  set KI0SM005.KUMSTRID initialAttributes;

  KI0SM005.CATOAP = " ";
  KI0SM005.CAITEM = " ";

  if (converseVar.eventKey is pf3) /* return to inquiry menu*/
    KI0SS02(); /* purge temp work file*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    KI0SW01.KI0SWMOD = "Y";
    KI0SW01.KI0SWSRN = "0";
    KI0SW01.KI0SWESF = "Y";
    return;
  end

  if (KI0SM005.KI0SMOPT == "1") /* if basic store info selected*/
    KUMREC.KUCCOID = KI0SM005.KUCCOID;
    KUMREC.KUMSTRID = KI0SM005.KUMSTRID;
    KI0SW01.KI0SWCID = KI0SM005.KUCCOID;
    KI0SW01.KI0SWSID = KI0SM005.KUMSTRID;
    KI0SS05(); /* check if store exists*/
    if (converseVar.validationMsgNum != 0) /* error store not found*/
      set KI0SM005.KUMSTRID cursor, modified, bold;
    end
  end

  if (KI0SM005.KUCCOID is modified) /* set modified switch*/
    KI0SW01.KI0SWMOD = "Y";
  end

  if (KI0SW01.KI0SWMOD == "Y")
    KUCREC.KUCCOID = KI0SM005.KUCCOID;
    KI0SS07(); /* edit company*/
  end

  if (converseVar.validationMsgNum != 0) /* if company not found*/
    set KI0SM005.KUCCOID cursor, modified, bold;
  end

  if (KI0SM005.KI0SMOPT == "1" /* edit for valid options*/
   || KI0SM005.KI0SMOPT == "2")
    /* next sentence*/
  else
    set KI0SM005.KI0SMOPT cursor, modified, bold;
    converseLib.validationFailed(2); /* error invalid option*/
  end

  if (converseVar.validationMsgNum != 0) /* if any errors encountered*/
    return; /* return to display messages.*/
  end

  KI0SW01.KI0SWSRN = KI0SM005.KI0SMOPT;
  KI0SW01.KI0SWESF = "Y"; /* set switch off to display next screen.*/

  if (KI0SM005.KI0SMOPT == "1")
    /* next sentence*/
  else
    return;
  end

  if (KI0SW01.KI0SWMOD == "Y")
    KI0SS12(); /* select all stores*/
    if (converseVar.validationMsgNum != 0)
      return;
    end
  end

  KI0SW01.KI0SWMOD = "N";

  if (KI0SM005.KUMSTRID > 0)
    KI0SS21(); /* search for store to display*/
  end

end // end KI0S010

// converse basic store info
Function KI0S015()

  if (converseVar.validationMsgNum != 0 /* if any errors go directly to screen*/
   /* to*/
   || KI0SW01.KI0SWMSG != " ")          /* display messages.*/
    /* next sentence*/
  else
    if (KI0SW01.KI0SWFST == "Y") /* will read record in temp storage*/
      KI0SS22();
      KI0SW01.KI0SWFST = "N";
      if (converseVar.validationMsgNum == 228)
        return;
      end
    end
    KUMREC.KUMSTRID = KI0SW03.KUMSTRID[KI0SWIDX];
    KI0SS25(); /* move store data to screen*/
  end

  KI0SM015.KI0SMMSG = KI0SW01.KI0SWMSG; /* move any error messages*/
  KI0SW01.KI0SWMSG = " "; /* to screen.*/

   /* GET SAP ACCOUNT ID IF ONE EXISTS ON VCUSAP01*/
  set KI0SM015.KI0SM-SAP-ID-LIT initialAttributes;
  set KI0SM015.CU-SAP-ACCT-ID initialAttributes;
  if (KI0SM015.KUCCOID != 0)
    KI0SW01.KI0SW-SAP-ROW-COUNT = 0;
    KI0S-OPN-VCUSAP01();
    if (SQLCA.VAGen_SQLCODE == 0)
      KI0S-SEL-VCUSAP01();
    end
    if (SQLCA.VAGen_SQLCODE == 0
     && KI0SW01.KI0SW-SAP-ROW-COUNT == 1)
      KI0S-SEL-VCUSAP01();
    end
    KI0S-CLS-VCUSAP01();
  end

  converse KI0SM015 ;

  KI0SW01.KI0SWCID = KI0SM015.KUCCOID; /* set values for fastpath.*/
  KI0SW01.KI0SWSID = KI0SM015.KUMSTRID;
  COMMAREA.CATOAP = KI0SM015.CATOAP;
  COMMAREA.CAITEM = KI0SM015.CAITEM;

  KI0SS01(); /* check fastpath and pf keys*/

  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel data entered*/
   /* on screen*/
   || converseVar.eventKey is pa2) /* and refresh the screen.*/
    converseLib.clearScreen();
    
    return;
  end

  if (converseVar.validationMsgNum != 0 /* if any errors encountered*/
   || KI0SW01.KI0SWMSG != " ")          /* set modified fields modified.*/
    if (KI0SM015.KUCCOID is modified)
      set KI0SM015.KUCCOID modified;
    end
    if (KI0SM015.KUMSTRID is modified)
      set KI0SM015.KUMSTRID modified;
    end
    return;
  end

  set KI0SM015.KUCCOID cursor, initialAttributes;
  set KI0SM015.KUMSTRID initialAttributes;

  KI0SM015.CATOAP = " ";
  KI0SM015.CAITEM = " ";

  if (converseVar.eventKey is pf3) /* if pf3 go back to menu*/
    KI0SM005.KUCCOID = KI0SM015.KUCCOID;
    KI0SM005.KUMSTRID = KI0SM015.KUMSTRID;
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    KI0SW01.KI0SWIDX = 1;
    return;
  end

  if (KI0SM015.KUCCOID is modified) /* if company id modified*/
    KUCREC.KUCCOID = KI0SM015.KUCCOID;
    KI0SS07(); /* edit company*/
    if (converseVar.validationMsgNum != 0) /* error - company not found*/
      set KI0SM015.KUCCOID cursor, modified, bold;
      return;
    else
      KI0SS12();
      if (converseVar.validationMsgNum != 0)
        return;
      end
    end
  end

  if (KI0SM015.KUCCOID is modified /* if company or store modified*/
   || KI0SM015.KUMSTRID is modified)
    KUMREC.KUCCOID = KI0SM015.KUCCOID;
    KUMREC.KUMSTRID = KI0SM015.KUMSTRID;
    KI0SS05(); /* edit store*/
    if (converseVar.validationMsgNum == 0) /* if store found*/
      KI0SW01.KI0SWCID = KI0SM015.KUCCOID;
      KI0SW01.KI0SWSID = KI0SM015.KUMSTRID;
      KI0SS21(); /* search for store*/
    else
      set KI0SM015.KUMSTRID cursor, modified, bold; /* store not found.*/
    end
    return;
  end

  if (converseVar.eventKey is pf7) /* scroll backwards*/
    if (KI0SW01.KI0SWIDX > 1) /* must check index*/
      KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX - 1;
    else
      if (KI0SW01.KI0SWCNT > 1) /* must check work storage rec.*/
        KI0SW01.KI0SWCNT = KI0SW01.KI0SWCNT - 2;
        KI0SW01.KI0SWIDX = 12;
        KI0SW01.KI0SWFST = "Y";
      else
        converseLib.validationFailed(208); /* at begining of data*/
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forwards*/
    if (KI0SW01.KI0SWCDX == 0) /* must check for no data*/
      converseLib.validationFailed(206); /* at end of data*/
    else
      KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
      if (KI0SW01.KI0SWIDX > KI0SW01.KI0SWCDX) /* check index*/
        KI0SW01.KI0SWFST = "Y"; /* read next work storage rec*/
        if (KI0SW01.KI0SWCNT >= KI0SW01.KI0SWHC)
          KI0SW01.KI0SWIDX = KI0SW01.KI0SWHDX; /* set index*/
        else
          KI0SW01.KI0SWIDX = 1;
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf17) /* set index and work storage record*/
    KI0SW01.KI0SWCNT = 0; /* to first store.*/
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWFST = "Y";
    return;
  end

  if (converseVar.eventKey is pf18) /* set index and work storage record*/
    KI0SW01.KI0SWCNT = KI0SW01.KI0SWHC - 1; /* to last store*/
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWHDX;
    KI0SW01.KI0SWFST = "Y";
    return;
  end

end // end KI0S015

// converse company/store menu
Function KI0S020()


  KI0SM020.KI0SMMSG = KI0SW01.KI0SWMSG;
  KI0SW01.KI0SWMSG = " ";

  converse KI0SM020 ;

  KI0SW01.KI0SWSKP = "N";
  KI0SW01.KI0SWCID = KI0SM020.KUCCOID;
  KI0SW01.KI0SWSID = 0;
  COMMAREA.CATOAP = KI0SM020.CATOAP;
  COMMAREA.CAITEM = KI0SM020.CAITEM;

  KI0SS01(); /* check fastpath and pf keys*/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    return;
  end

  if (converseVar.validationMsgNum != 0
   || KI0SW01.KI0SWMSG != " ")
    if (KI0SM020.KUCCOID is modified)
      set KI0SM020.KUCCOID modified;
    end
    if (KI0SM020.XXXCITY is modified)
      set KI0SM020.XXXCITY modified;
    end
    if (KI0SM020.XSTCD is modified)
      set KI0SM020.XSTCD modified;
    end
    if (KI0SM020.XCTCD is modified)
      set KI0SM020.XCTCD modified;
    end
    KI0SW01.KI0SWINX = 1;
    while (KI0SW01.KI0SWINX < 6)
      if (KI0SM020.KI0SMOPT[KI0SWINX] is modified)
        set KI0SM020.KI0SMOPT[KI0SWINX] modified;
      end
      KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
    end
    return;
  end

  set KI0SM020.KUCCOID cursor, initialAttributes;
  set KI0SM020.XXXCITY initialAttributes;
  set KI0SM020.XSTCD initialAttributes;
  set KI0SM020.XCTCD initialAttributes;

  KI0SW01.KI0SWINX = 1;
  while (KI0SW01.KI0SWINX < 6)
    set KI0SM020.KI0SMOPT[KI0SWINX] initialAttributes;
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
  end

  KI0SM020.CATOAP = " ";
  KI0SM020.CAITEM = " ";

  if (converseVar.eventKey is pf3)
    KI0SM005.KUCCOID = KI0SM020.KUCCOID;
    KI0SM005.KUMSTRID = 0;
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    return;
  end

  if (KI0SM020.KUCCOID is modified)
    KUCREC.KUCCOID = KI0SM020.KUCCOID;
    KI0SS07();
    if (converseVar.validationMsgNum != 0)
      set KI0SM020.KUCCOID cursor, modified, bold;
    end
    return;
  end

  KI0SW01.KI0SWINX = 5;
  while (KI0SW01.KI0SWINX > 0)
    if (KI0SM020.KI0SMOPT[KI0SWINX] == "N"
     || KI0SM020.KI0SMOPT[KI0SWINX] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      set KI0SM020.KI0SMOPT[KI0SWINX] cursor, modified, bold;
    end
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX - 1;
  end

  if (KI0SM020.XCTCD is modified)
    if (KI0SM020.XCTCD != " ")
      if (KI0SM020.XCTCD in XCTTBL.XCTCD)
        /* next sentence*/
      else
        set KI0SM020.XCTCD cursor, modified, bold;
        converseLib.validationFailed(7);
      end
    end
  end

  if (KI0SM020.XSTCD is modified)
    if (KI0SM020.XSTCD != " ")
      if (KI0SM020.XSTCD in XSTTBL.XSTCD)
        /* next sentence*/
      else
        set KI0SM020.XSTCD cursor, modified, bold;
        converseLib.validationFailed(6);
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (KI0SM020.XCTCD == " "
   || KI0SM020.XCTCD == "USA ")
    /* next sentence*/
  else
    if (KI0SM020.XSTCD == " ")
      /* next sentence*/
    else
      set KI0SM020.XCTCD cursor, modified, bold;
      converseLib.validationFailed(217);
    end
  end

  if (KI0SM020.XSTCD != " ")
    if (KI0SM020.XCTCD == "USA ")
      /* next sentence*/
    else
      set KI0SM020.XCTCD cursor, modified, bold;
      converseLib.validationFailed(217);
    end
  end

  if (KI0SM020.XXXCITY != " ")
    if (KI0SM020.XCTCD == " ")
      converseLib.validationFailed(219);
      set KI0SM020.XCTCD cursor, modified, bold;
    end
  end

  if (KI0SM020.XCTCD == "USA ")
    if (KI0SM020.XSTCD == " ")
      converseLib.validationFailed(218);
      set KI0SM020.XSTCD cursor, modified, bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (KI0SM020.KI0SMOPT[3] == "N"
   && KI0SM020.KI0SMOPT[4] == "N")
    converseLib.validationFailed(220);
    set KI0SM020.KI0SMOPT[3] cursor, modified, bold;
    set KI0SM020.KI0SMOPT[4] modified, bold;
  end

  if (KI0SM020.KI0SMOPT[3] == "Y"
   && KI0SM020.KI0SMOPT[4] == "Y")
    converseLib.validationFailed(221);
    set KI0SM020.KI0SMOPT[3] cursor, modified, bold;
    set KI0SM020.KI0SMOPT[4] modified, bold;
  end

  if (KI0SM020.XCTCD != " "
   || KI0SM020.XSTCD != " "
   || KI0SM020.XXXCITY != " ")
    if (KI0SM020.KI0SMOPT[1] == "N"
     && KI0SM020.KI0SMOPT[2] == "N")
      converseLib.validationFailed(220);
      set KI0SM020.KI0SMOPT[1] cursor, modified, bold;
      set KI0SM020.KI0SMOPT[2] modified, bold;
    end
  else
    if (KI0SM020.KI0SMOPT[1] == "Y"
     || KI0SM020.KI0SMOPT[2] == "Y")
      set KI0SM020.XCTCD modified, bold;
      set KI0SM020.XSTCD modified, bold;
      set KI0SM020.XXXCITY cursor, modified, bold;
      converseLib.validationFailed(222);
    end
  end

  if (KI0SM020.KI0SMOPT[1] == "Y"
   && KI0SM020.KI0SMOPT[2] == "Y")
    converseLib.validationFailed(221);
    set KI0SM020.KI0SMOPT[1] cursor, modified, bold;
    set KI0SM020.KI0SMOPT[2] modified, bold;
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  KI0SW01.KI0SWFIN = "N";

  KI0SS12();

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (KI0SW01.KI0SWFIN != "Y")
    converseLib.validationFailed(223);
    return;
  end

  KI0SW01.KI0SWDSP = "Y";
  KI0SW01.KI0SWESF = "Y";
  KI0SW01.KI0SWSRN = "3";

  if (KI0SM020.KI0SMOPT[3] == "Y")
    KI0SM030.KI0SMANM = "  STORE ADDRESS   ";
  else
    KI0SM030.KI0SMANM = "SHIP GROUP ADDRESS";
  end

  if (KI0SM020.KI0SMOPT[5] == "Y")
    KI0SM030.KI0SMPFK[1] = " ";
    KI0SM030.KI0SMPFK[2] = " ";
  else
    KI0SM030.KI0SMPFK[1] = "17: FIRST";
    KI0SM030.KI0SMPFK[2] = "18: LAST ";
  end

end // end KI0S020

// converse company/store screen
Function KI0S030()

  if (converseVar.validationMsgNum != 0
   || KI0SW01.KI0SWMSG != " "
   || KI0SW01.KI0SWSKP == "Y")
    /* next sentence*/
  else
    if (KI0SW01.KI0SWFST == "Y")
      KI0SS22();
      if (converseVar.validationMsgNum == 228)
        return;
      end
    end
    if (converseVar.validationMsgNum != 0)
      KI0SW01.KI0SWUPD = "N";
      KI0SW01.KI0SWFST = "N";
    else
      set KI0SM030.KUCCOID cursor, initialAttributes;
      KI0SW01.KI0SWINX = 1;
      while (KI0SW01.KI0SWINX < 13)
        KI0SM030.KI0SMDTA[KI0SWINX] = " ";
        set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
        KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
      end
      KI0SW01.KI0SWLNX = 0;
      KI0SW01.KI0SWINX = 0;
      KI0SW01.KI0SWLC = 0;
      KI0SW01.KI0SWEND = "N";
      while (KI0SW01.KI0SWEND == "N")
        KI0SS30(); /* move data to screen*/
      end
      KI0SW01.KI0SWLC1 = KI0SW01.KI0SWLC;
      KI0SW01.KI0SWFST = "N";
    end
  end

  if (KI0SW01.KI0SWDSP == "Y")
    KI0SW01.KI0SWTTL = KI0SW01.KI0SWTOT;
    KI0SW01.KI0SWTNM = "TOTAL NUMBER OF STORES SELECTED: ";
    KI0SW01.KI0SWMSG = KI0SW01.KI0SWTTE;
    KI0SW01.KI0SWTOT = 0;
    KI0SW01.KI0SWDSP = "N";
  end

  KI0SM030.KI0SMMSG = KI0SW01.KI0SWMSG;
  KI0SW01.KI0SWMSG = " ";

  converse KI0SM030 ;

  KI0SW01.KI0SWSCX = 1;
  while (KI0SW01.KI0SWSCX < 13)
    set KI0SM030.KI0SMDTA[KI0SWSCX] initialAttributes;
    KI0SW01.KI0SWSCX = KI0SW01.KI0SWSCX + 1;
  end

  KI0SW01.KI0SWSKP = "N";
  KI0SW01.KI0SWCID = KI0SM030.KUCCOID;
  KI0SW01.KI0SWSID = 0;

  if (KI0SM030.CATOAP != " ")
    COMMAREA.CATOAP = KI0SM030.CATOAP;
    COMMAREA.CAITEM = KI0SM030.CAITEM;
  end

  KI0SS01();

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    return;
  end

  if (KI0SM020.KI0SMOPT[5] == "Y")
    if (converseVar.eventKey is pf17
     || converseVar.eventKey is pf18)
      converseLib.validationFailed(3);
    end
  end

  if (converseVar.validationMsgNum != 0
   || KI0SW01.KI0SWMSG != " ")
    if (KI0SM030.KUCCOID is modified)
      set KI0SM030.KUCCOID modified;
    end
    return;
  end

  set KI0SM030.KUCCOID cursor, initialAttributes;

  if (converseVar.eventKey is pf3)
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "2";
    KI0SW01.KI0SWCNT = 0;
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWFST = "Y";
  end

  if (KI0SM030.KUCCOID is modified)
    KI0SW01.KI0SWSDX = 1;
    while (KI0SW01.KI0SWSDX < 13)
      if (KI0SM030.KI0SMSEL[KI0SWSDX] == "V")
        KI0SM030.KI0SMSEL[KI0SWSDX] = " ";
      end
      KI0SW01.KI0SWSDX = KI0SW01.KI0SWSDX + 1;
    end
    KUCREC.KUCCOID = KI0SM030.KUCCOID;
    KI0SW01.KI0SWIDX = 1;
    KI0SS07();
    if (converseVar.validationMsgNum != 0)
      set KI0SM030.KUCCOID cursor, modified, bold;
    else
      KI0SW01.KI0SWFIN = "N";
      KI0SS12();
      if (converseVar.validationMsgNum != 0)
        return;
      end
      if (KI0SW01.KI0SWFIN != "Y")
        converseLib.validationFailed(223);
        KI0SW01.KI0SWSRN = "2";
        KI0SW01.KI0SWESF = "Y";
      else
        KI0SW01.KI0SWFST = "Y";
        KI0SW01.KI0SWUPD = "Y";
        KI0SW01.KI0SWHX1 = 1;
        KI0SW01.KI0SWHX2 = 1;
      end
    end
    return;
  end

  KI0SW01.KI0SWSDX = 12;
  while (KI0SW01.KI0SWSDX > 0)
    if (KI0SM030.KI0SMSEL[KI0SWSDX] == "V")
      KI0SM030.KI0SMSEL[KI0SWSDX] = " ";
    end
    if (KI0SM030.KI0SMSEL[KI0SWSDX] == " "
     || KI0SM030.KI0SMSEL[KI0SWSDX] == "S")
      /* next sentence*/
    else
      set KI0SM030.KI0SMSEL[KI0SWSDX] cursor, modified, bold;
      converseLib.validationFailed(224);
    end
    KI0SW01.KI0SWSDX = KI0SW01.KI0SWSDX - 1;
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (converseVar.eventKey is pf7)
    KI0SW01.KI0SWUPD = "N";
    if (KI0SM020.KI0SMOPT[5] == "Y")
      if (KI0SW01.KI0SWCNT == 1
       && KI0SW01.KI0SWECT == 1)
        converseLib.validationFailed(208);
      else
        KI0SW01.KI0SWCNT = KI0SW03.KI0SW3CT[KI0SWIDX] - 1;
        KI0SW01.KI0SWTDX = KI0SW03.KI0SW3DX[KI0SWIDX];
        KI0SW01.KI0SWIDX = KI0SW01.KI0SWTDX;
        KI0SW01.KI0SWFST = "Y";
      end
    else
      if (KI0SW01.KI0SWCNT > 2)
        KI0SW01.KI0SWCNT = KI0SW01.KI0SWCNT - 2;
        KI0SW01.KI0SWIDX = 1;
        KI0SW01.KI0SWFST = "Y";
      else
        if (KI0SW01.KI0SWCNT > 1)
          KI0SW01.KI0SWCNT = 0;
          KI0SW01.KI0SWIDX = 1;
          KI0SW01.KI0SWFST = "Y";
        else
          converseLib.validationFailed(208);
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8)
    KI0SW01.KI0SWECT = 0;
    if (KI0SM020.KI0SMOPT[5] == "Y")
      KI0SW01.KI0SWUPD = "Y";
    else
      KI0SW01.KI0SWUPD = "N";
    end
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
    if (KI0SW01.KI0SWIDX > KI0SW01.KI0SWCDX)
      KI0SW01.KI0SWFST = "Y";
      if (KI0SW01.KI0SWCNT >= KI0SW01.KI0SWHC)
        KI0SW01.KI0SWIDX = KI0SW01.KI0SWHDX;
        converseLib.validationFailed(206);
        KI0SW01.KI0SWFST = "N";
      else
        KI0SW01.KI0SWIDX = 1;
      end
    end
    return;
  end

  if (converseVar.eventKey is pf17)
    KI0SW01.KI0SWCNT = 0;
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWFST = "Y";
    return;
  end

  if (converseVar.eventKey is pf18)
    KI0SW01.KI0SWCNT = KI0SW01.KI0SWHC - 1;
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWFST = "Y";
    return;
  end

  KI0SW01.KI0SWSKP = "Y";
  KI0SW01.KI0SWSDX = 1;

  while (KI0SW01.KI0SWSDX < 13)
    if (KI0SM030.KI0SMSEL[KI0SWSDX] == "S")
      KI0SM030.KI0SMSEL[KI0SWSDX] = "V";
      KUMREC.KUMSTRID = KI0SW01.KUMSTRID[KI0SWSDX];
      KI0S035();
    end
    KI0SW01.KI0SWSDX = KI0SW01.KI0SWSDX + 1;
  end

  if (KI0SM030.CAITEM != " ")
    if (KI0SM020.KI0SMOPT[5] == "N")
      KI0SW01.KI0SWHNT = KI0SW01.KI0SWCNT;
      KI0SW01.KI0SWHHX = KI0SW01.KI0SWIDX;
      KI0SW01.KI0SWST1 = KI0SM030.CAITEM;
      KI0SW01.KI0SWSID = KI0SW01.KI0SWSTR;
      KI0SS35();
    end
  end

  KI0SM030.CAITEM = " ";
  KI0SW01.KI0SWUPD = "N";

end // end KI0S030

// converse basic store info
Function KI0S035()

  KI0SS25();

  set KI0SM015.KUCCOID skip;
  set KI0SM015.KUMSTRID skip;
  set KI0SM015.CATOAP cursor;
  converseLib.validationFailed(225);

   /* GET SAP ACCOUNT ID IF ONE EXISTS ON VCUSAP01*/
  set KI0SM015.KI0SM-SAP-ID-LIT initialAttributes;
  set KI0SM015.CU-SAP-ACCT-ID initialAttributes;
  if (KI0SM015.KUCCOID != 0)
    KI0SW01.KI0SW-SAP-ROW-COUNT = 0;
    KI0S-OPN-VCUSAP01();
    if (SQLCA.VAGen_SQLCODE == 0)
      KI0S-SEL-VCUSAP01();
    end
    if (SQLCA.VAGen_SQLCODE == 0
     && KI0SW01.KI0SW-SAP-ROW-COUNT == 1)
      KI0S-SEL-VCUSAP01();
    end
    KI0S-CLS-VCUSAP01();
  end

  converse KI0SM015 ;

  set KI0SM015.KUCCOID cursor, initialAttributes;
  set KI0SM015.KUMSTRID initialAttributes;

  KI0SW01.KI0SWCID = KI0SM015.KUCCOID;
  KI0SW01.KI0SWSID = KI0SM015.KUMSTRID;
  COMMAREA.CATOAP = KI0SM015.CATOAP;
  COMMAREA.CAITEM = KI0SM015.CAITEM;

  KI0SS01();

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";
  KI0SM015.CATOAP = " ";
  KI0SM015.CAITEM = " ";

end // end KI0S035

// init records used by appl
Function KI0SS-INIT-RECS()
   /* *****************************************************/
   /* initialize records used by ki0s*/
   /* *****************************************************/

  set KUCREC empty; /* initialize company record*/
  set KUMREC empty; /* initialize store record*/
  set SQLCA empty; /* initialize dbii error record*/
  set TA1REC empty; /* initialize error record*/
  set KI0SW01 empty;
  set KI0SW02 empty;
  set KI0SW03 empty;
  set KI0SW04 empty;
  set KI0SW05 empty;
  set KI0SW06 empty;
  set XA0AW02 empty;

end // end KI0SS-INIT-RECS

// check fastpath and pf keys
Function KI0SS01()

  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ") /* fastpath out*/
      KI0SS02(); /* purge temp work file*/
      if (COMMAREA.CAITEM == " ")
        COMMAREA.CAITEM = KI0SW01.KI0SWKEY;
      end
      if (COMMAREA.CATOSYS == "KM"
       || COMMAREA.CATOSYS == "KI"
       || COMMAREA.CATOSYS == "KU"
       || COMMAREA.CATOSYS == "KA")
        /* next sentence*/
      else
        COMMAREA.CAITEM = " ";
      end
      XSEXIT();
      KI0SW01.KI0SWMSG = COMMAREA.CAMSG;
      KI0SW01.KI0SWMOD = "Y";
      KI0SW01.KI0SWESF = "Y";
      KI0SW01.KI0SWSRN = "0";
    end
    return;
  end

  if (converseVar.eventKey is pf1) /* help*/
    KI0SS02(); /* purge temp work file*/
    XSPF1();
    KI0SW01.KI0SWMSG = COMMAREA.CAMSG;
    KI0SW01.KI0SWMOD = "Y";
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    return;
  end

  if (converseVar.eventKey is pf3) /* prior menu*/
    return;
  end

  if (converseVar.eventKey is pf4) /* main menu*/
    KI0SS02(); /* purge temp work file*/
    XSPF4();
    KI0SW01.KI0SWMSG = COMMAREA.CAMSG;
    KI0SW01.KI0SWMOD = "Y";
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.validationFailed(211); /* cancelled message*/
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end

  converseLib.validationFailed(3); /* invalid pf key*/

end // end KI0SS01

// purge temp work file
Function KI0SS02()

  KI0SW02.KI0SW2CT = 0;
  KI0SW02.KI0SW2AP = "KI0S";
  KI0SW02.KI0SW2RC = 0;
  KI0SW02.KI0SW2FC = "P"; /* purge temp work file*/

  set KI0SW03 empty;
  KI0SW03.KI0SW3LG = 72;

  call "TA0050" (KI0SW03, KI0SW02) {isNoRefresh = yes, isExternal = yes};

  if (KI0SW02.KI0SW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KI0SW01.KI0SWMOD = "Y";
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    converseLib.validationFailed(228);
  end

end // end KI0SS02

// check if store exists
Function KI0SS05()

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26); /* store not found*/
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KI0SS05";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KI0SW01.KI0SWCID = KUMREC.KUCCOID;
      KI0SW01.KI0SWSID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KI0SW01.KI0SWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

end // end KI0SS05

// check if company exists
Function KI0SS07()

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KI0SW01.KI0SWFST = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25);
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KI0SS07";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCMPNY01";
      KI0SW01.KI0SWCID = KUCREC.KUCCOID;
      KI0SW01.KI0SWSID = 0;
      TA1REC.TA1TBLKE = KI0SW01.KI0SWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  KI0SW01.KI0SWDSP = "Y";
  set XA0AW02 empty;
  XA0AW02.KUCCOID = KUCREC.KUCCOID;
  XA0AW02.KULAAID = KUCREC.KUCCOAID;
  XA0AW02.XA0AWFNC = "G";

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* read company address*/

  if (XA0AW02.XA0AWERR[1] != 0)
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    KI0SM020.KI0SM-ADDR3 = " ";
    KI0SM020.KI0SMADR = " ";
  else
    KI0SM020.KI0SM-ADDR3 = XA0AW02.XXX-ADDR3;
    KI0SW01.KI0SWADD = XA0AW02.XXXCITY;
  end

  KI0SM015.KUCCOID = KUCREC.KUCCOID;
  KI0SM005.KUCCOID = KUCREC.KUCCOID;
  KI0SM015.KUCCONM = KUCREC.KUCCONM;
  KI0SM015.KUCCOANM = KUCREC.KUCCOANM;
  KI0SM020.KUCCOID = KUCREC.KUCCOID;
  KI0SM020.KUCCONM = KUCREC.KUCCONM;
  KI0SM030.KUCCOID = KUCREC.KUCCOID;
  KI0SM030.KUCCONM = KUCREC.KUCCONM;

  if (KI0SW01.KI0SWADD == " ")
    return;
  end

  KI0SW01.KI0SWIND = 1;
  KI0SW01.KI0SWCT = 0;

  while (KI0SW01.KI0SWIND < 28)
    if (KI0SW01.KI0SWACL[KI0SWIND] == " ")
      KI0SW01.KI0SWCT = KI0SW01.KI0SWCT + 1;
      if (KI0SW01.KI0SWCT > 2)
        KI0SS09();
        KI0SW01.KI0SWIND = 30;
      end
    else
      KI0SW01.KI0SWCT = 0;
    end
    KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
  end

  KI0SM020.KI0SMADR = KI0SW01.KI0SWADD;
  KI0SM030.KI0SMADR = KI0SW01.KI0SWADD;

end // end KI0SS07

// move state and zip code
Function KI0SS09()

  KI0SW01.KI0SWIND = KI0SW01.KI0SWIND - 2;
  KI0SW01.KI0SWACL[KI0SWIND] = ",";
  if (XA0AW02.XSTCD != " ")
    KI0SW01.KI0SWST = XA0AW02.XSTCD;
    if (KI0SW01.KI0SWIND == 26)
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    else
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 2;
    end
    KI0SW01.KI0SWACL[KI0SWIND] = KI0SW01.KI0SWSCL[1];
    KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    KI0SW01.KI0SWACL[KI0SWIND] = KI0SW01.KI0SWSCL[2];

    if (KI0SW01.KI0SWSRN == "3"
     && KI0SM020.KI0SMOPT[5] == "N")
      return;
    end

    if (KI0SW01.KI0SWSRN == "3")
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 2;
    else
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 4;
    end

    KI0SW01.KI0SWZIP = XA0AW02.XXXZIP;
    KI0SW01.KI0SWIZX = 1;

    while (KI0SW01.KI0SWIZX < 6)
      KI0SW01.KI0SWACL[KI0SWIND] = KI0SW01.KI0SWZCL[KI0SWIZX];
      KI0SW01.KI0SWIZX = KI0SW01.KI0SWIZX + 1;
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    end
  else
    KI0SW01.KI0SWCTY = XA0AW02.XCTCD;
    if (KI0SW01.KI0SWIND == 26)
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    else
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 2;
    end
    KI0SW01.KI0SWICX = 1;
    while (KI0SW01.KI0SWICX < 5)
      KI0SW01.KI0SWACL[KI0SWIND] = KI0SW01.KI0SWCCL[KI0SWICX];
      KI0SW01.KI0SWICX = KI0SW01.KI0SWICX + 1;
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    end
  end

end // end KI0SS09

// select all stores
Function KI0SS12()

  KI0SW01.KI0SWCNT = 0;
  KI0SS02(); /* purge temp work file*/

  KUMREC.KUCCOID = KUCREC.KUCCOID;

  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KI0SS12";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KI0SW01.KI0SWCID = KUMREC.KUCCOID;
    KI0SW01.KI0SWSID = 0;
    TA1REC.TA1TBLKE = KI0SW01.KI0SWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

  KI0SW01.KI0SWEND = "N";
  while (KI0SW01.KI0SWEND == "N")
    KI0SS15(); /* build temp work file*/
  end

  KI0SW01.KI0SWHC = KI0SW01.KI0SWCNT;
  KI0SW01.KI0SWCNT = 0;

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

end // end KI0SS12

// load temp storage file
Function KI0SS15()

  set KI0SW03 empty;

  KI0SW01.KI0SWFND = "N";
  KI0SW01.KI0SWIDX = 1; /* index for record*/
  while (KI0SW01.KI0SWIDX < 13)
    KI0SS20(); /* select next store*/
    if (KI0SW01.KI0SWEND == "Y") /* no more stores*/
      KI0SW01.KI0SWIDX = 13;
    end
  end

  KI0SW01.KI0SWIDX = 1;

  if (KI0SW01.KI0SWFND == "Y") /* if any stores loaded*/
    /* next sentence*/
  else
    return;
  end

  set KI0SW02 empty;
  KI0SW02.KI0SW2RC = 0;
  KI0SW02.KI0SW2FC = "A";
  KI0SW02.KI0SW2AP = "KI0S";
  KI0SW01.KI0SWCNT = KI0SW01.KI0SWCNT + 1;
  KI0SW02.KI0SW2CT = KI0SW01.KI0SWCNT;
  KI0SW03.KI0SW3LG = 72;

  call "TA0050" (KI0SW03, KI0SW02) {isNoRefresh = yes, isExternal = yes};

  if (KI0SW02.KI0SW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KI0SW01.KI0SWEND = "Y";
    KI0SW01.KI0SWMOD = "Y";
    KI0SW01.KI0SWESF = "Y";
    KI0SW01.KI0SWSRN = "0";
    converseLib.validationFailed(228);
  end

  KI0SW01.KI0SWFIN = "Y";

end // end KI0SS15

// select next store
Function KI0SS20()

  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KI0SW01.KI0SWEND = "Y";
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KI0SS20";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (KI0SW01.KI0SWSRN == "1")
    KI0SW01.KI0SWFND = "Y";
    KI0SW01.KI0SWHDX = KI0SW01.KI0SWIDX;
    KI0SW03.KUMSTRID[KI0SWIDX] = KUMREC.KUMSTRID;
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
    return;
  end

  if (KI0SM020.KI0SMOPT[1] == "Y"
   || KI0SM020.KI0SMOPT[2] == "Y")
    /* next sentence*/
  else
    KI0SW01.KI0SWFND = "Y";
    KI0SW01.KI0SWHDX = KI0SW01.KI0SWIDX;
    KI0SW03.KUMSTRID[KI0SWIDX] = KUMREC.KUMSTRID;
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
    KI0SW01.KI0SWTOT = KI0SW01.KI0SWTOT + 1;
    return;
  end

  set XA0AW02 empty;
  if (KI0SM020.KI0SMOPT[1] == "Y")
    XA0AW02.KULAAID = KUMREC.KUMSTAID;
  else
    XA0AW02.KULAAID = KUMREC.KUMSHAID;
  end

  XA0AW02.KUCCOID = KUMREC.KUCCOID;
  XA0AW02.XA0AWFNC = "G";

  call "XA0A" (XA0AW02) {isNoRefresh = yes};

  if (XA0AW02.XA0AWERR[1] != 0)
    set XA0AW02 empty;
  end

  if (KI0SM020.XCTCD == XA0AW02.XCTCD)
    if (KI0SM020.XSTCD == XA0AW02.XSTCD
     || KI0SM020.XSTCD == " ")
      if (KI0SM020.XXXCITY == XA0AW02.XXXCITY
       || KI0SM020.XXXCITY == " ")
        KI0SW01.KI0SWFND = "Y";
        KI0SW01.KI0SWHDX = KI0SW01.KI0SWIDX;
        KI0SW03.KUMSTRID[KI0SWIDX] = KUMREC.KUMSTRID;
        KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
        KI0SW01.KI0SWTOT = KI0SW01.KI0SWTOT + 1;
      end
    end
  end

end // end KI0SS20

// search for store
Function KI0SS21()

  KI0SW01.KI0SWCNT = 0;
  KI0SW01.KI0SWSRH = "N"; /* switch indicates store found*/
  while (KI0SW01.KI0SWSRH == "N")
    KI0SS22(); /* read temp work file*/
    KI0SW01.KI0SWIDX = 1;
    KI0SW01.KI0SWLST = "N"; /* switch for last store on rec.*/
    while (KI0SW01.KI0SWLST == "N")
      if (KI0SW03.KUMSTRID[KI0SWIDX] == KI0SW01.KI0SWSID)
        KI0SW01.KI0SWLST = "Y";
        KI0SW01.KI0SWSRH = "Y";
        KI0SW01.KI0SWFST = "N";
      else
        KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
        if (KI0SW01.KI0SWIDX > KI0SW01.KI0SWCDX)
          KI0SW01.KI0SWLST = "Y";
        end
      end
    end
  end

end // end KI0SS21

// read temp work file
Function KI0SS22()

  KI0SW02.KI0SW2RC = 0;
  KI0SW03.KI0SW3LG = 72;
  KI0SW01.KI0SWCNT = KI0SW01.KI0SWCNT + 1;
  KI0SW02.KI0SW2CT = KI0SW01.KI0SWCNT;
  KI0SW02.KI0SW2FC = "R";
  KI0SW02.KI0SW2AP = "KI0S";

  if (KI0SW01.KI0SWCNT > KI0SW01.KI0SWHC)
    converseLib.validationFailed(206); /* end of data*/
    KI0SW01.KI0SWCNT = KI0SW01.KI0SWHC;
    return;
  end

  call "TA0050" (KI0SW03, KI0SW02) {isNoRefresh = yes, isExternal = yes};

  if (KI0SW02.KI0SW2RC == 0)
    /* next sentence*/
  else
    if (KI0SW02.KI0SW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KI0SW01.KI0SWCNT = KI0SW01.KI0SWHC;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      KI0SW01.KI0SWMOD = "Y";
      KI0SW01.KI0SWESF = "Y";
      KI0SW01.KI0SWSRN = "0";
      converseLib.validationFailed(228);
    end
  end

  if (KI0SW01.KI0SWCNT >= KI0SW01.KI0SWHC)
    KI0SW01.KI0SWCDX = KI0SW01.KI0SWHDX;
  else
    KI0SW01.KI0SWCDX = 12;
  end

end // end KI0SS22

// move data to screen
Function KI0SS25()

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL.*/


   /* *************************************************************/

  KUMREC.KUCCOID = KUCREC.KUCCOID;

  KI0SS05(); /* read store*/

  if (converseVar.validationMsgNum != 0) /* store not found*/
    return;
  end

  KI0SM015.KUMSTRID = KUMREC.KUMSTRID;
  KI0SM015.KUMSTRNM = KUMREC.KUMSTRNM;
  KI0SM015.KUMPHN = KUMREC.KUMPHN;
  KI0SM015.XXXFAX = KUMREC.XXXFAX;
  KI0SM015.KUMDMIND = KUMREC.KUMDMIND;
  KI0SM015.CU-OFSHR-FL = KUMREC.CU-OFSHR-FL;
  KI0SM015.XCFCD = KUMREC.XCFCD;
  KI0SM015.KUMXNIAP = KUMREC.KUMXNIAP;
  KI0SM015.YSVCD = KUMREC.YSVCD;
  KI0SM015.KUMXNIFT = KUMREC.KUMXNIFT;
  KI0SM015.KUMSLFID = KUMREC.KUMSLFID;
  KI0SM015.KUMDCIND = KUMREC.KUMDCIND;
  KI0SM015.KUMNRSVC = KUMREC.KUMNRSVC;
  KI0SM015.XXXSTAT = KUMREC.XXXSTAT;
  KI0SM015.XIDCD = KUMREC.XIDCD;
  KI0SM015.XGPCD[1] = KUMREC.XGPCD[1];
  KI0SM015.XGPCD[2] = KUMREC.XGPCD[2];
  KI0SM015.XGPCD[3] = KUMREC.XGPCD[3];
  KI0SM015.XWHCD[1] = KUMREC.XWHCD[1];
  KI0SM015.XWHCD[2] = KUMREC.XWHCD[2];
  KI0SM015.XWHCD[3] = KUMREC.XWHCD[3];

  KI0SM015.KUMRQRWF = KUMREC.KUMRQRWF;
  KI0SM015.KUMRQLBF = KUMREC.KUMRQLBF;
  KI0SM015.KUMRQDSF = KUMREC.KUMRQDSF;
  KI0SM015.KUMRQPKF = KUMREC.KUMRQPKF;

  KI0SW01.KI0SWINX = 1;
  while (KI0SW01.KI0SWINX < 4) /* find abbreviations for*/
    if (KI0SM015.XGPCD[KI0SWINX] != " ") /* gpc's and warehouses*/
      if (KI0SM015.XGPCD[KI0SWINX] in XGPTBL.XGPCD)
        KI0SM015.XGPABRV[KI0SWINX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      end
    else
      KI0SM015.XGPABRV[KI0SWINX] = " ";
    end
    if (KI0SM015.XWHCD[KI0SWINX] != " ")
      if (KI0SM015.XWHCD[KI0SWINX] in XWHTBL.XWHCD)
        KI0SM015.XWHSABRV[KI0SWINX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      end
    else
      KI0SM015.XWHSABRV[KI0SWINX] = " ";
    end
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
  end

  set XA0AW02 empty;
  XA0AW02.KUCCOID = KUMREC.KUCCOID;
  XA0AW02.KULAAID = KUMREC.KUMSTAID;
  KI0SM015.KUMSTAID = KUMREC.KUMSTAID;
  KI0SM015.KUMSHAID = KUMREC.KUMSHAID;
  XA0AW02.XA0AWFNC = "G";

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* read store address*/

  if (XA0AW02.XA0AWERR[1] != 0)
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    set KI0SM015.KUMSTAID skip, bold;
    KI0SM015.KI0SM-ADDR1[1] = " ";
    KI0SM015.KI0SM-ADDR2[1] = " ";
    KI0SM015.KI0SM-ADDR3[1] = " ";
    KI0SM015.KI0SMAD4[1] = " ";
    KI0SM015.KI0SMAD5[1] = " ";
  else
    if (XA0AW02.XXXZIP == "0000000000"
     || XA0AW02.XXXZIP == "000000000 "
     || XA0AW02.XXXZIP == "00000     ")
      XA0AW02.XXXZIP = " ";
    end
    KI0SW01.XXXCITY = XA0AW02.XXXCITY;
    KI0SW01.XSTCD = XA0AW02.XSTCD;
    KI0SW01.XXXZIP = XA0AW02.XXXZIP;
    KI0SW01.XCTCD = XA0AW02.XCTCD;
    if (XA0AW02.XXX-ADDR1 == " "
     && XA0AW02.XXX-ADDR2 == " ")
      KI0SM015.KI0SM-ADDR1[1] = XA0AW02.XXX-ADDR3;
      KI0SM015.KI0SM-ADDR2[1] = KI0SW01.KI0SWAD1;
      KI0SM015.KI0SM-ADDR3[1] = KI0SW01.KI0SWAD2;
      KI0SM015.KI0SMAD4[1] = " ";
      KI0SM015.KI0SMAD5[1] = " ";
    else
      if (XA0AW02.XXX-ADDR1 == " ")
        KI0SM015.KI0SM-ADDR1[1] = XA0AW02.XXX-ADDR2;
        KI0SM015.KI0SM-ADDR2[1] = XA0AW02.XXX-ADDR3;
        KI0SM015.KI0SM-ADDR3[1] = KI0SW01.KI0SWAD1;
        KI0SM015.KI0SMAD4[1] = KI0SW01.KI0SWAD2;
        KI0SM015.KI0SMAD5[1] = " ";
      else
        KI0SM015.KI0SM-ADDR1[1] = XA0AW02.XXX-ADDR1;
        KI0SM015.KI0SM-ADDR2[1] = XA0AW02.XXX-ADDR2;
        KI0SM015.KI0SM-ADDR3[1] = XA0AW02.XXX-ADDR3;
        KI0SM015.KI0SMAD4[1] = KI0SW01.KI0SWAD1;
        KI0SM015.KI0SMAD5[1] = KI0SW01.KI0SWAD2;
      end
    end
  end

  set XA0AW02 empty;
  XA0AW02.KUCCOID = KUMREC.KUCCOID;
  XA0AW02.KULAAID = KUMREC.KUMSHAID;
  XA0AW02.XA0AWFNC = "G";

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* read ship group address*/

  if (XA0AW02.XA0AWERR[1] != 0)
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    set KI0SM015.KUMSHAID skip, bold;
    KI0SM015.KI0SM-ADDR1[2] = " ";
    KI0SM015.KI0SM-ADDR2[2] = " ";
    KI0SM015.KI0SM-ADDR3[2] = " ";
    KI0SM015.KI0SMAD4[2] = " ";
    KI0SM015.KI0SMAD5[2] = " ";
  else
    if (XA0AW02.XXXZIP == "0000000000"
     || XA0AW02.XXXZIP == "000000000 "
     || XA0AW02.XXXZIP == "00000     ")
      XA0AW02.XXXZIP = " ";
    end
    KI0SW01.XXXCITY = XA0AW02.XXXCITY;
    KI0SW01.XSTCD = XA0AW02.XSTCD;
    KI0SW01.XXXZIP = XA0AW02.XXXZIP;
    KI0SW01.XCTCD = XA0AW02.XCTCD;
    if (XA0AW02.XXX-ADDR1 == " "
     && XA0AW02.XXX-ADDR2 == " ")
      KI0SM015.KI0SM-ADDR1[2] = XA0AW02.XXX-ADDR3;
      KI0SM015.KI0SM-ADDR2[2] = KI0SW01.KI0SWAD1;
      KI0SM015.KI0SM-ADDR3[2] = KI0SW01.KI0SWAD2;
      KI0SM015.KI0SMAD4[2] = " ";
      KI0SM015.KI0SMAD5[2] = " ";
    else
      if (XA0AW02.XXX-ADDR1 == " ")
        KI0SM015.KI0SM-ADDR1[2] = XA0AW02.XXX-ADDR2;
        KI0SM015.KI0SM-ADDR2[2] = XA0AW02.XXX-ADDR3;
        KI0SM015.KI0SM-ADDR3[2] = KI0SW01.KI0SWAD1;
        KI0SM015.KI0SMAD4[2] = KI0SW01.KI0SWAD2;
        KI0SM015.KI0SMAD5[2] = " ";
      else
        KI0SM015.KI0SM-ADDR1[2] = XA0AW02.XXX-ADDR1;
        KI0SM015.KI0SM-ADDR2[2] = XA0AW02.XXX-ADDR2;
        KI0SM015.KI0SM-ADDR3[2] = XA0AW02.XXX-ADDR3;
        KI0SM015.KI0SMAD4[2] = KI0SW01.KI0SWAD1;
        KI0SM015.KI0SMAD5[2] = KI0SW01.KI0SWAD2;
      end
    end
  end

end // end KI0SS25

// move data to screen ki0sm030
Function KI0SS30()

  KI0SW01.KI0SWLNX = KI0SW01.KI0SWLNX + 1;

  if (KI0SW01.KI0SWLNX < 13)
    /* next sentence*/
  else
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX - 1;
    if (KI0SW01.KI0SWUPD == "Y")
      KI0SS32(); /* update temp work file*/
    end
    KI0SW01.KI0SWEND = "Y";
    return;
  end

  if (KI0SW01.KI0SWCNT == 1
   && KI0SW01.KI0SWIDX == 1)
    KI0SW01.KI0SWECT = 1;
  end

  if (KI0SM020.KI0SMOPT[5] == "N")
    if (KI0SW01.KI0SWSSW[KI0SWLNX] == "Y")
      set KI0SM030.KI0SMDTA[KI0SWLNX] skip, bold;
      KI0SW01.KI0SWSSW[KI0SWLNX] = "N";
    end
  end

  set KI0SW05 empty;
  set KI0SW06 empty;

  if (KI0SW01.KI0SWIDX > KI0SW01.KI0SWCDX)
    if (KI0SW01.KI0SWCNT >= KI0SW01.KI0SWHC)
      KI0SW01.KI0SWIDX = KI0SW01.KI0SWHDX;
    else
      KI0SW01.KI0SWIDX = 1;
    end
    KI0SS22();
    if (converseVar.validationMsgNum != 0)
      KI0SW01.KI0SWEND = "Y";
      if (KI0SW01.KI0SWUPD == "Y")
        KI0SS32(); /* update temp work file*/
      end
      KI0SW01.KI0SWUPD = "N";
      return;
    end
    KI0SW01.KI0SWFST = "Y";
  end

  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KI0SW03.KUMSTRID[KI0SWIDX];

  KI0SS05();

  if (converseVar.validationMsgNum != 0)
    return;
  end

  set XA0AW02 empty;
  if (KI0SM020.KI0SMOPT[1] == "Y")
    XA0AW02.KULAAID = KUMREC.KUMSTAID;
  else
    if (KI0SM020.KI0SMOPT[2] == "Y")
      XA0AW02.KULAAID = KUMREC.KUMSHAID;
    end
  end

  if (KI0SM020.KI0SMOPT[1] == "Y"
   || KI0SM020.KI0SMOPT[2] == "Y")
    XA0AW02.KUCCOID = KUMREC.KUCCOID;
    XA0AW02.XA0AWFNC = "G";

    call "XA0A" (XA0AW02) {isNoRefresh = yes};

    if (XA0AW02.XA0AWERR[1] != 0)
      set XA0AW02 empty;
    end
  end

  KI0SW01.KI0SWRED = "N";
  if (KI0SM020.KI0SMOPT[3] == "Y")
    if (KUMREC.KUMSTAID == XA0AW02.KULAAID)
      /* next sentence*/
    else
      set XA0AW02 empty;
      XA0AW02.KULAAID = KUMREC.KUMSTAID;
      KI0SW01.KI0SWRED = "Y";
    end
  else
    if (KUMREC.KUMSHAID == XA0AW02.KULAAID)
      /* next sentence*/
    else
      set XA0AW02 empty;
      XA0AW02.KULAAID = KUMREC.KUMSHAID;
      KI0SW01.KI0SWRED = "Y";
    end
  end

  if (KI0SW01.KI0SWRED == "Y")
    XA0AW02.KUCCOID = KUMREC.KUCCOID;
    XA0AW02.XA0AWFNC = "G";

    call "XA0A" (XA0AW02) {isNoRefresh = yes};

    if (XA0AW02.XA0AWERR[1] != 0)
      set XA0AW02 empty;
    end
  end

  if (XA0AW02.XXXCITY != " ")
    KI0SW01.KI0SWADD = XA0AW02.XXXCITY;
    KI0SW01.KI0SWIND = 1;
    KI0SW01.KI0SWCT = 0;

    while (KI0SW01.KI0SWIND < 28)
      if (KI0SW01.KI0SWACL[KI0SWIND] == " ")
        KI0SW01.KI0SWCT = KI0SW01.KI0SWCT + 1;
        if (KI0SW01.KI0SWCT > 2)
          KI0SS09();
          KI0SW01.KI0SWIND = 30;
        end
      else
        KI0SW01.KI0SWCT = 0;
      end
      KI0SW01.KI0SWIND = KI0SW01.KI0SWIND + 1;
    end
  end

  if (KI0SW01.KI0SWLNX == 1)
    KI0SW01.KI0SWHC2 = KI0SW01.KI0SWHC1;
    KI0SW01.KI0SWHC1 = KI0SW01.KI0SWCNT;
    KI0SW01.KI0SWHX2 = KI0SW01.KI0SWHX1;
    KI0SW01.KI0SWHX1 = KI0SW01.KI0SWIDX;
  end

  KI0SW01.KUMSTRID[KI0SWLNX] = KUMREC.KUMSTRID;

  if (KI0SM020.KI0SMOPT[5] == "N")
    KI0SW05.KI0SW5SI = KUMREC.KUMSTRID;
    KI0SW05.KI0SW5SN = KUMREC.KUMSTRNM;
    KI0SW05.KI0SW5DC = KUMREC.KUMDCIND;
    KI0SW05.KI0SW5ST = KUMREC.XXXSTAT;
    if (KI0SM020.KI0SMOPT[3] == "Y")
      KI0SW05.KI0SW5AI = KUMREC.KUMSTAID;
    else
      KI0SW05.KI0SW5AI = KUMREC.KUMSHAID;
    end
    KI0SW05.KI0SW5AD = KI0SW01.KI0SWADD;
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
    set KI0SM030.KI0SMSEL[KI0SWINX] initialAttributes;
    KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW05.KI0SW5GP;
    KI0SW01.KI0SWLC = KI0SW01.KI0SWLC + 1;
    KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
    return;
  end

  if (XA0AW02.XXX-ADDR1 != " ")
    KI0SW01.KI0SWLNX = KI0SW01.KI0SWLNX + 3;
  else
    if (XA0AW02.XXX-ADDR2 != " ")
      KI0SW01.KI0SWLNX = KI0SW01.KI0SWLNX + 2;
    else
      KI0SW01.KI0SWLNX = KI0SW01.KI0SWLNX + 1;
    end
  end

  if (KI0SW01.KI0SWLNX > 12)
    KI0SW01.KI0SWEND = "Y";
    if (KI0SW01.KI0SWIDX > 1)
      KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX - 1;
      if (KI0SW03.KI0SW3DX[KI0SWIDX] == 0)
        KI0SS32(); /* update temp work file*/
      end
    else
      if (KI0SW01.KI0SWCNT > 1)
        KI0SW01.KI0SWCNT = KI0SW01.KI0SWCNT - 2;
      else
        KI0SW01.KI0SWCNT = 0;
      end
      KI0SW01.KI0SWIDX = 12;
      KI0SS22();
      if (KI0SW03.KI0SW3DX[KI0SWIDX] == 0)
        KI0SS32(); /* update temp work file*/
      end
    end
    return;
  end

  KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
  KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;

  KI0SW05.KI0SW5SI = KUMREC.KUMSTRID;
  KI0SW05.KI0SW5SN = KUMREC.KUMSTRNM;
  KI0SW05.KI0SW5DC = KUMREC.KUMDCIND;
  KI0SW05.KI0SW5ST = KUMREC.XXXSTAT;
  if (KI0SM020.KI0SMOPT[3] == "Y")
    KI0SW05.KI0SW5AI = KUMREC.KUMSTAID;
  else
    KI0SW05.KI0SW5AI = KUMREC.KUMSHAID;
  end

  if (XA0AW02.XXX-ADDR1 != " ")
    KI0SW06.KI0SW6FL = ".";
    KI0SW05.KI0SW5AD = XA0AW02.XXX-ADDR1;
    KI0SW01.KI0SWLC = KI0SW01.KI0SWLC + 1;
    set KI0SM030.KI0SMSEL[KI0SWINX] initialAttributes;
    KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW05.KI0SW5GP;
    KI0SW06.KI0SW6AD = XA0AW02.XXX-ADDR2;
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
    KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
    set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
    KI0SW06.KI0SW6AD = XA0AW02.XXX-ADDR3;
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
    KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
    set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
    KI0SW06.KI0SW6AD = KI0SW01.KI0SWADD;
    KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
    KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
    set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
  else
    if (XA0AW02.XXX-ADDR2 != " ")
      KI0SW06.KI0SW6FL = ".";
      KI0SW05.KI0SW5AD = XA0AW02.XXX-ADDR2;
      KI0SW01.KI0SWLC = KI0SW01.KI0SWLC + 1;
      set KI0SM030.KI0SMSEL[KI0SWINX] initialAttributes;
      KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW05.KI0SW5GP;
      KI0SW06.KI0SW6AD = XA0AW02.XXX-ADDR3;
      KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
      KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
      set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
      KI0SW06.KI0SW6AD = KI0SW01.KI0SWADD;
      KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
      KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
      set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
    else
      KI0SW06.KI0SW6FL = ".";
      KI0SW05.KI0SW5AD = XA0AW02.XXX-ADDR3;
      KI0SW01.KI0SWLC = KI0SW01.KI0SWLC + 1;
      set KI0SM030.KI0SMSEL[KI0SWINX] initialAttributes;
      KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW05.KI0SW5GP;
      KI0SW06.KI0SW6AD = KI0SW01.KI0SWADD;
      KI0SW01.KI0SWINX = KI0SW01.KI0SWINX + 1;
      KI0SM030.KI0SMDTA[KI0SWINX] = KI0SW06.KI0SW6GP;
      set KI0SM030.KI0SMSEL[KI0SWINX] skip, invisible;
    end
  end

end // end KI0SS30

// update temp work file
Function KI0SS32()

  KI0SW03.KI0SW3DX[KI0SWIDX] = KI0SW01.KI0SWHX2;
  KI0SW03.KI0SW3CT[KI0SWIDX] = KI0SW01.KI0SWHC2;

  KI0SW02.KI0SW2RC = 0;
  KI0SW03.KI0SW3LG = 72;
  KI0SW2CT = KI0SW01.KI0SWCNT;
  KI0SW02.KI0SW2FC = "U";
  KI0SW02.KI0SW2AP = "KI0S";

  call "TA0050" (KI0SW03, KI0SW02) {isNoRefresh = yes, isExternal = yes};

  if (KI0SW02.KI0SW2RC == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KI0SS32";
    TA1REC.TA1LOC = "UPDATE TEMP FILE";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

end // end KI0SS32

// search for store
Function KI0SS35()

  KI0SW01.KI0SWCNT = 0;
  KI0SW01.KI0SWSRH = "N"; /* switch indicates store found*/
  while (KI0SW01.KI0SWSRH == "N")
    KI0SS22(); /* read temp work file*/
    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(227);
      KI0SW01.KI0SWCNT = KI0SW01.KI0SWHNT;
      KI0SW01.KI0SWIDX = KI0SW01.KI0SWHHX;
      KI0SW01.KI0SWSRH = "Y";
    else
      KI0SW01.KI0SWIDX = 1;
      KI0SW01.KI0SWLST = "N"; /* switch for last store on rec.*/
      while (KI0SW01.KI0SWLST == "N")
        if (KI0SW03.KUMSTRID[KI0SWIDX] == KI0SW01.KI0SWSID)
          KI0SW01.KI0SWSSW[KI0SWIDX] = "Y";
          KI0SW01.KI0SWIDX = 1;
          KI0SW01.KI0SWLST = "Y";
          KI0SW01.KI0SWSRH = "Y";
          KI0SW01.KI0SWSKP = "N";
          KI0SW01.KI0SWFST = "N";
        else
          KI0SW01.KI0SWIDX = KI0SW01.KI0SWIDX + 1;
          if (KI0SW01.KI0SWIDX > KI0SW01.KI0SWCDX)
            KI0SW01.KI0SWLST = "Y";
          end
        end
      end
    end
  end

end // end KI0SS35

//*** RECORD=KI0SW01 ****
// maintenance:
// DATE          USERID          DESC. OF CHANGE
// ----          ------          ---------------------------
// 19 JULY 93    DCAUST          For EAW project:
//                               add character fields for
//                               ki0swkey.
// ***********************
Record KI0SW01 type basicRecord
  5 KI0SWGRP KI0SWGRP ; 
    10 KI0SWSRN KI0SWSRN ; 
    10 KI0SWEAF KI0SWEAF ; 
    10 KI0SWESF KI0SWESF ; 
    10 KI0SWMSG KI0SWMSG ; 
    10 KI0SWEND KI0SWEND ; 
    10 KI0SWDSP KI0SWDSP ; 
    10 KI0SWKEY KI0SWKEY ; 
      15 KI0SWCID KI0SWCID ; 
        20 KI0SWCID-CHAR KI0SWCID-CHAR ; 
      15 KI0SWSID KI0SWSID ; 
        20 KI0SWSID-CHAR KI0SWSID-CHAR ; 
    10 KI0SWCNT KI0SWCNT ; 
    10 KI0SWTOT KI0SWTOT ; 
    10 KI0SWECT KI0SWECT ; 
    10 KI0SWCT KI0SWCT ; 
    10 KI0SWHC KI0SWHC ; 
    10 KI0SWHL KI0SWHL ; 
    10 KI0SWLC KI0SWLC ; 
    10 KI0SWLC1 KI0SWLC1 ; 
    10 KI0SWMOD KI0SWMOD ; 
    10 KI0SWFND KI0SWFND ; 
    10 KI0SWFIN KI0SWFIN ; 
    10 KI0SWRED KI0SWRED ; 
    10 KI0SWSKP KI0SWSKP ; 
    10 KI0SWLST KI0SWLST ; 
    10 KI0SWUPD KI0SWUPD ; 
    10 KI0SWHNT KI0SWHNT ; 
    10 KI0SWSCX KI0SWSCX ; 
    10 KI0SWHHX KI0SWHHX ; 
    10 KI0SWSRH KI0SWSRH ; 
    10 KI0SWIDX KI0SWIDX ; 
    10 KUMSTRID KUMSTRID [12] ; 
    10 KI0SWSSW KI0SWSSW [12] ; 
    10 KI0SWHDX KI0SWHDX ; 
    10 KI0SWCDX KI0SWCDX ; 
    10 KI0SWINX KI0SWINX ; 
    10 KI0SWSDX KI0SWSDX ; 
    10 KI0SWIZX KI0SWIZX ; 
    10 KI0SWICX KI0SWICX ; 
    10 KI0SWLNX KI0SWLNX ; 
    10 KI0SWHX1 KI0SWHX1 ; 
    10 KI0SWTDX KI0SWTDX ; 
    10 KI0SWHX2 KI0SWHX2 ; 
    10 KI0SWHC1 KI0SWHC1 ; 
    10 KI0SWHC2 KI0SWHC2 ; 
    10 KI0SWIND KI0SWIND ; 
    10 KI0SWFST KI0SWFST ; 
    10 KI0SWDTE KI0SWDTE ; 
      15 KI0SWCCD KI0SWCCD ; 
      15 KI0SWYDT KI0SWYDT ; 
      15 KI0SWMDT KI0SWMDT ; 
      15 KI0SWDDT KI0SWDDT ; 
    10 KI0SWAD1 KI0SWAD1 ; 
      15 XXXCITY XXXCITY ; 
      15 * char(3) ; 
      15 XSTCD XSTCD ; 
    10 KI0SWAD2 KI0SWAD2 ; 
      15 XXXZIP XXXZIP ; 
      15 * char(4) ; 
      15 XCTCD XCTCD ; 
      15 * char(12) ; 
    10 KI0SWBDT KI0SWBDT ; 
      15 KI0SWMTH KI0SWMTH ; 
      15 KI0SWDIV KI0SWDIV ; 
      15 KI0SWYR KI0SWYR ; 
    10 * char(1) ; 
    10 KI0SWADD KI0SWADD ; 
      15 KI0SWACL KI0SWACL [40] ; 
    10 * char(1) ; 
    10 KI0SWST KI0SWST ; 
      15 KI0SWSCL KI0SWSCL [2] ; 
    10 * char(1) ; 
    10 KI0SWZIP KI0SWZIP ; 
      15 KI0SWZCL KI0SWZCL [5] ; 
    10 * char(3) ; 
    10 KI0SWCTY KI0SWCTY ; 
      15 KI0SWCCL KI0SWCCL [4] ; 
    10 * char(1) ; 
    10 KI0SWST1 KI0SWST1 ; 
      15 KI0SWSTR KI0SWSTR ; 
      15 * char(11) ; 
    10 KI0SWTTE KI0SWTTE ; 
      15 KI0SWTNM KI0SWTNM ; 
      15 KI0SWTTL KI0SWTTL ; 
    10 KI0SW-SAP-ROW-COUNT KI0SW-SAP-ROW-COUNT ; 
end // end KI0SW01

Record KI0SW02 type basicRecord
  5 KI0SW2RL KI0SW2RL ; 
    10 KI0SW2AP KI0SW2AP ; 
    10 KI0SW2CT KI0SW2CT ; 
    10 KI0SW2FC KI0SW2FC ; 
    10 KI0SW2RC KI0SW2RC ; 
end // end KI0SW02

Record KI0SW03 type basicRecord
  5 KI0SW3RL KI0SW3RL ; 
    10 KI0SW3LG KI0SW3LG ; 
    10 KUMSTRID KUMSTRID [12] ; 
    10 KI0SW3DX KI0SW3DX [12] ; 
    10 KI0SW3CT KI0SW3CT [12] ; 
end // end KI0SW03

Record KI0SW04 type basicRecord
  5 KI0SW4RL KI0SW4RL ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
end // end KI0SW04

Record KI0SW05 type basicRecord
  5 KI0SW5GP KI0SW5GP ; 
    10 KI0SW5SI KI0SW5SI ; 
    10 * char(1) ; 
    10 KI0SW5SN KI0SW5SN ; 
    10 * char(1) ; 
    10 KI0SW5AI KI0SW5AI ; 
    10 * char(1) ; 
    10 KI0SW5AD KI0SW5AD ; 
    10 * char(1) ; 
    10 KI0SW5DC KI0SW5DC ; 
    10 * char(1) ; 
    10 KI0SW5ST KI0SW5ST ; 
end // end KI0SW05

Record KI0SW06 type basicRecord
  5 KI0SW6GP KI0SW6GP ; 
    10 KI0SW6FL KI0SW6FL ; 
    10 KI0SW6AD KI0SW6AD ; 
end // end KI0SW06

// COUNT ROWS FOUND OF VCUSAP01
DataItem KI0SW-SAP-ROW-COUNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application
DataItem KI0SW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KI0SW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KI0SW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KI0SW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0SW2RL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record count
DataItem KI0SW3CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store index
DataItem KI0SW3DX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record length
DataItem KI0SW3LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0SW3RL char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SW4RL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address
DataItem KI0SW5AD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address id
DataItem KI0SW5AI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// distribution center
DataItem KI0SW5DC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SW5GP char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KI0SW5SI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store name
DataItem KI0SW5SN char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status
DataItem KI0SW5ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SW6AD char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SW6FL char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SW6GP char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWACL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address line
DataItem KI0SWAD1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWAD2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWADD char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWBDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem KI0SWCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWCCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check index
DataItem KI0SWCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id numeric
DataItem KI0SWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id character
DataItem KI0SWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record count
DataItem KI0SWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// column count
DataItem KI0SWCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0SWCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem KI0SWDDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// separator
DataItem KI0SWDIV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display select count switch
DataItem KI0SWDSP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date for database format
DataItem KI0SWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of application flag
DataItem KI0SWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error count
DataItem KI0SWECT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of select switch
DataItem KI0SWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem KI0SWESF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store found indicator
DataItem KI0SWFIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store found switch
DataItem KI0SWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last store
DataItem KI0SWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWGRP char(373)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold count
DataItem KI0SWHC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold count 1
DataItem KI0SWHC1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold count 2
DataItem KI0SWHC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold index
DataItem KI0SWHDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold index
DataItem KI0SWHHX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold line
DataItem KI0SWHL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold count
DataItem KI0SWHNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold index 1
DataItem KI0SWHX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold index 2
DataItem KI0SWHX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// country index
DataItem KI0SWICX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store index
DataItem KI0SWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KI0SWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc/whse index
DataItem KI0SWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zip code index
DataItem KI0SWIZX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// database key
DataItem KI0SWKEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line count
DataItem KI0SWLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first line
DataItem KI0SWLC1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem KI0SWLNX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of work rec
DataItem KI0SWLST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KI0SWMDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified switch
DataItem KI0SWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// messages
DataItem KI0SWMSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KI0SWMTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// read switch
DataItem KI0SWRED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem KI0SWSCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select index
DataItem KI0SWSDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id numeric
DataItem KI0SWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id character
DataItem KI0SWSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// skip read
DataItem KI0SWSKP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of search
DataItem KI0SWSRH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen switch
DataItem KI0SWSRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// search switch
DataItem KI0SWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWST1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store number
DataItem KI0SWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp index
DataItem KI0SWTDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0SWTNM char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total store count
DataItem KI0SWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KI0SWTTE char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWTTL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update switch
DataItem KI0SWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KI0SWYDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KI0SWYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWZCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KI0SWZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

