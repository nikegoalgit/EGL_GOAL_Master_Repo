package ki0p;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import ku.common.KUKREC;
import ku.common.KUWREC;
import ta.common.TA1REC;
//*** PROGRAM=KI0P ****
// ----------------  KI0P PARENT INQUIRY  ---------------------
// 
// overview:  this application allows inquiry to parent info.
// 
// date written: 06/86
// author:       grant gilray
// 
// 11/11/88  jwood   added noncsp option to calls
// 11/11/88  jwood   added xssegtr logic
// 05/13/91  dsalzw  removed all inquiry security
// 05/16/91  dsalzw  chg pf3 to return to from appl
// 10/01/93  CHELLM  CSP 4.1 Conversion.
// 11/20/97  rgilli  Y2K MODIFICATIONS MADE TO:
//                   KI0PM010: Zero fill month & year field.
// *********************
Program KI0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KI0PW01 KI0PW01; // record
  KUKREC KUKREC; // record
  KUWREC KUWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KI0PM.KI0PM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KI0P015: KI0P015();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/
    ;
    ;
    if (KI0PM010.KUKPCOID > 0) /* if parent id passed to app*/
      goto KI0P016; /* read parent and format screen*/
    else /* else(key not supplied)*/
      goto KI0P020; /* converse screen*/
    end /* end of "if" statement*/
    ;
    ;
     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KI0P016: KI0P016();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/
    ;
    ;
    if (converseVar.validationMsgNum == 0) /* if parent found*/
      goto KI0P018; /* proceed to next process*/
    else /* else(parent not found)*/
      goto KI0P020; /* converse screen with error*/
    end /* end of "if" statement*/
    ;
    ;
     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KI0P018: KI0P018();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/
    ;
    ;
    goto KI0P020; /* proceed to next process*/
    ;
    ;
     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KI0P020: KI0P020();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/
    ;
    ;
    if (converseVar.eventKey is pa2)
      goto KI0P016;
    else
      if (converseVar.validationMsgNum != 41)
        if (KI0PM010.KUKPCOID != KI0PW01.KI0PWLPI)
          KI0PW01.KI0PWPID = KI0PM010.KUKPCOID;
          set KI0PM010 initial;
          goto KI0P016;
        else
          /* next sentence*/
        end
      else
        /* next sentence*/
      end
      if (converseVar.validationMsgNum == 0)
        goto KI0P020;
      else
        set KI0PM010 alarm;
        goto KI0P020;
      end
    end
    ;
    ;
     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
  end // end main
end // end KI0P

// init inquire parent screen
Function KI0P015()
  ;
  ;
   /* *************************************************************/
   /* *****   i n i t i a l   i n q u i r e    p a r e n t   ******/
   /* *****                p r o c e s s i n g               ******/
   /* *************************************************************/
  ;
  ;
  XSENTRY(); /* standard startup statement*/
  ;
  XSSEGTR(); /* 11/88 jbw - set segmented trans id*/
  ;
  KI0PS-INIT-RECS(); /* INITIALIZE APPLICATION RECORDS*/
  ;
  KI0PW01.KI0PWGRP = COMMAREA.CAUSERA;
                                   /* move data to work rec*/
  KI0PM010.KUKPCOID = KI0PW01.KI0PWPID;
                                   /* move parent id passed*/
  KI0PW01.KI0PWLPI = -1; /* initialize last-parent-id*/
  ;
  ;
  ;
end // end KI0P015

// read parent record
Function KI0P016()
  ;
  ;
   /* *************************************************************/
   /* *****      r e a d    p a r e n t    r e c o r d       ******/
   /* *************************************************************/
  ;
  ;
   /* ******** move key to map *****************/
  KI0PM010.KUKPCOID = KI0PW01.KI0PWPID;
  ;
   /* ******** move key to record  *************/
  KUKREC.KUKPCOID = KI0PW01.KI0PWPID;
  ;
  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;call io mod to get parent*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if return code not okay*/
    KI0PW01.KI0PWLPI = 0; /* zero out last-parent-id*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if return code = "not found"*/
      converseLib.validationFailed(23); /* error "customer not found"*/
      set KI0PM010.KUKPCOID cursor, bold;
    else /* else(return code not 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KI0P016 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "KI0PM010";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VPARNT01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUKREC.KUKPCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE Km0sWORK.Km0DsGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    KI0PW01.KI0PWLPI = KI0PW01.KI0PWPID;
                                 /* ;  save parent-id*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end KI0P016

// format screen
Function KI0P018()
  ;
  ;
   /* *************************************************************/
   /* *****           f o r m a t    s c r e e n             ******/
   /* *************************************************************/
  ;
  ;
  set KI0PM010 initial; /* clear screen*/
  ;
  KI0PM010.KI0PMDT = VGVar.currentShortGregorianDate; /* move date to map*/
  ;
   /* ****** move data to screen ************/
  KI0PM010.KUKPCOID = KI0PW01.KI0PWPID;
  KI0PM010.KUKPCONM = KUKREC.KUKPCONM;
  KI0PM010.XXXADDR1 = KUKREC.XXXADDR1;
  KI0PM010.XXXADDR2 = KUKREC.XXXADDR2;
  KI0PM010.XXXADDR3 = KUKREC.XXXADDR3;
  KI0PM010.XXXCITY = KUKREC.XXXCITY;
  KI0PM010.XSTCD = KUKREC.XSTCD;
  KI0PM010.XXXZIP = KUKREC.XXXZIP;
  KI0PM010.XCTCD = KUKREC.XCTCD;
  if (KUKREC.KUKARRDT != 0)
    /* ***** reformat and move date here *********/
    KI0PW01.KI0PWDT = KUKREC.KUKARRDT;
    KI0PM010.KI0PMRMM = KI0PW01.KI0PWMDT;
    KI0PM010.KI0PMRYY = KI0PW01.KI0PWYDT;
    /* *******************************************/
  end
  ;
  if (KUKREC.KUKCALDT != 0)
    /* ***** reformat and move date here *********/
    KI0PW01.KI0PWDT = KUKREC.KUKCALDT;
    KI0PM010.KI0PMRCM = KI0PW01.KI0PWMDT;
    KI0PM010.KI0PMRCY = KI0PW01.KI0PWYDT;
    /* *******************************************/
  end
  ;
  KI0PM010.KUKPCRLN = KUKREC.KUKPCRLN;
  KI0PM010.KUKPDAB = KUKREC.KUKPDAB;
  KI0PM010.KUKGPNM = KUKREC.KUKGPNM;
  ;
  set KI0PM010.KUKPCOID cursor; /* initialize cursor position*/
  ;
  ;
  ;
  ;
  ;
end // end KI0P018

// converse basic store screen
Function KI0P020()
  ;
  ;
   /* *************************************************************/
   /* ***** c o n v e r s e    i n q u i r e    p a r e n t  ******/
   /* *****                    s c r e e n                   ******/
   /* *************************************************************/
  ;
  converse KI0PM010 ;
  ;
  ;
  set KI0PM010.KUKPCOID cursor; /* initialize cursor position*/
  KI0PSPF(); /* check standard entry keys*/
  ;
  KI0PM010.VAGen_EZEMSG = " "; /* clear out message line*/
  KI0PM010.KI0PMMSG = " "; /* clear out message line*/
  ;
   /* --------   check for fastpath  --------------*/
  ;
  set KI0PM010.CATOAP initialAttributes; /* initialize attribute*/
  if (KI0PM010.CATOAP > " ") /* if fastpath requested*/
    if (converseVar.eventKey is enter) /* if enter was pressed*/
      COMMAREA.CATOAP = KI0PM010.CATOAP;
      COMMAREA.CAITEM = KI0PM010.CAITEM;
      XSEXIT(); /* check security/xfer*/
      KI0PM010.KI0PMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " "; /* clear out to app from commarea*/
      converseLib.validationFailed(41); /* error "unauthorized"*/
      exit stack; /* goto flow*/
    else /* else(pf12 was not pressed)*/
      converseLib.validationFailed(90); /* error "cannot fastpath & pf12"*/
      set KI0PM010.CATOAP cursor, bold; /* highlight field in error*/
    end /* end of "if" statement*/
  else /* fast path not requested*/
    /* next sentence                ;   okay*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end KI0P020

// INITIALIZE APPLICATION RECORDS
Function KI0PS-INIT-RECS()
   /* ****** initiaize all records used by this application *******/
  ;
  ;
  set KUKREC empty; /* initialize parent record*/
  set KI0PW01 empty; /* initialize work rec*/
  set SQLCA empty; /* initialize dbii error record*/
  set TA1REC empty; /* initialize error record*/
  set KUWREC empty; /* initialize work record*/
  ;
  ;
end // end KI0PS-INIT-RECS

// pfkey checking
Function KI0PSPF()
  ;
  ;
   /* *************************************************************/
   /* *****            c h e c k    p f - k e y s            ******/
   /* *************************************************************/
  ;
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
    converseLib.validationFailed(41);
    return;
  end
  if (converseVar.eventKey is pf3)
    COMMAREA.CAUSERA = KI0PW01.KI0PWGRP;
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentence*/
  end
  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = KI0PW01.KI0PWGRP;
    XSPF4();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentence*/
  end
  if (converseVar.eventKey is pf5)
    COMMAREA.CAUSERA = KI0PW01.KI0PWGRP;
    COMMAREA.CATOAP = "KU0M";
    XSEXIT();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentence*/
  end
  if (converseVar.eventKey is pf7)
    return;
  end
  if (converseVar.eventKey is pf8)
    return;
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  converseLib.validationFailed(3);
  exit stack;
  ;
  ;
  ;
  ;
  ;
end // end KI0PSPF

//*** RECORD=KI0PW01 ****
// this is the working storage record for the km0s application
// "change store"
// ***********************
Record KI0PW01 type basicRecord
  5 KI0PWNDX KI0PWNDX ; 
  5 KI0PWGRP KI0PWGRP ; 
    7 KI0PWKEY KI0PWKEY ; 
      10 KI0PWPID KI0PWPID ; 
      10 KI0PWSID KI0PWSID ; 
      10 KI0PWDID KI0PWDID ; 
      10 KI0PWGID KI0PWGID ; 
    7 KI0PWERR KI0PWERR ; 
  5 KI0PWCOV KI0PWCOV ; 
  5 KI0PWLPI KI0PWLPI ; 
  5 KI0PWLSI KI0PWLSI ; 
  5 KI0PWDT KI0PWDT ; 
    10 KI0PWCCD KI0PWCCD ; 
    10 KI0PWYDT KI0PWYDT ; 
    10 KI0PWMDT KI0PWMDT ; 
    10 KI0PWDDT KI0PWDDT ; 
  5 KI0PWCDT KI0PWCDT ; 
    10 KI0PWMM KI0PWMM ; 
    10 KI0PWDD KI0PWDD ; 
    10 KI0PWYY KI0PWYY ; 
  5 KI0PWCVN KI0PWCVN ; 
    10 KI0PWCVC KI0PWCVC ; 
  5 KI0PWGST KI0PWGST ; 
    10 KI0PWD1 KI0PWD1 ; 
    10 KI0PWD2 KI0PWD2 ; 
    10 KI0PWD3 KI0PWD3 ; 
    10 KI0PWD4 KI0PWD4 ; 
  5 KI0PW2ST KI0PW2ST ; 
    10 KI0PWD21 KI0PWD21 ; 
    10 KI0PWD22 KI0PWD22 ; 
    10 KI0PWD23 KI0PWD23 ; 
    10 KI0PWD24 KI0PWD24 ; 
  5 KI0PWBEF KI0PWBEF ; 
end // end KI0PW01

// num group store id
DataItem KI0PW2ST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// before image of store rec
DataItem KI0PWBEF char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century date for database
DataItem KI0PWCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert date field
DataItem KI0PWCDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convertion field
DataItem KI0PWCOV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// character conversion
DataItem KI0PWCVC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric conversion
DataItem KI0PWCVN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// digit 1
DataItem KI0PWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KI0PWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 1
DataItem KI0PWD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KI0PWD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KI0PWD23 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KI0PWD24 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KI0PWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KI0PWD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert dayes
DataItem KI0PWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day date for database
DataItem KI0PWDDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KI0PWDID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date for database format
DataItem KI0PWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezemno error number
DataItem KI0PWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gen prod class code
DataItem KI0PWGID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group name
DataItem KI0PWGRP char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group store id
DataItem KI0PWGST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer key
DataItem KI0PWKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last company id
DataItem KI0PWLPI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last store id
DataItem KI0PWLSI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month date for database
DataItem KI0PWMDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert monthes
DataItem KI0PWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KI0PWNDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KI0PWPID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id
DataItem KI0PWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year date for database
DataItem KI0PWYDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert years
DataItem KI0PWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

