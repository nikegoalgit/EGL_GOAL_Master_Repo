package om0a;
import av.common.*;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import ob.common.*;
import oi.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0A ****
//              order maint ---  add product header
// 
// 
// 
//     this application is used in order maintenance to add
//     products. this application adds product header info
//     then calls om0b to add product detail.
// 
// 
// 
// 
// 
// maintenance history:
// 
//      date    by whom     overview of changes
//    -------- ---------   ----------------------------------
//    10/23/86  jvande     temporary bulk/draw fix to prevent
//                         adds to draw orders.
//    04/06/87  jvande     chngd s6h, didn't handle draws from
//                         sub ords other then 1.
//    04/13/87  craine     changed om0aseb and om0ash6 to
//                         display error message if bulk not
//                         found.
//    09/14/87  jvande     support xsdcd - sba,sej.
//    01/15/88  jhh        added flexible bulk/draw to sba/seb/
//                         see/seg/sem/se9/sh2/sh3/sh4
//    04/22/88  gwells     unit of measure bug - in sea, if
//                         style or color is modified, move
//                         ' ' to omwrec.xumcd.
//    07/6/88   obecke     check dprod.vcolor (sycrec) to pass
//                         'sold out' date ranges. seb,sez,sey
//                         sew.
//    07/11/88  obecke     if order type allows quality cd of
//                         02 or life cycle code of 20, bypass
//                         logic of above paragraph (7-6-88).
//    07/26/88  obecke     log#9: sba--load a non-binary key
//                         to ta1rec if prog aborts. added
//                         om0aw01.om0awkey,om0awk1,om0awk2
//                         om0awk3.
//    01/06/89  skott      enhancement #2.  check product
//                         offering date in om0b instead of
//                         om0a.  sez, sex, sey, sew
//    01/09/89  dwalke     add segmented transaction id to appl
//    02/20/89  jwood      added noncsp option to calls
//    02/23/89  skott      bug #154 don't allow products to be
//                         ordered unless life cycle effective.
//                         se2.
//    04/13/89  obecke     dimension code logic added. m005,
//                         sba,sb1,se1,sez,sb2,sea,seb,sem,sh1.
//    05/10/89  jbecke     changes for database updates:
//                         om0asee, se3, se4, sh5, w02.
//    05/15/89  obecke     divisions added to xottbl. logic
//                         fixes to see,se3,se4,sh5.
//    06/22/89  jbecke     accessories project:
//                         added OM0ASEN (check for accessory
//                         on correct sales program) and added
//                         logic to set OM0AWAOF in OM0ASEA.
//    07/26/89  jbecke     changed om0asea to exclude sales
//                         offices 10 and 12 from accessories
//                         sales program logic.
//    09/26/89  rcoron     #244  added facility to read all
//                         colors from the sales program
//                         product file. (om0ased)
//    10/16/89  skott      #259  added xautbl lookup for in-
//                         house accts.  sen.
//    10/24/89  oricha     sed,se2. make spgm/life cycle edit
//                         messages more specific to problem.
//                         #266.
//    10/27/89  mbarna     restrict certain sports activities
//                         from sales office 01, 02, and 03.
//                         seb, slb.
//    11/01/89  rcoron     excempt in-house customers from
//                         sales office restrictions. om0aslb.
//    11/21/89  rcoron     excempt military accounts from
//                         sales program-product restirctions.
//                         sba, slb, slc, sen, and 001. added
//                         kunrec and errsqlca to record list.
//    12/14/89  rcoron     put in a HARDCODED TEMPORARY fix
//                         to allow customers 1006140 & 1006141
//                         to draw from their accessories bulk
//                         orders without requiring a sales
//                         program.  THIS SHOULD BE REMOVED AS
//                         ALL THOSE BULK ORDERS ARE DRAWN.
//                         sen.
//    12/21/89  cgrice     bug#225 - added product/sales office
//                         restriction using xsotbl.  slb
//    03/06/90  tfox       bug#282 - chg kuirec to ku2rec when
//                         looking for customer prod number,seb
//    03/08/90  BWATSO     Bug 306 - the correct use of size
//                         distribution code was causing an
//                         error.  Using the size distribution
//                         code requires that the number of
//                         sizes indicated by the first and
//                         last size be equal to the number
//                         of sizes the distribution code was
//                         designed for.  This program was
//                         incorrectly counting the number of
//                         sizes between the first and last.
//                         The logic was corrected in SE5, SE6,
//                         and SH5.  Similar changes were made
//                         to OP0H.
//    04/04/90  skott      database changes - sej - use pc2rec
//                         instead of xsdtbl. sba,001 replace
//                         op1blkcd with xbdcd.
//    04/16/90  BWATSO     Bug 320 - fixed abend when first
//                         size field is invalid.  Changed SE5.
//    04/17/90  scantr     bug #327 - add temporary fix to
//                         allow all products in holiday cata-
//                         log to be ordered on accessories
//                         sales program.  changed sen.
//    05/30/90  BWATSO     Brand code changes.  Changed SEB
//                         and SEA.
//    06/08/90  oricha     add product '1le4' to accessories
//                         logic. sen.
//    08/14/90  ischmi     changed sej to default to iseg
//                         number if direct ship code is '3'.
//    10/10/90  dviert     changed xfmcd to xpccd in SED.
//    11/09/90  rdavis     database changes - xsdcd changed to
//                         pc2inseg, xsdabrv changed to
//                         pc2segab. om0am005,ssc,sda,sec,sej.
//    12/29/90  jloyer     modified to process blank bulks...
//                         om0aseb, om0asem, om0a001
//                         new: om0asep; calls io5480 which
//                                     accesses davail.vblnkp01
//                              om0aseq; calls io5470 which
//                                     accesses davail.vblnks01
//                         new rec: avirec; pass keys to io5480
//                                  avgrec; rtn data frm io5480
//                                  avhrec; rtn data frm io5470
//   01/21/91   craine     added edit to om0aslb to see if ACG
//                         product is restricted to specialty
//                         xso for the customer. Added KUPREC
//                         to table list and new sgrp OM0ASCU.
//   01/24/91   tfox       added code to call op1660 to see if
//                         a sls pgm is required at the product
//                         level. sdk,sdt,sea,sed,w01
//   02/12/91   tfox       regen for db chgs
//   02/28/91   dmeier     modified to process blank/finished
//                         draws: om0asba, om0aseb, om0asem,
//                         om0ase2, om0ash1, om0aw01
//                         new: om0aser: calls io5480 (finish)
//                              om0ases: calls io5470 (finish)
//                              om0aset: calls io5530 (cutoff)
//                         new rec: oecrec: rtn data frm io5530
//   03/08/91   dmeier     initialized omacdt in om0asba
//                         draws: om0asba, om0aseb, om0asem,
//   03/14/91   dmeier     correct om0aslb to allow military
//                         customers to order specialty prods
//   03/17/91   oricha     translate nike style/color/dim to
//                         short version for cust who can't
//                         handle our reg nbr; dcust.vcusku01.
//                         sba,seb,sem.
//   04/01/91  dflesh      log #589.  created new return codes
//                         for life cycle (07) and quality code
//                         (o8).  sdk.
//   04/05/91craine        db2 changes - renamed life cycle cd
//                         in xoctbl - code chng - se2.
// 
//   04/17/91  dmeier      log #604.  check draw by date for
//                         draws from blank bulks only (not
//   04/23/91  dmeier      initialize w/s blank style/color
//                         codes in om0aseb and om0asem. save
//                         prod blank style/color codes im sem.
//   05/13/91  dharri      log # 632 - product category code
//                         chgs - replace 'me' with 'ja' in
//                         stmt group ob0aslb.
//   05/16/91  craine      allow more than 200 products
//                         chg in saa
//   05/20/91  tfox        menu services 005,s01 - check for
//                         prepacks
//   05/23/91  schen       log #554 - data base changes
//                         deleted ku2rec from om0a.
//                         changed sem and seb to use io5790
//                         instead of io0270 and io0400.
//                         also move dept code to key field.
//   06/10/91  oricha      db2 changes - om0aww02, also chg'd
//                         slb to allow nordstrom to order
//                         restricted products.
//   06/18/91  bbake2      changes om0aset to use owner group
//                         of bulk order when reading cutoff
//                         record for blank bulk draws
//   07/10/91  jloyer      bypass cust/prod restriction edits
//                         for ACG close-outs.
//                         chgd: slb, se2   new: sld
//   08/13/91  dharri      log #673 -add new producst XREF ind
//                         value of 'R'. sba, seb, sem, w01
//   10/08/91  dmeier      db2 changes - om0aw02
//                         value of 'R'. sba, seb, sem, w01
//   10/25/91  dmeier      log #695 - don't allow orders to
//                         be placed on draws against blank
//                         bulks when size is valid for the
//                         the blank but not for the finished
//                         style. (see, s13, s14).
//   12/02/91  jhecke      695 - Prepack of footwear. s01
//   01/14/92  gwells      731 - iseg default for nil - sba
//   02/03/92  jwils1      added custom logo   chgs - sez,sba
//   03/04/92  jwils1      added check for direct ship codes
//                         2 and 3 for custom logo.  sez.
//   03/11/92  bbake2      data base changes.  updated om0aw02
//                         with new record layout of op1rec
//   04/14/92  bbake2      database changes: avhbxdm removed
//                         from avhrec - om0aseq
//   08/31/92  dlegg       Log #885-Changes for Cust Prod Xref.
//                         OM0ASEB, SEM, SBA.
//   09/28/92  dharri      Log #893 Custom logo - removed chgs
//                         from sba, sez and put them in with
//                         the additional changes needed. Added
//                         ck-prod-type, cust-logo, read-dorder
//                         made changes to sba sez w01
//   05/01/93  dlegg       Log #937. NSG changes. Add whse 25.
//                         Modify custom logo edits. sba, cust-
//                         logo.
//   07/14/93  gcalki      Log #848. international divert order
//                         bypass life cycle errors. se2
//   01/10/94  dmeier      Log #927 - musical size run changes.
//                         om0as-edit-msr, om0asea, om0asee
//   02/28/94  scantr      db changes: resize fields in w02
//   04/28/94  jather      log #1003. renamed causera to
//                         ca-user-workarea-4k so it can hold
//                         opwrec which is now 3072 bytes(all).
//   05/19/94  jather      log #1015. divert orders - compare
//                         need date lt order set up date
//   07/19/95  pstroe      adding logic to call SY2000 for
//                         product regional information.
//                         Added statement group OM0AS-SEL-
//                         2000.  Modified OM0ASE1, OM0AS-
//                         CK-PROD-TYPE and OM0ASEB.
//   06/21/96  MVALBU      Changed to use regional data for US
//                         apparel by calling SY2000. Changed
//                         OM0AS-CK-PROD-TYPE, OM0ASE1, and
//                         OM0AS-SEL-SY2000.
//   08/09/96  NFIELD      Added code to handle new Nike
//                         bulk/draw code. Changed OM0ASBA,
//                         OM0ASEB, OM0ASEE, OM0ASEG, OM0ASEM,
//                         OM0ASE9, OM0ASH2, OM0ASH3, OM0ASH4
//   12/07/96  Csawki      Add Product Category for Equipment
//   12/10/96  wleong      Removed musical size run logic.
//   01/27/97  JOLDIN      Added ability to search a bulk until
//                         a product with quantity was found.
//                         Modified statement groups OM0ASEB
//                         and OM0ASH1.
//   12/17/96  CBRINE      Access new cust xref tbl (VCUCPX01),
//                         removed call to IO5790. (OM0ASEB,
//                         OM0ASEM).
//   06/24/97  csawki      Added Equipment/Product Category
//                         changes: added OPWREC01 to Working
//                         Storage, modified OM0ASEB, added 2
//                         new SGRPS: 1)OM0AS-CHECK-EQUIP
//                         2)OM0AS-EU0100-SU.
//   09/08/97  wleong      regen for yostbl structure change
//   01/13/98  KLEE3       added test for europe to user id.
//   02/10/98  JFLOR1      Added additional logic for intl
//                         users in om0as-ck-prod-type.
//   03/24/98  vsanka      removed use of xvotbl and added code
//                         to access dcorp.vxvo0001 using the
//                         iomod vxvo0001 .
//                         The statement group changed: SEB
//   04/01/98  sgopal      Removed the commented code that
//                         accessed XVOTBL in OM0ASEB as a
//                         clean-up process.
//   04/13/98  wleong      changed prepack reminder messages.
//   03/06/98  ESHANM      The SQLCODE returned from IO5470 in
//                       OM0ASEQ is checked for -811 also.
//                       Look for TCS.
// 
//   08/27/98  udafon #178  Increased size of OMWREC to 3505
//                          bytes. Re-compiled application.
// 
//   03/16/00  CNAMAN      Added statement group 'OM0AS-SPAIN
//                         -CHECK' to validate all products for
//                         spai/cnry compliance.
//                         Added record OP10REC to pass variabl
//                         es to OP6410(NIKEBOTH).
//                         Modified stmt grps OM0A001, OM0ASEA.
//                         Changed Nike style field in the map
//                         from 7 characters to six char long.
// *********************
Program OM0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVGREC AVGREC; // record
  AVHREC AVHREC; // record
  AVIREC AVIREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  OECREC OECREC; // record
  OM0AW01 OM0AW01; // record
  OM0AW02 OM0AW02; // record
  OMAREC OMAREC; // record
  OMWREC OMWREC; // record
  OP10REC OP10REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OP9REC OP9REC; // record
  OPBREC OPBREC; // record
  OPLREC OPLREC; // record
  OPMSREC OPMSREC; // record
  OPWREC01 OPWREC01; // record
  OSNREC OSNREC; // record
  PC2REC PC2REC; // record
  SP1REC SP1REC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VXVO0001 VXVO0001; // record
  WCU1710 WCU1710; // record
  WEU0100 WEU0100; // record
  WSY2000 WSY2000; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OPVTBL; // table
  use XAUTBL; // table
  use XBDTBL; // table
  use XDMTBL; // table
  use XOCTBL; // table
  use XOTTBL; // table
  use XPATBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSATBL; // table
  use XSOTBL; // table
  use XUMTBL; // table
  use XSZTBL; // table
  use YOSTBL; // table
  use OM0AM.OM0AM005 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0A001: OM0A001();









    goto OM0A005; /* go to add product hdr map*/








    OM0A005: OM0A005();



     /* if error occured, reconverse the map*/

    if (OMAREC.OMAERR == "Y")
      goto OM0A005;
    end



     /* handle order full, user response must be enter .*/

    if (OM0AW01.OM0AWOFL == "Y") /* if order full*/
      if (converseVar.eventKey is enter)
        if (COMMAREA.CAFROMAP == "OM0B")
          sysVar.transferName = "OM0S";
          COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
          transfer to program sysVar.transferName passing COMMAREA;
        else
          if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS)
            sysVar.transferName = COMMAREA.CAFROMAP;
            COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
            transfer to program sysVar.transferName passing COMMAREA;
          else
            sysVar.transferName = COMMAREA.CAFROMAP;
            COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
            transfer to transaction sysVar.transferName passing COMMAREA;
          end
        end
      else
        converseLib.validationFailed(145);
        goto OM0A005; /* reconverse the screen*/
      end
    end




     /* if edit only, reconverse the screen.*/

    if (converseVar.eventKey is pf12)
      set OM0AM005.SY1STNBR cursor;
      goto OM0A005;
    end




    if (converseVar.eventKey is pf19) /* reshow original data fields*/
      OM0AM005.SY1STNBR = OM0AW01.OM0AWSTY;
      OM0AM005.SY2CLRID = OM0AW01.OM0AWCLR;
      OM0AM005.XDMCD = OM0AW01.OM0AWXDM;
      OM0AM005.KUIPRDID = OM0AW01.OM0AWCST;
      OM0AM005.OM0AMFSZ = " ";
      OM0AM005.OM0AMLSZ = " ";
      OM0AM005.SY1SSTNM = " ";
      OM0AM005.SY2CLRAB = " ";
      OM0AM005.XQACD = OM0AW01.XQACD;
      if (OM0AM005.XQACD in XQATBL.XQACD)
        OM0AM005.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
      end
      OM0AM005.OM0AMDPS = "N";
      goto OM0A005; /* reconverse the screen*/
    end




            /* exit application*/


    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


    if (converseVar.eventKey is pf3) /* go to order maint menu*/
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA;
      exit program;
    end


    if (converseVar.eventKey is pf4) /* go to master menu*/
      COMMAREA.CACURRAP = "MN0M";
      transfer to transaction "MN0M" passing COMMAREA;
      exit program;
    end


    if (OMWREC.OMWSTYLE > " " /* if a product was entered*/
     && OM0AW01.OM0AWOFL == "N")
      COMMAREA.CACURRAP = "OM0B";
      transfer to program "OM0B" passing COMMAREA;
      exit program;
    end



     /* if got to here, no style was entered and the user hit*/
     /* enter. go to om0m to select another order.*/

    COMMAREA.CACURRAP = "OM0M";
    transfer to program "OM0M" passing COMMAREA;
    exit program;








  end // end main
end // end OM0A

// application init
Function OM0A001()




     /* **********************************************************/
     /* * this process initializes program work area and clears **/
     /* * the map areas.                                        **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  XSENTRY(); /* application entry validation*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "A";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/


  set KUCREC empty;
  set KUNREC empty;
  set WCU1710 empty;
  set OM0AW01 empty;
  set OM0AW02 empty;
  set OP1REC empty;
  set OP2REC empty;
  set OP3REC empty;
  set OP8REC empty;
   /* SPAIN CHANGES * BEGIN * CNAMAN * 03/15/2000*/
  set OP10REC empty;
   /* SPAIN CHANGES * END   * CNAMAN * 03/15/2000*/
  set OMWREC empty;
  set OMAREC empty;
  set OPBREC empty;
  set PC2REC empty;
  set SP1REC empty;
  set SP5REC empty;
  set SQLCA empty;
  set SYCREC empty;
  set SY4REC empty;
  set AVGREC empty;
  set AVHREC empty;
  set AVIREC empty;

      /* retrieve user common area*/



  XSOMS05(); /* check order entry security*/



  OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  COMMAREA.CACURRAP = "OM0A";





  OM0ASAA(); /* get next available line item number*/






  OM0ASBA(); /* set some fields dark and init appl*/







   /* *************************************************************/
end // end OM0A001

// converse add product header
Function OM0A005()



      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/




    /* if came back from pf12, edit only, and no style has been*/
      /* entered yet, reset mdt's. editing for a line item is*/
      /* triggered by an entered style. if no style is entered*/
      /* no editing is done. the user may have entered data but*/
      /* no data. in this event i loose the mdt's and bad data*/
      /* could leak through. omwstyle only contains values if*/
      /* edits were triggered.*/


  if (converseVar.eventKey is pf12)
    if (OMWREC.OMWSTYLE > " ")
       /* next sentence*/
    else
      OM0ASDA();
    end
  end





      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OM0AM005 ;
   /* *************************************************************/



      /* clear (reset fields)*/

  OMAREC.OMAERR = "N"; /* clear error flag*/
  OM0AM005.VAGen_EZEMSG = " "; /* clear message area*/




      /* check and process valid aid key requests*/

    /* handle special order full case*/

  if (OM0AW01.OM0AWOFL == "Y") /* if order full*/
    exit stack;
  end



  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf3 /* no edits, flow to om0m menu*/
     || converseVar.eventKey is pf4)
      if (OMWREC.OMWPKCHF == "Y") /* prepack change flag*/
        OM0AS01(); /* check if prepack exists*/
        if (OMAREC.OMAERR == "Y")
          return;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CACURRAP = "OS0G";
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
          transfer to program "OS0G" passing COMMAREA;
          exit program;
        else
          exit stack;
        end
      else
        exit stack;
      end
    else
      if (converseVar.eventKey is pf12) /* edit only*/
         /* next sentence*/
      else
        if (converseVar.eventKey is pf19) /* reshow original screen*/
          exit stack;
        else
          OM0ASDA(); /* reset mdt's*/
          converseLib.validationFailed(2);
          OMAREC.OMAERR = "Y"; /* set error flag*/
          exit stack;
        end
      end
    end
  end





  OM0ASEA(); /* perform field edits*/


  if (converseVar.eventKey is enter
   && OMWREC.OMWSTYLE == " ")
    if (OMWREC.OMWPKCHF == "Y")
      OM0AS01();
      if (OMWREC.OMWPPEXF == "Y")
        COMMAREA.CACURRAP = "OS0G";
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAMSG = "ORDER MAINTAINED - VERIFY PREPACKS";
        transfer to program "OS0G" passing COMMAREA;
        exit program;
      else
        exit stack;
      end
    else
      exit stack;
    end
  end




   /* *************************************************************/
end // end OM0A005

// check for equipment product
Function OM0AS-CHECK-EQMT()
   /* --------------------- om0as-check-eqmt ---------------------------*/

   /* determine whether or not this is an equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "OM0A";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = SYCREC.XGPCD;
  WEU0100.SY1STNBR = SYCREC.SY1STNBR;
  WEU0100.SY2CLRID = SYCREC.SY2CLRID;
  WEU0100.XDMCD = SYCREC.XDMCD;

  OM0AS-EU0100-SU(); /* select unique*/

end // end OM0AS-CHECK-EQMT

// CK PRODUCT TYPE CODE
Function OM0AS-CK-PROD-TYPE()

    /* GET THE PRODUCT TYPE CODE FROM ITEM JUST READ*/


  OM0AW01.SYCDATA = SYCREC.SYCDATA; /* save data for rec adding*/

  set SQLCA empty;
  set SYCREC empty;
  SYCREC.XGPCD = OP2REC.XGPCD;
  SYCREC.SY1STNBR = OP2REC.SY1STNBR;
  SYCREC.SY2CLRID = OP2REC.SY2CLRID;
  SYCREC.XDMCD = OP2REC.XDMCD;


  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue processing*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OMAREC.OMAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(780); /* can't determine prod type - no adds*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A";
      TA1REC.TA1LOCAT[1] = "S     ";
      TA1REC.TA1LOCAT[2] = "IO0560";
      TA1REC.TA1LOCAT[3] = "OM0AS-CK-PROD-TYPE";
      TA1REC.TA1LOCAT[4] = OP2REC.SY1STNBR;
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      XSPF4();
      exit program;
    end
  end

    /* -- Added for Canada --*/

  if (SQLCA.VAGen_SQLCODE == 0 /**/
   && OP1REC.XDZ-DATA-DIST-CD == "CA")
    set WSY2000 empty;
    WSY2000.XDR-PROD-REG-CD = "05";
    OM0AS-SEL-SY2000();
    if (OM0AW01.OM0AW-WSY2000-RETURN-CD == "98")
      converseLib.validationFailed(10); /* database is busy*/
      OMAREC.OMAERR = "Y";
    end
    if (OM0AW01.OM0AW-WSY2000-FND-FLAG == "N")
      converseLib.validationFailed(911); /* not valid style, color*/
      OMAREC.OMAERR = "Y";
    end

    /* -- Added for US apparel --*/

  else
    if (SQLCA.VAGen_SQLCODE == 0 /**/
     && OP1REC.XGPCD == "03")   
      if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
       || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
        /* continue processing*/
      else
        set WSY2000 empty;
        WSY2000.XDR-PROD-REG-CD = "01";
        OM0AS-SEL-SY2000();
        if (OM0AW01.OM0AW-WSY2000-RETURN-CD == "98")
          converseLib.validationFailed(10); /* database is busy*/
          OMAREC.OMAERR = "Y";
        end
        if (OM0AW01.OM0AW-WSY2000-FND-FLAG == "N")
          converseLib.validationFailed(911); /* not valid style, color*/
          OMAREC.OMAERR = "Y";
        end
      end
    end
  end


  if (OMAREC.OMAERR == "N") /* no previous errors*/
    if (OM0AW01.OM0AW-CUST-LOGO-FLAG == "Y") /* trying to add cust logo prod*/
      if (SYCREC.XPRCD == "22") /* to a cust logo order*/
        /* Continue Processing*/
      else
        OMAREC.OMAERR = "Y"; /* set error flag*/
        converseLib.validationFailed(782); /* can't add cust logo to non-cust logo*/
      end
    else
      if (SYCREC.XPRCD == "22") /* cust logo order*/
        OMAREC.OMAERR = "Y"; /* set error flag*/
        converseLib.validationFailed(781); /* can't add cust logo to non-cust logo*/
      end
    end
  end

  SYCREC.SYCDATA = OM0AW01.SYCDATA; /* return orig data to record*/


end // end OM0AS-CK-PROD-TYPE

// EDIT FOR CUSTOM LOGO
Function OM0AS-CUST-LOGO()


  if (SYCREC.XPRCD == "22") /* custom logo product*/
    OM0AW01.OM0AW-CUST-LOGO-FLAG = "Y";
  else
    OM0AW01.OM0AW-CUST-LOGO-FLAG = "N"; /* non-custom logo prod*/
  end

   /* edit for product consistency,*/
  OM0AS-READ-DORDER(); /* custom logo or non-custom logo*/

end // end OM0AS-CUST-LOGO

// edit musical size run
Function OM0AS-EDIT-MSR()




    /* edit musical size run code  (see opmstbl for possible values)*/


   /* F OM0AM005.XSZCD EQ ' ';*/
   /* MOVE ' ' TO OMWREC.XSZCD;*/
   /* EZERTN;*/
   /* ND;*/

   /* Code was entered, so call subprogram to edit the code against*/
   /* the product.*/

   /* ET OPMSREC EMPTY;*/

   /* OVE 1 TO OPMSREC.OPMS-OPTION-CD;*/
   /* OVE OP1REC.XGPCD TO OPMSREC.XGPCD;*/
   /* OVE OM0AM005.SY1STNBR TO OPMSREC.SY1STNBR;*/
   /* OVE OM0AM005.SY2CLRID TO OPMSREC.SY2CLRID;*/
   /* OVE OM0AM005.XDMCD TO OPMSREC.XDMCD;*/
   /* OVE OM0AM005.OP2TORGQ TO OPMSREC.OP2TONOQ;*/
   /* OVE OM0AM005.XSZCD TO OPMSREC.OP-MSC-SZ-RUN-CD;*/

   /* ALL OP2830 OPMSREC (NOMAPS,NONCSP;*/

   /* F OPMSREC.OPMS-RETURN-CD = 0;*/
   /* MOVE OM0AM005.XSZCD TO OMWREC.XSZCD;*/
   /* SET OM0AM005.XSZCD DEFINED;*/
   /* LSE;*/
   /* IF OPMSREC.OPMS-RETURN-CD = 1*/
     /* OR OPMSREC.OPMS-RETURN-CD = 2*/
     /* OR OPMSREC.OPMS-RETURN-CD = 3*/
     /* OR OPMSREC.OPMS-RETURN-CD = 4;*/
     /* MOVE 'Y' TO OMAREC.OMAERR;*/
     /* SET OM0AM005.XSZCD CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE OPMSREC.OPMS-RETURN-MSG TO OM0AM005.EZEMSG;*/
   /* ELSE;*/
     /* IF OPMSREC.OPMS-RETURN-CD = 8;*/
       /* MOVE 'Y' TO OMAREC.OMAERR;*/
       /* SET OM0AM005.XSZCD CURSOR,MODIFIED,BRIGHT;*/
       /* MOVE 10 TO EZEMNO;*/
     /* ELSE;*/
       /* IF OPMSREC.OPMS-RETURN-CD = 7*/
         /* OR OPMSREC.OPMS-RETURN-CD = 9;*/
         /* MOVE 'Y' TO OMAREC.OMAERR;*/
         /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
         /* MOVE 'RETN' TO TA1REC.TA1FUNC;*/
         /* MOVE 'OM0A    ' TO TA1REC.TA1PGMNM;*/
         /* MOVE 'OM0AS-ED' TO TA1REC.TA1LOCAT(1);*/
         /* MOVE 'IT-MSR  ' TO TA1REC.TA1LOCAT(2);*/
         /* MOVE 'OP2830  ' TO TA1REC.TA1LOCAT(3);*/
         /* MOVE OPMSREC.OPMS-RETURN-CD TO TA1REC.TA1LOCAT(4);*/
         /* SET TAEREC EMPTY;*/
         /* MOVE ' ' TO OPMSREC.OPMS-DIAG-KEY;*/
         /* MOVE OP1REC.OP1CUOID TO OPMSREC.OPMS-DIAG-CUST-ORD-ID;*/
         /* MOVE OP1REC.OP1NORID TO OPMSREC.OPMS-DIAG-NIKE-ORD-ID;*/
         /* MOVE OPMSREC.XGPCD TO OPMSREC.OPMS-DIAG-GPC-CD;*/
         /* MOVE OPMSREC.SY1STNBR TO OPMSREC.OPMS-DIAG-STY-NBR;*/
         /* MOVE OPMSREC.SY2CLRID TO OPMSREC.OPMS-DIAG-COLR-CD-ID;*/
         /* MOVE OPMSREC.XDMCD TO OPMSREC.OPMS-DIAG-DIM-CD;*/
                                  /* MOVE OPMSREC.OP-MSC-SZ-RUN-CD TO*/
                                   /* OPMSREC.OPMS-DIAG-MSC-SZ-RUN-CD;*/
         /* MOVE OPMSREC.OPMS-OPTION-CD TO OPMSREC.OPMS-DIAG-OPTION-CD;*/
         /* MOVE OPMSREC.OPMS-RETURN-CD TO OPMSREC.OPMS-DIAG-RETURN-CD;*/
         /* MOVE 'ORD' TO OPMSREC.OPMS-DIAG-LIT1;*/
         /* MOVE 'PRD' TO OPMSREC.OPMS-DIAG-LIT2;*/
         /* MOVE 'MSC CD' TO OPMSREC.OPMS-DIAG-LIT3;*/
         /* MOVE 'OPT' TO OPMSREC.OPMS-DIAG-LIT4;*/
         /* MOVE 'RTN' TO OPMSREC.OPMS-DIAG-LIT5;*/
         /* MOVE OPMSREC.OPMS-DIAG-KEY TO TAEREC.TAEDESC1;*/
         /* MOVE OPMSREC.OPMS-RETURN-MSG TO TAEREC.TAEDESC2;*/
         /* CALL RESET;*/
         /* CALL TA0020 TA1REC,TAEREC (NOMAPS,NONCSP;*/
         /* XSPF4;*/
         /* EZECLOS;*/
       /* END;*/
     /* END;*/
   /* END;*/
   /* ND;*/



end // end OM0AS-EDIT-MSR

// call eu0100 select unique
Function OM0AS-EU0100-SU()
   /* ------------------- om0as-eu0100-su -------------------------*/

  WEU0100.WEU0100-TASK = "S ";
  WEU0100.WEU0100-CALLER-LOCATION = "OM0AS-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to om0as-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "OM0AS-EU0100-SU"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/


end // end OM0AS-EU0100-SU

// post routine for deadlock
Function OM0AS-OP6410-PSRTN()
    /* *******************************************************/
    /* online post routine for OM system                    */
    /* *******************************************************/
    /* This routine is executed when the return code from the*/
    /* NIKEBOTH-OP6410 is '03'. It posts the errors          */
    /* appropriately                                         */
    /* *******************************************************/

  set TA1REC empty;
  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "POST"; /* abend func*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAP = "OM0AM005";
  TA1REC.TA1LOC = "OM0AS-OP6410-PSRTN";
  TA1REC.TA1DBASE = OP10REC.OP10-RETURN-DBASE;
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = OP10REC.OP10-RETURN-DBASE;
  TA1REC.TA1TBLVU = OP10REC.OP10-RETURN-TBLVU;
  TA1REC.TA1TBLKE = OP10REC.OP10-RETURN-KEY;
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/

end // end OM0AS-OP6410-PSRTN

// SELECT & READ ITEM FROM DORDER
Function OM0AS-READ-DORDER()


    /* NOTE:  DETERMINE IF THE PRODUCT YOU ARE ADDING TO THE ORDER IS*/
    /* CONSISTENT WITH THE OTHER PRODUCTS ON THE ORDER. (CUSTOM*/
    /* LOGO VS NON-CUSTOM LOGO PRODUCTS.)*/
    /* 1.  Read the first item found on the DORDER datbase*/
    /* 2.  When an item is found, read vcolor02 to get the product type.*/
    /* a.  if the product type of the item found is consistent with*/
    /* the proudct be added to the order, allow processing to*/
    /* continue, otherwise display a messing indicating you can*/
    /* not mix product types on an order.*/
    /*  */


  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "OM0A";
  TA1REC.TA1LOCAT[2] = "OM0AS-READ-DORDER";
  TA1REC.TA1LOCAT[3] = "IO0440  ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = "OM0AM005";
  TA1REC.TA1DBASE = "OP2REC  ";
  TA1REC.TA1TBLVU = "VITEM001";
  OM0AW01.OM0AWK01 = OP1REC.OP1CUOID;
  TA1REC.TA1TBLKE = OM0AW01.OM0AWK01;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* FOUND AN ITEM RECORD*/
      OM0AS-CK-PROD-TYPE();
    else
      TA1REC.TA1LOCAT[1] = "SN      ";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      XSPF4();
      exit program;
    end
  else
    TA1REC.TA1LOCAT[1] = "SS     ";
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
    XSPF4();
    exit program;
  end

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};








end // end OM0AS-READ-DORDER

// select dprod.vsyreg01
Function OM0AS-SEL-SY2000()


   /* This statement group added for Canada -- June 27, 1995 --*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";


  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == "00")
    OM0AW01.OM0AW-WSY2000-FND-FLAG = "Y";
  else
    if (WSY2000.WSY2000-RETURN-CODE == "02" /* product not found for region*/
     || WSY2000.WSY2000-RETURN-CODE == "98")
      OM0AW01.OM0AW-WSY2000-FND-FLAG = "N";
      return;
    else
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0A";
      TA1REC.TA1LOC = "OM0AS-SEL-SY2000";
      OM0AW01.OM0AW-WSY2000-GPC-CD = SYCREC.XGPCD;
      OM0AW01.OM0AW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
      OM0AW01.OM0AW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
      OM0AW01.OM0AW-WSY2000-DIM-CD = SYCREC.XDMCD;
      OM0AW01.OM0AW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
      OM0AW01.OM0AW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
      TAEREC.TAEDESC1 = OM0AW-WSY2000-POST-1;
      TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "SYREG02";
      TA1REC.TA1MAP = "OM0AM001";
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
    end
  end

    /* move from wsy2000 to vcolor02*/

  SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
  SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
  SYCREC.XSECD = WSY2000.XSE-SESN-CD;
  SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

  SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
  SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
  SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
  SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

  SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
  SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
  SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
  SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

  SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
  SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
  SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
  SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];


end // end OM0AS-SEL-SY2000

// check for spai/cnry compliance
Function OM0AS-SPAIN-CHECK()
   /* ***************************************************************/
   /* Verify  product for SPAI/CNRY compliance                      */
   /* ***************************************************************/
   /* This statement group calls the NIKEBOTH- OP6410 to check for */
   /* Spain compliance. If the Return-code is 02 then the product  */
   /* and the error message 1002 is displayed                      */
   /* ***************************************************************/

  OP10REC.OP10-PASSING-APPL = "OM0A"; /* Calling application*/
  OP10REC.OP1CUOID = OP1REC.OP1CUOID; /* Customer ord-id*/
  OP10REC.OP1NORID = OP1REC.OP1NORID; /* nike-ord-id*/
  OP10REC.KUCCOID = OP1REC.KUCCOID; /* customer*/
  OP10REC.KUMSTRID = OP1REC.KUMSTRID; /* store*/
  OP10REC.OP11TMSF = OP1REC.OP11TMSF; /* onetime ship flg*/
  OP10REC.OP1SGPAO = OP1REC.OP1SGPAO; /* shipgrp ovrd ind*/
  OP10REC.OP1SHAID = OP1REC.OP1SHAID; /* shipgrp addr id*/
  OP10REC.SY1STNBR = OM0AM005.SY1STNBR; /* style*/
  OP10REC.XGPCD = OP1REC.XGPCD; /* gpc*/
  OP10REC.OP10-RETURN-CODE = "99"; /* intialise the return-code*/
  call "OP6410" (OP10REC) {isNoRefresh = yes, isExternal = yes}; /* call Spain compliance routine*/

  /* check for return code from Nike both */
  if (OP10REC.OP10-RETURN-CODE == "00" /* product is Spain/Cnry compliant*/
   || OP10REC.OP10-RETURN-CODE == "01") /* Countr-code is not SPAI/CNRY*/
    /* next sentence*/
  else
    if (OP10REC.OP10-RETURN-CODE == "02")
                                  /* product is Spain/Cnry non-compliant*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(1002);
      return;
    else
      if (OP10REC.OP10-RETURN-CODE == "03") /* database busy */
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(010);
        OM0AS-OP6410-PSRTN(); /* Error post routine*/
        return;
      else
        OMAREC.OMAERR = "Y";
        set TA1REC empty;
        TA1REC.TA1LOC = "OM0AS-SPAIN-CHECK";
        TA1REC.TA1MAP = "OM0AM005";
        XSOMS-OP6410-ERRTN(); /* return to OM0M app*/
      end
    end
  end
end // end OM0AS-SPAIN-CHECK

// CHECK PREPACK CONDITIONS
Function OM0AS01()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0A    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0AS01 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0AW01.OM0AWKY1 = OP1REC.OP1PARTN;
        OM0AW01.OM0AWKY2 = OP1REC.OP1CUOID;
        OM0AW01.OM0AWKY3 = OP1REC.OP1NORID;
        OM0AW01.OM0AWKY4 = "          ";
        TA1REC.TA1TBLKE = OM0AW01.OM0AWKEY;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0AS01

// get next line item number
Function OM0ASAA()






     /* this routine finds the next available line item number*/
     /* to be used for the product about to be added. to do this*/
     /* we do a select set on all line items for this customer*/
     /* order. we find the highest line item number used so far*/
     /* and add 1 to it. if the last line item number used is*/
     /* 900, i.e. no more numbers left, then display the add*/
     /* header screen with an order full message. protect all*/
     /* fields on the screen. aloow the user to pf key to where*/
     /* they want to go.*/


     /* note: since ss is so costly, don't do again if from om0b*/

  if (COMMAREA.CAFROMAP == "OM0B")
    if (OMWREC.OMWLNITX > 899) /* still chck if order is full*/
      OM0AW01.OM0AWOFL = "Y"; /* set order full flag*/
      converseLib.validationFailed(145); /* set order full msg*/
      set OM0AM005.OM0AMPFL protect, invisible; /* darken pf key area*/
    else
      OM0AW01.OM0AWOFL = "N"; /* set order full flag*/
      OMWREC.OMWLNITX = OMWREC.OMWLNITX + 1; /* increment*/
    end
    return;
  end





  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0ASAB(); /* find highest line item number*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0A    ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "OM0ASAA ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0AM005";
    TA1REC.TA1DBASE = "OP2REC  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
    XSPF4();
    exit program;
  end



  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/



  if (OM0AW01.OM0AWLLI > 899) /* if last line item = 900*/
    OM0AW01.OM0AWOFL = "Y"; /* set order full flag*/
    converseLib.validationFailed(145); /* order full message*/
    set OM0AM005.OM0AMPFL protect, invisible; /* darken pf key area*/
  else
    OM0AW01.OM0AWOFL = "N";
    OM0AW01.OM0AWLLI = OM0AW01.OM0AWLLI + 1;
    OMWREC.OMWLNITX = OM0AW01.OM0AWLLI; /* save for om0b call*/
    return;
  end






end // end OM0ASAA

Function OM0ASAB()






    /* this routine loops through the selected set of line item*/
    /* records to find the highest line item number already*/
    /* assigned to theis customer order id.*/


  OM0AW01.OM0AWLLI = 0;

  while (SQLCA.VAGen_SQLCODE != 100) /* until end of set*/
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP2REC.OP2LNINB > OM0AW01.OM0AWLLI)
        OM0AW01.OM0AWLLI = OP2REC.OP2LNINB;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0A    ";
        TA1REC.TA1LOCAT[1] = "SN      ";
        TA1REC.TA1LOCAT[2] = "OM0ASAA ";
        TA1REC.TA1LOCAT[3] = "IO0440  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "OM0AM005";
        TA1REC.TA1DBASE = "OP2REC  ";
        TA1REC.TA1TBLVU = "VITEM001";
        TA1REC.TA1TBLKE = OP2REC.OP2KEY;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
        XSPF4();
        exit program;
      end
    end
  end






end // end OM0ASAB

// setup sizes to dup
Function OM0ASB1()

        /* this routine trys to get a set of first/last*/
        /* sizes from the previous om0b call. This is done*/
        /* so that the user can use the dup size flag.*/

   /* first init the dup size fields and flags*/

  OM0AW01.OP2TORGQ = 0; /* zero dup total quantity*/
  OM0AW01.OM0AWFDI = 0; /* zero first dup size integer*/
  OM0AW01.OM0AWLDI = 0; /* zero last dup size integer*/
  OM0AW01.OM0AWFDD = " "; /* blank first dup size descriptive*/
  OM0AW01.OM0AWLDD = " "; /* blank last dup size descriptive*/
  OM0AW01.OM0AWPSD = "N"; /* init "prev sizes to dup" flag*/




   /* build previous product map field*/

  OM0AW01.SY1STNBR = OMWREC.SY1STNBR;
  OM0AW01.SY2CLRID = OMWREC.SY2CLRID;
  OM0AW01.XDMCD = OMWREC.XDMCD;
  OM0AW01.OM0AWSP1 = "-";
  OM0AW01.OM0AWSP2 = "-";
  OM0AM005.OM0AMPPC = OM0AW01.OM0AWPRD;



    /* get sizes to save for duplication.*/


  if (OMWREC.SY1STNBR > " ") /* if a styl exists*/
    OM0AW01.OM0AWPSD = "Y"; /* set sizes to dup flag*/
  end

    /* if found sizes to dup need to see if need descriptive*/
    /* or integer sizes for defaulting.*/

  if (OM0AW01.OM0AWPSD == "Y") /* if found*/
    if (OM0AW01.XOTSZIND == "I") /* if sizes integer format*/
      OM0AW01.OP2TORGQ = OMWREC.OP2TONOQ;
      OM0AW01.OM0AWFDI = OMWREC.OMWRQSZF;
      OM0AW01.OM0AWLDI = OMWREC.OMWRQSZL;
      return;
    else /* save integer sizes for desc anyway*/
      OM0AW01.OP2TORGQ = OMWREC.OP2TONOQ;
      OM0AW01.OM0AWFDI = OMWREC.OMWRQSZF;
      OM0AW01.OM0AWLDI = OMWREC.OMWRQSZL;
    end
  else
    return; /* no sizes to dup, exit*/
  end

      /* if got here need dup sizes to be in desc format.*/
      /* convert from int format to desc and save dups.*/
          /* first read style record for sy4szscl field.*/
          /* then read sy4rec and get desc sizes.*/

  OM0ASE1(); /* read style record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else /* rec not found, zero defs*/
    OM0AW01.OM0AWFDI = 0;
    OM0AW01.OM0AWLDI = 0;
    OM0AW01.OM0AWPSD = "N";
    return;
  end



     /* read scale record*/

     /* note: since int format is actual index into array, use it*/



  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AW01.OP2TORGQ = OMWREC.OP2TONOQ; /* save quantity*/
    OM0AW01.OM0AWFDD = SY4REC.SY4IDDSC[OM0AWFDI]; /* save fir desc*/
    OM0AW01.OM0AWLDD = SY4REC.SY4IDDSC[OM0AWLDI]; /* save las desc*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* shouldn't happen, zero def sizes*/
      OM0AW01.OM0AWFDI = 0;
      OM0AW01.OM0AWLDI = 0;
      OM0AW01.OM0AWPSD = "N";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0ASB1 ";
      TA1REC.TA1LOCAT[3] = "IO0040  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0AM005";
      TA1REC.TA1DBASE = "SY4REC  ";
      TA1REC.TA1TBLVU = "VSCALE01";
      TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error, clear ws*/
      XSPF4();
      exit program;
    end
  end


end // end OM0ASB1

// load already selected product
Function OM0ASB2()




    /* this statement group is called to load the product*/
    /* selected earlier to the screen from option 6 of*/
    /* the main menu. this routine is called once when we*/
    /* first enter the program and any subsequent pf19's.*/


    /* first we see that we are from maint menu.*/
    /* if so, try to load the product data if there is any.*/



  if (COMMAREA.CAFROMAP == "OM0B") /* if from prd detail*/
    return;
  end



  if (OMWREC.SY1STNBR > " "
   && OM0AW01.OM0AWOFL == "N") /* and order not full*/
    set OM0AM005.SY1STNBR modified;
    OM0AM005.SY1STNBR = OMWREC.SY1STNBR;
    OM0AW01.OM0AWSTY = OMWREC.SY1STNBR;
  end

  if (OMWREC.SY2CLRID > " "
   && OM0AW01.OM0AWOFL == "N") /* and order not full*/
    set OM0AM005.SY2CLRID modified;
    OM0AM005.SY2CLRID = OMWREC.SY2CLRID;
    OM0AW01.OM0AWCLR = OMWREC.SY2CLRID;
  end

  if (OMWREC.XDMCD > " "
   && OM0AW01.OM0AWOFL == "N") /* and order not full*/
    set OM0AM005.XDMCD modified;
    OM0AM005.XDMCD = OMWREC.XDMCD;
    OM0AW01.OM0AWXDM = OMWREC.XDMCD;
  end

  if (OMWREC.KUIPRDID > " "
   && OM0AW01.OM0AWOFL == "N") /* and order not full*/
    set OM0AM005.KUIPRDID modified;
    OM0AM005.KUIPRDID = OMWREC.KUIPRDID;
    OM0AW01.OM0AWCST = OMWREC.KUIPRDID;
  end






end // end OM0ASB2

// application initialization
Function OM0ASBA()




      /* this routine sets up certain defaults for later use.*/
      /* it also darkens certain fields based on whether they*/
      /* the customer uses them or on what phase of goal we*/
      /* are in.*/





     /* read the company record to get the parent number & group number*/


  KUCREC.KUKPCOID = 0;
  KUCREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AW01.KUKPCOID = KUCREC.KUKPCOID;
    OM0AW01.KUCGRPID = KUCREC.KUCGRPID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0AW01.KUKPCOID = 0;
      OM0AW01.KUCGRPID = 0;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0ASBA ";
      TA1REC.TA1LOCAT[3] = "IO0240  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "INIT    ";
      TA1REC.TA1DBASE = "KUCREC  ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1TBLKE = KUCREC.KUCGRP;
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
      XSPF4();
      exit program;
    end
  end


     /* read the customer record to get the xna code (kunrec)*/


  OM0ASLC(); /* get kunrec using company code*/





    /* build customer number for display*/

  OMAREC.OMASEP1 = ".";
  OMAREC.OMASEP2 = ".";
  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMACUDP = OP1REC.XNXCD;


    /* load current date*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OMAREC.OMACYY > 56)
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end



    /* load map header fields*/

  OMWREC.OMWSEP1 = ".";
  OM0AM005.OM0AMOID = OMWREC.OMWORD;
  OM0AM005.OM0AMDTE = VGVar.currentShortGregorianDate;
  OM0AM005.OM0AMRVN = "01";
  OM0AM005.OM0AMCNM = OMAREC.OMACUNO;
  OM0AM005.KUMSTRNM = OMWREC.KUMSTRNM;
  OM0AM005.OM0AMDPS = "N";

   /* for gpc code not equal to apparel, default color code to 00*/

  if (OP1REC.XGPCD != "03")
    OM0AM005.SY2CLRID = "00 ";
    OM0AM005.XDMCD = "00";
  end




   /* setup size error message*/

  OM0AW01.OM0AWSZ1 = "VALID SIZE RANGE IS ";
  OM0AW01.OM0AWSZ3 = " THRU ";




   /* set change mode flag on. if got here must have access.*/

  OMWREC.OMWPF2CH = "Y";





     /* if cust style indicator is not used, darken cust style*/


  if (KUCREC.CU-PRT-XREF-FL == "Y")
    if (KUCREC.KUCSKIND == "P"
     || KUCREC.KUCSKIND == "C"
     || KUCREC.KUCSKIND == "R"
     || KUCREC.KUCSKIND == "G")
       /* next sentence*/
    else
      set OM0AM005.KUIPRDID protect, invisible;
      set OM0AM005.OM0AMCSL protect, invisible;
    end
  else
    set OM0AM005.KUIPRDID protect, invisible;
    set OM0AM005.OM0AMCSL protect, invisible;
  end



    /* enable unit of measure entry*/


  if (OP1REC.XOTCD in XOTTBL.XOTCD /* if order type is valid*/
   && XOTTBL.XOTANSUM[sysVar.arrayIndex] == "Y")
                                   /* and non standard um is allowed*/
    set OM0AM005.XUMCD initialAttributes; /* then skip*/
  else /* else*/
    set OM0AM005.XUMCD protect; /* set the field protect*/
  end


        /* get iseg*/


  if (OP1REC.XDVCD == "02" /* international orders only*/
   && OP1REC.XOBCD == "F1" /* futures*/
   && OP1REC.XGPCD == "03" /* apparel*/
   && OP1REC.XDSCD == " ") /* ship from whse*/
    if (OP1REC.XWHCD == "51" /* apparel whse*/
     || OP1REC.XWHCD == "25")
      OM0ASSC(); /* default iseg number*/
    end
  end


     /* set quality default from xottbl. also set flag as*/
     /* to whether there is only one default or many. if*/
     /* only one, protect the field and exclude edits.*/


  OM0AW01.OM0AWOQC = "N"; /* init one qual code flag*/


  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    OMAREC.OMASUB = sysVar.arrayIndex;
  end

  if (XOTTBL.XQACD1[OMASUB] > " ")
    OM0AW01.OM0AWOQC = "Y";
    OM0AM005.XQACD = XOTTBL.XQACD1[OMASUB];
    if (XOTTBL.XQACD2[OMASUB] > " ")
      OM0AW01.OM0AWOQC = "N";
    else
      if (XOTTBL.XQACD3[OMASUB] > " ")
        OM0AW01.OM0AWOQC = "N";
      end
    end
  else
    if (XOTTBL.XQACD2[OMASUB] > " ")
      OM0AW01.OM0AWOQC = "Y";
      OM0AM005.XQACD = XOTTBL.XQACD2[OMASUB];
      if (XOTTBL.XQACD3[OMASUB] > " ")
        OM0AW01.OM0AWOQC = "N";
      end
    else
      if (XOTTBL.XQACD3[OMASUB] > " ")
        OM0AM005.XQACD = XOTTBL.XQACD3[OMASUB];
        OM0AW01.OM0AWOQC = "Y";
      else
        converseLib.validationFailed(143);
      end
    end
  end

  OM0AW01.XQACD = OM0AM005.XQACD;

  if (OM0AW01.XQACD in XQATBL.XQACD)
    OM0AM005.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end

  if (OM0AW01.OM0AWOQC == "Y" /* if only one allowable quality code*/
   && OM0AW01.OM0AWOFL == "N") /* and order not full,no touch if full*/
    set OM0AM005.XQACD protect;
  end





   /* move order type size indicator to ws*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    OM0AW01.XOTSZIND = XOTTBL.XOTSZIND[sysVar.arrayIndex];
  end





   /* set if came back from om0b - prd dtl. if so*/
   /* get sizes for duplicating.*/

  if (COMMAREA.CAFROMAP == "OM0B")
    OM0ASB1(); /* get dup sizes*/
  else
    set OM0AM005.OM0AMPPL protect, invisible; /* darken prev prd field*/
  end




   /* try to load previously entered product id*/

  OM0ASB2();


   /* clean out incoming product header hold area*/

  OMWREC.OMWSTYLE = " ";





   /* see if message being passed back from om0b*/

  if (OMWREC.OMWCHCTF == "Y") /* if om0b had chg count error*/
    converseLib.validationFailed(331); /* tell the user*/
    OMWREC.OMWCHCTF = "N"; /* reset flag*/
  end



  OP2REC.XPGCD = "00";



   /* read in the newest version of the current op1rec*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else /* record not found has to be an error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0A    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0ASBA ";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "INIT    ";
    TA1REC.TA1DBASE = "OP1REC  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = " "; /* init*/
    OM0AW01.OM0AWKY1 = OP1REC.OP1PARTN;
    OM0AW01.OM0AWKY2 = OP1REC.OP1CUOID;
    OM0AW01.OM0AWKY3 = OP1REC.OP1NORID;
    OM0AW01.OM0AWKY4 = "          ";
    TA1REC.TA1TBLKE = OM0AW01.OM0AWKEY;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    XSPF4();
    exit program;
  end



   /* if this is a draw order, set a draw type ws field.*/
   /* set bulk/draw flag accordingly...*/

       /* ' ' = not a draw order*/
       /* 'c' = customer draw*/
       /* 's' = set-aside draw*/
       /* 'x' = flexible draw*/
       /* these were added 8/96*/
       /* two different codes used because of the way footwear and*/
       /* apparel use nike draws*/
        /* 'n' = nike draw/footwear - prop*/
       /* 'a' = nike draw/apparel - future*/


  OM0AW01.OM0AWBDF = " ";
  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* if draw order*/
      if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y") /* if set-aside*/
        if (XBDTBL.XBDRVRFL[sysVar.arrayIndex] == "Y") /* if rsrvtion required*/
          OM0AW01.OM0AWBDF = "S"; /* smart draw*/
        else
          OM0AW01.OM0AWBDF = "X"; /* flexible draw*/
        end
      else
        OM0AW01.OM0AWBDF = "C"; /* customer draw*/
      end
      if (XBDTBL.XBDCD[sysVar.arrayIndex] == "K")
        OM0AW01.OM0AWBDF = "N"; /* nike draw - footwear*/
      end
    end
  end







     /* protect um field if draw order*/


  if (OM0AW01.OM0AWBDF == "C"
   || OM0AW01.OM0AWBDF == "S"
   || OM0AW01.OM0AWBDF == "X"
   || OM0AW01.OM0AWBDF == "N")
    set OM0AM005.XUMCD protect;
  end

     /* set up size indicator flag in ws*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    OM0AW01.XOTSZIND = XOTTBL.XOTSZIND[sysVar.arrayIndex];
  end



     /* reset late draw flag*/

  OM0AW01.OM0AWLDF = "N";



end // end OM0ASBA

// get special cust grp KUPREC
Function OM0ASCU()

  KUPREC.KUCCOID = OP1REC.KUCCOID; /* load cust comp key*/
  KUPREC.KUMSTRID = OP1REC.KUMSTRID; /* cust store key*/
  KUPREC.XNXCD = OP1REC.XNXCD; /* cust dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* gpccode*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* this is a restricted customer*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* this is not a restricted customer*/
        /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUGRP01";
      OM0AW01.OM0AWKY2 = OP1REC.OP1CUOID; /* format cust ord id*/
      TA1REC.TA1LOCAT[1] = OM0AW01.OM0AWKY2;
      OM0AW01.OM0AWKY2 = OP1REC.OP1NORID; /* format nike ord id*/
      TA1REC.TA1LOCAT[2] = OM0AW01.OM0AWKY2;
      TA1REC.TA1LOCAT[3] = "OM0ASCU ";
      TA1REC.TA1LOCAT[4] = "IO0260  ";
      XSOPS02();
    end
  end


end // end OM0ASCU

// reset mdt tags
Function OM0ASDA()



          /* set mdt's in fields for the case of invalid aid key*/
          /* this allows the user to press the correct aid key*/
          /* without having to re-enter the data.*/




  if (OM0AM005.SY1STNBR is modified)
    set OM0AM005.SY1STNBR modified;
  end

  if (OM0AM005.SY2CLRID is modified)
    set OM0AM005.SY2CLRID modified;
  end

  if (OM0AM005.XDMCD is modified)
    set OM0AM005.XDMCD modified;
  end

  if (OM0AM005.OP2TORGQ is modified)
    set OM0AM005.OP2TORGQ modified;
  end

  if (OM0AM005.XQACD is modified)
    set OM0AM005.XQACD modified;
  end

  if (OM0AM005.KUIPRDID is modified)
    set OM0AM005.KUIPRDID modified;
  end

  if (OM0AM005.OM0AMDPS is modified)
    set OM0AM005.OM0AMDPS modified;
  end

  if (OM0AM005.XPGCD is modified)
    set OM0AM005.XPGCD modified;
  end

  if (OM0AM005.XUMCD is modified)
    set OM0AM005.XUMCD modified;
  end

  if (OM0AM005.PC2INSEG is modified)
    set OM0AM005.PC2INSEG modified;
  end








end // end OM0ASDA

// PROCESS OP1660 RETURN CODES
Function OM0ASDK()
   /* *********************************************************/
   /* * this routine moves the appropriate error message     **/
   /* * based on the return code form the sub-program op1660 **/
   /* *********************************************************/


  if (OP9REC.OP9RTNCD == "01") /* style doesn't qualify for sales pgm*/
    converseLib.validationFailed(135);
  else
    if (OP9REC.OP9RTNCD == "02") /* sls pgm required for this product*/
      converseLib.validationFailed(622);
    else
      if (OP9REC.OP9RTNCD == "03") /* product category not found*/
        converseLib.validationFailed(623);
      else
        if (OP9REC.OP9RTNCD == "05") /* -911 database busy*/
          converseLib.validationFailed(487);
        else
          if (OP9REC.OP9RTNCD == "06") /* sls pgm header not found*/
            converseLib.validationFailed(624);
          else
            if (OP9REC.OP9RTNCD == "07") /* product life cycle not valid*/
              converseLib.validationFailed(648); /* for sales program*/
            else
              if (OP9REC.OP9RTNCD == "08") /* product quality code not valid*/
                converseLib.validationFailed(649); /* for sales program*/
              end
            end
          end
        end
      end
    end
  end
end // end OM0ASDK

// OP1660 ERROR ROUTINE
Function OM0ASDT()
   /* **********************************************************/
   /* * this routine formats the error diags for a db2 error  **/
   /* * from the subroutine op1660 for the multiple product   **/
   /* * screen. op1660 posts the database information while   **/
   /* * this routine formats the key data which consists of   **/
   /* * of the entire pass record op9rec.                     **/
   /* **********************************************************/
  OMAREC.OMAERR = "Y";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "OM0A    ";
  TA1REC.TA1LOCAT[1] = "OM0ASDT ";
  TA1REC.TA1LOCAT[2] = "OP1660  ";
  TA1REC.TA1LOCAT[3] = OP9REC.OP9RTNCD;
  TA1REC.TA1LOCAT[4] = "        ";
  set TAEREC empty;
  OM0AW01.OM0AWEKY = " ";
  OM0AW01.OM0AWK01 = OP1REC.OP1CUOID;
  OM0AW01.OM0AWK02 = OP1REC.OP1NORID;
  OM0AW01.OM0AWK03 = OP9REC.SP1ID;
  OM0AW01.OM0AWK04 = OP9REC.XLCCD;
  OM0AW01.OM0AWK05 = OP9REC.XQACD;
  OM0AW01.OM0AWK06 = OP9REC.XPCCD;
  OM0AW01.OM0AWK07 = OP9REC.SY1STNBR;
  OM0AW01.OM0AWK08 = OP9REC.SY2CLRID;
  OM0AW01.OM0AWK09 = OP9REC.XDMCD;
  OM0AW01.OM0AWK10 = OP9REC.XGPCD;
  OM0AW01.OM0AWK11 = OP9REC.XDVCD;
  OM0AW01.OM0AWK12 = OP9REC.XSOCD;
  OM0AW01.OM0AWK13 = OP9REC.XSPCD;
  OM0AW01.OM0AWK14 = OP9REC.XAUCD;
  OM0AW01.OM0AWK15 = OP9REC.KUCCOID;
  OM0AW01.OM0AWK16 = OP9REC.KUMSTRID;
  OM0AW01.OM0AWK17 = OP9REC.XNXCD;
  TAEREC.TAEDESC1 = OM0AW01.OM0AWEKY;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  XSPF4();
  exit program;
end // end OM0ASDT

// read nike style color
Function OM0ASE1()


  SYCREC.XGPCD = OP1REC.XGPCD;
  SYCREC.SY1STNBR = OM0AW01.SY1STNBR;
  SYCREC.SY2CLRID = OM0AW01.SY2CLRID;
  SYCREC.XDMCD = OM0AW01.XDMCD;

  OM0AW01.OM0AW-WSY2000-FND-FLAG = " ";

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* -- Added for Canada --*/

    if (OP1REC.XDZ-DATA-DIST-CD == "CA")
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OM0AS-SEL-SY2000();
      if (OM0AW01.OM0AW-WSY2000-RETURN-CD == "98")
        converseLib.validationFailed(10); /* database is busy*/
        OMAREC.OMAERR = "Y";
        return;
      end
      if (OM0AW01.OM0AW-WSY2000-FND-FLAG == "N")
        converseLib.validationFailed(911); /* not valid style, color*/
        OMAREC.OMAERR = "Y";
        return;
      end

      /* -- End Canada Modifications --*/

      /* -- Added for US apparel --*/

    else
      if (OP1REC.XGPCD == "03")


        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
         /* continue processing*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OM0AS-SEL-SY2000();
          if (OM0AW01.OM0AW-WSY2000-RETURN-CD == "98")
            converseLib.validationFailed(10); /* database is busy*/
            OMAREC.OMAERR = "Y";
            return;
          end
          if (OM0AW01.OM0AW-WSY2000-FND-FLAG == "N")
            converseLib.validationFailed(911); /* not valid style, color*/
            OMAREC.OMAERR = "Y";
            return;
          end
        end
      end
    end

    /* -- End US apparel changes --*/

    OM0ASEZ(); /* check dates see if product available*/
                                   /* for need dt*/
    OM0AS-CUST-LOGO(); /* do custom logo edits*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(131);
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0ASE1 ";
      TA1REC.TA1LOCAT[3] = "IO0560  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0AM005";
      TA1REC.TA1DBASE = "SYCREC  ";
      TA1REC.TA1TBLVU = "VCOLOR02";
      TA1REC.TA1TBLKE = SYCREC.SYCKEY;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      XSPF4();
      exit program;
    end
  end


end // end OM0ASE1

// check prd life cycle
Function OM0ASE2()






          /* life cycle code check. get current life cycle from*/
          /* sycrec using system date then check to see that this*/
          /* life cycle is allowable for this order's order type.*/



  OM0ASLD(); /* find life cycle from sycrec*/

  if (OM0AW01.XLCCD == "  ") /* no active life cycle found*/
    converseLib.validationFailed(523); /* no life cycle currently in effect*/
    OMAREC.OMAERR = "Y";
    return;
  end



  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (OM0AW01.XLCCD == XOTTBL.XLCCD1[sysVar.arrayIndex])
      return;
    else
      if (OM0AW01.XLCCD == XOTTBL.XLCCD2[sysVar.arrayIndex])
        return;
      else
        if (OM0AW01.XLCCD == XOTTBL.XLCCD3[sysVar.arrayIndex])
          return;
        else
          if (OM0AW01.XLCCD == XOTTBL.XLCCD4[sysVar.arrayIndex])
            return;
          else
            if (OM0AW01.XLCCD == XOTTBL.XLCCD5[sysVar.arrayIndex])
              return;
            end
          end
        end
      end
    end
  end



      /* if order type table didn't match life cylce try*/
      /* order class table. only way to get here is if*/
      /* didn't get match on order type table.*/


  if (OP1REC.XOCCD in XOCTBL.XOCCD)
    if (OM0AW01.XLCCD == XOCTBL.XLCCD1[sysVar.arrayIndex])
      return;
    else
      if (OM0AW01.XLCCD == XOCTBL.XLCCD2[sysVar.arrayIndex])
        return;
      end
    end
  end


   /* *********************************************************************/
   /* divert order processing*/
   /* bypass the life cycle error routine if the order is a divert order*/
   /* *********************************************************************/

  if (OP1REC.XDVCD == "02" /* international order*/
   && OP1REC.XOBCD == "F1" /* futures order*/
   && OP1REC.XDSCD == "1"  /* direct ship*/
   && OP1REC.OP1CUNDT < OP1REC.ZZZSDT) /* need date less than order dt*/
    return; /* skip error routine*/
  end

   /* ****************** end divert order processing **********************/


  if (OM0AW01.XLCCD == "20")
    converseLib.validationFailed(524); /* this is a closeout product, not valid for ot*/
  else
    if (OM0AW01.XLCCD == "15")
      converseLib.validationFailed(525); /* this is a cancelled product*/
    else
      if (OM0AW01.XLCCD == "05")
        converseLib.validationFailed(526); /* this is an in-develop. product...*/
      else
        if (OM0AW01.XLCCD == "25")
          converseLib.validationFailed(527); /* this is a dormant product...*/
        end
      end
    end
  end

  OMAREC.OMAERR = "Y";




end // end OM0ASE2

// default first size
Function OM0ASE3()

   /* this routine will set a default first size if not entered*/
   /* it works forward through the products size array.*/

   /* ------------------------------------------------------------*/
    /* first make sure that the xottbl.allowed/disallowed*/
    /* division code = a or d.*/
   /* ------------------------------------------------------------*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence--ok good values, keep going*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(148); /* setup size error message*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* look for a valid size based on division codes:*/
   /* if xottbl.xotalwdv = 'a' (allowed) and the product divison*/
   /* equals one of the order type's allowable divisions, and*/
   /* the xtras/fringe/gut ok, save it.*/
   /* ----------------------------------------------------*/

  OMAREC.OMASUB1 = 1;
  OM0AW01.OM0AWFSZ = 0;

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A") /* allowed divisions*/

    while (OMAREC.OMASUB1 <= 40)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])

          if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 41;
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
             || SYCREC.SY3FRGUT[OMASUB1] == "G") /* if size is gut*/
              OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 41;
            end
          end

        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end

  end

       /* --------------------------------------------------*/
       /* if the order type table indicates 'd', use this*/
       /* 'disallowed' division logic instead*/
       /* --------------------------------------------------*/
  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D") /* disallowed divisions*/

    while (OMAREC.OMASUB1 <= 40)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])
          /* next sentence--disallowed division, keep looking*/
        else
          if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 41;
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
             || SYCREC.SY3FRGUT[OMASUB1] == "G") /* if size is gut*/
              OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 41;
            end
          end
        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end

  end




  if (OM0AW01.OM0AWFSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    OM0AW01.OM0AWSFL = "Y";
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
    converseLib.validationFailed(148);
  end



end // end OM0ASE3

// default last size
Function OM0ASE4()

   /* this routine will set a default first size if not entered*/
   /* it works backward through the product's size array.*/

   /* ------------------------------------------------------------*/
    /* first make sure that the xottbl.allowed/disallowed*/
    /* division code = a or d.*/
   /* ------------------------------------------------------------*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence--ok good values, keep going*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(148); /* ; setup size error message*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* look for a valid size based on division codes:*/
   /* if xottbl.xotalwdv = 'a' (allowed) and the product divison*/
   /* equals one of the order type's allowable divisions, and*/
   /* the xtras/fringe/gut ok, save it.*/
   /* ----------------------------------------------------*/

  OMAREC.OMASUB1 = 40;
  OM0AW01.OM0AWLSZ = 0;

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A") /* allowed divisions*/

    while (OMAREC.OMASUB1 >= 1)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])

          if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 1;
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
             || SYCREC.SY3FRGUT[OMASUB1] == "G") /* if size is gut*/
              OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 1;
            end
          end

        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    end

  end

       /* --------------------------------------------------*/
       /* if the order type table indicates 'd' use this*/
       /* 'disallowed' division logic instead*/
       /* --------------------------------------------------*/
  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D") /* disallowed divisions*/

    while (OMAREC.OMASUB1 >= 1)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])
          /* next sentence--disallowed division, keep looking*/
        else
          if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 1;
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
             || SYCREC.SY3FRGUT[OMASUB1] == "G") /* if size is gut*/
              OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 1;
            end
          end
        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    end

  end




  if (OM0AW01.OM0AWLSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    converseLib.validationFailed(148);
  end








end // end OM0ASE4

// edit numeric size
Function OM0ASE5()







    /* this routines makes sure that the numeric size entered*/
    /* is between 1 and 40. this is hard due to the input field*/
    /* being character. The edit goes as follows:*/

      /* 1. move size field to array of 5 individual characters*/
      /* 2. go through each cell and test for 0 through 9.*/
         /* replace spaces with zeroes.*/
      /* 3. if map field ok, check range.*/
      /* 4. do all three steps for the first map size.*/





   /* check first size*/


  OM0AW01.OM0AWSRC = OM0AM005.OM0AMFSZ;
  OMAREC.OMASUB1 = 5;

  while (OMAREC.OMASUB1 >= 1)
    if (OM0AW01.OM0AWSRA[OMASUB1] >= "0"
     && OM0AW01.OM0AWSRA[OMASUB1] <= "9")
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    else
      if (OM0AW01.OM0AWSRA[OMASUB1] == " ")
        OM0AW01.OM0AWSRA[OMASUB1] = "0";
        OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
      else
        OMAREC.OMAERR = "Y";
        set OM0AM005.OM0AMFSZ cursor, modified, bold;
        OMAREC.OMASUB1 = 0;
      end
    end
  end


  OM0AW01.OM0AWFSZ = OM0AW01.OM0AWSRN;


  if (OM0AW01.OM0AWFSZ >= 1
   && OM0AW01.OM0AWFSZ <= 40)
    set OM0AM005.OM0AMFSZ initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
  end




   /* now check last size*/

  OM0AW01.OM0AWSRC = OM0AM005.OM0AMLSZ;
  OMAREC.OMASUB1 = 5;

  while (OMAREC.OMASUB1 >= 1)
    if (OM0AW01.OM0AWSRA[OMASUB1] >= "0"
     && OM0AW01.OM0AWSRA[OMASUB1] <= "9")
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    else
      if (OM0AW01.OM0AWSRA[OMASUB1] == " ")
        OM0AW01.OM0AWSRA[OMASUB1] = "0";
        OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
      else
        OMAREC.OMAERR = "Y";
        set OM0AM005.OM0AMLSZ cursor, modified, bold;
        OMAREC.OMASUB1 = 0;
      end
    end
  end


  OM0AW01.OM0AWLSZ = OM0AW01.OM0AWSRN;


  if (OM0AW01.OM0AWLSZ >= 1
   && OM0AW01.OM0AWLSZ <= 40)
    set OM0AM005.OM0AMLSZ initialAttributes;
  else
    OMAREC.OMAERR = "Y";
    set OM0AM005.OM0AMLSZ cursor, modified, bold;
  end



   /* Count the number of valid sizes between first and last*/
   /* if no errors were found.*/

  if (OMAREC.OMAERR == "N")
    OM0ASH5();
  end
end // end OM0ASE5

// edit alpha sizes
Function OM0ASE6()



   /* this routine edits alpha sizes for existance*/



   /* find a match on first size*/


  OMAREC.OMASUB1 = 1;

  while (OMAREC.OMASUB1 <= 40)
    if (OM0AM005.OM0AMFSZ == SY4REC.SY4IDDSC[OMASUB1])
      OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
      OMAREC.OMASUB1 = 99;
    else
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  end


  if (OMAREC.OMASUB1 != 99) /* if not found*/
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
    OMAREC.OMAERR = "Y";
  end




   /* now find a match on last size*/


  OMAREC.OMASUB1 = 1;

  while (OMAREC.OMASUB1 <= 40)
    if (OM0AM005.OM0AMLSZ == SY4REC.SY4IDDSC[OMASUB1])
      OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
      OMAREC.OMASUB1 = 99;
    else
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  end


  if (OMAREC.OMASUB1 != 99) /* if not found*/
    set OM0AM005.OM0AMLSZ cursor, modified, bold;
    OMAREC.OMAERR = "Y";
  end


   /* Count the number of valid sizes between first and last*/
   /* if no errors were found.*/
  if (OMAREC.OMAERR == "N")
    OM0ASH5();
  end
end // end OM0ASE6

// setup size error message
Function OM0ASE9()






    /* when the user encounters some kind of size error we*/
    /* want to display a message showing the valid size*/
    /* range for the entered style. this sgrp builds this*/
    /* size range message.*/



   /* first get first and last available size*/

  if (OM0AW01.OM0AWBDF == "C"
   || OM0AW01.OM0AWBDF == "S"
   || OM0AW01.OM0AWBDF == "X"
   || OM0AW01.OM0AWBDF == "N")
    if (OP1REC.XBDCD == "8"
     || OP1REC.XBDCD == "F")
      OM0ASI3(); /* get first from blank bulk*/
      OM0ASI4(); /* get last from blank bulk*/
    else
      OM0ASH3(); /* get first from bulk order*/
      OM0ASH4(); /* get lastfrom bulk order*/
    end
  else
    OM0ASE3(); /* get first from style record*/
    OM0ASE4(); /* get lastfrom style record*/
  end


   /* check to see that there were some valids sizes*/

  if (OM0AW01.OM0AWFSZ < 1
   || OM0AW01.OM0AWLSZ > 40)
    converseLib.validationFailed(148);
    return;
  end



  if (OM0AW01.XOTSZIND == "D") /* if sizes need to be descriptive*/
    OM0AW01.OM0AWSZ4 = SY4REC.SY4IDDSC[OM0AWLSZ];
    OM0AW01.OM0AWSZ2 = SY4REC.SY4IDDSC[OM0AWFSZ];
  else
    OM0AW01.OM0AWSZ4 = OM0AW01.OM0AWLSZ;
    OM0AW01.OM0AWSZ2 = OM0AW01.OM0AWFSZ;
  end


  OM0AM005.VAGen_EZEMSG = OM0AW01.OM0AWSZM; /* move msg to map*/




end // end OM0ASE9

// edit map fields
Function OM0ASEA()

         /* this statement group edits the fields from op0hm005*/

         /* this routine drives the edits. it looks worse then*/
         /* it really is!!! The following if statements have two*/
         /* main sections. one to edit nike style numbers and the*/
         /* other to edit customer style numbers. the logic in*/
         /* these two sections is completely the same except for*/
         /* the individual style code edits. style, gpc code*/
         /* check, and sizes edits are related. all must be ok*/
         /* for a style to be accepted for entry. for this reason*/
         /* the logic won't go to the next edit unless the*/
         /* previous related edit passes.*/


  if (OM0AM005.SY1STNBR > " ") /* if anything in field*/
    if (OM0AM005.KUIPRDID is modified) /* if anything there*/
      set OM0AM005.KUIPRDID initialAttributes; /* set field*/
      OM0AM005.KUIPRDID = " "; /* clear field*/
    end
    if (OM0AM005.SY1STNBR is modified /* if just entered*/
     || OM0AM005.SY2CLRID is modified 
     || OM0AM005.XDMCD is modified)  
      OMWREC.XUMCD = " "; /* setup for new uom*/
      OM0ASEB(); /* edit nike style*/
      if (OMAREC.OMAERR == "Y") /* if error*/
        OM0ASEC(); /* reset mdt's*/
      else
        /* SPAIN CHANGES * BEGIN * CNAMAN * 03/15/2000*/
        OM0AS-SPAIN-CHECK(); /* spain trademark check*/
        if (OMAREC.OMAERR == "Y") /* if error*/
          set OM0AM005.SY1STNBR cursor, modified, bold;
          set OM0AM005.SY2CLRID modified, bold;
          set OM0AM005.XDMCD modified, bold;
          OM0ASEC(); /* reset mdt's*/
        else
          /* SPAIN CHANGES * END * CNAMAN * 03/15/2000*/
          OM0ASED(); /* edit sales pgm at product level*/
          if (OMAREC.OMAERR == "Y") /* if error*/
            set OM0AM005.SY1STNBR cursor, modified, bold;
            set OM0AM005.SY2CLRID modified, bold;
            set OM0AM005.XDMCD modified, bold;
            OM0ASEC(); /* reset mdt's*/
          else
            set OM0AM005.SY1STNBR initialAttributes;
            set OM0AM005.SY2CLRID initialAttributes;
            set OM0AM005.XDMCD initialAttributes;
            OM0ASEE(); /* edit sizes*/
            if (OMAREC.OMAERR == "Y") /* if error*/
              OM0ASEC(); /* reset mdt's*/
            else
              set OM0AM005.OM0AMFSZ initialAttributes;
              set OM0AM005.OM0AMLSZ initialAttributes;
              set OM0AM005.OM0AMDPS initialAttributes;
              OM0ASEL(); /* edit unit of measure*/
              OM0ASEK(); /* edit package type*/
              OM0ASEJ(); /* edit spec code*/
              OM0ASEH(); /* edit quality code*/
              OM0ASEG(); /* edit total quantity*/

              if (OP1REC.XGPCD == "02")
                OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
              else
                OM0ASEF(); /* edit standard size - apprl*/
              end

            end
          end
          /* SPAIN CHANGES * BEGIN * CNAMAN * 03/15/2000*/
        end
        /* SPAIN CHANGES * END   * CNAMAN * 03/15/2000*/
      end
    else /* style ok, edit rest*/
      OM0AW01.SY1STNBR = OM0AM005.SY1STNBR;
      OM0AW01.SY2CLRID = OM0AM005.SY2CLRID;
      OM0AW01.XDMCD = OM0AM005.XDMCD;
      OM0ASE1(); /* reread sycrec*/
      OM0ASH2(); /* reread bulk order item record*/
      if (OM0AM005.OM0AMFSZ is modified /* if sizes touched*/
       || OM0AM005.OM0AMLSZ is modified 
       || OM0AM005.OM0AMDPS is modified 
       || OMWREC.OMWRQSZF == 0)         /* no prev size*/
        OM0ASEE(); /* edit sizes*/
        if (OMAREC.OMAERR == "Y") /* if error*/
          OM0ASEC(); /* reset mdt's*/
        else
          set OM0AM005.OM0AMFSZ initialAttributes;
          set OM0AM005.OM0AMLSZ initialAttributes;
          set OM0AM005.OM0AMDPS initialAttributes;
          OM0ASEL(); /* edit unit of measure*/
          OM0ASEK(); /* edit package type*/
          OM0ASEJ(); /* edit spec code*/
          OM0ASEH(); /* edit quality code*/
          OM0ASEG(); /* edit total quantity*/

          if (OP1REC.XGPCD == "02")
            OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
          else
            OM0ASEF(); /* edit standard size - apprl*/
          end

        end
      else
        OM0ASEL(); /* edit unit of measure*/
        OM0ASEK(); /* edit package type*/
        OM0ASEJ(); /* edit spec code*/
        OM0ASEH(); /* edit quality code*/
        OM0ASEG(); /* edit total quantity*/

        if (OP1REC.XGPCD == "02")
          OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
        else
          OM0ASEF(); /* edit standard size - apprl*/
        end

      end
    end
  else /* edit cust style*/
    if (OM0AM005.KUIPRDID > " ") /* if cust stle entered*/
      if (OM0AM005.SY1STNBR is modified
       || OM0AM005.SY2CLRID is modified
       || OM0AM005.XDMCD is modified)
        OM0AM005.SY1STNBR = " ";
        OM0AM005.SY2CLRID = " ";
        OM0AM005.XDMCD = " ";
        set OM0AM005.SY1STNBR initialAttributes;
        set OM0AM005.SY2CLRID initialAttributes;
        set OM0AM005.XDMCD initialAttributes;
      end
      if (OM0AM005.KUIPRDID is modified) /* if just touched*/
        OM0ASEM(); /* edit cust style*/
        if (OMAREC.OMAERR == "Y") /* if error*/
          OM0ASEC(); /* reset mdt's*/
        else
          OM0ASED(); /* edit sales pgm at product level*/
          if (OMAREC.OMAERR == "Y") /* if error*/
            set OM0AM005.SY1STNBR modified, bold;
            set OM0AM005.SY2CLRID modified, bold;
            set OM0AM005.XDMCD modified, bold;
            set OM0AM005.KUIPRDID cursor, bold;
            OM0ASEC(); /* reset mdt's*/
          else
            set OM0AM005.SY1STNBR initialAttributes;
            set OM0AM005.SY2CLRID initialAttributes;
            set OM0AM005.XDMCD initialAttributes;
            set OM0AM005.KUIPRDID initialAttributes;
            OM0ASEE(); /* edit sizes*/
            if (OMAREC.OMAERR == "Y") /* if error*/
              OM0ASEC(); /* reset mdt's*/
            else
              set OM0AM005.OM0AMFSZ initialAttributes;
              set OM0AM005.OM0AMLSZ initialAttributes;
              set OM0AM005.OM0AMDPS initialAttributes;
              OM0ASEL(); /* edit unit of measure*/
              OM0ASEK(); /* edit package type*/
              OM0ASEJ(); /* edit spec code*/
              OM0ASEH(); /* edit quality code*/
              OM0ASEG(); /* edit total quantity*/

              if (OP1REC.XGPCD == "02")
                OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
              else
                OM0ASEF(); /* edit standard size - apprl*/
              end

            end
          end
        end
      else /* style ok, edit rest*/
        OM0AW01.SY1STNBR = OMWREC.SY1STNBR;
        OM0AW01.SY2CLRID = OMWREC.SY2CLRID;
        OM0AW01.XDMCD = OMWREC.XDMCD;
        OM0ASE1(); /* reread sycrec*/
        OM0ASH2(); /* reread bulk item record*/
        if (OM0AM005.OM0AMFSZ is modified /* if sizes touched*/
         || OM0AM005.OM0AMLSZ is modified 
         || OM0AM005.OM0AMDPS is modified 
         || OMWREC.OMWRQSZF == 0)         /* no prev size*/
          OM0ASEE(); /* edit sizes*/
          if (OMAREC.OMAERR == "Y") /* if error*/
            OM0ASEC(); /* reset mdt's*/
          else
            set OM0AM005.OM0AMFSZ initialAttributes;
            set OM0AM005.OM0AMLSZ initialAttributes;
            set OM0AM005.OM0AMDPS initialAttributes;
            OM0ASEL(); /* edit unit of measure*/
            OM0ASEK(); /* edit package type*/
            OM0ASEJ(); /* edit spec code*/
            OM0ASEH(); /* edit quality code*/
            OM0ASEG(); /* edit total quantity*/

            if (OP1REC.XGPCD == "02")
              OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
            else
              OM0ASEF(); /* edit standard size - apprl*/
            end

          end
        else
          OM0ASEL(); /* edit unit of measure*/
          OM0ASEK(); /* edit package type*/
          OM0ASEJ(); /* edit spec code*/
          OM0ASEH(); /* edit quality code*/
          OM0ASEG(); /* edit total quantity*/

          if (OP1REC.XGPCD == "02")
            OM0AS-EDIT-MSR(); /* edit musical size run - ftwr*/
          else
            OM0ASEF(); /* edit standard size - apprl*/
          end

        end
      end
    else
                                   /* nothing for this line item, empty it*/
      OMWREC.OMWSTYLE = " ";
    end
  end




  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/






end // end OM0ASEA

// edit nike style/color
Function OM0ASEB()



  if (OM0AM005.XDMCD == " ")
    OM0AM005.XDMCD = "00";
    set OM0AM005.XDMCD initialAttributes;
  else
    if (OM0AM005.XDMCD in XDMTBL.XDMCD)
      set OM0AM005.XDMCD initialAttributes;
    else
      set OM0AM005.XDMCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end

  OM0AW01.SY1STNBR = OM0AM005.SY1STNBR;
  OM0AW01.SY2CLRID = OM0AM005.SY2CLRID;
  OM0AW01.XDMCD = OM0AM005.XDMCD;

  OM0ASE1(); /* read nike style/color record*/


  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AM005.SY1SSTNM = SYCREC.SY1SSTNM;
    OM0AM005.SY2CLRAB = SYCREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100
     || OM0AW01.OM0AW-WSY2000-FND-FLAG == "N") /* Added for Canada*/
      OMAREC.OMAERR = "Y";
      set OM0AM005.SY1STNBR cursor, modified, bold;
      set OM0AM005.SY2CLRID modified, bold;
      set OM0AM005.XDMCD modified, bold;
      return;
    end
  end


   /* ----------------------------------------------------------*/
   /* Make sure that the product brand is the same as the order*/
   /* brand.*/
   /* ----------------------------------------------------------*/
  if (SYCREC.XBCCD != OP1REC.XBCCD)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(586); /* product/order brands don't match.*/
    set OM0AM005.SY1STNBR cursor, modified, bold;
    return;
  end


   /* ----------------------------------------------------------*/
   /* equipment check*/
   /* ----------------------------------------------------------*/

  OM0AS-CHECK-EQMT(); /* call to eu0100*/
  if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y")
    OPWREC01.XPCCK = WEU0100.XPCCD;
  else
    OPWREC01.XPCCK = "  ";
  end


  OPWREC01.XOTCK = "N";
  OM0AW01.OM0AWFND = "N";
  sysVar.arrayIndex = 1;



   /* **********TCS INCLUDE BEGIN***********/

  set VXVO0001 empty;
  VXVO0001.XOBCD = OP1REC.XOBCD; /* base order type code*/
  VXVO0001.XGPCD = OP1REC.XGPCD; /* gpc code*/
  VXVO0001.XSOCD = OP1REC.XSOCD; /* sales office code*/
  VXVO0001.XDVCD = OP1REC.XDVCD; /* division code*/
  VXVO0001.XBCCD = OP1REC.XBCCD; /* brand code*/
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK; /* product category code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cussor to scan*/
                                              /* ;/* using all 7 fields*/

  if (SQLCA.VAGen_SQLCODE != 0) /* bad open cusrsor return cd*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OM0ASEB";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    XSPF4();
    exit program;
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* first occurence*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      if (VXVO0001.XOTCD != OP1REC.XOTCD)
        OPWREC01.XOTCK = "Y";
      end
      OM0AW01.OM0AWFND = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OM0ASEB";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
        XSPF4();
        exit program;
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor 1*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if not a good cursor close*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OM0ASEB";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    XSPF4();
    exit program;
  end

   /* **********TCS INCLUDE END***********/

  if (OM0AW01.OM0AWFND == "N")
    if (OPWREC01.XPCCK > "  ")
      converseLib.validationFailed(923); /* prod cat/ot not valid so, etc*/
      OMAREC.OMAERR = "Y";
      return;
    else
      converseLib.validationFailed(482); /* Invalid system order type*/
      OMAREC.OMAERR = "Y";
      return;
    end
  end

  if (OPWREC01.XOTCK == "Y")
    converseLib.validationFailed(939); /* prod not valid for order type*/
    OMAREC.OMAERR = "Y";
    return;
  end


        /* check if cust has own style numbers. if so go*/
        /* get number.*/

  if (KUCREC.KUCSKIND > " "
   && KUCREC.CU-PRT-XREF-FL == "Y")
    set WCU1710 empty;

    WCU1710-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
    WCU1710-IN-XGP-GPC-CD = OP1REC.XGPCD;
    WCU1710-IN-SY-STY-NBR = OM0AM005.SY1STNBR;
    WCU1710-IN-SY-COLR-CD-ID = OM0AM005.SY2CLRID;
    WCU1710-IN-XDM-DIM-CD = OM0AM005.XDMCD;
    WCU1710-IN-XQA-QUAL-CD = OM0AM005.XQACD;

    WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
    WCU1710-IN-CU-CO-ID = OP1REC.KUCCOID;

    WCU1710-RETURN-CODE = 99;

    call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

    /* check CU1710 return code*/

    if (WCU1710.WCU1710-RETURN-CODE == 0)
      OMWREC.KUIPRDID = WCU1710.CU-CUST-PROD-ID;
      OM0AM005.KUIPRDID = WCU1710.CU-CUST-PROD-ID;
    else
      if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
        OMWREC.KUIPRDID = " ";
      else
        TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[2] = "OM0ASEB "; /* statement group*/
        TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
        TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
        TA1REC.TA1TYPE = "APPL"; /* abend type*/
        TA1REC.TA1FUNC = "RETN"; /* abend func*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end /* abend module*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program;
      end
    end
  end


  OM0ASLB(); /* check if the style is restricted to*/
                                   /* sales office*/

  if (OMAREC.OMAERR == "Y") /* style is restricted*/
    set OM0AM005.SY1STNBR cursor, modified, bold;
    set OM0AM005.SY2CLRID modified, bold;
    set OM0AM005.XDMCD modified, bold;
    return;
  end



          /* life cycle code check*/
   /* skip thelife cycle code check if order is a customer draw*/
   /* or a nike draw*/
  if (OM0AW01.OM0AWBDF == "C" || 
  OM0AW01.OM0AWBDF == "N")
    /* next sentence*/
  else
    OM0ASE2();
  end



  if (OMAREC.OMAERR == "Y") /* bad life cycle code*/
    set OM0AM005.SY1STNBR cursor, modified, bold;
    set OM0AM005.SY2CLRID modified, bold;
    set OM0AM005.XDMCD modified, bold;
    return;
  end

   /* if this is a blank bulk order*/
    /* validate the blank bulk program with io5480 - avgrec*/
    /* validate the blank style with io5470 - avhrec*/

  if (OP1REC.XBDCD == "B")
    OM0ASEP(); /* use io5480 to validate blank bulk*/
                                   /* program*/
    if (OMAREC.OMAERR == "Y")
      set OM0AM005.SY1STNBR cursor, modified, bold;
      set OM0AM005.SY2CLRID modified, bold;
      set OM0AM005.XDMCD modified, bold;
      return;
    else
      OM0ASEQ(); /* use io5470 to validate the blank bulk*/
                                   /* styles*/
      if (OMAREC.OMAERR == "Y")
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID modified, bold;
        set OM0AM005.XDMCD modified, bold;
        return;
      end
    end
  end

   /* if this is a finished draw order*/
    /* validate the finished draw program with io5480 - avgrec*/
    /* validate the finished style with io5470 - avhrec*/

  if (OP1REC.XBDCD == "F"
   || OP1REC.XBDCD == "3"
   || OP1REC.XBDCD == "8")
    OM0ASER(); /* use io5480 to validate finished draw*/
                                   /* program*/
    if (OMAREC.OMAERR == "Y")
      set OM0AM005.SY1STNBR cursor, modified, bold;
      set OM0AM005.SY2CLRID modified, bold;
      set OM0AM005.XDMCD modified, bold;
      return;
    else
      OM0ASES(); /* use io5470 to validate finished draw*/
                                   /* styles*/
      if (OMAREC.OMAERR == "Y")
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID modified, bold;
        set OM0AM005.XDMCD modified, bold;
        return;
      else
        if (OP1REC.XBDCD == "8" /* finished draw from blank bulk*/
         || OP1REC.XBDCD == "F") /* finished bulk from blank bulk*/

          OM0ASET(); /* use io5530 to retrieve cutoff date*/
          if (OMAREC.OMAERR == "Y")
            set OM0AM005.SY1STNBR cursor, modified, bold;
            set OM0AM005.SY2CLRID modified, bold;
            set OM0AM005.XDMCD modified, bold;
            return;
          else
            if (OMAREC.OMACDT > OECREC.OPJCUTDT
             && OM0AW01.OM0AWLDF != "Y")

              OMAREC.OMAERR = "Y"; /* set error flag*/
              set OM0AM005.SY1STNBR cursor, modified, bold;
              set OM0AM005.SY2CLRID modified, bold;
              set OM0AM005.XDMCD modified, bold;

              sysVar.arrayIndex = 1;
              if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID from sysVar.arrayIndex
               && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
               && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y")
                OM0AW01.OM0AWLDF = "Y"; /* set late draw flag*/
                converseLib.validationFailed(638); /* ; passed cutoff date warning*/
              else
                converseLib.validationFailed(631); /* ; passed cutoff date error*/
              end
            end
          end
        end
      end
    end
  end




   /* if not a draw order, edits are done, exit.*/


  if (OM0AW01.OM0AWBDF != "C"
   && OM0AW01.OM0AWBDF != "S"
   && OM0AW01.OM0AWBDF != "X"
   && OM0AW01.OM0AWBDF != "N")
    OMWREC.SY1STNBR = OM0AM005.SY1STNBR;
    OMWREC.SY2CLRID = OM0AM005.SY2CLRID;
    OMWREC.XDMCD = OM0AM005.XDMCD;
    return;
  end



   /* need to see that product exists on bulk order.*/



  OM0ASH1();

  sysVar.arrayIndex = 1;

  if (OP1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex)
  end

  if (OM0AW01.OM0AWFND == "Y") /* if found the style*/
    OMWREC.OMWBKLIN = OP2REC.OP2LNINB;
    OMWREC.OP1NORID = OP2REC.OP1NORID;
    if (OM0AW01.OM0AWBDF == "C"      /* if customer draw*/
     || OM0AW01.OM0AWBDF == "X"      /* or flexible draw*/
     || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw and*/
    XOTTBL.XOTATONF[sysVar.arrayIndex] == "N")) /* not at once order*/
      if (OM0AW01.OM0AW-FOUND-QTY-SW == "N") /* if no qty to order*/
        converseLib.validationFailed(291);
        OMAREC.OMAERR = "Y";
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID modified, bold;
        set OM0AM005.XDMCD modified, bold;
      else
        OMWREC.SY1STNBR = OM0AM005.SY1STNBR;
        OMWREC.SY2CLRID = OM0AM005.SY2CLRID;
        OMWREC.XDMCD = OM0AM005.XDMCD;
      end
    else
      if (OM0AW01.OM0AWBDF == "S"      /* if smart draw*/
       || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw and*/
      XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")) /* at once order*/
        if (OP2REC.OP2TOHRQ == 0) /* if no qty to order*/
          converseLib.validationFailed(282);
          OMAREC.OMAERR = "Y";
          set OM0AM005.SY1STNBR cursor, modified, bold;
          set OM0AM005.SY2CLRID modified, bold;
          set OM0AM005.XDMCD modified, bold;
        else
          OMWREC.SY1STNBR = OM0AM005.SY1STNBR;
          OMWREC.SY2CLRID = OM0AM005.SY2CLRID;
          OMWREC.XDMCD = OM0AM005.XDMCD;
        end
      end
    end
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(285);
    set OM0AM005.SY1STNBR cursor, modified, bold;
    set OM0AM005.SY2CLRID modified, bold;
    set OM0AM005.XDMCD modified, bold;
    return;
  end



    /* warehouse code must be the same on bulk and draw orders*/



  if (OMAREC.OMAERR != "Y") /* dont do edit if qty in error*/
    OM0ASH6(); /* read bulk order header*/
    if (OMAREC.OMAERR != "Y") /* dont do edit if bulk not found*/
      if (OP1REC.XWHCD == OM0AW02.XWHCD)
        /* next sentence*/
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(299); /* "bulk and draw order have different*/
                                  /* warehouses - cannot add product"*/
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID modified, bold;
        set OM0AM005.XDMCD modified, bold;
      end
    end
  end
end // end OM0ASEB

// reset single mdt tags
Function OM0ASEC()



          /* set mdt's in fields for the case of invalid aid key*/
          /* this allows the user to press the correct aid key*/
          /* without having to re-enter the data.*/





  if (OM0AM005.OP2TORGQ is modified)
    set OM0AM005.OP2TORGQ modified;
  end

  if (OM0AM005.XQACD is modified)
    set OM0AM005.XQACD modified;
  end

  if (OM0AM005.XPGCD is modified)
    set OM0AM005.XPGCD modified;
  end

  if (OM0AM005.XUMCD is modified)
    set OM0AM005.XUMCD modified;
  end

  if (OM0AM005.PC2INSEG is modified)
    set OM0AM005.PC2INSEG modified;
  end







end // end OM0ASEC

// verify sales program
Function OM0ASED()

   /* check to see if a sales program is required for this*/
   /* product.*/

    /* build the op9rec key to subprogram op1660*/

  OP9REC.SP1ID = OP1REC.SP1ID; /* sales pgm id*/
  OP9REC.XLCCD = OM0AW01.XLCCD; /* life cycle code*/
  OP9REC.XQACD = OM0AM005.XQACD; /* qual code*/
  OP9REC.XPCCD = SYCREC.XPCCD; /* product category*/
  OP9REC.SY1STNBR = OM0AM005.SY1STNBR;
  OP9REC.SY2CLRID = OM0AM005.SY2CLRID;
  OP9REC.XDMCD = OM0AM005.XDMCD;
  OP9REC.XGPCD = OP1REC.XGPCD;
  OP9REC.XDVCD = OP1REC.XDVCD;
  OP9REC.XSOCD = OP1REC.XSOCD;
  OP9REC.XSPCD = SYCREC.XSPCD;
  if (KUCREC.XAUCD in XAUTBL.XAUCD /* acct cls in table*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OP9REC.XAUCD = KUCREC.XAUCD;
  else
    OP9REC.XAUCD = " ";
  end
  OP9REC.KUCCOID = OP1REC.KUCCOID;
  OP9REC.KUMSTRID = OP1REC.KUMSTRID;
  OP9REC.XNXCD = OP1REC.XNXCD;
  OP9REC.OP9RTNCD = " ";


   /* skip sales program edit if customer draw*/
      /* or rebook draw*/

  if (OM0AW01.OM0AWBDF == "C" /* customer draw*/
   || OM0AW01.OM0AWBDF == "R") /* rebook draw*/
    return;
  else
    call "OP1660" (OP9REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (OP9REC.OP9RTNCD == "00") /* good rtn accept product*/
      /* next sentence*/
  else
    if (OP9REC.OP9RTNCD == "04") /* db2 error*/
      TAEREC.TAEDESC2 = " DB2 ERROR OM0ASED ";
      OM0ASDT(); /* format error diags*/
    else
      OMAREC.OMAERR = "Y";
      OM0ASDK(); /* process op1660 return code*/
    end
  end


end // end OM0ASED

// edit first/last size
Function OM0ASEE()







         /* this sgrp edits the first and last sizes from the*/
         /* product header add screen. the front end does*/
         /* some checking and defaulting before we get into*/
         /* the actual edits.*/

         /* front end:   1. if dup flag not 'y' or 'n'*/
                            /* error, exit.*/
                      /* 2. if dup flag set to yes*/
                            /* set duplicates*/
                      /* 3. if any sizes missing*/
                            /* default sizes*/

         /* size edits:  1. edit entered map size for format*/
                      /* 2. check size division codes*/
                      /* 3. see if size division match allowable*/
                          /* division codes from ordr typ table.*/
                      /* 4. check size fringe/gut indicators*/
                      /* 5. first size cant be greater then last*/


       /* note: mdt use for the sizes is not complete. i don't*/
             /* reset them for converses. one reason is, when*/
             /* this sgrp is invoked, both sizes are edited no*/
             /* matter if only one was entered or touched.*/
             /* the other reason is, i always invoke this sgrp*/
             /* if sizes were touched or if no defaults have*/
             /* been placed into the ws product array yet.*/



   /* get the op3rec for edits.*/

  if (OM0AW01.OM0AWBDF == "C"
   || OM0AW01.OM0AWBDF == "S"
   || OM0AW01.OM0AWBDF == "X"
   || OM0AW01.OM0AWBDF == "N")
    OP3REC.OP2KEY = OP2REC.OP2KEY;
    OP8REC.OP8TASK = "S ";
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
    if (OPBREC.OPBSZRC == 0)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0ASEE ";
      TA1REC.TA1LOCAT[3] = "DB1000  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0AM005";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VOSIZE01";
      TA1REC.TA1TBLKE = OP3REC.OP2KEY;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
      XSPF4();
      exit program;
    end
  end



    /* first check if dup flag is valid*/

  if (OM0AM005.OM0AMDPS == "N"
   || OM0AM005.OM0AMDPS == "Y")
     /* next sentence*/
  else
    set OM0AM005.OM0AMDPS cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(140);
    return;
  end







   /* see if dup flag on, if so try to dup f/l sizes*/
      /* the logic goes as follows:*/
        /* 1. test the ws dup flag to see if we have sizes*/
           /* to dup. if none to dup, error, else dup.*/



  if (OM0AM005.OM0AMDPS == "N") /* if dont want to dup sizes*/
     /* next sentence*/
  else
    if (OM0AM005.OM0AMDPS is modified) /* if dup just asked for*/
      if (OM0AW01.OM0AWPSD == "Y") /* if szs from prev map*/
        OM0AM005.OP2TORGQ = OM0AW01.OP2TORGQ;
        if (OM0AW01.XOTSZIND == "I") /* if need integer sizes*/
          OM0AM005.OM0AMFSZ = OM0AW01.OM0AWFDI; /* int size*/
          OM0AM005.OM0AMLSZ = OM0AW01.OM0AWLDI;
        else
          OM0AM005.OM0AMFSZ = OM0AW01.OM0AWFDD; /* desc size*/
          OM0AM005.OM0AMLSZ = OM0AW01.OM0AWLDD;
        end
      else /* no sizes to dup error*/
        set OM0AM005.OM0AMDPS cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(147);
        return;
      end
    else
      OM0AM005.OM0AMDPS = "N"; /* if change size, set dup flg off*/
    end
  end


  OMWREC.OMWDUPSZ = OM0AM005.OM0AMDPS; /* save dup flag*/





    /* check if sizes are in a descriptive format.*/
    /* if so read style size/scale record.*/



  if (OM0AW01.XOTSZIND == "D") /* if descriptive sizes*/
    SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence              *************************/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0A    ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "OM0ASD6 ";
        TA1REC.TA1LOCAT[3] = "IO0040  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "OM0AM005";
        TA1REC.TA1DBASE = "SY4REC  ";
        TA1REC.TA1TBLVU = "VSCALE01";
        TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error, clear ws*/
        XSPF4();
        exit program;
      end
    end
  end








   /* next check whether both sizes are entered.*/
       /* if not default the missing one.*/
   /* if the order is a draw, default from the bulk order,*/
   /* otherwise, default from the style record.*/

    /* note: if i default both and do size edit 5 then*/
          /* all size tests have passed so return.*/



  if (OM0AM005.OM0AMLSZ > " ")
    if (OM0AM005.OM0AMFSZ > " ")
       /* next sentence*/
    else
      if (OM0AW01.OM0AWBDF == "C"
       || OM0AW01.OM0AWBDF == "S"
       || OM0AW01.OM0AWBDF == "X"
       || OM0AW01.OM0AWBDF == "N")
        if (OP1REC.XBDCD == "8"
         || OP1REC.XBDCD == "F")
          OM0ASI3(); /* default first from bulk (blank bulk)*/
        else
          OM0ASH3(); /* default first from bulk*/
        end
      else
        OM0ASE3(); /* default first size from style*/
      end
      if (OMAREC.OMAERR == "N") /* if no error*/
        if (OM0AW01.XOTSZIND == "D") /* if need descriptive sizes*/
          OM0AM005.OM0AMFSZ = SY4REC.SY4IDDSC[OM0AWFSZ];
        else
          OM0AM005.OM0AMFSZ = OM0AW01.OM0AWFSZ;
        end
      end
    end
  else
    if (OM0AM005.OM0AMFSZ > " ")
      if (OM0AW01.OM0AWBDF == "C"
       || OM0AW01.OM0AWBDF == "S"
       || OM0AW01.OM0AWBDF == "X"
       || OM0AW01.OM0AWBDF == "N")
        if (OP1REC.XBDCD == "8"
         || OP1REC.XBDCD == "F")
          OM0ASI4(); /* default last from blank bulk*/
        else
          OM0ASH4(); /* default last from bulk*/
        end
      else
        OM0ASE4(); /* default last size*/
      end
      if (OMAREC.OMAERR == "N") /* in no error*/
        if (OM0AW01.XOTSZIND == "D") /* if need descriptive sizes*/
          OM0AM005.OM0AMLSZ = SY4REC.SY4IDDSC[OM0AWLSZ];
        else
          OM0AM005.OM0AMLSZ = OM0AW01.OM0AWLSZ;
        end
      end
    else
      if (OM0AW01.OM0AWBDF == "C"
       || OM0AW01.OM0AWBDF == "S"
       || OM0AW01.OM0AWBDF == "X"
       || OM0AW01.OM0AWBDF == "N")
        if (OP1REC.XBDCD == "8"
         || OP1REC.XBDCD == "F")
          OM0ASI3(); /* default both from blank bulk*/
          OM0ASI4();
        else
          OM0ASH3(); /* default both from bulk*/
          OM0ASH4();
        end
      else
        OM0ASE3(); /* default both from style*/
        OM0ASE4();
      end
      if (OMAREC.OMAERR == "N") /* in no error*/
        if (OM0AW01.XOTSZIND == "D") /* if need descriptive sizes*/
          OM0AM005.OM0AMFSZ = SY4REC.SY4IDDSC[OM0AWFSZ];
          OM0AM005.OM0AMLSZ = SY4REC.SY4IDDSC[OM0AWLSZ];
        else
          OM0AM005.OM0AMFSZ = OM0AW01.OM0AWFSZ;
          OM0AM005.OM0AMLSZ = OM0AW01.OM0AWLSZ;
        end
      end
      if (OM0AW01.OM0AWFSZ > OM0AW01.OM0AWLSZ) /* if fir sz > last*/
        converseLib.validationFailed(142);
        OMAREC.OMAERR = "Y";
        set OM0AM005.OM0AMFSZ modified, bold;
        set OM0AM005.OM0AMLSZ cursor, modified, bold;
      else
        OMWREC.OMWRQSZF = OM0AW01.OM0AWFSZ;
        OMWREC.OMWRQSZL = OM0AW01.OM0AWLSZ;
        if (OM0AW01.OP2TORGQ > 0)
          OM0AM005.OP2TORGQ = OM0AW01.OP2TORGQ;
          OMWREC.OP2TONOQ = OM0AW01.OP2TORGQ;
          return;
        else
          OMWREC.OP2TONOQ = OM0AM005.OP2TORGQ;
          return;
        end
      end
    end
  end







   /* now start edits on the sizes themselves*/
    /* as these edits progress, you can only*/
    /* go to the next edit if the previous one was good.*/





    /* size edit number 1*/
       /* based on the size input formats, verify sizes*/


  if (OM0AW01.XOTSZIND == "I")
    OM0ASE5(); /* edit numeric sizes*/
  else
    OM0ASE6(); /* edit alpha sizes*/
  end


  if (OMAREC.OMAERR == "Y") /* if error*/
    OM0ASE9(); /* build size error message*/
    return;
  end




   /* size edit number 2*/
        /* check size division code for both first and last*/


  if (SYCREC.XDVCD[OM0AWLSZ] == " ")
    OMAREC.OMAERR = "Y";
    set OM0AM005.OM0AMLSZ cursor, modified, bold;
  end


  if (SYCREC.XDVCD[OM0AWFSZ] == " ")
    OMAREC.OMAERR = "Y";
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
  end


  if (OMAREC.OMAERR == "Y") /* if error*/
    OM0ASE9(); /* build size error message*/
    return;
  end




    /* edit check number 3*/
      /* match style div to allowed divs for order type*/
      /* for both first and last sizes.*/

    /* first make sure that the xottbl.allowed/disallowed*/
    /* division code = a or d.*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence--ok good values, keep going*/
    else
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMLSZ cursor, modified, bold;
      set OM0AM005.OM0AMFSZ cursor, modified, bold;
      OM0ASE9(); /* setup size error message*/
      return;
    end
  end


   /* ----------------------------------------------------*/
         /* last-size check*/
   /* if flag = a (allowed) and the product division equals one*/
   /* of the order type's allowable divisions, it's ok*/
   /* else it's an error*/
   /* ----------------------------------------------------*/

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A")
    if (SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD1[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD2[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD3[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD4[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD5[sysVar.arrayIndex])
       /* next sentence*/
    else
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMLSZ cursor, modified, bold;
    end
  end
       /* ----------------------------------------------------*/
       /* if flag = d (disallowed) this order type restricts*/
       /* the divisions listed from the product.  if no match,*/
       /* it's good; if there is a match, it's an error*/
       /* ----------------------------------------------------*/
  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
    if (SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD1[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD2[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD3[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD4[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWLSZ] == XOTTBL.XDVCD5[sysVar.arrayIndex])
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMLSZ cursor, modified, bold;
    end
  end



   /* ----------------------------------------------------*/
       /* first-size check*/
   /* if flag = a (allowed) and the product division equals one*/
   /* of the order type's allowable divisions, it's ok*/
   /* else it's an error*/
   /* ----------------------------------------------------*/
  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A")
    if (SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD1[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD2[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD3[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD4[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD5[sysVar.arrayIndex])
       /* next sentence*/
    else
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMFSZ cursor, modified, bold;
    end
  end
       /* ----------------------------------------------------*/
       /* if flag = d (disallowed) this order type restricts*/
       /* the divisions listed from the product.  if no match,*/
       /* it's good; if there is a match, it's an error*/
       /* ----------------------------------------------------*/
  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
    if (SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD1[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD2[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD3[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD4[sysVar.arrayIndex]
     || SYCREC.XDVCD[OM0AWFSZ] == XOTTBL.XDVCD5[sysVar.arrayIndex])
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMFSZ cursor, modified, bold;
    end
  end


  if (OMAREC.OMAERR == "Y") /* if error*/
    OM0ASE9(); /* setup size error message*/
    return;
  end






   /* edit check number 4*/
     /* check size fringe gut indicators*/


  if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if order type allows extras*/
     /* next sentence*/
  else
    if (SYCREC.SY3FRGUT[OM0AWLSZ] == "X") /* if size is extra*/
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMLSZ cursor, modified, bold;
    end
  end


  if (XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if order type allows extras*/
     /* next sentence*/
  else
    if (SYCREC.SY3FRGUT[OM0AWFSZ] == "X") /* if size is an extra*/
      OMAREC.OMAERR = "Y";
      set OM0AM005.OM0AMFSZ cursor, modified, bold;
    end
  end




  if (OMAREC.OMAERR == "Y") /* if error*/
    OM0ASE9(); /* build size error message*/
    return;
  end







   /* edit check number 5*/
     /* first size cannot be greater then last size*/


  if (OM0AW01.OM0AWFSZ > OM0AW01.OM0AWLSZ)
    converseLib.validationFailed(142);
    OMAREC.OMAERR = "Y";
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
    set OM0AM005.OM0AMLSZ cursor, bold;
    return;
  end







      /* size edit 6*/
   /* edit for bulk orders only*/



  if (OM0AW01.OM0AWBDF == "C"
   || OM0AW01.OM0AWBDF == "S"
   || OM0AW01.OM0AWBDF == "X"
   || OM0AW01.OM0AWBDF == "N")
    OM0ASG8();
  end


  if (OMAREC.OMAERR == "Y") /* if error occured*/
    return;
  end




   /* IF GOT TO HERE ALL IS WELL SO LOAD F/L SIZE INTO WS TBL*/


  OMWREC.OMWRQSZF = OM0AW01.OM0AWFSZ;
  OMWREC.OMWRQSZL = OM0AW01.OM0AWLSZ;



end // end OM0ASEE

// edit standard size
Function OM0ASEF()




    /* edit standard size distribution code*/


   /* F OM0AM005.XSZCD IS MODIFIED;*/
   /* IF OM0AM005.XSZCD GT ' ';*/
     /* ; /* next sentence*/
   /* ELSE;*/
     /* SET OM0AM005.XSZCD DEFINED;*/
     /* MOVE ' ' TO OMWREC.XSZCD;*/
     /* EZERTN;*/
   /* END;*/
   /* LSE;*/
   /* EZERTN;*/
   /* ND;*/




    /* if xszcd is valid and active*/
      /* if xsz number of sizes equals number of sizes between*/
               /* first and last sizes*/
         /* okay*/
      /* else;*/
         /* error*/
    /* else*/
      /* error*/



   /* F OM0AM005.XSZCD IN XSZTBL.XSZCD*/
   /* AND XSZTBL.XXXSTAT(EZETST) EQ 'A';*/
   /* IF XSZTBL.XSZNBRSZ(EZETST) EQ OM0AW01.OM0AWNAS;*/
     /* MOVE OM0AM005.XSZCD TO OMWREC.XSZCD;*/
     /* SET OM0AM005.XSZCD DEFINED;*/
   /* ELSE;*/
     /* MOVE 'Y' TO OMAREC.OMAERR;*/
     /* MOVE 289 TO EZEMNO;           /* number of sizes don't match*/
     /* SET OM0AM005.XSZCD CURSOR,MODIFIED,BRIGHT;*/
     /* EZERTN;*/
   /* END;*/
   /* LSE;*/
   /* MOVE 'Y' TO OMAREC.OMAERR;*/
   /* MOVE 290 TO EZEMNO;             /* invalid xszcd*/
   /* SET OM0AM005.XSZCD CURSOR,MODIFIED,BRIGHT;*/
   /* EZERTN;*/
   /* ND;*/



end // end OM0ASEF

// edit tot quantity
Function OM0ASEG()





          /* edit total quantity for this line item*/



  if (OM0AM005.OP2TORGQ > 0)
    OMWREC.OP2TONOQ = OM0AM005.OP2TORGQ;
    set OM0AM005.OP2TORGQ initialAttributes;
  end
   /* LSE;*/
   /* IF OM0AM005.XSZCD GT ' ';       /* qty req if szcd entered*/
     /* MOVE 287 TO EZEMNO;*/
     /* MOVE 'Y' TO OMAREC.OMAERR;*/
     /* SET OM0AM005.OP2TORGQ CURSOR,MODIFIED,BRIGHT;*/
     /* SET OM0AM005.XSZCD MODIFIED,BRIGHT;*/
     /* EZERTN;*/
   /* ELSE;*/
     /* MOVE 0 TO OMWREC.OP2TONOQ;*/
     /* SET OM0AM005.OP2TORGQ DEFINED;*/
   /* END;*/
   /* ND;*/


  sysVar.arrayIndex = 1;

  if (OP1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex)
  end

    /* for draw orders, total quantity must be less then*/
    /* or equal to the quantity on the original bulk order.*/


  if (OM0AW01.OM0AWBDF == "C"      /* if customer draw order*/
   || OM0AW01.OM0AWBDF == "X"      /* or flexible draw order*/
   || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw order*/
  XOTTBL.XOTATONF[sysVar.arrayIndex] == "N")) /* and not at-once*/
    if (OM0AM005.OP2TORGQ <= OP2REC.OP2TONOQ)
      set OM0AM005.OP2TORGQ initialAttributes;
      OMWREC.OP2TONOQ = OM0AM005.OP2TORGQ;
    else
      OMAREC.OMAERR = "Y";
      set OM0AM005.OP2TORGQ cursor, modified, bold;
      converseLib.validationFailed(288); /* not enough qty for draw*/
    end
  else
    if (OM0AW01.OM0AWBDF == "S"      /* set aside draw order*/
     || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw order*/
    XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")) /* and at-once*/
      if (OM0AM005.OP2TORGQ <= OP2REC.OP2TOHRQ)
        set OM0AM005.OP2TORGQ initialAttributes;
        OMWREC.OP2TONOQ = OM0AM005.OP2TORGQ;
      else
        OMAREC.OMAERR = "Y";
        set OM0AM005.OP2TORGQ cursor, modified, bold;
        converseLib.validationFailed(288); /* not enough qty for draw*/
      end
    end
  end



end // end OM0ASEG

// edit quality code
Function OM0ASEH()




         /* edit quality code*/


   /* first check if need to validate*/

  if (OM0AM005.XQACD is modified)
     /* next sentence*/
  else
    OMWREC.XQACD = OM0AM005.XQACD; /* save for op0i call*/
    return;
  end



  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XQACD1[sysVar.arrayIndex] == OM0AM005.XQACD)
      OMWREC.XQACD = XOTTBL.XQACD1[sysVar.arrayIndex];
      set OM0AM005.XQACD initialAttributes;
    else
      if (XOTTBL.XQACD2[sysVar.arrayIndex] == OM0AM005.XQACD)
        OMWREC.XQACD = XOTTBL.XQACD2[sysVar.arrayIndex];
        set OM0AM005.XQACD initialAttributes;
      else
        if (XOTTBL.XQACD3[sysVar.arrayIndex] == OM0AM005.XQACD)
          OMWREC.XQACD = XOTTBL.XQACD3[sysVar.arrayIndex];
          set OM0AM005.XQACD initialAttributes;
        else
          converseLib.validationFailed(141);
          OMAREC.OMAERR = "Y";
          set OM0AM005.XQACD cursor, modified, bold;
        end
      end
    end
  end



   /* put quality code desc into map field*/

  if (OM0AM005.XQACD in XQATBL.XQACD)
    OM0AM005.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end





end // end OM0ASEH

// edit specification code
Function OM0ASEJ()



     /* edit specification code*/

   /* if spec code is greater than spaces, validate it*/
   /* from vprdcu01 table.*/


  if (OM0AM005.PC2INSEG > " ")
     /* next sentence*/
  else
    set OM0AM005.PC2INSEG initialAttributes;
    OMWREC.PC2INSEG = "000";
    return;
  end


  if (OM0AM005.PC2INSEG == OMWREC.PC2INSEG)
     /* next sentence*/
  else
    PC2REC.PC2INSEG = OM0AM005.PC2INSEG;
    PC2REC.XGPCD = OP1REC.XGPCD;

    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set OM0AM005.PC2INSEG initialAttributes;
      OMWREC.PC2INSEG = OM0AM005.PC2INSEG;
      OM0AM005.PC2SEGAB = PC2REC.PC2SEGAB;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set OM0AM005.PC2INSEG cursor, modified, bold;
        OM0AM005.PC2SEGAB = "  ";
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(159); /* spec code is not valid*/
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0A    ";
        TA1REC.TA1LOCAT[1] = "SG      ";
        TA1REC.TA1LOCAT[2] = "OM0ASEJ ";
        TA1REC.TA1LOCAT[3] = "IO3340  ";
        TA1REC.TA1LOCAT[4] = OM0AM005.PC2INSEG;
        TA1REC.TA1MAP = "OM0AM005";
        TA1REC.TA1DBASE = "PC2REC  ";
        TA1REC.TA1TBLVU = "VPRDCU01";
        OM0AW02.OP1PARTN = OP1REC.OP1PARTN; /* part char*/
        OM0AW02.OP1CUOID = OP1REC.OP1CUOID; /* cust ord id*/
        OM0AW02.OP1NORID = OP1REC.OP1NORID; /* nike id*/
        OM0AW02.KUCCOID = OP1REC.KUCCOID; /* company id*/
        OM0AW02.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
        OM0AW02.XNXCD = OP1REC.XNXCD; /* dept code*/
        OM0AW02.XGPCD = OP1REC.XGPCD; /* gpc*/
        TA1REC.TA1TBLKE = OM0AW02.OP1KEY;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end /* abend routine*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
      end
    end
  end

end // end OM0ASEJ

// edit single package type
Function OM0ASEK()



            /* edit package type*/



  if (OM0AM005.XPGCD is modified)
    /* next sentence*/
  else
    OMWREC.XPGCD = "00";
    return;
  end



  if (OM0AM005.XPGCD in XPGTBL.XPGCD)
    OM0AM005.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
    OMWREC.XPGCD = OM0AM005.XPGCD;
    set OM0AM005.XPGCD initialAttributes;
  else
    converseLib.validationFailed(158);
    OMAREC.OMAERR = "Y";
    set OM0AM005.XPGCD cursor, modified, bold;
  end



end // end OM0ASEK

// edit unit of measure
Function OM0ASEL()



            /* edit unit of measure*/


  if (OM0AM005.XUMCD is modified)
    /* next sentence*/
  else
    if (OMWREC.XUMCD > "  ")
                                   /* if already have a value;*/
      return; /* dont overlay it*/
    else
      OMWREC.XUMCD = SYCREC.XUMCD; /* move style value to omwrec*/
      return;
    end
  end



  if (OM0AM005.XUMCD in XUMTBL.XUMCD /* if value is in um table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status is active*/
    OMWREC.XUMCD = OM0AM005.XUMCD; /* move the um to omwrec*/
    set OM0AM005.XUMCD initialAttributes;
  else
    converseLib.validationFailed(156); /* "unit of measure is not valid"*/
    OMAREC.OMAERR = "Y";
    set OM0AM005.XUMCD cursor, modified, bold;
  end







end // end OM0ASEL

// edit cust style
Function OM0ASEM()


    /* read customer style record with call to CU1710*/

  set WCU1710 empty;
  WCU1710-XNX-DEPT-ID-XREF = OP1REC.XNXCD; /* move dept code to key*/
  WCU1710.WCU1710-IN-CU-CUST-PROD-ID = OM0AM005.KUIPRDID;
  WCU1710.WCU1710-IN-CU-PROD-SZ-ID = " ";

  WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID;

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/

   /* check db2 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0)
     /* next sentence*/
  else
    if (WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
      converseLib.validationFailed(133);
      OMAREC.OMAERR = "Y";
      set OM0AM005.KUIPRDID cursor, modified, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[2] = "OM0ASEM "; /* statement group*/
      TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
      TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
      TA1REC.TA1TYPE = "APPL"; /* abend type*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program;
    end
  end

      /* read nike style record, check existance*/

  OM0AW01.SY1STNBR = WCU1710.SY-STY-NBR[1];
  OM0AW01.SY2CLRID = WCU1710.SY-COLR-CD-ID[1];
  OM0AW01.XDMCD = WCU1710.XDM-DIM-CD[1];

  OM0ASE1(); /* read nike style/color record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AM005.SY1STNBR = SYCREC.SY1STNBR;
    OM0AM005.SY2CLRID = SYCREC.SY2CLRID;
    OM0AM005.XDMCD = SYCREC.XDMCD;
    OM0AM005.SY1SSTNM = SYCREC.SY1SSTNM;
    OM0AM005.SY2CLRAB = SYCREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(133);
      OMAREC.OMAERR = "Y";
      set OM0AM005.KUIPRDID cursor, modified, bold;
      return;
    end
  end


   /* ----------------------------------------------------------*/
   /* Make sure that the product brand is the same as the order*/
   /* brand.*/
   /* ----------------------------------------------------------*/
  if (SYCREC.XBCCD != OP1REC.XBCCD)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(586); /* product/order brands don't match.*/
    set OM0AM005.KUIPRDID cursor, modified, bold;
    return;
  end


    /* check customer style gpc to order gpc*/

  if (OP1REC.XGPCD != WCU1710.XGP-GPC-CD[1])
    converseLib.validationFailed(134);
    OMAREC.OMAERR = "Y";
    return;
  end



      /* check life cycle code for cust style*/

  if (OM0AW01.OM0AWBDF == "C" ||  /* don't edit for customer draw*/
  OM0AW01.OM0AWBDF == "N")        /* or nike draw - footwear*/
    /* next sentence*/
  else
    OM0ASE2();
  end



  if (converseVar.validationMsgNum == 132) /* bad life cycle code*/
    set OM0AM005.KUIPRDID cursor, modified, bold;
    return;
  end


   /* if this is a blank bulk order*/
     /* validate the blank program with io5480*/
     /* validate the blank style with io5470*/

  if (OP1REC.XBDCD == "B")
    OM0ASEP(); /* use io5480 to validate blank bulk*/
                                   /* program*/
    if (OMAREC.OMAERR == "Y")
      set OM0AM005.SY1STNBR cursor, modified, bold;
      set OM0AM005.SY2CLRID cursor, modified, bold;
      set OM0AM005.XDMCD cursor, modified, bold;
      return;
    else
      OM0ASEQ(); /* use io5470 to validate blank bulk styles*/
      if (OMAREC.OMAERR == "Y")
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID cursor, modified, bold;
        set OM0AM005.XDMCD cursor, modified, bold;
        return;
      end
    end
  end


   /* if this is a finished draw order*/
    /* validate the finished draw program with io5480 - avgrec*/
    /* validate the finished style with io5470 - avhrec*/

  if (OP1REC.XBDCD == "F"
   || OP1REC.XBDCD == "3"
   || OP1REC.XBDCD == "8")
    OM0ASER(); /* use io5480 to validate finished draw program*/
    if (OMAREC.OMAERR == "Y")
      set OM0AM005.SY1STNBR cursor, modified, bold;
      set OM0AM005.SY2CLRID cursor, modified, bold;
      set OM0AM005.XDMCD cursor, modified, bold;
      return;
    else
      OM0ASES(); /* use io5470 to validate finished draw styles*/
      if (OMAREC.OMAERR == "Y")
        set OM0AM005.SY1STNBR cursor, modified, bold;
        set OM0AM005.SY2CLRID cursor, modified, bold;
        set OM0AM005.XDMCD cursor, modified, bold;
        return;
      else
        if (OP1REC.XBDCD == "8" /* finished draw from blank bulk*/
         || OP1REC.XBDCD == "F") /* finished bulk from blank bulk*/

          OM0ASET(); /* use io5530 to retrieve cutoff date*/
          if (OMAREC.OMAERR == "Y")
            set OM0AM005.SY1STNBR cursor, modified, bold;
            set OM0AM005.SY2CLRID cursor, modified, bold;
            set OM0AM005.XDMCD cursor, modified, bold;
            return;
          else
            if (OMAREC.OMACDT > OECREC.OPJCUTDT
             && OM0AW01.OM0AWLDF != "Y")

              OMAREC.OMAERR = "Y"; /* set error flag*/
              set OM0AM005.SY1STNBR cursor, modified, bold;
              set OM0AM005.SY2CLRID cursor, modified, bold;
              set OM0AM005.XDMCD cursor, modified, bold;

              sysVar.arrayIndex = 1;
              if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID from sysVar.arrayIndex
               && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
               && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y")
                OM0AW01.OM0AWLDF = "Y"; /* set late draw flag*/
                converseLib.validationFailed(638); /* ; passed cutoff date warning*/
              else
                converseLib.validationFailed(631); /* ; passed cutoff date error*/
              end
            end
          end
        end
      end
    end
  end





   /* if not a draw order, edits are done, exit.*/


  if (OM0AW01.OM0AWBDF != "C"
   && OM0AW01.OM0AWBDF != "S"
   && OM0AW01.OM0AWBDF != "X"
   && OM0AW01.OM0AWBDF != "N")
    OMWREC.SY1STNBR = SYCREC.SY1STNBR;
    OMWREC.SY2CLRID = SYCREC.SY2CLRID;
    OMWREC.XDMCD = SYCREC.XDMCD;
    OMWREC.KUIPRDID = OM0AM005.KUIPRDID;
    return;
  end




   /* need to see that product exists on bulk order.*/



  OM0ASH1();

  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex)
  end


  if (OM0AW01.OM0AWFND == "Y") /* if found the style*/
    OMWREC.OMWBKLIN = OP2REC.OP2LNINB;
    OMWREC.OP1NORID = OP2REC.OP1NORID;
    if (OM0AWBDF == "C"      /* if customer draw*/
     || OM0AWBDF == "X"      /* or flexible draw*/
     || (OM0AWBDF == "N" &&  /* or nike draw*/
    XOTTBL.XOTATONF[sysVar.arrayIndex] == "N")) /* and not at-once*/
      if (OP2REC.OP2TONOQ == 0) /* if no qty to order*/
        converseLib.validationFailed(291);
        OMAREC.OMAERR = "Y";
        set OM0AM005.KUIPRDID cursor, modified, bold;
      else
        OMWREC.SY1STNBR = SYCREC.SY1STNBR;
        OMWREC.SY2CLRID = SYCREC.SY2CLRID;
        OMWREC.XDMCD = SYCREC.XDMCD;
        OMWREC.KUIPRDID = OM0AM005.KUIPRDID;
      end
    else
      if (OM0AWBDF == "S" ||  /* if cust draw*/
      (OM0AWBDF == "N" &&     /* or nike draw*/
      XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")) /* and at-once*/
        if (OP2REC.OP2TOHRQ == 0) /* if no qty to order*/
          converseLib.validationFailed(282);
          OMAREC.OMAERR = "Y";
          set OM0AM005.KUIPRDID cursor, modified, bold;
        else
          OMWREC.SY1STNBR = SYCREC.SY1STNBR;
          OMWREC.SY2CLRID = SYCREC.SY2CLRID;
          OMWREC.XDMCD = SYCREC.XDMCD;
          OMWREC.KUIPRDID = OM0AM005.KUIPRDID;
        end
      end
    end
  else
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(285);
    set OM0AM005.KUIPRDID cursor, modified, bold;
  end



end // end OM0ASEM

// get avgrec frm davail.vblnkp01
Function OM0ASEP()


   /* this statement group calls io5480 to access davail.vblnkp01*/
   /* for the blank bulk's owner group code which is part of the*/
   /* key to access davail.vblnks01 to validate the blank styles.*/


  set SQLCA empty;
  set AVGREC empty;

  if (OP1REC.XOBCD == "M1")
    AVGREC.AVGBPIND = "M";
  else
    AVGREC.AVGBPIND = "B";
  end

  AVIREC.AVIFUNCD = "SA";
  AVIREC.OP1CUNDT = OP1REC.OP1CUNDT;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(616); /* no active blank pgm exists for date range*/
      OMAREC.OMAERR = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "OM0A   "; /* application*/
      TA1REC.TA1LOCAT[1] = "OM0ASEP "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code passed*/
      TA1REC.TA1LOCAT[4] = "        "; /* need date passed*/
      TA1REC.TA1MAP = "OM0AM005"; /* map*/
      TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
      TA1REC.TA1TBLVU = "VBLNKP01"; /* table view*/
      TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ************************************************************/
end // end OM0ASEP

// get avhrec frm davail.dblnks01
Function OM0ASEQ()

   /* this statement group verifies that the blank style exists.*/
   /* IO5470 is called which accesses davail.vblnks01 using the*/
   /* owner group code from davail.vblnkp01 and sytle, color and*/
   /* dimension codes from the map as the key.*/

  set SQLCA empty;
  set AVHREC empty;

  AVHREC.XOWCD = AVGREC.XOWCD;
  AVHREC.SY1BSTNB = OM0AM005.SY1STNBR;
  AVHREC.SY2BCLCD = OM0AM005.SY2CLRID;
   /* * MOVE OM0AM005.XDMCD TO AVHREC.AVHBXDM /*  removed from avhrec 04/92*/

  call "IO5470" ("SE", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* one record found*/
   /* tcs include begin (03/06/98)*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple records found*/
                            /* tcs include end   (03/06/98)*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(617); /* this is not a valid blank style for*/
                                   /* blank pgm*/
      OMAREC.OMAERR = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "OM0A   "; /* application*/
      TA1REC.TA1LOCAT[1] = "OM0ASEQ "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = "SE"; /* function code used*/
      TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
      TA1REC.TA1MAP = "OM0AM005"; /* map*/
      TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
      TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
      TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ************************************************************/
end // end OM0ASEQ

// validate finished program
Function OM0ASER()


   /* this statement group calls io5480 to access davail.vblnkp01*/
   /* for the finished draw's owner group code which is part of*/
   /* the key to access davail.vblnks01 to validate the finished*/
   /* style*/


  set SQLCA empty;
  set AVGREC empty;

  if (OP1REC.XOBCD == "M1")
    AVGREC.AVGBPIND = "S";
  else
    AVGREC.AVGBPIND = "T";
  end

  AVIREC.AVIFUNCD = "SA";
  AVIREC.OP1CUNDT = OP1REC.OP1CUNDT;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(628); /* no active finish prgm for date range*/
      OMAREC.OMAERR = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "OM0A   "; /* application*/
      TA1REC.TA1LOCAT[1] = "OM0ASER "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code passed*/
      TA1REC.TA1LOCAT[4] = "        "; /* need date passed*/
      TA1REC.TA1MAP = "OM0AM005"; /* map*/
      TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
      TA1REC.TA1TBLVU = "VBLNKP01"; /* table view*/
      TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ************************************************************/
end // end OM0ASER

// validate finished style
Function OM0ASES()

   /* this statement group verifies that the finished style is*/
   /* valid for the finished program.*/

   /* IO5470 is called which accesses davail.vblnks01 using the*/
   /* owner group code from davail.vblnkp01 and sytle, color and*/
   /* dimension codes from the map as the key.*/

  set SQLCA empty;
  set AVHREC empty;

  AVHREC.XOWCD = AVGREC.XOWCD;
  AVHREC.SY1STNBR = OM0AM005.SY1STNBR;
  AVHREC.SY2CLRID = OM0AM005.SY2CLRID;
  AVHREC.XDMCD = OM0AM005.XDMCD;

  call "IO5470" ("S ", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(629); /* invalid style for finished program*/
      OMAREC.OMAERR = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "OM0A   "; /* application*/
      TA1REC.TA1LOCAT[1] = "OM0ASES "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = "S "; /* function code used*/
      TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
      TA1REC.TA1MAP = "OM0AM005"; /* map*/
      TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
      TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
      TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ************************************************************/
end // end OM0ASES

// retrieve cutoff date
Function OM0ASET()

  set SQLCA empty;
  set OPLREC empty;
  set OECREC empty;

  OPLREC.OPLSOP = "SF";
  OPLREC.OPJCNDTB = OP1REC.OP1CUNDT;

    /* cut off table is read using blank bulk owner group*/

  if (OP1REC.XOBCD == "M1")
    OECREC.XOWCD = "SM"; /* special make up bulk*/
  else
    OECREC.XOWCD = "MR"; /* regular blank bulk*/
  end

  call "IO5530" (OPLREC, SQLCA, OECREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(632); /* invalid draw date for program*/
    else
      TA1REC.TA1DBASE = "DAVAIL  "; /* data base view*/
      TA1REC.TA1PGMNM = "OM0A    "; /* application*/
      TA1REC.TA1LOCAT[1] = "OM0ASET "; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5530  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = OPLREC.OPLSOP; /* function code*/
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0AM005"; /* map*/
      TA1REC.TA1TBLVU = "VBLNKP01"; /* TABLE VIEW*/
      TA1REC.TA1TBLKE = OECREC.OECKEY; /* key*/
      XSOPS02();
    end
  end


   /* *************************************************************/
end // end OM0ASET

// check style date ranges for av
Function OM0ASEZ()



   /* *******************************************************/
   /* if no more ords accepted get out*/
   /* *******************************************************/


  if (SYCREC.SY2ALNOR == "Y")
    /* next sentence--ok, orders still being accepted for prod*/
  else
    converseLib.validationFailed(393); /* new ords not being accept. for this*/
                                   /* prod*/
    OMAREC.OMAERR = "Y";
    set OM0AM005.SY1STNBR cursor, modified, bold;
    set OM0AM005.SY2CLRID modified, bold;
    set OM0AM005.XDMCD modified, bold;
    return;
  end


end // end OM0ASEZ

// edit existance of bulk sizes
Function OM0ASG8()




   /* this statement group checks to see that the first/last*/
   /* sizes entered for this product exist on the bulk order*/
   /* being drawn from.*/


  OP3REC.OP2KEY = OP2REC.OP2KEY;
  OP8REC.OP8TASK = "S ";

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0A    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0ASG8 ";
    TA1REC.TA1LOCAT[3] = "DB1000  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0AM005";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOSIZE01";
    TA1REC.TA1TBLKE = OP3REC.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    XSPF4();
    exit program;
  end




  OM0AW01.OM0AWNAS = 0; /* init number of active sizes counter*/
  OM0AW01.OM0AWFSF = "N"; /* init size found flags*/
  OM0AW01.OM0AWLSF = "N";
  OMAREC.OMASUB1 = 1;

  while (OMAREC.OMASUB1 <= 40)
    if (OP3REC.OP3SZAFL[OMASUB1] == "Y") /* if size is active*/
      if (OMAREC.OMASUB1 >= OM0AW01.OM0AWFSZ
       && OMAREC.OMASUB1 <= OM0AW01.OM0AWLSZ)
        OM0AW01.OM0AWNAS = OM0AW01.OM0AWNAS + 1; /* inc counter*/
      end
      if (OMAREC.OMASUB1 == OM0AW01.OM0AWFSZ)
        OM0AW01.OM0AWFSF = "Y"; /* set first size found flag*/
      end
      if (OMAREC.OMASUB1 == OM0AW01.OM0AWLSZ)
        OM0AW01.OM0AWLSF = "Y"; /* set last size found flag*/
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end




   /* now see if found sizes*/


  if (OM0AW01.OM0AWFSF == "N"
   || OM0AW01.OM0AWLSF == "N")
    OM0AW01.OM0AWSFL = "Y"; /* set error flags and msgs*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(286);
    if (OM0AW01.OM0AWLSF == "N") /* if last size not found*/
      set OM0AM005.OM0AMLSZ cursor, modified, bold;
    end
    if (OM0AW01.OM0AWFSF == "N") /* if last first not found*/
      set OM0AM005.OM0AMFSZ cursor, modified, bold;
    end
  end










end // end OM0ASG8

// read bulk item record
Function OM0ASH1()






    /* this routine reads the bulk order item record*/
    /* being drawn from.*/




  OMAREC.OMAORDN = OP1REC.OP1BLKID;
  OP2REC.OP1PARTN = OMAREC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1BLKID;
  OP2REC.OP1NORID = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AW01.OM0AWFND = "N"; /* init found flag*/
    OM0AW01.OM0AW-FOUND-QTY-SW = "N"; /* init found qty flag*/
    while (SQLCA.VAGen_SQLCODE != 100 /* while not end of set*/
     && OM0AW01.OM0AW-FOUND-QTY-SW == "N") /* and style with qty not fnd*/
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XBDCD == "F" /* finished bulk from blank bulk*/
         || OP1REC.XBDCD == "8") /* finished draw from blank bulk*/
          if (SYCREC.SY1BSTNB == OP2REC.SY1STNBR
           && SYCREC.SY2BCLCD == OP2REC.SY2CLRID
           && OM0AM005.XDMCD == OP2REC.XDMCD
           && OM0AM005.XQACD == OP2REC.XQACD)
            OM0AW01.OM0AWFND = "Y";
            if (OP2REC.OP2TONOQ > 0)
              OM0AW01.OM0AW-FOUND-QTY-SW = "Y";
            end
          end

        else
          if (OM0AM005.SY1STNBR == OP2REC.SY1STNBR
           && OM0AM005.SY2CLRID == OP2REC.SY2CLRID
           && OM0AM005.XDMCD == OP2REC.XDMCD
           && OM0AM005.XQACD == OP2REC.XQACD)
            OM0AW01.OM0AWFND = "Y";
            if (OP2REC.OP2TONOQ > 0)
              OM0AW01.OM0AW-FOUND-QTY-SW = "Y";
            end
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0A    ";
          TA1REC.TA1LOCAT[1] = "SN      ";
          TA1REC.TA1LOCAT[2] = "OM0ASH1 ";
          TA1REC.TA1LOCAT[3] = "IO0440  ";
          TA1REC.TA1LOCAT[4] = "        ";
          TA1REC.TA1MAP = "OM0AM005";
          TA1REC.TA1DBASE = "OP2REC  ";
          TA1REC.TA1TBLVU = "VITEM001";
          TA1REC.TA1TBLKE = OP2REC.OP2KEY;
          try
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
          end
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear we*/
          XSPF4();
          exit program;
        end
      end
    end
  else /* no style records for the bulk order*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0A    ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "OM0ASH1 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0AM005";
    TA1REC.TA1DBASE = "OP2REC  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear we*/
    XSPF4();
    exit program;
  end


  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/



end // end OM0ASH1

// read bulk item record direct
Function OM0ASH2()



    /* this routine reads the bulk order item record*/
    /* being drawn from. uses a select unique.*/



   /* skip read if order is not a draw.*/

  if (OM0AW01.OM0AWBDF == "C"
   || OM0AW01.OM0AWBDF == "S"
   || OM0AW01.OM0AWBDF == "X"
   || OM0AW01.OM0AWBDF == "N")
     /* next sentence*/
  else
    return;
  end



  OMAREC.OMAORDN = OP1REC.OP1BLKID;
  OP2REC.OP1PARTN = OMAREC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1BLKID;
  OP2REC.OP2LNINB = OMWREC.OMWBKLIN;
  OP2REC.OP1NORID = OMWREC.OP1NORID;

  call "IO0440" ("S ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0A    ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OM0ASH2 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OM0AM005";
    TA1REC.TA1DBASE = "OP2REC  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear we*/
    XSPF4();
    exit program;
  end



end // end OM0ASH2

// default first size from bulk
Function OM0ASH3()




   /* this routine will set a default first size if not entered*/
   /* it works forward through the products size array.*/

       /* if size's division code exists*/
          /* if size division matched order type allowable divs*/
             /* if size fringe/gut/extras indicators ok*/
                /* good size, save size.*/







  OMAREC.OMASUB1 = 1;
  OM0AW01.OM0AWFSZ = 0;

  sysVar.arrayIndex = 1;

  if (OP1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex)
  end

  while (OMAREC.OMASUB1 <= 40)
    if (OP3REC.OP3SZAFL[OMASUB1] == "Y")
      if (OM0AW01.OM0AWBDF == "C"      /* if customer draw*/
       || OM0AW01.OM0AWBDF == "X"      /* or flexible draw*/
       || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw and*/
      XOTTBL.XOTATONF[sysVar.arrayIndex] == "N")) /* not at once*/
        if (OP3REC.OP3ONOQT[OMASUB1] > 0) /* if qty to order*/
          OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
          OMAREC.OMASUB1 = 41;
        else
          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
        end
      else
        if (OM0AW01.OM0AWBDF == "S"      /* if setaside*/
         || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw and*/
        XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")) /* at once*/
          if (OP3REC.OP3OHRQT[OMASUB1] > 0) /* if qty to order*/
            OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 41;
          else
            OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
          end
        end
      end
    else
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  end




  if (OM0AW01.OM0AWFSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
    converseLib.validationFailed(148);
  end











end // end OM0ASH3

// default last size from bulk
Function OM0ASH4()




   /* this routine will set a default last size if not entered*/
   /* it works forward through the products size array.*/

       /* if size's division code exists*/
          /* if size division matched order type allowable divs*/
             /* if size fringe/gut/extras indicators ok*/
                /* good size, save size.*/







  OMAREC.OMASUB1 = 40;
  OM0AW01.OM0AWLSZ = 0;

  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD from sysVar.arrayIndex)
  end

  while (OMAREC.OMASUB1 >= 1)
    if (OP3REC.OP3SZAFL[OMASUB1] == "Y")
      if (OM0AW01.OM0AWBDF == "C"      /* if customer draw*/
       || OM0AW01.OM0AWBDF == "X"      /* or flexible draw*/
       || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw*/
      XOTTBL.XOTATONF[sysVar.arrayIndex] == "N")) /* not at once*/
        if (OP3REC.OP3ONOQT[OMASUB1] > 0) /* if qty to order*/
          OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
          OMAREC.OMASUB1 = 0;
        else
          OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
        end
      else
        if (OM0AW01.OM0AWBDF == "S"      /* if setaside*/
         || (OM0AW01.OM0AWBDF == "N" &&  /* or nike draw*/
        XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")) /* and at once*/
          if (OP3REC.OP3OHRQT[OMASUB1] > 0) /* if qty to order*/
            OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
            OMAREC.OMASUB1 = 0;
          else
            OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
          end
        end
      end
    else
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    end
  end




  if (OM0AW01.OM0AWLSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    set OM0AM005.OM0AMLSZ cursor, modified, bold;
    converseLib.validationFailed(148);
  end




















end // end OM0ASH4

// count sizes between frst & lst
Function OM0ASH5()


       /* if size's division code exists*/
          /* if size division is allowed*/
             /* if size fringe/gut/extras indicators ok*/
                /* then increment number of active size field.*/


  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    OMAREC.OMASUB2 = sysVar.arrayIndex;
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence*/
    else
      return;
    end
  else
    return;
  end



  OMAREC.OMASUB1 = OM0AW01.OM0AWFSZ;
  OM0AW01.OM0AWNAS = 0;

  if (XOTTBL.XOTALWDV[OMASUB2] == "A")

    while (OMAREC.OMASUB1 <= 40
     && OMAREC.OMASUB1 <= OM0AW01.OM0AWLSZ)
      if (SYCREC.XDVCD[OMASUB1] != " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[OMASUB2])

          if (SYCREC.SY3FRGUT[OMASUB1] == "F"
           || SYCREC.SY3FRGUT[OMASUB1] == "G")
            OM0AW01.OM0AWNAS = OM0AW01.OM0AWNAS + 1; /* add to valid count*/
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "X"
             /* if fringe/gut is extra*/
             && XOTTBL.XOTXTRAS[OMASUB2] == "Y") /* if extras allowed*/
              OM0AW01.OM0AWNAS = OM0AW01.OM0AWNAS + 1;
                                   /* add to valid count*/
            end
          end

        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  end


  if (XOTTBL.XOTALWDV[OMASUB2] == "D")

    while (OMAREC.OMASUB1 <= 40
     && OMAREC.OMASUB1 <= OM0AW01.OM0AWLSZ)
      if (SYCREC.XDVCD[OMASUB1] != " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[OMASUB2]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[OMASUB2])
           /* next sentence*/
        else

          if (SYCREC.SY3FRGUT[OMASUB1] == "F"
           || SYCREC.SY3FRGUT[OMASUB1] == "G")
            OM0AW01.OM0AWNAS = OM0AW01.OM0AWNAS + 1; /* add to valid count*/
          else
            if (SYCREC.SY3FRGUT[OMASUB1] == "X"
             && XOTTBL.XOTXTRAS[OMASUB2] == "Y")
              OM0AW01.OM0AWNAS = OM0AW01.OM0AWNAS + 1;
                                   /* add to valid count*/
            end
          end

        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  end


end // end OM0ASH5

// read bulk order header record
Function OM0ASH6()



    /* this routine reads the bulk order header record*/
    /* being drawn from.*/



  OMAREC.OMAORDN = OP1REC.OP1BLKID;
  OM0AW02.OP1PARTN = OMAREC.OP1PARTN;
  OM0AW02.OP1CUOID = OP1REC.OP1BLKID;
  OM0AW02.OP1NORID = OP2REC.OP1NORID;

  call "IO0430" ("S ", SQLCA, OM0AW02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence            ; we had better find the bulk order*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(276);
      OMAREC.OMAERR = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0ASH6 ";
      TA1REC.TA1LOCAT[3] = "IO0430  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0AM005";
      TA1REC.TA1DBASE = "OP1REC  ";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OM0AW02.OP1KEY;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear we*/
      XSPF4();
      exit program;
    end
  end



end // end OM0ASH6

// defaul first size (blank bulk)
Function OM0ASI3()

   /* this routine will set a default first size if not entered*/
   /* it works forward through the products size array.*/

   /* ------------------------------------------------------------*/
    /* first make sure that the xottbl.allowed/disallowed*/
    /* division code = a or d.*/
   /* ------------------------------------------------------------*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence--ok good values, keep going*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(148); /* setup size error message*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* look for a valid size based on division codes:*/
   /* if xottbl.xotalwdv = 'a' (allowed) and the product divison*/
   /* equals one of the order type's allowable divisions, and*/
   /* the xtras/fringe/gut ok, save it.*/
   /* ----------------------------------------------------*/

  OMAREC.OMASUB1 = 1;
  OM0AW01.OM0AWFSZ = 0;

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A") /* allowed divisions*/

    while (OMAREC.OMASUB1 <= 40)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])

          if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* size is fringe*/
           || SYCREC.SY3FRGUT[OMASUB1] == "G" /* size is gut*/
           || XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* ord type allows extras*/
            if (OP3REC.OP3SZAFL[OMASUB1] == "Y"
             && OP3REC.OP3ONOQT[OMASUB1] > 0)
              OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 41;
            end
          end

        end
      end

      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end

  end


       /* --------------------------------------------------*/
       /* if the order type table indicates 'd', use this*/
       /* 'disallowed' division logic instead*/
       /* --------------------------------------------------*/

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D") /* disallowed divisions*/

    while (OMAREC.OMASUB1 <= 40)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])
          /* next sentence--disallowed division, keep looking*/
        else

          if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
           || SYCREC.SY3FRGUT[OMASUB1] == "G" /* if size is gut*/
           || XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            if (OP3REC.OP3SZAFL[OMASUB1] == "Y"
             && OP3REC.OP3ONOQT[OMASUB1] > 0)
              OM0AW01.OM0AWFSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 41;
            end
          end

        end
      end

      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end

  end




  if (OM0AW01.OM0AWFSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    OM0AW01.OM0AWSFL = "Y";
    set OM0AM005.OM0AMFSZ cursor, modified, bold;
    converseLib.validationFailed(148);
  end



end // end OM0ASI3

// default last size (blank bulk)
Function OM0ASI4()

   /* this routine will set a default first size if not entered*/
   /* it works backward through the product's size array.*/

   /* ------------------------------------------------------------*/
    /* first make sure that the xottbl.allowed/disallowed*/
    /* division code = a or d.*/
   /* ------------------------------------------------------------*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A"
     || XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D")
       /* next sentence--ok good values, keep going*/
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(148); /* ; setup size error message*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* look for a valid size based on division codes:*/
   /* if xottbl.xotalwdv = 'a' (allowed) and the product divison*/
   /* equals one of the order type's allowable divisions, and*/
   /* the xtras/fringe/gut ok, save it.*/
   /* ----------------------------------------------------*/

  OMAREC.OMASUB1 = 40;
  OM0AW01.OM0AWLSZ = 0;

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "A") /* allowed divisions*/

    while (OMAREC.OMASUB1 >= 1)
      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])

          if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
           || SYCREC.SY3FRGUT[OMASUB1] == "G" /* if size is gut*/
           || XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            if (OP3REC.OP3SZAFL[OMASUB1] == "Y"
             && OP3REC.OP3ONOQT[OMASUB1] > 0)
              OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 1;
            end
          end

        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    end

  end


       /* --------------------------------------------------*/
       /* if the order type table indicates 'd' use this*/
       /* 'disallowed' division logic instead*/
       /* --------------------------------------------------*/

  if (XOTTBL.XOTALWDV[sysVar.arrayIndex] == "D") /* disallowed divisions*/

    while (OMAREC.OMASUB1 >= 1)

      if (SYCREC.XDVCD[OMASUB1] > " ")
        if (SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD1[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD2[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD3[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD4[sysVar.arrayIndex]
         || SYCREC.XDVCD[OMASUB1] == XOTTBL.XDVCD5[sysVar.arrayIndex])
          /* next sentence--disallowed division, keep looking*/
        else

          if (SYCREC.SY3FRGUT[OMASUB1] == "F" /* if size is fringe*/
           || SYCREC.SY3FRGUT[OMASUB1] == "G" /* if size is gut*/
           || XOTTBL.XOTXTRAS[sysVar.arrayIndex] == "Y") /* if ord type allows extras*/
            if (OP3REC.OP3SZAFL[OMASUB1] == "Y"
             && OP3REC.OP3ONOQT[OMASUB1] > 0)
              OM0AW01.OM0AWLSZ = OMAREC.OMASUB1;
              OMAREC.OMASUB1 = 1;
            end
          end

        end
      end

      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;

    end
  end




  if (OM0AW01.OM0AWLSZ > 0) /* if got a size*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* error, no size to default to*/
    converseLib.validationFailed(148);
  end








end // end OM0ASI4

// check for restricted product
Function OM0ASLB()


    /* The following code will determine if the customer is*/
    /* an in-house account and excempted from any sales office*/
    /* restrictions.*/

  if (KUCREC.XAUCD in XAUTBL.XAUCD             /* account class in table*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* class is active*/
   && XAUTBL.XAUARIND[sysVar.arrayIndex] == "I") /* in-house account*/
    return;
  end


    /* The following codes will determine if the customer is*/
    /* a military national account (xna = F1, F2, F3, F4, F5, F6)*/
    /* and exempted from the sales office - product restrictions.*/


  if (KUNREC.XNACD == "F1" /* natl acct military*/
   || KUNREC.XNACD == "F2" /* natl acct military - nknw*/
   || KUNREC.XNACD == "F3" /* natl acct military - ngtr*/
   || KUNREC.XNACD == "F4" /* natl acct military - golf*/
   || KUNREC.XNACD == "F5" /* natl acct military - nkso*/
   || KUNREC.XNACD == "F6") /* natl acct military - nkgl*/
    return;
  end


    /* This edit will prevent restricted products from being*/
    /* ordered by any sales offices that are not authorized*/
    /* by a code on the xsotbl.*/

  OM0ASCU(); /* get cugrp record for customer*/

  if (SYCREC.SY2RPRDI == "R") /* product is restricted*/
    sysVar.arrayIndex = 0;

    if ("MI" in KUPREC.XSGCD /* military customer*/
     || "NO" in KUPREC.XSGCD) /* Nordstom's*/
       /* next sentence - ok*/
    else
      sysVar.arrayIndex = 0;
      if (OP1REC.XSOCD in XSOTBL.XSOCD /* sales office in table*/
       && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* table status is active*/
        if (XSOTBL.XSORPRDI[sysVar.arrayIndex] == "N") /* no restriction on products*/
            /* next sentence - ok*/
        else
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(535); /* style is restricted...*/
        end
      else
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(109); /* sales office code is not valid*/
      end
    end
  end


   /* the following edit checks if AGG products must be ordered*/
   /* thru sales office '09' for the customer ('XT' customer*/
   /* orders must come through sales office '09' for ACG prods).*/

   /* 7/10/91 JLoyer; bypass restriction edits for ACG close-outs*/

  if (SYCREC.XPCCD == "JA") /* product cat is for ACG product*/
      /* continue edit*/
  else
    return; /* not an ACG product*/
  end


  OM0ASLD(); /* determine prod's current life cycle*/

  if (OM0AW01.XLCCD == "20") /* if ACG prod close-out*/
    return; /* skip remaining edits*/
  end

  if (OP1REC.XSOCD == "09") /* '09' is what it should be*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if record found continue edit*/
    sysVar.arrayIndex = 0; /* ; reset ezetst*/
    if ("XT" in KUPREC.XSGCD) /* cust restricted for ACG*/
      converseLib.validationFailed(625); /* ACG must be ordered from specialty*/
                                    /* sales office for this customer*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
    end
  end


end // end OM0ASLB

// get kunrec using company
Function OM0ASLC()



      /* *********************************************************/
      /* * this statement group retrieves the xna code at the   **/
      /* * customer level.                                      **/
      /* *********************************************************/

  KUNREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  KUNREC.KUMSTRID = OP1REC.KUMSTRID; /* load - store*/
  KUNREC.XNXCD = OP1REC.XNXCD; /* load - dept*/
  KUNREC.XGPCD = "**"; /* load wildcard - gpc*/
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE != 0) /* check for good rc*/
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "SS      "; /* sql command*/
    TA1REC.TA1LOCAT[3] = "OM0ASLC "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end

      /* fetch first customer record*/

  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* fetch cust record*/

      /* check db2 return code.  should be able to find at least*/
      /* one because kunrec key has been validated by om0h.*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "SN      "; /* sql command*/
    TA1REC.TA1LOCAT[3] = "OM0ASLC "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end
   /* *************************************************************/
end // end OM0ASLC

// find the current life cycle
Function OM0ASLD()


          /* Get the current life cycle from*/
          /* sycrec using the system date*/


    /* get most current life cycle*/

  if (OMAREC.OMACDT >= SYCREC.SY2CEDT1)
    OM0AW01.XLCCD = SYCREC.XLCCD1;
  else
    if (OMAREC.OMACDT >= SYCREC.SY2CEDT2)
      OM0AW01.XLCCD = SYCREC.XLCCD2;
    else
      if (OMAREC.OMACDT >= SYCREC.SY2CEDT3)
        OM0AW01.XLCCD = SYCREC.XLCCD3;
      else
        if (OMAREC.OMACDT >= SYCREC.SY2CEDT4)
          OM0AW01.XLCCD = SYCREC.XLCCD4;
        else
          OM0AW01.XLCCD = "  ";
        end
      end
    end
  end
end // end OM0ASLD

// iseg default
Function OM0ASSC()

       /* default to iseg number from dprodc.vprdcu01*/
       /* if direct ship code eq '3' (indirect ship)*/

  set PC2REC empty; /* initialize pc2rec*/

  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;
  PC2REC.XGPCD = OP1REC.XGPCD;

  call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0AM005.PC2INSEG = PC2REC.PC2INSEG;
    OM0AM005.PC2SEGAB = PC2REC.PC2SEGAB;
    OMWREC.PC2INSEG = PC2REC.PC2INSEG;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0A    ";
      TA1REC.TA1LOCAT[1] = "SA      ";
      TA1REC.TA1LOCAT[2] = "OM0ASEG ";
      TA1REC.TA1LOCAT[3] = "IO3340  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0AM005";
      TA1REC.TA1DBASE = "DPRODC  ";
      TA1REC.TA1TBLVU = "VPRDCU01";
      OM0AW02.OP1PARTN = OP1REC.OP1PARTN; /* part char*/
      OM0AW02.OP1CUOID = OP1REC.OP1CUOID; /* cust ord id*/
      OM0AW02.OP1NORID = OP1REC.OP1NORID; /* nike id*/
      OM0AW02.KUCCOID = OP1REC.KUCCOID; /* company id*/
      OM0AW02.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
      OM0AW02.XNXCD = OP1REC.XNXCD; /* dept code*/
      OM0AW02.XGPCD = OP1REC.XGPCD; /* gpc*/
      TA1REC.TA1TBLKE = OM0AW02.OP1KEY;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end /* abend routine*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
    end
  end

end // end OM0ASSC

//*** RECORD=OM0AW01 ****
// 09/22/92   #893  DHARRI  ADDED CUSTOM LOGO FLAG
// ***********************
Record OM0AW01 type basicRecord
  10 OM0AWKEY OM0AWKEY ; 
    15 OM0AWKY1 OM0AWKY1 ; 
    15 OM0AWKY2 OM0AWKY2 ; 
    15 OM0AWKY3 OM0AWKY3 ; 
    15 OM0AWKY4 OM0AWKY4 ; 
  10 XLCCD XLCCD ; 
  10 XQACD XQACD ; 
  10 OM0AWPSD OM0AWPSD ; 
  10 OM0AWFDI OM0AWFDI ; 
  10 OM0AWLDI OM0AWLDI ; 
  10 OM0AWFDD OM0AWFDD ; 
  10 OM0AWLDD OM0AWLDD ; 
  10 OM0AWFSZ OM0AWFSZ ; 
  10 OM0AWLSZ OM0AWLSZ ; 
  10 OM0AWPRD OM0AWPRD ; 
    15 SY1STNBR SY1STNBR ; 
    15 OM0AWSP1 OM0AWSP1 ; 
    15 SY2CLRID SY2CLRID ; 
    15 OM0AWSP2 OM0AWSP2 ; 
    15 XDMCD XDMCD ; 
  10 SY1BSTNB SY1BSTNB ; 
  10 SY2BCLCD SY2BCLCD ; 
  10 KUKPCOID KUKPCOID ; 
  10 KUCGRPID KUCGRPID ; 
  10 XOTSZIND XOTSZIND ; 
  10 OM0AWSRC OM0AWSRC ; 
    15 OM0AWSRN OM0AWSRN ; 
      20 OM0AWSRA OM0AWSRA [5] ; 
  10 OP2TORGQ OP2TORGQ ; 
  10 OM0AWOQC OM0AWOQC ; 
  10 OM0AWSZM OM0AWSZM ; 
    15 OM0AWSZ1 OM0AWSZ1 ; 
    15 OM0AWSZ2 OM0AWSZ2 ; 
    15 OM0AWSZ3 OM0AWSZ3 ; 
    15 OM0AWSZ4 OM0AWSZ4 ; 
    15 * char(42) ; 
  10 OM0AWSTY OM0AWSTY ; 
  10 OM0AWCLR OM0AWCLR ; 
  10 OM0AWXDM OM0AWXDM ; 
  10 OM0AWCST OM0AWCST ; 
  10 OM0AWLLI OM0AWLLI ; 
  10 OM0AWOFL OM0AWOFL ; 
  10 OM0AWBDF OM0AWBDF ; 
  10 OM0AWFND OM0AWFND ; 
  10 OM0AWFSF OM0AWFSF ; 
  10 OM0AWLSF OM0AWLSF ; 
  10 OM0AWSFL OM0AWSFL ; 
  10 OM0AWNAS OM0AWNAS ; 
  10 OP2TONOQ OP2TONOQ ; 
  10 OP2TOHRQ OP2TOHRQ ; 
  10 OM0AWDQT OM0AWDQT ; 
  10 OM0AWQTY OM0AWQTY ; 
  10 OM0AWAOF OM0AWAOF ; 
  10 OM0AWLDF OM0AWLDF ; 
  10 OM0AWEKY OM0AWEKY ; 
    15 OM0AWK01 OM0AWK01 ; 
    15 * char(1) ; 
    15 OM0AWK02 OM0AWK02 ; 
    15 * char(1) ; 
    15 OM0AWK03 OM0AWK03 ; 
    15 * char(1) ; 
    15 OM0AWK04 OM0AWK04 ; 
    15 * char(1) ; 
    15 OM0AWK05 OM0AWK05 ; 
    15 * char(1) ; 
    15 OM0AWK06 OM0AWK06 ; 
    15 * char(1) ; 
    15 OM0AWK07 OM0AWK07 ; 
    15 * char(1) ; 
    15 OM0AWK08 OM0AWK08 ; 
    15 * char(1) ; 
    15 OM0AWK09 OM0AWK09 ; 
    15 * char(1) ; 
    15 OM0AWK10 OM0AWK10 ; 
    15 * char(1) ; 
    15 OM0AWK11 OM0AWK11 ; 
    15 * char(1) ; 
    15 OM0AWK12 OM0AWK12 ; 
    15 * char(1) ; 
    15 OM0AWK13 OM0AWK13 ; 
    15 * char(1) ; 
    15 OM0AWK14 OM0AWK14 ; 
    15 * char(1) ; 
    15 OM0AWK15 OM0AWK15 ; 
    15 * char(1) ; 
    15 OM0AWK16 OM0AWK16 ; 
    15 * char(1) ; 
    15 OM0AWK17 OM0AWK17 ; 
  10 OM0AW-CUST-LOGO-FLAG OM0AW-CUST-LOGO-FLAG ; 
  10 SYCDATA SYCDATA ; 
  10 OM0AW-WSY2000-FND-FLAG OM0AW-WSY2000-FND-FLAG ; 
  10 OM0AW-WSY2000-POST-1 OM0AW-WSY2000-POST-1 ; 
  10 OM0AW-WSY2000-GPC-CD OM0AW-WSY2000-GPC-CD ; 
  10 OM0AW-WSY2000-STY-NBR OM0AW-WSY2000-STY-NBR ; 
  10 OM0AW-WSY2000-COLR-CD OM0AW-WSY2000-COLR-CD ; 
  10 OM0AW-WSY2000-DIM-CD OM0AW-WSY2000-DIM-CD ; 
  10 OM0AW-WSY2000-PROD-REG-CD OM0AW-WSY2000-PROD-REG-CD ; 
  10 OM0AW-WSY2000-RETURN-CD OM0AW-WSY2000-RETURN-CD ; 
  10 OM0AW-FOUND-QTY-SW OM0AW-FOUND-QTY-SW ; 
end // end OM0AW01

//*** RECORD=OM0AW02 ****
// record name:         om0aw02
// 
// organization:        working storage - exact copy of op1rec
// 
// length in bytes      426
// ***********************
Record OM0AW02 type basicRecord
  5 OP1GROUP OP1GROUP ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 OB1XREFN OB1XREFN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PORMF OP1PORMF ; 
    10 OP1ORDBY OP1ORDBY ; 
    10 OP1TBREP OP1TBREP ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 XWHCD XWHCD ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP-ORIG-NEED-DT OP-ORIG-NEED-DT ; 
    10 XOSCD XOSCD ; 
    10 OP1OSADT OP1OSADT ; 
    10 OP1TDOF OP1TDOF ; 
    10 XTDPCT XTDPCT ; 
    10 OP1TDFCP OP1TDFCP ; 
    10 OP1TDBKP OP1TDBKP ; 
    10 OP1PTOF OP1PTOF ; 
    10 XPTCD XPTCD ; 
    10 OP1AAOF OP1AAOF ; 
    10 XAAPCT XAAPCT ; 
    10 OP1AAFCP OP1AAFCP ; 
    10 OP1AABKP OP1AABKP ; 
    10 OP1COPOF OP1COPOF ; 
    10 XCPPCT XCPPCT ; 
    10 OP1DFAOF OP1DFAOF ; 
    10 XDAPCT XDAPCT ; 
    10 XDSCD XDSCD ; 
    10 OP-DIRSHP-DSCT-PCT OP-DIRSHP-DSCT-PCT ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP-SREP-OVRD-FL OP-SREP-OVRD-FL ; 
    10 OP1SWORD OP1SWORD ; 
    10 XBDCD XBDCD ; 
    10 OP1BLKID OP1BLKID ; 
    10 OP1NDRAW OP1NDRAW ; 
    10 OP1COGID OP1COGID ; 
    10 OP1BLAID OP1BLAID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 OP1SHAID OP1SHAID ; 
    10 OP1ODSKF OP1ODSKF ; 
    10 OP1ENTDT OP1ENTDT ; 
    10 OP1ORCDT OP1ORCDT ; 
    10 OP1ENREP OP1ENREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 OP1OALSQ OP1OALSQ ; 
    10 OP1LALDT OP1LALDT ; 
    10 OP1DABDT OP1DABDT ; 
    10 OP1DRBDT OP1DRBDT ; 
    10 XACCD XACCD ; 
    10 OP1ASGCO OP1ASGCO ; 
    10 XAHCD XAHCD ; 
    10 OP1ALHDT OP1ALHDT ; 
    10 OP1PAHCD OP1PAHCD ; 
    10 OP1ALRDT OP1ALRDT ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 OP1RSVF OP1RSVF ; 
    10 OP1WIPIN OP1WIPIN ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 OP1ASHDF OP1ASHDF ; 
    10 OP1ACNLF OP1ACNLF ; 
    10 OP1SMSCF OP1SMSCF ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1CPODT OP1CPODT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XCHCD XCHCD [3] ; 
    10 XCSCD XCSCD ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CSATM OP1CSATM ; 
    10 OP1CRLMP OP1CRLMP ; 
    10 OP1CRLMR OP1CRLMR ; 
    10 OP1PCSCD OP1PCSCD ; 
    10 OP1PCSDT OP1PCSDT ; 
    10 OP1PCSTM OP1PCSTM ; 
    10 OP1CCKOQ OP1CCKOQ ; 
    10 OP1CKAMT OP1CKAMT ; 
    10 OP1DCHLD OP1DCHLD ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 OP1VAUDT OP1VAUDT ; 
    10 OP1VAUNB OP1VAUNB ; 
    10 OP-CALL-CR-CK-FL OP-CALL-CR-CK-FL ; 
    10 OP-LST-CR-CK-CO-ID OP-LST-CR-CK-CO-ID ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 OP1SSHPO OP1SSHPO ; 
    10 OP1ECADT OP1ECADT ; 
    10 OP1ECANM OP1ECANM ; 
    10 OP1IVADT OP1IVADT ; 
    10 OP1PCNDT OP1PCNDT ; 
    10 OP1CFMDT OP1CFMDT ; 
    10 OP1IPIND OP1IPIND ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SHAMT OP1SHAMT ; 
    10 OP1IFAMT OP1IFAMT ; 
    10 XMDCD XMDCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP1ALCQF OP1ALCQF ; 
    10 OP1RSVQF OP1RSVQF ; 
    10 OP1SHPQF OP1SHPQF ; 
    10 OP1OSRID OP1OSRID ; 
    10 OP1ORADT OP1ORADT ; 
    10 XOMCD XOMCD ; 
    10 OP1OMDT OP1OMDT ; 
    10 OP1MTREP OP1MTREP ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1OMCMF OP1OMCMF ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP11TMBF OP11TMBF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 DN-ORD-DIST-IND DN-ORD-DIST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OM0AW02

// custom logo flag
DataItem OM0AW-CUST-LOGO-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-FOUND-QTY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag call to sy2000
DataItem OM0AW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0AW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// accessories order flag
DataItem OM0AWAOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk draw type flag
DataItem OM0AWBDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save nike color
DataItem OM0AWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save customer style
DataItem OM0AWCST char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total deleted quantity
DataItem OM0AWDQT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag key op1660
DataItem OM0AWEKY char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first desc size to dup
DataItem OM0AWFDD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first int size to dup
DataItem OM0AWFDI num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// found flag
DataItem OM0AWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size found flag
DataItem OM0AWFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size
DataItem OM0AWFSZ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error diag order num
DataItem OM0AWK01 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err diag nike ord id
DataItem OM0AWK02 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err diag sls pgm
DataItem OM0AWK03 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag life cycle
DataItem OM0AWK04 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag qual code
DataItem OM0AWK05 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag prod code
DataItem OM0AWK06 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag style
DataItem OM0AWK07 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag color
DataItem OM0AWK08 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag dim
DataItem OM0AWK09 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag gpc
DataItem OM0AWK10 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag division
DataItem OM0AWK11 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag sales office
DataItem OM0AWK12 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag sport activity
DataItem OM0AWK13 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag acct class
DataItem OM0AWK14 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag customer
DataItem OM0AWK15 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err diag store
DataItem OM0AWK16 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// err diag department
DataItem OM0AWK17 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used for ta1rec key reporting
DataItem OM0AWKEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key info
DataItem OM0AWKY1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key info
DataItem OM0AWKY2 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key info
DataItem OM0AWKY3 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key info
DataItem OM0AWKY4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last desc size to dup
DataItem OM0AWLDD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// late draw flag
DataItem OM0AWLDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last int size to dup
DataItem OM0AWLDI num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last line item number
DataItem OM0AWLLI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size found flag
DataItem OM0AWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last size
DataItem OM0AWLSZ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of active sizes
DataItem OM0AWNAS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order full flag
DataItem OM0AWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one quality code flag
DataItem OM0AWOQC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product number formatted
DataItem OM0AWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sizes to dup flag
DataItem OM0AWPSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws qty field
DataItem OM0AWQTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style error flag
DataItem OM0AWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product separator 1
DataItem OM0AWSP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product separator 2
DataItem OM0AWSP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size redefine chr array
DataItem OM0AWSRA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size redefine char format
DataItem OM0AWSRC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size redefine numeric format
DataItem OM0AWSRN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save nike style id
DataItem OM0AWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message part1
DataItem OM0AWSZ1 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message first size
DataItem OM0AWSZ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message part3
DataItem OM0AWSZ3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message last size
DataItem OM0AWSZ4 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size error message
DataItem OM0AWSZM char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save dimension code
DataItem OM0AWXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

