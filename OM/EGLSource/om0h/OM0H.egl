package om0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ko.common.*;
import ku.common.*;
import nc.common.*;
import ob.common.*;
import oc.common.*;
import oi.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import oz.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0H ****
// ************************************************************
// nike order maintenance / inquiry
// 
// 
// 
// overview: this application allows the user to inquire/change
//           the order header 1 screen.
//           if this application is run in inquity mode, all
//           displayed fields are  protected so that no changes
//           can be made.
//           if the pf2 key is pressed to switch to change mode
//           a   security check has to be done to allow only
//           authorized personel to make changes to an order.
// 
// 
// 
// date created: 07/18/86
// 
// maintenance history:
// 
//     date     by whom     overview of changes made
//   --------  ----------  ------------------------------------
//   07/18/86  thuha mai   original creation
//   09/02/86  jdv         changed s22 so add is within test
//                         for whether label field is eq ' '.
//   09/16/86  jdv         changed to use warehouse required
//                         flag from xds table
//   10/02/86  thuha mai   bulk/draw orders project -- also,
//                         modified program to adopt  the new
//                         maintenance rules for customer,
//                         sales agency/rep, need date,
//                         warehouse, order type, order class,
//                         and bulk/draw order code.
//   02/26/87  jvande      let sale 12 go around dsbdt - s42
// 
//   02/26/86  craine      protect need date for draw orders
//                         when bulk order not found.
//                         sgrp's - om0hs09, om0hsbk
//   03/31/87  jvande      wasn't time/date stamping ord hdr
//                         when change occured.
//   04/08/87  craine      changed om0hs05, om0hs09 and om0hs17
//                         to unprotect bulk code if regular
//                         order and status is open, reserved
//                         or partial reserved, to allow change
//                         from regular to bulk-order.
//   04/15/87  craine      change om0hssv to display ord taken
//                         by name when it's inactive or active
//   04/20/87  jvande      added bulk edits: if not chngd, if
//                         ot allows bulks.(s38) if change to
//                         bulk, prds can't have coor grps(sen)
//                         and (s38).
//   04/24/87  jvande      changed om0hs05, om0hs09 and om0hs17
//                         if stat eq op,pr, or rs let user chg
//                         from bulk to reg if no draws yet.
//   05/18/87  jvande      allow xdscd on bulk/draw as long as
//                         ds code requires a xwhcd.
//   06/02/87  jvande      sbk didn't close set when done.
//   07/22/87  t fox       added sgrp (om0hspk) to pass changes
//                        to the order that affect the picking
//                         system to the picking system.
//   08/25/87  jvande      new order edits, ot,whs,nd.
//   09/28/87  tfox        add code to ssn,005 all changes from
//                         active rep to inactive rep if
//                         authorized
//   09/30/87  tfox        uncomment picking code, fire your
//                         engines!!!!!
//   10/14/87  jvande      merged sp1 call into s09 so security
//                         same. would let yos folks change
//                         whs no matter the case or status.
//   10/28/87  jvande      chngd to only protect ndt on at-once
//                         prop instead of all prop.
//   11/02/87  tfox        moved op1rec update to bottom of
//                         stmt grp s16.
//   11/25/87  jvande      fix setup date bug in pick record.
//   12/03/87  jvande      don't allow bulk cd chng to set-asid
//   01/12/88  tfox        comment rush default for whs 3,9,12
//                         in s44
//   01/15/88  jhh         added flexible bulk/draw to s09
//   01/20/88  tfox        protect needdate for futures s09
//                         sdt.
//   03/09/88  smc         only allow whse changes on header
//                         if   order is open
//                         and  no draws habe been made to bulk
//                         and  not a 1-whse model
//                         and  not a draw order
//                         stmt grps - om0hs05, om0hs09
//   04/14/88  gwells      production deadline table -
//                           replaced xpdtbl with call to
//                           io2560 - dorder.vcutof01.  edit
//                           need date versus prod deadline
//                           via this module.  statement groups
//                           affected - sat, sdt, spd, sp1, sp2
//                           sp3, s09, s16, s18, s23.  for
//                           detailed changes, see production
//                           deadline enhancement request.
//                           added opjrec & oplrec.
//   04/22/88  jhemme      chg kutrec.kunote to .kutendt and
//                         add .kutxndt to s58
//   05/02/88  obecke      s55:new field kucrec.kucftrti to get
//                         terms rec. s56:chg terms call to
//                         select first(sf). s58: chg logic to
//                         find terms within kutrec. s57:n/a,
//                         delete--now done thru by .kucftrti.
//   05/19/88  gwells      sp3: add 'post' to diagnostic when
//                         record not found.  sat: removed 'sn'
//                         check need date logic.
//                         spd: if cutoff record not found,
//                         highlite needdate and give message.
//                         s16: fetch next record, check prod
//                         deadline and write audit from here.
//                         s18: check cutoff table for deadline
//                         record.  sp1: added logic at top -
//                         if record not on table, do not
//                         process statement group.
//                         om0hw01: added fields for error
//                         display - om0hwdky,om0hwdxt,om0hwdnd
// 
//   07/26/88  dwalke      bl# 00007 non existant rep/agency
//                         combinations were able to be entered
//                         not just active or inactive rec/
//                         agency combinations. changed om0hssr
//                         to do a select unique on inactive
//                         rep if caclvl(3) flag is = 'y' auth.
//                         reomved code to call om0hsir (select
//                         set and select next calls for  in-
//                         active rep) removed statement group
//                         omohsir which is nolonger used.
//   08/04/88  dwalke      bl# 00019 existant rep/agency
//                         combinations were not allowed to be
//                         entered if rep has been inactive in
//                         the agency more that once. re-instal
//                         om0hsir with a change of io call
//                         to s3,n3,c3 io call option. problem
//                         caused -811 db abend.
//   08/23/88  gwells      rebook - added new edits for order
//                         maintenance reason code (xomcd) for
//                         rebooking - s13, s59.  new sgrp -
//                         validate agency/customer (s30).
//   10/22/88  tfox        chg code in 015 and s12 to prevent
//                         maintenance of rebook bulk orders.
//   11/03/88  gwells      rebook - add additional edit; can-
//                           cellation date must be more than
//                           45 days from needdate -s13, s59;
//                           added s32 - ck 45 day cancel.
//   11/03/88  jwood       noncsp opt added to calls
//   11/08/88  jjohns      sales program - add internal table
//                           to store sales programs that can
//                           be changed.  modify s43 to call
//                           a new statement group, s51, that
//                           validates the sales program and
//                           updates the terms in the order
//                           header.
//   11/16/88  obecke      #75: issue warn msg 435 if a don't
//                           ship b4 dt and pick prty 10 or 20
//                           both exist at same time.  015,
//                           015 flow;new fld:om0hw01.om0hw435.
//   11/28/88  obecke      add errdiag info for vtext.
//                           s27,s26,s22,s21,s16.
//   11/28/88  jjohns      added is91/is95 to om0ht01
//   11/30/88  jjohns      update face and bank percent in s51
//   12/05/88  gwells      add credit hold edit to the rebook
//                         45 day cancel window - s32.
//   12/05/88  obecke      #75: issue warn msg 435 only if
//                         don't ship b4 not = today & rush
//                         pick prty.  see 11/28.  015.
//   12/13/88   dwalke     allow up to two year in advance
//                         need date - s18, s40, s41, s42
//                         bug #101
//   01/12/89   rdavis     don't permit changes of order type
//                         to and from sample types - s19
//   01/17/89   obecke     added new values to table om0ht01:
//                         is94/is91, is95/is91, is99/is91.
//   01/26/89   schase     added new values to table om0ht01:
//                         is92/is91, is93/is91, is98/is91.
//   01/27/89   schase     change in s09 to set sales agency &
//                         rep id fields to normal for bulk
//                         orders (om0hw01.om0hwbdf = 'b').
//   02/01/89   schase     change in s38 to make security check
//                         against yostbl to restrict maint
//                         of bulk/draw code. allow change of
//                         bulk order even is a suborder is
//                         in cancel status - add 'xl' status
//                         to if stmt in s93.
//   02/24/89   obecke     only auth. users can change direct
//                         ship code.  yostbl.yosxdsfl added to
//                         table for this.  s05,s09. #151.
//   03/17/89   gwells     when order type changes, edit the
//                         gpc for at-once orders also.  o.t.
//                         cannot cross gpc boundaries - s19.
//   03/20/89   obecke     create dorder.voraud01 production
//                         audit recs at size level. new rec:
//                         opurec. s16,sat,sau,saf
//   03/30/89   skott      changed to select and display
//                         instructions when -803 issued on an
//                         add.  om0hsin.
//   04/05/89   obecke     base order type conversion; added
//                         xgptbl,xobtbl,xvotbl.
//   05/02/89   obecke     sb3,w01,om0hwfnd added.  use this
//                         flag for table search found/not fnd.
//                         do not move '99' to xobcd to end
//                         search!!
//   05/10/89   jbecke     database changes:  om0hs15, s45, s60
//                         s70, s80, s90.
//   05/31/89   mbarna     changed s42 bug #190 dnsb date on
//                         weekend
//   06/23/89   jbecke     changes s43 so that if the original
//                         sales program is an accessories
//                         sales program it cannot be blanked
//                         out.
//   06/29/89   schase     chg variable define of map field
//                         xscd to be character left justified
//                         with no fill.
//   8-16-89    obecke     protect spgm min disc field; remove
//                         min disc edits; m001,s14,s43,s09.
//   08/21/89   ssteph     need to allow sales program maint
//                         within family group on orders not
//                         cancelled or shipped. s51.
//   08/28/89   craine     re-position ezetst for use on
//                         xottbl within xomtbl usage.  s59
//   09/05/89   skott      wildcard gpc on kunrec read if
//                         not ftwr or apparel.  s46
//   09/15/89   ssteph     take the security check (yostbl)
//                         out when changing sales program
//                         within family group. s43
//   09/20/89   obecke     nil terms.  st1,st2,st3,s16,w01
//                         op03.
//   10-03-89   tfox       added xaucd to oearec. chg s16 to
//                         to use acct cls not div code to
//                         determine if nil order.
//   10-12-89   oricha     cole haan orders now always require
//                         a do not ship before date. s10.
//   07/19/95    DLIDDL    Modified to incorporate Nike Canada
//                         into the GOAL system.
//   02/26/87    jvande    hard coded sales office 12 in s42.
//   09/30/87    jvande    hard coded for warehouses which are
//                         on new picking system. see pick note
//                         for stmt grps.
//   08/14/89    ssteph    hard coded new credit life code 30
//                         in s43.
//   09/01/89    craine    remove opfrec code (dorder.vopaud01)
//   10/25/89    rcoron    patched-in read only routine for
//                         night time inquiry. (om0h010,
//                         om0h015, and osirec)
//   11/02/89    oricha    for colehan orders, dont-ship-before
//                         date is a required field. om0hs10
//   11/13/89    ssteph    database changes; replace xshcd with
//                         op1tierf, and op1shdt with op1tlvln.
//                         s43, st3
//   11/21/89    schase    added nil hdr screen, pf10 option,
//                         display and upd some op1rec fields.
//                         added spf,suf,s1a,s1b,s1c,025,030.
//                         chngd 015.
//   11/21/89    rcoron    allow military accounts to order
//                         accessories without a sales program
//                         s43, s97.
//   11/29/89    oricha    #265.  allow cust bulks & cust draws
//                         to have coord groups. sen.
//   11/29/89    ssteph    remove check for label flag before
//                         reading op4rec. 005.
//   12/05/89    cgrice    add comp nbr logic to 001,015,s05,
//                         s09,s10,s11,s14,s17,s24,s96,ssa,w01
//                         map.
//   12/15/89    tfox      add more comp nbr edits s10 s2a s2b
//                         s24
//   12/19/89    cgrice    fixed abend logic in the following
//                         submodules - s93,s94,sen, and sp3
//   12/28/89    tfox      add more comp nbr edits s10 s2a s24
//   01/17/90    oricha    database changes. kufrec.kufwrind
//                         deleted from kufrec.  s15.
//   01/31/90    mbarna    commented some dead code. s15.
//   02/07/90    cgrice    io4270 changed, so a select had to
//                         be changed to a declare, fetch, and
//                         a close.  sfm   bug #294
//   03/05/90    ischmi    bug #276 - allow warehouse change
//                         to be made on a one warehouse model.
//                         changed s05,s09,s44,w01.
//                         added s06,s52
//   03/05/90    cgrice    bug #273 - protect sales agency and
//                         rep at certain times.
//                         changed s05,s09,s17.  added s07.
//   03/26/90    mgatre    multiple-rep - changed rep compare
//                         from vreph001 to vcurep01 for s15
//   04/11/90    schase    bug #278 - add reenter flag when
//                         cancel item. changed s12,s13,s14,
//                         015,w01,map; new s57.
//   04/16/90    bwatso    bug #309 - fixed comp number edits.
//                         changed s10, s24, s2a, & w01.
//                         added sc1 & sc2.
//   04/17/90    bwatso    bug #319 - added display of setup
//                         date to map.  changed sdt, map.
//   04/17/90    scantr    bug #313 - protect sales agency/rep
//                         based on setup date, not order
//                         entered date. s07.
//   05/09/90    mgatre    bug #344 - prevent changing to bulk
//                         if partially shipped - s38, sex
//   05/30/90    BWATSO    Brand code changes.  Changed SB3
//                         and S10.
//   08/09/90    tfox      fixed bug in s89 giving db busy msg
//                         when dnt shp bfr dt blanked out.
//   08/21/90    schase    For any customer bulks cancelled,
//                         make delete of associated cust bulk
//                         from DORDB.VBBULK01 Database Table.
//                         Visa-Versa for creations of customer
//                         bulks. S9A, S9D, S95.
//   09/10/90    oricha    if direct ship code '3' give iseg
//                         warning messages.  s35.
//   10/10/90    dviert    Deleted tag logic in OM0HS16.
// 
//   10/15/90    tfox      added code to protect warehouse for
//                         all order types that display avail.
//                         chg msg 103 to say make whse chg at
//                         product level.
//   01/30/91    tfox      added code to check the xpctbl for
//                         subprogram required at the product
//                         level. s43,s4a,s4b,s4c.
//   02/05/91    dflesh    added code to default minimum alloc
//                         percent in s45.
//   02/05/91    craine    added code to move kucblaid to op1re
//                         instead of kuablgrp. kuarec is being
//                         deinstalled. also kufrec not used
//                         anymore, and it's being deinstalled.
//   02/12/91    tfox      regen for db chgs. delete xzstbl
//                         xzwtbl
//   02/26/91    swatso    changed xchcd in 005 from numeric
//                         to alpha.  (ie: 00 to '00')
//   02/28/91    schase    added edit to dsnb date for not
//                         allowing dsnb date > 21 days past
//                         the need date. s42.
//   03/01/91    schase    added code to exclude sales offices
//                         07,08,12,and 17 from dsnb edit above
//                         s42.
//   03-06-91    dmeier    changed to accomodate blank bulk
//                         draws - xbdcd can change from
//                         '8' to 'f' and 'f' to '8' if
//                         open, reserved, or partial reserved
//                         and no draws against (for 'f' codes)
//   03-06-91    swatso    added stmt grp s4d to exclude spec-
//                         ial customer groups MI,MB,12,BK,AA,
//                         AF from dsnb edit. Modified s42 to
//                         call s4d.
//   03-15-91    dmeier    correct om0hs45 to call kumrec
//                         before moving kumrec.kumshaid to
//                         op1rec.op1shaid
//   03-19-91    schen     modified om0hs09 to protect don't
//                         ship before date if order status is
//                         'al' or 'pa'.  modified om0h010 to
//                         unprotect don't ship before date if
//                         order status is 'al' or 'pa' but
//                         user is the allocation manager.
//                         modified om0hs10 to add picking
//                         maintemance record if don't ship
//                         before date is changed by allocation
//                         manager. om0hs29 is the only stmtgrp
//                         created for this function, and rec
//                         ophrec is added to this appl.
//                         om0hs42 is changed by commenting out
//                         the attribute reset.
//                         two sets of date fields are added
//                         to om0hw01 for formatting screen
//                         dont ship date to db2 date.
//   03-27-91    dharri    log 445 - po # required - phase one
//                         changed kunrec.kunporfl (customer
//                         level, single character y/n flag) to
//                         kucrec.ypocd (company level two char
//                         acter code) in s10, s1b and s50.
//                         removed the call to statement group
//                         s96 from s43, s24 & s47 & put it in
//                         005.
//   03-27-91    schen     log 530 - change to allow authorized
//                         users to change dsnb date even it is
//                         21 days past need date.
//   03-28-91    schen     log     - change to allow allocation
//                         manager to change orders of other
//                         sales office if the order status is
//                         'al' or 'pa'.
//   04/05/91    craine    db2 chg's xftcd removed from xodtbl
//                         chg'd s55 and removed om0hwftc from
//                         om0hw01.
//   04/08/91    swatso    Centralized need date and warehouse
//                         code protection in one stmnt grp s0c
//                         Removed this code from s05, s09, &
//                         s17.  Created new s0d to check
//                         availability.  Updated s18.
//   04/18/91    jloyer/   Log #609; protect xbdcd for blank
//               dmeier    bulks (if xbdcd = 'b').  Moved logic
//                         that displays bulk-id/draw counts
//                         from s0b to s0a. chgd s0a, s0b.
//   04/25/91    bbake2    Log #445 - Changes for PO Required
//                         Code by customer. sbh, s50, s95, s1b
//                         s10.
//   04/25/91    dflesh    Log #484 - If spgm allowed fl in
//                         xautbl = 'n' - Do not allow spgm for
//                         acct class or acct type. s43, s5a.
//   05/01/91    gwells    menu of services - spk, add xpacd
//                         to ombrec
//   05/01/91    schen     log #585 - change om0hs59 to turn
//                         off rebooking of apparel if reason
//                         code is 01.
//   05/06/91    craine    Add edit for department code. 015,
//                         S1D (NEW).
//   05/31/91    tfox      Menu of Services - m001,s02,s03
//                         s13,015 - check for prepacks
//   06/03/91    tfox      Menu of Services - added -911 logic
//                         015, s02, and the map
//   06/10/91    craine    db2 changes - remove split agcy/rep
//                         logic in ssn, s16 and w01, renamed
//                         ypocd in s50, sbh, s1b. renamed
//                         kunbocd to kunabofl in s15, renamed
//                         op1mnalp to kunmapct in s45.
//   08/09/91    JLoyer    Log #671-A: Add repnet-file-nbr to
//                         map (ob1xrefn). om0hm001, s05.
//   08/12/91    dharri    Log #669 - recook cancellation 45
//                         day window ck no longer called in
//                         s59.
//   08/16/91    skott     remove recalculation of terms -
//                         ST3, S16, S43.
//   10/08/91    dmeier    db2 changes - removed all references
//                         to op1rec.op1owrdt, changed opurec.
//                         xxxpgmno to opurec.xxxpgmnb.
//                         om0hm001, om0hsar, sau, sdt, ssa,
//                         s10, s17, om0hw01.
//   11/11/91    schase    db2 changes - osmrec only. added new
//                         fields. initialize to 0. s9a.
//   12/02/91    jhecke    695 - Prepack of footwear. s02,015
//   12/09/91    schase    Added code to format and update the
//                         new fields on DORDB.VBBULK01 table.
//                         Changed: s9a, s95, w01.
//                         Added:   OM0HS-DETER-JCPS, OM0HS-GET
//                                  -SPEC-CU
//   12/13/91    schase    Added code to select and update the
//                         bulk order on DORDB.VBBULK01 when
//                         the dept and po # is maintenanced on
//                         the order. s95, s10, s9u, s9s, w01.
//   12/16/91    TROBER    RE-KEY PROJECT ADDED AUTO CONFIRM
//                         FIELDS TO MAP AND ASSOCIATED LOGIC.
//   01/10/92    bbake2    log #722 - temorarily, prevent
//                         abend when row is missing from
//                         vbbulk01 for a customer bulk.
//                         s10, s9s
//   01/14/92     gwells   731 - iseg defaults for nil - s35.
//   01/16/92    bbake2    log # 733 - added initialization
//                         of oearec at application startup
//                         to prevent rejection of transaction
//                         for terms on first converse of map
//   02/11/92    schase    added credit check for changes made
//                         to direct ship code.
//   02/30/92    scantr    enhancement to allow sales program
//                         to be changed. changed sex,s05,s09,
//                         s10,s16,s17,s43,s45,s46,s47,s48,s62,
//                         s63,s666,s67,s75,s95,s97,001,015,w01
//                         added smp,smr,sm5,s4w,s4x,s6a,s6b,
//                         s64,s6b,w04
//   03/03/92    jwood     disable cc1070 call per scantr
//                         in om0hsmr sgrp
//   03/13/92    scantr    db2 changes- removed op1bgrpo from
//                         om0hs45, changed length of om0hw04
//   03/23/92    jhecke    put in changes for the direct ship
//                         discount percent. w01,ssa,s35,s11
//   03/31/92    scantr    redo terms when sales program chgd &
//                         allow sales pgm to be changed on
//                         draw orders.  changed s09,s16,s39,
//                         s64,smp,smr,w01. added smt,smu,
//                         sm1,sm2,sm3,sm4.
//   04/06/92    jhecke    put in changes for the direct ship
//                         discount percent. ssa,s09,s11,s17
//                         s35,w01
//   05/14/92    scantr    call credit (CC1070) when order
//                         changed due to sales pgm change smr
//   05/20/92    trober    moved update of vbbulk01 table
//                         from om0hs10 to om0hs16.  added -911
//                         logic to om0hs9s, om0hs9u and
//                         om0hs9d.
//   07/01/92    schase    Added code to maintain the DORDB.
//                         VBBULK01 Table for auto assigning
//                         Belk Bulk Orders to Belk Draws.
//                         Similar to JC Penneys code. s9a, w01
//                         om0hs-deter-bulks.
//                         Also, removed code which edits the
//                         bulk order code for user auth to chg
//                         bulk code and verify entered code.
//                         s38.
//   07/02/92    schase    Reapplied code for s38 above.
//   07/07/92    tfox      removed code in s38 that checked the
//                         yostbl for authority to change bulk
//                         draw codes log #875.
//   08/03/92    scantr    #899 Update sales program order type
//                         table when sales pgm or order type
//                         changed.  Changed om0hs16,
//                         added om0hs-chk-all-subs,
//                         om0hs-chk-this-sub.
//   08/04/92    bbake2    log#785 - added comp edits 015, 040
//                         s16, w01, edt-auth-by, edt-bus-purp
//   08/12/92    gwells    #904 - Set sales rep override flag
//                         to 'y' when agency or rep changes -
//                         s16.
//   10/12/92    tfox      regen for db chgs. chged sm5rec to
//                         vragcy02.
//   11/02/92    jather    added special override percent for
//                         direct ship (om0hs35)
//   11/19/92    schase    Added WHSE CD edit for Int'l orders
//                         that use warehouse '15'. s06, s44.
//   12/10/92    dcaust    log #855.  if international order
//                         and order class = 'in', protect
//                         direct ship, whse and order cls code
//                         on map; don't allow order cls to be
//                         chgd to 'in'.  s09, s28.
//   12/29/92    dharri    stmt s06 added condition of & status
//                         'op' for setting WHSE defined
//   01/04/93    jather    log #868 (Airborne).  If an order is
//                         a transmitted airborne order, do not
//                         allow any updates or cancellations.
//                         If changes made to an order qualify
//                         it for a transmitted airborne order
//                         DO NOT ALLOW UPDATES TO BE MADE.
//                         005,010,015,s10,s12
//   05/01/93    dlegg     log #937. NSG changes. Add whse 25
//                         to check in s35.
//   06/10/93    dcaust    log #964.  International Airborne.
//                         if ord cls 'tr', protect store,dept,
//                         whse, ds code; allow pf24, but chg
//                         ord cls from 'tr' to 'au'.  allow
//                         only certain types of order class -
//                         see s28 for details.
//                         s09, s12, s13, s28.
//   07/13/93    SCHASE    Correct problem in S09 with protect
//                         ing the Order Class Code Field when
//                         a NIL Sample Airborne Order has
//                         shipped quantity.  Do not set the
//                         field protect in this case.
//   07/14/93    gcalki    #848 international divert orders
//                         protect xdscd, xwhcd, need dt. 015
//   09/01/93    gcalki    CSP 4.1 changes - changed call to
//                         om0r to include omerec which contain
//                         a return code.  return code checked
//                         upon return to see if the appl
//                         should return to main menu.  s13
//   12/20/93    gcalki    xcc table change - add code to check
//                         if the xcc code is active.  s45, w01
//                         s-check-credit.
//   02/28/94    scantr    dbchanges: initialized op4rec
//                         om0h001.
//  04/28/94     jather    log 1003. renamed causera to
//                         ca-user-workarea-4k to hold opwrec
//                         which has increased to 3072 bytes.
//  05/19/94     jather    log 1015. divert orders - need date
//                         less than order set up date instead
//                         of current date
//  06/21/94     schase    Virtual Airspeed Project/Task #15
//                         Replaced all occurances of OSMREC
//                         accessing DORDB.VBBULK01 w/ VBULKS01
//                         accessing DORDB.VBULKS01. Changed
//                         s16.  Added om0hs-insert-bulks,
//                         om0hs-delete-bulks, om0hs-select-bul
//                         ks, om0hs-update-bulks.
// -------- ------- -------------------------------------------
// Date     By whom  Overview of changes made
// -------- ------- -------------------------------------------
// 04/20/95 CRAINE  Change om0hs59 to turn on rebooking
//                  of apparel if reason code is 01.
// 05/19/95 BBAKE2  Dummy entry to force recompile from
//                  prod.  NO CODE CHANGES.
// 04/08/96 MMCGOL  Block changes to direct ship once
//                  billing created, om0hs15
// 04-03-96 MVALBU  Recompiled to pick up change made to
//                  the common statement group xxpom100
//                  where nighttime inquiry mode was
// 04/15/96 CBRINE  Update the VBULKS01 table for all
//                  the sub-orders.
// 04/18/96 NFIELD  Use new view - VBULKS02.
// 05/10/96 CBRINE  On not found condition - insert
//                  VBULKS02 table (OM0HW-SELECT-BULKS)
//                  changed from 6 pm to 7 pm.
// 06/21/96 MVALBU  Changed to use regional data for US
//                  apparel products by calling SY2000.
//                  Changed OM0HSP2 and OM0HS-SEL-SY2000
// 10/21/96 WLEONG  Added om0hsst and changed om0hs05
//                  to include system order type on map
// 11/22/96 MVALBU  Recompiled to pickup change made to
//                  common statement group xpom100 where
//                  nighttime inquiry mode was changed from
//                  7 pm to 6 pm until 4 am instead of 3 am.
// 12/07/96 CSAWKI  Added Product Category for Equipment
// 02/13/97 CSAWKI  Added Equipment/Product Category
//                  changes. Modified OM0HSB3 and
//                  added OPWREC01 to Working Storage.
// 07/08/97 WLEONG  added changes to update prepack if
//                  warehouse is changed. changed to
//                  allow warehouse and need date to be
//                  changed if order has a prepack rec
//                  tied to it.  added call to pk4420
//                  to get carton type code when order
//                  is changed from from 'ms' to 'cu'.
// 07/29/97 eshanm  Changed SYCREC to OP2REC in the
//                  lines to populate WEU0100 record in
//                  statement group OM0HS-CHECK-EQMT
//                  - for Tony Schmidt
// 08/01/97 SLARSE  Order Confirmation & Discrepancy (OCD).
//                  When order is cancelled, a row will
//                  be written to the Sales Order Header
//                  Change Reason Table (VSOHCR01).
//               *  Also, a change reason is required
//                  for changes to DNSB, DNSA and
//                  PO Number at the header level.
//                  Need Date can also be changed, if one has
//                  the proper authority.  Change rsn required.
//               *  Changes at the item level may be
//                  generated if the sales program is
//                  changed.  If so, then call OZ2090
//                  to add the appropriate change reason.
//               *  Add XP0Q pop-up functionality.
//               *  Changed label on the first map from
//                  'cancel rsn:' to 'Change Rsn:'. Added
//                  '23:OCD' label for function key.
// 09/08/97    wleong    regen for yostbl structure change
// 10/22/97 CBRINE  Added edit for customer profile & order typ
//                  in OM0HS66.(Added OPKREC and VCUXOP01)
// 11/14/97 MBURLE  Y2KFIX: Modified OM0HSDF to not treat a
//                  "00" year as invalid.
// 01/27/98 JFLOR1  Modified inquiry/update time module
//                  XPOM100.
// 03/24/98 sgopal  removed use of xvotbl and added code to
//                  access dcorp.vxvo0001 using the iomod
//                  vvxo0001. The statement group changed is:
//                  OM0HSB3. The following OCD change in S10
//                  is also included.
//                  changing DSNB/DSNA - force it to work!(S10)
// 03/13/98 ESHANM  Included a new condition for displaying
//                  OM0G. Condition "OR OMWREC.OMWPF2CH = 'Y'"
//                  is added in the PROC OM0H015. Look for
//                  /*eshanm
// 03/27/98 SGOPAL  Added code in OM0HSB2 to disable change
//                  of order type from 'M1','MD' to other
//                  types and vice-versa and enable  change of
//                  order type from 'M1' to 'MD' and vice versa
//                  Please look for *TCS INCLUDE.
//                  Statement group changed is: SB2
// 03/27/98 DSMIT0  Added edit to require DNSB date for whse
//                  '51' orders - OM0HS10.
// 04/03/98 wleong  do not allow changing of warehouse CU orde
//                  to direct ship MS.  om0hs35, om0hs44,
//                  om0hs-chk-dir-whse.
// 04/01/98 ESHANM  Removed the commented code that accessed
//                  XVOTBL in OM0HSB3 as a clean-up process.
// 06/03/98 JFLOR1  Bypassed SY2000 in OM0HSP2 if div-code is
//                  '02' or '03'.
// 07/21/98 UDAFON  Changed messge #942 in CALL-OZ2090.
// 08/27/98 UDAFON  #178 Increased size of OMWREC to 3505 bytes
//                  re-compiled application.
// 04/16/98 OVAZQU  *** For warehouse 51 only ***
//                  Check status of order on the Mirror Pool
//                  Order Header before accepting a change.
//                  If status is allocated, accept changes to:
//                  Customer PO#, DNSB, DNSA, Carrier code,
//                  Handling codes, Expedite flag, Pick code,
//                  Pick Priority, Ship-to-address, Special
//                  Labels, Special Instructions, and Order
//                  quantities.
//                  If status is released or pack-and-hold
//                  accept changes to:
//                  Customer PO#, DNSB, and DNSA.
//                  If status is up to shipped, accept changes
//                  to:
//                  Order quantities.
// 11/04/98 SGOPAL  Added code in OM0HSB2 to disable change
//                  of order type from 'R1' to other types
//                  and from other order types to 'R1'
//                  Please look for *TCS INCLUDE.
// 12/02/98 svargh  added changes in om0hs-check-update,
//                  om0hs-updte-vbulk,om0hs9b to update bulk qt
//                  -y in vbulks02 table when the header table
//                  is updated.
// 12/04/98 HBASKA  Included a new statement group OM0HS9C in
//                  om0h015 process to update the traffic table
//                  dorder.vxpdit01 when a warehouse is chged
//                  thru PF2 option in om0h screen.
// 01/08/99 svargh  included an error message display when
//                  no cartons large enough.(OM0hs-get-ctn-typ)
// 04/30/99 schapy  added code in om0hs42 to move the correct
//                  century part while editing DSNB date
// 05/25/99 rshaik  Commented the stmt group OM0HS-ALT-CTN-TYPE
//                  which gets the alternate carton typefrom
//                  VCMPNY01 and changed it to display relevant
//                  messages. Changes are in OM0HS-GET-CTN-TYPE
// 07/07/99 rshaik  Commented the stmt group OM0HS-CALL-OC0G
//                  which transfer control to OC0G application
//                  as per Scott/Diane request.This function is
//                  no longer required for business. Changes
//                  are available in process groups OM0HS05 &
//                  OM0HS17. BL#3690.
// 07/14/99 kdenne  ***** AR2DCMS Project Changes *****
//                  Added logic to protect the Customer PO &
//                  Order Type fields for sales office 77 only
//                  (Apparel Auto Replenishment).  The changes
//                  reside in stmt groups OM0HSUF, OM0HS09,
//                  & OM0HS10.
// 09/27/99 sbhara  Timing chnages
//                  added logic in OM0HSB2 and two statemnet
//                  groupsOM0HCA1 and OM0HCA2
//                  These changes will check if the order has
//                  any timing product and do the validation
//                  while editing the order type.It will allow
//                  to change only to " P1" from "P2"
// 10/27/99 sbhara  Timing changes has been commented out
//                  As per the user's request.
//                  The changed code in om0hsb2 is been
//                  commented out. OM0HSCA1&OM0HSCA2 will not
//                  used any more
// 11/03/99 bbahul  Special Promo changes
//                  Changed OM0HS07 to include the value 'P'
//                  in the validation along with 'S'. Search
//                  for BBAHUL.
// 01/18/01 Rshaik  WEP1301 record structure has been changed
// TT#9997          Pl. refer WEP1301 record prologue.
// 
// 07/05/01 VREDDY  #12993
//                  OM0H015 bug fix - to avoid calling OP0O
//                  if the comp ID entered on the map is zero.
// ************************************************************
// *********************
Program OM0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KU3REC KU3REC; // record
  KUCREC KUCREC; // record
  KUGREC KUGREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUTREC KUTREC; // record
  KUYREC KUYREC; // record
  OBFREC OBFREC; // record
  OBPREC OBPREC; // record
  OBTREC OBTREC; // record
  OCGREC OCGREC; // record
  OEAREC OEAREC; // record
  OIBREC OIBREC; // record
  OM0HW01 OM0HW01; // record
  OM0HW02 OM0HW02; // record
  OM0HW03 OM0HW03 { redefines = OM0HW02 } ; // record
  OM0HW04 OM0HW04; // record
  OMAREC OMAREC; // record
  OMBREC OMBREC; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP4REC OP4REC; // record
  OP8REC OP8REC; // record
  OP9REC OP9REC; // record
  OPBREC OPBREC; // record
  OPHREC OPHREC; // record
  OPJREC OPJREC; // record
  OPKREC OPKREC; // record
  OPLREC OPLREC; // record
  OPOREC OPOREC; // record
  OPUREC OPUREC; // record
  OPWREC01 OPWREC01; // record
  OSIREC OSIREC; // record
  OSNREC OSNREC; // record
  PWSREC PWSREC; // record
  SM1REC SM1REC; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  SR2REC SR2REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VCUXOP01 VCUXOP01; // record
  VLCHDR01 VLCHDR01; // record
  VLCORD01 VLCORD01; // record
  VMPOLH01 VMPOLH01; // record
  VMPOLT01 VMPOLT01; // record
  VOPPGM01 VOPPGM01; // record
  VRAGCY02 VRAGCY02; // record
  VSOHCR01 VSOHCR01; // record
  VXVO0001 VXVO0001; // record
  WEP1301 WEP1301; // record
  WEU0100 WEU0100; // record
  WOZ2090 WOZ2090; // record
  WSY2000 WSY2000; // record
  XS0MW01 XS0MW01; // record
  XSRREC XSRREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAATBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XODTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XSHTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use XVOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOSTBL {deleteAfterUse = yes}; // table
  use OM0HM.OM0HM001,  // forms
      OM0HM.OM0HM005, 
      OM0HM.OM0HM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0H001: OM0H001();



    goto OM0H005;



     /* ************************************************************/
    OM0H005: OM0H005();



    goto OM0H010;


     /* *************************************************************/
    OM0H010: OM0H010();



    goto OM0H015;



     /* ************************************************************/
    OM0H015: OM0H015();



    if (converseVar.eventKey is pf2         
     && converseVar.validationMsgNum != 533 /* inquiry only mode violation*/
     && converseVar.validationMsgNum != 788) /* airborne order - no updates*/
       /* added for rebooking 10/88 tjf*/
      if (OP1REC.XBDCD == "R") /* rebook bulk*/
        converseLib.validationFailed(392); /* can't change rebook bulk*/
        OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
        OMAREC.OMAERR = "Y";
      else
        if (OMWREC.OMWCHGFL == "Y") /* if already in change mode*/
          if (COMMAREA.CACHGFL == "Y")
            if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
              converseLib.validationFailed(352); /* id not aut to change orders*/
              OMAREC.OMAERR = "Y";
              OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
            else
              converseLib.validationFailed(008); /* key pressed not valid*/
              OMAREC.OMAERR = "Y";
            end
          else
            converseLib.validationFailed(352); /* id not aut to change orders*/
            OMAREC.OMAERR = "Y";
            OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
          end
        else
          if (COMMAREA.CACHGFL == "Y")
            if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
              converseLib.validationFailed(352); /* id not aut to change orders*/
              OMAREC.OMAERR = "Y";
              OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
            else
              if (OM0HW01.XOSALWCH == "N")
                converseLib.validationFailed(368); /* ord stat does not allow*/
                                 /* ; changes to order*/
                OMAREC.OMAERR = "Y";
                OMWREC.OMWPF2CH = "N";
              else
                if (OP1REC.XSOCD == COMMAREA.XSOCD) /* same sales office*/
                  OMWREC.OMWPF2CH = "Y";
                  OM0HW01.OM0HW1TC = "Y"; /* set 1-time change flag*/
                  goto OM0H015;
                else
                  converseLib.validationFailed(355); /* not auth to change other sales off orders*/
                  OMAREC.OMAERR = "Y";
                  OMWREC.OMWPF2CH = "N";
                end
              end
            end
          else
            converseLib.validationFailed(352); /* id not auth to change orders*/
            OMWREC.OMWPF2CH = "N";
            OMAREC.OMAERR = "Y";
          end
        end
      end
    end



    if (OM0HW01.OM0HW435 == "Y"
     || OM0HW01.OM0HW511 == "Y")
      OM0HW01.OM0HW511 = "N";
      goto OM0H015;
    end


       /* if sales program success warnings, restart the program to*/
       /* display them (believe me you can't just reconverse!)*/

    if (OM0HW01.OM0HW-SPGM-WARNING == "Y") /* terms/prices may have chgd*/
      goto OM0H001;
    end


    if (converseVar.eventKey is pf12
     || OMAREC.OMAERR == "Y")
      goto OM0H015;
    end


    if (converseVar.eventKey is pf10)
      goto OM0H025;
    end


         /* if update error, go back to the order header 1*/
         /* screen with the new order header record*/

    if (OM0HW01.OM0HWUEF == "Y")
      goto OM0H001;
    end


         /* go to the customer variations screen*/

    goto OM0H020;



     /* ************************************************************/
    OM0H020: OM0H020();



    if (OMAREC.OMAERR == "Y")
      goto OM0H020; /* redisplay the customer variations screen*/
    else
      goto OM0H015; /* back to order header screen*/
    end



     /* ************************************************************/
    OM0H025: OM0H025();



    goto OM0H030; /* converse nil hdr screen*/


    OM0H030: OM0H030();



    if (converseVar.eventKey is pf2
     && converseVar.validationMsgNum != 533) /* inquiry only mode violation*/
       /* added for rebooking 10/88 tjf*/
      if (OP1REC.XBDCD == "R") /* rebook bulk*/
        converseLib.validationFailed(392); /* can't change rebook bulk*/
        OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
        OMAREC.OMAERR = "Y";
      else
        if (OMWREC.OMWCHGFL == "Y") /* if already in change mode*/
          if (COMMAREA.CACHGFL == "Y")
            if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
              converseLib.validationFailed(352); /* id not aut to change orders*/
              OMAREC.OMAERR = "Y";
              OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
            else
              converseLib.validationFailed(008); /* key pressed not valid*/
              OMAREC.OMAERR = "Y";
            end
          else
            converseLib.validationFailed(352); /* id not aut to change orders*/
            OMAREC.OMAERR = "Y";
            OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
          end
        else
          if (COMMAREA.CACHGFL == "Y")
            if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
              converseLib.validationFailed(352); /* id not aut to change orders*/
              OMAREC.OMAERR = "Y";
              OMWREC.OMWPF2CH = "N"; /* 1time change flag*/
            else
              if (OM0HW01.XOSALWCH == "N")
                converseLib.validationFailed(368); /* ord stat does not allow*/
                                 /* ; changes to order*/
                OMAREC.OMAERR = "Y";
                OMWREC.OMWPF2CH = "N";
              else
                if (OP1REC.XSOCD == COMMAREA.XSOCD) /* same sales office*/
                  OMWREC.OMWPF2CH = "Y";
                  OM0HW01.OM0HW1TC = "Y"; /* set 1-time change flag*/
                  goto OM0H030;
                else
                  converseLib.validationFailed(355); /* not auth to change other sales off orders*/
                  OMAREC.OMAERR = "Y";
                  OMWREC.OMWPF2CH = "N";
                end
              end
            end
          else
            converseLib.validationFailed(352); /* id not auth to change orders*/
            OMWREC.OMWPF2CH = "N";
            OMAREC.OMAERR = "Y";
          end
        end
      end
    end



    if (OM0HW01.OM0HW435 == "Y"
     || OM0HW01.OM0HW511 == "Y")
      OM0HW01.OM0HW511 = "N";
      goto OM0H030;
    end

    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf19
     || OMAREC.OMAERR == "Y")
      goto OM0H030;
    end



    if (converseVar.eventKey is pf13)
      if (OM0HM010.OM0HMODE == "CHANGE")
        OM0HW01.OM0HW1TC = "Y";
      end
      goto OM0H015;
    end

         /* if update error, go back to the order header 1*/
         /* screen with the new order header record*/

    if (OM0HW01.OM0HWUEF == "Y")
      goto OM0H001;
    end



     /* ************************************************************/
  end // end main
end // end OM0H

// program init
Function OM0H001()



     /* *********************************************************/
     /* *  this process initialize program work and map areas  **/
     /* *********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  XSENTRY(); /* application entry validation*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "H";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

  OM0HS01(); /* clear map and records*/
  OMWREC.OMWPF2CH = "N"; /* set 1time chg flag to 'n'*/
  OM0HW01.OM0HW435 = "N"; /* init warn msg #435*/
   /* auth and buspurp not req'd*/
  OM0HW01.OM0HW-COMP = "N";


       /* set revision number of application*/
       /* and check security*/

  OM0HM001.OPMRVN = "04"; /* bulk/draw project*/

  XSOMS01(); /* check order inq/change security*/
  COMMAREA.CACURRAP = "OM0H";


       /* retrieve op1rec record*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;


       /* move current date & process name to screen*/

  OM0HM001.OPMPRC = "OM0H010";
  OM0HM001.OPMMAP = "OM0HM001";
  OM0HM001.OPMDT = VGVar.currentShortGregorianDate; /* current date to screen*/


       /* save the current date*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end

       /* format date and time for zz fields*/

  set XX0XW01 empty;
  XX0XS01();

       /* initialize the abend screen*/

  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/


       /* reset flags*/

  OM0HW01.OM0HWAMF = "N"; /* allocation manager flag*/
  OM0HW01.OM0HWBNF = "N"; /* bulk order need date flag*/
  OM0HW01.OM0HWNTC = "N"; /* need date changed flag*/
  OM0HW01.OM0HW-SP1ID-MODIFIED-FL = "N"; /* spgm changed flag*/
  OM0HW01.OM0HWPFF = "N"; /* pf key flag*/
  OM0HW01.OM0HW1TC = "N"; /* 1-time change flag*/
  OM0HW01.OM0HWCLF = "N"; /* set cancellation flag*/
  OM0HW01.OM0HWDER = "N"; /* set date error flag*/
  OM0HW01.OM0HWUPF = "N"; /* update flag*/
  OM0HW01.OM0HWNTF = "N"; /* new terms & discounts flag*/
  OM0HW01.OM0HWCDF = "N"; /* cust different flag*/
  OM0HW01.OM0HWARF = "N"; /* active sales rep flag*/
  OM0HW01.OM0HWIRF = "N"; /* inactive sales rep flag*/
  OM0HW01.OM0HWLMF = "N"; /* label modified flag*/
  OM0HW01.OM0HWIMF = "N"; /* instruction modified flag*/
  OM0HW01.OM0HWUEF = "N"; /* update error flag*/
  OM0HW01.OM0HWCMF = "N"; /* customer modified flag*/
  OM0HW01.OM0HWCUV = "Y"; /* customer valid flag*/
  OM0HW01.OM0HWPCH = "N"; /* picking change flag*/
  OM0HW01.OM0HW546 = "N"; /* trigger flag for warning 546*/

  set OMBREC empty;
  set OP4REC empty;

   /* *************************************************************/
end // end OM0H001

// format order header screen
Function OM0H005()



       /* ********************************************************/
       /* * this process reads the order header record, formats **/
       /* * the screen and saves the copy of the screen in the  **/
       /* * working storage                                     **/
       /* ********************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1LOCAT[1] = "OM0H005";



       /* read the order header record*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


       /* check the db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "OM0H005"; /* process name*/
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSOPS02();
  end


       /* format order header screen*/


  OM0HS05(); /* move data from op1rec to screen*/


       /* determine if this order is a transmitted airborne order*/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build a pass record*/
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP1REC.XDSCD;
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  VOPPGM01.XXX-PGM-NBR = "OP1920";
  call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VOPPGM01"; /* table view*/
    TA1REC.TA1TBLKE = "OP1920"; /* key value*/
    TA1REC.TA1LOCAT[2] = "OM0H005"; /* process name*/
    TA1REC.TA1LOCAT[4] = "IO6600";
    XSOPS02();
  end
  XS0MS-CHK-AIRBORNE();

       /* if refer to credit reason codes are not blank,*/
       /* display the abbreviations on the screen*/

  OMAREC.OMASUB = 1;
  while (OMAREC.OMASUB < 4)
    if (OP1REC.XCHCD[OMASUB] != "00")
      set OM0HM001.OM0HMRCR[OMASUB] initialAttributes;
      set OM0HM001.XCHABRV[OMASUB] initialAttributes;
      OM0HSRC(); /* get rtc abbreviation*/
    else
      set OM0HM001.OM0HMRCR[OMASUB] skip, invisible;
      set OM0HM001.XCHABRV[OMASUB] skip, invisible;
    end
    OMAREC.OMASUB = OMAREC.OMASUB + 1;
  end


       /* if all three refer-to-credit codes are blank;*/
       /* darken the label*/

  if (OP1REC.XCHCD[1] == "00"
   && OP1REC.XCHCD[2] == "00"
   && OP1REC.XCHCD[3] == "00")
    set OM0HM001.OM0HMCRB skip, invisible;
  end



       /* if op1rec.xomcd = ' ', darken change reason code & date*/

  if (OP1REC.XOMCD == " ")
    set OM0HM001.XOMCD skip, invisible;
    set OM0HM001.XOMABRV skip, invisible;
    set OM0HM001.OM0HMCDL skip, invisible;
    set OM0HM001.OM0HMNDT skip, invisible;
    set OM0HM001.OM0HMCNL skip, invisible;
    set OM0HM001.OM0HMCBY skip, invisible;
    set OM0HM001.OM0HMRNM skip, invisible;
  else
    set OM0HM001.XOMCD initialAttributes;
    set OM0HM001.XOMABRV initialAttributes;
    set OM0HM001.OM0HMCDL initialAttributes;
    set OM0HM001.OM0HMNDT initialAttributes;
    set OM0HM001.OM0HMCNL initialAttributes;
    set OM0HM001.OM0HMCBY initialAttributes;
    set OM0HM001.OM0HMRNM initialAttributes;
    OM0HM001.XOMCD = OP1REC.XOMCD; /* order maint code*/
    OM0HSOM(); /* get ord maint desc*/
    OM0HW01.OM0HWSVR = OP1REC.OP1MTREP; /* move rep to work area*/
    OM0HW01.OM0HWRER = "N"; /* set service rep error fl*/
    OM0HSSV(); /* get maintenance service rep name*/
    if (OM0HW01.OM0HWRER == "Y")
      OM0HM001.OM0HMRNM = "UNKNOWN";
    else
      OM0HM001.OM0HMRNM = KUYREC.XXXUSRID;
    end
  end


       /* get customer store name*/

  OM0HSTN(); /* get store name*/


       /* get sales rep name*/

  OM0HSSR(); /* get sales rep name*/

  if (OM0HW01.OM0HWARF == "Y"
   || OM0HW01.OM0HWIRF == "Y")
    OM0HM001.OM0HMLNM = VRAGCY02.XXXLSTNM;
    OM0HW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
    OM0HM001.OM0HMFSN = OM0HW01.OM0HWFIN;
  else
    OM0HM001.OM0HMLNM = "REP NOT FOUND";
  end

       /* get sales office abbreviated name*/

  OM0HSSO(); /* sales office abbreviation*/


       /* get warehouse abbreviated name*/

  OM0HSWH(); /* whse abbreviation*/


       /* get gpc abbreviation*/

  OM0HSGP(); /* gpc  abbreviation*/



     /* get base order type description*/

  OM0HSB1(); /* base order type description*/

  OM0HSST(); /* system order type abrv*/

     /* get system order type flags for working storage*/

  OM0HSOT();
                                 /* ;*/

       /* get order class description*/

  OM0HSOC(); /* order class abbreviation*/



       /* get direct ship code description*/

  OM0HSDS();


       /* get order status description*/

  OM0HSOS(); /* order status abbreviation*/


       /* get credit status description*/

  OM0HSCS(); /* order credit status abbreviation*/



       /* get taken-by service rep's name*/

  OM0HW01.OM0HWRER = "N"; /* set service rep error flag*/
  OM0HW01.OM0HWSVR = OP1REC.OP1TBREP;
  OM0HSSV(); /* get taken-by service rep name*/

  if (OM0HW01.OM0HWRER == "Y") /* service rep not found*/
    OM0HM001.OM0HMTBN = "UNKNOWN";
  else
    OM0HM001.OM0HMTBN = KUYREC.XXXUSRID;
  end


       /* get entered-by service rep's name*/

  OM0HW01.OM0HWRER = "N"; /* set service rep error flag*/
  OM0HW01.OM0HWSVR = OP1REC.OP1ENREP;
  OM0HSSV(); /* get entered-by service rep name*/

  if (OM0HW01.OM0HWRER == "Y") /* service rep not found*/
    OM0HM001.OM0HMERN = "UNKNOWN";
  else
    OM0HM001.OM0HMERN = KUYREC.XXXUSRID;
  end



       /* format need date, dont-ship-before-date,*/
       /* dont-ship-after-date, written date,*/
       /* received date, callout date, entered date,*/
       /* order status changed date, credit status*/
       /* changed date, order cancellation date*/


  OM0HSDT(); /* format dates for display*/


  set OM0HM001.OM0HMANL skip, invisible;
  set OM0HM001.OP1ECANM skip, invisible;


       /* get special instructions and labels*/

  OM0HW01.OM0HWIC = 0; /* set instruction count to 0*/
  OM0HW01.OM0HWLC = 0; /* set label count to 0*/

  OM0HSIN(); /* get special instruction & label*/


       /* if there are more than one special instructions*/
       /* or labels, display >>more special instructions*/

  if (OM0HW01.OM0HWIC > 1
   || OM0HW01.OM0HWLC > 1)
    set OM0HM001.OM0HMIND initialAttributes;
    set OM0HM001.OM0HMINS initialAttributes;
  else
    set OM0HM001.OM0HMIND skip, invisible;
    set OM0HM001.OM0HMINS skip, invisible;
  end

       /* get company record*/

  OM0HS96();

       /* save copy of the original screen in working storage*/


  OM0HSSA(); /* save the screen*/



   /* *************************************************************/
end // end OM0H005

// set up screen
Function OM0H010()



        /* *****************************************************/
        /* * this process checks the change flag and 1-time   **/
        /* * change flag to protect or unprotect fields on the**/
        /* * screen                                           **/
        /* *****************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1LOCAT[1] = "OM0H010";

   /* *****************************************************/
   /* if order is a transmitted airborne order,     **/
   /* do not allow updates or cancellations.        **/
   /* display an error message when in update mode  **/
   /* *****************************************************/

  if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
    OM0HM001.OM0HMPF2 = " "; /* flag set in om0h005*/
    OM0HM001.OM0HMP24 = " ";
    if (OMWREC.OMWCHGFL == "Y")
      converseLib.validationFailed(788); /* xmitted airborne order cannot*/
      OMWREC.OMWCHGFL = "N"; /* be updated*/
    end
  end

       /* check to see if user is the allocation manager*/

  if (OMWREC.OMWCHGFL == "Y")
    if (COMMAREA.CACHGFL == "Y")
      if (COMMAREA.CACLVL[1] == "Y")
        OM0HW01.OM0HWAMF = "Y";
      end
    end
  end


         /* if in inquiry mode, or the user is the allocation*/
         /* manager, protect every field on the screen*/

  if (OMWREC.OMWCHGFL == "N") /* inquiry mode*/
    OM0HS11(); /* set fields protect*/
    OM0HM001.OM0HMODE = "INQUIRY";
    set OM0HM001.OM0HMCUR cursor;

     /* check for night time inquiry mode only.*/
       /* note: omwchgfl was always set to 'n' from*/
       /* om0m if status is night time inquiry mode.*/
       /* if mode is inquiry only, remove pf2 (change)*/
       /* from the pfkey options listed at the bottom*/
       /* of the screen.*/

    XPOM100();
    if (OSIREC.OSIMODE == "I")
      set OM0HM001.OM0HMPF2 skip, invisible;
      set OM0HM001.OM0HMP24 skip, invisible;
    else
      set OM0HM001.OM0HMPF2 initialAttributes;
      set OM0HM001.OM0HMP24 initialAttributes;
    end


  else /* one time change mode*/
    if (COMMAREA.CACHGFL == "Y")
      if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
        OM0HS11(); /* set fields protect*/
        if (OP1REC.XOSCD == "AL" /* order status is 'al'*/
         || OP1REC.XOSCD == "PA") /* order status is 'pa'*/
          OM0HM001.OM0HMODE = " CHANGE"; /* show change screen*/
          set OM0HMSBD cursor, normal;
          set OM0HM001.OM0HMPF2 skip, invisible;
        else
          OM0HM001.OM0HMODE = "INQUIRY";
          set OM0HM001.OM0HMCUR cursor;
        end
      else
        OM0HM001.OM0HMODE = " CHANGE";
        set OM0HM001.OM0HMPF2 skip, invisible;
        OM0HS09(); /* unprotect fields*/
        set OM0HM001.OP1CUPO cursor;
      end
    end
  end


  if (OMWREC.OMWCHGFL == "Y" /* change mode*/
   || OMWREC.OMWPF2CH == "Y") /* change mode*/
    OM0HS1D(); /* edit dept*/
  end



   /* ************************************************************/
end // end OM0H010

// accept/edit data
Function OM0H015()
       /* OCD Changes:  Search for SLARSE*/


       /* *****************************************************/
       /* * this process accepts and edits data for the order**/
       /* * header record                                    **/
       /* *****************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1LOCAT[1] = "OM0H015";

       /* initialize flags*/

  OM0HW01.OM0HW-SPGM-ITEM-WARNING = "N";
  OM0HW01.OM0HW-SPGM-WARNING = "N";

       /* check to see if comes from the cancellation reasons*/
       /* screen*/

  if (COMMAREA.CAFROMAP == "OM0G")
    COMMAREA.CAFROMAP = " ";
    OMWREC.OMWPF2CH = "Y";
    OM0HW01.OM0HW1TC = "Y";
    OM0HW01.OM0HWCLF = "Y"; /* still in cancel mode*/
    set OM0HM001.OM0HMXOM cursor;
  end

         /* if in 1-time change mode, unprotect fields on screen*/

  if (OM0HW01.OM0HW1TC == "Y") /* 1-time change*/
    OM0HW01.OM0HW1TC = "N";
    OM0HM001.OM0HMODE = " CHANGE";
    set OM0HM001.OM0HMPF2 skip, invisible;
    OM0HS09(); /* unprotect fields*/
    if (OMAREC.OMAERR == "Y")
          /* next sentence          ; cursor set on dept*/
    else
      set OM0HM001.OP1CUPO cursor;
    end
  end

       /* darken cancellation code & label and pf1 if*/
       /* the order is not being cancelled*/

  if (OM0HW01.OM0HWCLF == "Y"
   || OMWREC.OMWPF2CH == "Y" /* if change, then show the change*/
   /* reason*/
   || OMWREC.OMWCHGFL == "Y") /* change mode*/
    set OM0HM001.OM0HM-SOCD-RSN-LBL initialAttributes; /* slarse begin*/
    set OM0HM001.OM0HM-SOCD-RSN-TXT initialAttributes;
    set OM0HM001.OM0HMPF1 initialAttributes;
    set OM0HM001.OM0HMCRL initialAttributes;
    set OM0HM001.OM0HMXOM initialAttributes;
    set OM0HM001.OM0HMABR initialAttributes; /* slarse end*/
    if (OM0HW01.OM0HWCLF == "Y")
      set OM0HM001.OM0HMREL initialAttributes;
      if (OM0HW01.OM0HWCRF == "N") /* no cancel reenter error*/
        set OM0HM001.OM0HMXOM cursor;
      end
    end
  else
    set OM0HM001.OM0HM-SOCD-RSN-LBL skip, invisible;
    set OM0HM001.OM0HM-SOCD-RSN-TXT skip, invisible;
    set OM0HM001.OM0HMCRL skip, invisible;
    set OM0HM001.OM0HMXOM skip, invisible;
    set OM0HM001.OM0HMABR skip, invisible;
    set OM0HM001.OM0HMPF1 skip, invisible;
    set OM0HM001.OM0HMREL skip, invisible;
    set OM0HM001.OM0HMREF skip, invisible;
    OM0HM001.OM0HMXOM = " ";
    OM0HM001.OM0HMREF = " ";
    OM0HM001.OM0HMABR = " ";
  end

  OM0HS92(); /* edit received date before converse*/

   /* ********************************************************************/
   /* divert order processing*/
   /* protect direct ship, warehouse and need date if a divert order*/
   /* ********************************************************************/

  if (OP1REC.XDVCD == "02" /* international order*/
   && OP1REC.XOBCD == "F1" /* futures order*/
   && OP1REC.XDSCD == "1"  /* direct ship*/
   && OP1REC.OP1CUNDT < OP1REC.ZZZSDT) /* need dt less than order*/
    set OM0HM001.XDSCD protect; /* protect direct ship*/
    set OM0HM001.XWHCD protect; /* protect warehouse*/
    set OM0HM001.OM0HMCND protect; /* protect need date*/
  end

   /* ******************** end divert order processing *******************/


   /* **********************************************************/
  converse OM0HM001 ;
   /* **********************************************************/



       /* clear message line*/

  OM0HM001.VAGen_EZEMSG = " ";


       /* reset the error flag*/

  OMAREC.OMAERR = "N";

  if (OEAREC.OEAM509 == "Y") /* if fatal error in terms*/
    if (converseVar.eventKey is pf3 /* processing*/
     || converseVar.eventKey is pf4 
     || converseVar.eventKey is pf19
     || converseVar.eventKey is pf24)
       /* next sentence*/
    else
      converseLib.validationFailed(509);
      OMAREC.OMAERR = "Y";
      exit stack;
    end
  end

       /* check and process valid aid keys*/

   /* for change option, check for night time inquiry*/
   /* only mode.*/

  if (converseVar.eventKey is pf2 /* change*/
   || converseVar.eventKey is pf24) /* cancel*/
    XPOM100();
    if (OSIREC.OSIMODE == "I")
      converseLib.validationFailed(533); /* inquiry mode. no updates allowed*/
      OMAREC.OMAERR = "Y";
      exit stack;
    else
      if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order*/
        if (converseVar.eventKey is pf2)
          converseLib.validationFailed(788); /* no updates allowed*/
        else
          converseLib.validationFailed(789); /* no cancellations allowed*/
        end
        OMAREC.OMAERR = "Y";
        OM0HS11(); /* protect fields on map*/
        exit stack;
      end
    end
  end

   /* direct ship cannot be changed once billing is created*/

  if (converseVar.eventKey is pf2  /* change*/
   || converseVar.eventKey is pf21 /* prepack*/
   || converseVar.eventKey is pf24) /* cancel*/
    if (OP1REC.XDSCD == "1")
      TA1REC.TA1PGMNM = "OM0H015";
      XSOMS-GET-SHIP-REC();
      if (OMWREC.OMWSHPFL == "Y")
        converseLib.validationFailed(917); /* no updates allowed*/
        OMAREC.OMAERR = "Y";
        OM0HW01.XOSALWCH = "N"; /* to avoid update in flow for pf2*/
        exit stack;
      end
    end
  end


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      OMWREC.OP1GROUP = OP1REC.OP1GROUP;
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
        OM0HS02(); /* check for prepack*/
        if (OMAREC.OMAERR == "Y")
          exit stack;
        end
        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA;
        else
          COMMAREA.CACURRAP = "OM0M";
          transfer to program "OM0M" passing COMMAREA; /* back to o/m menu screen*/
        end
      else
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA; /* back to o/m menu screen*/
      end
    else
      if (converseVar.eventKey is pf4)
        OMWREC.OP1GROUP = OP1REC.OP1GROUP;
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
          OM0HS02(); /* check for prepack*/
          if (OMAREC.OMAERR == "Y")
            exit stack;
          end
          if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
            COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
            COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
            COMMAREA.CACURRAP = "OS0G";
            transfer to program "OS0G" passing COMMAREA;
          else
            XSPF4(); /* back to master menu screen*/
          end
        else
          XSPF4(); /* back to master menu screen*/
        end
      else
        if (converseVar.eventKey is pf24)
          if (OM0HW01.OM0HWCLF == "Y")
            OM0HS13(); /* cancel order*/
          else
            OM0HS12(); /* verify cancellation*/
            OM0HW01.OM0HWCRF = "N";
            exit stack;
          end
        else
          if (converseVar.eventKey is pf1)
            if (OM0HW01.OM0HWCLF == "Y" || 
            OMWREC.OMWPF2CH == "Y" ||  /* eshanm*/
            OMWREC.OMWCHGFL == "Y")    /* slarse*/
              OMWREC.OP1GROUP = OP1REC.OP1GROUP;
              COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
              COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
              COMMAREA.CACURRAP = "OM0G";
              transfer to program "OM0G" passing COMMAREA; /* cancellation reason screen*/
            else
              converseLib.validationFailed(008); /* key pressed is not valid*/
              OMAREC.OMAERR = "Y";
              exit stack;
            end
          else
            if (converseVar.eventKey is pf2)
              exit stack;
            else
              OM0HS14(); /* set modified fields modified*/
              converseLib.validationFailed(008); /* key pressed is not valid*/
              OMAREC.OMAERR = "Y";
              exit stack;
            end
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf11)
    if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
     || OP1REC.XGPCD == "02") /* footwear order*/
      if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
       && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
          OM0HS02();
          if (OMAREC.OMAERR == "Y")
            exit stack;
          end
          OMWREC.OP1GROUP = OP1REC.OP1GROUP;
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
          COMMAREA.CACURRAP = "OS0G";
          transfer to program "OS0G" passing COMMAREA; /* prepack screen*/
        else
          converseLib.validationFailed(664); /* pack code does not allow prepacks*/
          OMAREC.OMAERR = "Y";
          exit stack;
        end
      else
        converseLib.validationFailed(647); /* pack code invalid*/
        OMAREC.OMAERR = "Y";
        exit stack;
      end
    else
      converseLib.validationFailed(665); /* gpc does not allow prepacks*/
      OMAREC.OMAERR = "Y";
      exit stack;
    end
  end



  if (converseVar.eventKey is pf12)
    if (OM0HW01.OM0HWCLF == "Y")
      OM0HS57(); /* edit cancel reenter flag*/
      OM0HS59();
      exit stack;
    end
  end



  if (converseVar.eventKey is pf19)
    if (OM0HW01.OM0HWAMF == "N") /* not allocation manager*/
      if (OMWREC.OMWCHGFL == "Y"
       || OMWREC.OMWPF2CH == "Y")
        OM0HW01.OM0HW1TC = "Y";
        OM0HW01.OM0HWUPF = "N"; /* no need to update op1rec*/
        OM0HW01.OM0HWCLF = "N"; /* no cancellation*/
        OM0HS17(); /* format the original screen*/
        exit stack;
      else
        converseLib.validationFailed(008); /* key pressed not valid*/
        OMAREC.OMAERR = "Y";
        exit stack;
      end
    else
      converseLib.validationFailed(008); /* key pressed not valid*/
      OMAREC.OMAERR = "Y";
      exit stack;
    end
  end


  if (OMWREC.OMWCHGFL == "Y"
   || OMWREC.OMWPF2CH == "Y")
    OM0HS1D(); /* edit department*/

    if (OMAREC.OMAERR == "Y")
      exit stack;
    end
  end

       /* if in change mode, edit fields entered*/

  if (OMWREC.OMWCHGFL == "Y"
   || OMWREC.OMWPF2CH == "Y")
    OM0HS10(); /* edit fields*/

     /* call application op0o comp edits*/
                                  /* #12993 begins - Bug Fix for avoiding*/
                                  /* call to OP0O if comp ID is zero.*/

    if (OMAREC.OMAERR == "N"                 /* no errors*/
     && OM0HM001.OP1CMPNB != OP1REC.OP1CMPNB /* comp nbr changed*/
     && OM0HM001.OP1CMPNB != 0)              /* call only if comp is non-zero*/
      OM0HW01.OM0HW-COMP = "N"; /* reset from last call*/
      set OPOREC empty; /* initialize record*/
      OPOREC.KUCCOID = OM0HM001.OP1CMPNB; /* comp-co-id*/
      OPOREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

      call "OP0O" (OPOREC) {isNoRefresh = yes}; /* call appl op0o comp edits*/

      if (OPOREC.OPO-RETURN-CD == 00) /* user has authority is exception*/
        OM0HW01.OM0HW-COMP = "Y";
                                   /* to trigger audit in updates*/
      else
        if (OPOREC.OPO-RETURN-CD == 01) /* user has authority not exception*/
           /* next sentence*/
        else
          set OM0HM001.OP1CMPNB cursor, modified, bold; /* highlight error*/
          if (OPOREC.OPO-RETURN-CD == 02) /* user does not have authority*/
            OMAREC.OMAERR = "Y"; /* set error to true*/
            converseLib.validationFailed(573); /* restricted acct nbr/acct cls*/
          else
            if (OPOREC.OPO-RETURN-CD == 03)
                                   /* acct cls cd not found in xautbl*/
              OMAREC.OMAERR = "Y"; /* set error to true*/
              converseLib.validationFailed(574); /* acct cls code not found in xautbl*/
            else
              if (OPOREC.OPO-RETURN-CD == 04) /* compnay id not found*/
                                   /* in vcmpny*/
                OMAREC.OMAERR = "Y"; /* set error to true*/
                converseLib.validationFailed(767); /* acct cls code not found in xautbl*/
              else
                XSPF4(); /* xfer to menu abend in io mod*/
                                   /* application op0o*/
                exit program; /* xfer to menu failure*/
              end
            end
          end
        end
      end
    end
                                  /* #12993 begins - Bug Fix for avoiding*/
                                  /* call to OP0O if comp ID is zero.*/

    if (OMAREC.OMAERR == "Y")
      exit stack;
    else /* no errors in om0hs24 or op0o*/
      OP1REC.OP1CMPNB = OM0HM001.OP1CMPNB; /* update op1rec*/
      set OM0HM001.OP1CMPNB normal; /* re-set attributes*/
    end

         /* if customer was modified, check the differences*/
         /* between the old vs the new*/

    if (OMAREC.OMAERR == "N")
      if (OM0HW01.OM0HWCMF == "Y") /* cust was modified*/
        OM0HS15(); /* check customer variations*/
      end
    end
  end


  OM0HS88(); /* check if both a rush pick priority*/
                                   /* code*/
          /* and a don't ship before date exist*/


  if (converseVar.eventKey is pf10)
    if (OMWREC.OMWCHGFL == "Y"
     || OMWREC.OMWPF2CH == "Y")
      if (OMAREC.OMAERR == "N")
        OM0HS16(); /* update op1rec& commarea*/
      end
    end
    OM0HSFM(); /* format nil hdr screen*/
  end



  if (converseVar.eventKey is pf14)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS16(); /* update op1rec& commarea*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
           /* next sentence trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0I";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0I";
            transfer to program "OM0I" passing COMMAREA; /* order header 2*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf15)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS16(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0J";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0J";
            transfer to program "OM0J" passing COMMAREA; /* special instructions*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf16)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS16(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0K";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0K";
            transfer to program "OM0K" passing COMMAREA; /* addresses*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf17)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS16(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0L";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0L";
            transfer to program "OM0L" passing COMMAREA; /* allocation control*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf18)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS16(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0C";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0C";
            transfer to program "OM0C" passing COMMAREA; /* comments*/
          end
        end
      end
    end
  end

   /* needdate and warehouse cannot be changed if*/
   /* the order has a prepack record  menu services 5/91*/
   /* this logic should never be executed because all ot's*/
   /* for gpc03 show availability an w/h and needdate are*/
   /* protected*/
  if (converseVar.eventKey is enter)
    if (OP1REC.XWHCD != OM0HW01.XWHCD /* warehouse change*/
     || OP1REC.OP1CUNDT != OM0HW01.OP1CUNDT) /* needdate change*/
      OM0HS02(); /* check for prepack*/
      if (OMWREC.OMWPPEXF == "Y")
        OMAREC.OMAERR = "Y";
        if (OP1REC.XWHCD != OM0HW01.XWHCD)
          converseLib.validationFailed(667); /* prepack exists cannot change*/
                                   /* warehouse*/
          OM0HM001.XWHCD = OP1REC.XWHCD;
          set OM0HM001.XWHCD cursor, bold;
        else
          converseLib.validationFailed(668); /* prepack exists cannot change needdate*/
          OM0HM001.OM0HMCND = OM0HW01.OM0HWNDT;
          set OM0HM001.OM0HMCND cursor, bold;
        end
      end
    end
  end


  if (converseVar.eventKey is enter)
    OM0HW01.OM0HWCLF = "N"; /* reset cancellation flag*/
    if (OM0HW01.OM0HW435 == "Y"
     || OEAREC.OEAM511 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
         /* next sentence*/
      else
        OM0HS16(); /* update commarea & op1rec*/
                                  /* TCS CHANGE BEGIN*/
        if (OP1REC.OP1EXPDF == "Y")
          OM0HS9C(); /* update oibrec(dorder.vxpdit01)*/
        end
                                  /* TCS CHANGE END*/
        if (OM0HW01.OM0HW511 == "Y"
         || OM0HW01.OM0HW546 == "Y"
         || OM0HW01.OM0HW-SPGM-WARNING == "Y")
          /* trigger to pop out*/
        else
          if (OMWREC.OMWEOF == "Y")
            if (OM0HW01.OM0HWCDF == "Y")
              exit stack;
            else
              if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
                OM0HS02(); /* check for prepack*/
                if (OMAREC.OMAERR == "Y")
                  exit stack;
                end
                if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
                  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                  COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
                  COMMAREA.CACURRAP = "OS0G";
                  transfer to program "OS0G" passing COMMAREA;
                else
                  COMMAREA.CACURRAP = "OM0M";
                  transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                end
              else
                COMMAREA.CACURRAP = "OM0M";
                transfer to program "OM0M" passing COMMAREA; /* select new order screen*/
              end
              COMMAREA.CACURRAP = "OM0M";
              transfer to program "OM0M" passing COMMAREA; /* select new order screen*/
            end
          else
            if (OMWREC.OMWOPTN == 1)
              if (OM0HW01.OM0HWCDF == "Y")
                exit stack;
              else
                OMWREC.XOMCD = "  ";
                COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                COMMAREA.CACURRAP = "OM0S";
                transfer to program "OM0S" passing COMMAREA; /* product summary*/
              end
            else
              if (OMWREC.OMWOPTN == 2
               || OMWREC.OMWOPTN == 4)
                if (OMWREC.OMWCHGFL == "Y")
                  if (OM0HW01.OM0HWCDF == "Y")
                    exit stack;
                  else
                    OMWREC.XOMCD = "  ";
                    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                    COMMAREA.CACURRAP = "OM0Q";
                    transfer to program "OM0Q" passing COMMAREA; /* product detail change*/
                  end
                else
                  if (OM0HW01.OM0HWCDF == "Y")
                    exit stack;
                  else
                    COMMAREA.CACURRAP = "OM0O";
                    transfer to program "OM0O" passing COMMAREA; /* product detail inquiry*/
                  end
                end
              else
                if (OMWREC.OMWOPTN == 5)
                  if (OMWREC.OMWCHGFL == "Y")
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      COMMAREA.CACURRAP = "OM0P";
                      transfer to program "OM0P" passing COMMAREA; /* product header change*/
                    end
                  else
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
                        OM0HS02(); /* check for prepack*/
                        if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
                          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                          COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
                          COMMAREA.CACURRAP = "OS0G";
                          transfer to program "OS0G" passing COMMAREA;
                        else
                          COMMAREA.CACURRAP = "OM0M";
                          transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                        end
                      else
                        COMMAREA.CACURRAP = "OM0M";
                        transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                      end
                      COMMAREA.CACURRAP = "OM0O";
                      transfer to program "OM0O" passing COMMAREA; /* product header inquiry*/
                    end
                  end
                else
                  if (OMWREC.OMWOPTN == 6)
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      COMMAREA.CACURRAP = "OM0A";
                      transfer to program "OM0A" passing COMMAREA; /* product add*/
                    end
                  else
                    if (OMWREC.OMWOPTN == 7)
                      OMWREC.OMWEOF = "Y"; /* end of flow flag*/
                      if (OM0HW01.OM0HWCDF == "Y")
                        exit stack;
                      else
                        if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
                          OM0HS02(); /* check for prepack*/
                          if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
                            COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                            COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
                            COMMAREA.CACURRAP = "OS0G";
                            transfer to program "OS0G" passing COMMAREA;
                          else
                            COMMAREA.CACURRAP = "OM0M";
                            transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                          end
                        else
                          COMMAREA.CACURRAP = "OM0M";
                          transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                        end
                        COMMAREA.CACURRAP = "OM0M";
                        transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                      end
                    else
                      if (OM0HW01.OM0HWCDF == "Y")
                        exit stack;
                      else
                        if (OMWREC.OMWPKCHF == "Y") /* pack change flag*/
                          OM0HS02(); /* check for prepack*/
                          if (OMAREC.OMAERR == "Y")
                            exit stack;
                          end
                          if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
                            COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                            COMMAREA.CAMSG = "ORDER MAINTAINED - UPDATE PREPACK";
                            COMMAREA.CACURRAP = "OS0G";
                            transfer to program "OS0G" passing COMMAREA;
                          else
                            COMMAREA.CACURRAP = "OM0M";
                            transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                          end
                        else
                          COMMAREA.CACURRAP = "OM0M";
                          transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                        end
                        COMMAREA.CACURRAP = "OM0M";
                        transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* ************************************************************/
end // end OM0H015

// display customer variations
Function OM0H020()



       /* ******************************************************/
       /* * if there are differences between old and new cust **/
       /* * this screen will display the warning messages     **/
       /* ******************************************************/



       /* initialize the screen*/

  OM0HM005.OPMDT = VGVar.currentShortGregorianDate;
  OM0HM005.OPMPRC = "OM0H015";
  OM0HM005.OPMRVN = 01;


       /* move customer number and order number to screen*/

  OM0HM005.OM0HMORN = OMWREC.OMWORD;
  OMAREC.OMACUCO = OP1REC.KUCCOID;
  OMAREC.OMACUSR = OP1REC.KUMSTRID;
  OMAREC.OMACUDP = OP1REC.XNXCD;

  OMAREC.OMASEP1 = ".";
  OMAREC.OMASEP2 = ".";

  OM0HM005.OM0HMCUN = OMAREC.OMACUNO;


       /* if there is no sales program, darken label and*/
       /* field*/

  if (OP1REC.SP1ID != " ")
    OM0HM005.SP1ID = OP1REC.SP1ID;
  else
    set OM0HM005.OM0HMSLB skip, invisible;
    set OM0HM005.SP1ID skip, invisible;
  end


       /* reset the cust variations flag*/

  OM0HW01.OM0HWCDF = "N";



   /* **********************************************************/
  converse OM0HM005 ;
   /* **********************************************************/


       /* clear message line*/

  OM0HM005.VAGen_EZEMSG = " ";


       /* reset the error flag*/

  OMAREC.OMAERR = "N";



       /* check ezeaid and process valid keys*/


  if (converseVar.eventKey is pf13)
    exit stack;
  else
    if (converseVar.eventKey is enter)
      if (OMWREC.OMWEOF == "Y")
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA; /* select new order screen*/
      else
         /* if any pf key was hit at the ord header screen*/
         /* xfer to requested application*/
        if (OM0HW01.OM0HWPFF == "Y")
          COMMAREA.CATOAP = sysVar.transferName;
          if (COMMAREA.CATOSYS == COMMAREA.CACURSYS)
            transfer to program sysVar.transferName passing COMMAREA;
          else
            transfer to transaction sysVar.transferName passing COMMAREA;
          end
        else
          if (OMWREC.OMWOPTN == 1)
            COMMAREA.CACURRAP = "OM0S";
            transfer to program "OM0S" passing COMMAREA; /* product summary*/
          else
            if (OMWREC.OMWOPTN == 2
             || OMWREC.OMWOPTN == 4)
              if (OMWREC.OMWCHGFL == "Y")
                COMMAREA.CACURRAP = "OM0Q";
                transfer to program "OM0Q" passing COMMAREA; /* product detail change*/
              else
                COMMAREA.CACURRAP = "OM0O";
                transfer to program "OM0O" passing COMMAREA; /* product detail inquiry*/
              end
            else
              if (OMWREC.OMWOPTN == 5)
                if (OMWREC.OMWCHGFL == "Y")
                  COMMAREA.CACURRAP = "OM0P";
                  transfer to program "OM0P" passing COMMAREA; /* product header change*/
                else
                  COMMAREA.CACURRAP = "OM0O";
                  transfer to program "OM0O" passing COMMAREA; /* product header inquiry*/
                end
              else
                if (OMWREC.OMWOPTN == 6)
                  COMMAREA.CACURRAP = "OM0A";
                  transfer to program "OM0A" passing COMMAREA; /* product add*/
                else
                  if (OMWREC.OMWOPTN == 7)
                    OMWREC.OMWEOF = "Y"; /* end of flow flag*/
                    COMMAREA.CACURRAP = "OM0M";
                    transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                  else
                    COMMAREA.CACURRAP = "OM0M";
                    transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                  end
                end
              end
            end
          end
        end
      end
    else
      converseLib.validationFailed(008); /* key pressed is not valid*/
      OMAREC.OMAERR = "Y";
    end
  end



   /* ************************************************************/
end // end OM0H020

// set up screen
Function OM0H025()



        /* *****************************************************/
        /* * this process checks the change flag and 1-time   **/
        /* * change flag to protect or unprotect fields on the**/
        /* * screen                                           **/
        /* *****************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1LOCAT[1] = "OM0H025";


  if (OM0HM001.OM0HMODE == "INQUIRY") /* orig hdr in inq mode*/
    OM0HSPF(); /* set fields protect*/
    OM0HM010.OM0HMODE = "INQUIRY";
    set OM0HM010.OM0HMCUR cursor;
  else
    OM0HM010.OM0HMODE = " CHANGE";
    set OM0HM010.OM0HMPF2 skip, invisible;
    OM0HSUF(); /* unprotect fields*/
    set OM0HM010.OP1CUPO cursor;
  end


   /* ************************************************************/
end // end OM0H025

// nil accept/edit data
Function OM0H030()



       /* *****************************************************/
       /* * this process displays international header screen**/
       /* *****************************************************/



  TA1REC.TA1LOCAT[1] = "OM0H030";


  if (converseVar.eventKey is pf19)
    OM0HSFM(); /* reformat screen*/
  end

         /* if in 1-time change mode, unprotect fields on screen*/

  if (OM0HW01.OM0HW1TC == "Y")
    OM0HW01.OM0HW1TC = "N";
    OM0HM010.OM0HMODE = "CHANGE";
    set OM0HM010.OM0HMPF2 skip, invisible;
    OM0HSUF(); /* unprotect fields*/
    set OM0HM010.OP1CUPO cursor;
  end



   /* **********************************************************/
  converse OM0HM010 ;
   /* **********************************************************/



       /* clear message line*/

  OM0HM001.VAGen_EZEMSG = " ";


       /* reset the error flag*/

  OMAREC.OMAERR = "N";


       /* check and process valid aid keys*/



   /* for change option, check for night time inquiry*/
   /* only mode.*/

  if (converseVar.eventKey is pf2) /* change*/
    XPOM100();
    if (OSIREC.OSIMODE == "I")
      converseLib.validationFailed(533); /* inquiry mode. no updates allowed*/
      OMAREC.OMAERR = "Y";
      exit stack;
    end
  end



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      OMWREC.OP1GROUP = OP1REC.OP1GROUP;
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OM0M";
      transfer to program "OM0M" passing COMMAREA; /* back to o/m menu screen*/
    else
      if (converseVar.eventKey is pf4)
        OMWREC.OP1GROUP = OP1REC.OP1GROUP;
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        XSPF4(); /* back to master menu screen*/
      else
        if (converseVar.eventKey is pf2)
          exit stack;
        else
          converseLib.validationFailed(008); /* key pressed is not valid*/
          OMAREC.OMAERR = "Y";
        end
      end
    end
  end




  if (converseVar.eventKey is pf12)
    if (OM0HW01.OM0HWCLF == "Y")
      OM0HS59();
      exit stack;
    end
  end



  if (converseVar.eventKey is pf19)
    if (OM0HW01.OM0HWAMF == "N") /* not allocation manager*/
      if (OMWREC.OMWCHGFL == "Y"
       || OMWREC.OMWPF2CH == "Y")
        OM0HW01.OM0HW1TC = "Y";
        OM0HW01.OM0HWUPF = "N"; /* no need to update op1rec*/
        OM0HW01.OM0HWCLF = "N"; /* no cancellation*/
        OM0HSFM(); /* format the original screen*/
        exit stack;
      else
        converseLib.validationFailed(008); /* key pressed not valid*/
        OMAREC.OMAERR = "Y";
        exit stack;
      end
    else
      converseLib.validationFailed(008); /* key pressed not valid*/
      OMAREC.OMAERR = "Y";
      exit stack;
    end
  end




       /* if in change mode, edit fields entered*/

  if (OMWREC.OMWCHGFL == "Y"
   || OMWREC.OMWPF2CH == "Y")
    OM0HS1A(); /* edit fields*/
    if (OMAREC.OMAERR == "Y")
      exit stack;
    end
  end


  if (converseVar.eventKey is pf13)
    if (OMWREC.OMWCHGFL == "Y"
     || OMWREC.OMWPF2CH == "Y")
      if (OMAREC.OMAERR == "N")
        OM0HS95(); /* update op1rec& commarea*/
        OM0HM001.OP1CUPO = OM0HM010.OP1CUPO;
      end
    end
  end


  if (converseVar.eventKey is pf14)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS95(); /* update op1rec& commarea*/
        if (OM0HW01.OM0HW511 == "Y")
           /* next sentence trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0I";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0I";
            transfer to program "OM0I" passing COMMAREA; /* order header 2*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf15)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS95(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0J";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0J";
            transfer to program "OM0J" passing COMMAREA; /* special instructions*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf16)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS95(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0K";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0K";
            transfer to program "OM0K" passing COMMAREA; /* addresses*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf17)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS95(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0L";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0L";
            transfer to program "OM0L" passing COMMAREA; /* allocation control*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is pf18)
    if (OM0HW01.OM0HW435 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
        converseLib.validationFailed(095); /* please correct errors*/
        exit stack;
      else
        OM0HS95(); /* update op1rec & commarea*/
        if (OM0HW01.OM0HW511 == "Y")
          /* trigger to pop out*/
        else
          if (OM0HW01.OM0HWCDF == "Y")
            OM0HW01.OM0HWPFF = "Y";
            sysVar.transferName = "OM0C";
            exit stack;
          else
            COMMAREA.CACURRAP = "OM0C";
            transfer to program "OM0C" passing COMMAREA; /* comments*/
          end
        end
      end
    end
  end



  if (converseVar.eventKey is enter)
    OM0HW01.OM0HWCLF = "N"; /* reset cancellation flag*/
    if (OM0HW01.OM0HW435 == "Y"
     || OEAREC.OEAM511 == "Y")
       /* next sentence--trigger to pop out for redisplay*/
    else
      if (OMAREC.OMAERR == "Y")
         /* next sentence*/
      else
        OM0HS95(); /* update commarea & op1rec*/
        if (OM0HW01.OM0HW511 == "Y")
          /* trigger to pop out*/
        else
          if (OMWREC.OMWEOF == "Y")
            if (OM0HW01.OM0HWCDF == "Y")
              exit stack;
            else
              COMMAREA.CACURRAP = "OM0M";
              transfer to program "OM0M" passing COMMAREA; /* select new order screen*/
            end
          else
            if (OMWREC.OMWOPTN == 1)
              if (OM0HW01.OM0HWCDF == "Y")
                exit stack;
              else
                COMMAREA.CACURRAP = "OM0S";
                transfer to program "OM0S" passing COMMAREA; /* product summary*/
              end
            else
              if (OMWREC.OMWOPTN == 2
               || OMWREC.OMWOPTN == 4)
                if (OMWREC.OMWCHGFL == "Y")
                  if (OM0HW01.OM0HWCDF == "Y")
                    exit stack;
                  else
                    COMMAREA.CACURRAP = "OM0Q";
                    transfer to program "OM0Q" passing COMMAREA; /* product detail change*/
                  end
                else
                  if (OM0HW01.OM0HWCDF == "Y")
                    exit stack;
                  else
                    COMMAREA.CACURRAP = "OM0O";
                    transfer to program "OM0O" passing COMMAREA; /* product detail inquiry*/
                  end
                end
              else
                if (OMWREC.OMWOPTN == 5)
                  if (OMWREC.OMWCHGFL == "Y")
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      COMMAREA.CACURRAP = "OM0P";
                      transfer to program "OM0P" passing COMMAREA; /* product header change*/
                    end
                  else
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      COMMAREA.CACURRAP = "OM0O";
                      transfer to program "OM0O" passing COMMAREA; /* product header inquiry*/
                    end
                  end
                else
                  if (OMWREC.OMWOPTN == 6)
                    if (OM0HW01.OM0HWCDF == "Y")
                      exit stack;
                    else
                      COMMAREA.CACURRAP = "OM0A";
                      transfer to program "OM0A" passing COMMAREA; /* product add*/
                    end
                  else
                    if (OMWREC.OMWOPTN == 7)
                      OMWREC.OMWEOF = "Y"; /* end of flow flag*/
                      if (OM0HW01.OM0HWCDF == "Y")
                        exit stack;
                      else
                        COMMAREA.CACURRAP = "OM0M";
                        transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                      end
                    else
                      if (OM0HW01.OM0HWCDF == "Y")
                        exit stack;
                      else
                        COMMAREA.CACURRAP = "OM0M";
                        transfer to program "OM0M" passing COMMAREA; /* o/m menu*/
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* ************************************************************/
end // end OM0H030

Function OM0HS-ADD-VMPOLT01()

  if (OM0HM001.OM0HMINT == " ")
    set OM0HM001.XNDCD initialAttributes;
  else
    VMPOLT01.XWH-WHSE-CD = OP1REC.XWHCD;
    VMPOLT01.PK-ORD-PART-CHAR = OP1REC.OP1PARTN;
    VMPOLT01.PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
    VMPOLT01.PK-NIKE-ORD-ID = OP1REC.OP1NORID;
    VMPOLT01.OP-TXT-REC-TYP = "I";
    VMPOLT01.OP-TXT-REC-SEQ = 1;
    VMPOLT01.OP-TXT = OP4REC.OP4TXT;
    VMPOLT01.OP-TXT-OVRD-FL = "N";
    VMPOLT01.XND-NIKE-DEPT-ID = OP4REC.XNDCD;
    VMPOLT01.ZZ-SDT = OMAREC.OMACDT;
    VMPOLT01.ZZ-CHNG-DT = OMAREC.OMACDT;
    VMPOLT01.ZZ-CHNG-HHMM = OM0HW01.OM0HWT2;
    VMPOLT01.ZZ-CHNG-CNT = 0;

    call "VMPOLT01" ("A ", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
             /* next sentence - record rewritten*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(489); /* someone else updated the rec*/
        OMAREC.OMAERR = "Y"; /* set the update err flag*/
        OM0HS-CLS-VMPOLH01();
        OM0HSIN();
        exit stack;
      else
        TA1REC.TA1PGMNM = "OM0H";
        TA1REC.TA1LOCAT[1] = "A";
        TA1REC.TA1LOCAT[2] = COMMAREA.CACURRAP;
        TA1REC.TA1DBASE = "DPICK";
        TA1REC.TA1TBLVU = "VMPOLT01";
        TA1REC.TA1LOCAT[3] = "OM0HS-ADD-VMPOLT01";
        TA1REC.TA1LOCAT[4] = "VMPOLT01";
        TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;
        XSOPS02(); /* abend routine*/
      end
    end
  end


end // end OM0HS-ADD-VMPOLT01

// DELETE/INSERT OB1REC
Function OM0HS-ADD-VSOHCR01()
   /* New Statement Group as of 7/22/97 modification.*/

   /* You should call OM0HS-MAX-VSOHCR01 and move only*/
   /* the changed PO, Need Date, DNSB, or DNSA value prior*/
   /* to calling this statement group.                     SLARSE*/

  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-GLBL-MNTN-FL = "N";
  VSOHCR01.SOCD-HDR-RSN-TXT = OM0HM001.OM0HM-SOCD-RSN-TXT;
  /* MOVE ' ' TO OM0HM001.OM0HM-SOCD-RSN-TXT;*/
  VSOHCR01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOHCR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZSTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGCT = 0;

   /* ADD RECORD TO VSOHCR01*/

  call "VSOHCR01" ("A ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
         /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "A "; /* CALLING OPTION*/
    TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
    TA1REC.TA1LOCAT[3] = "A-VSOH "; /* stmt group*/
    TA1REC.TA1DBASE = "VSOHCR  "; /* DATA BASE NAME*/
    TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
    XSOPS02();
  end

end // end OM0HS-ADD-VSOHCR01

// Mirror Pool sub-routine
Function OM0HS-CALL-EP1300()
   /* ------------------------------------------------------------------*/
   /* Order Change Subroutine for editing and updating the Mirror*/
   /* Pool Database.  Move the required fields into the passing record*/
   /* based upon modified flags.*/
   /* If return code is 1, no orders exist on the Mirror Pool Database.*/
   /* If return code is 2, 3 or 4, changes cannot be applied.*/
   /* If any others, indicate a system error.*/
   /* ------------------------------------------------------------------*/

  try
    call "EP1300" (WEP1301) {isNoRefresh = yes, isExternal = yes};
  end


end // end OM0HS-CALL-EP1300

// update ocd size item
Function OM0HS-CALL-OZ2090()
   /* New Statement Group as of 7/22/97 modification.*/

      /* use OZ2090 to update the VOCSIZ01 record*/

  set WOZ2090 empty;

  WOZ2090.OZ2090-OP-ORD-PART-CHAR = OP3REC.OP1PARTN;
  WOZ2090.OZ2090-OP-CUST-ORD-ID = OP3REC.OP1CUOID;
  WOZ2090.OZ2090-OP-NIKE-ORD-ID = OP3REC.OP1NORID;
  WOZ2090.OZ2090-OP-LINE-ITEM-NBR = OP3REC.OP2LNINB;
  WOZ2090.OZ2090-XOM-ORD-MNTN-CD = OM0HM001.OM0HMXOM;
  WOZ2090.OZ2090-SOCD-APPL-SRC-CD = "OP";
  WOZ2090.OZ2090-SOCD-GLBL-MNTN-FL = "N";
  WOZ2090.OZ2090-SOCD-SZ-RSN-TXT = OM0HM001.OM0HM-SOCD-RSN-TXT;
  OM0HM001.OM0HM-SOCD-RSN-TXT = " ";
  WOZ2090.OZ2090-XXX-USER-ID = COMMAREA.CAUSERID;

  call "OZ2090" (WOZ2090) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2090.OZ2090-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    converseLib.validationFailed(942);
    OMAREC.OMAERR = "Y";
  end

end // end OM0HS-CALL-OZ2090

// check whether to add, ins, del
Function OM0HS-CHECK-BULK()


    /* maintain customer bulk table for the batch database*/
    /* for all the suborders, including the current*/

  if (OP1REC.XBDCD == "1") /* is a customer bulk*/
    if (OM0HW01.XBDCD == "1") /* always was a customer bulk*/
      if (OM0HW01.OM0HW-UPD-BLK-FL == "Y") /* dept or po changed*/
        OM0HS-SELECT-BULKS(); /* select vbbulk01*/
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          OM0HS-UPDATE-BULKS(); /* update the cust bulk - dordb.vbulks01*/
        end
      end
    else /* is now a bulk*/
      OM0HS-INSERT-BULKS(); /* add to dordb.vbulks01*/
    end
  else
    if (OM0HW01.XBDCD == "1") /* used to be a bulk*/
      OM0HS-DELETE-BULKS(); /* delete from dordb.vbulks01*/
    end
  end

end // end OM0HS-CHECK-BULK

Function OM0HS-CHECK-CREDIT()

     /* *** check credit status code ****/

  OM0HW-XCC-STAT-FOUND = "N"; /* Init valid customer*/

  OM0HW-XCCIDX = 1; /* Reset Subscript 1*/

  while (XCCTBL.XCCCD[OM0HW-XCCIDX] != "99" /* until end of XCCTBL*/
   && OM0HW-XCC-STAT-FOUND != "Y") /* or row found*/

    if (XCCTBL.XCCCD[OM0HW-XCCIDX] == KUCREC.XCCCD /* xcc code found*/
     && XCCTBL.XXXSTAT[OM0HW-XCCIDX] == "A"        /* code is active*/
     && XCCTBL.XCCENTFL[OM0HW-XCCIDX] == "Y")      /* flag is yes*/
      OM0HW-XCC-STAT-FOUND = "Y"; /* set found to 'y'*/
    end

    OM0HW-XCCIDX = OM0HW-XCCIDX + 1; /* Increment subscript 1*/
  end

end // end OM0HS-CHECK-CREDIT

// check for equipment product
Function OM0HS-CHECK-EQMT()
   /* --------------------- om0hs-check-eqmt ---------------------------*/

   /* determine whether or not this is an equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "OM0H";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = OP2REC.XGPCD;
  WEU0100.SY1STNBR = OP2REC.SY1STNBR;
  WEU0100.SY2CLRID = OP2REC.SY2CLRID;
  WEU0100.XDMCD = OP2REC.XDMCD;

  OM0HS-EU0100-SU(); /* select unique*/

end // end OM0HS-CHECK-EQMT

// CHECK FOR ORDER TO UPDATE BULK
Function OM0HS-CHECK-UPDATE()
   /* tcs include begin*/
  set VBULKS02 empty;
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN;
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID;
  VBULKS02.OP1NORID = OP1REC.OP1NORID;
  OBFREC.OBFTASK = "S ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HS-UPDTE-VBULK(); /* if there are records update*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)

    else
      TA1REC.TA1DBASE = "DORDB   "; /* data base name*/
      TA1REC.TA1TBLVU = "VBULKS02"; /* table view*/
      TA1REC.TA1LOCAT[3] = "OM0HS-CHECK-UPDATE"; /* stmt. group*/
      TA1REC.TA1LOCAT[4] = "VBULKS02"; /* i/o mod name*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      XSOPS02(); /* abort*/
    end
   /* tcs include end*/
  end
end // end OM0HS-CHECK-UPDATE

// update sp2rec all suborders
Function OM0HS-CHK-ALL-SUBS()

       /* ********************************************************/
       /* Since sales program is updated on all suborders that **/
       /* aren't shipped or cancelled but order type can vary  **/
       /* between suborders, look at each eligible suborder    **/
       /* (all those in the array) to see if the sales program **/
       /* order type table needs to be updated.                **/
       /* ********************************************************/


  OM0HW01.OM0HW-SAVE-XOTCD = " "; /* init saved order type*/
  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save off current suborder*/
  OMAREC.OMASUB2 = 1;

  while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS)
    OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];

    if (OM0HW01.OP1NORID == OP1REC.OP1NORID) /* if current subordr*/
      OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* move current data back*/
    end

    if (OP1REC.XOTCD == OM0HW01.OM0HW-SAVE-XOTCD) /* if already processd xot*/
        /* next sentence                 /*     don't need to redo it*/
    else /* otherwise*/
      OM0HS-CHK-THIS-SUB(); /* update sp2rec if necessary*/
      OM0HW01.OM0HW-SAVE-XOTCD = OP1REC.XOTCD; /* save order type*/
    end

    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
  end

  OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* move back current subordr*/

   /* *************************************************************/

end // end OM0HS-CHK-ALL-SUBS

// edit direct ship/whse rule
Function OM0HS-CHK-DIR-WHSE()

       /* *******************************************************/
       /* * this statement group validates the direct ship code**/
       /* * /warehouse/cust pack rules:                        **/
       /* * 1) direct ship of '1' cannot have a warehouse      **/
       /* * 2) cust pack code of 'ms' cannot have a warehouse  **/
       /* *******************************************************/

   /* first we must check that xwhcd is valid*/
  if (OM0HM001.XWHCD == " ")
    /* next sentence;*/
  else
    if (OM0HM001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    /* next sentence;*/
    else
      OMAREC.OMAERR = "Y";
    end
  end

  if (OMAREC.OMAERR == "N") /* do further checking only if xwhcd is valid*/
    if (OM0HM001.XDSCD == "1") /* direct ship order*/
   /* IF OP1REC.XPACD NE 'MS';    /* pack code of 'ms'*/
      if (OP1REC.XPACD == "CU") /* warehouse cu order*/
   /* MOVE OP1REC.XDSCD TO OM0HM001.XDSCD;*/
   /* MOVE OP1REC.XWHCD TO OM0HM001.XWHCD;*/
        OM0HW01.OM0HW-UPDT-WHSE-XDSCD = "N";
        set OM0HM001.XDSCD cursor, modified, bold;
        converseLib.validationFailed(813); /* ds orders must have 'ms' pack cd*/
        OMAREC.OMAERR = "Y";
        return;
      end
    else /* non-direct ship order*/
      if (OP1REC.XPACD == "MS")
        OP1REC.XPACD = "CU";
        OP1REC.XDSCD = OM0HM001.XDSCD;
           /* update prepk record with cu pack code*/
        set OSNREC empty;
        set SQLCA empty;

        OSNREC.XPACD = "CU"; /* orginal warehouse*/
        OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
        OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
        OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

        OM0HS-CHK-PREPK();
      end
    end
  end

end // end OM0HS-CHK-DIR-WHSE

// CHECK FOR PREPACK
Function OM0HS-CHK-PREPK()


  call "IO5650" ("S1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO5650" ("N1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0HS-UPDATE-PREPK();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
           /* next sentence;*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
        TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "OM0HS-UP"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
        XSOPS02(); /* abend routine*/
      end
    end
  end

  call "IO5650" ("C1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end
end // end OM0HS-CHK-PREPK

// update spgm/xot ordrs indicatr
Function OM0HS-CHK-THIS-SUB()

       /* ********************************************************/
       /* update the orders indicator on the sales program/  **/
       /* order type table to 'o' if the indicator is 's'.   **/
       /* 's' means no orders have yet been entered using    **/
       /* this sales program order type combination,         **/
       /* 'o' means orders have been entered (so don't make  **/
       /* any changes in the sales program), and 'i' means   **/
       /* at least one of those orders has been invoiced     **/
       /* ********************************************************/


  if (OP1REC.SP1ID == " ") /* if there is no spgm on*/
    return; /* the suborder, don't need to do update*/
  end

  if (OP1REC.SP1ID == SP2REC.SP1ID /* if already have the record*/
   && OP1REC.XOTCD == SP2REC.XOTCD)
    /* next sentence              /*   don't need to reread it*/
  else /* otherwise read the spgm xot rec*/
    SP2REC.SP1ID = OP1REC.SP1ID;
    SP2REC.XOTCD = OP1REC.XOTCD;
    call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      /* next sentence*/
    else
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1MAP = "OM0HM001";
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
      TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
      TA1REC.TA1LOC = "OM0HS-CHK-THIS-SUB IO0080 S";
      XSOPS02(); /* abend routine*/
    end
  end

  if (SP2REC.SP2UIND == "S" /* if indicator shows no orders*/
   || SP2REC.SP2UIND == " ")
    SP2REC.SP2UIND = "O"; /* update it with an o*/
    SP2REC.ZZZCHGDT = OMAREC.OMACDT;
    OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
    OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
    OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
    SP2REC.ZZZCHGTM = OM0HW01.OM0HWT2;

    call "IO0080" ("U ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      /* next sentence*/
    else
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1MAP = "OM0HM001";
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
      TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
      TA1REC.TA1LOC = "OM0HS-CHK-THIS-SUB IO0080 U";
      XSOPS02(); /* abend routine*/
    end
  end


   /* *************************************************************/
end // end OM0HS-CHK-THIS-SUB

// Close vmpolh01
Function OM0HS-CLS-VMPOLH01()

  set SQLCA empty;

  call "VMPOLH01" ("C1", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;
    TA1REC.TA1LOCAT[3] = "OM0HS-CLS-VMPOLH01";
    TA1REC.TA1LOCAT[4] = "VMPOLH01";
    TA1REC.TA1LOCAT[1] = "C1";
    XSOPS02();
  end


end // end OM0HS-CLS-VMPOLH01

// credit check for direct ship
Function OM0HS-CRED-CHK-DS()

      /* ***********************************************/
      /* * call cc1070 for factory direct ship change*/
      /* ***********************************************/

  set CC1REC empty;

  CC1REC.CC1PVALU = OP1REC.OP1OVALU; /* on-order value*/
  CC1REC.CC1PUNTS = OP1REC.OP1OTUNT; /* on-order units*/
  CC1REC.CC1CLRSN = OM0HW01.OM0HW-CRED-REASON-CD; /* reason code*/
  CC1REC.CC1PGMNM = "OM0H"; /* program name*/

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

end // end OM0HS-CRED-CHK-DS

Function OM0HS-DEL-VMPOLT01()

       /* initialize the abend screen*/

  TA1REC.TA1DBASE = "DPICK  "; /* data base name*/
  TA1REC.TA1TBLVU = "VMPOLT01"; /* table view*/
  TA1REC.TA1LOCAT[1] = "D";
  TA1REC.TA1LOCAT[3] = "OM0HS-DEL-VMPOLT01";
  TA1REC.TA1LOCAT[4] = "VMPOLT01  ";

  call "VMPOLT01" ("D ", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    XSOPS02(); /* abend routine*/
  end


end // end OM0HS-DEL-VMPOLT01

// DELETE BULK REC FROM VBULKS01
Function OM0HS-DELETE-BULKS()

     /* build batch bulk record*/

  set VBULKS02 empty;
  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  call "VBULKS02" ("D ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    TA1REC.TA1LOCAT[1] = "D/IO725";
    TA1REC.TA1LOCAT[2] = "0/OM0HS";
    TA1REC.TA1LOCAT[3] = "-DELETE";
    TA1REC.TA1LOCAT[4] = "-BULKS ";
    if (SQLCA.VAGen_SQLCODE == -911) /* DATA BASE BUSY*/
      converseLib.validationFailed(010);
      OM0HW01.OM0HWUEF = "Y"; /* set update error flag to true*/
    /* set to 'y' so that map will converse with error message*/
      TA1REC.TA1FUNC = "POST"; /* post diags*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end
      exit stack; /* return to omoh015 flow*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
  end


end // end OM0HS-DELETE-BULKS

// EDIT SEND CONFIRM FLAG
Function OM0HS-EDT-SND-CNFM()


  if (OM0HM001.OP-SND-CNFM-FL == "Y"
   || OM0HM001.OP-SND-CNFM-FL == "N")
    set OM0HM001.OM0HM-AUTO-CNFM initialAttributes;
    set OM0HM001.OP-SND-CNFM-FL initialAttributes;
    OP1REC.OP-SND-CNFM-FL = OM0HM001.OP-SND-CNFM-FL;
  else
    converseLib.validationFailed(711); /* MUST BE 'Y' OR 'N'*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OP-SND-CNFM-FL cursor, modified, bold;
  end


end // end OM0HS-EDT-SND-CNFM

// call eu0100 select unique
Function OM0HS-EU0100-SU()
   /* ------------------- om0hs-eu0100-su -------------------------*/

  WEU0100.WEU0100-TASK = "S ";
  WEU0100.WEU0100-CALLER-LOCATION = "OM0HS-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to om0hs-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "OM0HS-EU0100-SU"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/


end // end OM0HS-EU0100-SU

// Fetch vmpolh01
Function OM0HS-FTC-VMPOLH01()

  set SQLCA empty;

  call "VMPOLH01" ("N1", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HW01.OM0HW-VMPOLH01-EOF-FL = "N";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0HW01.OM0HW-VMPOLH01-EOF-FL = "Y";
    else
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VMPOLH01";
      TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;
      TA1REC.TA1LOCAT[3] = "OM0HS-FTC-VMPOLH01";
      TA1REC.TA1LOCAT[4] = "VMPOLH01";
      TA1REC.TA1LOCAT[1] = "N1";
      XSOPS02();
    end
  end


end // end OM0HS-FTC-VMPOLH01

// GET CARTON TYPE
Function OM0HS-GET-CTN-TYPE()
   /* since a 'cu' order must have a carton type code, we call pk4420*/
   /* to calculate the carton type code.  if pk4420 does not return a*/
   /* good value, get it from dcust.vcmpny01*/

  set PWSREC empty;
  PWSREC.KUCCOID = OP1REC.KUCCOID;
  PWSREC.OP1PARTN = OSNREC.OP1PARTN;
  PWSREC.OP1CUOID = OSNREC.OP1CUOID;
  PWSREC.OP1NORID = OSNREC.OP1NORID;
  PWSREC.XWHCD = OM0HM001.XWHCD;
  PWSREC.XGPCD = OP1REC.XGPCD;
  PWSREC.XBCCD = OP1REC.XBCCD;
  PWSREC.OP2LNINB[1] = OSNREC.OP2LNINB;
  PWSREC.SY1STNBR[1] = OSNREC.SY1STNBR;
  PWSREC.SY2CLRID[1] = OSNREC.SY2CLRID;
  PWSREC.XDMCD[1] = OSNREC.XDMCD;
  PWSREC.PWSPPQ01[1] = OSNREC.PKTPPQTY[01];
  PWSREC.PWSPPQ02[1] = OSNREC.PKTPPQTY[02];
  PWSREC.PWSPPQ03[1] = OSNREC.PKTPPQTY[03];
  PWSREC.PWSPPQ04[1] = OSNREC.PKTPPQTY[04];
  PWSREC.PWSPPQ05[1] = OSNREC.PKTPPQTY[05];
  PWSREC.PWSPPQ06[1] = OSNREC.PKTPPQTY[06];
  PWSREC.PWSPPQ07[1] = OSNREC.PKTPPQTY[07];
  PWSREC.PWSPPQ08[1] = OSNREC.PKTPPQTY[08];
  PWSREC.PWSPPQ09[1] = OSNREC.PKTPPQTY[09];
  PWSREC.PWSPPQ10[1] = OSNREC.PKTPPQTY[10];
  PWSREC.PWSPPQ11[1] = OSNREC.PKTPPQTY[11];
  PWSREC.PWSPPQ12[1] = OSNREC.PKTPPQTY[12];
  PWSREC.PWSPPQ13[1] = OSNREC.PKTPPQTY[13];
  PWSREC.PWSPPQ14[1] = OSNREC.PKTPPQTY[14];
  PWSREC.PWSPPQ15[1] = OSNREC.PKTPPQTY[15];
  PWSREC.PWSPPQ16[1] = OSNREC.PKTPPQTY[16];
  PWSREC.PWSPPQ17[1] = OSNREC.PKTPPQTY[17];
  PWSREC.PWSPPQ18[1] = OSNREC.PKTPPQTY[18];
  PWSREC.PWSPPQ19[1] = OSNREC.PKTPPQTY[19];
  PWSREC.PWSPPQ20[1] = OSNREC.PKTPPQTY[20];
  PWSREC.PWSPPQ21[1] = OSNREC.PKTPPQTY[21];
  PWSREC.PWSPPQ22[1] = OSNREC.PKTPPQTY[22];
  PWSREC.PWSPPQ23[1] = OSNREC.PKTPPQTY[23];
  PWSREC.PWSPPQ24[1] = OSNREC.PKTPPQTY[24];
  PWSREC.PWSPPQ25[1] = OSNREC.PKTPPQTY[25];
  PWSREC.PWSPPQ26[1] = OSNREC.PKTPPQTY[26];
  PWSREC.PWSPPQ27[1] = OSNREC.PKTPPQTY[27];
  PWSREC.PWSPPQ28[1] = OSNREC.PKTPPQTY[28];
  PWSREC.PWSPPQ29[1] = OSNREC.PKTPPQTY[29];
  PWSREC.PWSPPQ30[1] = OSNREC.PKTPPQTY[30];
  PWSREC.PWSPPQ31[1] = OSNREC.PKTPPQTY[31];
  PWSREC.PWSPPQ32[1] = OSNREC.PKTPPQTY[32];
  PWSREC.PWSPPQ33[1] = OSNREC.PKTPPQTY[33];
  PWSREC.PWSPPQ34[1] = OSNREC.PKTPPQTY[34];
  PWSREC.PWSPPQ35[1] = OSNREC.PKTPPQTY[35];
  PWSREC.PWSPPQ36[1] = OSNREC.PKTPPQTY[36];
  PWSREC.PWSPPQ37[1] = OSNREC.PKTPPQTY[37];
  PWSREC.PWSPPQ38[1] = OSNREC.PKTPPQTY[38];
  PWSREC.PWSPPQ39[1] = OSNREC.PKTPPQTY[39];
  PWSREC.PWSPPQ40[1] = OSNREC.PKTPPQTY[40];

  try
    call "PK4420" (SQLCA, PWSREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* db busy*/
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(010); /* database busy try again*/
    return;
  end
  if (PWSREC.PWSRTNCD == 0)
    OSNREC.YNTCD = PWSREC.YNTCD;
  else
    if (PWSREC.PWSRTNCD == 3)
      /* begin tcs*/
      OM0HM001.VAGen_EZEMSG = " NO CARTONS LARGE ENOUGH - RETRY";
      OMAREC.OMAERR = "Y"; /* error exist*/
      converseLib.validationFailed(996);
      exit stack;
      /* EZERTN;*/
      /* OM0HS-ALT-CTN-TYPE;*/
      /* end tcs*/
    else
      if (PWSREC.PWSRTNCD == 4)
        /* Wipro change begin #05/25/99#*/
        OM0HM001.VAGen_EZEMSG = " PACKAGE REQUIRES MATCHING CARTON TYPES";
        OMAREC.OMAERR = "Y"; /* error exist*/
        exit stack;
        /* EZERTN;*/
        /* OM0HS-ALT-CTN-TYPE;*/
        /* wipro change end*/
      else
        if (PWSREC.PWSRTNCD == 5)
          /* Wipro change begin #05/25/99#*/
          OM0HM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS";
          exit stack;
          /* EZERTN;*/
          /* OM0HS-ALT-CTN-TYPE;*/
          /* Wipro change end*/
        else
          if (PWSREC.PWSRTNCD == 6)
            /* Wipro change begin #05/25/99#*/
            OM0HM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS RECORD";
            exit stack;
            /* EZERTN;*/
            /* OM0HS-ALT-CTN-TYPE;*/
            /* Wipro change end*/
          else
            if (PWSREC.PWSRTNCD == 7)
              /* Wipro change begin #05/25/99#*/
              OM0HM001.VAGen_EZEMSG = " NEEDS HANGING CARTON CLASS";
              exit stack;
              /* EZERTN;*/
              /* OM0HS-ALT-CTN-TYPE;*/
              /* Wipro change end*/
            else
              if (PWSREC.PWSRTNCD == 8)
                /* Wipro change begin #05/25/99#*/
                OM0HM001.VAGen_EZEMSG = " NO ITEM PASSED";
                exit stack;
                /* EZERTN;*/
                /* OM0HS-ALT-CTN-TYPE;*/
                /* Wipro change end*/
              else
                if (PWSREC.PWSRTNCD == 9)
                  /* Wipro change begin #05/25/99#*/
                  OM0HM001.VAGen_EZEMSG = " NO PREPACK QUANTITIES";
                  exit stack;
                  /* EZERTN;*/
                  /* OM0HS-ALT-CTN-TYPE;*/
                  /* Wipro change end*/
                else
                  TA1REC.TA1DBASE = "DORDER  ";
                  TA1REC.TA1TBLVU = "VCSPRP01";
                  TA1REC.TA1TBLKE = "PK4420";
                  TA1REC.TA1LOCAT[2] = "OM0HS-GET-CTN-TYPE";
                  XSOPS02();
                end
              end
            end
          end
        end
      end
    end
  end

end // end OM0HS-GET-CTN-TYPE

// GET DEPT FOR DEPT SELF ID
Function OM0HS-GET-VDEPT001()


      /* This routine reads the department record to obtain the*/
      /* department self id (kujslfid).*/


  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0290  ";
    TA1REC.TA1DBASE = "KUJREC  ";
    TA1REC.TA1TBLVU = "VDEPT001";
    OM0HW01.OM0HW-EK1-KEY = " ";
    OM0HW01.OM0HW-EK1-COMPANY = OP1REC.KUCCOID;
    OM0HW01.OM0HW-EK1-DEPT = OP1REC.XNXCD;
    TA1REC.TA1TBLKE = OM0HW01.OM0HW-EK1-KEY;
    XSOPS02(); /* abend*/
  end





end // end OM0HS-GET-VDEPT001

// INSERT BULK REC INTO VBULKS01
Function OM0HS-INSERT-BULKS()

   /* get current date and time for zzdata*/

  set VBULKS02 empty;


     /* build bulks record*/

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  if (OP1REC.KUCCOID == KUCREC.KUCCOID)
     /* next sentence*/
  else
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
    OM0HS96(); /* read comp for group/parent*/
  end

  VBULKS02.KUCGRPID = KUCREC.KUCGRPID; /* move company group id*/
  VBULKS02.KUKPCOID = KUCREC.KUKPCOID; /* move parent company id*/
  VBULKS02.KUCCOID = OP1REC.KUCCOID; /* move customer id*/
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID; /* move customer store id*/
  VBULKS02.XNXCD = OP1REC.XNXCD; /* move department id*/

  if (OP1REC.KUCCOID == KUJREC.KUCCOID
   && OP1REC.XNXCD == KUJREC.XNXCD)
     /* next sentence*/
  else
    KUJREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
    KUJREC.XNXCD = OP1REC.XNXCD; /* move department id key*/
    OM0HS-GET-VDEPT001(); /* get dept for dept self id*/
  end

  VBULKS02.KUJSLFID = KUJREC.KUJSLFID; /* move dept self id*/
  VBULKS02.XBDCD = OP1REC.XBDCD; /* move bulk code*/
  VBULKS02.XGPCD = OP1REC.XGPCD; /* move gpc*/
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO; /* move customer po*/
  VBULKS02.XDVCD = OP1REC.XDVCD; /* move division code*/
  VBULKS02.XSOCD = OP1REC.XSOCD; /* move sales office*/
  VBULKS02.XWHCD = OP1REC.XWHCD; /* move warehouse code*/
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT; /* move need date*/
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT; /* move don't ship after date*/
  VBULKS02.SP1ID = OP1REC.SP1ID; /* move sales program id*/

  VBULKS02.ZZZCHGDT = OMAREC.OMACDT;
  VBULKS02.ZZZSDT = OMAREC.OMACDT;
  VBULKS02.ZZZCHGTM = OM0HW01.OM0HWT2;
  VBULKS02.ZZZSTM = OM0HW01.OM0HWT2;
  VBULKS02.SM4REPID = OP1REC.SM4REPID; /* move sales program id*/

  call "VBULKS02" ("A ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST  ";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    TA1REC.TA1LOCAT[1] = "A/IO725";
    TA1REC.TA1LOCAT[2] = "0/OM0HS";
    TA1REC.TA1LOCAT[3] = "-INSERT";
    TA1REC.TA1LOCAT[4] = "-BULKS ";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end


end // end OM0HS-INSERT-BULKS

// GET MAX SOCD-HRR-RSN-SEQ
Function OM0HS-MAX-VSOHCR01()

   /* New Statement Group as of 7/22/97 Modification.*/

   /* BUILD KEY TO READ VSOHCR01*/

  set VSOHCR01 empty;
  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.XOMCD = OMWREC.XOMCD;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-HDR-RSN-SEQ = 1;

   /* DO A SEQLECT UNIQUE TO SEE IF THE ROW EXISTS*/

  call "VSOHCR01" ("S ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    VSOHCR01.SOCD-HDR-RSN-SEQ = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "VSOHCR01" ("SM", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        VSOHCR01.SOCD-HDR-RSN-SEQ = VSOHCR01.SOCD-HDR-RSN-SEQ + 1;
      else
        TA1REC.TA1LOCAT[1] = "SM"; /* CALLING OPTION*/
        TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
        TA1REC.TA1LOCAT[3] = "MAX-SEQ"; /* stmt group*/
        TA1REC.TA1DBASE = "VSOHCR  "; /* DATA BASE NAME*/
        TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
        XSOPS02();
      end
    else
      TA1REC.TA1LOCAT[1] = "S "; /* CALLING OPTION*/
      TA1REC.TA1LOCAT[2] = "VSOHCR01"; /* i/o mod name*/
      TA1REC.TA1LOCAT[3] = "MAX-SEQ"; /* stmt group*/
      TA1REC.TA1DBASE = "VSOHCR  "; /* DATA BASE NAME*/
      TA1REC.TA1TBLVU = "VSOHCR01"; /* data base view*/
      XSOPS02();
    end
  end

   /* Need to clear the PO, Need Date, Pterm, DNSB, and DNSA values.*/
   /* Because of the select unique above.  If we could eliminate the*/
   /* select unique (but DB2 Support doesn't want to add a null indi-*/
   /* cator to the select max) we wouldn't have to reset these fields.*/
   /* SLARSE*/
  VSOHCR01.OP1CUPO = " ";
  VSOHCR01.OP1CUNDT = 0;
  VSOHCR01.XPTCD = " ";
  VSOHCR01.OP1DSBDT = 0;
  VSOHCR01.OP1DSADT = 0;

end // end OM0HS-MAX-VSOHCR01

// Open vmpolh01
Function OM0HS-OPN-VMPOLH01()
  set VMPOLH01 empty;

  OM0HW01.OM0HW-VMPOLH01-EOF-FL = "N";
  VMPOLH01.XWH-WHSE-CD = OP1REC.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
  VMPOLH01.PK-NIKE-ORD-ID = OP1REC.OP1NORID;
  VMPOLH01.PK-NBR-TIMES-ALOC = -1;

  call "VMPOLH01" ("S1", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* continue*/
  else
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VMPOLH01";
    TA1REC.TA1LOCAT[1] = "S1";
    TA1REC.TA1LOCAT[3] = "OM0HS-OPN-VMPOLH01";
    TA1REC.TA1LOCAT[4] = "VMPOLH01";
    TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY;
    XSOPS02();
  end


end // end OM0HS-OPN-VMPOLH01

// Process vmpolt01
Function OM0HS-PRC-VMPOLT01()

  set SQLCA empty;

  VMPOLT01.XWH-WHSE-CD = VMPOLH01.XWH-WHSE-CD;
  VMPOLT01.PK-ORD-PART-CHAR = VMPOLH01.PK-ORD-PART-CHAR;
  VMPOLT01.PK-ORD-STKTF-ID = VMPOLH01.PK-ORD-STKTF-ID;
  VMPOLT01.PK-NIKE-ORD-ID = VMPOLH01.PK-NIKE-ORD-ID;
  VMPOLT01.PK-NBR-TIMES-ALOC = VMPOLH01.PK-NBR-TIMES-ALOC;
  VMPOLT01.OP-TXT-REC-TYP = "I";
  VMPOLT01.OP-TXT-REC-SEQ = OP4REC.OP4TRSEQ;

  call "VMPOLT01" ("S ", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HS-UPD-VMPOLT01();
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0HS-ADD-VMPOLT01();
    else
      TA1REC.TA1DBASE = "DPICK   ";
      TA1REC.TA1TBLVU = "VMPOLT01";
      TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;
      TA1REC.TA1LOCAT[3] = "OM0HS-PRC-VMPOLT01";
      TA1REC.TA1LOCAT[4] = "VMPOLT01";
      TA1REC.TA1LOCAT[1] = "S ";
      XSOPS02();
    end
  end

  OM0HS-FTC-VMPOLH01();


end // end OM0HS-PRC-VMPOLT01

// select dprod.vsyreg01
Function OM0HS-SEL-SY2000()

   /* CANADA 07/18/95*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    OM0HW01.OM0HW-WSY2000-FND-FLAG = "Y";
  else
    if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
      OM0HW01.OM0HW-WSY2000-FND-FLAG = "N";
    else
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
        OM0HW01.OM0HW-WSY2000-FND-FLAG = "N";
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OM0H";
        TA1REC.TA1LOC = "OM0HS-SEL-SY2000";
        OM0HW01.OM0HW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OM0HW01.OM0HW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OM0HW01.OM0HW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OM0HW01.OM0HW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OM0HW01.OM0HW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OM0HW01.OM0HW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OM0HW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OM0HM001";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OM0HS-SEL-SY2000

// SELECT BULK REC FROM VBULKS01
Function OM0HS-SELECT-BULKS()

    /* comments below made prior to 6/21/94*/

  /* Normally there is a row on vbbulk01 for every customer bulk*/
  /* on vorhdr01.  However, at one time, no rows were written to*/
  /* vbbulk01 when a suborder was split in order maintenance.  This*/
  /* has now been fixed, but until all of the incorrect bulks have*/
  /* cleared the system, the following code has been adjusted to*/
  /* skip the attempt to update vbbulk01 if no row was found by*/
  /* select.  When all orders missing vbbulk01 rows have cleared*/
  /* the system, the following call to ta0020 should be re-activated*/
  /* when sqlcode eq 100.*/

    /* comments below made after 6/21/94 - schase*/

  /* On 6/21/94 - the select on dordb.vbbulk01 was replaced with a*/
  /* select on a new table dordb.VBULKS02.  VBULKS02 is replacing*/
  /* vbbulk01.  This change is made to accomodate changes made by*/
  /* the Virtual Airspeed Project.*/


  set VBULKS02 empty;
  set SQLCA empty;

     /* key the batch bulk record*/

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  call "IO7250" ("S ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* 4/96 bulk tables can still be out of sync*/
      OM0HS-INSERT-BULKS(); /* if not found, insert it*/
    else
      set TA1REC empty;
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1DBASE = "DORDB ";
      TA1REC.TA1TBLVU = "VBULKS02";
      TA1REC.TA1TYPE = "DB2"; /* abend type*/
      OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
      OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
      OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
      TA1REC.TA1LOCAT[1] = "S/IO725";
      TA1REC.TA1LOCAT[2] = "0/OM0HS";
      TA1REC.TA1LOCAT[3] = "-SELECT";
      TA1REC.TA1LOCAT[4] = "-BULKS ";
      TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
      if (SQLCA.VAGen_SQLCODE == -911) /* busy data base*/
        converseLib.validationFailed(010); /* data base busy*/
        OM0HW01.OM0HWUEF = "Y"; /* set update error flag to true*/
  /* set to 'y' so that map will converse with error message*/
        TA1REC.TA1FUNC = "POST"; /* post diags*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end
        exit stack; /* return to om0h015 flow*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        TA1REC.TA1FUNC = "RETN"; /* post diags*/
        try
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        end /* abend module*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* master menu*/
        exit program; /* master menu failure*/
      end
    end
  end


end // end OM0HS-SELECT-BULKS

// Update vmpolt01
Function OM0HS-UPD-VMPOLT01()

  set SQLCA empty;

  TA1REC.TA1DBASE = "DPICK";
  TA1REC.TA1TBLVU = "VMPOLT01";
  TA1REC.TA1LOCAT[3] = "OM0HS-UPD-VMPOLT01";
  TA1REC.TA1LOCAT[4] = "VMPOLT01";
  TA1REC.TA1TBLKE = VMPOLT01.VMPOLT01-KEY;

  if (OM0HM001.OM0HMINT == " ")
    OM0HS-DEL-VMPOLT01(); /* delete text record*/
  else
    VMPOLT01.XND-NIKE-DEPT-ID = OP4REC.XNDCD;
    VMPOLT01.OP-TXT = OP4REC.OP4TXT;
    VMPOLT01.OP-TXT-OVRD-FL = "Y";
    VMPOLT01.ZZ-CHNG-DT = OMAREC.OMACDT;
    VMPOLT01.ZZ-CHNG-HHMM = OM0HW01.OM0HWT2;
    OM0HS-UPT-VMPOLT01(); /* update text record*/
  end


end // end OM0HS-UPD-VMPOLT01

// UPDATE BULK REC FROM VBULKS01
Function OM0HS-UPDATE-BULKS()

  set SQLCA empty;

   /* get current date and time for zzdata*/

  VBULKS02.ZZZCHGDT = OMAREC.OMACDT;
  OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
  OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
  OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
  VBULKS02.ZZZCHGTM = OM0HW01.OM0HWT2;

     /* format the two possible changed fields*/

  VBULKS02.OP1CUPO = OM0HM001.OP1CUPO; /* move customer po*/
  VBULKS02.XNXCD = OM0HM001.OM0HMDEP; /* move department id*/

  call "VBULKS02" ("U ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    TA1REC.TA1LOCAT[1] = "U/IO725";
    TA1REC.TA1LOCAT[2] = "0/OM0HS";
    TA1REC.TA1LOCAT[3] = "-UPDATE";
    TA1REC.TA1LOCAT[4] = "-BULKS ";
    move SQLCA to ERRSQLCA withV60Compat;
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    if (SQLCA.VAGen_SQLCODE == -911) /* DATA BASE BUSY*/
      converseLib.validationFailed(010); /* data base busy*/
      OM0HW01.OM0HWUEF = "Y"; /* set update error flag to true*/
  /* set to 'y' so that map will converse with error message*/
      TA1REC.TA1FUNC = "POST"; /* post diags*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end
      exit stack; /* return to om0h015 flow*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
  end


end // end OM0HS-UPDATE-BULKS

// UPDATE PREPACK
Function OM0HS-UPDATE-PREPK()

   /* call pk4420 to get carton type  07/10/97*/
  OM0HS-GET-CTN-TYPE();

   /* THIS STATEMENT GROUP UPDATES THE PREPACK RECORD IF*/
   /* IT EXISTS*/

  OSNREC.XPACD = OP1REC.XPACD;
  OSNREC.XWHCD = OM0HM001.XWHCD;
  OSNREC.ZZZCHGDT = OMAREC.OMACDT;
  OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
  OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
  OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
  OSNREC.ZZZCHGTM = OM0HW01.OM0HWT2;
  call "IO5650" ("U1", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VCSPRP01"; /* table view*/
    TA1REC.TA1TBLKE = OSNREC.OSNKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS-CH"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO5650  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end

end // end OM0HS-UPDATE-PREPK

// UPDATE VBULKS02
Function OM0HS-UPDTE-VBULK()
   /* tcs include begin*/
   /* to update vbulk*/
  set OBFREC empty;
  set SQLCA empty;
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID;
  VBULKS02.XNXCD = OP1REC.XNXCD;
  VBULKS02.XBDCD = OP1REC.XBDCD;
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO;
  VBULKS02.XDVCD = OP1REC.XDVCD;
  VBULKS02.XSOCD = OP1REC.XSOCD;
  VBULKS02.XWHCD = OP1REC.XWHCD;
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT;
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT;
  VBULKS02.SP1ID = OP1REC.SP1ID;
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  OBFREC.OBFTASK = "U ";
  call "VBULKS02" (OBFREC, SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    TA1REC.TA1LOCAT[1] = "U ";
    TA1REC.TA1LOCAT[2] = "VBULKS02";
    TA1REC.TA1LOCAT[3] = "OMOHS-UPDTE-VBULK";
    TA1REC.TA1DBASE = "DORDB  "; /* data base name*/
    TA1REC.TA1TBLVU = "VBULKS02"; /* data base view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    XSOPS02();
  end
   /* tcs include end*/
end // end OM0HS-UPDTE-VBULK

Function OM0HS-UPT-VMPOLT01()

       /* initialize the abend screen*/

  TA1REC.TA1DBASE = "DPICK"; /* data base name*/
  TA1REC.TA1TBLVU = "VMPOLT01"; /* table view*/
  TA1REC.TA1LOCAT[1] = "U";
  TA1REC.TA1LOCAT[3] = "OM0HS-UPT-VMPOLT01";
  TA1REC.TA1LOCAT[4] = "VMPOLT01  ";

  call "VMPOLT01" ("U ", SQLCA, VMPOLT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence - record rewritten*/
  else
    XSOPS02(); /* abend routine*/
  end


end // end OM0HS-UPT-VMPOLT01

// Validate Change Reason
Function OM0HS-VALIDATE-RSN()

       /* New Statement Group as of 7/22/97 modification.*/

       /* ****************************************************/
       /* * This statement group validates the Change Reason*/
       /* ****************************************************/

  if (OM0HM001.OM0HMXOM == " ")
     /* Change reason is required  SLARSE*/
    converseLib.validationFailed(399);
    OMAREC.OMAERR = "Y";
    set OM0HM001.OM0HMXOM cursor;
  else
    if (OM0HM001.OM0HMXOM in XOMTBL.XOMCD        /* valid maint reason*/
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active*/
     && XOMTBL.XOMCANCF[sysVar.arrayIndex] != "D") /* not a cancel*/
      OM0HM001.OM0HMABR = XOMTBL.XOMABRV[sysVar.arrayIndex];
      OMWREC.XOMCD = OM0HM001.OM0HMXOM;
    else
      converseLib.validationFailed(395); /* invalid change reason*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMXOM cursor, modified, bold;
    end
  end

end // end OM0HS-VALIDATE-RSN

// clear screen and work records
Function OM0HS01()



       /* *******************************************************/
       /* * this statement group clears the screen and the     **/
       /* * working storage records                            **/
       /* *******************************************************/


  set OM0HM001 initial;


       /* set working storage records empty*/

  set OMWREC empty;
  set OMAREC empty;
  set OM0HW01 empty;
  set OEAREC empty;



   /* ************************************************************/
end // end OM0HS01

// CHECK FOR PREPACK
Function OM0HS02()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        return;
      end
    else
      return;
    end
  else
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

   /* MOVE OP1REC.XWHCD TO OSNREC.XWHCD;              /* WAREHOUSE*/
  OSNREC.XWHCD = OM0HW01.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* move than one record found is ok*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(672); /* prepack db busy try again*/
        OMAREC.OMAERR = "Y";
        OMWREC.OMWPKCHF = "Y"; /* reset pack change flag*/
      else
        set SQLCA empty;
        TA1REC.TA1TYPE = "DB2     ";
        TA1REC.TA1FUNC = "RETN";
        OMAREC.OMAERR = "Y";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0HS02 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0HW01.OM0HWDON = "        ";
        OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
        OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
        OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
        OM0HW01.OM0HWTK1 = OP1REC.XWHCD;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end

end // end OM0HS02

// DELETE PREPACK RECORDS
Function OM0HS03()

   /* THIS STATEMENT GROUP will delete all prepack records*/
   /* when the order is cancelled.*/


   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("DS", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2     ";
    TA1REC.TA1FUNC = "RETN    ";
    TA1REC.TA1LOCAT[1] = "DS      ";
    TA1REC.TA1LOCAT[2] = "OM0HS03 ";
    TA1REC.TA1LOCAT[3] = "IO5650  ";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VCSPRP01";
    OM0HW01.OM0HWDON = " ";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    OM0HW01.OM0HWTK1 = OP1REC.XWHCD;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    move SQLCA to ERRSQLCA withV60Compat;
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

end // end OM0HS03

// MOVE ORDER HDR DATA TO SCREEN
Function OM0HS05()


     /* move order header data to screen*/

  OM0HM001.OM0HMONM = OMWREC.OMWORD; /* ; formatted order number*/
  OM0HM001.OM0HMCCO = OP1REC.KUCCOID; /* ; company id*/
  OM0HM001.OM0HMSTR = OP1REC.KUMSTRID; /* ; store id*/
  OM0HM001.OM0HMDEP = OP1REC.XNXCD; /* ; nike dept*/
  OM0HM001.SM1AGYID = OP1REC.SM1AGYID; /* ; agency name*/
  OM0HM001.OM0HMREP = OP1REC.SM4REPID; /* ; sales rep id*/
  OM0HM001.OP1CUPO = OP1REC.OP1CUPO; /* ; po number*/
  OM0HM001.XOBCD = OP1REC.XOBCD; /* ; order type code*/
  OM0HM001.XOCCD = OP1REC.XOCCD; /* ; order class code*/
  OM0HM001.XOTCD = OP1REC.XOTCD; /* ; system order type*/
  OM0HM001.XGPCD = OP1REC.XGPCD; /* ; gpc*/
  OM0HM001.OP1CMPNB = OP1REC.OP1CMPNB; /* ; comp number*/
  OM0HM001.OM0HMVAL = OP1REC.OP1OVALU; /* ; order value*/
  OM0HM001.OM0HMUNT = OP1REC.OP1OTUNT; /* ; order total units*/
  OM0HM001.OP1ORDBY = OP1REC.OP1ORDBY; /* ; order by name*/
  OM0HM001.XOSCD = OP1REC.XOSCD; /* ; order status*/
  OM0HM001.XCSCD = OP1REC.XCSCD; /* ; order credit status*/
  OM0HM001.OP1BOFL = OP1REC.OP1BOFL; /* ; back order flag*/
  OM0HM001.XDSCD = OP1REC.XDSCD; /* ; direct ship code*/
  OM0HW01.OM0HWDPC = OP1REC.OP-DIRSHP-DSCT-PCT; /* ds discount pct*/

   /* CANADA 07/19/95*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA this is a Canadian order*/
    OM0HM001.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency code*/
  end

  OM0HM001.OM0HWDPC = OM0HW01.OM0HWDPC;
  if (OM0HM001.XDSCD == " "
   && OM0HM001.OM0HWDPC == "0")
    OM0HM001.OM0HWDPC = " ";
  end
  OM0HM001.XBDCD = OP1REC.XBDCD; /* ; bulk order code*/
  OM0HM001.XWHCD = OP1REC.XWHCD; /* ; warehouse code*/
  OM0HM001.OB1XREFN = OP1REC.OB1XREFN; /* ; repnet-file-nbr*/


  /* BL#3690 Change begin -- Rshaik  07/07/99.*/
  /* Comented as per Scott/Diane request*/
  /* This Function is no longer required for business.*/
  /* OM0HS-CALL-OC0G;          /* determine if auto confirm should be*/
  /* /* displayed*/
  /*  */
  set OM0HM001.OM0HM-AUTO-CNFM skip, invisible;
  set OM0HM001.OP-SND-CNFM-FL skip, invisible;
  /*  */
  /* BL#3690 Change end*/

  OM0HS0A(); /* ; set bulk/draw flag*/


  OM0HM001.SP1ID = OP1REC.SP1ID; /* ; sales program id*/
  OM0HM001.OM0HMSQD = OP1REC.SP6MDISC;


  if (OP1REC.OP1OMCMF == "Y") /* if there are change comments*/
    set OM0HM001.OM0HMCMI initialAttributes; /* display them*/
    set OM0HM001.OM0HMCMT initialAttributes; /* else*/
  else /* darken & skip*/
    set OM0HM001.OM0HMCMT skip, invisible;
    set OM0HM001.OM0HMCMI skip, invisible;
  end

end // end OM0HS05

// edit 1-whse model
Function OM0HS06()



       /* ********************************************************/
       /* * This statement group checks a 1-whse model to find  **/
       /* * how many products are on order. If there is only   **/
       /* * 1 product, unprotect the whse. If there is more     **/
       /* * than 1 product protect the whse (changes will have  **/
       /* * to made at the product level).                      **/
       /* ********************************************************/


       /* select set of line items for the order number*/

  OP2REC.OP2KEY = OP1REC.OP1KEY;
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* get all prds on sb-order*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if okay*/
    OMAREC.OMASUB2 = 1;
    while (OMAREC.OMASUB2 < 3 /* browse first 2 products*/
     && SQLCA.VAGen_SQLCODE == 0)
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* only 1 product*/
      if (OP1REC.XOSCD == "OP" /* order status open*/
       && OMAREC.OMASUB2 == 3)
        set OM0HM001.XWHCD initialAttributes;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* greater than 1 product*/
        set OM0HM001.XWHCD protect; /* protect field*/
      else
        TA1REC.TA1DBASE = "DORDER"; /* data base view*/
        TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
        OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
        OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
        OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* key value*/
        TA1REC.TA1LOCAT[3] = "OM0HS06"; /* statement group name*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* io mod*/
        XSOPS02();
      end
    end
  else
    TA1REC.TA1DBASE = "DORDER"; /* data base view*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS06"; /* statement group name*/
    TA1REC.TA1LOCAT[4] = "IO0440"; /* io mod*/
    XSOPS02();
  end


  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if error found*/
    TA1REC.TA1DBASE = "DORDER"; /* data base view*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS05"; /* statement group name*/
    TA1REC.TA1LOCAT[4] = "IO0440"; /* io mod*/
    XSOPS02();
  end


  if (OP1REC.XDVCD == "02" /* if nike international*/
   && OP1REC.XWHCD == "15") /* and whse cd is '15'*/
    set OM0HM001.XWHCD protect; /* protect the whse field*/
  end

   /* *************************************************************/
end // end OM0HS06

// protect sales agency & rep
Function OM0HS07()



       /* ********************************************************/
       /* * this statement group protects the sales agency and  **/
       /* * rep when any of the following are true:             **/
       /* *                                                     **/
       /* *    - order is cancelled                             **/
       /* *    - order is shipped                               **/
       /* *    - order has any product shipped                  **/
       /* *    - cust service logon,                            **/
       /* *      and order is 15 or more days old               **/
       /* *                                                     **/
       /* * if none of the above are true, set fields normal    **/
       /* ********************************************************/


  set OM0HM001.SM1AGYID normal;
  set OM0HM001.OM0HMREP normal;

  if (OP1REC.XOSCD == "XL" /* cancelled order*/
   || OP1REC.XOSCD == "SH" /* shipped order*/
   || OP1REC.OP1SHPQF == "Y") /* units are shipped*/
    set OM0HM001.SM1AGYID protect;
    set OM0HM001.OM0HMREP protect;
  else
    sysVar.arrayIndex = 1;
    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID       
     && (YOSTBL.YOSSCTYI[sysVar.arrayIndex] == "S" /* if cust service logon*/
     /* BBAHUL Begin changes 11/02/99*/
     || YOSTBL.YOSSCTYI[sysVar.arrayIndex] == "P")) /* if special promo logon*/
                               /* BBAHUL End changes 11/02/99*/

       /* calculate days between order entry date and today's date*/
      set TA2REC empty;
      TA2REC.TA2DBDFN = OP1REC.ZZZSDT; /* order entered date*/
      TA2REC.TA2DBDTN = OMAREC.OMACDT; /* current date*/
      TA2REC.TA2DTOPT = "DAYSDIFF"; /* num of days between dates*/
      TA2REC.TA2GRTYP = "G"; /* ccyymmdd format*/
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD != 0) /* bad return code*/
        set TA1REC empty;
        TA1REC.TA1LOCAT[3] = "OM0HS07";
        TA1REC.TA1TBLKE = "OP1ENTDT OR CURR DATE IS INVALID";
        XSOPS02(); /* abend routine*/
      end

      if (TA2REC.TA2DBDDN > 14) /* dates are more than 13 days apart*/
        set OM0HM001.SM1AGYID protect;
        set OM0HM001.OM0HMREP protect;
      end
    end
  end



end // end OM0HS07

// DETERMINE FIELD PROTECTION
Function OM0HS09()

  set OM0HM001.OP1CUPO normal;
  set OM0HM001.OM0HMSBD normal;
  set OM0HM001.OM0HMSAD normal;
  set OM0HM001.OM0HMCLD normal;
  set OM0HM001.OP1ORDBY normal;
  set OM0HM001.OM0HMRCD normal;
  set OM0HM001.OM0HMTBN normal;
  set OM0HM001.OP1BOFL normal;
  set OM0HM001.XNDCD normal;
  set OM0HM001.OM0HMINT normal;
  set OM0HM001.OM0HMLBL normal;
  set OM0HM001.XOBCD normal;
  set OM0HM001.XOCCD normal;
  set OM0HM001.OM0HMSTR normal;
  set OM0HM001.OM0HMDEP normal;
  set OM0HM001.OP1CMPNB normal;


  if (OP1REC.OP1SHPQF == "Y" /* if units shipped*/
   || OP1REC.OP1ALCQF == "Y") /* or units allocated*/
    set OM0HM001.OM0HMSTR protect; /* protect customer store*/
    set OM0HM001.OM0HMDEP protect; /* protect department*/
  end


  OM0HS07(); /* determine sales agency protection*/

  if (OCGREC.OCG-OC-ELIG-FOR-CNFM-FL == "N") /* cnfm fields not displayed*/
    set OM0HM001.OM0HM-AUTO-CNFM skip, invisible;
    set OM0HM001.OP-SND-CNFM-FL skip, invisible;
  else /* cnfm fields displayed*/
    set OM0HM001.OM0HM-AUTO-CNFM initialAttributes; /* display the title*/
    if (OP1REC.XOSCD == "SH" /* can't enter the field if the*/
     || OP1REC.XOSCD == "XL") /* order shipped or cancelled*/
      set OM0HM001.OP-SND-CNFM-FL protect;
    else
      set OM0HM001.OP-SND-CNFM-FL initialAttributes; /* otherwise enterable*/
    end
  end

  OM0HS0B(); /* set xbdcd attributes*/


  if (OM0HW01.OM0HWBDF == "D" /* if draw order*/
   || OM0HW01.OM0HWBDF == "R") /* or regular order*/
    if (OP1REC.OP1SHPQF == "Y") /* and units were shipped*/
      set OM0HM001.XOBCD protect; /* protect order type*/
      if (OP1REC.XDVCD == "02")
        if (OP1REC.XOCCD == "TR" /* transmitted nil airborne order*/
         || OP1REC.XOCCD == "AS" /* airborne order ready to transmit*/
         || OP1REC.XOCCD == "AU") /* airborne order re-transmit*/
         /* NEXT SENTENCE*/
        else
          set OM0HM001.XOCCD protect; /* protect order class*/
        end
      else
        set OM0HM001.XOCCD protect; /* protect order class*/
      end
    end
  end


  if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* if authorized user*/
   && YOSTBL.YOSXDSFL[sysVar.arrayIndex] == "Y"
   && OP1REC.XOSCD == "OP")                /* and order open - 11/11/86*/
    set OM0HM001.XDSCD normal; /* set direct ship code*/
    set OM0HM001.OM0HWDPC normal; /* set direct ship code*/
  else /* normal*/
    set OM0HM001.XDSCD protect; /* else protect*/
    set OM0HM001.OM0HWDPC protect; /* else protect*/
  end


  set OM0HM001.SP1ID normal;

  if (OP1REC.XDVCD == "02" /* can't change sales pgm if NIL*/
   || OP1REC.XOSCD == "XL" /* or order cancelled,*/
   || OP1REC.XOSCD == "SH" /* or shipped,*/
   || OP1REC.XBDCD == "R") /* or a rebook bulk*/
    set OM0HM001.SP1ID protect; /* can't change sales program*/
  end

  set OM0HM001.OM0HMSQD protect; /* protect volume discount %*/

  if (OP1REC.XOSCD != "OP") /* if order is not open*/
    set OM0HM001.OP1CMPNB protect; /* protect comp nbr*/
  end /* 11/27/89*/


  if (OP1REC.XOSCD == "AL" /* if order is allocated or*/
   || OP1REC.XOSCD == "PA") /* partially allocated*/
    set OM0HM001.OM0HMSBD protect; /* protect don't ship before date*/
  end /* 03/25/91 schen*/


  if (OP1REC.XSOCD == "77") /* if AR OMS order (auto-replenishment)*/
    set OM0HM001.OP1CUPO protect; /* protect customer purchase order*/
  end


  if (OP1REC.XDVCD == "02") /* if nike international*/
    set OM0HM001.XOBCD protect; /* protect base order type*/
    set OM0HM001.SP1ID protect; /* protect sales program*/
  end /* 11/28/89*/


  OM0HS0C(); /* warehouse, need date protection*/

       /* if international order and order class = 'in'*/
       /* protect direct ship, warehouse and order class codes*/

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "IN")
    set OM0HM001.XDSCD protect;
    set OM0HM001.XWHCD protect;
    set OM0HM001.XOCCD protect;
    return;
  end

       /* if international order and order class = 'tr', 'as', 'au'*/
       /* protect direct ship, warehouse; if 'tr' protect store and dept*/

  if (OP1REC.XDVCD == "02")
    if (OP1REC.XOCCD == "TR" /* transmitted nil airborne order*/
     || OP1REC.XOCCD == "AS" /* airborne order ready to transmit*/
     || OP1REC.XOCCD == "AU") /* airborne order re-transmit*/
      set OM0HM001.XDSCD protect; /* direct ship*/
      set OM0HM001.XWHCD protect; /* whse*/
      return;
    end
  end

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "TR") /* transmitted nil airborne order*/
    set OM0HM001.OM0HMSTR protect; /* customer store*/
    set OM0HM001.OM0HMDEP protect; /* department*/
  end


  OM0HS06(); /* determine how many products on ord*/
end // end OM0HS09

// set w/s bulk-draw flag
Function OM0HS0A()


  OM0HW01.OM0HWBDF = " "; /* ; reset bulk/draw flag*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y" /* ; draw order flag = 'yes'*/
     && XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "N") /* ; bulk order flag = 'no '*/
      OM0HW01.OM0HWBDF = "D"; /* ; bulk/draw flag = 'draw'*/
    else
      if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* ; bulk order flag = 'yes'*/
       && XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "N") /* ; draw order flag = 'no '*/
        OM0HW01.OM0HWBDF = "B"; /* ; bulk/draw flag = 'bulk'*/
      else
        if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* ; bulk order flag = 'yes'*/
         && XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y" /* ; draw order flag = 'yes'*/
         && OP1REC.OP1NDRAW > 0)                      /* ; draws have been made*/
          OM0HW01.OM0HWBDF = "B"; /* ; bulk/draw flag = 'bulk'*/
        else
          if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* ; bulk order flag = 'yes'*/
           && XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y" /* draw order flag = 'yes'*/
           && OP1REC.OP1NDRAW == 0)                     /* ; no draws made*/
            OM0HW01.OM0HWBDF = "D"; /* ; bulk/draw flag = 'draw'*/
          else
            OM0HW01.OM0HWBDF = "R"; /* ; regular order*/
          end
        end
      end
    end
  end

  if (OM0HW01.OM0HWBDF == " ") /* ; regular order*/
    set OM0HM001.OM0HMBKL skip, invisible; /* ; darken map field*/
    set OM0HM001.OM0HMBKV skip, invisible; /* ; darken map field*/
    OM0HM001.OM0HMBKL = " ";
    OM0HM001.OM0HMBKV = " ";
  else
    set OM0HM001.OM0HMBKL initialAttributes; /* ; display map field*/
    set OM0HM001.OM0HMBKV initialAttributes; /* ; display map field*/

    if (OM0HW01.OM0HWBDF == "B") /* ; bulk order*/
      OM0HM001.OM0HMBKL = "NBR OF DRAWS>";
      OM0HM001.OM0HMBKV = OP1REC.OP1NDRAW;
    else
      OM0HM001.OM0HMBKL = "BULK ORDER ID>";
      OM0HM001.OM0HMBKV = OP1REC.OP1BLKID;
    end
  end


   /* *************************************************************/
end // end OM0HS0A

// set xbdcd attributes
Function OM0HS0B()


      /* ** if it is a bulk order, this code can be changed*/
      /* **    only if no draws have been made, no units are*/
      /* **    reserved and it is not a blank bulk (xbdcd = 'b').*/

      /* ** if it is a draw order, but not from a blank bulk*/
      /* **    bulk/draw order code cannot be changed.*/

      /* ** if it is a draw order from a blank bulk, and units*/
      /* **    are open, reserved, or partial reserved,*/
      /* **    bulk/draw order code can be changed*/
      /* **    from '8' to 'f'; or from 'f' to '8'*/

      /* ** if it is a regular order, it may be changed to a bulk*/
      /* **    only if units are open, reserved, or*/
      /* **    or partial reserved.*/
      /* ** added 4/8/87*/


  set OM0HM001.XBDCD normal; /* ; unprotect field*/

  if (OM0HW01.OM0HWBDF == "B") /* ; bulk order*/
    if (OP1REC.OP1NDRAW > 0) /* ; draws have been made*/
      set OM0HM001.XBDCD protect; /* ; protect field*/
    else
      if (OP1REC.XOSCD != "OP" /* ; not open status*/
       && OP1REC.XOSCD != "RS" /* ; not reserved*/
       && OP1REC.XOSCD != "PR") /* ; not partial reserved*/
        set OM0HM001.XBDCD protect; /* protect field*/
      end
    end
  end


  if (OM0HW01.OM0HWBDF == "D") /* ; draw order*/
    if (OP1REC.XBDCD != "8" /* ; not finish draw frm blank bulk*/
     && OP1REC.XBDCD != "F") /* ; not finish bulk frm blank bulk*/
      set OM0HM001.XBDCD protect; /* ; protect field*/
    else
      if (OP1REC.XOSCD != "OP" /* ; status not open*/
       && OP1REC.XOSCD != "RS" /* ; status not reserved*/
       && OP1REC.XOSCD != "PR") /* ; status not partial reserved*/
        set OM0HM001.XBDCD protect; /* protect field*/
      end
    end
  end

  if (OM0HW01.OM0HWBDF == " ") /* ; regular order*/
    if (OP1REC.XOSCD != "OP" /* ; status not open*/
     && OP1REC.XOSCD != "RS" /* ; status not reserved*/
     && OP1REC.XOSCD != "PR") /* ; status not partial reserved*/
      set OM0HM001.XBDCD protect; /* ; protect field*/
    end
  end

    /* 04/18/91 jloyer - don't allow xbdcd changes on blank bulks*/

  if (OP1REC.XBDCD == "B") /* if a blank bulk order*/
    set OM0HM001.XBDCD protect; /* don't allow xbdcd change*/
  end
   /* *************************************************************/
end // end OM0HS0B

// PROTECT WHCD,NEED DATE
Function OM0HS0C()

  set OM0HM001.XWHCD initialAttributes;
  set OM0HM001.OM0HMCND initialAttributes;

  if (OP1REC.XOSCD != "OP") /* if order status is not open*/
    set OM0HM001.XWHCD protect; /* protect warehouse code*/
    set OM0HM001.OM0HMCND protect; /* protect need date*/
    return;
  end


  if (OM0HW01.OM0HWBDF == "D") /* ; if draw order*/
    set OM0HM001.OM0HMCND protect; /* ; protect need date*/
    set OM0HM001.XWHCD protect; /* ; protect warehouse code*/
    OM0HW01.OM0HWBNF = "N"; /* ; set not found flag*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* setup key*/
    OM0HSBK(); /* ; read bulk order header*/
    OP1REC.OP1GROUP = OMWREC.OP1GROUP;
    return;
  end


  if (OP1REC.XDVCD == "02") /* if nike international*/
    set OM0HM001.XWHCD protect; /* protect warehouse code*/
    set OM0HM001.OM0HMCND protect; /* protect need date*/
    return;
  end


  if (OP1REC.OP1NDRAW > 0) /* if draws were made*/
    set OM0HM001.XWHCD protect; /* protect warehouse code*/
    set OM0HM001.OM0HMCND protect; /* protect need date*/
    return;
  end


  OM0HS0D(); /* if order displays availability*/
  if (OM0HW01.OM0HWPFL == "Y") /* and protect flag = 'y'*/
    set OM0HM001.OM0HMCND protect; /* protect need date*/
    set OM0HM001.XWHCD protect; /* protect warehouse code*/
    return;
  end


  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD) /* ; if futures order and*/
    if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* need date 30 days past*/
      OM0HSP1(); /* ; production deadline,*/
    end /* ; protect need date*/
  end

end // end OM0HS0C

// PROTECT ND,WH IF DISPLAY AVAIL
Function OM0HS0D()

       /* protect the warehouse and need date if this order*/
       /* displays availability. Taken from OB1210.*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  TA2REC.TA2DYAOD = 030;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0) /* post only, do not abend*/
    set TA1REC empty;
    TA1REC.TA1LOCAT[3] = "OM0HS0D";
    TA1REC.TA1TBLKE = "CURR DATE + 30 INVALID";
    TA1REC.TA1TYPE = "DB2"; /* abend type*/
    TA1REC.TA1FUNC = "POST"; /* abend func*/
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  else
    OM0HW01.OM0HWC30 = TA2REC.TA2GRGGN;
  end

   /* *************************************************************/
                      /* CHECK AVAILABILITY*/
   /* *************************************************************/

  OM0HW01.OM0HWPFL = "N";

  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD) /* ; if valid order type*/
    OM0HW01.OM0HWSB1 = sysVar.arrayIndex; /* setup subscript*/
  else /* ; else*/
    return; /* ; return*/
  end

  sysVar.arrayIndex = 1;
  if (OP1REC.XDSCD in XDSTBL.XDSCD) /* ; if direct ship code valid*/
    OM0HW01.OM0HWSB2 = sysVar.arrayIndex; /* setup subscript*/
  else /* ; else*/
    return; /* ; return*/
  end
   /* ------------------------------------------------------------*/
       /* if order type and direct ship display availability*/
   /* ------------------------------------------------------------*/
  if (XOTTBL.XOTDSAVL[OM0HWSB1] == "Y" /* if disp avail flags are yes*/
   && XDSTBL.XDSAVDFL[OM0HWSB2] == "Y")
    /* ----------------------------------------------------------*/
                 /* if stockpile as futures or at-once*/
    /* ----------------------------------------------------------*/
    if (XOTTBL.XOTAVDFL[OM0HWSB1] == "1" /* futures*/
     || XOTTBL.XOTAVDFL[OM0HWSB1] == "3") /* at-once*/
      OM0HW01.OM0HWPFL = "Y"; /* ; set protect flag*/
      return;
    else
      /* --------------------------------------------------------*/
                    /* if stockpile as advance prop*/
      /* --------------------------------------------------------*/
      if (XOTTBL.XOTAVDFL[OM0HWSB1] == "2")
        /* ------------------------------------------------------*/
                       /* if at-once order type*/
        /* ------------------------------------------------------*/
        if (XOTTBL.XOTATONF[OM0HWSB1] == "Y")
          OM0HW01.OM0HWPFL = "Y"; /* set protect flag*/
          return;
        else
          /* ----------------------------------------------------*/
                          /* if prop order type*/
          /* ----------------------------------------------------*/
          if (XOTTBL.XOTPROPF[OM0HWSB1] == "Y")
            /* --------------------------------------------------*/
                             /* if not footwear*/
            /* --------------------------------------------------*/
            if (OP1REC.XGPCD != 02)
              OM0HW01.OM0HWPFL = "Y"; /* set protect flag*/
              return;
            else
              /* ------------------------------------------------*/
                      /* if side-1, i.e., or golf product*/
              /* ------------------------------------------------*/
              if (OP1REC.XBCCD == "05"
               || OP1REC.XBCCD == "07"
               || OP1REC.XOCCD == "GF")
                OM0HW01.OM0HWPFL = "Y"; /* set protect flag*/
                return;
              else
                /* ----------------------------------------------*/
                     /* if need date within the next 30 days*/
                /* ----------------------------------------------*/
                if (OP1REC.OP1CUNDT <= OM0HW01.OM0HWC30)
                  OM0HW01.OM0HWPFL = "Y"; /* set protect flag*/
                end
              end
            end
          end
        end
      end
    end
  end

end // end OM0HS0D

// edit entered data
Function OM0HS10()

       /* OCD Changes:  Search for SLARSE*/

       /* *******************************************************/
       /* * this statement group edits the entered fields and  **/
       /* * updates the op1rec with valid data                 **/
       /* *******************************************************/


  if (OM0HM001.XOBCD is modified)
    OM0HSB2(); /* edit base order type*/
  end

  if (OMAREC.OMAERR == "Y")
    return; /* don't continue if errors--reconverse*/
  end

       /* edit special instruction and special label*/

  if (OM0HM001.OM0HMLBL is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HW01.OM0HWLMF = "Y"; /* set label modified flag*/
    OM0HW01.OM0HWPCH = "Y"; /* set pick change  flag*/
  end


  if (OM0HM001.OM0HMINT is modified
   || OM0HM001.XNDCD is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/
    OM0HS25(); /* edit nike department*/
  end

   /* check msr rule of direct ship/blank warehouse 04/13/98*/

  OM0HW01.OM0HW-UPDT-WHSE-XDSCD = "Y"; /* init flag*/

  if (OM0HM001.XDSCD is modified
   || OM0HM001.XWHCD is modified)
    OM0HS-CHK-DIR-WHSE();
  end

   /* edit direct ship code only if the above rule is not violated 04/13/98*/

  if (OM0HW-UPDT-WHSE-XDSCD == "Y")

       /* edit direct ship code*/

    OM0HW01.OM0HW-CRED-CHK-DIR-SHP = "N"; /* init flag*/

    if (OM0HM001.XDSCD is modified
     || OM0HM001.XWHCD is modified)
      OM0HW01.OM0HWUPF = "Y";
      if (OM0HM001.XDSCD is modified)
        OM0HW01.OM0HW-CRED-CHK-DIR-SHP = "Y"; /* set flag on*/
        if (OP1REC.XDSCD == "1") /* was a factory direct ship*/
          OM0HW01.OM0HW-CRED-REASON-CD = 7;
        else
          if (OM0HM001.XDSCD == "1") /* now is a factory direct ship*/
            OM0HW01.OM0HW-CRED-REASON-CD = 8;
          end
        end
      end
      OM0HS35(); /* edit direct ship code*/
    end
    if (OM0HM001.OM0HWDPC is modified)
      OM0HW01.OM0HWUPF = "Y";
      OM0HS35(); /* edit direct ship code*/
    end

  end

       /* edit backordered flag*/

  if (OM0HM001.OP1BOFL is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS36(); /* edit bo flag*/
  end


       /* edit callout date*/

  if (OM0HM001.OM0HMCLD is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS37(); /* edit callout date*/
  end


       /* edit bulk order code*/

  if (OM0HM001.XBDCD is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS38(); /* edit bulk order code*/
  end


       /* edit taken by rep*/

  if (OM0HM001.OM0HMTBN is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS39(); /* edit taken by rep*/
  end


       /* update ordered by*/

  if (OM0HM001.OP1ORDBY is modified)
    OM0HW01.OM0HWUPF = "Y";
    OP1REC.OP1ORDBY = OM0HM001.OP1ORDBY;
  end


       /* edit date received*/

  if (OM0HM001.OM0HMRCD is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS40(); /* edit date received*/
  end


   /* flags set for OCD use in edits..not hitting the field*/
   /* modified check if error in a previous edit.  DSMIT0*/

  if (OM0HM001.OM0HMCND is modified) /* need date*/
    OM0HW-ND-CHNG-FL = "Y";
  end

  if (OM0HM001.OM0HMSAD is modified) /* dnsa date*/
    OM0HW-DNSA-CHNG-FL = "Y";
  end

  if (OM0HM001.OM0HMSBD is modified) /* dnsb date*/
    OM0HW-DNSB-CHNG-FL = "Y";
  end

  if (OM0HM001.OP1CUPO is modified) /* cust po*/
    OM0HW-PO-CHNG-FL = "Y";
  end

       /* edit sales program*/

  if (OM0HM001.SP1ID is modified)
  /* OR OM0HW01.OM0HW-SP1ID-MODIFIED-FL EQ 'Y'; /* or sales pgm changed*/
    OM0HW01.OM0HWUPF = "Y";
    OM0HS43(); /* edit sales program*/
    if (OMAREC.OMAERR == "N") /* slarse4 begin*/
      OM0HS-VALIDATE-RSN();
      if (OMAREC.OMAERR == "Y")
  /* MOVE 'Y' TO OM0HW01.OM0HW-SP1ID-MODIFIED-FL;*/
        set OM0HM001.SP1ID modified;
        exit stack;
      end
    end /* slarse end*/
  end


       /* edit order class*/

  if (OM0HM001.XOCCD is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS28();
  end


   /* Edit Need Date.  Need to capture Change Reason for OCD.  SLARSE2*/

  if (OM0HM001.OM0HMCND is modified
   || OM0HW-ND-CHNG-FL == "Y") /* slarse begin*/
    OM0HW01.OM0HWUPF = "Y";
    OM0HW01.OM0HWNTC = "Y";
    OM0HS18(); /* edit need date*/
    if (OMAREC.OMAERR == "N")
      OM0HS-VALIDATE-RSN();
      if (OMAREC.OMAERR == "Y")
        OM0HW-ND-CHNG-FL = "Y";
        exit stack;
      end
      OM0HW-ND-CHNG-FL = "N";
      OM0HS-MAX-VSOHCR01(); /* Clear the record, fill key, get max*/
                                   /* seq*/
      VSOHCR01.OP1CUNDT = OP1REC.OP1CUNDT;
      OM0HS-ADD-VSOHCR01(); /* Write the Header Change    slarse end*/
    end
  end


       /* edit dont ship before date*/
       /* edit dont ship after date*/

   /* Need to capture Change Reason for OCD.                 SLARSE1*/

  if (OP1REC.XBCCD == "08" &&                       /* cole-haan order requires don't*/
  (OM0HM001.OM0HMSBD == " "                         /* ship before date*/
   || OM0HM001.OM0HMSBD == "MM-DD-YY"               
   || OM0HM001.OM0HMSBD == "MMDDYY  "               
   || OM0HM001.OM0HMSBD == "00000000"))            
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(521);
    set OM0HM001.OM0HMSBD cursor, modified, bold;
  else
    if (OM0HM001.XWHCD == "51" &&                       /* whse 51 orders require*/
    (OM0HM001.OM0HMSBD == " "                           /* dnsb date. DSMIT0*/
     || OM0HM001.OM0HMSBD == "MM-DD-YY"                 
     || OM0HM001.OM0HMSBD == "MMDDYY  "                 
     || OM0HM001.OM0HMSBD == "00000000"))              
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(958);
      set OM0HM001.OM0HMSBD cursor, modified, bold;
    else
      if (OM0HM001.OM0HMSAD is modified
       || OM0HM001.OM0HMSBD is modified
       || OM0HW-DNSA-CHNG-FL == "Y"
       || OM0HW-DNSB-CHNG-FL == "Y") /* slarse*/
        OM0HW01.OM0HWUPF = "Y";
        OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/
        OM0HS42();
        if (OMAREC.OMAERR == "Y") /* slarse begin*/
          if (OM0HM001.OM0HMSAD is modified)
            OM0HW-DNSA-CHNG-FL = "Y";
          end
          if (OM0HM001.OM0HMSBD is modified)
            OM0HW-DNSB-CHNG-FL = "Y";
          end
          exit stack;
        end
        if (OMAREC.OMAERR == "N")
          OM0HS-VALIDATE-RSN();
          if (OMAREC.OMAERR == "Y")
            if (OM0HM001.OM0HMSAD is modified)
              OM0HW-DNSA-CHNG-FL = "Y";
            end
            if (OM0HM001.OM0HMSBD is modified)
              OM0HW-DNSB-CHNG-FL = "Y";
            end
            exit stack;
          end
          if (OM0HM001.OM0HMSBD is modified
           || OM0HW-DNSB-CHNG-FL == "Y")
            OM0HS-MAX-VSOHCR01(); /* Clear the record, fill key, get max*/
                                   /* seq*/
            VSOHCR01.OP1DSBDT = OP1REC.OP1DSBDT;
            OM0HS-ADD-VSOHCR01(); /* Write the Header Change*/
          end
          if (OM0HM001.OM0HMSAD is modified
           || OM0HW-DNSA-CHNG-FL == "Y")
            OM0HS-MAX-VSOHCR01(); /* Clear the record, fill key, get max*/
                                   /* seq*/
            VSOHCR01.OP1DSADT = OP1REC.OP1DSADT;
            OM0HS-ADD-VSOHCR01(); /* Write the Header Change*/
          end
          OM0HW-DNSA-CHNG-FL = "N";
          OM0HW-DNSB-CHNG-FL = "N"; /* slarse end*/
        end
      end
    end
  end


       /* add picking maintenance record if allocation*/
      /* manager changed don't ship before date with*/
       /* order status 'al' or 'pa'*/


  if (OM0HW01.OM0HWDER != "Y") /* no date error*/
    if (OM0HM001.OM0HMSBD is modified) /* dont ship before date changed*/
      OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/
      set OM0HM001.OM0HMSBD initialAttributes;
      if (OP1REC.XOSCD == "AL" /* order allocated*/
       || OP1REC.XOSCD == "PA") /* partially allocated*/
        if (COMMAREA.CACHGFL == "Y"
         && COMMAREA.CACLVL[1] == "Y") /* is alloc. manager*/
          OM0HS29();
        end
      end
    end
  end


       /* relation edits - order type vs sales program, order*/
       /* class, need date, bulk order code, direct ship --*/
       /* these edits take place if no errors were encountered*/

  if (OMAREC.OMAERR != "Y")
    OM0HS66();
  end

   /* edit warehouse only if  OM0HW-UPDT-WHSE-XDSCD = 'Y'; 04/13/98*/

  if (OM0HW-UPDT-WHSE-XDSCD == "Y")

       /* edit warehouse code*/

    if (OM0HM001.XWHCD is modified)
      OM0HW01.OM0HWUPF = "Y";
      OM0HS44(); /* edit warehouse*/
    end

  end

       /* edit sales rep/agency*/

  if (OM0HM001.SM1AGYID is modified
   || OM0HM001.OM0HMREP is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HSSN(); /* edit sales rep/agency*/
  end


  if (OM0HM001.OP-SND-CNFM-FL is modified)
    OM0HW01.OM0HWUPF = "Y";
    OM0HS-EDT-SND-CNFM(); /* edit send confirm flag*/
  end


       /* Edit comp number*/

  if (OM0HM001.OP1CMPNB is modified)
    OM0HW01.OM0HWUPF = "Y"; /* set update flag to yes*/
    OM0HS24();
  else
    if (OM0HM001.OP1CMPNB == 0) /* Must see if comp number is required.*/
      OM0HS24();
    end
  end

   /* init update bbulk flag to 'n'*/
  OM0HW01.OM0HW-UPD-BLK-FL = "N";
       /* edit customer number*/


  if (OM0HM001.OM0HMSTR is modified
   || OM0HM001.OM0HMDEP is modified)
    OM0HW01.OM0HWCUV = "N"; /* set valid cust flag to no*/
    OM0HW01.OM0HWUPF = "Y"; /* set update flag to yes*/
    OM0HS45(); /* edit customer*/
  end

       /* edit customer versus sales program if no errors so far*/

  if (OMAREC.OMAERR == "N" /* no errors*/
   && OM0HM001.SP1ID != " ") /* and a sales pgm on the order*/
    if (OM0HW01.OM0HWCMF == "Y" /* and store or dept changed*/
     || OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* or sales pgm changed*/
      OM0HW01.OM0HWCUV = "N"; /* set valid cust flag to no*/
      OM0HS47(); /* edit cust vs sales pgm*/
    end
  end

      /* set flag to update the bulk*/

  if (OM0HW01.OM0HWCMF == "Y" /* store or dept changed*/
   && OM0HW01.OM0HWCUV == "Y") /* and new one is valid*/
    OM0HW01.OM0HW-UPD-BLK-FL = "Y"; /* set the bbulk update flag on*/
  end

   /* Edit PO Number.  Need to capture Change Reason for OCD.  SLARSE3*/

  if (OM0HM001.OP1CUPO is modified || 
  OM0HW-PO-CHNG-FL == "Y") /* slarse begin*/
    if (OM0HW01.OM0HWCUV == "Y")
      OM0HW01.OM0HW-UPD-BLK-FL = "Y"; /* set the bbulk upd flag on*/
      OM0HW01.OM0HWUPF = "Y";
      OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/
      OM0HS50(); /* edit po number*/
    else
      set OM0HM001.OP1CUPO modified;
    end
    if (OMAREC.OMAERR == "N") /* slarse begin*/
      OM0HS-VALIDATE-RSN();
      if (OMAREC.OMAERR == "Y")
        OM0HW-PO-CHNG-FL = "Y";
        exit stack;
      end
      OM0HW-PO-CHNG-FL = "N";
      OM0HS-MAX-VSOHCR01(); /* Clear the record, fill key, get max*/
                                   /* seq*/
      VSOHCR01.OP1CUPO = OP1REC.OP1CUPO;
      OM0HS-ADD-VSOHCR01(); /* Write the Header Change    slarse end*/
    end
  end

  OM0HM001.OM0HM-SOCD-RSN-TXT = " "; /* slarse*/

       /* *******************************************************/
       /* * this code determines if the changes qualify        **/
       /* * the order as a transmitted airborne order - if so, **/
       /* * the updates are not allowed - this order will be   **/
       /* * missed by the batch airborne extract process       **/
       /* ********************************************************/

  if (OM0HM001.XDSCD is modified /* has dir ship changed?*/
   || OM0HM001.XOBCD is modified /* order type changed?*/
   || OM0HM001.OM0HMCND is modified) /* need date changed?*/
    XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build pass record*/
    XS0MW01.XS0MWORT = OP1REC.XOTCD;
    XS0MW01.XS0MWDIR = OM0HM001.XDSCD;
    XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
    XS0MW01.XS0MWGPC = OP1REC.XGPCD;
    XS0MW01.XS0MWNDT = OM0HW01.OP1CUNDT;

    XS0MS-CHK-AIRBORNE();

    if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
      converseLib.validationFailed(790); /* updates not allowed*/
      XS0MW01.XS0MWABF = "N"; /* updates are not allowed -*/
                                  /* therefore, not a xmitted*/
                                  /* airborne order. all func valid*/
      OM0HS17(); /* refresh original screen*/
      if (OM0HM001.XDSCD is modified) /* set cursor on updated field*/
        set OM0HM001.XDSCD cursor;
      else
        if (OM0HM001.XOBCD is modified)
          set OM0HM001.XOBCD cursor;
        else
          set OM0HM001.OM0HMCND cursor;
        end
      end
      return;
    end
  end
      /* if sales program was modified, we now have to edit across*/
      /* all the suborders to make sure the sales program is valid*/
      /* for all order types, order status', bulk/draw codes,*/
      /* customer/store/departments, need dates, and items on the order*/

  if (OMAREC.OMAERR == "N" /* if no errors so far*/
   && OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* and sales pgm changed*/
    OM0HS62(); /* edit all suborders*/
  end



      /* edit Order status in the Mirror Pick Pool*/

  OM0HW01.OM0HW-APPLY-CHG-FL = "N";
  OM0HW01.OM0HW-DCMS-ORD-FL = "N";

  if (OP1REC.XWHCD == "51" /* Memphis Apparel Whse*/
   || OM0HM001.XWHCD == "51")
    if (OM0HW01.OM0HWPCH == "Y")

      if (OP1REC.XOSCD == "PA" || OP1REC.XOSCD == "AL")
        set WEP1301 empty;
        WEP1301.WEP1301-OPTION-CD = "ED";
        WEP1301.WEP1301-CALLING-PGM-ID = "OM0H";
        WEP1301.WEP1301-XWH-WHSE-CD = OP1REC.XWHCD;
        WEP1301.WEP1301-PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
        WEP1301.WEP1301-PK-NIKE-ORD-ID = OP1REC.OP1NORID;
        WEP1301.WEP1301-XOS-ORD-STAT-CD = OP1REC.XOSCD;
        WEP1301.WEP1301-XOT-ORD-TYP-CD = OP1REC.XOTCD;
        WEP1301.WEP1301-OP-CUST-PO = OP1REC.OP1CUPO;
        WEP1301.WEP1301-RETURN-CODE = 99;
        TA1REC.TA1TBLKE = WEP1301.WEP1301-PASS-INFO;

        OM0HS-CALL-EP1300();

        if (WEP1301.WEP1301-RETURN-CODE == 0) /* Status OK*/
          OM0HW01.OM0HW-APPLY-CHG-FL = "Y";
          OM0HW01.OM0HW-DCMS-ORD-FL = "Y";
        else
          OM0HW01.OM0HW-APPLY-CHG-FL = "N";
          OM0HW01.OM0HW-DCMS-ORD-FL = "Y";
          if (WEP1301.WEP1301-RETURN-CODE == 2
           || WEP1301.WEP1301-RETURN-CODE == 3
           || WEP1301.WEP1301-RETURN-CODE == 4)
            converseLib.validationFailed(968);
            OMAREC.OMAERR = "Y";
            set OM0HM001.OP1CUPO cursor;
          else
            if (WEP1301.WEP1301-RETURN-CODE == 1)
              OM0HW01.OM0HW-DCMS-ORD-FL = "N";
            else
              if (WEP1301.WEP1301-RETURN-CODE >= 5)
                TA1REC.TA1DBASE = "DPICK";
                TA1REC.TA1TBLVU = "VMPOLH01";
                TA1REC.TA1LOCAT[3] = "OM0HS10";
                TA1REC.TA1LOCAT[4] = "EP1300";
                TA1REC.TA1LOCAT[1] = WEP1301.WEP1301-ERRDIAG-LOCATION;
                TA1REC.TA1LOCAT[2] = WEP1301.WEP1301-RETURN-CODE;

                XSOPS02();
              end
            end
          end
        end
      end
    end
  end

      /* position the cursor*/

  if (OMAREC.OMAERR == "N")
    set OM0HM001.OP1CUPO cursor;
  end


end // end OM0HS10

// set fields protect
Function OM0HS11()



       /* ******************************************************/
       /* *  this statement group sets fields attribute       **/
       /* *  for inquiry only                                 **/
       /* ******************************************************/


  set OM0HM001.OM0HMSTR protect;
  set OM0HM001.OM0HMDEP protect;
  set OM0HM001.SM1AGYID protect;
  set OM0HM001.OM0HMREP protect;
  set OM0HM001.OP1CUPO protect;
  set OM0HM001.XWHCD protect;
  set OM0HM001.XOBCD protect;
  set OM0HM001.OM0HMCND protect;
  set OM0HM001.XOCCD protect;
  set OM0HM001.OM0HMSBD protect;
  set OM0HM001.OM0HMSAD protect;
  set OM0HM001.OP1CMPNB protect;
  set OM0HM001.OM0HMCLD protect;
  set OM0HM001.SP1ID protect;
  set OM0HM001.OM0HMSQD protect;
  set OM0HM001.OP1ORDBY protect;
  set OM0HM001.OM0HMRCD protect;
  set OM0HM001.OM0HMTBN protect;
  set OM0HM001.XBDCD protect;
  set OM0HM001.OP1BOFL protect;
  set OM0HM001.XDSCD protect;
  set OM0HM001.OM0HWDPC protect;
  set OM0HM001.XNDCD protect;
  set OM0HM001.OM0HMINT protect;
  set OM0HM001.OM0HMLBL protect;

  if (OCGREC.OCG-OC-ELIG-FOR-CNFM-FL == "N")
    set OM0HM001.OM0HM-AUTO-CNFM skip, invisible;
    set OM0HM001.OP-SND-CNFM-FL skip, invisible;
  else
    set OM0HM001.OM0HM-AUTO-CNFM protect;
    set OM0HM001.OP-SND-CNFM-FL protect;
  end

       /* move cursor to the bottom of the screen*/

  set OM0HM001.OM0HMCUR cursor;



   /* **********************************************************/
end // end OM0HS11

// verify cancellation
Function OM0HS12()



       /* ********************************************************/
       /* * if in inquiry mode, this statement group checks to  **/
       /* * see if the operator is authorized to cancel. it     **/
       /* * also checks the allow cancellation flag in the xostbl*/
       /* * to make sure that this order is cancellable         **/
       /* * also, if an order is a transmitted airborne order,  **/
       /* * it is marked as not cancellable.(01/04/93 jather)   **/
       /* * (both domestic and international (05/05/93 dcaust)  **/
       /* ********************************************************/


  if (OMWREC.OMWCHGFL == "Y")
    if (COMMAREA.CACHGFL == "Y")
      if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
        converseLib.validationFailed(357); /* id not auth to cancel orders*/
        OMAREC.OMAERR = "Y";
        OMWREC.OMWPF2CH = "N";
        return;
      end
    end
  else
    if (COMMAREA.CACHGFL == "Y")
      if (COMMAREA.CACLVL[1] == "Y") /* allocation manager*/
        converseLib.validationFailed(357); /* id not auth to cancel orders*/
        OMAREC.OMAERR = "Y";
        OMWREC.OMWPF2CH = "N";
        return;
      end
    else
      converseLib.validationFailed(357); /* id not auth to cancel orders*/
      OMAREC.OMAERR = "Y";
      OMWREC.OMWPF2CH = "N";
      return;
    end
  end


       /* check the allow cancellation flag in the xostbl*/

  if (OM0HW01.XOSALWXL == "N")
    converseLib.validationFailed(369); /* ord stat does not allow*/
                                 /* ; cancellation of orders*/
    OMWREC.OMWPF2CH = "N"; /* back to inquiry mode*/
    OMAREC.OMAERR = "Y";
    return;
  end


       /* can not cancel different sales office orders*/

  if (OP1REC.XSOCD == COMMAREA.XSOCD)
     /* next sentence*/
  else
    if (COMMAREA.CACHGFL == "Y"
     && COMMAREA.CACLVL[1] == "Y") /* is allocation manager*/
      if (OP1REC.XOSCD == "AL" /* order allocated*/
       || OP1REC.XOSCD == "PA") /* order partially allocated*/
         /* next sentence*/
      else
        converseLib.validationFailed(355); /* not auth to chg other so orders*/
        OMWREC.OMWPF2CH = "N"; /* back to inquiry mode*/
        OMAREC.OMAERR = "Y";
        return;
      end
    else
      converseLib.validationFailed(355);
                                   /* id not auth to change other so orders*/
      OMWREC.OMWPF2CH = "N"; /* back to inquiry mode*/
      OMAREC.OMAERR = "Y";
      return;
    end
  end

        /* added for rebooking 10/88 tjf*/

  if (OP1REC.XBDCD == "R")
    converseLib.validationFailed(392);
    OMWREC.OMWPF2CH = "N";
    OMAREC.OMAERR = "Y";
    return;
  end

       /* if a transmitted airborne order (domestic)*/
       /* cancellation not allowed*/
                                         /* (flag set in om0h005)*/
  if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
    converseLib.validationFailed(789); /* xmitted airborne order cannot*/
    OMWREC.OMWPF2CH = "N"; /* be updated*/
    OMAREC.OMAERR = "Y";
    return;
  end

       /* if a transmitted airborne order (international)*/
       /* allow cancellation but default order class to 'AU'*/
       /* to ensure that this order will be retransmitted to Airborne*/

  if (OP1REC.XDVCD == "02"
   && OP1REC.XOCCD == "TR") /* transmitted airborne order*/
    OP1REC.XOCCD = "AU"; /* default order class to 'au'*/
    OM0HM001.XOCCD = "AU"; /* default order class on map*/
    if (OM0HM001.XOCCD in XOCTBL.XOCCD
     && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OM0HM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
      OM0HW01.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex];
      OM0HW01.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex];
      set OM0HM001.XOCCD initialAttributes;
    else
      converseLib.validationFailed(020); /* order class is not valid*/
      set OM0HM001.XOCCD cursor, modified, bold;
      OM0HM001.XOCABRV = " ";
      OMAREC.OMAERR = "Y";
      return;
    end
    OMWREC.OMWPF2CH = "N"; /* cancellation of order or*/
    OMAREC.OMAERR = "Y"; /* product*/
  end

       /* order is ok to be cancelled*/

  converseLib.validationFailed(400); /* enter cancel reason code and*/
                                 /* ; press pf24 to cancel order*/
  set OM0HM001.OM0HMCRL initialAttributes;
  set OM0HM001.OM0HMREL initialAttributes;
  set OM0HM001.OM0HMXOM cursor, initialAttributes;
  set OM0HM001.OM0HMREF initialAttributes;
  set OM0HM001.OM0HMPF1 initialAttributes;
  OM0HW01.OM0HWCLF = "Y";
  OMWREC.OMWPF2CH = "Y";
  OM0HW01.OM0HW1TC = "Y";
  OMAREC.OMAERR = "Y"; /* to go back*/



   /* *************************************************************/
end // end OM0HS12

// transfer to cancel application
Function OM0HS13()

       /* OCD Changes:  Search for SLARSE*/

       /* *****************************************************/
       /* * this statement group validate the entered cancel **/
       /* * reason code and xfer to om0r (cancel order)      **/
       /* *****************************************************/

  OM0HS57(); /* edit cancel reenter flag*/

  OM0HS59(); /* validate maintenance reason*/

  if (OMAREC.OMAERR == "Y") /* error found*/
    return;
  end

      /* order was cancelled - check for international airborne order*/
      /* where order class has been defaulted to 'au' and needs upd*/
      /* on the order header record.*/

  if (OP1REC.XDVCD == "02") /* if international*/
    if (OP1REC.XOCCD == "AU") /* and if order class defaulted to 'au'*/
      OM0HS9B(); /* update the order header w/ 'au'*/
    end
  end

       /* move sub order number and cancellation code*/
       /* to omwrec*/

  OMWREC.OP1SUBXL[1] = OP1REC.OP1NORID;
  OMWREC.XOMCD = OM0HM001.OM0HMXOM;
  OMWREC.OPUCRNTR = OM0HM001.OM0HMREF; /* cancelation reenter flag*/
  /* MOVE OM0HM001.OM0HM-SOCD-RSN-TXT TO OMWREC.SOCD-RSN-TXT; /*SLARSE*/
  OMWREC.OP1GROUP = OP1REC.OP1GROUP;

  set OMEREC empty; /* initialize om0r return code*/

       /* call om0r to cancel order*/

  call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};

  if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

  OMWREC.OMWPKCHF = "Y"; /* pack change flag*/

      /* Order was Cancelled - Write OCD Row to Change Reason Table*/
      /* SLARSE*/
  OM0HS-MAX-VSOHCR01(); /* Clear the record, fill key, get max seq*/
                         /* Don't move any fields for a cancel*/
  OM0HS-ADD-VSOHCR01(); /* Write the Header Change*/
  OM0HM001.OM0HM-SOCD-RSN-TXT = " ";

      /* order was cancelled - check for prepack if none found*/
      /* transfer back to select nor order screen*/

  OM0HS02(); /* check for prepack*/
  if (OMWREC.OMWPPEXF == "Y") /* prepack exists*/
    OM0HS03(); /* delete prepack records*/
    converseLib.validationFailed(669); /* prepacks deleted*/
    OMAREC.OMAERR = "Y";
  else
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OM0M";
    transfer to program "OM0M" passing COMMAREA; /* back to select new order*/
  end

   /* ************************************************************/
end // end OM0HS13

// set modified fields modified
Function OM0HS14()



       /* *******************************************************/
       /* * this statement group set modified fields modified  **/
       /* * in case a invalid key is pressed                   **/
       /* *******************************************************/


  if (OM0HM001.OM0HMSTR is modified)
    set OM0HM001.OM0HMSTR modified;
  end


  if (OM0HM001.OM0HMDEP is modified)
    set OM0HM001.OM0HMDEP modified;
  end


  if (OM0HM001.OM0HMXOM is modified)
    set OM0HM001.OM0HMXOM modified;
  end


  if (OM0HM001.OM0HMREF is modified) /* check reenter flag for modif*/
    set OM0HM001.OM0HMREF modified;
  end


  if (OM0HM001.XOBCD is modified)
    set OM0HM001.XOBCD modified;
  end



  if (OM0HM001.XOCCD is modified)
    set OM0HM001.XOCCD modified;
  end


  if (OM0HM001.SP1ID is modified)
    set OM0HM001.SP1ID modified;
  end



  if (OM0HM001.XWHCD is modified)
    set OM0HM001.XWHCD modified;
  end


  if (OM0HM001.OP1CMPNB is modified)
    set OM0HM001.OP1CMPNB modified;
  end


  if (OM0HM001.OP1BOFL is modified)
    set OM0HM001.OP1BOFL modified;
  end


  if (OM0HM001.XDSCD is modified)
    set OM0HM001.XDSCD modified;
  end

  if (OM0HM001.OM0HWDPC is modified)
    set OM0HM001.OM0HWDPC modified;
  end



  if (OM0HM001.XBDCD is modified)
    set OM0HM001.XBDCD modified;
  end


  if (OM0HM001.OM0HMCLD is modified)
    set OM0HM001.OM0HMCLD modified;
  end


  if (OM0HM001.OM0HMCND is modified)
    set OM0HM001.OM0HMCND modified;
  end


  if (OM0HM001.OM0HMSAD is modified)
    set OM0HM001.OM0HMSAD modified;
  end


  if (OM0HM001.OP1ECANM is modified)
    set OM0HM001.OP1ECANM modified;
  end


  if (OM0HM001.OM0HMSBD is modified)
    set OM0HM001.OM0HMSBD modified;
  end


  if (OM0HM001.OM0HMRCD is modified)
    set OM0HM001.OM0HMRCD modified;
  end


  if (OM0HM001.OM0HMREP is modified)
    set OM0HM001.OM0HMREP modified;
  end


  if (OM0HM001.SM1AGYID is modified)
    set OM0HM001.SM1AGYID modified;
  end


  if (OM0HM001.OP-SND-CNFM-FL is modified)
    set OM0HM001.OP-SND-CNFM-FL modified;
  end


  if (OM0HM001.OP1ORDBY is modified)
    set OM0HM001.OP1ORDBY modified;
  end


  if (OM0HM001.OM0HMTBN is modified)
    set OM0HM001.OM0HMTBN modified;
  end


  if (OM0HM001.XNDCD is modified)
    set OM0HM001.XNDCD modified;
  end


  if (OM0HM001.OM0HMINT is modified)
    set OM0HM001.OM0HMINT modified;
  end


  if (OM0HM001.OM0HMLBL is modified)
    set OM0HM001.OM0HMLBL modified;
  end



   /* **********************************************************/
end // end OM0HS14

// check customer variations
Function OM0HS15()



       /* *******************************************************/
       /* * this statement group compares customer's defaults  **/
       /* * with order header data.  if differences are found, **/
       /* * warning messages are going to be displayed on the  **/
       /* * next screen                                        **/
       /* *******************************************************/


  OM0HW01.OM0HWCMF = "N"; /* set customer modified flag off*/
  OM0HW01.OM0HWCDF = "N"; /* set customer variations flag off*/


  OMASUB = 0;



     /* compare order warehouse with all three store warehouses*/

  KUMREC.KUCCOID = OM0HM001.OM0HMCCO;
  KUMREC.KUMSTRID = OM0HM001.OM0HMSTR;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUMREC.XWHCD[1] == OP1REC.XWHCD
     || KUMREC.XWHCD[2] == OP1REC.XWHCD
     || KUMREC.XWHCD[3] == OP1REC.XWHCD)
      /* next sentence*/
    else
      OM0HW01.OM0HWCDF = "Y";
      OM0HWMSG = "CUST. WAREHOUSE DOES NOT MATCH ORDER WAREHOUSE";
      OMASUB = OMASUB + 1;
      OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
    end
  else
    OM0HW01.OM0HWCDF = "Y";
    OM0HWMSG = "CUSTOMER WAREHOUSE DOES NOT MATCH ORDER WAREHOUSE";
    OMASUB = OMASUB + 1;
    OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
  end



     /* compare customer agency/rep with order agency/rep*/

  KUGREC.KUCCOID = OM0HM001.OM0HMCCO;
  KUGREC.KUMSTRID = OM0HM001.OM0HMSTR;
  KUGREC.XNXCD = OM0HM001.OM0HMDEP;
  KUGREC.YSBCD = "**";
  KUGREC.KUGRPTDT = -1;
  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};
      if (OP1REC.SM4REPID == KUGREC.SM4REPID 
       && OP1REC.SM1AGYID == KUGREC.SM1AGYID 
       && OP1REC.OP1ORCDT >= KUGREC.KUGRPEDT /* effective date*/
       && OP1REC.OP1ORCDT <= KUGREC.KUGRPTDT) /* termination date*/
        SQLCA.VAGen_SQLCODE = 99;
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 99)
    /* next sentence*/
  else
    OM0HWMSG = "CUST. AGENCY/REP DOES NOT MATCH ORDER AGENCY/REP";
    OM0HW01.OM0HWCDF = "Y";
    OMASUB = OMASUB + 1;
    OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
  end



     /* special instructions flag check*/

  if (KUNREC.KUNISIND == "Y")
    OM0HWMSG = "CUSTOMER HAS SPECIAL INST. - MAY NOT MATCH ORDER";
    OM0HW01.OM0HWCDF = "Y";
    OMASUB = OMASUB + 1;
    OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
  end



     /* special labels flag check*/

  if (KUNREC.KUNLABIN == "Y")
    OM0HWMSG = "CUSTOMER HAS SPECIAL LABELS - MAY NOT MATCH ORDER";
    OM0HW01.OM0HWCDF = "Y";
    OMASUB = OMASUB + 1;
    OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
  end



     /* backorder flag check*/

  if (OP1REC.OP1BOFL == KUNREC.KUNABOFL)
    /* next sentence*/
  else
    OM0HWMSG = "CUSTOMER BACK ORDER FLAG DOES NOT MATCH ORDER";
    OM0HW01.OM0HWCDF = "Y";
    OMASUB = OMASUB + 1;
    OM0HM005.OM0HMERL[OMASUB] = OM0HWMSG;
  end



   /* ************************************************************/
end // end OM0HS15

// update commarea & ord hdr rec
Function OM0HS16()
       /* *******************************************************/
       /* * this statement group creates the tag records and   **/
       /* * updates                                            **/
       /* *    - the order header record                       **/
       /* *    - text table (dorder.vtext01)                   **/
       /* *    - commarea                                      **/
       /* * it also creates a new set of terms and discounts for*/
       /* * an order if need date, order type, sales program   **/
       /* * and/or customer is modified                        **/
       /* *******************************************************/

       /* if the pf19 was pressed to go back to the*/
       /* original screen, (om0hwupf = 'n'),*/
       /* there is no need to update the order header*/
       /* record and the text record, therefore; no tag*/
       /* records will be written*/

  if (OM0HW01.OM0HWUPF == "Y")
     /* next sentence -- update records & write tags*/
  else
    return; /* go back*/
  end


       /* check to see if label*/
       /* was modified*/

  if (OM0HW01.OM0HWLMF == "Y")
    OM0HS20();
  end


       /* check to see if instruction was modified*/

  OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
  OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
  OM0HW01.OM0HWNOI = OP1REC.OP1NORID;


  if (OM0HW01.OM0HWIMF == "Y")
    OP4REC.OP4KEY = OP1REC.OP1KEY;
    OP4REC.OP4TRTYP = "I"; /* instruction*/
    OP4REC.OP4TRSEQ = OM0HW01.OM0HWISQ; /* load seq number*/
    call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      OM0HS26(); /* update instruction*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OM0HS27(); /* write new one*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
        TA1REC.TA1LOCAT[3] = "OM0HS16"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0470";
        TA1REC.TA1LOCAT[1] = "S";
        OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
        OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
        XSOPS02(); /* abend routine*/
      end
    end

    if (OM0HW01.OM0HW-DCMS-ORD-FL == "Y")
      if (OP4REC.XNDCD == "DIST"
       || OP4REC.XNDCD == "TRAF")
        OM0HS-OPN-VMPOLH01();
        OM0HS-FTC-VMPOLH01();
        while (OM0HW01.OM0HW-VMPOLH01-EOF-FL == "N")
          OM0HS-PRC-VMPOLT01();
        end
        OM0HS-CLS-VMPOLH01();
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      end
    end
  end


       /* if a sales program change, redo the prices on the entire order*/

  if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* spgm changed*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save original suborder*/
    OM0HW01.OBT-TOTAL-ORDER-UNITS = 0; /* init totals for terms*/
    OM0HW01.OBT-TOTAL-ORDER-VALUE = 0; /**/
    OMAREC.OMASUB2 = 1;

    while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS
     && OMAREC.OMAERR == "N") /* get each suborder*/
      OM0HSMP(); /* redo all its prices*/
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    end

    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* restore original suborder*/
    if (OMAREC.OMAERR == "Y") /* if any procssng errors, don't update*/
      exit stack;
    end
  end


       /* redo the terms if necessary*/

  if (OM0HW01.OM0HWNTF == "Y") /* if redo terms flag is on*/
    if (KUCREC.XAUCD == "31" /* if international order*/
     || KUCREC.XAUCD == "32" /* if international order*/
     || KUCREC.XAUCD == "33") /* if international order*/
      OM0HST1(); /* process terms for nil*/
    else /* redo terms for domestic orders*/
      if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* if spgm changed*/
        OM0HSMT(); /* redo terms for entire order*/
      else /* or if just need date, etc. changed*/
        OM0HSM1(); /* redo for current suborder only*/
      end
      if (OMAREC.OMAERR == "Y") /* if any errors, reconverse*/
        exit stack;
      end
    end
  end


      /* get current date and time*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* get current date and time*/

  if (TA2REC.TA2RTNCD != 0) /* if error, then abort*/
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "XSOMS02";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  end


       /* update the sales program/order type table*/
       /* if necessary*/

  if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* if a sales pgm change*/
    OM0HS-CHK-ALL-SUBS(); /* chk all suborders*/
  else
    if (OM0HW01.XOTCD != OP1REC.XOTCD) /* or if order type change*/
      OM0HS-CHK-THIS-SUB(); /* chk only this suborder*/
    end /* for updating spgm/xot tbl*/
  end


       /* if need date, warehouse or order type changes,*/
       /* write production audit records at size level*/
       /* (opurec:  dorder.voraud01).*/

  if (OM0HW01.XOTCD != OP1REC.XOTCD /* new order type*/
   || OM0HW01.XWHCD != OP1REC.XWHCD /* new warehouse*/
   || OM0HW01.OP1CUNDT != OP1REC.OP1CUNDT) /* new need date*/

    set OP3REC empty;
    set OPBREC empty;
    set OP8REC empty;
    set SQLCA empty;
    OP3REC.OP1PARTN = OP1REC.OP1PARTN;
    OP3REC.OP1CUOID = OP1REC.OP1CUOID;
    OP3REC.OP1NORID = OP1REC.OP1NORID;
    OP8REC.OP8TASK = "SS";
    OP8REC.OP8LOCAT[1] = "OM0HS16"; /* process name*/
    OP8REC.OP8LOCAT[2] = " "; /* group name*/
    OP8REC.OP8LOCAT[3] = " "; /* filler*/
    OP8REC.OP8MAP = "OM0H    "; /* map name*/

    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

    if (OPBREC.OPBSZRC == 0 /* check for good return*/
     || OPBREC.OPBSZRC == 1) /* or not found*/

      while (OPBREC.OPBSZRC == +0)
        set SQLCA empty;
        set OP3REC empty;
        OP3REC.OP1PARTN = OP1REC.OP1PARTN;
        OP3REC.OP1CUOID = OP1REC.OP1CUOID;
        OP3REC.OP1NORID = OP1REC.OP1NORID;
        OP8REC.OP8TASK = "SN";
        OP8REC.OP8LOCAT[1] = "OM0HS16"; /* process name*/
        OP8REC.OP8LOCAT[2] = " "; /* group name*/
        OP8REC.OP8LOCAT[3] = " "; /* filler*/
        OP8REC.OP8MAP = "OM0H    "; /* map name*/

        call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

        if (OPBREC.OPBSZRC == +0)
          OM0HSAU();
        else
          if (OPBREC.OPBSZRC == +1) /* not found*/
             /* next sentence*/
          else
            TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
            TA1REC.TA1TBLVU = "VOSIZE01"; /* table view*/
            TA1REC.TA1LOCAT[3] = "OM0HS16"; /* statement group name*/
            TA1REC.TA1LOCAT[4] = "DB1000";
            TA1REC.TA1LOCAT[1] = "SN";
            XSOPS02();
          end
        end
      end
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VOSIZE01"; /* table view*/
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
      TA1REC.TA1LOCAT[3] = "OM0HS16"; /* statement group name*/
      TA1REC.TA1LOCAT[4] = "DB1000";
      XSOPS02();
    end
    OP8REC.OP8TASK = "CS";
    OP8REC.OP8LOCAT[1] = "OM0HS16"; /* process name*/
    OP8REC.OP8LOCAT[2] = " "; /* group name*/
    OP8REC.OP8LOCAT[3] = " "; /* filler*/
    OP8REC.OP8MAP = "OM0H    "; /* map name*/

    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
  end


  if (OM0HW01.OM0HWPCH == "Y")
    if (OP1REC.XOSCD == "AL"
     || OP1REC.XOSCD == "PA")
      OM0HSPK(); /* write picking change table*/
    end
  end


  if (OM0HW01.OM0HWROF == "Y") /* rep/agency overridden*/
    OP1REC.OP-SREP-OVRD-FL = "Y";
  end


  OM0HS95(); /* update the order header record*/


  OM0HW01.OM0HW-UPD-BLK-DRW-CD-FL = "N"; /* re-set flag*/

  if (OP1REC.XBDCD == OM0HW01.XBDCD)
    if ((OP1REC.XBDCD == "1" /* is a customer bulk*/
     && OM0HW01.OM0HW-UPD-BLK-FL == "Y")) /* dept or po changed*/
      OMWREC.OP1GROUP = OP1REC.OP1GROUP;
      OM0HS94();
      OP1REC.OP1GROUP = OMWREC.OP1GROUP;
    end
  else
    OM0HW01.OM0HW-UPD-BLK-DRW-CD-FL = "Y"; /* bulk draw code changed*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    OM0HS94();
    OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  end


  if (OM0HW01.OM0HWROF == "Y")
    OM0HSAR();
  end


       /* update commarea*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


end // end OM0HS16

// FORMAT ORIGINAL SCREEN - PF19
Function OM0HS17()


    /* move data from work area to op1rec record*/

  OP1REC.KUMSTRID = OM0HW01.KUMSTRID;
  OP1REC.XNXCD = OM0HW01.XNXCD;
  OP1REC.SM1AGYID = OM0HW01.SM1AGYID;
  OP1REC.OP-SND-CNFM-FL = OM0HW01.OP-SND-CNFM-FL;
  OP1REC.SM4REPID = OM0HW01.SM4REPID;
  OP1REC.OP1CUPO = OM0HW01.OP1CUPO;
  OP1REC.XWHCD = OM0HW01.XWHCD;
  OP1REC.XOBCD = OM0HW01.XOBCD;
  OP1REC.XOTCD = OM0HW01.XOTCD;
  OP1REC.XOCCD = OM0HW01.XOCCD;
  OP1REC.XGPCD = OM0HW01.XGPCD;
  OP1REC.OP1CMPNB = OM0HW01.OP1CMPNB;
  OP1REC.OP1ORDBY = OM0HW01.OP1ORDBY;
  OP1REC.OP1BOFL = OM0HW01.OP1BOFL;
  OP1REC.XDSCD = OM0HW01.XDSCD;
  OP1REC.OP-DIRSHP-DSCT-PCT = OM0HW01.OM0HWHPC;
  OP1REC.XBDCD = OM0HW01.XBDCD;
  OP1REC.OP1TBREP = OM0HW01.OP1TBREP;
  OP1REC.OP1CUNDT = OM0HW01.OP1CUNDT;
  OP1REC.OP1ORCDT = OM0HW01.OP1ORCDT;
  OP1REC.OP1DSBDT = OM0HW01.OP1DSBDT;
  OP1REC.OP1DSADT = OM0HW01.OP1DSADT;
  OP1REC.OP1CALDT = OM0HW01.OP1CALDT;
  OP1REC.SP1ID = OM0HW01.SP1ID;
  OP1REC.SP6MDISC = OM0HW01.SP6MDISC;

       /* move data from work record to screen*/

  OM0HM001.OM0HMSTR = OM0HW01.KUMSTRID;
  OM0HM001.OM0HMDEP = OM0HW01.XNXCD;
  OM0HM001.SM1AGYID = OM0HW01.SM1AGYID;
  OM0HM001.OM0HMREP = OM0HW01.SM4REPID;
  OM0HM001.OP1CUPO = OM0HW01.OP1CUPO;
  OM0HM001.XWHCD = OM0HW01.XWHCD;
  OM0HM001.XOBCD = OM0HW01.XOBCD;
  OM0HM001.XOCCD = OM0HW01.XOCCD;
  OM0HM001.XGPCD = OM0HW01.XGPCD;
  OM0HM001.OP1CMPNB = OM0HW01.OP1CMPNB;
  OM0HM001.OP1ORDBY = OM0HW01.OP1ORDBY;
  OM0HM001.OP1BOFL = OM0HW01.OP1BOFL;
  OM0HM001.XDSCD = OM0HW01.XDSCD;
  OM0HM001.OM0HWDPC = OM0HW01.OM0HWHPC;
  if (OM0HM001.OM0HWDPC == "0")
    OM0HM001.OM0HWDPC = " ";
  end
  OM0HM001.XBDCD = OM0HW01.XBDCD;
  OM0HM001.OM0HMFSN = OM0HW01.OM0HWFIN;
  OM0HM001.OM0HMLNM = OM0HW01.XXXLSTNM;
  OM0HM001.XSOABRV = OM0HW01.XSOABRV;
  OM0HM001.OM0HMCND = OM0HW01.OM0HWNDT;
  OM0HM001.XOBDESC = OM0HW01.XOBDESC;
  OM0HM001.XGPABRV = OM0HW01.XGPABRV;
  OM0HM001.XOCABRV = OM0HW01.XOCABRV;
  OM0HM001.OM0HMSBD = OM0HW01.OM0HWBDT;
  OM0HM001.OM0HMSAD = OM0HW01.OM0HWADT;
  OM0HM001.OM0HMTBN = OM0HW01.OM0HMTBN;
  OM0HM001.OM0HMERN = OM0HW01.OM0HMERN;
  OM0HM001.OM0HMCLD = OM0HW01.OM0HWCDT;
  OM0HM001.XOSABRV = OM0HW01.XOSABRV;
  OM0HM001.OM0HMOSD = OM0HW01.OM0HWOSD;
  OM0HM001.OM0HMCSD = OM0HW01.OM0HWCSD;
  OM0HM001.XCSABRV = OM0HW01.XCSABRV;
  OM0HM001.XDSABRV = OM0HW01.XDSABRV;
  OM0HM001.XNDCD = OM0HW01.XNDCD;
  OM0HM001.OM0HMINT = OM0HW01.OM0HMINT;
  OM0HM001.OM0HMLBL = OM0HW01.OM0HMLBL;
  OM0HM001.SP1ID = OM0HW01.SP1ID;
  OM0HM001.OM0HMSQD = OM0HW01.SP6MDISC;

  set OM0HM001.OM0HMSPL initialAttributes;
  set OM0HM001.OM0HMQDL initialAttributes;
  set OM0HM001.SP1ID initialAttributes;
  set OM0HM001.OM0HMSQD initialAttributes;

  set OM0HM001.OM0HMSTR initialAttributes;
  set OM0HM001.OM0HMDEP initialAttributes;
  set OM0HM001.SM1AGYID initialAttributes;
  set OM0HM001.OM0HMREP initialAttributes;
  set OM0HM001.XWHCD initialAttributes;
  set OM0HM001.XOBCD initialAttributes;
  set OM0HM001.XOCCD initialAttributes;
  set OM0HM001.OP1ORDBY initialAttributes;
  set OM0HM001.OP1BOFL initialAttributes;
  set OM0HM001.XDSCD initialAttributes;
  set OM0HM001.OM0HWDPC initialAttributes;
  set OM0HM001.OM0HMTBN initialAttributes;
  set OM0HM001.OM0HMCND initialAttributes;
  set OM0HM001.XBDCD initialAttributes;
  set OM0HM001.OM0HMRCD initialAttributes;
  set OM0HM001.OM0HMSBD initialAttributes;
  set OM0HM001.OM0HMSAD initialAttributes;
  set OM0HM001.OM0HMCLD initialAttributes;
  set OM0HM001.XNDCD initialAttributes;
  set OM0HM001.OP1CMPNB initialAttributes;


  /* BL#3690 Change begin --- Rshaik 07/07/99.*/
  /* Comented as per Scott/Diane*/
  /* This Function is no longer required for business.*/
  /* OM0HS-CALL-OC0G;         /* determine if auto confirm field is*/
  /* /*    displayed*/
  /*  */
  set OM0HM001.OM0HM-AUTO-CNFM skip, invisible;
  set OM0HM001.OP-SND-CNFM-FL skip, invisible;
  /*  */
  /* BL#3690 Change end*/
  OM0HS0A(); /* set bulk/draw flag*/


  OMAREC.OMAERR = "Y"; /* to go back*/

end // end OM0HS17

// EDIT NEED DATE
Function OM0HS18()


      /* if it is a draw order, read the bulk order header record*/
      /* to get the need date and the dont-ship-after-date on the*/
      /* bulk order -- first time only --*/

  if (OM0HW01.OM0HWBDF == "D") /* if draw order and*/
    if (OM0HW01.OM0HWBNF == "N") /* bulk record already read*/
      OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save current op1rec*/
      OM0HSBK(); /* get bulk order need date*/
      OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* move current op1rec back*/
    end
  end


       /* if need date is modified, terms and discounts have*/
       /* to be calculated*/

  OM0HW01.OM0HWNTF = "Y"; /* new set of terms required*/
  OM0HW01.OM0HWNTC = "Y"; /* new need date was entered*/


      /* check need date*/

  set TA2REC empty;
  OM0HW01.OM0HWDT = OM0HM001.OM0HMCND;
  if (OM0HW01.OM0HWHP2 != "-") /* entered date in mmddyy format*/
    TA2REC.TA2GRGA = OM0HM001.OM0HMCND;
    OMAREC.OMADATE = OM0HMCND; /* reformat date to*/
    OMAREC.OMASMMDT = OMAREC.OMAMMDT; /* mm-dd-yy for display*/
    OMAREC.OMASDDDT = OMAREC.OMADDDT;
    OMAREC.OMASYYDT = OMAREC.OMAYYDT;
    OM0HM001.OM0HMCND = OMAREC.OMASDATE;
  else /* ; entered date in mm-dd-yy format*/
    OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
    OMAREC.OMADDDT = OM0HW01.OM0HWDD;
    OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
    TA2REC.TA2GRGA = OMAREC.OMADATE;
  end


  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(013); /* need date is not a valid date*/
    set OM0HM001.OM0HMCND cursor, modified, bold;
    return;
  else
    set OM0HM001.OM0HMCND initialAttributes;
  end


     /* need date cannot be changed to date closer than*/
      /* original need date*/

  if (TA2REC.TA2GRGGN < OM0HW01.OP1CUNDT)
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(204); /* cannot move need date closer*/
    set OM0HM001.OM0HMCND cursor, modified, bold;
    return;
  end


      /* is need date prior to today?*/

  if (TA2REC.TA2GRGGN < OMAREC.OMACDT) /* check for lt today's date*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(015); /* need date must not be before today's date*/
    set OM0HM001.OM0HMCND cursor, modified, bold;
    return;
  end


      /* is need date beyond two years from today?*/
                                     /* chg need dt dlw 881129*/
  OMAREC.OMAWDT = 0;

  OMAREC.OMAWDT = OMAREC.OMACDT + 20000; /* wk-dt = curr-dt + 1 year*/
  if (TA2REC.TA2GRGGN > OMAREC.OMAWDT) /* check for gt one year future*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(016); /* need date is more than one year in the future*/
    set OM0HM001.OM0HMCND cursor, modified, bold;
    return;
  end


       /* if it is draw order, need date must be => the bulk ord*/
         /* need date and >= the bulk order dont-ship-after-date*/

  if (OM0HW01.OM0HWBDF == "D") /* draw order*/
    if (TA2REC.TA2GRGGN >= OM0HW01.OM0HWBNT /* => bulk need date*/
     && TA2REC.TA2GRGGN <= OM0HW01.OM0HWBSA) /* <= bulk d-shp-after dt*/
       /* next sentence*/
    else
      converseLib.validationFailed(293); /* must be between bulk need date*/
                                 /* ; and bulk dont-ship-after date*/
      OMAREC.OMAERR = "Y"; /* set err flag*/
      set OM0HM001.OM0HMCND cursor, modified, bold;
      return;
    end
  end


      /* save need date and set field attribute*/

  OP1REC.OP1CUNDT = TA2REC.TA2GRGGN; /* save need date*/
  set OM0HM001.OM0HMCND initialAttributes;

      /* check cutoff table for deadline record*/

  if (OMAREC.XOTFUTRF == "Y") /* futures*/
    set OP2REC empty;
    set SQLCA empty;
    OP2REC.OP1PARTN = OP1REC.OP1PARTN;
    OP2REC.OP1CUOID = OP1REC.OP1CUOID;
    OP2REC.OP1NORID = OP1REC.OP1NORID;
    OP2REC.XGPCD = " ";
    OP2REC.SY1STNBR = " ";
    OP2REC.SY2CLRID = " ";
    OP2REC.XDMCD = " ";
    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0)
      while (SQLCA.VAGen_SQLCODE == +0)
        set SQLCA empty;
        call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

        if (SQLCA.VAGen_SQLCODE == 0)
          OM0HSP2(); /* get product record*/
          OM0HSPD(); /* is there a cutoff record ?*/
        end
      end
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OM0HS16"; /* statement group name*/
      TA1REC.TA1LOCAT[4] = "IO0440";
      XSOPS02();
    end
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end


end // end OM0HS18

// edit order type
Function OM0HS19()


       /* *******************************************************/
       /* * this statement group edits the entered order type, **/
       /* *******************************************************/


       /* if order type is modified, terms and discounts*/
       /* have to be recalculated*/

  OM0HW01.OM0HWNTF = "Y"; /* new set of terms*/
  OM0HW01.OM0HWUPF = "Y"; /* update flag*/
  OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/


      /* *********************************************************/
      /* * edit order type change. props can only be changed to **/
      /* * props. futures can only be changed to futures. **/
      /* *********************************************************/

  if (OM0HW01.XOTCD in XOTTBL.XOTCD /* valid code; old order type*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
    OM0HW01.XOCFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex]; /* save future flag*/
    OM0HW01.XOCPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex]; /* save prop flag*/
    OM0HW01.XOTSMPLF = XOTTBL.XOTSMPLF[sysVar.arrayIndex]; /* save sample flag*/
    if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code; new order type*/
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
      OMAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
      OMAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex];
      OM0HW01.OM0HWSMP = XOTTBL.XOTSMPLF[sysVar.arrayIndex];
    else
      set OM0HM001.XOBCD cursor, modified, bold;
      converseLib.validationFailed(017);
      OMAREC.OMAERR = "Y";
      return;
    end
  else
    set OM0HM001.XOBCD cursor, modified, bold;
    converseLib.validationFailed(017);
    OMAREC.OMAERR = "Y";
    return;
  end


       /* check new gpc in order type table*/

  if (OP1REC.XGPCD == XOTTBL.XGPCD[sysVar.arrayIndex])
     /* next sentence*/
  else
    converseLib.validationFailed(376); /* can not change gpc of orders*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0HM001.XOBCD cursor, modified, bold;
    return;
  end

  if (OMAREC.XOTPROPF == "Y" /* new order type*/
   && OM0HW01.XOCPROPF == "Y") /* old order type*/
     /* next sentence*/
  else
    if (OMAREC.XOTFUTRF == "Y" /* new order type*/
     && OM0HW01.XOCFUTRF == "Y") /* old order type*/
      if (OM0HW01.XOTSMPLF == OM0HW01.OM0HWSMP)
         /* next sentence*/
      else
        converseLib.validationFailed(444); /* can,t chg otype to/from sample*/
        OMAREC.OMAERR = "Y"; /* set error flag*/
        OM0HM001.XOBCD = OP1REC.XOBCD;
                                   /* move old order type back to map*/
        set OM0HM001.XOBCD cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(199); /* can't chg otype between prop and futures*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      OM0HM001.XOBCD = OP1REC.XOBCD;
                                   /* move old order type back to map*/
      set OM0HM001.XOBCD cursor, modified, bold;
      return;
    end
  end

       /* edit order type*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code?*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OMAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
    OMAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex];
    OM0HW01.XOTADIRS = XOTTBL.XOTADIRS[sysVar.arrayIndex];
    OM0HW01.XOTABULK = XOTTBL.XOTABULK[sysVar.arrayIndex];
    OM0HW01.XOTLDAYS = XOTTBL.XOTLDAYS[sysVar.arrayIndex];
    set OM0HM001.XOBCD initialAttributes;
  else
    converseLib.validationFailed(017); /* order type is not valid*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    OM0HM001.XOBDESC = " "; /* clear ord type abrv*/
    set OM0HM001.XOBCD cursor, modified, bold;
    return;
  end


      /* validate order type against division*/

  if (OP1REC.XDVCD == XOTTBL.XDVCD[sysVar.arrayIndex]) /* valid code?*/
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* order type is not valid for your division*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0HM001.XOBCD cursor, modified, bold;
  end


end // end OM0HS19

// edit entered data
Function OM0HS1A()



       /* *******************************************************/
       /* * this statement group edits the entered fields and  **/
       /* *******************************************************/

        /* edit po number*/

  if (OM0HM010.OP1CUPO != OP1REC.OP1CUPO /* po nbr changed*/
   || OM0HM010.OP1CUPO != OM0HM001.OP1CUPO)
    if (OM0HW01.OM0HWCUV == "Y")
      OM0HW01.OM0HWUPF = "Y";
      OM0HW01.OM0HWPCH = "Y"; /* set picking change flag*/
      OM0HS1B(); /* edit po number*/
    else
      set OM0HM001.OP1CUPO modified;
    end
  end


        /* edit po date*/

  OMAREC.OMAWDT = OP1REC.OP1CPODT; /* convert date*/
  OM0HSDF();

  if (OM0HM010.OP1CPODT != OMAREC.OMASDATE) /* po date changed*/
    OM0HS1C(); /* edit po date*/
  end


       /* edit prepaid insurance*/

  if (OM0HM010.OP1IPIND == "Y"
   || OM0HM010.OP1IPIND == "N"
   || OM0HM010.OP1IPIND == " ")
    OP1REC.OP1IPIND = OM0HM010.OP1IPIND; /* frmt op1rec*/
  else
    converseLib.validationFailed(540); /* invalid character - must be y or n*/
    OMAREC.OMAERR = "Y"; /* set error flag on*/
    set OM0HM010.OP1IPIND cursor, bold;
  end


       /* edit prepaid freight*/

  if (OM0HM010.OP1FTIND == "Y"
   || OM0HM010.OP1FTIND == "N"
   || OM0HM010.OP1FTIND == " ")
    OP1REC.OP1FTIND = OM0HM010.OP1FTIND; /* frmt op1rec*/
  else
    converseLib.validationFailed(540); /* invalid character - must be y or n*/
    OMAREC.OMAERR = "Y"; /* set error flag on*/
    set OM0HM010.OP1FTIND cursor, bold;
  end


  if (OMAREC.OMAERR == "N")
    OP1REC.OP1IFAMT = OM0HM010.OP1IFAMT; /* frmt op1rec*/
  end



      /* position the cursor*/

  if (OMAREC.OMAERR == "N")
    set OM0HM010.OP1CUPO cursor;
  end



   /* ************************************************************/
end // end OM0HS1A

// edit for cust op nbr required
Function OM0HS1B()
      /* ******************************************/
   /* edit the relationship between:*/
    /* - customer purchase order number (OP1CUPO)*/
    /* - order type (XOBCD -> XOVTBL.XOTCD -> XOTTBL.XOTATONF)*/
    /* - purchase order required code (YPOCD)*/

   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by ypocd - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/

   /* Orders that are not 'at once' orders are automatically*/
   /* placed on allocation hold until the requirements indicated*/
   /* by YPOCD have been met.  This is done in OP0J, and by this*/
   /* application when po number is removed.*/
   /* This sgrp edits 'at once' orders only for po# required*/
   /* and not present*/
      /* ******************************************/
  if (OP1REC.XOTCD in XOTTBL.XOTCD              
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y" /* this is an 'at once' order*/
   && KUCREC.KUCYPOFT != "00"                   /* order number is required*/
   && OM0HM010.OP1CUPO == " ")                  /* but it has been removed*/
    converseLib.validationFailed(653); /* so they will have to enter one*/
    OMAREC.OMAERR = "Y";
    set OM0HM010.OP1CUPO cursor, modified, bold;
  else
    set OM0HM010.OP1CUPO initialAttributes;
    OP1REC.OP1CUPO = OM0HM010.OP1CUPO;
  end
end // end OM0HS1B

// edit po date
Function OM0HS1C()



      /* *********************************************************/
      /* * this statement group edits the po date field.        **/
      /* *********************************************************/


      /* edit/save po date*/


  if (OM0HM010.OP1CPODT == "MMDDYY  " /* if zero or not entered*/
   || OM0HM010.OP1CPODT == "MM-DD-YY" 
   || OM0HM010.OP1CPODT == " "        
   || OM0HM010.OP1CPODT == 0)        
    OM0HM010.OP1CPODT = 0;
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(539);
    set OM0HM010.OP1CPODT cursor, modified, bold;
    return;
  end


      /* edit non-zero po date*/


  set TA2REC empty;

  OM0HW01.OM0HWDT = OM0HM010.OP1CPODT;
  if (OM0HW01.OM0HWHP2 != "-") /* received date in mmddyy format*/
    TA2REC.TA2GRGA = OM0HM010.OP1CPODT;
     /* reformat date to mm-dd-yy format for display*/
    OMAREC.OMADATE = OM0HM010.OP1CPODT;
    OMAREC.OMASMMDT = OMAREC.OMAMMDT;
    OMAREC.OMASYYDT = OMAREC.OMAYYDT;
    OMAREC.OMASDDDT = OMAREC.OMADDDT;
    OM0HM010.OP1CPODT = OMAREC.OMASDATE;
  else /* ; entered date in mm-dd-yy format*/
    OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
    OMAREC.OMADDDT = OM0HW01.OM0HWDD;
    OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
    TA2REC.TA2GRGA = OMAREC.OMADATE;
  end


  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(539); /* date received is not a valid date*/
    set OM0HM010.OP1CPODT cursor, modified, bold;
    return;
  end



      /* save po date and set field attribute*/

  OP1REC.OP1CPODT = TA2REC.TA2GRGGN; /* save po date*/
  set OM0HM010.OP1CPODT initialAttributes;



   /* *************************************************************/
end // end OM0HS1C

// get cust/gpc rec for new cust
Function OM0HS1D()



       /* *******************************************************/
       /* * this statement group reads the customer/DEPT record**/
       /* * (dcust.vdept001). Edit is done even if field is not**/
       /* * modified - since conversion may have convereted to **/
       /* * AN INVALID DEPT.                                   **/
       /* *******************************************************/



       /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
  TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
  TA1REC.TA1TBLKE = KUJREC.KUJGRP; /* table key*/
  TA1REC.TA1LOCAT[3] = "OM0HS46"; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0290";



       /* read the customer/gpc (vcust001) record*/

  KUJREC.KUCCOID = OP1REC.KUCCOID;
  KUJREC.XNXCD = OM0HM001.OM0HMDEP;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(670); /* customer is not valid*/
      set OM0HM001.OM0HMDEP cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    else
      XSOPS02(); /* abend routine*/
    end
  end

end // end OM0HS1D

// update special label
Function OM0HS20()



       /* *******************************************************/
       /* * this statement checks to see if a label is being   **/
       /* * modified or a   new label is being entered         **/
       /* * if a label is being modified                       **/
       /* **   updates the label                               **/
       /* * if it is being entered                             **/
       /* *    writes new label to the dorder.vtext001 table   **/
       /* *******************************************************/



  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = "L"; /* instruction*/
  OP4REC.OP4TRSEQ = OM0HW01.OM0HWLSQ; /* load seq number*/

  call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};


       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    OM0HS21(); /* update label*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0HS22(); /* write new one*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
      TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OM0HS20"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02(); /* abend routine*/
    end
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* ************************************************************/
end // end OM0HS20

// update existing label
Function OM0HS21()



       /* *******************************************************/
       /* * this statement groups checks to see if a label is  **/
       /* * erased or modified                                 **/
       /* * if the label is erased                             **/
       /* *   delete label                                     **/
       /* * else                                               **/
       /* *   update label                                     **/
       /* *******************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
  TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OM0HS21 "; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0470  ";
  OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
  OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
  OM0HW01.OM0HWNOI = OP1REC.OP1NORID;


       /* load keys*/

  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = "L";
  OP4REC.OP4TRSEQ = OM0HW01.OM0HWLSQ;



  if (OM0HM001.OM0HMLBL == " ") /* label was blanked out*/
    call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0HW01.OM0HWLC = OM0HW01.OM0HWLC - 1;
    else
      TA1REC.TA1LOCAT[1] = "D";
      OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
      OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
      XSOPS02(); /* abend routine*/
    end
  else
    OP4REC.OP4TXT = OM0HM001.OM0HMLBL;
    OP4REC.OP4TXTOF = "Y";
    OP4REC.ZZZCHGDT = OMAREC.OMACDT;
    OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
    OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
    OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
    OP4REC.ZZZCHGTM = OM0HW01.OM0HWT2;

    call "IO0470" ("U ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(330); /* someone else updated record*/
        OM0HW01.OM0HWUEF = "Y";
        exit stack;
      else
        TA1REC.TA1LOCAT[1] = "U";
        OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
        OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
        XSOPS02(); /* abend reoutine*/
      end
    end
  end



  if (OM0HW01.OM0HWLC <= 0)
    OP1REC.OP1SPLBF = "N"; /* reset the op1rec special lable fl*/
  end

   /* ********************************************************/
end // end OM0HS21

// write new label
Function OM0HS22()



      /* ********************************************************/
      /* * this statement group writes a new special label     **/
      /* * record to the dorder.vtext001 table                 **/
      /* ********************************************************/


  if (OM0HM001.OM0HMLBL == " ")
     /* next sentence*/
  else
    OP4REC.OP4KEY = OP1REC.OP1KEY;
    OP4REC.OP4TRTYP = "L";
    OP4REC.OP4TRSEQ = 1;
    OP4REC.OP4TXT = OM0HM001.OM0HMLBL;
    OP4REC.OP4TXTOF = "N";
    OP4REC.ZZZCHGDT = OMAREC.OMACDT;

         /* reformat time to move to the record*/

    OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
    OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
    OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
    OP4REC.ZZZCHGTM = OM0HW01.OM0HWT2;

    call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

         /* check db2 return code*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OP1REC.OP1SPLBF = "Y"; /* new op4rec is written*/
      OM0HW01.OM0HWLC = OM0HW01.OM0HWLC + 1;
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
      TA1REC.TA1LOCAT[3] = "OM0HS22"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0470";
      OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
      OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
      OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
      OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
      OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* record key used*/
      XSOPS02();
    end
  end

  if (OM0HW01.OM0HWLC > 0)
    OP1REC.OP1SPLBF = "Y"; /* set the op1rec special label flag*/
  else
    OP1REC.OP1SPLBF = "N";
  end


   /* ************************************************************/
end // end OM0HS22

// edit comp number
Function OM0HS24()
   /* This statement group edits the comp number.  The comp*/
   /* number is saved if it passes all the edits.*/


   /* A comp number is required for NIL sample orders.*/

  if (OM0HM001.OP1CMPNB == 0)
    if (OP1REC.XDVCD == "02"
     && OM0HM001.XOBCD == "S1")
      OMAREC.OMAERR = "Y"; /* Set error flag*/
      converseLib.validationFailed(541); /* Comp number is required for order*/
      set OM0HM001.OP1CMPNB cursor, modified, bold;
      return;
    end
  end



   /* If there is a comp number, see if it is an active company*/
   /* with an account type of in-house.*/

  if (OM0HM001.OP1CMPNB != 0)

     /* Get the company record for the comp.*/
    OM0HSC1();

    if (SQLCA.VAGen_SQLCODE == 0)

       /* Edit company record for comp.*/
      OM0HSC2();

       /* Return if errors were found.*/
      if (OMAREC.OMAERR == "Y")
        return;
      end

    else
        /* Company record was not found.*/
      converseLib.validationFailed(542); /* Comp number not found.*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OP1CMPNB cursor, modified, bold;
      return;
    end
  end



   /* Comp numbers for NIL orders must have a customer record*/
   /* for the GPC of the order.  This check is only done if*/
   /* there is a comp number.*/

  if (OM0HM001.OP1CMPNB != 0)
    if (OP1REC.XDVCD == "02")

       /* Get the customer record for the comp number.*/

      OM0HS2A();

      if (SQLCA.VAGen_SQLCODE == 0) /* Customer record was found.*/

         /* See if the customer record is active.*/

        if (KUNREC.XXXSTAT != "A")
          converseLib.validationFailed(553); /* Comp invalid for gpc of order*/
          OMAREC.OMAERR = "Y";
          set OM0HM001.OP1CMPNB cursor, modified, bold;
          return;
        end
      else
         /* Customer record was not found*/
        converseLib.validationFailed(553); /* Comp invalid for gpc of order*/
        OMAREC.OMAERR = "Y";
        set OM0HM001.OP1CMPNB cursor, modified, bold;
        return;
      end
    end
  end



   /* Changing the comp number on NIL orders may cause the*/
   /* pricing to be wrong.  OM0H does not do repricing;*/
   /* therefore, a warning message is given to the user*/
   /* when the comp number is changed.*/

  if (OP1REC.XDVCD == "02"                 /* NIL division.*/
   && OM0HM001.OP1CMPNB != OP1REC.OP1CMPNB /* Comp really changed.*/
   && OM0HM001.XOBCD != "S1")              /* Not a NIL sample order.*/

     /* 3/27/91 kucrec is read in om0h005 from om0hs96*/

    if (KUCREC.XAUCD == "31" /* Order is for Nike exports*/
     || KUCREC.XAUCD == "32") /* or NIL independent distr.*/
      converseLib.validationFailed(546); /* Prices may be wrong.*/
      OM0HW01.OM0HW546 = "Y"; /* Flag to trigger message.*/
    end
  end


end // end OM0HS24

// update special instruction
Function OM0HS25()



       /* ********************************************************/
       /* * if the entered department is not valid,             **/
       /* * the special instruction will not be updated         **/
       /* ********************************************************/


  if (OM0HM001.XNDCD is modified)
    if (OM0HM001.XNDCD == " ")
      if (OM0HM001.OM0HMINT == " ")
        OM0HW01.OM0HWIMF = "Y";
        set OM0HM001.XNDCD initialAttributes;
      else
        converseLib.validationFailed(080); /* nike dept is not valid*/
        set OM0HM001.XNDCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
      end
    else
      if (OM0HM001.XNDCD in XNDTBL.XNDCD
       && XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set OM0HM001.XNDCD initialAttributes;
        OM0HW01.OM0HWIMF = "Y";
      else
        converseLib.validationFailed(080); /* nike dept is not valid*/
        set OM0HM001.XNDCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        return;
      end
    end
  end


  if (OM0HM001.OM0HMINT is modified)
    OM0HW01.OM0HWIMF = "Y"; /* set instruction modified flag*/
  end



   /* ********************************************************/
end // end OM0HS25

// update instruction table
Function OM0HS26()



       /* *******************************************************/
       /* * this statement group updates the existing special  **/
       /* * instruction of an order                            **/
       /* *******************************************************/


       /* initialize the abend screen*/

  TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
  TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OM0HS26 "; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0470  ";
  OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
  OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
  OM0HW01.OM0HWNOI = OP1REC.OP1NORID;



  if (OM0HM001.OM0HMINT == " ")
    call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes}; /* delete text rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0HW01.OM0HWIC = OM0HW01.OM0HWIC - 1;
      set OM0HM001.XNDCD initialAttributes;
      set OM0HM001.OM0HMINT initialAttributes;
    else
      TA1REC.TA1LOCAT[1] = "D";
      OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
      OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
      XSOPS02(); /* abend routine*/
    end
  else
    if (OM0HM001.XNDCD in XNDTBL.XNDCD
     && XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set OM0HM001.XNDCD initialAttributes;
      OP4REC.OP4TXT = OM0HM001.OM0HMINT;
      OP4REC.OP4TXTOF = "Y";
      OP4REC.XNDCD = OM0HM001.XNDCD;
      OP4REC.ZZZCHGDT = OMAREC.OMACDT;
      OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
      OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
      OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
      OP4REC.ZZZCHGTM = OM0HW01.OM0HWT2;

      call "IO0470" ("U ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence - record rewritten*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(330); /* someone else updated the rec*/
          OM0HW01.OM0HWUEF = "Y"; /* set the update err flag*/
          exit stack;
        else
          TA1REC.TA1LOCAT[1] = "U";
          OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
          OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
          XSOPS02(); /* abend routine*/
        end
      end
    else
      converseLib.validationFailed(080); /* nike dept is not valid*/
      set OM0HM001.XNDCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


  if (OM0HW01.OM0HWIC <= 0)
    OP1REC.OP1SPINF = "N"; /* reset the more sp instr. flag*/
  end



   /* ************************************************************/
end // end OM0HS26

// write new special instruction
Function OM0HS27()



       /* *******************************************************/
       /* * this statement group writes a new special          **/
       /* * instruction to the dorder.vtext001 table           **/
       /* *******************************************************/


  if (OM0HM001.OM0HMINT == " ")
    set OM0HM001.XNDCD initialAttributes;
  else
    if (OM0HM001.XNDCD in XNDTBL.XNDCD
     && XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set OM0HM001.XNDCD initialAttributes;
      set OM0HM001.OM0HMINT initialAttributes;
      OP4REC.OP4KEY = OP1REC.OP1KEY;
      OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
      OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
      OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
      OP4REC.OP4TRTYP = "I";
      OP4REC.OP4TRSEQ = 1;
      OP4REC.OP4TXT = OM0HM001.OM0HMINT;
      OP4REC.OP4TXTOF = "N";
      OP4REC.XNDCD = OM0HM001.XNDCD;
      OP4REC.ZZZCHGDT = OMAREC.OMACDT;

           /* reformat time to move to the record*/

      OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
      OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
      OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
      OP4REC.ZZZCHGTM = OM0HW01.OM0HWT2;

      call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

           /* check db2 return code*/

      if (SQLCA.VAGen_SQLCODE == 0)
        OP1REC.OP1SPINF = "Y"; /* new op4rec is written*/
        OM0HW01.OM0HWIC = OM0HW01.OM0HWIC + 1;
      else

        if (SQLCA.VAGen_SQLCODE == -803) /* trying to add duplicate*/
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(489); /* entry already exists*/
          OM0HSIN();
          exit stack;
        else
          TA1REC.TA1PGMNM = "OM0H";
          TA1REC.TA1LOCAT[1] = "A";
          TA1REC.TA1LOCAT[2] = COMMAREA.CACURRAP;
          TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
          TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
          OM0HW01.OM0HWTK1 = OP4REC.OP4TRSEQ;
          OM0HW01.OM0HWTK3 = OP4REC.OP4TRTYP;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* record key used*/
          TA1REC.TA1LOCAT[3] = "OM0HS27 "; /* statement group*/
          TA1REC.TA1LOCAT[4] = "IO0470  ";
          XSOPS02(); /* abend routine*/
        end
      end

    else
      converseLib.validationFailed(080); /* nike dept is not valid*/
      set OM0HM001.XNDCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value



  if (OM0HW01.OM0HWIC > 0)
    OP1REC.OP1SPINF = "Y";
  else
    OP1REC.OP1SPINF = "N";
  end



   /* ************************************************************/
end // end OM0HS27

// edit order class
Function OM0HS28()



       /* *******************************************************/
       /* * this statement group edits order class             **/
       /* *******************************************************/


    /* hang onto your hat----------*/
    /* if International and base ot = 's1':*/
    /* order class can go from blank  to  'as'*/
    /* can go from 'as'   to  anything but 'tr' or 'au'*/
    /* can go from 'tr'   to  'au'*/
    /* CANNOT change 'au'*/
    /* 'as' = airborne sample order, ready to be transmitted*/
    /* 'tr' = transmitted airborne sample order*/
    /* 'au' = updated transmitted airborne sample order*/
    /* this order class will signal to airborne*/
    /* that an update has been made to the order*/


  if (OP1REC.XDVCD == "02" /* international*/
   && OP1REC.XOBCD == "S1") /* base ot*/
    if (OP1REC.XOCCD == "  ") /* record order class*/
      if (OM0HM001.XOCCD == "  " /* map order class*/
       || OM0HM001.XOCCD == "AS") /* map order class*/
        /* \* next sentence*/
      else
        converseLib.validationFailed(803); /* order class not valid*/
        set OM0HM001.XOCCD cursor, modified, bold; /* for order*/
        OMAREC.OMAERR = "Y";
        return;
      end
    else
      if (OP1REC.XOCCD == "AS") /* record order class*/
        if (OM0HM001.XOCCD == "TR" /* map order class*/
         || OM0HM001.XOCCD == "AU") /* map order class*/
          converseLib.validationFailed(803); /* order class not valid*/
          set OM0HM001.XOCCD cursor, modified, bold; /* for order*/
          OMAREC.OMAERR = "Y";
          return;
        end
      else
        if (OP1REC.XOCCD == "TR") /* record order class*/
          if (OM0HM001.XOCCD == "TR" /* map order class*/
           || OM0HM001.XOCCD == "AU") /* map order class*/
            /* \* next sentence*/
          else
            converseLib.validationFailed(803); /* order class not valid*/
            set OM0HM001.XOCCD cursor, modified, bold; /* for order*/
            OMAREC.OMAERR = "Y";
            return;
          end
        else
          if (OP1REC.XOCCD == "AU" /* record order class*/
           && OM0HM001.XOCCD != "AU") /* map order class*/
            converseLib.validationFailed(803); /* order class not valid*/
            set OM0HM001.XOCCD cursor, modified, bold; /* for order*/
            OMAREC.OMAERR = "Y";
            return;
          end
        end
      end
    end
  end


       /* ' ' is ok*/

  if (OM0HM001.XOCCD == " ")
    set OM0HM001.XOCCD initialAttributes;
    OM0HM001.XOCABRV = " ";
    OM0HW01.XOCPROPF = " ";
    OM0HW01.XOCFUTRF = " ";
    OP1REC.XOCCD = " ";
    return;
  end



  if (OM0HM001.XOCCD in XOCTBL.XOCCD
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
    OM0HW01.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex];
    OM0HW01.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex];
    set OM0HM001.XOCCD initialAttributes;
  else
    converseLib.validationFailed(020); /* order class is not valid*/
    set OM0HM001.XOCCD cursor, modified, bold;
    OM0HM001.XOCABRV = " ";
    OMAREC.OMAERR = "Y";
    return;
  end


  if (OP1REC.XDVCD == "02") /* international order*/
    if (OP1REC.XOCCD != "IN" /* order class not 'international'*/
     && OM0HM001.XOCCD == "IN") /* and trying to change order class*/
      converseLib.validationFailed(786); /* can't make order class 'in'*/
      set OM0HM001.XOCCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end

end // end OM0HS28

// check picking header record
Function OM0HS29()
   /* ************************************************/
             /* call ophrec (picking header)*/
   /* checks record of order hdr for picking system.*/
   /* *************************************************/


  set SQLCA empty;
  set OPHREC empty;
  OPHREC.OP1CUOID = OP1REC.OP1CUOID; /* fill key fields*/
  OPHREC.OP1NORID = OP1REC.OP1NORID;
  OPHREC.XWHCD = OP1REC.XWHCD;

  call "IO1650" ("S ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* header found*/
   || SQLCA.VAGen_SQLCODE == -811) /* more than 1 header exists*/
    set OM0HM001.OM0HMSBD initialAttributes; /* reset attribute*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
      OMAREC.OMAERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(646);
      set OM0HM001.OM0HMSBD bold;
    else
      TA1REC.TA1DBASE = "DORDER"; /* db2 error*/
      TA1REC.TA1TBLVU = "VOPPKH01";
      OM0HW01.OM0HWCOI = OPHREC.OP1CUOID;
      OM0HW01.OM0HWNOI = OPHREC.OP1NORID;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
      TA1REC.TA1LOCAT[3] = "OM0HS29";
      TA1REC.TA1LOCAT[4] = "IO1650";
      XSOPS02(); /* abort program*/
    end
  end


end // end OM0HS29

// get comp's gpc record
Function OM0HS2A()
   /* Load the key of the customer record with the comp number.*/

  KUNREC.KUCCOID = OM0HM001.OP1CMPNB; /* Company*/
  KUNREC.KUMSTRID = 0; /* Store*/
  KUNREC.XNXCD = 0; /* Dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* GPC*/


   /* Get a specific customer record.*/

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if a DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1PGMNM = "OM0H    ";
    TA1REC.TA1MAP = "OM0HM001";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUST001";
    OM0HW01.OM0HWFC1 = OM0HM001.OP1CMPNB; /* Format company*/
    OM0HW01.OM0HWFC2 = 0; /* Format store*/
    OM0HW01.OM0HWFC3 = 0; /* Format dept*/
    OM0HW01.OM0HWFC4 = OP1REC.XGPCD; /* Format GPC*/
    TA1REC.TA1TBLKE = OM0HW01.OM0HWFCU; /* Record key*/
    TA1REC.TA1LOCAT[1] = "OM0H015 ";
    TA1REC.TA1LOCAT[2] = "OM0HS2A ";
    TA1REC.TA1LOCAT[3] = "IO0280  ";
    TA1REC.TA1LOCAT[4] = "S       ";
    XSOPS02();
  end
end // end OM0HS2A

// validate agency/customer
Function OM0HS30()



          /* agency customer edit*/


  set SM1REC empty;
  set TA1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMXOM cursor, modified, bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMXOM cursor, modified, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0HS30 ";
      TA1REC.TA1LOCAT[3] = "IO0050  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0HM001";
      TA1REC.TA1DBASE = "DSLSMN  ";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      XSOPS02(); /* abort*/
    end
  end



end // end OM0HS30

// edit direct ship code
Function OM0HS35()



       /* *******************************************************/
       /* * this statement group validates the direct ship code**/
       /* * and gets the direct ship abbreviated desc for      **/
       /* * display                                            **/
       /* *******************************************************/

    /* EDIT DIRECT SHIP code and percentage*/

  if (OM0HM001.OM0HWDPC >= "0")
  /* next sentence*/
  else
    if (OM0HM001.OM0HWDPC == " ")
  /* next sentence*/
    else
      set OM0HM001.OM0HWDPC cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(742); /* direct ship pct is invalid*/
      return;
    end
  end

  OM0HW01.OM0HWDPC = OM0HM001.OM0HWDPC;
  if (OM0HM001.XDSCD in XDSTBL.XDSCD
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    OM0HW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex];
  else
    OM0HM001.XDSABRV = "UNKNWN";
    set OM0HM001.XDSCD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(074); /* direct ship code is invalid or*/
    return;
  end



  if (OM0HM001.XDSCD != " " /* changing from space to value*/
   && OP1REC.XDSCD == " ")  /* changing from space to value*/
    if (OM0HM001.OM0HWDPC == " ") /* has percent been entered?*/
      if (OP1REC.XOTCD == "01" /* FTWR FUT 1*/
       || OP1REC.XOTCD == "02" /* FTWR FUT 2*/
       || OP1REC.XOTCD == "84") /* NATL ACCTS FUT 1*/
        OM0HW01.OM0HWDPC = 1; /* special percent*/
        OM0HM001.OM0HWDPC = OM0HW01.OM0HWDPC;
      else
        OM0HW01.OM0HWDPC = XDSTBL.XDSPCT[sysVar.arrayIndex]; /* no, use default*/
        OM0HM001.OM0HWDPC = OM0HW01.OM0HWDPC; /* no, use default*/
      end
    else
      OM0HS3X(); /* yes,edit and use entered percent*/
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end



  if (OM0HM001.XDSCD != " " /* changing from value to another value*/
   && OP1REC.XDSCD != " ")  /* changing from value to another value*/
    if (OM0HM001.OM0HWDPC == " ") /* but pct is not entered*/
      if (OP1REC.XOTCD == "01" /* FTWR FUT 1*/
       || OP1REC.XOTCD == "02" /* FTWR FUT 2*/
       || OP1REC.XOTCD == "84") /* NATL ACCTS FUT 1*/
        OM0HW01.OM0HWDPC = 1; /* special percent*/
        OM0HM001.OM0HWDPC = OM0HW01.OM0HWDPC;
      else
        OM0HW01.OM0HWDPC = XDSTBL.XDSPCT[sysVar.arrayIndex]; /* no, use default*/
        OM0HM001.OM0HWDPC = OM0HW01.OM0HWDPC; /* no, use default*/
      end
    else
      OM0HS3X(); /* yes,edit and use entered percent*/
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end



  if (OM0HM001.XDSCD == " " /* changing from value to space*/
   && OP1REC.XDSCD != " ")  /* changing from value to space*/
    OM0HW01.XDSWHSEF = "Y"; /* set warehouse flag*/
    OM0HM001.OM0HWDPC = " "; /* blank out screen*/
    OM0HW01.OM0HWDPC = 0; /* but move zero to database*/
  end



  if (OM0HM001.XDSCD == " " /* changing from space to space*/
   && OP1REC.XDSCD == " ")  /* changing from space to space*/
    if (OM0HM001.OM0HWDPC > "0") /* but pct is entered*/
      set OM0HM001.OM0HWDPC cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(737); /* must enter direct ship code if*/
      return; /* percent is entered*/
    end
  end

   /* CANADA 07/19/95*/

  if (OM0HW01.XDSWHSEF == "N") /* CANA warehouse code not required*/
    if (OM0HM001.XWHCD != " ") /* CANA warehouse is populated*/
      set OM0HM001.XWHCD cursor, modified, bold; /* CANA*/
      converseLib.validationFailed(336); /* CANA change warehouse to blank*/
      OMAREC.OMAERR = "Y"; /* CANA*/
      return; /* CANA*/
    end /* CANA*/
  else /* CANA warehouse code is required*/
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA Canadian order*/
      if (OM0HM001.XWHCD != "42") /* CANA warehouse is not 42*/
        set OM0HM001.XWHCD cursor, modified, bold; /* CANA*/
        converseLib.validationFailed(897); /* CANA warehouse must be 42*/
        OMAREC.OMAERR = "Y"; /* CANA*/
        return; /* CANA*/
      end /* CANA*/
    else /* CANA*/
      if (OM0HM001.XWHCD == " ") /* CANA*/
        set OM0HM001.XWHCD cursor, modified, bold; /* CANA*/
        converseLib.validationFailed(098); /* CANA whse is required for this ds*/
                                   /* code*/
        OMAREC.OMAERR = "Y"; /* CANA*/
        return; /* CANA*/
      else /* CANA*/
        if (OM0HM001.XWHCD == "42") /* CANA*/
          set OM0HM001.XWHCD cursor, modified, bold;
          converseLib.validationFailed(78); /* CANA warehouse is not valid*/
          OMAREC.OMAERR = "Y"; /* CANA*/
          return; /* CANA*/
        end /* CANA*/
      end /* CANA*/
    end /* CANA*/
  end /* CANA*/

  if (OM0HW01.XDSWHSEF == "Y")
    if (OM0HM001.XWHCD == " ")
      set OM0HM001.XWHCD cursor, modified, bold;
      converseLib.validationFailed(098); /* whse is required for this ds code*/
      OMAREC.OMAERR = "Y";
      return;
    end
  end

  if (OM0HW01.XDSWHSEF == "N")
    if (OM0HM001.XWHCD != " ")
      set OM0HM001.XWHCD cursor, modified, bold;
      converseLib.validationFailed(336); /* change warehouse to blank*/
      OMAREC.OMAERR = "Y";
      return;
    end
  end

  if (OP1REC.XDVCD == "02" /* nil orders only*/
   && OP1REC.XOBCD == "F1" /* futures*/
   && OP1REC.XGPCD == "03") /* apparel*/
    if (OP1REC.XWHCD == "51" /* Memphis aprl whse*/
     || OP1REC.XWHCD == "25") /* NSG aprl whse*/
      if (OM0HM001.XDSCD == " ") /* ship from whse*/
        converseLib.validationFailed(592); /* this cust may require iseg numbers*/
        OMAREC.OMAERR = "Y"; /* trigger to reconverse msg*/
                                  /* for indirect ships*/
      else
        if (OM0HM001.XDSCD != " " /* now a direct ship*/
         && OP1REC.XDSCD == " ")  /* was ship from whse*/
          converseLib.validationFailed(594); /* iseg numbers may need*/
                                   /* to be removed from the products*/
          OMAREC.OMAERR = "Y"; /* trigger to redisplay msg*/
        end
      end
    end
  end

  OP1REC.XDSCD = OM0HM001.XDSCD;
  if (OM0HM001.OM0HWDPC >= "0"
   && OM0HM001.OM0HWDPC <= "9")
    OM0HW01.OM0HWDPC = OM0HM001.OM0HWDPC;
    OP1REC.OP-DIRSHP-DSCT-PCT = OM0HW01.OM0HWDPC;
  else
    OP1REC.OP-DIRSHP-DSCT-PCT = 0;
  end

   /* moved to om0hs10 04/13/98*/
   /* OM0HS-CHK-DIR-WHSE;  /* check direct ship/warehouse/pack cd rules*/

  set OM0HM001.XDSCD initialAttributes;
  set OM0HM001.OM0HWDPC initialAttributes;
  set OM0HM001.XDSABRV initialAttributes;
end // end OM0HS35

// edit backorder flag
Function OM0HS36()



       /* *******************************************************/
       /* * this statement group edit the backorder flag       **/
       /* *******************************************************/


  if (OM0HM001.OP1BOFL == "Y"
   || OM0HM001.OP1BOFL == "N")
    OP1REC.OP1BOFL = OM0HM001.OP1BOFL;
    set OM0HM001.OP1BOFL initialAttributes;
  else
    converseLib.validationFailed(077); /* correct res is 'y' or 'n'*/
    set OM0HM001.OP1BOFL cursor, modified, bold;
    OMAREC.OMAERR = "Y";
  end



   /* *******************************************************/
end // end OM0HS36

// edit callout date
Function OM0HS37()



       /* *******************************************************/
       /* * this statement group edits the callout date        **/
       /* *******************************************************/


       /* callout date must greater than today's date*/

  if (OM0HM001.OM0HMCLD == "MMDDYY  "
   || OM0HM001.OM0HMCLD == " "
   || OM0HM001.OM0HMCLD == "MM-DD-YY")
    OP1REC.OP1CALDT = 0;
    set OM0HM001.OM0HMCLD initialAttributes;
    return;
  else
    set TA2REC empty;
    OM0HW01.OM0HWDT = OM0HM001.OM0HMCLD;
    if (OM0HW01.OM0HWHP2 != "-") /* entered date in mmddyy format*/
      TA2REC.TA2GRGA = OM0HM001.OM0HMCLD;
       /* reformat date to mm-dd-yy for display*/
      OMAREC.OMADATE = OM0HM001.OM0HMCLD;
      OMAREC.OMASMMDT = OMAREC.OMAMMDT;
      OMAREC.OMASDDDT = OMAREC.OMADDDT;
      OMAREC.OMASYYDT = OMAREC.OMAYYDT;
      OM0HM001.OM0HMCLD = OMAREC.OMASDATE;
    else /* ; entered date in mm-dd-yy format*/
      OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
      OMAREC.OMADDDT = OM0HW01.OM0HWDD;
      OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
      TA2REC.TA2GRGA = OMAREC.OMADATE;
    end
  end


  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(071); /* callout date is not a valid date*/
    set OM0HM001.OM0HMCLD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
  else
    if (TA2REC.TA2GRGGN <= OMAREC.OMACDT)
      converseLib.validationFailed(071); /* callout date is not a valid date*/
      set OM0HM001.OM0HMCLD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    else
      set OM0HM001.OM0HMCLD initialAttributes;
      OP1REC.OP1CALDT = TA2REC.TA2GRGGN;
    end
  end



   /* ************************************************************/
end // end OM0HS37

// edit bulk order code
Function OM0HS38()

      /* *********************************************************/
      /* * this statement group edits bulk order code.          **/
      /* * bulk/draw order code can be changed only if order    **/
      /* * status is equal to open status and before draws are  **/
      /* *  made.                                               **/
      /* *********************************************************/



      /* bulk/draw order code defaults to 0 (regular order)*/

  if (OM0HM001.XBDCD == " ")
    OM0HM001.XBDCD = "0";
  end



   /* check to see if really changed.*/

  if (OM0HM001.XBDCD == OP1REC.XBDCD)
    set OM0HM001.XBDCD initialAttributes;
    return; /* skip edit*/
  end



  if (OP1REC.XBDCD == "8" /* bulk/draw code was an '8'*/
   && OM0HM001.XBDCD == "F") /* bulk/draw code now an 'f'*/
    OP1REC.XBDCD = OM0HM001.XBDCD;
    set OM0HM001.XBDCD initialAttributes;
    return;
  else
    if (OP1REC.XBDCD == "F" /* bulk/draw code was an 'f'*/
     && OM0HM001.XBDCD == "8") /* bulk/draw code now an '8'*/
      OP1REC.XBDCD = OM0HM001.XBDCD;
      set OM0HM001.XBDCD initialAttributes;
      return;
    else
      if (OP1REC.XBDCD == "8" /* bulk/draw code was an '8'*/
       || OP1REC.XBDCD == "F") /* bulk/draw code was an 'f'*/
        converseLib.validationFailed(635); /* bulk/draw order code is not valid*/
        OMAREC.OMAERR = "Y";
        set OM0HM001.XBDCD cursor, modified, bold;
        return;
      end
    end
  end


       /* check to see if the entered code is valid*/

  if (OM0HM001.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    set OM0HM001.XBDCD initialAttributes;
  else
    converseLib.validationFailed(295); /* bulk/draw order code is not valid*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.XBDCD cursor, modified, bold;
    return;
  end

      /* regular orders and bulk orders cannot be changed*/
      /* to draw orders*/

  if (OM0HW01.OM0HWBDF == "B" /* ; used to be a bulk order*/
   || OM0HW01.OM0HWBDF == "R") /* ; or a regular order*/
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* wanted to be draw order*/
      converseLib.validationFailed(292); /* ; can't change to draw orders*/
      set OM0HM001.XBDCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end


      /* can't change to a smart reservation bulk nor a flexible*/
      /* reservation bulk.*/

  if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* if new code is a bulk*/
   && XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y") /* and a set-aside*/
    converseLib.validationFailed(318);
    set OM0HM001.XBDCD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    return;
  end



    /* can change to bulk order only if order type allow.*/


  if (OM0HM001.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* if new code a bulk*/
      if (OM0HW01.XOTABULK == "N") /* ; and ot doesn't allow*/
        converseLib.validationFailed(73); /* ; bulk not allow for ot*/
        set OM0HM001.XBDCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        return;
      end
    end
  end



   /* check to see if order items have coor groups.*/
   /* can't change to bulk of does.*/

  if (OM0HM001.XBDCD in XBDTBL.XBDCD)
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* if new code a bulk*/
      OMAREC.OMASUB1 = 0;
      OM0HSEN(); /* check items for coor groups*/
      if (OMAREC.OMASUB1 > 0)
        converseLib.validationFailed(127); /* can't change to bulk with coor grps*/
        set OM0HM001.XBDCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        return;
      end
    end
  end


   /* can't change to bulk if partially shipped.*/

  if (OM0HM001.XBDCD == "1")
    OMAREC.OMASUB1 = 0;
    OM0HSEX(); /* check items for partial ship*/
    if (OMAREC.OMASUB1 > 0)
      converseLib.validationFailed(576); /* can't change to bulk when shipped*/
      set OM0HM001.XBDCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end


  OMAREC.OMASUB1 = 0;
  OM0HS93();
  if (OMAREC.OMASUB1 == 1)
    converseLib.validationFailed(319);
    set OM0HM001.XBDCD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    return;
  else
    if (OMAREC.OMASUB1 == 2)
      converseLib.validationFailed(320);
      set OM0HM001.XBDCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end

   /* can't change to blank bulk*/

  if (OM0HM001.XBDCD == "B")
    converseLib.validationFailed(639); /* can't change to blank bulk*/
    set OM0HM001.XBDCD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    return;
  end


  OP1REC.XBDCD = OM0HM001.XBDCD;


  OM0HS0A(); /* ; set bulk/draw flag*/



   /* ***********************************************************/
end // end OM0HS38

// edit taken by service rep
Function OM0HS39()



      /* *********************************************************/
      /* * this statement group edits the taken by service      **/
      /* * rep logon id.                                        **/
      /* *********************************************************/


      /* check for a null service rep logon id*/

  if (OM0HM001.OM0HMTBN == " ") /* check for null*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(046); /* taken-by service rep id is required*/
    set OM0HM001.OM0HMTBN cursor, modified, bold;
    return;
  end


      /* verify that the service rep id exists*/

  KUYREC.XXXUSRID = OM0HM001.OM0HMTBN; /* load key*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for not unique rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS39 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for found  rc*/
   && KUYREC.XXXSTAT == "A")   /* check for active id*/
    OP1REC.OP1TBREP = KUYREC.KUYSVRID;
                                   /* save taken-by service rep id*/
    set OM0HM001.OM0HMTBN normal;
  else
    OMAREC.OMAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(040); /* taken-by is not a valid rep id*/
    set OM0HM001.OM0HMTBN cursor, modified, bold;
  end



   /* *************************************************************/
end // end OM0HS39

// EDIT DIRECT SHIP CODE percent
Function OM0HS3X()

    /* EDIT DIRECT SHIP PERCENT*/

  if (OM0HM001.OM0HWDPC >= "0"
   && OM0HW01.OM0HWDPC <= XDSTBL.XDS-MAX-DIRSHP-PCT[sysVar.arrayIndex]
  ) /* next sentence*/
  else
    set OM0HM001.OM0HWDPC cursor, bold;
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(742); /**/
    return;
  end

end // end OM0HS3X
// edit received date
Function OM0HS40()



      /* *********************************************************/
      /* * this statement group edits the date received field.  **/
      /* *********************************************************/


      /* edit/save date received*/


  if (OM0HM001.OM0HMRCD == "MMDDYY  " /* if zero or not entered*/
   || OM0HM001.OM0HMRCD == "MM-DD-YY" 
   || OM0HM001.OM0HMRCD == " "        
   || OM0HM001.OM0HMRCD == 0)        
    OM0HM001.OM0HMRCD = 0;
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(041);
    set OM0HM001.OM0HMRCD cursor, modified, bold;
    return;
  end


      /* edit non-zero received date*/


  set TA2REC empty;

  OM0HW01.OM0HWDT = OM0HM001.OM0HMRCD;
  if (OM0HW01.OM0HWHP2 != "-") /* received date in mmddyy format*/
    TA2REC.TA2GRGA = OM0HM001.OM0HMRCD;
     /* reformat date to mm-dd-yy format for display*/
    OMAREC.OMADATE = OM0HM001.OM0HMRCD;
    OMAREC.OMASMMDT = OMAREC.OMAMMDT;
    OMAREC.OMASYYDT = OMAREC.OMAYYDT;
    OMAREC.OMASDDDT = OMAREC.OMADDDT;
    OM0HM001.OM0HMRCD = OMAREC.OMASDATE;
  else /* ; entered date in mm-dd-yy format*/
    OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
    OMAREC.OMADDDT = OM0HW01.OM0HWDD;
    OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
    TA2REC.TA2GRGA = OMAREC.OMADATE;
  end


  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(041); /* date received is not a valid date*/
    set OM0HM001.OM0HMRCD cursor, modified, bold;
    return;
  end


      /* insure that date received is not after today*/

  if (TA2REC.TA2GRGGN > OMAREC.OMACDT) /* received date after today?*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(041); /* date received is not a valid date*/
    set OM0HM001.OM0HMRCD cursor, modified, bold;
    return;
  end


      /* is date received more than two years before today?*/

  OMAREC.OMAWDT = OMAREC.OMACDT - 20000; /* wk-dt = curr-dt - 2 year*/
  if (TA2REC.TA2GRGGN < OMAREC.OMAWDT)
                                   /* check for lt one year previous*/
    OMAREC.OMAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(048); /* date received is more than one year previous*/
    set OM0HM001.OM0HMRCD cursor, modified, bold;
    return;
  end


      /* save date received and set field attribute*/

  OP1REC.OP1ORCDT = TA2REC.TA2GRGGN; /* save date received*/
  set OM0HM001.OM0HMRCD initialAttributes;



   /* *************************************************************/
end // end OM0HS40

// edit dont ship dates
Function OM0HS42()



       /* *******************************************************/
       /* * this statement group edits the dont-ship-before-dt,**/
       /* * dont-ship-after-date                               **/
       /* *******************************************************/



  OM0HW01.OM0HWDER = "N"; /* set date error flag*/
  set TA2REC empty;

       /* dont ship after date must not less than today's date*/

  if (OM0HM001.OM0HMSAD is modified
   || OM0HW-DNSA-CHNG-FL == "Y")
    if (OM0HM001.OM0HMSAD == "MMDDYY  "
     || OM0HM001.OM0HMSAD == " "
     || OM0HM001.OM0HMSAD == "MM-DD-YY")
      OP1REC.OP1DSADT = 0;
      set OM0HM001.OM0HMSAD initialAttributes;
    else
      OM0HW01.OM0HWDT = OM0HM001.OM0HMSAD;
      if (OM0HW01.OM0HWHP2 != "-") /* received date in mmddyy format*/
        TA2REC.TA2GRGA = OM0HM001.OM0HMSAD;
         /* reformat date to mm-dd-yy for display*/
        OMAREC.OMADATE = OM0HM001.OM0HMSAD;
        OMAREC.OMASMMDT = OMAREC.OMAMMDT;
        OMAREC.OMASDDDT = OMAREC.OMADDDT;
        OMAREC.OMASYYDT = OMAREC.OMAYYDT;
        OM0HM001.OM0HMSAD = OMAREC.OMASDATE;
      else /* ; entered date in mm-dd-yy format*/
        OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
        OMAREC.OMADDDT = OM0HW01.OM0HWDD;
        OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
        TA2REC.TA2GRGA = OMAREC.OMADATE;
      end
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "A";
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(070); /* dont ship after date is not a valid*/
                                   /* date*/
        set OM0HM001.OM0HMSAD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
      else
        if (TA2REC.TA2GRGGN < OMAREC.OMACDT)
          converseLib.validationFailed(070); /* d-s-after-date is not a valid date*/
          set OM0HM001.OM0HMSAD cursor, modified, bold;
          OMAREC.OMAERR = "Y";
          OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
        else
          OMAREC.OMAWDT = OMAREC.OMACDT + 20000; /* wk-dt=curr-dt+2 yrs*/
          if (TA2REC.TA2GRGGN > OMAREC.OMAWDT)
            OMAREC.OMAERR = "Y"; /* set err flag*/
            OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
            converseLib.validationFailed(070); /* more than one year in the future*/
            set OM0HM001.OM0HMSAD cursor, modified, bold;
          else
            if (OM0HW01.OP1DSADT == TA2REC.TA2GRGGN /* orig = new date*/
             || OP1REC.OP1DSADT == 0)               /* or no old date*/
              OP1REC.OP1DSADT = TA2REC.TA2GRGGN;
              set OM0HM001.OM0HMSAD initialAttributes;
              set OM0HM001.OP1ECANM initialAttributes;
            else
              if (OM0HM001.OP1ECANM == " ")
                OMAREC.OMAERR = "Y"; /* set err flag*/
                OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
                set OM0HM001.OM0HMSAD modified; /* force re-edit*/
                set OM0HM001.OM0HMANL initialAttributes;
                set OM0HM001.OP1ECANM cursor, modified, bold;
                converseLib.validationFailed(125); /* ext.by name required*/
              else
                OP1REC.OP1PCNDT = OP1REC.OP1DSADT;
                OP1REC.OP1DSADT = TA2REC.TA2GRGGN;
                OP1REC.OP1ECADT = OMAREC.OMACDT;
                OP1REC.OP1ECANM = OM0HM001.OP1ECANM;
                set OM0HM001.OM0HMSAD initialAttributes;
                set OM0HM001.OP1ECANM initialAttributes;
              end
            end
          end
        end
      end
    end
  end


       /* edit dont ship before date*/


  set TA2REC empty;

  if (OM0HM001.OM0HMSBD is modified
   || OM0HW-DNSB-CHNG-FL == "Y")
    if (OP1REC.XOTCD in XOTTBL.XOTCD)
      if (XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y")
        if (OP1REC.XSOCD == "12") /* let special sales around this*/
           /* next sentence*/
        else
          converseLib.validationFailed(388); /* cant change for at-once orders*/
          OMAREC.OMAERR = "Y";
          OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
          set OM0HM001.OM0HMSBD cursor, modified, bold;
          return;
        end
      end
    end
    if (OM0HM001.OM0HMSBD == "MMDDYY  "
     || OM0HM001.OM0HMSBD == " "
     || OM0HM001.OM0HMSBD == "MM-DD-YY")
      OP1REC.OP1DSBDT = 0;
         /* SET OM0HM001.OM0HMSBD DEFINED;  comment out 03/91*/
    else
      OM0HW01.OM0HWDT = OM0HM001.OM0HMSBD;
      if (OM0HW01.OM0HWHP2 != "-") /* received date in mmddyy format*/
        TA2REC.TA2GRGA = OM0HM001.OM0HMSBD;
         /* reformat date to mm-dd-yy for display*/
        OMAREC.OMADATE = OM0HM001.OM0HMSBD;
        OMAREC.OMASMMDT = OMAREC.OMAMMDT;
        OMAREC.OMASDDDT = OMAREC.OMADDDT;
        OMAREC.OMASYYDT = OMAREC.OMAYYDT;
        OM0HM001.OM0HMSBD = OMAREC.OMASDATE;
      else /* ; entered date in mm-dd-yy format*/
        OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
        OMAREC.OMADDDT = OM0HW01.OM0HWDD;
        OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
        TA2REC.TA2GRGA = OMAREC.OMADATE;
      end
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "A";
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(069); /* dont ship before date is not a valid*/
                                   /* date*/
        set OM0HM001.OM0HMSBD cursor, modified, bold;
        OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
        OMAREC.OMAERR = "Y";
      else
        if (TA2REC.TA2GRGGN < OMAREC.OMACDT) /* check for lt today's date*/
          OMAREC.OMAERR = "Y"; /* set err flag*/
          converseLib.validationFailed(069); /* d-s-b-dt is not a valid date*/
          set OM0HM001.OM0HMSBD cursor, modified, bold;
          OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
          OMAREC.OMAERR = "Y";
        else
          if (TA2REC.TA2DYWK == "SUNDAY"
           || TA2REC.TA2DYWK == "SATURDAY")
            OMAREC.OMAERR = "Y"; /* set err flag*/
            OM0HW01.OM0HWDER = "Y"; /* set date error flag*/
            converseLib.validationFailed(493); /* dnsb date falls on a wkend*/
            set OM0HM001.OM0HMSBD cursor, modified, bold;
          else
            OM0HS4D(); /* check special cust grp codes*/
            if (OMAREC.OMAERR == "Y") /* if err,(rec not found)*/
              return; /* return*/
            end
            if (OM0HW01.OM0HWSGC == "Y" /* if certain spc cust grp found*/
             || OP1REC.XSOCD == "07"    /* or certain sales offices*/
             || OP1REC.XSOCD == "08"    /* exclude from edit check*/
             || OP1REC.XSOCD == "12"    
             || OP1REC.XSOCD == "17")  
              OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
              /* SET OM0HM001.OM0HMSBD DEFINED; comment out 03/91*/
            else
              if (TA2REC.TA2GRGGN <= OP1REC.OP1CUNDT)
                OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
              else
                set TA2REC empty;
                TA2REC.TA2DBDFN = OP1REC.OP1CUNDT; /* NEED DATE*/
                OM0HW01.OM0HWDT = OM0HM001.OM0HMSBD;
                if (OM0HW01.OM0HWYY > 56)
                  OMAREC.OMAWCC = 19;
                else
                  OMAREC.OMAWCC = 20;
                end
                OMAREC.OMAWYY = OM0HW01.OM0HWYY;
                OMAREC.OMAWMM = OM0HW01.OM0HWMM;
                OMAREC.OMAWDD = OM0HW01.OM0HWDD;
                TA2REC.TA2DBDTN = OMAREC.OMAWDT; /* DSNB DATE*/
                TA2REC.TA2DTOPT = "DAYSDIFF";
                TA2REC.TA2RTNCD = 0;
                TA2REC.TA2GRTYP = "G";

                call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

                if (TA2REC.TA2RTNCD == 0)
                  if (TA2REC.TA2DBDDN > 21) /* DSNB date can't be > 21*/
                    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID /* authorized*/
                     && YOSTBL.YOSSPGFL[sysVar.arrayIndex] == "Y") /* to change*/
                      OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                    else
                      if (COMMAREA.CACHGFL == "Y"
                       && COMMAREA.CACLVL[1] == "Y") /* IS ALLOCATION MGR*/
                        OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                      else
                        OMAREC.OMAERR = "Y"; /* can't change dsnb*/
                        converseLib.validationFailed(633); /* send err msg*/
                        OMAREC.OMAWDT = OP1REC.OP1DSBDT;
                        OM0HSDF();
                        OM0HM001.OM0HMSBD = OMAREC.OMASDATE;
                        set OM0HM001.OM0HMSBD cursor, modified, bold;
                      end
                    end
                  else
                    OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                    /* SET OM0HM001.OM0HMSBD DEFINED; changed 3/91*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end


       /* dont-ship-after-date must equal or greater than*/
       /* dont-ship-before-date*/


  if (OM0HM001.OM0HMSAD == "MMDDYY  "
   || OM0HM001.OM0HMSAD == " "
   || OM0HM001.OM0HMSAD == "MM-DD-YY"
   || OM0HM001.OM0HMSBD == " "
   || OM0HM001.OM0HMSBD == "MMDDYY  "
   || OM0HM001.OM0HMSBD == "MM-DD-YY"
   || OM0HW01.OM0HWDER == "Y")
     /* next sentence*/
  else
    if (OP1REC.OP1DSBDT <= OP1REC.OP1DSADT)
         /* SET OM0HM001.OM0HMSBD DEFINED; comment out 3/91*/
      set OM0HM001.OM0HMSAD initialAttributes;
    else
      converseLib.validationFailed(099); /* dont-s-before-dt must not >*/
                                   /* d-s-after-dt*/
      set OM0HM001.OM0HMSBD cursor, modified, bold;
      set OM0HM001.OM0HMSAD modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end



   /* ************************************************************/
end // end OM0HS42

// edit sales program & disc %
Function OM0HS43()
       /* *******************************************************/
       /* *      edit sales program*/
       /* *******************************************************/

  OM0HW01.OM0HWNTF = "Y"; /* new terms & discounts flag*/
  OM0HW01.OM0HW-SP1ID-MODIFIED-FL = "Y";
  OM0HM001.OM0HMSQD = 0; /* reset discount %*/


   /* sales programs cannot be added to salesman orders*/

  if (OM0HM001.SP1ID != " ") /* if spgm added or changed*/
    sysVar.arrayIndex = 1;
    if (KUCREC.XAUCD in XAUTBL.XAUCD             /* if cust acct class code exists*/
     && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and code is active*/
     && XAUTBL.XAUSPGFL[sysVar.arrayIndex] == "N") /* and salespgm flag is NO*/
      OMAREC.OMAERR = "Y"; /* error*/
      converseLib.validationFailed(547); /* acct class not valid for spgm*/
      set OM0HM001.SP1ID modified, cursor, bold;
      return;
    end
  end


   /* if added or changed, make sure the new spgm is valid & active*/

  if (OM0HM001.SP1ID != " ") /* if spgm added or changed*/
    SP1REC.SP1ID = OM0HM001.SP1ID; /* load key*/
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod*/
    if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
     || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
      TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* key value*/
      TA1REC.TA1LOCAT[2] = "OM0HS43 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "IO0070  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[4] = "S       "; /* i/o mod option*/
      XSOPS02();
    end

      /* if not found or not active then error*/

    if (SQLCA.VAGen_SQLCODE == 0 /* if found*/
     && SP1REC.SP1STAT == "A")   /* and active, all ok*/
      OP1REC.SP1ID = OM0HM001.SP1ID; /* move to header*/
      OP1REC.SP6MDISC = 0; /* reset min discount %*/
      set OM0HM001.SP1ID initialAttributes;
    else
      OMAREC.OMAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(024); /* sales program id is not valid*/
      set OM0HM001.SP1ID cursor, modified, bold;
    end
  end

       /* if sales program removed, no edits are done until later*/
       /* at the item level*/

  if (OM0HM001.SP1ID == " ") /* sales program removed*/
    OP1REC.SP1ID = " ";
    OP1REC.SP6MDISC = 0; /* reset min discount %*/
    set OM0HM001.SP1ID initialAttributes;
  end


end // end OM0HS43

// edit warehouse
Function OM0HS44()



       /* ********************************************************/
       /* * this statement group validates the warehouse code   **/
       /* * and gets the warehouse abbreviated name for display **/
       /* ********************************************************/

   /* CANADA 07/19/95*/

  if (OM0HM001.XWHCD == " ")
    if (OM0HW01.XDSWHSEF == "Y")
      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA Canadian order*/
        converseLib.validationFailed(897); /* CANA warehouse must be 42*/
      else /* CANA*/
        converseLib.validationFailed(076); /* whse is a required field*/
      end /* CANA*/
      set OM0HM001.XWHCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;


           /* display warning if some products on order are*/
           /* one-warehouse models*/

    else
      if (OP1REC.OP1OWHMF == "Y")
        converseLib.validationFailed(364); /* warning - some prds were 1-whse*/
                                   /* models*/
      end
    end
  end



       /* order header gpc code must equal one of the 8 gpc*/
       /* codes for the warehouse*/


  if (OM0HM001.XWHCD == " ")
    OM0HM001.XWHSABRV = " ";
    OP1REC.XWHCD = OM0HM001.XWHCD;
  else
    if (OM0HM001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (OP1REC.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]
       || OP1REC.XGPCD == XWHTBL.XGPCD8[sysVar.arrayIndex])
        OM0HM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] != OM0HW01.XWHOWNGF)
          if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
            converseLib.validationFailed(103); /* owner group required*/
          else
            converseLib.validationFailed(101); /* owner group not valid for whse*/
          end
          set OM0HM001.XWHCD cursor, modified, bold;
          OMAREC.OMAERR = "Y";
        else
          OP1REC.XWHCD = OM0HM001.XWHCD;
        end
      else
        converseLib.validationFailed(078); /* warehouse is not valid*/
        set OM0HM001.XWHCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
      end
    else
      converseLib.validationFailed(078); /* warehouse is not valid*/
      set OM0HM001.XWHCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end


  if (OP1REC.XDVCD == "02") /* if nike international*/
    if (OM0HW01.XWHCD != "15" /* and ord hdr whse is not '15'*/
     && OM0HM001.XWHCD == "15") /* and tried to change to whse '15'*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(783); /* cannot change whse cd to '15'*/
      set OM0HM001.XWHCD cursor, modified, bold;
      return;
    end /**/
  end /* 11/19/92 schase*/

       /* if the warehouse is changing to 3,9, or 12*/
       /* mark it rush*/
   /* this code commented per sonia 01/11/88 tfox*/
   /* iF OMAREC.OMAERR EQ 'N';*/
   /* IF OM0HM001.XWHCD EQ '03';*/
     /* OR OM0HM001.XWHCD EQ '09';*/
     /* OR OM0HM001.XWHCD EQ '12';*/
     /* MOVE '20' TO OP1REC.XPPCD;*/
   /* END ;*/
   /* END ;*/

   /* update prepack with xwhcd if xwhcd has been changed*/

  if (OMAREC.OMAERR == "N")

    set OSNREC empty;
    set SQLCA empty;

    OSNREC.XWHCD = OM0HW01.XWHCD; /* orginal warehouse*/
    OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
    OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
    OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

    OM0HS-CHK-PREPK();

  end

   /* ************************************************************/
end // end OM0HS44

// edit customer
Function OM0HS45()



       /* *******************************************************/
       /* * this statement group validates the entered customer**/
       /* *******************************************************/


       /* set customer modified flag on*/

  OM0HW01.OM0HWCMF = "Y"; /* customer is being modified*/


       /* if customer is modified, terms and discounts have to*/
       /* be recalculated*/

  OM0HW01.OM0HWNTF = "Y"; /* new set of terms*/


       /* get the customer/gpc record for the new customer*/

  OM0HW01.OM0HWCUF = "N"; /* customer found flag*/
  OM0HS46(); /* get cust gpc record*/

  if (OM0HW01.OM0HWCUF == "Y") /* cust/gpc rec found*/
    set OM0HM001.OM0HMCCO initialAttributes;
    set OM0HM001.OM0HMSTR initialAttributes;
    set OM0HM001.OM0HMDEP initialAttributes;

    OP1REC.XNXCD = OM0HM001.OM0HMDEP;
    OP1REC.KUMSTRID = OM0HM001.OM0HMSTR; /* cust is valid*/

    OM0HSTN(); /* get cust store name*/
  else
    return;
  end



     /* customer status edit*/

  if (KUNREC.XXXSTAT == "A")
    /* next sentence*/
  else
    set OM0HM001.OM0HMSTR cursor, modified, bold;
    set OM0HM001.OM0HMDEP modified, bold;
    converseLib.validationFailed(33); /* customer is not valid*/
    OMAREC.OMAERR = "Y";
    return;
  end

   /* default minimum allocation percent*/

  OP1REC.KUNMAPCT = KUNREC.KUNMAPCT;

     /* customer company credit status edit*/

  KUCREC.KUCCOID = KUNREC.KUCCOID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HS-CHECK-CREDIT(); /* check for valid credit code*/
    if (OM0HW-XCC-STAT-FOUND == "Y") /* valid credit status*/
      set OM0HM001.OM0HMCCO initialAttributes;
      set OM0HM001.OM0HMSTR initialAttributes;
      set OM0HM001.OM0HMDEP initialAttributes;
    else /* invalid credit status*/
      set OM0HM001.OM0HMCCO bold;
      set OM0HM001.OM0HMSTR cursor, modified, bold;
      set OM0HM001.OM0HMDEP modified, bold;
      converseLib.validationFailed(33); /* cust id is not valid*/
      OMAREC.OMAERR = "Y";
      return;
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1TBLKE = KUCREC.KUCGRP;
    TA1REC.TA1LOCAT[3] = "OM0HS45";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSOPS02();
  end



     /* customer ship to address edit*/

  if (OP1REC.OP1SGPAO != "Y") /* ship to address override 'off'*/
    OP1REC.OP1SHAID = KUMREC.KUMSHAID;
    KULREC.KUCCOID = OP1REC.KUCCOID;
    KULREC.KULAAID = OP1REC.OP1SHAID;
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set OM0HM001.OM0HMSTR cursor, modified, bold;
        set OM0HM001.OM0HMDEP modified, bold;
        converseLib.validationFailed(340); /* shipto addr not valid, cannot chg*/
                                   /* cust*/
        OMAREC.OMAERR = "Y";
        return;
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = KULREC.KULGRP;
        TA1REC.TA1LOCAT[3] = "OM0HS85";
        TA1REC.TA1LOCAT[4] = "IO0170";
        XSOPS02();
      end
    end
  end



  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set OM0HM001.OM0HMSTR cursor, modified, bold;
      set OM0HM001.OM0HMDEP modified, bold;
      converseLib.validationFailed(342); /* * billto addr not valid, cannot chgcust*/
      OMAREC.OMAERR = "Y";
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1TBLKE = KULREC.KULGRP;
      TA1REC.TA1LOCAT[3] = "OM0HS85";
      TA1REC.TA1LOCAT[4] = "IO0170";
      XSOPS02();
    end
  end



     /* customer 1-time ship to address edit*/

  if (OP1REC.OP1SHAID == 0 /* ship to address id is 'empty'*/
   && OP1REC.OP11TMSF == "N") /* one-time ship flag is off*/
    set OM0HM001.OM0HMSTR cursor, modified, bold;
    set OM0HM001.OM0HMDEP modified, bold;
    converseLib.validationFailed(343); /* 1-time shpto is missing, cannot chg cust*/
    OMAREC.OMAERR = "Y";
    return;
  end


  OM0HW01.OM0HWCUV = "Y"; /* set valid cust flag*/


   /* ************************************************************/
end // end OM0HS45

// get cust/gpc rec for new cust
Function OM0HS46()



       /* *******************************************************/
       /* * this statement group reads the customer/gpc record **/
       /* * (dcust.vcust001). if the customer/gpc record is not**/
       /* * found, get the first gpc record for this customer  **/
       /* *******************************************************/



       /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* table key*/
  TA1REC.TA1LOCAT[3] = "OM0HS46"; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0280";



       /* read the customer/gpc (vcust001) record*/

  KUNREC.KUCCOID = OP1REC.KUCCOID;
  KUNREC.KUMSTRID = OM0HM001.OM0HMSTR;
  KUNREC.XNXCD = OM0HM001.OM0HMDEP;
  KUNREC.XGPCD = OP1REC.XGPCD;

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HW01.OM0HWCUF = "Y"; /* cust/gpc found*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      XSOPS02(); /* abend routine*/
    end
  end



       /* if not found, get first gpc record for the customer,*/
       /* if there are any*/

  if (SQLCA.VAGen_SQLCODE == 100)
    KUNREC.KUCCOID = OP1REC.KUCCOID;
    KUNREC.KUMSTRID = OM0HM001.OM0HMSTR;
    KUNREC.XNXCD = OM0HM001.OM0HMDEP;

    if (OP1REC.XGPCD == "02" /* footwear*/
     || OP1REC.XGPCD == "03") /* apparel*/
      KUNREC.XGPCD = OP1REC.XGPCD;
    else
      KUNREC.XGPCD = "**";
    end

    call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      XSOPS02(); /* abend routine*/
    end
  end


       /* get the first gpc record for the customer*/


  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HW01.OM0HWCUF = "Y"; /* cust/gpc found*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(033); /* customer is not valid*/
      set OM0HM001.OM0HMSTR cursor, modified, bold;
      set OM0HM001.OM0HMDEP modified, bold;
      OMAREC.OMAERR = "Y";
    else
      XSOPS02(); /* abend routine*/
    end
  end


  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


   /* ************************************************************/
end // end OM0HS46

// edit customer vs sales program
Function OM0HS47()



       /* *******************************************************/
       /* * edit the special customer group code.*/
       /* * if '**' is found then all customers qualify.*/
       /* *******************************************************/


      /* read sales program record*/

  SP1REC.SP1ID = OM0HM001.SP1ID; /* load key*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
    TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS47 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0070  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


       /* if sales program xsgcd eq '**' then all custs qualify*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11 /* not end of table*/
   && SP1REC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (SP1REC.XSGCD[sysVar.arrayIndex] == "**") /* if special code found*/
      return; /* customer qualifies*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


   /* 3/27/91 kucrec is read in om0h005 from om0hs96*/

      /* edit the customer company account class against*/
      /* the sales account type.  if a match is found, then*/
      /* the sales program is valid for the customer.*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XAUCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (KUCREC.XAUCD == SP1REC.XAUCD[sysVar.arrayIndex]) /* if acct code found*/
      return; /* customer qualifies*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


   /* if get here it means the specific customer/store/dept*/
   /* is being checked against the sales program.*/
   /* set a flag to indicate that the customer/store/dept of*/
   /* each suborder will have to be checked against the sales*/
   /* program if sales program is changed*/
   /* this is necessary because when the sales pgm is changed,*/
   /* the change applies to the entire order, not just the current*/
   /* suborder*/

  OM0HW01.OM0HW-CHK-SUBORDERS-FL = "Y"; /**/


      /* edit the customer or customer group against the sales pgm*/

  OM0HS4W();


   /* *************************************************************/
end // end OM0HS47

// check sp for specific customer
Function OM0HS48()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* first check to see if there are specific customers.*/
      /* if not, then we have an error.*/

  if (SP1REC.SP1CIND != "Y") /* no specific customers*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    if (OP1REC.OP1NORID == OM0HW01.OP1NORID) /* if the original suborder*/
      converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
      if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y")
        set OM0HM001.SP1ID cursor, modified, bold;
      end
      if (OM0HW01.OM0HWCMF == "Y")
        set OM0HM001.OM0HMSTR cursor, modified, bold;
        set OM0HM001.OM0HMDEP modified, bold;
      end
    else /* editing other suborders for spgm chg*/
      converseLib.validationFailed(727); /* spgm not valid for all custs on ord*/
      set OM0HM001.SP1ID cursor, modified, bold;
    end
    return;
  end


      /* access sales program customer records*/

  SP4REC.SP1ID = OP1REC.SP1ID; /* new spgm already in op1rec*/
  SP4REC.KUCCOID = OP1REC.KUCCOID; /* load key - cust company*/
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[2] = "OM0HS48 "; /* statement group*/
    TA1REC.TA1LOCAT[3] = "IO0100  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[4] = "SS      "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


      /* process returned answer set*/

      /* basis of selection below is that all 9's in any key*/
      /* means any (store, dept, or gpc depending on field).*/
      /* otherwise, a specific field value must match.*/
      /* note that the new store and department has already been*/
      /* moved to op1rec so we can compare with that rather than*/
      /* with the map field*/

  while (SQLCA.VAGen_SQLCODE == 0
   && OM0HW01.OM0HWCUV == "N") /* customer doesn't qualify*/
    OM0HS49(); /* get next answer set row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SP4REC.KUMSTRID == 9999 /* store ok ?*/
       || SP4REC.KUMSTRID == OP1REC.KUMSTRID)
        if (SP4REC.XNXCD == 99 /* dept OK ?*/
         || SP4REC.XNXCD == OP1REC.XNXCD)
          if (SP4REC.XGPCD == "99" /* gpc ok ?*/
           || SP4REC.XGPCD == KUNREC.XGPCD)
            OM0HW01.OM0HWCUV = "Y"; /* customer qualifies*/
          end
        end
      end
    end
  end



      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y")
      converseLib.validationFailed(727); /* spgm doesn't qualify for all custs*/
      set OM0HM001.SP1ID cursor, modified, bold;
    end
    if (OM0HW01.OM0HWCMF == "Y") /* if customer modified*/
      converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
      set OM0HM001.OM0HMSTR cursor, modified, bold;
      set OM0HM001.OM0HMDEP modified, bold;
    end
  end

  call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};


   /* *************************************************************/
end // end OM0HS48

// check sp for specific customer
Function OM0HS49()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* access slspgm customer record from answer set*/

  call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for answer set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS49 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end



   /* *************************************************************/
end // end OM0HS49

// check for special cust group
Function OM0HS4D()
       /* ********************************************************/
       /* * this statement group accesses the special customer  **/
       /* * group record and checks the XSG code.  Certain      **/
       /* * values are flagged as an exception to the DSNB edit **/
       /* ********************************************************/

  OM0HW01.OM0HWSGC = "N"; /* set up spec grp flag*/
  KUPREC.KUCCOID = OP1REC.KUCCOID; /* Load key: cust co*/
  KUPREC.KUMSTRID = OM0HM001.OM0HMSTR; /* cust store*/
  KUPREC.XNXCD = OM0HM001.OM0HMDEP; /* cust dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* gpc*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes}; /* I/O mod for inquiry*/

      /* check DB2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      return;
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
      TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OM0HS4D "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
      XSOPS02(); /* abend routine*/
    end
  end


  sysVar.arrayIndex = 1; /* use EZETST as subscript*/
  while (sysVar.arrayIndex <= 10) /* test positions 1 to 10*/
    if (OM0HW01.OM0HWSGC == "N") /* while flag is 'N'...*/
      if (KUPREC.XSGCD[sysVar.arrayIndex] == "MI"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "MB"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "12"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "BK"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AA"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AF")
        OM0HW01.OM0HWSGC = "Y";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    else
      sysVar.arrayIndex = 11;
    end
  end

   /* ************************************************************/
end // end OM0HS4D

// edit specific cust vs spgm
Function OM0HS4W()

      /* read the customer/gpc record (kunrec) for the current customer*/

  OM0HS4X();


      /* if the customer group indicator is off, then check*/
      /* for specific customer qualification.*/

  if (KUNREC.KUNCGIND != "Y")
    OM0HS48(); /* check specific customers*/
    return; /* get out*/
  end


      /* if the customer is part of a special customer group,*/
      /* then, access the special customer group record and*/
      /* check the xsg special customer group array.*/

  KUPREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust company*/
  KUPREC.KUMSTRID = OP1REC.KUMSTRID; /* load key - cust store*/
  KUPREC.XNXCD = OP1REC.XNXCD; /* load key - cust dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/
  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
    TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS4W "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


      /* if not found, then customer is not valid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    if (OP1REC.OP1NORID == OM0HW01.OP1NORID) /* if original suborder*/
      converseLib.validationFailed(043); /* cust special grp rec missing*/
      set OM0HM001.OM0HMSTR cursor, modified, bold;
      set OM0HM001.OM0HMDEP modified, bold;
      if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y")
        set OM0HM001.SP1ID modified, bold;
      end
    else /* we're editing other suborders*/
      converseLib.validationFailed(728); /* cust spec grp missing from order*/
      set OM0HM001.SP1ID cursor, modified, bold;
    end
    return;
  end


      /* edit the customer special account class against*/
      /* the sales program special account type.*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11 /* not end of table*/
   && KUPREC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    OMAREC.OMASUB = 1;
    while (OMAREC.OMASUB < 21 /* not end of table*/
     && SP1REC.XSGCD[OMASUB] > " ") /* not end active entries*/
      if (KUPREC.XSGCD[sysVar.arrayIndex] == SP1REC.XSGCD[OMASUB])
        OM0HW01.OM0HWCUV = "Y"; /* customer is valid*/
        return; /* if found then sales program ok*/
      end
      OMAREC.OMASUB = OMAREC.OMASUB + 1;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* if no match between the two tables, then check*/
      /* for specific customer qualification.*/

  OM0HS48(); /* check specific customers*/



   /* *************************************************************/
end // end OM0HS4W

// read cust/gpc for spgm
Function OM0HS4X()

       /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* table key*/
  TA1REC.TA1LOCAT[2] = "OM0HS4X"; /* statement group*/
  TA1REC.TA1LOCAT[3] = "IO0280";


       /* read the customer/gpc (vcust001) record*/

  KUNREC.KUCCOID = OP1REC.KUCCOID;
  KUNREC.KUMSTRID = OP1REC.KUMSTRID;
  KUNREC.XNXCD = OP1REC.XNXCD;
  KUNREC.XGPCD = OP1REC.XGPCD;

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[4] = "S     ";
      XSOPS02(); /* abend routine*/
    end
  end


       /* if not found, get first gpc record for the customer,*/
       /* if there are any*/

  KUNREC.KUCCOID = OP1REC.KUCCOID;
  KUNREC.KUMSTRID = OP1REC.KUMSTRID;
  KUNREC.XNXCD = OP1REC.XNXCD;

  if (OP1REC.XGPCD == "02" /* footwear*/
   || OP1REC.XGPCD == "03") /* apparel*/
    KUNREC.XGPCD = OP1REC.XGPCD;
  else
    KUNREC.XGPCD = "**";
  end

  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[4] = "SS    ";
    XSOPS02(); /* abend routine*/
  end

       /* get the first gpc record for the customer*/


  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[4] = "SN    ";
    XSOPS02(); /* abend routine*/
  end


  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


   /* ************************************************************/
end // end OM0HS4X

// edit for cust op nbr required
Function OM0HS50()
      /* ******************************************/
   /* edit the relationship between:*/
    /* - customer purchase order number (OP1CUPO)*/
    /* - order type (XOBCD -> XOVTBL.XOTCD -> XOTTBL.XOTATONF)*/
    /* - purchase order required code (YPOCD)*/

   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by ypocd - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/

   /* Orders that are not 'at once' orders are automatically*/
   /* placed on allocation hold until the requirements indicated*/
   /* by YPOCD have been met.  This is done in OP0J, and by this*/
   /* application when po number is removed.*/
   /* This sgrp edits 'at once' orders only for:*/
     /* - purchase order number only required and not entered*/
      /* ******************************************/

  if (OP1REC.XOTCD in XOTTBL.XOTCD              
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y" /* this is an 'at once' order*/
   && KUCREC.KUCYPOFT != "00"                   /* order number is required*/
   && OM0HM001.OP1CUPO == " ")                  /* but one wasn't entered*/
    converseLib.validationFailed(653); /* so they will have to enter one*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OP1CUPO cursor, modified, bold;
  else
    set OM0HM001.OP1CUPO initialAttributes;
    OP1REC.OP1CUPO = OM0HM001.OP1CUPO;
  end
end // end OM0HS50

// edit cancel reenter flag
Function OM0HS57()


       /* ******************************************************/
       /* * this statement group edits the cancel reenter flag**/
       /* ******************************************************/

     /* edit reenter flag for cancellation*/

  if (OM0HM001.OM0HMREF == "Y"
   || OM0HM001.OM0HMREF == "N")
     /* next sentence*/
  else
    set OM0HM001.OM0HMREF cursor, bold;
    OMAREC.OMAERR = "Y";
    OM0HW01.OM0HWCRF = "Y"; /* cancel reenter error*/
    if (OM0HM001.OM0HMREF == " ")
      converseLib.validationFailed(562); /* fld reqd - must enter y or n*/
    else
      converseLib.validationFailed(563); /* invld char - must be y or n*/
    end
  end



   /* *************************************************************/
end // end OM0HS57

// edit cancel reason code
Function OM0HS59()


       /* ****************************************************/
       /* * this statement group edits the cancel reason code*/
       /* ****************************************************/


  if (OM0HM001.OM0HMXOM in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      OM0HM001.OM0HMABR = XOMTBL.XOMABRV[sysVar.arrayIndex];
      set OM0HM001.OM0HMXOM initialAttributes;
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* okay to rebook*/
        OM0HM001.OM0HMABR = XOMTBL.XOMABRV[sysVar.arrayIndex];
        set OM0HM001.OM0HMXOM initialAttributes;
        if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
         && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
          if (OP1REC.XBDCD == "0" /* reg order*/
           || OP1REC.XBDCD == "1" /* cust bulk*/
           || OP1REC.XBDCD == "5") /* cust draw*/

            OM0HS30(); /* validate agcy/customer*/

            if (OMAREC.OMAERR == "Y") /* error found*/
              return; /* go redisplay map*/
              /* 8/6/91 no longer checking 45 day cancel window for rebook*/
              /* leave this code in place until the dust settles - when*/
              /* removing this commented out code also deinstall om0hs32.*/
              /* ELSE                  ; xomcd okay for rebooking*/
              /* OM0HS32             ; check rebook 45 day cancel window*/
              /* IF OMAREC.OMAERR EQ 'Y'    ; error found*/
                /* SET OM0HM001.OM0HMXOM CURSOR,MODIFIED,BRIGHT;*/
                /* EZERTN            ; go redisplay map*/
              /* END ;*/
            end
          else
            converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
            OMAREC.OMAERR = "Y";
            set OM0HM001.OM0HMXOM cursor, modified, bold;
            return;
          end
        else
          converseLib.validationFailed(396); /* can not rebook non-futures*/
          OMAREC.OMAERR = "Y";
          set OM0HM001.OM0HMXOM cursor, modified, bold;
          return;
        end
      else /* xomcd is valid for cancel*/
        OM0HM001.OM0HMABR = XOMTBL.XOMABRV[sysVar.arrayIndex];
        set OM0HM001.OM0HMXOM initialAttributes;
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMXOM cursor, modified, bold;
      return;
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OM0HMXOM cursor, modified, bold;
    return;
  end




   /* *************************************************************/
end // end OM0HS59

// edit spgm across suborders
Function OM0HS62()

       /* read all suborder headers into a working storage array*/

  OM0HS63();

      /* validate the sales program against the order header info*/
      /* on each suborder*/

  if (OM0HM001.SP1ID != " ") /* sales pgm entered*/
    OMAREC.OMASUB2 = 1;
    while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS
     && OMAREC.OMAERR == "N")
      OM0HS64();
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    end
  end

      /* validate the sales program (or lack of sales program)*/
      /* against the items on each suborder*/

  OMAREC.OMASUB2 = 1;
  while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS
   && OMAREC.OMAERR == "N"
   && OM0HW01.OM0HW-SPGM-ITEM-WARNING == "N")
    OM0HS6A();
    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
  end

      /* restore original suborder to the op1rec*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;


   /* *************************************************************/
end // end OM0HS62

// read all op1recs
Function OM0HS63()


    /* **********************************************************/
    /* *                                                       **/
    /* *     read all suborders and put in a ws-array          **/
    /* *                                                       **/
    /* **********************************************************/


  OM0HW01.OM0HW-SAVE-XOTCD = OP1REC.XOTCD; /* save order type*/
  OM0HW01.OM0HW-SAVE-KUMSTRID = OP1REC.KUMSTRID; /* save store*/
  OM0HW01.OM0HW-SAVE-XNXCD = OP1REC.XNXCD; /* save the dept*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save off current suborder*/

  set SQLCA empty;

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "OM0H   ";
    TA1REC.TA1LOCAT[2] = "OM0HS63 ";
    TA1REC.TA1LOCAT[3] = "IO0430  ";
    TA1REC.TA1LOCAT[4] = "SS";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    XSOPS02();
  end


  OMAREC.OMASUB2 = 0;
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XOSCD == "IP" /* if order status in process*/
       || OP1REC.XOSCD == "XL") /* or cancelled*/
        /* skip*/
      else
        OP1REC.SP1ID = OM0HM001.SP1ID; /* update salespgm*/
        OP1REC.SP6MDISC = 0; /* reset discount %*/
        OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
        OM0HW04.OP1GROUP[OMASUB2] = OP1REC.OP1GROUP;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OM0HW01.OM0HW-TOTAL-SUBORDERS = OMAREC.OMASUB2;
      else
        TA1REC.TA1PGMNM = "OM0H   ";
        TA1REC.TA1LOCAT[2] = "OM0HS63 ";
        TA1REC.TA1LOCAT[3] = "IO0430  ";
        TA1REC.TA1LOCAT[4] = "SN";
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VORHDR01";
        OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
        OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
        OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
        XSOPS02();
      end
    end
  end


  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


end // end OM0HS63

// edit spgm vs suborder hdr data
Function OM0HS64()


  OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];

      /* if we've picked up the original suborder, it's already*/
      /* been edited so skip it*/

  if (OP1REC.OP1NORID == OM0HW01.OP1NORID) /* original suborder*/
    return; /* return*/
  end

      /* if a rebook bulk, can't change sales program*/
      /* note: currently we'll never get a rebook bulk on*/
      /* another suborder when there wasn't one on the*/
      /* first - this is here in case things change 2-92*/

  if (OP1REC.XBDCD == "R")
    set OM0HM001.SP1ID cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    converseLib.validationFailed(719); /* can't chng spgm on rebooks*/
    return;
  end

      /* if a different order type than the previous suborder,*/
      /* read the spgm/order type record to validate order type*/
      /* versus the sales program*/

  if (OP1REC.XOTCD != OM0HW01.OM0HW-SAVE-XOTCD) /* if a new order type*/
    SP2REC.SP1ID = OP1REC.SP1ID;
    SP2REC.XOTCD = OP1REC.XOTCD;
    call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OM0HW01.OM0HW-SAVE-XOTCD = OP1REC.XOTCD;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(721); /* sls pgm id is not valid for ord type*/
        OMAREC.OMAERR = "Y"; /* set error flag*/
        set OM0HM001.SP1ID cursor, modified, bold;
        return; /* no need to go further*/
      else
        TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
        TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
        TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
        TA1REC.TA1LOCAT[2] = "OM0HS64 "; /* statement group*/
        TA1REC.TA1LOCAT[3] = "IO0080  "; /* i/o mod name*/
        TA1REC.TA1LOCAT[4] = "S       "; /* i/o mod name*/
        XSOPS02(); /* abend routine*/
      end
    end
  end

      /* edit today's date against the sales pgm booking date;*/
      /* this edit automatically ensures that a seasonal sales pgm*/
      /* is not added to the order past the last calculation date*/

  if (OMAREC.OMACDT < SP2REC.SP2BKBDT /* current dt < spgm beg book dt*/
   || OMAREC.OMACDT > SP2REC.SP2BKXDT) /* or > spgm ending bookg date*/
    converseLib.validationFailed(722); /* today not valid book date for spgm*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0HM001.SP1ID cursor, modified, bold;
    return;
  end

      /* edit the need date against the sales pgm delivery date range*/
      /* sp2rec already read above or in om0hs67*/

  if (OP1REC.OP1CUNDT < SP2REC.SP2DLBDT /* nt < begin delivery date*/
   || OP1REC.OP1CUNDT > SP2REC.SP2DLXDT) /* nt > nding delivery date*/
    converseLib.validationFailed(726); /* need date not valid del date for sls pgm*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0HM001.SP1ID cursor, modified, bold;
    return; /* no need to edit further*/
  end


      /* if necessary, edit the customer against the sales program*/
      /*  */
      /* note: the flag om0hw-chk-suborder-fl is set in om0hs47*/
      /* if the full customer/store/dept on each suborder*/
      /* has to be validated against the sales program*/

  if (OM0HW01.OM0HW-CHK-SUBORDERS-FL == "N") /* if don't need to edit*/
    return; /* cust, skip the rest*/
  end

  if (OM0HW01.OM0HW-SAVE-KUMSTRID == OP1REC.KUMSTRID /* same store and*/
   && OM0HW01.OM0HW-SAVE-XNXCD == OP1REC.XNXCD)      /* same dept*/
    return; /* already edited*/
  else
    OM0HW01.OM0HW-SAVE-KUMSTRID = OP1REC.KUMSTRID;
    OM0HW01.OM0HW-SAVE-XNXCD = OP1REC.XNXCD;
    OM0HW01.OM0HWCUV = "N"; /* set cust valid flag to N*/
    OM0HS4W(); /* edit vs cust.*/
  end


   /* *************************************************************/
end // end OM0HS64

// relation edits
Function OM0HS66()



       /* *******************************************************/
       /* * this statement group controls the relational edits **/
       /* * between need date, order type, and sales program   **/
       /* *******************************************************/


        /* edit need date versus lead time, for this order type*/
        /* ---  warning only ---*/

  if (OM0HW01.OM0HWNTC == "Y") /* need date was changed*/
    set TA2REC empty;
    TA2REC.TA2DBDFN = OMAREC.OMACDT; /* current date ccyymmdd*/
    TA2REC.TA2DBDTN = OP1REC.OP1CUNDT; /* need date ccyymmdd*/
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2RTNCD = 0;
    TA2REC.TA2GRTYP = "G";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      if (TA2REC.TA2DBDDN >= OM0HW01.XOTLDAYS)
        /* next sentence*/
      else
        converseLib.validationFailed(51); /* warning - need date*/
        set OM0HM001.OM0HMCND cursor, bold;
      end
    else
      converseLib.validationFailed(13); /* need date is not a valid date*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMCND cursor, modified, bold;
      return;
    end
  end


       /* edit order type vs sales program and need date*/

  if (OM0HM001.SP1ID == " ")
     /* next sentence*/
  else
    OM0HS67();
  end


       /* edit direct ship code, bulk order code, order class*/


  if (OMAREC.OMAERR == "N")
    OM0HS68();
  end


       /* edit customer profile and order type*/


  if (OP1REC.XDVCD == "01") /* domestic customer*/
    if (OMAREC.OMAERR != "Y") /* not previous error*/
      if (OP1REC.XOTCD in XOTTBL.XOTCD /* order type in table*/
       && XOTTBL.XQACD2[sysVar.arrayIndex] != "02"
       && XOTTBL.XLCCD2[sysVar.arrayIndex] != "20")
        OM0HS70(); /* edit profile*/
      end
    end
  end


   /* *************************************************************/
end // end OM0HS66

// order type vs spgm, need date
Function OM0HS67()


       /* *******************************************************/
       /* * if this order has sales program, this statement    **/
       /* * group edits the need date vs the sales             **/
       /* * program delivery dates and lead days               **/
       /* *******************************************************/


       /* validate order type vs sales program*/

  SP2REC.SP1ID = OP1REC.SP1ID; /* load key*/
  SP2REC.XOTCD = OP1REC.XOTCD; /* load key*/
  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(025); /* sls pgm id is not valid for ord type*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0HM001.XOBCD cursor, modified, bold;
      if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y")
        set OM0HM001.SP1ID cursor, modified, bold;
      end
      return; /* no need to go further*/
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
      TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
      TA1REC.TA1LOCAT[2] = "OM0HS67 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "IO0080  "; /* i/o mod name*/
      TA1REC.TA1LOCAT[4] = "S       "; /* i/o mod name*/
      XSOPS02(); /* abend routine*/
    end
  end


      /* edit the need date against the sales pgm delivery date range*/

  if (OM0HW01.OM0HWNTC == "Y" /* need date was changed*/
   || OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* or spgm changed*/
    if (OP1REC.OP1CUNDT < SP2REC.SP2DLBDT /* nt < begin delivery date*/
     || OP1REC.OP1CUNDT > SP2REC.SP2DLXDT) /* nt > nding delivery date*/
      converseLib.validationFailed(027); /* need date not valid del date for sls pgm*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0HM001.XOBCD cursor, modified, bold;
      set OM0HM001.OM0HMCND modified, bold;
      if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y")
        set OM0HM001.SP1ID cursor, modified, bold;
      end
      return; /* no need to edit further*/
    end
  end


      /* edit the need date vs sales program lead days*/
      /* this edit is done only when need date was changed*/
      /* ok to not edit this when change or add sales pgm*/

  if (OM0HWNTC == "Y") /* need date changed*/
    set TA2REC empty;
    TA2REC.TA2DBDFN = OMAREC.OMACDT; /* current date ccyymmdd*/
    TA2REC.TA2DBDTN = OP1REC.OP1CUNDT; /* need date ccyymmdd*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* lt no. days between*/
    TA2REC.TA2RTNCD = 0; /* current dt & need dt*/
    TA2REC.TA2GRTYP = "G";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      if (TA2REC.TA2DBDDN >= SP2REC.SP2LEDTM)
        /* next sentence*/
      else
        set OM0HM001.XOBCD cursor, modified, bold;
        set OM0HM001.OM0HMCND modified, bold;
        converseLib.validationFailed(52); /* need date does not meet sales program req.*/
        OMAREC.OMAERR = "Y";
        return;
      end
    else
      set OM0HM001.OM0HMNDT cursor, modified, bold;
      converseLib.validationFailed(13); /* need date is not a valid date*/
      OMAREC.OMAERR = "Y";
    end
  end


      /* edit today's date against the sales pgm booking date*/
      /* this edit automatically ensures that a seasonal sales pgm*/
      /* is not added to the order past the last calculation date*/

  if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* if spgm changed*/
    if (OMAREC.OMACDT < SP2REC.SP2BKBDT /* current dt < spgm beg book dt*/
     || OMAREC.OMACDT > SP2REC.SP2BKXDT) /* or > spgm ending bookg date*/
      converseLib.validationFailed(026); /* today not valid book date for spgm*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0HM001.SP1ID cursor, modified, bold;
    end
  end
   /* *************************************************************/
end // end OM0HS67

// relation edits
Function OM0HS68()



       /* ******************************************************/
       /* * this statement edits the order class, bulk order  **/
       /* * code, and direct ship code vs order type          **/
       /* ******************************************************/


       /* check to see if direct ship code is allowed for*/
       /* this order order type -- if ok, then check to see if a*/
       /* warehouse is required with this direct ship code*/


  if (OM0HW01.XOTADIRS == "N")
    if (OP1REC.XDSCD > " ")
      converseLib.validationFailed(075); /* ds is not valid for this order type*/
      set OM0HM001.XDSCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end



  if (OM0HW01.XDSWHSEF == "Y")
    if (OM0HM001.XWHCD == " ")
      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA this is a Canadian order*/
        converseLib.validationFailed(897); /* CANA whse must be 42*/
      else
        converseLib.validationFailed(098); /* whse is required for this ds code*/
      end
      set OM0HM001.XWHCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    end
  end


       /* bulk and draw orders cannot be direct shipped*/

  if (OM0HW01.OM0HWBDF == "B" /* bulk order*/
   || OM0HW01.OM0HWBDF == "D") /* draw order*/
    if (OM0HM001.XDSCD > " " /* direct ship*/
     && OM0HW01.XDSWHSEF == "N") /* and whs not required*/
      set OM0HM001.XDSCD cursor, modified, bold;
      converseLib.validationFailed(296); /* bulk/draw orders cannot be direct*/
                                   /* shipped*/
      OMAREC.OMAERR = "Y";
    end
  end


       /* check to see if this order order type allows*/
       /* bulk order*/

  if (OM0HW01.OM0HWBDF == "B")
    if (OM0HW01.XOTABULK == "N")
      converseLib.validationFailed(073); /* bulk order is not allowed for order*/
                                   /* type*/
      set OM0HM001.XOBCD cursor, modified, bold;
      OMAREC.OMAERR = "Y";
    else
      OM0HM001.OM0HMBKL = "NBR OF DRAWS>";
      OM0HM001.OM0HMBKV = OP1REC.OP1NDRAW;
      OP1REC.XBDCD = OM0HM001.XBDCD;
      set OM0HM001.OM0HMBKL initialAttributes;
      set OM0HM001.OM0HMBKV initialAttributes;
    end
  end



       /* validate order class vs order type*/

  if (OM0HM001.XOCCD == " ")
    OP1REC.XOCCD = " ";
  else
    if (OMAREC.XOTPROPF == "Y")
      if (OM0HW01.XOCPROPF == "Y")
        OP1REC.XOCCD = OM0HM001.XOCCD;
      else
        set OM0HM001.XOCCD cursor, modified, bold;
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(023); /* order class is not valid for order*/
                                   /* type*/
      end
    else
      if (OMAREC.XOTFUTRF == "Y")
        if (OM0HW01.XOCFUTRF == "Y")
          OP1REC.XOCCD = OM0HM001.XOCCD;
        else
          set OM0HM001.XOCCD cursor, modified, bold;
          OMAREC.OMAERR = "Y";
          converseLib.validationFailed(023); /* order class is not valid for order*/
                                   /* type*/
        end
      end
    end
  end



   /* ************************************************************/
end // end OM0HS68

// edit spgm vs order items
Function OM0HS6A()

      /* read each item for the suborder, get its color record,*/
      /* and send this info to OP1660, the subprogram that*/
      /* validates the sales program versus the item*/

  OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];

      /* if the current suborder, use the saved one that has the*/
      /* new changes in it*/

  if (OP1REC.OP1NORID == OM0HW01.OP1NORID)
    OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  end

      /* get the line items for the selected suborder*/

  OP2REC.OP2KEY = OP1REC.OP1KEY; /* order key*/

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    OM0HW01.OM0HWDON = " ";
    OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    TA1REC.TA1LOCAT[2] = "OM0HS6A"; /* statement group name*/
    TA1REC.TA1LOCAT[3] = "IO0440";
    TA1REC.TA1LOCAT[4] = "SS    ";
    XSOPS02();
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && OMAREC.OMAERR == "N"
   && OM0HW01.OM0HW-SPGM-ITEM-WARNING == "N")
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP2REC.OP2LNIST != "XL") /* if line item not cancelled*/
        OM0HSP2(); /* get vcolor02*/
        OM0HS6B(); /* call op1660 to validate prod*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
        OM0HW01.OM0HWDON = " ";
        OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
        OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
        OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
        TA1REC.TA1LOCAT[2] = "OM0HS6A"; /* statement group name*/
        TA1REC.TA1LOCAT[3] = "IO0440";
        TA1REC.TA1LOCAT[4] = "SN    ";
        XSOPS02();
      end
    end
  end

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};




   /* *************************************************************/
end // end OM0HS6A

// call OP1660
Function OM0HS6B()

   /* validate the items against the sales program*/

    /* build the op9rec key to subprogram op1660*/

  set OP9REC empty;

          /* find the product's life cycle based on the current date*/

  if (OMAREC.OMACDT >= SYCREC.SY2CEDT1)
    OP9REC.XLCCD = SYCREC.XLCCD1;
  else
    if (OMAREC.OMACDT >= SYCREC.SY2CEDT2)
      OP9REC.XLCCD = SYCREC.XLCCD2;
    else
      if (OMAREC.OMACDT >= SYCREC.SY2CEDT3)
        OP9REC.XLCCD = SYCREC.XLCCD3;
      else
        if (OMAREC.OMACDT >= SYCREC.SY2CEDT4)
          OP9REC.XLCCD = SYCREC.XLCCD4;
        else
          OP9REC.XLCCD = "  ";
        end
      end
    end
  end

          /* verify the account class before using it*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD /* acct cls in table*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OP9REC.XAUCD = KUCREC.XAUCD;
  else
    OP9REC.XAUCD = " ";
  end

          /* move the rest of the data*/

  OP9REC.SP1ID = OP1REC.SP1ID; /* sales pgm id*/
  OP9REC.XPCCD = SYCREC.XPCCD; /* product category*/
  OP9REC.SY1STNBR = OP2REC.SY1STNBR;
  OP9REC.SY2CLRID = OP2REC.SY2CLRID;
  OP9REC.XDMCD = OP2REC.XDMCD;
  OP9REC.XGPCD = OP1REC.XGPCD;
  OP9REC.XDVCD = OP1REC.XDVCD;
  OP9REC.XSOCD = OP1REC.XSOCD;
  OP9REC.XSPCD = SYCREC.XSPCD;
  OP9REC.KUCCOID = OP1REC.KUCCOID;
  OP9REC.KUMSTRID = OP1REC.KUMSTRID;
  OP9REC.XNXCD = OP1REC.XNXCD;
  OP9REC.XQACD = OP2REC.XQACD;


  call "OP1660" (OP9REC) {isNoRefresh = yes, isExternal = yes};

  if (OP9REC.OP9RTNCD == "00") /* good rtn - prod ok for spgm*/
      /* next sentence*/
  else
    if (OP9REC.OP9RTNCD == "01" /* style doesn't qualify for spgm*/
     || OP9REC.OP9RTNCD == "07" /* style's xlccd not valid for spgm*/
     || OP9REC.OP9RTNCD == "08") /* style's xqacd not valid for spgm*/
      converseLib.validationFailed(723); /* spgm not valid for all items*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.SP1ID cursor, modified, bold;
    else
      if (OP9REC.OP9RTNCD == "02") /* no spgm but prod requires one*/
        if (OM0HM001.SP1ID != OM0HW01.SP1ID)
          OM0HW01.OM0HW-SPGM-ITEM-WARNING = "Y";
        end
      else /* db2 error or rec not found*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0H    ";
        TA1REC.TA1LOCAT[2] = "OM0HS6B ";
        TA1REC.TA1LOCAT[3] = "OP1660  ";
        TA1REC.TA1LOCAT[4] = OP9REC.OP9RTNCD;
        set TAEREC empty;
        OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
        OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP1REC.OP1CUOID;
        OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP1REC.OP1NORID;
        OM0HW01.SY1STNBR = OP9REC.SY1STNBR;
        OM0HW01.SY2CLRID = OP9REC.SY2CLRID;
        OM0HW01.XDMCD = OP9REC.XDMCD;
        TAEREC.TAEDESC1 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
        TAEREC.TAEDESC2 = "BAD RETURN CODE FROM OP1660";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        XSPF4();
        exit program;
      end
    end
  end


   /* *************************************************************/
end // end OM0HS6B

// edit cust profile & ord type
Function OM0HS70()


   /* **********************************************************/
   /* Get the appropriate profile code from order type profile*/
   /* table (DCUST.VCUXOP01) - record VCUXOP01.*/
   /* *********************************************************/


  VCUXOP01.KUCCOID = KUCREC.KUCCOID;
  VCUXOP01.XGPCD = OP1REC.XGPCD;
  VCUXOP01.XPCCD = OPWREC01.XPCCK;

  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    OM0HW01.XOPCD = VCUXOP01.XOPCD;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      VCUXOP01.XPCCD = "  ";
      OM0HS71();
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0HS70 ";
      TA1REC.TA1LOCAT[3] = "VCUXOP01";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUXOP01";
      TA1REC.TA1TBLKE = "VCUXOP01";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end

  /*  */

   /* *********************************************************/
   /* if the profile code used above is equal to spaces,*/
   /* no further validation is necessary--any order type is*/
   /* valid.  if the profile code is not equal to spaces,*/
   /* validate the order type entered for the order and the*/
   /* profile found on the cmpny rec against the 'master'*/
   /* profile table (io2550).  can't use an order type that*/
   /* doesn't exist under the master table's profile id.*/
   /* *********************************************************/

  if (OM0HW01.XOPCD == " ")
    return;
  end


  OPKREC.XOPCD = OM0HW01.XOPCD;
  OPKREC.XOTCD = OP1REC.XOTCD;
  OPKREC.OPKOTEDT = OP1REC.OP1CUNDT;

  call "IO2550" ("SE", SQLCA, OPKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set OM0HM001.XOBCD initialAttributes;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OMAREC.OMAERR = "Y";
      set OM0HM001.XOBCD cursor, modified, bold;
      converseLib.validationFailed(239);
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "SE      ";
      TA1REC.TA1LOCAT[2] = "OM0HS70 ";
      TA1REC.TA1LOCAT[3] = "IO2550  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VOTVAL01";
      TA1REC.TA1TBLKE = "OPKREC  ";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end


end // end OM0HS70

// second order type profile call
Function OM0HS71()

   /* *************************************************************/
   /* 2ND CALL OCCURS WHEN EQUIPMENT XPC CODE IS NOT FOUND*/
   /* *************************************************************/

  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    OM0HW01.XOPCD = VCUXOP01.XOPCD;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OM0HW01.XOPCD = "    ";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0HS71 ";
      TA1REC.TA1LOCAT[3] = "VCUXOP01";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUXOP01";
      TA1REC.TA1TBLKE = "VCUXOP01";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end


end // end OM0HS71

// chk dont ship b4 & rush pick
Function OM0HS88()



  if (OM0HW01.OM0HW435 == "Y") /* if message flag is on*/
    OM0HW01.OM0HW435 = "N"; /* turn it off--has been displayed*/
  else
    if (OM0HM001.OM0HMSBD != "MM-DD-YY"
     && OP1REC.XPPCD == "10")
      OM0HS89();
    else
      if (OM0HM001.OM0HMSBD != "MM-DD-YY"
       && OP1REC.XPPCD == "20")
        OM0HS89();
      end
    end
  end



end // end OM0HS88

// date routine for warn msg435
Function OM0HS89()


   /* date routine comparing don't ship before date to*/
     /* current date*/

  set TA2REC empty;

  OM0HW01.OM0HWDT = OM0HM001.OM0HMSBD;
  if (OM0HW01.OM0HWDT == " ")
    return;
  else
    if (OM0HW01.OM0HWHP2 != "-") /* received date in mmddyy format*/
      TA2REC.TA2GRGA = OM0HM001.OM0HMSBD;
    else /* ; entered date in mm-dd-yy format*/
      OMAREC.OMAMMDT = OM0HW01.OM0HWMM; /* take the '-' out*/
      OMAREC.OMADDDT = OM0HW01.OM0HWDD;
      OMAREC.OMAYYDT = OM0HW01.OM0HWYY;
      TA2REC.TA2GRGA = OMAREC.OMADATE;
    end
  end
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(010); /* database busy, please try again*/
    OMAREC.OMAERR = "Y";
  else
    if (TA2REC.TA2GRGGN > OMAREC.OMACDT) /* don't give warning*/
      converseLib.validationFailed(435); /* both rush pick prty & don't ship dt on order*/
      OM0HW435 = "Y";
    end
  end

end // end OM0HS89

// edit received date before conv
Function OM0HS92()



      /* *********************************************************/
      /* * this statement group edits the date received field   **/
      /* * before the map is conversed to ensure that the date  **/
      /* * is not zero.                                         **/
      /* *********************************************************/




  if (OP1REC.OP1ORCDT == 0)
    OM0HM001.OM0HMRCD = 0;
    if (OM0HM001.OM0HMODE == " CHANGE")
      converseLib.validationFailed(314); /* 'receive date required, cannot be zero'*/
      set OM0HM001.OM0HMRCD cursor, modified, bold;
    else
      converseLib.validationFailed(314); /* 'receive date required, cannot be zero'*/
      set OM0HM001.OM0HMRCD skip, bold;
    end
  end


   /* *************************************************************/
end // end OM0HS92

// op1rec key info to get op2rec
Function OM0HS93()


    /* **********************************************************/
    /* *                                                       **/
    /* * purpose:  read all sub orders to check status         **/
    /* *                                                       **/
    /* **********************************************************/

  set SQLCA empty;


  OMWREC.OP1GROUP = OP1REC.OP1GROUP;
  OP1REC.OP1NORID = 0;

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0
     && OMAREC.OMASUB1 == 0)
      call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XOSCD == "OP"
         || OP1REC.XOSCD == "RS"
         || OP1REC.XOSCD == "PR"
         || OP1REC.XOSCD == "XL")
          if (OP1REC.OP1NDRAW == 0)
            /* next sentence*/
          else
            OMAREC.OMASUB1 = 2;
          end
        else
          OMAREC.OMASUB1 = 1;
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0H   ";
          TA1REC.TA1LOCAT[1] = "OM0HS93 ";
          TA1REC.TA1LOCAT[2] = "IO0430  ";
          TA1REC.TA1LOCAT[3] = " ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "     ";
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VORHDR01";
          OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
          OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
          OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H   ";
    TA1REC.TA1LOCAT[1] = "OM0HS93 ";
    TA1REC.TA1LOCAT[2] = "IO0430  ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "     ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  end


  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;



end // end OM0HS93

// op1rec key info to get op2rec
Function OM0HS94()



    /* **********************************************************/
    /* *                                                       **/
    /* * purpose:  updates all suborders if bulk changed       **/
    /* *                                                       **/
    /* **********************************************************/


  set SQLCA empty;

  OP1REC.OP1NORID = 0;

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OM0HW01.OM0HW-UPD-BLK-DRW-CD-FL == "Y") /* bulk draw code changed*/
          OP1REC.XBDCD = OM0HM001.XBDCD;
          OM0HS95(); /* update op1rec*/
        end
        OM0HS-CHECK-BULK(); /* check to see how to upd bulk*/
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0H   ";
          TA1REC.TA1LOCAT[1] = "OM0HS94 ";
          TA1REC.TA1LOCAT[2] = "IO0430  ";
          TA1REC.TA1LOCAT[3] = " ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "     ";
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VORHDR01";
          OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
          OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
          OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H   ";
    TA1REC.TA1LOCAT[1] = "OM0HS94 ";
    TA1REC.TA1LOCAT[2] = "IO0430  ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "     ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  end


  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};



end // end OM0HS94

// update the order header
Function OM0HS95()



       /* *******************************************************/
       /* * this statement group creates the tag records and   **/
       /* * updates                                            **/
       /* *    - the order header record                       **/
       /* *    - text table (dorder.vtext01)                   **/
       /* *    - commarea                                      **/
       /* *******************************************************/


       /* update the order header record*/

   /* time/date stamp order header record.*/

  OP1REC.ZZZCHGDT = OMAREC.OMACDT;
  OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
  OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
  OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
  OP1REC.ZZZCHGTM = OM0HW01.OM0HWT2;

  if (OM0HW01.OM0HW-CRED-CHK-DIR-SHP == "Y") /* credit check for dir shp*/
    OM0HS-CRED-CHK-DS();
  end

  OM0HSBH(); /* add allocation hold if required*/

  OM0HS9B(); /* update the op1rec*/

         /* if the sales program has been changed, all the other*/
         /* suborders on the order have to be updated*/

  if (OM0HW01.OM0HW-SP1ID-MODIFIED-FL == "Y") /* if spgm changed*/
    OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save off current suborder*/
    OMAREC.OMASUB2 = 1;
    while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS)
      OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];
      if (OM0HW01.OP1NORID == OP1REC.OP1NORID /* if current subordr*/
       || OP1REC.XOSCD == "XL"                /* or subordr cancelled*/
       || OP1REC.XOSCD == "SH")               /* or subordr shipped*/
        /* next sentence                            don't update*/
      else
        OP1REC.ZZZCHGDT = OMAREC.OMACDT;
        OP1REC.ZZZCHGTM = OM0HW01.OM0HWT2;
        OM0HS9B(); /* update the op1rec*/
      end
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    end
    if (OM0HM001.SP1ID != OM0HW01.SP1ID) /* if should display warnings*/
      OM0HW01.OM0HW-SPGM-WARNING = "Y";
      if (OM0HW01.OM0HW-SPGM-ITEM-WARNING == "Y") /* if already a warning*/
        converseLib.validationFailed(724); /* warning: item may requir*/
      else /* a sales pgm*/
        converseLib.validationFailed(718); /* warning: may be new terms*/
      end
    end
    OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* put back current suborder*/
  end

   /* *************************************************************/

end // end OM0HS95

// get company record
Function OM0HS96()


  set KUCREC empty; /* init record*/

      /* get customer company record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    OM0HW01.OM0HWDND = KUCREC.KUCCOID; /* bin to num*/
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDND; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HS47 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end



   /* *************************************************************/
end // end OM0HS96

// update op1rec
Function OM0HS9B()


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

       /* check the db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Tcs include begin 08/25/98*/
    OM0HS-CHECK-UPDATE(); /* for updating corresp vbulk recs*/
     /* Tcs include end   08/25/98*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* change count error*/
      converseLib.validationFailed(330); /* someone else updated the record*/
      OM0HW01.OM0HWUEF = "Y"; /* set update error flag*/
      OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* set back to current subor*/
      exit stack;
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
      OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
      OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP1REC.OP1CUOID;
      OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OM0HW01.OM0HW-ERROR-DIAG-KEY; /* key value*/
      TA1REC.TA1LOCAT[2] = "OM0HS95"; /* statement group name*/
      TA1REC.TA1LOCAT[3] = "IO0430";
      TA1REC.TA1LOCAT[4] = "U     ";
      XSOPS02();
    end
  end


   /* *************************************************************/

end // end OM0HS9B

// update expedite record
Function OM0HS9C()
   /* this stmt grp updates the expedite record*/

   /* first find out if record already exists.*/

  set OIBREC empty;

  OIBREC.OP1PARTN = OP1REC.OP1PARTN;
  OIBREC.OP1CUOID = OP1REC.OP1CUOID;
  OIBREC.OP1NORID = OP1REC.OP1NORID;

  call "IO1880" ("S  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* if rec exists*/
    TA2REC.TA2DTOPT = "GETDATE";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      OIBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      OIBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    end
    OIBREC.KUCCOID = OP1REC.KUCCOID;
    OIBREC.KUMSTRID = OP1REC.KUMSTRID;
    OIBREC.XNXCD = OP1REC.XNXCD;
    OIBREC.XOTCD = OP1REC.XOTCD;
    OIBREC.XSOCD = OP1REC.XSOCD;
    OIBREC.OP1CUNDT = OP1REC.OP1CUNDT;
    OIBREC.XOSCD = OP1REC.XOSCD;
    OIBREC.XWHCD = OP1REC.XWHCD;
    OIBREC.OP1NTMAL = OP1REC.OP1NTMAL;
    OIBREC.OIBPGM = "OM0H";
    KUMREC.KUCCOID = OP1REC.KUCCOID;
    KUMREC.KUMSTRID = OP1REC.KUMSTRID;

    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OIBREC.KUMSTSNM = KUMREC.KUMSTSNM;
    else
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1PGMNM = "OM0H    ";
      TA1REC.TA1DBASE = "DCUST   ";
      OMAREC.OMACUCO = KUMREC.KUCCOID;
      OMAREC.OMASEP1 = ".";
      OMAREC.OMACUSR = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = OMAREC.OMACUNO;
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[3] = "OM0HS9C";
      TA1REC.TA1LOCAT[4] = "IO0340";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
    call "IO1880" ("U  ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes}; /* and update it*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H    ";
      TA1REC.TA1DBASE = "DORDER  ";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1TBLVU = "VXPDIT01";
      TA1REC.TA1LOCAT[2] = "U      ";
      TA1REC.TA1LOCAT[3] = "OM0HS9C";
      TA1REC.TA1LOCAT[4] = "IO1880";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H    ";
      TA1REC.TA1DBASE = "DORDER  ";
      OMWREC.OMWORDN = OP1REC.OP1CUOID;
      OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      TA1REC.TA1TBLVU = "VXPDIT01";
      TA1REC.TA1LOCAT[2] = "S      ";
      TA1REC.TA1LOCAT[3] = "OM0HS9C";
      TA1REC.TA1LOCAT[4] = "IO1880";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end



end // end OM0HS9C

// write audit rec for rep ovrrd
Function OM0HSAR()


      /* **************************************/
      /* * write audit record for rep/agency*/
      /* * override.             opurec*/
      /* **************************************/


  set OPUREC empty;
  OPUREC.XXXPGMNB = "OP1261";
  OPUREC.OPUAUDTP = "RX";
  OPUREC.OP1PARTN = OP1REC.OP1PARTN;
  OPUREC.OP1CUOID = OP1REC.OP1CUOID;
  OPUREC.OP1NORID = OP1REC.OP1NORID;
  OPUREC.XDVCD = OP1REC.XSOCD; /* sales office hiding in div*/
  OPUREC.OP2LNINB = OM0HW03.OM0HWORP; /* old rep hiding in line item*/
  OPUREC.SY1STNBR = OM0HW03.OM0HWOAG; /* old agency hiding in style*/
  OM0HW02.OM0HWNAG = OP1REC.SM1AGYID; /* reformat new agency*/
  OPUREC.SY2CLRID = OM0HW03.OM0HWAG1; /* and hide it in color*/
  OPUREC.XDMCD = OM0HW03.OM0HWAG2; /* and dimension*/
  OPUREC.OP1CUNDT = OP1REC.OP1ORCDT;
                                   /* ord rcv ddt hiding in need dt*/
  OPUREC.OPUCRNTR = "N"; /* ship addr change flag*/
  OM0HW02.OM0HWCUS = OP1REC.KUCCOID; /* reformat company number*/
  if (OM0HW02.OM0HWCSB > 0)
    OPUREC.OPUAUDQT[1] = OM0HW03.OM0HWCSE;
  else
    OPUREC.OPUAUDQT[1] = OM0HW02.OM0HWCSC;
  end
  OPUREC.OPUAUDQT[3] = OP1REC.KUMSTRID; /* store*/
  OPUREC.OPUAUDQT[4] = OP1REC.XNXCD; /* dept*/
  OPUREC.OPUAUDQT[5] = OP1REC.SM4REPID; /* new sales rep*/
  OPUREC.ZZZSDT = TA2REC.TA2GRGGN;
  OPUREC.ZZZSTM = TA2REC.TA2TIMHM;


  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    set TA1REC empty;
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORAUD01";
    TA1REC.TA1LOCAT[1] = "OM0HSAR";
    TA1REC.TA1LOCAT[2] = "U";
    TA1REC.TA1LOCAT[3] = "IO3210";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    OM0HW01.OM0HWTK1 = 0;
    OM0HW01.OM0HWTK2 = 0;
    OM0HW01.OM0HWTK3 = OPUREC.OPUAUDTP;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    XSOPS02(); /* common abend*/
  end



end // end OM0HSAR

// produce rpt audit tran records
Function OM0HSAT()


  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    set TA1REC empty;
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORAUD01";
    TA1REC.TA1LOCAT[1] = "OM0HSAT";
    TA1REC.TA1LOCAT[2] = "U";
    TA1REC.TA1LOCAT[3] = "IO3210";
    OM0HW01.OM0HWPAR = OP1REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP1REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP1REC.OP1NORID;
    OM0HW01.OM0HWTK3 = OP3REC.SY1STNBR;
    OM0HW01.OM0HWTK4 = OP3REC.SY2CLRID;
    OM0HW01.OM0HWTK5 = OPUREC.OPUAUDTP;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    XSOPS02(); /* common abend*/
  end



end // end OM0HSAT

// write opurec audit trans
Function OM0HSAU()


      /* **************************************/
      /* * write production report size recs if:*/
      /* *   new order type, new warehouse,*/
      /* *   or new needdate.    opurec*/
      /* **************************************/


  set OPUREC empty;
  OPUREC.XXXPGMNB = "OM0H";
  OPUREC.OP1PARTN = OP1REC.OP1PARTN; /* set up opurec data*/
  OPUREC.OP1CUOID = OP1REC.OP1CUOID;
  OPUREC.OP2LNINB = OP3REC.OP2LNINB;
  OPUREC.XGPCD = OP1REC.XGPCD;
  OPUREC.SY1STNBR = OP3REC.SY1STNBR;
  OPUREC.SY2CLRID = OP3REC.SY2CLRID;
  OPUREC.XDMCD = OP3REC.XDMCD;
  OPUREC.XOWCD = OP3REC.XOWCD;
  OPUREC.XOMCD = " ";
  OPUREC.XDVCD = OP1REC.XDVCD;
  OPUREC.ZZZSDT = TA2REC.TA2GRGGN;
  OPUREC.ZZZSTM = TA2REC.TA2TIMHM;

  OPUREC.OP1NORID = OM0HW01.OP1NORID; /* old sub-ord*/

  if (OM0HW01.XWHCD != OP1REC.XWHCD)
    OPUREC.XWHCD = OM0HW01.XWHCD;
  else
    OPUREC.XWHCD = OP1REC.XWHCD;
  end

  if (OM0HW01.XOTCD != OP1REC.XOTCD)
    OPUREC.XOTCD = OM0HW01.XOTCD;
  else
    OPUREC.XOTCD = OP1REC.XOTCD;
  end

  if (OM0HW01.OP1CUNDT != OP1REC.OP1CUNDT)
    OPUREC.OP1CUNDT = OM0HW01.OP1CUNDT;
  else
    OPUREC.OP1CUNDT = OP1REC.OP1CUNDT;
  end

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 41)
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
      OPUREC.OPUAUDQT[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
      OPUREC.OPUAUDQT[sysVar.arrayIndex] = OPUREC.OPUAUDQT[sysVar.arrayIndex] * -1;
    else
      OPUREC.OPUAUDQT[sysVar.arrayIndex] = 0;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (OM0HW01.XOTCD != OP1REC.XOTCD)
    OPUREC.OPUAUDTP = "OT";
    OM0HSAT();
  end

  if (OM0HW01.XWHCD != OP1REC.XWHCD)
    OPUREC.OPUAUDTP = "WH";
    OM0HSAT();
  end

  if (OM0HW01.OP1CUNDT != OP1REC.OP1CUNDT)
    OPUREC.OPUAUDTP = "ND";
    OM0HSAT();
  end

   /* ***********************************************/
   /* do report recs for new ot, whse or needdt*/
   /* ***********************************************/

  OPUREC.OP1NORID = OP1REC.OP1NORID; /* new sub-ord*/
  OPUREC.XOTCD = OP1REC.XOTCD;
  OPUREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OPUREC.XWHCD = OP1REC.XWHCD;

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 41)
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y")
      OPUREC.OPUAUDQT[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
    else
      OPUREC.OPUAUDQT[sysVar.arrayIndex] = 0;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (OM0HW01.XOTCD != OP1REC.XOTCD)
    OPUREC.OPUAUDTP = "OT";
    OM0HSAT();
  end

  if (OM0HW01.XWHCD != OP1REC.XWHCD)
    OPUREC.OPUAUDTP = "WH";
    OM0HSAT();
  end

  if (OM0HW01.OP1CUNDT != OP1REC.OP1CUNDT)
    OPUREC.OPUAUDTP = "ND";
    OM0HSAT();
  end


end // end OM0HSAU

// get base order type desc
Function OM0HSB1()


   /* ***** get base order type description for map *******/

  if (OM0HM001.XOBCD in XOBTBL.XOBCD)
    OM0HM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex];
  else
    OM0HM001.XOBDESC = " ";
  end


end // end OM0HSB1

// edit base order type
Function OM0HSB2()

   /* **********WIPRO INCLUDE BEGIN 09/24/1999***********/
   /* Timing chnages been commented out as per user's request*/
   /* IF OP1REC.XOBCD EQ 'P2';*/
   /* MOVE 'N' TO OMAREC.OMAERR;*/
   /* OM0HSCA1;*/
   /* IF OMAREC.OMAERR EQ 'Y';*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/
   /*  */
   /*  */
   /*  */
   /* **********WIPRO INCLUDE END   09/24/1999***********/
   /* **********TCS INCLUDE BEGIN 11/04/1998***********/

  if (OP1REC.XOBCD == "R1"
   && OM0HM001.XOBCD != "R1")
    converseLib.validationFailed(955); /* such a change is not permissible*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    OM0HM001.XOBCD = OP1REC.XOBCD; /* old order back*/
    set OM0HM001.XOBCD cursor, modified, bold;
    return;
  else
    if (OM0HM001.XOBCD == "R1"
     && OP1REC.XOBCD != "R1")
      converseLib.validationFailed(955); /* such a change is not permissible*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      OM0HM001.XOBCD = OP1REC.XOBCD; /* old order back*/
      set OM0HM001.XOBCD cursor, modified, bold;
      return;
    end
  end

   /* **********TCS INCLUDE END   11/04/1998***********/

   /* **********TCS INCLUDE BEGIN 03/27/1998***********/

  if (OP1REC.XOBCD == "M1"
   || OP1REC.XOBCD == "MD")
    if (OM0HM001.XOBCD != "MD"
     && OM0HM001.XOBCD != "M1")
      converseLib.validationFailed(955); /* such a change is not permissible*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      OM0HM001.XOBCD = OP1REC.XOBCD; /* move old order type back*/
      set OM0HM001.XOBCD cursor, modified, bold;
      return;
    else
    end
  else

    if (OM0HM001.XOBCD == "M1"
     || OM0HM001.XOBCD == "MD")
      if (OP1REC.XOBCD != "MD"
       && OP1REC.XOBCD != "M1")
        converseLib.validationFailed(955); /* such a change is not permissible*/
        OMAREC.OMAERR = "Y"; /* set error flag*/
        OM0HM001.XOBCD = OP1REC.XOBCD; /* move old order type*/
        set OM0HM001.XOBCD cursor, modified, bold;
        return;
      else
      end
    else

    end
  end

   /* **********TCS INCLUDE END 03/27/1998***********/


  if (OM0HM001.XOBCD in XOBTBL.XOBCD
   && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex];
    OM0HSB3(); /* get system order type via xvo tbl*/
    if (OMAREC.OMAERR == "N")
      OM0HS19(); /* edit order type*/
    end
  else
    converseLib.validationFailed(017); /* order type invalid*/
    set OM0HM001.XOBCD cursor, modified, bold;
    OMAREC.OMAERR = "Y";
    OM0HM001.XOBDESC = " ";
  end


end // end OM0HSB2

// get system ord type via xvotbl
Function OM0HSB3()



   /* ----------------------------------------------------------*/
   /* equipment check*/
   /* ----------------------------------------------------------*/

  OM0HS-CHECK-EQMT(); /* call to eu0100*/
  if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y")
    OPWREC01.XPCCK = WEU0100.XPCCD;
  else
    OPWREC01.XPCCK = "  ";
  end


  OM0HW01.OM0HWFND = "N"; /* turn off flag*/
  OP1REC.XOTCD = " ";
  sysVar.arrayIndex = 1;

   /* ************** TCS INCLUDE BEGIN********/


  set VXVO0001 empty;
  set SQLCA empty;
  VXVO0001.XOBCD = OM0HM001.XOBCD;
  VXVO0001.XGPCD = OP1REC.XGPCD;
  VXVO0001.XSOCD = OP1REC.XSOCD;
  VXVO0001.XDVCD = OP1REC.XDVCD;
  VXVO0001.XBCCD = OP1REC.XBCCD;
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK;
  VXVO0001.XXXSTAT = "A";

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OM0HSB3";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP1REC.XOBCD = OM0HM001.XOBCD;
      set OM0HM001.XOBCD normal;
      OM0HW01.OM0HWFND = "Y";
      OP1REC.XOTCD = VXVO0001.XOTCD;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
          /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OM0HSB3";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        XSOPS02();
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OM0HSB3";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  end

   /* ************** TCS INCLUDE END****************/


  if (OM0HW01.OM0HWFND == "N") /* if nothing was found to load in here*/
    converseLib.validationFailed(482); /* invalid system order type*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0HM001.XOBCD cursor, modified, bold;
  end


end // end OM0HSB3

// add allocation hold if req
Function OM0HSBH()
      /* ******************************************/
   /* put order on allocation hold if indicated*/
   /* by ypocd - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/

   /* if during the course of this update, the cust po# was*/
   /* removed, this sgrp will put the order on allocation*/
   /* hold*/
      /* ******************************************/
  if (OP1REC.XBDCD == "3" /* this type of draw is put*/
   || OP1REC.XBDCD == "5" /* on hold depending on the*/
   || OP1REC.XBDCD == "8" /* bulk header, and nothing*/
   || OP1REC.XBDCD == "F") /* in this appl can change*/
    return; /* it.*/
  end
  if (KUCREC.KUCYPOFT == "00") /* nothing is required*/
    return;
  end
  if (OP1REC.XAHCD == "04") /* order is already on alloc hold*/
    return; /* for po #*/
  end
  if (OP1REC.OP1PAHCD == "04" /* order will be on hold for po#*/
   && OP1REC.OP1ALRDT == 0)   /* when current allocation hold*/
    return; /* is removed.*/
  end
  if (OM0HW01.OP1CUPO > " " /* po number was present on entry*/
   && OP1REC.OP1CUPO == " ") /* and has been removed*/
    if (OP1REC.XAHCD == " ") /* no other allocation hold is set*/
      OP1REC.XAHCD = "04"; /* so we put it up in the 1st occ*/
      OP1REC.OP1ALHDT = OMAREC.OMACDT; /* set hold date to today*/
    else
      OP1REC.OP1PAHCD = "04";
                                   /* store hold code in previous occurance*/
      OP1REC.OP1ALRDT = 0; /* set rel date to 0, indicating that this*/
                              /* hold takes effect when the first one*/
                              /* is removed.  We are assuming that*/
                              /* there is some kind of law against*/
                              /* any other hold being stocked off in*/
                              /* the previous occurance.*/
    end
  end
end // end OM0HSBH

// get bulk order need date
Function OM0HSBK()



       /* ******************************************************/
       /* * this statement group reads the bulk order to get  **/
       /* * the need date of the first active sub order which **/
       /* * has available quantities for draws      10/03/86  **/
       /* ******************************************************/


      /* issue select set to get need date on bulk order*/

  OM0HW01.OM0HWORN = OP1REC.OP1BLKID; /* load ws for partition*/
  OP1REC.OP1PARTN = OM0HW01.OP1PARTN; /* load key - partition*/
  OP1REC.OP1CUOID = OP1REC.OP1BLKID; /* load key - order number*/
  OP1REC.OP1NORID = 0; /* load key - sub order*/
  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      OM0HW01.OM0HWBNF = "Y"; /* got bulk ord need date*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* bulk not found (purged)*/
        OM0HW01.OM0HWBNF = "N";
        OM0HW01.OM0HWABF = "N";
        OM0HW01.OM0HWBNT = 0;
        OM0HW01.OM0HWBSA = 99999999;
        call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
        return;
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
        TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "OM0HSBK "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
        XSOPS02(); /* abend routine*/
      end
    end
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HSBK "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


       /* save bulk order need date and dont-ship-after-date*/

  OM0HW01.OM0HWBNT = OP1REC.OP1CUNDT; /* save bulk ord need date*/
  OM0HW01.OM0HWBSA = OP1REC.OP1DSADT; /* save bulk ord d-s-a-dt*/


      /* check available quantities on the bulk order*/

  OM0HW01.OM0HWABF = "N"; /* set active bulk order flag*/

  if (OP1REC.OP1OTUNT > 0)
    OM0HW01.OM0HWABF = "Y"; /* set active bulk order flag*/
  end


      /* if the first sub-order on the bulk order was*/
      /* cancelled or op1otunt = 0, find the first sub-ord*/
      /* which has available quantities*/

  while (SQLCA.VAGen_SQLCODE == 0
   && OM0HW01.OM0HWABF == "N")
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      if (OP1REC.OP1OTUNT > 0)
        OM0HW01.OM0HWABF = "Y"; /* set good bulk order flag*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
        TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "OM0HSBK "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
        XSOPS02(); /* abend routine*/
      end
    end
  end

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};



      /* if the bulk order with available quantities was found,*/
      /* ( got to be),*/
      /* move need date and dont-ship-after-date to the working*/
      /* storage again to overlay the previously saved dates.*/

  if (OM0HW01.OM0HWABF == "Y")
    OM0HW01.OM0HWBNT = OP1REC.OP1CUNDT; /* save bulk ord need date*/
    OM0HW01.OM0HWBSA = OP1REC.OP1DSADT; /* save bulk ord d-s-a-dt*/
  end


  if (OM0HW01.OM0HWBSA == 0) /* no dont-ship-after-dt*/
    OM0HW01.OM0HWBSA = 99999999;
  end



   /* ************************************************************/
end // end OM0HSBK

// Get company record for comp
Function OM0HSC1()

   /* Use the comp number for the key.*/
  KUCREC.KUCCOID = OM0HM001.OP1CMPNB;


   /* Get a specific customer record.*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if a DB2 error occured.*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - expected results.*/

  else
    TA1REC.TA1PGMNM = "OM0H    "; /* Program name*/
    TA1REC.TA1MAP = "OM0HM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view*/
    OM0HW01.OM0HWDND = KUCREC.KUCCOID; /* Bin to num*/
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDND; /* Key value*/
    TA1REC.TA1LOCAT[1] = "OM0H015 "; /* Process group*/
    TA1REC.TA1LOCAT[2] = "OM0HSC1 "; /* Statement group*/
    TA1REC.TA1LOCAT[3] = "IO0240  "; /* I/O mod name*/
    TA1REC.TA1LOCAT[4] = "S       "; /* Requested operation*/
    XSOPS02(); /* Abend routine*/
  end
end // end OM0HSC1

// Company level comp edits
Function OM0HSC2()

   /* See if the comp number is active.*/

  if (KUCREC.XXXSTAT != "A")
    converseLib.validationFailed(544); /* Inactive comp number.*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OP1CMPNB cursor, modified, bold;
    return;
  end



   /* See if comp has account type of in-house.*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "06")
      converseLib.validationFailed(545); /* Invalid comp number*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OP1CMPNB cursor, modified, bold;
      return;
    end
  else
     /* Account class not found.*/

    converseLib.validationFailed(545); /* Invalid comp number.*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OP1CMPNB cursor, modified, bold;
    return;
  end



   /* NIL sample orders can only use account class of*/
   /* "NIL samples".*/

  if (OP1REC.XDVCD == "02"
   && OM0HM001.XOBCD == "S1"
   && KUCREC.XAUCD != "67")
    converseLib.validationFailed(548); /* Comp invalid for order type.*/
    OMAREC.OMAERR = "Y";
    set OM0HM001.OP1CMPNB cursor, modified, bold;
    return;
  end
end // end OM0HSC2

// get credit status description
Function OM0HSCS()




       /* *******************************************************/
       /* * this statement group reads the credit status table **/
       /* * to get the order credit status abbreviated desc    **/
       /* *******************************************************/


  if (OP1REC.XCSCD in XCSTBL.XCSCD
   && XCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XCSABRV = XCSTBL.XCSABRV[sysVar.arrayIndex];
  end



   /* ***********************************************************/
end // end OM0HSCS

// format date to mm-dd-yy format
Function OM0HSDF()



       /* *******************************************************/
       /* * this statement group formats any date in yymmdd    **/
       /* * format to mm-dd-yy format                          **/
       /* *******************************************************/


  OMAREC.OMAHP1 = "-";
  OMAREC.OMAHP2 = "-";


   /* --------- Y2K OUT BEGIN -----------*/
   /* IF OMAREC.OMAWYY EQ 0;*/
   /* MOVE 'YY' TO OMAREC.OMASYYDT;*/
   /* ELSE;*/
   /* MOVE OMAREC.OMAWYY TO OMAREC.OMASYYDT;*/
   /* END;*/
   /* IF OMAREC.OMAWMM EQ 0;*/
   /* MOVE 'MM' TO OMAREC.OMASMMDT;*/
   /* ELSE;*/
   /* MOVE OMAREC.OMAWMM TO OMAREC.OMASMMDT;*/
   /* END;*/
   /* --------- Y2K OUT END -------------*/
   /* --------- Y2K in BEGIN -----------*/
   /*  */
  if (OMAREC.OMAWMM == 0)
    OMAREC.OMASMMDT = "MM";
    OMAREC.OMASYYDT = "YY";
  else
    OMAREC.OMASMMDT = OMAREC.OMAWMM;
    OMAREC.OMASYYDT = OMAREC.OMAWYY;
  end

   /*  */
   /* --------- Y2K in END -------------*/


  if (OMAREC.OMAWDD == 0)
    OMAREC.OMASDDDT = "DD";
  else
    OMAREC.OMASDDDT = OMAREC.OMAWDD;
  end



   /* ************************************************************/
end // end OM0HSDF

// get direct ship description
Function OM0HSDS()



       /* *******************************************************/
       /* * this statement group                               **/
       /* * gets the direct ship abbreviated desc for display  **/
       /* *******************************************************/



  if (OM0HM001.XDSCD in XDSTBL.XDSCD /* if direct ship cd is valid*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    OM0HW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSDS

// format dates
Function OM0HSDT()



       /* *******************************************************/
       /* * this statement group formats the need date, dont   **/
       /* * ship before date, dont ship after date,            **/
       /* * written date, received date, and callout date      **/
       /* * for display. dates will be displayed in mm-dd-yy   **/
       /* * format                                             **/
       /* *******************************************************/


       /* format need date*/

  OMAREC.OMAWDT = OP1REC.OP1CUNDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMCND = OMAREC.OMASDATE;




       /* if it is bulk order, need date cannot be changed if*/
       /* draws have been made. it is draw order or regular*/
       /* order need date cannot be changed if units are*/
       /* reserved, allocated or shipped*/

  if (OM0HW01.OM0HWBDF == "B") /* bulk order*/
    if (OP1REC.OP1NDRAW > 0 /* draws were made*/
     || OP1REC.OP1RSVQF == "Y") /* units reserved*/
      set OM0HM001.OM0HMCND protect; /* protect need date*/
    end
  else
    if (OP1REC.OP1SHPQF == "Y" /* units shipped*/
     || OP1REC.OP1RSVQF == "Y" /* units reserved*/
     || OP1REC.OP1ALCQF == "Y") /* units allocated*/
      set OM0HM001.OM0HMCND protect; /* protect need date*/
    end
  end


   /* protect needdate on futures1/20/88 tfox*/
  if (XOTTBL.XOTFUTRF == "Y")
    set OM0HM001.OM0HMCND protect;
  end



       /* format dont-ship-before-date*/

  OMAREC.OMAWDT = OP1REC.OP1DSBDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMSBD = OMAREC.OMASDATE;



       /* format dont-ship-after-date*/

  OMAREC.OMAWDT = OP1REC.OP1DSADT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMSAD = OMAREC.OMASDATE;



       /* format received date*/

  OMAREC.OMAWDT = OP1REC.OP1ORCDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMRCD = OMAREC.OMASDATE;


       /* format callout date*/

  OMAREC.OMAWDT = OP1REC.OP1CALDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMCLD = OMAREC.OMASDATE;


       /* format order status change date*/

  if (OP1REC.OP1OSADT > 0)
    OMAREC.OMAWDT = OP1REC.OP1OSADT;
    OM0HSDF(); /* format date*/
    OM0HM001.OM0HMOSD = OMAREC.OMASDATE;
  else
    OM0HM001.OM0HMOSD = " ";
  end



       /* format order credit status change date*/


  if (OP1REC.OP1CSADT > 0)
    OMAREC.OMAWDT = OP1REC.OP1CSADT;
    OM0HSDF(); /* format date*/
    OM0HM001.OM0HMCSD = OMAREC.OMASDATE;
  else
    OM0HM001.OM0HMCSD = " ";
  end



       /* format order cancellation date*/

  if (OP1REC.OP1OMDT > 0)
    OMAREC.OMAWDT = OP1REC.OP1OMDT;
    OM0HSDF(); /* format date*/
    OM0HM001.OM0HMNDT = OMAREC.OMASDATE;
  else
    OM0HM001.OM0HMNDT = " ";
  end



       /* format order entered date*/

  OMAREC.OMAWDT = OP1REC.OP1ENTDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMEND = OMAREC.OMASDATE;



   /* Format setup date (dup/draw/sub field).*/

  OMAREC.OMAWDT = OP1REC.ZZZSDT;
  OM0HSDF(); /* format date*/

  OM0HM001.OM0HMSUD = OMAREC.OMASDATE;
end // end OM0HSDT

// op1rec key info to get op2rec
Function OM0HSEN()



    /* **********************************************************/
    /* *                                                       **/
    /* * purpose:  this is called when a regular order is being**/
    /* * converted to a bulk order.   smart/flex bulks cannot  **/
    /* * contain any coordinate group codes.                   **/
    /* *                                                       **/
    /* **********************************************************/

  set OP2REC empty;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = 0;

  set SQLCA empty;

  call "IO0450" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    while (SQLCA.VAGen_SQLCODE == 0
     && OMAREC.OMASUB1 == 0)
      call "IO0450" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OM0HM001.XBDCD == "0" /* if reg order, ok*/
         || OM0HM001.XBDCD == "5") /* if cust draw, ok*/
            /* next sentence*/
        else
          if (OM0HM001.XBDCD == "1") /* if cust bulk*/
            if (OMAREC.OMASUB1 == 0
             && OP2REC.OP2TSHPQ > 0)
              OMAREC.OMASUB1 = 2;
            end
          else
            if (OMAREC.OMASUB1 == 0
             && OP2REC.OP2CGPCD > " ")
              OMAREC.OMASUB1 = 1;
            end
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0H   ";
          TA1REC.TA1LOCAT[1] = "OM0HSEN ";
          TA1REC.TA1LOCAT[2] = "IO0440  ";
          TA1REC.TA1LOCAT[3] = " ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "     ";
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VITEM001";
          OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
          OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
          OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
          OM0HW01.OM0HWTK1 = OP2REC.OP2LNINB;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H   ";
    TA1REC.TA1LOCAT[1] = "OM0HSEN ";
    TA1REC.TA1LOCAT[2] = "IO0440  ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "     ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
    OM0HW01.OM0HWTK1 = OP2REC.OP2LNINB;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  end

  call "IO0450" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


end // end OM0HSEN

// see if item partially shipped
Function OM0HSEX()



    /* **********************************************************/
    /* *                                                       **/
    /* * purpose:  this is called when a regular order is being**/
    /* * converted to a bulk order. item cannot be partially   **/
    /* * shipped.                                              **/
    /* *                                                       **/
    /* **********************************************************/


  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = 0;

  set SQLCA empty;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    while (SQLCA.VAGen_SQLCODE == 0
     && OMAREC.OMASUB1 == 0)
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP2REC.OP2TSHPQ > 0)
          OMAREC.OMASUB1 = 1;
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OM0H   ";
          TA1REC.TA1LOCAT[1] = "OM0HSEX ";
          TA1REC.TA1LOCAT[2] = "IO0440  ";
          TA1REC.TA1LOCAT[3] = " ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "     ";
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VITEM001";
          OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
          OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
          OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
          OM0HW01.OM0HWTK1 = OP2REC.OP2LNINB;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
        end
      end
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H   ";
    TA1REC.TA1LOCAT[1] = "OM0HSEX ";
    TA1REC.TA1LOCAT[2] = "IO0440  ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "     ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    OM0HW01.OM0HWPAR = OP2REC.OP1PARTN;
    OM0HW01.OM0HWCOI = OP2REC.OP1CUOID;
    OM0HW01.OM0HWNOI = OP2REC.OP1NORID;
    OM0HW01.OM0HWTK1 = OP2REC.OP2LNINB;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWDON;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  end


  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


end // end OM0HSEX

// format nil hdr screen
Function OM0HSFM()



        /* ****************************************************/
        /* *  format the international header screen fields. **/
        /* ****************************************************/


  TA1REC.TA1LOCAT[1] = "OM0HSFM";
  OM0HM010.OPMPRC = "OM0H030";
  OM0HM010.OPMMAP = "OM0HM010";
  OM0HM010.OPMDT = VGVar.currentShortGregorianDate;
  OM0HM010.OPMRVN = 01;


  OM0HM010.OM0HMONM = OMWREC.OMWORD; /* order number*/
  OM0HM010.OM0HMCCO = OM0HM001.OM0HMCCO; /* company id*/
  OM0HM010.OM0HMSTR = OM0HM001.OM0HMSTR; /* store id*/
  OM0HM010.OM0HMDEP = OM0HM001.OM0HMDEP; /* dept id*/
  OM0HM010.OM0HMSTN = OM0HM001.OM0HMSTN; /* store name*/

       /* get company record for country name*/

  KUCREC.KUCCOID = OM0HM010.OM0HMCCO; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o*/

        /* check db2 return*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST"; /* database name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* view name*/
    OM0HW01.OM0HWTK1 = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OM0HW01.OM0HWTK1; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HSFM"; /* stmt group*/
    TA1REC.TA1LOCAT[4] = "IO0240"; /* io mod name*/
    XSOPS02(); /* abend routine*/
  end

  if (KUCREC.XCTCD in XCTTBL.XCTCD)
    OM0HM010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* country n*/
  else
    OM0HM010.XCTDESC = " ";
  end


  OM0HM010.OP1CUPO = OP1REC.OP1CUPO; /* po number*/
  OMAREC.OMAWDT = OP1REC.OP1CPODT; /* reformat date*/

  OM0HSDF(); /* reformat date into mm-dd-yy*/

  OM0HM010.OP1CPODT = OMAREC.OMASDATE; /* po date*/
  OM0HM010.OP1IPIND = OP1REC.OP1IPIND; /* prepaid insurance*/
  OM0HM010.XPTCD = OP1REC.XPTCD; /* payment term code*/
  OM0HM010.OP1FTIND = OP1REC.OP1FTIND; /* prepaid freight*/
  OM0HM010.OP1IFAMT = OP1REC.OP1IFAMT; /* inland freight*/

   /* CANADA 07/19/95*/

  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA if this is a Canadian order*/
    OM0HM010.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency code*/
  end /* CANA*/

           /* confirmation data is currently excluded*/

  set OM0HM010.OM0HMCD skip, invisible;
  set OM0HM010.OM0HMCDT skip, invisible;
  set OM0HM010.OM0HMCN skip, invisible;
  set OM0HM010.OM0HMCNB skip, invisible;

           /* get letter of credit data*/

  VLCORD01.OP1CUOID = OP1REC.OP1CUOID; /* cust order id*/
  VLCORD01.OP1NORID = OP1REC.OP1NORID; /* nike order id*/

  call "IO4270" ("S1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* declare cursor*/

        /* check db2 return*/

  if (SQLCA.VAGen_SQLCODE != 0) /* bad return*/
    TA1REC.TA1DBASE = "DNILO"; /* database name*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* view name*/
    TA1REC.TA1TBLKE = " "; /* key value*/
    TA1REC.TA1LOCAT[2] = "IO4270 "; /* io mod name*/
    TA1REC.TA1LOCAT[3] = "S1     "; /* function*/
    TA1REC.TA1LOCAT[4] = "       "; /* function*/
    XSOPS02(); /* abend routine*/
  end

  call "IO4270" ("N1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* fetch*/

        /* check db2 return*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OM0HM010.OM0HMLCR = "Y"; /* letter of credit received*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      OM0HM010.OM0HMLCR = "N"; /* letter of credit not received*/
    else
      TA1REC.TA1DBASE = "DNILO"; /* database name*/
      TA1REC.TA1TBLVU = "VLCORD01"; /* view name*/
      OM0HW01.OM0HWDND = OP1REC.OP1CUOID;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDND; /* key value*/
      TA1REC.TA1LOCAT[2] = "IO4270 "; /* io mod name*/
      TA1REC.TA1LOCAT[3] = "N1     "; /* function*/
      TA1REC.TA1LOCAT[4] = "       "; /* function*/
      XSOPS02(); /* abend routine*/
    end
  end

  call "IO4270" ("C1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

        /* check db2 return*/

  if (SQLCA.VAGen_SQLCODE != 0) /* bad return*/
    TA1REC.TA1DBASE = "DNILO"; /* database name*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* view name*/
    TA1REC.TA1TBLKE = " "; /* key value*/
    TA1REC.TA1LOCAT[2] = "IO4270 "; /* io mod name*/
    TA1REC.TA1LOCAT[3] = "C1     "; /* function*/
    TA1REC.TA1LOCAT[4] = "       "; /* function*/
    XSOPS02(); /* abend routine*/
  end

       /* if letter of credit received, get its header*/
  if (OM0HM010.OM0HMLCR == "Y")
    VLCHDR01.NCALCRID = VLCORD01.NCALCRID; /* locr id*/
    VLCHDR01.KUCCOID = VLCORD01.KUCCOID; /* company id*/

    call "IO4260" ("S ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* dnilo.vlchdr01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OM0HM010.NCALCRID = VLCHDR01.NCALCRID; /* l/c id*/
      OMAREC.OMAWDT = VLCHDR01.NCALCRDT; /* convert date*/

      OM0HSDF(); /* reformat date into mm-dd-yy*/

      OM0HM010.NCALCRDT = OMAREC.OMASDATE; /* receive date*/
      set OM0HM010.OM0HMRDT initialAttributes; /* l/c receive date literal*/
    else
      TA1REC.TA1DBASE = "DNILO"; /* database name*/
      TA1REC.TA1TBLVU = "VLCHDR01"; /* view name*/
      TA1REC.TA1TBLKE = VLCHDR01.NCALCRID; /* key value*/
      TA1REC.TA1LOCAT[3] = "OM0HSFM"; /* stmt group*/
      TA1REC.TA1LOCAT[4] = "IO4260"; /* io mod name*/
      XSOPS02(); /* abend routine*/
    end
  else
    OM0HM010.NCALCRID = " "; /* l/c id*/
    set OM0HM010.OM0HMRDT skip, invisible; /* receive date literal*/
    OM0HM010.NCALCRDT = " "; /* l/c receive date*/
  end


end // end OM0HSFM

// look up gpc code abbrev.
Function OM0HSGP()


  if (OM0HM001.XGPCD in XGPTBL.XGPCD)
    OM0HM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    OM0HM001.XGPABRV = " ";
  end


end // end OM0HSGP

// get instructions and labels
Function OM0HSIN()



       /* ********************************************************/
       /* * this statement group reads the dorder.vtext001 table**/
       /* * and displays the first instruction and the first    **/
       /* * label. if there are more labels and/or instructions,**/
       /* * the message >>more special instructions will be     **/
       /* * displayed on the screen                             **/
       /* ********************************************************/


      /* initialize the abend record*/

  TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
  TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OM0HSIN"; /* process name*/
  TA1REC.TA1LOCAT[4] = "IO0470";


       /* select set to the dorder.vtext001 table*/


  OP4REC.OP4KEY = OP1REC.OP1KEY;

  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
    XSOPS02();
  end



       /* select the first instruction and the first label*/
       /* to display*/

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP4REC.OP4TRTYP == "I")
        OM0HW01.OM0HWIC = OM0HW01.OM0HWIC + 1;
        if (OM0HW01.OM0HWIC == 1) /* the first instruction*/
          OM0HM001.OM0HMINT = OP4REC.OP4TXT; /* instruction*/
          OM0HM001.XNDCD = OP4REC.XNDCD; /* deparment*/
          OM0HW01.OM0HWISQ = OP4REC.OP4TRSEQ; /* save sequence number*/
          if (OP4REC.OP4TXTOF == "Y")
            OM0HM001.OP4TXTOF = "*";
          end
        end
      else
        if (OP4REC.OP4TRTYP == "L")
          OM0HW01.OM0HWLC = OM0HW01.OM0HWLC + 1;
          if (OM0HW01.OM0HWLC == 1) /* the first label*/
            OM0HM001.OM0HMLBL = OP4REC.OP4TXT;
            OM0HW01.OM0HWLSQ = OP4REC.OP4TRSEQ; /* save sequence number*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
        XSOPS02();
      end
    end
  end



       /* if there are more than one instructions or labels*/
       /* display the >>more special instructions*/

  if (OM0HW01.OM0HWIC > 1
   || OM0HW01.OM0HWLC > 1)
    set OM0HM001.OM0HMIND initialAttributes;
    set OM0HM001.OM0HMINS initialAttributes;
  else
    set OM0HM001.OM0HMIND skip, invisible;
    set OM0HM001.OM0HMINS skip, invisible;
  end



   /* ************************************************************/
end // end OM0HSIN

// get inactive sales rep
Function OM0HSIR()



       /* ***************************************************/
       /* * this statement group gets the inactive rep     **/
       /* ***************************************************/

  while (SQLCA.VAGen_SQLCODE == 0
   && OM0HW01.OM0HWIRF == "N") /* sales rep not yet found*/
    call "IO0400" ("N3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VRAGCY02.XXXSTAT == "I")
        OM0HW01.OM0HWIRF = "Y"; /* inactive rep found*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
        TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
        OM0HW01.SM4REPID = VRAGCY02.SM4REPID;
        OM0HW01.SM1AGYID = VRAGCY02.SM1AGYID;
        OM0HW01.XXXSTAT = VRAGCY02.XXXSTAT;
        TA1REC.TA1TBLKE = OM0HW01.OM0HWSMK; /* table key*/
        TA1REC.TA1LOCAT[3] = "OM0HSIR "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0400  ";
        XSOPS02(); /* abend routine*/
      end
    end
  end



   /* ************************************************************/
end // end OM0HSIR

Function OM0HSKC()


       /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
  OM0HW01.OM0HWCOI = OP1REC.KUCCOID;
  TA1REC.TA1TBLKE = OM0HW01.OM0HWDON; /* table key*/
  TA1REC.TA1LOCAT[3] = "OM0HSKC"; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0240";


   /* this logic is used to prepare the pass record for*/
   /* terms module.  kucrec is read to check if customer*/
   /* indicators say there are terms.  in op03 the actual*/
   /* customer terms record is read and used for processing.*/

  OEAREC.OEACUTRM = "N"; /* init flag*/

       /* read the customer company record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XOTTBL.XOTPROPF == "Y"
       && KUCREC.KUCPRPTI == "Y")
        OEAREC.OEACUTRM = "Y";
      else
        if (XOTTBL.XOTFUTRF == "Y"
         && KUCREC.KUCFTRTI == "Y")
          OEAREC.OEACUTRM = "Y";
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end


end // end OM0HSKC

// redo terms on suborder
Function OM0HSM1()

    /* format pass record for terms subprogram*/

  OM0HSM2(); /* format standard fields*/

  OBTREC.OBT-TOTAL-METHOD = 1; /* get totals from dorder.vorhdr01*/
  OBT-EDIT-FOR-SPGM-MIN = "N"; /* don't edit for spgm minimums*/

  call "OB1120" (OBTREC) {isNoRefresh = yes, isExternal = yes}; /* subpgm to redo terms*/

  OM0HSM3(); /* evaluate the return code*/

  if (OMAREC.OMAERR == "N") /* if a good return (not -911)*/
    OM0HSM4(); /* move terms to the op1rec*/
    if (OP1REC.SP1ID != " ") /* if a sales program on the subord*/
      OM0HM001.OM0HMSQD = OP1REC.SP6MDISC; /* move new tier min*/
    end /* pct to the map*/
  end

end // end OM0HSM1

// format ob1120 pass record
Function OM0HSM2()

    /* format standard values in pass record to terms calc subpgm*/

  set OBTREC empty;

  OBTREC.OBT-TERMS-METHOD = 0; /* domestic terms rather than NIL*/

  OBTREC.KUCCOID = OP1REC.KUCCOID;
  OBTREC.KUMSTRID = OP1REC.KUMSTRID;
  OBTREC.XNXCD = OP1REC.XNXCD;
  OBTREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OBTREC.XGPCD = OP1REC.XGPCD;
  OBTREC.XOTCD = OP1REC.XOTCD;
  OBTREC.XOBCD = OP1REC.XOBCD;
  OBTREC.SP1ID = OP1REC.SP1ID;
  OBTREC.OP1PARTN = OP1REC.OP1PARTN;
  OBTREC.OP1CUOID = OP1REC.OP1CUOID;

end // end OM0HSM2

// evaluate ob1120 return code
Function OM0HSM3()

    /* look at the return code from the terms subprogram*/

  if (OBTREC.OBT-RETURN-STAT == "00") /* terms calculated ok*/
    /* next sentence*/
  else
    if (OBTREC.OBT-RETURN-STAT == "09") /* a -911 in ob1120*/
      TA1REC.TA1TYPE = "APPL"; /* post an application error*/
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0H    ";
      TA1REC.TA1LOCAT[1] = "OM0HSM3 ";
      TA1REC.TA1LOCAT[2] = "OB1120  ";
      TA1REC.TA1LOCAT[3] = OBTREC.OBT-RETURN-STAT;
      TA1REC.TA1LOCAT[4] = "        ";
      set TAEREC empty;
      OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
      OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OBPREC.OP1CUOID;
      OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP1REC.OP1NORID;
      TAEREC.TAEDESC1 = "-911 RETURN CODE FROM OB1120, TERMS";
      TAEREC.TAEDESC2 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(10); /* database busg, try again later*/
      return;
    else /* all others including not found*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback changes made so far*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "OM0HSM3 ";
      TA1REC.TA1LOCAT[2] = "OB1120  ";
      TA1REC.TA1LOCAT[3] = OBTREC.OBT-RETURN-STAT;
      TA1REC.TA1LOCAT[4] = "        ";
      set TAEREC empty;
      OM0HW01.OM0HW-OB1120-ERROR-INFO1 = " ";
      OM0HW01.OM0HW-OB1120-ERROR-INFO2 = " ";
      OM0HW01.OM0HW-ERROR-MESSAGE = "BAD RTN FROM OB1120";
      OM0HW01.OBT-RETURN-KEY = OBTREC.OBT-RETURN-KEY;
      OM0HW01.OBT-RETURN-LOCATION = OBTREC.OBT-RETURN-LOCATION;
      OM0HW01.OBT-RETURN-DATABASE = OBTREC.OBT-RETURN-DATABASE;
      OM0HW01.OM0HW-OB1120-OP-CUST-ORD-ID-NUM = OBTREC.OP1CUOID;
      TAEREC.TAEDESC1 = OM0HW01.OM0HW-OB1120-ERROR-INFO1;
      TAEREC.TAEDESC2 = OM0HW01.OM0HW-OB1120-ERROR-INFO2;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      XSPF4();
      exit program;
    end
  end



   /* *************************************************************/
end // end OM0HSM3

// move new terms to op1rec
Function OM0HSM4()

    /* move the terms received from ob1120 to the order header*/

  OP1REC.OP1TIERF = "N"; /* turn off tier level override*/
  OP1REC.OP1TLVLN = OBTREC.OP1TLVLN; /* tier level nbr*/
  OP1REC.SP6MDISC = OBTREC.SP6MDISC; /* tier level min*/

  OP1REC.OP1TDOF = "N"; /* turn off trade dsct override*/
  OP1REC.XTDPCT = OBTREC.XTDPCT;
  OP1REC.OP1TDFCP = OBTREC.OP1TDFCP; /* trade discount face pct*/
  OP1REC.OP1TDBKP = OBTREC.OP1TDBKP; /* trade discount bank pct*/

  OP1REC.OP1PTOF = "N"; /* turn off payment terms override*/
  OP1REC.XPTCD = OBTREC.XPTCD;

  OP1REC.OP1AAOF = "N"; /* turn off ad allowance override*/
  OP1REC.XAAPCT = OBTREC.XAAPCT;
  OP1REC.OP1AAFCP = OBTREC.OP1AAFCP; /* add allowance face pct*/
  OP1REC.OP1AABKP = OBTREC.OP1AABKP; /* add allowance bank pct*/

  OP1REC.OP1COPOF = "N"; /* turn off coop override*/
  OP1REC.XCPPCT = OBTREC.XCPPCT;

  OP1REC.OP1DFAOF = "N"; /* turn off defective allowance ovrd*/
  OP1REC.XDAPCT = OBTREC.XDAPCT;


end // end OM0HSM4

// redo prices
Function OM0HSMP()

      /* redo the prices for each suborder*/

  OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];

      /* if the original suborder, use it since it contains*/
      /* the current changes like order type and need date*/

  if (OP1REC.OP1NORID == OM0HW01.OP1NORID)
    OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  end

      /* if the suborder is shipped, add it to the total for*/
      /* terms but don't reprice*/
      /* (if the suborder is cancelled, it won't get here)*/

  if (OP1REC.XOSCD == "SH")
    OM0HW01.OBT-TOTAL-ORDER-UNITS = OM0HW01.OBT-TOTAL-ORDER-UNITS + OP1REC.OP1OTUNT;
    OM0HW01.OBT-TOTAL-ORDER-VALUE = OM0HW01.OBT-TOTAL-ORDER-VALUE + OP1REC.OP1OVALU;
    return; /* return*/
  end

     /* initialize the credit variance fields for the suborder*/

  OM0HW01.OM0HW-ON-ORDER-VALUE-VARIANCE = 0;
  OM0HW01.OM0HW-ALLOC-VALUE-VARIANCE = 0;

      /* read each item for this suborder and redo its price*/

  set OP3REC empty;
  set OPBREC empty;
  set OP8REC empty;

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;
  OP3REC.OP1NORID = OP1REC.OP1NORID;
  OP8REC.OP8TASK = "SS";
  OP8REC.OP8LOC = "OM0HSMP";
  OP8REC.OP8MAP = "OM0HM001";

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    /* next sentence;*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback the changes*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H";
    TA1REC.TA1LOCAT[2] = "OM0HSMP";
    TA1REC.TA1LOCAT[3] = "DB1000";
    TA1REC.TA1LOCAT[4] = "SS    ";
    set TAEREC empty;
    OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
    OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP3REC.OP1CUOID;
    OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP3REC.OP1NORID;
    TAEREC.TAEDESC1 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
    TAEREC.TAEDESC2 = OPBREC.OPBSZRC;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    XSPF4();
    exit program;
  end

  while (OPBREC.OPBSZRC == +0
   && OMAREC.OMAERR == "N")
    set OPBREC empty;
    OP8REC.OP8TASK = "SN";
    OP8REC.OP8LOC = "OM0HSMP";

    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

    if (OPBREC.OPBSZRC == +0)
      OM0HSMR(); /* redo the prices*/
    else
      if (OPBREC.OPBSZRC == +1) /* not found*/
         /* next sentence*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* rollback the changes*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0H";
        TA1REC.TA1LOCAT[2] = "OM0HSMP";
        TA1REC.TA1LOCAT[3] = "DB1000";
        TA1REC.TA1LOCAT[4] = "SN    ";
        set TAEREC empty;
        OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
        OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP3REC.OP1CUOID;
        OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP3REC.OP1NORID;
        OM0HW01.SY1STNBR = OP3REC.SY1STNBR;
        OM0HW01.SY2CLRID = OP3REC.SY2CLRID;
        OM0HW01.XDMCD = OP3REC.XDMCD;
        TAEREC.TAEDESC1 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
        TAEREC.TAEDESC2 = OPBREC.OPBSZRC;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        XSPF4();
        exit program;
      end
    end
  end

  OP8REC.OP8TASK = "CS";
  OP8REC.OP8LOC = "OM0HSMP";

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

      /* add the revised suborder value and suborder units to*/
      /* to the totals used for determining terms*/

  OM0HW01.OBT-TOTAL-ORDER-UNITS = OM0HW01.OBT-TOTAL-ORDER-UNITS + OP1REC.OP1OTUNT;
  OM0HW01.OBT-TOTAL-ORDER-VALUE = OM0HW01.OBT-TOTAL-ORDER-VALUE + OP1REC.OP1OVALU;

     /* save the changes made to op1rec by credit and*/
     /* by changing the total value*/

  OM0HW04.OP1GROUP[OMASUB2] = OP1REC.OP1GROUP;

      /* if the original suborder, also save the changes in*/
      /* omwrec*/

  if (OP1REC.OP1NORID == OM0HW01.OP1NORID)
    OMWREC.OP1GROUP = OP1REC.OP1GROUP;
    OM0HM001.OM0HMVAL = OP1REC.OP1OVALU; /* new ord value to map*/
  end



   /* *************************************************************/
end // end OM0HSMP

// call ob1100 for new prices
Function OM0HSMR()

     /* OCD Changes:  Search for SLARSE*/

     /* if the line item has been cancelled, move on to the next one*/
     /* if fully shipped, move on;  otherwise reprice*/

  if (OP3REC.OP2LNIST == "XL"
   || OP3REC.OP2LNIST == "SH")
    return;
  end

      /* initialize ob1100 pass record with header info*/

  set OBPREC empty;

  if (OP1REC.XDVCD == "02")
    OBPREC.OBP-PRICE-METHOD = "I";
  else
    OBPREC.OBP-PRICE-METHOD = "D";
  end

  OBPREC.OP1CUOID = OP1REC.OP1CUOID;
  OBPREC.KUCCOID = OP1REC.KUCCOID;
  OBPREC.OP1CMPNB = OP1REC.OP1CMPNB;
  OBPREC.XOTCD = OP1REC.XOTCD;
  OBPREC.XOBCD = OP1REC.XOBCD;
  OBPREC.SP1ID = OP1REC.SP1ID;
  OBPREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OBPREC.OBP-BOOKING-DATE = OP1REC.OP1ENTDT;
  OBPREC.XWHCD = OP1REC.XWHCD;
  /*  */
  /* CANADA 07/19/95*/
  /*  */
  if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA this is a Canadian order*/
    OBPREC.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency code*/
    OBPREC.XCT-CTRY-CD = KUCREC.XCTCD; /* CANA country code*/
  end /* CANA*/

      /* fill the pass record with the item information*/

  OBPREC.XGPCD = OP3REC.XGPCD;
  OBPREC.SY1STNBR = OP3REC.SY1STNBR;
  OBPREC.SY2CLRID = OP3REC.SY2CLRID;
  OBPREC.XDMCD = OP3REC.XDMCD;
  OBPREC.XQACD = OP3REC.XQACD;
  OBPREC.XUMCD = OP3REC.XUMCD;

  OM0HW01.OM0HW-SUB = 1;
  while (OM0HW01.OM0HW-SUB < 41)
    if (OP3REC.OP3SZAFL[OM0HW-SUB] == "Y")
      if (OBPREC.OBP-FIRST-SZ-ID == 0)
        OBPREC.OBP-FIRST-SZ-ID = OM0HW01.OM0HW-SUB;
        OBPREC.OBP-LAST-SZ-ID = OM0HW01.OM0HW-SUB;
      else
        OBPREC.OBP-LAST-SZ-ID = OM0HW01.OM0HW-SUB;
      end
    end
    OM0HW01.OM0HW-SUB = OM0HW01.OM0HW-SUB + 1;
  end

  call "OB1100" (OBPREC) {isNoRefresh = yes, isExternal = yes}; /* subpgm that computes the price*/

  if (OBPREC.OBP-RETURN-STAT == "00") /* price found*/
    /* next sentence*/
  else
    if (OBPREC.OBP-RETURN-STAT == "01" /* no price for effctve date, 0 prc*/
     || OBPREC.OBP-RETURN-STAT == "02") /* or some row not found, 0 price*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback changes made so far*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(725); /* can't chg spgm, no price found*/
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H    ";
      TA1REC.TA1LOCAT[1] = "OM0HSMR ";
      TA1REC.TA1LOCAT[2] = "OB1100  ";
      TA1REC.TA1LOCAT[3] = OBPREC.OBP-RETURN-STAT;
      TA1REC.TA1LOCAT[4] = "        ";
      set TAEREC empty;
      OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
      OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OBPREC.OP1CUOID;
      OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP1REC.OP1NORID;
      OM0HW01.SY1STNBR = OBPREC.SY1STNBR;
      OM0HW01.SY2CLRID = OBPREC.SY2CLRID;
      OM0HW01.XDMCD = OBPREC.XDMCD;
      TAEREC.TAEDESC1 = "BAD RETURN CODE FROM OB1100, REPRICE";
      TAEREC.TAEDESC2 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      XSPF4();
      exit program;
    end
  end

      /* save off old values for credit*/

  OM0HW01.OM0HW-OLD-ITEM-VALUE = OP3REC.OP2LNIVL;
  OM0HW01.OM0HW-OLD-ALLOC-VALUE = OP3REC.OP2TALCQ * OP3REC.OP2AUPRC;

     /* turn off the item price override flag*/

  OP3REC.OP2PRCOF = "N";

     /* put new price for each size into op3rec*/

  OM0HW01.OM0HW-SUB = 1;
  OM0HW01.OM0HW-PRICE-CHNG-FL = "N";
  while (OM0HW01.OM0HW-SUB < 41)
    if (OP3REC.OP3SZAFL[OM0HW-SUB] == "Y")
      OP3REC.OP3PRCOF[OM0HW-SUB] = "N";
      if (OBPREC.SY5PRCUN[OM0HW-SUB] != OP3REC.SY5PRCUN[OM0HW-SUB])
        OM0HW01.OM0HW-PRICE-CHNG-FL = "Y";
        OP3REC.SY5PRCUN[OM0HW-SUB] = OBPREC.SY5PRCUN[OM0HW-SUB];
      end
    end
    OM0HW01.OM0HW-SUB = OM0HW01.OM0HW-SUB + 1;
  end
      /* update the item*/

  set OPBREC empty;

  OP8REC.OP8TASK = "U ";
  OP8REC.OP8LOC = "OM0HSMR";

  OP3REC.ZZZCHGDT = OMAREC.OMACDT;
  OM0HW01.OM0HWT1 = VGVar.currentFormattedTime;
  OM0HW01.OM0HWTH2 = OM0HW01.OM0HWTH1;
  OM0HW01.OM0HWTM2 = OM0HW01.OM0HWTM1;
  OP3REC.ZZZCHGTM = OM0HW01.OM0HWT2;

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* good return code*/
     /* next sentence*/
  else
    if (OPBREC.OPBSZRC == "2" /* change count problem*/
     || OPBREC.OPBSZRC == "3")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback changes made so far*/
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(330); /* change not made- try again*/
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback the changes*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[2] = "OM0HSMR";
      TA1REC.TA1LOCAT[3] = "DB1000";
      TA1REC.TA1LOCAT[4] = "U     ";
      set TAEREC empty;
      OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
      OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP3REC.OP1CUOID;
      OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP3REC.OP1NORID;
      OM0HW01.SY1STNBR = OP3REC.SY1STNBR;
      OM0HW01.SY2CLRID = OP3REC.SY2CLRID;
      OM0HW01.XDMCD = OP3REC.XDMCD;
      TAEREC.TAEDESC1 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
      TAEREC.TAEDESC2 = OPBREC.OPBSZRC;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      XSPF4();
      exit program;
    end
  end

   /* I'm only writing one item when there are more than one.  This*/
   /* is a problem?                                        SLARSE*/

  if (OM0HW01.OM0HW-PRICE-CHNG-FL == "Y")
    OM0HS-CALL-OZ2090(); /* write to Item Size Change Reason Table SLARSE*/
    OM0HW01.OM0HW-PRICE-CHNG-FL = "N";
  end


     /* update the order value on the suborder header*/

  OP1REC.OP1OVALU = OP1REC.OP1OVALU - OM0HW01.OM0HW-OLD-ITEM-VALUE;
  OP1REC.OP1OVALU = OP1REC.OP1OVALU + OP3REC.OP2LNIVL;

     /* determine new allocated value for credit -*/
     /* new item value done for us by DB1000*/

  OM0HW01.OM0HW-NEW-ALLOC-VALUE = OP3REC.OP2TALCQ * OP3REC.OP2AUPRC;

     /* find the difference in the total item value and add it*/
     /* to the variance in item value for the suborder*/

  OM0HW01.OM0HW-HOLDING-FIELD = OP3REC.OP2LNIVL -   OM0HW01.OM0HW-OLD-ITEM-VALUE;
  OM0HW01.OM0HW-ON-ORDER-VALUE-VARIANCE = OM0HW01.OM0HW-ON-ORDER-VALUE-VARIANCE +   OM0HW01.OM0HW-HOLDING-FIELD;

     /* find difference of allocated value and add it to the*/
     /* total suborder allocated variance*/

  OM0HW01.OM0HW-HOLDING-FIELD = OM0HW01.OM0HW-NEW-ALLOC-VALUE -   OM0HW01.OM0HW-OLD-ALLOC-VALUE;
  OM0HW01.OM0HW-ALLOC-VALUE-VARIANCE = OM0HW01.OM0HW-ALLOC-VALUE-VARIANCE +   OM0HW01.OM0HW-HOLDING-FIELD;

      /* call credit if a change in value*/

  if (OM0HW01.OM0HW-ON-ORDER-VALUE-VARIANCE == 0
   && OM0HW01.OM0HW-ALLOC-VALUE-VARIANCE == 0)
    /* NEXT SENTENCE          /* no change so don't call credit*/
  else
    set CC1REC empty;
    set SQLCA empty;
    CC1REC.CC1PVALU = OM0HW01.OM0HW-ON-ORDER-VALUE-VARIANCE;
    CC1REC.CC1AVALU = OM0HW01.OM0HW-ALLOC-VALUE-VARIANCE;
    CC1REC.CC1CLRSN = 0;
    CC1REC.CC1PGMNM = "OM0H";
    call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};
    if (CC1REC.CC1RTNCD != 0) /* bad sqlreturn from credit*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback the changes*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[2] = "OM0HSMR";
      TA1REC.TA1LOCAT[3] = "CC1070";
      TA1REC.TA1LOCAT[4] = CC1REC.CC1RTNCD;
      set TAEREC empty;
      OM0HW01.OM0HW-ERROR-DIAG-KEY = " ";
      OM0HW01.OM0HW-OP-CUST-ORD-ID-NUM = OP3REC.OP1CUOID;
      OM0HW01.OM0HW-OP-NIKE-ORD-ID-NUM = OP3REC.OP1NORID;
      TAEREC.TAEDESC1 = OM0HW01.OM0HW-ERROR-DIAG-KEY;
      TAEREC.TAEDESC2 = CC1REC.CC1RTNMA;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      XSPF4();
      exit program;
    end
  end


   /* *************************************************************/
end // end OM0HSMR

// redo domestic terms
Function OM0HSMT()

    /* when sales program is changed, the change must be edited against*/
    /* and updated on all suborders on the order.  so there are multiple*/
    /* op1recs.  the one saved to omwrec is the current working copy,*/
    /* the suborder displayed on the screen that all other changes have*/
    /* been applied to.  all the suborders have been read and are stored*/
    /* in an array in om0hw04.  so when all the suborders have to been*/
    /* looked at, the current one is saved off in omwrec.  in going thru*/
    /* the array of all the suborders, when the current one is found,*/
    /* the one in the array is overlayed with the one saved off in omwrec*/
    /* so the changes can be applied there.  when finished, the current*/
    /* one is restored from omwrec to op1rec.*/

    /* save original suborder*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP;


     /* initialize compare fields*/

  OM0HW01.OM0HW-SAVE-KUMSTRID = 0;
  OM0HW01.OM0HW-SAVE-XNXCD = 0;
  OM0HW01.OM0HW-SAVE-OP1CUNDT = 0;
  OM0HW01.OM0HW-SAVE-XOTCD = " ";
  OM0HW01.OM0HW-SAVE-XOBCD = " ";
  OM0HW01.OM0HW-SAVE-XGPCD = " ";


    /* get & apply new terms to each suborder if necessary*/

  OMAREC.OMASUB2 = 1;
  while (OMAREC.OMASUB2 <= OM0HW01.OM0HW-TOTAL-SUBORDERS)
    OP1REC.OP1GROUP = OM0HW04.OP1GROUP[OMASUB2];
    if (OP1REC.XOSCD == "SH" /* if shipped or cancelled*/
     || OP1REC.XOSCD == "XL") /* don't redo terms*/
       /* next sentence*/
    else
      if (OP1REC.OP1NORID == OM0HW01.OP1NORID) /* if current suborder*/
        OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* make changes to that*/
      end
      OM0HSMU(); /* get & apply new terms*/
      if (OP1REC.OP1NORID == OM0HW01.OP1NORID) /* if current suborder*/
        OM0HM001.OM0HMSQD = OP1REC.SP6MDISC; /* display min on map*/
        OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save changes to curr*/
      end
      OM0HW04.OP1GROUP[OMASUB2] = OP1REC.OP1GROUP; /* save changes*/
    end
    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
  end

    /* restore original suborder*/

  OP1REC.OP1GROUP = OMWREC.OP1GROUP;

end // end OM0HSMT

// redo terms for each suborder
Function OM0HSMU()

    /* if the store,department, need date, gpc, or order types*/
    /* are the same as the last suborder, the terms will be the same*/
    /* so they can just be moved to the header record; if not, use*/
    /* ob1120 to get them and then move them to the header*/

  if (OM0HW01.OM0HW-SAVE-KUMSTRID == OP1REC.KUMSTRID /* if already*/
   && OM0HW01.OM0HW-SAVE-XNXCD == OP1REC.XNXCD       /* got terms*/
   && OM0HW01.OM0HW-SAVE-OP1CUNDT == OP1REC.OP1CUNDT 
   && OM0HW01.OM0HW-SAVE-XOTCD == OP1REC.XOTCD       
   && OM0HW01.OM0HW-SAVE-XOBCD == OP1REC.XOBCD       
   && OM0HW01.OM0HW-SAVE-XGPCD == OP1REC.XGPCD)     
     /* next sentence*/
  else
    OM0HSM2(); /* format standard fields*/
    OBTREC.OBT-TOTAL-METHOD = 2; /* pass the order totals*/
    OBTREC.OBT-TOTAL-ORDER-UNITS = OM0HW01.OBT-TOTAL-ORDER-UNITS;
    OBTREC.OBT-TOTAL-ORDER-VALUE = OM0HW01.OBT-TOTAL-ORDER-VALUE;
    OBTREC.OBT-EDIT-FOR-SPGM-MIN = "N"; /* don't edit for minimum*/

    call "OB1120" (OBTREC) {isNoRefresh = yes, isExternal = yes}; /* subpgm to find terms*/

    OM0HSM3(); /* evaluate return code*/

    if (OMAREC.OMAERR == "Y") /* a -911*/
      return;
    else /* save fields used to determine terms*/
      OM0HW01.OM0HW-SAVE-KUMSTRID = OP1REC.KUMSTRID;
      OM0HW01.OM0HW-SAVE-XNXCD = OP1REC.XNXCD;
      OM0HW01.OM0HW-SAVE-OP1CUNDT = OP1REC.OP1CUNDT;
      OM0HW01.OM0HW-SAVE-XOTCD = OP1REC.XOTCD;
      OM0HW01.OM0HW-SAVE-XOBCD = OP1REC.XOBCD;
      OM0HW01.OM0HW-SAVE-XGPCD = OP1REC.XGPCD;
    end
  end

  OM0HSM4(); /* move terms to op1rec*/

end // end OM0HSMU

// get order class description
Function OM0HSOC()



       /* *******************************************************/
       /* * this statement group                               **/
       /* * gets the order class abbreviated description       **/
       /* *******************************************************/


  if (OM0HM001.XOCCD in XOCTBL.XOCCD
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
    OM0HW01.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex];
    OM0HW01.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSOC

// get order change reason desc
Function OM0HSOM()



       /* *******************************************************/
       /* * this statement group gets the abbreviated          **/
       /* * description for the order change reason code       **/
       /* *******************************************************/

  if (OP1REC.XOMCD in XOMTBL.XOMCD
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XOMABRV = XOMTBL.XOMABRV[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSOM

// get order status description
Function OM0HSOS()




       /* *******************************************************/
       /* * this statement group reads the order status table  **/
       /* * to get the order status abbreviated description    **/
       /* * and saves the allow change flag (xosalwch) and the **/
       /* * allow cancellation flag (xosalwxl)                 **/
       /* *******************************************************/


  if (OP1REC.XOSCD in XOSTBL.XOSCD
   && XOSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XOSABRV = XOSTBL.XOSABRV[sysVar.arrayIndex];
    OM0HW01.XOSALWCH = XOSTBL.XOSALWCH[sysVar.arrayIndex];
    OM0HW01.XOSALWXL = XOSTBL.XOSALWXL[sysVar.arrayIndex];
  end



   /* ***********************************************************/
end // end OM0HSOS

// get system order type flags
Function OM0HSOT()


   /* ***** get system order type flags for working storage*/
         /* these flags are for the original order type*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OMAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
    OMAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex];
    OM0HW01.XOTADIRS = XOTTBL.XOTADIRS[sysVar.arrayIndex];
    OM0HW01.XOTABULK = XOTTBL.XOTABULK[sysVar.arrayIndex];
    OM0HW01.XOTLDAYS = XOTTBL.XOTLDAYS[sysVar.arrayIndex];
  end


end // end OM0HSOT

// get the production deadline
Function OM0HSP1()


      /* see if need date is 30 days past production deadline.*/
      /* if it is, only authorized personnel are allowed to*/
      /* change warehouse code.*/


      /* ********************************************************/
      /* * get all line items for each selected suborder -     **/
      /* * io0440 (vitem001).                                  **/
      /* * need style, color and dimension for db2 call to     **/
      /* * io0560 (vcolor02).  this call will return gender age**/
      /* * and product cat for db2 call to io2560 (vcutof01).  **/
      /* * need date will be edited versus cutoff date in      **/
      /* * dorder.vcutof01.                                    **/
      /* ********************************************************/

   /* ************************************************************/

    /* set up product information*/

   /* ************************************************************/

  if (converseVar.validationMsgNum == 404) /* record not on cutoff table*/
    return;
  end

  OP2REC.OP2KEY = OP1REC.OP1KEY; /* order key*/

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HW01.OM0HWSCF = "Y"; /* authorized security to chg*/
    while (SQLCA.VAGen_SQLCODE == 0
     && OM0HW01.OM0HWSCF == "Y")
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        OM0HSP2(); /* get product record*/
        OM0HSP3(); /* check the production d/l*/
      end
    end

    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HSP1"; /* statement group name*/
    TA1REC.TA1LOCAT[4] = "IO0440";
    XSOPS02();
  end



   /* *************************************************************/
end // end OM0HSP1

// get the product record
Function OM0HSP2()



      /* ********************************************************/
      /* * read db2 for the product's style,color & size recs  **/
      /* * this is a combined view of 3 records.               **/
      /* ********************************************************/

  if (SQLCA.VAGen_SQLCODE == 0)

    set SYCREC empty;
    set SQLCA empty;
    set TA1REC empty;

        /* set up read key*/
    SYCREC.XGPCD = OP1REC.XGPCD; /* gpc*/
    SYCREC.SY1STNBR = OP2REC.SY1STNBR; /* style*/
    SYCREC.SY2CLRID = OP2REC.SY2CLRID; /* color*/
    SYCREC.XDMCD = OP2REC.XDMCD; /* dimension*/

    /* CANADA 07/19/95*/

        /* read db2*/

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* single select*/


        /* check db2 return code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA*/
        set WSY2000 empty;
        WSY2000.XDR-PROD-REG-CD = "05";
        OM0HS-SEL-SY2000(); /* CANA call SY2000*/
        if (OM0HW01.OM0HW-WSY2000-FND-FLAG == "Y") /* CANA found*/
          SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1]; /* CANA*/
          SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2]; /* CANA*/
          SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3]; /* CANA*/
          SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4]; /* CANA*/
          SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1]; /* CANA*/
          SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2]; /* CANA*/
          SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3]; /* CANA*/
          SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4]; /* CANA*/
          SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD; /* CANA*/
        else /* CANA*/
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            OMAREC.OMAERR = "Y"; /* CANA*/
            converseLib.validationFailed(10); /* CANA database busy*/
            return; /* CANA*/
          else /* CANA*/
            if (WSY2000.WSY2000-RETURN-CODE == 02)
                                   /* CANA style/color not found*/
              OMAREC.OMAERR = "Y"; /* CANA*/
              converseLib.validationFailed(911); /* CANA style/color not found*/
              return; /* CANA*/
            else
              OMAREC.OMAERR = "Y"; /* CANA*/
              converseLib.validationFailed(909); /* CANA database error*/
              return; /* CANA*/
            end
          end
        end
      else
        if (OP1REC.XGPCD == "03")
          if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
           || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
           /* continue processing*/
          else
            set WSY2000 empty;
            WSY2000.XDR-PROD-REG-CD = "01";
            OM0HS-SEL-SY2000();
            if (OM0HW01.OM0HW-WSY2000-FND-FLAG == "Y") /* found*/
              SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
              SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
              SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
              SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
              SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
              SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
              SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
              SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
              SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
            else
              if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
                OMAREC.OMAERR = "Y";
                converseLib.validationFailed(10); /* database busy*/
                return;
              else
                if (WSY2000.WSY2000-RETURN-CODE == 02)
                                    /* style/color not found*/
                  OMAREC.OMAERR = "Y";
                  converseLib.validationFailed(911); /* style/color not found*/
                  return;
                else
                  OMAREC.OMAERR = "Y";
                  converseLib.validationFailed(909); /* database error*/
                  return;
                end
              end
            end
          end
        end
      end
    else
      TA1REC.TA1DBASE = "DPROD"; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
      XSOPS02(); /* common abend routine*/
    end
  end





   /* *************************************************************/
end // end OM0HSP2

// check the production deadline
Function OM0HSP3()


   /* *************************************************************/


       /* ******************************************************/
       /* * this statement group checks the production        **/
       /* * deadline date vs the need date for future orders  **/
       /* * note that om0hwnpp is set to 'n' in calling sgrp**/
       /* ******************************************************/

  set TA1REC empty;
  set TA2REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  OM0HW01.OM0HWPDF = "N"; /* prd deadline flag found*/

  OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
  OPJREC.XPCCD = SYCREC.XPCCD; /* product cat*/
  OPJREC.XGACD = SYCREC.XGACD; /* gender age*/
  OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
  OPLREC.OPLSOP = "SF"; /* selection option*/
  OPLREC.OPJCNDTB = TA2REC.TA2GRGGN; /* need date*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    OM0HW01.OM0HWPDF = "Y"; /* deadline found*/
    if (OMAREC.OMACDT > OPJREC.OPJCUTDT) /* cur date > prod d/l*/
      OM0HW01.OM0HWOPP = "Y"; /* old need date flag*/
      TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
      TA2REC.TA2DBDTN = OMAREC.OMACDT; /* today's date*/
      TA2REC.TA2DTOPT = "DAYSDIFF";
      TA2REC.TA2GRTYP = "G";

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)

        /* *************************************************/
        /* * warehouses can only be changed by authorized*/
        /* * people if today is 30 days past the production*/
        /* * deadline.*/
        /* *************************************************/

        if (TA2REC.TA2DBDDN >= 30)
          if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID)
            if (YOSTBL.YOSWHSFL[sysVar.arrayIndex] == "Y") /* authorized to chg whse*/
               /* next sentence - use whatever xwhcd was last set to*/
            else
              OM0HW01.OM0HWSCF = "N"; /* security not authorized*/
              set OM0HM001.XWHCD protect;
            end
            if (YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized to chg ndt*/
               /* next sentence*/
            else
              set OM0HM001.OM0HMCND protect;
            end
          end
        else
           /* next sentence - use whatever xwhcd was last set to*/
        end
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMNM = "OMOH    ";
        TA1REC.TA1LOCAT[1] = "OM0HSP3 ";
        TA1REC.TA1DBASE = "OP3REC  ";
        TA1REC.TA1TBLVU = "VITEM001";
        COMMAREA.CA-USER-WORKAREA-4K = " ";
        XSPF4();
        exit program;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "SF";
      TA1REC.TA1LOCAT[2] = "OM0HSP3";
      TA1REC.TA1LOCAT[3] = "IO2560 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0HM001";
      TA1REC.TA1DBASE = "DORDER.";
      TA1REC.TA1TBLVU = "VCUTOF01";
      OM0HW01.OM0HWDXT = " ";
      OM0HW01.OM0HWDND = 0;
      OM0HW01.OM0HWDXT = OPJREC.XOTCD; /* display ord type key*/
      OM0HW01.OM0HWDND = OPLREC.OPJCNDTB; /* display need date key*/
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDKY; /* error display key*/
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
      converseLib.validationFailed(404); /* record not found-can't add*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "SF";
      TA1REC.TA1LOCAT[2] = "OM0HSP3";
      TA1REC.TA1LOCAT[3] = "IO2560 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "OM0HM001";
      TA1REC.TA1DBASE = "DORDER.";
      TA1REC.TA1TBLVU = "VCUTOF01";
      OM0HW01.OM0HWDXT = " ";
      OM0HW01.OM0HWDND = 0;
      OM0HW01.OM0HWDXT = OPJREC.XOTCD; /* display ord type key*/
      OM0HW01.OM0HWDND = OPLREC.OPJCNDTB; /* display need date key*/
      TA1REC.TA1TBLKE = OM0HW01.OM0HWDKY; /* error display key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      XSPF4();
      OM0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end



   /* *************************************************************/
end // end OM0HSP3

// check the production deadline
Function OM0HSPD()



       /* ******************************************************/
       /* * this statement group checks the production        **/
       /* * deadline date vs the need date for future orders  **/
       /* * for the new need date.                            **/
       /* ******************************************************/


  set TA1REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
  OPJREC.XPCCD = SYCREC.XPCCD; /* product cat*/
  OPJREC.XGACD = SYCREC.XGACD; /* gender age*/
  OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
  OPLREC.OPLSOP = "SF"; /* selection option*/
  OPLREC.OPJCNDTB = OP1REC.OP1CUNDT; /* need date*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    if (OMAREC.OMACDT > OPJREC.OPJCUTDT) /* current date > prod d/*/
      converseLib.validationFailed(365); /* prd deadline needate is past*/
      OM0HW01.OM0HWNPP = "Y"; /* please advise production dept*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(404); /* deadline record not found*/
      OMAREC.OMAERR = "Y";
      set OM0HM001.OM0HMCND cursor, modified, bold;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OM0H";
      TA1REC.TA1LOCAT[1] = "SF";
      TA1REC.TA1LOCAT[2] = "OM0HSPD";
      TA1REC.TA1LOCAT[3] = "IO2560 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "OM0HM001";
      TA1REC.TA1DBASE = "DORDER.";
      TA1REC.TA1TBLVU = "VCUTOF01";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
      OM0HM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end


   /* *************************************************************/
end // end OM0HSPD

// protect nilhdr fields
Function OM0HSPF()



          /* *****************************************************/
          /* *  this statment group sets fields protect for     **/
          /* *  inquiry mode                                    **/
          /* *****************************************************/


  set OM0HM010.OP1CUPO protect;
  set OM0HM010.OP1CPODT protect;
  set OM0HM010.OP1IPIND protect;
  set OM0HM010.OP1FTIND protect;
  set OM0HM010.OP1IFAMT protect;



end // end OM0HSPF

// create picking chg record
Function OM0HSPK()
    /* *****************************************************/
    /* *  create a record to be fed to the picking system **/
    /* *  whenever a chg is made to an order that affects **/
    /* *  picking.***/
    /* *****************************************************/

      /* * initilize the abend record**/

  TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
  TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OM0HSPK"; /* process view*/
  TA1REC.TA1LOCAT[4] = "IO0470";

     /* *** select set to the dorder.vtext001 table*/

  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = " ";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

     /* * check db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
  else
    TA1REC.TA1TBLKE = OP4REC.OP4KEY;
    XSOPS02();
  end


  OM0HW01.OM0HWLC = 1;
  OMAREC.OMASUB = 1;

  if (SQLCA.VAGen_SQLCODE == 0)

    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

    while (SQLCA.VAGen_SQLCODE == 0)
      if (OP4REC.OP4TRTYP == "I")
        OMBREC.XNDCD[OMASUB] = OP4REC.XNDCD;
        OMBREC.OP4TXT[OMASUB] = OP4REC.OP4TXT;
        OMAREC.OMASUB = OMAREC.OMASUB + 1;
      else
        if (OP4REC.OP4TRTYP == "L")
          if (OM0HW01.OM0HWLC == 1)
            OMBREC.OP4TXT[11] = OP4REC.OP4TXT;
            OM0HW01.OM0HWLC = 2;
          else
            OMBREC.OP4TXT[12] = OP4REC.OP4TXT;
          end
        end
      end

      call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  OMBREC.OP1CUPO = OP1REC.OP1CUPO;
  OMBREC.OP1DSBDT = OP1REC.OP1DSBDT;
  OMBREC.OP1DSADT = OP1REC.OP1DSADT;
  OMBREC.XPACD = OP1REC.XPACD;
  OMBREC.ZZHHMMSS = TA2REC.TA2TIMEN;
  OMBREC.XWHCD = OP1REC.XWHCD;
  OMBREC.OP1CUOID = OP1REC.OP1CUOID;
  OMBREC.OP1PARTN = OP1REC.OP1PARTN;
  OMBREC.OP1NORID = OP1REC.OP1NORID;
  OMBREC.ZZZSDT = OMAREC.OMACDT;
  OMBREC.XOTCD = OP1REC.XOTCD;
  OMBREC.OMBMRTYP = "H";
  SQLCA.VAGen_SQLCODE = 0;

  if (OM0HW01.OM0HW-APPLY-CHG-FL == "Y")
    set WEP1301 empty;
    WEP1301.WEP1301-OPTION-CD = "U";
    WEP1301.WEP1301-CALLING-PGM-ID = "OM0H";
    WEP1301.WEP1301-XXX-USER-ID = COMMAREA.CAUSERID;
    WEP1301.WEP1301-XWH-WHSE-CD = OP1REC.XWHCD;
    WEP1301.WEP1301-PK-ORD-STKTF-ID = OP1REC.OP1CUOID;
    WEP1301.WEP1301-PK-NIKE-ORD-ID = OP1REC.OP1NORID;
    WEP1301.WEP1301-XOS-ORD-STAT-CD = OP1REC.XOSCD;
    WEP1301.WEP1301-OP-CUST-PO = OMBREC.OP1CUPO;
    WEP1301.WEP1301-OP-DNT-SHIP-BFR-DT = OMBREC.OP1DSBDT;
    WEP1301.WEP1301-OP-DNT-SHIP-AFT-DT = OMBREC.OP1DSADT;
    WEP1301.WEP1301-XPP-PICK-PRTY-CD = OMBREC.XPACD;
    WEP1301.WEP1301-XOT-ORD-TYP-CD = OMBREC.XOTCD;
    WEP1301.WEP1301-OP-TXT11 = OMBREC.OP4TXT[11];
    WEP1301.WEP1301-OP-TXT12 = OMBREC.OP4TXT[12];
    WEP1301.WEP1301-LBL-CHG-FL = OM0HW01.OM0HWLMF;
    WEP1301.WEP1301-TODAYS-DATE = OMBREC.ZZZSDT;
    WEP1301.WEP1301-CURRENT-TIME = TA2REC.TA2TIMHM;
    WEP1301.WEP1301-RETURN-CODE = 99;
    TA1REC.TA1TBLKE = WEP1301.WEP1301-PASS-INFO;

    OM0HS-CALL-EP1300();

    if (WEP1301.WEP1301-RETURN-CODE >= 5)
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "EP1300";
      TA1REC.TA1MAP = "OM0HM001";
      if (OM0HW01.OM0HWLMF == "Y")
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
      else
        TA1REC.TA1DBASE = "DPICK";
        TA1REC.TA1TBLVU = "VMPOLH01";
      end
      TA1REC.TA1LOCAT[1] = WEP1301.WEP1301-ERRDIAG-LOCATION;
      TA1REC.TA1LOCAT[2] = WEP1301.WEP1301-RETURN-CODE;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      transfer to transaction "MN0M" passing COMMAREA;
    end

  end

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1680" ("A ", SQLCA, OMBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OM0H    ";
    TA1REC.TA1MAP = "OM0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VOPKKM01";
    TA1REC.TA1LOCAT[3] = "OM0HSPK";
    TA1REC.TA1LOCAT[4] = "IO01680";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    transfer to transaction "MN0M" passing COMMAREA;
  end


end // end OM0HSPK

// get refer to cred reason abrv
Function OM0HSRC()



       /* ******************************************************/
       /* * this statement group gets the refer to credit     **/
       /* * reason abbreviation                               **/
       /* ******************************************************/


  if (OP1REC.XCHCD[OMASUB] in XCHTBL.XCHCD
   && XCHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XCHABRV[OMASUB] = XCHTBL.XCHABRV[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSRC

// save the original screen
Function OM0HSSA()



       /* *******************************************************/
       /* * this statement group saves the original screen to  **/
       /* * the work area. if pf19 is pressed to skip update,  **/
       /* * data in this work area is going to be moved back   **/
       /* * to the screen                                      **/
       /* *******************************************************/



  OM0HW01.OP1NORID = OP1REC.OP1NORID; /* nike order id*/
  OM0HW01.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
  OM0HW01.XNXCD = OP1REC.XNXCD; /* store id*/
  OM0HW01.OP-SND-CNFM-FL = OP1REC.OP-SND-CNFM-FL; /* SEND CNFM FLAG*/
  OM0HW01.SM1AGYID = OP1REC.SM1AGYID; /* agency name*/
  OM0HW01.SM4REPID = OP1REC.SM4REPID; /* sales rep id*/
  OM0HW01.OP1CUPO = OP1REC.OP1CUPO; /* po number*/
  OM0HW01.XWHCD = OP1REC.XWHCD; /* warehouse code*/
  OM0HW01.XOBCD = OP1REC.XOBCD; /* base order type*/
  OM0HW01.XOTCD = OP1REC.XOTCD; /* system order type*/
  OM0HW01.XOCCD = OP1REC.XOCCD; /* order class code*/
  OM0HW01.XGPCD = OP1REC.XGPCD; /* gpc code*/
  OM0HW01.OP1CMPNB = OP1REC.OP1CMPNB; /* comp number*/
  OM0HW01.OP1ORDBY = OP1REC.OP1ORDBY; /* order by name*/
  OM0HW01.OP1BOFL = OP1REC.OP1BOFL; /* back order flag*/
  OM0HW01.XDSCD = OP1REC.XDSCD; /* direct ship code*/
  OM0HW01.OM0HWHPC = OP1REC.OP-DIRSHP-DSCT-PCT;
  OM0HW01.XBDCD = OP1REC.XBDCD; /* bulk order code*/
  OM0HW01.OP1TBREP = OP1REC.OP1TBREP; /* taken by rep*/
  OM0HW01.OP1CUNDT = OP1REC.OP1CUNDT; /* need date*/
  OM0HW01.OP1ORCDT = OP1REC.OP1ORCDT; /* received date*/
  OM0HW01.OP1CALDT = OP1REC.OP1CALDT; /* callout date*/
  OM0HW01.OP1DSBDT = OP1REC.OP1DSBDT; /* d-s-before date*/
  OM0HW01.OP1DSADT = OP1REC.OP1DSADT; /* d-s-after date*/


  OM0HW01.OM0HWOWH = OP1REC.XWHCD; /* save whse for tag records*/


       /* if there is sales pgm, save the sp id and*/
       /* the quantity discount percent*/

  if (OP1REC.SP1ID != " ")
    OM0HW01.SP1ID = OP1REC.SP1ID; /* sales program id*/
    OM0HW01.SP6MDISC = OP1REC.SP6MDISC; /* sp quan disc*/
  end



  OM0HW01.OM0HWFIN = OM0HM001.OM0HMFSN; /* sales rep first initial*/
  OM0HW01.XXXLSTNM = OM0HM001.OM0HMLNM; /* sales rep last name*/
  OM0HW01.OM0HWNDT = OM0HM001.OM0HMCND; /* formatted need date*/
  OM0HW01.OM0HWBDT = OM0HM001.OM0HMSBD; /* formatted d-s-b-date*/
  OM0HW01.OM0HWADT = OM0HM001.OM0HMSAD; /* formatted d-s-a-date*/
  OM0HW01.OM0HWRDT = OM0HM001.OM0HMRCD; /* formatted received date*/
  OM0HW01.OM0HWCDT = OM0HM001.OM0HMCLD; /* formatted callout date*/
  OM0HW01.OM0HWMDT = OM0HM001.OM0HMNDT; /* formatted maint date*/
  OM0HW01.OM0HWCSD = OM0HM001.OM0HMCSD; /* formatted credit status dt*/
  OM0HW01.OM0HWOSD = OM0HM001.OM0HMOSD; /* formatted order status dt*/
  OM0HW01.OM0HMTBN = OM0HM001.OM0HMTBN; /* taken by rep name*/
  OM0HW01.OM0HMERN = OM0HM001.OM0HMERN; /* entered by rep name*/
  OM0HW01.OM0HWCBY = OM0HM001.OM0HMCBY; /* changed by rep name*/
  OM0HW01.XSOABRV = OM0HM001.XSOABRV;
  OM0HW01.XWHSABRV = OM0HM001.XWHSABRV;
  OM0HW01.XOBDESC = OM0HM001.XOBDESC;
  OM0HW01.XGPABRV = OM0HM001.XGPABRV;
  OM0HW01.XOCABRV = OM0HM001.XOCABRV;
  OM0HW01.XOMABRV = OM0HM001.XOMABRV;
  OM0HW01.XOSABRV = OM0HM001.XOSABRV;
  OM0HW01.XCSABRV = OM0HM001.XCSABRV;
  OM0HW01.XDSABRV = OM0HM001.XDSABRV;
  OM0HW01.XNDCD = OM0HM001.XNDCD;
  OM0HW01.OM0HMINT = OM0HM001.OM0HMINT; /* instruction*/
  OM0HW01.OM0HMLBL = OM0HM001.OM0HMLBL; /* label*/



   /* *************************************************************/
end // end OM0HSSA

// get sales rep name
Function OM0HSSN()



       /* *******************************************************/
       /* * this statement group validates the sales rep and   **/
       /* * gets the sales rep's name for display              **/
       /* *******************************************************/


  OM0HW01.OM0HWROF = "N"; /* rep override flag*/
  OM0HW02.OM0HWORP = OP1REC.SM4REPID; /* save original rep*/
  OM0HW02.OM0HWOAG = OP1REC.SM1AGYID; /* save original agency*/

  OM0HSSR(); /* validate sales rep*/

  if (OM0HW01.OM0HWARF == "Y")
    OM0HM001.OM0HMLNM = VRAGCY02.XXXLSTNM;
    OM0HW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
    OM0HM001.OM0HMFSN = OM0HW01.OM0HWFIN;
    OP1REC.SM1AGYID = OM0HM001.SM1AGYID;
    OP1REC.SM4REPID = OM0HM001.OM0HMREP;
    OM0HW01.OM0HWROF = "Y";
    set OM0HM001.SM1AGYID initialAttributes;
    set OM0HM001.OM0HMREP initialAttributes;
  else
    if (OM0HW01.OM0HWIRF == "Y" /* inactive rep found*/
     && COMMAREA.CACLVL[3] == "Y") /* user has authority to chg*/
      OM0HM001.OM0HMLNM = VRAGCY02.XXXLSTNM;
      OM0HW01.XXXFSTNM = VRAGCY02.XXXFSTNM;
      OM0HM001.OM0HMFSN = OM0HW01.OM0HWFIN;
      OP1REC.SM1AGYID = OM0HM001.SM1AGYID;
      OP1REC.SM4REPID = OM0HM001.OM0HMREP;
      OM0HW01.OM0HWROF = "Y";
      set OM0HM001.SM1AGYID initialAttributes;
      set OM0HM001.OM0HMREP initialAttributes;
    else
      OM0HM001.OM0HMLNM = " ";
      OM0HM001.OM0HMFSN = " ";
      converseLib.validationFailed(066); /* sales rep not found*/
      set OM0HM001.SM1AGYID modified, bold;
      set OM0HM001.OM0HMREP cursor, modified, bold;
      OMAREC.OMAERR = "Y";
      return;
    end
  end



   /* ************************************************************/
end // end OM0HSSN

// get sales office description
Function OM0HSSO()



       /* ********************************************************/
       /* * this statement group gets the sales office          **/
       /* * abbreviated description                             **/
       /* ********************************************************/


  if (OP1REC.XSOCD in XSOTBL.XSOCD
   && XSOTBL.XXXSTAT == "A")
    OM0HM001.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSSO

// validate sales rep
Function OM0HSSR()




       /* *******************************************************/
       /* * this statement group selects the active sales rep  **/
       /* * in the dslsmn.vragcy01 table. if the active sales  **/
       /* * rep not found, it will check to see if that sales  **/
       /* * rep has become inactive                            **/
       /* *******************************************************/


      /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OM0H    "; /* program name*/
  TA1REC.TA1MAP = "OM0HM001"; /* map name*/
  TA1REC.TA1DBASE = "DSLSMN  "; /* data base name*/
  TA1REC.TA1TBLVU = "VRAGCY01"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OM0HSSR"; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0400";


  OM0HW01.OM0HWARF = "N"; /* set active sales rep flag*/
  OM0HW01.OM0HWIRF = "N"; /* set inactive sales rep flag*/


       /* select the active sales rep in the table*/

  VRAGCY02.SM1AGYID = OM0HM001.SM1AGYID;
  VRAGCY02.SM4REPID = OM0HM001.OM0HMREP;
  VRAGCY02.XXXSTAT = "A";

  call "IO0400" ("S ", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OM0HW01.OM0HWARF = "Y"; /* set active sales rep flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if active sales rep not found*/
      call "IO0400" ("S3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OM0HSIR();
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if active sales rep not found*/
           /* next sentence*/
        else
          OM0HW01.SM1AGYID = VRAGCY02.SM1AGYID;
          OM0HW01.SM4REPID = VRAGCY02.SM4REPID;
          OM0HW01.XXXSTAT = VRAGCY02.XXXSTAT;
          TA1REC.TA1TBLKE = OM0HW01.OM0HWSMK; /* table key*/
          XSOPS02();
        end
      end
      call "IO0400" ("C3", SQLCA, VRAGCY02) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      OM0HW01.SM1AGYID = VRAGCY02.SM1AGYID;
      OM0HW01.SM4REPID = VRAGCY02.SM4REPID;
      OM0HW01.XXXSTAT = VRAGCY02.XXXSTAT;
      TA1REC.TA1TBLKE = OM0HW01.OM0HWSMK; /* table key*/
      XSOPS02();
    end
  end



   /* ************************************************************/
end // end OM0HSSR

// get system order type abrv
Function OM0HSST()


   /* ***** get system order type abrv for map ******/

  if (OM0HM001.XOTCD in XOTTBL.XOTCD)
    OM0HM001.XOTABRV = XOTTBL.XOTABRV[sysVar.arrayIndex];
  else
    OM0HM001.XOTABRV = " ";
  end


end // end OM0HSST

// get service rep name
Function OM0HSSV()



      /* *********************************************************/
      /* * this statement group validates the service rep and   **/
      /* * get the service rep's name for display               **/
      /* *********************************************************/



      /* verify that the service rep id exists in the xsv table*/

  KUYREC.KUYSVRID = OM0HW01.OM0HWSVR; /* load key*/
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for not unique rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OM0HSSV "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02(); /* abort routine*/
  end


      /* if not found then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for found  rc*/
     /* next sentence*/
  else
    OMAREC.OMAERR = "Y"; /* set error flag*/
    OM0HW01.OM0HWRER = "Y"; /* set service rep err flag*/
  end



   /* *************************************************************/
end // end OM0HSSV

// process nil terms
Function OM0HST1()
  set OEAREC empty;
  OM0HSKC(); /* get dcust.vcmpny01*/
  OM0HST2(); /* load oearec to get terms*/

  call "OP03" (OEAREC, SP6REC) {isNoRefresh = yes}; /* process final terms*/

  if (OEAREC.OEAM010 == "Y") /* deadlock--don't reset to 'n'!*/
    OEAREC.OEAERR = "N"; /* turn off this flag for deadlocks*/
    OMAREC.OMAERR = "Y";
    OEAREC.OEAMMSG = "N"; /* turn off flag so can process*/
    converseLib.validationFailed(010); /* terms again*/
  else
    if (OEAREC.OEAM509 == "Y") /* corp table row missing xodtbl*/
      converseLib.validationFailed(509); /* don't turn off, fatal type error!!*/
      OMAREC.OMAERR = "Y";
    else
      if (OEAREC.OEAM511 == "Y") /* some terms may be missing, please*/
        converseLib.validationFailed(511); /* review in maintenace*/
        OM0HW01.OM0HW511 = "Y"; /* turn on message*/
      end
    end
  end

  if (OEAREC.OEAERR == "N"
   && converseVar.validationMsgNum != 010) /* and no deadlocks*/
    OM0HST3(); /* move terms to op1rec*/
  end
end // end OM0HST1

// load oearec for op03 (terms)
Function OM0HST2()

  OEAREC.OEAAPPL = "OM0H";
  OEAREC.XOTCD = OP1REC.XOTCD;
  OEAREC.XOBCD = OP1REC.XOBCD;
  OEAREC.XDVCD = OP1REC.XDVCD;
  OEAREC.SP1ID = OP1REC.SP1ID;
  OEAREC.KUCCOID = OP1REC.KUCCOID;
  OEAREC.KUMSTRID = OP1REC.KUMSTRID;
  OEAREC.XNXCD = OP1REC.XNXCD;
  OEAREC.XGPCD = OP1REC.XGPCD;
  OEAREC.OP1OVALU = OP1REC.OP1OVALU;
  OEAREC.OP1OTUNT = OP1REC.OP1OTUNT;
  OEAREC.OP1CUNDT = OP1REC.OP1CUNDT;
   /* OEAREC.OEACUTRM was loaded in om0hskc*/


end // end OM0HST2

// move op03 terms to op1rec
Function OM0HST3()
  OP1REC.SP6MDISC = OEAREC.SP6MDISC;
  OP1REC.OP1TLVLN = OEAREC.OP1TLVLN;
  OP1REC.OP1TIERF = "N"; /* spgm default override is 'no'*/

  if (OP1REC.OP1TDOF == "N") /* terms discount, no override*/
    OP1REC.XTDPCT = OEAREC.XTDPCT;
    OP1REC.OP1TDBKP = OEAREC.OP1TDBKP;
    OP1REC.OP1TDFCP = OEAREC.OP1TDFCP;
  end

  if (OP1REC.OP1AAOF == "N") /* add allowance, no override*/
    OP1REC.XAAPCT = OEAREC.XAAPCT;
    OP1REC.OP1AABKP = OEAREC.OP1AABKP;
    OP1REC.OP1AAFCP = OEAREC.OP1AAFCP;
  end

  if (OP1REC.OP1COPOF == "N") /* coop, no override*/
    OP1REC.XCPPCT = OEAREC.XCPPCT;
  end

  if (OP1REC.OP1PTOF == "N") /* payment terms, no override*/
    OP1REC.XPTCD = OEAREC.XPTCD;
  end

  if (OP1REC.OP1DFAOF == "N") /* defective allowance, no override*/
    OP1REC.XDAPCT = OEAREC.XDAPCT;
  end

end // end OM0HST3

// get customer store name
Function OM0HSTN()



       /* ******************************************************/
       /* * this statement group gets the customer store name **/
       /* ******************************************************/


  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OMWREC.KUMSTRNM = KUMREC.KUMSTRNM;
    OM0HM001.OM0HMSTN = KUMREC.KUMSTRNM;
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1REC.TA1TBLKE = KUMREC.KUMGRP;
    TA1REC.TA1LOCAT[3] = "OM0HSTN";
    TA1REC.TA1LOCAT[4] = "IO0340";
    XSOPS02();
  end



   /* ************************************************************/
end // end OM0HSTN

// unprotect nilhdr fields
Function OM0HSUF()



          /* *****************************************************/
          /* *  this statment group sets fields unprotect for   **/
          /* *  change mode                                     **/
          /* *****************************************************/


  set OM0HM010.OP1CUPO normal;
  set OM0HM010.OP1CPODT normal;
  set OM0HM010.OP1IPIND normal;
  set OM0HM010.OP1FTIND normal;
  set OM0HM010.OP1IFAMT normal;


  if (OP1REC.XSOCD == "77") /* if AR OMS order (auto-replenishment)*/
    set OM0HM010.OP1CUPO protect; /* protect customer purchase order*/
  end


end // end OM0HSUF

// get warehouse description
Function OM0HSWH()




       /* ********************************************************/
       /* * this statement group gets the warehouse             **/
       /* *                        abbreviated name for display **/
       /* ********************************************************/


  OM0HM001.XWHSABRV = " ";
  OM0HW01.XWHOWNGF = "N"; /* init to owner not reqd*/

  if (OP1REC.XWHCD in XWHTBL.XWHCD /* if warehouse is valid*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OM0HM001.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    OM0HW01.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
  end



   /* ************************************************************/
end // end OM0HSWH

// select dship.vsrord01
Function XSOMS-GET-SHIP-REC()


     /* select shipping order header*/

  OMWREC.OMWSHPFL = "N";

  set SQLCA empty;
  set SR2REC empty;

  SR2REC.XWHCD = "**";
  SR2REC.OP1CUOID = OP1REC.OP1CUOID;

  SR2REC.OP1NORID = -1;
  SR2REC.PK1PKSCH = -1;
  SR2REC.OP1NTMAL = -1;

  call "IO0800" ("SS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* header not found*/
      converseLib.validationFailed(28);
      TA1REC.TA1FUNC = "POST";

    else
      converseLib.validationFailed(29);
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1LOC = "OMXX-GET-SHIP-REC-OPEN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "OMXXM001";
    TA1REC.TA1TBLKE = SR2REC.SR2GRP;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    return;

  end


   /* fetch shipping order*/

  call "IO0800" ("SN", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* header found*/
    OMWREC.OMWSHPFL = "Y";

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* header not found*/
      OMWREC.OMWSHPFL = "N";
    else
      /* unexpected return code*/
      converseLib.validationFailed(29);
      TA1REC.TA1FUNC = "RETN";

      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1LOC = "OMXX-GET-SHIP-REC-SELECT";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1REC.TA1MAP = "OMXXM001";
      TA1REC.TA1TBLKE = SR2REC.SR2GRP;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      return;
    end
  end

   /* close shipping order*/

  call "IO0800" ("CS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

    converseLib.validationFailed(29);
    TA1REC.TA1FUNC = "RETN";

    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1LOC = "OMXX-GET-SHIP-REC-CLOSE";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "OMXXM001";
    TA1REC.TA1TBLKE = SR2REC.SR2GRP;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    return;
  end
end // end XSOMS-GET-SHIP-REC

//*** RECORD=OBPREC ****
//      passing record for OB1100 - DETERMINE PRODUCT PRICE
//      OB1100 IS A 'NIKEBOTH' PROGRAM. This record must match
//      WOB1100.
// 
//      This record is used in all CSP applications that call
//      OB1100 to determine product prices. Order header and
//      style information is passed to OB1100 with this record
//      and prices are returned to the calling program when the
//      return status is '00'. All other return statuses will
//      pass back zero prices.
// 
//      INITIALIZE PASSING RECORD IN THE CALLING PROGRAM.
// 
//      record length = 2500
// 
//      possible return statuses:
// 
//      '00' GOOD RETURN    - PRICES CALCULATED
//      '01' NO PRICES      - PRICES NOT FOUND FOR EFFECTIVE
//                            DATE.
//      '02' NOT FOUND ERRS - DB2 SQLCODE 100 ON ANY DATABASE.
//                            DATABASE NAME, KEY AND LOCATION
//                            ARE RETURNED. THE CALLING PROGRAM
//                            DECIDES WHAT TO DO. OB1100 DOES
//                            NOT POST OR RETN.
//      '03' DB2 ERROR      - ALL DB2 SQLCODES EXCEPT 0, 100 OR
//                            -911 FROM ANY DATABASE. OB1100
//                            DOES A RETN. CALLING PGM SHOULD
//                            ABND IF BATCH COBOL, AND RETN IF
//                            CSP. CALLING PGM SHOULD INDICATE
//                            THE ORDER AND PRODUCT IN THE ERR
//                            DIAGS.
//      '04' DEADLOCK       - -911 ON ANY DATABASE. OB1100 DOES
//                            A RETN. CALLING PGM SHOULD DO A
//                            RETN IF COBOL, POST OR RETN IF
//                            CSP. SHOW ORDER AND PRODUCT INFO
//                            IN ERROR DIAGS.
//      '05' INVALID PRICE  - OB1100 DOES NOT ABEND. CALLING
//           METHOD           PGM MUST PASS A 'D' FOR DOMESTIC
//                            PRICES OR AN 'I' FOR INTERNATIONA
//                            PRICES.
//      '  ' SPACES           OB1100 WAS NOT SUCCESSFULLY
//                            CALLED
// 
// ____________________________________________________________
// MAINTENANCE HISTORY
// ------------------------------------------------------------
// 12/10/91   CRAINE   CREATED RECORD
// 
// **********************
Record OBPREC type basicRecord
  5 OBP-GROUP OBP-GROUP ; 
    10 OBP-PASSING-DATA OBP-PASSING-DATA ; 
      15 OBP-PRICE-METHOD OBP-PRICE-METHOD ; 
      15 OP1CUOID OP1CUOID ; 
      15 KUCCOID KUCCOID ; 
      15 OP1CMPNB OP1CMPNB ; 
      15 XOTCD XOTCD ; 
      15 XOBCD XOBCD ; 
      15 XCT-CTRY-CD XCT-CTRY-CD ; 
      15 ZFC-CRCY-CD ZFC-CRCY-CD ; 
      15 SP1ID SP1ID ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 OBP-BOOKING-DATE OBP-BOOKING-DATE ; 
      15 XWHCD XWHCD ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XUMCD XUMCD ; 
      15 OBP-FIRST-SZ-ID OBP-FIRST-SZ-ID ; 
      15 OBP-LAST-SZ-ID OBP-LAST-SZ-ID ; 
    10 OBP-RETURN-DATA OBP-RETURN-DATA ; 
      15 SY5PRCUN SY5PRCUN [40] ; 
      15 SP5PRCOF SP5PRCOF [40] ; 
      15 OBP-PRICE-TYPE-IND OBP-PRICE-TYPE-IND ; 
      15 OBP-PRICE-TYPE OBP-PRICE-TYPE ; 
      15 OBP-RETURN-STAT OBP-RETURN-STAT ; 
      15 OBP-RETURN-DATABASE OBP-RETURN-DATABASE ; 
      15 OBP-RETURN-KEY OBP-RETURN-KEY ; 
      15 OBP-RETURN-LOCATION OBP-RETURN-LOCATION ; 
    10 OBP-FILLER OBP-FILLER ; 
end // end OBPREC

//*** RECORD=OBTREC ****
//      Passing record for OB1120 - CALCULATE TERMS
//      OB1120 IS A 'NIKEBOTH' PROGRAM. This record must match
//      WOB1120.
// 
//      This record is used in all CSP applications that call
//      OB1120 to calculate terms. Order header information
//      is passed to OB1100 with this record and terms are
//      to the calling program when the return status is '00'
//      All other return statuses will not pass back terms.
// 
//      INITIALIZE PASSING RECORD IN THE CALLING PROGRAM.
// 
//      record length = 2500
// 
//      possible return statuses:
// 
//      '00' GOOD RETURN    - TERMS CALCULATED
//      '01' NOT FOUND ERRS - DB2 SQLCODE 100 ON ANY DATABASE.
//                            DATABASE NAME, KEY AND LOCATION
//                            ARE RETURNED. THE CALLING PROGRAM
//                            DECIDES WHAT TO DO. OB1120 DOES
//                            NOT POST OR RETN.
//      '02' DB2 ERROR      - ALL DB2 SQLCODES EXCEPT 0, 100 OR
//                            -911 FROM ANY DATABASE. OB1120
//                            DOES A RETN. CALLING PGM SHOULD
//                            ABND IF BATCH COBOL, AND RETN IF
//                            CSP. CALLING PGM SHOULD INDICATE
//                            THE ORDER AND PRODUCT IN THE ERR
//                            DIAGS.
//      '03' CORP DEFAULTS  - ROW IN THE CORP DEFAULT TABLE NOT
//           NOT FOUND        FOUND FOR XOTCD. OB1120 DOES A
//                            'RETN'. CALLING BATCH PGM SHOULD
//                            'ABND', CALLING CSP PGM SHOULD
//                            'RETN'.
//      '04' SPGM REQ NOT   - SALES PROGRAM REQUIREMENTS FOR
//           MET              MINIMUM DOLLARS OR UNITS NOT MET.
//                            OB1120 DOES NOT POST OR RETN.
//      '05' TERMS METHOD   - TERMS METHOD OF '0' OR '1' WAS
//           NOT PASSED       NOT PASSED. OB1120 DOES A RETN.
//                            CALLING BATCH PGM SHOULD 'ABND'.
//                            CALLING CSP PGM SHOULD 'RETN'.
//      '06' TABLE OVERFLOW - EMPTY TABLE OR OVERFLOW OCCURED
//                            WHILE LOADING WORKING STORAGE
//                            TABLES. CALLING BATCH PGM SHOULD
//                            'ABND'. CALLING CSP SHOULD 'RETN'
//      '09' DEADLOCK       - -911 ON ANY DATABASE. OB1120 DOES
//                            A RETN. CALLING PGM SHOULD DO A
//                            RETN IF COBOL, POST OR RETN IF
//                            CSP. SHOW ORDER AND PRODUCT INFO
//                            IN ERROR DIAGS.
//      '  ' SPACES           OB1120 WAS NOT SUCCESSFULLY
//                            CALLED
// 
// ____________________________________________________________
// MAINTENANCE HISTORY
// ------------------------------------------------------------
// 12/16/91   CRAINE   CREATED RECORD
// 03/23/92   SCANTR   ADDED EDIT-FOR-SPGM-MIN, TOTAL ORDER
//                     UNITS AND VALUE
// 
// **********************
Record OBTREC type basicRecord
  5 OBT-GROUP OBT-GROUP ; 
    10 OBT-PASSING-DATA OBT-PASSING-DATA ; 
      15 OBT-TERMS-METHOD OBT-TERMS-METHOD ; 
      15 OBT-TOTAL-METHOD OBT-TOTAL-METHOD ; 
      15 OBT-TOTAL-ORDER-UNITS OBT-TOTAL-ORDER-UNITS ; 
      15 OBT-TOTAL-ORDER-VALUE OBT-TOTAL-ORDER-VALUE ; 
      15 OBT-EDIT-FOR-SPGM-MIN OBT-EDIT-FOR-SPGM-MIN ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 XGPCD XGPCD ; 
      15 XOTCD XOTCD ; 
      15 XOBCD XOBCD ; 
      15 SP1ID SP1ID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
    10 OBT-RETURN-DATA OBT-RETURN-DATA ; 
      15 XPTCD XPTCD ; 
      15 XODMXDSC XODMXDSC ; 
      15 XTDCD XTDCD ; 
      15 XTDPCT XTDPCT ; 
      15 OP1TDFCP OP1TDFCP ; 
      15 OP1TDBKP OP1TDBKP ; 
      15 XAACD XAACD ; 
      15 XAAPCT XAAPCT ; 
      15 OP1AAFCP OP1AAFCP ; 
      15 OP1AABKP OP1AABKP ; 
      15 XCPCD XCPCD ; 
      15 XCPPCT XCPPCT ; 
      15 XDACD XDACD ; 
      15 XDAPCT XDAPCT ; 
      15 OP1TLVLN OP1TLVLN ; 
      15 SP6MDISC SP6MDISC ; 
      15 OBT-RETURN-STAT OBT-RETURN-STAT ; 
      15 OBT-RETURN-DATABASE OBT-RETURN-DATABASE ; 
      15 OBT-RETURN-KEY OBT-RETURN-KEY ; 
      15 OBT-RETURN-LOCATION OBT-RETURN-LOCATION ; 
    10 OBT-FILLER OBT-FILLER ; 
end // end OBTREC

//*** RECORD=OM0HW01 ****
// om0hw01 is the working storage rcored for application om0h
// 
// maintenance history:
// 
// 01/03/90  ischmi  added om0hwwhf - whse flag
// 04/10/90  BWATSO  Added WFCU and related fields.
// 03/05/91  swatso  Added OM0HWSGC - Special cust group flag
// 03/22/91  Schen   Added Om0hwedt, om0hwedm, om0hwedd,
//                   om0hwedy, om0hwsh1, om0hwsh2, om0hwfdt,
//                   om0hwfdc, om0hwfdy, om0hwfdm, om0hwfdd.
// 03/26/91  swatso  Added OM0HWPFL - a flag to indicate the
//                   protection of need date & warehouse code
//                   Added OM0HWSB1 order type table subscript
//                   Added OM0HWSB2 direct ship table subscript
// 12/20/93  gcalki  Added xxxidx and xcc-stat-found for xcc
//                   table processing
// 02/28/94  scantr  dbchnges - resize price and value fields
// 04/13/98  wleong  added om0hw-updt-whse-xdscd
// ***********************
Record OM0HW01 type basicRecord
  5 OM0HWSGR OM0HWSGR ; 
    10 OM0HWORN OM0HWORN ; 
      15 * char(7) ; 
      15 OP1PARTN OP1PARTN ; 
    10 OM0HWAMF OM0HWAMF ; 
    10 OM0HWBDF OM0HWBDF ; 
    10 OM0HWDER OM0HWDER ; 
    10 OM0HWPDF OM0HWPDF ; 
    10 OM0HWNTC OM0HWNTC ; 
    10 OM0HWPFF OM0HWPFF ; 
    10 OM0HW1TC OM0HW1TC ; 
    10 OM0HWLMF OM0HWLMF ; 
    10 OM0HWIMF OM0HWIMF ; 
    10 OM0HWSCF OM0HWSCF ; 
    10 OM0HWUEF OM0HWUEF ; 
    10 OM0HWUPF OM0HWUPF ; 
    10 OM0HWCLF OM0HWCLF ; 
    10 OM0HWPOF OM0HWPOF ; 
    10 OM0HWCUV OM0HWCUV ; 
    10 OM0HWCUF OM0HWCUF ; 
    10 OM0HWNDV OM0HWNDV ; 
    10 OM0HWSKU OM0HWSKU ; 
    10 OM0HWMSG OM0HWMSG ; 
    10 OM0HWNTF OM0HWNTF ; 
    10 OM0HWCMF OM0HWCMF ; 
    10 OM0HWCDF OM0HWCDF ; 
    10 OM0HWSOF OM0HWSOF ; 
    10 OM0HWOTV OM0HWOTV ; 
    10 OM0HWMDF OM0HWMDF ; 
    10 OM0HWARF OM0HWARF ; 
    10 OM0HWROF OM0HWROF ; 
    10 OM0HWIRF OM0HWIRF ; 
    10 OM0HWRER OM0HWRER ; 
    10 OM0HWCBY OM0HWCBY ; 
    10 OM0HWSVR OM0HWSVR ; 
    10 OM0HWIC OM0HWIC ; 
    10 OM0HWLC OM0HWLC ; 
    10 OM0HWISQ OM0HWISQ ; 
    10 OM0HWLSQ OM0HWLSQ ; 
    10 OM0HWOWH OM0HWOWH ; 
    10 OM0HWDR1 OM0HWDR1 ; 
    10 OM0HWDR2 OM0HWDR2 ; 
    10 OM0HWSMK OM0HWSMK ; 
      15 SM1AGYID SM1AGYID ; 
      15 SM4REPID SM4REPID ; 
      15 XXXSTAT XXXSTAT ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 XWHCD XWHCD ; 
    10 XOPCD XOPCD ; 
    10 XOSALWCH XOSALWCH ; 
    10 XOSALWXL XOSALWXL ; 
    10 XOTADIRS XOTADIRS ; 
    10 XOTLDAYS XOTLDAYS ; 
    10 XOTABULK XOTABULK ; 
    10 XOCFUTRF XOCFUTRF ; 
    10 XOCPROPF XOCPROPF ; 
    10 XOTSMPLF XOTSMPLF ; 
    10 OM0HWSMP OM0HWSMP ; 
    10 XDSWHSEF XDSWHSEF ; 
    10 OM0HWDT OM0HWDT ; 
      15 OM0HWMM OM0HWMM ; 
      15 OM0HWHP1 OM0HWHP1 ; 
      15 OM0HWDD OM0HWDD ; 
      15 OM0HWHP2 OM0HWHP2 ; 
      15 OM0HWYY OM0HWYY ; 
    10 OM0HWT1 OM0HWT1 ; 
      15 OM0HWTH1 OM0HWTH1 ; 
      15 * char(1) ; 
      15 OM0HWTM1 OM0HWTM1 ; 
      15 * char(1) ; 
      15 OM0HWTC1 OM0HWTC1 ; 
    10 OM0HWT2 OM0HWT2 ; 
      15 OM0HWTH2 OM0HWTH2 ; 
      15 OM0HWTM2 OM0HWTM2 ; 
    10 OM0HWTRF OM0HWTRF ; 
    10 OM0HWCTF OM0HWCTF ; 
    10 OM0HWTMF OM0HWTMF ; 
    10 XPTCD XPTCD ; 
    10 XAACD XAACD ; 
    10 KUTAPOF KUTAPOF ; 
    10 KUTAPBK KUTAPBK ; 
    10 XTDCD XTDCD ; 
    10 KUTTDPOF KUTTDPOF ; 
    10 KUTTDPBK KUTTDPBK ; 
    10 XDACD XDACD ; 
    10 XCPCD XCPCD ; 
    10 OM0HWPTC OM0HWPTC ; 
    10 OM0HWTDC OM0HWTDC ; 
    10 OM0HWTDF OM0HWTDF ; 
    10 OM0HWTDB OM0HWTDB ; 
    10 OM0HWAAC OM0HWAAC ; 
    10 OM0HWAAF OM0HWAAF ; 
    10 OM0HWAAB OM0HWAAB ; 
    10 OM0HWCPC OM0HWCPC ; 
    10 XODMXDSC XODMXDSC ; 
    10 OM0HWPTR OM0HWPTR ; 
    10 OM0HWTDR OM0HWTDR ; 
    10 OM0HWTFR OM0HWTFR ; 
    10 OM0HWTBR OM0HWTBR ; 
    10 OM0HWAAR OM0HWAAR ; 
    10 OM0HWAFR OM0HWAFR ; 
    10 OM0HWABR OM0HWABR ; 
    10 OM0HWCPR OM0HWCPR ; 
    10 OM0HWABF OM0HWABF ; 
    10 OM0HWBNF OM0HWBNF ; 
    10 OM0HWBNT OM0HWBNT ; 
    10 OM0HWBSA OM0HWBSA ; 
    10 OM0HWDSA OM0HWDSA ; 
    10 OM0HWSCR OM0HWSCR ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 OP1CUPO OP1CUPO ; 
      15 XOBCD XOBCD ; 
      15 XOTCD XOTCD ; 
      15 XOCCD XOCCD ; 
      15 XGPCD XGPCD ; 
      15 SP1ID SP1ID ; 
      15 SP6MDISC SP6MDISC ; 
      15 OP1BOFL OP1BOFL ; 
      15 XDSCD XDSCD ; 
      15 XBDCD XBDCD ; 
      15 OP1TBREP OP1TBREP ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 OP1ORCDT OP1ORCDT ; 
      15 OP1CALDT OP1CALDT ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 OP1DSADT OP1DSADT ; 
      15 XXXFSTNM XXXFSTNM ; 
        20 OM0HWFIN OM0HWFIN ; 
        20 * char(14) ; 
      15 XXXLSTNM XXXLSTNM ; 
      15 XSOABRV XSOABRV ; 
      15 XWHSABRV XWHSABRV ; 
      15 XOTABRV XOTABRV ; 
      15 XOBDESC XOBDESC ; 
      15 XGPABRV XGPABRV ; 
      15 OM0HWNDT OM0HWNDT ; 
      15 XOCABRV XOCABRV ; 
      15 OM0HWBDT OM0HWBDT ; 
      15 OM0HWADT OM0HWADT ; 
      15 OM0HWWDT OM0HWWDT ; 
      15 OP1ORDBY OP1ORDBY ; 
      15 OM0HWRDT OM0HWRDT ; 
      15 OM0HMTBN OM0HMTBN ; 
      15 OM0HMERN OM0HMERN ; 
      15 OM0HMEDT OM0HMEDT ; 
      15 OM0HMBKL OM0HMBKL ; 
      15 OM0HMBKV OM0HMBKV ; 
      15 OM0HWCDT OM0HWCDT ; 
      15 XOMABRV XOMABRV ; 
      15 OM0HWMDT OM0HWMDT ; 
      15 OM0HMRN OM0HMRN ; 
      15 XOSABRV XOSABRV ; 
      15 OM0HWOSD OM0HWOSD ; 
      15 OM0HWCSD OM0HWCSD ; 
      15 XCHABRV XCHABRV [3] ; 
      15 XCSABRV XCSABRV ; 
      15 XDSABRV XDSABRV ; 
      15 XSHABRV XSHABRV ; 
      15 XNDCD XNDCD ; 
      15 OM0HMINT OM0HMINT ; 
      15 OM0HMLBL OM0HMLBL ; 
    10 OP1NORID OP1NORID ; 
    10 OM0HWOPP OM0HWOPP ; 
    10 OM0HWNPP OM0HWNPP ; 
    10 OM0HWQTY OM0HWQTY ; 
    10 XWHOWNGF XWHOWNGF ; 
    10 OM0HWPCH OM0HWPCH ; 
    10 OM0HWDKY OM0HWDKY ; 
      15 OM0HWDXT OM0HWDXT ; 
      15 OM0HWDND OM0HWDND ; 
    10 OM0HWDON OM0HWDON ; 
      15 OM0HWPAR OM0HWPAR ; 
      15 OM0HWCOI OM0HWCOI ; 
      15 OM0HWNOI OM0HWNOI ; 
      15 OM0HWTK1 OM0HWTK1 ; 
      15 OM0HWTK2 OM0HWTK2 ; 
      15 OM0HWTK3 OM0HWTK3 ; 
      15 OM0HWTK4 OM0HWTK4 ; 
      15 OM0HWTK5 OM0HWTK5 ; 
    10 OM0HWSPH OM0HWSPH ; 
    10 OM0HWSPM OM0HWSPM ; 
    10 OM0HWCT1 OM0HWCT1 ; 
    10 OM0HW435 OM0HW435 ; 
    10 OM0HW511 OM0HW511 ; 
    10 OM0HWFND OM0HWFND ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OM0HW546 OM0HW546 ; 
    10 OM0HWWHF OM0HWWHF ; 
    10 OM0HWCRF OM0HWCRF ; 
    10 OM0HWFCU OM0HWFCU ; 
    10 OM0HWFC1 OM0HWFC1 ; 
    10 OM0HWFC2 OM0HWFC2 ; 
    10 OM0HWFC3 OM0HWFC3 ; 
    10 OM0HWFC4 OM0HWFC4 ; 
    10 OM0HWC30 OM0HWC30 ; 
    10 OM0HWSPF OM0HWSPF ; 
    10 OM0HWEOI OM0HWEOI ; 
    10 OM0HWSGC OM0HWSGC ; 
    10 OM0HWEDT OM0HWEDT ; 
      15 OM0HWEDM OM0HWEDM ; 
      15 OM0HWSH1 OM0HWSH1 ; 
      15 OM0HWEDD OM0HWEDD ; 
      15 OM0HWSH2 OM0HWSH2 ; 
      15 OM0HWEDY OM0HWEDY ; 
    10 OM0HWFDT OM0HWFDT ; 
      15 OM0HWFDC OM0HWFDC ; 
      15 OM0HWFDY OM0HWFDY ; 
      15 OM0HWFDM OM0HWFDM ; 
      15 OM0HWFDD OM0HWFDD ; 
    10 OM0HWPFL OM0HWPFL ; 
    10 OM0HWSB1 OM0HWSB1 ; 
    10 OM0HWSB2 OM0HWSB2 ; 
    10 OM0HW-SUB1 OM0HW-SUB1 ; 
    10 OM0HW-EK1-KEY OM0HW-EK1-KEY ; 
      15 OM0HW-EK1-COMPANY OM0HW-EK1-COMPANY ; 
      15 OM0HW-EK1-FILL-1 OM0HW-EK1-FILL-1 ; 
      15 OM0HW-EK1-STORE OM0HW-EK1-STORE ; 
      15 OM0HW-EK1-FILL-2 OM0HW-EK1-FILL-2 ; 
      15 OM0HW-EK1-DEPT OM0HW-EK1-DEPT ; 
      15 OM0HW-EK1-FILL-3 OM0HW-EK1-FILL-3 ; 
      15 OM0HW-EK1-GPC OM0HW-EK1-GPC ; 
    10 OM0HW-UPD-BLK-FL OM0HW-UPD-BLK-FL ; 
    10 OM0HW-UPD-BLK-DRW-CD-FL OM0HW-UPD-BLK-DRW-CD-FL ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OM0HW-CRED-CHK-DIR-SHP OM0HW-CRED-CHK-DIR-SHP ; 
    10 OM0HW-CRED-REASON-CD OM0HW-CRED-REASON-CD ; 
    10 OM0HW-CHK-SUBORDERS-FL OM0HW-CHK-SUBORDERS-FL ; 
    10 OM0HW-SP1ID-MODIFIED-FL OM0HW-SP1ID-MODIFIED-FL ; 
    10 OM0HW-TOTAL-SUBORDERS OM0HW-TOTAL-SUBORDERS ; 
    10 OM0HW-SAVE-XOTCD OM0HW-SAVE-XOTCD ; 
    10 OM0HW-SAVE-XOBCD OM0HW-SAVE-XOBCD ; 
    10 OM0HW-SAVE-XGPCD OM0HW-SAVE-XGPCD ; 
    10 OM0HW-SAVE-OP1CUNDT OM0HW-SAVE-OP1CUNDT ; 
    10 OM0HW-SAVE-KUMSTRID OM0HW-SAVE-KUMSTRID ; 
    10 OM0HW-SAVE-XNXCD OM0HW-SAVE-XNXCD ; 
    10 OM0HW-ERROR-DIAG-KEY OM0HW-ERROR-DIAG-KEY ; 
      15 OM0HW-OP-CUST-ORD-ID-NUM OM0HW-OP-CUST-ORD-ID-NUM ; 
      15 OM0HW-FILL1 char(1) ; 
      15 OM0HW-OP-NIKE-ORD-ID-NUM OM0HW-OP-NIKE-ORD-ID-NUM ; 
      15 OM0HW-FILL2 OM0HW-FILL2 ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 OM0HW-OB1120-ERROR-INFO1 OM0HW-OB1120-ERROR-INFO1 ; 
      15 OM0HW-ERROR-MESSAGE OM0HW-ERROR-MESSAGE ; 
      15 * char(1) ; 
      15 OBT-RETURN-KEY OBT-RETURN-KEY ; 
    10 OM0HW-OB1120-ERROR-INFO2 OM0HW-OB1120-ERROR-INFO2 ; 
      15 OBT-RETURN-LOCATION OBT-RETURN-LOCATION ; 
      15 * char(1) ; 
      15 OBT-RETURN-DATABASE OBT-RETURN-DATABASE ; 
      15 * char(1) ; 
      15 OM0HW-OB1120-OP-CUST-ORD-ID-NUM OM0HW-OB1120-OP-CUST-ORD-ID-NUM ; 
    10 OM0HW-OLD-ITEM-VALUE OM0HW-OLD-ITEM-VALUE ; 
    10 OM0HW-OLD-ALLOC-VALUE OM0HW-OLD-ALLOC-VALUE ; 
    10 OM0HW-NEW-ALLOC-VALUE OM0HW-NEW-ALLOC-VALUE ; 
    10 OM0HW-HOLDING-FIELD OM0HW-HOLDING-FIELD ; 
    10 OM0HW-ON-ORDER-VALUE-VARIANCE OM0HW-ON-ORDER-VALUE-VARIANCE ; 
    10 OM0HW-ALLOC-VALUE-VARIANCE OM0HW-ALLOC-VALUE-VARIANCE ; 
    10 OM0HW-SPGM-ITEM-WARNING OM0HW-SPGM-ITEM-WARNING ; 
    10 OM0HW-SPGM-WARNING OM0HW-SPGM-WARNING ; 
    10 OM0HW-SUB OM0HW-SUB ; 
    10 OBT-TOTAL-ORDER-UNITS OBT-TOTAL-ORDER-UNITS ; 
    10 OBT-TOTAL-ORDER-VALUE OBT-TOTAL-ORDER-VALUE ; 
    10 OM0HWDPC OM0HWDPC ; 
    10 OM0HWHPC OM0HWHPC ; 
    10 OM0HW-JC-PENNEYS-FL OM0HW-JC-PENNEYS-FL ; 
    10 OM0HW-BELKS-FL OM0HW-BELKS-FL ; 
    10 OM0HW-PO-CHNG-FL OM0HW-PO-CHNG-FL ; 
    10 OM0HW-ND-CHNG-FL OM0HW-ND-CHNG-FL ; 
    10 OM0HW-DNSB-CHNG-FL OM0HW-DNSB-CHNG-FL ; 
    10 OM0HW-DNSA-CHNG-FL OM0HW-DNSA-CHNG-FL ; 
    10 OM0HW-SPGM-CHNG-FL OM0HW-SPGM-CHNG-FL ; 
    10 OM0HW-PRICE-CHNG-FL OM0HW-PRICE-CHNG-FL ; 
    10 OM0HW-SUB-SCRIPT OM0HW-SUB-SCRIPT ; 
    10 OM0HW-COMP OM0HW-COMP ; 
    10 OM0HW-ERR-KEY OM0HW-ERR-KEY ; 
      15 OM0HW-OP1PARTN OM0HW-OP1PARTN ; 
      15 OM0HW-OP1CUOID OM0HW-OP1CUOID ; 
      15 OM0HW-OP1NORID OM0HW-OP1NORID ; 
    10 OM0HW-XCCIDX OM0HW-XCCIDX ; 
    10 OM0HW-XCC-STAT-FOUND OM0HW-XCC-STAT-FOUND ; 
    10 OM0HW-WSY2000-FND-FLAG OM0HW-WSY2000-FND-FLAG ; 
    10 OM0HW-WSY2000-POST-1 OM0HW-WSY2000-POST-1 ; 
      15 OM0HW-WSY2000-GPC-CD OM0HW-WSY2000-GPC-CD ; 
      15 OM0HW-WSY2000-STY-NBR OM0HW-WSY2000-STY-NBR ; 
      15 OM0HW-WSY2000-COLR-CD OM0HW-WSY2000-COLR-CD ; 
      15 OM0HW-WSY2000-DIM-CD OM0HW-WSY2000-DIM-CD ; 
      15 OM0HW-WSY2000-PROD-REG-CD OM0HW-WSY2000-PROD-REG-CD ; 
      15 OM0HW-WSY2000-RETURN-CD OM0HW-WSY2000-RETURN-CD ; 
    10 OM0HW-UPDT-WHSE-XDSCD OM0HW-UPDT-WHSE-XDSCD ; 
    10 OM0HW-APPLY-CHG-FL OM0HW-APPLY-CHG-FL ; 
    10 OM0HW-DCMS-ORD-FL OM0HW-DCMS-ORD-FL ; 
    10 OM0HW-VMPOLH01-EOF-FL OM0HW-VMPOLH01-EOF-FL ; 
end // end OM0HW01

Record OM0HW02 type basicRecord
  5 OM0HWAGR OM0HWAGR ; 
    10 OM0HWORP OM0HWORP ; 
    10 OM0HWOAG OM0HWOAG ; 
    10 OM0HWNAG OM0HWNAG ; 
    10 * char(2) ; 
    10 OM0HWCUS OM0HWCUS ; 
      15 OM0HWCSB OM0HWCSB ; 
      15 OM0HWCSC OM0HWCSC ; 
end // end OM0HW02

Record OM0HW03 type basicRecord // VAGen Info - redefined OM0HW02
  5 OM0HWRGR OM0HWRGR ; 
    10 OM0HWORP OM0HWORP ; 
    10 OM0HWOAG OM0HWOAG ; 
    10 OM0HWAG1 OM0HWAG1 ; 
    10 OM0HWAG2 OM0HWAG2 ; 
    10 * char(1) ; 
    10 OM0HWSCS OM0HWSCS ; 
      15 OM0HWCSE OM0HWCSE ; 
      15 * num(1) ; 
end // end OM0HW03

//*** RECORD=OM0HW04 ****
//   copy of op1rec.op1group in an array
// 
// ***********************
Record OM0HW04 type basicRecord
  5 OM0HW04-GROUP-LEVEL OM0HW04-GROUP-LEVEL ; 
    10 OP1GROUP OP1GROUP [20] ; 
end // end OM0HW04

// OB1100 booking date
DataItem OBP-BOOKING-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler - must be last item
DataItem OBP-FILLER char(2071)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1100 first valid size
DataItem OBP-FIRST-SZ-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OB1100 pass record group level
DataItem OBP-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1100 last valid size
DataItem OBP-LAST-SZ-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OB1100 passing data
DataItem OBP-PASSING-DATA char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price method - domestic or nil
DataItem OBP-PRICE-METHOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Price type
DataItem OBP-PRICE-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Price type ind
DataItem OBP-PRICE-TYPE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1100 return data
DataItem OBP-RETURN-DATA char(370)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Return database
DataItem OBP-RETURN-DATABASE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Return key
DataItem OBP-RETURN-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Return location
DataItem OBP-RETURN-LOCATION char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1100 Return status
DataItem OBP-RETURN-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1120-edit-for-spgm-min
DataItem OBT-EDIT-FOR-SPGM-MIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler - must be last item
DataItem OBT-FILLER char(2329)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 pass record group level
DataItem OBT-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 passing data
DataItem OBT-PASSING-DATA char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 return data
DataItem OBT-RETURN-DATA char(129)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 Return database
DataItem OBT-RETURN-DATABASE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 Return key
DataItem OBT-RETURN-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 Return location
DataItem OBT-RETURN-LOCATION char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OB1120 Return status
DataItem OBT-RETURN-STAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// terms method - domestic or nil
DataItem OBT-TERMS-METHOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total method
DataItem OBT-TOTAL-METHOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ob1120-total-order-units
DataItem OBT-TOTAL-ORDER-UNITS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ob1120-total-order-value
DataItem OBT-TOTAL-ORDER-VALUE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk/drawn label
DataItem OM0HMBKL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk id/num of draws
DataItem OM0HMBKV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// entered date
DataItem OM0HMEDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entered by service rep
DataItem OM0HMERN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instruction
DataItem OM0HMINT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special label
DataItem OM0HMLBL char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maint service rep name
DataItem OM0HMRN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// taken by service rep
DataItem OM0HMTBN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-ALLOC-VALUE-VARIANCE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// apply change flag
DataItem OM0HW-APPLY-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-BELKS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit spgm/cust across subords
DataItem OM0HW-CHK-SUBORDERS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comp switch
DataItem OM0HW-COMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit check for dir shp flag
DataItem OM0HW-CRED-CHK-DIR-SHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// call reason cde for credit chk
DataItem OM0HW-CRED-REASON-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DCMS order flag
DataItem OM0HW-DCMS-ORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-DNSA-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-DNSB-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - cu_co_id
DataItem OM0HW-EK1-COMPANY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag key - xnx-dept-id-xref
DataItem OM0HW-EK1-DEPT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag key - filler
DataItem OM0HW-EK1-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OM0HW-EK1-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OM0HW-EK1-FILL-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - xgp-gpc-cd
DataItem OM0HW-EK1-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key 1
DataItem OM0HW-EK1-KEY char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - cu_stor_id
DataItem OM0HW-EK1-STORE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error key
DataItem OM0HW-ERR-KEY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-ERROR-DIAG-KEY char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message text
DataItem OM0HW-ERROR-MESSAGE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-FILL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-HOLDING-FIELD decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JC Penneys found flag
DataItem OM0HW-JC-PENNEYS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-ND-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-NEW-ALLOC-VALUE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// description 1
DataItem OM0HW-OB1120-ERROR-INFO1 char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description 2
DataItem OM0HW-OB1120-ERROR-INFO2 char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order number numeric format
DataItem OM0HW-OB1120-OP-CUST-ORD-ID-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-OLD-ALLOC-VALUE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW-OLD-ITEM-VALUE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW-ON-ORDER-VALUE-VARIANCE decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW-OP-CUST-ORD-ID-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW-OP-NIKE-ORD-ID-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem OM0HW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem OM0HW-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-part-char
DataItem OM0HW-OP1PARTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-PO-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-PRICE-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store of previous suborder
DataItem OM0HW-SAVE-KUMSTRID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date of previous suborder
DataItem OM0HW-SAVE-OP1CUNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc of previous suborder
DataItem OM0HW-SAVE-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept of previous suborder
DataItem OM0HW-SAVE-XNXCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// base order type of prev subord
DataItem OM0HW-SAVE-XOBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type of previous subordr
DataItem OM0HW-SAVE-XOTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales program changed
DataItem OM0HW-SP1ID-MODIFIED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Belk's found flag
DataItem OM0HW-SPGM-CHNG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warn item requires spgm
DataItem OM0HW-SPGM-ITEM-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// a sales pgm change warning
DataItem OM0HW-SPGM-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general subscript
DataItem OM0HW-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub-script
DataItem OM0HW-SUB-SCRIPT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsgcd subscript
DataItem OM0HW-SUB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total suborders on the order
DataItem OM0HW-TOTAL-SUBORDERS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW-UPD-BLK-DRW-CD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update bbulk order flag
DataItem OM0HW-UPD-BLK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update whse and direct ship
DataItem OM0HW-UPDT-WHSE-XDSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vmpolh01 eof flag
DataItem OM0HW-VMPOLH01-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JC Penneys found flag
DataItem OM0HW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JC Penneys found flag
DataItem OM0HW-XCC-STAT-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HW-XCCIDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HW04-GROUP-LEVEL char(9240)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1-time change flag
DataItem OM0HW1TC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warn msg #435 flag
DataItem OM0HW435 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warn msg #511 terms flag
DataItem OM0HW511 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warn msg #546 comp nbr
DataItem OM0HW546 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// aa bank % - xodtbl
DataItem OM0HWAAB decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ad allowance - xodtbl
DataItem OM0HWAAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// aa face % - xodtbl
DataItem OM0HWAAF decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ad allowance - result set
DataItem OM0HWAAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// active bulk order flag
DataItem OM0HWABF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// aa bank % - result set
DataItem OM0HWABR decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-dnt-ship-aft-dt
DataItem OM0HWADT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// aa face % - result set
DataItem OM0HWAFR decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3/4 of new agency
DataItem OM0HWAG1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1/4 of new agency
DataItem OM0HWAG2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// definitions for audit rec
DataItem OM0HWAGR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allocation manager
DataItem OM0HWAMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// active sales rep flag
DataItem OM0HWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk/draw order flag
DataItem OM0HWBDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-dnt-ship-bfr-dt
DataItem OM0HWBDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order need date flag
DataItem OM0HWBNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order need date
DataItem OM0HWBNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order d-s-after-date
DataItem OM0HWBSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date + 30
DataItem OM0HWC30 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maint service rep name
DataItem OM0HWCBY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust different flag
DataItem OM0HWCDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-call-dt
DataItem OM0HWCDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancellation flag
DataItem OM0HWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust modified flag
DataItem OM0HWCMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust ord id
DataItem OM0HWCOI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// co-op code - xodtbl
DataItem OM0HWCPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// co-op code - result set
DataItem OM0HWCPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancel reenter error flag
DataItem OM0HWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HWCSB num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0HWCSC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cred status dt
DataItem OM0HWCSD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HWCSE num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal table counter
DataItem OM0HWCT1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust terms found flag
DataItem OM0HWCTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer found flag
DataItem OM0HWCUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-co-id
DataItem OM0HWCUS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid customer flag
DataItem OM0HWCUV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work day
DataItem OM0HWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error flag
DataItem OM0HWDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error display key
DataItem OM0HWDKY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error display need date
DataItem OM0HWDND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display order number
DataItem OM0HWDON char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HWDPC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old whse dec region
DataItem OM0HWDR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new whse dec region
DataItem OM0HWDR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dont-ship-after work date
DataItem OM0HWDSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem OM0HWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error display order type
DataItem OM0HWDXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date format field - day
DataItem OM0HWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date format field - month
DataItem OM0HWEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date format field
DataItem OM0HWEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date format field - year
DataItem OM0HWEDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of items flag
DataItem OM0HWEOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formated customer - co
DataItem OM0HWFC1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - store
DataItem OM0HWFC2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - dept
DataItem OM0HWFC3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - GPC
DataItem OM0HWFC4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formated customer number
DataItem OM0HWFCU char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted date    - century
DataItem OM0HWFDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date    - day
DataItem OM0HWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date    - month
DataItem OM0HWFDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date
DataItem OM0HWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted date    - year
DataItem OM0HWFDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first initial
DataItem OM0HWFIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table search found flag
DataItem OM0HWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OM0HWHP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OM0HWHP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HWHPC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// instructions count
DataItem OM0HWIC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inst modified flag
DataItem OM0HWIMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inactive sales rep flag
DataItem OM0HWIRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instruction sequence
DataItem OM0HWISQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// labels count
DataItem OM0HWLC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// label modified flag
DataItem OM0HWLMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// label sequence
DataItem OM0HWLSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord type&need dt modified fl
DataItem OM0HWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-mdt
DataItem OM0HWMDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem OM0HWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work message
DataItem OM0HWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new (override) sales agency
DataItem OM0HWNAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt
DataItem OM0HWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date valid flag
DataItem OM0HWNDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike ord id
DataItem OM0HWNOI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new production deadline flag
DataItem OM0HWNPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date changed flag
DataItem OM0HWNTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new terms & disc req flag
DataItem OM0HWNTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old sales agency
DataItem OM0HWOAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old production deadline flag
DataItem OM0HWOPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0HWORN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old sales rep
DataItem OM0HWORP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-stat-adt
DataItem OM0HWOSD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type valid flag
DataItem OM0HWOTV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old warehouse
DataItem OM0HWOWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OM0HWPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// picking change flag
DataItem OM0HWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prd dead line flag
DataItem OM0HWPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf key  flag
DataItem OM0HWPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whcd/need dte protect flag
DataItem OM0HWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po required flag
DataItem OM0HWPOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// payment term - xodtbl
DataItem OM0HWPTC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pt code - result set
DataItem OM0HWPTR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. op-tot-on-ord-qty
DataItem OM0HWQTY decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// received date
DataItem OM0HWRDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// service rep error flag
DataItem OM0HWRER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// redefines for audit rec
DataItem OM0HWRGR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep override flag
DataItem OM0HWROF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type table subscript
DataItem OM0HWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// direct ship subscript
DataItem OM0HWSB2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// authorized security
DataItem OM0HWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save screen group level
DataItem OM0HWSCR char(441)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shortened company
DataItem OM0HWSCS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special customer group flag
DataItem OM0HWSGC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OM0HWSGR char(1173)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date format field - slash
DataItem OM0HWSH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date format field - slash
DataItem OM0HWSH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer style flag
DataItem OM0HWSKU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales rep record key
DataItem OM0HWSMK char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work ord type sample flag
DataItem OM0HWSMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales office match flag
DataItem OM0HWSOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales program required flag
DataItem OM0HWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// base spgm id from order header
DataItem OM0HWSPH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// base spgm id from om0hm001
DataItem OM0HWSPM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// service rep id
DataItem OM0HWSVR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work time
DataItem OM0HWT1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work time without ':'
DataItem OM0HWT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// td bank % - result set
DataItem OM0HWTBR decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work second
DataItem OM0HWTC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// td bank % - xodtbl
DataItem OM0HWTDB decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade disc - xodtbl
DataItem OM0HWTDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// td face % - xodtbl
DataItem OM0HWTDF decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade disc code- result set
DataItem OM0HWTDR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// td face % - result set
DataItem OM0HWTFR decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work hour
DataItem OM0HWTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work hour
DataItem OM0HWTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extra diagnostic info
DataItem OM0HWTK1 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extra diagnostic info
DataItem OM0HWTK2 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extra diagnostic info
DataItem OM0HWTK3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extra diagnostic info
DataItem OM0HWTK4 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extra diagnostic info
DataItem OM0HWTK5 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work minute
DataItem OM0HWTM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work minute
DataItem OM0HWTM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord typ need dt match flag
DataItem OM0HWTMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust terms record flag
DataItem OM0HWTRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update error  flag
DataItem OM0HWUEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen update flag
DataItem OM0HWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-writ-dt
DataItem OM0HWWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse flag
DataItem OM0HWWHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem OM0HWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

