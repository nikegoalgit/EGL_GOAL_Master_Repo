package om0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import om.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OM0M ****
// nike order maintenance - order inquiry/change by order numb.
// 
// overview: this application will inquire on a specified order
//           number and initiate the order change process using
//           a screen option selection and a suborder selection
// 
// NOTE!!!!: This application uses TEMP STORAGE for paging
//           purposes. All prior occurances of xsops02
//           (standard abend routine) have been changed to
//           OM0MSXS inorder to purge temp storage and then
//           perform the abend process.  Please be aware of
//           temp storage usage when making future changes
//           to this application.  Changes made on 8/21/90.
// 
// date created: 07/01/86
//       author: bill klassen
// 
// ************************************************************
// data base views
//      dprod.vstyle01-sy1rec-style table
//      dcust vcmpny01-kucrec w/s company rec
//      dcust.vcucpx01- via CU1710
//      dorder.vorhdr01-op1rec-order header
//      dorder.vitem001-op2rec-item table
//      dprod.vcolor02-sycrec-composit color table
//                    -kumrec-
//                    -kuyrec-
// ************************************************************
// ************************************************************
// applications called  cc1070
//      mn0m mn0s om0a om0c om0g om0g om0g om0h om0i om0j
//      om0k om0l om0m om0o om0p om0q om0s op0m ta0020 ta0040
// ************************************************************
// ************************************************************
// dclgens
//      dcl00013 dcl00021 dcl00045 dcl00039 dcl00063
// 
// ************************************************************
// maintenance history:
// 
//     when       who     rev              what
//   --------  ---------- ---  --------------------------------
//   07/01/86  b klassen       original creation
//   11-14-86  b court     2   add credit check & message
//   02/05/86  jvande          changes s05 so not require user
//                             to be in svrep tbl in only inqui
//   02/19/87  jvande          changed om0m010 so when select
//                             order in oi0c, will loop through
//                             selected order properly.
//   02/25/87  jvande          change s05 to always try read so
//                             will have rep # in go into chg m
//   03/01/87  s sayewitz      change om0m010 to retain last
//                             processing option selected.
//   03/04/87  s sayewitz      make correct kumstrnm appear on
//                             screen when there are multiple
//                             sub-orders.  correction made in
//                             om0m040.
//   03/11/87  s sayewitz      change om0m010 to retain last
//                             change flag option selected.
//   03/16/87  jvande,ssayew   change 010, 030 to initialize
//                             WS when coming in from oi0c.
//   05/06/87  ssayew          initialize cust name when not
//                             going through sub-select (020).
//   05/26/87  jvande          fixed to select styles across su
//                             b orders. also fixed so will
//                             return to sub select if inquire
//                             on order with mult sub-orders.
//   12/02/87 tfox             removed unused table.
//   02/23/88 gwells           check xomtbl.xxxstat. if status
//                             is inactive, display error - s40
//   03/14/88 craine           fixed to select styles across
//                             sub-orders. will select the sub
//                             order for the style selected &
//                             go to om0q ( no display of sub
//                             order map).
//   08/22/88 gwells           rebook - added new edits for
//                             order maintenance reason code
//                             (xomcd) for rebooking - s40.
//                             new sgrp - validate agency/
//                             customer (s42).
//   09/28/88 jjohns           set suborder field to dark,
//                             protect when no suborder - 030.
//                             add check for no suborder during
//                             screen edits. - 040.
//   10/15/88 tfox             added changes to prevent changes
//                             to rebook bulks (040 s40 s15).
//   11/03/88 gwells           rebook - add additional edit:
//                               cancellation date must be more
//                               than 45 days from needdate -
//                               s40, 010. new sgrps s41,s43.
//   11/04/88 JWOOD            NONCSP OPT ADDED TO CALLS
//   12/05/88 gwells           add credit hold edit to rebook
//                             45 day cancel window - s43.
//   12/20/88 obecke           allow only 1 suborder to be
//                             selected at a time.  040.
//                             multiple selects were goofing up
//                             rebooking item recs written to
//                             dorder.vrbaud01.
//   01/09/89 dwalke           add segmented transaction id to
//                             appl.
//   03/30/89 tfox             added code in s05 to carry user
//                             id in commarea.
//   04/13/89 scantr           activated dimemsion code
//   08/14/89 ssteph           added credit life code 30 to
//                             process s43.
//   10/25/89 rcoron           patched-in read only routine
//                             for night time inquiry. (om0m010
//                             om0ms10, om0ms15 and osirec)
//   11/14/89 rcoron           database changes.  removed from
//                             list xdstbl and xsotbl because
//                             they were not used.
//   03/05/90 cgrice           bug #302 - keep the last order
//                             number you maintenanced on the
//                             om0m screen.  changed 010.
//   04/04/90 cgrice           db changes - renamed op1blkcd
//                             to xbdcd.  040, s15, s20, s41
//   04/13/90 schase           bug #278 - add reenter flag
//                             when cancel a suborder. 040,
//                             s40,s41,map.
//   04/30/90 BWATSO           Bug 323
//                             Changed program to display a
//                             "last order displayed" message
//                             after the last order selected
//                             in OI0C has been displayed.
//                             Changed 010 and 020.  Added new
//                             statement group (SLO) and new
//                             new field (WLORFL) to OMWREC.
//   08/21/90 schase           added paging to the application
//                             using temp storage. Changed:
//                             OM0MM002, S10, S25, S30, S35,
//                             S42, S45, S60, S65, W01, 020,
//                             030, 040, 050.  Added: SB0, SC0,
//                             SD0, SL0, SN0, SR0, SS0, SW0,
//                             SXS, S1P, S1R, S1U, S1W, S70,
//                             S75, W02.
//   02/12/91 tfox             regen for db chgs
//   03/28/91 schen            change om0ms20 to allow alloc.
//                             manager to change the orders of
//                             other sales office if the order
//                             status is 'al' or 'pa'.
//   04/26/91 schen            log #585 - change om0ms41 to
//                             turn off rebooking of apparel if
//                             reason code is 01.
//   05/31/91 tfox             Menu of Services - m001,s01,s02,
//                             s15,010,020,030,040 - check for
//                             prepacks
//   06/05/91 tfox             move menu services -911 logic
//                             s02,040,w01,o60(new), om0mw911
//   07/01/91 tfox             fix bug. if pack code invalid
//                             pgm getting lost. 020,040,060
//   08/06/91 dharri           log #669 - rebook cancellation
//                             45 day window no longer called
//                             in s41.
//   08/13/91 dharri           log #673 - add new product XREF
//                             ind value of 'R'. s30.
//   12/02/91 jhecke           695 - Prepack of footwear. 040,
//                             s02.
//   01/06/92 jwils1           fix bug with map field om0mm002-
//                             xnxcd (dept).
//   02/12/92 schase           recompiled for new version of
//                             cc1rec.
//   05/15/92 jhecke           protect userid on screen m001
//   08/31/92 dlegg            Log #885. Cust Prod Xref changes
//                             to S30.
//   12/28/92 jather           #868 - Airborne enhancement -
//                             Cancellations not valid for
//                             orders transmitted to Airborne.
//                             sb0,s1r,s1w,040
//   04/26/93 bbake2           daily support, added initial-
//                             ization of ta2rec prior to
//                             calling ta0040, to prevent the
//                             accidental 'adjustment' of the
//                             date, when 'days to add'
//                             contains a garbage number.
//   06/10/93 dcaust           #964 International Airborne.
//                             can't add product if order class
//                             is 'TR' (transmitted Airborne
//                             order). if pf24 and ord cls 'tr'
//                             allow but default ord cls to 'au
//                             (updt Airborne order).
//                             s15, 040; new om0ms-updt-ord-hdr
//   09/01/93 gcalki           CSP 4.1 changes - added check
//                             for return code from om0r.  if
//                             the code is not '00' then
//                             control is returned to main menu
//                             omerec, 040.
//   02/28/94 scantr           db changes: resize om0mw02 &
//                             resize temp storage s1w, s1r
//   04/28/94 jather           log 1003. renamed causera to
//                             ca-user-workarea-4k to hold
//                             opwrec which has increased to
//                             3072 bytes. Also, increased the
//                             limit for line items to 900 from
//                             200. om0m010
//   04/20/95 craine           change om0ms41 to turn on
//                             rebooking of apparel if reason
//                             code is 01.
//   07/07/95 dliddl           Changes to incorporate Nike
//                             Canada into GOAL system.
//   03/29/96 mvalbu           recompiled to pickup change made
//                             to common statement group
//                             xpom100 where nighttime inquiry
//                             mode was changed from 6 pm to
//                             7 pm.
//   11/22/96 mvalbu           recompiled to pickup change made
//                             to common statement group
//                             xpom100 where nighttime inquiry
//                             mode was changed from 7 pm to
//                             6 pm until 4 am instead of 3 am.
//   12/13/96 CBRINE           Added call to CU1710 to access
//                             new xref table - VCUCPX01.(S30)
//    9/01/97 RFREY            OCD Changes - write vsohcr01
//                             when an order is cancelled
//   01/01/98 JOLDIN           Move 'OP' to socd-appl-src-cd
//                             before reading vsohcr01 in
//                             om0ms-max-vsohcr01.
//   01/27/98 JFLOR1           Modified inquiry/update time
//                             module XPOM100.
//   07/24/98 UDAFON  #178     Modified logic to accept 20 occu
//                             rances of style instead of 10.
//                             Increased size of OMWREC to 3505
//                             bytes.
//   09/10/98 UDAFON  #1853    Changed logic to display only
//                             sub-orders that contain styles.
//                             Made style a required entry when
//                             using option 4.
//   10/20/98 UDAFON  #2117    Style was not getting cleared
//                             from OM0M.
//   06/16/99 SGOPAL  #3518    Added code in OM0M040 to get
//                             nike-ord-id from working storage
//                             than from map in order to fix
//                             3 digit problem with sub orders.
//   07/27/00 AGOOLL  #7193    commented code in OM0MS05
//                             to avoid override  of userid.
//                             search for TT#7193.
// ************************************************************
// *********************
Program OM0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  OM0MW01 OM0MW01; // record
  OM0MW02 OM0MW02; // record
  OMAREC OMAREC; // record
  OMEREC OMEREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OSAREC OSAREC; // record
  OSIREC OSIREC; // record
  OSNREC OSNREC; // record
  OSWWREC OSWWREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VOPPGM01 VOPPGM01; // record
  VSOHCR01 VSOHCR01; // record
  WCU1710 WCU1710; // record
  XP0QW00 XP0QW00; // record
  XS0MW01 XS0MW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCHTBL {deleteAfterUse = yes}; // table
  use XCSTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use OM0MM.OM0MM001,  // forms
      OM0MM.OM0MM002, 
      OM0MM.XP0QM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OM0M010: OM0M010();
     /* ********************start flow*************************/
    if (OMWREC.OMWMULSO == "Y")
      goto OM0M030; /* converse select screen*/
    else
      if (OMWREC.OMWCRCKF == "D")
        goto OM0M050; /* do credit check*/
      else
        goto OM0M020; /* converse option screen*/
      end
    end
     /* ********************end flow***************************/
    OM0M020: OM0M020();
     /* ********************start flow*******************************/


     /* MOVE 'N' TO OMWREC.OMWCHGFL     ; for test only - om0o !!!*/

    if (OMAREC.OMAERR == "Y") /* error exists*/
      goto OM0M020; /* branch to converse*/
    end

    if (OMWREC.OMWMULSO == "Y") /* multiple suborders*/
      goto OM0M030; /* branch to select screen*/
    end

    if (OMWREC.OMWOPTN == 1
     || OMWREC.OMWOPTN == 2
     || OMWREC.OMWOPTN == 7)
      COMMAREA.CACURRAP = "OM0H";
      transfer to program "OM0H" passing COMMAREA; /* order header screen*/
    end


    if (OMWREC.OMWOPTN == 8)
      COMMAREA.CACURRAP = "OM0I";
      transfer to program "OM0I" passing COMMAREA; /* order header 2   screen*/
    end

    if (OMWREC.OMWOPTN == 9)
      COMMAREA.CACURRAP = "OM0J";
      transfer to program "OM0J" passing COMMAREA; /* alloc  screen*/
    end

    if (OMWREC.OMWOPTN == 10)
      COMMAREA.CACURRAP = "OM0K";
      transfer to program "OM0K" passing COMMAREA; /* address screen*/
    end

    if (OMWREC.OMWOPTN == 11)
      COMMAREA.CACURRAP = "OM0L";
      transfer to program "OM0L" passing COMMAREA; /* special instruc. screen*/
    end

    if (OMWREC.OMWOPTN == 12)
      COMMAREA.CACURRAP = "OM0C";
      transfer to program "OM0C" passing COMMAREA; /* comments screen*/
    end

    if (OMWREC.OMWOPTN == 13)
      goto OM0M060; /* branch to customer prepacks*/
    end


    if (OMWREC.OMWOPTN == 3)
      COMMAREA.CACURRAP = "OM0S";
      transfer to program "OM0S" passing COMMAREA; /* product summary  screen*/
    end

    if (OMWREC.OMWOPTN == 4)
      if (OMWREC.OMWCHGFL == "Y")
        COMMAREA.CACURRAP = "OM0Q";
        transfer to program "OM0Q" passing COMMAREA; /* product detail change*/
      else
        COMMAREA.CACURRAP = "OM0O";
        transfer to program "OM0O" passing COMMAREA; /* product detail inquiry*/
      end
    end

    if (OMWREC.OMWOPTN == 5
     && OMWREC.OMWCHGFL == "Y")
      COMMAREA.CACURRAP = "OM0P";
      transfer to program "OM0P" passing COMMAREA; /* product header   change*/
    else
      if (OMWREC.OMWOPTN == 5)
        COMMAREA.CACURRAP = "OM0O";
        transfer to program "OM0O" passing COMMAREA; /* product header   inquire*/
      end
    end

    if (OMWREC.OMWOPTN == 6)
      COMMAREA.CACURRAP = "OM0A";
      transfer to program "OM0A" passing COMMAREA; /* add product header   screen*/
    end



     /* ********************end flow*********************************/
    OM0M030: OM0M030();
    goto OM0M040; /* always go to converse map*/
    OM0M040: OM0M040();
     /* ********************start flow*******************************/



    if (OMAREC.OMAERR == "Y"        /* error exists*/
     || converseVar.eventKey is pf7 /* or page backward*/
     || converseVar.eventKey is pf8) /* or page forward*/
      goto OM0M040; /* branch to converse*/
    end

    if (converseVar.eventKey is pf24 /* cancel action*/
     || OM0MW01.OM0MW911 == "Y")    
      goto OM0M030; /* rebuild and redisplay*/
    end

    if (OMWREC.OMWOPTN == 1
     || OMWREC.OMWOPTN == 2
     || OMWREC.OMWOPTN == 7)
      COMMAREA.CACURRAP = "OM0H";
      transfer to program "OM0H" passing COMMAREA; /* order header screen*/
    end

     /* ***************************************/
      /* in real mode, opt 8 - 12 go to om0h to read order,*/
      /* then split to correct application*/
     /* ***************************************/

    if (OMWREC.OMWOPTN == 8)
      COMMAREA.CACURRAP = "OM0I";
      transfer to program "OM0I" passing COMMAREA; /* order header 2   screen*/
    end

    if (OMWREC.OMWOPTN == 9)
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                                       /* save user comm area*/
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OM0J";
      transfer to program "OM0J" passing COMMAREA; /* alloc  screen*/
    end

    if (OMWREC.OMWOPTN == 10)
      COMMAREA.CACURRAP = "OM0K";
      transfer to program "OM0K" passing COMMAREA; /* address screen*/
    end

    if (OMWREC.OMWOPTN == 11)
      COMMAREA.CACURRAP = "OM0L";
      transfer to program "OM0L" passing COMMAREA; /* special instruc. screen*/
    end

    if (OMWREC.OMWOPTN == 12)
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                                       /* save user comm area*/
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OM0C";
      transfer to program "OM0C" passing COMMAREA; /* comments screen*/
    end

    if (OMWREC.OMWOPTN == 13)
      goto OM0M060; /* branch to customer prepacks*/
    end

    if (OMWREC.OMWOPTN == 3)
      COMMAREA.CACURRAP = "OM0S";
      transfer to program "OM0S" passing COMMAREA; /* product summary  screen*/
    end

    if (OMWREC.OMWOPTN == 4)
      if (OMWREC.OMWCHGFL == "Y")
        COMMAREA.CACURRAP = "OM0Q";
        transfer to program "OM0Q" passing COMMAREA; /* product detail change*/
      else
        COMMAREA.CACURRAP = "OM0O";
        transfer to program "OM0O" passing COMMAREA; /* product detail inquiry*/
      end
    end

    if (OMWREC.OMWOPTN == 5
     && OMWREC.OMWCHGFL == "Y")
      COMMAREA.CACURRAP = "OM0P";
      transfer to program "OM0P" passing COMMAREA; /* product header   change*/
    else
      if (OMWREC.OMWOPTN == 5)
        COMMAREA.CACURRAP = "OM0O";
        transfer to program "OM0O" passing COMMAREA; /* product header   inquire*/
      end
    end

    if (OMWREC.OMWOPTN == 6)
      COMMAREA.CACURRAP = "OM0A";
      transfer to program "OM0A" passing COMMAREA; /* add product header   screen*/
    end



     /* ********************end flow*********************************/
    OM0M050: OM0M050();


    goto OM0M010; /* back to beginning, with credit flag off*/


    OM0M060: OM0M060();
    if (OMWREC.OMWMULSO == "Y")
      goto OM0M040;
    else
      goto OM0M020;
    end
  end // end main
end // end OM0M

// initialize work and map data
Function OM0M010()
     /* **********************************************************/
     /* * this process initializes program work area and clears **/
     /* * the map areas.                                        **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* system security check*/

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OM";
  COMMAREA.CAEZSG4 = "M";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

     /* set up commarea and omwrec*/

  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
                                                   /* move commarea into ws*/
  OM0MW01.OM0MW-OS0Q-FL = "N";
  if (COMMAREA.CAFROMAP == "OS0Q")
    OM0MW01.OM0MW-OS0Q-FL = "Y";
  end
  COMMAREA.CACURRAP = "OM0M";
  OM0MW01.CAFROMAP = COMMAREA.CAFROMAP;
  if (OM0MW01.OM0MWAP3 == "OM0" /* if finished order*/
   || OM0MW01.OM0MWAP3 == "OI0" 
   || OM0MW01.OM0MWAP3 == "OS0")
    /* next sentence*/
  else
    OMWREC.OMWINIT = " ";
  end
  if (OMWREC.OMWINIT != "OM0")
    set OMWREC empty; /* clear entire record*/
    OMWREC.OMWINIT = "OM0"; /* om initialization field*/
    OMWREC.OMWOPTN = 1; /* option default*/
    OMWREC.OMWCHGFL = "N"; /* change flag default*/
    OMWREC.OMWMULSO = "N"; /* multiple suborder flag default*/
    OMWREC.OMWDSORD = 0; /* display select order number*/
    OMWREC.OMWCRCKF = "N"; /* init credit check flag*/
    OM0MW01.OM0MWCD1 = 0; /* init credit check msg flag*/
    OMAREC.OMASUB1 = 1;
    while (OMAREC.OMASUB1 < 21)
      OMWREC.OMWDSSEL[OMASUB1] = " ";
      OMWREC.OMWDSSOR[OMASUB1] = 0;
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
    end
  else
    if (OM0MW01.OM0MWAP3 == "OI0")
      OMWREC.OMWCHGFL = "N";
      OMWREC.OMWOPTN = 1;
      OMWREC.SY1STNBR = " ";
      OMWREC.SY2CLRID = " ";
      OMWREC.XDMCD = " ";
      OMWREC.KUIPRDID = " ";
      OMAREC.OMASUB1 = 1;
      OMWREC.OMWMULSO = "N"; /* multiple suborder flag default*/
      OMWREC.OMWDSORD = 0; /* display select order number*/
      while (OMAREC.OMASUB1 < 21)
        OMWREC.OMWDSSEL[OMASUB1] = " ";
        OMWREC.OMWDSSOR[OMASUB1] = 0;
        OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
      end
    end
    if (OMWREC.OMWCRCKF == "Y") /* if credit check needs doing*/
      OMWREC.OMWCRCKF = "D"; /* mark as done*/
      exit stack; /* go credit check*/
    else
      if (OMWREC.OMWCRCKF == "N") /* if no credit check*/
        OM0MW01.OM0MWCD1 = 0; /* init credit chk msg flag*/
      end
    end
  end
  if (OMWREC.OMWOPTN == " ")
    OMWREC.OMWOPTN = 1;
  end

     /* these are always reset*/

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 11)
    OMWREC.OP1SUBXL[OMASUB1] = 0;
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 901)
    OMWREC.OMWSELCD[OMASUB1] = " ";
    OMWREC.OP2LNINB[OMASUB1] = 0;
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 21)
    OMWREC.OMWDSSEL[OMASUB1] = " ";
    OMWREC.OMWDSSOR[OMASUB1] = 0;
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end
  OMWREC.OMWPCTAL = 0;
  OMWREC.OMWPF2CH = "N";
  OMWREC.OMWPF21 = "N";
  OMWREC.OMWEOF = "N";
  OMWREC.OMWSPCHK = "N";
  OMWREC.OMWSEP1 = ".";
  OMWREC.OMWSORDN = 0;
  OMWREC.OMWLNITX = 0;
  /* MOVE ' ' TO OMWREC.SY1STNBR;*/
  /* MOVE ' ' TO OMWREC.SY2CLRID;*/
  /* MOVE ' ' TO OMWREC.XDMCD;*/
  /* MOVE ' ' TO OMWREC.KUIPRDID;*/
  OMWREC.XUMCD = " ";
  OMWREC.XPGCD = " ";
  OMWREC.XQACD = " ";
  OMWREC.OMWDUPSZ = " ";
  OMWREC.OMWSTDSZ = " ";
  OMWREC.OP2TONOQ = 0;
  OMWREC.OMWRQSZF = 0;
  OMWREC.OMWRQSZL = 0;
  if (OMWREC.OMWMULSO == "N")
    OMWREC.XOMCD = " ";
  end
  OMWREC.OMWCHTAG = "N";
  OMWREC.OMWCHCTF = "N";

  OMWREC.OMWCRCKF = "N"; /* credit check flag*/
  OMWREC.OMWONOQC = 0;
  OMWREC.OMWONOVC = 0;

   /* get the system date and time*/

  set XX0XW01 empty;
  XX0XS01();



       /* save the current date*/

  OMAREC.OMACYMD = VGVar.currentShortGregorianDate;
  if (OMAREC.OMACYY > 56) /* set century based on year*/
    OMAREC.OMACCC = 19;
  else
    OMAREC.OMACCC = 20;
  end


      /* if processing multiple suborders, go to select screen*/

  if (OMWREC.OMWMULSO == "Y")
    exit stack;
  end


          /* move map fields*/

  OM0MM001.VAGen_EZEMSG = " ";
  OM0MM001.OMMRVN = "02"; /* revision number*/
  OM0MM001.OMMDT = VGVar.currentShortGregorianDate;
  OM0MM001.CAUSERID = COMMAREA.CAUSERID; /* user id*/
  if (OM0MW01.OM0MWCD1 == 00) /* if have credit message*/
    /* next sentence*/
  else
    OM0MM001.VAGen_EZEMSG = OM0MW01.OM0MWMSG;
  end

   /* research shows that nothing is ever moved to om0mwmsg*/
   /* (see line of code above)*/
   /* therefore we are using ezemsg to display an*/
   /* informational msg to the csr when we have an*/
   /* abend reading the prepack db in any pgm in the*/
   /* om system. menu services 5/91 tjf*/

  OM0MM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " "; /* reset message area*/

    /* get the first non-0 order number from array*/

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 21)
    if (OMWREC.OP1CUOID[OMASUB1] > 0)
      OMWREC.OMWORDN = OMWREC.OP1CUOID[OMASUB1];
      OMWREC.OMWSORDN = OMWREC.OP1NORID[OMASUB1];
      OMAREC.OMASUB1 = 99;
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end
  OM0MM001.OP1CUOID = OMWREC.OMWORDN; /* cust ord num*/
  OM0MM001.OP1NORID = OMWREC.OMWSORDN; /* nike ord num*/
  OM0MM001.OMWOPTN = OMWREC.OMWOPTN; /* option*/
  OM0MM001.OMWCHGFL = OMWREC.OMWCHGFL; /* change flag*/
  OM0MM001.SY1STNBR = OMWREC.SY1STNBR; /* style number*/
  OM0MM001.SY2CLRID = OMWREC.SY2CLRID; /* color id*/
  OM0MM001.XDMCD = OMWREC.XDMCD; /* dimension code*/
  OM0MM001.KUIPRDID = OMWREC.KUIPRDID; /* cust. product id*/

  if (OM0MW01.OM0MW-OS0Q-FL == "Y")
    OSWWREC.OSWWGRP = COMMAREA.CAUSERA;
    OM0MM001.OP1CUOID = OSWWREC.OP1CUOID;
    OMWREC.OMWORDN = OSWWREC.OP1CUOID;
    OM0MM001.OP1NORID = OSWWREC.OP1NORID;
    OMWREC.OMWSORDN = OSWWREC.OP1NORID;
  end


     /* if no order was found, give message*/

  if (OM0MM001.OP1CUOID == 0)
    if (OM0MW01.OM0MWCD1 == " ") /* only if no credit mesg*/
      converseLib.validationFailed(374); /* mesg-order # required*/
      OMAREC.OMAERR = "Y";
    end
    set OM0MM001.OP1CUOID cursor, modified, bold;
    set OM0MM001.OP1NORID modified, bold;
  else
    set OM0MM001.OP1CUOID initialAttributes;
    set OM0MM001.OP1NORID initialAttributes;
  end



    /* If the last order from OI0C was already displayed*/
    /* then tell the user.*/

  if (OMWREC.OMWLORFL == "Y") /* Last order flag*/
    OMWREC.OMWLORFL = "N";
                                   /* Reset flag so msg does not show again*/
    converseLib.validationFailed(572); /* Last order has been displayed msg.*/
    set OM0MM001.OP1CUOID cursor, modified, bold;
  end



     /* protect change flag if night time inquiry mode*/

  XPOM100();
  if (OSIREC.OSIMODE == "I")
    set OM0MM001.OMWCHGFL protect;
  end


   /* *************************************************************/
                     /* end of process*/
   /* *************************************************************/
end // end OM0M010

// converse and edit options map
Function OM0M020()


      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/



      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OM0MM001 ;
   /* *************************************************************/



      /* clear (reset fields)*/

  OM0MM001.VAGen_EZEMSG = " "; /* clear err msg*/
  OMAREC.OMAERR = "N"; /* clear error flag*/
  COMMAREA.CACURRAP = "OM0M";

      /* check and process valid aid key requests/fast path*/

      /* enter - check fast path, continue processing*/
        /* pf1 - help*/
        /* pf3 - order processing menu*/
        /* pf4 - master menu*/


  if (converseVar.eventKey is enter)
    if (OM0MM001.CATOAP != " ")
      if (OM0MM001.CATOAP == "OM0Y" /* do not allow fastpath to*/
       || OM0MM001.CATOAP == "OM0Z") /* cust xref screens*/
        exit stack;
      else
        COMMAREA.CATOAP = OM0MM001.CATOAP;
        COMMAREA.CAITEM = OM0MM001.CAITEM;
        XSEXIT();
      end
    end
  else
    if (converseVar.eventKey is pf1) /* check for transfer to help*/
      OM0MM001.VAGen_EZEMSG = "HELP FUNCTION NOT AVAILABLE";
      OMAREC.OMAERR = "Y";
      exit stack;
    else
      if (converseVar.eventKey is pf3) /* check for transfer to o/p menu*/
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        COMMAREA.CACURRAP = "OP0M";
        transfer to transaction "OP0M" passing COMMAREA;
      else
        if (converseVar.eventKey is pf4) /* check for transfer to mast menu*/
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
          COMMAREA.CACURRAP = "MN0M";
          transfer to transaction "MN0M" passing COMMAREA;
        else
          converseLib.validationFailed(8);
          OMAREC.OMAERR = "Y"; /* set error flag*/
          exit stack;
        end
      end
    end
  end


     /* edit screen fields top down due to db2 record needs*/

  OM0MS05(); /* user id edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0MS10(); /* order number edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0MS15(); /* option edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0MS20(); /* change flag edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0MS25(); /* nike style edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

  OM0MS30(); /* customer style edit*/
  if (OMAREC.OMAERR == "Y")
    exit stack;
  end

    /* if formatted number matches number in array, clear it*/

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 21)
    if (OMWREC.OP1CUOID[OMASUB1] == OMWREC.OMWORDN /* cust ord num*/
     && OMWREC.OP1NORID[OMASUB1] == OMWREC.OMWSORDN) /* nike ord num*/
      OMWREC.OP1CUOID[OMASUB1] = 0;
      OMWREC.OP1NORID[OMASUB1] = 0;
      OM0MSLO(); /* See if the order is the last one.*/
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end



    /* set up commarea for xfers*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save order header info*/
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OM0MM002.KUMSTRNM = KUMREC.KUMSTRNM;
    OMWREC.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    TA1REC.TA1DBASE = "DCUST"; /* database used*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* view used*/
    TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* record key used*/
    TA1REC.TA1LOCAT[3] = "OM0MS35"; /* statement group used*/
    TA1REC.TA1LOCAT[4] = "IO0340"; /* iomod used*/
    OM0MSXS(); /* error handling stmt group*/
  end

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                                     /* save user comm area*/
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


  if (OMAREC.OMAERR == "N" /* no errors*/
   && OMWREC.OMWMULSO == "N") /* no multiple orders*/
    OM0MS1P(); /* purge temp storage*/
  end


   /* *************************************************************/
end // end OM0M020

// set up suborders for selection
Function OM0M030()
     /* **********************************************************/
     /* * this process initializes program work area and clears **/
     /* * the map areas.                                        **/
     /* **********************************************************/


      /* initialize map*/

  OM0MM002.OMMRVN = "02"; /* revision number*/
  OM0MM002.OMMDT = VGVar.currentShortGregorianDate;
  OM0MM002.VAGen_EZEMSG = " ";
  if (OM0MW01.OM0MWCD1 == 00) /* if order referred to credit*/
    /* NEXT SENTENCE*/
  else
    OM0MM002.VAGen_EZEMSG = OM0MW01.OM0MWMSG; /* show rtc codes*/
  end

   /* research shows that nothing is ever moved to om0mwmsg*/
   /* (see line of code above)*/
   /* therefore we are using ezemsg to display an*/
   /* informational msg to the csr when we have an*/
   /* abend reading the prepack db in any pgm in the*/
   /* the om system. menu services 5/91 tjf*/

  OM0MM002.VAGen_EZEMSG = COMMAREA.CAMSG;

     /* check change flag and set up screen heading*/

  if (OMWREC.OMWCHGFL == "Y")
    OM0MM002.OM0MMODE = "CHANGE";
  else
    OM0MM002.OM0MMODE = "INQUIRY";
  end


  OM0MS1P(); /* purge temp storage*/

     /* clear screen totals*/

  OM0MM002.OM0MMTVL = 0;
  OM0MM002.OM0MMTUN = 0;


     /* get order/suborders and move data to screen*/
     /* (using suborders already set up by style edits)*/

  if (OMWREC.OMWDSSOR[1] > 0) /* already set up*/
    OM0MW01.OM0MWF1P = 1; /* default page number*/
    OM0MW01.OM0MWF1M = 1; /* default max page number*/
    OM0MM002.OM0MMF1P = 1; /* default map page number*/
    OM0MM002.OM0MMF1M = 1; /* default map max page number*/
    OMAREC.OMASUB1 = 1;
    while (OMAREC.OMASUB1 <= 10
     && OMWREC.OMWDSSOR[OMASUB1] > 0)
      set OP1REC empty;
      OMAREC.OMAORDN = OMWREC.OMWDSORD;
      OP1REC.OP1PARTN = OMAREC.OP1PARTN;
      OP1REC.OP1CUOID = OMWREC.OMWDSORD;
      OP1REC.OP1NORID = OMWREC.OMWDSSOR[OMASUB1];
      OM0MW01.OM0MWPAR = OP1REC.OP1PARTN;
      OM0MW01.OM0MWCOI = OP1REC.OP1CUOID;
      OM0MW01.OM0MWNOI = OP1REC.OP1NORID;
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XOSCD != "IP")
          OM0MS35(); /* format data and move to screen*/
          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
        end
      else
        TA1REC.TA1MAP = "OM0MM001";
        TA1REC.TA1PGMNM = "OM0M";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = COMMAREA.CAFROMAP;
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
        TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0M030"; /* process used*/
        TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
        OM0MSXS(); /* error handling stmt group*/
      end
    end
    OMAREC.OMASUB1 = 1; /* init sub*/
    while (OMAREC.OMASUB1 <= 10) /* while processing 1 page*/
      if (OM0MM002.OP1NORID[OMASUB1] == 0)
        set OM0MM002.OM0MMSEL[OMASUB1] skip, invisible;
      else
        set OM0MM002.OM0MMSEL[OMASUB1] initialAttributes;
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1; /* increment sub by +1*/
    end
  end


    /* get order/suborders and move data to screen*/
    /* (using select set and reading through to end)*/

  /* ---IF OMWREC.OMWDSSOR(1) EQ 0;       /* already set up*/
  set OP1REC empty;
  OMAREC.OMAORDN = OMWREC.OMWDSORD;
  OP1REC.OP1PARTN = OMAREC.OP1PARTN;
  OP1REC.OP1CUOID = OMWREC.OMWDSORD;
  OP1REC.OP1NORID = 0;


  OM0MW01.OM0MWEOF = "N"; /* set eof flag off*/
  OM0MW01.OM0MW-NIKE-ORD-ID = " ";
  OM0MW01.OM0MW-TEMP-STORAGE-COUNTER = 0;

  OM0MSS0(); /* select all orders to load into temp storage*/

  OM0MSN0(); /* select next(first) order*/

       /* walk through all orders and load temp storage*/

  while (OM0MW01.OM0MWEOF == "N") /* while more orders exist*/
    OM0MSL0(); /* load temp storage*/
  end

  OM0MSC0(); /* close select cursor*/

  OM0MW01.OM0MWF1P = 1; /* default to page 1*/

  OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* format map page number*/

  OM0MM002.OM0MMF1M = OM0MW01.OM0MWF1M; /* format max map page number*/

  if (OM0MW01.OM0MW-TEMP-STORAGE-COUNTER > 0)
    OM0MSR0(); /* read temp storage to load the map*/
  else
    converseLib.validationFailed(212); /* no suborder for  this order was found*/
    return;
  end
  /* ---END;*/


   /* *************************************************************/
                      /* end of process*/
   /* *************************************************************/
end // end OM0M030

// converse and edit selections
Function OM0M040()
      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/




      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/


     /* if coming from cancellation or cancellation help*/
     /* do appropriate processing*/

  if (COMMAREA.CAFROMAP == "OM0G")
    converseLib.validationFailed(400);
    OM0MM002.OM0MMXLT = "CANCEL REASON:";
    set OM0MM002.OM0MMXLT protect, bold;
    set OM0MM002.XOMCD cursor, normal;
    OM0MM002.OM0MMREL = "REENTER?:";
    set OM0MM002.OM0MMREL protect, bold;
    set OM0MM002.OM0MMREF normal;
    OM0MM002.OM0MMRSN = "1:CHGRSN";
    set OM0MM002.OM0MMRSN protect, bold;
    COMMAREA.CAFROMAP = " ";
  end

  if (COMMAREA.CAFROMAP == "OM0R"
   && OM0MW01.OM0MW911 == "N")
    VAGen_EZEMSG = "CANCEL COMPLETE";
    set OM0MM002.OM0MMXLT initialAttributes;
    set OM0MM002.XOMCD initialAttributes;
    set OM0MM002.OM0MMREL initialAttributes;
    set OM0MM002.OM0MMREF initialAttributes;
    set OM0MM002.OM0MMRSN initialAttributes;
    OM0MM002.XOMCD = " ";
    OM0MM002.OM0MMREF = " ";
    COMMAREA.CAFROMAP = " ";
  end


   /* *************************************************************/
  converse OM0MM002 ;
   /* *************************************************************/



      /* clear (reset fields)*/

  OM0MM002.VAGen_EZEMSG = " "; /* clear err msg*/
  OMAREC.OMAERR = "N"; /* clear error flag*/
  COMMAREA.CACURRAP = "OM0M"; /* reset current application*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf1 - help*/
        /* pf3 - order/suborder selection*/
        /* pf4 - master menu*/
        /* pf7 - page forward*/
        /* pf8 - page backward*/
       /* pf24 - order/sub-order cancel*/


  if (OM0MW01.OM0MW911 == "Y") /* -911 from prepack*/
    OM0MS02();
    if (OMAREC.OMAERR == "Y")
      exit stack;
    end
  end

  if (converseVar.eventKey is enter)
    if (OM0MM002.CATOAP != " ")
      if (OM0MM002.CATOAP == "OM0Y" /* do not allow fastpath to*/
       || OM0MM002.CATOAP == "OM0Z") /* cust xref screens*/
        exit stack;
      else
        OM0MS1P(); /* purge temp storage*/
        COMMAREA.CATOAP = OM0MM002.CATOAP;
        COMMAREA.CAITEM = OM0MM002.CAITEM;
        XSEXIT();
      end
    end
  else
    if (converseVar.eventKey is pf1) /* transfer to cancel help*/
      OM0MS1P(); /* purge temp storage*/
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OM0G";
      transfer to program "OM0G" passing COMMAREA;
    else
      if (converseVar.eventKey is pf3) /* check for transfer to o/m menu*/
        OM0MS1P(); /* purge temp storage*/
        OMWREC.OMWMULSO = "N"; /* reset flag*/
        OMWREC.OMWDSORD = 0; /* reset display select order number*/
        OMAREC.OMASUB1 = 1;
        while (OMAREC.OMASUB1 < 21)
          OMWREC.OMWDSSEL[OMASUB1] = " ";
          OMWREC.OMWDSSOR[OMASUB1] = 0;
          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
        end
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      else
        if (converseVar.eventKey is pf4) /* check for transfer to mast menu*/
          OM0MS1P(); /* purge temp storage*/
          OMWREC.OMWMULSO = "N"; /* reset flag*/
          OMWREC.OMWDSORD = 0; /* reset display select order number*/
          OMAREC.OMASUB1 = 1;
          while (OMAREC.OMASUB1 < 21)
            OMWREC.OMWDSSEL[OMASUB1] = " ";
            OMWREC.OMWDSSOR[OMASUB1] = 0;
            OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
          end
          COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
          COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
          COMMAREA.CACURRAP = "MN0M";
          transfer to transaction "MN0M" passing COMMAREA;
        else
          if (converseVar.eventKey is pf7) /* page backward*/
            OM0MS70(); /* edit page backward*/
            if (OMAREC.OMAERR == "N")
              OM0MSR0(); /* read/load temp storage for map*/
            end
            exit stack;
          else
            if (converseVar.eventKey is pf8) /* page forward*/
              OM0MS70(); /* edit page forward*/
              if (OMAREC.OMAERR == "N")
                OM0MSR0(); /* read/load temp storage for map*/
              end
              exit stack;
            else
              if (converseVar.eventKey is pf23) /* ocd comment  joldin*/
                if (OM0MM002.XOMCD == " ")
                  OMAREC.OMAERR = "Y";
                  converseLib.validationFailed(941); /* need change reason first*/
                  if (OMWREC.OMWCHGFL == "Y") /* slarse*/
                    set OM0MM002.XOMCD cursor;
                  end
                  return;
                else
                  OM0MS-OCD-CMT();
                end
              else
                if (converseVar.eventKey is pf24) /* cancel order/suborders*/
                  /* added for rebooking 10/88 tjf*/
                  if (OP1REC.XBDCD == "R") /* if rebook bulk*/
                    converseLib.validationFailed(392); /* can not maintenance*/
                    OMAREC.OMAERR = "Y";
                    set OM0MM002.OM0MMSEL[1] cursor;
                    return;
                  end

                else
                  converseLib.validationFailed(8);
                  OMAREC.OMAERR = "Y"; /* set error flag*/
                  exit stack;
                end
              end
            end
          end
        end
      end
    end
  end


     /* edit selection fields, bottoms up!*/

  OMAREC.OMASUB1 = 10; /* used for screen line subscript*/
  OMAREC.OMASUB2 = 0; /* used to count selected suborders*/
  while (OMAREC.OMASUB1 > 0)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1; /* increment select counter*/
      set OM0MM002.OM0MMSEL[OMASUB1] initialAttributes;
    else
      if (OM0MM002.OM0MMSEL[OMASUB1] == " "
       && OM0MM002.OP1NORID[OMASUB1] > 0)
        set OM0MM002.OM0MMSEL[OMASUB1] initialAttributes;
      else
        if (OM0MM002.OM0MMSEL[OMASUB1] == " "
         && OM0MM002.OP1NORID[OMASUB1] == 0)
          set OM0MM002.OM0MMSEL[OMASUB1] protect, invisible;
        else
          set OM0MM002.OM0MMSEL[OMASUB1] cursor, modified, bold;
          converseLib.validationFailed(7);
          OMAREC.OMAERR = "Y";
        end
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
  end


  if (OM0MM002.OM0MMF1P != OM0MW01.OM0MWF1P) /* if page number changed*/
    OM0MS75(); /* edit map page field*/
  end


     /* if select errors, no need to continue*/

  if (OMAREC.OMAERR == "Y")
    exit stack;
  end


     /* check number of orders selected*/

  if (OMAREC.OMASUB2 == 1) /* one selected*/
    /* next sentence;*/
  else
    if (OMAREC.OMASUB2 > 1) /* more than one selected*/
      converseLib.validationFailed(356); /* only one can be selected*/
      OMAREC.OMAERR = "Y";
      set OM0MM002.OM0MMSEL[1] cursor;
      exit stack;
    else
      if (converseVar.eventKey is pf24)
        converseLib.validationFailed(371); /* no suborders selected for cancel*/
        OMAREC.OMAERR = "Y";
        set OM0MM002.OM0MMSEL[1] cursor;
        exit stack;
      else
        OMWREC.OMWMULSO = "N"; /* reset flag*/
        OMWREC.OMWDSORD = 0; /* reset display select order number*/
        OMAREC.OMASUB1 = 1;
        while (OMAREC.OMASUB1 < 21)
          OMWREC.OMWDSSEL[OMASUB1] = " ";
          OMWREC.OMWDSSOR[OMASUB1] = 0;
          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
        end
        COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                   /* save user comm area*/
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end


     /* check change allowed flag for selected suborders*/

  if (OMWREC.OMWCHGFL == "Y")
    OMAREC.OMASUB1 = 10; /* bottoms up!*/
    while (OMAREC.OMASUB1 > 0)
      if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
        if (OM0MM002.XOSCD[OMASUB1] in XOSTBL.XOSCD
         && XOSTBL.XOSALWCH[sysVar.arrayIndex] != "N")
          /* next sentence*/
        else
          converseLib.validationFailed(368); /* order status does not allow change*/
          OMAREC.OMAERR = "Y";
          set OM0MM002.OM0MMSEL[OMASUB1] cursor, modified, bold;
        end
      end
      OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
    end
  end

     /* check for international airborne order.  if order class is*/
     /* 'tr' (transmitted order), default 'au' order class for cancel.*/

  OMAREC.OMASUB1 = 10; /* bottoms up!*/
  while (OMAREC.OMASUB1 > 0)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      if (OP1REC.XDVCD == "02") /* international*/
        if (OP1REC.XOCCD == "TR") /* order class code*/
          if (converseVar.eventKey is pf24)
            OP1REC.XOCCD = "AU";
            OM0MS-UPDT-ORD-HDR();
            OM0MS-ADD-VSOHCR01();
          end
        end
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
  end

     /* check change allowed for airborne suborders*/

  OMAREC.OMASUB1 = 10; /* bottoms up!*/
  while (OMAREC.OMASUB1 > 0)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      XS0MW01.XS0MWDIV = OP1REC.XDVCD; /* build pass record*/
      XS0MW01.XS0MWORT = OM0MW02.XOTCD[OMASUB1];
      XS0MW01.XS0MWDIR = OM0MW02.XDSCD[OMASUB1];
      XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
      XS0MW01.XS0MWGPC = OP1REC.XGPCD;

      OSAREC.OSADATE = OM0MW02.OM0MMNDT[OMASUB1]; /* convert date*/
      XPOP100(); /* for compare*/
      XS0MW01.XS0MWNDT = OSAREC.OSANU8;

      VOPPGM01.XXX-PGM-NBR = "OP1920";
      call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
          /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER"; /* database*/
        TA1REC.TA1TBLVU = "VOPPGM01";
        TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
        TA1REC.TA1LOCAT[2] = "IO6600"; /* iomod*/
        TA1REC.TA1LOCAT[3] = "OM0M040"; /* statement group*/
        TA1REC.TA1TBLKE = "OP1920"; /* clear table key*/
        OM0MSXS(); /* general abend routine*/
      end

      XS0MS-CHK-AIRBORNE();
      if (XS0MW01.XS0MWABF == "Y") /* transmitted airborne order?*/
        if (converseVar.eventKey is pf24)
          converseLib.validationFailed(789); /* cancellations not allowed*/
          OMAREC.OMAERR = "Y";
        end
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
  end


     /* get first selected order header*/


  OMAREC.OMASUB1 = 1; /* used for screen line subscript*/
  while (OMAREC.OMASUB1 < 11)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      set OP1REC empty;
      OMAREC.OMAORDN = OM0MM002.OP1CUOID;
      OP1REC.OP1PARTN = OMAREC.OP1PARTN;
      OP1REC.OP1CUOID = OM0MM002.OP1CUOID;
      /* MOVE OM0MM002.OP1NORID(OMASUB1) TO OP1REC.OP1NORID;*/
      OP1REC.OP1NORID = OM0MW02.OP1NORID[OMASUB1];
      OM0MW01.OM0MWPAR = OP1REC.OP1PARTN;
      OM0MW01.OM0MWCOI = OP1REC.OP1CUOID;
      OM0MW01.OM0MWNOI = OP1REC.OP1NORID;
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* update omwrec*/
        OMWREC.OMWORDN = OM0MM002.OP1CUOID; /* format order number*/
        OMWREC.OMWSEP1 = ".";
        OMWREC.OMWSORDN = OM0MM002.OP1NORID[OMASUB1];
        set OM0MM002.OM0MMSEL[OMASUB1] cursor; /* position cursor*/
        OMAREC.OMASUB1 = 99;
        KUMREC.KUCCOID = OP1REC.KUCCOID;
        KUMREC.KUMSTRID = OP1REC.KUMSTRID;
        call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          OMWREC.KUMSTRNM = KUMREC.KUMSTRNM;
        else
          TA1REC.TA1DBASE = "DCUST"; /* database used*/
          TA1REC.TA1TBLVU = "VSTORE01"; /* view used*/
          TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* record key used*/
          TA1REC.TA1LOCAT[3] = "OM0M040"; /* statement group used*/
          TA1REC.TA1LOCAT[4] = "IO0340"; /* iomod used*/
          OM0MSXS(); /* error handling stmt group*/
        end
      else
        TA1REC.TA1MAP = "OM0MM002";
        TA1REC.TA1PGMNM = "OM0M";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = COMMAREA.CAFROMAP;
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
        TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0M040"; /* process used*/
        TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1; /* screen line subscript*/
  end


     /* if cancellation, edit and set up cancel array*/

  if (converseVar.eventKey is pf24)
    OM0MS40();
  end


     /* if edit errors on cancel, no need to continue*/

  if (OMAREC.OMAERR == "Y")
    exit stack;
  end


  if (OP1REC.XDVCD == "02" /* international*/
   && OP1REC.XOCCD == "AU") /* order class code*/
    if (converseVar.eventKey is pf24)
      converseLib.validationFailed(806); /* order class chgd to 'au'*/
    end
  end


     /* if cancellation, call om0r*/

  if (converseVar.eventKey is pf24)
    set OMEREC empty; /* initialize omerec return code*/
    call "OM0R" (OMWREC, OMEREC) {isNoRefresh = yes};
    if (OMEREC.OME-RETURN-CD != "00") /* check om0r return code*/
      OM0MS1P(); /* purge temp storage*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    else
      OM0MS-ADD-VSOHCR01();
    end
    COMMAREA.CAFROMAP = "OM0R";
    set OM0MM002.OM0MMXLT initialAttributes;
    set OM0MM002.XOMCD initialAttributes;
    set OM0MM002.OM0MMREL initialAttributes;
    set OM0MM002.OM0MMREF initialAttributes;
    set OM0MM002.OM0MMRSN initialAttributes;
    if (OP1REC.XGPCD == "03"
     || OP1REC.XGPCD == "02")
      OM0MS02(); /* delete prepacks*/
    end
    exit stack;
  end


     /* if not an add and styles were entered,*/
     /* build the line item array (using the selected suborder)*/

  if (OMWREC.OMWOPTN != 6
   && OMWREC.SY1STNBR > " ")
    OM0MS45();
  end


    /* if formatted number matches number in array, clear it*/

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 < 21)
    if (OMWREC.OP1CUOID[OMASUB1] == OMWREC.OMWORDN /* cust ord num*/
     && OMWREC.OP1NORID[OMASUB1] == OMWREC.OMWSORDN) /* nike ord num*/
      OMWREC.OP1CUOID[OMASUB1] = 0;
      OMWREC.OP1NORID[OMASUB1] = 0;
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end

   /* check prepacks so that the exists*/
   /* flag will be correct when transfering*/
   /* to os0g*/
  if (OMWREC.OMWOPTN == 13)
    OM0MS01();
    if (OMAREC.OMAERR == "Y") /* -911 from prepack*/
      return;
    end
  end

     /* set up commarea for xfers*/

  OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* save order header info*/
  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                   /* save user comm area*/
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;


  if (OMAREC.OMAERR == "N") /* no errors*/
    OM0MS1P(); /* purge temp storage*/
  end

   /* *************************************************************/
                        /* end of process                       **/
   /* *************************************************************/
end // end OM0M040

// credit check, converse bad i/o
Function OM0M050()



      /* ************************************/
      /* * when a futures order type has*/
      /* * previously been credit checked*/
      /* * and then the quantity is changed*/
      /* * re-do the credit check here*/
      /* ************************************/


  OP1REC.OP1GROUP = OMWREC.OP1GROUP; /* look at last order*/
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get curnt ord hdr vals*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OM0MS50";
    TA1REC.TA1LOCAT[4] = "IO0430";
    OM0MSXS(); /* abort*/
  end

  OM0MW01.OM0MWCD1 = OP1REC.XCHCD[1]; /* hold old codes*/
  OM0MW01.OM0MWCD2 = OP1REC.XCHCD[2];
  OM0MW01.OM0MWCD3 = OP1REC.XCHCD[3];



       /* ********************************************************/
       /* * this statement group calls cc1070 sub program to    **/
       /* * credit check the changed futures order              **/
       /* ********************************************************/

  CC1REC.CC1PVALU = OMWREC.OMWONOVC;
  CC1REC.CC1PUNTS = OMWREC.OMWONOQC;
  CC1REC.CC1PGMNM = "OM0M  ";
  CC1REC.CC1RTNCD = 0;
  CC1REC.CC1RTNMS = " ";

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

      /* check the return code -- if the cc1rtncd code is not*/
      /* equal zero (ie, is bad), abort application*/

  if (CC1REC.CC1RTNCD == 0) /* good return code*/
    OM0MS60(); /* check rtc codes to build mesg*/
    exit stack; /* return to start of om0m*/
  end


      /* bad return code, therefore show message & abort*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  OM0MM001.VAGen_EZEMSG = CC1REC.CC1RTNMA;
  OM0MM001.OMMDT = VGVar.currentShortGregorianDate;


  converse OM0MM001 ;


  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "CC1070";
  TA1REC.TA1TBLKE = OP1REC.OP1KEY;
  TA1REC.TA1LOCAT[3] = "OM0M050";
  TA1REC.TA1LOCAT[4] = "CC1070";
  OM0MSXS(); /* abort*/



   /* ****************************************************/
end // end OM0M050

// customer prepacks
Function OM0M060()

             /* **************************************************/
             /* *   This process will determine if customer*/
             /* *   prepacks exist for the selected order.  If*/
             /* *   prepacks exist, dxfer to 'OS0G'.*/
             /* **/
             /* **************************************************/


     /* check for customer prepacks*/

  OM0MS01(); /* customer prepacks*/

  if (OMAREC.OMAERR == "Y") /* error exists*/
    exit stack;
  end

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
                                                     /* save user comm area*/
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OSOG";
  transfer to program "OS0G" passing COMMAREA; /* customer prepacks*/


end // end OM0M060

// DELETE/INSERT OB1REC
Function OM0MS-ADD-VSOHCR01()

   /* BUILD OCD ORDER CHANGE REASON FROM DORDER ORDER HEADER*/

  OM0MS-MAX-VSOHCR01();

  set VSOHCR01 empty;

  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.XOMCD = OM0MM002.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = OM0MW01.OM0MW-MAX-SEQ;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.SOCD-GLBL-MNTN-FL = "N";
  VSOHCR01.SOCD-HDR-RSN-TXT = XP0QW00.XP0QW-RSN-TEXT;
  VSOHCR01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOHCR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZSTM = XX0XW01.XX0XWTIM;
  VSOHCR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSOHCR01.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ADD RECORD TO VSOHCR01*/

  call "VSOHCR01" ("A ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};

end // end OM0MS-ADD-VSOHCR01

// edit customer style
Function OM0MS-CALL-CU1710()

    /* validate customer style with call to CU1710*/

  set WCU1710 empty;

  WCU1710.WCU1710-INQUIRY-OPTION = 2; /* xref info w/ovrds*/
  WCU1710-IN-CU-CO-ID = OP1REC.KUCCOID;
  WCU1710-XNX-DEPT-ID-XREF = OP1REC.XNXCD;
  WCU1710-CU-PROD-XREF-EDT = OP1REC.OP1CUNDT;
  WCU1710-IN-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WCU1710-IN-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WCU1710-IN-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WCU1710-IN-OP-LINE-ITEM-NBR = OP2REC.OP2LNINB;

  WCU1710.WCU1710-IN-CU-CUST-PROD-ID = OM0MM001.KUIPRDID;
  WCU1710.WCU1710-IN-CU-PROD-SZ-ID = " ";

  WCU1710-RETURN-CODE = 99;

   /* get all the xref info for the item or size*/


  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/


   /* check WCU1710 return code*/

  if (WCU1710.WCU1710-RETURN-CODE == 0 /* check for good return code*/
   || WCU1710.WCU1710-RETURN-CODE == 1) /* check for not found*/
    return;
  else
    TA1REC.TA1LOCAT[1] = "CU1710  "; /* i/o mod name*/
    TA1REC.TA1LOCAT[2] = "OM0MS-CA"; /* statement group*/
    TA1REC.TA1LOCAT[3] = "LL-CU171"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "0       "; /* statement group*/
    TAEREC.TAEDESC1 = "BAD RETURN FROM CU1710 - RETURN CODE=";
    TAEREC.TAEDESC2 = WCU1710.WCU1710-RETURN-CODE;
    TA1REC.TA1TYPE = "APPL"; /* abend type*/
    TA1REC.TA1FUNC = "RETN"; /* abend func*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
  end


end // end OM0MS-CALL-CU1710

// GET MAX SOCD-HRR-RSN-SEQ
Function OM0MS-MAX-VSOHCR01()

   /* BUILD KEY TO READ VSOHCR01*/

  set VSOHCR01 empty;

  VSOHCR01.OP1PARTN = OP1REC.OP1PARTN;
  VSOHCR01.OP1CUOID = OP1REC.OP1CUOID;
  VSOHCR01.OP1NORID = OP1REC.OP1NORID;
  VSOHCR01.SOCD-APPL-SRC-CD = "OP";
  VSOHCR01.XOMCD = OM0MM002.XOMCD;
  VSOHCR01.SOCD-HDR-RSN-SEQ = 1;

   /* / DO A SEQLECT UNIQUE TO SEE IF THE ROW EXISTS*/

  call "VSOHCR01" ("S ", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    OM0MW01.OM0MW-MAX-SEQ = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "VSOHCR01" ("SM", SQLCA, VSOHCR01) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
        OM0MW01.OM0MW-MAX-SEQ = VSOHCR01.SOCD-HDR-RSN-SEQ + 1;
      end
    end
  end

end // end OM0MS-MAX-VSOHCR01

// OCD COMMENT WINDOW
Function OM0MS-OCD-CMT()
   /* THIS STMT GROUP DISPLAYS A POP-UP WINDOW*/
   /* FOR THE USER TO ENTER THE OCD COMMENT*/

  XP0QW00.XP0QW-XOMCD = OM0MM002.XOMCD;

  XP0Q001(); /* pop-up window initialize*/

  converseLib.clearScreen();
   /* restore the original map*/

  OMAREC.OMAERR = "Y";
  converseLib.validationFailed(400);

  exit stack; /* display map*/


end // end OM0MS-OCD-CMT

// update order header
Function OM0MS-UPDT-ORD-HDR()

  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* write new ord hdr values*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    OM0MW01.OM0MWPAR = OP1REC.OP1PARTN;
    OM0MW01.OM0MWCOI = OP1REC.OP1CUOID;
    OM0MW01.OM0MWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OM0MW01.OM0MWDON;
    TA1REC.TA1LOCAT[1] = "OM0MS-UP";
    TA1REC.TA1LOCAT[2] = "DT-ORD-H";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "IO0430  ";
    OM0MSXS(); /* abort*/
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* *********************************************************/
end // end OM0MS-UPDT-ORD-HDR

// CHECK FOR PREPACK
Function OM0MS01()

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* CUST WANTS PREPACK*/
           /* NEXT SENTENCE   SEE IF ORDER IS ON DBASE*/
      else
        converseLib.validationFailed(664); /* pack code invalid for prepack*/
        OMAREC.OMAERR = "Y";
        set OM0MM001.OP1CUOID cursor, modified, bold;
        set OM0MM001.OP1NORID modified, bold;
        return;
      end
    else
      converseLib.validationFailed(647); /* pack code invalid*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.OP1CUOID cursor, modified, bold;
      set OM0MM001.OP1NORID modified, bold;
      return;
    end
  else
    converseLib.validationFailed(665); /* gpc not valid for prepacks*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.OP1CUOID cursor, modified, bold;
    set OM0MM001.OP1NORID modified, bold;
    return;
  end

   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("SE", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == -811) /* multi records found*/
    OMWREC.OMWPPEXF = "Y"; /* prepack exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        OMWREC.OMWPKCHF = "Y"; /* reseet pack change flag*/
        OMAREC.OMAERR = "Y";
        converseLib.validationFailed(672); /* prepack db busy try again*/
        return;
      else
        OMAREC.OMAERR = "Y";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OM0M    ";
        TA1REC.TA1LOCAT[1] = "SE      ";
        TA1REC.TA1LOCAT[2] = "OM0MS01 ";
        TA1REC.TA1LOCAT[3] = "IO5650  ";
        TA1REC.TA1DBASE = "DORDER  ";
        TA1REC.TA1TBLVU = "VCSPRP01";
        OM0MW01.OM0MWDON = " ";
        OM0MW01.OM0MWPAR = OP1REC.OP1PARTN;
        OM0MW01.OM0MWCOI = OP1REC.OP1CUOID;
        OM0MW01.OM0MWNOI = OP1REC.OP1NORID;
        TA1REC.TA1TBLKE = OM0MW01.OM0MWDON;
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CAMSGA = "PREPACK DB PROBLEMS";
        COMMAREA.CAMSGB = "ORDER MAY HAVE PREPACK CALL USER ANALYST";
        COMMAREA.CACURRAP = "OM0M";
        transfer to program "OM0M" passing COMMAREA;
      end
    end
  end


   /* ********************end statement group********************/
end // end OM0MS01

// DELETE PREPACK RECORDS
Function OM0MS02()

   /* THIS STATEMENT GROUP will delete all prepack records*/
   /* when the order is cancelled.*/

  if (OP1REC.XGPCD == "03" /* APPAREL ORDER*/
   || OP1REC.XGPCD == "02") /* footwear order*/
    if (OP1REC.XPACD in XPATBL.XPACD /* IF VALID PACK CODE*/
     && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* NEXT SENTENCE*/
    else
      return;
    end
  else
    return;
  end


   /* BUILD THE KEY TO SPECIFIED PREPACK TABLE*/

  set OSNREC empty;
  set SQLCA empty;
  OM0MW01.OM0MW911 = "N";

  OSNREC.XWHCD = OP1REC.XWHCD; /* WAREHOUSE*/
  OSNREC.OP1PARTN = OP1REC.OP1PARTN; /* PART CHAR*/
  OSNREC.OP1CUOID = OP1REC.OP1CUOID; /* ORDER NUM*/
  OSNREC.OP1NORID = OP1REC.OP1NORID; /* NIKE ORD ID*/

  call "IO5650" ("DS", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(669);
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(696); /* order cancelled prepack busy pf24 again*/
      OMAREC.OMAERR = "Y";
      OM0MW01.OM0MW911 = "Y";
      return;
    else
      set TA1REC empty;
      set ERRSQLCA empty;
      TA1REC.TA1TYPE = "DB2     ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOCAT[1] = "DS      ";
      TA1REC.TA1LOCAT[2] = "OM0MS02 ";
      TA1REC.TA1LOCAT[3] = "IO5650  ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VCSPRP01";
      OM0MW01.OM0MWDON = " ";
      OM0MW01.OM0MWPAR = OP1REC.OP1PARTN;
      OM0MW01.OM0MWCOI = OP1REC.OP1CUOID;
      OM0MW01.OM0MWNOI = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OM0MW01.OM0MWDON;
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      XSPF4();
    end
  end
   /* GET OM0MS01*/

   /* THIS STATEMENT GROUP CHECKS THE PREPACK DATABASE*/
   /* TO SEE IF THE ORDER EXISTS*/

  OMWREC.OMWPKCHF = "N"; /* pack change flag*/
  OMWREC.OMWPPEXF = "N"; /* prepack exists flag*/
  sysVar.arrayIndex = 1;

   /* ********************end statement group********************/
end // end OM0MS02

// user id edit
Function OM0MS05()
   /* ********************start statement group********************/






  set KUYREC empty;
  KUYREC.XXXUSRID = OM0MM001.CAUSERID;
   /* wipro changes begin TT#7193*/
   /* commented to avoid override  of userid*/
   /* MOVE OM0MM001.CAUSERID TO COMMAREA.CAUSERID;*/
   /* wipro changes end   TT#7193*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   && KUYREC.XXXSTAT == "A")
    OMWREC.OP1MTREP = KUYREC.KUYSVRID; /* update omwrec*/
    set OM0MM001.CAUSERID initialAttributes;
  else
    if (OM0MM001.OMWCHGFL == "N")
      set OM0MM001.CAUSERID initialAttributes;
      return;
    else
      converseLib.validationFailed(350); /* id not authorized...*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.CAUSERID cursor, modified, bold;
      return;
    end
  end



   /* ********************end statement group********************/
end // end OM0MS05

// order number edits
Function OM0MS10()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* edit order number*/
   /* *************************************************************/



  if (OM0MM001.OP1CUOID == 0)
    converseLib.validationFailed(374);
    OMAREC.OMAERR = "Y";
    set OM0MM001.OP1CUOID cursor, modified, bold;
    set OM0MM001.OP1NORID modified, bold;
    return;
  else
    set OM0MM001.OP1CUOID initialAttributes;
    set OM0MM001.OP1NORID initialAttributes;
  end


    /* when order number changes, xomcd is reset*/

  if (OM0MM001.OP1CUOID is modified)
    OMWREC.XOMCD = " ";
  end


    /* save order number*/

  OMWREC.OMWDSORD = OM0MM001.OP1CUOID; /* for redisplay*/


    /* get order header*/

  if (OM0MM001.OP1NORID > 0)
    set OP1REC empty;
    OMAREC.OMAORDN = OM0MM001.OP1CUOID;
    OP1REC.OP1PARTN = OMAREC.OP1PARTN;
    OP1REC.OP1CUOID = OM0MM001.OP1CUOID;
    OP1REC.OP1NORID = OM0MM001.OP1NORID;
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XOSCD != "IP")
        OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* update omwrec*/
        OMWREC.OMWORDN = OP1REC.OP1CUOID; /* format order number*/
        OMWREC.OMWSEP1 = ".";
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        OMWREC.OMWMULSO = "N";
        set OM0MM001.OP1CUOID initialAttributes;
        set OM0MM001.OP1NORID initialAttributes;
        return;
      else
        converseLib.validationFailed(32);
        OMAREC.OMAERR = "Y";
        set OM0MM001.OP1CUOID cursor, modified, bold;
        set OM0MM001.OP1NORID modified, bold;
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(32);
        OMAREC.OMAERR = "Y";
        set OM0MM001.OP1CUOID cursor, modified, bold;
        set OM0MM001.OP1NORID modified, bold;
        return;
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
        TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS10"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
        OM0MSXS(); /* error handling stmt group*/
      end
    end
  end

  if (OM0MM001.OP1NORID == 0)
    set OP1REC empty;
    OMAREC.OMAORDN = OM0MM001.OP1CUOID;
    OP1REC.OP1PARTN = OMAREC.OP1PARTN;
    OP1REC.OP1CUOID = OM0MM001.OP1CUOID;
    OP1REC.OP1NORID = 0;
    call "IO0430" ("ST", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.XOSCD != "IP")
        OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* update omwrec*/
        OMWREC.OMWORDN = OP1REC.OP1CUOID; /* format order number*/
        OMWREC.OMWSEP1 = ".";
        OMWREC.OMWSORDN = OP1REC.OP1NORID;
        OMWREC.OMWMULSO = "N";
        set OM0MM001.OP1CUOID initialAttributes;
        set OM0MM001.OP1NORID initialAttributes;
        return;
      else
        converseLib.validationFailed(32);
        OMAREC.OMAERR = "Y";
        set OM0MM001.OP1CUOID cursor, modified, bold;
        set OM0MM001.OP1NORID modified, bold;
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(32);
        OMAREC.OMAERR = "Y";
        set OM0MM001.OP1CUOID cursor, modified, bold;
        set OM0MM001.OP1NORID modified, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -811)
          OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* update omwrec*/
          OMWREC.OMWORDN = OP1REC.OP1CUOID; /* format order number*/
          OMWREC.OMWSEP1 = ".";
          OMWREC.OMWSORDN = OP1REC.OP1NORID;
          OMWREC.OMWMULSO = "Y"; /* set multiple suborder flag!!!*/
          set OM0MM001.OP1CUOID initialAttributes;
          set OM0MM001.OP1NORID initialAttributes;
          return;
        else
          TA1REC.TA1DBASE = "DORDER"; /* database used*/
          TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
          TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* record key used*/
          TA1REC.TA1LOCAT[3] = "OM0MS10"; /* statement group used*/
          TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
          OM0MSXS(); /* error handling routine*/
        end
      end
    end
  end



   /* ********************end statement group********************/
end // end OM0MS10

// option edit
Function OM0MS15()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* edit option field*/
   /* *************************************************************/


  if (OM0MM001.OMWOPTN >= 1
   && OM0MM001.OMWOPTN <= 13)
    set OM0MM001.OMWOPTN initialAttributes;
    OMWREC.OMWOPTN = OM0MM001.OMWOPTN; /* update omwrec*/
  else
    converseLib.validationFailed(1); /* invalid option*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.OMWOPTN cursor, modified, bold;
    return;
  end


    /* if option 4 and style is blank     - error*/


  if (OM0MM001.OMWOPTN == 4
   && OM0MM001.SY1STNBR == " ") /* udafon #1853*/
    converseLib.validationFailed(456); /* enter style/color*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.SY1STNBR cursor, modified, bold;
    return;
  end

    /* if option 6 and inquire mode only  - error*/

  if (OM0MM001.OMWOPTN == 6)
    XPOM100(); /* check if night time inquire mode*/
    if (OSIREC.OSIMODE == "I") /* inquire only*/
      converseLib.validationFailed(1); /* invalid option*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.OMWOPTN cursor, modified, bold;
      return;
    end
  end


    /* if option 6 and change flag not 'y' - error*/

  if (OM0MM001.OMWOPTN == 6)
    if (OM0MM001.OMWCHGFL == "Y")
      set OM0MM001.OMWCHGFL initialAttributes;
    else
      converseLib.validationFailed(347);
      OMAREC.OMAERR = "Y";
      set OM0MM001.OMWCHGFL cursor, modified, bold;
      return;
    end
  end


  if (OM0MM001.OMWOPTN == 6)
    if (OP1REC.XBDCD == "R")
      converseLib.validationFailed(392);
      OMAREC.OMAERR = "Y";
      set OM0MM001.OMWCHGFL cursor, modified, bold;
      return;
    end
  end


    /* if option 6 and international*/
    /* and order class = 'tr' (transmitted airborne order)*/
    /* don't allow add product.*/
    /* (just fyi: CSR must change order class to 'au' to make*/
    /* any changes to a 'tr' order.)*/

  if (OM0MM001.OMWOPTN == 6)
    if (OP1REC.XDVCD == "02"
     && OP1REC.XOCCD == "TR")
      converseLib.validationFailed(802); /* order class 'tr' prevents*/
      OMAREC.OMAERR = "Y"; /* addition of product*/
      set OM0MM001.OMWCHGFL cursor, modified, bold;
      return;
    end
  end

  if (OM0MM001.OMWOPTN is modified) /* Udafon*/
    OMWREC.OMWOPTN = OM0MM001.OMWOPTN;
  end
   /* ********************end statement group********************/
end // end OM0MS15

// purge temp storage 1 - orders
Function OM0MS1P()



   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "OM0M"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OM0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OM0MW01.OM0MWF1P = 1;
    OM0MW01.OM0MWF1M = 1;
    OMAREC.OMASUB1 = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRG OP0N";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM PURGING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OMAREC.OMAERR = "Y"; /* set error message on*/

  end
end // end OM0MS1P

// read temp storage 1 - orders
Function OM0MS1R()



   /* read temporary storage 1*/

  set OM0MW02 empty;

  TA5REC.TA5APPID = "OM0M"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OM0MW01.OM0MWF1P; /* current page*/
  OM0MW02.OM0MWLEN = 504; /* length of record*/

  call "TA0050" (OM0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READOM0M";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OM0MW01.OM0MWPAR = OP1REC.OP1PARTN; /* display part char*/
    OM0MW01.OM0MWCOI = OP1REC.OP1CUOID; /* display cust ord id*/
    OM0MW01.OM0MWNOI = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* failure master menu*/
  end
end // end OM0MS1R

// write temp storage 1 -orders
Function OM0MS1W()



   /* write temporary storage 1*/

  TA5REC.TA5APPID = "OM0M"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  OM0MW02.OM0MWLEN = 504; /* length of record*/

  call "TA0050" (OM0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OM0MW01.OM0MWF1M = TA5REC.TA5TSQIX;
  else
    TA1REC.TA1LOCAT[1] = "ADD OM0M";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OM0MW01.OM0MWPAR = OP1REC.OP1PARTN; /* display part char*/
    OM0MW01.OM0MWCOI = OP1REC.OP1CUOID; /* display cust ord id*/
    OM0MW01.OM0MWNOI = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM WRITING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/

  end
end // end OM0MS1W

// change flag edit
Function OM0MS20()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* edit change field*/
   /* *************************************************************/


    /* check if night time inquire mode*/

  XPOM100();
  if (OSIREC.OSIMODE == "I")
    OM0MM001.OMWCHGFL = "N";
    set OM0MM001.OMWCHGFL protect;
    return;
  end



  if (OM0MM001.OMWCHGFL == "Y"
   || OM0MM001.OMWCHGFL == "N")
    set OM0MM001.OMWCHGFL initialAttributes;
    OMWREC.OMWCHGFL = OM0MM001.OMWCHGFL; /* update omwrec!!*/
  else
    converseLib.validationFailed(351); /* correct response is y or n...*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.OMWCHGFL cursor, modified, bold;
    return;
  end

  if (OM0MM001.OMWCHGFL == "Y")
    if (COMMAREA.CACHGFL == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(352); /* id not authorized...*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.OMWCHGFL cursor, modified, bold;
      return;
    end
  end

  if (OMWREC.OMWMULSO == "N")
    if (OM0MM001.OMWCHGFL == "Y")
      if (OP1REC.XOSCD in XOSTBL.XOSCD
       && XOSTBL.XOSALWCH[sysVar.arrayIndex] != "N")
        /* next sentence*/
      else
        converseLib.validationFailed(368); /* order status does not allow change*/
        OMAREC.OMAERR = "Y";
        set OM0MM001.OMWCHGFL cursor, modified, bold;
        return;
      end
    end
  end

  if (OM0MM001.OMWCHGFL == "Y")
    if (OP1REC.XSOCD == COMMAREA.XSOCD)
      /* next sentence*/
    else
      if (COMMAREA.CACHGFL == "Y"
       && COMMAREA.CACLVL[1] == "Y") /* is allocation manager*/
        if (OP1REC.XOSCD == "AL" /* status is 'al'*/
         || OP1REC.XOSCD == "PA") /* status is 'pa'*/
          /* next sentence*/
        else
          converseLib.validationFailed(355); /* id not authorized to change others*/
          OMAREC.OMAERR = "Y";
          set OM0MM001.OMWCHGFL cursor, modified, bold;
          return;
        end
      else
                                   /* not allocation manager*/
        converseLib.validationFailed(355); /* id not authorized to change others*/
        OMAREC.OMAERR = "Y";
        set OM0MM001.OMWCHGFL cursor, modified, bold;
        return;
      end
    end
    /* added for rebooking 10/88 tjf*/
    if (OP1REC.XBDCD == "R")
      converseLib.validationFailed(392);
      OMAREC.OMAERR = "Y";
      set OM0MM001.OMWCHGFL cursor, modified, bold;
      return;
    end
  end



   /* ********************end statement group********************/
end // end OM0MS20

// nike style edit
Function OM0MS25()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* edit the nike style fields*/
   /* *************************************************************/


  set OM0MM001.SY1STNBR initialAttributes;
  set OM0MM001.SY2CLRID initialAttributes;
  set OM0MM001.XDMCD initialAttributes;
  set OM0MM001.KUIPRDID initialAttributes;


     /* if both nike and customer tyle entered - error*/

  if (OM0MM001.KUIPRDID > " ")
    if (OM0MM001.SY1STNBR > " "
     || OM0MM001.SY2CLRID > " "
     || OM0MM001.XDMCD > " ")
      converseLib.validationFailed(349); /* cannot select both nike style &*/
      OMAREC.OMAERR = "Y"; /* customer style -- clear one*/
      set OM0MM001.SY1STNBR cursor, modified, bold;
      set OM0MM001.SY2CLRID modified, bold;
      set OM0MM001.XDMCD modified, bold;
      set OM0MM001.KUIPRDID modified, bold;
      return;
    end
  end


    /* if nike style entered & not needed for requested*/
       /* option - error*/

  if (OM0MM001.SY1STNBR > " "
   || OM0MM001.SY2CLRID > " "
   || OM0MM001.XDMCD > " ")
    if (OM0MM001.OMWOPTN == 2
     || OM0MM001.OMWOPTN == 4
     || OM0MM001.OMWOPTN == 5
     || OM0MM001.OMWOPTN == 6)
       /* next sentence*/
    else
      converseLib.validationFailed(353); /* style is valid for options*/
      OMAREC.OMAERR = "Y"; /* 2, 4, 5 & 6 only*/
      set OM0MM001.SY1STNBR cursor, modified, bold;
      set OM0MM001.SY2CLRID modified, bold;
      set OM0MM001.XDMCD modified, bold;
      return;
    end
  end

    /* validate nike style, color, dimension combination*/

  if (OM0MM001.XDMCD == "  " /* validate dimension code*/
   || OM0MM001.XDMCD in XDMTBL.XDMCD)
    /* next sentence*/
  else
    converseLib.validationFailed(234); /* dimension code is not valid*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.XDMCD cursor, modified, bold;
    return;
  end


  if (OM0MM001.XDMCD != "  " /* if dimension entered*/
   && OM0MM001.SY1STNBR == " ") /* and style not entered*/
    converseLib.validationFailed(131); /* error - style/color is*/
    OMAREC.OMAERR = "Y"; /* not valid*/
    set OM0MM001.SY1STNBR cursor, modified, bold;
    return;
  end


  if (OM0MM001.SY2CLRID != "  " /* if color entered*/
   && OM0MM001.SY1STNBR == " ") /* and style not entered*/
    converseLib.validationFailed(136); /* error - color alone cannot*/
    OMAREC.OMAERR = "Y"; /* be entered*/
    set OM0MM001.SY1STNBR cursor, modified, bold;
    return;
  end


  if (OM0MM001.XDMCD != " "    /* if dimension entered*/
   && OM0MM001.SY1STNBR != " " /* and style entered*/
   && OM0MM001.SY2CLRID == " ") /* but color not entered*/
    OM0MM001.SY2CLRID = "  "; /* move in a default color*/
  end


  if (OM0MM001.SY2CLRID != " " /* if color entered*/
   && OM0MM001.XDMCD == " ")   /* and dimension not entered*/
    OM0MM001.XDMCD = "00"; /* move in a default dimension*/
  end


    /* style, options, change flag good--finish style edits*/

  if (OM0MM001.SY1STNBR > " " /* if only style entered*/
   && OM0MM001.SY2CLRID == " ") /* validate vs vstyle01*/
    set SY1REC empty; /* table*/
    SY1REC.XGPCD = OP1REC.XGPCD;
    SY1REC.SY1STNBR = OM0MM001.SY1STNBR;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OM0MM001.OMWOPTN == 6
       || OMWREC.OMWMULSO == "Y")
        OMWREC.SY1STNBR = SY1REC.SY1STNBR;
      end
    else
      converseLib.validationFailed(131); /* style/color is not valid*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.SY1STNBR cursor, modified, bold;
      set OM0MM001.SY2CLRID modified, bold;
      set OM0MM001.XDMCD modified, bold;
      return;
    end
  end

  if (OM0MM001.SY1STNBR is modified) /* Udafon*/
    OMWREC.SY1STNBR = OM0MM001.SY1STNBR;
    move " " to OMWREC.OMWSELCD[1] for all;
    move 0 to OMWREC.OP2LNINB[1] for all;
  end

  if (OM0MM001.SY2CLRID is modified) /* Udafon*/
    OMWREC.SY2CLRID = OM0MM001.SY2CLRID;
  end

  if (OM0MM001.XDMCD is modified) /* Udafon*/
    OMWREC.XDMCD = OM0MM001.XDMCD;
  end

  if (OM0MM001.SY1STNBR > " "
   /* if both style & color or dim entered*/
   && OM0MM001.SY2CLRID > " ") /* validate vs. vcolor02 table*/
    set SYCREC empty;
    SYCREC.XGPCD = OP1REC.XGPCD;
    SYCREC.SY1STNBR = OM0MM001.SY1STNBR;
    SYCREC.SY2CLRID = OM0MM001.SY2CLRID;
    SYCREC.XDMCD = OM0MM001.XDMCD;
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OM0MM001.OMWOPTN == 6
       || OMWREC.OMWMULSO == "Y")
        OMWREC.SY1STNBR = SYCREC.SY1STNBR;
        OMWREC.SY2CLRID = SYCREC.SY2CLRID;
        OMWREC.XDMCD = SYCREC.XDMCD;
      end
    else
      converseLib.validationFailed(131);
      OMAREC.OMAERR = "Y";
      set OM0MM001.SY1STNBR cursor, modified, bold;
      set OM0MM001.SY2CLRID modified, bold;
      set OM0MM001.XDMCD modified, bold;
      return;
    end
  end


     /* if only style entered and one suborder*/
     /* (uses flag to determine if style found)*/


  if (OM0MM001.OMWOPTN != 6
   && OM0MM001.SY1STNBR > " "
   && OM0MM001.SY2CLRID == " ")
    if (OMWREC.OMWMULSO == "N")
      set OP2REC empty;
      OMAREC.OMAORDN = OM0MM001.OP1CUOID;
      OP2REC.OP1PARTN = OMAREC.OP1PARTN;
      OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
      OP2REC.OP1NORID = OM0MM001.OP1NORID;
      call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OM0MW01.OM0MWSFL = "N"; /* reset style found flag*/
        OMAREC.OMASUB2 = 0; /* used as line item subscript*/
        while (SQLCA.VAGen_SQLCODE == 0)
          call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0
           && OP2REC.SY1STNBR == OM0MM001.SY1STNBR)
            OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
            OMWREC.OMWSELCD[OMASUB2] = "S";
            OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
            OM0MW01.OM0MWSFL = "Y";
          end
        end /* while*/
        if (OM0MW01.OM0MWSFL == "Y")
          OMWREC.OMWLINES = OMAREC.OMASUB2; /* nbr of items found!!!*/
        else
          converseLib.validationFailed(354);
          OMAREC.OMAERR = "Y";
          set OM0MM001.SY1STNBR cursor, modified, bold;
          set OM0MM001.SY2CLRID modified, bold;
          set OM0MM001.XDMCD modified, bold;
        end
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
        TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS25"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end


     /* if only style entered and multiple suborders*/
     /* (uses counter for number of suborders with style)*/

  if (OM0MM001.OMWOPTN != 6
   && OM0MM001.SY1STNBR > " "
   && OM0MM001.SY2CLRID == " ")
    if (OMWREC.OMWMULSO == "Y")
      set OP2REC empty;
      OMAREC.OMAORDN = OM0MM001.OP1CUOID;
      OP2REC.OP1PARTN = OMAREC.OP1PARTN;
      OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
      OP2REC.OP1NORID = 0;
      call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OMAREC.OMASUB1 = 0; /* used as suborder counter*/
        while (SQLCA.VAGen_SQLCODE == 0)
          call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0
           && OP2REC.SY1STNBR == OM0MM001.SY1STNBR)
  /* AND OMAREC.OMASUB1 < 20;*/
               /* set up for display*/
            OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
            if (OMAREC.OMASUB1 < 21) /* udafon*/
              OMWREC.OMWDSSOR[OMASUB1] = OP2REC.OP1NORID;
            end
            OP1REC.OP1NORID = OP2REC.OP1NORID;
            OMWREC.OMWSELCD[OMASUB1] = "S";
            OMWREC.OP2LNINB[OMASUB1] = OP2REC.OP2LNINB;
          end
        end /* while*/
        if (OMAREC.OMASUB1 > 1)
          OMWREC.OMWMULSO = "Y"; /* there really are more than 1!!*/
        else
          if (OMAREC.OMASUB1 == 1)
            OP1REC.OP1PARTN = OMAREC.OP1PARTN; /* load op1 key*/
            OP1REC.OP1CUOID = OM0MM001.OP1CUOID;
            OM0MS65(); /* get the sub order*/
            OMWREC.OMWDSSOR[1] = 0;
            OMWREC.OMWMULSO = "N";
                                   /* only one found, no select!!!*/
            OMWREC.OMWLINES = OMAREC.OMASUB1;
          else
            converseLib.validationFailed(354);
            OMAREC.OMAERR = "Y";
            set OM0MM001.SY1STNBR cursor, modified, bold;
            set OM0MM001.SY2CLRID modified, bold;
            set OM0MM001.XDMCD modified, bold;
          end
        end
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
        TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS25"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end


     /* if style and color entered and one suborder*/
     /* (uses flag to determine if style found)*/

  if (OM0MM001.OMWOPTN != 6
   && OM0MM001.SY1STNBR > " "
   && OM0MM001.SY2CLRID > " ")
    if (OMWREC.OMWMULSO == "N")
      set OP2REC empty;
      OMAREC.OMAORDN = OM0MM001.OP1CUOID;
      OP2REC.OP1PARTN = OMAREC.OP1PARTN;
      OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
      OP2REC.OP1NORID = OM0MM001.OP1NORID;
      call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OM0MW01.OM0MWSFL = "N"; /* reset style found flag*/
        OMAREC.OMASUB2 = 0; /* used as line item counter*/
        while (SQLCA.VAGen_SQLCODE == 0)
          call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0
           && OP2REC.SY1STNBR == OM0MM001.SY1STNBR
           && OP2REC.SY2CLRID == OM0MM001.SY2CLRID
           && OP2REC.XDMCD == OM0MM001.XDMCD)
  /* AND OMAREC.OMASUB2 < 20;*/
            OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
            if (OMAREC.OMASUB2 < 21) /* udafon*/
              OMWREC.OMWDSSOR[OMASUB2] = OP2REC.OP1NORID;
            end
            OMWREC.OMWSELCD[OMASUB2] = "S";
            OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
            OM0MW01.OM0MWSFL = "Y";
          end
        end /* while*/
        if (OM0MW01.OM0MWSFL == "Y")
          OMWREC.OMWLINES = OMAREC.OMASUB2; /* nbr of items found!!!*/
        else
          converseLib.validationFailed(354);
          OMAREC.OMAERR = "Y";
          set OM0MM001.SY1STNBR cursor, modified, bold;
          set OM0MM001.SY2CLRID modified, bold;
          set OM0MM001.XDMCD modified, bold;
        end
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
        TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS25"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end


     /* if color and style entered and multiple suborders*/
     /* (uses counter for number of suborders with style)*/

  if (OM0MM001.OMWOPTN != 6
   && OM0MM001.SY1STNBR > " "
   && OM0MM001.SY2CLRID > " ")
    if (OMWREC.OMWMULSO == "Y")
      set OP2REC empty;
      OMAREC.OMAORDN = OM0MM001.OP1CUOID;
      OP2REC.OP1PARTN = OMAREC.OP1PARTN;
      OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
      OP2REC.OP1NORID = OM0MM001.OP1NORID;
      call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OMAREC.OMASUB1 = 0; /* used as suborder counter*/
        while (SQLCA.VAGen_SQLCODE == 0)
          call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0
           && OP2REC.SY1STNBR == OM0MM001.SY1STNBR
           && OP2REC.SY2CLRID == OM0MM001.SY2CLRID
           && OP2REC.XDMCD == OM0MM001.XDMCD
           && OMAREC.OMASUB1 < 20)
               /* set up for display*/
            OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
            OMWREC.OMWDSSOR[OMASUB1] = OP2REC.OP1NORID;
            OP1REC.OP1NORID = OP2REC.OP1NORID;
            OMWREC.OMWSELCD[OMASUB1] = "S";
            OMWREC.OP2LNINB[OMASUB1] = OP2REC.OP2LNINB;
          end
        end /* while*/
        if (OMAREC.OMASUB1 > 1)
          OMWREC.OMWMULSO = "Y"; /* there really are more than 1!!*/
        else
          if (OMAREC.OMASUB1 == 1)
            OP1REC.OP1PARTN = OMAREC.OP1PARTN; /* load op1 key*/
            OP1REC.OP1CUOID = OM0MM001.OP1CUOID;
            OM0MS65(); /* get the sub order*/
            OMWREC.OMWDSSOR[1] = 0;
            OMWREC.OMWLINES = OMAREC.OMASUB1; /* nbr of items found!!!*/
            OMWREC.OMWMULSO = "N";
                                   /* only one found, no select!!!*/
          else
            converseLib.validationFailed(354);
            OMAREC.OMAERR = "Y";
            set OM0MM001.SY1STNBR cursor, modified, bold;
            set OM0MM001.SY2CLRID modified, bold;
            set OM0MM001.XDMCD modified, bold;
          end
        end
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
        TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS25"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (OMAREC.OMAERR == "Y")
        return;
      end
    end
  end

                    /* (are you having fun yet?)*/


   /* ********************end statement group********************/
end // end OM0MS25

// customer style edit
Function OM0MS30()

    /* valid options check when customer style is entered*/

  if (OM0MM001.KUIPRDID > " ")
    if (OM0MM001.OMWOPTN == 2
     || OM0MM001.OMWOPTN == 4
     || OM0MM001.OMWOPTN == 5
     || OM0MM001.OMWOPTN == 6)
      set OM0MM001.KUIPRDID initialAttributes;
    else
      converseLib.validationFailed(353); /* style is valid for options 2,4,5,6 only*/
      OMAREC.OMAERR = "Y";
      set OM0MM001.KUIPRDID cursor, modified, bold;
      return;
    end
  else
    return;
  end


    /* style, options, change flag good--finish style edits*/

  set KUCREC empty; /* read cmpy rec vcmpny01*/
  KUCREC.KUCCOID = OP1REC.KUCCOID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    set OM0MM001.KUIPRDID initialAttributes;
  else /* if not found - error*/
    converseLib.validationFailed(33); /* customer not valid*/
    OMAREC.OMAERR = "Y";
    set OM0MM001.KUIPRDID cursor, modified, bold;
    return;
  end

  if (KUCREC.KUCSKIND == " " /* if no cmpy prod codes*/
   || KUCREC.CU-PRT-XREF-FL != "Y") /* or print xref flag not turned on*/
    converseLib.validationFailed(358); /* cust style not valid for this*/
    OMAREC.OMAERR = "Y"; /* company*/
    set OM0MM001.KUIPRDID cursor, modified, bold;
    return;
  end

    /* validate customer style with call to CU1710*/

  OM0MS-CALL-CU1710();

  if (WCU1710-RETURN-CODE == 0)
    set OM0MM001.KUIPRDID initialAttributes;
    if (OM0MM001.OMWOPTN == 6
     || OMWREC.OMWMULSO == "Y")
      OMWREC.SY1STNBR = WCU1710.SY-STY-NBR[1];
      OMWREC.SY2CLRID = WCU1710.SY-COLR-CD-ID[1];
      OMWREC.XDMCD = WCU1710.XDM-DIM-CD[1];
      OMWREC.KUIPRDID = WCU1710.CU-CUST-PROD-ID[1];
    end
  else /* if not found*/
    converseLib.validationFailed(359); /* msg cust style is not*/
    OMAREC.OMAERR = "Y"; /* valid*/
    set OM0MM001.KUIPRDID cursor, modified, bold;
    return;
  end


     /* check to see if items requested actually exist*/


  if (OM0MM001.OMWOPTN != 6
   && OMWREC.OMWMULSO == "N")
    set OP2REC empty;
    OMAREC.OMAORDN = OM0MM001.OP1CUOID;
    OP2REC.OP1PARTN = OMAREC.OP1PARTN;
    OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
    OP2REC.OP1NORID = OM0MM001.OP1NORID;
    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0MW01.OM0MWSFL = "N"; /* reset style found flag*/
      OMAREC.OMASUB2 = 0; /* used as line item counter*/
      while (SQLCA.VAGen_SQLCODE == 0)
        call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0
         && OP2REC.SY1STNBR == WCU1710.SY-STY-NBR[1]
         && OP2REC.SY2CLRID == WCU1710.SY-COLR-CD-ID[1]
         && OP2REC.XDMCD == WCU1710.XDM-DIM-CD[1])
          OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
          OMWREC.OMWSELCD[OMASUB2] = "S";
          OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
          OM0MW01.OM0MWSFL = "Y";
        end
      end /* while*/
      if (OM0MW01.OM0MWSFL == "Y")
        OMWREC.OMWLINES = OMAREC.OMASUB2; /* nbr of items found!!!*/
        set OM0MM001.KUIPRDID initialAttributes;
      else
        converseLib.validationFailed(359);
        OMAREC.OMAERR = "Y";
        set OM0MM001.KUIPRDID cursor, modified, bold;
      end
    else
      TA1REC.TA1DBASE = "DORDER"; /* database used*/
      TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
      TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OM0MS30"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
      OM0MSXS(); /* error handling stmt group*/
    end
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (OMAREC.OMAERR == "Y")
      return;
    end
  end

  if (OM0MM001.OMWOPTN != 6
   && OMWREC.OMWMULSO == "Y")
    set OP2REC empty;
    OMAREC.OMAORDN = OM0MM001.OP1CUOID;
    OP2REC.OP1PARTN = OMAREC.OP1PARTN;
    OP2REC.OP1CUOID = OM0MM001.OP1CUOID;
    OP2REC.OP1NORID = OM0MM001.OP1NORID;
    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OMAREC.OMASUB1 = 0; /* used as suborder counter*/
      while (SQLCA.VAGen_SQLCODE == 0)
        call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0
         && OP2REC.SY1STNBR == WCU1710.SY-STY-NBR[1]
         && OP2REC.SY2CLRID == WCU1710.SY-COLR-CD-ID[1]
         && OP2REC.XDMCD == WCU1710.XDM-DIM-CD[1])
             /* set up for display*/
          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
          OMWREC.OMWDSSOR[OMASUB1] = OP2REC.OP1NORID;
          OP1REC.OP1NORID = OP2REC.OP1NORID;
        end
      end /* while*/
      if (OMAREC.OMASUB1 > 1)
        OMWREC.OMWMULSO = "Y"; /* there really are more than 1!!*/
        set OM0MM001.KUIPRDID initialAttributes;
      else
        if (OMAREC.OMASUB1 == 1)
          OMWREC.OMWMULSO = "N";
                                   /* only one found, no select!!!*/
          OM0MS65(); /* get the suborder*/
          set OM0MM001.KUIPRDID initialAttributes;
        else
          converseLib.validationFailed(359);
          OMAREC.OMAERR = "Y";
          set OM0MM001.KUIPRDID cursor, modified, bold;
        end
      end
    else
      TA1REC.TA1DBASE = "DORDER"; /* database used*/
      TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
      TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OM0MS30"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
      OM0MSXS(); /* error handling stmt group*/
    end
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (OMAREC.OMAERR == "Y")
      return;
    end
  end

end // end OM0MS30

// gets suborders for display
Function OM0MS35()
   /* ********************start statement group******************/
   /* ***********************************************************/
     /* format and display all suborders*/
   /* ***********************************************************/

   /* CANA 07/07/95*/

    /* move op1rec data to the screen for display*/

  if (OMAREC.OMASUB1 == 1) /* first suborder*/
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA if this is a Canadian order*/
      OM0MM002.OM0M-CRCY-CD-1 = OP1REC.ZFC-CRCY-CD; /* CANA*/
      OM0MM002.OM0M-CRCY-CD-2 = OP1REC.ZFC-CRCY-CD; /* CANA*/
    end
    OM0MM002.OP1CUOID = OP1REC.OP1CUOID;
    OM0MM002.KUCCOID = OP1REC.KUCCOID;
    OM0MM002.KUMSTRID = OP1REC.KUMSTRID;
    OM0MM002.XNXCD = OP1REC.XNXCD;
      /* and get store name*/
    set KUMREC empty;
    KUMREC.KUCCOID = OP1REC.KUCCOID;
    KUMREC.KUMSTRID = OP1REC.KUMSTRID;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0MM002.KUMSTRNM = KUMREC.KUMSTRNM;
      OMWREC.KUMSTRNM = KUMREC.KUMSTRNM;
    else
      TA1REC.TA1DBASE = "DCUST"; /* database used*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* view used*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OM0MS35"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* iomod used*/
      OM0MSXS(); /* error handling stmt group*/
    end
  end

  OM0MM002.OP1NORID[OMASUB1] = OP1REC.OP1NORID;

  set TA2REC empty;
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OM0MM002.OM0MMNDT[OMASUB1] = TA2REC.TA2GRGB;
  end

  OM0MM002.XWHCD[OMASUB1] = OP1REC.XWHCD;
  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OM0MM002.XWHSABRV[OMASUB1] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0MM002.XWHSABRV[OMASUB1] = "INACTV";
    end
  end

  OM0MM002.XDSCD[OMASUB1] = OP1REC.XDSCD;

  OM0MM002.XOSCD[OMASUB1] = OP1REC.XOSCD;
  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    OM0MM002.XOSABRV[OMASUB1] = XOSTBL.XOSABRV[sysVar.arrayIndex];
  else
    OM0MM002.XOSABRV[OMASUB1] = " ";
  end

  OM0MM002.XCSCD[OMASUB1] = OP1REC.XCSCD;
  if (OP1REC.XCSCD in XCSTBL.XCSCD)
    OM0MM002.XCSABRV[OMASUB1] = XCSTBL.XCSABRV[sysVar.arrayIndex];
  else
    OM0MM002.XCSABRV[OMASUB1] = " ";
  end

  OM0MM002.OP1OVALU[OMASUB1] = OP1REC.OP1OVALU;
  OM0MM002.OM0MMTVL = OM0MM002.OM0MMTVL + OP1REC.OP1OVALU; /* add value*/

  OM0MM002.OP1OTUNT[OMASUB1] = OP1REC.OP1OTUNT;
  OM0MM002.OM0MMTUN = OM0MM002.OM0MMTUN + OP1REC.OP1OTUNT; /* add units*/



   /* ********************end statement group********************/
end // end OM0MS35

// edit and set up cancel array
Function OM0MS40()
   /* ********************start statement group******************/
   /* ***********************************************************/
     /* edit and set up cancel array*/
   /* ***********************************************************/


     /* check sales office code using first selected suborder*/

  if (OP1REC.XSOCD == COMMAREA.XSOCD)
    /* next sentence*/
  else
    converseLib.validationFailed(355); /* id not authorized to change others*/
    OMAREC.OMAERR = "Y";
    set OM0MM002.OM0MMSEL[1] cursor;
    return;
  end


     /* check cancel allowed flag for selected suborders*/

  OMAREC.OMASUB1 = 10; /* bottoms up!*/
  while (OMAREC.OMASUB1 > 0)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      if (OM0MM002.XOSCD[OMASUB1] in XOSTBL.XOSCD
       && XOSTBL.XOSALWXL[sysVar.arrayIndex] != "N")
        /* next sentence*/
      else
        converseLib.validationFailed(369); /* order status does not allow cancel*/
        OMAREC.OMAERR = "Y";
        set OM0MM002.OM0MMSEL[OMASUB1] cursor, modified, bold;
      end
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1;
  end
  if (OMAREC.OMAERR == "Y")
    return;
  end


     /* check cancel reason code*/

  if (OM0MM002.XOMCD == " ")
    converseLib.validationFailed(400); /* enter cancel reason code...*/
    OMAREC.OMAERR = "Y";
    OM0MM002.OM0MMXLT = "CANCEL REASON:";
    set OM0MM002.OM0MMXLT protect, bold;
    set OM0MM002.XOMCD cursor, normal;
    OM0MM002.OM0MMREL = "REENTER?:";
    set OM0MM002.OM0MMREL protect, bold;
    set OM0MM002.OM0MMREF normal;
    OM0MM002.OM0MMRSN = "1:CHGRSN";
    set OM0MM002.OM0MMRSN protect, bold;
    return;
  else
    OM0MS41(); /* validate cancel reason*/
  end

  if (OMAREC.OMAERR == "Y") /* error found*/
    return;
  end

     /* set up cancel array*/

  OMAREC.OMASUB1 = 1; /* line subscript*/
  OMAREC.OMASUB2 = 1; /* cancel array subscript*/
  while (OMAREC.OMASUB1 < 11)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      OMWREC.OP1SUBXL[OMASUB2] = OM0MM002.OP1NORID[OMASUB1];
      OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end



   /* ********************end statement group********************/
end // end OM0MS40

// validate cancel reason
Function OM0MS41()

   /* ********************start statement group******************/
      /* validate cancel reason code and reenter flag*/
   /* *************************************************************/

     /* enter reenter flag - pf24 cancel*/

  if (OM0MM002.OM0MMREF == "Y"
   || OM0MM002.OM0MMREF == "N")
    OMWREC.OPUCRNTR = OM0MM002.OM0MMREF; /* update omwrec*/
  else
    if (OM0MM002.OM0MMREF == " ")
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(562); /* field required - must enter y or n*/
      set OM0MM002.OM0MMREF cursor, bold;
    else
      OMAREC.OMAERR = "Y";
      converseLib.validationFailed(563); /* invalid character - must be y or n*/
      set OM0MM002.OM0MMREF cursor, bold;
    end
  end



     /* validate cancellation reason code*/


  if (OM0MM002.XOMCD in XOMTBL.XOMCD /* valid maint reason*/
   && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    if (XOMTBL.XOMCANCF[sysVar.arrayIndex] == "D" /* decrease*/
     || XOMTBL.XOMCANCF[sysVar.arrayIndex] == "B") /* both - incr/decr*/
      if (XOMTBL.XOMRBKFL[sysVar.arrayIndex] == "Y") /* rebook reason code*/
        if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid order type*/
         && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
          if (OP1REC.XBDCD == "0" /* reg order*/
           || OP1REC.XBDCD == "1" /* cust bulk*/
           || OP1REC.XBDCD == "5") /* cust draw*/

            OM0MS42(); /* validate agcy/customer*/

            if (OMAREC.OMAERR == "Y") /* error found*/
              return; /* go redisplay map*/
              /* 8/6/91 no longer checking 45 day cancel window for rebook*/
                 /* leave this code in place until the dust settles - when*/
                 /* removing this commented out code also deinstall*/
                 /* om0ms43*/
              /* ELSE                  ; xomcd okay for rebooking*/
                /* OM0MS43             ; check rebook 45 day cancel window*/
                /* IF OMAREC.OMAERR EQ 'Y'    ; error found*/
                  /* EZERTN            ; go redisplay map*/
            else /* xomcd okay for rebooking*/
              OMWREC.XOMCD = OM0MM002.XOMCD; /* update omwrec*/
            end
            /* END ;*/
          else
            converseLib.validationFailed(398); /* must be reg or cust bulk/draw*/
            OMAREC.OMAERR = "Y";
            OM0MM002.OM0MMXLT = "CANCEL REASON:";
            set OM0MM002.OM0MMXLT protect, bold;
            set OM0MM002.XOMCD cursor, bold;
            OM0MM002.OM0MMRSN = "1:CHGRSN";
            set OM0MM002.OM0MMRSN protect, bold;
            return;
          end
        else
          converseLib.validationFailed(396); /* can not rebook non-futures*/
          OMAREC.OMAERR = "Y";
          OM0MM002.OM0MMXLT = "CANCEL REASON:";
          set OM0MM002.OM0MMXLT protect, bold;
          set OM0MM002.XOMCD cursor, bold;
          OM0MM002.OM0MMRSN = "1:CHGRSN";
          set OM0MM002.OM0MMRSN protect, bold;
          return;
        end
      else /* xomcd is valid for cancel*/
        OMWREC.XOMCD = OM0MM002.XOMCD; /* update omwrec*/
      end
    else
      converseLib.validationFailed(334); /* reason does not allow qty reductions*/
      OMAREC.OMAERR = "Y";
      OM0MM002.OM0MMXLT = "CANCEL REASON:";
      set OM0MM002.OM0MMXLT protect, bold;
      set OM0MM002.XOMCD cursor, bold;
      OM0MM002.OM0MMRSN = "1:CHGRSN";
      set OM0MM002.OM0MMRSN protect, bold;
      return;
    end
  else
    converseLib.validationFailed(372); /* invalid cancel reason*/
    OMAREC.OMAERR = "Y";
    OM0MM002.OM0MMXLT = "CANCEL REASON:";
    set OM0MM002.OM0MMXLT protect, bold;
    set OM0MM002.XOMCD cursor, bold;
    OM0MM002.OM0MMRSN = "1:CHGRSN";
    set OM0MM002.OM0MMRSN protect, bold;
    return;
  end






   /* ********************end statement group********************/
end // end OM0MS41

// validate agency/customer
Function OM0MS42()


          /* agency customer edit*/


  set SM1REC empty;
  set TA1REC empty;
  set SQLCA empty;

  SM1REC.SM1AGYID = OP1REC.SM1AGYID; /* setup key*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SM1REC.KUCCOID > 0) /* cust is valid*/
       /* next sentence*/
    else /* cust is not valid*/
      converseLib.validationFailed(391); /* agcy/cust not valid for rebooking*/
      OMAREC.OMAERR = "Y";
      OM0MM002.OM0MMXLT = "CANCEL REASON:";
      set OM0MM002.OM0MMXLT protect, bold;
      set OM0MM002.XOMCD cursor, bold;
      OM0MM002.OM0MMRSN = "1:CHGRSN";
      set OM0MM002.OM0MMRSN protect, bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(205); /* agency is not valid*/
      OMAREC.OMAERR = "Y";
      OM0MM002.OM0MMXLT = "CANCEL REASON:";
      set OM0MM002.OM0MMXLT protect, bold;
      set OM0MM002.XOMCD cursor, bold;
      OM0MM002.OM0MMRSN = "1:CHGRSN";
      set OM0MM002.OM0MMRSN protect, bold;
      return;
    else
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OM0MS42 ";
      TA1REC.TA1LOCAT[3] = "IO0050  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "OM0MM002";
      TA1REC.TA1DBASE = "DSLSMN  ";
      TA1REC.TA1TBLVU = "VSAGCY01";
      TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
      OM0MSXS(); /* abort*/
    end
  end

end // end OM0MS42

// set up line item array
Function OM0MS45()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* set up line item array*/
   /* *************************************************************/

     /* clear array*/

  OMAREC.OMASUB2 = 1;
  while (OMAREC.OMASUB2 < 201)
    OMWREC.OMWSELCD[OMASUB2] = " ";
    OMWREC.OP2LNINB[OMASUB2] = 0; /* udafon*/
    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
  end


     /* clear line counter*/

  OMWREC.OMWLINES = 0;


     /* get item records, build line item array*/

  OMAREC.OMASUB1 = 1; /* used as screen line subscript*/
  OMAREC.OMASUB2 = 0; /* used as line item subscript*/
  while (OMAREC.OMASUB1 < 21)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S")
      set OP2REC empty;
      OMAREC.OMAORDN = OM0MM002.OP1CUOID;
      OP2REC.OP1PARTN = OMAREC.OP1PARTN;
      OP2REC.OP1CUOID = OM0MM002.OP1CUOID;
      OP2REC.OP1NORID = OM0MM002.OP1NORID[OMASUB1];
      call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        while (SQLCA.VAGen_SQLCODE == 0)
          call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0
           && OP2REC.SY1STNBR == OMWREC.SY1STNBR)
            OM0MS50(); /* color/dim/prdid match*/
          end
        end /* while*/
        OMWREC.OMWLINES = OMAREC.OMASUB2; /* nbr line items found!!!*/
  /* MOVE ' ' TO OMWREC.SY1STNBR;        /* clear it!!!*/
  /* MOVE ' ' TO OMWREC.SY2CLRID;        /* clear it!!!*/
  /* MOVE ' ' TO OMWREC.XDMCD;     /* clear it!!!*/
  /* MOVE ' ' TO OMWREC.KUIPRDID;        /* clear it!!!*/
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
        TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OM0MS45"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
        OM0MSXS();
                                   /* error handling stmt group*/
      end
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      OMAREC.OMASUB1 = 99;
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end


                    /* (this is definitely fun!)*/


   /* ********************end statement group********************/
end // end OM0MS45

// color/dim/prdid match check
Function OM0MS50()
   /* ********************start statement group********************/
   /* *************************************************************/
     /* match color, dimension, and product id if they exist*/
   /* *************************************************************/



  if (OMWREC.SY2CLRID > " ")
    if (OMWREC.SY2CLRID == OP2REC.SY2CLRID)
      if (OMWREC.XDMCD > " ")
        if (OMWREC.XDMCD == OP2REC.XDMCD)
          if (OMWREC.KUIPRDID > " ")
            if (OMWREC.KUIPRDID == OP2REC.KUIPRDID)
              OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
              OMWREC.OMWSELCD[OMASUB2] = "S";
              OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
            end
          else
            OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
            OMWREC.OMWSELCD[OMASUB2] = "S";
            OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
          end
        end
      else
        OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
        OMWREC.OMWSELCD[OMASUB2] = "S";
        OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
      end
    end
  else
    OMAREC.OMASUB2 = OMAREC.OMASUB2 + 1;
    OMWREC.OMWSELCD[OMASUB2] = "S";
    OMWREC.OP2LNINB[OMASUB2] = OP2REC.OP2LNINB;
  end



                  /* (welcome to the twilight zone)*/

   /* ********************end statement group********************/
end // end OM0MS50

// check rtc, build message
Function OM0MS60()



       /* ******************************************/
       /* * re-write ord header with new rtc codes,*/
       /* * check refer to credit codes for change,*/
       /* * build message*/
       /* ******************************************/

      /* re-write ord header with new rtc codes*/

  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* write new ord hdr values*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OM0MS50";
    TA1REC.TA1LOCAT[4] = "IO0430";
    OM0MSXS(); /* abort*/
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


      /* if rtc codes changed, show all 3 in ezemsg*/

  if (OM0MW01.OM0MWCD1 != OP1REC.XCHCD[1]
   || OM0MW01.OM0MWCD2 != OP1REC.XCHCD[2]
   || OM0MW01.OM0MWCD3 != OP1REC.XCHCD[3])
    OM0MW01.OM0MWC1 = "ORDER"; /* rtc credit message*/
    OM0MW01.OM0MWCID = OP1REC.OP1CUOID;
    OM0MW01.OM0MWC2 = ".";
    OM0MW01.OM0MWNID = OP1REC.OP1NORID;
    OM0MW01.OM0MWC3 = " REFERRED TO CREDIT:  ";
    OM0MW01.OM0MWC4 = "-";
    OM0MW01.OM0MWC5 = ", ";
    OM0MW01.OM0MWC6 = "-";
    OM0MW01.OM0MWC7 = ", ";
    OM0MW01.OM0MWC8 = "-";
    OM0MW01.OM0MWCD1 = OP1REC.XCHCD[1];
    OM0MW01.OM0MWCD2 = OP1REC.XCHCD[2];
    OM0MW01.OM0MWCD3 = OP1REC.XCHCD[3];
    if (OM0MW01.OM0MWCD3 == 00) /* if no rtc, drop constants*/
      OM0MW01.OM0MWCDC = " ";
      OM0MW01.OM0MWC7 = " ";
      OM0MW01.OM0MWC8 = " ";
    else
      if (OM0MW01.OM0MWCD3 in XCHTBL.XCHCD)
        OM0MW01.OM0MWAB3 = XCHTBL.XCHABRV[sysVar.arrayIndex];
      end
    end
    if (OM0MW01.OM0MWCD2 == 00)
      OM0MW01.OM0MWCDB = " ";
      OM0MW01.OM0MWC5 = " ";
      OM0MW01.OM0MWC6 = " ";
    else
      if (OM0MW01.OM0MWCD2 in XCHTBL.XCHCD)
        OM0MW01.OM0MWAB2 = XCHTBL.XCHABRV[sysVar.arrayIndex];
      end
    end
    if (OM0MW01.OM0MWCD1 in XCHTBL.XCHCD)
      OM0MW01.OM0MWAB1 = XCHTBL.XCHABRV[sysVar.arrayIndex];
    end
  else
    OM0MW01.OM0MWCD1 = 0; /* flag for no message*/
  end


      /* prepare to re-start at top of om0m*/

  COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;



   /* *********************************************************/
end // end OM0MS60

// get the sub-order
Function OM0MS65()

    /* get order header*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XOSCD != "IP")
      OMWREC.OP1GROUP = OP1REC.OP1GROUP; /* update omwrec*/
      OMWREC.OMWORDN = OP1REC.OP1CUOID; /* format order number*/
      OMWREC.OMWSEP1 = ".";
      OMWREC.OMWSORDN = OP1REC.OP1NORID;
      return;
    else
      converseLib.validationFailed(32);
      OMAREC.OMAERR = "Y";
      set OM0MM001.OP1CUOID cursor, modified, bold;
      set OM0MM001.OP1NORID modified, bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(32);
      OMAREC.OMAERR = "Y";
      set OM0MM001.OP1CUOID cursor, modified, bold;
      set OM0MM001.OP1NORID modified, bold;
      return;
    else
      TA1REC.TA1DBASE = "DORDER"; /* database used*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OM0MS10"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
      OM0MSXS(); /* error handling stmt group*/
    end
  end




   /* ********************end statement group********************/
end // end OM0MS65

// EDIT PF7 AND PF8
Function OM0MS70()


    /* check to see if any selections were made*/

  OMAREC.OMASUB1 = 10; /* init subscript*/
  while (OMAREC.OMASUB1 > 0)
    if (OM0MM002.OM0MMSEL[OMASUB1] == "S") /* selection was mad*/
      converseLib.validationFailed(599); /* cannot make selection and page at same time*/
      OMAREC.OMAERR = "Y"; /* set error flag*/
      set OM0MM002.OM0MMSEL[OMASUB1] cursor, bold;
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 - 1; /* increment by -1*/
  end


    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OM0MM002.OM0MMF1P == 1) /* page 1*/
    converseLib.validationFailed(192); /* cannot scroll backward*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OM0MM002.OM0MMF1P == OM0MM002.OM0MMF1M) /* current page = last page*/
    converseLib.validationFailed(191); /* cannot scroll forward*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OM0MM002.OM0MMF1P != OM0MW01.OM0MWF1P) /* current page has changed*/
    converseLib.validationFailed(597); /* cannot chg page # and pf7/pf8 at same time*/
    OMAREC.OMAERR = "Y"; /* set error flag*/
    set OM0MM002.OM0MMF1P cursor, bold;
    OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* reset page number*/
  end


  if (OMAREC.OMAERR == "N") /* no errors*/
    if (converseVar.eventKey is pf7)
      OM0MW01.OM0MWF1P = OM0MW01.OM0MWF1P - 1; /* subtract 1 page*/
    else
      if (converseVar.eventKey is pf8)
        OM0MW01.OM0MWF1P = OM0MW01.OM0MWF1P + 1; /* add 1 page*/
      end
    end
    OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* set map page number*/
  end


end // end OM0MS70

// EDIT MAP PAGE FIELD
Function OM0MS75()


     /* edit page number equal to zero*/

  if (OM0MM002.OM0MMF1P == 0) /* if page # chged to 0*/
    converseLib.validationFailed(600);
                                   /* page number must be greater than zero*/
    OMAREC.OMAERR = "Y"; /* set error on to reconverse screen*/
    set OM0MM002.OM0MMF1P cursor, bold; /* position cursor*/
    OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* reset page #*/
    return;
  end

     /* edit page number greater than maximum page*/

  if (OM0MM002.OM0MMF1P > OM0MM002.OM0MMF1M) /* if page chg gt max page*/
    converseLib.validationFailed(598); /* page cannot exceed max page*/
    OMAREC.OMAERR = "Y"; /* set error on to reconverse screen*/
    set OM0MM002.OM0MMF1P cursor, bold; /* position cursor*/
    OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* reset page #*/
    return;
  end

     /* edit page number and selection made at same time*/

  OMAREC.OMAERR = "Y"; /* set false error flag on for*/
                                   /* reconverse*/
  if (OMAREC.OMASUB2 > 0) /* a suborder was selected*/
    converseLib.validationFailed(599); /* cannot chg flds & page at same time*/
    OM0MM002.OM0MMF1P = OM0MW01.OM0MWF1P; /* reset page number*/
  else
    OM0MW01.OM0MWF1P = OM0MM002.OM0MMF1P; /* format page number*/
    OM0MSR0(); /* read/load temp storage*/
  end

   /* ********************end of statement group******************/
end // end OM0MS75

// BUILD TEMP STORAGE
Function OM0MSB0()
   /* ********************start statement group******************/

     /* nike order id*/

  OM0MW02.OP1NORID[OMASUB1] = OP1REC.OP1NORID;

     /* need date*/

  set TA2REC empty;
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OP1REC.OP1CUNDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OM0MW02.OM0MMNDT[OMASUB1] = TA2REC.TA2GRGB;
  end

     /* warehouse code/abrev*/

  OM0MW02.XWHCD[OMASUB1] = OP1REC.XWHCD;
  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     || OP1REC.XWHCD == " ")
      OM0MW02.XWHSABRV[OMASUB1] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      OM0MW02.XWHSABRV[OMASUB1] = "INACTV";
    end
  end

     /* direct ship flag*/

  OM0MW02.XDSCD[OMASUB1] = OP1REC.XDSCD;

     /* order status code/abrev*/

  OM0MW02.XOSCD[OMASUB1] = OP1REC.XOSCD;
  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    OM0MW02.XOSABRV[OMASUB1] = XOSTBL.XOSABRV[sysVar.arrayIndex];
  else
    OM0MW02.XOSABRV[OMASUB1] = " ";
  end

     /* credit status code/abrev*/

  OM0MW02.XCSCD[OMASUB1] = OP1REC.XCSCD;
  if (OP1REC.XCSCD in XCSTBL.XCSCD)
    OM0MW02.XCSABRV[OMASUB1] = XCSTBL.XCSABRV[sysVar.arrayIndex];
  else
    OM0MW02.XCSABRV[OMASUB1] = " ";
  end

     /* order value*/

  OM0MW02.OP1OVALU[OMASUB1] = OP1REC.OP1OVALU;

     /* order units*/

  OM0MW02.OP1OTUNT[OMASUB1] = OP1REC.OP1OTUNT;


     /* order type for airborne orders*/

  OM0MW02.XOTCD[OMASUB1] = OP1REC.XOTCD;


   /* ********************end statement group********************/
end // end OM0MSB0

// check VITEM001 against VORHDR0
Function OM0MSB1()
   /* ---------------------------------------------------------------*/
    /* This stm group was created only to check if NIKE ORDER ID*/
    /* exists in DORDER.VITEM001 table against DORDER.VORHDR01.*/
    /* NOTE :  the relationship from VORHDR01 to VITEM001 is one*/
    /* to anyone or many.*/
   /* ----------------------------------------  udafon    09/17/98 --*/
  OM0MW01.OM0MW-EOF-SCAN = " ";
  set OP2REC empty;
  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0
     && OM0MW01.OM0MW-EOF-SCAN == " ")
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0
       && OP2REC.SY1STNBR == OMWREC.SY1STNBR)
        OM0MW01.OM0MW-NIKE-ORD-ID = " ";
        OM0MW01.OM0MW-EOF-SCAN = "S";
      else
        OM0MW01.OM0MW-NIKE-ORD-ID = "N";
      end
    end
  else
    TA1REC.TA1DBASE = "DORDER"; /* database used*/
    TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
    TA1REC.TA1LOCAT[3] = "OM0MSB1"; /* statement group used*/
    TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
    OM0MSXS(); /* error handling stmt group*/
  end

  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  if (OMAREC.OMAERR == "Y")
    return;
  end
   /* ---------------------------------------------------------------*/
end // end OM0MSB1

// CLOSE ORDERS SET
Function OM0MSC0()

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0MSC0"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OM0MSXS(); /* general abend*/
  end
end // end OM0MSC0

// SET MAP FIELDS AUTOSKIP,DARK
Function OM0MSD0()
   /* ********************start statement group******************/

     /* om0mm002 select option*/

  set OM0MM002.OM0MMSEL[OMASUB1] skip, invisible;

     /* nike order id*/

  set OM0MM002.OP1NORID[OMASUB1] skip, invisible;

     /* need date*/

  set OM0MM002.OM0MMNDT[OMASUB1] skip, invisible;

     /* warehouse code/abrev*/

  set OM0MM002.XWHCD[OMASUB1] skip, invisible;
  set OM0MM002.XWHSABRV[OMASUB1] skip, invisible;

     /* direct ship flag*/

  set OM0MM002.XDSCD[OMASUB1] skip, invisible;

     /* order status code/abrev*/

  set OM0MM002.XOSCD[OMASUB1] skip, invisible;
  set OM0MM002.XOSABRV[OMASUB1] skip, invisible;

     /* credit status code/abrev*/

  set OM0MM002.XCSCD[OMASUB1] skip, invisible;
  set OM0MM002.XCSABRV[OMASUB1] skip, invisible;

     /* order value*/

  set OM0MM002.OP1OVALU[OMASUB1] skip, invisible;

     /* order units*/

  set OM0MM002.OP1OTUNT[OMASUB1] skip, invisible;



   /* ********************end statement group********************/
end // end OM0MSD0

// LOAD TEMP STORAGE
Function OM0MSL0()

    /* load and write temp storage*/

  set OM0MW02 empty; /* init work record*/
  set TA5REC empty;

  OMAREC.OMASUB1 = 1;

  while (OMAREC.OMASUB1 <= 10
   && OM0MW01.OM0MWEOF == "N")
    if (OP1REC.XOSCD == "IP")
      /* next sentence*/
    else

      OM0MW-TEMP-STORAGE-COUNTER = OM0MW-TEMP-STORAGE-COUNTER + 1;
      if (OMWREC.OMWOPTN == 4
       && OMWREC.SY1STNBR > " ")

        OM0MSB1(); /* check in VITEM001 - udafon*/

        if (OM0MW01.OM0MW-NIKE-ORD-ID == " ")
          OM0MSB0(); /* build temp storage record*/

          OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
          OM0MM002.OM0MMTVL = OM0MM002.OM0MMTVL + OP1REC.OP1OVALU; /* add val*/
          OM0MM002.OM0MMTUN = OM0MM002.OM0MMTUN + OP1REC.OP1OTUNT; /* add uni*/
        end
      else
        OM0MSB0(); /* build temp storage record*/
        OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
        OM0MM002.OM0MMTVL = OM0MM002.OM0MMTVL + OP1REC.OP1OVALU; /* add val*/
        OM0MM002.OM0MMTUN = OM0MM002.OM0MMTUN + OP1REC.OP1OTUNT; /* add uni*/
      end
    end
    OM0MSN0(); /* select next order*/
  end


    /* write temp storage record*/

  if (OMAREC.OMASUB1 > 1) /* at least one order*/
    OM0MS1W(); /* write temp storage*/
  end

   /* ************************************************************/
end // end OM0MSL0

// See if last order in array
Function OM0MSLO()


   /* Search for any remaining order numbers.*/

  OMWREC.OMWLORFL = "Y"; /* Last order flag*/
  OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
                                   /* Start with next order number.*/


  while (OMAREC.OMASUB1 < 21)
    if (OMWREC.OP1CUOID[OMASUB1] != 0)
      OMWREC.OMWLORFL = "N"; /* Last order flag*/
    end

    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1; /* Increment subscript*/

  end
end // end OM0MSLO

// SELECT NEXT ORDER 4 TEMP STORE
Function OM0MSN0()

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OM0MW01.OM0MWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "OM0MSN0"; /* statement group*/
      TA1REC.TA1TBLKE = " "; /* clear table key*/
      OM0MW01.OM0MWPAR = OP1REC.OP1PARTN; /* frmt display part char*/
      OM0MW01.OM0MWCOI = OP1REC.OP1CUOID; /* frmt display cust ord id*/
      OM0MW01.OM0MWNOI = OP1REC.OP1NORID; /* frmt display nike ord id*/
      TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* order key*/
      TA1REC.TA1LOCAT[4] = " "; /* order key*/
      OM0MSXS(); /* general abend*/
    end
  end
end // end OM0MSN0

// READ/LOAD TEMP STORAGE
Function OM0MSR0()


  OM0MS1R(); /* read temp storage*/

  OMAREC.OMASUB1 = 1;
  while (OMAREC.OMASUB1 <= 10)
    if (OM0MW02.OP1NORID[OMASUB1] == 0) /* if no more suborders*/
      OM0MSD0(); /* set fields autoskip,dark*/
    else
      OM0MSW0(); /* load map fields*/
    end
    OMAREC.OMASUB1 = OMAREC.OMASUB1 + 1;
  end

   /* ********************end of statement group******************/
end // end OM0MSR0

// SELECT ALL ORDERS 4 TEMP STORE
Function OM0MSS0()

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OM0MSS0"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OM0MW01.OM0MWPAR = OP1REC.OP1PARTN; /* frmt display part char*/
    OM0MW01.OM0MWCOI = OP1REC.OP1CUOID; /* frmt display cust ord id*/
    OM0MW01.OM0MWNOI = OP1REC.OP1NORID; /* frmt display nike ord id*/
    TA1REC.TA1TBLKE = OM0MW01.OM0MWDON; /* order key*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    OM0MSXS(); /* general abend*/
  end
end // end OM0MSS0

// BUILD MAP FOR SUBORDERS
Function OM0MSW0()
   /* ********************start statement group******************/
   /* ***********************************************************/
     /* format and display all suborders in temp storage*/
   /* ***********************************************************/

    /* CANADA 07/07/95*/

    /* format header info*/

  if (OMAREC.OMASUB1 == 1) /* first suborder*/
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA if this is a Canadian order*/
      OM0MM002.OM0M-CRCY-CD-1 = OP1REC.ZFC-CRCY-CD; /* CANA*/
      OM0MM002.OM0M-CRCY-CD-2 = OP1REC.ZFC-CRCY-CD; /* CANA*/
    end
    OM0MM002.OP1CUOID = OP1REC.OP1CUOID;
    OM0MM002.KUCCOID = OP1REC.KUCCOID;
    OM0MM002.KUMSTRID = OP1REC.KUMSTRID;
    OM0MM002.XNXCD = OP1REC.XNXCD;
      /* and get store name*/
    set KUMREC empty;
    KUMREC.KUCCOID = OP1REC.KUCCOID;
    KUMREC.KUMSTRID = OP1REC.KUMSTRID;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OM0MM002.KUMSTRNM = KUMREC.KUMSTRNM;
      OMWREC.KUMSTRNM = KUMREC.KUMSTRNM;
    else
      TA1REC.TA1DBASE = "DCUST"; /* database used*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* view used*/
      TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OM0MS35"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0340"; /* iomod used*/
      OM0MSXS(); /* error handling stmt group*/
    end
  end

     /* om0mm002 select field*/

  set OM0MM002.OM0MMSEL[OMASUB1] initialAttributes;
  OM0MM002.OM0MMSEL[OMASUB1] = OM0MW02.OM0MMSEL[OMASUB1];

     /* nike order id*/

  set OM0MM002.OP1NORID[OMASUB1] initialAttributes;
  OM0MM002.OP1NORID[OMASUB1] = OM0MW02.OP1NORID[OMASUB1];

     /* need date*/

  set OM0MM002.OM0MMNDT[OMASUB1] initialAttributes;
  OM0MM002.OM0MMNDT[OMASUB1] = OM0MW02.OM0MMNDT[OMASUB1];

     /* warehouse code/abrev*/

  set OM0MM002.XWHCD[OMASUB1] initialAttributes;
  OM0MM002.XWHCD[OMASUB1] = OM0MW02.XWHCD[OMASUB1];
  set OM0MM002.XWHSABRV[OMASUB1] initialAttributes;
  OM0MM002.XWHSABRV[OMASUB1] = OM0MW02.XWHSABRV[OMASUB1];

     /* direct ship flag*/

  set OM0MM002.XDSCD[OMASUB1] initialAttributes;
  OM0MM002.XDSCD[OMASUB1] = OM0MW02.XDSCD[OMASUB1];

     /* order status code/abrev*/

  set OM0MM002.XOSCD[OMASUB1] initialAttributes;
  OM0MM002.XOSCD[OMASUB1] = OM0MW02.XOSCD[OMASUB1];
  set OM0MM002.XOSABRV[OMASUB1] initialAttributes;
  OM0MM002.XOSABRV[OMASUB1] = OM0MW02.XOSABRV[OMASUB1];

     /* credit status code/abrev*/

  set OM0MM002.XCSCD[OMASUB1] initialAttributes;
  OM0MM002.XCSCD[OMASUB1] = OM0MW02.XCSCD[OMASUB1];
  set OM0MM002.XCSABRV[OMASUB1] initialAttributes;
  OM0MM002.XCSABRV[OMASUB1] = OM0MW02.XCSABRV[OMASUB1];

     /* order value*/

  set OM0MM002.OP1OVALU[OMASUB1] initialAttributes;
  OM0MM002.OP1OVALU[OMASUB1] = OM0MW02.OP1OVALU[OMASUB1];

     /* order units*/

  set OM0MM002.OP1OTUNT[OMASUB1] initialAttributes;
  OM0MM002.OP1OTUNT[OMASUB1] = OM0MW02.OP1OTUNT[OMASUB1];



   /* ********************end statement group********************/
end // end OM0MSW0

// abort routine
Function OM0MSXS()



      /* *********************************************************/
      /* * online abort routine for OP0N application            **/
      /* *********************************************************/

  OM0MS1P(); /* purge temp storage*/


  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/



   /* *************************************************************/
end // end OM0MSXS

Record OM0MW01 type basicRecord
  10 OM0MWSFL OM0MWSFL ; 
  10 OM0MWDON OM0MWDON ; 
    15 OM0MWPAR OM0MWPAR ; 
    15 OM0MWCOI OM0MWCOI ; 
    15 OM0MWNOI OM0MWNOI ; 
  10 CAFROMAP CAFROMAP ; 
    15 OM0MWAP3 OM0MWAP3 ; 
    15 * char(1) ; 
  10 OM0MWMSG OM0MWMSG ; 
    15 OM0MWC1 OM0MWC1 ; 
    15 OM0MWCID OM0MWCID ; 
    15 OM0MWC2 OM0MWC2 ; 
    15 OM0MWNID OM0MWNID ; 
    15 OM0MWC3 OM0MWC3 ; 
    15 OM0MWCDA OM0MWCDA ; 
      20 OM0MWCD1 OM0MWCD1 ; 
    15 OM0MWC4 OM0MWC4 ; 
    15 OM0MWAB1 OM0MWAB1 ; 
    15 OM0MWC5 OM0MWC5 ; 
    15 OM0MWCDB OM0MWCDB ; 
      20 OM0MWCD2 OM0MWCD2 ; 
    15 OM0MWC6 OM0MWC6 ; 
    15 OM0MWAB2 OM0MWAB2 ; 
    15 OM0MWC7 OM0MWC7 ; 
    15 OM0MWCDC OM0MWCDC ; 
      20 OM0MWCD3 OM0MWCD3 ; 
    15 OM0MWC8 OM0MWC8 ; 
    15 OM0MWAB3 OM0MWAB3 ; 
  10 OM0MWEOF OM0MWEOF ; 
  10 OM0MWF1P OM0MWF1P ; 
  10 OM0MWF1M OM0MWF1M ; 
  10 OM0MW911 OM0MW911 ; 
  10 OM0MW-OS0Q-FL OM0MW-OS0Q-FL ; 
  10 OM0MW-MAX-SEQ OM0MW-MAX-SEQ ; 
  10 OM0MW-NIKE-ORD-ID OM0MW-NIKE-ORD-ID ; 
  10 OM0MW-EOF-SCAN OM0MW-EOF-SCAN ; 
  10 OM0MW-TEMP-STORAGE-COUNTER OM0MW-TEMP-STORAGE-COUNTER ; 
end // end OM0MW01

//*** RECORD=OM0MW02 ****
// *     Temporary storage record used to hold selected
// *     for the OM0M application
// *
// *     CSP Record: OM0MW02
// *
// *     OM0M Statement Groups: OM0MS1P - Purge
// *                            OM0MS1W - Write
// *                            OM0MS1R - Read
// *                            OM0MS1U - Update
// *
// *
// ***********************
Record OM0MW02 type basicRecord
  5 OM0MWGRP OM0MWGRP ; 
    10 OM0MWLEN OM0MWLEN ; 
    10 OM0MWROW OM0MWROW [20] ; 
      15 OM0MMSEL OM0MMSEL ; 
      15 OP1NORID OP1NORID ; 
      15 OM0MMNDT OM0MMNDT ; 
      15 XWHCD XWHCD ; 
      15 XWHSABRV XWHSABRV ; 
      15 XDSCD XDSCD ; 
      15 XOSCD XOSCD ; 
      15 XOSABRV XOSABRV ; 
      15 XCSCD XCSCD ; 
      15 XCSABRV XCSABRV ; 
      15 OP1OVALU OP1OVALU ; 
      15 OP1OTUNT OP1OTUNT ; 
      15 XOTCD XOTCD ; 
end // end OM0MW02

// op-cust-need-dt
DataItem OM0MMNDT char(8)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// suborder selection
DataItem OM0MMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0MW-EOF-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0MW-MAX-SEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0MW-NIKE-ORD-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// came from os0q appl flag
DataItem OM0MW-OS0Q-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OM0MW-TEMP-STORAGE-COUNTER smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// -911 flag for menu services
DataItem OM0MW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc abrv 1
DataItem OM0MWAB1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc abrv 2
DataItem OM0MWAB2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc abrv 3
DataItem OM0MWAB3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first 3 char of appl
DataItem OM0MWAP3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'order '
DataItem OM0MWC1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '.'
DataItem OM0MWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ' referred to credit:  '
DataItem OM0MWC3 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OM0MWC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ', '
DataItem OM0MWC5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OM0MWC6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ', '
DataItem OM0MWC7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '-'
DataItem OM0MWC8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc code 1 numeric
DataItem OM0MWCD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rtc code 2 numeric
DataItem OM0MWCD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rtc code 3 numeric
DataItem OM0MWCD3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rtc code 1 character
DataItem OM0MWCDA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc code 2 character
DataItem OM0MWCDB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtc code 3 character
DataItem OM0MWCDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem OM0MWCID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust ord id
DataItem OM0MWCOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display order number
DataItem OM0MWDON char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select orders eof flag
DataItem OM0MWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage max page
DataItem OM0MWF1M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage page number
DataItem OM0MWF1P smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem OM0MWGRP char(1004)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgnth
DataItem OM0MWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OM0MWMSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem OM0MWNID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike ord id
DataItem OM0MWNOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part char
DataItem OM0MWPAR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem OM0MWROW char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style found flag
DataItem OM0MWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

